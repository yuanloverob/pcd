{
  "cve_id": "CVE-2024-1892",
  "cve_desc": "A Regular Expression Denial of Service (ReDoS) vulnerability exists in the XMLFeedSpider class of the scrapy/scrapy project, specifically in the parsing of XML content. By crafting malicious XML content that exploits inefficient regular expression complexity used in the parsing process, an attacker can cause a denial-of-service (DoS) condition. This vulnerability allows for the system to hang and consume significant resources, potentially rendering services that utilize Scrapy for XML processing unresponsive.",
  "repo": "scrapy/scrapy",
  "patch_hash": "479619b340f197a8f24c5db45bc068fb8755f2c5",
  "patch_info": {
    "commit_hash": "479619b340f197a8f24c5db45bc068fb8755f2c5",
    "repo": "scrapy/scrapy",
    "commit_url": "https://github.com/scrapy/scrapy/commit/479619b340f197a8f24c5db45bc068fb8755f2c5",
    "files": [
      "docs/faq.rst",
      "docs/news.rst",
      "docs/topics/debug.rst",
      "scrapy/spiders/feed.py",
      "scrapy/utils/iterators.py",
      "scrapy/utils/response.py",
      "tests/test_spider.py",
      "tests/test_utils_iterators.py",
      "tests/test_utils_response.py"
    ],
    "message": "Merge branch '2.11-redos' into 2.11",
    "before_after_code_files": [
      "scrapy/spiders/feed.py||scrapy/spiders/feed.py",
      "scrapy/utils/iterators.py||scrapy/utils/iterators.py",
      "scrapy/utils/response.py||scrapy/utils/response.py",
      "tests/test_spider.py||tests/test_spider.py",
      "tests/test_utils_iterators.py||tests/test_utils_iterators.py",
      "tests/test_utils_response.py||tests/test_utils_response.py"
    ]
  },
  "patch_diff": {
    "scrapy/spiders/feed.py||scrapy/spiders/feed.py": [
      "File: scrapy/spiders/feed.py -> scrapy/spiders/feed.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from scrapy.exceptions import NotConfigured, NotSupported",
      "8: from scrapy.selector import Selector",
      "9: from scrapy.spiders import Spider",
      "11: from scrapy.utils.spider import iterate_spider_output",
      "",
      "[Removed Lines]",
      "10: from scrapy.utils.iterators import csviter, xmliter",
      "",
      "[Added Lines]",
      "10: from scrapy.utils.iterators import csviter, xmliter_lxml",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:         return self.parse_nodes(response, nodes)",
      "86:     def _iternodes(self, response):",
      "88:             self._register_namespaces(node)",
      "89:             yield node",
      "",
      "[Removed Lines]",
      "87:         for node in xmliter(response, self.itertag):",
      "",
      "[Added Lines]",
      "87:         for node in xmliter_lxml(response, self.itertag):",
      "",
      "---------------"
    ],
    "scrapy/utils/iterators.py||scrapy/utils/iterators.py": [
      "File: scrapy/utils/iterators.py -> scrapy/utils/iterators.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:     cast,",
      "17:     overload,",
      "18: )",
      "20: from scrapy.http import Response, TextResponse",
      "21: from scrapy.selector import Selector",
      "22: from scrapy.utils.python import re_rsearch, to_unicode",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: from warnings import warn",
      "21: from lxml import etree",
      "23: from scrapy.exceptions import ScrapyDeprecationWarning",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38:     - a unicode string",
      "39:     - a string encoded as utf-8",
      "40:     \"\"\"",
      "41:     nodename_patt = re.escape(nodename)",
      "43:     DOCUMENT_HEADER_RE = re.compile(r\"<\\?xml[^>]+>\\s*\", re.S)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:     warn(",
      "46:         (",
      "47:             \"xmliter is deprecated and its use strongly discouraged because \"",
      "48:             \"it is vulnerable to ReDoS attacks. Use xmliter_lxml instead. See \"",
      "49:             \"https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9\"",
      "50:         ),",
      "51:         ScrapyDeprecationWarning,",
      "52:         stacklevel=2,",
      "53:     )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "81:     namespace: Optional[str] = None,",
      "82:     prefix: str = \"x\",",
      "83: ) -> Generator[Selector, Any, None]:",
      "86:     reader = _StreamReader(obj)",
      "87:     tag = f\"{{{namespace}}}{nodename}\" if namespace else nodename",
      "88:     iterable = etree.iterparse(",
      "90:     )",
      "91:     selxpath = \"//\" + (f\"{prefix}:{nodename}\" if namespace else nodename)",
      "93:         nodetext = etree.tostring(node, encoding=\"unicode\")",
      "94:         node.clear()",
      "95:         xs = Selector(text=nodetext, type=\"xml\")",
      "",
      "[Removed Lines]",
      "84:     from lxml import etree",
      "89:         cast(\"SupportsReadClose[bytes]\", reader), tag=tag, encoding=reader.encoding",
      "92:     for _, node in iterable:",
      "",
      "[Added Lines]",
      "101:         cast(\"SupportsReadClose[bytes]\", reader),",
      "102:         encoding=reader.encoding,",
      "103:         events=(\"end\", \"start-ns\"),",
      "104:         huge_tree=True,",
      "107:     needs_namespace_resolution = not namespace and \":\" in nodename",
      "108:     if needs_namespace_resolution:",
      "109:         prefix, nodename = nodename.split(\":\", maxsplit=1)",
      "110:     for event, data in iterable:",
      "111:         if event == \"start-ns\":",
      "112:             assert isinstance(data, tuple)",
      "113:             if needs_namespace_resolution:",
      "114:                 _prefix, _namespace = data",
      "115:                 if _prefix != prefix:",
      "116:                     continue",
      "117:                 namespace = _namespace",
      "118:                 needs_namespace_resolution = False",
      "119:                 selxpath = f\"//{prefix}:{nodename}\"",
      "120:                 tag = f\"{{{namespace}}}{nodename}\"",
      "121:             continue",
      "122:         assert isinstance(data, etree._Element)",
      "123:         node = data",
      "124:         if node.tag != tag:",
      "125:             continue",
      "",
      "---------------"
    ],
    "scrapy/utils/response.py||scrapy/utils/response.py": [
      "File: scrapy/utils/response.py -> scrapy/utils/response.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:     return b\"\".join(values)",
      "77: def open_in_browser(",
      "78:     response: Union[",
      "79:         \"scrapy.http.response.html.HtmlResponse\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "77: def _remove_html_comments(body):",
      "78:     start = body.find(b\"<!--\")",
      "79:     while start != -1:",
      "80:         end = body.find(b\"-->\", start + 1)",
      "81:         if end == -1:",
      "82:             return body[:start]",
      "83:         else:",
      "84:             body = body[:start] + body[end + 3 :]",
      "85:             start = body.find(b\"<!--\")",
      "86:     return body",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "81:     ],",
      "82:     _openfunc: Callable[[str], Any] = webbrowser.open,",
      "83: ) -> Any:",
      "86:     \"\"\"",
      "87:     from scrapy.http import HtmlResponse, TextResponse",
      "",
      "[Removed Lines]",
      "84:     \"\"\"Open the given response in a local web browser, populating the <base>",
      "85:     tag for external links to work",
      "",
      "[Added Lines]",
      "96:     \"\"\"Open *response* in a local web browser, adjusting the `base tag`_ for",
      "97:     external links to work, e.g. so that images and styles are displayed.",
      "99:     .. _base tag: https://www.w3schools.com/tags/tag_base.asp",
      "101:     For example:",
      "103:     .. code-block:: python",
      "105:         from scrapy.utils.response import open_in_browser",
      "108:         def parse_details(self, response):",
      "109:             if \"item name\" not in response.body:",
      "110:                 open_in_browser(response)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "90:     body = response.body",
      "91:     if isinstance(response, HtmlResponse):",
      "92:         if b\"<base\" not in body:",
      "96:         ext = \".html\"",
      "97:     elif isinstance(response, TextResponse):",
      "98:         ext = \".txt\"",
      "",
      "[Removed Lines]",
      "93:             repl = rf'\\1<base href=\"{response.url}\">'",
      "94:             body = re.sub(b\"<!--.*?-->\", b\"\", body, flags=re.DOTALL)",
      "95:             body = re.sub(rb\"(<head(?:>|\\s.*?>))\", to_bytes(repl), body)",
      "",
      "[Added Lines]",
      "118:             _remove_html_comments(body)",
      "119:             repl = rf'\\0<base href=\"{response.url}\">'",
      "120:             body = re.sub(rb\"<head(?:[^<>]*?>)\", to_bytes(repl), body, count=1)",
      "",
      "---------------"
    ],
    "tests/test_spider.py||tests/test_spider.py": [
      "File: tests/test_spider.py -> tests/test_spider.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "151:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "152:         <urlset xmlns:x=\"http://www.google.com/schemas/sitemap/0.84\"",
      "153:                 xmlns:y=\"http://www.example.com/schemas/extras/1.0\">",
      "155:             <other value=\"bar\" y:custom=\"fuu\"/>",
      "156:         </url>",
      "158:         </urlset>\"\"\"",
      "159:         response = XmlResponse(url=\"http://example.com/sitemap.xml\", body=body)",
      "",
      "[Removed Lines]",
      "154:         <url><x:loc>http://www.example.com/Special-Offers.html</loc><y:updated>2009-08-16</updated>",
      "157:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</updated><other value=\"foo\"/></url>",
      "",
      "[Added Lines]",
      "154:         <url><x:loc>http://www.example.com/Special-Offers.html</x:loc><y:updated>2009-08-16</y:updated>",
      "157:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</y:updated><other value=\"foo\"/></url>",
      "",
      "---------------"
    ],
    "tests/test_utils_iterators.py||tests/test_utils_iterators.py": [
      "File: tests/test_utils_iterators.py -> tests/test_utils_iterators.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: from twisted.trial import unittest",
      "4: from scrapy.http import Response, TextResponse, XmlResponse",
      "5: from scrapy.utils.iterators import _body_or_str, csviter, xmliter, xmliter_lxml",
      "6: from tests import get_testdata",
      "12:     def test_xmliter(self):",
      "13:         body = b\"\"\"",
      "14:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "1: from pytest import mark",
      "9: class XmliterTestCase(unittest.TestCase):",
      "10:     xmliter = staticmethod(xmliter)",
      "",
      "[Added Lines]",
      "1: import pytest",
      "4: from scrapy.exceptions import ScrapyDeprecationWarning",
      "10: class XmliterBaseTestCase:",
      "11:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:             attrs, [(\"001\", [\"Name 1\"], [\"Type 1\"]), (\"002\", [\"Name 2\"], [\"Type 2\"])]",
      "41:         )",
      "43:     def test_xmliter_unusual_node(self):",
      "44:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "45:             <root>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53:         ]",
      "54:         self.assertEqual(nodenames, [[\"matchme...\"]])",
      "56:     def test_xmliter_unicode(self):",
      "57:         # example taken from https://github.com/scrapy/scrapy/issues/1665",
      "58:         body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "112:                 [(\"26\", [\"-\"], [\"80\"]), (\"21\", [\"Ab\"], [\"76\"]), (\"27\", [\"A\"], [\"27\"])],",
      "113:             )",
      "115:     def test_xmliter_text(self):",
      "116:         body = (",
      "117:             '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "123:             [[\"one\"], [\"two\"]],",
      "124:         )",
      "126:     def test_xmliter_namespaces(self):",
      "127:         body = b\"\"\"",
      "128:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "162:         self.assertEqual(node.xpath(\"id/text()\").getall(), [])",
      "163:         self.assertEqual(node.xpath(\"price/text()\").getall(), [])",
      "165:     def test_xmliter_namespaced_nodename(self):",
      "166:         body = b\"\"\"",
      "167:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "190:             [\"http://www.mydummycompany.com/images/item1.jpg\"],",
      "191:         )",
      "193:     def test_xmliter_namespaced_nodename_missing(self):",
      "194:         body = b\"\"\"",
      "195:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "198:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "214:         with self.assertRaises(StopIteration):",
      "215:             next(my_iter)",
      "217:     def test_xmliter_exception(self):",
      "218:         body = (",
      "219:             '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "227:         self.assertRaises(StopIteration, next, iter)",
      "229:     def test_xmliter_objtype_exception(self):",
      "230:         i = self.xmliter(42, \"product\")",
      "231:         self.assertRaises(TypeError, next, i)",
      "233:     def test_xmliter_encoding(self):",
      "234:         body = (",
      "235:             b'<?xml version=\"1.0\" encoding=\"ISO-8859-9\"?>\\n'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "236:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "241:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "244:         )",
      "254:     def test_xmliter_iterate_namespace(self):",
      "255:         body = b\"\"\"",
      "",
      "[Removed Lines]",
      "247: class LxmlXmliterTestCase(XmliterTestCase):",
      "248:     xmliter = staticmethod(xmliter_lxml)",
      "250:     @mark.xfail(reason=\"known bug of the current implementation\")",
      "251:     def test_xmliter_namespaced_nodename(self):",
      "252:         super().test_xmliter_namespaced_nodename()",
      "",
      "[Added Lines]",
      "256: class XmliterTestCase(XmliterBaseTestCase, unittest.TestCase):",
      "257:     xmliter = staticmethod(xmliter)",
      "259:     def test_deprecation(self):",
      "260:         body = b\"\"\"",
      "261:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "262:             <products>",
      "263:               <product></product>",
      "264:             </products>",
      "265:         \"\"\"",
      "266:         with pytest.warns(",
      "267:             ScrapyDeprecationWarning,",
      "268:             match=\"xmliter\",",
      "269:         ):",
      "270:             next(self.xmliter(body, \"product\"))",
      "273: class LxmlXmliterTestCase(XmliterBaseTestCase, unittest.TestCase):",
      "274:     xmliter = staticmethod(xmliter_lxml)",
      "",
      "---------------"
    ],
    "tests/test_utils_response.py||tests/test_utils_response.py": [
      "File: tests/test_utils_response.py -> tests/test_utils_response.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import unittest",
      "2: import warnings",
      "3: from pathlib import Path",
      "4: from urllib.parse import urlparse",
      "6: from scrapy.exceptions import ScrapyDeprecationWarning",
      "7: from scrapy.http import HtmlResponse, Response, TextResponse",
      "8: from scrapy.utils.python import to_bytes",
      "9: from scrapy.utils.response import (",
      "10:     get_base_url,",
      "11:     get_meta_refresh,",
      "12:     open_in_browser,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: from time import process_time",
      "7: import pytest",
      "13:     _remove_html_comments,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "198:         assert open_in_browser(",
      "199:             r5, _openfunc=check_base_url",
      "200:         ), \"Inject unique base url with conditional comment\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "206:     def test_open_in_browser_redos_comment(self):",
      "207:         MAX_CPU_TIME = 0.001",
      "209:         # Exploit input from",
      "210:         # https://makenowjust-labs.github.io/recheck/playground/",
      "211:         # for /<!--.*?-->/ (old pattern to remove comments).",
      "212:         body = b\"-><!--\\x00\" * 25_000 + b\"->\\n<!---->\"",
      "214:         response = HtmlResponse(\"https://example.com\", body=body)",
      "216:         start_time = process_time()",
      "218:         open_in_browser(response, lambda url: True)",
      "220:         end_time = process_time()",
      "221:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
      "223:     def test_open_in_browser_redos_head(self):",
      "224:         MAX_CPU_TIME = 0.001",
      "226:         # Exploit input from",
      "227:         # https://makenowjust-labs.github.io/recheck/playground/",
      "228:         # for /(<head(?:>|\\s.*?>))/ (old pattern to find the head element).",
      "229:         body = b\"<head\\t\" * 8_000",
      "231:         response = HtmlResponse(\"https://example.com\", body=body)",
      "233:         start_time = process_time()",
      "235:         open_in_browser(response, lambda url: True)",
      "237:         end_time = process_time()",
      "238:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
      "241: @pytest.mark.parametrize(",
      "242:     \"input_body,output_body\",",
      "243:     (",
      "244:         (",
      "245:             b\"a<!--\",",
      "246:             b\"a\",",
      "247:         ),",
      "248:         (",
      "249:             b\"a<!---->b\",",
      "250:             b\"ab\",",
      "251:         ),",
      "252:         (",
      "253:             b\"a<!--b-->c\",",
      "254:             b\"ac\",",
      "255:         ),",
      "256:         (",
      "257:             b\"a<!--b-->c<!--\",",
      "258:             b\"ac\",",
      "259:         ),",
      "260:         (",
      "261:             b\"a<!--b-->c<!--d\",",
      "262:             b\"ac\",",
      "263:         ),",
      "264:         (",
      "265:             b\"a<!--b-->c<!---->d\",",
      "266:             b\"acd\",",
      "267:         ),",
      "268:         (",
      "269:             b\"a<!--b--><!--c-->d\",",
      "270:             b\"ad\",",
      "271:         ),",
      "272:     ),",
      "273: )",
      "274: def test_remove_html_comments(input_body, output_body):",
      "275:     assert (",
      "276:         _remove_html_comments(input_body) == output_body",
      "277:     ), f\"{_remove_html_comments(input_body)=} == {output_body=}\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0c4a98f8e072ccc26a393e51066b52f1f2f6b4d7",
      "candidate_info": {
        "commit_hash": "0c4a98f8e072ccc26a393e51066b52f1f2f6b4d7",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/0c4a98f8e072ccc26a393e51066b52f1f2f6b4d7",
        "files": [
          "scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/utils/_compression.py",
          "scrapy/utils/gz.py",
          "tests/sample_data/compressed/bomb-deflate.bin",
          "tests/test_downloadermiddleware_httpcompression.py"
        ],
        "message": "Protect against deflate bombs",
        "before_after_code_files": [
          "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/utils/_compression.py||scrapy/utils/_compression.py",
          "scrapy/utils/gz.py||scrapy/utils/gz.py",
          "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
          "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import io",
          "2: import warnings",
          "5: from scrapy.exceptions import IgnoreRequest, NotConfigured",
          "6: from scrapy.http import Response, TextResponse",
          "7: from scrapy.responsetypes import responsetypes",
          "9: from scrapy.utils.deprecate import ScrapyDeprecationWarning",
          "10: from scrapy.utils.gz import gunzip",
          "",
          "[Removed Lines]",
          "3: import zlib",
          "8: from scrapy.utils._compression import _DecompressionMaxSizeExceeded",
          "",
          "[Added Lines]",
          "7: from scrapy.utils._compression import _DecompressionMaxSizeExceeded, _inflate",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:     def _decode(self, body, encoding):",
          "99:         if encoding == b\"gzip\" or encoding == b\"x-gzip\":",
          "102:         if encoding == b\"deflate\":",
          "112:         if encoding == b\"br\" and b\"br\" in ACCEPTED_ENCODINGS:",
          "114:         if encoding == b\"zstd\" and b\"zstd\" in ACCEPTED_ENCODINGS:",
          "115:             # Using its streaming API since its simple API could handle only cases",
          "116:             # where there is content size data embedded in the frame",
          "117:             reader = zstandard.ZstdDecompressor().stream_reader(io.BytesIO(body))",
          "119:         return body",
          "",
          "[Removed Lines]",
          "100:             body = gunzip(body, max_size=self._max_size)",
          "103:             try:",
          "104:                 body = zlib.decompress(body)",
          "105:             except zlib.error:",
          "106:                 # ugly hack to work with raw deflate content that may",
          "107:                 # be sent by microsoft servers. For more information, see:",
          "108:                 # http://carsten.codimi.de/gzip.yaws/",
          "109:                 # http://www.port80software.com/200ok/archive/2005/10/31/868.aspx",
          "110:                 # http://www.gzip.org/zlib/zlib_faq.html#faq38",
          "111:                 body = zlib.decompress(body, -15)",
          "113:             body = brotli.decompress(body)",
          "118:             body = reader.read()",
          "",
          "[Added Lines]",
          "99:             return gunzip(body, max_size=self._max_size)",
          "101:             return _inflate(body, max_size=self._max_size)",
          "103:             return brotli.decompress(body)",
          "108:             return reader.read()",
          "",
          "---------------"
        ],
        "scrapy/utils/_compression.py||scrapy/utils/_compression.py": [
          "File: scrapy/utils/_compression.py -> scrapy/utils/_compression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: class _DecompressionMaxSizeExceeded(ValueError):",
          "2:     pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import zlib",
          "2: from io import BytesIO",
          "3: from typing import List",
          "10: def _inflate(data: bytes, *, max_size: int = 0) -> bytes:",
          "11:     decompressor = zlib.decompressobj()",
          "12:     raw_decompressor = zlib.decompressobj(wbits=-15)",
          "13:     input_stream = BytesIO(data)",
          "14:     output_list: List[bytes] = []",
          "15:     output_chunk = b\".\"",
          "16:     decompressed_size = 0",
          "17:     CHUNK_SIZE = 8196",
          "18:     while output_chunk:",
          "19:         input_chunk = input_stream.read(CHUNK_SIZE)",
          "20:         try:",
          "21:             output_chunk = decompressor.decompress(input_chunk)",
          "22:         except zlib.error:",
          "23:             if decompressor != raw_decompressor:",
          "24:                 # ugly hack to work with raw deflate content that may",
          "25:                 # be sent by microsoft servers. For more information, see:",
          "26:                 # http://carsten.codimi.de/gzip.yaws/",
          "27:                 # http://www.port80software.com/200ok/archive/2005/10/31/868.aspx",
          "28:                 # http://www.gzip.org/zlib/zlib_faq.html#faq38",
          "29:                 decompressor = raw_decompressor",
          "30:                 output_chunk = decompressor.decompress(input_chunk)",
          "31:             else:",
          "32:                 raise",
          "33:         decompressed_size += len(output_chunk)",
          "34:         if max_size and decompressed_size > max_size:",
          "35:             raise _DecompressionMaxSizeExceeded(",
          "36:                 f\"The number of bytes decompressed so far \"",
          "37:                 f\"({decompressed_size}B) exceed the specified maximum \"",
          "38:                 f\"({max_size}B).\"",
          "39:             )",
          "40:         output_list.append(output_chunk)",
          "41:     return b\"\".join(output_list)",
          "",
          "---------------"
        ],
        "scrapy/utils/gz.py||scrapy/utils/gz.py": [
          "File: scrapy/utils/gz.py -> scrapy/utils/gz.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from ._compression import _DecompressionMaxSizeExceeded",
          "12:     \"\"\"Gunzip the given data and return as much data as possible.",
          "14:     This is resilient to CRC checksum errors.",
          "",
          "[Removed Lines]",
          "11: def gunzip(data: bytes, max_size: int = 0) -> bytes:",
          "",
          "[Added Lines]",
          "11: def gunzip(data: bytes, *, max_size: int = 0) -> bytes:",
          "",
          "---------------"
        ],
        "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py": [
          "File: tests/test_downloadermiddleware_httpcompression.py -> tests/test_downloadermiddleware_httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         f\"bomb-{format_id}\": (f\"bomb-{format_id}.bin\", format_id)",
          "40:         for format_id in (",
          "41:             # \"br\",",
          "42:             \"gzip\",  # 27 988 \u2192 11 511 612",
          "44:             # \"zstd\",",
          "45:         )",
          "46:     },",
          "",
          "[Removed Lines]",
          "43:             # \"deflate\",",
          "",
          "[Added Lines]",
          "42:             \"deflate\",  # 27 968 \u2192 11 511 612",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:             self.spider,",
          "384:         )",
          "386:     def test_compression_bomb_gzip(self):",
          "387:         self._test_compression_bomb(\"gzip\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:     def test_compression_bomb_deflate(self):",
          "387:         self._test_compression_bomb(\"deflate\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf80e5670e8317858b9f60008a5d2d97b4988da0",
      "candidate_info": {
        "commit_hash": "cf80e5670e8317858b9f60008a5d2d97b4988da0",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/cf80e5670e8317858b9f60008a5d2d97b4988da0",
        "files": [
          "scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/spiders/sitemap.py"
        ],
        "message": "Solve linting and typing issues",
        "before_after_code_files": [
          "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/spiders/sitemap.py||scrapy/spiders/sitemap.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
          "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:                         f\"({len(response.body)} B) exceeded DOWNLOAD_MAXSIZE \"",
          "94:                         f\"({self._max_size} B) during decompression.\"",
          "95:                     )",
          "97:                     logger.warning(",
          "98:                         f\"{response} body size after decompression \"",
          "99:                         f\"({len(decoded_body)} B) is larger than the \"",
          "",
          "[Removed Lines]",
          "96:                 if len(response.body) < warn_size and len(decoded_body) >= warn_size:",
          "",
          "[Added Lines]",
          "96:                 if len(response.body) < warn_size <= len(decoded_body):",
          "",
          "---------------"
        ],
        "scrapy/spiders/sitemap.py||scrapy/spiders/sitemap.py": [
          "File: scrapy/spiders/sitemap.py -> scrapy/spiders/sitemap.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     sitemap_rules = [(\"\", \"parse\")]",
          "23:     sitemap_follow = [\"\"]",
          "24:     sitemap_alternate_links = False",
          "26:     @classmethod",
          "27:     def from_crawler(cls, crawler: \"Crawler\", *args: Any, **kwargs: Any) -> \"Self\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     _max_size: int",
          "26:     _warn_size: int",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:                 body = gunzip(response.body, max_size=max_size)",
          "98:             except _DecompressionMaxSizeExceeded:",
          "99:                 return None",
          "101:                 logger.warning(",
          "102:                     f\"{response} body size after decompression ({len(body)} B) \"",
          "103:                     f\"is larger than the download warning size ({warn_size} B).\"",
          "",
          "[Removed Lines]",
          "100:             if uncompressed_size < warn_size and len(body) >= warn_size:",
          "",
          "[Added Lines]",
          "102:             if uncompressed_size < warn_size <= len(body):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27781a85e738052e0441c81d773b3ec124194594",
      "candidate_info": {
        "commit_hash": "27781a85e738052e0441c81d773b3ec124194594",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/27781a85e738052e0441c81d773b3ec124194594",
        "files": [
          "tests/test_spider.py"
        ],
        "message": "Fix bad closing tags in XMLFeedSpider tests",
        "before_after_code_files": [
          "tests/test_spider.py||tests/test_spider.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "tests/test_spider.py||tests/test_spider.py"
          ],
          "candidate": [
            "tests/test_spider.py||tests/test_spider.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/test_spider.py||tests/test_spider.py": [
          "File: tests/test_spider.py -> tests/test_spider.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "150:         <urlset xmlns:x=\"http://www.google.com/schemas/sitemap/0.84\"",
          "151:                 xmlns:y=\"http://www.example.com/schemas/extras/1.0\">",
          "153:             <other value=\"bar\" y:custom=\"fuu\"/>",
          "154:         </url>",
          "156:         </urlset>\"\"\"",
          "157:         response = XmlResponse(url=\"http://example.com/sitemap.xml\", body=body)",
          "",
          "[Removed Lines]",
          "152:         <url><x:loc>http://www.example.com/Special-Offers.html</loc><y:updated>2009-08-16</updated>",
          "155:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</updated><other value=\"foo\"/></url>",
          "",
          "[Added Lines]",
          "152:         <url><x:loc>http://www.example.com/Special-Offers.html</x:loc><y:updated>2009-08-16</y:updated>",
          "155:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</y:updated><other value=\"foo\"/></url>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f1d345e74d19e33016f9e69fcda0bda9afb568d",
      "candidate_info": {
        "commit_hash": "2f1d345e74d19e33016f9e69fcda0bda9afb568d",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/2f1d345e74d19e33016f9e69fcda0bda9afb568d",
        "files": [
          "tests/test_downloadermiddleware_httpcompression.py",
          "tests/test_utils_response.py"
        ],
        "message": "Solve test issues",
        "before_after_code_files": [
          "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py",
          "tests/test_utils_response.py||tests/test_utils_response.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "tests/test_utils_response.py||tests/test_utils_response.py"
          ],
          "candidate": [
            "tests/test_utils_response.py||tests/test_utils_response.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py": [
          "File: tests/test_downloadermiddleware_httpcompression.py -> tests/test_downloadermiddleware_httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:         self._test_compression_bomb_setting(\"gzip\")",
          "404:     def test_compression_bomb_setting_zstd(self):",
          "405:         self._test_compression_bomb_setting(\"zstd\")",
          "407:     def _test_compression_bomb_spider_attr(self, compression_id):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405:         try:",
          "406:             import zstandard  # noqa: F401",
          "407:         except ImportError:",
          "408:             raise SkipTest(\"no zstd support (zstandard)\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436:         self._test_compression_bomb_spider_attr(\"gzip\")",
          "438:     def test_compression_bomb_spider_attr_zstd(self):",
          "439:         self._test_compression_bomb_spider_attr(\"zstd\")",
          "441:     def _test_compression_bomb_request_meta(self, compression_id):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:         try:",
          "444:             import zstandard  # noqa: F401",
          "445:         except ImportError:",
          "446:             raise SkipTest(\"no zstd support (zstandard)\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "468:         self._test_compression_bomb_request_meta(\"gzip\")",
          "470:     def test_compression_bomb_request_meta_zstd(self):",
          "471:         self._test_compression_bomb_request_meta(\"zstd\")",
          "473:     def _test_download_warnsize_setting(self, compression_id):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479:         try:",
          "480:             import zstandard  # noqa: F401",
          "481:         except ImportError:",
          "482:             raise SkipTest(\"no zstd support (zstandard)\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "510:         self._test_download_warnsize_setting(\"gzip\")",
          "512:     def test_download_warnsize_setting_zstd(self):",
          "513:         self._test_download_warnsize_setting(\"zstd\")",
          "515:     def _test_download_warnsize_spider_attr(self, compression_id):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:         try:",
          "526:             import zstandard  # noqa: F401",
          "527:         except ImportError:",
          "528:             raise SkipTest(\"no zstd support (zstandard)\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "554:         self._test_download_warnsize_spider_attr(\"gzip\")",
          "556:     def test_download_warnsize_spider_attr_zstd(self):",
          "557:         self._test_download_warnsize_spider_attr(\"zstd\")",
          "559:     def _test_download_warnsize_request_meta(self, compression_id):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:         try:",
          "574:             import zstandard  # noqa: F401",
          "575:         except ImportError:",
          "576:             raise SkipTest(\"no zstd support (zstandard)\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "596:         self._test_download_warnsize_request_meta(\"gzip\")",
          "598:     def test_download_warnsize_request_meta_zstd(self):",
          "599:         self._test_download_warnsize_request_meta(\"zstd\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:         try:",
          "620:             import zstandard  # noqa: F401",
          "621:         except ImportError:",
          "622:             raise SkipTest(\"no zstd support (zstandard)\")",
          "",
          "---------------"
        ],
        "tests/test_utils_response.py||tests/test_utils_response.py": [
          "File: tests/test_utils_response.py -> tests/test_utils_response.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:         ), \"Inject unique base url with conditional comment\"",
          "206:     def test_open_in_browser_redos_comment(self):",
          "209:         # Exploit input from",
          "210:         # https://makenowjust-labs.github.io/recheck/playground/",
          "",
          "[Removed Lines]",
          "207:         MAX_CPU_TIME = 0.001",
          "",
          "[Added Lines]",
          "207:         MAX_CPU_TIME = 0.02",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
          "223:     def test_open_in_browser_redos_head(self):",
          "226:         # Exploit input from",
          "227:         # https://makenowjust-labs.github.io/recheck/playground/",
          "",
          "[Removed Lines]",
          "224:         MAX_CPU_TIME = 0.001",
          "",
          "[Added Lines]",
          "224:         MAX_CPU_TIME = 0.02",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fba167c5e1f356bcc452e95e92199f1a15135c60",
      "candidate_info": {
        "commit_hash": "fba167c5e1f356bcc452e95e92199f1a15135c60",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/fba167c5e1f356bcc452e95e92199f1a15135c60",
        "files": [
          "scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/utils/_compression.py",
          "tests/sample_data/compressed/bomb-br.bin",
          "tests/test_downloadermiddleware_httpcompression.py"
        ],
        "message": "Protect against brotli bombs",
        "before_after_code_files": [
          "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/utils/_compression.py||scrapy/utils/_compression.py",
          "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
          "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from scrapy.exceptions import IgnoreRequest, NotConfigured",
          "5: from scrapy.http import Response, TextResponse",
          "6: from scrapy.responsetypes import responsetypes",
          "8: from scrapy.utils.deprecate import ScrapyDeprecationWarning",
          "9: from scrapy.utils.gz import gunzip",
          "11: ACCEPTED_ENCODINGS = [b\"gzip\", b\"deflate\"]",
          "13: try:",
          "17: except ImportError:",
          "18:     pass",
          "20: try:",
          "21:     import zstandard",
          "24: except ImportError:",
          "25:     pass",
          "28: class HttpCompressionMiddleware:",
          "",
          "[Removed Lines]",
          "7: from scrapy.utils._compression import _DecompressionMaxSizeExceeded, _inflate",
          "14:     import brotli",
          "16:     ACCEPTED_ENCODINGS.append(b\"br\")",
          "23:     ACCEPTED_ENCODINGS.append(b\"zstd\")",
          "",
          "[Added Lines]",
          "7: from scrapy.utils._compression import _DecompressionMaxSizeExceeded, _inflate, _unbrotli",
          "14:     import brotli  # noqa: F401",
          "17: else:",
          "18:     ACCEPTED_ENCODINGS.append(b\"br\")",
          "24: else:",
          "25:     ACCEPTED_ENCODINGS.append(b\"zstd\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         if encoding == b\"deflate\":",
          "101:             return _inflate(body, max_size=self._max_size)",
          "102:         if encoding == b\"br\" and b\"br\" in ACCEPTED_ENCODINGS:",
          "104:         if encoding == b\"zstd\" and b\"zstd\" in ACCEPTED_ENCODINGS:",
          "105:             # Using its streaming API since its simple API could handle only cases",
          "106:             # where there is content size data embedded in the frame",
          "",
          "[Removed Lines]",
          "103:             return brotli.decompress(body)",
          "",
          "[Added Lines]",
          "103:             return _unbrotli(body, max_size=self._max_size)",
          "",
          "---------------"
        ],
        "scrapy/utils/_compression.py||scrapy/utils/_compression.py": [
          "File: scrapy/utils/_compression.py -> scrapy/utils/_compression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from io import BytesIO",
          "3: from typing import List",
          "6: class _DecompressionMaxSizeExceeded(ValueError):",
          "7:     pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: try:",
          "6:     import brotli",
          "7: except ImportError:",
          "8:     pass",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:             )",
          "40:         output_list.append(output_chunk)",
          "41:     return b\"\".join(output_list)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: def _unbrotli(data: bytes, *, max_size: int = 0) -> bytes:",
          "50:     decompressor = brotli.Decompressor()",
          "51:     input_stream = BytesIO(data)",
          "52:     output_list: List[bytes] = []",
          "53:     output_chunk = b\".\"",
          "54:     decompressed_size = 0",
          "55:     CHUNK_SIZE = 8196",
          "56:     while output_chunk:",
          "57:         input_chunk = input_stream.read(CHUNK_SIZE)",
          "58:         output_chunk = decompressor.process(input_chunk)",
          "59:         decompressed_size += len(output_chunk)",
          "60:         if max_size and decompressed_size > max_size:",
          "61:             raise _DecompressionMaxSizeExceeded(",
          "62:                 f\"The number of bytes decompressed so far \"",
          "63:                 f\"({decompressed_size}B) exceed the specified maximum \"",
          "64:                 f\"({max_size}B).\"",
          "65:             )",
          "66:         output_list.append(output_chunk)",
          "67:     return b\"\".join(output_list)",
          "",
          "---------------"
        ],
        "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py": [
          "File: tests/test_downloadermiddleware_httpcompression.py -> tests/test_downloadermiddleware_httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         f\"bomb-{format_id}\": (f\"bomb-{format_id}.bin\", format_id)",
          "40:         for format_id in (",
          "42:             \"deflate\",  # 27 968 \u2192 11 511 612",
          "43:             \"gzip\",  # 27 988 \u2192 11 511 612",
          "44:             # \"zstd\",",
          "",
          "[Removed Lines]",
          "41:             # \"br\",",
          "",
          "[Added Lines]",
          "41:             \"br\",  # 34 \u2192 11 511 612",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:             self.spider,",
          "384:         )",
          "386:     def test_compression_bomb_deflate(self):",
          "387:         self._test_compression_bomb(\"deflate\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:     def test_compression_bomb_br(self):",
          "387:         try:",
          "388:             import brotli  # noqa: F401",
          "389:         except ImportError:",
          "390:             raise SkipTest(\"no brotli\")",
          "391:         self._test_compression_bomb(\"br\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}