{
  "cve_id": "CVE-2024-24565",
  "cve_desc": "CrateDB is a distributed SQL database that makes it simple to store and analyze massive amounts of data in real-time. There is a COPY FROM function in the CrateDB database that is used to import file data into database tables. This function has a flaw, and authenticated attackers can use the COPY FROM function to import arbitrary file content into database tables, resulting in information leakage. This vulnerability is patched in 5.3.9, 5.4.8, 5.5.4, and 5.6.1.",
  "repo": "crate/crate",
  "patch_hash": "4e857d675683095945dd524d6ba03e692c70ecd6",
  "patch_info": {
    "commit_hash": "4e857d675683095945dd524d6ba03e692c70ecd6",
    "repo": "crate/crate",
    "commit_url": "https://github.com/crate/crate/commit/4e857d675683095945dd524d6ba03e692c70ecd6",
    "files": [
      "docs/appendices/release-notes/5.5.4.rst",
      "docs/appendices/release-notes/5.6.1.rst",
      "docs/sql/statements/copy-from.rst",
      "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
    ],
    "message": "Restrict `COPY FROM` using local files to superuser\n\nFixing a security issue where any user could read/import content\nof any file on the host system, the CrateDB process user has read\naccess to.",
    "before_after_code_files": [
      "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
    ]
  },
  "patch_diff": {
    "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
      "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:     private FileReadingIterator createBatchIterator(S3ObjectInputStream inputStream, String ... fileUris) {",
      "107:         String compression = null;",
      "108:         return new FileReadingIterator(",
      "110:             compression,",
      "111:             Map.of(",
      "112:                 S3FileInputFactory.NAME,",
      "",
      "[Removed Lines]",
      "109:             Arrays.asList(fileUris),",
      "",
      "[Added Lines]",
      "109:             Arrays.stream(fileUris).map(FileReadingIterator::toURI).toList(),",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java": [
      "File: server/src/main/java/io/crate/exceptions/UnauthorizedException.java -> server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: package io.crate.exceptions;",
      "26:     public UnauthorizedException(String message) {",
      "27:         super(message);",
      "28:     }",
      "30: }",
      "",
      "[Removed Lines]",
      "24: public class UnauthorizedException extends RuntimeException implements UnscopedException {",
      "",
      "[Added Lines]",
      "24: import java.io.IOException;",
      "26: import org.elasticsearch.ElasticsearchException;",
      "27: import org.elasticsearch.common.io.stream.StreamInput;",
      "29: public class UnauthorizedException extends ElasticsearchException implements UnscopedException {",
      "35:     public UnauthorizedException(StreamInput in) throws IOException {",
      "36:         super(in);",
      "37:     }",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java": [
      "File: server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java -> server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "175:         }",
      "176:     }",
      "179:                                String compression,",
      "180:                                Map<String, FileInputFactory> fileInputFactories,",
      "181:                                Boolean shared,",
      "",
      "[Removed Lines]",
      "178:     public FileReadingIterator(Collection<String> fileUris,",
      "",
      "[Added Lines]",
      "178:     public FileReadingIterator(Collection<URI> fileUris,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "398:     }",
      "400:     @Nullable",
      "403:         FileInputFactory fileInputFactory = fileInputFactories.get(uri.getScheme());",
      "404:         if (fileInputFactory != null) {",
      "405:             try {",
      "",
      "[Removed Lines]",
      "401:     private FileInput toFileInput(String fileUri, Settings withClauseOptions) {",
      "402:         URI uri = toURI(fileUri);",
      "",
      "[Added Lines]",
      "401:     private FileInput toFileInput(URI uri, Settings withClauseOptions) {",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java": [
      "File: server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java -> server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: package io.crate.execution.engine.collect.sources;",
      "24: import java.util.Arrays;",
      "25: import java.util.Collection;",
      "26: import java.util.Collections;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import static java.util.Objects.requireNonNull;",
      "26: import java.net.URI;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40: import io.crate.data.BatchIterator;",
      "41: import io.crate.data.Row;",
      "42: import io.crate.data.SkippingBatchIterator;",
      "43: import io.crate.execution.dsl.phases.CollectPhase;",
      "44: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
      "45: import io.crate.execution.engine.collect.CollectTask;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46: import io.crate.exceptions.UnauthorizedException;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53: import io.crate.metadata.NodeContext;",
      "54: import io.crate.metadata.TransactionContext;",
      "55: import io.crate.planner.operators.SubQueryResults;",
      "56: import io.crate.types.DataTypes;",
      "58: @Singleton",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60: import io.crate.role.Role;",
      "61: import io.crate.role.Roles;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "63:     private final InputFactory inputFactory;",
      "64:     private final NodeContext nodeCtx;",
      "65:     private final ThreadPool threadPool;",
      "67:     @Inject",
      "68:     public FileCollectSource(NodeContext nodeCtx,",
      "69:                              ClusterService clusterService,",
      "70:                              Map<String, FileInputFactory> fileInputFactoryMap,",
      "72:         this.fileInputFactoryMap = fileInputFactoryMap;",
      "73:         this.nodeCtx = nodeCtx;",
      "74:         this.inputFactory = new InputFactory(nodeCtx);",
      "75:         this.clusterService = clusterService;",
      "76:         this.threadPool = threadPool;",
      "77:     }",
      "79:     @Override",
      "",
      "[Removed Lines]",
      "71:                              ThreadPool threadPool) {",
      "",
      "[Added Lines]",
      "72:     private final Roles roles;",
      "78:                              ThreadPool threadPool,",
      "79:                              Roles roles) {",
      "85:         this.roles = roles;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "86:             inputFactory.ctxForRefs(txnCtx, FileLineReferenceResolver::getImplementation);",
      "87:         ctx.add(collectPhase.toCollect());",
      "90:         FileReadingIterator fileReadingIterator = new FileReadingIterator(",
      "91:             fileUris,",
      "92:             fileUriCollectPhase.compression(),",
      "",
      "[Removed Lines]",
      "89:         List<String> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri());",
      "",
      "[Added Lines]",
      "98:         Role user = requireNonNull(roles.findUser(txnCtx.sessionSettings().userName()), \"User who invoked a statement must exist\");",
      "99:         List<URI> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri()).stream()",
      "100:             .map(s -> {",
      "101:                 var uri = FileReadingIterator.toURI(s);",
      "102:                 if (uri.getScheme().equals(\"file\") && user.isSuperUser() == false) {",
      "103:                     throw new UnauthorizedException(\"Only a superuser can read from the local file system\");",
      "104:                 }",
      "105:                 return uri;",
      "106:             })",
      "107:             .toList();",
      "",
      "---------------"
    ],
    "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
      "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "973:             io.crate.exceptions.OperationOnInaccessibleRelationException.class,",
      "974:             io.crate.exceptions.OperationOnInaccessibleRelationException::new,",
      "975:             176,",
      "978:         final Class<? extends ElasticsearchException> exceptionClass;",
      "979:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
      "",
      "[Removed Lines]",
      "976:             Version.V_5_6_0);",
      "",
      "[Added Lines]",
      "976:             Version.V_5_6_0),",
      "977:         UNAUTHORIZED_EXCEPTION(",
      "978:             io.crate.exceptions.UnauthorizedException.class,",
      "979:             io.crate.exceptions.UnauthorizedException::new,",
      "980:             177,",
      "981:             Version.V_5_7_0);",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java -> server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: import io.crate.expression.symbol.Literal;",
      "55: import io.crate.metadata.ColumnIdent;",
      "56: import io.crate.metadata.CoordinatorTxnCtx;",
      "57: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
      "58: import io.crate.types.DataTypes;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: import io.crate.role.Role;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69:             createNodeContext(),",
      "70:             clusterService,",
      "71:             Collections.emptyMap(),",
      "73:             );",
      "75:         File tmpFile = temporaryFolder.newFile(\"fileUriCollectOperation.json\");",
      "",
      "[Removed Lines]",
      "72:             THREAD_POOL",
      "",
      "[Added Lines]",
      "73:             THREAD_POOL,",
      "74:             () -> List.of(Role.CRATE_USER)",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "201:     private static FileReadingIterator it(Collection<String> fileUris, String compression) {",
      "202:         return new FileReadingIterator(",
      "204:             compression,",
      "205:             Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
      "206:             false,",
      "",
      "[Removed Lines]",
      "203:             fileUris,",
      "",
      "[Added Lines]",
      "203:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: import java.io.InputStream;",
      "35: import java.io.InputStreamReader;",
      "36: import java.net.SocketTimeoutException;",
      "37: import java.nio.charset.StandardCharsets;",
      "38: import java.nio.file.Files;",
      "39: import java.nio.file.Path;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: import java.net.URI;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43: import java.util.concurrent.ScheduledExecutorService;",
      "44: import java.util.concurrent.TimeUnit;",
      "45: import java.util.function.Supplier;",
      "47: import org.elasticsearch.common.settings.Settings;",
      "48: import org.elasticsearch.test.ESTestCase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: import java.util.stream.Stream;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
      "88:         List<String> lines2 = List.of(\"name,id,age\", \"Trillian,5,33\");",
      "89:         Files.write(tempFile2, lines2);",
      "92:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
      "93:             () -> new FileReadingIterator(",
      "",
      "[Removed Lines]",
      "90:         List<String> fileUris = List.of(tempFile1.toUri().toString(), tempFile2.toUri().toString());",
      "",
      "[Added Lines]",
      "92:         List<URI> fileUris = Stream.of(tempFile1.toUri().toString(), tempFile2.toUri().toString())",
      "93:             .map(FileReadingIterator::toURI)",
      "94:             .toList();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "139:         Path tempFile = createTempFile(\"tempfile1\", \".csv\");",
      "140:         List<String> lines = List.of(\"id\", \"1\", \"2\", \"3\", \"4\", \"5\");",
      "141:         Files.write(tempFile, lines);",
      "144:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
      "145:             () -> new FileReadingIterator(",
      "",
      "[Removed Lines]",
      "142:         List<String> fileUris = List.of(tempFile.toUri().toString());",
      "",
      "[Added Lines]",
      "146:         List<URI> fileUris = Stream.of(tempFile.toUri().toString())",
      "147:             .map(FileReadingIterator::toURI).toList();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "213:         Files.write(tempFile, List.of(\"1\", \"2\", \"3\"));",
      "214:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
      "215:         Files.write(tempFile2, List.of(\"4\", \"5\", \"6\"));",
      "218:         var fi = new FileReadingIterator(",
      "219:             fileUris,",
      "",
      "[Removed Lines]",
      "216:         List<String> fileUris = List.of(tempFile.toUri().toString(), tempFile2.toUri().toString());",
      "",
      "[Added Lines]",
      "221:         List<URI> fileUris = Stream.of(tempFile.toUri().toString(), tempFile2.toUri().toString())",
      "222:             .map(FileReadingIterator::toURI).toList();",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java -> server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "92:             new NodeContext(new Functions(Map.of()), roles),",
      "93:             clusterService,",
      "94:             Map.of(),",
      "96:         );",
      "98:         CompletableFuture<BatchIterator<Row>> iterator = fileCollectSource.getIterator(",
      "",
      "[Removed Lines]",
      "95:             THREAD_POOL",
      "",
      "[Added Lines]",
      "95:             THREAD_POOL,",
      "96:             () -> List.of(Role.CRATE_USER)",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
      "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import static io.crate.testing.Asserts.assertThat;",
      "27: import static io.crate.testing.TestingHelpers.printedTable;",
      "28: import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;",
      "30: import java.io.File;",
      "31: import java.io.FileOutputStream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54: import com.carrotsearch.randomizedtesting.LifecycleScope;",
      "56: import io.crate.testing.Asserts;",
      "57: import io.crate.testing.SQLResponse;",
      "58: import io.crate.testing.UseJdbc;",
      "59: import io.crate.testing.UseNewCluster;",
      "61: @IntegTestCase.ClusterScope(numDataNodes = 2)",
      "62: public class CopyIntegrationTest extends SQLHttpIntegrationTest {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: import io.crate.action.sql.Sessions;",
      "58: import io.crate.exceptions.UnauthorizedException;",
      "59: import io.crate.role.Role;",
      "60: import io.crate.role.Roles;",
      "65: import io.crate.testing.UseRandomizedSchema;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1196:             \"2| 31123| apple safari| 23073\"",
      "1197:         );",
      "1198:     }",
      "1199: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1206:     @UseRandomizedSchema(random = false)",
      "1207:     @Test",
      "1208:     public void test_copy_from_local_file_is_only_allowed_for_superusers() {",
      "1209:         execute(\"CREATE TABLE quotes (id INT PRIMARY KEY, \" +",
      "1210:             \"quote STRING INDEX USING FULLTEXT) WITH (number_of_replicas = 0)\");",
      "1211:         execute(\"CREATE USER test_user\");",
      "1212:         execute(\"GRANT ALL TO test_user\");",
      "1214:         var roles = cluster().getInstance(Roles.class);",
      "1215:         Role user = roles.findUser(\"test_user\");",
      "1216:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
      "1217:         try (var session = sqlOperations.newSession(null, user)) {",
      "1218:             assertThatThrownBy(() -> execute(\"COPY quotes FROM ?\", new Object[]{copyFilePath + \"test_copy_from.json\"}, session))",
      "1219:                 .isExactlyInstanceOf(UnauthorizedException.class)",
      "1220:                 .hasMessage(\"Only a superuser can read from the local file system\");",
      "1221:         }",
      "1222:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0479e03322c6cdde846bec5e416040352ddf0a10",
      "candidate_info": {
        "commit_hash": "0479e03322c6cdde846bec5e416040352ddf0a10",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/0479e03322c6cdde846bec5e416040352ddf0a10",
        "files": [
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java"
        ],
        "message": "Remove unused logic from S3FileReadingCollectorTest",
        "before_after_code_files": [
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java"
          ],
          "candidate": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java"
          ]
        }
      },
      "candidate_diff": {
        "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
          "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import static org.mockito.Mockito.mock;",
          "30: import static org.mockito.Mockito.when;",
          "36: import java.net.SocketTimeoutException;",
          "40: import java.util.ArrayList;",
          "42: import java.util.Collections;",
          "43: import java.util.List;",
          "44: import java.util.Map;",
          "45: import java.util.concurrent.TimeUnit;",
          "48: import org.elasticsearch.common.settings.Settings;",
          "49: import org.elasticsearch.test.ESTestCase;",
          "",
          "[Removed Lines]",
          "32: import java.io.BufferedWriter;",
          "33: import java.io.File;",
          "34: import java.io.FileOutputStream;",
          "35: import java.io.OutputStreamWriter;",
          "37: import java.nio.charset.StandardCharsets;",
          "38: import java.nio.file.Files;",
          "39: import java.nio.file.Path;",
          "41: import java.util.Collection;",
          "46: import java.util.zip.GZIPOutputStream;",
          "",
          "[Added Lines]",
          "34: import java.util.Arrays;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: import io.crate.data.Bucket;",
          "70: import io.crate.data.Input;",
          "71: import io.crate.data.Row;",
          "73: import io.crate.data.testing.TestingRowConsumer;",
          "74: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
          "75: import io.crate.execution.engine.collect.files.FileReadingIterator;",
          "",
          "[Removed Lines]",
          "72: import io.crate.data.RowConsumer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77: import io.crate.expression.InputFactory;",
          "78: import io.crate.expression.reference.file.FileLineReferenceResolver;",
          "79: import io.crate.expression.reference.file.SourceLineExpression;",
          "81: import io.crate.metadata.CoordinatorTxnCtx;",
          "82: import io.crate.metadata.Functions;",
          "83: import io.crate.metadata.NodeContext;",
          "",
          "[Removed Lines]",
          "80: import io.crate.expression.reference.file.SourceUriFailureExpression;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89: public class S3FileReadingCollectorTest extends ESTestCase {",
          "90:     private static ThreadPool THREAD_POOL;",
          "94:     private InputFactory inputFactory;",
          "95:     private final TransactionContext TXN_CTX = CoordinatorTxnCtx.systemTransactionContext();",
          "97:     @BeforeClass",
          "98:     public static void setUpClass() throws Exception {",
          "122:         THREAD_POOL = new TestThreadPool(Thread.currentThread().getName());",
          "123:     }",
          "",
          "[Removed Lines]",
          "91:     private static File tmpFile;",
          "92:     private static File tmpFileGz;",
          "93:     private static File tmpFileEmptyLine;",
          "99:         Path copy_from = Files.createTempDirectory(\"copy_from\");",
          "100:         Path copy_from_gz = Files.createTempDirectory(\"copy_from_gz\");",
          "101:         Path copy_from_empty = Files.createTempDirectory(\"copy_from_empty\");",
          "102:         tmpFileGz = File.createTempFile(\"fileReadingCollector\", \".json.gz\", copy_from_gz.toFile());",
          "103:         tmpFile = File.createTempFile(\"fileReadingCollector\", \".json\", copy_from.toFile());",
          "104:         tmpFileEmptyLine = File.createTempFile(\"emptyLine\", \".json\", copy_from_empty.toFile());",
          "105:         try (BufferedWriter writer =",
          "106:                  new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(tmpFileGz)),",
          "107:                                                            StandardCharsets.UTF_8))) {",
          "108:             writer.write(\"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\\n\");",
          "109:             writer.write(\"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\\n\");",
          "110:         }",
          "111:         try (OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tmpFile),",
          "112:                                                                 StandardCharsets.UTF_8)) {",
          "113:             writer.write(\"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\\n\");",
          "114:             writer.write(\"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\\n\");",
          "115:         }",
          "116:         try (OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tmpFileEmptyLine),",
          "117:                                                                 StandardCharsets.UTF_8)) {",
          "118:             writer.write(\"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\\n\");",
          "119:             writer.write(\"\\n\");",
          "120:             writer.write(\"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\\n\");",
          "121:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131:     @AfterClass",
          "132:     public static void tearDownClass() {",
          "136:         ThreadPool.terminate(THREAD_POOL, 30, TimeUnit.SECONDS);",
          "137:     }",
          "",
          "[Removed Lines]",
          "133:         assertThat(tmpFile.delete()).isTrue();",
          "134:         assertThat(tmpFileGz.delete()).isTrue();",
          "135:         assertThat(tmpFileEmptyLine.delete()).isTrue();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:     public void testCollectFromS3Uri() throws Throwable {",
          "144:         projector.getResult();",
          "145:     }",
          "",
          "[Removed Lines]",
          "143:         TestingRowConsumer projector = getObjects(\"s3://fakebucket/foo\");",
          "",
          "[Added Lines]",
          "105:         S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);",
          "106:         when(inputStream.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);",
          "107:         TestingRowConsumer projector = getObjects(inputStream, \"s3://fakebucket/foo\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "155:             .thenAnswer(new WriteBufferAnswer(new byte[]{98, 97, 114, 10}))  // second line: bar",
          "156:             .thenReturn(-1);",
          "162:         Bucket rows = consumer.getBucket();",
          "163:         assertThat(rows).hasSize(2);",
          "164:         assertThat(TestingHelpers.printedTable(rows)).isEqualTo(\"foo\\nbar\\n\");",
          "165:     }",
          "187:         TestingRowConsumer consumer = new TestingRowConsumer();",
          "201:         consumer.accept(iterator, null);",
          "202:     }",
          "208:         InputFactory.Context<LineCollectorExpression<?>> ctx =",
          "209:             inputFactory.ctxForRefs(TXN_CTX, FileLineReferenceResolver::getImplementation);",
          "210:         List<Input<?>> inputs = new ArrayList<>(2);",
          "211:         Reference raw = createReference(SourceLineExpression.COLUMN_NAME, DataTypes.STRING);",
          "212:         inputs.add(ctx.add(raw));",
          "219:         return new FileReadingIterator(",
          "221:             inputs,",
          "222:             ctx.expressions(),",
          "223:             compression,",
          "",
          "[Removed Lines]",
          "158:         TestingRowConsumer consumer = getObjects(Collections.singletonList(\"s3://fakebucket/foo\"),",
          "159:                                                  null,",
          "160:                                                  inputStream,",
          "161:                                                  false);",
          "167:     private TestingRowConsumer getObjects(String fileUri) throws Throwable {",
          "168:         return getObjects(fileUri, false);",
          "169:     }",
          "171:     private TestingRowConsumer getObjects(String fileUri, boolean collectSourceUriFailure) throws Throwable {",
          "172:         return getObjects(Collections.singletonList(fileUri), null, collectSourceUriFailure);",
          "173:     }",
          "175:     private TestingRowConsumer getObjects(Collection<String> fileUris,",
          "176:                                           String compression,",
          "177:                                           boolean collectSourceUriFailure) throws Throwable {",
          "178:         S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);",
          "179:         when(inputStream.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);",
          "180:         return getObjects(fileUris, compression, inputStream, collectSourceUriFailure);",
          "181:     }",
          "183:     private TestingRowConsumer getObjects(Collection<String> fileUris,",
          "184:                                           String compression,",
          "185:                                           S3ObjectInputStream s3InputStream,",
          "186:                                           boolean collectSourceUriFailure) {",
          "188:         getObjects(fileUris, compression, s3InputStream, consumer, collectSourceUriFailure);",
          "189:         return consumer;",
          "190:     }",
          "192:     private void getObjects(Collection<String> fileUris,",
          "193:                             String compression,",
          "194:                             final S3ObjectInputStream s3InputStream,",
          "195:                             RowConsumer consumer,",
          "196:                             boolean collectSourceUriFailure) {",
          "197:         BatchIterator<Row> iterator = createBatchIterator(fileUris,",
          "198:                                                           compression,",
          "199:                                                           s3InputStream,",
          "200:                                                           collectSourceUriFailure);",
          "204:     private BatchIterator<Row> createBatchIterator(Collection<String> fileUris,",
          "205:                                                    String compression,",
          "206:                                                    final S3ObjectInputStream s3InputStream,",
          "207:                                                    boolean collectSourceUriFailure) {",
          "213:         if (collectSourceUriFailure) {",
          "214:             Reference sourceUriFailure = createReference(SourceUriFailureExpression.COLUMN_NAME, DataTypes.STRING);",
          "216:             Input<String> sourceUriFailureInput = (Input<String>) ctx.add(sourceUriFailure);",
          "217:             inputs.add(sourceUriFailureInput);",
          "218:         }",
          "220:             fileUris,",
          "",
          "[Added Lines]",
          "122:         TestingRowConsumer consumer = getObjects(inputStream, \"s3://fakebucket/foo\");",
          "128:     private TestingRowConsumer getObjects(S3ObjectInputStream inputStream, String ... fileUris) {",
          "130:         BatchIterator<Row> iterator = createBatchIterator(inputStream, fileUris);",
          "132:         return consumer;",
          "135:     private BatchIterator<Row> createBatchIterator(S3ObjectInputStream inputStream, String ... fileUris) {",
          "141:         String compression = null;",
          "143:             Arrays.asList(fileUris),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "234:                         when(objectListing.getObjectSummaries()).thenReturn(Collections.singletonList(summary));",
          "235:                         when(summary.getKey()).thenReturn(\"foo\");",
          "236:                         when(client.getObject(\"fakebucket\", \"foo\")).thenReturn(s3Object);",
          "238:                         when(client.listNextBatchOfObjects(any(ObjectListing.class))).thenReturn(objectListing);",
          "239:                         when(objectListing.isTruncated()).thenReturn(false);",
          "240:                         return client;",
          "",
          "[Removed Lines]",
          "237:                         when(s3Object.getObjectContent()).thenReturn(s3InputStream);",
          "",
          "[Added Lines]",
          "160:                         when(s3Object.getObjectContent()).thenReturn(inputStream);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6e06ae8121f179ec66be192a45fc1b3177a542d",
      "candidate_info": {
        "commit_hash": "b6e06ae8121f179ec66be192a45fc1b3177a542d",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/b6e06ae8121f179ec66be192a45fc1b3177a542d",
        "files": [
          "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "docs/appendices/release-notes/unreleased.rst",
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java"
        ],
        "message": "Add back-off policy to retry logic of COPY-FROM",
        "before_after_code_files": [
          "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java"
          ],
          "candidate": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java"
          ]
        }
      },
      "candidate_diff": {
        "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java": [
          "File: benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java -> benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:             List.of(\"id\", \"name\"),",
          "154:             CopyFromParserProperties.DEFAULT,",
          "155:             CSV,",
          "158:         while (batchIterator.moveNext()) {",
          "159:             blackhole.consume(batchIterator.currentElement().get(0));",
          "",
          "[Removed Lines]",
          "156:             Settings.EMPTY);",
          "",
          "[Added Lines]",
          "156:             Settings.EMPTY,",
          "157:             null);",
          "",
          "---------------"
        ],
        "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java": [
          "File: benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java -> benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:             List.of(\"id\", \"name\"),",
          "154:             CopyFromParserProperties.DEFAULT,",
          "155:             JSON,",
          "158:         while (batchIterator.moveNext()) {",
          "159:             blackhole.consume(batchIterator.currentElement().get(0));",
          "",
          "[Removed Lines]",
          "156:             Settings.EMPTY);",
          "",
          "[Added Lines]",
          "156:             Settings.EMPTY,",
          "157:             null);",
          "",
          "---------------"
        ],
        "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
          "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import java.util.Collections;",
          "43: import java.util.List;",
          "44: import java.util.Map;",
          "45: import java.util.zip.GZIPOutputStream;",
          "47: import org.elasticsearch.common.settings.Settings;",
          "48: import org.elasticsearch.test.ESTestCase;",
          "49: import org.junit.AfterClass;",
          "50: import org.junit.Before;",
          "51: import org.junit.BeforeClass;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import java.util.concurrent.TimeUnit;",
          "50: import org.elasticsearch.threadpool.TestThreadPool;",
          "51: import org.elasticsearch.threadpool.ThreadPool;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: import io.crate.types.DataTypes;",
          "86: public class S3FileReadingCollectorTest extends ESTestCase {",
          "88:     private static File tmpFile;",
          "89:     private static File tmpFileGz;",
          "90:     private static File tmpFileEmptyLine;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     private static ThreadPool THREAD_POOL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:             writer.write(\"\\n\");",
          "117:             writer.write(\"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\\n\");",
          "118:         }",
          "119:     }",
          "121:     @Before",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:         THREAD_POOL = new TestThreadPool(Thread.currentThread().getName());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:         assertThat(tmpFile.delete()).isTrue();",
          "130:         assertThat(tmpFileGz.delete()).isTrue();",
          "131:         assertThat(tmpFileEmptyLine.delete()).isTrue();",
          "132:     }",
          "134:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:         ThreadPool.terminate(THREAD_POOL, 30, TimeUnit.SECONDS);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "241:             List.of(\"id\", \"name\", \"details\"),",
          "242:             CopyFromParserProperties.DEFAULT,",
          "243:             FileUriCollectPhase.InputFormat.JSON,",
          "245:     }",
          "247:     private record WriteBufferAnswer(byte[] bytes) implements Answer<Integer> {",
          "",
          "[Removed Lines]",
          "244:             Settings.EMPTY);",
          "",
          "[Added Lines]",
          "249:             Settings.EMPTY,",
          "250:             THREAD_POOL.scheduler());",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java -> server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import java.io.IOException;",
          "28: import java.io.InputStream;",
          "29: import java.io.InputStreamReader;",
          "30: import java.net.SocketTimeoutException;",
          "31: import java.net.URI;",
          "32: import java.nio.charset.StandardCharsets;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import java.net.SocketException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: import java.util.Map;",
          "38: import java.util.Objects;",
          "39: import java.util.concurrent.CompletableFuture;",
          "40: import java.util.function.Predicate;",
          "41: import java.util.zip.GZIPInputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import java.util.concurrent.ScheduledExecutorService;",
          "42: import java.util.concurrent.TimeUnit;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46: import org.apache.logging.log4j.LogManager;",
          "47: import org.apache.logging.log4j.Logger;",
          "48: import org.elasticsearch.common.settings.Settings;",
          "50: import io.crate.analyze.CopyFromParserProperties;",
          "51: import io.crate.common.annotations.VisibleForTesting;",
          "52: import io.crate.data.BatchIterator;",
          "53: import io.crate.data.Input;",
          "54: import io.crate.data.Row;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.elasticsearch.action.bulk.BackoffPolicy;",
          "56: import io.crate.common.unit.TimeValue;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "73:                                                  List<String> targetColumns,",
          "74:                                                  CopyFromParserProperties parserProperties,",
          "75:                                                  FileUriCollectPhase.InputFormat inputFormat,",
          "77:         return new FileReadingIterator(",
          "78:             fileUris,",
          "79:             inputs,",
          "",
          "[Removed Lines]",
          "76:                                                  Settings withClauseOptions) {",
          "",
          "[Added Lines]",
          "81:                                                  Settings withClauseOptions,",
          "82:                                                  ScheduledExecutorService scheduler) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "86:             targetColumns,",
          "87:             parserProperties,",
          "88:             inputFormat,",
          "90:     }",
          "",
          "[Removed Lines]",
          "89:             withClauseOptions);",
          "",
          "[Added Lines]",
          "95:             withClauseOptions,",
          "96:             scheduler);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "110:     private URI currentUri;",
          "111:     private BufferedReader currentReader = null;",
          "112:     private long currentLineNumber;",
          "113:     private final Row row;",
          "114:     private LineProcessor lineProcessor;",
          "116:     @VisibleForTesting",
          "117:     FileReadingIterator(Collection<String> fileUris,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:     @VisibleForTesting",
          "121:     long watermark;",
          "124:     private final ScheduledExecutorService scheduler;",
          "125:     private final Iterator<TimeValue> backOffPolicy;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "125:                         List<String> targetColumns,",
          "126:                         CopyFromParserProperties parserProperties,",
          "127:                         FileUriCollectPhase.InputFormat inputFormat,",
          "129:         this.compressed = compression != null && compression.equalsIgnoreCase(\"gzip\");",
          "130:         this.row = new InputRow(inputs);",
          "131:         this.fileInputFactories = fileInputFactories;",
          "",
          "[Removed Lines]",
          "128:                         Settings withClauseOptions) {",
          "",
          "[Added Lines]",
          "139:                         Settings withClauseOptions,",
          "140:                         ScheduledExecutorService scheduler) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "138:         this.parserProperties = parserProperties;",
          "139:         this.inputFormat = inputFormat;",
          "140:         initCollectorState();",
          "141:     }",
          "143:     @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:         this.scheduler = scheduler;",
          "154:         this.backOffPolicy = BackoffPolicy.exponentialBackoff(TimeValue.ZERO, MAX_SOCKET_TIMEOUT_RETRIES).iterator();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "167:         raiseIfKilled();",
          "168:         try {",
          "169:             if (currentReader != null) {",
          "171:                 if (line == null) {",
          "172:                     closeCurrentReader();",
          "173:                     return moveNext();",
          "",
          "[Removed Lines]",
          "170:                 String line = getLine(currentReader, currentLineNumber, 0);",
          "",
          "[Added Lines]",
          "184:                 String line;",
          "185:                 try {",
          "186:                     line = getLine(currentReader);",
          "187:                 } catch (SocketException | SocketTimeoutException e) {",
          "188:                     if (backOffPolicy.hasNext()) {",
          "189:                         return false;",
          "190:                     }",
          "191:                     throw e;",
          "192:                 }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "199:     }",
          "201:     private void advanceToNextUri(FileInput fileInput) throws IOException {",
          "202:         currentUri = currentInputUriIterator.next();",
          "203:         initCurrentReader(fileInput, currentUri);",
          "204:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:         watermark = 0;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "243:         }",
          "244:     }",
          "247:         String line = null;",
          "248:         try {",
          "249:             while ((line = reader.readLine()) != null) {",
          "250:                 currentLineNumber++;",
          "252:                     continue;",
          "253:                 }",
          "254:                 if (line.length() == 0) {",
          "255:                     continue;",
          "256:                 }",
          "257:                 break;",
          "258:             }",
          "266:                 closeCurrentReader();",
          "267:                 initCurrentReader(currentInput, currentUri);",
          "269:             }",
          "270:         } catch (Exception e) {",
          "271:             URI uri = currentInput.uri();",
          "",
          "[Removed Lines]",
          "246:     private String getLine(BufferedReader reader, long startFrom, int retry) throws IOException {",
          "251:                 if (currentLineNumber < startFrom) {",
          "259:         } catch (SocketTimeoutException e) {",
          "260:             if (retry > MAX_SOCKET_TIMEOUT_RETRIES) {",
          "261:                 URI uri = currentInput.uri();",
          "262:                 LOGGER.error(\"Timeout during COPY FROM '\" + uri.toString() + \"' after \" + retry + \" retries\", e);",
          "263:                 throw e;",
          "264:             } else {",
          "265:                 long startLine = retry == 0 ? currentLineNumber + 1 : startFrom;",
          "268:                 return getLine(currentReader, startLine, retry + 1);",
          "",
          "[Added Lines]",
          "269:     private String getLine(BufferedReader reader) throws IOException {",
          "274:                 if (currentLineNumber < watermark) {",
          "276:                 } else {",
          "277:                     watermark = 0;",
          "284:         } catch (SocketException | SocketTimeoutException e) {",
          "285:             if (backOffPolicy.hasNext()) {",
          "286:                 watermark = watermark == 0 ? currentLineNumber + 1 : watermark;",
          "289:             } else {",
          "290:                 URI uri = currentInput.uri();",
          "291:                 LOGGER.error(\"Timeout during COPY FROM '\" + uri.toString() +",
          "292:                              \"' after \" + MAX_SOCKET_TIMEOUT_RETRIES +",
          "293:                              \" retries\", e);",
          "295:             throw e;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "282:         closeCurrentReader();",
          "283:         releaseBatchIteratorState();",
          "284:         killed = BatchIterator.CLOSED;",
          "285:     }",
          "287:     private void releaseBatchIteratorState() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:         backOffPolicy.forEachRemaining((delay) -> {});",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "292:     }",
          "294:     @Override",
          "297:     }",
          "299:     @Override",
          "300:     public boolean allLoaded() {",
          "302:     }",
          "304:     @Override",
          "",
          "[Removed Lines]",
          "295:     public CompletableFuture<?> loadNextBatch() {",
          "296:         throw new IllegalStateException(\"All batches already loaded\");",
          "301:         return true;",
          "",
          "[Added Lines]",
          "322:     public CompletableFuture<?> loadNextBatch() throws IOException {",
          "323:         if (backOffPolicy.hasNext()) {",
          "324:             CompletableFuture<Void> cf = new CompletableFuture<>();",
          "325:             scheduler.schedule(",
          "326:                 (Runnable) () -> cf.complete(null), // cast to Runnable for enabling mockito tests",
          "327:                 backOffPolicy.next().getMillis(),",
          "328:                 TimeUnit.MILLISECONDS);",
          "329:             return cf;",
          "330:         } else {",
          "331:             throw new IllegalStateException(\"All batches already loaded\");",
          "332:         }",
          "337:         return !backOffPolicy.hasNext();",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java -> server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import org.elasticsearch.cluster.service.ClusterService;",
          "44: import org.elasticsearch.common.inject.Inject;",
          "45: import org.elasticsearch.common.inject.Singleton;",
          "47: import java.util.Arrays;",
          "48: import java.util.Collection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import org.elasticsearch.threadpool.ThreadPool;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     private final Map<String, FileInputFactory> fileInputFactoryMap;",
          "59:     private final InputFactory inputFactory;",
          "60:     private final NodeContext nodeCtx;",
          "62:     @Inject",
          "64:         this.fileInputFactoryMap = fileInputFactoryMap;",
          "65:         this.nodeCtx = nodeCtx;",
          "66:         this.inputFactory = new InputFactory(nodeCtx);",
          "67:         this.clusterService = clusterService;",
          "68:     }",
          "70:     @Override",
          "",
          "[Removed Lines]",
          "63:     public FileCollectSource(NodeContext nodeCtx, ClusterService clusterService, Map<String, FileInputFactory> fileInputFactoryMap) {",
          "",
          "[Added Lines]",
          "62:     private final ThreadPool threadPool;",
          "65:     public FileCollectSource(NodeContext nodeCtx,",
          "66:                              ClusterService clusterService,",
          "67:                              Map<String, FileInputFactory> fileInputFactoryMap,",
          "68:                              ThreadPool threadPool) {",
          "73:         this.threadPool = threadPool;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:         ctx.add(collectPhase.toCollect());",
          "80:         List<String> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri());",
          "95:     }",
          "97:     @VisibleForTesting",
          "",
          "[Removed Lines]",
          "81:         return CompletableFuture.completedFuture(FileReadingIterator.newInstance(",
          "82:             fileUris,",
          "83:             ctx.topLevelInputs(),",
          "84:             ctx.expressions(),",
          "85:             fileUriCollectPhase.compression(),",
          "86:             fileInputFactoryMap,",
          "87:             fileUriCollectPhase.sharedStorage(),",
          "88:             fileUriCollectPhase.nodeIds().size(),",
          "89:             getReaderNumber(fileUriCollectPhase.nodeIds(), clusterService.state().nodes().getLocalNodeId()),",
          "90:             fileUriCollectPhase.targetColumns(),",
          "91:             fileUriCollectPhase.parserProperties(),",
          "92:             fileUriCollectPhase.inputFormat(),",
          "93:             fileUriCollectPhase.withClauseOptions()",
          "94:         ));",
          "",
          "[Added Lines]",
          "87:         return CompletableFuture.completedFuture(",
          "88:             FileReadingIterator.newInstance(",
          "89:                 fileUris,",
          "90:                 ctx.topLevelInputs(),",
          "91:                 ctx.expressions(),",
          "92:                 fileUriCollectPhase.compression(),",
          "93:                 fileInputFactoryMap,",
          "94:                 fileUriCollectPhase.sharedStorage(),",
          "95:                 fileUriCollectPhase.nodeIds().size(),",
          "96:                 getReaderNumber(fileUriCollectPhase.nodeIds(), clusterService.state().nodes().getLocalNodeId()),",
          "97:                 fileUriCollectPhase.targetColumns(),",
          "98:                 fileUriCollectPhase.parserProperties(),",
          "99:                 fileUriCollectPhase.inputFormat(),",
          "100:                 fileUriCollectPhase.withClauseOptions(),",
          "101:                 threadPool.scheduler()",
          "102:             ));",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java -> server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     @Test",
          "67:     public void testFileUriCollect() throws Exception {",
          "70:         File tmpFile = temporaryFolder.newFile(\"fileUriCollectOperation.json\");",
          "71:         try (OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tmpFile), StandardCharsets.UTF_8)) {",
          "",
          "[Removed Lines]",
          "68:         FileCollectSource fileCollectSource = new FileCollectSource(createNodeContext(), clusterService, Collections.emptyMap());",
          "",
          "[Added Lines]",
          "68:         FileCollectSource fileCollectSource = new FileCollectSource(",
          "69:             createNodeContext(),",
          "70:             clusterService,",
          "71:             Collections.emptyMap(),",
          "72:             THREAD_POOL",
          "73:             );",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import java.util.Iterator;",
          "41: import java.util.List;",
          "42: import java.util.Map;",
          "43: import java.util.zip.GZIPOutputStream;",
          "45: import org.elasticsearch.common.settings.Settings;",
          "46: import org.elasticsearch.test.ESTestCase;",
          "47: import org.junit.AfterClass;",
          "48: import org.junit.Before;",
          "49: import org.junit.BeforeClass;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import java.util.concurrent.TimeUnit;",
          "48: import org.elasticsearch.threadpool.TestThreadPool;",
          "49: import org.elasticsearch.threadpool.ThreadPool;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: import io.crate.types.DataTypes;",
          "73: public class FileReadingCollectorTest extends ESTestCase {",
          "75:     private static File tmpFile;",
          "76:     private static File tmpFileGz;",
          "77:     private static File tmpFileEmptyLine;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     private static ThreadPool THREAD_POOL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:             writer.write(\"\\n\");",
          "103:             writer.write(\"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\\n\");",
          "104:         }",
          "105:     }",
          "107:     @Before",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:         THREAD_POOL = new TestThreadPool(Thread.currentThread().getName());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:         assertThat(tmpFile.delete(), is(true));",
          "116:         assertThat(tmpFileGz.delete(), is(true));",
          "117:         assertThat(tmpFileEmptyLine.delete(), is(true));",
          "118:     }",
          "120:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:         ThreadPool.terminate(THREAD_POOL, 30, TimeUnit.SECONDS);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "249:             List.of(\"a\", \"b\"),",
          "250:             CopyFromParserProperties.DEFAULT,",
          "251:             FileUriCollectPhase.InputFormat.JSON,",
          "253:     }",
          "255:     private static class WriteBufferAnswer implements Answer<Integer> {",
          "",
          "[Removed Lines]",
          "252:             Settings.EMPTY);",
          "",
          "[Added Lines]",
          "257:             Settings.EMPTY,",
          "258:             THREAD_POOL.scheduler());",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import static io.crate.execution.dsl.phases.FileUriCollectPhase.InputFormat.CSV;",
          "25: import static io.crate.execution.dsl.phases.FileUriCollectPhase.InputFormat.JSON;",
          "26: import static io.crate.testing.TestingHelpers.createReference;",
          "28: import java.io.BufferedReader;",
          "29: import java.io.IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import static io.crate.execution.engine.collect.files.FileReadingIterator.MAX_SOCKET_TIMEOUT_RETRIES;",
          "28: import static org.assertj.core.api.Assertions.assertThat;",
          "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "30: import static org.mockito.ArgumentMatchers.any;",
          "31: import static org.mockito.ArgumentMatchers.eq;",
          "32: import static org.mockito.Mockito.mock;",
          "33: import static org.mockito.Mockito.times;",
          "34: import static org.mockito.Mockito.verify;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: import java.util.Collections;",
          "39: import java.util.List;",
          "40: import java.util.Map;",
          "41: import java.util.function.Supplier;",
          "43: import org.elasticsearch.common.settings.Settings;",
          "44: import org.elasticsearch.test.ESTestCase;",
          "45: import org.junit.Before;",
          "46: import org.junit.Test;",
          "48: import io.crate.analyze.CopyFromParserProperties;",
          "49: import io.crate.data.BatchIterator;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import java.util.concurrent.ScheduledExecutorService;",
          "50: import java.util.concurrent.TimeUnit;",
          "55: import org.elasticsearch.threadpool.TestThreadPool;",
          "56: import org.elasticsearch.threadpool.ThreadPool;",
          "57: import org.junit.AfterClass;",
          "59: import org.junit.BeforeClass;",
          "61: import org.mockito.ArgumentCaptor;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     private static final String CSV_AS_MAP_FIRST_LINE = \"{\\\"name\\\":\\\"Arthur\\\",\\\"id\\\":\\\"4\\\",\\\"age\\\":\\\"38\\\"}\";",
          "68:     private static final String CSV_AS_MAP_SECOND_LINE = \"{\\\"name\\\":\\\"Trillian\\\",\\\"id\\\":\\\"5\\\",\\\"age\\\":\\\"33\\\"}\";",
          "69:     private static final TransactionContext TXN_CTX = CoordinatorTxnCtx.systemTransactionContext();",
          "71:     private InputFactory inputFactory;",
          "73:     @Before",
          "74:     public void prepare() {",
          "75:         NodeContext nodeCtx = new NodeContext(new Functions(Map.of()), null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     private static ThreadPool THREAD_POOL;",
          "89:     @BeforeClass",
          "90:     public static void setupThreadPool() {",
          "91:         THREAD_POOL = new TestThreadPool(Thread.currentThread().getName());",
          "92:     }",
          "94:     @AfterClass",
          "95:     public static void shutdownThreadPool() {",
          "96:         ThreadPool.terminate(THREAD_POOL, 30, TimeUnit.SECONDS);",
          "97:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:                 List.of(\"name\", \"id\", \"age\"),",
          "182:                 CopyFromParserProperties.DEFAULT,",
          "183:                 JSON,",
          "185:             ) {",
          "187:                 @Override",
          "",
          "[Removed Lines]",
          "184:                 Settings.EMPTY",
          "",
          "[Added Lines]",
          "210:                 Settings.EMPTY,",
          "211:                 THREAD_POOL.scheduler()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "239:                 List.of(\"id\"),",
          "240:                 new CopyFromParserProperties(true, true, ',', 0),",
          "241:                 CSV,",
          "243:             ) {",
          "244:                 int retry = 0;",
          "",
          "[Removed Lines]",
          "242:                 Settings.EMPTY",
          "",
          "[Added Lines]",
          "269:                 Settings.EMPTY,",
          "270:                 THREAD_POOL.scheduler()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "300:                 List.of(\"id\"),",
          "301:                 new CopyFromParserProperties(true, false, ',', skipNumLines),",
          "302:                 CSV,",
          "304:             ) {",
          "305:                 int retry = 0;",
          "306:                 final List<String> linesToThrow = List.of(\"3\", \"2\", \"3\", \"5\", \"2\");",
          "",
          "[Removed Lines]",
          "303:                 Settings.EMPTY",
          "",
          "[Added Lines]",
          "331:                 Settings.EMPTY,",
          "332:                 THREAD_POOL.scheduler()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "333:         tester.verifyResultAndEdgeCaseBehaviour(expectedResult);",
          "334:     }",
          "336:     private BatchIterator<Row> createBatchIterator(Collection<String> fileUris,",
          "337:                                                    FileUriCollectPhase.InputFormat format) {",
          "338:         Reference raw = createReference(\"_raw\", DataTypes.STRING);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:     @Test",
          "366:     public void test_loadNextBatch_implements_retry_with_backoff() throws IOException {",
          "367:         ScheduledExecutorService scheduler = mock(ScheduledExecutorService.class);",
          "368:         var fi = new FileReadingIterator(",
          "369:             List.of(),",
          "370:             List.of(),",
          "371:             List.of(),",
          "372:             null,",
          "373:             Map.of(),",
          "374:             false,",
          "375:             1,",
          "376:             0,",
          "377:             List.of(),",
          "378:             null,",
          "379:             CSV,",
          "380:             Settings.EMPTY,",
          "381:             scheduler",
          "382:         );",
          "383:         ArgumentCaptor<Long> delays = ArgumentCaptor.forClass(Long.class);",
          "385:         for (int i = 0; i < MAX_SOCKET_TIMEOUT_RETRIES; i++) {",
          "386:             fi.loadNextBatch().complete(null);",
          "387:         }",
          "389:         verify(scheduler, times(MAX_SOCKET_TIMEOUT_RETRIES))",
          "390:             .schedule(any(Runnable.class), delays.capture(), eq(TimeUnit.MILLISECONDS));",
          "391:         final List<Long> actualDelays = delays.getAllValues();",
          "392:         assertThat(actualDelays).isEqualTo(Arrays.asList(0L, 10L, 30L, 100L, 230L));",
          "395:         assertThatThrownBy(fi::loadNextBatch)",
          "396:             .isExactlyInstanceOf(IllegalStateException.class)",
          "397:             .hasMessage(\"All batches already loaded\");",
          "398:     }",
          "400:     @Test",
          "401:     public void test_retry_from_one_uri_does_not_affect_reading_next_uri() throws Exception {",
          "402:         Path tempFile = createTempFile(\"tempfile1\", \".csv\");",
          "403:         Files.write(tempFile, List.of(\"1\", \"2\", \"3\"));",
          "404:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
          "405:         Files.write(tempFile2, List.of(\"4\", \"5\", \"6\"));",
          "406:         List<String> fileUris = List.of(tempFile.toUri().toString(), tempFile2.toUri().toString());",
          "408:         Reference raw = createReference(\"_raw\", DataTypes.STRING);",
          "409:         InputFactory.Context<LineCollectorExpression<?>> ctx =",
          "410:             inputFactory.ctxForRefs(TXN_CTX, FileLineReferenceResolver::getImplementation);",
          "411:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "413:         var fi = new FileReadingIterator(",
          "414:             fileUris,",
          "415:             inputs,",
          "416:             ctx.expressions(),",
          "417:             null,",
          "418:             Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
          "419:             false,",
          "420:             1,",
          "421:             0,",
          "422:             List.of(\"id\"),",
          "423:             new CopyFromParserProperties(true, false, ',', 0),",
          "424:             CSV,",
          "425:             Settings.EMPTY,",
          "426:             THREAD_POOL.scheduler()",
          "427:         ) {",
          "428:             private boolean isThrownOnce = false;",
          "429:             final int lineToThrow = 2;",
          "431:             @Override",
          "432:             BufferedReader createBufferedReader(InputStream inputStream) throws IOException {",
          "433:                 return new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8)) {",
          "435:                     private int currentLineNumber = 0;",
          "436:                     @Override",
          "437:                     public String readLine() throws IOException {",
          "438:                         var line = super.readLine();",
          "439:                         if (!isThrownOnce && currentLineNumber++ == lineToThrow) {",
          "440:                             isThrownOnce = true;",
          "441:                             throw new SocketTimeoutException(\"dummy\");",
          "442:                         }",
          "443:                         return line;",
          "444:                     }",
          "445:                 };",
          "446:             }",
          "447:         };",
          "449:         assertThat(fi.moveNext()).isEqualTo(true);",
          "450:         assertThat(fi.currentElement().get(0)).isEqualTo(\"{\\\"id\\\":\\\"1\\\"}\");",
          "451:         assertThat(fi.moveNext()).isEqualTo(true);",
          "452:         assertThat(fi.currentElement().get(0)).isEqualTo(\"{\\\"id\\\":\\\"2\\\"}\");",
          "453:         assertThat(fi.moveNext()).isEqualTo(false);",
          "454:         assertThat(fi.allLoaded()).isEqualTo(false);",
          "455:         var backoff = fi.loadNextBatch();",
          "456:         backoff.thenRun(",
          "457:             () -> {",
          "458:                 assertThat(fi.currentElement().get(0)).isEqualTo(\"{\\\"id\\\":\\\"2\\\"}\");",
          "459:                 assertThat(fi.watermark).isEqualTo(3);",
          "460:                 assertThat(fi.moveNext()).isEqualTo(true);",
          "462:                 assertThat(fi.watermark).isEqualTo(0);",
          "463:                 assertThat(fi.currentElement().get(0)).isEqualTo(\"{\\\"id\\\":\\\"3\\\"}\");",
          "466:                 assertThat(fi.moveNext()).isEqualTo(true);",
          "467:                 assertThat(fi.currentElement().get(0)).isEqualTo(\"{\\\"id\\\":\\\"4\\\"}\");",
          "468:             }",
          "469:         ).join();",
          "470:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "352:             List.of(\"name\", \"id\", \"age\"),",
          "353:             CopyFromParserProperties.DEFAULT,",
          "354:             format,",
          "356:     }",
          "357: }",
          "",
          "[Removed Lines]",
          "355:             Settings.EMPTY);",
          "",
          "[Added Lines]",
          "491:             Settings.EMPTY,",
          "492:             THREAD_POOL.scheduler());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b6cb5b0ea2e403fd02b593d228da4f66aa883ec",
      "candidate_info": {
        "commit_hash": "6b6cb5b0ea2e403fd02b593d228da4f66aa883ec",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/6b6cb5b0ea2e403fd02b593d228da4f66aa883ec",
        "files": [
          "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java"
        ],
        "message": "Remove static factory in FileReadingIterator\n\nThe constructor has the exact same signature",
        "before_after_code_files": [
          "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java"
          ],
          "candidate": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java"
          ]
        }
      },
      "candidate_diff": {
        "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java": [
          "File: benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java -> benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:         InputFactory.Context<LineCollectorExpression<?>> ctx = inputFactory.ctxForRefs(txnCtx, FileLineReferenceResolver::getImplementation);",
          "142:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "144:             Collections.singletonList(fileUri),",
          "145:             inputs,",
          "146:             ctx.expressions(),",
          "",
          "[Removed Lines]",
          "143:         BatchIterator<Row> batchIterator = FileReadingIterator.newInstance(",
          "",
          "[Added Lines]",
          "143:         BatchIterator<Row> batchIterator = new FileReadingIterator(",
          "",
          "---------------"
        ],
        "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java": [
          "File: benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java -> benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:             txnCtx, FileLineReferenceResolver::getImplementation);",
          "142:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "144:             Collections.singletonList(fileUri),",
          "145:             inputs,",
          "146:             ctx.expressions(),",
          "",
          "[Removed Lines]",
          "143:         BatchIterator<Row> batchIterator = FileReadingIterator.newInstance(",
          "",
          "[Added Lines]",
          "143:         BatchIterator<Row> batchIterator = new FileReadingIterator(",
          "",
          "---------------"
        ],
        "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
          "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:             Input<String> sourceUriFailureInput = (Input<String>) ctx.add(sourceUriFailure);",
          "217:             inputs.add(sourceUriFailureInput);",
          "218:         }",
          "220:             fileUris,",
          "221:             inputs,",
          "222:             ctx.expressions(),",
          "",
          "[Removed Lines]",
          "219:         return FileReadingIterator.newInstance(",
          "",
          "[Added Lines]",
          "219:         return new FileReadingIterator(",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java -> server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import java.util.function.Predicate;",
          "44: import java.util.zip.GZIPInputStream;",
          "49: import org.apache.logging.log4j.LogManager;",
          "50: import org.apache.logging.log4j.Logger;",
          "51: import org.elasticsearch.action.bulk.BackoffPolicy;",
          "52: import org.elasticsearch.common.settings.Settings;",
          "54: import io.crate.analyze.CopyFromParserProperties;",
          "55: import io.crate.common.annotations.VisibleForTesting;",
          "",
          "[Removed Lines]",
          "46: import org.jetbrains.annotations.NotNull;",
          "47: import org.jetbrains.annotations.Nullable;",
          "",
          "[Added Lines]",
          "50: import org.jetbrains.annotations.NotNull;",
          "51: import org.jetbrains.annotations.Nullable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     @VisibleForTesting",
          "68:     static final int MAX_SOCKET_TIMEOUT_RETRIES = 5;",
          "100:     private final Map<String, FileInputFactory> fileInputFactories;",
          "101:     private final Boolean shared;",
          "102:     private final int numReaders;",
          "",
          "[Removed Lines]",
          "70:     public static BatchIterator<Row> newInstance(Collection<String> fileUris,",
          "71:                                                  List<Input<?>> inputs,",
          "72:                                                  Iterable<LineCollectorExpression<?>> collectorExpressions,",
          "73:                                                  String compression,",
          "74:                                                  Map<String, FileInputFactory> fileInputFactories,",
          "75:                                                  Boolean shared,",
          "76:                                                  int numReaders,",
          "77:                                                  int readerNumber,",
          "78:                                                  List<String> targetColumns,",
          "79:                                                  CopyFromParserProperties parserProperties,",
          "80:                                                  FileUriCollectPhase.InputFormat inputFormat,",
          "81:                                                  Settings withClauseOptions,",
          "82:                                                  ScheduledExecutorService scheduler) {",
          "83:         return new FileReadingIterator(",
          "84:             fileUris,",
          "85:             inputs,",
          "86:             collectorExpressions,",
          "87:             compression,",
          "88:             fileInputFactories,",
          "89:             shared,",
          "90:             numReaders,",
          "91:             readerNumber,",
          "92:             targetColumns,",
          "93:             parserProperties,",
          "94:             inputFormat,",
          "95:             withClauseOptions,",
          "96:             scheduler);",
          "97:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     private final ScheduledExecutorService scheduler;",
          "125:     private final Iterator<TimeValue> backOffPolicy;",
          "141:         this.compressed = compression != null && compression.equalsIgnoreCase(\"gzip\");",
          "142:         this.row = new InputRow(inputs);",
          "143:         this.fileInputFactories = fileInputFactories;",
          "",
          "[Removed Lines]",
          "127:     @VisibleForTesting",
          "128:     FileReadingIterator(Collection<String> fileUris,",
          "129:                         List<? extends Input<?>> inputs,",
          "130:                         Iterable<LineCollectorExpression<?>> collectorExpressions,",
          "131:                         String compression,",
          "132:                         Map<String, FileInputFactory> fileInputFactories,",
          "133:                         Boolean shared,",
          "134:                         int numReaders,",
          "135:                         int readerNumber,",
          "136:                         List<String> targetColumns,",
          "137:                         CopyFromParserProperties parserProperties,",
          "138:                         FileUriCollectPhase.InputFormat inputFormat,",
          "139:                         Settings withClauseOptions,",
          "140:                         ScheduledExecutorService scheduler) {",
          "",
          "[Added Lines]",
          "96:     public FileReadingIterator(Collection<String> fileUris,",
          "97:                                List<? extends Input<?>> inputs,",
          "98:                                Iterable<LineCollectorExpression<?>> collectorExpressions,",
          "99:                                String compression,",
          "100:                                Map<String, FileInputFactory> fileInputFactories,",
          "101:                                Boolean shared,",
          "102:                                int numReaders,",
          "103:                                int readerNumber,",
          "104:                                List<String> targetColumns,",
          "105:                                CopyFromParserProperties parserProperties,",
          "106:                                FileUriCollectPhase.InputFormat inputFormat,",
          "107:                                Settings withClauseOptions,",
          "108:                                ScheduledExecutorService scheduler) {",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java -> server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.execution.engine.collect.sources;",
          "24: import io.crate.analyze.AnalyzedCopyFrom;",
          "25: import io.crate.analyze.SymbolEvaluator;",
          "26: import io.crate.common.annotations.VisibleForTesting;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.Arrays;",
          "25: import java.util.Collection;",
          "26: import java.util.Collections;",
          "27: import java.util.List;",
          "28: import java.util.Map;",
          "29: import java.util.concurrent.CompletableFuture;",
          "31: import org.elasticsearch.cluster.service.ClusterService;",
          "32: import org.elasticsearch.common.inject.Inject;",
          "33: import org.elasticsearch.common.inject.Singleton;",
          "34: import org.elasticsearch.threadpool.ThreadPool;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import io.crate.planner.operators.SubQueryResults;",
          "41: import io.crate.types.ArrayType;",
          "42: import io.crate.types.DataTypes;",
          "55: @Singleton",
          "56: public class FileCollectSource implements CollectSource {",
          "",
          "[Removed Lines]",
          "43: import org.elasticsearch.cluster.service.ClusterService;",
          "44: import org.elasticsearch.common.inject.Inject;",
          "45: import org.elasticsearch.common.inject.Singleton;",
          "46: import org.elasticsearch.threadpool.ThreadPool;",
          "48: import java.util.Arrays;",
          "49: import java.util.Collection;",
          "50: import java.util.Collections;",
          "51: import java.util.List;",
          "52: import java.util.Map;",
          "53: import java.util.concurrent.CompletableFuture;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:         List<String> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri());",
          "87:         return CompletableFuture.completedFuture(",
          "89:                 fileUris,",
          "90:                 ctx.topLevelInputs(),",
          "91:                 ctx.expressions(),",
          "",
          "[Removed Lines]",
          "88:             FileReadingIterator.newInstance(",
          "",
          "[Added Lines]",
          "89:             new FileReadingIterator(",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: import org.junit.Before;",
          "52: import org.junit.BeforeClass;",
          "53: import org.junit.Test;",
          "57: import io.crate.analyze.CopyFromParserProperties;",
          "58: import io.crate.data.BatchIterator;",
          "",
          "[Removed Lines]",
          "54: import org.mockito.invocation.InvocationOnMock;",
          "55: import org.mockito.stubbing.Answer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:             sourceUriFailureInput = (Input<String>) ctx.add(sourceUriFailure);",
          "243:             inputs.add(sourceUriFailureInput);",
          "244:         }",
          "246:             fileUris,",
          "247:             inputs,",
          "248:             ctx.expressions(),",
          "",
          "[Removed Lines]",
          "245:         return FileReadingIterator.newInstance(",
          "",
          "[Added Lines]",
          "243:         return new FileReadingIterator(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "257:             Settings.EMPTY,",
          "258:             THREAD_POOL.scheduler());",
          "259:     }",
          "276: }",
          "",
          "[Removed Lines]",
          "261:     private static class WriteBufferAnswer implements Answer<Integer> {",
          "263:         private byte[] bytes;",
          "265:         public WriteBufferAnswer(byte[] bytes) {",
          "266:             this.bytes = bytes;",
          "267:         }",
          "269:         @Override",
          "270:         public Integer answer(InvocationOnMock invocation) throws Throwable {",
          "271:             byte[] buffer = (byte[]) invocation.getArguments()[0];",
          "272:             System.arraycopy(bytes, 0, buffer, 0, bytes.length);",
          "273:             return bytes.length;",
          "274:         }",
          "275:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:             inputFactory.ctxForRefs(TXN_CTX, FileLineReferenceResolver::getImplementation);",
          "478:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "480:             fileUris,",
          "481:             inputs,",
          "482:             ctx.expressions(),",
          "",
          "[Removed Lines]",
          "479:         return FileReadingIterator.newInstance(",
          "",
          "[Added Lines]",
          "479:         return new FileReadingIterator(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cc1a89b87c33000c959da1b044b2d6682452f65",
      "candidate_info": {
        "commit_hash": "7cc1a89b87c33000c959da1b044b2d6682452f65",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/7cc1a89b87c33000c959da1b044b2d6682452f65",
        "files": [
          "server/src/main/java/io/crate/exceptions/RoleAlreadyExistsException.java",
          "server/src/main/java/io/crate/role/RoleManagerService.java",
          "server/src/main/java/io/crate/role/TransportCreateRoleAction.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/integrationtests/RoleManagementIntegrationTest.java",
          "server/src/test/java/io/crate/role/TransportRoleActionTest.java"
        ],
        "message": "Make RoleAlreadyExistsException streamable",
        "before_after_code_files": [
          "server/src/main/java/io/crate/exceptions/RoleAlreadyExistsException.java||server/src/main/java/io/crate/exceptions/RoleAlreadyExistsException.java",
          "server/src/main/java/io/crate/role/RoleManagerService.java||server/src/main/java/io/crate/role/RoleManagerService.java",
          "server/src/main/java/io/crate/role/TransportCreateRoleAction.java||server/src/main/java/io/crate/role/TransportCreateRoleAction.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/integrationtests/RoleManagementIntegrationTest.java||server/src/test/java/io/crate/integrationtests/RoleManagementIntegrationTest.java",
          "server/src/test/java/io/crate/role/TransportRoleActionTest.java||server/src/test/java/io/crate/role/TransportRoleActionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
          ],
          "candidate": [
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
          ]
        }
      },
      "candidate_diff": {
        "server/src/main/java/io/crate/exceptions/RoleAlreadyExistsException.java||server/src/main/java/io/crate/exceptions/RoleAlreadyExistsException.java": [
          "File: server/src/main/java/io/crate/exceptions/RoleAlreadyExistsException.java -> server/src/main/java/io/crate/exceptions/RoleAlreadyExistsException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.exceptions;",
          "33:         super(message);",
          "34:     }",
          "46:     }",
          "47: }",
          "",
          "[Removed Lines]",
          "24: import java.util.Locale;",
          "26: import org.jetbrains.annotations.Nullable;",
          "28: import io.crate.role.JwtProperties;",
          "30: public class RoleAlreadyExistsException extends RuntimeException implements ConflictException, UnscopedException {",
          "32:     private RoleAlreadyExistsException(String message) {",
          "36:     public static RoleAlreadyExistsException of(String roleName, @Nullable JwtProperties jwtProperties) {",
          "37:         if (jwtProperties == null) {",
          "38:             return new RoleAlreadyExistsException(String.format(Locale.ENGLISH, \"Role '%s' already exists\", roleName));",
          "39:         } else {",
          "40:             return new RoleAlreadyExistsException(String.format(",
          "41:                 Locale.ENGLISH,",
          "42:                 \"Role '%s' or another role with the same combination of jwt properties already exists\",",
          "43:                 roleName",
          "44:             ));",
          "45:         }",
          "",
          "[Added Lines]",
          "24: import java.io.IOException;",
          "26: import org.elasticsearch.ElasticsearchException;",
          "27: import org.elasticsearch.common.io.stream.StreamInput;",
          "28: import org.elasticsearch.common.io.stream.StreamOutput;",
          "31: public class RoleAlreadyExistsException extends ElasticsearchException implements ConflictException, UnscopedException {",
          "33:     public RoleAlreadyExistsException(String message) {",
          "37:     public RoleAlreadyExistsException(StreamInput in) throws IOException {",
          "38:         super(in);",
          "39:     }",
          "41:     @Override",
          "42:     public void writeTo(StreamOutput out) throws IOException {",
          "43:         super.writeTo(out);",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/role/RoleManagerService.java||server/src/main/java/io/crate/role/RoleManagerService.java": [
          "File: server/src/main/java/io/crate/role/RoleManagerService.java -> server/src/main/java/io/crate/role/RoleManagerService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:                                               @Nullable JwtProperties jwtProperties) {",
          "117:         return transportCreateRoleAction.execute(new CreateRoleRequest(roleName, isUser, hashedPw, jwtProperties), r -> {",
          "118:             if (r.doesUserExist()) {",
          "120:             }",
          "121:             return 1L;",
          "122:         });",
          "",
          "[Removed Lines]",
          "119:                 throw RoleAlreadyExistsException.of(roleName, jwtProperties);",
          "",
          "[Added Lines]",
          "119:                 throw new RoleAlreadyExistsException(String.format(Locale.ENGLISH, \"Role '%s' already exists\", roleName));",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/role/TransportCreateRoleAction.java||server/src/main/java/io/crate/role/TransportCreateRoleAction.java": [
          "File: server/src/main/java/io/crate/role/TransportCreateRoleAction.java -> server/src/main/java/io/crate/role/TransportCreateRoleAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import org.jetbrains.annotations.Nullable;",
          "43: import io.crate.common.annotations.VisibleForTesting;",
          "44: import io.crate.role.metadata.RolesMetadata;",
          "45: import io.crate.role.metadata.UsersMetadata;",
          "46: import io.crate.role.metadata.UsersPrivilegesMetadata;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import io.crate.exceptions.RoleAlreadyExistsException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:         UsersPrivilegesMetadata oldUserPrivilegesMetadata = (UsersPrivilegesMetadata) mdBuilder.getCustom(UsersPrivilegesMetadata.TYPE);",
          "121:         RolesMetadata newMetadata = RolesMetadata.of(mdBuilder, oldUsersMetadata, oldUserPrivilegesMetadata, oldRolesMetadata);",
          "122:         boolean exists = true;",
          "124:             newMetadata.roles().put(roleName, new Role(roleName, isUser, Set.of(), Set.of(), secureHash, jwtProperties));",
          "125:             exists = false;",
          "126:         } else if (newMetadata.equals(oldRolesMetadata)) {",
          "",
          "[Removed Lines]",
          "123:         if (newMetadata.contains(roleName) == false && newMetadata.contains(jwtProperties) == false) {",
          "",
          "[Added Lines]",
          "124:         if (newMetadata.contains(jwtProperties)) {",
          "125:             throw new RoleAlreadyExistsException(\"Another role with the same combination of jwt properties already exists\");",
          "126:         }",
          "127:         if (newMetadata.contains(roleName) == false) {",
          "",
          "---------------"
        ],
        "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
          "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1000:             UserMappingAlreadyExists.class,",
          "1001:             UserMappingAlreadyExists::new,",
          "1002:             179,",
          "1005:         final Class<? extends ElasticsearchException> exceptionClass;",
          "1006:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
          "",
          "[Removed Lines]",
          "1003:             Version.V_5_7_0) ;",
          "",
          "[Added Lines]",
          "1003:             Version.V_5_7_0),",
          "1004:         ROLE_ALREADY_EXISTS(",
          "1005:             io.crate.exceptions.RoleAlreadyExistsException.class,",
          "1006:             io.crate.exceptions.RoleAlreadyExistsException::new,",
          "1007:             180,",
          "1008:             Version.V_5_7_0);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/RoleManagementIntegrationTest.java||server/src/test/java/io/crate/integrationtests/RoleManagementIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/RoleManagementIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/RoleManagementIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:         Asserts.assertSQLError(() -> execute(\"CREATE USER user2 WITH (jwt = {\\\"iss\\\" = 'dummy.org/keys', \\\"username\\\" = 'app_user'})\"))",
          "286:             .hasPGError(INTERNAL_ERROR)",
          "287:             .hasHTTPError(CONFLICT, 4099)",
          "289:     }",
          "290: }",
          "",
          "[Removed Lines]",
          "288:             .hasMessageContaining(\"Role 'user2' or another role with the same combination of jwt properties already exists\");",
          "",
          "[Added Lines]",
          "288:             .hasMessageContaining(\"Another role with the same combination of jwt properties already exists\");",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/role/TransportRoleActionTest.java||server/src/test/java/io/crate/role/TransportRoleActionTest.java": [
          "File: server/src/test/java/io/crate/role/TransportRoleActionTest.java -> server/src/test/java/io/crate/role/TransportRoleActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import org.elasticsearch.test.ClusterServiceUtils;",
          "42: import org.junit.Test;",
          "44: import io.crate.fdw.AddServerTask;",
          "45: import io.crate.fdw.CreateServerRequest;",
          "46: import io.crate.role.metadata.RolesHelper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import io.crate.exceptions.RoleAlreadyExistsException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:             null,",
          "76:             new JwtProperties(\"https:dummy.org\", \"test\"));",
          "84:     }",
          "86:     @Test",
          "",
          "[Removed Lines]",
          "78:         boolean exists = TransportCreateRoleAction.putRole(mdBuilder,",
          "79:             \"user2\",",
          "80:             true,",
          "81:             null,",
          "82:             new JwtProperties(\"https:dummy.org\", \"test\"));",
          "83:         assertThat(exists).isTrue();",
          "",
          "[Added Lines]",
          "79:         assertThatThrownBy(() -> TransportCreateRoleAction.putRole(mdBuilder,",
          "80:                 \"user2\",",
          "81:                 true,",
          "82:                 null,",
          "83:                 new JwtProperties(\"https:dummy.org\", \"test\")))",
          "84:             .isExactlyInstanceOf(RoleAlreadyExistsException.class)",
          "85:             .hasMessage(\"Another role with the same combination of jwt properties already exists\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72d34414e15a06b5f535ce62b98d34ad421d0048",
      "candidate_info": {
        "commit_hash": "72d34414e15a06b5f535ce62b98d34ad421d0048",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/72d34414e15a06b5f535ce62b98d34ad421d0048",
        "files": [
          "server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "server/src/main/java/io/crate/rest/action/HttpError.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java"
        ],
        "message": "Make RoleUnknownException streamable and map to pg code 42704\n\nSee https://www.postgresql.org/docs/current/errcodes-appendix.html\nOr run `has_database_privilege('foo', 'pg', 'CONNECT')` against\nPostgreSQL:\n\n    ERROR:  42704: role \"foo\" does not exist\n    LOCATION:  get_role_oid, acl.c:5254",
        "before_after_code_files": [
          "server/src/main/java/io/crate/exceptions/RoleUnknownException.java||server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "server/src/main/java/io/crate/rest/action/HttpError.java||server/src/main/java/io/crate/rest/action/HttpError.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
          ],
          "candidate": [
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
          ]
        }
      },
      "candidate_diff": {
        "server/src/main/java/io/crate/exceptions/RoleUnknownException.java||server/src/main/java/io/crate/exceptions/RoleUnknownException.java": [
          "File: server/src/main/java/io/crate/exceptions/RoleUnknownException.java -> server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.exceptions;",
          "24: import java.util.Collections;",
          "25: import java.util.List;",
          "26: import java.util.Locale;",
          "30:     public RoleUnknownException(String roleName) {",
          "31:         super(getMessage(Collections.singletonList(roleName)));",
          "",
          "[Removed Lines]",
          "28: public class RoleUnknownException extends RuntimeException implements ResourceUnknownException, UnscopedException {",
          "",
          "[Added Lines]",
          "24: import java.io.IOException;",
          "29: import org.elasticsearch.ElasticsearchException;",
          "30: import org.elasticsearch.common.io.stream.StreamInput;",
          "32: import io.crate.protocols.postgres.PGErrorStatus;",
          "33: import io.crate.rest.action.HttpErrorStatus;",
          "35: public class RoleUnknownException extends ElasticsearchException implements ResourceUnknownException, UnscopedException {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         super(getMessage(roleNames));",
          "40:     }",
          "42:     private static String getMessage(List<String> roleNames) {",
          "44:         assert roleNames.isEmpty() == false : \"At least one username must be provided\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     public RoleUnknownException(StreamInput in) throws IOException {",
          "50:         super(in);",
          "51:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:         }",
          "48:         return String.format(Locale.ENGLISH, \"Roles '%s' do not exist\", String.join(\", \", roleNames));",
          "49:     }",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     @Override",
          "63:     public HttpErrorStatus httpErrorStatus() {",
          "64:         return HttpErrorStatus.USER_UNKNOWN;",
          "65:     }",
          "67:     @Override",
          "68:     public PGErrorStatus pgErrorStatus() {",
          "69:         return PGErrorStatus.UNDEFINED_OBJECT;",
          "70:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/rest/action/HttpError.java||server/src/main/java/io/crate/rest/action/HttpError.java": [
          "File: server/src/main/java/io/crate/rest/action/HttpError.java -> server/src/main/java/io/crate/rest/action/HttpError.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: import io.crate.exceptions.RelationValidationException;",
          "48: import io.crate.exceptions.RelationsUnknown;",
          "49: import io.crate.exceptions.RepositoryAlreadyExistsException;",
          "51: import io.crate.exceptions.SQLExceptions;",
          "52: import io.crate.exceptions.SQLParseException;",
          "53: import io.crate.exceptions.UnavailableShardsException;",
          "",
          "[Removed Lines]",
          "50: import io.crate.exceptions.RoleUnknownException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:             httpErrorStatus = HttpErrorStatus.PARTITION_UNKNOWN;",
          "141:         } else if (throwable instanceof RelationsUnknown) {",
          "142:             httpErrorStatus = HttpErrorStatus.RELATION_UNKNOWN;",
          "145:         } else if (throwable instanceof ReadOnlyException) {",
          "146:             httpErrorStatus = HttpErrorStatus.ONLY_READ_OPERATION_ALLOWED_ON_THIS_NODE;",
          "147:         } else if (throwable instanceof DuplicateKeyException) {",
          "",
          "[Removed Lines]",
          "143:         } else if (throwable instanceof RoleUnknownException) {",
          "144:             httpErrorStatus = HttpErrorStatus.USER_UNKNOWN;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
          "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: import io.crate.common.CheckedFunction;",
          "54: import io.crate.common.exceptions.Exceptions;",
          "55: import io.crate.exceptions.ArrayViaDocValuesUnsupportedException;",
          "56: import io.crate.exceptions.SQLExceptions;",
          "57: import io.crate.fdw.ServerAlreadyExistsException;",
          "58: import io.crate.fdw.UserMappingAlreadyExists;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1005:             io.crate.exceptions.RoleAlreadyExistsException.class,",
          "1006:             io.crate.exceptions.RoleAlreadyExistsException::new,",
          "1007:             180,",
          "1010:         final Class<? extends ElasticsearchException> exceptionClass;",
          "1011:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
          "",
          "[Removed Lines]",
          "1008:             Version.V_5_7_0);",
          "",
          "[Added Lines]",
          "1009:             Version.V_5_7_0),",
          "1010:         ROLE_UNKNOWN(",
          "1011:             RoleUnknownException.class,",
          "1012:             RoleUnknownException::new,",
          "1013:             181,",
          "1014:             Version.V_5_7_0",
          "1015:         );",
          "",
          "---------------"
        ]
      }
    }
  ]
}