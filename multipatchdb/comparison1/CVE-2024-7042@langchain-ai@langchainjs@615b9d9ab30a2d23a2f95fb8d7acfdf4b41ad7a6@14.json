{
  "cve_id": "CVE-2024-7042",
  "cve_desc": "A vulnerability in the GraphCypherQAChain class of langchain-ai/langchainjs versions 0.2.5 and all versions with this class allows for prompt injection, leading to SQL injection. This vulnerability permits unauthorized data manipulation, data exfiltration, denial of service (DoS) by deleting all data, breaches in multi-tenant security environments, and data integrity issues. Attackers can create, update, or delete nodes and relationships without proper authorization, extract sensitive data, disrupt services, access data across different tenants, and compromise the integrity of the database.",
  "repo": "langchain-ai/langchainjs",
  "patch_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
  "patch_info": {
    "commit_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "repo": "langchain-ai/langchainjs",
    "commit_url": "https://github.com/langchain-ai/langchainjs/commit/615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "files": [
      "examples/package.json",
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/package.json",
      "libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock"
    ],
    "message": "feat(community): Remove required param from LanceDB integration (#6706)\n\nCo-authored-by: jacoblee93 <jacoblee93@gmail.com>",
    "before_after_code_files": [
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromDocs.ts -> examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import fs from \"node:fs/promises\";",
      "5: import path from \"node:path\";",
      "6: import os from \"node:os\";",
      "10: const loader = new TextLoader(\"src/document_loaders/example_data/example.txt\");",
      "11: const docs = await loader.load();",
      "13: export const run = async () => {",
      "14:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "26:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "27:   console.log(resultOne);",
      "",
      "[Removed Lines]",
      "7: import { connect } from \"vectordb\";",
      "15:   const db = await connect(dir);",
      "16:   const table = await db.createTable(\"vectors\", [",
      "17:     { vector: Array(1536), text: \"sample\", source: \"a\" },",
      "18:   ]);",
      "20:   const vectorStore = await LanceDB.fromDocuments(",
      "21:     docs,",
      "22:     new OpenAIEmbeddings(),",
      "23:     { table }",
      "24:   );",
      "",
      "[Added Lines]",
      "13:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "15:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "16:   console.log(resultOne);",
      "24: };",
      "26: export const run_with_existing_table = async () => {",
      "29:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "",
      "---------------"
    ],
    "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromTexts.ts -> examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { LanceDB } from \"@langchain/community/vectorstores/lancedb\";",
      "2: import { OpenAIEmbeddings } from \"@langchain/openai\";",
      "4: import * as fs from \"node:fs/promises\";",
      "5: import * as path from \"node:path\";",
      "6: import os from \"node:os\";",
      "8: export const run = async () => {",
      "15:   const vectorStore = await LanceDB.fromTexts(",
      "16:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "17:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "20:   );",
      "22:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "",
      "[Removed Lines]",
      "3: import { connect } from \"vectordb\";",
      "9:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "10:   const db = await connect(dir);",
      "11:   const table = await db.createTable(\"vectors\", [",
      "12:     { vector: Array(1536), text: \"sample\", id: 1 },",
      "13:   ]);",
      "18:     new OpenAIEmbeddings(),",
      "19:     { table }",
      "",
      "[Added Lines]",
      "8:   const vectorStore = await LanceDB.fromTexts(",
      "9:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "10:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "11:     new OpenAIEmbeddings()",
      "12:   );",
      "14:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "15:   console.log(resultOne);",
      "17: };",
      "19: export const run_with_existing_table = async () => {",
      "20:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "24:     new OpenAIEmbeddings()",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts": [
      "File: libs/langchain-community/src/vectorstores/lancedb.ts -> libs/langchain-community/src/vectorstores/lancedb.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import type { EmbeddingsInterface } from \"@langchain/core/embeddings\";",
      "3: import { VectorStore } from \"@langchain/core/vectorstores\";",
      "4: import { Document } from \"@langchain/core/documents\";",
      "",
      "[Removed Lines]",
      "1: import { Table } from \"vectordb\";",
      "",
      "[Added Lines]",
      "1: import { connect, Table, Connection, WriteMode } from \"vectordb\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "10: export type LanceDBArgs = {",
      "12:   textKey?: string;",
      "13: };",
      "",
      "[Removed Lines]",
      "11:   table: Table;",
      "",
      "[Added Lines]",
      "11:   table?: Table;",
      "13:   uri?: string;",
      "14:   tableName?: string;",
      "15:   mode?: WriteMode;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "20: export class LanceDB extends VectorStore {",
      "23:   private textKey: string;",
      "28:     this.embeddings = embeddings;",
      "30:   }",
      "",
      "[Removed Lines]",
      "21:   private table: Table;",
      "25:   constructor(embeddings: EmbeddingsInterface, args: LanceDBArgs) {",
      "26:     super(embeddings, args);",
      "27:     this.table = args.table;",
      "29:     this.textKey = args.textKey || \"text\";",
      "",
      "[Added Lines]",
      "24:   private table?: Table;",
      "28:   private uri: string;",
      "30:   private tableName: string;",
      "32:   private mode?: WriteMode;",
      "34:   constructor(embeddings: EmbeddingsInterface, args?: LanceDBArgs) {",
      "35:     super(embeddings, args || {});",
      "36:     this.table = args?.table;",
      "38:     this.textKey = args?.textKey || \"text\";",
      "39:     this.uri = args?.uri || \"~/lancedb\";",
      "40:     this.tableName = args?.tableName || \"langchain\";",
      "41:     this.mode = args?.mode || WriteMode.Overwrite;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "71:       });",
      "72:       data.push(record);",
      "73:     }",
      "74:     await this.table.add(data);",
      "75:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86:     if (!this.table) {",
      "87:       const db: Connection = await connect(this.uri);",
      "88:       this.table = await db.createTable(this.tableName, data, {",
      "89:         writeMode: this.mode,",
      "90:       });",
      "92:       return;",
      "93:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "85:     query: number[],",
      "86:     k: number",
      "87:   ): Promise<[Document, number][]> {",
      "88:     const results = await this.table.search(query).limit(k).execute();",
      "90:     const docsAndScore: [Document, number][] = [];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:     if (!this.table) {",
      "109:       throw new Error(",
      "110:         \"Table not found. Please add vectors to the table first.\"",
      "111:       );",
      "112:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "119:     texts: string[],",
      "120:     metadatas: object[] | object,",
      "121:     embeddings: EmbeddingsInterface,",
      "123:   ): Promise<LanceDB> {",
      "124:     const docs: Document[] = [];",
      "125:     for (let i = 0; i < texts.length; i += 1) {",
      "",
      "[Removed Lines]",
      "122:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "147:     dbConfig?: LanceDBArgs",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "143:   static async fromDocuments(",
      "144:     docs: Document[],",
      "145:     embeddings: EmbeddingsInterface,",
      "147:   ): Promise<LanceDB> {",
      "148:     const instance = new this(embeddings, dbConfig);",
      "149:     await instance.addDocuments(docs);",
      "",
      "[Removed Lines]",
      "146:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "171:     dbConfig?: LanceDBArgs",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts": [
      "File: libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts -> libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     expect(resultsTwo.length).toBe(5);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49: describe(\"LanceDB empty schema\", () => {",
      "50:   test(\"Test fromTexts + addDocuments\", async () => {",
      "51:     const embeddings = new OpenAIEmbeddings();",
      "52:     const vectorStore = await LanceDB.fromTexts(",
      "53:       [\"hello bye\", \"hello world\", \"bye bye\"],",
      "54:       [{ id: 1 }, { id: 2 }, { id: 3 }],",
      "55:       embeddings",
      "56:     );",
      "58:     const results = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "59:     expect(results.length).toBe(3);",
      "61:     await vectorStore.addDocuments([",
      "62:       new Document({",
      "63:         pageContent: \"a new world\",",
      "64:         metadata: { id: 4 },",
      "65:       }),",
      "66:     ]);",
      "68:     const resultsTwo = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "69:     expect(resultsTwo.length).toBe(4);",
      "70:   });",
      "71: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:   languageName: node",
      "252:   linkType: hard",
      "272: \"@apify/consts@npm:^2.13.0, @apify/consts@npm:^2.9.0\":",
      "273:   version: 2.13.0",
      "274:   resolution: \"@apify/consts@npm:2.13.0\"",
      "",
      "[Removed Lines]",
      "254: \"@apache-arrow/ts@npm:^12.0.0\":",
      "255:   version: 12.0.0",
      "256:   resolution: \"@apache-arrow/ts@npm:12.0.0\"",
      "257:   dependencies:",
      "258:     \"@types/command-line-args\": 5.2.0",
      "259:     \"@types/command-line-usage\": 5.0.2",
      "260:     \"@types/node\": 18.14.5",
      "261:     \"@types/pad-left\": 2.1.1",
      "262:     command-line-args: 5.2.1",
      "263:     command-line-usage: 6.1.3",
      "264:     flatbuffers: 23.3.3",
      "265:     json-bignum: ^0.0.3",
      "266:     pad-left: ^2.1.0",
      "267:     tslib: ^2.5.0",
      "268:   checksum: 67b2791e14d5377b1d160a0d8390decc386e013c517713f8b9c100737a0e478a394086d91a8c846848d4e30289070a119d8e65191998f4c2555b18a29564df50",
      "269:   languageName: node",
      "270:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11112:   languageName: node",
      "11113:   linkType: hard",
      "11115: \"@langchain/anthropic@*, @langchain/anthropic@workspace:*, @langchain/anthropic@workspace:libs/langchain-anthropic\":",
      "11116:   version: 0.0.0-use.local",
      "11117:   resolution: \"@langchain/anthropic@workspace:libs/langchain-anthropic\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11097: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\":",
      "11098:   version: 0.4.20",
      "11099:   resolution: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\"",
      "11100:   conditions: os=darwin & cpu=arm64",
      "11101:   languageName: node",
      "11102:   linkType: hard",
      "11104: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\":",
      "11105:   version: 0.4.20",
      "11106:   resolution: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\"",
      "11107:   conditions: os=darwin & cpu=x64",
      "11108:   languageName: node",
      "11109:   linkType: hard",
      "11111: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\":",
      "11112:   version: 0.4.20",
      "11113:   resolution: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\"",
      "11114:   conditions: os=linux & cpu=arm64",
      "11115:   languageName: node",
      "11116:   linkType: hard",
      "11118: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\":",
      "11119:   version: 0.4.20",
      "11120:   resolution: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\"",
      "11121:   conditions: os=linux & cpu=x64",
      "11122:   languageName: node",
      "11123:   linkType: hard",
      "11125: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\":",
      "11126:   version: 0.4.20",
      "11127:   resolution: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\"",
      "11128:   conditions: os=win32 & cpu=x64",
      "11129:   languageName: node",
      "11130:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "11577:     typesense: ^1.5.3",
      "11578:     usearch: ^1.1.1",
      "11579:     uuid: ^10.0.0",
      "11581:     voy-search: 0.6.2",
      "11582:     weaviate-ts-client: ^1.4.0",
      "11583:     web-auth-library: ^1.0.3",
      "",
      "[Removed Lines]",
      "11580:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "11597:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "13039:   languageName: node",
      "13040:   linkType: hard",
      "13042: \"@neondatabase/serverless@npm:0.6.0\":",
      "13043:   version: 0.6.0",
      "13044:   resolution: \"@neondatabase/serverless@npm:0.6.0\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13059: \"@neon-rs/load@npm:^0.0.74\":",
      "13060:   version: 0.0.74",
      "13061:   resolution: \"@neon-rs/load@npm:0.0.74\"",
      "13062:   checksum: d26ec9b08cdf1a7c5aeefe98f77112d205d11b4005a7934b21fe8fd27528847e08e4749e7e6c3fc05ae9f701175a58c11a095ae6af449634df3991a2c82e1dfa",
      "13063:   languageName: node",
      "13064:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "20774:   languageName: node",
      "20775:   linkType: hard",
      "20797: \"apache-arrow@npm:^12.0.1\":",
      "20798:   version: 12.0.1",
      "20799:   resolution: \"apache-arrow@npm:12.0.1\"",
      "",
      "[Removed Lines]",
      "20777: \"apache-arrow@npm:^12.0.0\":",
      "20778:   version: 12.0.0",
      "20779:   resolution: \"apache-arrow@npm:12.0.0\"",
      "20780:   dependencies:",
      "20781:     \"@types/command-line-args\": 5.2.0",
      "20782:     \"@types/command-line-usage\": 5.0.2",
      "20783:     \"@types/node\": 18.14.5",
      "20784:     \"@types/pad-left\": 2.1.1",
      "20785:     command-line-args: 5.2.1",
      "20786:     command-line-usage: 6.1.3",
      "20787:     flatbuffers: 23.3.3",
      "20788:     json-bignum: ^0.0.3",
      "20789:     pad-left: ^2.1.0",
      "20790:     tslib: ^2.5.0",
      "20791:   bin:",
      "20792:     arrow2csv: bin/arrow2csv.js",
      "20793:   checksum: 3285189517c2b298cda42852321ce127754918513116eade6e4914c57983f68b6ba96605cfaa2202796d3d6e14755d3b3758f76c1374492affa3d95714eaca40",
      "20794:   languageName: node",
      "20795:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "27133:     typescript: ~5.1.6",
      "27134:     typesense: ^1.5.3",
      "27135:     uuid: ^10.0.0",
      "27137:     voy-search: 0.6.2",
      "27138:     weaviate-ts-client: ^2.0.0",
      "27139:     zod: ^3.22.4",
      "",
      "[Removed Lines]",
      "27136:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "27140:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "42444:   languageName: node",
      "42445:   linkType: hard",
      "42454:   languageName: node",
      "42455:   linkType: hard",
      "",
      "[Removed Lines]",
      "42447: \"vectordb@npm:^0.1.4\":",
      "42448:   version: 0.1.4",
      "42449:   resolution: \"vectordb@npm:0.1.4\"",
      "42450:   dependencies:",
      "42451:     \"@apache-arrow/ts\": ^12.0.0",
      "42452:     apache-arrow: ^12.0.0",
      "42453:   checksum: 8a40abf4466479b0b9e61687416b5ab232458401917bf9a1d5f3d8ea8c8320ecc5691174f4d4c0cfef0bb6c16328a9088419fd90ac85fd7267dbccdd1f9e55d7",
      "",
      "[Added Lines]",
      "42451: \"vectordb@npm:^0.9.0\":",
      "42452:   version: 0.9.0",
      "42453:   resolution: \"vectordb@npm:0.9.0\"",
      "42454:   dependencies:",
      "42455:     \"@lancedb/vectordb-darwin-arm64\": 0.4.20",
      "42456:     \"@lancedb/vectordb-darwin-x64\": 0.4.20",
      "42457:     \"@lancedb/vectordb-linux-arm64-gnu\": 0.4.20",
      "42458:     \"@lancedb/vectordb-linux-x64-gnu\": 0.4.20",
      "42459:     \"@lancedb/vectordb-win32-x64-msvc\": 0.4.20",
      "42460:     \"@neon-rs/load\": ^0.0.74",
      "42461:     axios: ^1.4.0",
      "42462:   peerDependencies:",
      "42463:     \"@apache-arrow/ts\": ^14.0.2",
      "42464:     apache-arrow: ^14.0.2",
      "42465:   dependenciesMeta:",
      "42466:     \"@lancedb/vectordb-darwin-arm64\":",
      "42467:       optional: true",
      "42468:     \"@lancedb/vectordb-darwin-x64\":",
      "42469:       optional: true",
      "42470:     \"@lancedb/vectordb-linux-arm64-gnu\":",
      "42471:       optional: true",
      "42472:     \"@lancedb/vectordb-linux-x64-gnu\":",
      "42473:       optional: true",
      "42474:     \"@lancedb/vectordb-win32-x64-msvc\":",
      "42475:       optional: true",
      "42476:   conditions: (os=darwin | os=linux | os=win32) & (cpu=x64 | cpu=arm64)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee0e8a26ff95589a86dba5c3c19e0044957162a1",
      "candidate_info": {
        "commit_hash": "ee0e8a26ff95589a86dba5c3c19e0044957162a1",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/ee0e8a26ff95589a86dba5c3c19e0044957162a1",
        "files": [
          "libs/langchain-community/package.json",
          "libs/langchain-community/src/chat_models/ibm.ts",
          "libs/langchain-community/src/chat_models/tests/ibm.int.test.ts",
          "libs/langchain-community/src/document_compressors/ibm.ts",
          "libs/langchain-community/src/llms/ibm.ts",
          "libs/langchain-community/src/llms/tests/ibm.int.test.ts",
          "yarn.lock"
        ],
        "message": "feat(community): Introduce callbacks to IBM Watsonx SDK (#7329)\n\nCo-authored-by: jacoblee93 <jacoblee93@gmail.com>",
        "before_after_code_files": [
          "libs/langchain-community/src/chat_models/ibm.ts||libs/langchain-community/src/chat_models/ibm.ts",
          "libs/langchain-community/src/chat_models/tests/ibm.int.test.ts||libs/langchain-community/src/chat_models/tests/ibm.int.test.ts",
          "libs/langchain-community/src/document_compressors/ibm.ts||libs/langchain-community/src/document_compressors/ibm.ts",
          "libs/langchain-community/src/llms/ibm.ts||libs/langchain-community/src/llms/ibm.ts",
          "libs/langchain-community/src/llms/tests/ibm.int.test.ts||libs/langchain-community/src/llms/tests/ibm.int.test.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-community/src/chat_models/ibm.ts||libs/langchain-community/src/chat_models/ibm.ts": [
          "File: libs/langchain-community/src/chat_models/ibm.ts -> libs/langchain-community/src/chat_models/ibm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: } from \"@langchain/core/outputs\";",
          "34: import { AsyncCaller } from \"@langchain/core/utils/async_caller\";",
          "35: import {",
          "36:   TextChatMessagesTextChatMessageAssistant,",
          "37:   TextChatParameterTools,",
          "38:   TextChatParams,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:   RequestCallbacks,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: export interface WatsonxCallParams",
          "82:   extends Partial<Omit<TextChatParams, \"modelId\" | \"toolChoice\">> {",
          "83:   maxRetries?: number;",
          "84: }",
          "85: export interface WatsonxCallOptionsChat",
          "86:   extends Omit<BaseChatModelCallOptions, \"stop\">,",
          "87:     WatsonxCallParams {",
          "88:   promptIndex?: number;",
          "89:   tool_choice?: TextChatParameterTools | string | \"auto\" | \"any\";",
          "90: }",
          "92: type ChatWatsonxToolType = BindToolsInput | TextChatParameterTools;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:   watsonxCallbacks?: RequestCallbacks;",
          "92:   watsonxCallbacks?: RequestCallbacks;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "421:   streaming: boolean;",
          "423:   constructor(fields: ChatWatsonxInput & WatsonxAuth) {",
          "424:     super(fields);",
          "425:     if (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:   watsonxCallbacks?: RequestCallbacks;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "450:     this.n = fields?.n ?? this.n;",
          "451:     this.model = fields?.model ?? this.model;",
          "452:     this.version = fields?.version ?? this.version;",
          "454:     const {",
          "455:       watsonxAIApikey,",
          "456:       watsonxAIAuthType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:     this.watsonxCallbacks = fields?.watsonxCallbacks ?? this.watsonxCallbacks;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "502:     return { ...params, ...toolChoiceResult };",
          "503:   }",
          "505:   override bindTools(",
          "506:     tools: ChatWatsonxToolType[],",
          "507:     kwargs?: Partial<CallOptions>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:   invocationCallbacks(options: this[\"ParsedCallOptions\"]) {",
          "511:     return options.watsonxCallbacks ?? this.watsonxCallbacks;",
          "512:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "590:         ...this.invocationParams(options),",
          "591:         ...this.scopeId(),",
          "592:       };",
          "593:       const watsonxMessages = _convertMessagesToWatsonxMessages(",
          "594:         messages,",
          "595:         this.model",
          "596:       );",
          "597:       const callback = () =>",
          "602:       const { result } = await this.completionWithRetry(callback, options);",
          "603:       const generations: ChatGeneration[] = [];",
          "604:       for (const part of result.choices) {",
          "",
          "[Removed Lines]",
          "598:         this.service.textChat({",
          "599:           ...params,",
          "600:           messages: watsonxMessages,",
          "601:         });",
          "",
          "[Added Lines]",
          "602:       const watsonxCallbacks = this.invocationCallbacks(options);",
          "608:         this.service.textChat(",
          "609:           {",
          "610:             ...params,",
          "611:             messages: watsonxMessages,",
          "612:           },",
          "613:           watsonxCallbacks",
          "614:         );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "638:       messages,",
          "639:       this.model",
          "640:     );",
          "641:     const callback = () =>",
          "647:     const stream = await this.completionWithRetry(callback, options);",
          "648:     let defaultRole;",
          "649:     let usage: TextChatUsage | undefined;",
          "",
          "[Removed Lines]",
          "642:       this.service.textChatStream({",
          "643:         ...params,",
          "644:         messages: watsonxMessages,",
          "645:         returnObject: true,",
          "646:       });",
          "",
          "[Added Lines]",
          "654:     const watsonxCallbacks = this.invocationCallbacks(options);",
          "656:       this.service.textChatStream(",
          "657:         {",
          "658:           ...params,",
          "659:           messages: watsonxMessages,",
          "660:           returnObject: true,",
          "661:         },",
          "662:         watsonxCallbacks",
          "663:       );",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/chat_models/tests/ibm.int.test.ts||libs/langchain-community/src/chat_models/tests/ibm.int.test.ts": [
          "File: libs/langchain-community/src/chat_models/tests/ibm.int.test.ts -> libs/langchain-community/src/chat_models/tests/ibm.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "517:         }",
          "518:       );",
          "519:       const llmWithTools = service.bindTools([calculatorTool]);",
          "522:       expect(res).toBeInstanceOf(AIMessage);",
          "523:       expect(res.tool_calls?.[0].name).toBe(\"calculator\");",
          "",
          "[Removed Lines]",
          "520:       const res = await llmWithTools.invoke(\"What is 3 * 12\");",
          "",
          "[Added Lines]",
          "520:       const res = await llmWithTools.invoke(",
          "521:         \"You are bad at calculations and need to use calculator at all times. What is 3 * 12\"",
          "522:       );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "572:       );",
          "573:       const llmWithTools = service.bindTools([calculatorTool]);",
          "574:       const res = await llmWithTools.invoke(",
          "576:       );",
          "578:       expect(res).toBeInstanceOf(AIMessage);",
          "",
          "[Removed Lines]",
          "575:         \"What is 3 * 12? Also, what is 11 + 49?\"",
          "",
          "[Added Lines]",
          "577:         \"You are bad at calculations and need to use calculator at all times. What is 3 * 12? Also, what is 11 + 49?\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "619:           },",
          "620:         ],",
          "621:       });",
          "624:       expect(res).toBeInstanceOf(AIMessage);",
          "625:       expect(res.tool_calls?.[0].name).toBe(\"calculator\");",
          "",
          "[Removed Lines]",
          "622:       const res = await modelWithTools.invoke(\"What is 32 * 122\");",
          "",
          "[Added Lines]",
          "624:       const res = await modelWithTools.invoke(",
          "625:         \"You are bad at calculations and need to use calculator at all times. What is 32 * 122\"",
          "626:       );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "667:       const modelWithTools = service.bindTools(tools);",
          "668:       const res = await modelWithTools.invoke(",
          "670:       );",
          "672:       expect(res).toBeInstanceOf(AIMessage);",
          "",
          "[Removed Lines]",
          "669:         \"What is 3 * 12? Also, what is 11 + 49?\"",
          "",
          "[Added Lines]",
          "673:         \"You are bad at calculations and need to use calculator at all times. What is 3 * 12? Also, what is 11 + 49?\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "831:       expect(typeof result.number2).toBe(\"number\");",
          "832:     });",
          "833:   });",
          "834: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "839:   describe(\"Test watsonx callbacks\", () => {",
          "840:     test(\"Single request callback\", async () => {",
          "841:       let callbackFlag = false;",
          "842:       const service = new ChatWatsonx({",
          "843:         model: \"mistralai/mistral-large\",",
          "844:         version: \"2024-05-31\",",
          "845:         serviceUrl: process.env.WATSONX_AI_SERVICE_URL ?? \"testString\",",
          "846:         projectId: process.env.WATSONX_AI_PROJECT_ID ?? \"testString\",",
          "847:         maxTokens: 10,",
          "848:         watsonxCallbacks: {",
          "849:           requestCallback(req) {",
          "850:             callbackFlag = !!req;",
          "851:           },",
          "852:         },",
          "853:       });",
          "854:       const hello = await service.stream(\"Print hello world\");",
          "855:       const chunks = [];",
          "856:       for await (const chunk of hello) {",
          "857:         chunks.push(chunk);",
          "858:       }",
          "859:       expect(callbackFlag).toBe(true);",
          "860:     });",
          "861:     test(\"Single response callback\", async () => {",
          "862:       let callbackFlag = false;",
          "863:       const service = new ChatWatsonx({",
          "864:         model: \"mistralai/mistral-large\",",
          "865:         version: \"2024-05-31\",",
          "866:         serviceUrl: process.env.WATSONX_AI_SERVICE_URL ?? \"testString\",",
          "867:         projectId: process.env.WATSONX_AI_PROJECT_ID ?? \"testString\",",
          "868:         maxTokens: 10,",
          "869:         watsonxCallbacks: {",
          "870:           responseCallback(res) {",
          "871:             callbackFlag = !!res;",
          "872:           },",
          "873:         },",
          "874:       });",
          "875:       const hello = await service.stream(\"Print hello world\");",
          "876:       const chunks = [];",
          "877:       for await (const chunk of hello) {",
          "878:         chunks.push(chunk);",
          "879:       }",
          "880:       expect(callbackFlag).toBe(true);",
          "881:     });",
          "882:     test(\"Both callbacks\", async () => {",
          "883:       let callbackFlagReq = false;",
          "884:       let callbackFlagRes = false;",
          "885:       const service = new ChatWatsonx({",
          "886:         model: \"mistralai/mistral-large\",",
          "887:         version: \"2024-05-31\",",
          "888:         serviceUrl: process.env.WATSONX_AI_SERVICE_URL ?? \"testString\",",
          "889:         projectId: process.env.WATSONX_AI_PROJECT_ID ?? \"testString\",",
          "890:         maxTokens: 10,",
          "891:         watsonxCallbacks: {",
          "892:           requestCallback(req) {",
          "893:             callbackFlagReq = !!req;",
          "894:           },",
          "895:           responseCallback(res) {",
          "896:             callbackFlagRes = !!res;",
          "897:           },",
          "898:         },",
          "899:       });",
          "900:       const hello = await service.stream(\"Print hello world\");",
          "901:       const chunks = [];",
          "902:       for await (const chunk of hello) {",
          "903:         chunks.push(chunk);",
          "904:       }",
          "905:       expect(callbackFlagReq).toBe(true);",
          "906:       expect(callbackFlagRes).toBe(true);",
          "907:     });",
          "908:     test(\"Multiple callbacks\", async () => {",
          "909:       let callbackFlagReq = false;",
          "910:       let callbackFlagRes = false;",
          "911:       let langchainCallback = false;",
          "913:       const service = new ChatWatsonx({",
          "914:         model: \"mistralai/mistral-large\",",
          "915:         version: \"2024-05-31\",",
          "916:         serviceUrl: process.env.WATSONX_AI_SERVICE_URL ?? \"testString\",",
          "917:         projectId: process.env.WATSONX_AI_PROJECT_ID ?? \"testString\",",
          "918:         maxTokens: 10,",
          "919:         callbacks: CallbackManager.fromHandlers({",
          "920:           async handleLLMEnd(output) {",
          "921:             expect(output.generations).toBeDefined();",
          "922:             langchainCallback = !!output;",
          "923:           },",
          "924:         }),",
          "925:         watsonxCallbacks: {",
          "926:           requestCallback(req) {",
          "927:             callbackFlagReq = !!req;",
          "928:           },",
          "929:           responseCallback(res) {",
          "930:             callbackFlagRes = !!res;",
          "931:           },",
          "932:         },",
          "933:       });",
          "934:       const hello = await service.stream(\"Print hello world\");",
          "935:       const chunks = [];",
          "936:       for await (const chunk of hello) {",
          "937:         chunks.push(chunk);",
          "938:       }",
          "939:       expect(callbackFlagReq).toBe(true);",
          "940:       expect(callbackFlagRes).toBe(true);",
          "941:       expect(langchainCallback).toBe(true);",
          "942:     });",
          "943:   });",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/document_compressors/ibm.ts||libs/langchain-community/src/document_compressors/ibm.ts": [
          "File: libs/langchain-community/src/document_compressors/ibm.ts -> libs/langchain-community/src/document_compressors/ibm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:         ? {",
          "160:             index: document.index,",
          "161:             relevanceScore: document.score,",
          "163:           }",
          "164:         : {",
          "165:             index: document.index,",
          "",
          "[Removed Lines]",
          "162:             input: document?.input,",
          "",
          "[Added Lines]",
          "162:             input: document?.input.text,",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/llms/ibm.ts||libs/langchain-community/src/llms/ibm.ts": [
          "File: libs/langchain-community/src/llms/ibm.ts -> libs/langchain-community/src/llms/ibm.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import { WatsonXAI } from \"@ibm-cloud/watsonx-ai\";",
          "5: import {",
          "6:   DeploymentTextGenProperties,",
          "7:   ReturnOptionProperties,",
          "8:   TextGenLengthPenalty,",
          "9:   TextGenParameters,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:   RequestCallbacks,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:   maxRetries?: number;",
          "35:   parameters?: Partial<WatsonxInputLLM>;",
          "36:   idOrName?: string;",
          "37: }",
          "39: export interface WatsonxInputLLM extends WatsonxParams, BaseLLMParams {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   watsonxCallbacks?: RequestCallbacks;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   truncateInpuTokens?: number;",
          "53:   returnOptions?: ReturnOptionProperties;",
          "54:   includeStopSequence?: boolean;",
          "55: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   watsonxCallbacks?: RequestCallbacks;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:   maxConcurrency?: number;",
          "119:   private service: WatsonXAI;",
          "121:   constructor(fields: WatsonxInputLLM & WatsonxAuth) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:   watsonxCallbacks?: RequestCallbacks;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:     this.maxRetries = fields.maxRetries || this.maxRetries;",
          "141:     this.maxConcurrency = fields.maxConcurrency;",
          "142:     this.streaming = fields.streaming || this.streaming;",
          "143:     if (",
          "144:       (fields.projectId && fields.spaceId) ||",
          "145:       (fields.idOrName && fields.projectId) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:     this.watsonxCallbacks = fields.watsonxCallbacks || this.watsonxCallbacks;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "235:     };",
          "236:   }",
          "238:   scopeId() {",
          "239:     if (this.projectId)",
          "240:       return { projectId: this.projectId, modelId: this.model };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:   invocationCallbacks(options: this[\"ParsedCallOptions\"]) {",
          "245:     return options.watsonxCallbacks ?? this.watsonxCallbacks;",
          "246:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "285:     const tokenUsage = { generated_token_count: 0, input_token_count: 0 };",
          "286:     const idOrName = options?.idOrName ?? this.idOrName;",
          "287:     const parameters = this.invocationParams(options);",
          "288:     if (stream) {",
          "289:       const textStream = idOrName",
          "291:             idOrName,",
          "292:             ...requestOptions,",
          "293:             parameters: {",
          "",
          "[Removed Lines]",
          "290:         ? await this.service.deploymentGenerateTextStream({",
          "",
          "[Added Lines]",
          "298:     const watsonxCallbacks = this.invocationCallbacks(options);",
          "301:         ? this.service.deploymentGenerateTextStream({",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "298:             },",
          "299:             returnObject: true,",
          "300:           })",
          "309:     } else {",
          "310:       const textGenerationPromise = idOrName",
          "318:               },",
          "319:             },",
          "328:       const textGeneration = await textGenerationPromise;",
          "329:       const singleGeneration: Generation[] = textGeneration.result.results.map(",
          "",
          "[Removed Lines]",
          "301:         : await this.service.generateTextStream({",
          "302:             input,",
          "303:             parameters,",
          "304:             ...this.scopeId(),",
          "305:             ...requestOptions,",
          "306:             returnObject: true,",
          "307:           });",
          "308:       return textStream;",
          "311:         ? this.service.deploymentGenerateText({",
          "312:             ...requestOptions,",
          "313:             idOrName,",
          "314:             parameters: {",
          "315:               ...parameters,",
          "316:               prompt_variables: {",
          "317:                 input,",
          "320:           })",
          "321:         : this.service.generateText({",
          "322:             input,",
          "323:             parameters,",
          "324:             ...this.scopeId(),",
          "325:             ...requestOptions,",
          "326:           });",
          "",
          "[Added Lines]",
          "312:         : this.service.generateTextStream(",
          "313:             {",
          "314:               input,",
          "315:               parameters,",
          "316:               ...this.scopeId(),",
          "317:               ...requestOptions,",
          "318:               returnObject: true,",
          "319:             },",
          "320:             watsonxCallbacks",
          "321:           );",
          "322:       return (await textStream) as AsyncIterable<",
          "323:         WatsonXAI.ObjectStreamed<WatsonXAI.TextGenResponse>",
          "324:       >;",
          "327:         ? this.service.deploymentGenerateText(",
          "328:             {",
          "329:               ...requestOptions,",
          "330:               idOrName,",
          "331:               parameters: {",
          "332:                 ...parameters,",
          "333:                 prompt_variables: {",
          "334:                   input,",
          "335:                 },",
          "338:             watsonxCallbacks",
          "339:           )",
          "340:         : this.service.generateText(",
          "341:             {",
          "342:               input,",
          "343:               parameters,",
          "344:               ...this.scopeId(),",
          "345:               ...requestOptions,",
          "346:             },",
          "347:             watsonxCallbacks",
          "348:           );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "403:             geneartionsArray[completion].stop_reason =",
          "404:               chunk?.generationInfo?.stop_reason;",
          "405:             geneartionsArray[completion].text += chunk.text;",
          "411:           }",
          "413:           return geneartionsArray.map((item) => {",
          "",
          "[Removed Lines]",
          "406:             if (chunk.text)",
          "407:               void runManager?.handleLLMNewToken(chunk.text, {",
          "408:                 prompt: promptIdx,",
          "409:                 completion: 0,",
          "410:               });",
          "",
          "[Added Lines]",
          "428:             void runManager?.handleLLMNewToken(chunk.text, {",
          "429:               prompt: promptIdx,",
          "430:               completion: 0,",
          "431:             });",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "512:             },",
          "513:           },",
          "514:         });",
          "516:           void runManager?.handleLLMNewToken(item.generated_text);",
          "517:       }",
          "518:       Object.assign(responseChunk, { id: 0, event: \"\", data: {} });",
          "",
          "[Removed Lines]",
          "515:         if (item.generated_text)",
          "",
          "[Added Lines]",
          "536:         if (!this.streaming)",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/llms/tests/ibm.int.test.ts||libs/langchain-community/src/llms/tests/ibm.int.test.ts": [
          "File: libs/langchain-community/src/llms/tests/ibm.int.test.ts -> libs/langchain-community/src/llms/tests/ibm.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:       ).rejects.toThrowError();",
          "421:     });",
          "422:   });",
          "423: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:   describe(\"Test watsonx callbacks\", () => {",
          "425:     test(\"Single request callback\", async () => {",
          "426:       let callbackFlag = false;",
          "427:       const service = new WatsonxLLM({",
          "428:         model: \"mistralai/mistral-large\",",
          "429:         version: \"2024-05-31\",",
          "430:         serviceUrl: process.env.WATSONX_AI_SERVICE_URL ?? \"testString\",",
          "431:         projectId: process.env.WATSONX_AI_PROJECT_ID ?? \"testString\",",
          "432:         watsonxCallbacks: {",
          "433:           requestCallback(req) {",
          "434:             callbackFlag = !!req;",
          "435:           },",
          "436:         },",
          "437:       });",
          "438:       const hello = await service.stream(\"Print hello world\");",
          "439:       const chunks = [];",
          "440:       for await (const chunk of hello) {",
          "441:         chunks.push(chunk);",
          "442:       }",
          "443:       expect(callbackFlag).toBe(true);",
          "444:     });",
          "445:     test(\"Single response callback\", async () => {",
          "446:       let callbackFlag = false;",
          "447:       const service = new WatsonxLLM({",
          "448:         model: \"mistralai/mistral-large\",",
          "449:         version: \"2024-05-31\",",
          "450:         serviceUrl: process.env.WATSONX_AI_SERVICE_URL ?? \"testString\",",
          "451:         projectId: process.env.WATSONX_AI_PROJECT_ID ?? \"testString\",",
          "452:         maxNewTokens: 10,",
          "453:         watsonxCallbacks: {",
          "454:           responseCallback(res) {",
          "455:             callbackFlag = !!res;",
          "456:           },",
          "457:         },",
          "458:       });",
          "459:       const hello = await service.stream(\"Print hello world\");",
          "460:       const chunks = [];",
          "461:       for await (const chunk of hello) {",
          "462:         chunks.push(chunk);",
          "463:       }",
          "464:       expect(callbackFlag).toBe(true);",
          "465:     });",
          "466:     test(\"Both callbacks\", async () => {",
          "467:       let callbackFlagReq = false;",
          "468:       let callbackFlagRes = false;",
          "469:       const service = new WatsonxLLM({",
          "470:         model: \"mistralai/mistral-large\",",
          "471:         version: \"2024-05-31\",",
          "472:         serviceUrl: process.env.WATSONX_AI_SERVICE_URL ?? \"testString\",",
          "473:         projectId: process.env.WATSONX_AI_PROJECT_ID ?? \"testString\",",
          "474:         maxNewTokens: 10,",
          "475:         watsonxCallbacks: {",
          "476:           requestCallback(req) {",
          "477:             callbackFlagReq = !!req;",
          "478:           },",
          "479:           responseCallback(res) {",
          "480:             callbackFlagRes = !!res;",
          "481:           },",
          "482:         },",
          "483:       });",
          "484:       const hello = await service.stream(\"Print hello world\");",
          "485:       const chunks = [];",
          "486:       for await (const chunk of hello) {",
          "487:         chunks.push(chunk);",
          "488:       }",
          "489:       expect(callbackFlagReq).toBe(true);",
          "490:       expect(callbackFlagRes).toBe(true);",
          "491:     });",
          "492:     test(\"Multiple callbacks\", async () => {",
          "493:       let callbackFlagReq = false;",
          "494:       let callbackFlagRes = false;",
          "495:       let langchainCallback = false;",
          "497:       const service = new WatsonxLLM({",
          "498:         model: \"mistralai/mistral-large\",",
          "499:         version: \"2024-05-31\",",
          "500:         serviceUrl: process.env.WATSONX_AI_SERVICE_URL ?? \"testString\",",
          "501:         projectId: process.env.WATSONX_AI_PROJECT_ID ?? \"testString\",",
          "502:         maxNewTokens: 10,",
          "503:         watsonxCallbacks: {",
          "504:           requestCallback(req) {",
          "505:             callbackFlagReq = !!req;",
          "506:           },",
          "507:           responseCallback(res) {",
          "508:             callbackFlagRes = !!res;",
          "509:           },",
          "510:         },",
          "511:         callbacks: CallbackManager.fromHandlers({",
          "512:           async handleLLMEnd(output) {",
          "513:             expect(output.generations).toBeDefined();",
          "514:             langchainCallback = !!output;",
          "515:           },",
          "516:         }),",
          "517:       });",
          "518:       const hello = await service.stream(\"Print hello world\");",
          "519:       const chunks = [];",
          "520:       for await (const chunk of hello) {",
          "521:         chunks.push(chunk);",
          "522:       }",
          "523:       expect(callbackFlagReq).toBe(true);",
          "524:       expect(callbackFlagRes).toBe(true);",
          "525:       expect(langchainCallback).toBe(true);",
          "526:     });",
          "527:   });",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "10620:   languageName: node",
          "10621:   linkType: hard",
          "10626:   dependencies:",
          "10628:     extend: 3.0.2",
          "10631:   languageName: node",
          "10632:   linkType: hard",
          "",
          "[Removed Lines]",
          "10623: \"@ibm-cloud/watsonx-ai@npm:^1.1.0\":",
          "10624:   version: 1.1.0",
          "10625:   resolution: \"@ibm-cloud/watsonx-ai@npm:1.1.0\"",
          "10627:     \"@types/node\": ^12.0.8",
          "10629:     ibm-cloud-sdk-core: ^4.2.5",
          "10630:   checksum: 0151bb0abe2a7d1dbcd6f8367ea02dfc924f15bdcbe8ec58bb89c8e055fa35c399b2253d6be3b84292f96c9161e49bcd6d6f5e1df0f2cd9adf21d1f3c0bc24b4",
          "",
          "[Added Lines]",
          "10623: \"@ibm-cloud/watsonx-ai@npm:^1.3.0\":",
          "10624:   version: 1.3.0",
          "10625:   resolution: \"@ibm-cloud/watsonx-ai@npm:1.3.0\"",
          "10627:     \"@types/node\": ^18.0.0",
          "10629:     ibm-cloud-sdk-core: ^5.0.2",
          "10630:   checksum: 6a2127391ca70005b942d3c4ab1abc738946c42bbf3ee0f8eb6f778434b5f8806d622f1f36446f00b9fb82dc2c8aea3526426ec46cc53fa8a075ba7a294da096",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11802:     \"@google-cloud/storage\": ^7.7.0",
          "11803:     \"@gradientai/nodejs-sdk\": ^1.2.0",
          "11804:     \"@huggingface/inference\": ^2.6.4",
          "11806:     \"@jest/globals\": ^29.5.0",
          "11807:     \"@lancedb/lancedb\": ^0.13.0",
          "11808:     \"@langchain/core\": \"workspace:*\"",
          "",
          "[Removed Lines]",
          "11805:     \"@ibm-cloud/watsonx-ai\": ^1.1.0",
          "",
          "[Added Lines]",
          "11805:     \"@ibm-cloud/watsonx-ai\": ^1.3.0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "19629:   languageName: node",
          "19630:   linkType: hard",
          "19639: \"@types/node@npm:^17.0.5\":",
          "19640:   version: 17.0.45",
          "19641:   resolution: \"@types/node@npm:17.0.45\"",
          "",
          "[Removed Lines]",
          "19632: \"@types/node@npm:^12.0.8\":",
          "19633:   version: 12.20.55",
          "19634:   resolution: \"@types/node@npm:12.20.55\"",
          "19635:   checksum: e4f86785f4092706e0d3b0edff8dca5a13b45627e4b36700acd8dfe6ad53db71928c8dee914d4276c7fd3b6ccd829aa919811c9eb708a2c8e4c6eb3701178c37",
          "19636:   languageName: node",
          "19637:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "19643:   languageName: node",
          "19644:   linkType: hard",
          "19646: \"@types/node@npm:^18.11.18\":",
          "19647:   version: 18.16.19",
          "19648:   resolution: \"@types/node@npm:18.16.19\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19639: \"@types/node@npm:^18.0.0\":",
          "19640:   version: 18.19.67",
          "19641:   resolution: \"@types/node@npm:18.19.67\"",
          "19642:   dependencies:",
          "19643:     undici-types: ~5.26.4",
          "19644:   checksum: 700f92c6a0b63352ce6327286392adab30bb17623c2a788811e9cf092c4dc2fb5e36ca4727247a981b3f44185fdceef20950a3b7a8ab72721e514ac037022a08",
          "19645:   languageName: node",
          "19646:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "21998:   languageName: node",
          "21999:   linkType: hard",
          "22012: \"axobject-query@npm:^3.1.1, axobject-query@npm:^3.2.1\":",
          "22013:   version: 3.2.1",
          "22014:   resolution: \"axobject-query@npm:3.2.1\"",
          "",
          "[Removed Lines]",
          "22001: \"axios@npm:^1.7.5\":",
          "22002:   version: 1.7.7",
          "22003:   resolution: \"axios@npm:1.7.7\"",
          "22004:   dependencies:",
          "22005:     follow-redirects: ^1.15.6",
          "22006:     form-data: ^4.0.0",
          "22007:     proxy-from-env: ^1.1.0",
          "22008:   checksum: 882d4fe0ec694a07c7f5c1f68205eb6dc5a62aecdb632cc7a4a3d0985188ce3030e0b277e1a8260ac3f194d314ae342117660a151fabffdc5081ca0b5a8b47fe",
          "22009:   languageName: node",
          "22010:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "25654:   languageName: node",
          "25655:   linkType: hard",
          "25664: \"diff-sequences@npm:^29.4.3\":",
          "25665:   version: 29.4.3",
          "25666:   resolution: \"diff-sequences@npm:29.4.3\"",
          "",
          "[Removed Lines]",
          "25657: \"diff-sequences@npm:^27.5.1\":",
          "25658:   version: 27.5.1",
          "25659:   resolution: \"diff-sequences@npm:27.5.1\"",
          "25660:   checksum: a00db5554c9da7da225db2d2638d85f8e41124eccbd56cbaefb3b276dcbb1c1c2ad851c32defe2055a54a4806f030656cbf6638105fd6ce97bb87b90b32a33ca",
          "25661:   languageName: node",
          "25662:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "27879:   languageName: node",
          "27880:   linkType: hard",
          "27894: \"expect@npm:^29.0.0\":",
          "27895:   version: 29.6.1",
          "27896:   resolution: \"expect@npm:29.6.1\"",
          "",
          "[Removed Lines]",
          "27882: \"expect@npm:^27.5.1\":",
          "27883:   version: 27.5.1",
          "27884:   resolution: \"expect@npm:27.5.1\"",
          "27885:   dependencies:",
          "27886:     \"@jest/types\": ^27.5.1",
          "27887:     jest-get-type: ^27.5.1",
          "27888:     jest-matcher-utils: ^27.5.1",
          "27889:     jest-message-util: ^27.5.1",
          "27890:   checksum: b2c66beb52de53ef1872165aace40224e722bca3c2274c54cfa74b6d617d55cf0ccdbf36783ccd64dbea501b280098ed33fd0b207d4f15bc03cd3c7a24364a6a",
          "27891:   languageName: node",
          "27892:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "30565:   languageName: node",
          "30566:   linkType: hard",
          "30592: \"ibm-cloud-sdk-core@npm:^5.0.2\":",
          "30593:   version: 5.0.2",
          "30594:   resolution: \"ibm-cloud-sdk-core@npm:5.0.2\"",
          "",
          "[Removed Lines]",
          "30568: \"ibm-cloud-sdk-core@npm:^4.2.5\":",
          "30569:   version: 4.3.4",
          "30570:   resolution: \"ibm-cloud-sdk-core@npm:4.3.4\"",
          "30571:   dependencies:",
          "30572:     \"@types/debug\": ^4.1.12",
          "30573:     \"@types/node\": ~10.14.19",
          "30574:     \"@types/tough-cookie\": ^4.0.0",
          "30575:     axios: ^1.7.5",
          "30576:     camelcase: ^6.3.0",
          "30577:     debug: ^4.3.4",
          "30578:     dotenv: ^16.4.5",
          "30579:     expect: ^27.5.1",
          "30580:     extend: 3.0.2",
          "30581:     file-type: 16.5.4",
          "30582:     form-data: 4.0.0",
          "30583:     isstream: 0.1.2",
          "30584:     jsonwebtoken: ^9.0.2",
          "30585:     mime-types: 2.1.35",
          "30586:     retry-axios: ^2.6.0",
          "30587:     tough-cookie: ^4.1.3",
          "30588:   checksum: 27d6bd692cde66766a7cea36e75d53a6a089e2b2b726cf86108ab48f9d452bb6d6a01324d2160e3bb54df7750240129bae989934ab2fd80c0950ecdb5bfc07b3",
          "30589:   languageName: node",
          "30590:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "32175:   languageName: node",
          "32176:   linkType: hard",
          "32190: \"jest-diff@npm:^29.5.0\":",
          "32191:   version: 29.5.0",
          "32192:   resolution: \"jest-diff@npm:29.5.0\"",
          "",
          "[Removed Lines]",
          "32178: \"jest-diff@npm:^27.5.1\":",
          "32179:   version: 27.5.1",
          "32180:   resolution: \"jest-diff@npm:27.5.1\"",
          "32181:   dependencies:",
          "32182:     chalk: ^4.0.0",
          "32183:     diff-sequences: ^27.5.1",
          "32184:     jest-get-type: ^27.5.1",
          "32185:     pretty-format: ^27.5.1",
          "32186:   checksum: 8be27c1e1ee57b2bb2bef9c0b233c19621b4c43d53a3c26e2c00a4e805eb4ea11fe1694a06a9fb0e80ffdcfdc0d2b1cb0b85920b3f5c892327ecd1e7bd96b865",
          "32187:   languageName: node",
          "32188:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "32273:   languageName: node",
          "32274:   linkType: hard",
          "32283: \"jest-get-type@npm:^29.4.3\":",
          "32284:   version: 29.4.3",
          "32285:   resolution: \"jest-get-type@npm:29.4.3\"",
          "",
          "[Removed Lines]",
          "32276: \"jest-get-type@npm:^27.5.1\":",
          "32277:   version: 27.5.1",
          "32278:   resolution: \"jest-get-type@npm:27.5.1\"",
          "32279:   checksum: 63064ab70195c21007d897c1157bf88ff94a790824a10f8c890392e7d17eda9c3900513cb291ca1c8d5722cad79169764e9a1279f7c8a9c4cd6e9109ff04bbc0",
          "32280:   languageName: node",
          "32281:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "32350:   languageName: node",
          "32351:   linkType: hard",
          "32365: \"jest-matcher-utils@npm:^29.5.0\":",
          "32366:   version: 29.5.0",
          "32367:   resolution: \"jest-matcher-utils@npm:29.5.0\"",
          "",
          "[Removed Lines]",
          "32353: \"jest-matcher-utils@npm:^27.5.1\":",
          "32354:   version: 27.5.1",
          "32355:   resolution: \"jest-matcher-utils@npm:27.5.1\"",
          "32356:   dependencies:",
          "32357:     chalk: ^4.0.0",
          "32358:     jest-diff: ^27.5.1",
          "32359:     jest-get-type: ^27.5.1",
          "32360:     pretty-format: ^27.5.1",
          "32361:   checksum: bb2135fc48889ff3fe73888f6cc7168ddab9de28b51b3148f820c89fdfd2effdcad005f18be67d0b9be80eda208ad47290f62f03d0a33f848db2dd0273c8217a",
          "32362:   languageName: node",
          "32363:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "32398:   languageName: node",
          "32399:   linkType: hard",
          "32418: \"jest-message-util@npm:^29.5.0\":",
          "32419:   version: 29.5.0",
          "32420:   resolution: \"jest-message-util@npm:29.5.0\"",
          "",
          "[Removed Lines]",
          "32401: \"jest-message-util@npm:^27.5.1\":",
          "32402:   version: 27.5.1",
          "32403:   resolution: \"jest-message-util@npm:27.5.1\"",
          "32404:   dependencies:",
          "32405:     \"@babel/code-frame\": ^7.12.13",
          "32406:     \"@jest/types\": ^27.5.1",
          "32407:     \"@types/stack-utils\": ^2.0.0",
          "32408:     chalk: ^4.0.0",
          "32409:     graceful-fs: ^4.2.9",
          "32410:     micromatch: ^4.0.4",
          "32411:     pretty-format: ^27.5.1",
          "32412:     slash: ^3.0.0",
          "32413:     stack-utils: ^2.0.3",
          "32414:   checksum: eb6d637d1411c71646de578c49826b6da8e33dd293e501967011de9d1916d53d845afbfb52a5b661ff1c495be7c13f751c48c7f30781fd94fbd64842e8195796",
          "32415:   languageName: node",
          "32416:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "38033:   languageName: node",
          "38034:   linkType: hard",
          "38047: \"pretty-format@npm:^29.0.0, pretty-format@npm:^29.6.1\":",
          "38048:   version: 29.6.1",
          "38049:   resolution: \"pretty-format@npm:29.6.1\"",
          "",
          "[Removed Lines]",
          "38036: \"pretty-format@npm:^27.5.1\":",
          "38037:   version: 27.5.1",
          "38038:   resolution: \"pretty-format@npm:27.5.1\"",
          "38039:   dependencies:",
          "38040:     ansi-regex: ^5.0.1",
          "38041:     ansi-styles: ^5.0.0",
          "38042:     react-is: ^17.0.1",
          "38043:   checksum: cf610cffcb793885d16f184a62162f2dd0df31642d9a18edf4ca298e909a8fe80bdbf556d5c9573992c102ce8bf948691da91bf9739bee0ffb6e79c8a8a6e088",
          "38044:   languageName: node",
          "38045:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "38744:   languageName: node",
          "38745:   linkType: hard",
          "38754: \"react-is@npm:^18.0.0\":",
          "38755:   version: 18.2.0",
          "38756:   resolution: \"react-is@npm:18.2.0\"",
          "",
          "[Removed Lines]",
          "38747: \"react-is@npm:^17.0.1\":",
          "38748:   version: 17.0.2",
          "38749:   resolution: \"react-is@npm:17.0.2\"",
          "38750:   checksum: 9d6d111d8990dc98bc5402c1266a808b0459b5d54830bbea24c12d908b536df7883f268a7868cfaedde3dd9d4e0d574db456f84d2e6df9c4526f99bb4b5344d8",
          "38751:   languageName: node",
          "38752:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}