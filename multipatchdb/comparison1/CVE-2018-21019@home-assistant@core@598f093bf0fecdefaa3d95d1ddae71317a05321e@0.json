{
  "cve_id": "CVE-2018-21019",
  "cve_desc": "Home Assistant before 0.67.0 was vulnerable to an information disclosure that allowed an unauthenticated attacker to read the application's error log via components/api.py.",
  "repo": "home-assistant/core",
  "patch_hash": "598f093bf0fecdefaa3d95d1ddae71317a05321e",
  "patch_info": {
    "commit_hash": "598f093bf0fecdefaa3d95d1ddae71317a05321e",
    "repo": "home-assistant/core",
    "commit_url": "https://github.com/home-assistant/core/commit/598f093bf0fecdefaa3d95d1ddae71317a05321e",
    "files": [
      "homeassistant/components/api.py",
      "tests/components/test_api.py"
    ],
    "message": "Add authentication to error log endpoint (#13836)",
    "before_after_code_files": [
      "homeassistant/components/api.py||homeassistant/components/api.py",
      "tests/components/test_api.py||tests/components/test_api.py"
    ]
  },
  "patch_diff": {
    "homeassistant/components/api.py||homeassistant/components/api.py": [
      "File: homeassistant/components/api.py -> homeassistant/components/api.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:     hass.http.register_view(APIComponentsView)",
      "53:     hass.http.register_view(APITemplateView)",
      "59:     return True",
      "",
      "[Removed Lines]",
      "55:     log_path = hass.data.get(DATA_LOGGING, None)",
      "56:     if log_path:",
      "57:         hass.http.register_static_path(URL_API_ERROR_LOG, log_path, False)",
      "",
      "[Added Lines]",
      "55:     if DATA_LOGGING in hass.data:",
      "56:         hass.http.register_view(APIErrorLog)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "356:                                      HTTP_BAD_REQUEST)",
      "359: @asyncio.coroutine",
      "360: def async_services_json(hass):",
      "361:     \"\"\"Generate services data to JSONify.\"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "358: class APIErrorLog(HomeAssistantView):",
      "359:     \"\"\"View to fetch the error log.\"\"\"",
      "361:     url = URL_API_ERROR_LOG",
      "362:     name = \"api:error_log\"",
      "364:     async def get(self, request):",
      "365:         \"\"\"Retrieve API error log.\"\"\"",
      "366:         return await self.file(request, request.app['hass'].data[DATA_LOGGING])",
      "",
      "---------------"
    ],
    "tests/components/test_api.py||tests/components/test_api.py": [
      "File: tests/components/test_api.py -> tests/components/test_api.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: # pylint: disable=protected-access",
      "3: import asyncio",
      "4: import json",
      "6: import pytest",
      "8: from homeassistant import const",
      "9: import homeassistant.core as ha",
      "10: from homeassistant.setup import async_setup_component",
      "13: @pytest.fixture",
      "14: def mock_api_client(hass, aiohttp_client):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: from unittest.mock import patch",
      "7: from aiohttp import web",
      "11: from homeassistant.bootstrap import DATA_LOGGING",
      "15: from tests.common import mock_coro",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "398: def _listen_count(hass):",
      "399:     \"\"\"Return number of event listeners.\"\"\"",
      "400:     return sum(hass.bus.async_listeners().values())",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "408: async def test_api_error_log(hass, aiohttp_client):",
      "409:     \"\"\"Test if we can fetch the error log.\"\"\"",
      "410:     hass.data[DATA_LOGGING] = '/some/path'",
      "411:     await async_setup_component(hass, 'api', {",
      "412:         'http': {",
      "413:             'api_password': 'yolo'",
      "414:         }",
      "415:     })",
      "416:     client = await aiohttp_client(hass.http.app)",
      "418:     resp = await client.get(const.URL_API_ERROR_LOG)",
      "419:     # Verufy auth required",
      "420:     assert resp.status == 401",
      "422:     with patch(",
      "423:                 'homeassistant.components.http.view.HomeAssistantView.file',",
      "424:                 return_value=mock_coro(web.Response(status=200, text='Hello'))",
      "425:             ) as mock_file:",
      "426:         resp = await client.get(const.URL_API_ERROR_LOG, headers={",
      "427:             'x-ha-access': 'yolo'",
      "428:         })",
      "430:     assert len(mock_file.mock_calls) == 1",
      "431:     assert mock_file.mock_calls[0][1][1] == hass.data[DATA_LOGGING]",
      "432:     assert resp.status == 200",
      "433:     assert await resp.text() == 'Hello'",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c36c2be37218a1e97a6c4c1b9d3c5dd23e873c6b",
      "candidate_info": {
        "commit_hash": "c36c2be37218a1e97a6c4c1b9d3c5dd23e873c6b",
        "repo": "home-assistant/core",
        "commit_url": "https://github.com/home-assistant/core/commit/c36c2be37218a1e97a6c4c1b9d3c5dd23e873c6b",
        "files": [
          "homeassistant/const.py"
        ],
        "message": "Version bump to 0.67.0",
        "before_after_code_files": [
          "homeassistant/const.py||homeassistant/const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/home-assistant/core/pull/13856"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "homeassistant/const.py||homeassistant/const.py": [
          "File: homeassistant/const.py -> homeassistant/const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"Constants used by Home Assistant components.\"\"\"",
          "3: MAJOR_VERSION = 0",
          "4: MINOR_VERSION = 67",
          "6: __short_version__ = '{}.{}'.format(MAJOR_VERSION, MINOR_VERSION)",
          "7: __version__ = '{}.{}'.format(__short_version__, PATCH_VERSION)",
          "8: REQUIRED_PYTHON_VER = (3, 5, 3)",
          "",
          "[Removed Lines]",
          "5: PATCH_VERSION = '0b1'",
          "",
          "[Added Lines]",
          "5: PATCH_VERSION = '0'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd58a0de7dab6dc8119ddea5878f27ed1fb25c1e",
      "candidate_info": {
        "commit_hash": "bd58a0de7dab6dc8119ddea5878f27ed1fb25c1e",
        "repo": "home-assistant/core",
        "commit_url": "https://github.com/home-assistant/core/commit/bd58a0de7dab6dc8119ddea5878f27ed1fb25c1e",
        "files": [
          "homeassistant/components/device_tracker/__init__.py",
          "tests/components/device_tracker/test_init.py",
          "tests/conftest.py"
        ],
        "message": "Remove vendor lookup for mac addresses (#13788)\n\n* Remove vendor lookup for mac addresses\n\n* Fix tests",
        "before_after_code_files": [
          "homeassistant/components/device_tracker/__init__.py||homeassistant/components/device_tracker/__init__.py",
          "tests/components/device_tracker/test_init.py||tests/components/device_tracker/test_init.py",
          "tests/conftest.py||tests/conftest.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/home-assistant/core/pull/13856"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "homeassistant/components/device_tracker/__init__.py||homeassistant/components/device_tracker/__init__.py": [
          "File: homeassistant/components/device_tracker/__init__.py -> homeassistant/components/device_tracker/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import logging",
          "10: from typing import Any, List, Sequence, Callable",
          "14: import voluptuous as vol",
          "16: from homeassistant.setup import async_prepare_setup_platform",
          "",
          "[Removed Lines]",
          "12: import aiohttp",
          "13: import async_timeout",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: from homeassistant.components import group, zone",
          "20: from homeassistant.config import load_yaml_config_file, async_log_exception",
          "21: from homeassistant.exceptions import HomeAssistantError",
          "23: from homeassistant.helpers import config_per_platform, discovery",
          "24: from homeassistant.helpers.entity import Entity",
          "25: from homeassistant.helpers.event import async_track_time_interval",
          "",
          "[Removed Lines]",
          "22: from homeassistant.helpers.aiohttp_client import async_get_clientsession",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: ATTR_MAC = 'mac'",
          "77: ATTR_NAME = 'name'",
          "78: ATTR_SOURCE_TYPE = 'source_type'",
          "80: ATTR_CONSIDER_HOME = 'consider_home'",
          "82: SOURCE_TYPE_GPS = 'gps'",
          "",
          "[Removed Lines]",
          "79: ATTR_VENDOR = 'vendor'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "328:                 self.hass, util.slugify(GROUP_NAME_ALL_DEVICES), visible=False,",
          "329:                 name=GROUP_NAME_ALL_DEVICES, add=[device.entity_id])",
          "334:         self.hass.bus.async_fire(EVENT_NEW_DEVICE, {",
          "335:             ATTR_ENTITY_ID: device.entity_id,",
          "336:             ATTR_HOST_NAME: device.host_name,",
          "337:             ATTR_MAC: device.mac,",
          "339:         })",
          "341:         # update known_devices.yaml",
          "",
          "[Removed Lines]",
          "331:         # lookup mac vendor string to be stored in config",
          "332:         yield from device.set_vendor_for_mac()",
          "338:             ATTR_VENDOR: device.vendor,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "413:     consider_home = None  # type: dt_util.dt.timedelta",
          "414:     battery = None  # type: int",
          "415:     attributes = None  # type: dict",
          "417:     icon = None  # type: str",
          "419:     # Track if the last update of this device was HOME.",
          "",
          "[Removed Lines]",
          "416:     vendor = None  # type: str",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "423:     def __init__(self, hass: HomeAssistantType, consider_home: timedelta,",
          "424:                  track: bool, dev_id: str, mac: str, name: str = None,",
          "425:                  picture: str = None, gravatar: str = None, icon: str = None,",
          "427:         \"\"\"Initialize a device.\"\"\"",
          "428:         self.hass = hass",
          "429:         self.entity_id = ENTITY_ID_FORMAT.format(dev_id)",
          "",
          "[Removed Lines]",
          "426:                  hide_if_away: bool = False, vendor: str = None) -> None:",
          "",
          "[Added Lines]",
          "417:                  hide_if_away: bool = False) -> None:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "451:         self.icon = icon",
          "453:         self.away_hide = hide_if_away",
          "456:         self.source_type = None",
          "",
          "[Removed Lines]",
          "454:         self.vendor = vendor",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "567:             self._state = STATE_HOME",
          "568:             self.last_update_home = True",
          "615:     @asyncio.coroutine",
          "616:     def async_added_to_hass(self):",
          "617:         \"\"\"Add an entity.\"\"\"",
          "",
          "[Removed Lines]",
          "570:     @asyncio.coroutine",
          "571:     def set_vendor_for_mac(self):",
          "572:         \"\"\"Set vendor string using api.macvendors.com.\"\"\"",
          "573:         self.vendor = yield from self.get_vendor_for_mac()",
          "575:     @asyncio.coroutine",
          "576:     def get_vendor_for_mac(self):",
          "577:         \"\"\"Try to find the vendor string for a given MAC address.\"\"\"",
          "578:         if not self.mac:",
          "579:             return None",
          "581:         if '_' in self.mac:",
          "582:             _, mac = self.mac.split('_', 1)",
          "583:         else:",
          "584:             mac = self.mac",
          "586:         if not len(mac.split(':')) == 6:",
          "587:             return 'unknown'",
          "589:         # We only need the first 3 bytes of the MAC for a lookup",
          "590:         # this improves somewhat on privacy",
          "591:         oui_bytes = mac.split(':')[0:3]",
          "592:         # bytes like 00 get truncates to 0, API needs full bytes",
          "593:         oui = '{:02x}:{:02x}:{:02x}'.format(*[int(b, 16) for b in oui_bytes])",
          "594:         url = 'http://api.macvendors.com/' + oui",
          "595:         try:",
          "596:             websession = async_get_clientsession(self.hass)",
          "598:             with async_timeout.timeout(5, loop=self.hass.loop):",
          "599:                 resp = yield from websession.get(url)",
          "600:             # mac vendor found, response is the string",
          "601:             if resp.status == 200:",
          "602:                 vendor_string = yield from resp.text()",
          "603:                 return vendor_string",
          "604:             # If vendor is not known to the API (404) or there",
          "605:             # was a failure during the lookup (500); set vendor",
          "606:             # to something other then None to prevent retry",
          "607:             # as the value is only relevant when it is to be stored",
          "608:             # in the 'known_devices.yaml' file which only happens",
          "609:             # the first time the device is seen.",
          "610:             return 'unknown'",
          "611:         except (asyncio.TimeoutError, aiohttp.ClientError):",
          "612:             # Same as above",
          "613:             return 'unknown'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "685:         vol.Optional('picture', default=None): vol.Any(None, cv.string),",
          "686:         vol.Optional(CONF_CONSIDER_HOME, default=consider_home): vol.All(",
          "687:             cv.time_period, cv.positive_timedelta),",
          "689:     })",
          "690:     try:",
          "691:         result = []",
          "",
          "[Removed Lines]",
          "688:         vol.Optional('vendor', default=None): vol.Any(None, cv.string),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "697:             return []",
          "699:         for dev_id, device in devices.items():",
          "700:             try:",
          "701:                 device = dev_schema(device)",
          "702:                 device['dev_id'] = cv.slugify(dev_id)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "644:             # Deprecated option. We just ignore it to avoid breaking change",
          "645:             device.pop('vendor', None)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "772:             'picture': device.config_picture,",
          "773:             'track': device.track,",
          "774:             CONF_AWAY_HIDE: device.away_hide,",
          "776:         }}",
          "777:         out.write('\\n')",
          "778:         out.write(dump(device))",
          "",
          "[Removed Lines]",
          "775:             'vendor': device.vendor,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/components/device_tracker/test_init.py||tests/components/device_tracker/test_init.py": [
          "File: tests/components/device_tracker/test_init.py -> tests/components/device_tracker/test_init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from tests.common import (",
          "26:     get_test_home_assistant, fire_time_changed,",
          "31: TEST_PLATFORM = {device_tracker.DOMAIN: {CONF_PLATFORM: 'test'}}",
          "",
          "[Removed Lines]",
          "27:     patch_yaml_files, assert_setup_component, mock_restore_cache, mock_coro)",
          "29: from ...test_util.aiohttp import mock_aiohttp_client",
          "",
          "[Added Lines]",
          "27:     patch_yaml_files, assert_setup_component, mock_restore_cache)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:         self.assertEqual(device.config_picture, config.config_picture)",
          "112:         self.assertEqual(device.away_hide, config.away_hide)",
          "113:         self.assertEqual(device.consider_home, config.consider_home)",
          "115:         self.assertEqual(device.icon, config.icon)",
          "117:     # pylint: disable=invalid-name",
          "",
          "[Removed Lines]",
          "114:         self.assertEqual(device.vendor, config.vendor)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:                         \"55502f40dc8b7c769880b10874abc9d0.jpg?s=80&d=wavatar\")",
          "174:         self.assertEqual(device.config_picture, gravatar_url)",
          "294:     @patch(",
          "295:         'homeassistant.components.device_tracker.DeviceTracker.see')",
          "296:     @patch(",
          "",
          "[Removed Lines]",
          "176:     def test_mac_vendor_lookup(self):",
          "177:         \"\"\"Test if vendor string is lookup on macvendors API.\"\"\"",
          "178:         mac = 'B8:27:EB:00:00:00'",
          "179:         vendor_string = 'Raspberry Pi Foundation'",
          "181:         device = device_tracker.Device(",
          "182:             self.hass, timedelta(seconds=180), True, 'test', mac, 'Test name')",
          "184:         with mock_aiohttp_client() as aioclient_mock:",
          "185:             aioclient_mock.get('http://api.macvendors.com/b8:27:eb',",
          "186:                                text=vendor_string)",
          "188:             run_coroutine_threadsafe(device.set_vendor_for_mac(),",
          "189:                                      self.hass.loop).result()",
          "190:             assert aioclient_mock.call_count == 1",
          "192:         self.assertEqual(device.vendor, vendor_string)",
          "194:     def test_mac_vendor_mac_formats(self):",
          "195:         \"\"\"Verify all variations of MAC addresses are handled correctly.\"\"\"",
          "196:         vendor_string = 'Raspberry Pi Foundation'",
          "198:         with mock_aiohttp_client() as aioclient_mock:",
          "199:             aioclient_mock.get('http://api.macvendors.com/b8:27:eb',",
          "200:                                text=vendor_string)",
          "201:             aioclient_mock.get('http://api.macvendors.com/00:27:eb',",
          "202:                                text=vendor_string)",
          "204:             mac = 'B8:27:EB:00:00:00'",
          "205:             device = device_tracker.Device(",
          "206:                 self.hass, timedelta(seconds=180),",
          "207:                 True, 'test', mac, 'Test name')",
          "208:             run_coroutine_threadsafe(device.set_vendor_for_mac(),",
          "209:                                      self.hass.loop).result()",
          "210:             self.assertEqual(device.vendor, vendor_string)",
          "212:             mac = '0:27:EB:00:00:00'",
          "213:             device = device_tracker.Device(",
          "214:                 self.hass, timedelta(seconds=180),",
          "215:                 True, 'test', mac, 'Test name')",
          "216:             run_coroutine_threadsafe(device.set_vendor_for_mac(),",
          "217:                                      self.hass.loop).result()",
          "218:             self.assertEqual(device.vendor, vendor_string)",
          "220:             mac = 'PREFIXED_B8:27:EB:00:00:00'",
          "221:             device = device_tracker.Device(",
          "222:                 self.hass, timedelta(seconds=180),",
          "223:                 True, 'test', mac, 'Test name')",
          "224:             run_coroutine_threadsafe(device.set_vendor_for_mac(),",
          "225:                                      self.hass.loop).result()",
          "226:             self.assertEqual(device.vendor, vendor_string)",
          "228:     def test_mac_vendor_lookup_unknown(self):",
          "229:         \"\"\"Prevent another mac vendor lookup if was not found first time.\"\"\"",
          "230:         mac = 'B8:27:EB:00:00:00'",
          "232:         device = device_tracker.Device(",
          "233:             self.hass, timedelta(seconds=180), True, 'test', mac, 'Test name')",
          "235:         with mock_aiohttp_client() as aioclient_mock:",
          "236:             aioclient_mock.get('http://api.macvendors.com/b8:27:eb',",
          "237:                                status=404)",
          "239:             run_coroutine_threadsafe(device.set_vendor_for_mac(),",
          "240:                                      self.hass.loop).result()",
          "242:             self.assertEqual(device.vendor, 'unknown')",
          "244:     def test_mac_vendor_lookup_error(self):",
          "245:         \"\"\"Prevent another lookup if failure during API call.\"\"\"",
          "246:         mac = 'B8:27:EB:00:00:00'",
          "248:         device = device_tracker.Device(",
          "249:             self.hass, timedelta(seconds=180), True, 'test', mac, 'Test name')",
          "251:         with mock_aiohttp_client() as aioclient_mock:",
          "252:             aioclient_mock.get('http://api.macvendors.com/b8:27:eb',",
          "253:                                status=500)",
          "255:             run_coroutine_threadsafe(device.set_vendor_for_mac(),",
          "256:                                      self.hass.loop).result()",
          "258:             self.assertEqual(device.vendor, 'unknown')",
          "260:     def test_mac_vendor_lookup_exception(self):",
          "261:         \"\"\"Prevent another lookup if exception during API call.\"\"\"",
          "262:         mac = 'B8:27:EB:00:00:00'",
          "264:         device = device_tracker.Device(",
          "265:             self.hass, timedelta(seconds=180), True, 'test', mac, 'Test name')",
          "267:         with mock_aiohttp_client() as aioclient_mock:",
          "268:             aioclient_mock.get('http://api.macvendors.com/b8:27:eb',",
          "269:                                exc=asyncio.TimeoutError())",
          "271:             run_coroutine_threadsafe(device.set_vendor_for_mac(),",
          "272:                                      self.hass.loop).result()",
          "274:             self.assertEqual(device.vendor, 'unknown')",
          "276:     def test_mac_vendor_lookup_on_see(self):",
          "277:         \"\"\"Test if macvendor is looked up when device is seen.\"\"\"",
          "278:         mac = 'B8:27:EB:00:00:00'",
          "279:         vendor_string = 'Raspberry Pi Foundation'",
          "281:         tracker = device_tracker.DeviceTracker(",
          "282:             self.hass, timedelta(seconds=60), 0, {}, [])",
          "284:         with mock_aiohttp_client() as aioclient_mock:",
          "285:             aioclient_mock.get('http://api.macvendors.com/b8:27:eb',",
          "286:                                text=vendor_string)",
          "288:             run_coroutine_threadsafe(",
          "289:                 tracker.async_see(mac=mac), self.hass.loop).result()",
          "290:             assert aioclient_mock.call_count == 1, \\",
          "291:                 'No http request for macvendor made!'",
          "292:         self.assertEqual(tracker.devices['b827eb000000'].vendor, vendor_string)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "463:             'entity_id': 'device_tracker.hello',",
          "464:             'host_name': 'hello',",
          "465:             'mac': 'MAC_1',",
          "467:         }",
          "469:     # pylint: disable=invalid-name",
          "",
          "[Removed Lines]",
          "466:             'vendor': 'unknown',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "495:                                             timedelta(seconds=0))",
          "496:         assert len(config) == 0",
          "501:         \"\"\"Test device tracker see records state correctly.\"\"\"",
          "502:         self.assertTrue(setup_component(self.hass, device_tracker.DOMAIN,",
          "503:                                         TEST_PLATFORM))",
          "",
          "[Removed Lines]",
          "498:     @patch('homeassistant.components.device_tracker.Device'",
          "499:            '.set_vendor_for_mac', return_value=mock_coro())",
          "500:     def test_see_state(self, mock_set_vendor):",
          "",
          "[Added Lines]",
          "376:     def test_see_state(self):",
          "",
          "---------------"
        ],
        "tests/conftest.py||tests/conftest.py": [
          "File: tests/conftest.py -> tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:     ), patch(",
          "124:         'homeassistant.components.device_tracker.async_load_config',",
          "125:             side_effect=lambda *args: mock_coro(devices)",
          "129:         yield devices",
          "",
          "[Removed Lines]",
          "126:     ), patch('homeassistant.components.device_tracker'",
          "127:              '.Device.set_vendor_for_mac'):",
          "",
          "[Added Lines]",
          "126:     ):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ae6a3402c44ad8466a9ff9b75a611672615be0e",
      "candidate_info": {
        "commit_hash": "9ae6a3402c44ad8466a9ff9b75a611672615be0e",
        "repo": "home-assistant/core",
        "commit_url": "https://github.com/home-assistant/core/commit/9ae6a3402c44ad8466a9ff9b75a611672615be0e",
        "files": [
          "homeassistant/const.py"
        ],
        "message": "Version bump to 0.67.0b0",
        "before_after_code_files": [
          "homeassistant/const.py||homeassistant/const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/home-assistant/core/pull/13856"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "homeassistant/const.py||homeassistant/const.py": [
          "File: homeassistant/const.py -> homeassistant/const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"Constants used by Home Assistant components.\"\"\"",
          "3: MAJOR_VERSION = 0",
          "4: MINOR_VERSION = 67",
          "6: __short_version__ = '{}.{}'.format(MAJOR_VERSION, MINOR_VERSION)",
          "7: __version__ = '{}.{}'.format(__short_version__, PATCH_VERSION)",
          "8: REQUIRED_PYTHON_VER = (3, 5, 3)",
          "",
          "[Removed Lines]",
          "5: PATCH_VERSION = '0.dev0'",
          "",
          "[Added Lines]",
          "5: PATCH_VERSION = '0b0'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5908b55bbabc5803833cc9ec88cbc17e8c2e48f1",
      "candidate_info": {
        "commit_hash": "5908b55bbabc5803833cc9ec88cbc17e8c2e48f1",
        "repo": "home-assistant/core",
        "commit_url": "https://github.com/home-assistant/core/commit/5908b55bbabc5803833cc9ec88cbc17e8c2e48f1",
        "files": [
          "homeassistant/const.py"
        ],
        "message": "Fix merge conflict",
        "before_after_code_files": [
          "homeassistant/const.py||homeassistant/const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/home-assistant/core/pull/13856"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "homeassistant/const.py||homeassistant/const.py": [
          "File: homeassistant/const.py -> homeassistant/const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # coding: utf-8",
          "2: \"\"\"Constants used by Home Assistant components.\"\"\"",
          "3: MAJOR_VERSION = 0",
          "5: MINOR_VERSION = 67",
          "6: PATCH_VERSION = '0.dev0'",
          "11: __short_version__ = '{}.{}'.format(MAJOR_VERSION, MINOR_VERSION)",
          "12: __version__ = '{}.{}'.format(__short_version__, PATCH_VERSION)",
          "13: REQUIRED_PYTHON_VER = (3, 5, 3)",
          "",
          "[Removed Lines]",
          "4: <<<<<<< HEAD",
          "7: =======",
          "8: MINOR_VERSION = 66",
          "9: PATCH_VERSION = '0b3'",
          "10: >>>>>>> origin/rc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "234495ed0549cd33490ac41329fe26bf0099c645",
      "candidate_info": {
        "commit_hash": "234495ed0549cd33490ac41329fe26bf0099c645",
        "repo": "home-assistant/core",
        "commit_url": "https://github.com/home-assistant/core/commit/234495ed0549cd33490ac41329fe26bf0099c645",
        "files": [
          "homeassistant/util/color.py",
          "tests/components/light/test_demo.py",
          "tests/components/light/test_mqtt.py",
          "tests/components/light/test_mqtt_json.py",
          "tests/components/switch/test_flux.py",
          "tests/util/test_color.py"
        ],
        "message": "Fix too green color conversion (#13828)\n\n* Prepare test\n\n* Fix too green color conversion\n\n* Fix remaining tests",
        "before_after_code_files": [
          "homeassistant/util/color.py||homeassistant/util/color.py",
          "tests/components/light/test_demo.py||tests/components/light/test_demo.py",
          "tests/components/light/test_mqtt.py||tests/components/light/test_mqtt.py",
          "tests/components/light/test_mqtt_json.py||tests/components/light/test_mqtt_json.py",
          "tests/components/switch/test_flux.py||tests/components/switch/test_flux.py",
          "tests/util/test_color.py||tests/util/test_color.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/home-assistant/core/pull/13856"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "homeassistant/util/color.py||homeassistant/util/color.py": [
          "File: homeassistant/util/color.py -> homeassistant/util/color.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     # Wide RGB D65 conversion formula",
          "205:     X = R * 0.664511 + G * 0.154324 + B * 0.162028",
          "207:     Z = R * 0.000088 + G * 0.072310 + B * 0.986039",
          "209:     # Convert XYZ to xy",
          "",
          "[Removed Lines]",
          "206:     Y = R * 0.313881 + G * 0.668433 + B * 0.047685",
          "",
          "[Added Lines]",
          "206:     Y = R * 0.283881 + G * 0.668433 + B * 0.047685",
          "",
          "---------------"
        ],
        "tests/components/light/test_demo.py||tests/components/light/test_demo.py": [
          "File: tests/components/light/test_demo.py -> tests/components/light/test_demo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     def test_state_attributes(self):",
          "30:         \"\"\"Test light state attributes.\"\"\"",
          "31:         light.turn_on(",
          "33:         self.hass.block_till_done()",
          "34:         state = self.hass.states.get(ENTITY_LIGHT)",
          "35:         self.assertTrue(light.is_on(self.hass, ENTITY_LIGHT))",
          "37:             light.ATTR_XY_COLOR))",
          "38:         self.assertEqual(25, state.attributes.get(light.ATTR_BRIGHTNESS))",
          "39:         self.assertEqual(",
          "41:         self.assertEqual('rainbow', state.attributes.get(light.ATTR_EFFECT))",
          "42:         light.turn_on(",
          "43:             self.hass, ENTITY_LIGHT, rgb_color=(251, 253, 255),",
          "",
          "[Removed Lines]",
          "32:             self.hass, ENTITY_LIGHT, xy_color=(.4, .6), brightness=25)",
          "36:         self.assertEqual((0.378, 0.574), state.attributes.get(",
          "40:             (207, 255, 0), state.attributes.get(light.ATTR_RGB_COLOR))",
          "",
          "[Added Lines]",
          "32:             self.hass, ENTITY_LIGHT, xy_color=(.4, .4), brightness=25)",
          "36:         self.assertEqual((0.4, 0.4), state.attributes.get(",
          "40:             (255, 234, 164), state.attributes.get(light.ATTR_RGB_COLOR))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         self.assertEqual(",
          "49:             (250, 252, 255), state.attributes.get(light.ATTR_RGB_COLOR))",
          "50:         self.assertEqual(",
          "52:         light.turn_on(self.hass, ENTITY_LIGHT, color_temp=400, effect='none')",
          "53:         self.hass.block_till_done()",
          "54:         state = self.hass.states.get(ENTITY_LIGHT)",
          "",
          "[Removed Lines]",
          "51:             (0.316, 0.333), state.attributes.get(light.ATTR_XY_COLOR))",
          "",
          "[Added Lines]",
          "51:             (0.319, 0.326), state.attributes.get(light.ATTR_XY_COLOR))",
          "",
          "---------------"
        ],
        "tests/components/light/test_mqtt.py||tests/components/light/test_mqtt.py": [
          "File: tests/components/light/test_mqtt.py -> tests/components/light/test_mqtt.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:         self.assertEqual(150, state.attributes.get('color_temp'))",
          "256:         self.assertEqual('none', state.attributes.get('effect'))",
          "257:         self.assertEqual(255, state.attributes.get('white_value'))",
          "260:         fire_mqtt_message(self.hass, 'test_light_rgb/status', '0')",
          "261:         self.hass.block_till_done()",
          "",
          "[Removed Lines]",
          "258:         self.assertEqual((0.32, 0.336), state.attributes.get('xy_color'))",
          "",
          "[Added Lines]",
          "258:         self.assertEqual((0.323, 0.329), state.attributes.get('xy_color'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "311:         self.hass.block_till_done()",
          "313:         light_state = self.hass.states.get('light.test')",
          "315:                          light_state.attributes.get('xy_color'))",
          "317:     def test_brightness_controlling_scale(self):",
          "",
          "[Removed Lines]",
          "314:         self.assertEqual((0.652, 0.343),",
          "",
          "[Added Lines]",
          "314:         self.assertEqual((0.672, 0.324),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "519:             mock.call('test_light_rgb/rgb/set', '50,50,50', 2, False),",
          "520:             mock.call('test_light_rgb/brightness/set', 50, 2, False),",
          "521:             mock.call('test_light_rgb/white_value/set', 80, 2, False),",
          "523:         ], any_order=True)",
          "525:         state = self.hass.states.get('light.test')",
          "",
          "[Removed Lines]",
          "522:             mock.call('test_light_rgb/xy/set', '0.32,0.336', 2, False),",
          "",
          "[Added Lines]",
          "522:             mock.call('test_light_rgb/xy/set', '0.323,0.329', 2, False),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "527:         self.assertEqual((255, 255, 255), state.attributes['rgb_color'])",
          "528:         self.assertEqual(50, state.attributes['brightness'])",
          "529:         self.assertEqual(80, state.attributes['white_value'])",
          "532:     def test_sending_mqtt_rgb_command_with_template(self):",
          "533:         \"\"\"Test the sending of RGB command with template.\"\"\"",
          "",
          "[Removed Lines]",
          "530:         self.assertEqual((0.32, 0.336), state.attributes['xy_color'])",
          "",
          "[Added Lines]",
          "530:         self.assertEqual((0.323, 0.329), state.attributes['xy_color'])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "680:         state = self.hass.states.get('light.test')",
          "681:         self.assertEqual(STATE_ON, state.state)",
          "684:     def test_on_command_first(self):",
          "685:         \"\"\"Test on command being sent before brightness.\"\"\"",
          "",
          "[Removed Lines]",
          "682:         self.assertEqual((0.32, 0.336), state.attributes.get('xy_color'))",
          "",
          "[Added Lines]",
          "682:         self.assertEqual((0.323, 0.329), state.attributes.get('xy_color'))",
          "",
          "---------------"
        ],
        "tests/components/light/test_mqtt_json.py||tests/components/light/test_mqtt_json.py": [
          "File: tests/components/light/test_mqtt_json.py -> tests/components/light/test_mqtt_json.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:         self.assertEqual(155, state.attributes.get('color_temp'))",
          "207:         self.assertEqual('colorloop', state.attributes.get('effect'))",
          "208:         self.assertEqual(150, state.attributes.get('white_value'))",
          "211:         # Turn the light off",
          "212:         fire_mqtt_message(self.hass, 'test_light_rgb', '{\"state\":\"OFF\"}')",
          "",
          "[Removed Lines]",
          "209:         self.assertEqual((0.32, 0.336), state.attributes.get('xy_color'))",
          "",
          "[Added Lines]",
          "209:         self.assertEqual((0.323, 0.329), state.attributes.get('xy_color'))",
          "",
          "---------------"
        ],
        "tests/components/switch/test_flux.py||tests/components/switch/test_flux.py": [
          "File: tests/components/switch/test_flux.py -> tests/components/switch/test_flux.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:                 fire_time_changed(self.hass, test_time)",
          "155:                 self.hass.block_till_done()",
          "156:         call = turn_on_calls[-1]",
          "160:     # pylint: disable=invalid-name",
          "161:     def test_flux_after_sunrise_before_sunset(self):",
          "",
          "[Removed Lines]",
          "157:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 119)",
          "158:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.591, 0.395])",
          "",
          "[Added Lines]",
          "157:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 112)",
          "158:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.606, 0.379])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:                 fire_time_changed(self.hass, test_time)",
          "202:                 self.hass.block_till_done()",
          "203:         call = turn_on_calls[-1]",
          "207:     # pylint: disable=invalid-name",
          "208:     def test_flux_after_sunset_before_stop(self):",
          "",
          "[Removed Lines]",
          "204:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 180)",
          "205:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.431, 0.38])",
          "",
          "[Added Lines]",
          "204:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 173)",
          "205:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.439, 0.37])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:                 fire_time_changed(self.hass, test_time)",
          "250:                 self.hass.block_till_done()",
          "251:         call = turn_on_calls[-1]",
          "255:     # pylint: disable=invalid-name",
          "256:     def test_flux_after_stop_before_sunrise(self):",
          "",
          "[Removed Lines]",
          "252:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 153)",
          "253:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.496, 0.397])",
          "",
          "[Added Lines]",
          "252:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 146)",
          "253:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.506, 0.385])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "296:                 fire_time_changed(self.hass, test_time)",
          "297:                 self.hass.block_till_done()",
          "298:         call = turn_on_calls[-1]",
          "302:     # pylint: disable=invalid-name",
          "303:     def test_flux_with_custom_start_stop_times(self):",
          "",
          "[Removed Lines]",
          "299:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 119)",
          "300:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.591, 0.395])",
          "",
          "[Added Lines]",
          "299:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 112)",
          "300:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.606, 0.379])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "345:                 fire_time_changed(self.hass, test_time)",
          "346:                 self.hass.block_till_done()",
          "347:         call = turn_on_calls[-1]",
          "351:     def test_flux_before_sunrise_stop_next_day(self):",
          "352:         \"\"\"Test the flux switch before sunrise.",
          "",
          "[Removed Lines]",
          "348:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 154)",
          "349:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.494, 0.397])",
          "",
          "[Added Lines]",
          "348:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 147)",
          "349:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.504, 0.385])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "395:                 fire_time_changed(self.hass, test_time)",
          "396:                 self.hass.block_till_done()",
          "397:         call = turn_on_calls[-1]",
          "401:     # pylint: disable=invalid-name",
          "402:     def test_flux_after_sunrise_before_sunset_stop_next_day(self):",
          "",
          "[Removed Lines]",
          "398:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 119)",
          "399:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.591, 0.395])",
          "",
          "[Added Lines]",
          "398:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 112)",
          "399:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.606, 0.379])",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "447:                 fire_time_changed(self.hass, test_time)",
          "448:                 self.hass.block_till_done()",
          "449:         call = turn_on_calls[-1]",
          "453:     # pylint: disable=invalid-name",
          "454:     def test_flux_after_sunset_before_midnight_stop_next_day(self):",
          "",
          "[Removed Lines]",
          "450:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 180)",
          "451:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.431, 0.38])",
          "",
          "[Added Lines]",
          "450:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 173)",
          "451:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.439, 0.37])",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "498:                 fire_time_changed(self.hass, test_time)",
          "499:                 self.hass.block_till_done()",
          "500:         call = turn_on_calls[-1]",
          "504:     # pylint: disable=invalid-name",
          "505:     def test_flux_after_sunset_after_midnight_stop_next_day(self):",
          "",
          "[Removed Lines]",
          "501:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 126)",
          "502:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.574, 0.401])",
          "",
          "[Added Lines]",
          "501:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 119)",
          "502:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.588, 0.386])",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "549:                 fire_time_changed(self.hass, test_time)",
          "550:                 self.hass.block_till_done()",
          "551:         call = turn_on_calls[-1]",
          "555:     # pylint: disable=invalid-name",
          "556:     def test_flux_after_stop_before_sunrise_stop_next_day(self):",
          "",
          "[Removed Lines]",
          "552:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 122)",
          "553:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.586, 0.397])",
          "",
          "[Added Lines]",
          "552:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 114)",
          "553:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.601, 0.382])",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "600:                 fire_time_changed(self.hass, test_time)",
          "601:                 self.hass.block_till_done()",
          "602:         call = turn_on_calls[-1]",
          "606:     # pylint: disable=invalid-name",
          "607:     def test_flux_with_custom_colortemps(self):",
          "",
          "[Removed Lines]",
          "603:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 119)",
          "604:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.591, 0.395])",
          "",
          "[Added Lines]",
          "603:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 112)",
          "604:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.606, 0.379])",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "650:                 fire_time_changed(self.hass, test_time)",
          "651:                 self.hass.block_till_done()",
          "652:         call = turn_on_calls[-1]",
          "656:     # pylint: disable=invalid-name",
          "657:     def test_flux_with_custom_brightness(self):",
          "",
          "[Removed Lines]",
          "653:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 167)",
          "654:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.461, 0.389])",
          "",
          "[Added Lines]",
          "653:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 159)",
          "654:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.469, 0.378])",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "700:                 self.hass.block_till_done()",
          "701:         call = turn_on_calls[-1]",
          "702:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 255)",
          "705:     def test_flux_with_multiple_lights(self):",
          "706:         \"\"\"Test the flux switch with multiple light entities.\"\"\"",
          "",
          "[Removed Lines]",
          "703:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.496, 0.397])",
          "",
          "[Added Lines]",
          "703:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.506, 0.385])",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "762:                 fire_time_changed(self.hass, test_time)",
          "763:                 self.hass.block_till_done()",
          "764:         call = turn_on_calls[-1]",
          "767:         call = turn_on_calls[-2]",
          "770:         call = turn_on_calls[-3]",
          "774:     def test_flux_with_mired(self):",
          "775:         \"\"\"Test the flux switch\u00b4s mode mired.\"\"\"",
          "",
          "[Removed Lines]",
          "765:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 171)",
          "766:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.452, 0.386])",
          "768:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 171)",
          "769:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.452, 0.386])",
          "771:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 171)",
          "772:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.452, 0.386])",
          "",
          "[Added Lines]",
          "765:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 163)",
          "766:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.46, 0.376])",
          "768:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 163)",
          "769:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.46, 0.376])",
          "771:         self.assertEqual(call.data[light.ATTR_BRIGHTNESS], 163)",
          "772:         self.assertEqual(call.data[light.ATTR_XY_COLOR], [0.46, 0.376])",
          "",
          "---------------"
        ],
        "tests/util/test_color.py||tests/util/test_color.py": [
          "File: tests/util/test_color.py -> tests/util/test_color.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:         \"\"\"Test color_RGB_to_xy_brightness.\"\"\"",
          "15:         self.assertEqual((0, 0, 0),",
          "16:                          color_util.color_RGB_to_xy_brightness(0, 0, 0))",
          "18:                          color_util.color_RGB_to_xy_brightness(255, 255, 255))",
          "20:         self.assertEqual((0.136, 0.04, 12),",
          "",
          "[Removed Lines]",
          "17:         self.assertEqual((0.32, 0.336, 255),",
          "",
          "[Added Lines]",
          "17:         self.assertEqual((0.323, 0.329, 255),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:         self.assertEqual((0.172, 0.747, 170),",
          "24:                          color_util.color_RGB_to_xy_brightness(0, 255, 0))",
          "27:                          color_util.color_RGB_to_xy_brightness(255, 0, 0))",
          "30:                          color_util.color_RGB_to_xy_brightness(128, 0, 0))",
          "32:     def test_color_RGB_to_xy(self):",
          "33:         \"\"\"Test color_RGB_to_xy.\"\"\"",
          "34:         self.assertEqual((0, 0),",
          "35:                          color_util.color_RGB_to_xy(0, 0, 0))",
          "37:                          color_util.color_RGB_to_xy(255, 255, 255))",
          "39:         self.assertEqual((0.136, 0.04),",
          "",
          "[Removed Lines]",
          "26:         self.assertEqual((0.679, 0.321, 80),",
          "29:         self.assertEqual((0.679, 0.321, 17),",
          "36:         self.assertEqual((0.32, 0.336),",
          "",
          "[Added Lines]",
          "26:         self.assertEqual((0.701, 0.299, 72),",
          "29:         self.assertEqual((0.701, 0.299, 16),",
          "36:         self.assertEqual((0.323, 0.329),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:         self.assertEqual((0.172, 0.747),",
          "43:                          color_util.color_RGB_to_xy(0, 255, 0))",
          "46:                          color_util.color_RGB_to_xy(255, 0, 0))",
          "49:                          color_util.color_RGB_to_xy(128, 0, 0))",
          "51:     def test_color_xy_brightness_to_RGB(self):",
          "",
          "[Removed Lines]",
          "45:         self.assertEqual((0.679, 0.321),",
          "48:         self.assertEqual((0.679, 0.321),",
          "",
          "[Added Lines]",
          "45:         self.assertEqual((0.701, 0.299),",
          "48:         self.assertEqual((0.701, 0.299),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:         self.assertEqual((0.151, 0.343),",
          "156:                          color_util.color_hs_to_xy(180, 100))",
          "159:                          color_util.color_hs_to_xy(350, 12.5))",
          "162:                          color_util.color_hs_to_xy(140, 50))",
          "165:                          color_util.color_hs_to_xy(0, 40))",
          "168:                          color_util.color_hs_to_xy(360, 0))",
          "170:     def test_rgb_hex_to_rgb_list(self):",
          "",
          "[Removed Lines]",
          "158:         self.assertEqual((0.352, 0.329),",
          "161:         self.assertEqual((0.228, 0.476),",
          "164:         self.assertEqual((0.465, 0.33),",
          "167:         self.assertEqual((0.32, 0.336),",
          "",
          "[Added Lines]",
          "158:         self.assertEqual((0.356, 0.321),",
          "161:         self.assertEqual((0.229, 0.474),",
          "164:         self.assertEqual((0.474, 0.317),",
          "167:         self.assertEqual((0.323, 0.329),",
          "",
          "---------------"
        ]
      }
    }
  ]
}