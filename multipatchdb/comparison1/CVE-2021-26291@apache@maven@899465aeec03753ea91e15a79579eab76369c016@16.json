{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "899465aeec03753ea91e15a79579eab76369c016",
  "patch_info": {
    "commit_hash": "899465aeec03753ea91e15a79579eab76369c016",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/899465aeec03753ea91e15a79579eab76369c016",
    "files": [
      "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "maven-settings/pom.xml",
      "maven-settings/src/main/mdo/settings.mdo"
    ],
    "message": "[MNG-7117] add support for blocked mirror",
    "before_after_code_files": [
      "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo"
    ]
  },
  "patch_diff": {
    "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java": [
      "File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java -> maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:         DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();",
      "178:         for ( Mirror mirror : request.getMirrors() )",
      "179:         {",
      "182:         }",
      "183:         session.setMirrorSelector( mirrorSelector );",
      "",
      "[Removed Lines]",
      "180:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),",
      "181:                                 mirror.getMirrorOfLayouts() );",
      "",
      "[Added Lines]",
      "180:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.isBlocked(),",
      "181:                                 mirror.getMirrorOf(), mirror.getMirrorOfLayouts() );",
      "",
      "---------------"
    ],
    "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo": [
      "File: maven-settings/src/main/mdo/settings.mdo -> maven-settings/src/main/mdo/settings.mdo",
      "--- Hunk 1 ---",
      "[Context before]",
      "633:             of the mirror to repositories with a matching layout (apart from a matching id). Since Maven 3.",
      "634:           </description>",
      "635:         </field>",
      "636:       </fields>",
      "637:       <codeSegments>",
      "638:         <codeSegment>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "636:         <field>",
      "637:           <name>blocked</name>",
      "638:           <version>1.2.0+</version>",
      "639:           <type>boolean</type>",
      "640:           <defaultValue>false</defaultValue>",
      "641:           <description>",
      "642:             Whether this mirror should be blocked from any download request but fail the download process, explaining why.",
      "643:           </description>",
      "644:         </field>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "648:         sb.append( \",mirrorOf=\" ).append( mirrorOf );",
      "649:         sb.append( \",url=\" ).append( this.url );",
      "650:         sb.append( \",name=\" ).append( this.name );",
      "651:         sb.append( \"]\" );",
      "652:         return sb.toString();",
      "653:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "660:         if ( isBlocked() )",
      "661:         {",
      "662:             sb.append( \",blocked\" );",
      "663:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f98e632108f2b9496e306dc4630fa24ca5ca45b9",
      "candidate_info": {
        "commit_hash": "f98e632108f2b9496e306dc4630fa24ca5ca45b9",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/f98e632108f2b9496e306dc4630fa24ca5ca45b9",
        "files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java"
        ],
        "message": "[MNG-7080] Add a --color option to simplify color support",
        "before_after_code_files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java||maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java -> maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     public static final String NO_TRANSFER_PROGRESS = \"ntp\";",
          "106:     protected Options options;",
          "108:     @SuppressWarnings( { \"static-access\", \"checkstyle:linelength\" } )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     public static final String COLOR = \"color\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:         options.addOption( Option.builder( \"cpu\" ).longOpt( \"check-plugin-updates\" ).desc( \"Ineffective, only kept for backward compatibility\" ).build() );",
          "150:         options.addOption( Option.builder( \"up\" ).longOpt( \"update-plugins\" ).desc( \"Ineffective, only kept for backward compatibility\" ).build() );",
          "151:         options.addOption( Option.builder( \"npu\" ).longOpt( \"no-plugin-updates\" ).desc( \"Ineffective, only kept for backward compatibility\" ).build() );",
          "152:     }",
          "154:     public CommandLine parse( String[] args )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:         options.addOption( Option.builder().longOpt( COLOR ).hasArg().desc( \"Defines the color mode of the output. Available options are auto/always/never\" ).build() );",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java -> maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: import java.util.regex.Matcher;",
          "114: import java.util.regex.Pattern;",
          "116: import static org.apache.maven.cli.ResolveFile.resolveFile;",
          "117: import static org.apache.maven.shared.utils.logging.MessageUtils.buffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: import static org.apache.maven.cli.CLIManager.COLOR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "506:         String styleColor = cliRequest.getUserProperties().getProperty( STYLE_COLOR_PROPERTY, \"auto\" );",
          "507:         if ( \"always\".equals( styleColor ) )",
          "508:         {",
          "509:             MessageUtils.setColorEnabled( true );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:         styleColor = cliRequest.commandLine.getOptionValue( COLOR, styleColor );",
          "",
          "---------------"
        ],
        "maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java||maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java": [
          "File: maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java -> maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     {",
          "47:         public int compare( Option opt1, Option opt2 )",
          "48:         {",
          "50:         }",
          "51:     }",
          "",
          "[Removed Lines]",
          "49:             return opt1.getOpt().compareToIgnoreCase( opt2.getOpt() );",
          "",
          "[Added Lines]",
          "49:             String s1 = opt1.getOpt() != null ? opt1.getOpt() : opt1.getLongOpt();",
          "50:             String s2 = opt2.getOpt() != null ? opt2.getOpt() : opt2.getLongOpt();",
          "51:             return s1.compareToIgnoreCase( s2 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f3c39b8ed1a875ec58ebe91b2b18ca8b64b2fd3",
      "candidate_info": {
        "commit_hash": "0f3c39b8ed1a875ec58ebe91b2b18ca8b64b2fd3",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/0f3c39b8ed1a875ec58ebe91b2b18ca8b64b2fd3",
        "files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java"
        ],
        "message": "[MNG-6802] FileProfileActivator changes FileProfileActivator.exists which lets flattened resolveCiFriendliesOnly depending fail activating profile\n\nCherry picked from 3fabb639a31d6076b1649c1a08828febabddf44a\n\nThis closes #649",
        "before_after_code_files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java||maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java||maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java||maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;",
          "25: import org.apache.maven.artifact.versioning.VersionRange;",
          "26: import org.apache.maven.model.Activation;",
          "27: import org.apache.maven.model.Build;",
          "28: import org.apache.maven.model.Dependency;",
          "29: import org.apache.maven.model.DependencyManagement;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.maven.model.ActivationFile;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.apache.maven.model.normalization.ModelNormalizer;",
          "47: import org.apache.maven.model.path.ModelPathTranslator;",
          "48: import org.apache.maven.model.path.ModelUrlNormalizer;",
          "49: import org.apache.maven.model.plugin.LifecycleBindingsInjector;",
          "50: import org.apache.maven.model.plugin.PluginConfigurationExpander;",
          "51: import org.apache.maven.model.plugin.ReportConfigurationExpander;",
          "52: import org.apache.maven.model.plugin.ReportingConverter;",
          "53: import org.apache.maven.model.profile.DefaultProfileActivationContext;",
          "54: import org.apache.maven.model.profile.ProfileInjector;",
          "55: import org.apache.maven.model.profile.ProfileSelector;",
          "56: import org.apache.maven.model.resolution.InvalidRepositoryException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: import org.apache.maven.model.path.ProfileActivationFilePathInterpolator;",
          "56: import org.apache.maven.model.profile.ProfileActivationContext;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59: import org.apache.maven.model.resolution.WorkspaceModelResolver;",
          "60: import org.apache.maven.model.superpom.SuperPomProvider;",
          "61: import org.apache.maven.model.validation.ModelValidator;",
          "62: import org.codehaus.plexus.interpolation.MapBasedValueSource;",
          "63: import org.codehaus.plexus.interpolation.StringSearchInterpolator;",
          "64: import org.eclipse.sisu.Nullable;",
          "66: import java.io.File;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: import org.codehaus.plexus.interpolation.InterpolationException;",
          "68: import org.codehaus.plexus.util.StringUtils;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:     @Inject",
          "143:     private ReportingConverter reportingConverter;",
          "145:     public DefaultModelBuilder setModelProcessor( ModelProcessor modelProcessor )",
          "146:     {",
          "147:         this.modelProcessor = modelProcessor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:     @Inject",
          "151:     private ProfileActivationFilePathInterpolator profileActivationFilePathInterpolator;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "244:         return this;",
          "245:     }",
          "247:     @SuppressWarnings( \"checkstyle:methodlength\" )",
          "248:     @Override",
          "249:     public ModelBuildingResult build( ModelBuildingRequest request )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:     public DefaultModelBuilder setProfileActivationFilePathInterpolator(",
          "256:             ProfileActivationFilePathInterpolator profileActivationFilePathInterpolator )",
          "257:     {",
          "258:         this.profileActivationFilePathInterpolator = profileActivationFilePathInterpolator;",
          "259:         return this;",
          "260:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "317:                                                                                  profileActivationContext, problems );",
          "318:             currentData.setActiveProfiles( activePomProfiles );",
          "321:             injectProfileActivations( tmpModel, interpolatedActivations );",
          "",
          "[Removed Lines]",
          "320:             Map<String, Activation> interpolatedActivations = getProfileActivations( rawModel, false );",
          "",
          "[Added Lines]",
          "335:             Map<String, Activation> interpolatedActivations = getInterpolatedActivations( rawModel,",
          "336:                                                                                           profileActivationContext,",
          "337:                                                                                           problems );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "440:         return result;",
          "441:     }",
          "443:     @Override",
          "444:     public ModelBuildingResult build( ModelBuildingRequest request, ModelBuildingResult result )",
          "445:         throws ModelBuildingException",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:     private Map<String, Activation> getInterpolatedActivations( Model rawModel,",
          "461:                                                                 DefaultProfileActivationContext context,",
          "462:                                                                 DefaultModelProblemCollector problems )",
          "463:     {",
          "464:         Map<String, Activation> interpolatedActivations = getProfileActivations( rawModel, true );",
          "465:         for ( Activation activation : interpolatedActivations.values() )",
          "466:         {",
          "467:             if ( activation.getFile() != null )",
          "468:             {",
          "469:                 replaceWithInterpolatedValue( activation.getFile(), context, problems );",
          "470:             }",
          "471:         }",
          "472:         return interpolatedActivations;",
          "473:     }",
          "475:     private void replaceWithInterpolatedValue( ActivationFile activationFile, ProfileActivationContext context,",
          "476:                                                DefaultModelProblemCollector problems  )",
          "477:     {",
          "478:         try",
          "479:         {",
          "480:             if ( StringUtils.isNotEmpty( activationFile.getExists() ) )",
          "481:             {",
          "482:                 String path = activationFile.getExists();",
          "483:                 String absolutePath = profileActivationFilePathInterpolator.interpolate( path, context );",
          "484:                 activationFile.setExists( absolutePath );",
          "485:             }",
          "486:             else if ( StringUtils.isNotEmpty( activationFile.getMissing() ) )",
          "487:             {",
          "488:                 String path = activationFile.getMissing();",
          "489:                 String absolutePath = profileActivationFilePathInterpolator.interpolate( path, context );",
          "490:                 activationFile.setMissing( absolutePath );",
          "491:             }",
          "492:         }",
          "493:         catch ( InterpolationException e )",
          "494:         {",
          "495:             String path = StringUtils.isNotEmpty(",
          "496:                     activationFile.getExists() ) ? activationFile.getExists() : activationFile.getMissing();",
          "498:             problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage(",
          "499:                     \"Failed to interpolate file location \" + path + \": \" + e.getMessage() ).setLocation(",
          "500:                     activationFile.getLocation( StringUtils.isNotEmpty( activationFile.getExists() ) ? \"exists\" : \"missing\"  ) )",
          "501:                     .setException( e ) );",
          "502:         }",
          "503:     }",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import org.apache.maven.model.path.ModelPathTranslator;",
          "44: import org.apache.maven.model.path.ModelUrlNormalizer;",
          "45: import org.apache.maven.model.path.PathTranslator;",
          "46: import org.apache.maven.model.path.UrlNormalizer;",
          "47: import org.apache.maven.model.plugin.DefaultPluginConfigurationExpander;",
          "48: import org.apache.maven.model.plugin.DefaultReportConfigurationExpander;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import org.apache.maven.model.path.ProfileActivationFilePathInterpolator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:     protected ProfileActivator[] newProfileActivators()",
          "110:     {",
          "111:         return new ProfileActivator[] { new JdkVersionProfileActivator(), new OperatingSystemProfileActivator(),",
          "113:     }",
          "115:     protected UrlNormalizer newUrlNormalizer()",
          "",
          "[Removed Lines]",
          "112:             new PropertyProfileActivator(), new FileProfileActivator().setPathTranslator( newPathTranslator() ) };",
          "",
          "[Added Lines]",
          "113:             new PropertyProfileActivator(), new FileProfileActivator()",
          "114:                         .setProfileActivationFilePathInterpolator( newProfileActivationFilePathInterpolator() ) };",
          "115:     }",
          "117:     protected ProfileActivationFilePathInterpolator newProfileActivationFilePathInterpolator()",
          "118:     {",
          "119:         return new ProfileActivationFilePathInterpolator().setPathTranslator( newPathTranslator() );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:         modelBuilder.setPluginConfigurationExpander( newPluginConfigurationExpander() );",
          "226:         modelBuilder.setReportConfigurationExpander( newReportConfigurationExpander() );",
          "227:         modelBuilder.setReportingConverter( newReportingConverter() );",
          "229:         return modelBuilder;",
          "230:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:         modelBuilder.setProfileActivationFilePathInterpolator( newProfileActivationFilePathInterpolator() );",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java -> maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.model.path;",
          "22: import org.apache.maven.model.ActivationFile;",
          "23: import org.apache.maven.model.profile.ProfileActivationContext;",
          "24: import org.codehaus.plexus.interpolation.AbstractValueSource;",
          "25: import org.codehaus.plexus.interpolation.InterpolationException;",
          "26: import org.codehaus.plexus.interpolation.MapBasedValueSource;",
          "27: import org.codehaus.plexus.interpolation.RegexBasedInterpolator;",
          "29: import javax.inject.Inject;",
          "30: import javax.inject.Named;",
          "31: import javax.inject.Singleton;",
          "32: import java.io.File;",
          "39: @Named",
          "40: @Singleton",
          "41: public class ProfileActivationFilePathInterpolator",
          "42: {",
          "44:     @Inject",
          "45:     private PathTranslator pathTranslator;",
          "47:     public ProfileActivationFilePathInterpolator setPathTranslator( PathTranslator pathTranslator )",
          "48:     {",
          "49:         this.pathTranslator = pathTranslator;",
          "50:         return this;",
          "51:     }",
          "58:     public String interpolate( String path, ProfileActivationContext context ) throws InterpolationException",
          "59:     {",
          "60:         if ( path == null )",
          "61:         {",
          "62:             return null;",
          "63:         }",
          "65:         RegexBasedInterpolator interpolator = new RegexBasedInterpolator();",
          "67:         final File basedir = context.getProjectDirectory();",
          "69:         if ( basedir != null )",
          "70:         {",
          "71:             interpolator.addValueSource( new AbstractValueSource( false )",
          "72:             {",
          "73:                 @Override",
          "74:                 public Object getValue( String expression )",
          "75:                 {",
          "80:                     if ( \"basedir\".equals( expression ) )",
          "81:                     {",
          "82:                         return basedir.getAbsolutePath();",
          "83:                     }",
          "84:                     return null;",
          "85:                 }",
          "86:             } );",
          "87:         }",
          "88:         else if ( path.contains( \"${basedir}\" ) )",
          "89:         {",
          "90:             return null;",
          "91:         }",
          "93:         interpolator.addValueSource( new MapBasedValueSource( context.getProjectProperties() ) );",
          "95:         interpolator.addValueSource( new MapBasedValueSource( context.getUserProperties() ) );",
          "97:         interpolator.addValueSource( new MapBasedValueSource( context.getSystemProperties() ) );",
          "99:         String absolutePath = interpolator.interpolate( path, \"\" );",
          "101:         return pathTranslator.alignToBaseDirectory( absolutePath, basedir );",
          "102:     }",
          "103: }",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java||maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java -> maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.apache.maven.model.Activation;",
          "29: import org.apache.maven.model.ActivationFile;",
          "30: import org.apache.maven.model.Profile;",
          "32: import org.apache.maven.model.building.ModelProblem.Severity;",
          "33: import org.apache.maven.model.building.ModelProblem.Version;",
          "34: import org.apache.maven.model.building.ModelProblemCollectorRequest;",
          "36: import org.apache.maven.model.profile.ProfileActivationContext;",
          "40: import org.codehaus.plexus.util.StringUtils;",
          "",
          "[Removed Lines]",
          "31: import org.apache.maven.model.building.ModelProblemCollector;",
          "35: import org.apache.maven.model.path.PathTranslator;",
          "37: import org.codehaus.plexus.interpolation.AbstractValueSource;",
          "38: import org.codehaus.plexus.interpolation.MapBasedValueSource;",
          "39: import org.codehaus.plexus.interpolation.RegexBasedInterpolator;",
          "",
          "[Added Lines]",
          "33: import org.apache.maven.model.building.ModelProblemCollector;",
          "35: import org.apache.maven.model.path.ProfileActivationFilePathInterpolator;",
          "37: import org.codehaus.plexus.interpolation.InterpolationException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: {",
          "60:     @Inject",
          "64:     {",
          "66:         return this;",
          "67:     }",
          "",
          "[Removed Lines]",
          "61:     private PathTranslator pathTranslator;",
          "63:     public FileProfileActivator setPathTranslator( PathTranslator pathTranslator )",
          "65:         this.pathTranslator = pathTranslator;",
          "",
          "[Added Lines]",
          "59:     private ProfileActivationFilePathInterpolator profileActivationFilePathInterpolator;",
          "61:     public FileProfileActivator setProfileActivationFilePathInterpolator(",
          "62:             ProfileActivationFilePathInterpolator profileActivationFilePathInterpolator )",
          "64:         this.profileActivationFilePathInterpolator = profileActivationFilePathInterpolator;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:             return false;",
          "102:         }",
          "138:         try",
          "139:         {",
          "141:         }",
          "143:         {",
          "144:             problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )",
          "145:                     .setMessage( \"Failed to interpolate file location \" + path + \" for profile \" + profile.getId()",
          "147:                     .setLocation( file.getLocation( missing ? \"missing\" : \"exists\" ) )",
          "148:                     .setException( e ) );",
          "149:             return false;",
          "150:         }",
          "156:         {",
          "162:         }",
          "164:         File f = new File( path );",
          "",
          "[Removed Lines]",
          "104:         RegexBasedInterpolator interpolator = new RegexBasedInterpolator();",
          "106:         final File basedir = context.getProjectDirectory();",
          "108:         if ( basedir != null )",
          "109:         {",
          "110:             interpolator.addValueSource( new AbstractValueSource( false )",
          "111:             {",
          "112:                 @Override",
          "113:                 public Object getValue( String expression )",
          "114:                 {",
          "119:                     if ( \"basedir\".equals( expression ) )",
          "120:                     {",
          "121:                         return basedir.getAbsolutePath();",
          "122:                     }",
          "123:                     return null;",
          "124:                 }",
          "125:             } );",
          "126:         }",
          "127:         else if ( path.contains( \"${basedir}\" ) )",
          "128:         {",
          "129:             return false;",
          "130:         }",
          "132:         interpolator.addValueSource( new MapBasedValueSource( context.getProjectProperties() ) );",
          "134:         interpolator.addValueSource( new MapBasedValueSource( context.getUserProperties() ) );",
          "136:         interpolator.addValueSource( new MapBasedValueSource( context.getSystemProperties() ) );",
          "140:             path = interpolator.interpolate( path, \"\" );",
          "142:         catch ( Exception e )",
          "146:                                  + \": \" + e.getMessage() )",
          "152:         path = pathTranslator.alignToBaseDirectory( path, basedir );",
          "155:         if ( missing )",
          "157:             file.setMissing( path );",
          "158:         }",
          "159:         else",
          "160:         {",
          "161:             file.setExists( path );",
          "",
          "[Added Lines]",
          "105:             path = profileActivationFilePathInterpolator.interpolate( path, context );",
          "107:         catch ( InterpolationException e )",
          "111:                             + \": \" + e.getMessage() )",
          "117:         if ( path == null )",
          "119:             return false;",
          "",
          "---------------"
        ],
        "maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java||maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java": [
          "File: maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java -> maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.File;",
          "24: import org.codehaus.plexus.util.xml.Xpp3Dom;",
          "26: import junit.framework.TestCase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.io.FileInputStream;",
          "24: import java.nio.file.Paths;",
          "26: import org.apache.maven.model.Model;",
          "27: import org.apache.maven.model.io.xpp3.MavenXpp3Reader;",
          "32: import org.junit.Test;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     extends TestCase",
          "33: {",
          "35:     private File getPom( String name )",
          "36:     {",
          "38:     }",
          "40:     public void testCompleteWiring()",
          "",
          "[Removed Lines]",
          "37:         return new File( \"src/test/resources/poms/factory/\" + name + \".xml\" ).getAbsoluteFile();",
          "",
          "[Added Lines]",
          "41:     private static final String BASE_DIR = Paths.get( \"src\", \"test\", \"resources\", \"poms\", \"factory\" ).toString();",
          "45:         return new File( Paths.get( BASE_DIR, name + \".xml\"  ).toString() ).getAbsoluteFile();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         assertEquals( \"  1.5  \", conf.getChild( \"target\" ).getValue() );",
          "57:     }",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     @Test",
          "68:     public void testPomChanges() throws Exception",
          "69:     {",
          "70:         ModelBuilder builder = new DefaultModelBuilderFactory().newInstance();",
          "71:         assertNotNull( builder );",
          "72:         File pom = getPom( \"simple\" );",
          "74:         String originalExists = readPom( pom ).getProfiles().get( 1 ).getActivation().getFile().getExists();",
          "76:         DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();",
          "77:         request.setProcessPlugins( true );",
          "78:         request.setPomFile( pom );",
          "79:         ModelBuildingResult result = builder.build( request );",
          "80:         String resultExists = result.getRawModel().getProfiles().get( 1 ).getActivation().getFile().getExists();",
          "82:         assertEquals( originalExists, resultExists );",
          "83:         assertTrue( result.getEffectiveModel().getProfiles().get( 1 ).getActivation().getFile().getExists()",
          "84:                 .contains( BASE_DIR ) );",
          "85:     }",
          "87:     private static Model readPom( File file ) throws Exception",
          "88:     {",
          "89:         MavenXpp3Reader reader = new MavenXpp3Reader();",
          "91:         return reader.read( new FileInputStream( file ) );",
          "92:     }",
          "",
          "---------------"
        ],
        "maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java||maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java": [
          "File: maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java -> maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.model.profile.activation;",
          "22: import org.apache.maven.model.Activation;",
          "23: import org.apache.maven.model.ActivationFile;",
          "24: import org.apache.maven.model.Profile;",
          "25: import org.apache.maven.model.path.DefaultPathTranslator;",
          "26: import org.apache.maven.model.path.ProfileActivationFilePathInterpolator;",
          "27: import org.apache.maven.model.profile.DefaultProfileActivationContext;",
          "29: import org.junit.Before;",
          "30: import org.junit.Test;",
          "32: import java.nio.file.Files;",
          "33: import java.io.File;",
          "34: import java.io.IOException;",
          "35: import java.nio.file.Path;",
          "42: public class FileProfileActivatorTest extends AbstractProfileActivatorTest<FileProfileActivator>",
          "43: {",
          "44:     Path tempDir;",
          "46:     private final DefaultProfileActivationContext context = new DefaultProfileActivationContext();",
          "48:     public FileProfileActivatorTest()",
          "49:     {",
          "50:         super( FileProfileActivator.class );",
          "51:     }",
          "53:     @Before",
          "54:     public void setUp() throws Exception",
          "55:     {",
          "56:         super.setUp();",
          "58:         tempDir = Files.createTempDirectory( null );",
          "60:         activator.setProfileActivationFilePathInterpolator(",
          "61:                 new ProfileActivationFilePathInterpolator().setPathTranslator( new DefaultPathTranslator() ) );",
          "63:         context.setProjectDirectory( new File( tempDir.toString() ) );",
          "65:         File file = new File( tempDir.resolve( \"file.txt\" ).toString() );",
          "66:         if ( !file.createNewFile() )",
          "67:         {",
          "68:             throw new IOException( \"Can't create \" + file );",
          "69:         }",
          "70:     }",
          "72:     @Test",
          "73:     public void testIsActiveNoFile()",
          "74:     {",
          "75:         assertActivation( false, newExistsProfile( null ), context );",
          "76:         assertActivation( false, newExistsProfile( \"someFile.txt\" ), context );",
          "77:         assertActivation( false, newExistsProfile( \"${basedir}/someFile.txt\" ), context );",
          "79:         assertActivation( false, newMissingProfile( null ), context );",
          "80:         assertActivation( true, newMissingProfile( \"someFile.txt\" ), context );",
          "81:         assertActivation( true, newMissingProfile( \"${basedir}/someFile.txt\" ), context );",
          "82:     }",
          "84:     @Test",
          "85:     public void testIsActiveExistsFileExists()",
          "86:     {",
          "87:         assertActivation( true, newExistsProfile( \"file.txt\" ), context );",
          "88:         assertActivation( true, newExistsProfile( \"${basedir}\" ), context );",
          "89:         assertActivation( true, newExistsProfile( \"${basedir}/\" + \"file.txt\" ), context );",
          "91:         assertActivation( false, newMissingProfile( \"file.txt\" ), context );",
          "92:         assertActivation( false, newMissingProfile( \"${basedir}\" ), context );",
          "93:         assertActivation( false, newMissingProfile( \"${basedir}/\" + \"file.txt\" ), context );",
          "94:     }",
          "96:     @Test",
          "97:     public void testIsActiveExistsLeavesFileUnchanged()",
          "98:     {",
          "99:         Profile profile = newExistsProfile( \"file.txt\" );",
          "100:         assertEquals( \"file.txt\", profile.getActivation().getFile().getExists() );",
          "102:         assertActivation( true, profile, context );",
          "104:         assertEquals( \"file.txt\", profile.getActivation().getFile().getExists() );",
          "105:     }",
          "107:     private Profile newExistsProfile( String filePath )",
          "108:     {",
          "109:         ActivationFile activationFile = new ActivationFile();",
          "110:         activationFile.setExists( filePath );",
          "111:         return newProfile( activationFile );",
          "112:     }",
          "114:     private Profile newMissingProfile( String filePath )",
          "115:     {",
          "116:         ActivationFile activationFile = new ActivationFile();",
          "117:         activationFile.setMissing( filePath );",
          "118:         return newProfile( activationFile );",
          "119:     }",
          "121:     private Profile newProfile( ActivationFile activationFile )",
          "122:     {",
          "123:         Activation activation = new Activation();",
          "124:         activation.setFile( activationFile );",
          "126:         Profile profile = new Profile();",
          "127:         profile.setActivation( activation );",
          "129:         return profile;",
          "130:     }",
          "131: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a27b4ee595ee48833fa659ee30ff463f26c4a50d",
      "candidate_info": {
        "commit_hash": "a27b4ee595ee48833fa659ee30ff463f26c4a50d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/a27b4ee595ee48833fa659ee30ff463f26c4a50d",
        "files": [
          "maven-model/src/main/mdo/maven.mdo"
        ],
        "message": "[MNG-6987] Reorder groupId before artifactId when writing an exclusion using maven-model\n\nIn most other places, we order the groupId before the artifactId.\nExclusion was the odd one out, so I changed it to be in line with\nthe others.\n\nThis closes #375",
        "before_after_code_files": [
          "maven-model/src/main/mdo/maven.mdo||maven-model/src/main/mdo/maven.mdo"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model/src/main/mdo/maven.mdo||maven-model/src/main/mdo/maven.mdo": [
          "File: maven-model/src/main/mdo/maven.mdo -> maven-model/src/main/mdo/maven.mdo",
          "--- Hunk 1 ---",
          "[Context before]",
          "1191:       </description>",
          "1192:       <fields>",
          "1193:         <field>",
          "1195:           <version>4.0.0+</version>",
          "1197:           <type>String</type>",
          "1198:           <required>true</required>",
          "1199:         </field>",
          "1200:         <field>",
          "1202:           <version>4.0.0+</version>",
          "1204:           <type>String</type>",
          "1205:           <required>true</required>",
          "1206:         </field>",
          "",
          "[Removed Lines]",
          "1194:           <name>artifactId</name>",
          "1196:           <description>The artifact ID of the project to exclude.</description>",
          "1201:           <name>groupId</name>",
          "1203:           <description>The group ID of the project to exclude.</description>",
          "",
          "[Added Lines]",
          "1194:           <name>groupId</name>",
          "1196:           <description>The group ID of the project to exclude.</description>",
          "1201:           <name>artifactId</name>",
          "1203:           <description>The artifact ID of the project to exclude.</description>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b355f72235c0bd26b872601b38a493ed1cc518b",
      "candidate_info": {
        "commit_hash": "7b355f72235c0bd26b872601b38a493ed1cc518b",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/7b355f72235c0bd26b872601b38a493ed1cc518b",
        "files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java"
        ],
        "message": "[MNG-7180] Make --color option behave more like BSD/GNU grep's --color option",
        "before_after_code_files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java -> maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:         options.addOption( Option.builder( \"up\" ).longOpt( \"update-plugins\" ).desc( \"Ineffective, only kept for backward compatibility\" ).build() );",
          "153:         options.addOption( Option.builder( \"npu\" ).longOpt( \"no-plugin-updates\" ).desc( \"Ineffective, only kept for backward compatibility\" ).build() );",
          "156:     }",
          "158:     public CommandLine parse( String[] args )",
          "",
          "[Removed Lines]",
          "155:         options.addOption( Option.builder().longOpt( COLOR ).hasArg().desc( \"Defines the color mode of the output. Available options are auto/always/never\" ).build() );",
          "",
          "[Added Lines]",
          "155:         options.addOption( Option.builder().longOpt( COLOR ).hasArg().optionalArg( true ).desc( \"Defines the color mode of the output. Supported are 'auto', 'always', 'never'.\" ).build() );",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java -> maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "507:         String styleColor = cliRequest.getUserProperties().getProperty( STYLE_COLOR_PROPERTY, \"auto\" );",
          "508:         styleColor = cliRequest.commandLine.getOptionValue( COLOR, styleColor );",
          "510:         {",
          "511:             MessageUtils.setColorEnabled( true );",
          "512:         }",
          "514:         {",
          "515:             MessageUtils.setColorEnabled( false );",
          "516:         }",
          "518:         {",
          "521:         }",
          "522:         else if ( cliRequest.commandLine.hasOption( CLIManager.BATCH_MODE )",
          "523:             || cliRequest.commandLine.hasOption( CLIManager.LOG_FILE ) )",
          "",
          "[Removed Lines]",
          "509:         if ( \"always\".equals( styleColor ) )",
          "513:         else if ( \"never\".equals( styleColor ) )",
          "517:         else if ( !\"auto\".equals( styleColor ) )",
          "519:             throw new IllegalArgumentException( \"Invalid color configuration option [\" + styleColor",
          "520:                 + \"]. Supported values are (auto|always|never).\" );",
          "",
          "[Added Lines]",
          "509:         if ( \"always\".equals( styleColor ) || \"yes\".equals( styleColor ) || \"force\".equals( styleColor ) )",
          "513:         else if ( \"never\".equals( styleColor ) || \"no\".equals( styleColor ) || \"none\".equals( styleColor ) )",
          "517:         else if ( !\"auto\".equals( styleColor ) && !\"tty\".equals( styleColor ) && !\"if-tty\".equals( styleColor ) )",
          "519:             throw new IllegalArgumentException( \"Invalid color configuration value '\" + styleColor",
          "520:                 + \"'. Supported are 'auto', 'always', 'never'.\" );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d6f281fe3a4ccdc532c84d421c2680cfb79a68d",
      "candidate_info": {
        "commit_hash": "7d6f281fe3a4ccdc532c84d421c2680cfb79a68d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/7d6f281fe3a4ccdc532c84d421c2680cfb79a68d",
        "files": [
          "maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java"
        ],
        "message": "[MNG-6826] Remove condition check for JDK8+ in FileSizeFormatTest",
        "before_after_code_files": [
          "maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java||maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java||maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java": [
          "File: maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java -> maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.Locale;",
          "26: import org.apache.maven.cli.transfer.AbstractMavenTransferListener.FileSizeFormat;",
          "27: import org.apache.maven.cli.transfer.AbstractMavenTransferListener.FileSizeFormat.ScaleUnit;",
          "29: import static org.junit.Assert.assertEquals;",
          "32: public class FileSizeFormatTest {",
          "",
          "[Removed Lines]",
          "24: import org.apache.commons.lang3.JavaVersion;",
          "25: import org.apache.commons.lang3.SystemUtils;",
          "30: import org.junit.Test;",
          "",
          "[Added Lines]",
          "26: import org.junit.Test;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:         long _50_bytes = 50L;",
          "137:         assertEquals( \"50 B\", format.format( _50_bytes ) );",
          "138:         assertEquals( \"50 B\", format.format( _50_bytes, ScaleUnit.BYTE ) );",
          "143:         assertEquals( \"0 MB\", format.format( _50_bytes, ScaleUnit.MEGABYTE ) );",
          "144:         assertEquals( \"0 GB\", format.format( _50_bytes, ScaleUnit.GIGABYTE ) );",
          "",
          "[Removed Lines]",
          "139:         if ( SystemUtils.isJavaVersionAtLeast( JavaVersion.JAVA_1_8 ) )",
          "140:         {",
          "141:             assertEquals( \"0.1 kB\", format.format( _50_bytes, ScaleUnit.KILOBYTE ) );",
          "142:         }",
          "",
          "[Added Lines]",
          "137:         assertEquals( \"0.1 kB\", format.format( _50_bytes, ScaleUnit.KILOBYTE ) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:         assertEquals( \"50 kB\", format.format( _50_kilobytes ) );",
          "169:         assertEquals( \"50000 B\", format.format( _50_kilobytes, ScaleUnit.BYTE ) );",
          "170:         assertEquals( \"50 kB\", format.format( _50_kilobytes, ScaleUnit.KILOBYTE ) );",
          "175:         assertEquals( \"0 GB\", format.format( _50_kilobytes, ScaleUnit.GIGABYTE ) );",
          "177:         long _999_kilobytes = 999L * 1000L;",
          "",
          "[Removed Lines]",
          "171:         if ( SystemUtils.isJavaVersionAtLeast( JavaVersion.JAVA_1_8 ) )",
          "172:         {",
          "173:             assertEquals( \"0.1 MB\", format.format( _50_kilobytes, ScaleUnit.MEGABYTE ) );",
          "174:         }",
          "",
          "[Added Lines]",
          "166:         assertEquals( \"0.1 MB\", format.format( _50_kilobytes, ScaleUnit.MEGABYTE ) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "200:         assertEquals( \"50000000 B\", format.format( _50_megabytes, ScaleUnit.BYTE ) );",
          "201:         assertEquals( \"50000 kB\", format.format( _50_megabytes, ScaleUnit.KILOBYTE ) );",
          "202:         assertEquals( \"50 MB\", format.format( _50_megabytes, ScaleUnit.MEGABYTE ) );",
          "208:         long _999_megabytes = 999L * 1000L * 1000L;",
          "209:         assertEquals( \"999 MB\", format.format( _999_megabytes ) );",
          "",
          "[Removed Lines]",
          "203:         if ( SystemUtils.isJavaVersionAtLeast( JavaVersion.JAVA_1_8 ) )",
          "204:         {",
          "205:             assertEquals( \"0.1 GB\", format.format( _50_megabytes, ScaleUnit.GIGABYTE ) );",
          "206:         }",
          "",
          "[Added Lines]",
          "195:         assertEquals( \"0.1 GB\", format.format( _50_megabytes, ScaleUnit.GIGABYTE ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "310:          assertEquals( \"15 GB\", format.formatProgress( _15_gigabytes, _15_gigabytes ) );",
          "311:     }",
          "",
          "[Removed Lines]",
          "313: }",
          "",
          "[Added Lines]",
          "302: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}