{
  "cve_id": "CVE-2022-31153",
  "cve_desc": "OpenZeppelin Contracts for Cairo is a library for contract development written in Cairo for StarkNet, a decentralized ZK Rollup. Version 0.2.0 is vulnerable to an error that renders account contracts unusable on live networks. This issue affects all accounts (vanilla and ethereum flavors) in the v0.2.0 release of OpenZeppelin Contracts for Cairo, which are not whitelisted on StarkNet mainnet. Only goerli deployments of v0.2.0 accounts are affected. This faulty behavior is not observed in StarkNet's testing framework. This bug has been patched in v0.2.1.",
  "repo": "OpenZeppelin/cairo-contracts",
  "patch_hash": "2cd60279c3332285d47edf9ee3888b71257acdc9",
  "patch_info": {
    "commit_hash": "2cd60279c3332285d47edf9ee3888b71257acdc9",
    "repo": "OpenZeppelin/cairo-contracts",
    "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/2cd60279c3332285d47edf9ee3888b71257acdc9",
    "files": [
      "docs/Account.md",
      "src/openzeppelin/account/Account.cairo",
      "src/openzeppelin/account/EthAccount.cairo",
      "src/openzeppelin/account/library.cairo",
      "tests/access/test_Ownable.py",
      "tests/account/test_Account.py",
      "tests/account/test_AddressRegistry.py",
      "tests/account/test_EthAccount.py",
      "tests/security/test_pausable.py",
      "tests/signers.py",
      "tests/token/erc20/test_ERC20.py",
      "tests/token/erc20/test_ERC20_Burnable_mock.py",
      "tests/token/erc20/test_ERC20_Mintable.py",
      "tests/token/erc20/test_ERC20_Pausable.py",
      "tests/token/erc20/test_ERC20_Upgradeable.py",
      "tests/token/erc721/test_ERC721_Mintable_Burnable.py",
      "tests/token/erc721/test_ERC721_Mintable_Pausable.py",
      "tests/token/erc721/test_ERC721_SafeMintable_mock.py",
      "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
      "tests/upgrades/test_Proxy.py",
      "tests/upgrades/test_upgrades.py",
      "tests/utils.py"
    ],
    "message": "Eth account support (#361)\n\n* Create separate execute function\n\n* Add is_valid_eth_signature to account library\n\n* Add eth_execute to account library\n\n* Create eth account mock and test\n\n* Add missing dependencies\n\n* Create TestEthSigner\n\n* Update used private key\n\n* Update implicit parameters\n\n* Update execute parameters\n\n* Update all implicit arguments\n\n* Update signature values and hash\n\n* Update variable name\n\n* Update documentation\n\n* Fix merge error\n\n* Improve format\n\n* Update tests/utils.py\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Rename test and fix documentation\n\n* Add documentation\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/utils.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/utils.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/mocks/eth_account.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Create eth account preset\n\n* Create signers module\n\n* use assert_revert to test nonce\n\n* Add test for valid signature\n\n* use internal hash\n\n* Update validity test\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/signers.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Fix after merge\n\n* Improve tests\n\n* Update account library\n\n* Update Account.md\n\n* update format\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Update tests/access/test_Ownable.py\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Update eth test\n\n* Update Account.md\n\n* Update test\n\n* Update tests/signers.py\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Fix typo\n\n* Update signers\n\n* Update test\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/signers.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* update test\n\n* Update documenation for Account\n\n* Update docs/Account.md\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>",
    "before_after_code_files": [
      "src/openzeppelin/account/Account.cairo||src/openzeppelin/account/Account.cairo",
      "src/openzeppelin/account/EthAccount.cairo||src/openzeppelin/account/EthAccount.cairo",
      "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo",
      "tests/access/test_Ownable.py||tests/access/test_Ownable.py",
      "tests/account/test_Account.py||tests/account/test_Account.py",
      "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py",
      "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
      "tests/security/test_pausable.py||tests/security/test_pausable.py",
      "tests/signers.py||tests/signers.py",
      "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py",
      "tests/token/erc20/test_ERC20_Burnable_mock.py||tests/token/erc20/test_ERC20_Burnable_mock.py",
      "tests/token/erc20/test_ERC20_Mintable.py||tests/token/erc20/test_ERC20_Mintable.py",
      "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py",
      "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py",
      "tests/token/erc721/test_ERC721_Mintable_Burnable.py||tests/token/erc721/test_ERC721_Mintable_Burnable.py",
      "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py",
      "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py",
      "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py||tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
      "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
      "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py",
      "tests/utils.py||tests/utils.py"
    ]
  },
  "patch_diff": {
    "src/openzeppelin/account/Account.cairo||src/openzeppelin/account/Account.cairo": [
      "File: src/openzeppelin/account/Account.cairo -> src/openzeppelin/account/Account.cairo",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: %lang starknet",
      "8: from openzeppelin.account.library import Account, AccountCallArray",
      "",
      "[Removed Lines]",
      "6: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin",
      "",
      "[Added Lines]",
      "6: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin, BitwiseBuiltin",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "95:         syscall_ptr : felt*,",
      "96:         pedersen_ptr : HashBuiltin*,",
      "97:         range_check_ptr,",
      "99:     }(",
      "100:         call_array_len: felt,",
      "101:         call_array: AccountCallArray*,",
      "",
      "[Removed Lines]",
      "98:         ecdsa_ptr: SignatureBuiltin*",
      "",
      "[Added Lines]",
      "98:         ecdsa_ptr: SignatureBuiltin*,",
      "99:         bitwise_ptr: BitwiseBuiltin*",
      "",
      "---------------"
    ],
    "src/openzeppelin/account/EthAccount.cairo||src/openzeppelin/account/EthAccount.cairo": [
      "File: src/openzeppelin/account/EthAccount.cairo -> src/openzeppelin/account/EthAccount.cairo",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # SPDX-License-Identifier: MIT",
      "2: # OpenZeppelin Contracts for Cairo v0.1.0 (account/EthAccount.cairo)",
      "4: %lang starknet",
      "5: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin, BitwiseBuiltin",
      "6: from openzeppelin.account.library import Account, AccountCallArray",
      "8: from openzeppelin.introspection.ERC165 import ERC165",
      "10: #",
      "11: # Constructor",
      "12: #",
      "14: @constructor",
      "15: func constructor{",
      "16:         syscall_ptr : felt*,",
      "17:         pedersen_ptr : HashBuiltin*,",
      "18:         range_check_ptr",
      "19:     }(eth_address: felt):",
      "20:     Account.initializer(eth_address)",
      "21:     return ()",
      "22: end",
      "24: #",
      "25: # Getters",
      "26: #",
      "28: @view",
      "29: func get_eth_address{",
      "30:         syscall_ptr : felt*,",
      "31:         pedersen_ptr : HashBuiltin*,",
      "32:         range_check_ptr",
      "33:     }() -> (res: felt):",
      "34:     let (res) = Account.get_public_key()",
      "35:     return (res=res)",
      "36: end",
      "38: @view",
      "39: func get_nonce{",
      "40:         syscall_ptr : felt*,",
      "41:         pedersen_ptr : HashBuiltin*,",
      "42:         range_check_ptr",
      "43:     }() -> (res: felt):",
      "44:     let (res) = Account.get_nonce()",
      "45:     return (res=res)",
      "46: end",
      "48: @view",
      "49: func supportsInterface{",
      "50:         syscall_ptr: felt*,",
      "51:         pedersen_ptr: HashBuiltin*,",
      "52:         range_check_ptr",
      "53:     } (interfaceId: felt) -> (success: felt):",
      "54:     let (success) = ERC165.supports_interface(interfaceId)",
      "55:     return (success)",
      "56: end",
      "58: #",
      "59: # Setters",
      "60: #",
      "62: @external",
      "63: func set_eth_address{",
      "64:         syscall_ptr : felt*,",
      "65:         pedersen_ptr : HashBuiltin*,",
      "66:         range_check_ptr",
      "67:     }(new_eth_address: felt):",
      "68:     Account.set_public_key(new_eth_address)",
      "69:     return ()",
      "70: end",
      "72: #",
      "73: # Business logic",
      "74: #",
      "76: @view",
      "77: func is_valid_signature{",
      "78:         syscall_ptr : felt*,",
      "79:         pedersen_ptr : HashBuiltin*,",
      "80:         range_check_ptr,",
      "81:         ecdsa_ptr: SignatureBuiltin*,",
      "82:         bitwise_ptr: BitwiseBuiltin*",
      "83:     }(",
      "84:         hash: felt,",
      "85:         signature_len: felt,",
      "86:         signature: felt*",
      "87:     ) -> (is_valid: felt):",
      "88:     let (is_valid) = Account.is_valid_eth_signature(hash, signature_len, signature)",
      "89:     return (is_valid=is_valid)",
      "90: end",
      "92: @external",
      "93: func __execute__{",
      "94:         syscall_ptr : felt*,",
      "95:         pedersen_ptr : HashBuiltin*,",
      "96:         range_check_ptr,",
      "97:         bitwise_ptr: BitwiseBuiltin*",
      "98:     }(",
      "99:         call_array_len: felt,",
      "100:         call_array: AccountCallArray*,",
      "101:         calldata_len: felt,",
      "102:         calldata: felt*,",
      "103:         nonce: felt",
      "104:     ) -> (response_len: felt, response: felt*):",
      "105:     let (response_len, response) = Account.eth_execute(",
      "106:         call_array_len,",
      "107:         call_array,",
      "108:         calldata_len,",
      "109:         calldata,",
      "110:         nonce",
      "111:     )",
      "112:     return (response_len=response_len, response=response)",
      "113: end",
      "",
      "---------------"
    ],
    "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo": [
      "File: src/openzeppelin/account/library.cairo -> src/openzeppelin/account/library.cairo",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: from starkware.cairo.common.registers import get_fp_and_pc",
      "4: from starkware.starknet.common.syscalls import get_contract_address",
      "5: from starkware.cairo.common.signature import verify_ecdsa_signature",
      "7: from starkware.cairo.common.alloc import alloc",
      "8: from starkware.cairo.common.memcpy import memcpy",
      "9: from starkware.cairo.common.bool import TRUE",
      "10: from starkware.starknet.common.syscalls import call_contract, get_caller_address, get_tx_info",
      "12: from openzeppelin.introspection.ERC165 import ERC165",
      "14: from openzeppelin.utils.constants import IACCOUNT_ID",
      "",
      "[Removed Lines]",
      "6: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin",
      "",
      "[Added Lines]",
      "6: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin, BitwiseBuiltin",
      "8: from starkware.cairo.common.uint256 import Uint256",
      "10: from starkware.cairo.common.math import split_felt",
      "13: from starkware.cairo.common.cairo_secp.signature import verify_eth_signature_uint256",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141:         return (is_valid=TRUE)",
      "142:     end",
      "145:     func execute{",
      "146:             syscall_ptr : felt*,",
      "147:             pedersen_ptr : HashBuiltin*,",
      "148:             range_check_ptr,",
      "150:         }(",
      "151:             call_array_len: felt,",
      "152:             call_array: AccountCallArray*,",
      "",
      "[Removed Lines]",
      "149:             ecdsa_ptr: SignatureBuiltin*",
      "",
      "[Added Lines]",
      "146:  func is_valid_eth_signature{",
      "147:             syscall_ptr : felt*,",
      "148:             pedersen_ptr : HashBuiltin*,",
      "149:             bitwise_ptr: BitwiseBuiltin*,",
      "150:             range_check_ptr",
      "151:         }(",
      "152:             hash: felt,",
      "153:             signature_len: felt,",
      "154:             signature: felt*",
      "155:         ) -> (is_valid: felt):",
      "156:         alloc_locals",
      "157:         let (_public_key) = get_public_key()",
      "158:         let (__fp__, _) = get_fp_and_pc()",
      "160:         # This interface expects a signature pointer and length to make",
      "161:         # no assumption about signature validation schemes.",
      "162:         # But this implementation does, and it expects a the sig_v, sig_r,",
      "163:         # sig_s, and hash elements.",
      "164:         let sig_v : felt = signature[0]",
      "165:         let sig_r : Uint256 = Uint256(low=signature[1], high=signature[2])",
      "166:         let sig_s : Uint256 = Uint256(low=signature[3], high=signature[4])",
      "167:         let (high, low) = split_felt(hash)",
      "168:         let msg_hash : Uint256 = Uint256(low=low, high=high)",
      "170:         let (local keccak_ptr : felt*) = alloc()",
      "172:         with keccak_ptr:",
      "173:             verify_eth_signature_uint256(",
      "174:                 msg_hash=msg_hash,",
      "175:                 r=sig_r,",
      "176:                 s=sig_s,",
      "177:                 v=sig_v,",
      "178:                 eth_address=_public_key)",
      "179:         end",
      "181:         return (is_valid=TRUE)",
      "182:     end",
      "188:             bitwise_ptr: BitwiseBuiltin*",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "156:         ) -> (response_len: felt, response: felt*):",
      "157:         alloc_locals",
      "159:         let (caller) = get_caller_address()",
      "160:         with_attr error_message(\"Account: no reentrant call\"):",
      "161:             assert caller = 0",
      "162:         end",
      "168:         # validate nonce",
      "169:         with_attr error_message(\"Account: nonce is invalid\"):",
      "170:             assert _current_nonce = nonce",
      "171:         end",
      "173:         # TMP: Convert `AccountCallArray` to 'Call'.",
      "174:         let (calls : Call*) = alloc()",
      "175:         _from_call_array_to_call(call_array_len, call_array, calldata, calls)",
      "176:         let calls_len = call_array_len",
      "187:         # execute call",
      "188:         let (response : felt*) = alloc()",
      "189:         let (response_len) = _execute_list(calls_len, calls, response)",
      "",
      "[Removed Lines]",
      "164:         let (__fp__, _) = get_fp_and_pc()",
      "165:         let (tx_info) = get_tx_info()",
      "166:         let (_current_nonce) = Account_current_nonce.read()",
      "178:         # validate transaction",
      "179:         let (is_valid) = is_valid_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature)",
      "180:         with_attr error_message(\"Account: invalid signature\"):",
      "181:             assert is_valid = TRUE",
      "182:         end",
      "184:         # bump nonce",
      "185:         Account_current_nonce.write(_current_nonce + 1)",
      "",
      "[Added Lines]",
      "198:         let (__fp__, _) = get_fp_and_pc()",
      "199:         let (tx_info) = get_tx_info()",
      "200:         let (local ecdsa_ptr : SignatureBuiltin*) = alloc()",
      "201:         with ecdsa_ptr:",
      "202:             # validate transaction",
      "203:             with_attr error_message(\"Account: invalid signature\"):",
      "204:                 let (is_valid) = is_valid_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature)",
      "205:                 assert is_valid = TRUE",
      "206:             end",
      "207:         end",
      "209:         return _unsafe_execute(call_array_len, call_array, calldata_len, calldata, nonce)",
      "210:     end",
      "212:     func eth_execute{",
      "213:             syscall_ptr : felt*,",
      "214:             pedersen_ptr : HashBuiltin*,",
      "215:             range_check_ptr,",
      "216:             bitwise_ptr: BitwiseBuiltin*",
      "217:         }(",
      "218:             call_array_len: felt,",
      "219:             call_array: AccountCallArray*,",
      "220:             calldata_len: felt,",
      "221:             calldata: felt*,",
      "222:             nonce: felt",
      "223:         ) -> (response_len: felt, response: felt*):",
      "224:         alloc_locals",
      "226:         let (__fp__, _) = get_fp_and_pc()",
      "227:         let (tx_info) = get_tx_info()",
      "229:         # validate transaction",
      "230:         with_attr error_message(\"Account: invalid secp256k1 signature\"):",
      "231:             let (is_valid) = is_valid_eth_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature)",
      "232:             assert is_valid = TRUE",
      "233:         end",
      "235:         return _unsafe_execute(call_array_len, call_array, calldata_len, calldata, nonce)",
      "236:     end",
      "238:     func _unsafe_execute{",
      "239:             syscall_ptr : felt*,",
      "240:             pedersen_ptr : HashBuiltin*,",
      "241:             range_check_ptr,",
      "242:             bitwise_ptr: BitwiseBuiltin*",
      "243:         }(",
      "244:             call_array_len: felt,",
      "245:             call_array: AccountCallArray*,",
      "246:             calldata_len: felt,",
      "247:             calldata: felt*,",
      "248:             nonce: felt",
      "249:         ) -> (response_len: felt, response: felt*):",
      "250:         alloc_locals",
      "259:         let (_current_nonce) = Account_current_nonce.read()",
      "265:         # bump nonce",
      "266:         Account_current_nonce.write(_current_nonce + 1)",
      "",
      "---------------"
    ],
    "tests/access/test_Ownable.py||tests/access/test_Ownable.py": [
      "File: tests/access/test_Ownable.py -> tests/access/test_Ownable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     ZERO_ADDRESS,",
      "6:     assert_event_emitted,",
      "7:     get_contract_class,",
      "",
      "[Removed Lines]",
      "4:     MockSigner,",
      "",
      "[Added Lines]",
      "2: from signers import MockSigner",
      "",
      "---------------"
    ],
    "tests/account/test_Account.py||tests/account/test_Account.py": [
      "File: tests/account/test_Account.py -> tests/account/test_Account.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "6: signer = MockSigner(123456789987654321)",
      "",
      "[Removed Lines]",
      "3: from utils import MockSigner, assert_revert, get_contract_class, cached_contract, TRUE",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "4: from utils import assert_revert, get_contract_class, cached_contract, TRUE",
      "",
      "---------------"
    ],
    "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py": [
      "File: tests/account/test_AddressRegistry.py -> tests/account/test_AddressRegistry.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "6: signer = MockSigner(123456789987654321)",
      "",
      "[Removed Lines]",
      "3: from utils import MockSigner, get_contract_class, cached_contract",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "4: from utils import get_contract_class, cached_contract",
      "",
      "---------------"
    ],
    "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py": [
      "File: tests/account/test_EthAccount.py -> tests/account/test_EthAccount.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from starkware.starkware_utils.error_handling import StarkException",
      "4: from starkware.starknet.definitions.error_codes import StarknetErrorCode",
      "5: from utils import assert_revert, get_contract_class, cached_contract, TRUE, FALSE",
      "6: from signers import MockEthSigner",
      "8: private_key = b'\\x01' * 32",
      "9: signer = MockEthSigner(b'\\x01' * 32)",
      "10: other = MockEthSigner(b'\\x02' * 32)",
      "12: IACCOUNT_ID = 0xf10dbd44",
      "15: @pytest.fixture(scope='module')",
      "16: def contract_defs():",
      "17:     account_cls = get_contract_class('openzeppelin/account/EthAccount.cairo')",
      "18:     init_cls = get_contract_class(\"tests/mocks/Initializable.cairo\")",
      "19:     attacker_cls = get_contract_class(\"tests/mocks/account_reentrancy.cairo\")",
      "21:     return account_cls, init_cls, attacker_cls",
      "24: @pytest.fixture(scope='module')",
      "25: async def account_init(contract_defs):",
      "26:     account_cls, init_cls, attacker_cls = contract_defs",
      "27:     starknet = await Starknet.empty()",
      "29:     account1 = await starknet.deploy(",
      "30:         contract_class=account_cls,",
      "31:         constructor_calldata=[signer.eth_address]",
      "32:     )",
      "33:     account2 = await starknet.deploy(",
      "34:         contract_class=account_cls,",
      "35:         constructor_calldata=[signer.eth_address]",
      "36:     )",
      "37:     initializable1 = await starknet.deploy(",
      "38:         contract_class=init_cls,",
      "39:         constructor_calldata=[],",
      "40:     )",
      "41:     initializable2 = await starknet.deploy(",
      "42:         contract_class=init_cls,",
      "43:         constructor_calldata=[],",
      "44:     )",
      "45:     attacker = await starknet.deploy(",
      "46:         contract_class=attacker_cls,",
      "47:         constructor_calldata=[],",
      "48:     )",
      "50:     return starknet.state, account1, account2, initializable1, initializable2, attacker",
      "53: @pytest.fixture",
      "54: def account_factory(contract_defs, account_init):",
      "55:     account_cls, init_cls, attacker_cls = contract_defs",
      "56:     state, account1, account2, initializable1, initializable2, attacker = account_init",
      "57:     _state = state.copy()",
      "58:     account1 = cached_contract(_state, account_cls, account1)",
      "59:     account2 = cached_contract(_state, account_cls, account2)",
      "60:     initializable1 = cached_contract(_state, init_cls, initializable1)",
      "61:     initializable2 = cached_contract(_state, init_cls, initializable2)",
      "62:     attacker = cached_contract(_state, attacker_cls, attacker)",
      "64:     return account1, account2, initializable1, initializable2, attacker",
      "67: @pytest.mark.asyncio",
      "68: async def test_constructor(account_factory):",
      "69:     account, *_ = account_factory",
      "71:     execution_info = await account.get_eth_address().call()",
      "72:     assert execution_info.result == (signer.eth_address,)",
      "74:     execution_info = await account.supportsInterface(IACCOUNT_ID).call()",
      "75:     assert execution_info.result == (TRUE,)",
      "78: @pytest.mark.asyncio",
      "79: async def test_execute(account_factory):",
      "80:     account, _, initializable, *_ = account_factory",
      "82:     execution_info = await initializable.initialized().call()",
      "83:     assert execution_info.result == (FALSE,)",
      "85:     _, hash, signature = await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])])",
      "87:     validity_info, *_ = await signer.send_transactions(account, [(account.contract_address, 'is_valid_signature', [hash, len(signature), *signature])])",
      "88:     assert validity_info.result.response[0] == TRUE",
      "90:     execution_info = await initializable.initialized().call()",
      "91:     assert execution_info.result == (TRUE,)",
      "93:     # should revert if signature is not correct",
      "94:     await assert_revert(",
      "95:         signer.send_transactions(account, [(account.contract_address, 'is_valid_signature', [hash-1, len(signature), *signature])]),",
      "96:         reverted_with=\"Invalid signature\"",
      "97:     )",
      "100: @pytest.mark.asyncio",
      "101: async def test_multicall(account_factory):",
      "102:     account, _, initializable_1, initializable_2, _ = account_factory",
      "104:     execution_info = await initializable_1.initialized().call()",
      "105:     assert execution_info.result == (FALSE,)",
      "106:     execution_info = await initializable_2.initialized().call()",
      "107:     assert execution_info.result == (FALSE,)",
      "109:     await signer.send_transactions(",
      "110:         account,",
      "111:         [",
      "112:             (initializable_1.contract_address, 'initialize', []),",
      "113:             (initializable_2.contract_address, 'initialize', [])",
      "114:         ]",
      "115:     )",
      "117:     execution_info = await initializable_1.initialized().call()",
      "118:     assert execution_info.result == (TRUE,)",
      "119:     execution_info = await initializable_2.initialized().call()",
      "120:     assert execution_info.result == (TRUE,)",
      "123: @pytest.mark.asyncio",
      "124: async def test_return_value(account_factory):",
      "125:     account, _, initializable, *_ = account_factory",
      "127:     # initialize, set `initialized = 1`",
      "128:     await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])])",
      "130:     read_info, *_ = await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
      "131:     call_info = await initializable.initialized().call()",
      "132:     (call_result, ) = call_info.result",
      "133:     assert read_info.result.response == [call_result]  # 1",
      "136: @ pytest.mark.asyncio",
      "137: async def test_nonce(account_factory):",
      "138:     account, _, initializable, *_ = account_factory",
      "140:     # bump nonce",
      "141:     _, hash, signature = await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
      "143:     execution_info = await account.get_nonce().call()",
      "144:     current_nonce = execution_info.result.res",
      "146:     # lower nonce",
      "147:     await assert_revert(",
      "148:         signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], current_nonce - 1),",
      "149:         reverted_with=\"Account: nonce is invalid\"",
      "150:     )",
      "152:     # higher nonce",
      "153:     await assert_revert(",
      "154:         signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], current_nonce + 1),",
      "155:         reverted_with=\"Account: nonce is invalid\"",
      "156:     )",
      "158:     # right nonce",
      "159:     await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], current_nonce)",
      "161:     execution_info = await initializable.initialized().call()",
      "162:     assert execution_info.result == (TRUE,)",
      "165: @pytest.mark.asyncio",
      "166: async def test_eth_address_setter(account_factory):",
      "167:     account, *_ = account_factory",
      "169:     execution_info = await account.get_eth_address().call()",
      "170:     assert execution_info.result == (signer.eth_address,)",
      "172:     # set new pubkey",
      "173:     await signer.send_transactions(account, [(account.contract_address, 'set_eth_address', [other.eth_address])])",
      "175:     execution_info = await account.get_eth_address().call()",
      "176:     assert execution_info.result == (other.eth_address,)",
      "179: @pytest.mark.asyncio",
      "180: async def test_eth_address_setter_different_account(account_factory):",
      "181:     account, bad_account, *_ = account_factory",
      "183:     # set new pubkey",
      "184:     await assert_revert(",
      "185:         signer.send_transactions(",
      "186:             bad_account,",
      "187:             [(account.contract_address, 'set_eth_address', [other.eth_address])]",
      "188:         ),",
      "189:         reverted_with=\"Account: caller is not this account\"",
      "190:     )",
      "193: @pytest.mark.asyncio",
      "194: async def test_account_takeover_with_reentrant_call(account_factory):",
      "195:     account, _, _, _, attacker = account_factory",
      "197:     await assert_revert(",
      "198:         signer.send_transaction(account, attacker.contract_address, 'account_takeover', []),",
      "199:         reverted_with=\"Account: no reentrant call\"",
      "200:     )",
      "202:     execution_info = await account.get_eth_address().call()",
      "203:     assert execution_info.result == (signer.eth_address,)",
      "",
      "---------------"
    ],
    "tests/security/test_pausable.py||tests/security/test_pausable.py": [
      "File: tests/security/test_pausable.py -> tests/security/test_pausable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "4:     TRUE, FALSE, assert_revert, assert_event_emitted,",
      "6: )",
      "8: signer = MockSigner(12345678987654321)",
      "10: @pytest.fixture",
      "",
      "[Removed Lines]",
      "5:     get_contract_class, cached_contract, MockSigner",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "6:     get_contract_class, cached_contract",
      "",
      "---------------"
    ],
    "tests/signers.py||tests/signers.py": [
      "File: tests/signers.py -> tests/signers.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: from nile.signer import Signer, from_call_to_call_array, get_transaction_hash",
      "2: from utils import to_uint",
      "3: import eth_keys",
      "5: class MockSigner():",
      "6:     \"\"\"",
      "7:     Utility for sending signed transactions to an Account on Starknet.",
      "9:     Parameters",
      "10:     ----------",
      "12:     private_key : int",
      "14:     Examples",
      "15:     ---------",
      "16:     Constructing a MockSigner object",
      "18:     >>> signer = MockSigner(1234)",
      "20:     Sending a transaction",
      "22:     >>> await signer.send_transaction(",
      "23:             account, contract_address, 'contract_method', [arg_1]",
      "24:         )",
      "26:     Sending multiple transactions",
      "28:     >>> await signer.send_transaction(",
      "29:             account, [",
      "30:                 (contract_address, 'contract_method', [arg_1]),",
      "31:                 (contract_address, 'another_method', [arg_1, arg_2])",
      "32:             ]",
      "33:         )",
      "35:     \"\"\"",
      "36:     def __init__(self, private_key):",
      "37:         self.signer = Signer(private_key)",
      "38:         self.public_key = self.signer.public_key",
      "40:     async def send_transaction(self, account, to, selector_name, calldata, nonce=None, max_fee=0):",
      "41:         return await self.send_transactions(account, [(to, selector_name, calldata)], nonce, max_fee)",
      "43:     async def send_transactions(self, account, calls, nonce=None, max_fee=0):",
      "44:         if nonce is None:",
      "45:             execution_info = await account.get_nonce().call()",
      "46:             nonce, = execution_info.result",
      "48:         build_calls = []",
      "49:         for call in calls:",
      "50:             build_call = list(call)",
      "51:             build_call[0] = hex(build_call[0])",
      "52:             build_calls.append(build_call)",
      "54:         (call_array, calldata, sig_r, sig_s) = self.signer.sign_transaction(hex(account.contract_address), build_calls, nonce, max_fee)",
      "55:         return await account.__execute__(call_array, calldata, nonce).invoke(signature=[sig_r, sig_s])",
      "57: class MockEthSigner():",
      "58:     \"\"\"",
      "59:     Utility for sending signed transactions to an Account on Starknet, like MockSigner, but using a secp256k1 signature.",
      "60:     Parameters",
      "61:     ----------",
      "62:     private_key : int",
      "64:     \"\"\"",
      "65:     def __init__(self, private_key):",
      "66:         self.signer = eth_keys.keys.PrivateKey(private_key)",
      "67:         self.eth_address = int(self.signer.public_key.to_checksum_address(),0)",
      "69:     async def send_transaction(self, account, to, selector_name, calldata, nonce=None, max_fee=0):",
      "70:         return await self.send_transactions(account, [(to, selector_name, calldata)], nonce, max_fee)",
      "72:     async def send_transactions(self, account, calls, nonce=None, max_fee=0):",
      "73:         if nonce is None:",
      "74:             execution_info = await account.get_nonce().call()",
      "75:             nonce, = execution_info.result",
      "77:         build_calls = []",
      "78:         for call in calls:",
      "79:             build_call = list(call)",
      "80:             build_call[0] = hex(build_call[0])",
      "81:             build_calls.append(build_call)",
      "83:         (call_array, calldata) = from_call_to_call_array(build_calls)",
      "84:         message_hash = get_transaction_hash(",
      "85:             account.contract_address, call_array, calldata, nonce, max_fee",
      "86:         )",
      "88:         signature = self.signer.sign_msg_hash((message_hash).to_bytes(32, byteorder=\"big\"))",
      "89:         sig_r = to_uint(signature.r)",
      "90:         sig_s = to_uint(signature.s)",
      "92:         # the hash and signature are returned for other tests to use",
      "93:         return await account.__execute__(call_array, calldata, nonce).invoke(",
      "94:             signature=[signature.v, *sig_r, *sig_s]",
      "95:         ), message_hash, [signature.v, *sig_r, *sig_s]",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py": [
      "File: tests/token/erc20/test_ERC20.py -> tests/token/erc20/test_ERC20.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     ZERO_ADDRESS, INVALID_UINT256, TRUE, get_contract_class, cached_contract,",
      "6:     assert_revert, assert_event_emitted, contract_path",
      "7: )",
      "9: signer = MockSigner(123456789987654321)",
      "11: # testing vars",
      "",
      "[Removed Lines]",
      "4:     MockSigner, to_uint, add_uint, sub_uint, str_to_felt, MAX_UINT256,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     to_uint, add_uint, sub_uint, str_to_felt, MAX_UINT256,",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20_Burnable_mock.py||tests/token/erc20/test_ERC20_Burnable_mock.py": [
      "File: tests/token/erc20/test_ERC20_Burnable_mock.py -> tests/token/erc20/test_ERC20_Burnable_mock.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "6: )",
      "8: signer = MockSigner(123456789987654321)",
      "10: # testing vars",
      "",
      "[Removed Lines]",
      "4:     MockSigner, to_uint, add_uint, sub_uint, str_to_felt, ZERO_ADDRESS, INVALID_UINT256,",
      "5:     get_contract_class, cached_contract, assert_revert, assert_event_emitted,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     to_uint, add_uint, sub_uint, str_to_felt, ZERO_ADDRESS, INVALID_UINT256,",
      "6:     get_contract_class, cached_contract, assert_revert, assert_event_emitted",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20_Mintable.py||tests/token/erc20/test_ERC20_Mintable.py": [
      "File: tests/token/erc20/test_ERC20_Mintable.py -> tests/token/erc20/test_ERC20_Mintable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     MAX_UINT256, ZERO_ADDRESS, INVALID_UINT256, get_contract_class,",
      "6:     cached_contract, assert_revert, assert_event_emitted",
      "7: )",
      "9: signer = MockSigner(123456789987654321)",
      "11: # testing vars",
      "",
      "[Removed Lines]",
      "4:     MockSigner, to_uint, add_uint, sub_uint, str_to_felt,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     to_uint, add_uint, sub_uint, str_to_felt,",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py": [
      "File: tests/token/erc20/test_ERC20_Pausable.py -> tests/token/erc20/test_ERC20_Pausable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     get_contract_class, cached_contract",
      "6: )",
      "8: signer = MockSigner(123456789987654321)",
      "10: # testing vars",
      "",
      "[Removed Lines]",
      "4:     MockSigner, TRUE, FALSE, to_uint, str_to_felt, assert_revert,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     TRUE, FALSE, to_uint, str_to_felt, assert_revert,",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py": [
      "File: tests/token/erc20/test_ERC20_Upgradeable.py -> tests/token/erc20/test_ERC20_Upgradeable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     get_contract_class, cached_contract",
      "6: )",
      "9: signer = MockSigner(123456789987654321)",
      "11: USER = 999",
      "",
      "[Removed Lines]",
      "4:     MockSigner, to_uint, sub_uint, str_to_felt, assert_revert,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     to_uint, sub_uint, str_to_felt, assert_revert,",
      "",
      "---------------"
    ],
    "tests/token/erc721/test_ERC721_Mintable_Burnable.py||tests/token/erc721/test_ERC721_Mintable_Burnable.py": [
      "File: tests/token/erc721/test_ERC721_Mintable_Burnable.py -> tests/token/erc721/test_ERC721_Mintable_Burnable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_event_emitted, get_contract_class, cached_contract, to_uint, sub_uint, add_uint",
      "6: )",
      "",
      "[Removed Lines]",
      "4:     MockSigner, str_to_felt, ZERO_ADDRESS, TRUE, FALSE, assert_revert, INVALID_UINT256,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     str_to_felt, ZERO_ADDRESS, TRUE, FALSE, assert_revert, INVALID_UINT256,",
      "",
      "---------------"
    ],
    "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py": [
      "File: tests/token/erc721/test_ERC721_Mintable_Pausable.py -> tests/token/erc721/test_ERC721_Mintable_Pausable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_revert, to_uint",
      "6: )",
      "",
      "[Removed Lines]",
      "4:     MockSigner, str_to_felt, TRUE, FALSE, get_contract_class, cached_contract,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     str_to_felt, TRUE, FALSE, get_contract_class, cached_contract,",
      "",
      "---------------"
    ],
    "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py": [
      "File: tests/token/erc721/test_ERC721_SafeMintable_mock.py -> tests/token/erc721/test_ERC721_SafeMintable_mock.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_event_emitted, get_contract_class, cached_contract, to_uint",
      "6: )",
      "",
      "[Removed Lines]",
      "4:     MockSigner, str_to_felt, ZERO_ADDRESS, INVALID_UINT256, assert_revert,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     str_to_felt, ZERO_ADDRESS, INVALID_UINT256, assert_revert,",
      "",
      "---------------"
    ],
    "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py||tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py": [
      "File: tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py -> tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     TRUE, assert_revert, to_uint, sub_uint, add_uint",
      "6: )",
      "",
      "[Removed Lines]",
      "4:     MockSigner, str_to_felt, MAX_UINT256, get_contract_class, cached_contract,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     str_to_felt, MAX_UINT256, get_contract_class, cached_contract,",
      "",
      "---------------"
    ],
    "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py": [
      "File: tests/upgrades/test_Proxy.py -> tests/upgrades/test_Proxy.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_revert,",
      "6:     get_contract_class,",
      "7:     cached_contract,",
      "",
      "[Removed Lines]",
      "4:     MockSigner,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "",
      "---------------"
    ],
    "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py": [
      "File: tests/upgrades/test_upgrades.py -> tests/upgrades/test_upgrades.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_revert,",
      "6:     assert_revert_entry_point,",
      "7:     assert_event_emitted,",
      "",
      "[Removed Lines]",
      "4:     MockSigner,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "",
      "---------------"
    ],
    "tests/utils.py||tests/utils.py": [
      "File: tests/utils.py -> tests/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from starkware.starkware_utils.error_handling import StarkException",
      "8: from starkware.starknet.testing.starknet import StarknetContract",
      "9: from starkware.starknet.business_logic.execution.objects import Event",
      "13: MAX_UINT256 = (2**128 - 1, 2**128 - 1)",
      "",
      "[Removed Lines]",
      "10: from nile.signer import Signer",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "130:         deploy_execution_info=deployed.deploy_execution_info",
      "131:     )",
      "132:     return contract",
      "",
      "[Removed Lines]",
      "135: class MockSigner():",
      "136:     \"\"\"",
      "137:     Utility for sending signed transactions to an Account on Starknet.",
      "139:     Parameters",
      "140:     ----------",
      "142:     private_key : int",
      "144:     Examples",
      "145:     ---------",
      "146:     Constructing a MockSigner object",
      "148:     >>> signer = MockSigner(1234)",
      "150:     Sending a transaction",
      "152:     >>> await signer.send_transaction(",
      "153:             account, contract_address, 'contract_method', [arg_1]",
      "154:         )",
      "156:     Sending multiple transactions",
      "158:     >>> await signer.send_transaction(",
      "159:             account, [",
      "160:                 (contract_address, 'contract_method', [arg_1]),",
      "161:                 (contract_address, 'another_method', [arg_1, arg_2])",
      "162:             ]",
      "163:         )",
      "165:     \"\"\"",
      "166:     def __init__(self, private_key):",
      "167:         self.signer = Signer(private_key)",
      "168:         self.public_key = self.signer.public_key",
      "170:     async def send_transaction(self, account, to, selector_name, calldata, nonce=None, max_fee=0):",
      "171:         return await self.send_transactions(account, [(to, selector_name, calldata)], nonce, max_fee)",
      "173:     async def send_transactions(self, account, calls, nonce=None, max_fee=0):",
      "174:         if nonce is None:",
      "175:             execution_info = await account.get_nonce().call()",
      "176:             nonce, = execution_info.result",
      "178:         build_calls = []",
      "179:         for call in calls:",
      "180:             build_call = list(call)",
      "181:             build_call[0] = hex(build_call[0])",
      "182:             build_calls.append(build_call)",
      "184:         (call_array, calldata, sig_r, sig_s) = self.signer.sign_transaction(hex(account.contract_address), build_calls, nonce, max_fee)",
      "185:         return await account.__execute__(call_array, calldata, nonce).invoke(signature=[sig_r, sig_s])",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5b616cf38dad0ee3d04939e769d9a1e7ded2c4b1",
      "candidate_info": {
        "commit_hash": "5b616cf38dad0ee3d04939e769d9a1e7ded2c4b1",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/5b616cf38dad0ee3d04939e769d9a1e7ded2c4b1",
        "files": [
          "README.md",
          "docs/Utilities.md",
          "tests/access/test_AccessControl.py",
          "tests/access/test_Ownable.py",
          "tests/account/test_Account.py",
          "tests/account/test_AddressRegistry.py",
          "tests/account/test_EthAccount.py",
          "tests/introspection/test_ERC165.py",
          "tests/security/test_initializable.py",
          "tests/security/test_pausable.py",
          "tests/security/test_reentrancy.py",
          "tests/security/test_safemath.py",
          "tests/token/erc20/test_ERC20.py",
          "tests/token/erc20/test_ERC20_Burnable_mock.py",
          "tests/token/erc20/test_ERC20_Mintable.py",
          "tests/token/erc20/test_ERC20_Pausable.py",
          "tests/token/erc20/test_ERC20_Upgradeable.py",
          "tests/token/erc721/test_ERC721_Mintable_Burnable.py",
          "tests/token/erc721/test_ERC721_Mintable_Pausable.py",
          "tests/token/erc721/test_ERC721_SafeMintable_mock.py",
          "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
          "tests/upgrades/test_Proxy.py",
          "tests/upgrades/test_upgrades.py",
          "tests/utils.py"
        ],
        "message": "Simplify paths for fetching contract classes in tests (#377)\n\n* simplify contract path\n\n* update snippets\n\n* add is_path option\n\n* change param name\n\n* fix path\n\n* remove comment\n\n* Update utils.py\n\n* Update docs/Utilities.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* remove unused signer\n\nCo-authored-by: JulissaDantes <julissadcj@gmail.com>\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>",
        "before_after_code_files": [
          "tests/access/test_AccessControl.py||tests/access/test_AccessControl.py",
          "tests/access/test_Ownable.py||tests/access/test_Ownable.py",
          "tests/account/test_Account.py||tests/account/test_Account.py",
          "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py",
          "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
          "tests/introspection/test_ERC165.py||tests/introspection/test_ERC165.py",
          "tests/security/test_initializable.py||tests/security/test_initializable.py",
          "tests/security/test_pausable.py||tests/security/test_pausable.py",
          "tests/security/test_reentrancy.py||tests/security/test_reentrancy.py",
          "tests/security/test_safemath.py||tests/security/test_safemath.py",
          "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py",
          "tests/token/erc20/test_ERC20_Burnable_mock.py||tests/token/erc20/test_ERC20_Burnable_mock.py",
          "tests/token/erc20/test_ERC20_Mintable.py||tests/token/erc20/test_ERC20_Mintable.py",
          "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py",
          "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py",
          "tests/token/erc721/test_ERC721_Mintable_Burnable.py||tests/token/erc721/test_ERC721_Mintable_Burnable.py",
          "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py",
          "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py",
          "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py||tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
          "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
          "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py",
          "tests/utils.py||tests/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/access/test_Ownable.py||tests/access/test_Ownable.py",
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
            "tests/security/test_pausable.py||tests/security/test_pausable.py",
            "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py",
            "tests/token/erc20/test_ERC20_Burnable_mock.py||tests/token/erc20/test_ERC20_Burnable_mock.py",
            "tests/token/erc20/test_ERC20_Mintable.py||tests/token/erc20/test_ERC20_Mintable.py",
            "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py",
            "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py",
            "tests/token/erc721/test_ERC721_Mintable_Burnable.py||tests/token/erc721/test_ERC721_Mintable_Burnable.py",
            "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py",
            "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py",
            "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py||tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
            "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
            "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py",
            "tests/utils.py||tests/utils.py"
          ],
          "candidate": [
            "tests/access/test_Ownable.py||tests/access/test_Ownable.py",
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
            "tests/security/test_pausable.py||tests/security/test_pausable.py",
            "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py",
            "tests/token/erc20/test_ERC20_Burnable_mock.py||tests/token/erc20/test_ERC20_Burnable_mock.py",
            "tests/token/erc20/test_ERC20_Mintable.py||tests/token/erc20/test_ERC20_Mintable.py",
            "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py",
            "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py",
            "tests/token/erc721/test_ERC721_Mintable_Burnable.py||tests/token/erc721/test_ERC721_Mintable_Burnable.py",
            "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py",
            "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py",
            "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py||tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
            "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
            "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py",
            "tests/utils.py||tests/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/access/test_AccessControl.py||tests/access/test_AccessControl.py": [
          "File: tests/access/test_AccessControl.py -> tests/access/test_AccessControl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     return {",
          "21:         Path(key).stem: get_contract_class(key)",
          "22:         for key in [",
          "25:         ]",
          "26:     }",
          "",
          "[Removed Lines]",
          "23:             'openzeppelin/account/Account.cairo',",
          "24:             'tests/mocks/AccessControl.cairo',",
          "",
          "[Added Lines]",
          "23:             'Account',",
          "24:             'AccessControl',",
          "",
          "---------------"
        ],
        "tests/access/test_Ownable.py||tests/access/test_Ownable.py": [
          "File: tests/access/test_Ownable.py -> tests/access/test_Ownable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: @pytest.fixture(scope='module')",
          "16: def contract_classes():",
          "17:     return (",
          "20:     )",
          "",
          "[Removed Lines]",
          "18:         get_contract_class('openzeppelin/account/Account.cairo'),",
          "19:         get_contract_class('tests/mocks/Ownable.cairo')",
          "",
          "[Added Lines]",
          "18:         get_contract_class('Account'),",
          "19:         get_contract_class('Ownable')",
          "",
          "---------------"
        ],
        "tests/account/test_Account.py||tests/account/test_Account.py": [
          "File: tests/account/test_Account.py -> tests/account/test_Account.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: @pytest.fixture(scope='module')",
          "14: def contract_classes():",
          "19:     return account_cls, init_cls, attacker_cls",
          "",
          "[Removed Lines]",
          "15:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "16:     init_cls = get_contract_class(\"tests/mocks/Initializable.cairo\")",
          "17:     attacker_cls = get_contract_class(\"tests/mocks/account_reentrancy.cairo\")",
          "",
          "[Added Lines]",
          "15:     account_cls = get_contract_class('Account')",
          "16:     init_cls = get_contract_class(\"Initializable\")",
          "17:     attacker_cls = get_contract_class(\"account_reentrancy\")",
          "",
          "---------------"
        ],
        "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py": [
          "File: tests/account/test_AddressRegistry.py -> tests/account/test_AddressRegistry.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: @pytest.fixture(scope='module')",
          "13: async def registry_factory():",
          "14:     # contract classes",
          "18:     # deployments",
          "19:     starknet = await Starknet.empty()",
          "",
          "[Removed Lines]",
          "15:     registry_cls = get_contract_class(\"openzeppelin/account/AddressRegistry.cairo\")",
          "16:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "",
          "[Added Lines]",
          "15:     registry_cls = get_contract_class(\"AddressRegistry\")",
          "16:     account_cls = get_contract_class('Account')",
          "",
          "---------------"
        ],
        "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py": [
          "File: tests/account/test_EthAccount.py -> tests/account/test_EthAccount.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: @pytest.fixture(scope='module')",
          "16: def contract_defs():",
          "21:     return account_cls, init_cls, attacker_cls",
          "",
          "[Removed Lines]",
          "17:     account_cls = get_contract_class('openzeppelin/account/EthAccount.cairo')",
          "18:     init_cls = get_contract_class(\"tests/mocks/Initializable.cairo\")",
          "19:     attacker_cls = get_contract_class(\"tests/mocks/account_reentrancy.cairo\")",
          "",
          "[Added Lines]",
          "17:     account_cls = get_contract_class('EthAccount')",
          "18:     init_cls = get_contract_class(\"Initializable\")",
          "19:     attacker_cls = get_contract_class(\"account_reentrancy\")",
          "",
          "---------------"
        ],
        "tests/introspection/test_ERC165.py||tests/introspection/test_ERC165.py": [
          "File: tests/introspection/test_ERC165.py -> tests/introspection/test_ERC165.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: @pytest.fixture(scope='module')",
          "19: async def erc165_factory():",
          "20:     # class",
          "23:     # deployment",
          "24:     starknet = await Starknet.empty()",
          "",
          "[Removed Lines]",
          "21:     erc165_cls = get_contract_class(\"tests/mocks/ERC165.cairo\")",
          "",
          "[Added Lines]",
          "21:     erc165_cls = get_contract_class(\"tests/mocks/ERC165.cairo\", is_path=True)",
          "",
          "---------------"
        ],
        "tests/security/test_initializable.py||tests/security/test_initializable.py": [
          "File: tests/security/test_initializable.py -> tests/security/test_initializable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "6: @pytest.mark.asyncio",
          "7: async def test_initializer():",
          "8:     starknet = await Starknet.empty()",
          "9:     initializable = await starknet.deploy(",
          "11:     )",
          "12:     expected = await initializable.initialized().call()",
          "13:     assert expected.result == (FALSE,)",
          "",
          "[Removed Lines]",
          "3: from utils import TRUE, FALSE, assert_revert, contract_path",
          "10:         contract_path(\"tests/mocks/Initializable.cairo\")",
          "",
          "[Added Lines]",
          "3: from utils import TRUE, FALSE, assert_revert, get_contract_class",
          "10:         contract_class=get_contract_class(\"Initializable\")",
          "",
          "---------------"
        ],
        "tests/security/test_pausable.py||tests/security/test_pausable.py": [
          "File: tests/security/test_pausable.py -> tests/security/test_pausable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: @pytest.fixture",
          "13: async def pausable_factory():",
          "14:     # class",
          "18:     starknet = await Starknet.empty()",
          "19:     pausable = await starknet.deploy(",
          "",
          "[Removed Lines]",
          "15:     pausable_cls = get_contract_class(\"tests/mocks/Pausable.cairo\")",
          "16:     account_cls = get_contract_class(\"openzeppelin/account/Account.cairo\")",
          "",
          "[Added Lines]",
          "15:     pausable_cls = get_contract_class(\"Pausable\")",
          "16:     account_cls = get_contract_class(\"Account\")",
          "",
          "---------------"
        ],
        "tests/security/test_reentrancy.py||tests/security/test_reentrancy.py": [
          "File: tests/security/test_reentrancy.py -> tests/security/test_reentrancy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "3: from utils import (",
          "5: )",
          "7: INITIAL_COUNTER = 0",
          "",
          "[Removed Lines]",
          "4:     assert_revert",
          "",
          "[Added Lines]",
          "4:     assert_revert, get_contract_class",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: async def reentrancy_mock():",
          "12:     starknet = await Starknet.empty()",
          "13:     contract = await starknet.deploy(",
          "15:         constructor_calldata=[INITIAL_COUNTER]",
          "16:     )",
          "",
          "[Removed Lines]",
          "14:         \"tests/mocks/reentrancy_mock.cairo\",",
          "",
          "[Added Lines]",
          "14:         contract_class=get_contract_class(\"reentrancy_mock\"),",
          "",
          "---------------"
        ],
        "tests/security/test_safemath.py||tests/security/test_safemath.py": [
          "File: tests/security/test_safemath.py -> tests/security/test_safemath.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "3: from utils import (",
          "4:     MAX_UINT256, assert_revert, add_uint, sub_uint,",
          "6: )",
          "",
          "[Removed Lines]",
          "5:     mul_uint, div_rem_uint, to_uint, contract_path",
          "",
          "[Added Lines]",
          "5:     mul_uint, div_rem_uint, to_uint, contract_path,",
          "6:     get_contract_class",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: async def safemath_mock():",
          "11:     starknet = await Starknet.empty()",
          "12:     safemath = await starknet.deploy(",
          "14:     )",
          "16:     return safemath",
          "",
          "[Removed Lines]",
          "13:         contract_path(\"tests/mocks/safemath_mock.cairo\")",
          "",
          "[Added Lines]",
          "14:         contract_class=get_contract_class(\"safemath_mock\")",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py": [
          "File: tests/token/erc20/test_ERC20.py -> tests/token/erc20/test_ERC20.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: @pytest.fixture(scope='module')",
          "25: def contract_classes():",
          "30:     return account_cls, erc20_cls",
          "",
          "[Removed Lines]",
          "26:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "27:     erc20_cls = get_contract_class(",
          "28:         'openzeppelin/token/erc20/ERC20.cairo')",
          "",
          "[Added Lines]",
          "26:     account_cls = get_contract_class('Account')",
          "27:     erc20_cls = get_contract_class('ERC20')",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20_Burnable_mock.py||tests/token/erc20/test_ERC20_Burnable_mock.py": [
          "File: tests/token/erc20/test_ERC20_Burnable_mock.py -> tests/token/erc20/test_ERC20_Burnable_mock.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: @pytest.fixture(scope='module')",
          "22: def contract_classes():",
          "27:     return account_cls, erc20_cls",
          "",
          "[Removed Lines]",
          "23:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "24:     erc20_cls = get_contract_class(",
          "25:         'tests/mocks/ERC20_Burnable_mock.cairo')",
          "",
          "[Added Lines]",
          "23:     account_cls = get_contract_class('Account')",
          "24:     erc20_cls = get_contract_class('ERC20_Burnable_mock')",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20_Mintable.py||tests/token/erc20/test_ERC20_Mintable.py": [
          "File: tests/token/erc20/test_ERC20_Mintable.py -> tests/token/erc20/test_ERC20_Mintable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: @pytest.fixture(scope='module')",
          "24: def contract_classes():",
          "29:     return account_cls, erc20_cls",
          "",
          "[Removed Lines]",
          "25:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "26:     erc20_cls = get_contract_class(",
          "27:         'openzeppelin/token/erc20/ERC20_Mintable.cairo')",
          "",
          "[Added Lines]",
          "25:     account_cls = get_contract_class('Account')",
          "26:     erc20_cls = get_contract_class('ERC20_Mintable')",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py": [
          "File: tests/token/erc20/test_ERC20_Pausable.py -> tests/token/erc20/test_ERC20_Pausable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: @pytest.fixture(scope='module')",
          "21: def contract_classes():",
          "26:     return account_cls, erc20_cls",
          "",
          "[Removed Lines]",
          "22:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "23:     erc20_cls = get_contract_class(",
          "24:         'openzeppelin/token/erc20/ERC20_Pausable.cairo')",
          "",
          "[Added Lines]",
          "22:     account_cls = get_contract_class('Account')",
          "23:     erc20_cls = get_contract_class('ERC20_Pausable')",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py": [
          "File: tests/token/erc20/test_ERC20_Upgradeable.py -> tests/token/erc20/test_ERC20_Upgradeable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: @pytest.fixture(scope='module')",
          "22: def contract_classes():",
          "28:     return account_cls, token_cls, proxy_cls",
          "",
          "[Removed Lines]",
          "23:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "24:     token_cls = get_contract_class(",
          "25:         'openzeppelin/token/erc20/ERC20_Upgradeable.cairo')",
          "26:     proxy_cls = get_contract_class('openzeppelin/upgrades/Proxy.cairo')",
          "",
          "[Added Lines]",
          "23:     account_cls = get_contract_class('Account')",
          "24:     token_cls = get_contract_class('ERC20_Upgradeable')",
          "25:     proxy_cls = get_contract_class('Proxy')",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721_Mintable_Burnable.py||tests/token/erc721/test_ERC721_Mintable_Burnable.py": [
          "File: tests/token/erc721/test_ERC721_Mintable_Burnable.py -> tests/token/erc721/test_ERC721_Mintable_Burnable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: @pytest.fixture(scope='module')",
          "34: def contract_classes():",
          "43:     return account_cls, erc721_cls, erc721_holder_cls, unsupported_cls",
          "",
          "[Removed Lines]",
          "35:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "36:     erc721_cls = get_contract_class(",
          "37:         'openzeppelin/token/erc721/ERC721_Mintable_Burnable.cairo')",
          "38:     erc721_holder_cls = get_contract_class(",
          "39:         'openzeppelin/token/erc721/utils/ERC721_Holder.cairo')",
          "40:     unsupported_cls = get_contract_class(",
          "41:         'tests/mocks/Initializable.cairo')",
          "",
          "[Added Lines]",
          "35:     account_cls = get_contract_class('Account')",
          "36:     erc721_cls = get_contract_class('ERC721_Mintable_Burnable')",
          "37:     erc721_holder_cls = get_contract_class('ERC721_Holder')",
          "38:     unsupported_cls = get_contract_class('Initializable')",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py": [
          "File: tests/token/erc721/test_ERC721_Mintable_Pausable.py -> tests/token/erc721/test_ERC721_Mintable_Pausable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: @pytest.fixture(scope='module')",
          "20: def contract_classes():",
          "27:     return account_cls, erc721_cls, erc721_holder_cls",
          "",
          "[Removed Lines]",
          "21:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "22:     erc721_cls = get_contract_class(",
          "23:         'openzeppelin/token/erc721/ERC721_Mintable_Pausable.cairo')",
          "24:     erc721_holder_cls = get_contract_class(",
          "25:         'openzeppelin/token/erc721/utils/ERC721_Holder.cairo')",
          "",
          "[Added Lines]",
          "21:     account_cls = get_contract_class('Account')",
          "22:     erc721_cls = get_contract_class('ERC721_Mintable_Pausable')",
          "23:     erc721_holder_cls = get_contract_class('ERC721_Holder')",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py": [
          "File: tests/token/erc721/test_ERC721_SafeMintable_mock.py -> tests/token/erc721/test_ERC721_SafeMintable_mock.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: @pytest.fixture(scope='module')",
          "19: def contract_classes():",
          "27:     return account_cls, erc721_cls, erc721_holder_cls, unsupported_cls",
          "",
          "[Removed Lines]",
          "20:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "21:     erc721_cls = get_contract_class('tests/mocks/ERC721_SafeMintable_mock.cairo')",
          "22:     erc721_holder_cls = get_contract_class(",
          "23:         'openzeppelin/token/erc721/utils/ERC721_Holder.cairo')",
          "24:     unsupported_cls = get_contract_class(",
          "25:         'tests/mocks/Initializable.cairo')",
          "",
          "[Added Lines]",
          "20:     account_cls = get_contract_class('Account')",
          "21:     erc721_cls = get_contract_class('ERC721_SafeMintable_mock')",
          "22:     erc721_holder_cls = get_contract_class('ERC721_Holder')",
          "23:     unsupported_cls = get_contract_class('Initializable')",
          "",
          "---------------"
        ],
        "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py||tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py": [
          "File: tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py -> tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: @pytest.fixture(scope='module')",
          "27: def contract_classes():",
          "32:     return account_cls, erc721_cls",
          "",
          "[Removed Lines]",
          "28:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "29:     erc721_cls = get_contract_class(",
          "30:         'openzeppelin/token/erc721_enumerable/ERC721_Enumerable_Mintable_Burnable.cairo')",
          "",
          "[Added Lines]",
          "28:     account_cls = get_contract_class('Account')",
          "29:     erc721_cls = get_contract_class('ERC721_Enumerable_Mintable_Burnable')",
          "",
          "---------------"
        ],
        "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py": [
          "File: tests/upgrades/test_Proxy.py -> tests/upgrades/test_Proxy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: @pytest.fixture(scope='module')",
          "19: def contract_classes():",
          "26:     return account_cls, implementation_cls, proxy_cls",
          "",
          "[Removed Lines]",
          "20:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "21:     implementation_cls = get_contract_class(",
          "22:         'tests/mocks/proxiable_implementation.cairo'",
          "23:     )",
          "24:     proxy_cls = get_contract_class('openzeppelin/upgrades/Proxy.cairo')",
          "",
          "[Added Lines]",
          "20:     account_cls = get_contract_class('Account')",
          "21:     implementation_cls = get_contract_class('proxiable_implementation')",
          "22:     proxy_cls = get_contract_class('Proxy')",
          "",
          "---------------"
        ],
        "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py": [
          "File: tests/upgrades/test_upgrades.py -> tests/upgrades/test_upgrades.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: @pytest.fixture(scope='module')",
          "21: def contract_classes():",
          "27:     return account_cls, v1_cls, v2_cls, proxy_cls",
          "",
          "[Removed Lines]",
          "22:     account_cls = get_contract_class('openzeppelin/account/Account.cairo')",
          "23:     v1_cls = get_contract_class('tests/mocks/upgrades_v1_mock.cairo')",
          "24:     v2_cls = get_contract_class('tests/mocks/upgrades_v2_mock.cairo')",
          "25:     proxy_cls = get_contract_class('openzeppelin/upgrades/Proxy.cairo')",
          "",
          "[Added Lines]",
          "22:     account_cls = get_contract_class('Account')",
          "23:     v1_cls = get_contract_class('upgrades_v1_mock')",
          "24:     v2_cls = get_contract_class('upgrades_v2_mock')",
          "25:     proxy_cls = get_contract_class('Proxy')",
          "",
          "---------------"
        ],
        "tests/utils.py||tests/utils.py": [
          "File: tests/utils.py -> tests/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from pathlib import Path",
          "4: import math",
          "5: from starkware.starknet.public.abi import get_selector_from_name",
          "6: from starkware.starknet.compiler.compile import compile_starknet_files",
          "7: from starkware.starkware_utils.error_handling import StarkException",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import os",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     ) in tx_exec_info.raw_events",
          "116:     contract_class = compile_starknet_files(",
          "117:         files=[path],",
          "118:         debug_info=True",
          "",
          "[Removed Lines]",
          "113: def get_contract_class(path):",
          "114:     \"\"\"Return the contract class from the contract path\"\"\"",
          "115:     path = contract_path(path)",
          "",
          "[Added Lines]",
          "114: def _get_path_from_name(name):",
          "115:     \"\"\"Return the contract path by contract name.\"\"\"",
          "116:     dirs = [\"src\", \"tests/mocks\"]",
          "117:     for dir in dirs:",
          "118:         for (dirpath, _, filenames) in os.walk(dir):",
          "119:             for file in filenames:",
          "120:                 if file == f\"{name}.cairo\":",
          "121:                     return os.path.join(dirpath, file)",
          "123:     raise FileNotFoundError(f\"Cannot find '{name}'.\")",
          "126: def get_contract_class(contract, is_path=False):",
          "127:     \"\"\"Return the contract class from the contract name or path\"\"\"",
          "128:     if is_path:",
          "129:         path = contract_path(contract)",
          "130:     else:",
          "131:         path = _get_path_from_name(contract)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47829d1e761f70575f8ca45469b857723fa59d34",
      "candidate_info": {
        "commit_hash": "47829d1e761f70575f8ca45469b857723fa59d34",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/47829d1e761f70575f8ca45469b857723fa59d34",
        "files": [
          "tests/mocks/ERC721_SafeMintable_mock.cairo",
          "tests/token/erc721/test_ERC721_SafeMintable_mock.py",
          "tests/utils.py"
        ],
        "message": "Add ERC721_SafeMintable mock (#175)\n\n* add mock contract with exposed safeMint\n\n* add safeMintable tests with memoization\n\n* add not-owner test\n\n* refactor assert_revert to be more generalized\n\n* update branch, fix conflicts\n\n* move paths to fixture",
        "before_after_code_files": [
          "tests/mocks/ERC721_SafeMintable_mock.cairo||tests/mocks/ERC721_SafeMintable_mock.cairo",
          "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py",
          "tests/utils.py||tests/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py",
            "tests/utils.py||tests/utils.py"
          ],
          "candidate": [
            "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py",
            "tests/utils.py||tests/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/mocks/ERC721_SafeMintable_mock.cairo||tests/mocks/ERC721_SafeMintable_mock.cairo": [
          "File: tests/mocks/ERC721_SafeMintable_mock.cairo -> tests/mocks/ERC721_SafeMintable_mock.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: %lang starknet",
          "3: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin",
          "4: from starkware.cairo.common.uint256 import Uint256",
          "6: from openzeppelin.token.erc721.library import (",
          "7:     ERC721_name,",
          "8:     ERC721_symbol,",
          "9:     ERC721_balanceOf,",
          "10:     ERC721_ownerOf,",
          "11:     ERC721_getApproved,",
          "12:     ERC721_isApprovedForAll,",
          "13:     ERC721_tokenURI,",
          "15:     ERC721_initializer,",
          "16:     ERC721_approve,",
          "17:     ERC721_setApprovalForAll,",
          "18:     ERC721_transferFrom,",
          "19:     ERC721_safeTransferFrom,",
          "20:     ERC721_mint,",
          "21:     ERC721_safeMint,",
          "22:     ERC721_setTokenURI",
          "23: )",
          "25: from openzeppelin.introspection.ERC165 import ERC165_supports_interface",
          "27: from openzeppelin.access.ownable import (",
          "28:     Ownable_initializer,",
          "29:     Ownable_only_owner",
          "30: )",
          "32: #",
          "33: # Constructor",
          "34: #",
          "36: @constructor",
          "37: func constructor{",
          "38:         syscall_ptr : felt*,",
          "39:         pedersen_ptr : HashBuiltin*,",
          "40:         range_check_ptr",
          "41:     }(",
          "42:         name: felt,",
          "43:         symbol: felt,",
          "44:         owner: felt",
          "45:     ):",
          "46:     ERC721_initializer(name, symbol)",
          "47:     Ownable_initializer(owner)",
          "48:     return ()",
          "49: end",
          "51: #",
          "52: # Getters",
          "53: #",
          "55: @view",
          "56: func supportsInterface{",
          "57:         syscall_ptr : felt*,",
          "58:         pedersen_ptr : HashBuiltin*,",
          "59:         range_check_ptr",
          "60:     }(interfaceId: felt) -> (success: felt):",
          "61:     let (success) = ERC165_supports_interface(interfaceId)",
          "62:     return (success)",
          "63: end",
          "65: @view",
          "66: func name{",
          "67:         syscall_ptr : felt*,",
          "68:         pedersen_ptr : HashBuiltin*,",
          "69:         range_check_ptr",
          "70:     }() -> (name: felt):",
          "71:     let (name) = ERC721_name()",
          "72:     return (name)",
          "73: end",
          "75: @view",
          "76: func symbol{",
          "77:         syscall_ptr : felt*,",
          "78:         pedersen_ptr : HashBuiltin*,",
          "79:         range_check_ptr",
          "80:     }() -> (symbol: felt):",
          "81:     let (symbol) = ERC721_symbol()",
          "82:     return (symbol)",
          "83: end",
          "85: @view",
          "86: func balanceOf{",
          "87:         syscall_ptr : felt*,",
          "88:         pedersen_ptr : HashBuiltin*,",
          "89:         range_check_ptr",
          "90:     }(owner: felt) -> (balance: Uint256):",
          "91:     let (balance: Uint256) = ERC721_balanceOf(owner)",
          "92:     return (balance)",
          "93: end",
          "95: @view",
          "96: func ownerOf{",
          "97:         syscall_ptr : felt*,",
          "98:         pedersen_ptr : HashBuiltin*,",
          "99:         range_check_ptr",
          "100:     }(tokenId: Uint256) -> (owner: felt):",
          "101:     let (owner: felt) = ERC721_ownerOf(tokenId)",
          "102:     return (owner)",
          "103: end",
          "105: @view",
          "106: func getApproved{",
          "107:         syscall_ptr : felt*,",
          "108:         pedersen_ptr : HashBuiltin*,",
          "109:         range_check_ptr",
          "110:     }(tokenId: Uint256) -> (approved: felt):",
          "111:     let (approved: felt) = ERC721_getApproved(tokenId)",
          "112:     return (approved)",
          "113: end",
          "115: @view",
          "116: func isApprovedForAll{",
          "117:         syscall_ptr : felt*,",
          "118:         pedersen_ptr : HashBuiltin*,",
          "119:         range_check_ptr",
          "120:     }(owner: felt, operator: felt) -> (isApproved: felt):",
          "121:     let (isApproved: felt) = ERC721_isApprovedForAll(owner, operator)",
          "122:     return (isApproved)",
          "123: end",
          "125: @view",
          "126: func tokenURI{",
          "127:         syscall_ptr: felt*,",
          "128:         pedersen_ptr: HashBuiltin*,",
          "129:         range_check_ptr",
          "130:     }(tokenId: Uint256) -> (tokenURI: felt):",
          "131:     let (tokenURI: felt) = ERC721_tokenURI(tokenId)",
          "132:     return (tokenURI)",
          "133: end",
          "135: #",
          "136: # Externals",
          "137: #",
          "139: @external",
          "140: func approve{",
          "141:         pedersen_ptr: HashBuiltin*,",
          "142:         syscall_ptr: felt*,",
          "143:         range_check_ptr",
          "144:     }(to: felt, tokenId: Uint256):",
          "145:     ERC721_approve(to, tokenId)",
          "146:     return ()",
          "147: end",
          "149: @external",
          "150: func setApprovalForAll{",
          "151:         syscall_ptr: felt*,",
          "152:         pedersen_ptr: HashBuiltin*,",
          "153:         range_check_ptr",
          "154:     }(operator: felt, approved: felt):",
          "155:     ERC721_setApprovalForAll(operator, approved)",
          "156:     return ()",
          "157: end",
          "159: @external",
          "160: func transferFrom{",
          "161:         pedersen_ptr: HashBuiltin*,",
          "162:         syscall_ptr: felt*,",
          "163:         range_check_ptr",
          "164:     }(",
          "165:         _from: felt,",
          "166:         to: felt,",
          "167:         tokenId: Uint256",
          "168:     ):",
          "169:     ERC721_transferFrom(_from, to, tokenId)",
          "170:     return ()",
          "171: end",
          "173: @external",
          "174: func safeTransferFrom{",
          "175:         pedersen_ptr: HashBuiltin*,",
          "176:         syscall_ptr: felt*,",
          "177:         range_check_ptr",
          "178:     }(",
          "179:         _from: felt,",
          "180:         to: felt,",
          "181:         tokenId: Uint256,",
          "182:         data_len: felt,",
          "183:         data: felt*",
          "184:     ):",
          "185:     ERC721_safeTransferFrom(_from, to, tokenId, data_len, data)",
          "186:     return ()",
          "187: end",
          "189: @external",
          "190: func mint{",
          "191:         pedersen_ptr: HashBuiltin*,",
          "192:         syscall_ptr: felt*,",
          "193:         range_check_ptr",
          "194:     }(to: felt, tokenId: Uint256):",
          "195:     with_attr error_message(\"ERC721: caller is not the owner\"):",
          "196:         Ownable_only_owner()",
          "197:     end",
          "198:     ERC721_mint(to, tokenId)",
          "199:     return ()",
          "200: end",
          "202: @external",
          "203: func safeMint{",
          "204:         pedersen_ptr: HashBuiltin*,",
          "205:         syscall_ptr: felt*,",
          "206:         range_check_ptr",
          "207:     }(",
          "208:         to: felt,",
          "209:         tokenId: Uint256,",
          "210:         data_len: felt,",
          "211:         data: felt*",
          "212:     ):",
          "213:     with_attr error_message(\"ERC721: caller is not the owner\"):",
          "214:         Ownable_only_owner()",
          "215:     end",
          "216:     ERC721_safeMint(to, tokenId, data_len, data)",
          "217:     return ()",
          "218: end",
          "220: @external",
          "221: func setTokenURI{",
          "222:         pedersen_ptr: HashBuiltin*,",
          "223:         syscall_ptr: felt*,",
          "224:         range_check_ptr",
          "225:     }(tokenId: Uint256, tokenURI: felt):",
          "226:     with_attr error_message(\"ERC721: caller is not the owner\"):",
          "227:         Ownable_only_owner()",
          "228:     end",
          "229:     ERC721_setTokenURI(tokenId, tokenURI)",
          "230:     return ()",
          "231: end",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py": [
          "File: tests/token/erc721/test_ERC721_SafeMintable_mock.py -> tests/token/erc721/test_ERC721_SafeMintable_mock.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import pytest",
          "2: import asyncio",
          "3: from starkware.starknet.testing.starknet import Starknet",
          "4: from utils import (",
          "5:     Signer, str_to_felt, ZERO_ADDRESS, assert_revert,",
          "6:     get_contract_def, cached_contract, to_uint",
          "7: )",
          "9: signer = Signer(123456789987654321)",
          "11: # random token id",
          "12: TOKEN = to_uint(5042)",
          "13: # random data (mimicking bytes in Solidity)",
          "14: DATA = [0x42, 0x89, 0x55]",
          "17: @pytest.fixture(scope='module')",
          "18: def event_loop():",
          "19:     return asyncio.new_event_loop()",
          "22: @pytest.fixture(scope='module')",
          "23: def contract_defs():",
          "24:     account_def = get_contract_def('openzeppelin/account/Account.cairo')",
          "25:     erc721_def = get_contract_def('tests/mocks/ERC721_SafeMintable_mock.cairo')",
          "26:     erc721_holder_def = get_contract_def(",
          "27:         'openzeppelin/token/erc721/utils/ERC721_Holder.cairo')",
          "28:     unsupported_def = get_contract_def(",
          "29:         'openzeppelin/security/initializable.cairo')",
          "31:     return account_def, erc721_def, erc721_holder_def, unsupported_def",
          "34: @pytest.fixture(scope='module')",
          "35: async def erc721_init(contract_defs):",
          "36:     account_def, erc721_def, erc721_holder_def, unsupported_def = contract_defs",
          "37:     starknet = await Starknet.empty()",
          "38:     account1 = await starknet.deploy(",
          "39:         contract_def=account_def,",
          "40:         constructor_calldata=[signer.public_key]",
          "41:     )",
          "42:     account2 = await starknet.deploy(",
          "43:         contract_def=account_def,",
          "44:         constructor_calldata=[signer.public_key]",
          "45:     )",
          "46:     erc721 = await starknet.deploy(",
          "47:         contract_def=erc721_def,",
          "48:         constructor_calldata=[",
          "49:             str_to_felt(\"Non Fungible Token\"),  # name",
          "50:             str_to_felt(\"NFT\"),                 # ticker",
          "51:             account1.contract_address",
          "52:         ]",
          "53:     )",
          "54:     erc721_holder = await starknet.deploy(",
          "55:         contract_def=erc721_holder_def,",
          "56:         constructor_calldata=[]",
          "57:     )",
          "58:     unsupported = await starknet.deploy(",
          "59:         contract_def=unsupported_def,",
          "60:         constructor_calldata=[]",
          "61:     )",
          "62:     return (",
          "63:         starknet.state,",
          "64:         account1,",
          "65:         account2,",
          "66:         erc721,",
          "67:         erc721_holder,",
          "68:         unsupported",
          "69:     )",
          "72: @pytest.fixture",
          "73: def erc721_factory(contract_defs, erc721_init):",
          "74:     account_def, erc721_def, erc721_holder_def, unsupported_def = contract_defs",
          "75:     state, account1, account2, erc721, erc721_holder, unsupported = erc721_init",
          "76:     _state = state.copy()",
          "77:     account1 = cached_contract(_state, account_def, account1)",
          "78:     account2 = cached_contract(_state, account_def, account2)",
          "79:     erc721 = cached_contract(_state, erc721_def, erc721)",
          "80:     erc721_holder = cached_contract(_state, erc721_holder_def, erc721_holder)",
          "81:     unsupported = cached_contract(_state, unsupported_def, unsupported)",
          "83:     return erc721, account1, account2, erc721_holder, unsupported",
          "86: @pytest.mark.asyncio",
          "87: async def test_safeMint_to_erc721_supported_contract(erc721_factory):",
          "88:     erc721, account, _, erc721_holder, _ = erc721_factory",
          "90:     await signer.send_transaction(",
          "91:         account, erc721.contract_address, 'safeMint', [",
          "92:             erc721_holder.contract_address,",
          "94:             len(DATA),",
          "96:         ]",
          "97:     )",
          "99:     # check balance",
          "100:     execution_info = await erc721.balanceOf(erc721_holder.contract_address).call()",
          "101:     assert execution_info.result == (to_uint(1),)",
          "103:     # check owner",
          "104:     execution_info = await erc721.ownerOf(TOKEN).call()",
          "105:     assert execution_info.result == (erc721_holder.contract_address,)",
          "108: @pytest.mark.asyncio",
          "109: async def test_safeMint_to_account(erc721_factory):",
          "110:     erc721, account, recipient, _, _ = erc721_factory",
          "112:     await signer.send_transaction(",
          "113:         account, erc721.contract_address, 'safeMint', [",
          "114:             recipient.contract_address,",
          "116:             len(DATA),",
          "118:         ]",
          "119:     )",
          "121:     # check balance",
          "122:     execution_info = await erc721.balanceOf(recipient.contract_address).call()",
          "123:     assert execution_info.result == (to_uint(1),)",
          "125:     # check owner",
          "126:     execution_info = await erc721.ownerOf(TOKEN).call()",
          "127:     assert execution_info.result == (recipient.contract_address,)",
          "130: @pytest.mark.asyncio",
          "131: async def test_safeMint_to_zero_address(erc721_factory):",
          "132:     erc721, account, _, _, _ = erc721_factory",
          "134:     # to zero address should be rejected",
          "135:     await assert_revert(signer.send_transaction(",
          "136:         account, erc721.contract_address, 'safeMint', [",
          "137:             ZERO_ADDRESS,",
          "139:             len(DATA),",
          "141:         ]",
          "142:     ))",
          "145: @pytest.mark.asyncio",
          "146: async def test_safeMint_from_zero_address(erc721_factory):",
          "147:     erc721, _, _, erc721_holder, _ = erc721_factory",
          "149:     # Caller address is `0` when not using an account contract",
          "150:     await assert_revert(",
          "151:         erc721.safeMint(",
          "152:             erc721_holder.contract_address,",
          "153:             TOKEN,",
          "154:             DATA",
          "155:         ).invoke()",
          "156:     )",
          "159: @pytest.mark.asyncio",
          "160: async def test_safeMint_from_not_owner(erc721_factory):",
          "161:     erc721, _, other, erc721_holder, _ = erc721_factory",
          "163:     await assert_revert(signer.send_transaction(",
          "164:         other, erc721.contract_address, 'safeMint', [",
          "165:             erc721_holder.contract_address,",
          "167:             len(DATA),",
          "169:         ])",
          "170:     )",
          "173: @pytest.mark.asyncio",
          "174: async def test_safeMint_to_unsupported_contract(erc721_factory):",
          "175:     erc721, account, _, _, unsupported = erc721_factory",
          "177:     await assert_revert(signer.send_transaction(",
          "178:         account, erc721.contract_address, 'safeMint', [",
          "179:             unsupported.contract_address,",
          "181:             len(DATA),",
          "183:         ]",
          "184:     ))",
          "",
          "---------------"
        ],
        "tests/utils.py||tests/utils.py": [
          "File: tests/utils.py -> tests/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from starkware.cairo.common.hash_state import compute_hash_on_elements",
          "4: from starkware.crypto.signature.signature import private_to_stark_key, sign",
          "5: from starkware.starknet.definitions.error_codes import StarknetErrorCode",
          "6: from starkware.starkware_utils.error_handling import StarkException",
          "7: from starkware.starknet.business_logic.transaction_execution_objects import Event",
          "10: MAX_UINT256 = (2**128 - 1, 2**128 - 1)",
          "11: ZERO_ADDRESS = 0",
          "",
          "[Removed Lines]",
          "8: from starkware.starknet.public.abi import get_selector_from_name",
          "",
          "[Added Lines]",
          "5: from starkware.starknet.public.abi import get_selector_from_name",
          "6: from starkware.starknet.compiler.compile import compile_starknet_files",
          "9: from starkware.starknet.testing.starknet import StarknetContract",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:         assert False",
          "70:     except StarkException as err:",
          "71:         _, error = err.args",
          "73:         if reverted_with is not None:",
          "74:             assert reverted_with in error['message']",
          "",
          "[Removed Lines]",
          "72:         assert error['code'] == StarknetErrorCode.TRANSACTION_FAILED",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:     ) in tx_exec_info.raw_events",
          "85: class Signer():",
          "86:     \"\"\"",
          "87:     Utility for sending signed transactions to an Account on Starknet.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: def get_contract_def(path):",
          "87:     \"\"\"Returns the contract definition from the contract path\"\"\"",
          "88:     contract_def = compile_starknet_files(",
          "89:         files=[path],",
          "90:         debug_info=True",
          "91:     )",
          "92:     return contract_def",
          "95: def cached_contract(state, definition, deployed):",
          "96:     \"\"\"Returns the cached contract\"\"\"",
          "97:     contract = StarknetContract(",
          "98:         state=state,",
          "99:         abi=definition.abi,",
          "100:         contract_address=deployed.contract_address,",
          "101:         deploy_execution_info=deployed.deploy_execution_info",
          "102:     )",
          "103:     return contract",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eba13e61605671bf323e934740d276f926651535",
      "candidate_info": {
        "commit_hash": "eba13e61605671bf323e934740d276f926651535",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/eba13e61605671bf323e934740d276f926651535",
        "files": [
          "docs/modules/ROOT/pages/accounts.adoc",
          "src/openzeppelin/account/IAccount.cairo",
          "src/openzeppelin/account/presets/Account.cairo",
          "src/openzeppelin/account/presets/EthAccount.cairo",
          "tests/account/test_Account.py",
          "tests/account/test_EthAccount.py",
          "tests/signers.py",
          "tox.ini"
        ],
        "message": "Support Cairo 0.10.1 (#503)\n\n* support validate_deploy\n\n* fix validate_deploy parameters\n\n* add validate_deploy to interface and fix constructors\n\n* abstract signers to BaseSigner\n\n* implement deploy_account in test signer\n\n* fix import\n\n* remove validate_deploy from IAccount\n\n* improve tests\n\n* rollback constructor args\n\n* fix tests\n\n* fix test name\n\n* add EthAccount deployment tests\n\n* require newest nile\n\n* apply review comments\n\n* remove unnecessary dep\n\n* update docs\n\n* Apply suggestions from code review\n\nCo-authored-by: Andrew Fleming <fleming-andrew@protonmail.com>\n\n* improve docs\n\n* fix docs\n\n* bump nile coverage\n\n* fix coverage command\n\n* compile before testing\n\n* rollback config\n\n* increase test coverage\n\n* fix tests\n\n* increase coverage further\n\n* Update docs/modules/ROOT/pages/accounts.adoc\n\nCo-authored-by: Andrew Fleming <fleming-andrew@protonmail.com>\n\n* Update docs/modules/ROOT/pages/accounts.adoc\n\nCo-authored-by: Eric Nordelo <eric.nordelo39@gmail.com>\n\nCo-authored-by: Andrew Fleming <fleming-andrew@protonmail.com>\nCo-authored-by: Eric Nordelo <eric.nordelo39@gmail.com>",
        "before_after_code_files": [
          "src/openzeppelin/account/IAccount.cairo||src/openzeppelin/account/IAccount.cairo",
          "src/openzeppelin/account/presets/Account.cairo||src/openzeppelin/account/presets/Account.cairo",
          "src/openzeppelin/account/presets/EthAccount.cairo||src/openzeppelin/account/presets/EthAccount.cairo",
          "tests/account/test_Account.py||tests/account/test_Account.py",
          "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
          "tests/signers.py||tests/signers.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
            "tests/signers.py||tests/signers.py"
          ],
          "candidate": [
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
            "tests/signers.py||tests/signers.py"
          ]
        }
      },
      "candidate_diff": {
        "src/openzeppelin/account/IAccount.cairo||src/openzeppelin/account/IAccount.cairo": [
          "File: src/openzeppelin/account/IAccount.cairo -> src/openzeppelin/account/IAccount.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     func supportsInterface(interfaceId: felt) -> (success: felt) {",
          "12:     }",
          "15:     }",
          "17:     func __validate__(",
          "19:     ) {",
          "20:     }",
          "",
          "[Removed Lines]",
          "14:     func isValidSignature(hash: felt, signature_len: felt, signature: felt*) -> (isValid: felt) {",
          "18:         call_array_len: felt, call_array: AccountCallArray*, calldata_len: felt, calldata: felt*",
          "",
          "[Added Lines]",
          "14:     func isValidSignature(",
          "15:         hash: felt,",
          "16:         signature_len: felt,",
          "17:         signature: felt*",
          "18:     ) -> (isValid: felt) {",
          "22:         call_array_len: felt,",
          "23:         call_array: AccountCallArray*,",
          "24:         calldata_len: felt,",
          "25:         calldata: felt*",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     }",
          "27:     func __execute__(",
          "30:     }",
          "31: }",
          "",
          "[Removed Lines]",
          "28:         call_array_len: felt, call_array: AccountCallArray*, calldata_len: felt, calldata: felt*",
          "29:     ) -> (response_len: felt, response: felt*) {",
          "",
          "[Added Lines]",
          "35:         call_array_len: felt,",
          "36:         call_array: AccountCallArray*,",
          "37:         calldata_len: felt,",
          "38:         calldata: felt*",
          "39:     ) -> (",
          "40:         response_len: felt,",
          "41:         response: felt*",
          "42:     ) {",
          "",
          "---------------"
        ],
        "src/openzeppelin/account/presets/Account.cairo||src/openzeppelin/account/presets/Account.cairo": [
          "File: src/openzeppelin/account/presets/Account.cairo -> src/openzeppelin/account/presets/Account.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: @constructor",
          "20:     Account.initializer(publicKey);",
          "21:     return ();",
          "22: }",
          "",
          "[Removed Lines]",
          "17: func constructor{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(",
          "18:     publicKey: felt",
          "19: ) {",
          "",
          "[Added Lines]",
          "17: func constructor{",
          "18:     syscall_ptr: felt*,",
          "19:     pedersen_ptr: HashBuiltin*,",
          "20:     range_check_ptr",
          "21: }(publicKey: felt) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: @view",
          "32:     let (publicKey: felt) = Account.get_public_key();",
          "33:     return (publicKey=publicKey);",
          "34: }",
          "36: @view",
          "40:     return Account.supports_interface(interfaceId);",
          "41: }",
          "",
          "[Removed Lines]",
          "29: func getPublicKey{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}() -> (",
          "30:     publicKey: felt",
          "31: ) {",
          "37: func supportsInterface{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(",
          "38:     interfaceId: felt",
          "39: ) -> (success: felt) {",
          "",
          "[Added Lines]",
          "31: func getPublicKey{",
          "32:     syscall_ptr: felt*,",
          "33:     pedersen_ptr: HashBuiltin*,",
          "34:     range_check_ptr",
          "35: } () -> (publicKey: felt) {",
          "41: func supportsInterface{",
          "42:     syscall_ptr: felt*,",
          "43:     pedersen_ptr: HashBuiltin*,",
          "44:     range_check_ptr",
          "45: } (interfaceId: felt) -> (success: felt) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47: @external",
          "51:     Account.set_public_key(newPublicKey);",
          "52:     return ();",
          "53: }",
          "",
          "[Removed Lines]",
          "48: func setPublicKey{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(",
          "49:     newPublicKey: felt",
          "50: ) {",
          "",
          "[Added Lines]",
          "54: func setPublicKey{",
          "55:     syscall_ptr: felt*,",
          "56:     pedersen_ptr: HashBuiltin*,",
          "57:     range_check_ptr",
          "58: } (newPublicKey: felt) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "59: @view",
          "60: func isValidSignature{",
          "63:     let (isValid: felt) = Account.is_valid_signature(hash, signature_len, signature);",
          "64:     return (isValid=isValid);",
          "65: }",
          "67: @external",
          "68: func __validate__{",
          "71:     let (tx_info) = get_tx_info();",
          "72:     Account.is_valid_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature);",
          "73:     return ();",
          "",
          "[Removed Lines]",
          "61:     syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, ecdsa_ptr: SignatureBuiltin*, range_check_ptr",
          "62: }(hash: felt, signature_len: felt, signature: felt*) -> (isValid: felt) {",
          "69:     syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, ecdsa_ptr: SignatureBuiltin*, range_check_ptr",
          "70: }(call_array_len: felt, call_array: AccountCallArray*, calldata_len: felt, calldata: felt*) {",
          "",
          "[Added Lines]",
          "69:     syscall_ptr: felt*,",
          "70:     pedersen_ptr: HashBuiltin*,",
          "71:     ecdsa_ptr: SignatureBuiltin*,",
          "72:     range_check_ptr",
          "73: }(",
          "74:     hash: felt,",
          "75:     signature_len: felt,",
          "76:     signature: felt*",
          "77: ) -> (isValid: felt) {",
          "84:     syscall_ptr: felt*,",
          "85:     pedersen_ptr: HashBuiltin*,",
          "86:     ecdsa_ptr: SignatureBuiltin*,",
          "87:     range_check_ptr",
          "88: }(",
          "89:     call_array_len: felt,",
          "90:     call_array: AccountCallArray*,",
          "91:     calldata_len: felt,",
          "92:     calldata: felt*",
          "93: ) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "76: @external",
          "77: func __validate_declare__{",
          "80:     let (tx_info) = get_tx_info();",
          "81:     Account.is_valid_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature);",
          "82:     return ();",
          "",
          "[Removed Lines]",
          "78:     syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, ecdsa_ptr: SignatureBuiltin*, range_check_ptr",
          "79: }(class_hash: felt) {",
          "",
          "[Added Lines]",
          "101:     syscall_ptr: felt*,",
          "102:     pedersen_ptr: HashBuiltin*,",
          "103:     ecdsa_ptr: SignatureBuiltin*,",
          "104:     range_check_ptr",
          "105: } (class_hash: felt) {",
          "106:     let (tx_info) = get_tx_info();",
          "107:     Account.is_valid_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature);",
          "108:     return ();",
          "109: }",
          "111: @external",
          "112: func __validate_deploy__{",
          "113:     syscall_ptr: felt*,",
          "114:     pedersen_ptr: HashBuiltin*,",
          "115:     ecdsa_ptr: SignatureBuiltin*,",
          "116:     range_check_ptr",
          "117: } (",
          "118:     class_hash: felt,",
          "119:     salt: felt,",
          "120:     publicKey: felt",
          "121: ) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "89:     ecdsa_ptr: SignatureBuiltin*,",
          "90:     bitwise_ptr: BitwiseBuiltin*,",
          "91:     range_check_ptr,",
          "94: ) {",
          "95:     let (response_len, response) = Account.execute(",
          "96:         call_array_len, call_array, calldata_len, calldata",
          "",
          "[Removed Lines]",
          "92: }(call_array_len: felt, call_array: AccountCallArray*, calldata_len: felt, calldata: felt*) -> (",
          "93:     response_len: felt, response: felt*",
          "",
          "[Added Lines]",
          "134: }(",
          "135:     call_array_len: felt,",
          "136:     call_array: AccountCallArray*,",
          "137:     calldata_len: felt,",
          "138:     calldata: felt*",
          "139: ) -> (",
          "140:     response_len: felt,",
          "141:     response: felt*",
          "",
          "---------------"
        ],
        "src/openzeppelin/account/presets/EthAccount.cairo||src/openzeppelin/account/presets/EthAccount.cairo": [
          "File: src/openzeppelin/account/presets/EthAccount.cairo -> src/openzeppelin/account/presets/EthAccount.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: @constructor",
          "19:     return ();",
          "20: }",
          "",
          "[Removed Lines]",
          "15: func constructor{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(",
          "16:     eth_address: felt",
          "17: ) {",
          "18:     Account.initializer(eth_address);",
          "",
          "[Added Lines]",
          "15: func constructor{",
          "16:     syscall_ptr: felt*,",
          "17:     pedersen_ptr: HashBuiltin*,",
          "18:     range_check_ptr",
          "19: }(ethAddress: felt) {",
          "20:     Account.initializer(ethAddress);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: @view",
          "30:     let (ethAddress: felt) = Account.get_public_key();",
          "31:     return (ethAddress=ethAddress);",
          "32: }",
          "34: @view",
          "38:     return Account.supports_interface(interfaceId);",
          "39: }",
          "",
          "[Removed Lines]",
          "27: func getEthAddress{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}() -> (",
          "28:     ethAddress: felt",
          "29: ) {",
          "35: func supportsInterface{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(",
          "36:     interfaceId: felt",
          "37: ) -> (success: felt) {",
          "",
          "[Added Lines]",
          "29: func getEthAddress{",
          "30:     syscall_ptr: felt*,",
          "31:     pedersen_ptr: HashBuiltin*,",
          "32:     range_check_ptr",
          "33: } () -> (ethAddress: felt) {",
          "39: func supportsInterface{",
          "40:     syscall_ptr: felt*,",
          "41:     pedersen_ptr: HashBuiltin*,",
          "42:     range_check_ptr",
          "43: } (interfaceId: felt) -> (success: felt) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45: @external",
          "49:     Account.set_public_key(newEthAddress);",
          "50:     return ();",
          "51: }",
          "",
          "[Removed Lines]",
          "46: func setEthAddress{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(",
          "47:     newEthAddress: felt",
          "48: ) {",
          "",
          "[Added Lines]",
          "52: func setEthAddress{",
          "53:     syscall_ptr: felt*,",
          "54:     pedersen_ptr: HashBuiltin*,",
          "55:     range_check_ptr",
          "56: } (newEthAddress: felt) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:     pedersen_ptr: HashBuiltin*,",
          "61:     bitwise_ptr: BitwiseBuiltin*,",
          "62:     range_check_ptr,",
          "64:     let (isValid) = Account.is_valid_eth_signature(hash, signature_len, signature);",
          "65:     return (isValid=isValid);",
          "66: }",
          "",
          "[Removed Lines]",
          "63: }(hash: felt, signature_len: felt, signature: felt*) -> (isValid: felt) {",
          "",
          "[Added Lines]",
          "71: }(",
          "72:     hash: felt,",
          "73:     signature_len: felt,",
          "74:     signature: felt*",
          "75: ) -> (isValid: felt) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "71:     pedersen_ptr: HashBuiltin*,",
          "72:     bitwise_ptr: BitwiseBuiltin*,",
          "73:     range_check_ptr,",
          "75:     let (tx_info) = get_tx_info();",
          "76:     Account.is_valid_eth_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature);",
          "77:     return ();",
          "",
          "[Removed Lines]",
          "74: }(call_array_len: felt, call_array: AccountCallArray*, calldata_len: felt, calldata: felt*) {",
          "",
          "[Added Lines]",
          "86: }(",
          "87:     call_array_len: felt,",
          "88:     call_array: AccountCallArray*,",
          "89:     calldata_len: felt,",
          "90:     calldata: felt*",
          "91: ) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "83:     pedersen_ptr: HashBuiltin*,",
          "84:     bitwise_ptr: BitwiseBuiltin*,",
          "85:     range_check_ptr,",
          "87:     let (tx_info) = get_tx_info();",
          "88:     Account.is_valid_eth_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature);",
          "89:     return ();",
          "",
          "[Removed Lines]",
          "86: }(class_hash: felt) {",
          "",
          "[Added Lines]",
          "103: } (class_hash: felt) {",
          "104:     let (tx_info) = get_tx_info();",
          "105:     Account.is_valid_eth_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature);",
          "106:     return ();",
          "107: }",
          "110: @external",
          "111: func __validate_deploy__{",
          "112:     syscall_ptr: felt*,",
          "113:     pedersen_ptr: HashBuiltin*,",
          "114:     bitwise_ptr: BitwiseBuiltin*,",
          "115:     range_check_ptr",
          "116: } (",
          "117:     class_hash: felt,",
          "118:     salt: felt,",
          "119:     ethAddress: felt",
          "120: ) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "96:     ecdsa_ptr: SignatureBuiltin*,",
          "97:     bitwise_ptr: BitwiseBuiltin*,",
          "98:     range_check_ptr,",
          "101: ) {",
          "102:     let (response_len, response) = Account.execute(",
          "103:         call_array_len, call_array, calldata_len, calldata",
          "",
          "[Removed Lines]",
          "99: }(call_array_len: felt, call_array: AccountCallArray*, calldata_len: felt, calldata: felt*) -> (",
          "100:     response_len: felt, response: felt*",
          "",
          "[Added Lines]",
          "133: }(",
          "134:     call_array_len: felt,",
          "135:     call_array: AccountCallArray*,",
          "136:     calldata_len: felt,",
          "137:     calldata: felt*",
          "138: ) -> (",
          "139:     response_len: felt,",
          "140:     response: felt*",
          "",
          "---------------"
        ],
        "tests/account/test_Account.py||tests/account/test_Account.py": [
          "File: tests/account/test_Account.py -> tests/account/test_Account.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: @pytest.fixture(scope='module')",
          "21: async def account_init(contract_classes):",
          "23:     starknet = await State.init()",
          "24:     account1 = await Account.deploy(signer.public_key)",
          "25:     account2 = await Account.deploy(signer.public_key)",
          "",
          "[Removed Lines]",
          "22:     account_cls, init_cls, attacker_cls = contract_classes",
          "",
          "[Added Lines]",
          "22:     _, init_cls, attacker_cls = contract_classes",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:     return account1, account2, initializable1, initializable2, attacker",
          "57: @pytest.mark.asyncio",
          "58: async def test_constructor(account_factory):",
          "59:     account, *_ = account_factory",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: @pytest.mark.asyncio",
          "58: async def test_counterfactual_deployment(account_factory):",
          "59:     account, *_ = account_factory",
          "60:     await signer.declare_class(account, \"Account\")",
          "62:     execution_info = await signer.deploy_account(account.state, [signer.public_key])",
          "63:     address = execution_info.validate_info.contract_address",
          "65:     execution_info = await signer.send_transaction(account, address, 'getPublicKey', [])",
          "66:     assert execution_info.call_info.retdata[1] == signer.public_key",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:     assert execution_info.result == (TRUE,)",
          "68: @pytest.mark.asyncio",
          "69: async def test_execute(account_factory):",
          "70:     account, _, initializable, *_ = account_factory",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: @pytest.mark.asyncio",
          "81: async def test_is_valid_signature(account_factory):",
          "82:     account, *_ = account_factory",
          "83:     hash = 0x23564",
          "84:     signature = signer.sign(hash)",
          "86:     execution_info = await account.isValidSignature(hash, signature).call()",
          "87:     assert execution_info.result == (TRUE,)",
          "89:     # should revert if signature is not correct",
          "90:     await assert_revert(",
          "91:         account.isValidSignature(hash + 1, signature).call(),",
          "92:         reverted_with=(",
          "93:             f\"Signature {tuple(signature)}, is invalid, with respect to the public key {signer.public_key}, \"",
          "94:             f\"and the message hash {hash + 1}.\"",
          "95:         )",
          "96:     )",
          "99: @pytest.mark.asyncio",
          "100: async def test_declare(account_factory):",
          "101:     account, *_ = account_factory",
          "103:     # regular declare works",
          "104:     await signer.declare_class(account, \"ERC20\")",
          "106:     # wrong signer fails",
          "107:     await assert_revert(",
          "108:         other.declare_class(account, \"ERC20\"),",
          "109:         reverted_with=\"is invalid, with respect to the public key\"",
          "110:     )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72:     execution_info = await initializable.initialized().call()",
          "73:     assert execution_info.result == (0,)",
          "77:     execution_info = await initializable.initialized().call()",
          "78:     assert execution_info.result == (1,)",
          "81: @pytest.mark.asyncio",
          "82: async def test_multicall(account_factory):",
          "",
          "[Removed Lines]",
          "75:     await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])])",
          "",
          "[Added Lines]",
          "120:     await signer.send_transaction(account, initializable.contract_address, 'initialize', [])",
          "125:     # wrong signer fails",
          "126:     await assert_revert(",
          "127:         other.send_transaction(account, initializable.contract_address, 'initialize', []),",
          "128:         reverted_with=\"is invalid, with respect to the public key\"",
          "129:     )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106:     account, _, initializable, *_ = account_factory",
          "108:     # initialize, set `initialized = 1`",
          "112:     call_info = await initializable.initialized().call()",
          "113:     (call_result, ) = call_info.result",
          "114:     assert read_info.call_info.retdata[1] == call_result  # 1",
          "",
          "[Removed Lines]",
          "109:     await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])])",
          "111:     read_info = await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
          "",
          "[Added Lines]",
          "160:     await signer.send_transaction(account, initializable.contract_address, 'initialize', [])",
          "162:     read_info = await signer.send_transaction(account, initializable.contract_address, 'initialized', [])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "119:     account, _, initializable, *_ = account_factory",
          "121:     # bump nonce",
          "124:     # get nonce",
          "127:     current_nonce = await raw_invocation.state.state.get_nonce_at(account.contract_address)",
          "129:     # lower nonce",
          "130:     await assert_revert(",
          "133:         reverted_with=\"Invalid transaction nonce. Expected: {}, got: {}.\".format(",
          "134:             current_nonce, current_nonce - 1",
          "135:         )",
          "",
          "[Removed Lines]",
          "122:     await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
          "125:     hex_args = [(hex(initializable.contract_address), 'initialized', [])]",
          "126:     raw_invocation = get_raw_invoke(account, hex_args)",
          "131:         signer.send_transactions(",
          "132:             account, [(initializable.contract_address, 'initialize', [])], nonce=current_nonce - 1),",
          "",
          "[Added Lines]",
          "173:     await signer.send_transaction(account, initializable.contract_address, 'initialized', [])",
          "176:     args = [(initializable.contract_address, 'initialized', [])]",
          "177:     raw_invocation = get_raw_invoke(account, args)",
          "182:         signer.send_transaction(account, initializable.contract_address, 'initialize', [], nonce=current_nonce - 1),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "138:     # higher nonce",
          "139:     await assert_revert(",
          "142:         reverted_with=\"Invalid transaction nonce. Expected: {}, got: {}.\".format(",
          "143:             current_nonce, current_nonce + 1",
          "144:         )",
          "145:     )",
          "147:     # right nonce",
          "150:     execution_info = await initializable.initialized().call()",
          "151:     assert execution_info.result == (1,)",
          "",
          "[Removed Lines]",
          "140:         signer.send_transactions(account, [(",
          "141:             initializable.contract_address, 'initialize', [])], nonce=current_nonce + 1),",
          "148:     await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], nonce=current_nonce)",
          "",
          "[Added Lines]",
          "190:         signer.send_transaction(account, initializable.contract_address, 'initialize', [], nonce=current_nonce + 1),",
          "197:     await signer.send_transaction(account, initializable.contract_address, 'initialize', [], nonce=current_nonce)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "159:     assert execution_info.result == (signer.public_key,)",
          "161:     # set new pubkey",
          "164:     execution_info = await account.getPublicKey().call()",
          "165:     assert execution_info.result == (other.public_key,)",
          "",
          "[Removed Lines]",
          "162:     await signer.send_transactions(account, [(account.contract_address, 'setPublicKey', [other.public_key])])",
          "",
          "[Added Lines]",
          "211:     await signer.send_transaction(account, account.contract_address, 'setPublicKey', [other.public_key])",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "172:     # set new pubkey",
          "173:     await assert_revert(",
          "178:         reverted_with=\"Account: caller is not this account\"",
          "179:     )",
          "",
          "[Removed Lines]",
          "174:         signer.send_transactions(",
          "175:             bad_account,",
          "176:             [(account.contract_address, 'setPublicKey', [other.public_key])]",
          "177:         ),",
          "",
          "[Added Lines]",
          "223:         signer.send_transaction(bad_account, account.contract_address, 'setPublicKey', [other.public_key]),",
          "",
          "---------------"
        ],
        "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py": [
          "File: tests/account/test_EthAccount.py -> tests/account/test_EthAccount.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     return account1, account2, initializable1, initializable2, attacker",
          "63: @pytest.mark.asyncio",
          "64: async def test_constructor(account_factory):",
          "65:     account, *_ = account_factory",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: @pytest.mark.asyncio",
          "64: async def test_counterfactual_deployment(account_factory):",
          "65:     account, *_ = account_factory",
          "66:     await signer.declare_class(account, \"EthAccount\")",
          "68:     execution_info = await signer.deploy_account(account.state, [signer.eth_address])",
          "69:     address = execution_info.validate_info.contract_address",
          "71:     execution_info = await signer.send_transaction(account, address, 'getEthAddress', [])",
          "72:     assert execution_info.call_info.retdata[1] == signer.eth_address",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     assert execution_info.result == (TRUE,)",
          "74: @pytest.mark.asyncio",
          "75: async def test_execute(account_factory):",
          "76:     account, _, initializable, *_ = account_factory",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: @pytest.mark.asyncio",
          "87: async def test_is_valid_signature(account_factory):",
          "88:     account, *_ = account_factory",
          "89:     hash = 0x23564",
          "90:     signature = signer.sign(hash)",
          "92:     execution_info = await account.isValidSignature(hash, signature).call()",
          "93:     assert execution_info.result == (TRUE,)",
          "95:     # should revert if signature is not correct",
          "96:     await assert_revert(",
          "97:         account.isValidSignature(hash + 1, signature).call(),",
          "98:         reverted_with=\"Invalid signature\"",
          "99:     )",
          "102: @pytest.mark.asyncio",
          "103: async def test_declare(account_factory):",
          "104:     account, *_ = account_factory",
          "106:     # regular declare works",
          "107:     await signer.declare_class(account, \"ERC20\")",
          "109:     # wrong signer fails",
          "110:     await assert_revert(",
          "111:         other.declare_class(account, \"ERC20\"),",
          "112:         reverted_with=\"Invalid signature\"",
          "113:     )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:     execution_info = await initializable.initialized().call()",
          "79:     assert execution_info.result == (FALSE,)",
          "86:     execution_info = await initializable.initialized().call()",
          "87:     assert execution_info.result == (TRUE,)",
          "90:     await assert_revert(",
          "93:         reverted_with=\"Invalid signature\"",
          "94:     )",
          "",
          "[Removed Lines]",
          "81:     _, hash, signature = await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])])",
          "83:     validity_info, *_ = await signer.send_transactions(account, [(account.contract_address, 'isValidSignature', [hash, len(signature), *signature])])",
          "84:     assert validity_info.call_info.retdata[1] == TRUE",
          "89:     # should revert if signature is not correct",
          "91:         signer.send_transactions(account, [(account.contract_address, 'isValidSignature', [",
          "92:                                  hash-1, len(signature), *signature])]),",
          "",
          "[Added Lines]",
          "123:     await signer.send_transaction(account, initializable.contract_address, 'initialize', [])",
          "128:     # wrong signer fails",
          "130:         other.send_transaction(account, initializable.contract_address, 'initialize', []),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:     account, _, initializable, *_ = account_factory",
          "124:     # initialize, set `initialized = 1`",
          "128:     call_info = await initializable.initialized().call()",
          "129:     (call_result, ) = call_info.result",
          "130:     assert read_info.call_info.retdata[1] == call_result  # 1",
          "",
          "[Removed Lines]",
          "125:     await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])])",
          "127:     read_info, *_ = await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
          "",
          "[Added Lines]",
          "163:     await signer.send_transaction(account, initializable.contract_address, 'initialize', [])",
          "165:     read_info = await signer.send_transaction(account, initializable.contract_address, 'initialized', [])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:     account, _, initializable, *_ = account_factory",
          "137:     # bump nonce",
          "142:     current_nonce = await raw_invocation.state.state.get_nonce_at(account.contract_address)",
          "144:     # lower nonce",
          "145:     await assert_revert(",
          "148:         reverted_with=\"Invalid transaction nonce. Expected: {}, got: {}.\".format(",
          "149:             current_nonce, current_nonce - 1",
          "150:         )",
          "",
          "[Removed Lines]",
          "138:     await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
          "140:     hex_args = [(hex(initializable.contract_address), 'initialized', [])]",
          "141:     raw_invocation = get_raw_invoke(account, hex_args)",
          "146:         signer.send_transactions(",
          "147:             account, [(initializable.contract_address, 'initialize', [])], current_nonce - 1),",
          "",
          "[Added Lines]",
          "176:     await signer.send_transaction(account, initializable.contract_address, 'initialized', [])",
          "178:     args = [(initializable.contract_address, 'initialized', [])]",
          "179:     raw_invocation = get_raw_invoke(account, args)",
          "184:         signer.send_transaction(account, initializable.contract_address, 'initialize', [], current_nonce - 1),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "153:     # higher nonce",
          "154:     await assert_revert(",
          "157:         reverted_with=\"Invalid transaction nonce. Expected: {}, got: {}.\".format(",
          "158:             current_nonce, current_nonce + 1",
          "159:         )",
          "160:     )",
          "162:     # right nonce",
          "165:     execution_info = await initializable.initialized().call()",
          "166:     assert execution_info.result == (TRUE,)",
          "",
          "[Removed Lines]",
          "155:         signer.send_transactions(",
          "156:             account, [(initializable.contract_address, 'initialize', [])], current_nonce + 1),",
          "163:     await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], current_nonce)",
          "",
          "[Added Lines]",
          "192:         signer.send_transaction(account, initializable.contract_address, 'initialize', [], current_nonce + 1),",
          "199:     await signer.send_transaction(account, initializable.contract_address, 'initialize', [], current_nonce)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "174:     assert execution_info.result == (signer.eth_address,)",
          "176:     # set new pubkey",
          "179:     execution_info = await account.getEthAddress().call()",
          "180:     assert execution_info.result == (other.eth_address,)",
          "",
          "[Removed Lines]",
          "177:     await signer.send_transactions(account, [(account.contract_address, 'setEthAddress', [other.eth_address])])",
          "",
          "[Added Lines]",
          "213:     await signer.send_transaction(account, account.contract_address, 'setEthAddress', [other.eth_address])",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "187:     # set new pubkey",
          "188:     await assert_revert(",
          "193:         reverted_with=\"Account: caller is not this account\"",
          "194:     )",
          "",
          "[Removed Lines]",
          "189:         signer.send_transactions(",
          "190:             bad_account,",
          "191:             [(account.contract_address, 'setEthAddress', [other.eth_address])]",
          "192:         ),",
          "",
          "[Added Lines]",
          "225:         signer.send_transaction(bad_account, account.contract_address, 'setEthAddress', [signer.eth_address]),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "199:     account, _, _, _, attacker = account_factory",
          "201:     await assert_revert(",
          "204:         reverted_with=\"Account: reentrant call\"",
          "205:     )",
          "",
          "[Removed Lines]",
          "202:         signer.send_transaction(",
          "203:             account, attacker.contract_address, 'account_takeover', []),",
          "",
          "[Added Lines]",
          "235:         signer.send_transaction(account, attacker.contract_address, 'account_takeover', []),",
          "",
          "---------------"
        ],
        "tests/signers.py||tests/signers.py": [
          "File: tests/signers.py -> tests/signers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from starkware.starknet.core.os.transaction_hash.transaction_hash import TransactionHashPrefix",
          "4: from nile.signer import Signer, from_call_to_call_array, get_transaction_hash, TRANSACTION_VERSION",
          "5: from nile.utils import to_uint",
          "6: import eth_keys",
          "45:     async def send_transaction(self, account, to, selector_name, calldata, nonce=None, max_fee=0):",
          "46:         return await self.send_transactions(account, [(to, selector_name, calldata)], nonce, max_fee)",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.services.api.gateway.transaction import InvokeFunction",
          "3: from starkware.starknet.business_logic.transaction.objects import InternalTransaction, TransactionExecutionInfo",
          "9: class MockSigner():",
          "10:     \"\"\"",
          "11:     Utility for sending signed transactions to an Account on Starknet.",
          "13:     Parameters",
          "14:     ----------",
          "16:     private_key : int",
          "18:     Examples",
          "19:     ---------",
          "20:     Constructing a MockSigner object",
          "22:     >>> signer = MockSigner(1234)",
          "24:     Sending a transaction",
          "26:     >>> await signer.send_transaction(",
          "27:             account, contract_address, 'contract_method', [arg_1]",
          "28:         )",
          "30:     Sending multiple transactions",
          "32:     >>> await signer.send_transactions(",
          "33:             account, [",
          "34:                 (contract_address, 'contract_method', [arg_1]),",
          "35:                 (contract_address, 'another_method', [arg_1, arg_2])",
          "36:             ]",
          "37:         )",
          "39:     \"\"\"",
          "41:     def __init__(self, private_key):",
          "42:         self.signer = Signer(private_key)",
          "43:         self.public_key = self.signer.public_key",
          "",
          "[Added Lines]",
          "2: from starkware.starknet.core.os.contract_address.contract_address import (",
          "3:     calculate_contract_address_from_hash,",
          "4: )",
          "5: from starkware.starknet.definitions.general_config import StarknetChainId",
          "6: from starkware.starknet.services.api.gateway.transaction import InvokeFunction, DeployAccount",
          "7: from starkware.starknet.business_logic.transaction.objects import InternalTransaction, InternalDeclare, TransactionExecutionInfo",
          "9: from nile.common import get_contract_class, get_class_hash",
          "14: class BaseSigner():",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:         nonce=None,",
          "53:         max_fee=0",
          "54:     ) -> TransactionExecutionInfo:",
          "63:         state = raw_invocation.state",
          "65:         if nonce is None:",
          "66:             nonce = await state.state.get_nonce_at(account.contract_address)",
          "71:         external_tx = InvokeFunction(",
          "72:             contract_address=account.contract_address,",
          "73:             calldata=raw_invocation.calldata,",
          "74:             entry_point_selector=None,",
          "76:             max_fee=max_fee,",
          "77:             version=TRANSACTION_VERSION,",
          "78:             nonce=nonce,",
          "",
          "[Removed Lines]",
          "55:         # hexify address before passing to from_call_to_call_array",
          "56:         build_calls = []",
          "57:         for call in calls:",
          "58:             build_call = list(call)",
          "59:             build_call[0] = hex(build_call[0])",
          "60:             build_calls.append(build_call)",
          "62:         raw_invocation = get_raw_invoke(account, build_calls)",
          "68:         _, sig_r, sig_s = self.signer.sign_transaction(account.contract_address, build_calls, nonce, max_fee)",
          "70:         # craft invoke and execute tx",
          "75:             signature=[sig_r, sig_s],",
          "",
          "[Added Lines]",
          "25:         raw_invocation = get_raw_invoke(account, calls)",
          "31:         transaction_hash = get_transaction_hash(",
          "32:             prefix=TransactionHashPrefix.INVOKE,",
          "33:             account=account.contract_address,",
          "34:             calldata=raw_invocation.calldata,",
          "35:             version=TRANSACTION_VERSION,",
          "36:             chain_id=StarknetChainId.TESTNET.value,",
          "37:             nonce=nonce,",
          "38:             max_fee=max_fee,",
          "39:         )",
          "41:         signature = self.sign(transaction_hash)",
          "47:             signature=signature,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:         execution_info = await state.execute_tx(tx=tx)",
          "85:         return execution_info",
          "117:         transaction_hash = get_transaction_hash(",
          "121:             nonce=nonce,",
          "123:         )",
          "135:             max_fee=max_fee,",
          "136:             version=TRANSACTION_VERSION,",
          "137:             nonce=nonce,",
          "",
          "[Removed Lines]",
          "88: class MockEthSigner():",
          "89:     \"\"\"",
          "90:     Utility for sending signed transactions to an Account on Starknet, like MockSigner, but using a secp256k1 signature.",
          "91:     Parameters",
          "92:     ----------",
          "93:     private_key : int",
          "95:     \"\"\"",
          "97:     def __init__(self, private_key):",
          "98:         self.signer = eth_keys.keys.PrivateKey(private_key)",
          "99:         self.eth_address = int(self.signer.public_key.to_checksum_address(), 0)",
          "101:     async def send_transaction(self, account, to, selector_name, calldata, nonce=None, max_fee=0):",
          "102:         return await self.send_transactions(account, [(to, selector_name, calldata)], nonce, max_fee)",
          "104:     async def send_transactions(self, account, calls, nonce=None, max_fee=0):",
          "105:         build_calls = []",
          "106:         for call in calls:",
          "107:             build_call = list(call)",
          "108:             build_call[0] = hex(build_call[0])",
          "109:             build_calls.append(build_call)",
          "111:         raw_invocation = get_raw_invoke(account, build_calls)",
          "112:         state = raw_invocation.state",
          "114:         if nonce is None:",
          "115:             nonce = await state.state.get_nonce_at(account.contract_address)",
          "118:             prefix=TransactionHashPrefix.INVOKE,",
          "119:             account=account.contract_address,",
          "120:             calldata=raw_invocation.calldata,",
          "122:             max_fee=max_fee",
          "125:         signature = self.signer.sign_msg_hash(",
          "126:             (transaction_hash).to_bytes(32, byteorder=\"big\"))",
          "127:         sig_r = to_uint(signature.r)",
          "128:         sig_s = to_uint(signature.s)",
          "130:         external_tx = InvokeFunction(",
          "131:             contract_address=account.contract_address,",
          "132:             calldata=raw_invocation.calldata,",
          "133:             entry_point_selector=None,",
          "134:             signature=[signature.v, *sig_r, *sig_s],",
          "",
          "[Added Lines]",
          "59:     async def declare_class(",
          "60:         self,",
          "61:         account,",
          "62:         contract_name,",
          "63:         nonce=None,",
          "64:         max_fee=0,",
          "65:     ) -> TransactionExecutionInfo:",
          "66:         state = account.state",
          "68:         if nonce is None:",
          "69:             nonce = await state.state.get_nonce_at(contract_address=account.contract_address)",
          "71:         contract_class = get_contract_class(contract_name)",
          "72:         class_hash = get_class_hash(contract_name)",
          "74:         transaction_hash = get_transaction_hash(",
          "75:             prefix=TransactionHashPrefix.DECLARE,",
          "76:             account=account.contract_address,",
          "77:             calldata=[class_hash],",
          "78:             nonce=nonce,",
          "79:             version=TRANSACTION_VERSION,",
          "80:             max_fee=max_fee,",
          "81:             chain_id=StarknetChainId.TESTNET.value",
          "82:         )",
          "84:         signature = self.sign(transaction_hash)",
          "86:         tx = InternalDeclare.create(",
          "87:             sender_address=account.contract_address,",
          "88:             contract_class=contract_class,",
          "89:             chain_id=StarknetChainId.TESTNET.value,",
          "90:             max_fee=max_fee,",
          "91:             version=TRANSACTION_VERSION,",
          "92:             nonce=nonce,",
          "93:             signature=signature,",
          "94:         )",
          "96:         execution_info = await state.execute_tx(tx=tx)",
          "97:         return execution_info",
          "99:     async def deploy_account(",
          "100:         self,",
          "101:         state,",
          "102:         calldata,",
          "103:         salt=0,",
          "104:         nonce=0,",
          "105:         max_fee=0,",
          "106:     ) -> TransactionExecutionInfo:",
          "107:         account_address = calculate_contract_address_from_hash(",
          "108:             salt=salt,",
          "109:             class_hash=self.class_hash,",
          "110:             constructor_calldata=calldata,",
          "111:             deployer_address=0",
          "112:         )",
          "115:             prefix=TransactionHashPrefix.DEPLOY_ACCOUNT,",
          "116:             account=account_address,",
          "117:             calldata=[self.class_hash, salt, *calldata],",
          "119:             version=TRANSACTION_VERSION,",
          "120:             max_fee=max_fee,",
          "121:             chain_id=StarknetChainId.TESTNET.value",
          "124:         signature = self.sign(transaction_hash)",
          "126:         external_tx = DeployAccount(",
          "127:             class_hash=self.class_hash,",
          "128:             contract_address_salt=salt,",
          "129:             constructor_calldata=calldata,",
          "130:             signature=signature,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:         )",
          "144:         execution_info = await state.execute_tx(tx=tx)",
          "149: def get_raw_invoke(sender, calls):",
          "",
          "[Removed Lines]",
          "145:         # the hash and signature are returned for other tests to use",
          "146:         return execution_info, transaction_hash, [signature.v, *sig_r, *sig_s]",
          "",
          "[Added Lines]",
          "141:         return execution_info",
          "143: class MockSigner(BaseSigner):",
          "144:     \"\"\"",
          "145:     Utility for sending signed transactions to an Account on Starknet.",
          "147:     Parameters",
          "148:     ----------",
          "150:     private_key : int",
          "152:     Examples",
          "153:     ---------",
          "154:     Constructing a MockSigner object",
          "156:     >>> signer = MockSigner(1234)",
          "158:     Sending a transaction",
          "160:     >>> await signer.send_transaction(",
          "161:             account, contract_address, 'contract_method', [arg_1]",
          "162:         )",
          "164:     Sending multiple transactions",
          "166:     >>> await signer.send_transactions(",
          "167:             account, [",
          "168:                 (contract_address, 'contract_method', [arg_1]),",
          "169:                 (contract_address, 'another_method', [arg_1, arg_2])",
          "170:             ]",
          "171:         )",
          "173:     \"\"\"",
          "174:     def __init__(self, private_key):",
          "175:         self.signer = Signer(private_key)",
          "176:         self.public_key = self.signer.public_key",
          "177:         self.class_hash = get_class_hash(\"Account\")",
          "179:     def sign(self, transaction_hash):",
          "180:         sig_r, sig_s = self.signer.sign(transaction_hash)",
          "181:         return [sig_r, sig_s]",
          "184: class MockEthSigner(BaseSigner):",
          "185:     \"\"\"",
          "186:     Utility for sending signed transactions to an Account on Starknet, like MockSigner, but using a secp256k1 signature.",
          "187:     Parameters",
          "188:     ----------",
          "189:     private_key : int",
          "191:     \"\"\"",
          "192:     def __init__(self, private_key):",
          "193:         self.signer = eth_keys.keys.PrivateKey(private_key)",
          "194:         self.eth_address = int(self.signer.public_key.to_checksum_address(), 0)",
          "195:         self.class_hash = get_class_hash(\"EthAccount\")",
          "197:     def sign(self, transaction_hash):",
          "198:         signature = self.signer.sign_msg_hash(",
          "199:             (transaction_hash).to_bytes(32, byteorder=\"big\"))",
          "200:         sig_r = to_uint(signature.r)",
          "201:         sig_s = to_uint(signature.s)",
          "202:         return [signature.v, *sig_r, *sig_s]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad399728e6fcd5956a4ed347fb5e8ee731d37ec4",
      "candidate_info": {
        "commit_hash": "ad399728e6fcd5956a4ed347fb5e8ee731d37ec4",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/ad399728e6fcd5956a4ed347fb5e8ee731d37ec4",
        "files": [
          "setup.cfg",
          "tests/account/test_EthAccount.py"
        ],
        "message": "Fix setup.cfg version (#406)\n\n* hardcode pytest threads\n\n* ci threads to 1\n\n* test\n\n* test again\n\n* rollback pytest thread count",
        "before_after_code_files": [
          "setup.cfg||setup.cfg",
          "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py"
          ],
          "candidate": [
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: [metadata]",
          "2: name = openzeppelin-cairo-contracts",
          "4: description = Library for secure smart contract development written in Cairo",
          "5: author = OpenZeppelin Community",
          "6: author_email = maintainers@openzeppelin.org",
          "",
          "[Removed Lines]",
          "3: version = attr: openzeppelin-cairo-contracts.__version__",
          "",
          "[Added Lines]",
          "3: version = attr: openzeppelin.__version__",
          "",
          "---------------"
        ],
        "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py": [
          "File: tests/account/test_EthAccount.py -> tests/account/test_EthAccount.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "5: from utils import assert_revert, get_contract_class, cached_contract, TRUE, FALSE",
          "6: from signers import MockEthSigner",
          "",
          "[Removed Lines]",
          "3: from starkware.starkware_utils.error_handling import StarkException",
          "4: from starkware.starknet.definitions.error_codes import StarknetErrorCode",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     # should revert if signature is not correct",
          "94:     await assert_revert(",
          "96:         reverted_with=\"Invalid signature\"",
          "97:     )",
          "",
          "[Removed Lines]",
          "95:         signer.send_transactions(account, [(account.contract_address, 'is_valid_signature', [hash-1, len(signature), *signature])]),",
          "",
          "[Added Lines]",
          "93:         signer.send_transactions(account, [(account.contract_address, 'is_valid_signature', [",
          "94:                                  hash-1, len(signature), *signature])]),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136: @ pytest.mark.asyncio",
          "137: async def test_nonce(account_factory):",
          "138:     account, _, initializable, *_ = account_factory",
          "141:     await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
          "143:     execution_info = await account.get_nonce().call()",
          "",
          "[Removed Lines]",
          "140:     # bump nonce",
          "",
          "[Added Lines]",
          "139:     # bump nonce",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:     # lower nonce",
          "147:     await assert_revert(",
          "149:         reverted_with=\"Account: nonce is invalid\"",
          "150:     )",
          "152:     # higher nonce",
          "153:     await assert_revert(",
          "155:         reverted_with=\"Account: nonce is invalid\"",
          "156:     )",
          "",
          "[Removed Lines]",
          "148:         signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], current_nonce - 1),",
          "154:         signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], current_nonce + 1),",
          "",
          "[Added Lines]",
          "147:         signer.send_transactions(",
          "148:             account, [(initializable.contract_address, 'initialize', [])], current_nonce - 1),",
          "154:         signer.send_transactions(",
          "155:             account, [(initializable.contract_address, 'initialize', [])], current_nonce + 1),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "195:     account, _, _, _, attacker = account_factory",
          "197:     await assert_revert(",
          "199:         reverted_with=\"Account: no reentrant call\"",
          "200:     )",
          "202:     execution_info = await account.get_eth_address().call()",
          "203:     assert execution_info.result == (signer.eth_address,)",
          "",
          "[Removed Lines]",
          "198:         signer.send_transaction(account, attacker.contract_address, 'account_takeover', []),",
          "",
          "[Added Lines]",
          "199:         signer.send_transaction(",
          "200:             account, attacker.contract_address, 'account_takeover', []),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2007df15001a411740376efb1b2b78df98e59d8",
      "candidate_info": {
        "commit_hash": "c2007df15001a411740376efb1b2b78df98e59d8",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/c2007df15001a411740376efb1b2b78df98e59d8",
        "files": [
          "docs/Account.md",
          "src/openzeppelin/account/EthAccount.cairo",
          "src/openzeppelin/account/library.cairo",
          "tests/account/test_Account.py",
          "tests/account/test_EthAccount.py"
        ],
        "message": "Fix account signature (#387)\n\n* fix ecdsa_ptr\n\n* remove unused vars\n\n* bump nonce in test\n\n* remove unused implicit arg\n\n* reference ecdsa_ptr issue",
        "before_after_code_files": [
          "src/openzeppelin/account/EthAccount.cairo||src/openzeppelin/account/EthAccount.cairo",
          "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo",
          "tests/account/test_Account.py||tests/account/test_Account.py",
          "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/openzeppelin/account/EthAccount.cairo||src/openzeppelin/account/EthAccount.cairo",
            "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo",
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py"
          ],
          "candidate": [
            "src/openzeppelin/account/EthAccount.cairo||src/openzeppelin/account/EthAccount.cairo",
            "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo",
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py"
          ]
        }
      },
      "candidate_diff": {
        "src/openzeppelin/account/EthAccount.cairo||src/openzeppelin/account/EthAccount.cairo": [
          "File: src/openzeppelin/account/EthAccount.cairo -> src/openzeppelin/account/EthAccount.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:         syscall_ptr : felt*,",
          "95:         pedersen_ptr : HashBuiltin*,",
          "96:         range_check_ptr,",
          "97:         bitwise_ptr: BitwiseBuiltin*",
          "98:     }(",
          "99:         call_array_len: felt,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:         ecdsa_ptr: SignatureBuiltin*,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:         calldata_len: felt,",
          "102:         calldata: felt*,",
          "103:         nonce: felt",
          "105:     let (response_len, response) = Account.eth_execute(",
          "106:         call_array_len,",
          "107:         call_array,",
          "",
          "[Removed Lines]",
          "104:     ) -> (response_len: felt, response: felt*):",
          "",
          "[Added Lines]",
          "105:     ) -> (response_len: felt, response: felt*):",
          "",
          "---------------"
        ],
        "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo": [
          "File: src/openzeppelin/account/library.cairo -> src/openzeppelin/account/library.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:         return (is_valid=TRUE)",
          "147:     end",
          "150:             syscall_ptr : felt*,",
          "151:             pedersen_ptr : HashBuiltin*,",
          "152:             bitwise_ptr: BitwiseBuiltin*,",
          "",
          "[Removed Lines]",
          "149:  func is_valid_eth_signature{",
          "",
          "[Added Lines]",
          "149:     func is_valid_eth_signature{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:                 r=sig_r,",
          "179:                 s=sig_s,",
          "180:                 v=sig_v,",
          "182:         end",
          "184:         return (is_valid=TRUE)",
          "",
          "[Removed Lines]",
          "181:                 eth_address=_public_key)",
          "",
          "[Added Lines]",
          "181:                 eth_address=_public_key)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:             syscall_ptr : felt*,",
          "189:             pedersen_ptr : HashBuiltin*,",
          "190:             range_check_ptr,",
          "191:             bitwise_ptr: BitwiseBuiltin*",
          "192:         }(",
          "193:             call_array_len: felt,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:             ecdsa_ptr: SignatureBuiltin*,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:         let (__fp__, _) = get_fp_and_pc()",
          "202:         let (tx_info) = get_tx_info()",
          "212:         return _unsafe_execute(call_array_len, call_array, calldata_len, calldata, nonce)",
          "213:     end",
          "",
          "[Removed Lines]",
          "203:         let (local ecdsa_ptr : SignatureBuiltin*) = alloc()",
          "204:         with ecdsa_ptr:",
          "205:             # validate transaction",
          "206:             with_attr error_message(\"Account: invalid signature\"):",
          "207:                 let (is_valid) = is_valid_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature)",
          "208:                 assert is_valid = TRUE",
          "209:             end",
          "210:         end",
          "",
          "[Added Lines]",
          "205:         # validate transaction",
          "206:         with_attr error_message(\"Account: invalid signature\"):",
          "207:             let (is_valid) = is_valid_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature)",
          "208:             assert is_valid = TRUE",
          "209:         end",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "216:             syscall_ptr : felt*,",
          "217:             pedersen_ptr : HashBuiltin*,",
          "218:             range_check_ptr,",
          "219:             bitwise_ptr: BitwiseBuiltin*",
          "220:         }(",
          "221:             call_array_len: felt,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:             ecdsa_ptr: SignatureBuiltin*,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "229:         let (__fp__, _) = get_fp_and_pc()",
          "230:         let (tx_info) = get_tx_info()",
          "233:         with_attr error_message(\"Account: invalid secp256k1 signature\"):",
          "234:             let (is_valid) = is_valid_eth_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature)",
          "235:             assert is_valid = TRUE",
          "236:         end",
          "238:         return _unsafe_execute(call_array_len, call_array, calldata_len, calldata, nonce)",
          "239:     end",
          "",
          "[Removed Lines]",
          "232:         # validate transaction",
          "",
          "[Added Lines]",
          "232:         # validate transaction",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "242:             syscall_ptr : felt*,",
          "243:             pedersen_ptr : HashBuiltin*,",
          "244:             range_check_ptr,",
          "245:             bitwise_ptr: BitwiseBuiltin*",
          "246:         }(",
          "247:             call_array_len: felt,",
          "248:             call_array: AccountCallArray*,",
          "249:             calldata_len: felt,",
          "251:             nonce: felt",
          "252:         ) -> (response_len: felt, response: felt*):",
          "253:         alloc_locals",
          "255:         let (caller) = get_caller_address()",
          "256:         with_attr error_message(\"Account: no reentrant call\"):",
          "257:             assert caller = 0",
          "",
          "[Removed Lines]",
          "250:             calldata: felt*,",
          "",
          "[Added Lines]",
          "245:             ecdsa_ptr: SignatureBuiltin*,",
          "251:             calldata: felt*,",
          "",
          "---------------"
        ],
        "tests/account/test_Account.py||tests/account/test_Account.py": [
          "File: tests/account/test_Account.py -> tests/account/test_Account.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: async def test_nonce(account_factory):",
          "127:     account, _, initializable, *_ = account_factory",
          "129:     execution_info = await account.get_nonce().call()",
          "130:     current_nonce = execution_info.result.res",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     # bump nonce",
          "130:     await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
          "",
          "---------------"
        ],
        "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py": [
          "File: tests/account/test_EthAccount.py -> tests/account/test_EthAccount.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:     account, _, initializable, *_ = account_factory",
          "140:     # bump nonce",
          "143:     execution_info = await account.get_nonce().call()",
          "144:     current_nonce = execution_info.result.res",
          "",
          "[Removed Lines]",
          "141:     _, hash, signature = await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
          "",
          "[Added Lines]",
          "141:     await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
          "",
          "---------------"
        ]
      }
    }
  ]
}