{
  "cve_id": "CVE-2024-43803",
  "cve_desc": "The Bare Metal Operator (BMO) implements a Kubernetes API for managing bare metal hosts in Metal3. The `BareMetalHost` (BMH) CRD allows the `userData`, `metaData`, and `networkData` for the provisioned host to be specified as links to Kubernetes Secrets. There are fields for both the `Name` and `Namespace` of the Secret, meaning that versions of the baremetal-operator prior to 0.8.0, 0.6.2, and 0.5.2 will read a `Secret` from any namespace. A user with access to create or edit a `BareMetalHost` can thus exfiltrate a `Secret` from another namespace by using it as e.g. the `userData` for provisioning some host (note that this need not be a real host, it could be a VM somewhere).\n\nBMO will only read a key with the name `value` (or `userData`, `metaData`, or `networkData`), so that limits the exposure somewhat. `value` is probably a pretty common key though. Secrets used by _other_ `BareMetalHost`s in different namespaces are always vulnerable. It is probably relatively unusual for anyone other than cluster administrators to have RBAC access to create/edit a `BareMetalHost`. This vulnerability is only meaningful, if the cluster has users other than administrators and users' privileges are limited to their respective namespaces.\n\nThe patch prevents BMO from accepting links to Secrets from other namespaces as BMH input. Any BMH configuration is only read from the same namespace only. The problem is patched in BMO releases v0.7.0, v0.6.2 and v0.5.2 and users should upgrade to those versions. Prior upgrading, duplicate the BMC Secrets to the namespace where the corresponding BMH is. After upgrade, remove the old Secrets. As a workaround, an operator can configure BMO RBAC to be namespace scoped for Secrets, instead of cluster scoped, to prevent BMO from accessing Secrets from other namespaces.",
  "repo": "metal3-io/baremetal-operator",
  "patch_hash": "c2b5a557641bc273367635124047d6c958aa15f7",
  "patch_info": {
    "commit_hash": "c2b5a557641bc273367635124047d6c958aa15f7",
    "repo": "metal3-io/baremetal-operator",
    "commit_url": "https://github.com/metal3-io/baremetal-operator/commit/c2b5a557641bc273367635124047d6c958aa15f7",
    "files": [
      "controllers/metal3.io/baremetalhost_controller_test.go",
      "controllers/metal3.io/host_config_data.go",
      "controllers/metal3.io/host_config_data_test.go"
    ],
    "message": "Merge pull request #1929 from Nordix/tuomo/ghsa-pqfh-xh7w-7h3p\n\n\ud83d\udc1b Disallow fetching secrets from namespaces different from the host's one",
    "before_after_code_files": [
      "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
      "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
      "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
    ]
  },
  "patch_diff": {
    "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go": [
      "File: controllers/metal3.io/baremetalhost_controller_test.go -> controllers/metal3.io/baremetalhost_controller_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: )",
      "39: func newSecret(name string, data map[string]string) *corev1.Secret {",
      "40:  secretData := make(map[string][]byte)",
      "41:  for k, v := range data {",
      "42:   secretData[k] = []byte(base64.StdEncoding.EncodeToString([]byte(v)))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40:  return newSecretInNamespace(name, namespace, data)",
      "41: }",
      "43: func newSecretInNamespace(name, namespace string, data map[string]string) *corev1.Secret {",
      "",
      "---------------"
    ],
    "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go": [
      "File: controllers/metal3.io/host_config_data.go -> controllers/metal3.io/host_config_data.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:  \"github.com/go-logr/logr\"",
      "5:  metal3api \"github.com/metal3-io/baremetal-operator/apis/metal3.io/v1alpha1\"",
      "6:  \"github.com/metal3-io/baremetal-operator/pkg/secretutils\"",
      "7:  corev1 \"k8s.io/api/core/v1\"",
      "8:  \"k8s.io/apimachinery/pkg/types\"",
      "9: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7:  \"github.com/pkg/errors\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "22: func (hcd *hostConfigData) getSecretData(name, namespace, dataKey string) (string, error) {",
      "23:  key := types.NamespacedName{",
      "24:   Name:      name,",
      "25:   Namespace: namespace,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:  if namespace != hcd.host.Namespace {",
      "25:   return \"\", errors.Errorf(\"%s secret must be in same namespace as host %s/%s\", dataKey, hcd.host.Namespace, hcd.host.Name)",
      "26:  }",
      "",
      "---------------"
    ],
    "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go": [
      "File: controllers/metal3.io/host_config_data_test.go -> controllers/metal3.io/host_config_data_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "323:    ExpectedNetworkData: \"\",",
      "324:    ErrNetworkData:      true,",
      "325:   },",
      "326:  }",
      "328:  for _, tc := range testCases {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "326:   {",
      "327:    Scenario: \"user-data secret in different namespace\",",
      "328:    Host: newHost(\"host-user-data\",",
      "329:     &metal3api.BareMetalHostSpec{",
      "330:      BMC: metal3api.BMCDetails{",
      "331:       Address:         \"ipmi://192.168.122.1:6233\",",
      "332:       CredentialsName: defaultSecretName,",
      "333:      },",
      "334:      UserData: &corev1.SecretReference{",
      "335:       Name:      \"user-data\",",
      "336:       Namespace: \"other-namespace\",",
      "337:      },",
      "338:     }),",
      "339:    UserDataSecret: newSecretInNamespace(\"user-data\", \"other-namespace\", map[string]string{\"userData\": \"somedata\"}),",
      "340:    ErrUserData:    true,",
      "341:   },",
      "342:   {",
      "343:    Scenario: \"meta-data secret in different namespace\",",
      "344:    Host: newHost(\"host-user-data\",",
      "345:     &metal3api.BareMetalHostSpec{",
      "346:      BMC: metal3api.BMCDetails{",
      "347:       Address:         \"ipmi://192.168.122.1:6233\",",
      "348:       CredentialsName: defaultSecretName,",
      "349:      },",
      "350:      MetaData: &corev1.SecretReference{",
      "351:       Name:      \"meta-data\",",
      "352:       Namespace: \"other-namespace\",",
      "353:      },",
      "354:     }),",
      "355:    NetworkDataSecret: newSecretInNamespace(\"meta-data\", \"other-namespace\", map[string]string{\"metaData\": \"key: value\"}),",
      "356:    ErrMetaData:       true,",
      "357:   },",
      "358:   {",
      "359:    Scenario: \"network-data secret in different namespace\",",
      "360:    Host: newHost(\"host-user-data\",",
      "361:     &metal3api.BareMetalHostSpec{",
      "362:      BMC: metal3api.BMCDetails{",
      "363:       Address:         \"ipmi://192.168.122.1:6233\",",
      "364:       CredentialsName: defaultSecretName,",
      "365:      },",
      "366:      NetworkData: &corev1.SecretReference{",
      "367:       Name:      \"net-data\",",
      "368:       Namespace: \"other-namespace\",",
      "369:      },",
      "370:     }),",
      "371:    NetworkDataSecret: newSecretInNamespace(\"net-data\", \"other-namespace\", map[string]string{\"networkData\": \"key: value\"}),",
      "372:    ErrNetworkData:    true,",
      "373:   },",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "378:    }",
      "380:    if actualMetaData != tc.ExpectedMetaData {",
      "382:    }",
      "383:   })",
      "384:  }",
      "",
      "[Removed Lines]",
      "381:     t.Fatal(fmt.Errorf(\"Failed to assert MetaData. Expected '%s' got '%s'\", actualMetaData, tc.ExpectedMetaData))",
      "",
      "[Added Lines]",
      "429:     t.Fatal(fmt.Errorf(\"Failed to assert MetaData. Expected '%s' got '%s'\", tc.ExpectedMetaData, actualMetaData))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a25d46a6911130f3e2f590a9887784d4cd2ddc1a",
      "candidate_info": {
        "commit_hash": "a25d46a6911130f3e2f590a9887784d4cd2ddc1a",
        "repo": "metal3-io/baremetal-operator",
        "commit_url": "https://github.com/metal3-io/baremetal-operator/commit/a25d46a6911130f3e2f590a9887784d4cd2ddc1a",
        "files": [
          ".github/workflows/golangci-lint.yml",
          ".golangci.yaml",
          "Dockerfile",
          "Makefile",
          "Tiltfile",
          "cmd/make-bm-worker/templates/templates_test.go",
          "hack/e2e/ensure_go.sh",
          "pkg/provisioner/ironic/hardwaredetails/hardwaredetails.go"
        ],
        "message": "Bump Go to 1.23.3 and golangci-lint to 1.60.3\n\nBump Go to 1.23.3 and golangci-lint to 1.60.3 which supports Go 1.23.\n\nIgnore couple new warnings that are generated, as there is no immediate\ngood options.\n\nCleanup golangci-lint config from deprecated configs.\n\nInclude timeouts where needed, golangci-lint 1.60 is defaulting to\nreal short runs and failing otherwise.\n\nSigned-off-by: Tuomo Tanskanen <tuomo.tanskanen@est.tech>",
        "before_after_code_files": [
          "cmd/make-bm-worker/templates/templates_test.go||cmd/make-bm-worker/templates/templates_test.go",
          "hack/e2e/ensure_go.sh||hack/e2e/ensure_go.sh",
          "pkg/provisioner/ironic/hardwaredetails/hardwaredetails.go||pkg/provisioner/ironic/hardwaredetails/hardwaredetails.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/metal3-io/baremetal-operator/pull/2423"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cmd/make-bm-worker/templates/templates_test.go||cmd/make-bm-worker/templates/templates_test.go": [
          "File: cmd/make-bm-worker/templates/templates_test.go -> cmd/make-bm-worker/templates/templates_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  s1Lines := strings.Split(s1, \"\\n\")",
          "15:  s2Lines := strings.Split(s2, \"\\n\")",
          "20:  }",
          "23:   if s1Lines[i] != s2Lines[i] {",
          "24:    t.Logf(\"line %d differ: %q != %q\", i, s1Lines[i], s2Lines[i])",
          "25:   }",
          "",
          "[Removed Lines]",
          "17:  max := len(s1Lines)",
          "18:  if len(s2Lines) < max {",
          "19:   max = len(s2Lines)",
          "22:  for i := 0; i < max; i++ {",
          "",
          "[Added Lines]",
          "17:  maxLines := len(s1Lines)",
          "18:  if len(s2Lines) < maxLines {",
          "19:   maxLines = len(s2Lines)",
          "22:  for i := 0; i < maxLines; i++ {",
          "",
          "---------------"
        ],
        "hack/e2e/ensure_go.sh||hack/e2e/ensure_go.sh": [
          "File: hack/e2e/ensure_go.sh -> hack/e2e/ensure_go.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: set -eux",
          "7: # Ensure the go tool exists and is a viable version, or installs it",
          "8: verify_go_version()",
          "",
          "[Removed Lines]",
          "5: MINIMUM_GO_VERSION=go1.22.8",
          "",
          "[Added Lines]",
          "5: MINIMUM_GO_VERSION=go1.23.3",
          "",
          "---------------"
        ],
        "pkg/provisioner/ironic/hardwaredetails/hardwaredetails.go||pkg/provisioner/ironic/hardwaredetails/hardwaredetails.go": [
          "File: pkg/provisioner/ironic/hardwaredetails/hardwaredetails.go -> pkg/provisioner/ironic/hardwaredetails/hardwaredetails.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     vid, _ := vlan[\"id\"].(int)",
          "43:     name, _ := vlan[\"name\"].(string)",
          "44:     vlans[i] = metal3api.VLAN{",
          "46:      Name: name,",
          "47:     }",
          "48:    }",
          "49:   }",
          "50:  }",
          "51:  if vid, ok := lldp[\"switch_port_untagged_vlan_id\"].(int); ok {",
          "53:  }",
          "54:  return",
          "55: }",
          "",
          "[Removed Lines]",
          "45:      ID:   metal3api.VLANID(vid),",
          "52:   vlanid = metal3api.VLANID(vid)",
          "",
          "[Added Lines]",
          "45:      ID:   metal3api.VLANID(vid), //#nosec G115:gosec",
          "52:   vlanid = metal3api.VLANID(vid) //#nosec G115:gosec",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152: func getCPUDetails(cpudata *inventory.CPUType) metal3api.CPU {",
          "153:  var freq float64",
          "156:  sort.Strings(cpudata.Flags)",
          "157:  cpu := metal3api.CPU{",
          "158:   Arch:           cpudata.Architecture,",
          "",
          "[Removed Lines]",
          "154:  fmt.Sscanf(cpudata.Frequency, \"%f\", &freq)",
          "155:  freq = math.Round(freq) // Ensure freq has no fractional part",
          "",
          "[Added Lines]",
          "154:  fmt.Sscanf(cpudata.Frequency, \"%f\", &freq) //nolint:errcheck",
          "155:  freq = math.Round(freq)                    // Ensure freq has no fractional part",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "611491266a5221c13c3108039f52e24a614897fd",
      "candidate_info": {
        "commit_hash": "611491266a5221c13c3108039f52e24a614897fd",
        "repo": "metal3-io/baremetal-operator",
        "commit_url": "https://github.com/metal3-io/baremetal-operator/commit/611491266a5221c13c3108039f52e24a614897fd",
        "files": [
          "test/go.mod",
          "test/go.sum"
        ],
        "message": ":seedling: Bump github.com/cert-manager/cert-manager in /test\n\nBumps [github.com/cert-manager/cert-manager](https://github.com/cert-manager/cert-manager) from 1.12.14 to 1.12.15.\n- [Release notes](https://github.com/cert-manager/cert-manager/releases)\n- [Changelog](https://github.com/cert-manager/cert-manager/blob/master/RELEASE.md)\n- [Commits](https://github.com/cert-manager/cert-manager/compare/v1.12.14...v1.12.15)\n\n---\nupdated-dependencies:\n- dependency-name: github.com/cert-manager/cert-manager\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "before_after_code_files": [
          "test/go.mod||test/go.mod",
          "test/go.sum||test/go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/metal3-io/baremetal-operator/pull/2423"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/go.mod||test/go.mod": [
          "File: test/go.mod -> test/go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: go 1.22",
          "5: require (",
          "7:  github.com/dypflying/go-qcow2lib v1.0.0",
          "8:  github.com/metal3-io/baremetal-operator/apis v0.5.1",
          "9:  github.com/metal3-io/baremetal-operator/pkg/hardwareutils v0.5.1",
          "",
          "[Removed Lines]",
          "6:  github.com/cert-manager/cert-manager v1.12.14",
          "",
          "[Added Lines]",
          "6:  github.com/cert-manager/cert-manager v1.12.15",
          "",
          "---------------"
        ],
        "test/go.sum||test/go.sum": [
          "File: test/go.sum -> test/go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: github.com/cenkalti/backoff/v4 v4.2.1 h1:y4OZtCnogmCPw98Zjyt5a6+QwPLGkiQsYW5oUqylYbM=",
          "33: github.com/cenkalti/backoff/v4 v4.2.1/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=",
          "34: github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=",
          "37: github.com/cespare/xxhash/v2 v2.2.0 h1:DC2CZ1Ep5Y4k3ZQ899DldepgrayRUGE6BBZ/cd9Cj44=",
          "38: github.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=",
          "39: github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=",
          "",
          "[Removed Lines]",
          "35: github.com/cert-manager/cert-manager v1.12.14 h1:EyQMXPzIHcuXVu2kV4gKgEFQw3K/jMUkIyZhOWStz9I=",
          "36: github.com/cert-manager/cert-manager v1.12.14/go.mod h1:nApwszKTPUxB+gMZ2SeKtHWVojqJsuWplKvF+qb3fj8=",
          "",
          "[Added Lines]",
          "35: github.com/cert-manager/cert-manager v1.12.15 h1:dOpJ3/GdemMORnQ8zlTjqh1zPFR0naPbxsvkTuqQkTI=",
          "36: github.com/cert-manager/cert-manager v1.12.15/go.mod h1:7o6W8YggcXcZO4cvkVAp5ux+r2OBpDNWqzdEiHjuKTg=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88b379a80e3ee24e6db11ffcdab969329c4a35ba",
      "candidate_info": {
        "commit_hash": "88b379a80e3ee24e6db11ffcdab969329c4a35ba",
        "repo": "metal3-io/baremetal-operator",
        "commit_url": "https://github.com/metal3-io/baremetal-operator/commit/88b379a80e3ee24e6db11ffcdab969329c4a35ba",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": ":seedling: Bump github.com/prometheus/client_golang\n\nBumps [github.com/prometheus/client_golang](https://github.com/prometheus/client_golang) from 1.20.3 to 1.20.4.\n- [Release notes](https://github.com/prometheus/client_golang/releases)\n- [Changelog](https://github.com/prometheus/client_golang/blob/main/CHANGELOG.md)\n- [Commits](https://github.com/prometheus/client_golang/compare/v1.20.3...v1.20.4)\n\n---\nupdated-dependencies:\n- dependency-name: github.com/prometheus/client_golang\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/metal3-io/baremetal-operator/pull/2423"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  github.com/metal3-io/baremetal-operator/pkg/hardwareutils v0.5.1",
          "11:  github.com/onsi/gomega v1.34.2",
          "12:  github.com/pkg/errors v0.9.1",
          "14:  github.com/stretchr/testify v1.9.0",
          "15:  go.etcd.io/etcd/client/pkg/v3 v3.5.16",
          "16:  go.uber.org/zap v1.27.0",
          "",
          "[Removed Lines]",
          "13:  github.com/prometheus/client_golang v1.20.3",
          "",
          "[Added Lines]",
          "13:  github.com/prometheus/client_golang v1.20.4",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=",
          "90: github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=",
          "91: github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=",
          "94: github.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=",
          "95: github.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=",
          "96: github.com/prometheus/common v0.55.0 h1:KEi6DK7lXW/m7Ig5i47x0vRzuBsHuvJdi5ee6Y3G1dc=",
          "",
          "[Removed Lines]",
          "92: github.com/prometheus/client_golang v1.20.3 h1:oPksm4K8B+Vt35tUhw6GbSNSgVlVSBH0qELP/7u83l4=",
          "93: github.com/prometheus/client_golang v1.20.3/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=",
          "",
          "[Added Lines]",
          "92: github.com/prometheus/client_golang v1.20.4 h1:Tgh3Yr67PaOv/uTqloMsCEdeuFTatm5zIq5+qNN23vI=",
          "93: github.com/prometheus/client_golang v1.20.4/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64eb7cfa8eead3601b1e99e236db5873387774c8",
      "candidate_info": {
        "commit_hash": "64eb7cfa8eead3601b1e99e236db5873387774c8",
        "repo": "metal3-io/baremetal-operator",
        "commit_url": "https://github.com/metal3-io/baremetal-operator/commit/64eb7cfa8eead3601b1e99e236db5873387774c8",
        "files": [
          "controllers/metal3.io/baremetalhost_controller_test.go",
          "controllers/metal3.io/host_config_data.go",
          "controllers/metal3.io/host_config_data_test.go"
        ],
        "message": "Disallow fetching secrets from namespaces different from the host's one\n\nThe BareMetalHost CRD allows the UserData, MetaData, and NetworkData for\nthe provisioned host to be specified as links to k8s Secrets. There are\nfields for both the Name and Namespace of the Secret, meaning that the\nbaremetal-operator will read a Secret from any namespace. If a Secret\ncontains the key \"value\" (or \"userData\", \"metaData\", or \"networkData\"),\nits corresponding value can be exfiltrated by a user provisioning a Host\npointing to that Secret, then retrieving that data from the provisioned\nhost.\n\nAuthored-by: Zane Bitter <zbitter@redhat.com>\nCo-Authored-By: Dmitry Tantsur <dtantsur@protonmail.com>\n\nSigned-off-by: Tuomo Tanskanen <tuomo.tanskanen@est.tech>",
        "before_after_code_files": [
          "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
          "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
          "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/metal3-io/baremetal-operator/pull/2423",
          "https://github.com/metal3-io/baremetal-operator/pull/1929"
        ],
        "olp_code_files": {
          "patch": [
            "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
            "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
            "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
          ],
          "candidate": [
            "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
            "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
            "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
          ]
        }
      },
      "candidate_diff": {
        "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go": [
          "File: controllers/metal3.io/baremetalhost_controller_test.go -> controllers/metal3.io/baremetalhost_controller_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: )",
          "39: func newSecret(name string, data map[string]string) *corev1.Secret {",
          "40:  secretData := make(map[string][]byte)",
          "41:  for k, v := range data {",
          "42:   secretData[k] = []byte(base64.StdEncoding.EncodeToString([]byte(v)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:  return newSecretInNamespace(name, namespace, data)",
          "41: }",
          "43: func newSecretInNamespace(name, namespace string, data map[string]string) *corev1.Secret {",
          "",
          "---------------"
        ],
        "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go": [
          "File: controllers/metal3.io/host_config_data.go -> controllers/metal3.io/host_config_data.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"github.com/go-logr/logr\"",
          "5:  metal3api \"github.com/metal3-io/baremetal-operator/apis/metal3.io/v1alpha1\"",
          "6:  \"github.com/metal3-io/baremetal-operator/pkg/secretutils\"",
          "7:  corev1 \"k8s.io/api/core/v1\"",
          "8:  \"k8s.io/apimachinery/pkg/types\"",
          "9: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"github.com/pkg/errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: func (hcd *hostConfigData) getSecretData(name, namespace, dataKey string) (string, error) {",
          "23:  key := types.NamespacedName{",
          "24:   Name:      name,",
          "25:   Namespace: namespace,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:  if namespace != hcd.host.Namespace {",
          "25:   return \"\", errors.Errorf(\"%s secret must be in same namespace as host %s/%s\", dataKey, hcd.host.Namespace, hcd.host.Name)",
          "26:  }",
          "",
          "---------------"
        ],
        "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go": [
          "File: controllers/metal3.io/host_config_data_test.go -> controllers/metal3.io/host_config_data_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:    ExpectedNetworkData: \"\",",
          "324:    ErrNetworkData:      true,",
          "325:   },",
          "326:  }",
          "328:  for _, tc := range testCases {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:   {",
          "327:    Scenario: \"user-data secret in different namespace\",",
          "328:    Host: newHost(\"host-user-data\",",
          "329:     &metal3api.BareMetalHostSpec{",
          "330:      BMC: metal3api.BMCDetails{",
          "331:       Address:         \"ipmi://192.168.122.1:6233\",",
          "332:       CredentialsName: defaultSecretName,",
          "333:      },",
          "334:      UserData: &corev1.SecretReference{",
          "335:       Name:      \"user-data\",",
          "336:       Namespace: \"other-namespace\",",
          "337:      },",
          "338:     }),",
          "339:    UserDataSecret: newSecretInNamespace(\"user-data\", \"other-namespace\", map[string]string{\"userData\": \"somedata\"}),",
          "340:    ErrUserData:    true,",
          "341:   },",
          "342:   {",
          "343:    Scenario: \"meta-data secret in different namespace\",",
          "344:    Host: newHost(\"host-user-data\",",
          "345:     &metal3api.BareMetalHostSpec{",
          "346:      BMC: metal3api.BMCDetails{",
          "347:       Address:         \"ipmi://192.168.122.1:6233\",",
          "348:       CredentialsName: defaultSecretName,",
          "349:      },",
          "350:      MetaData: &corev1.SecretReference{",
          "351:       Name:      \"meta-data\",",
          "352:       Namespace: \"other-namespace\",",
          "353:      },",
          "354:     }),",
          "355:    NetworkDataSecret: newSecretInNamespace(\"meta-data\", \"other-namespace\", map[string]string{\"metaData\": \"key: value\"}),",
          "356:    ErrMetaData:       true,",
          "357:   },",
          "358:   {",
          "359:    Scenario: \"network-data secret in different namespace\",",
          "360:    Host: newHost(\"host-user-data\",",
          "361:     &metal3api.BareMetalHostSpec{",
          "362:      BMC: metal3api.BMCDetails{",
          "363:       Address:         \"ipmi://192.168.122.1:6233\",",
          "364:       CredentialsName: defaultSecretName,",
          "365:      },",
          "366:      NetworkData: &corev1.SecretReference{",
          "367:       Name:      \"net-data\",",
          "368:       Namespace: \"other-namespace\",",
          "369:      },",
          "370:     }),",
          "371:    NetworkDataSecret: newSecretInNamespace(\"net-data\", \"other-namespace\", map[string]string{\"networkData\": \"key: value\"}),",
          "372:    ErrNetworkData:    true,",
          "373:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:    }",
          "380:    if actualMetaData != tc.ExpectedMetaData {",
          "382:    }",
          "383:   })",
          "384:  }",
          "",
          "[Removed Lines]",
          "381:     t.Fatal(fmt.Errorf(\"Failed to assert MetaData. Expected '%s' got '%s'\", actualMetaData, tc.ExpectedMetaData))",
          "",
          "[Added Lines]",
          "429:     t.Fatal(fmt.Errorf(\"Failed to assert MetaData. Expected '%s' got '%s'\", tc.ExpectedMetaData, actualMetaData))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16e762494ed1b9c41b6d50c8596fd97ae72abcb2",
      "candidate_info": {
        "commit_hash": "16e762494ed1b9c41b6d50c8596fd97ae72abcb2",
        "repo": "metal3-io/baremetal-operator",
        "commit_url": "https://github.com/metal3-io/baremetal-operator/commit/16e762494ed1b9c41b6d50c8596fd97ae72abcb2",
        "files": [
          "controllers/metal3.io/baremetalhost_controller.go",
          "controllers/metal3.io/bmceventsubscription_controller.go"
        ],
        "message": "fixed review comments\n\nSigned-off-by: babugeet <97796199+babugeet@users.noreply.github.com>",
        "before_after_code_files": [
          "controllers/metal3.io/baremetalhost_controller.go||controllers/metal3.io/baremetalhost_controller.go",
          "controllers/metal3.io/bmceventsubscription_controller.go||controllers/metal3.io/bmceventsubscription_controller.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/metal3-io/baremetal-operator/pull/2423"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "controllers/metal3.io/baremetalhost_controller.go||controllers/metal3.io/baremetalhost_controller.go": [
          "File: controllers/metal3.io/baremetalhost_controller.go -> controllers/metal3.io/baremetalhost_controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:    msg = err.Error()",
          "222:   }",
          "223:   provisionerNotReady.Inc()",
          "225:   return ctrl.Result{Requeue: true, RequeueAfter: provisionerNotReadyRetryDelay}, nil",
          "226:  }",
          "",
          "[Removed Lines]",
          "224:   reqLogger.Info(\"provisioner is not ready\", \"Error\", msg, \"RequeueAfter:\", provisionerNotReadyRetryDelay)",
          "",
          "[Added Lines]",
          "224:   reqLogger.Info(\"provisioner is not ready\", \"Error:\", msg, \"RequeueAfter:\", provisionerNotReadyRetryDelay)",
          "",
          "---------------"
        ],
        "controllers/metal3.io/bmceventsubscription_controller.go||controllers/metal3.io/bmceventsubscription_controller.go": [
          "File: controllers/metal3.io/bmceventsubscription_controller.go -> controllers/metal3.io/bmceventsubscription_controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:   } else {",
          "108:    msg = err.Error()",
          "109:   }",
          "111:   return ctrl.Result{RequeueAfter: provisionerNotReadyRetryDelay}, nil",
          "112:  }",
          "",
          "[Removed Lines]",
          "110:   reqLogger.Info(\"provisioner is not ready\", \"Error\", msg, \"RequeueAfter:\", provisionerNotReadyRetryDelay)",
          "",
          "[Added Lines]",
          "110:   reqLogger.Info(\"provisioner is not ready\", \"Error:\", msg, \"RequeueAfter:\", provisionerNotReadyRetryDelay)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:   } else {",
          "230:    msg = err.Error()",
          "231:   }",
          "233:   return prov, ready, nil",
          "234:  }",
          "",
          "[Removed Lines]",
          "232:   reqLogger.Info(\"provisioner is not ready\", \"Error\", msg, \"RequeueAfter:\", provisionerNotReadyRetryDelay)",
          "",
          "[Added Lines]",
          "232:   reqLogger.Info(\"provisioner is not ready\", \"Error:\", msg, \"RequeueAfter:\", provisionerNotReadyRetryDelay)",
          "",
          "---------------"
        ]
      }
    }
  ]
}