{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1835be19b03483ce3bfaeef85ceb4684d245e940",
      "candidate_info": {
        "commit_hash": "1835be19b03483ce3bfaeef85ceb4684d245e940",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/1835be19b03483ce3bfaeef85ceb4684d245e940",
        "files": [
          "ambari-web/app/controllers/main/service/info/configs.js",
          "ambari-web/app/views/common/configs/service_config_view.js"
        ],
        "message": "AMBARI-24269 All input fields are disabled after validation - cancel - filter for something on advanced tab",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/service/info/configs.js||ambari-web/app/controllers/main/service/info/configs.js",
          "ambari-web/app/views/common/configs/service_config_view.js||ambari-web/app/views/common/configs/service_config_view.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/service/info/configs.js||ambari-web/app/controllers/main/service/info/configs.js": [
          "File: ambari-web/app/controllers/main/service/info/configs.js -> ambari-web/app/controllers/main/service/info/configs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:       self.trackRequest(self.loadServiceConfigVersions());",
          "364:     }));",
          "365:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:   saveConfigs: function() {",
          "368:     const newVersionToBeCreated = Math.max.apply(null, App.ServiceConfigVersion.find().mapProperty('version')) + 1;",
          "369:     const isDefault = this.get('selectedConfigGroup.name') === App.ServiceConfigGroup.defaultGroupName;",
          "370:     this.set('currentDefaultVersion', isDefault ? newVersionToBeCreated : this.get('currentDefaultVersion'));",
          "371:     this._super();",
          "372:   },",
          "",
          "---------------"
        ],
        "ambari-web/app/views/common/configs/service_config_view.js||ambari-web/app/views/common/configs/service_config_view.js": [
          "File: ambari-web/app/views/common/configs/service_config_view.js -> ambari-web/app/views/common/configs/service_config_view.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:       secondary: Em.I18n.t('common.cancel'),",
          "129:       onSave: function () {",
          "130:         const newVersionToBeCreated = Math.max.apply(null, App.ServiceConfigVersion.find().mapProperty('version')) + 1;",
          "132:         controller.setProperties({",
          "133:           saveConfigsFlag: true,",
          "134:           serviceConfigVersionNote: this.get('serviceConfigNote'),",
          "136:           preSelectedConfigVersion: Em.Object.create({",
          "137:             version: newVersionToBeCreated,",
          "138:             serviceName: controller.get('content.serviceName'),",
          "",
          "[Removed Lines]",
          "131:         const isDefault = controller.get('selectedConfigGroup.name') === App.ServiceConfigGroup.defaultGroupName;",
          "135:           currentDefaultVersion: isDefault ? newVersionToBeCreated : controller.get('currentDefaultVersion'),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "704342f10da431b783164f74a99c7e2dd34cf398",
      "candidate_info": {
        "commit_hash": "704342f10da431b783164f74a99c7e2dd34cf398",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/704342f10da431b783164f74a99c7e2dd34cf398",
        "files": [
          "ambari-web/app/mixins/common/configs/config_recommendation_parser.js",
          "ambari-web/app/views/common/controls_view.js"
        ],
        "message": "AMBARI-24246. Ambari does not pick the existing hive database from the jdbc url set",
        "before_after_code_files": [
          "ambari-web/app/mixins/common/configs/config_recommendation_parser.js||ambari-web/app/mixins/common/configs/config_recommendation_parser.js",
          "ambari-web/app/views/common/controls_view.js||ambari-web/app/views/common/controls_view.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mixins/common/configs/config_recommendation_parser.js||ambari-web/app/mixins/common/configs/config_recommendation_parser.js": [
          "File: ambari-web/app/mixins/common/configs/config_recommendation_parser.js -> ambari-web/app/mixins/common/configs/config_recommendation_parser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     var name = Em.get(config, 'name'),",
          "159:         fileName = Em.get(config, 'filename'),",
          "160:         group = Em.get(config, 'group.name'),",
          "163:     Em.set(config, 'recommendedValue', recommendedValue);",
          "164:     if (this.allowUpdateProperty(parentProperties, name, fileName, group, value)) {",
          "165:       var allowConfigUpdate = true;",
          "",
          "[Removed Lines]",
          "161:         value = Em.get(config, 'value');",
          "",
          "[Added Lines]",
          "160:         value = Em.get(config, 'value'),",
          "161:         prevRecommeneded = config.get('recommendedValue');",
          "163:     console.log('test123', config, recommendedValue)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:           allowConfigUpdate = false;",
          "171:         }",
          "172:       }",
          "173:       if (allowConfigUpdate) {",
          "174:         Em.setProperties(config, {",
          "175:           value: recommendedValue,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:       if (prevRecommeneded !== config.get('value')) {",
          "174:         allowConfigUpdate = false;",
          "175:       }",
          "",
          "---------------"
        ],
        "ambari-web/app/views/common/controls_view.js||ambari-web/app/views/common/controls_view.js": [
          "File: ambari-web/app/views/common/controls_view.js -> ambari-web/app/views/common/controls_view.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:          }]);",
          "114:       }",
          "115:     }",
          "124:     return $.Deferred().resolve().promise();",
          "125:   },",
          "",
          "[Removed Lines]",
          "118:     if (['oozie.service.JPAService.jdbc.url__oozie-site', 'javax.jdo.option.ConnectionURL__hive-site'].contains(config.get('id'))) {",
          "119:       controller.set('recommendationsInProgress', true);",
          "120:       controller.runServerSideValidation().done(function () {",
          "121:         controller.set('recommendationsInProgress', false)",
          "122:       });",
          "123:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c9c386565ffd8a4b96c6c2ea0a56a47be19f86d",
      "candidate_info": {
        "commit_hash": "5c9c386565ffd8a4b96c6c2ea0a56a47be19f86d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/5c9c386565ffd8a4b96c6c2ea0a56a47be19f86d",
        "files": [
          "ambari-web/app/mixins/common/configs/config_recommendation_parser.js"
        ],
        "message": "AMBARI-24246. Ambari does not pick the existing hive database from the jdbc url set",
        "before_after_code_files": [
          "ambari-web/app/mixins/common/configs/config_recommendation_parser.js||ambari-web/app/mixins/common/configs/config_recommendation_parser.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mixins/common/configs/config_recommendation_parser.js||ambari-web/app/mixins/common/configs/config_recommendation_parser.js": [
          "File: ambari-web/app/mixins/common/configs/config_recommendation_parser.js -> ambari-web/app/mixins/common/configs/config_recommendation_parser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:         fileName = Em.get(config, 'filename'),",
          "159:         group = Em.get(config, 'group.name'),",
          "160:         value = Em.get(config, 'value'),",
          "162:     Em.set(config, 'recommendedValue', recommendedValue);",
          "163:     if (this.allowUpdateProperty(parentProperties, name, fileName, group, value)) {",
          "164:       var allowConfigUpdate = true;",
          "",
          "[Removed Lines]",
          "161:         prevRecommeneded = config.get('recommendedValue');",
          "",
          "[Added Lines]",
          "161:         prevRecommeneded = Em.get(config, 'recommendedValue');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21f51eb533fe69f65201aed612367c105d4e9465",
      "candidate_info": {
        "commit_hash": "21f51eb533fe69f65201aed612367c105d4e9465",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/21f51eb533fe69f65201aed612367c105d4e9465",
        "files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py"
        ],
        "message": "AMBARI-24970 Set Hive pre-upgrade threshold for using Hive 1 jars to 3.1",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:       Execute(hive_kinit_cmd, user = params.hive_user)",
          "103:     # in the M10 release PreUpgradeTool was fixed to use Hive1 instead of Hive2",
          "105:       hive_lib_dir = format(\"{source_dir}/hive/lib\")",
          "106:     else:",
          "107:       hive_lib_dir = format(\"{source_dir}/hive2/lib\")",
          "",
          "[Removed Lines]",
          "104:     if target_version >= \"3.0.3\":",
          "",
          "[Added Lines]",
          "104:     if target_version >= \"3.1\":",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b99e2bf52cd4933160194a8cc0f25dbd07325a93",
      "candidate_info": {
        "commit_hash": "b99e2bf52cd4933160194a8cc0f25dbd07325a93",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b99e2bf52cd4933160194a8cc0f25dbd07325a93",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java"
        ],
        "message": "[AMBARI-24250] Create Checkpoint page stuck while Enabling HA on Namenode",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java||ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import java.io.IOException;",
          "29: import java.util.ArrayList;",
          "30: import java.util.Collection;",
          "31: import java.util.HashMap;",
          "32: import java.util.List;",
          "33: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: import org.apache.ambari.server.serveraction.kerberos.stageutils.KerberosKeytabController;",
          "48: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosKeytab;",
          "49: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosPrincipal;",
          "50: import org.apache.ambari.server.state.Clusters;",
          "51: import org.apache.ambari.server.utils.StageUtils;",
          "52: import org.apache.commons.codec.binary.Base64;",
          "53: import org.apache.commons.codec.digest.DigestUtils;",
          "54: import org.apache.commons.io.IOUtils;",
          "55: import org.slf4j.Logger;",
          "56: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.apache.ambari.server.state.Cluster;",
          "53: import org.apache.ambari.server.state.Service;",
          "57: import org.apache.commons.collections.MapUtils;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:     String dataDir = ec.getCommandParams().get(KerberosServerAction.DATA_DIRECTORY);",
          "179:     KerberosServerAction.KerberosCommandParameters kerberosCommandParameters = new KerberosServerAction.KerberosCommandParameters(ec);",
          "180:     if(dataDir != null) {",
          "181:       List<Map<String, String>> kcp = ec.getKerberosCommandParams();",
          "183:       try {",
          "185:         for (ResolvedKerberosKeytab resolvedKeytab : keytabsToInject) {",
          "186:           for(ResolvedKerberosPrincipal resolvedPrincipal: resolvedKeytab.getPrincipals()) {",
          "187:             String hostName = resolvedPrincipal.getHostName();",
          "",
          "[Removed Lines]",
          "177:   void injectKeytab(ExecutionCommand ec, String command, String targetHost) throws AmbariException {",
          "184:         Set<ResolvedKerberosKeytab> keytabsToInject = kerberosKeytabController.getFilteredKeytabs((Map<String, Collection<String>>)kerberosCommandParameters.getServiceComponentFilter(), kerberosCommandParameters.getHostFilter(), kerberosCommandParameters.getIdentityFilter());",
          "",
          "[Added Lines]",
          "181:   private void injectKeytab(ExecutionCommand ec, String command, String targetHost) throws AmbariException {",
          "188:         Map<String, Collection<String>> serviceComponentFilter = adjustServiceComponentFilter(ec.getClusterName(), kerberosCommandParameters.getServiceComponentFilter());",
          "189:         Set<ResolvedKerberosKeytab> keytabsToInject = kerberosKeytabController.getFilteredKeytabs(serviceComponentFilter, kerberosCommandParameters.getHostFilter(), kerberosCommandParameters.getIdentityFilter());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "210:                     keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_GROUP_ACCESS, resolvedKeytab.getGroupAccess());",
          "212:                     BufferedInputStream bufferedIn = new BufferedInputStream(new FileInputStream(keytabFile));",
          "214:                     try {",
          "215:                       keytabContent = IOUtils.toByteArray(bufferedIn);",
          "216:                     } finally {",
          "",
          "[Removed Lines]",
          "213:                     byte[] keytabContent = null;",
          "",
          "[Added Lines]",
          "218:                     byte[] keytabContent;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "252:       ec.setKerberosCommandParams(kcp);",
          "253:     }",
          "254:   }",
          "255: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:   private Map<String, Collection<String>> adjustServiceComponentFilter(String clusterName, Map<String, ? extends Collection<String>> serviceComponentFilter) throws AmbariException {",
          "262:     Map<String, Collection<String>> adjustedFilter = new HashMap<>();",
          "263:     Cluster cluster = clusters.getCluster(clusterName);",
          "265:     Map<String, Service> installedServices = (cluster == null) ? null : cluster.getServices();",
          "267:     if(!MapUtils.isEmpty(installedServices)) {",
          "268:       if (serviceComponentFilter != null) {",
          "270:         for(Map.Entry<String, ? extends Collection<String>> entry: serviceComponentFilter.entrySet()) {",
          "271:           String serviceName = entry.getKey();",
          "273:           if(installedServices.containsKey(serviceName)) {",
          "274:             adjustedFilter.put(serviceName, entry.getValue());",
          "275:           }",
          "276:         }",
          "277:       } else {",
          "279:         for(String serviceName: installedServices.keySet()) {",
          "281:           adjustedFilter.put(serviceName, Collections.singletonList(\"*\"));",
          "282:         }",
          "283:       }",
          "284:     }",
          "286:     return adjustedFilter;",
          "287:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:       Set<String> serviceSet = new HashSet<>();",
          "134:       Set<String> componentSet = new HashSet<>();",
          "135:       Set<String> serviceOnlySet = new HashSet<>();",
          "140:           serviceOnlySet.add(serviceName);",
          "143:           componentSet.addAll(serviceComponents);",
          "144:         }",
          "145:       }",
          "146:       List<KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter> result = new ArrayList<>();",
          "147:       if (serviceSet.size() > 0) {",
          "148:         result.add(new KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter(",
          "149:           null,",
          "",
          "[Removed Lines]",
          "136:       serviceSet.addAll(serviceComponentFilter.keySet());",
          "137:       for (String serviceName : serviceSet) {",
          "138:         Collection<String> serviceComponents = serviceComponentFilter.get(serviceName);",
          "139:         if (serviceComponents.contains(\"*\")) { // star means that this is filtered by whole SERVICE",
          "141:           serviceSet.remove(serviceName); // remove service from regular",
          "142:         } else {",
          "",
          "[Added Lines]",
          "138:       for(Map.Entry<String, Collection<String>> entry: serviceComponentFilter.entrySet()) {",
          "139:         String serviceName = entry.getKey();",
          "140:         Collection<String> serviceComponents = entry.getValue();",
          "142:         if((serviceComponents == null) || serviceComponents.contains(\"*\")) {",
          "144:         }",
          "145:         else {",
          "146:           serviceSet.add(serviceName);",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java||ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java -> ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1412:     List<Map<String, String>> kcp;",
          "1413:     Map<String, String> properties;",
          "1415:     kcp = testInjectKeytabSetKeytab(\"c6403.ambari.apache.org\");",
          "1416:     Assert.assertNotNull(kcp);",
          "1417:     Assert.assertEquals(1, kcp.size());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1415:     Cluster cluster = heartbeatTestHelper.getDummyCluster();",
          "1416:     Service hdfs = addService(cluster, HDFS);",
          "1417:     hdfs.addServiceComponent(DATANODE);",
          "1418:     hdfs.addServiceComponent(NAMENODE);",
          "1419:     hdfs.addServiceComponent(SECONDARY_NAMENODE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1449:   @Test",
          "1450:   public void testInjectKeytabNotApplicableHost() throws Exception {",
          "1451:     List<Map<String, String>> kcp;",
          "1452:     kcp = testInjectKeytabSetKeytab(\"c6401.ambari.apache.org\");",
          "1453:     Assert.assertNotNull(kcp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1457:     Cluster cluster = heartbeatTestHelper.getDummyCluster();",
          "1458:     Service hdfs = addService(cluster, HDFS);",
          "1459:     hdfs.addServiceComponent(DATANODE);",
          "1460:     hdfs.addServiceComponent(NAMENODE);",
          "1461:     hdfs.addServiceComponent(SECONDARY_NAMENODE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1469:     Map<String, String> commandparams = new HashMap<>();",
          "1470:     commandparams.put(KerberosServerAction.AUTHENTICATED_USER_NAME, \"admin\");",
          "1471:     executionCommand.setCommandParams(commandparams);",
          "1473:     final HostRoleCommand command = hostRoleCommandFactory.create(DummyHostname1,",
          "1474:         Role.DATANODE, null, null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1484:     executionCommand.setClusterName(DummyCluster);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1501:     Map<String, String> commandparams = new HashMap<>();",
          "1502:     commandparams.put(KerberosServerAction.AUTHENTICATED_USER_NAME, \"admin\");",
          "1503:     executionCommand.setCommandParams(commandparams);",
          "1505:     final HostRoleCommand command = hostRoleCommandFactory.create(DummyHostname1,",
          "1506:         Role.DATANODE, null, null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1517:     executionCommand.setClusterName(DummyCluster);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1525:   private File createTestKeytabData(AgentCommandsPublisher agentCommandsPublisher) throws Exception {",
          "1526:     KerberosKeytabController kerberosKeytabControllerMock = createMock(KerberosKeytabController.class);",
          "1528:       Sets.newHashSet(",
          "1529:         new ResolvedKerberosKeytab(",
          "1530:           \"/etc/security/keytabs/dn.service.keytab\",",
          "",
          "[Removed Lines]",
          "1527:     expect(kerberosKeytabControllerMock.getFilteredKeytabs(null,null,null)).andReturn(",
          "",
          "[Added Lines]",
          "1541:     Map<String, Collection<String>> filter = new HashMap<>();",
          "1542:     filter.put(\"HDFS\", Collections.singletonList(\"*\"));",
          "1543:     expect(kerberosKeytabControllerMock.getFilteredKeytabs(filter,null,null)).andReturn(",
          "",
          "---------------"
        ]
      }
    }
  ]
}