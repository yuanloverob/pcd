{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c77052fb2b81dc06d304f9e3d53c9b0f5e44b7fa",
      "candidate_info": {
        "commit_hash": "c77052fb2b81dc06d304f9e3d53c9b0f5e44b7fa",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/c77052fb2b81dc06d304f9e3d53c9b0f5e44b7fa",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.8dev+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019101200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev+ (Build: 20191012)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019101600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev+ (Build: 20191016)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e742f93303deff352bdfff3f16131a5ae76b1c07",
      "candidate_info": {
        "commit_hash": "e742f93303deff352bdfff3f16131a5ae76b1c07",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e742f93303deff352bdfff3f16131a5ae76b1c07",
        "files": [
          "backup/moodle2/restore_stepslib.php",
          "backup/util/dbops/restore_dbops.class.php",
          "backup/util/helper/restore_questions_parser_processor.class.php",
          "lang/en/question.php",
          "lib/db/upgrade.php",
          "lib/deprecatedlib.php",
          "lib/questionlib.php",
          "lib/tests/questionlib_test.php",
          "mod/quiz/addrandom.php",
          "mod/quiz/addrandomform.php",
          "question/category_class.php",
          "question/category_form.php",
          "question/classes/bank/search/category_condition.php",
          "question/editlib.php",
          "question/export_form.php",
          "question/format.php",
          "question/tests/behat/copy_questions.feature",
          "question/tests/behat/question_categories.feature",
          "question/tests/generator/lib.php",
          "question/tests/generator_test.php",
          "question/type/edit_question_form.php",
          "question/type/random/edit_random_form.php",
          "question/type/random/lang/en/qtype_random.php",
          "question/type/random/questiontype.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-61132-master' of git://github.com/rezaies/moodle",
        "before_after_code_files": [
          "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
          "backup/util/dbops/restore_dbops.class.php||backup/util/dbops/restore_dbops.class.php",
          "backup/util/helper/restore_questions_parser_processor.class.php||backup/util/helper/restore_questions_parser_processor.class.php",
          "lang/en/question.php||lang/en/question.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/deprecatedlib.php||lib/deprecatedlib.php",
          "lib/questionlib.php||lib/questionlib.php",
          "lib/tests/questionlib_test.php||lib/tests/questionlib_test.php",
          "mod/quiz/addrandom.php||mod/quiz/addrandom.php",
          "mod/quiz/addrandomform.php||mod/quiz/addrandomform.php",
          "question/category_class.php||question/category_class.php",
          "question/category_form.php||question/category_form.php",
          "question/classes/bank/search/category_condition.php||question/classes/bank/search/category_condition.php",
          "question/editlib.php||question/editlib.php",
          "question/export_form.php||question/export_form.php",
          "question/format.php||question/format.php",
          "question/tests/behat/copy_questions.feature||question/tests/behat/copy_questions.feature",
          "question/tests/behat/question_categories.feature||question/tests/behat/question_categories.feature",
          "question/tests/generator/lib.php||question/tests/generator/lib.php",
          "question/tests/generator_test.php||question/tests/generator_test.php",
          "question/type/edit_question_form.php||question/type/edit_question_form.php",
          "question/type/random/edit_random_form.php||question/type/random/edit_random_form.php",
          "question/type/random/lang/en/qtype_random.php||question/type/random/lang/en/qtype_random.php",
          "question/type/random/questiontype.php||question/type/random/questiontype.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php": [
          "File: backup/moodle2/restore_stepslib.php -> backup/moodle2/restore_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4394:         }",
          "4395:         $data->contextid = $mapping->parentitemid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4399:         $backuprelease = floatval($this->get_task()->get_info()->backup_release);",
          "4400:         preg_match('/(\\d{8})/', $this->get_task()->get_info()->moodle_release, $matches);",
          "4401:         $backupbuild = (int)$matches[1];",
          "4402:         $before35 = false;",
          "4403:         if ($backuprelease < 3.5 || $backupbuild < 20180205) {",
          "4404:             $before35 = true;",
          "4405:         }",
          "4406:         if (empty($mapping->info->parent) &&",
          "4407:                 ($before35 || $mapping->info->contextlevel == CONTEXT_MODULE)) {",
          "4408:             $top = question_get_top_category($data->contextid, true);",
          "4409:             $data->parent = $top->id;",
          "4410:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4554:                      'backupid' => $this->get_restoreid(),",
          "4555:                      'itemname' => 'question_category_created'));",
          "4556:         foreach ($qcats as $qcat) {",
          "4558:             $dbcat = $DB->get_record('question_categories', array('id' => $qcat->newitemid));",
          "4560:             if ($newparent = $DB->get_field('backup_ids_temp', 'newitemid', array(",
          "",
          "[Removed Lines]",
          "4557:             $newparent = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4570:                 }",
          "4571:             }",
          "4575:             }",
          "4576:         }",
          "",
          "[Removed Lines]",
          "4573:             if (!$newparent) {",
          "4574:                 $DB->set_field('question_categories', 'parent', 0, array('id' => $dbcat->id));",
          "",
          "[Added Lines]",
          "4587:             if (!$newparent && $dbcat->parent) {",
          "4588:                 $topcat = question_get_top_category($dbcat->contextid, true);",
          "4589:                 if ($dbcat->parent != $topcat->id) {",
          "4590:                     $DB->set_field('question_categories', 'parent', $topcat->id, array('id' => $dbcat->id));",
          "4591:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4580:                   'backupid' => $this->get_restoreid(),",
          "4581:                   'itemname' => 'question_created'));",
          "4582:         foreach ($qs as $q) {",
          "4584:             $dbq = $DB->get_record('question', array('id' => $q->newitemid));",
          "4586:             if ($newparent = $DB->get_field('backup_ids_temp', 'newitemid', array(",
          "",
          "[Removed Lines]",
          "4583:             $newparent = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4609:     protected function define_execution() {",
          "4610:         global $DB;",
          "4612:         $contexts = restore_dbops::restore_get_question_banks($this->get_restoreid(), CONTEXT_MODULE);",
          "4613:         foreach ($contexts as $contextid => $contextlevel) {",
          "4615:             if ($newcontext = restore_dbops::get_backup_ids_record($this->get_restoreid(), 'context', $contextid)) {",
          "4618:                                                       FROM {backup_ids_temp}",
          "4619:                                                      WHERE backupid = ?",
          "4620:                                                        AND itemname = 'question_category'",
          "4621:                                                        AND parentitemid = ?\", array($this->get_restoreid(), $contextid));",
          "4622:                 foreach ($modulecats as $modulecat) {",
          "4626:                     restore_dbops::set_backup_ids_record($this->get_restoreid(), 'question_category', $modulecat->itemid, $modulecat->newitemid, $newcontext->newitemid);",
          "",
          "[Removed Lines]",
          "4617:                 $modulecats = $DB->get_records_sql(\"SELECT itemid, newitemid",
          "4623:                     $DB->set_field('question_categories', 'contextid', $newcontext->newitemid, array('id' => $modulecat->newitemid));",
          "",
          "[Added Lines]",
          "4628:         $backuprelease = floatval($this->task->get_info()->backup_release);",
          "4629:         preg_match('/(\\d{8})/', $this->task->get_info()->moodle_release, $matches);",
          "4630:         $backupbuild = (int)$matches[1];",
          "4631:         $before35 = false;",
          "4632:         if ($backuprelease < 3.5 || $backupbuild < 20180205) {",
          "4633:             $before35 = true;",
          "4634:         }",
          "4641:                 $modulecats = $DB->get_records_sql(\"SELECT itemid, newitemid, info",
          "4647:                     $cat = new stdClass();",
          "4648:                     $cat->id = $modulecat->newitemid;",
          "4649:                     $cat->contextid = $newcontext->newitemid;",
          "4653:                     $info = backup_controller_dbops::decode_backup_temp_info($modulecat->info);",
          "4654:                     if ($before35 && empty($info->parent)) {",
          "4655:                         $top = question_get_top_category($newcontext->newitemid, true);",
          "4656:                         $cat->parent = $top->id;",
          "4657:                     }",
          "4658:                     $DB->update_record('question_categories', $cat);",
          "",
          "---------------"
        ],
        "backup/util/dbops/restore_dbops.class.php||backup/util/dbops/restore_dbops.class.php": [
          "File: backup/util/dbops/restore_dbops.class.php -> backup/util/dbops/restore_dbops.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "562:     public static function prechek_precheck_qbanks_by_level($restoreid, $courseid, $userid, $samesite, $contextlevel) {",
          "566:         $errors   = array();",
          "",
          "[Removed Lines]",
          "563:         global $CFG, $DB;",
          "",
          "[Added Lines]",
          "570:         global $DB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "571:             CONTEXT_SYSTEM => CONTEXT_COURSE,",
          "572:             CONTEXT_COURSECAT => CONTEXT_COURSE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581:         $rc = restore_controller_dbops::load_controller($restoreid);",
          "582:         $restoreinfo = $rc->get_info();",
          "583:         $rc->destroy(); // Always need to destroy.",
          "584:         $backuprelease = floatval($restoreinfo->backup_release);",
          "585:         preg_match('/(\\d{8})/', $restoreinfo->moodle_release, $matches);",
          "586:         $backupbuild = (int)$matches[1];",
          "587:         $after35 = false;",
          "588:         if ($backuprelease >= 3.5 && $backupbuild > 20180205) {",
          "589:             $after35 = true;",
          "590:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "597:             $canmanagecategory = false;",
          "598:             $canadd            = false;",
          "600:             $categories = self::restore_get_question_categories($restoreid, $contextid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:             $topcats = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "605:             }",
          "607:             foreach ($categories as $category) {",
          "608:                 $matchcat = false;",
          "609:                 if ($targetcontext) {",
          "610:                     $matchcat = $DB->get_record('question_categories', array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629:                 if ($category->parent == 0) {",
          "630:                     $topcats++;",
          "631:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "690:                     }",
          "691:                 }",
          "692:             }",
          "693:         }",
          "695:         return array($errors, $warnings);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "720:             if ($after35 && $topcats > 1) {",
          "721:                 $errors[] = get_string('restoremultipletopcats', 'questions', $contextid);",
          "722:             }",
          "",
          "---------------"
        ],
        "backup/util/helper/restore_questions_parser_processor.class.php||backup/util/helper/restore_questions_parser_processor.class.php": [
          "File: backup/util/helper/restore_questions_parser_processor.class.php -> backup/util/helper/restore_questions_parser_processor.class.php"
        ],
        "lang/en/question.php||lang/en/question.php": [
          "File: lang/en/question.php -> lang/en/question.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: $string['cannotdeleteneededbehaviour'] = 'Cannot delete the question behaviour \\'{$a}\\'. There are other behaviours installed that rely on it.';",
          "42: $string['cannotdeleteqtypeinuse'] = 'You cannot delete the question type \\'{$a}\\'. There are questions of this type in the question bank.';",
          "43: $string['cannotdeleteqtypeneeded'] = 'You cannot delete the question type \\'{$a}\\'. There are other question types installed that rely on it.';",
          "44: $string['cannotenable'] = 'Question type {$a} cannot be created directly.';",
          "45: $string['cannotenablebehaviour'] = 'Question behaviour {$a} cannot be used directly. It is for internal use only.';",
          "46: $string['cannotfindcate'] = 'Could not find category record';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: $string['cannotdeletetopcat'] = 'Top categories can not be deleted.';",
          "45: $string['cannotedittopcat'] = 'Top categories can not be edited.';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398: $string['responsehistory'] = 'Response history';",
          "399: $string['restart'] = 'Start again';",
          "400: $string['restartwiththeseoptions'] = 'Start again with these options';",
          "401: $string['rightanswer'] = 'Right answer';",
          "402: $string['rightanswer_help'] = 'an automatically generated summary of the correct response. This can be limited, so you may wish to consider explaining the correct solution in the general feedback for the question, and turning this option off.';",
          "403: $string['saved'] = 'Saved: {$a}';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: $string['restoremultipletopcats'] = 'The backup file contains more than one top-level question categories for context {$a}.';",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1935:         upgrade_main_savepoint(true, 2017122200.01);",
          "1936:     }",
          "1938:     return true;",
          "1939: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1938:     if ($oldversion < 2018020500.00) {",
          "1940:         $topcategory = new stdClass();",
          "1941:         $topcategory->name = 'top'; // A non-real name for the top category. It will be localised at the display time.",
          "1942:         $topcategory->info = '';",
          "1943:         $topcategory->parent = 0;",
          "1944:         $topcategory->sortorder = 0;",
          "1947:         $total = $DB->count_records_sql(\"SELECT COUNT(DISTINCT contextid) FROM {question_categories} WHERE parent = 0\");",
          "1950:         $rs = $DB->get_recordset_sql(\"SELECT DISTINCT contextid FROM {question_categories} WHERE parent = 0\");",
          "1953:         $i = 0;",
          "1954:         $pbar = new progress_bar('createtopquestioncategories', 500, true);",
          "1955:         foreach ($rs as $contextid => $notused) {",
          "1956:             $topcategory->contextid = $contextid;",
          "1957:             $topcategory->stamp = make_unique_id_code();",
          "1959:             $topcategoryid = $DB->insert_record('question_categories', $topcategory);",
          "1961:             $DB->set_field_select('question_categories', 'parent', $topcategoryid,",
          "1962:                     'contextid = ? AND id <> ? AND parent = 0',",
          "1963:                     array($contextid, $topcategoryid));",
          "1966:             $i++;",
          "1967:             $pbar->update($i, $total, \"Creating top-level question categories - $i/$total.\");",
          "1968:         }",
          "1970:         $rs->close();",
          "1973:         upgrade_main_savepoint(true, 2018020500.00);",
          "1974:     }",
          "",
          "---------------"
        ],
        "lib/deprecatedlib.php||lib/deprecatedlib.php": [
          "File: lib/deprecatedlib.php -> lib/deprecatedlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "6535:     core_role_set_switch_allowed($fromroleid, $targetroleid);",
          "6536: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6546: function question_add_tops($categories, $pcontexts) {",
          "6547:     debugging('question_add_tops() has been deprecated. You may want to pass $top = true to get_categories_for_contexts().',",
          "6548:             DEBUG_DEVELOPER);",
          "6550:     $topcats = array();",
          "6551:     foreach ($pcontexts as $context) {",
          "6552:         $topcat = question_get_top_category($context, true);",
          "6554:         $newcat = new stdClass();",
          "6555:         $newcat->id = \"{$topcat->id},$context\";",
          "6556:         $newcat->name = get_string('top');",
          "6557:         $newcat->parent = 0;",
          "6558:         $newcat->contextid = $context;",
          "6559:         $topcats[\"{$topcat->id},$context\"] = $newcat;",
          "6560:     }",
          "6562:     return array_merge($topcats, $categories);",
          "6563: }",
          "6572: function question_is_only_toplevel_category_in_context($categoryid) {",
          "6573:     debugging('question_is_only_toplevel_category_in_context() has been deprecated. '",
          "6574:             . 'Please update your code to use question_is_only_child_of_top_category_in_context() instead.',",
          "6575:             DEBUG_DEVELOPER);",
          "6577:     return question_is_only_child_of_top_category_in_context($categoryid);",
          "6578: }",
          "",
          "---------------"
        ],
        "lib/questionlib.php||lib/questionlib.php": [
          "File: lib/questionlib.php -> lib/questionlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "972: function question_category_select_menu($contexts, $top = false, $currentcat = 0,",
          "973:         $selected = \"\", $nochildrenof = -1) {",
          "975:     $categoriesarray = question_category_options($contexts, $top, $currentcat,",
          "976:             false, $nochildrenof);",
          "977:     if ($selected) {",
          "",
          "[Removed Lines]",
          "974:     global $OUTPUT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "995: function question_get_default_category($contextid) {",
          "996:     global $DB;",
          "999:     if (!empty($category)) {",
          "1000:         return reset($category);",
          "1001:     } else {",
          "",
          "[Removed Lines]",
          "997:     $category = $DB->get_records('question_categories',",
          "998:             array('contextid' => $contextid), 'id', '*', 0, 1);",
          "",
          "[Added Lines]",
          "996:     $category = $DB->get_records_select('question_categories', 'contextid = ? AND parent <> 0',",
          "997:             array($contextid), 'id', '*', 0, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1003:     }",
          "1004: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1013: function question_get_top_category($contextid, $create = false) {",
          "1014:     global $DB;",
          "1015:     $category = $DB->get_record('question_categories',",
          "1016:             array('contextid' => $contextid, 'parent' => 0));",
          "1018:     if (!$category && $create) {",
          "1020:         $category = new stdClass();",
          "1021:         $category->name = 'top'; // A non-real name for the top category. It will be localised at the display time.",
          "1022:         $category->info = '';",
          "1023:         $category->contextid = $contextid;",
          "1024:         $category->parent = 0;",
          "1025:         $category->sortorder = 0;",
          "1026:         $category->stamp = make_unique_id_code();",
          "1027:         $category->id = $DB->insert_record('question_categories', $category);",
          "1028:     }",
          "1030:     return $category;",
          "1031: }",
          "1039: function question_get_top_categories_for_contexts($contextids) {",
          "1040:     global $DB;",
          "1042:     $concatsql = $DB->sql_concat_join(\"','\", ['id', 'contextid']);",
          "1043:     list($insql, $params) = $DB->get_in_or_equal($contextids);",
          "1044:     $sql = \"SELECT $concatsql FROM {question_categories} WHERE contextid $insql AND parent = 0\";",
          "1045:     $topcategories = $DB->get_fieldset_sql($sql, $params);",
          "1047:     return $topcategories;",
          "1048: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1023:     $preferredness = 0;",
          "1025:     foreach ($contexts as $key => $context) {",
          "1026:         if (!$exists = $DB->record_exists(\"question_categories\",",
          "1029:             $category = new stdClass();",
          "1030:             $contextname = $context->get_context_name(false, true);",
          "1031:             $category->name = get_string('defaultfor', 'question', $contextname);",
          "1032:             $category->info = get_string('defaultinfofor', 'question', $contextname);",
          "1033:             $category->contextid = $context->id;",
          "1036:             $category->sortorder = 999;",
          "1037:             $category->stamp = make_unique_id_code();",
          "",
          "[Removed Lines]",
          "1027:                 array('contextid' => $context->id))) {",
          "1034:             $category->parent = 0;",
          "",
          "[Added Lines]",
          "1070:         $topcategory = question_get_top_category($context->id, true);",
          "1072:                 array('contextid' => $context->id, 'parent' => $topcategory->id))) {",
          "1079:             $category->parent = $topcategory->id;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1067:     global $DB;",
          "1068:     return $DB->get_records_sql(\"",
          "1069:             SELECT c.*, (SELECT count(1) FROM {question} q",
          "1070:                         WHERE c.id = q.category AND q.hidden='0' AND q.parent='0') AS questioncount",
          "1071:               FROM {question_categories} c",
          "1073:           ORDER BY $sortorder\");",
          "1074: }",
          "1079: function question_category_options($contexts, $top = false, $currentcat = 0,",
          "1080:         $popupform = false, $nochildrenof = -1) {",
          "",
          "[Removed Lines]",
          "1066: function get_categories_for_contexts($contexts, $sortorder = 'parent, sortorder, name ASC') {",
          "1072:              WHERE c.contextid IN ($contexts)",
          "",
          "[Added Lines]",
          "1112: function get_categories_for_contexts($contexts, $sortorder = 'parent, sortorder, name ASC', $top = false) {",
          "1114:     $topwhere = $top ? '' : 'AND c.parent <> 0';",
          "1119:              WHERE c.contextid IN ($contexts) $topwhere",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1085:     }",
          "1086:     $contextslist = join($pcontexts, ', ');",
          "1092:     if ($top) {",
          "1094:     }",
          "1095:     $categories = add_indented_names($categories, $nochildrenof);",
          "",
          "[Removed Lines]",
          "1088:     $categories = get_categories_for_contexts($contextslist);",
          "1090:     $categories = question_add_context_in_key($categories);",
          "1093:         $categories = question_add_tops($categories, $pcontexts);",
          "",
          "[Added Lines]",
          "1142:     $categories = get_categories_for_contexts($contextslist, 'parent, sortorder, name ASC', $top);",
          "1145:         $categories = question_fix_top_names($categories);",
          "1148:     $categories = question_add_context_in_key($categories);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1138:     return $newcatarray;",
          "1139: }",
          "1150:     }",
          "1153: }",
          "",
          "[Removed Lines]",
          "1141: function question_add_tops($categories, $pcontexts) {",
          "1142:     $topcats = array();",
          "1143:     foreach ($pcontexts as $context) {",
          "1144:         $newcat = new stdClass();",
          "1145:         $newcat->id = \"0,$context\";",
          "1146:         $newcat->name = get_string('top');",
          "1147:         $newcat->parent = -1;",
          "1148:         $newcat->contextid = $context;",
          "1149:         $topcats[\"0,$context\"] = $newcat;",
          "1152:     return array_merge($topcats, $categories);",
          "",
          "[Added Lines]",
          "1201: function question_fix_top_names($categories) {",
          "1203:     foreach ($categories as $id => $category) {",
          "1204:         if ($category->parent == 0) {",
          "1205:             $categories[$id]->name = get_string('top');",
          "1206:         }",
          "1209:     return $categories;",
          "",
          "---------------"
        ],
        "lib/tests/questionlib_test.php||lib/tests/questionlib_test.php": [
          "File: lib/tests/questionlib_test.php -> lib/tests/questionlib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:         $rc->execute_plan();",
          "256:         $this->assertEquals(2, $DB->count_records('question', array('category' => $restoredcategory->id)));",
          "",
          "[Removed Lines]",
          "252:         $restoredcategory = $DB->get_record('question_categories', array('contextid' => context_course::instance($course2->id)->id),",
          "253:             '*', MUST_EXIST);",
          "",
          "[Added Lines]",
          "252:         $restoredcategory = $DB->get_record_select('question_categories', 'contextid = ? AND parent <> 0',",
          "253:                 array(context_course::instance($course2->id)->id), '*', MUST_EXIST);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:         $this->assertEquals(0, $DB->count_records('question', $criteria));",
          "337:         $expected[] = array($qcat->name, get_string('unusedcategorydeleted', 'question'));",
          "338:         $this->assertEquals($expected, $result);",
          "339:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:         $expected[] = array('top', get_string('unusedcategorydeleted', 'question'));",
          "",
          "---------------"
        ],
        "mod/quiz/addrandom.php||mod/quiz/addrandom.php": [
          "File: mod/quiz/addrandom.php -> mod/quiz/addrandom.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     if (!empty($data->existingcategory)) {",
          "86:         list($categoryid) = explode(',', $data->category);",
          "87:         $includesubcategories = !empty($data->includesubcategories);",
          "88:         $returnurl->param('cat', $data->category);",
          "90:     } else if (!empty($data->newcategory)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:         if (!$includesubcategories) {",
          "90:             $includesubcategories = $DB->record_exists('question_categories', ['id' => $categoryid, 'parent' => 0]);",
          "91:         }",
          "",
          "---------------"
        ],
        "mod/quiz/addrandomform.php||mod/quiz/addrandomform.php": [
          "File: mod/quiz/addrandomform.php -> mod/quiz/addrandomform.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: class quiz_add_random_form extends moodleform {",
          "39:     protected function definition() {",
          "41:         $mform =& $this->_form;",
          "42:         $mform->setDisableShortforms();",
          "",
          "[Removed Lines]",
          "40:         global $CFG, $DB;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:                 get_string('randomfromexistingcategory', 'quiz'));",
          "51:         $mform->addElement('questioncategory', 'category', get_string('category'),",
          "53:         $mform->setDefault('category', $this->_customdata['cat']);",
          "55:         $mform->addElement('checkbox', 'includesubcategories', '', get_string('recurse', 'quiz'));",
          "57:         $mform->addElement('select', 'numbertoadd', get_string('randomnumber', 'quiz'),",
          "58:                 $this->get_number_of_questions_to_add_choices());",
          "",
          "[Removed Lines]",
          "52:                 array('contexts' => $usablecontexts, 'top' => false));",
          "",
          "[Added Lines]",
          "51:                 array('contexts' => $usablecontexts, 'top' => true));",
          "56:         $tops = question_get_top_categories_for_contexts(array_column($contexts->all(), 'id'));",
          "57:         $mform->hideIf('includesubcategories', 'category', 'in', $tops);",
          "",
          "---------------"
        ],
        "question/category_class.php||question/category_class.php": [
          "File: question/category_class.php -> question/category_class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:         $item .= format_text($category->info, $category->infoformat,",
          "113:                 array('context' => $this->parentlist->context, 'noclean' => true));",
          "117:             $deleteurl = new moodle_url($this->parentlist->pageurl, array('delete' => $this->id, 'sesskey' => sesskey()));",
          "118:             $item .= html_writer::link($deleteurl,",
          "119:                     $OUTPUT->pix_icon('t/delete', $str->delete),",
          "",
          "[Removed Lines]",
          "116:         if (!question_is_only_toplevel_category_in_context($category->id)) {",
          "",
          "[Added Lines]",
          "116:         if ($category->parent && !question_is_only_child_of_top_category_in_context($category->id)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:     public function edit_single_category($categoryid) {",
          "302:             $category->parent = \"{$category->parent},{$category->contextid}\";",
          "303:             $category->submitbutton = get_string('savechanges');",
          "304:             $category->categoryheader = $this->str->edit;",
          "305:             $this->catform->set_data($category);",
          "306:             $this->catform->display();",
          "309:         }",
          "310:     }",
          "",
          "[Removed Lines]",
          "298:         global $COURSE, $DB;",
          "300:         if ($category = $DB->get_record(\"question_categories\", array(\"id\" => $categoryid))) {",
          "307:         } else {",
          "308:             print_error('invalidcategory', '', '', $categoryid);",
          "",
          "[Added Lines]",
          "298:         global $DB;",
          "300:         $category = $DB->get_record(\"question_categories\", array(\"id\" => $categoryid));",
          "301:         if (empty($category)) {",
          "302:             print_error('invalidcategory', '', '', $categoryid);",
          "303:         } else if ($category->parent == 0) {",
          "304:             print_error('cannotedittopcat', 'question', '', $categoryid);",
          "305:         } else {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "442:         $oldcat = $DB->get_record('question_categories', array('id' => $updateid));",
          "445:         if (!empty($newparent) && !$lastcategoryinthiscontext) {",
          "446:             list($parentid, $tocontextid) = explode(',', $newparent);",
          "",
          "[Removed Lines]",
          "443:         $lastcategoryinthiscontext = question_is_only_toplevel_category_in_context($updateid);",
          "",
          "[Added Lines]",
          "445:         $lastcategoryinthiscontext = question_is_only_child_of_top_category_in_context($updateid);",
          "",
          "---------------"
        ],
        "question/category_form.php||question/category_form.php": [
          "File: question/category_form.php -> question/category_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: class question_category_edit_form extends moodleform {",
          "40:     protected function definition() {",
          "42:         $mform    = $this->_form;",
          "44:         $contexts   = $this->_customdata['contexts'];",
          "",
          "[Removed Lines]",
          "41:         global $CFG, $DB;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         $mform->addElement('header', 'categoryheader', get_string('addcategory', 'question'));",
          "51:         $mform->setType('parent', PARAM_SEQUENCE);",
          "53:             $mform->hardFreeze('parent');",
          "54:         }",
          "55:         $mform->addHelpButton('parent', 'parentcategory', 'question');",
          "",
          "[Removed Lines]",
          "49:         $questioncategoryel = $mform->addElement('questioncategory', 'parent', get_string('parentcategory', 'question'),",
          "50:                     array('contexts'=>$contexts, 'top'=>true, 'currentcat'=>$currentcat, 'nochildrenof'=>$currentcat));",
          "52:         if (question_is_only_toplevel_category_in_context($currentcat)) {",
          "",
          "[Added Lines]",
          "48:         $mform->addElement('questioncategory', 'parent', get_string('parentcategory', 'question'),",
          "49:                 array('contexts' => $contexts, 'top' => true, 'currentcat' => $currentcat, 'nochildrenof' => $currentcat));",
          "51:         if (question_is_only_child_of_top_category_in_context($currentcat)) {",
          "",
          "---------------"
        ],
        "question/classes/bank/search/category_condition.php||question/classes/bank/search/category_condition.php": [
          "File: question/classes/bank/search/category_condition.php -> question/classes/bank/search/category_condition.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:     protected function display_category_form($contexts, $pageurl, $current) {",
          "135:         echo \\html_writer::start_div('choosecategory');",
          "137:         echo \\html_writer::label(get_string('selectacategory', 'question'), 'id_selectacategory');",
          "139:         echo \\html_writer::end_div() . \"\\n\";",
          "140:     }",
          "",
          "[Removed Lines]",
          "133:         global $OUTPUT;",
          "136:         $catmenu = question_category_options($contexts, false, 0, true);",
          "138:         echo \\html_writer::select($catmenu, 'category', $current, array(), array('class' => 'searchoptions custom-select', 'id' => 'id_selectacategory'));",
          "",
          "[Added Lines]",
          "134:         $catmenu = question_category_options($contexts, true, 0, true);",
          "136:         echo \\html_writer::select($catmenu, 'category', $current, array(),",
          "137:                 array('class' => 'searchoptions custom-select', 'id' => 'id_selectacategory'));",
          "",
          "---------------"
        ],
        "question/editlib.php||question/editlib.php": [
          "File: question/editlib.php -> question/editlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: }",
          "102:     global $DB;",
          "103:     return 1 == $DB->count_records_sql(\"",
          "104:             SELECT count(*)",
          "110: }",
          "117: function question_can_delete_cat($todelete) {",
          "118:     global $DB;",
          "120:         print_error('cannotdeletecate', 'question');",
          "121:     } else {",
          "122:         $contextid = $DB->get_field('question_categories', 'contextid', array('id' => $todelete));",
          "",
          "[Removed Lines]",
          "101: function question_is_only_toplevel_category_in_context($categoryid) {",
          "105:               FROM {question_categories} c1,",
          "106:                    {question_categories} c2",
          "107:              WHERE c2.id = ?",
          "108:                AND c1.contextid = c2.contextid",
          "109:                AND c1.parent = 0 AND c2.parent = 0\", array($categoryid));",
          "119:     if (question_is_only_toplevel_category_in_context($todelete)) {",
          "",
          "[Added Lines]",
          "103: function question_is_only_child_of_top_category_in_context($categoryid) {",
          "107:               FROM {question_categories} c",
          "108:               JOIN {question_categories} p ON c.parent = p.id",
          "109:               JOIN {question_categories} s ON s.parent = c.parent",
          "110:              WHERE c.id = ? AND p.parent = 0\", array($categoryid));",
          "111: }",
          "119: function question_is_top_category($categoryid) {",
          "120:     global $DB;",
          "121:     return 0 == $DB->get_field('question_categories', 'parent', array('id' => $categoryid));",
          "131:     if (question_is_top_category($todelete)) {",
          "132:         print_error('cannotdeletetopcat', 'question');",
          "133:     } else if (question_is_only_child_of_top_category_in_context($todelete)) {",
          "",
          "---------------"
        ],
        "question/export_form.php||question/export_form.php": [
          "File: question/export_form.php -> question/export_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         $mform->addElement('header', 'general', get_string('general', 'form'));",
          "73:         $mform->setDefault('category', $defaultcategory);",
          "74:         $mform->addHelpButton('category', 'exportcategory', 'question');",
          "",
          "[Removed Lines]",
          "72:         $mform->addElement('questioncategory', 'category', get_string('exportcategory', 'question'), compact('contexts'));",
          "",
          "[Added Lines]",
          "72:         $mform->addElement('questioncategory', 'category', get_string('exportcategory', 'question'),",
          "73:                 array('contexts' => $contexts, 'top' => true));",
          "",
          "---------------"
        ],
        "question/format.php||question/format.php": [
          "File: question/format.php -> question/format.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "499:             $contextid = false;",
          "500:         }",
          "502:         if ($this->contextfromfile && $contextid !== false) {",
          "503:             $context = context::instance_by_id($contextid);",
          "504:             require_capability('moodle/question:add', $context);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504:         if (isset($catnames[0]) && (($catnames[0] != 'top') || (count($catnames) < 3))) {",
          "505:             array_unshift($catnames, 'top');",
          "506:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "511:         foreach ($catnames as $catname) {",
          "513:                     array('name' => $catname, 'contextid' => $context->id, 'parent' => $parent))) {",
          "514:                 $parent = $category->id;",
          "515:             } else {",
          "516:                 require_capability('moodle/question:managecategory', $context);",
          "",
          "[Removed Lines]",
          "512:             if ($category = $DB->get_record('question_categories',",
          "",
          "[Added Lines]",
          "518:             if ($parent == 0) {",
          "519:                 $category = question_get_top_category($context->id, true);",
          "520:                 $parent = $category->id;",
          "521:             } else if ($category = $DB->get_record('question_categories',",
          "524:             } else if ($parent == 0) {",
          "525:                 $category = question_get_top_category($context->id, true);",
          "526:                 $parent = $category->id;",
          "",
          "---------------"
        ],
        "question/tests/behat/copy_questions.feature||question/tests/behat/copy_questions.feature": [
          "File: question/tests/behat/copy_questions.feature -> question/tests/behat/copy_questions.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     When I click on \"Duplicate\" \"link\" in the \"Test question to be copied\" \"table_row\"",
          "47:     And I press \"Cancel\"",
          "48:     Then I should see \"Test question to be copied\"",
          "",
          "[Removed Lines]",
          "49:     And the field \"Select a category\" matches value \"Test questions (1)\"",
          "",
          "[Added Lines]",
          "49:     And the field \"Select a category\" matches value \"&nbsp;&nbsp;&nbsp;Test questions (1)\"",
          "",
          "---------------"
        ],
        "question/tests/behat/question_categories.feature||question/tests/behat/question_categories.feature": [
          "File: question/tests/behat/question_categories.feature -> question/tests/behat/question_categories.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: Feature: A teacher can put questions in categories in the question bank",
          "3:   In order to organize my questions",
          "4:   As a teacher",
          "",
          "[Removed Lines]",
          "1: @core @core_question",
          "",
          "[Added Lines]",
          "1: @core @core_question @javascript",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:       | teacher1 | C1 | editingteacher |",
          "17:     And the following \"question categories\" exist:",
          "18:       | contextlevel | reference | questioncategory | name           |",
          "20:       | Course       | C1        | Default for C1   | Subcategory    |",
          "22:     And the following \"questions\" exist:",
          "23:       | questioncategory | qtype | name                      | questiontext                  |",
          "24:       | Used category    | essay | Test question to be moved | Write about whatever you want |",
          "",
          "[Removed Lines]",
          "19:       | Course       | C1        | Top              | Default for C1 |",
          "21:       | Course       | C1        | Top              | Used category  |",
          "",
          "[Added Lines]",
          "19:       | Course       | C1        | Top              | top            |",
          "20:       | Course       | C1        | top              | Default for C1 |",
          "22:       | Course       | C1        | top              | Used category  |",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:   Scenario: A question category can be edited",
          "39:     When I navigate to \"Categories\" node in \"Course administration > Question bank\"",
          "40:     And I click on \"Edit\" \"link\" in the \"Subcategory\" \"list_item\"",
          "42:     And I set the following fields to these values:",
          "43:       | Name            | New name     |",
          "44:       | Category info   | I was edited |",
          "",
          "[Removed Lines]",
          "41:     And the field \"parent\" matches value \"\u00a0\u00a0\u00a0Default for C1\"",
          "",
          "[Added Lines]",
          "42:     And the field \"parent\" matches value \"&nbsp;&nbsp;&nbsp;Default for C1\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "67:     And I set the field \"Question category\" to \"Subcategory\"",
          "68:     And I press \"Move to >>\"",
          "69:     Then I should see \"Test question to be moved\"",
          "71:     And the \"Select a category\" select box should contain \"Used category\"",
          "72:     And the \"Select a category\" select box should not contain \"Used category (1)\"",
          "",
          "[Removed Lines]",
          "70:     And the field \"Select a category\" matches value \"&nbsp;&nbsp;&nbsp;Subcategory (1)\"",
          "",
          "[Added Lines]",
          "71:     And the field \"Select a category\" matches value \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subcategory (1)\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "80:     And I set the field \"Save in category\" to \"Subcategory\"",
          "81:     And I press \"id_submitbutton\"",
          "82:     Then I should see \"Test question to be moved\"",
          "84:     And the \"Select a category\" select box should contain \"Used category\"",
          "85:     And the \"Select a category\" select box should not contain \"Used category (1)\"",
          "",
          "[Removed Lines]",
          "83:     And the field \"Select a category\" matches value \"&nbsp;&nbsp;&nbsp;Subcategory (1)\"",
          "",
          "[Added Lines]",
          "84:     And the field \"Select a category\" matches value \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subcategory (1)\"",
          "",
          "---------------"
        ],
        "question/tests/generator/lib.php||question/tests/generator/lib.php": [
          "File: question/tests/generator/lib.php -> question/tests/generator/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         $defaults = array(",
          "49:             'name'       => 'Test question category ' . $this->categorycount,",
          "51:             'info'       => '',",
          "52:             'infoformat' => FORMAT_HTML,",
          "53:             'stamp'      => make_unique_id_code(),",
          "55:             'sortorder'  => 999,",
          "56:         );",
          "58:         $record = $this->datagenerator->combine_defaults_and_record($defaults, $record);",
          "59:         $record['id'] = $DB->insert_record('question_categories', $record);",
          "60:         return (object) $record;",
          "61:     }",
          "",
          "[Removed Lines]",
          "50:             'contextid'  => context_system::instance()->id,",
          "54:             'parent'     => 0,",
          "",
          "[Added Lines]",
          "58:         if (!isset($record['contextid'])) {",
          "59:             $record['contextid'] = context_system::instance()->id;",
          "60:         }",
          "61:         if (!isset($record['parent'])) {",
          "62:             $record['parent'] = question_get_top_category($record['contextid'], true)->id;",
          "63:         }",
          "",
          "---------------"
        ],
        "question/tests/generator_test.php||question/tests/generator_test.php": [
          "File: question/tests/generator_test.php -> question/tests/generator_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         $count = $DB->count_records('question_categories');",
          "44:         $cat = $generator->create_question_category();",
          "47:         $cat = $generator->create_question_category(array(",
          "48:                 'name' => 'My category', 'sortorder' => 1));",
          "",
          "[Removed Lines]",
          "45:         $this->assertEquals($count + 1, $DB->count_records('question_categories'));",
          "",
          "[Added Lines]",
          "45:         $count += $count ? 1 : 2; // Calling $generator->create_question_category() for the first time",
          "47:         $this->assertEquals($count, $DB->count_records('question_categories'));",
          "",
          "---------------"
        ],
        "question/type/edit_question_form.php||question/type/edit_question_form.php": [
          "File: question/type/edit_question_form.php -> question/type/edit_question_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "732:             $errors['currentgrp'] = get_string('nopermissionmove', 'question');",
          "733:         }",
          "736:         if (array_key_exists('defaultmark', $fromform) && $fromform['defaultmark'] < 0) {",
          "737:             $errors['defaultmark'] = get_string('defaultmarkmustbepositive', 'question');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "736:         if (empty($fromform['category'])) {",
          "738:             $errors['category'] = get_string('required');",
          "739:         }",
          "",
          "---------------"
        ],
        "question/type/random/edit_random_form.php||question/type/random/edit_random_form.php": [
          "File: question/type/random/edit_random_form.php -> question/type/random/edit_random_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         $mform->addElement('header', 'generalheader', get_string(\"general\", 'form'));",
          "50:         $mform->addElement('questioncategory', 'category', get_string('category', 'question'),",
          "53:         $mform->addElement('advcheckbox', 'questiontext[text]',",
          "54:                 get_string('includingsubcategories', 'qtype_random'), null, null, array(0, 1));",
          "56:         $mform->addElement('hidden', 'qtype');",
          "57:         $mform->setType('qtype', PARAM_ALPHA);",
          "",
          "[Removed Lines]",
          "51:                 array('contexts' => $this->contexts->having_cap('moodle/question:useall')));",
          "",
          "[Added Lines]",
          "51:                 array('contexts' => $this->contexts->having_cap('moodle/question:useall'), 'top' => true));",
          "56:         $tops = question_get_top_categories_for_contexts(array_column($this->contexts->all(), 'id'));",
          "57:         $mform->hideIf('questiontext[text]', 'category', 'in', $tops);",
          "",
          "---------------"
        ],
        "question/type/random/lang/en/qtype_random.php||question/type/random/lang/en/qtype_random.php": [
          "File: question/type/random/lang/en/qtype_random.php -> question/type/random/lang/en/qtype_random.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: $string['pluginname_help'] = 'A random question is not a question type as such, but is a way of inserting a randomly-chosen question from a specified category into an activity.';",
          "30: $string['pluginnameediting'] = 'Editing a random question';",
          "31: $string['randomqname'] = 'Random ({$a})';",
          "32: $string['randomqplusname'] = 'Random ({$a} and subcategories)';",
          "33: $string['selectedby'] = '{$a->questionname} selected by {$a->randomname}';",
          "34: $string['selectmanualquestions'] = 'Random questions can use manually graded questions';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: $string['randomqnamefromtop'] = 'Faulty random question! Please delete this question.';",
          "34: $string['randomqplusnamecourse'] = 'Random (Any category in this course)';",
          "35: $string['randomqplusnamecoursecat'] = 'Random (Any category inside course category {$a})';",
          "36: $string['randomqplusnamemodule'] = 'Random (Any category of this quiz)';",
          "37: $string['randomqplusnamesystem'] = 'Random (Any system-level category)';",
          "",
          "---------------"
        ],
        "question/type/random/questiontype.php||question/type/random/questiontype.php": [
          "File: question/type/random/questiontype.php -> question/type/random/questiontype.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     public function question_name($category, $includesubcategories) {",
          "132:         } else {",
          "134:         }",
          "136:     }",
          "138:     protected function set_selected_question_name($question, $randomname) {",
          "",
          "[Removed Lines]",
          "130:         if ($includesubcategories) {",
          "131:             $string = 'randomqplusname';",
          "133:             $string = 'randomqname';",
          "135:         return get_string($string, 'qtype_random', shorten_text($category->name, 100));",
          "",
          "[Added Lines]",
          "130:         if ($category->parent && $includesubcategories) {",
          "131:             $name = get_string('randomqplusname', 'qtype_random', shorten_text($category->name, 100));",
          "132:         } else if ($category->parent) {",
          "133:             $name = get_string('randomqname', 'qtype_random', shorten_text($category->name, 100));",
          "134:         } else if ($includesubcategories) {",
          "135:             $context = context::instance_by_id($category->contextid);",
          "137:             switch ($context->contextlevel) {",
          "138:                 case CONTEXT_MODULE:",
          "139:                     $name = get_string('randomqplusnamemodule', 'qtype_random');",
          "140:                     break;",
          "141:                 case CONTEXT_COURSE:",
          "142:                     $name = get_string('randomqplusnamecourse', 'qtype_random');",
          "143:                     break;",
          "144:                 case CONTEXT_COURSECAT:",
          "145:                     $name = get_string('randomqplusnamecoursecat', 'qtype_random',",
          "146:                             shorten_text($context->get_context_name(false), 100));",
          "147:                     break;",
          "148:                 case CONTEXT_SYSTEM:",
          "149:                     $name = get_string('randomqplusnamesystem', 'qtype_random');",
          "150:                     break;",
          "151:                 default: // Impossible.",
          "152:                     $name = '';",
          "153:             }",
          "156:             $name = get_string('randomqnamefromtop', 'qtype_random');",
          "159:         return $name;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:     }",
          "145:     public function save_question($question, $form) {",
          "146:         $form->name = '';",
          "149:         if ($form->questiontext['text']) {",
          "150:             $form->questiontext['text'] = '1';",
          "151:         } else {",
          "152:             $form->questiontext['text'] = '0';",
          "153:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:         global $DB;",
          "173:         list($category) = explode(',', $form->category);",
          "178:         } else if ($DB->record_exists('question_categories', ['id' => $category, 'parent' => 0])) {",
          "180:             $form->questiontext['text'] = '1';",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '35';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018020100.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5dev (Build: 20180201)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018020600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5dev (Build: 20180205)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "352ab7464e9c2aa6280d80627529702ef755aaf8",
      "candidate_info": {
        "commit_hash": "352ab7464e9c2aa6280d80627529702ef755aaf8",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/352ab7464e9c2aa6280d80627529702ef755aaf8",
        "files": [
          "analytics/classes/analysis.php",
          "analytics/classes/local/time_splitting/periodic.php",
          "analytics/classes/local/time_splitting/upcoming_periodic.php",
          "analytics/tests/analysis_test.php",
          "analytics/tests/fixtures/test_timesplitting_upcoming_seconds.php",
          "lang/en/cache.php",
          "lib/db/caches.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "lib/tests/time_splittings_test.php",
          "version.php"
        ],
        "message": "MDL-65348 analytics: Upcoming periodic from time()",
        "before_after_code_files": [
          "analytics/classes/analysis.php||analytics/classes/analysis.php",
          "analytics/classes/local/time_splitting/periodic.php||analytics/classes/local/time_splitting/periodic.php",
          "analytics/classes/local/time_splitting/upcoming_periodic.php||analytics/classes/local/time_splitting/upcoming_periodic.php",
          "analytics/tests/analysis_test.php||analytics/tests/analysis_test.php",
          "analytics/tests/fixtures/test_timesplitting_upcoming_seconds.php||analytics/tests/fixtures/test_timesplitting_upcoming_seconds.php",
          "lang/en/cache.php||lang/en/cache.php",
          "lib/db/caches.php||lib/db/caches.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/tests/time_splittings_test.php||lib/tests/time_splittings_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "analytics/classes/analysis.php||analytics/classes/analysis.php": [
          "File: analytics/classes/analysis.php -> analytics/classes/analysis.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         $this->analyser = $analyser;",
          "68:         $this->includetarget = $includetarget;",
          "69:         $this->result = $result;",
          "70:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:         self::fill_firstanalyses_cache($this->analyser->get_modelid());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:         $modeltimelimit = intval(get_config('analytics', 'modeltimelimit'));",
          "88:         if ($this->includetarget) {",
          "89:             $action = 'training';",
          "90:         } else {",
          "",
          "[Removed Lines]",
          "84:         $filesbytimesplitting = array();",
          "86:         $alreadyprocessedanalysables = $this->get_processed_analysables();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:         }",
          "93:         $analysables = $this->analyser->get_analysables_iterator($action);",
          "95:         $inittime = microtime(true);",
          "96:         foreach ($analysables as $analysable) {",
          "97:             $processed = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:         $processedanalysables = $this->get_processed_analysables();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:                 }",
          "122:             }",
          "130:             if (!$options['evaluation']) {",
          "131:                 $timespent = microtime(true) - $inittime;",
          "132:                 if ($modeltimelimit <= $timespent) {",
          "133:                     break;",
          "",
          "[Removed Lines]",
          "125:             if ($this->analyser->get_target()->always_update_analysis_time() || $processed) {",
          "126:                 $this->update_analysable_analysed_time($alreadyprocessedanalysables, $analysable->get_id());",
          "127:             }",
          "",
          "[Added Lines]",
          "127:                 if (empty($processedanalysables[$analysable->get_id()]) ||",
          "128:                         $this->analyser->get_target()->always_update_analysis_time() || $processed) {",
          "131:                     $this->update_analysable_analysed_time($processedanalysables, $analysable->get_id());",
          "132:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "152:         return $DB->get_records_select('analytics_used_analysables', $select,",
          "154:     }",
          "",
          "[Removed Lines]",
          "153:             $params, 'timeanalysed DESC', 'analysableid, modelid, action, timeanalysed, id AS primarykey');",
          "",
          "[Added Lines]",
          "157:             $params, 'timeanalysed DESC', 'analysableid, modelid, action, firstanalysis, timeanalysed, id AS primarykey');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "590:     protected function update_analysable_analysed_time(array $processedanalysables, int $analysableid) {",
          "591:         global $DB;",
          "593:         if (!empty($processedanalysables[$analysableid])) {",
          "594:             $obj = $processedanalysables[$analysableid];",
          "596:             $obj->id = $obj->primarykey;",
          "597:             unset($obj->primarykey);",
          "600:             $DB->update_record('analytics_used_analysables', $obj);",
          "602:         } else {",
          "",
          "[Removed Lines]",
          "599:             $obj->timeanalysed = time();",
          "",
          "[Added Lines]",
          "597:         $now = time();",
          "605:             $obj->timeanalysed = $now;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "605:             $obj->modelid = $this->analyser->get_modelid();",
          "606:             $obj->action = ($this->includetarget) ? 'training' : 'prediction';",
          "607:             $obj->analysableid = $analysableid;",
          "611:         }",
          "612:     }",
          "",
          "[Removed Lines]",
          "608:             $obj->timeanalysed = time();",
          "610:             $DB->insert_record('analytics_used_analysables', $obj);",
          "",
          "[Added Lines]",
          "615:             $obj->firstanalysis = $now;",
          "616:             $obj->timeanalysed = $now;",
          "618:             $obj->primarykey = $DB->insert_record('analytics_used_analysables', $obj);",
          "621:             $key = $this->analyser->get_modelid() . '_' . $analysableid;",
          "622:             $cache = \\cache::make('core', 'modelfirstanalyses');",
          "623:             $cache->set($key, $now);",
          "624:         }",
          "625:     }",
          "634:     public static function fill_firstanalyses_cache(int $modelid, ?int $analysableid = null) {",
          "635:         global $DB;",
          "638:         $primarykey = $DB->sql_concat($modelid, \"'_'\", 'analysableid');",
          "639:         $sql = \"SELECT $primarykey AS id, MIN(firstanalysis) AS firstanalysis",
          "640:                   FROM {analytics_used_analysables} aua",
          "641:                  WHERE modelid = :modelid\";",
          "642:         $params = ['modelid' => $modelid];",
          "644:         if ($analysableid) {",
          "645:             $sql .= \" AND analysableid = :analysableid\";",
          "646:             $params['analysableid'] = $analysableid;",
          "649:         $sql .= \" GROUP BY modelid, analysableid ORDER BY analysableid\";",
          "651:         $firstanalyses = $DB->get_records_sql($sql, $params);",
          "652:         if ($firstanalyses) {",
          "653:             $cache = \\cache::make('core', 'modelfirstanalyses');",
          "655:             $firstanalyses = array_map(function($record) {",
          "656:                 return $record->firstanalysis;",
          "657:             }, $firstanalyses);",
          "659:             $cache->set_many($firstanalyses);",
          "660:         }",
          "662:         return $firstanalyses;",
          "",
          "---------------"
        ],
        "analytics/classes/local/time_splitting/periodic.php||analytics/classes/local/time_splitting/periodic.php": [
          "File: analytics/classes/local/time_splitting/periodic.php -> analytics/classes/local/time_splitting/periodic.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         $periodicity = $this->periodicity();",
          "69:         if ($this->analysable->get_end()) {",
          "70:             $end = (new \\DateTimeImmutable())->setTimestamp($this->analysable->get_end());",
          "71:         }",
          "74:         $ranges = [];",
          "75:         while ($next < $now &&",
          "",
          "[Removed Lines]",
          "67:         $now = new \\DateTimeImmutable('now', \\core_date::get_server_timezone_object());",
          "72:         $next = (new \\DateTimeImmutable())->setTimestamp($this->analysable->get_start());",
          "",
          "[Added Lines]",
          "70:         $next = (new \\DateTimeImmutable())->setTimestamp($this->get_first_start());",
          "72:         $now = new \\DateTimeImmutable('now', \\core_date::get_server_timezone_object());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:             'time' => $end",
          "141:         ];",
          "142:     }",
          "143: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:     protected function get_first_start() {",
          "150:         return $this->analysable->get_start();",
          "151:     }",
          "",
          "---------------"
        ],
        "analytics/classes/local/time_splitting/upcoming_periodic.php||analytics/classes/local/time_splitting/upcoming_periodic.php": [
          "File: analytics/classes/local/time_splitting/upcoming_periodic.php -> analytics/classes/local/time_splitting/upcoming_periodic.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     public function valid_for_evaluation(): bool {",
          "69:         return false;",
          "70:     }",
          "71: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     protected function get_first_start() {",
          "80:         global $DB;",
          "82:         $cache = \\cache::make('core', 'modelfirstanalyses');",
          "84:         $key = $this->modelid . '_' . $this->analysable->get_id();",
          "85:         $firstanalysis = $cache->get($key);",
          "86:         if (!empty($firstanalysis)) {",
          "87:             return $firstanalysis;",
          "88:         }",
          "91:         return time() - 1;",
          "92:     }",
          "",
          "---------------"
        ],
        "analytics/tests/analysis_test.php||analytics/tests/analysis_test.php": [
          "File: analytics/tests/analysis_test.php -> analytics/tests/analysis_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "34: class analytics_analysis_testcase extends advanced_testcase {",
          "40:     public function test_fill_firstanalyses_cache() {",
          "41:         $this->resetAfterTest();",
          "43:         $this->insert_used(1, 1, 'training', 123);",
          "44:         $this->insert_used(1, 2, 'training', 124);",
          "45:         $this->insert_used(1, 1, 'prediction', 125);",
          "47:         $firstanalyses = \\core_analytics\\analysis::fill_firstanalyses_cache(1);",
          "48:         $this->assertCount(2, $firstanalyses);",
          "49:         $this->assertEquals(123, $firstanalyses['1_1']);",
          "50:         $this->assertEquals(124, $firstanalyses['1_2']);",
          "53:         $this->insert_used(1, 1, 'prediction', 122);",
          "54:         $firstanalyses = \\core_analytics\\analysis::fill_firstanalyses_cache(1, 1);",
          "55:         $this->assertCount(1, $firstanalyses);",
          "56:         $this->assertEquals(122, $firstanalyses['1_1']);",
          "57:     }",
          "59:     private function insert_used($modelid, $analysableid, $action, $timestamp) {",
          "60:         global $DB;",
          "62:         $obj = new \\stdClass();",
          "63:         $obj->modelid = $modelid;",
          "64:         $obj->action = $action;",
          "65:         $obj->analysableid = $analysableid;",
          "66:         $obj->firstanalysis = $timestamp;",
          "67:         $obj->timeanalysed = $timestamp;",
          "68:         $obj->id = $DB->insert_record('analytics_used_analysables', $obj);",
          "69:     }",
          "70: }",
          "",
          "---------------"
        ],
        "analytics/tests/fixtures/test_timesplitting_upcoming_seconds.php||analytics/tests/fixtures/test_timesplitting_upcoming_seconds.php": [
          "File: analytics/tests/fixtures/test_timesplitting_upcoming_seconds.php -> analytics/tests/fixtures/test_timesplitting_upcoming_seconds.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "34: class test_timesplitting_upcoming_seconds extends \\core_analytics\\local\\time_splitting\\upcoming_periodic {",
          "40:     public function periodicity() {",
          "41:         return new \\DateInterval('PT1S');",
          "42:     }",
          "49:     public static function get_name() : \\lang_string {",
          "50:         return new \\lang_string('error');",
          "51:     }",
          "52: }",
          "",
          "---------------"
        ],
        "lang/en/cache.php||lang/en/cache.php": [
          "File: lang/en/cache.php -> lang/en/cache.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: $string['cachedef_htmlpurifier'] = 'HTML Purifier - cleaned content';",
          "57: $string['cachedef_langmenu'] = 'List of available languages';",
          "58: $string['cachedef_message_time_last_message_between_users'] = 'Time created for most recent message in a conversation';",
          "59: $string['cachedef_locking'] = 'Locking';",
          "60: $string['cachedef_message_processors_enabled'] = \"Message processors enabled status\";",
          "61: $string['cachedef_contextwithinsights'] = 'Context with insights';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: $string['cachedef_modelprocessedanalysables'] = 'Processed analysables in a model';",
          "",
          "---------------"
        ],
        "lib/db/caches.php||lib/db/caches.php": [
          "File: lib/db/caches.php -> lib/db/caches.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "384:         'simpledata' => true,",
          "385:         'ttl' => 1800",
          "386:     ),",
          "387: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:     'modelfirstanalyses' => array(",
          "390:         'mode' => cache_store::MODE_REQUEST,",
          "391:         'simplekeys' => true,",
          "392:         'simpledata' => true,",
          "393:     ),",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3270:         upgrade_main_savepoint(true, 2019042300.03);",
          "3271:     }",
          "3273:     return true;",
          "3274: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3273:     if ($oldversion < 2019042700.01) {",
          "3276:         $table = new xmldb_table('analytics_used_analysables');",
          "3279:         $field = new xmldb_field('firstanalysis', XMLDB_TYPE_INTEGER, '10', null, null, null, null, 'analysableid');",
          "3282:         if (!$dbman->field_exists($table, $field)) {",
          "3283:             $dbman->add_field($table, $field);",
          "3286:             $recordset = $DB->get_recordset('analytics_used_analysables');",
          "3287:             foreach ($recordset as $record) {",
          "3288:                 $record->firstanalysis = $record->timeanalysed;",
          "3289:                 $DB->update_record('analytics_used_analysables', $record);",
          "3290:             }",
          "3291:             $recordset->close();",
          "3294:             $field = new xmldb_field('firstanalysis', XMLDB_TYPE_INTEGER, '10',",
          "3295:                 null, XMLDB_NOTNULL, null, null, 'analysableid');",
          "3296:             $dbman->change_field_notnull($table, $field);",
          "3297:         }",
          "3300:         upgrade_main_savepoint(true, 2019042700.01);",
          "3301:     }",
          "",
          "---------------"
        ],
        "lib/tests/time_splittings_test.php||lib/tests/time_splittings_test.php": [
          "File: lib/tests/time_splittings_test.php -> lib/tests/time_splittings_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: require_once(__DIR__ . '/../../analytics/tests/fixtures/test_timesplitting_seconds.php');",
          "29: require_once(__DIR__ . '/../../analytics/tests/fixtures/test_timesplitting_weekly.php');",
          "30: require_once(__DIR__ . '/../../lib/enrollib.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: require_once(__DIR__ . '/../../analytics/tests/fixtures/test_timesplitting_upcoming_seconds.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:         $range = reset($ranges);",
          "213:         $this->assertEquals(51, key($ranges));",
          "232:         $onemonthago = new DateTime('-30 days');",
          "",
          "[Removed Lines]",
          "215:         $upcomingweek = new \\core\\analytics\\time_splitting\\upcoming_week();",
          "216:         $upcomingweek->set_analysable($this->analysable);",
          "217:         $this->assertCount(1, $upcomingweek->get_distinct_ranges());",
          "219:         $ranges = $upcomingweek->get_all_ranges();",
          "220:         $this->assertEquals(53, count($ranges));",
          "221:         $this->assertEquals($this->course->startdate, $ranges[0]['start']);",
          "222:         $this->assertEquals($this->course->startdate, $ranges[0]['time']);",
          "224:         $this->assertCount(count($ranges), $upcomingweek->get_training_ranges());",
          "226:         $ranges = $upcomingweek->get_most_recent_prediction_range();",
          "227:         $range = reset($ranges);",
          "228:         $this->assertEquals(52, key($ranges));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "251:         $this->assertLessThan(time(), $range['start']);",
          "252:         $this->assertLessThan(time(), $range['end']);",
          "254:         $upcomingweek = new \\core\\analytics\\time_splitting\\upcoming_week();",
          "255:         $upcomingweek->set_analysable($ongoinganalysable);",
          "256:         $this->assertCount(1, $upcomingweek->get_distinct_ranges());",
          "258:         $ranges = $upcomingweek->get_all_ranges();",
          "262:         $ranges = $upcomingweek->get_most_recent_prediction_range();",
          "263:         $range = reset($ranges);",
          "265:         $this->assertLessThan(time(), $range['time']);",
          "266:         $this->assertLessThan(time(), $range['start']);",
          "267:         $this->assertGreaterThan(time(), $range['end']);",
          "271:         $fewsecsago = new DateTime('-5 seconds');",
          "",
          "[Removed Lines]",
          "259:         $this->assertEquals(5, count($ranges));",
          "260:         $this->assertCount(4, $upcomingweek->get_training_ranges());",
          "264:         $this->assertEquals(4, key($ranges));",
          "",
          "[Added Lines]",
          "240:         $starttime = time();",
          "247:         $this->assertEquals(1, count($ranges));",
          "248:         $range = reset($ranges);",
          "249:         $this->assertLessThan(time(), $range['time']);",
          "250:         $this->assertLessThan(time(), $range['start']);",
          "251:         $this->assertGreaterThan(time(), $range['end']);",
          "253:         $this->assertCount(0, $upcomingweek->get_training_ranges());",
          "257:         $this->assertEquals(0, key($ranges));",
          "262:         $this->assertGreaterThanOrEqual($starttime - 1, $range['time']);",
          "263:         $this->assertGreaterThanOrEqual($starttime - 1, $range['start']);",
          "266:         $this->assertNotEmpty($upcomingweek->get_range_by_index(0));",
          "267:         $this->assertFalse($upcomingweek->get_range_by_index(1));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "289:         usleep(1000000);",
          "291:         $seconds->set_analysable($analysable);",
          "292:         $nnewranges = $seconds->get_all_ranges();",
          "293:         $nnewtrainingranges = $seconds->get_training_ranges();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292:         $seconds->set_analysable($analysable);",
          "294:         $nnewranges = $seconds->get_all_ranges();",
          "295:         $nnewtrainingranges = $seconds->get_training_ranges();",
          "296:         $newmostrecentrange = $seconds->get_most_recent_prediction_range();",
          "297:         $newmostrecentrange = reset($newmostrecentrange);",
          "298:         $this->assertGreaterThan($nranges, $nnewranges);",
          "299:         $this->assertGreaterThan($ntrainingranges, $nnewtrainingranges);",
          "300:         $this->assertGreaterThan($mostrecentrange['time'], $newmostrecentrange['time']);",
          "302:         $seconds = new test_timesplitting_upcoming_seconds();",
          "303:         $seconds->set_analysable($analysable);",
          "306:         $nranges = count($seconds->get_all_ranges());",
          "307:         $ntrainingranges = count($seconds->get_training_ranges());",
          "308:         $mostrecentrange = $seconds->get_most_recent_prediction_range();",
          "309:         $mostrecentrange = reset($mostrecentrange);",
          "312:         usleep(1000000);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019042700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019042700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08cd15658a29a720ff69b676c3ec12e48d437d2e",
      "candidate_info": {
        "commit_hash": "08cd15658a29a720ff69b676c3ec12e48d437d2e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/08cd15658a29a720ff69b676c3ec12e48d437d2e",
        "files": [
          "favourites/classes/privacy/provider.php",
          "group/classes/privacy/provider.php",
          "group/tests/privacy_provider_test.php",
          "lang/en/group.php",
          "lang/en/message.php",
          "lib/db/upgrade.php",
          "message/classes/api.php",
          "message/classes/privacy/provider.php",
          "message/tests/privacy_provider_test.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-63692-master' of git://github.com/sarjona/moodle",
        "before_after_code_files": [
          "favourites/classes/privacy/provider.php||favourites/classes/privacy/provider.php",
          "group/classes/privacy/provider.php||group/classes/privacy/provider.php",
          "group/tests/privacy_provider_test.php||group/tests/privacy_provider_test.php",
          "lang/en/group.php||lang/en/group.php",
          "lang/en/message.php||lang/en/message.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "message/classes/api.php||message/classes/api.php",
          "message/classes/privacy/provider.php||message/classes/privacy/provider.php",
          "message/tests/privacy_provider_test.php||message/tests/privacy_provider_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "favourites/classes/privacy/provider.php||favourites/classes/privacy/provider.php": [
          "File: favourites/classes/privacy/provider.php -> favourites/classes/privacy/provider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:         global $DB;",
          "180:         $params = [",
          "",
          "[Removed Lines]",
          "177:     public static function delete_favourites_for_all_users(\\context $context, string $component, string $itemtype) {",
          "",
          "[Added Lines]",
          "178:     public static function delete_favourites_for_all_users(\\context $context, string $component, string $itemtype,",
          "179:                                                            int $itemid = 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:         ];",
          "186:         $select = \"component = :component AND itemtype =:itemtype AND contextid = :contextid\";",
          "187:         $DB->delete_records_select('favourite', $select, $params);",
          "188:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:         if (!empty($itemid)) {",
          "191:             $select .= \" AND itemid = :itemid\";",
          "192:             $params['itemid'] = $itemid;",
          "193:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:     public static function delete_favourites_for_userlist(\\core_privacy\\local\\request\\approved_userlist $userlist,",
          "200:         global $DB;",
          "202:         $userids = $userlist->get_userids();",
          "",
          "[Removed Lines]",
          "199:                                                           string $itemtype) {",
          "",
          "[Added Lines]",
          "207:                                                           string $itemtype, int $itemid = 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "217:         $params += $userparams;",
          "218:         $select = \"component = :component AND itemtype = :itemtype AND contextid = :contextid AND userid $usersql\";",
          "220:         $DB->delete_records_select('favourite', $select, $params);",
          "221:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:         if (!empty($itemid)) {",
          "229:             $select .= \" AND itemid = :itemid\";",
          "230:             $params['itemid'] = $itemid;",
          "231:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:         global $DB;",
          "235:         $userid = $contextlist->get_user()->id;",
          "",
          "[Removed Lines]",
          "232:     public static function delete_favourites_for_user(approved_contextlist $contextlist, string $component, string $itemtype) {",
          "",
          "[Added Lines]",
          "246:     public static function delete_favourites_for_user(approved_contextlist $contextlist, string $component, string $itemtype,",
          "247:                                                       int $itemid = 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "244:         $params += $inparams;",
          "246:         $select = \"userid = :userid AND component = :component AND itemtype =:itemtype AND contextid $insql\";",
          "247:         $DB->delete_records_select('favourite', $select, $params);",
          "248:     }",
          "249: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:         if (!empty($itemid)) {",
          "264:             $select .= \" AND itemid = :itemid\";",
          "265:             $params['itemid'] = $itemid;",
          "266:         }",
          "",
          "---------------"
        ],
        "group/classes/privacy/provider.php||group/classes/privacy/provider.php": [
          "File: group/classes/privacy/provider.php -> group/classes/privacy/provider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:             'timeadded' => 'privacy:metadata:groups:timeadded',",
          "69:         ], 'privacy:metadata:groups');",
          "71:         return $collection;",
          "72:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:         $collection->link_subsystem('core_message', 'privacy:metadata:core_message');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:         $subcontext[] = get_string('groups', 'core_group');",
          "92:                   FROM {groups_members} gm",
          "93:                   JOIN {groups} g ON gm.groupid = g.id",
          "94:                  WHERE g.courseid = :courseid",
          "",
          "[Removed Lines]",
          "91:         $sql = \"SELECT gm.id, gm.timeadded, gm.userid, g.name",
          "",
          "[Added Lines]",
          "93:         $sql = \"SELECT gm.id, gm.timeadded, gm.userid, g.name, gm.groupid",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:         $groups = $DB->get_records_sql($sql, $params);",
          "111:             return (object) [",
          "112:                 'name' => format_string($group->name),",
          "113:                 'timeadded' => transform::datetime($group->timeadded),",
          "",
          "[Removed Lines]",
          "110:         $groups = array_map(function($group) {",
          "",
          "[Added Lines]",
          "112:         $groupstoexport = array_map(function($group) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:         if (!empty($groups)) {",
          "118:             \\core_privacy\\local\\request\\writer::with_context($context)",
          "119:                     ->export_data($subcontext, (object) [",
          "121:                     ]);",
          "122:         }",
          "123:     }",
          "",
          "[Removed Lines]",
          "120:                         'groups' => $groups,",
          "",
          "[Added Lines]",
          "122:                         'groups' => $groupstoexport,",
          "125:             foreach ($groups as $group) {",
          "127:                 \\core_message\\privacy\\provider::export_conversations($USER->id, 'core_group', 'groups',",
          "128:                     $context, [], $group->groupid);",
          "129:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:             $params['itemid'] = $itemid;",
          "149:         }",
          "151:         $DB->delete_records_select('groups_members', $select, $params);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:         $groups = $DB->get_records_select('groups_members', $select, $params);",
          "161:         foreach ($groups as $group) {",
          "162:             \\core_message\\privacy\\provider::delete_conversations_for_all_users($context, 'core_group', 'groups', $group->groupid);",
          "163:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "191:             $params['itemid'] = $itemid;",
          "192:         }",
          "194:         $DB->delete_records_select('groups_members', $select, $params);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:         $groups = $DB->get_records_select('groups_members', $select, $params);",
          "211:         foreach ($groups as $group) {",
          "212:             \\core_message\\privacy\\provider::delete_conversations_for_user($contextlist, 'core_group', 'groups', $group->groupid);",
          "213:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "227:         }",
          "229:         $userlist->add_from_sql('userid', $sql, $params);",
          "230:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:         \\core_message\\privacy\\provider::add_conversations_in_context($userlist, 'core_group', 'groups', $itemid);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "258:             $params['itemid'] = $itemid;",
          "259:         }",
          "261:         $DB->delete_records_select('groups_members', $select, $params);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:         $groups = $DB->get_records_select('groups_members', $select, $params);",
          "288:         foreach ($groups as $group) {",
          "289:             \\core_message\\privacy\\provider::delete_conversations_for_users($userlist, 'core_group', 'groups', $group->groupid);",
          "290:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "295:         $contextlist->add_from_sql($sql, $params);",
          "297:         return $contextlist;",
          "298:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:         \\core_message\\privacy\\provider::add_contexts_for_conversations($contextlist, $userid, 'core_group', 'groups', $itemid);",
          "",
          "---------------"
        ],
        "group/tests/privacy_provider_test.php||group/tests/privacy_provider_test.php": [
          "File: group/tests/privacy_provider_test.php -> group/tests/privacy_provider_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         $collection = new collection('core_group');",
          "46:         $newcollection = provider::get_metadata($collection);",
          "47:         $itemcollection = $newcollection->get_collection();",
          "52:         $this->assertEquals('groups_members', $table->get_name());",
          "53:         $this->assertEquals('privacy:metadata:groups', $table->get_summary());",
          "",
          "[Removed Lines]",
          "48:         $this->assertCount(1, $itemcollection);",
          "50:         $table = reset($itemcollection);",
          "",
          "[Added Lines]",
          "48:         $this->assertCount(2, $itemcollection);",
          "50:         $table = array_shift($itemcollection);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:         $this->assertArrayHasKey('groupid', $privacyfields);",
          "57:         $this->assertArrayHasKey('userid', $privacyfields);",
          "58:         $this->assertArrayHasKey('timeadded', $privacyfields);",
          "59:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:         $table = array_shift($itemcollection);",
          "60:         $this->assertEquals('core_message', $table->get_name());",
          "61:         $this->assertEquals('privacy:metadata:core_message', $table->get_summary());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "508:         );",
          "509:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:         );",
          "512:     }",
          "517:     public function test_delete_groups_for_users_for_component() {",
          "518:         global $DB;",
          "520:         $this->resetAfterTest();",
          "522:         $course1 = $this->getDataGenerator()->create_course();",
          "523:         $course2 = $this->getDataGenerator()->create_course();",
          "524:         $course3 = $this->getDataGenerator()->create_course();",
          "526:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id));",
          "527:         $group1b = $this->getDataGenerator()->create_group(array('courseid' => $course1->id));",
          "528:         $group2a = $this->getDataGenerator()->create_group(array('courseid' => $course2->id));",
          "529:         $group2b = $this->getDataGenerator()->create_group(array('courseid' => $course2->id));",
          "530:         $group3a = $this->getDataGenerator()->create_group(array('courseid' => $course3->id));",
          "531:         $group3b = $this->getDataGenerator()->create_group(array('courseid' => $course3->id));",
          "533:         $user1 = $this->getDataGenerator()->create_user();",
          "534:         $user2 = $this->getDataGenerator()->create_user();",
          "536:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id, null, 'self');",
          "537:         $this->getDataGenerator()->enrol_user($user1->id, $course2->id, null, 'self');",
          "538:         $this->getDataGenerator()->enrol_user($user1->id, $course3->id, null, 'self');",
          "539:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id, null, 'self');",
          "540:         $this->getDataGenerator()->enrol_user($user2->id, $course2->id, null, 'self');",
          "541:         $this->getDataGenerator()->enrol_user($user2->id, $course3->id, null, 'self');",
          "543:         $this->getDataGenerator()->create_group_member(",
          "544:                 array('groupid' => $group1a->id, 'userid' => $user1->id, 'component' => 'enrol_self'));",
          "545:         $this->getDataGenerator()->create_group_member(",
          "546:                 array('groupid' => $group1b->id, 'userid' => $user2->id, 'component' => 'enrol_self'));",
          "547:         $this->getDataGenerator()->create_group_member(",
          "548:                 array('groupid' => $group2a->id, 'userid' => $user1->id, 'component' => 'enrol_self'));",
          "549:         $this->getDataGenerator()->create_group_member(",
          "550:                 array('groupid' => $group2b->id, 'userid' => $user2->id, 'component' => 'enrol_self'));",
          "551:         $this->getDataGenerator()->create_group_member(array('groupid' => $group3a->id, 'userid' => $user1->id));",
          "552:         $this->getDataGenerator()->create_group_member(array('groupid' => $group3b->id, 'userid' => $user2->id));",
          "554:         $this->assertEquals(",
          "555:                 2,",
          "556:                 $DB->count_records_sql(\"SELECT COUNT(gm.id)",
          "557:                                           FROM {groups_members} gm",
          "558:                                           JOIN {groups} g ON gm.groupid = g.id",
          "559:                                          WHERE g.courseid = ?\", [$course1->id])",
          "560:         );",
          "561:         $this->assertEquals(",
          "562:                 2,",
          "563:                 $DB->count_records_sql(\"SELECT COUNT(gm.id)",
          "564:                                           FROM {groups_members} gm",
          "565:                                           JOIN {groups} g ON gm.groupid = g.id",
          "566:                                          WHERE g.courseid = ?\", [$course2->id])",
          "567:         );",
          "568:         $this->assertEquals(",
          "569:                 2,",
          "570:                 $DB->count_records_sql(\"SELECT COUNT(gm.id)",
          "571:                                           FROM {groups_members} gm",
          "572:                                           JOIN {groups} g ON gm.groupid = g.id",
          "573:                                          WHERE g.courseid = ?\", [$course2->id])",
          "574:         );",
          "575:         $this->assertEquals(",
          "576:                 3,",
          "577:                 $DB->count_records_sql(\"SELECT COUNT(gm.id)",
          "578:                                           FROM {groups_members} gm",
          "579:                                           JOIN {groups} g ON gm.groupid = g.id",
          "580:                                          WHERE gm.userid = ?\", [$user1->id])",
          "581:         );",
          "584:         $coursecontext1 = context_course::instance($course1->id);",
          "585:         $approveduserlist = new \\core_privacy\\local\\request\\approved_userlist($coursecontext1, 'core_group',",
          "586:                 [$user1->id, $user2->id]);",
          "587:         provider::delete_groups_for_users($approveduserlist, 'enrol_self');",
          "589:         $this->assertEquals(",
          "590:                 0,",
          "591:                 $DB->count_records_sql(\"SELECT COUNT(gm.id)",
          "592:                                           FROM {groups_members} gm",
          "593:                                           JOIN {groups} g ON gm.groupid = g.id",
          "594:                                          WHERE g.courseid = ?\", [$course1->id])",
          "595:         );",
          "596:         $this->assertEquals(",
          "597:                 2,",
          "598:                 $DB->count_records_sql(\"SELECT COUNT(gm.id)",
          "599:                                           FROM {groups_members} gm",
          "600:                                           JOIN {groups} g ON gm.groupid = g.id",
          "601:                                          WHERE g.courseid = ?\", [$course2->id])",
          "602:         );",
          "603:         $this->assertEquals(",
          "604:                 2,",
          "605:                 $DB->count_records_sql(\"SELECT COUNT(gm.id)",
          "606:                                           FROM {groups_members} gm",
          "607:                                           JOIN {groups} g ON gm.groupid = g.id",
          "608:                                          WHERE g.courseid = ?\", [$course3->id])",
          "609:         );",
          "610:         $this->assertEquals(",
          "611:                 2,",
          "612:                 $DB->count_records_sql(\"SELECT COUNT(gm.id)",
          "613:                                           FROM {groups_members} gm",
          "614:                                           JOIN {groups} g ON gm.groupid = g.id",
          "615:                                          WHERE gm.userid = ?\", [$user1->id])",
          "616:         );",
          "619:         $coursecontext3 = context_course::instance($course3->id);",
          "620:         $approveduserlist = new \\core_privacy\\local\\request\\approved_userlist($coursecontext3, 'core_group',",
          "621:                 [$user1->id, $user2->id]);",
          "622:         provider::delete_groups_for_users($approveduserlist, 'enrol_self');",
          "623:         $this->assertEquals(",
          "624:                 0,",
          "625:                 $DB->count_records_sql(\"SELECT COUNT(gm.id)",
          "626:                                           FROM {groups_members} gm",
          "627:                                           JOIN {groups} g ON gm.groupid = g.id",
          "628:                                          WHERE g.courseid = ?\", [$course1->id])",
          "629:         );",
          "630:         $this->assertEquals(",
          "631:                 2,",
          "632:                 $DB->count_records_sql(\"SELECT COUNT(gm.id)",
          "633:                                           FROM {groups_members} gm",
          "634:                                           JOIN {groups} g ON gm.groupid = g.id",
          "635:                                          WHERE g.courseid = ?\", [$course2->id])",
          "636:         );",
          "",
          "---------------"
        ],
        "lang/en/group.php||lang/en/group.php": [
          "File: lang/en/group.php -> lang/en/group.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "175: $string['potentialmembers'] = 'Potential members: {$a}';",
          "176: $string['potentialmembs'] = 'Potential members';",
          "177: $string['printerfriendly'] = 'Printer-friendly display';",
          "178: $string['privacy:metadata:groups'] = 'A record of group membership.';",
          "179: $string['privacy:metadata:groups:groupid'] = 'The ID of the group.';",
          "180: $string['privacy:metadata:groups:timeadded'] = 'The timestamp indicating when the user was added to the group.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: $string['privacy:metadata:core_message'] = 'The group conversations';",
          "",
          "---------------"
        ],
        "lang/en/message.php||lang/en/message.php": [
          "File: lang/en/message.php -> lang/en/message.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "143: $string['permitted'] = 'Permitted';",
          "144: $string['privacy'] = 'Privacy';",
          "145: $string['privacy_desc'] = 'You can restrict who can message you';",
          "146: $string['privacy:metadata:messages'] = 'Messages';",
          "147: $string['privacy:metadata:messages:conversationid'] = 'The ID of the conversation';",
          "148: $string['privacy:metadata:messages:fullmessage'] = 'The full message';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146: $string['privacy:metadata:core_favourites'] = 'The conversations starred by the user';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189: $string['privacy:metadata:notifications:useridto'] = 'The ID of the user who received the notification';",
          "190: $string['privacy:metadata:preference:core_message_settings'] = 'Settings related to messaging';",
          "191: $string['privacy:request:preference:set'] = 'The value of the setting \\'{$a->name}\\' was \\'{$a->value}\\'';",
          "192: $string['processorsettings'] = 'Processor settings';",
          "193: $string['removecontact'] = 'Remove contact';",
          "194: $string['removecontactconfirm'] = 'Are you sure you want to remove {$a} from your contacts?';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193: $string['privacy:export:conversationprefix'] = 'Conversation: ';",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2834:         upgrade_main_savepoint(true, 2018111900.01);",
          "2835:     }",
          "2837:     return true;",
          "2838: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2837:     if ($oldversion < 2018112000.00) {",
          "2839:         $sql = \"SELECT f.*, mc.contextid as conversationctx",
          "2840:                   FROM {favourite} f",
          "2841:                   JOIN {message_conversations} mc",
          "2842:                     ON mc.id = f.itemid\";",
          "2843:         $favouritedconversations = $DB->get_records_sql($sql);",
          "2844:         foreach ($favouritedconversations as $fc) {",
          "2845:             if (empty($fc->conversationctx)) {",
          "2846:                 $conversationidctx = \\context_user::instance($fc->userid)->id;",
          "2847:             } else {",
          "2848:                 $conversationidctx = $fc->conversationctx;",
          "2849:             }",
          "2851:             $DB->set_field('favourite', 'contextid', $conversationidctx, ['id' => $fc->id]);",
          "2852:         }",
          "2854:         upgrade_main_savepoint(true, 2018112000.00);",
          "2855:     }",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "929:     public static function set_favourite_conversation(int $conversationid, int $userid) : favourite {",
          "930:         if (!self::is_user_in_conversation($userid, $conversationid)) {",
          "931:             throw new \\moodle_exception(\"Conversation doesn't exist or user is not a member\");",
          "932:         }",
          "937:         } else {",
          "939:         }",
          "940:     }",
          "",
          "[Removed Lines]",
          "933:         $systemcontext = \\context_system::instance();",
          "934:         $ufservice = \\core_favourites\\service_factory::get_service_for_user_context(\\context_user::instance($userid));",
          "935:         if ($favourite = $ufservice->get_favourite('core_message', 'message_conversations', $conversationid, $systemcontext)) {",
          "936:             return $favourite;",
          "938:             return $ufservice->create_favourite('core_message', 'message_conversations', $conversationid, $systemcontext);",
          "",
          "[Added Lines]",
          "930:         global $DB;",
          "936:         $conversation = $DB->get_record('message_conversations', ['id' => $conversationid]);",
          "937:         $userctx = \\context_user::instance($userid);",
          "938:         if (empty($conversation->contextid)) {",
          "940:             $conversationctx = $userctx;",
          "943:             $conversationctx = \\context::instance_by_id($conversation->contextid);",
          "946:         $ufservice = \\core_favourites\\service_factory::get_service_for_user_context($userctx);",
          "947:         return $ufservice->create_favourite('core_message', 'message_conversations', $conversationid, $conversationctx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "949:     public static function unset_favourite_conversation(int $conversationid, int $userid) {",
          "952:     }",
          "",
          "[Removed Lines]",
          "950:         $ufservice = \\core_favourites\\service_factory::get_service_for_user_context(\\context_user::instance($userid));",
          "951:         $ufservice->delete_favourite('core_message', 'message_conversations', $conversationid, \\context_system::instance());",
          "",
          "[Added Lines]",
          "958:         global $DB;",
          "961:         $conversation = $DB->get_records('message_conversations', ['id' => $conversationid]);",
          "962:         $userctx = \\context_user::instance($userid);",
          "963:         if (empty($conversation->contextid)) {",
          "965:             $conversationctx = $userctx;",
          "966:         } else {",
          "968:             $conversationctx = \\context::instance_by_id($conversation->contextid);",
          "969:         }",
          "971:         $ufservice = \\core_favourites\\service_factory::get_service_for_user_context($userctx);",
          "972:         $ufservice->delete_favourite('core_message', 'message_conversations', $conversationid, $conversationctx);",
          "",
          "---------------"
        ],
        "message/classes/privacy/provider.php||message/classes/privacy/provider.php": [
          "File: message/classes/privacy/provider.php -> message/classes/privacy/provider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: class provider implements",
          "44:     \\core_privacy\\local\\metadata\\provider,",
          "45:     \\core_privacy\\local\\request\\subsystem\\provider,",
          "46:     \\core_privacy\\local\\request\\user_preference_provider,",
          "",
          "[Removed Lines]",
          "47:     \\core_privacy\\local\\request\\core_userlist_provider {",
          "",
          "[Added Lines]",
          "54:     \\core_privacy\\local\\request\\core_userlist_provider,",
          "57:     \\core_privacy\\local\\request\\subsystem\\plugin_provider {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         $items->add_user_preference('core_message_messageprovider_settings',",
          "148:             'privacy:metadata:preference:core_message_settings');",
          "150:         return $items;",
          "151:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:         $items->link_subsystem('core_favourites', 'privacy:metadata:core_favourites');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:         $hasdata = false;",
          "198:         $hasdata = $hasdata || $DB->record_exists_select('notifications', 'useridfrom = ? OR useridto = ?', [$userid, $userid]);",
          "201:         $hasdata = $hasdata || $DB->record_exists_select('message_contacts', 'userid = ? OR contactid = ?', [$userid, $userid]);",
          "202:         $hasdata = $hasdata || $DB->record_exists_select('message_users_blocked', 'userid = ? OR blockeduserid = ?',",
          "203:                 [$userid, $userid]);",
          "",
          "[Removed Lines]",
          "199:         $hasdata = $hasdata || $DB->record_exists('message_conversation_members', ['userid' => $userid]);",
          "200:         $hasdata = $hasdata || $DB->record_exists('messages', ['useridfrom' => $userid]);",
          "",
          "[Added Lines]",
          "212:         $sql = \"SELECT mc.id",
          "213:               FROM {message_conversations} mc",
          "214:               JOIN {message_conversation_members} mcm",
          "215:                 ON (mcm.conversationid = mc.id AND mcm.userid = :userid)",
          "216:              WHERE mc.contextid IS NULL\";",
          "217:         $hasdata = $hasdata || $DB->record_exists_sql($sql, ['userid' => $userid]);",
          "218:         $sql = \"SELECT mc.id",
          "219:               FROM {message_conversations} mc",
          "220:               JOIN {messages} m",
          "221:                 ON (m.conversationid = mc.id AND m.useridfrom = :useridfrom)",
          "222:              WHERE mc.contextid IS NULL\";",
          "223:         $hasdata = $hasdata || $DB->record_exists_sql($sql, ['useridfrom' => $userid]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208:             $contextlist->add_user_context($userid);",
          "209:         }",
          "211:         return $contextlist;",
          "212:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:         \\core_favourites\\privacy\\provider::add_contexts_for_userid($contextlist, $userid, 'core_message', 'message_conversations');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "237:         $hasdata = false;",
          "238:         $hasdata = $hasdata || $DB->record_exists_select('notifications', 'useridfrom = ? OR useridto = ?', [$userid, $userid]);",
          "241:         $hasdata = $hasdata || $DB->record_exists_select('message_contacts', 'userid = ? OR contactid = ?', [$userid, $userid]);",
          "242:         $hasdata = $hasdata || $DB->record_exists_select('message_users_blocked', 'userid = ? OR blockeduserid = ?',",
          "243:                         [$userid, $userid]);",
          "",
          "[Removed Lines]",
          "239:         $hasdata = $hasdata || $DB->record_exists('message_conversation_members', ['userid' => $userid]);",
          "240:         $hasdata = $hasdata || $DB->record_exists('messages', ['useridfrom' => $userid]);",
          "",
          "[Added Lines]",
          "265:         $sql = \"SELECT mc.id",
          "266:               FROM {message_conversations} mc",
          "267:               JOIN {message_conversation_members} mcm",
          "268:                 ON (mcm.conversationid = mc.id AND mcm.userid = :userid)",
          "269:              WHERE mc.contextid IS NULL\";",
          "270:         $hasdata = $hasdata || $DB->record_exists_sql($sql, ['userid' => $userid]);",
          "271:         $sql = \"SELECT mc.id",
          "272:               FROM {message_conversations} mc",
          "273:               JOIN {messages} m",
          "274:                 ON (m.conversationid = mc.id AND m.useridfrom = :useridfrom)",
          "275:              WHERE mc.contextid IS NULL\";",
          "276:         $hasdata = $hasdata || $DB->record_exists_sql($sql, ['useridfrom' => $userid]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "247:         if ($hasdata) {",
          "248:             $userlist->add_user($userid);",
          "249:         }",
          "250:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:         $component = $userlist->get_component();",
          "289:         if ($component != 'core_message') {",
          "290:             $userlist->set_component('core_message');",
          "291:         }",
          "292:         \\core_favourites\\privacy\\provider::add_userids_for_context($userlist, 'message_conversations');",
          "293:         if ($component != 'core_message') {",
          "294:             $userlist->set_component($component);",
          "295:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "283:         self::export_user_data_notifications($userid);",
          "287:     }",
          "",
          "[Removed Lines]",
          "286:         self::export_user_data_messages($userid);",
          "",
          "[Added Lines]",
          "332:         $context = reset($contexts);",
          "333:         self::export_conversations($userid, '', '', $context);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "345:         static::delete_user_data($context->instanceid);",
          "346:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:     public static function add_contexts_for_conversations(contextlist $contextlist, int $userid, string $component,",
          "409:                                                           string $itemtype, int $itemid = 0) {",
          "411:         $sql = \"SELECT mc.contextid",
          "412:                   FROM {message_conversations} mc",
          "413:                   JOIN {message_conversation_members} mcm",
          "414:                     ON (mcm.conversationid = mc.id AND mcm.userid = :userid)",
          "415:                   JOIN {context} ctx",
          "416:                     ON mc.contextid = ctx.id",
          "417:                  WHERE mc.component = :component AND mc.itemtype = :itemtype\";",
          "418:         $params = [",
          "419:             'userid' => $userid,",
          "420:             'component' => $component,",
          "421:             'itemtype' => $itemtype,",
          "422:         ];",
          "424:         if (!empty($itemid)) {",
          "425:             $sql .= \" AND itemid = :itemid\";",
          "426:             $params['itemid'] = $itemid;",
          "427:         }",
          "429:         $contextlist->add_from_sql($sql, $params);",
          "432:         \\core_favourites\\privacy\\provider::add_contexts_for_userid($contextlist, $userid, 'core_message', 'message_conversations');",
          "434:     }",
          "444:     public static function add_conversations_in_context(userlist $userlist, string $component, string $itemtype, int $itemid = 0) {",
          "445:         $sql = \"SELECT mcm.userid",
          "446:                   FROM {message_conversation_members} mcm",
          "447:             INNER JOIN {message_conversations} mc",
          "448:                     ON mc.id = mcm.conversationid",
          "449:                  WHERE mc.contextid = :contextid AND mc.component = :component AND mc.itemtype = :itemtype\";",
          "450:         $params = [",
          "451:             'contextid' => $userlist->get_context()->id,",
          "452:             'component' => $component,",
          "453:             'itemtype' => $itemtype",
          "454:         ];",
          "456:         if (!empty($itemid)) {",
          "457:             $sql .= \" AND itemid = :itemid\";",
          "458:             $params['itemid'] = $itemid;",
          "459:         }",
          "461:         $userlist->add_from_sql('userid', $sql, $params);",
          "464:         $component = $userlist->get_component();",
          "465:         if ($component != 'core_message') {",
          "466:             $userlist->set_component('core_message');",
          "467:         }",
          "468:         \\core_favourites\\privacy\\provider::add_userids_for_context($userlist, 'message_conversations');",
          "469:         if ($component != 'core_message') {",
          "470:             $userlist->set_component($component);",
          "471:         }",
          "472:     }",
          "487:     public static function export_conversations(int $userid, string $component, string $itemtype, \\context $context,",
          "488:                                                 array $subcontext = [], int $itemid = 0) {",
          "489:         global $DB;",
          "492:         $sql = \"SELECT DISTINCT mc.*",
          "493:                   FROM {message_conversations} mc",
          "494:                   JOIN {message_conversation_members} mcm",
          "495:                     ON (mcm.conversationid = mc.id AND mcm.userid = :userid)\";",
          "496:         $params = [",
          "497:             'userid' => $userid",
          "498:         ];",
          "501:         if (!empty($component) && !empty($itemtype)) {",
          "502:             $sql .= \" WHERE mc.component = :component AND mc.itemtype = :itemtype\";",
          "503:             $params['component'] = $component;",
          "504:             $params['itemtype'] = $itemtype;",
          "505:             if (!empty($itemid)) {",
          "506:                 $sql .= \" AND mc.itemid = :itemid\";",
          "507:                 $params['itemid'] = $itemid;",
          "508:             }",
          "509:         } else {",
          "511:             $sql .= \" WHERE mc.contextid IS NULL\";",
          "512:         }",
          "514:         if ($conversations = $DB->get_records_sql($sql, $params)) {",
          "516:             foreach ($conversations as $conversation) {",
          "517:                 self::export_user_data_conversation_messages($userid, $conversation, $context, $subcontext);",
          "518:             }",
          "519:         }",
          "520:     }",
          "530:     public static function delete_conversations_for_all_users(\\context $context, string $component, string $itemtype,",
          "531:                                                               int $itemid = 0) {",
          "532:         global $DB;",
          "534:         if (empty($context)) {",
          "535:             return;",
          "536:         }",
          "538:         $select = \"contextid = :contextid AND component = :component AND itemtype = :itemtype\";",
          "539:         $params = [",
          "540:             'contextid' => $context->id,",
          "541:             'component' => $component,",
          "542:             'itemtype' => $itemtype",
          "543:         ];",
          "545:         if (!empty($itemid)) {",
          "546:             $select .= \" AND itemid = :itemid\";",
          "547:             $params['itemid'] = $itemid;",
          "548:         }",
          "551:         if ($conversationids = $DB->get_records_select('message_conversations', $select, $params, '', 'id')) {",
          "552:             $conversationids = array_keys($conversationids);",
          "553:             $messageids = $DB->get_records_list('messages', 'conversationid', $conversationids);",
          "554:             $messageids = array_keys($messageids);",
          "557:             foreach ($conversationids as $conversationid) {",
          "558:                 \\core_favourites\\privacy\\provider::delete_favourites_for_all_users(",
          "559:                     $context,",
          "560:                     'core_message',",
          "561:                     'message_conversations',",
          "562:                     $conversationid);",
          "563:             }",
          "566:             $DB->delete_records_list('message_user_actions', 'messageid', $messageids);",
          "567:             $DB->delete_records_list('messages', 'id', $messageids);",
          "570:             $DB->delete_records_list('message_conversation_members', 'conversationid', $conversationids);",
          "571:             $DB->delete_records_list('message_conversations', 'id', $conversationids);",
          "572:         }",
          "573:     }",
          "587:     public static function delete_conversations_for_user(approved_contextlist $contextlist, string $component, string $itemtype,",
          "588:                                                          int $itemid = 0) {",
          "589:         self::delete_user_data_conversations(",
          "590:             $contextlist->get_user()->id,",
          "591:             $contextlist->get_contextids(),",
          "592:             $component,",
          "593:             $itemtype,",
          "594:             $itemid",
          "595:         );",
          "596:     }",
          "606:     public static function delete_conversations_for_users(approved_userlist $userlist, string $component, string $itemtype,",
          "607:                                                           int $itemid = 0) {",
          "608:         global $DB;",
          "610:         $userids = $userlist->get_userids();",
          "611:         if (empty($userids)) {",
          "612:             return;",
          "613:         }",
          "615:         $context = $userlist->get_context();",
          "616:         $select = \"mc.contextid = :contextid AND mc.component = :component AND mc.itemtype = :itemtype\";",
          "617:         $params = [",
          "618:             'contextid' => $context->id,",
          "619:             'component' => $component,",
          "620:             'itemtype' => $itemtype",
          "621:         ];",
          "622:         if (!empty($itemid)) {",
          "623:             $select .= \" AND itemid = :itemid\";",
          "624:             $params['itemid'] = $itemid;",
          "625:         }",
          "628:         list($useridsql, $useridparams) = $DB->get_in_or_equal($userids, SQL_PARAMS_NAMED);",
          "629:         $sql = \"SELECT DISTINCT mcm.conversationid as id",
          "630:                   FROM {message_conversation_members} mcm",
          "631:             INNER JOIN {message_conversations} mc",
          "632:                     ON mc.id = mcm.conversationid",
          "633:                  WHERE mcm.userid $useridsql AND $select\";",
          "634:         $params += $useridparams;",
          "635:         $conversationids = array_keys($DB->get_records_sql($sql, $params));",
          "636:         if (!empty($conversationids)) {",
          "637:             list($conversationidsql, $conversationidparams) = $DB->get_in_or_equal($conversationids, SQL_PARAMS_NAMED);",
          "640:             $sql = \"SELECT DISTINCT m.id",
          "641:                       FROM {messages} m",
          "642:                 INNER JOIN {message_conversations} mc",
          "643:                         ON mc.id = m.conversationid",
          "644:                 INNER JOIN {message_user_actions} mua",
          "645:                         ON mua.messageid = m.id",
          "646:                      WHERE mua.userid $useridsql  AND mc.id $conversationidsql\";",
          "647:             $params = $useridparams + $conversationidparams;",
          "648:             $messageids = array_keys($DB->get_records_sql($sql, $params));",
          "649:             if (!empty($messageids)) {",
          "651:                 list($messageidsql, $messageidparams) = $DB->get_in_or_equal($messageids, SQL_PARAMS_NAMED);",
          "652:                 $select = \"messageid $messageidsql AND userid $useridsql\";",
          "653:                 $DB->delete_records_select('message_user_actions', $select, $messageidparams + $useridparams);",
          "654:             }",
          "657:             $sql = \"SELECT DISTINCT m.id",
          "658:                       FROM {messages} m",
          "659:                      WHERE m.useridfrom $useridsql AND m.conversationid $conversationidsql\";",
          "661:             $messageids = array_keys($DB->get_records_sql($sql, $params));",
          "662:             if (!empty($messageids)) {",
          "664:                 $DB->delete_records_list('message_user_actions', 'messageid', $messageids);",
          "667:                 $DB->delete_records_list('messages', 'id', $messageids);",
          "668:             }",
          "672:             $sql = \"conversationid $conversationidsql AND userid $useridsql\";",
          "674:             $DB->delete_records_select('message_conversation_members', $sql, $params);",
          "677:             $userlist = new \\core_privacy\\local\\request\\approved_userlist($context, 'core_message', $userids);",
          "678:             \\core_favourites\\privacy\\provider::delete_favourites_for_userlist(",
          "679:                 $userlist,",
          "680:                 'message_conversations'",
          "681:             );",
          "682:         }",
          "683:     }",
          "696:     protected static function delete_user_data_conversations(int $userid, array $contextids, string $component,",
          "697:                                                             string $itemtype, int $itemid = 0) {",
          "698:         global $DB;",
          "700:         if (empty($contextids) && empty($component) && empty($itemtype) && empty($itemid)) {",
          "702:             $select = \"mc.contextid IS NULL\";",
          "703:             $params = [];",
          "704:         } else {",
          "705:             list($contextidsql, $contextidparams) = $DB->get_in_or_equal($contextids, SQL_PARAMS_NAMED);",
          "706:             $select = \"mc.contextid $contextidsql AND mc.component = :component AND mc.itemtype = :itemtype\";",
          "707:             $params = [",
          "708:                 'component' => $component,",
          "709:                 'itemtype' => $itemtype",
          "710:             ];",
          "711:             $params += $contextidparams;",
          "712:             if (!empty($itemid)) {",
          "713:                 $select .= \" AND itemid = :itemid\";",
          "714:                 $params['itemid'] = $itemid;",
          "715:             }",
          "716:         }",
          "719:         $sql = \"SELECT DISTINCT mcm.conversationid as id",
          "720:                   FROM {message_conversation_members} mcm",
          "721:             INNER JOIN {message_conversations} mc",
          "722:                     ON mc.id = mcm.conversationid",
          "723:                  WHERE mcm.userid = :userid AND $select\";",
          "724:         $params['userid'] = $userid;",
          "725:         $conversationids = array_keys($DB->get_records_sql($sql, $params));",
          "726:         if (!empty($conversationids)) {",
          "727:             list($conversationidsql, $conversationidparams) = $DB->get_in_or_equal($conversationids, SQL_PARAMS_NAMED);",
          "730:             $sql = \"SELECT DISTINCT m.id",
          "731:                       FROM {messages} m",
          "732:                 INNER JOIN {message_conversations} mc",
          "733:                         ON mc.id = m.conversationid",
          "734:                 INNER JOIN {message_user_actions} mua",
          "735:                         ON mua.messageid = m.id",
          "736:                      WHERE mua.userid = :userid AND mc.id $conversationidsql\";",
          "737:             $params = ['userid' => $userid] + $conversationidparams;",
          "738:             $messageids = array_keys($DB->get_records_sql($sql, $params));",
          "739:             if (!empty($messageids)) {",
          "741:                 list($messageidsql, $messageidparams) = $DB->get_in_or_equal($messageids, SQL_PARAMS_NAMED);",
          "742:                 $select = \"messageid $messageidsql AND userid = :userid\";",
          "743:                 $DB->delete_records_select('message_user_actions', $select, $messageidparams + ['userid' => $userid]);",
          "744:             }",
          "747:             $sql = \"SELECT DISTINCT m.id",
          "748:                       FROM {messages} m",
          "749:                      WHERE m.useridfrom = :userid AND m.conversationid $conversationidsql\";",
          "751:             $messageids = array_keys($DB->get_records_sql($sql, $params));",
          "752:             if (!empty($messageids)) {",
          "754:                 $DB->delete_records_list('message_user_actions', 'messageid', $messageids);",
          "757:                 $DB->delete_records_list('messages', 'id', $messageids);",
          "758:             }",
          "762:             $sql = \"conversationid $conversationidsql AND userid = :userid\";",
          "764:             $DB->delete_records_select('message_conversation_members', $sql, $params);",
          "767:             if (empty($contextids) && empty($component) && empty($itemtype) && empty($itemid)) {",
          "769:                 $favouritectxids = [\\context_user::instance($userid)->id];",
          "770:             } else {",
          "771:                 $favouritectxids = $contextids;",
          "772:             }",
          "773:             $contextlist = new \\core_privacy\\local\\request\\approved_contextlist(",
          "774:                 \\core_user::get_user($userid),",
          "775:                 'core_message',",
          "776:                 $favouritectxids",
          "777:             );",
          "778:             \\core_favourites\\privacy\\provider::delete_favourites_for_user(",
          "779:                 $contextlist,",
          "780:                 'core_message',",
          "781:                 'message_conversations'",
          "782:             );",
          "783:         }",
          "784:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "353:     protected static function delete_user_data(int $userid) {",
          "354:         global $DB;",
          "359:         $DB->delete_records_select('message_contacts', 'userid = ? OR contactid = ?', [$userid, $userid]);",
          "360:         $DB->delete_records_select('message_contact_requests', 'userid = ? OR requesteduserid = ?', [$userid, $userid]);",
          "361:         $DB->delete_records_select('message_users_blocked', 'userid = ? OR blockeduserid = ?', [$userid, $userid]);",
          "",
          "[Removed Lines]",
          "356:         $DB->delete_records('messages', ['useridfrom' => $userid]);",
          "357:         $DB->delete_records('message_user_actions', ['userid' => $userid]);",
          "358:         $DB->delete_records('message_conversation_members', ['userid' => $userid]);",
          "",
          "[Added Lines]",
          "795:         self::delete_user_data_conversations($userid, [], '', '');",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "438:     }",
          "446:         global $DB;",
          "473:                 }",
          "503:                 }",
          "508:             }",
          "509:         }",
          "510:     }",
          "",
          "[Removed Lines]",
          "445:     protected static function export_user_data_messages(int $userid) {",
          "448:         $context = \\context_user::instance($userid);",
          "450:         $sql = \"SELECT DISTINCT mcm.conversationid as id",
          "451:                   FROM {message_conversation_members} mcm",
          "452:                  WHERE mcm.userid = :userid\";",
          "453:         if ($conversations = $DB->get_records_sql($sql, ['userid' => $userid])) {",
          "455:             $conversationids = array_keys($conversations);",
          "456:             list($conversationidsql, $conversationparams) = $DB->get_in_or_equal($conversationids, SQL_PARAMS_NAMED);",
          "457:             $userfields = \\user_picture::fields('u');",
          "458:             $userssql = \"SELECT mcm.conversationid, $userfields",
          "459:                            FROM {user} u",
          "460:                      INNER JOIN {message_conversation_members} mcm",
          "461:                              ON u.id = mcm.userid",
          "462:                           WHERE mcm.conversationid $conversationidsql",
          "463:                             AND mcm.userid != :userid",
          "464:                             AND u.deleted = 0\";",
          "465:             $otherusers = $DB->get_records_sql($userssql, $conversationparams + ['userid' => $userid]);",
          "466:             foreach ($conversations as $conversation) {",
          "467:                 $otheruserfullname = get_string('unknownuser', 'core_message');",
          "471:                 if (isset($otherusers[$conversation->id])) {",
          "472:                     $otheruserfullname = fullname($otherusers[$conversation->id]);",
          "476:                 $sql = \"SELECT m.*, muadelete.timecreated as timedeleted, muaread.timecreated as timeread",
          "477:                           FROM {messages} m",
          "478:                      LEFT JOIN {message_user_actions} muadelete",
          "479:                             ON m.id = muadelete.messageid AND muadelete.action = :deleteaction",
          "480:                      LEFT JOIN {message_user_actions} muaread",
          "481:                             ON m.id = muaread.messageid AND muaread.action = :readaction",
          "482:                          WHERE conversationid = :conversationid",
          "483:                       ORDER BY m.timecreated ASC\";",
          "484:                 $messages = $DB->get_recordset_sql($sql, ['deleteaction' => \\core_message\\api::MESSAGE_ACTION_DELETED,",
          "485:                     'readaction' => \\core_message\\api::MESSAGE_ACTION_READ, 'conversationid' => $conversation->id]);",
          "486:                 $messagedata = [];",
          "487:                 foreach ($messages as $message) {",
          "488:                     $timeread = !is_null($message->timeread) ? transform::datetime($message->timeread) : '-';",
          "489:                     $issender = $userid == $message->useridfrom;",
          "491:                     $data = [",
          "492:                         'sender' => transform::yesno($issender),",
          "493:                         'message' => message_format_message_text($message),",
          "494:                         'timecreated' => transform::datetime($message->timecreated),",
          "495:                         'timeread' => $timeread",
          "496:                     ];",
          "498:                     if (!is_null($message->timedeleted)) {",
          "499:                         $data['timedeleted'] = transform::datetime($message->timedeleted);",
          "500:                     }",
          "502:                     $messagedata[] = (object) $data;",
          "504:                 $messages->close();",
          "506:                 writer::with_context($context)->export_data([get_string('messages', 'core_message'), $otheruserfullname],",
          "507:                     (object) $messagedata);",
          "",
          "[Added Lines]",
          "887:     protected static function export_user_data_conversation_messages(int $userid, \\stdClass $conversation, \\context $context,",
          "888:                                                                      array $subcontext = []) {",
          "892:         $sql = \"SELECT m.*, muadelete.timecreated as timedeleted, muaread.timecreated as timeread",
          "893:                   FROM {messages} m",
          "894:              LEFT JOIN {message_user_actions} muadelete",
          "895:                     ON m.id = muadelete.messageid AND muadelete.action = :deleteaction AND muadelete.userid = :deleteuserid",
          "896:              LEFT JOIN {message_user_actions} muaread",
          "897:                     ON m.id = muaread.messageid AND muaread.action = :readaction AND muaread.userid = :readuserid",
          "898:                  WHERE conversationid = :conversationid",
          "899:               ORDER BY m.timecreated ASC\";",
          "900:         $messages = $DB->get_recordset_sql($sql, ['deleteaction' => \\core_message\\api::MESSAGE_ACTION_DELETED,",
          "901:             'readaction' => \\core_message\\api::MESSAGE_ACTION_READ, 'conversationid' => $conversation->id,",
          "902:             'deleteuserid' => $userid, 'readuserid' => $userid]);",
          "903:         $messagedata = [];",
          "904:         foreach ($messages as $message) {",
          "905:             $timeread = !is_null($message->timeread) ? transform::datetime($message->timeread) : '-';",
          "906:             $issender = $userid == $message->useridfrom;",
          "908:             $data = [",
          "909:                 'issender' => transform::yesno($issender),",
          "910:                 'message' => message_format_message_text($message),",
          "911:                 'timecreated' => transform::datetime($message->timecreated),",
          "912:                 'timeread' => $timeread",
          "913:             ];",
          "914:             if ($conversation->type == \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP && !$issender) {",
          "916:                 $data['sender'] = transform::user($message->useridfrom);",
          "917:             }",
          "919:             if (!is_null($message->timedeleted)) {",
          "920:                 $data['timedeleted'] = transform::datetime($message->timedeleted);",
          "921:             }",
          "923:             $messagedata[] = (object) $data;",
          "924:         }",
          "925:         $messages->close();",
          "927:         if (!empty($messagedata)) {",
          "929:             if (empty($conversation->contextid)) {",
          "931:                 $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation->id]);",
          "932:                 $members = array_filter($members, function ($member) use ($userid) {",
          "933:                     return $member->userid != $userid;",
          "934:                 });",
          "935:                 if ($otheruser = reset($members)) {",
          "936:                     $otherusertext = $otheruser->userid;",
          "937:                 } else {",
          "938:                     $otherusertext = get_string('unknownuser', 'core_message') . '_' . $conversation->id;",
          "941:                 $subcontext = array_merge(",
          "942:                     $subcontext,",
          "943:                     [get_string('messages', 'core_message'), $otherusertext]",
          "944:                 );",
          "947:                 $conversationctx = \\context_user::instance($userid);",
          "948:             } else {",
          "950:                 if (get_string_manager()->string_exists($conversation->itemtype, $conversation->component)) {",
          "951:                     $itemtypestring = get_string($conversation->itemtype, $conversation->component);",
          "952:                 } else {",
          "954:                     $itemtypestring = $conversation->itemtype;",
          "957:                 $conversationname = get_string('privacy:export:conversationprefix', 'core_message') . $conversation->name;",
          "958:                 $subcontext = array_merge(",
          "959:                     $subcontext,",
          "960:                     [get_string('messages', 'core_message'), $itemtypestring, $conversationname]",
          "961:                 );",
          "964:                 $conversationctx = \\context::instance_by_id($conversation->contextid);",
          "965:             }",
          "968:             writer::with_context($context)->export_data($subcontext, (object) $messagedata);",
          "971:             $conversationfavourite = \\core_favourites\\privacy\\provider::get_favourites_info_for_user($userid, $conversationctx,",
          "972:                 'core_message', 'message_conversations', $conversation->id);",
          "973:             if ($conversationfavourite) {",
          "975:                 writer::with_context($context)->export_related_data($subcontext, 'starred', (object) $conversationfavourite);",
          "",
          "---------------"
        ],
        "message/tests/privacy_provider_test.php||message/tests/privacy_provider_test.php": [
          "File: message/tests/privacy_provider_test.php -> message/tests/privacy_provider_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: use core_privacy\\local\\metadata\\collection;",
          "26: use core_message\\privacy\\provider;",
          "27: use \\core_privacy\\local\\request\\writer;",
          "28: use \\core_privacy\\local\\request\\transform;",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: use \\core_privacy\\local\\request\\contextlist;",
          "30: use \\core_message\\tests\\helper as testhelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:         $collection = new collection('core_message');",
          "46:         $newcollection = provider::get_metadata($collection);",
          "47:         $itemcollection = $newcollection->get_collection();",
          "50:         $messagestable = array_shift($itemcollection);",
          "51:         $this->assertEquals('messages', $messagestable->get_name());",
          "",
          "[Removed Lines]",
          "48:         $this->assertCount(8, $itemcollection);",
          "",
          "[Added Lines]",
          "50:         $this->assertCount(9, $itemcollection);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:         $usersettings = array_shift($itemcollection);",
          "72:         $this->assertEquals('core_message_messageprovider_settings', $usersettings->get_name());",
          "74:         $privacyfields = $messagestable->get_privacy_fields();",
          "75:         $this->assertArrayHasKey('useridfrom', $privacyfields);",
          "76:         $this->assertArrayHasKey('conversationid', $privacyfields);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:         $favouriteconversations = array_shift($itemcollection);",
          "77:         $this->assertEquals('core_favourites', $favouriteconversations->get_name());",
          "78:         $this->assertEquals('privacy:metadata:core_favourites', $favouriteconversations->get_summary());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "205:     }",
          "211:         $this->resetAfterTest();",
          "213:         $user1 = $this->getDataGenerator()->create_user();",
          "214:         $user2 = $this->getDataGenerator()->create_user();",
          "217:         $contextlist = provider::get_contexts_for_userid($user1->id);",
          "218:         $this->assertCount(0, $contextlist);",
          "219:         $contextlist = provider::get_contexts_for_userid($user2->id);",
          "220:         $this->assertCount(0, $contextlist);",
          "225:         $contextlist = provider::get_contexts_for_userid($user1->id);",
          "226:         $this->assertCount(1, $contextlist);",
          "227:         $contextforuser = $contextlist->current();",
          "228:         $this->assertEquals(",
          "230:                 $contextforuser->id);",
          "233:         $contextlist = provider::get_contexts_for_userid($user2->id);",
          "234:         $this->assertCount(1, $contextlist);",
          "235:         $contextforuser = $contextlist->current();",
          "236:         $this->assertEquals(",
          "238:                 $contextforuser->id);",
          "239:     }",
          "",
          "[Removed Lines]",
          "210:     public function test_get_contexts_for_userid_with_message() {",
          "222:         $this->create_message($user1->id, $user2->id, time() - (9 * DAYSECS));",
          "229:                 context_user::instance($user1->id)->id,",
          "237:                 context_user::instance($user2->id)->id,",
          "",
          "[Added Lines]",
          "216:     public function test_get_contexts_for_userid_with_private_messages() {",
          "221:         $user3 = $this->getDataGenerator()->create_user();",
          "230:         $pm1id = $this->create_message($user1->id, $user2->id, time() - (9 * DAYSECS));",
          "237:                 \\context_user::instance($user1->id)->id,",
          "245:                 \\context_user::instance($user2->id)->id,",
          "246:                 $contextforuser->id);",
          "249:         $contextlist = provider::get_contexts_for_userid($user3->id);",
          "250:         $this->assertCount(0, $contextlist);",
          "251:     }",
          "256:     public function test_get_contexts_for_userid_with_messages() {",
          "257:         $this->resetAfterTest();",
          "258:         $this->setAdminUser();",
          "260:         $user1 = $this->getDataGenerator()->create_user();",
          "261:         $user2 = $this->getDataGenerator()->create_user();",
          "262:         $user3 = $this->getDataGenerator()->create_user();",
          "263:         $user4 = $this->getDataGenerator()->create_user();",
          "266:         $contextlist = provider::get_contexts_for_userid($user1->id);",
          "267:         $this->assertCount(0, $contextlist);",
          "268:         $contextlist = provider::get_contexts_for_userid($user2->id);",
          "269:         $this->assertCount(0, $contextlist);",
          "272:         $course1 = $this->getDataGenerator()->create_course();",
          "273:         $coursecontext1 = context_course::instance($course1->id);",
          "276:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id);",
          "277:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id);",
          "278:         $this->getDataGenerator()->enrol_user($user3->id, $course1->id);",
          "281:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 1));",
          "284:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user1->id));",
          "285:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user2->id));",
          "286:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user3->id));",
          "289:         $component = 'core_group';",
          "290:         $itemtype = 'groups';",
          "291:         $conversation1 = \\core_message\\api::get_conversation_by_area(",
          "292:             $component,",
          "293:             $itemtype,",
          "294:             $group1a->id,",
          "295:             $coursecontext1->id",
          "296:         );",
          "299:         $now = time();",
          "300:         $m1id = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 1', $now + 1);",
          "301:         $m2id = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 2', $now + 2);",
          "302:         $m3id = testhelper::send_fake_message_to_conversation($user2, $conversation1->id, 'Message 3', $now + 3);",
          "305:         $contextlist = provider::get_contexts_for_userid($user1->id);",
          "306:         $this->assertCount(0, $contextlist);",
          "309:         $contextlist = provider::get_contexts_for_userid($user2->id);",
          "310:         $this->assertCount(0, $contextlist);",
          "313:         $contextlist = provider::get_contexts_for_userid($user3->id);",
          "314:         $this->assertCount(0, $contextlist);",
          "317:         $contextlist = provider::get_contexts_for_userid($user4->id);",
          "318:         $this->assertCount(0, $contextlist);",
          "321:         $pm1id = $this->create_message($user1->id, $user2->id, time() - (9 * DAYSECS));",
          "324:         $contextlist = provider::get_contexts_for_userid($user1->id);",
          "325:         $this->assertCount(1, $contextlist);",
          "326:         $contextforuser = $contextlist->current();",
          "327:         $this->assertEquals(",
          "328:                 \\context_user::instance($user1->id)->id,",
          "329:                 $contextforuser->id);",
          "332:         $contextlist = provider::get_contexts_for_userid($user2->id);",
          "333:         $this->assertCount(1, $contextlist);",
          "334:         $contextforuser = $contextlist->current();",
          "335:         $this->assertEquals(",
          "336:                 \\context_user::instance($user2->id)->id,",
          "340:         $contextlist = provider::get_contexts_for_userid($user3->id);",
          "341:         $this->assertCount(0, $contextlist);",
          "344:         $contextlist = provider::get_contexts_for_userid($user4->id);",
          "345:         $this->assertCount(0, $contextlist);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "493:         global $DB;",
          "495:         $this->resetAfterTest();",
          "",
          "[Removed Lines]",
          "492:     public function test_export_for_context_with_messages() {",
          "",
          "[Added Lines]",
          "599:     public function test_export_for_context_with_private_messages() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "529:         $this->assertTrue($writer->has_any_data());",
          "533:         $this->assertCount(3, $messages);",
          "535:         $dbm1 = $DB->get_record('messages', ['id' => $m1]);",
          "",
          "[Removed Lines]",
          "532:         $messages = (array) $writer->get_data([get_string('messages', 'core_message'), fullname($user2)]);",
          "",
          "[Added Lines]",
          "639:         $messages = (array) $writer->get_data([get_string('messages', 'core_message'), $user2->id]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "541:         $m2 = array_shift($messages);",
          "542:         $m3 = array_shift($messages);",
          "545:         $this->assertEquals(message_format_message_text($dbm1), $m1->message);",
          "546:         $this->assertEquals(transform::datetime($now - (9 * DAYSECS)), $m1->timecreated);",
          "548:         $this->assertArrayNotHasKey('timedeleted', (array) $m1);",
          "551:         $this->assertEquals(message_format_message_text($dbm2), $m2->message);",
          "552:         $this->assertEquals(transform::datetime($now - (8 * DAYSECS)), $m2->timecreated);",
          "553:         $this->assertEquals('-', $m2->timeread);",
          "554:         $this->assertArrayHasKey('timedeleted', (array) $m2);",
          "557:         $this->assertEquals(message_format_message_text($dbm3), $m3->message);",
          "558:         $this->assertEquals(transform::datetime($now - (7 * DAYSECS)), $m3->timecreated);",
          "559:         $this->assertEquals('-', $m3->timeread);",
          "563:         $this->assertCount(3, $messages);",
          "565:         $dbm4 = $DB->get_record('messages', ['id' => $m4]);",
          "",
          "[Removed Lines]",
          "544:         $this->assertEquals(get_string('yes'), $m1->sender);",
          "547:         $this->assertNotEquals('-', $m1->timeread);",
          "550:         $this->assertEquals(get_string('no'), $m2->sender);",
          "556:         $this->assertEquals(get_string('yes'), $m3->sender);",
          "562:         $messages = (array) $writer->get_data([get_string('messages', 'core_message'), fullname($user3)]);",
          "",
          "[Added Lines]",
          "651:         $this->assertEquals(get_string('yes'), $m1->issender);",
          "654:         $this->assertEquals('-', $m1->timeread);",
          "657:         $this->assertEquals(get_string('no'), $m2->issender);",
          "663:         $this->assertEquals(get_string('yes'), $m3->issender);",
          "669:         $messages = (array) $writer->get_data([get_string('messages', 'core_message'), $user3->id]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "571:         $m5 = array_shift($messages);",
          "572:         $m6 = array_shift($messages);",
          "575:         $this->assertEquals(message_format_message_text($dbm4), $m4->message);",
          "576:         $this->assertEquals(transform::datetime($now - (6 * DAYSECS)), $m4->timecreated);",
          "577:         $this->assertNotEquals('-', $m4->timeread);",
          "578:         $this->assertArrayNotHasKey('timedeleted', (array) $m4);",
          "581:         $this->assertEquals(message_format_message_text($dbm5), $m5->message);",
          "582:         $this->assertEquals(transform::datetime($now - (5 * DAYSECS)), $m5->timecreated);",
          "583:         $this->assertEquals('-', $m5->timeread);",
          "584:         $this->assertArrayHasKey('timedeleted', (array) $m5);",
          "587:         $this->assertEquals(message_format_message_text($dbm6), $m6->message);",
          "588:         $this->assertEquals(transform::datetime($now - (4 * DAYSECS)), $m6->timecreated);",
          "589:         $this->assertEquals('-', $m6->timeread);",
          "590:     }",
          "",
          "[Removed Lines]",
          "574:         $this->assertEquals(get_string('no'), $m4->sender);",
          "580:         $this->assertEquals(get_string('yes'), $m5->sender);",
          "586:         $this->assertEquals(get_string('no'), $m6->sender);",
          "",
          "[Added Lines]",
          "681:         $this->assertEquals(get_string('no'), $m4->issender);",
          "687:         $this->assertEquals(get_string('yes'), $m5->issender);",
          "693:         $this->assertEquals(get_string('no'), $m6->issender);",
          "702:     public function test_export_for_context_with_messages() {",
          "703:         global $DB;",
          "705:         $this->resetAfterTest();",
          "706:         $this->setAdminUser();",
          "707:         $now = time();",
          "708:         $systemcontext = \\context_system::instance();",
          "711:         $user1 = $this->getDataGenerator()->create_user();",
          "712:         $user2 = $this->getDataGenerator()->create_user();",
          "713:         $user3 = $this->getDataGenerator()->create_user();",
          "714:         $user1context = \\context_user::instance($user1->id);",
          "716:         $course1 = $this->getDataGenerator()->create_course();",
          "717:         $course2 = $this->getDataGenerator()->create_course();",
          "718:         $coursecontext1 = \\context_course::instance($course1->id);",
          "719:         $coursecontext2 = \\context_course::instance($course2->id);",
          "722:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id);",
          "723:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id);",
          "724:         $this->getDataGenerator()->enrol_user($user3->id, $course1->id);",
          "725:         $this->getDataGenerator()->enrol_user($user1->id, $course2->id);",
          "728:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 1));",
          "729:         $group2a = $this->getDataGenerator()->create_group(array('courseid' => $course2->id, 'enablemessaging' => 1));",
          "732:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user1->id));",
          "733:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user2->id));",
          "734:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user3->id));",
          "735:         $this->getDataGenerator()->create_group_member(array('groupid' => $group2a->id, 'userid' => $user1->id));",
          "738:         $component = 'core_group';",
          "739:         $itemtype = 'groups';",
          "740:         $conversation = \\core_message\\api::get_conversation_by_area(",
          "741:             $component,",
          "742:             $itemtype,",
          "743:             $group1a->id,",
          "744:             $coursecontext1->id",
          "745:         );",
          "748:         $pm1id = $this->create_message($user1->id, $user2->id, $now);",
          "750:         $dbpm1 = $DB->get_record('messages', ['id' => $pm1id]);",
          "753:         $m1 = testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 1', $now + 1);",
          "754:         $m2 = testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 2', $now + 2);",
          "755:         $m3 = testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Message 3', $now + 3);",
          "757:         $dbm1 = $DB->get_record('messages', ['id' => $m1]);",
          "758:         $dbm2 = $DB->get_record('messages', ['id' => $m2]);",
          "759:         $dbm3 = $DB->get_record('messages', ['id' => $m3]);",
          "762:         \\core_message\\api::mark_message_as_read($user2->id, $dbm1);",
          "763:         \\core_message\\api::delete_message($user1->id, $m2);",
          "766:         $this->export_context_data_for_user($user1->id, $coursecontext2, 'core_message');",
          "769:         $writer = writer::with_context($systemcontext);",
          "770:         $this->assertFalse($writer->has_any_data());",
          "773:         $writer = writer::with_context($coursecontext1);",
          "774:         $this->assertFalse($writer->has_any_data());",
          "777:         $writer = writer::with_context($coursecontext2);",
          "778:         $this->assertFalse($writer->has_any_data());",
          "781:         $this->export_context_data_for_user($user1->id, $user1context, 'core_message');",
          "782:         $writer = writer::with_context($user1context);",
          "783:         $this->assertTrue($writer->has_any_data());",
          "786:         $messages = (array) $writer->get_data([get_string('messages', 'core_message'), $user2->id]);",
          "787:         $this->assertCount(1, $messages);",
          "788:         $m1 = reset($messages);",
          "790:         $this->assertEquals(get_string('yes'), $m1->issender);",
          "791:         $this->assertEquals(message_format_message_text($dbpm1), $m1->message);",
          "792:         $this->assertEquals(transform::datetime($now), $m1->timecreated);",
          "793:         $this->assertEquals('-', $m1->timeread);",
          "794:         $this->assertArrayNotHasKey('timedeleted', (array) $m1);",
          "797:         $messages = (array) $writer->get_data([get_string('messages', 'core_message'), fullname($user3)]);",
          "798:         $this->assertCount(0, $messages);",
          "799:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "725:         $this->assertEquals(0, $DB->count_records('messages', ['useridfrom' => $user1->id]));",
          "730:         $this->assertEquals(0, $DB->count_records('message_user_actions', ['userid' => $user1->id]));",
          "",
          "[Removed Lines]",
          "728:         $this->assertEquals(1, $DB->count_records('message_user_actions'));",
          "",
          "[Added Lines]",
          "937:         $this->assertEquals(0, $DB->count_records('message_user_actions'));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "838:         $message = reset($messages);",
          "839:         $this->assertEquals($m2, $message->id);",
          "847:         $this->assertCount(1, $mcms);",
          "848:         $mcm = reset($mcms);",
          "",
          "[Removed Lines]",
          "841:         $this->assertCount(1, $muas);",
          "842:         $mua = reset($muas);",
          "843:         $this->assertEquals($user2->id, $mua->userid);",
          "844:         $this->assertEquals($m1, $mua->messageid);",
          "845:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_READ, $mua->action);",
          "",
          "[Added Lines]",
          "1050:         $this->assertCount(0, $muas);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1155:         $message = reset($messages);",
          "1156:         $this->assertEquals($m2, $message->id);",
          "1164:         $this->assertCount(1, $mcms);",
          "1165:         $mcm = reset($mcms);",
          "",
          "[Removed Lines]",
          "1158:         $this->assertCount(1, $muas);",
          "1159:         $mua = reset($muas);",
          "1160:         $this->assertEquals($user2->id, $mua->userid);",
          "1161:         $this->assertEquals($m1, $mua->messageid);",
          "1162:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_READ, $mua->action);",
          "",
          "[Added Lines]",
          "1363:         $this->assertCount(0, $muas);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1173:         $this->assertEquals($user3->id, $notification->useridto);",
          "1174:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1380:     public function test_add_contexts_for_conversations() {",
          "1381:         $this->resetAfterTest();",
          "1382:         $this->setAdminUser();",
          "1383:         $component = 'core_group';",
          "1384:         $itemtype = 'groups';",
          "1386:         $user1 = $this->getDataGenerator()->create_user();",
          "1387:         $user2 = $this->getDataGenerator()->create_user();",
          "1388:         $user3 = $this->getDataGenerator()->create_user();",
          "1389:         $user4 = $this->getDataGenerator()->create_user();",
          "1392:         $contextlist = new contextlist();",
          "1393:         provider::add_contexts_for_conversations($contextlist, $user1->id, $component, $itemtype);",
          "1394:         $this->assertCount(0, $contextlist);",
          "1395:         provider::add_contexts_for_conversations($contextlist, $user2->id, $component, $itemtype);",
          "1396:         $this->assertCount(0, $contextlist);",
          "1399:         $course1 = $this->getDataGenerator()->create_course();",
          "1400:         $course2 = $this->getDataGenerator()->create_course();",
          "1401:         $coursecontext1 = \\context_course::instance($course1->id);",
          "1402:         $coursecontext2 = \\context_course::instance($course2->id);",
          "1405:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id);",
          "1406:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id);",
          "1407:         $this->getDataGenerator()->enrol_user($user3->id, $course1->id);",
          "1408:         $this->getDataGenerator()->enrol_user($user1->id, $course2->id);",
          "1409:         $this->getDataGenerator()->enrol_user($user2->id, $course2->id);",
          "1412:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 1));",
          "1413:         $group2a = $this->getDataGenerator()->create_group(array('courseid' => $course2->id, 'enablemessaging' => 1));",
          "1416:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user1->id));",
          "1417:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user2->id));",
          "1418:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user3->id));",
          "1419:         $this->getDataGenerator()->create_group_member(array('groupid' => $group2a->id, 'userid' => $user1->id));",
          "1422:         $conversation1 = \\core_message\\api::get_conversation_by_area(",
          "1423:             $component,",
          "1424:             $itemtype,",
          "1425:             $group1a->id,",
          "1426:             $coursecontext1->id",
          "1427:         );",
          "1430:         $now = time();",
          "1431:         $m1id = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 1', $now + 1);",
          "1432:         $m2id = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 2', $now + 2);",
          "1433:         $m3id = testhelper::send_fake_message_to_conversation($user2, $conversation1->id, 'Message 3', $now + 3);",
          "1436:         $contextlist = new contextlist();",
          "1437:         provider::add_contexts_for_conversations($contextlist, $user1->id, $component, $itemtype);",
          "1438:         $this->assertCount(2, $contextlist);",
          "1439:         $this->assertContains($coursecontext1->id, $contextlist->get_contextids());",
          "1440:         $this->assertContains($coursecontext2->id, $contextlist->get_contextids());",
          "1443:         $contextlist = new contextlist();",
          "1444:         provider::add_contexts_for_conversations($contextlist, $user2->id, $component, $itemtype);",
          "1445:         $this->assertCount(1, $contextlist);",
          "1446:         $this->assertEquals($coursecontext1, $contextlist->current());",
          "1449:         $contextlist = new contextlist();",
          "1450:         provider::add_contexts_for_conversations($contextlist, $user3->id, $component, $itemtype);",
          "1451:         $this->assertCount(1, $contextlist);",
          "1452:         $this->assertEquals($coursecontext1, $contextlist->current());",
          "1455:         $contextlist = new contextlist();",
          "1456:         provider::add_contexts_for_conversations($contextlist, $user4->id, $component, $itemtype);",
          "1457:         $this->assertCount(0, $contextlist);",
          "1458:     }",
          "1463:     public function test_add_conversations_in_context() {",
          "1464:         $this->resetAfterTest();",
          "1465:         $this->setAdminUser();",
          "1466:         $component = 'core_group';",
          "1467:         $itemtype = 'groups';",
          "1469:         $user1 = $this->getDataGenerator()->create_user();",
          "1470:         $user2 = $this->getDataGenerator()->create_user();",
          "1471:         $user3 = $this->getDataGenerator()->create_user();",
          "1472:         $user4 = $this->getDataGenerator()->create_user();",
          "1475:         $course1 = $this->getDataGenerator()->create_course();",
          "1476:         $course2 = $this->getDataGenerator()->create_course();",
          "1477:         $coursecontext1 = \\context_course::instance($course1->id);",
          "1478:         $coursecontext2 = \\context_course::instance($course2->id);",
          "1481:         $userlist1 = new \\core_privacy\\local\\request\\userlist($coursecontext1, 'core_message');",
          "1482:         provider::add_conversations_in_context($userlist1, $component, $itemtype);",
          "1483:         $this->assertCount(0, $userlist1);",
          "1486:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id);",
          "1487:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id);",
          "1488:         $this->getDataGenerator()->enrol_user($user3->id, $course1->id);",
          "1489:         $this->getDataGenerator()->enrol_user($user4->id, $course1->id);",
          "1490:         $this->getDataGenerator()->enrol_user($user1->id, $course2->id);",
          "1491:         $this->getDataGenerator()->enrol_user($user2->id, $course2->id);",
          "1494:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 1));",
          "1495:         $group2a = $this->getDataGenerator()->create_group(array('courseid' => $course2->id, 'enablemessaging' => 1));",
          "1498:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user1->id));",
          "1499:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user2->id));",
          "1500:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user3->id));",
          "1501:         $this->getDataGenerator()->create_group_member(array('groupid' => $group2a->id, 'userid' => $user1->id));",
          "1504:         $conversation1 = \\core_message\\api::get_conversation_by_area(",
          "1505:             $component,",
          "1506:             $itemtype,",
          "1507:             $group1a->id,",
          "1508:             $coursecontext1->id",
          "1509:         );",
          "1512:         $now = time();",
          "1513:         $m1id = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 1', $now + 1);",
          "1514:         $m2id = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 2', $now + 2);",
          "1515:         $m3id = testhelper::send_fake_message_to_conversation($user2, $conversation1->id, 'Message 3', $now + 3);",
          "1518:         provider::add_conversations_in_context($userlist1, $component, $itemtype);",
          "1519:         $this->assertCount(3, $userlist1);",
          "1520:         $this->assertEquals(",
          "1521:                 [$user1->id, $user2->id, $user3->id],",
          "1522:                 $userlist1->get_userids());",
          "1525:         $userlist2 = new \\core_privacy\\local\\request\\userlist($coursecontext2, 'core_message');",
          "1526:         provider::add_conversations_in_context($userlist2, $component, $itemtype);",
          "1527:         $this->assertCount(1, $userlist2);",
          "1528:         $this->assertEquals(",
          "1529:                 [$user1->id],",
          "1530:                 $userlist2->get_userids());",
          "1531:     }",
          "1536:     public function test_export_conversations() {",
          "1537:         global $DB;",
          "1539:         $this->resetAfterTest();",
          "1540:         $this->setAdminUser();",
          "1541:         $now = time();",
          "1542:         $systemcontext = \\context_system::instance();",
          "1545:         $user1 = $this->getDataGenerator()->create_user();",
          "1546:         $user2 = $this->getDataGenerator()->create_user();",
          "1547:         $user3 = $this->getDataGenerator()->create_user();",
          "1548:         $user1context = \\context_user::instance($user1->id);",
          "1550:         $course1 = $this->getDataGenerator()->create_course();",
          "1551:         $course2 = $this->getDataGenerator()->create_course();",
          "1552:         $coursecontext1 = \\context_course::instance($course1->id);",
          "1553:         $coursecontext2 = \\context_course::instance($course2->id);",
          "1556:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id);",
          "1557:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id);",
          "1558:         $this->getDataGenerator()->enrol_user($user3->id, $course1->id);",
          "1559:         $this->getDataGenerator()->enrol_user($user1->id, $course2->id);",
          "1562:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 1));",
          "1563:         $group2a = $this->getDataGenerator()->create_group(array('courseid' => $course2->id, 'enablemessaging' => 1));",
          "1566:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user1->id));",
          "1567:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user2->id));",
          "1568:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user3->id));",
          "1569:         $this->getDataGenerator()->create_group_member(array('groupid' => $group2a->id, 'userid' => $user1->id));",
          "1572:         $pm1id = $this->create_message($user1->id, $user2->id, $now);",
          "1575:         $iconversation1id = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "1576:         $component = 'core_group';",
          "1577:         $itemtype = 'groups';",
          "1578:         $conversation1 = \\core_message\\api::get_conversation_by_area(",
          "1579:             $component,",
          "1580:             $itemtype,",
          "1581:             $group1a->id,",
          "1582:             $coursecontext1->id",
          "1583:         );",
          "1586:         \\core_message\\api::set_favourite_conversation($conversation1->id, $user1->id);",
          "1587:         \\core_message\\api::set_favourite_conversation($iconversation1id, $user2->id);",
          "1590:         $m1 = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 1', $now + 1);",
          "1591:         $m2 = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 2', $now + 2);",
          "1592:         $m3 = testhelper::send_fake_message_to_conversation($user2, $conversation1->id, 'Message 3', $now + 3);",
          "1594:         $dbm1 = $DB->get_record('messages', ['id' => $m1]);",
          "1595:         $dbm2 = $DB->get_record('messages', ['id' => $m2]);",
          "1596:         $dbm3 = $DB->get_record('messages', ['id' => $m3]);",
          "1599:         \\core_message\\api::mark_message_as_read($user1->id, $dbm3, $now + 5);",
          "1600:         \\core_message\\api::delete_message($user1->id, $m2);",
          "1603:         provider::export_conversations($user1->id, 'core_group', 'groups', $coursecontext1);",
          "1606:         $writer = writer::with_context($systemcontext);",
          "1607:         $this->assertFalse($writer->has_any_data());",
          "1610:         $writer = writer::with_context($coursecontext2);",
          "1611:         $this->assertFalse($writer->has_any_data());",
          "1614:         $writer = writer::with_context($coursecontext1);",
          "1615:         $this->assertTrue($writer->has_any_data());",
          "1618:         $messages = (array) $writer->get_data([",
          "1619:             get_string('messages', 'core_message'),",
          "1620:             get_string($conversation1->itemtype, $conversation1->component),",
          "1621:             get_string('privacy:export:conversationprefix', 'core_message') . $conversation1->name",
          "1622:         ]);",
          "1623:         $this->assertCount(3, $messages);",
          "1625:         usort($messages, ['static', 'sort_messages']);",
          "1626:         $m1 = array_shift($messages);",
          "1627:         $m2 = array_shift($messages);",
          "1628:         $m3 = array_shift($messages);",
          "1631:         $this->assertEquals(get_string('yes'), $m1->issender);",
          "1632:         $this->assertEquals(message_format_message_text($dbm1), $m1->message);",
          "1633:         $this->assertEquals(transform::datetime($now + 1), $m1->timecreated);",
          "1634:         $this->assertEquals('-', $m1->timeread);",
          "1635:         $this->assertArrayNotHasKey('timedeleted', (array) $m1);",
          "1638:         $this->assertEquals(get_string('yes'), $m2->issender);",
          "1639:         $this->assertEquals(message_format_message_text($dbm2), $m2->message);",
          "1640:         $this->assertEquals(transform::datetime($now + 2), $m2->timecreated);",
          "1641:         $this->assertEquals('-', $m2->timeread);",
          "1642:         $this->assertArrayHasKey('timedeleted', (array) $m2);",
          "1645:         $this->assertEquals(get_string('no'), $m3->issender);",
          "1646:         $this->assertEquals(message_format_message_text($dbm3), $m3->message);",
          "1647:         $this->assertEquals(transform::datetime($now + 3), $m3->timecreated);",
          "1648:         $this->assertEquals(transform::datetime($now + 5), $m3->timeread);",
          "1649:         $this->assertArrayNotHasKey('timedeleted', (array) $m3);",
          "1652:         $favourite = (array) $writer->get_related_data([",
          "1653:             get_string('messages', 'core_message'),",
          "1654:             get_string($conversation1->itemtype, $conversation1->component),",
          "1655:             get_string('privacy:export:conversationprefix', 'core_message') . $conversation1->name",
          "1656:         ], 'starred');",
          "1657:         $this->assertCount(4, $favourite);",
          "1658:         $this->assertEquals(get_string('yes'), $favourite['starred']);",
          "1661:         writer::reset();",
          "1664:         provider::export_conversations($user2->id, 'core_group', 'groups', $coursecontext1);",
          "1667:         $writer = writer::with_context($systemcontext);",
          "1668:         $this->assertFalse($writer->has_any_data());",
          "1671:         $writer = writer::with_context($coursecontext2);",
          "1672:         $this->assertFalse($writer->has_any_data());",
          "1675:         $writer = writer::with_context($coursecontext1);",
          "1676:         $this->assertTrue($writer->has_any_data());",
          "1679:         $messages = (array) $writer->get_data([",
          "1680:             get_string('messages', 'core_message'),",
          "1681:             get_string($conversation1->itemtype, $conversation1->component),",
          "1682:             get_string('privacy:export:conversationprefix', 'core_message') . $conversation1->name",
          "1683:         ]);",
          "1684:         $this->assertCount(3, $messages);",
          "1686:         usort($messages, ['static', 'sort_messages']);",
          "1687:         $m1 = array_shift($messages);",
          "1688:         $m2 = array_shift($messages);",
          "1689:         $m3 = array_shift($messages);",
          "1692:         $this->assertEquals(get_string('no'), $m1->issender);",
          "1693:         $this->assertEquals(message_format_message_text($dbm1), $m1->message);",
          "1694:         $this->assertEquals(transform::datetime($now + 1), $m1->timecreated);",
          "1695:         $this->assertEquals('-', $m1->timeread);",
          "1696:         $this->assertArrayNotHasKey('timedeleted', (array) $m1);",
          "1699:         $this->assertEquals(get_string('no'), $m2->issender);",
          "1700:         $this->assertEquals(message_format_message_text($dbm2), $m2->message);",
          "1701:         $this->assertEquals(transform::datetime($now + 2), $m2->timecreated);",
          "1702:         $this->assertEquals('-', $m2->timeread);",
          "1703:         $this->assertArrayNotHasKey('timedeleted', (array) $m2);",
          "1706:         $this->assertEquals(get_string('yes'), $m3->issender);",
          "1707:         $this->assertEquals(message_format_message_text($dbm3), $m3->message);",
          "1708:         $this->assertEquals(transform::datetime($now + 3), $m3->timecreated);",
          "1709:         $this->assertEquals('-', $m3->timeread);",
          "1710:         $this->assertArrayNotHasKey('timedeleted', (array) $m3);",
          "1713:         $favourite = (array) $writer->get_related_data([",
          "1714:             get_string('messages', 'core_message'),",
          "1715:             get_string($conversation1->itemtype, $conversation1->component),",
          "1716:             $conversation1->name",
          "1717:         ], 'starred');",
          "1718:         $this->assertCount(0, $favourite);",
          "1719:     }",
          "1724:     public function test_delete_conversations_for_all_users() {",
          "1725:         global $DB;",
          "1727:         $this->resetAfterTest();",
          "1728:         $this->setAdminUser();",
          "1729:         $now = time();",
          "1730:         $timeread = $now - DAYSECS;",
          "1731:         $component = 'core_group';",
          "1732:         $itemtype = 'groups';",
          "1735:         $user1 = $this->getDataGenerator()->create_user();",
          "1736:         $user2 = $this->getDataGenerator()->create_user();",
          "1737:         $user3 = $this->getDataGenerator()->create_user();",
          "1738:         $user4 = $this->getDataGenerator()->create_user();",
          "1739:         $user5 = $this->getDataGenerator()->create_user();",
          "1740:         $user1context = \\context_user::instance($user1->id);",
          "1743:         \\core_message\\api::add_contact($user1->id, $user2->id);",
          "1744:         \\core_message\\api::add_contact($user2->id, $user3->id);",
          "1747:         \\core_message\\api::create_contact_request($user1->id, $user3->id);",
          "1748:         \\core_message\\api::create_contact_request($user2->id, $user4->id);",
          "1751:         \\core_message\\api::block_user($user1->id, $user3->id);",
          "1752:         \\core_message\\api::block_user($user3->id, $user4->id);",
          "1755:         $im1 = $this->create_message($user1->id, $user2->id, $now + (9 * DAYSECS), true);",
          "1756:         $im2 = $this->create_message($user2->id, $user1->id, $now + (8 * DAYSECS), true);",
          "1757:         $im3 = $this->create_message($user2->id, $user3->id, $now + (7 * DAYSECS));",
          "1760:         $n1 = $this->create_notification($user1->id, $user2->id, $now + (9 * DAYSECS), $timeread);",
          "1761:         $n2 = $this->create_notification($user2->id, $user1->id, $now + (8 * DAYSECS));",
          "1762:         $n3 = $this->create_notification($user2->id, $user3->id, $now + (7 * DAYSECS));",
          "1765:         \\core_message\\api::delete_message($user1->id, $im2);",
          "1768:         $course1 = $this->getDataGenerator()->create_course();",
          "1769:         $course2 = $this->getDataGenerator()->create_course();",
          "1770:         $coursecontext1 = \\context_course::instance($course1->id);",
          "1771:         $coursecontext2 = \\context_course::instance($course2->id);",
          "1774:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id);",
          "1775:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id);",
          "1776:         $this->getDataGenerator()->enrol_user($user3->id, $course1->id);",
          "1777:         $this->getDataGenerator()->enrol_user($user1->id, $course2->id);",
          "1778:         $this->getDataGenerator()->enrol_user($user2->id, $course2->id);",
          "1781:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 1));",
          "1782:         $group2a = $this->getDataGenerator()->create_group(array('courseid' => $course2->id, 'enablemessaging' => 1));",
          "1785:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user1->id));",
          "1786:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user2->id));",
          "1787:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user3->id));",
          "1788:         $this->getDataGenerator()->create_group_member(array('groupid' => $group2a->id, 'userid' => $user1->id));",
          "1789:         $this->getDataGenerator()->create_group_member(array('groupid' => $group2a->id, 'userid' => $user2->id));",
          "1792:         $iconversation1id = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "1793:         $conversation1 = \\core_message\\api::get_conversation_by_area(",
          "1794:             $component,",
          "1795:             $itemtype,",
          "1796:             $group1a->id,",
          "1797:             $coursecontext1->id",
          "1798:         );",
          "1799:         $conversation2 = \\core_message\\api::get_conversation_by_area(",
          "1800:             $component,",
          "1801:             $itemtype,",
          "1802:             $group2a->id,",
          "1803:             $coursecontext2->id",
          "1804:         );",
          "1807:         \\core_message\\api::set_favourite_conversation($iconversation1id, $user1->id);",
          "1808:         \\core_message\\api::set_favourite_conversation($conversation1->id, $user1->id);",
          "1809:         \\core_message\\api::set_favourite_conversation($conversation1->id, $user2->id);",
          "1812:         $gm1 = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 1.1', $now + 1);",
          "1813:         $gm2 = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 1.2', $now + 2);",
          "1814:         $gm3 = testhelper::send_fake_message_to_conversation($user2, $conversation1->id, 'Message 1.3', $now + 3);",
          "1815:         $gm4 = testhelper::send_fake_message_to_conversation($user1, $conversation2->id, 'Message 2.1', $now + 4);",
          "1816:         $gm5 = testhelper::send_fake_message_to_conversation($user2, $conversation2->id, 'Message 2.2', $now + 5);",
          "1818:         $dbgm1 = $DB->get_record('messages', ['id' => $gm1]);",
          "1819:         $dbgm2 = $DB->get_record('messages', ['id' => $gm2]);",
          "1820:         $dbgm3 = $DB->get_record('messages', ['id' => $gm3]);",
          "1821:         $dbgm4 = $DB->get_record('messages', ['id' => $gm4]);",
          "1822:         $dbgm5 = $DB->get_record('messages', ['id' => $gm5]);",
          "1825:         \\core_message\\api::mark_message_as_read($user1->id, $dbgm3, $now + 5);",
          "1828:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "1831:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "1834:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "1837:         $this->assertEquals(8, $DB->count_records('messages'));",
          "1840:         $this->assertEquals(4, $DB->count_records('message_user_actions'));",
          "1843:         $this->assertEquals(4, $DB->count_records('message_conversations'));",
          "1846:         $this->assertEquals(9, $DB->count_records('message_conversation_members'));",
          "1849:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "1852:         $this->assertEquals(3, $DB->count_records('favourite'));",
          "1855:         provider::delete_conversations_for_all_users($coursecontext1, $component, $itemtype);",
          "1858:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "1861:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "1864:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "1867:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "1870:         $this->assertEquals(5, $DB->count_records('messages'));",
          "1871:         $messages = array_keys($DB->get_records('messages'));",
          "1872:         $this->assertContains($im1, $messages);",
          "1873:         $this->assertContains($im2, $messages);",
          "1874:         $this->assertContains($im3, $messages);",
          "1875:         $this->assertContains($gm4, $messages);",
          "1876:         $this->assertContains($gm5, $messages);",
          "1879:         $this->assertEquals(3, $DB->count_records('message_user_actions'));",
          "1880:         $useractions = $DB->get_records('message_user_actions');",
          "1881:         $useractions = array_map(function($action) {",
          "1882:                 return $action->messageid;",
          "1883:         }, $useractions);",
          "1884:         $this->assertNotContains($gm3, $useractions);",
          "1887:         $this->assertEquals(3, $DB->count_records('message_conversations'));",
          "1888:         $conversations = $DB->get_records('message_conversations');",
          "1889:         $this->assertArrayNotHasKey($conversation1->id, $conversations);",
          "1892:         $this->assertEquals(6, $DB->count_records('message_conversation_members'));",
          "1895:         $this->assertEquals(1, $DB->count_records('favourite'));",
          "1896:     }",
          "1901:     public function test_delete_conversations_for_all_users_systemcontext() {",
          "1902:         global $DB;",
          "1904:         $this->resetAfterTest();",
          "1905:         $this->setAdminUser();",
          "1906:         $now = time();",
          "1907:         $timeread = $now - DAYSECS;",
          "1908:         $systemcontext = \\context_system::instance();",
          "1909:         $component = 'core_group';",
          "1910:         $itemtype = 'groups';",
          "1913:         $user1 = $this->getDataGenerator()->create_user();",
          "1914:         $user2 = $this->getDataGenerator()->create_user();",
          "1915:         $user3 = $this->getDataGenerator()->create_user();",
          "1916:         $user4 = $this->getDataGenerator()->create_user();",
          "1917:         $user5 = $this->getDataGenerator()->create_user();",
          "1920:         \\core_message\\api::add_contact($user1->id, $user2->id);",
          "1921:         \\core_message\\api::add_contact($user2->id, $user3->id);",
          "1924:         \\core_message\\api::create_contact_request($user1->id, $user3->id);",
          "1925:         \\core_message\\api::create_contact_request($user2->id, $user4->id);",
          "1928:         \\core_message\\api::block_user($user1->id, $user3->id);",
          "1929:         \\core_message\\api::block_user($user3->id, $user4->id);",
          "1932:         $im1 = $this->create_message($user1->id, $user2->id, $now + (9 * DAYSECS), true);",
          "1933:         $im2 = $this->create_message($user2->id, $user1->id, $now + (8 * DAYSECS), true);",
          "1934:         $im3 = $this->create_message($user2->id, $user3->id, $now + (7 * DAYSECS));",
          "1937:         $n1 = $this->create_notification($user1->id, $user2->id, $now + (9 * DAYSECS), $timeread);",
          "1938:         $n2 = $this->create_notification($user2->id, $user1->id, $now + (8 * DAYSECS));",
          "1939:         $n3 = $this->create_notification($user2->id, $user3->id, $now + (7 * DAYSECS));",
          "1942:         \\core_message\\api::delete_message($user1->id, $im2);",
          "1945:         $course1 = $this->getDataGenerator()->create_course();",
          "1946:         $course2 = $this->getDataGenerator()->create_course();",
          "1947:         $coursecontext1 = \\context_course::instance($course1->id);",
          "1948:         $coursecontext2 = \\context_course::instance($course2->id);",
          "1951:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id);",
          "1952:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id);",
          "1953:         $this->getDataGenerator()->enrol_user($user3->id, $course1->id);",
          "1954:         $this->getDataGenerator()->enrol_user($user1->id, $course2->id);",
          "1955:         $this->getDataGenerator()->enrol_user($user2->id, $course2->id);",
          "1958:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 1));",
          "1959:         $group2a = $this->getDataGenerator()->create_group(array('courseid' => $course2->id, 'enablemessaging' => 1));",
          "1962:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user1->id));",
          "1963:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user2->id));",
          "1964:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user3->id));",
          "1965:         $this->getDataGenerator()->create_group_member(array('groupid' => $group2a->id, 'userid' => $user1->id));",
          "1966:         $this->getDataGenerator()->create_group_member(array('groupid' => $group2a->id, 'userid' => $user2->id));",
          "1969:         $iconversation1id = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "1970:         $conversation1 = \\core_message\\api::get_conversation_by_area(",
          "1971:             $component,",
          "1972:             $itemtype,",
          "1973:             $group1a->id,",
          "1974:             $coursecontext1->id",
          "1975:         );",
          "1976:         $conversation2 = \\core_message\\api::get_conversation_by_area(",
          "1977:             $component,",
          "1978:             $itemtype,",
          "1979:             $group2a->id,",
          "1980:             $coursecontext2->id",
          "1981:         );",
          "1984:         \\core_message\\api::set_favourite_conversation($iconversation1id, $user1->id);",
          "1985:         \\core_message\\api::set_favourite_conversation($conversation1->id, $user1->id);",
          "1986:         \\core_message\\api::set_favourite_conversation($conversation1->id, $user2->id);",
          "1989:         $gm1 = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 1.1', $now + 1);",
          "1990:         $gm2 = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 1.2', $now + 2);",
          "1991:         $gm3 = testhelper::send_fake_message_to_conversation($user2, $conversation1->id, 'Message 1.3', $now + 3);",
          "1992:         $gm4 = testhelper::send_fake_message_to_conversation($user1, $conversation2->id, 'Message 2.1', $now + 4);",
          "1993:         $gm5 = testhelper::send_fake_message_to_conversation($user2, $conversation2->id, 'Message 2.2', $now + 5);",
          "1995:         $dbgm3 = $DB->get_record('messages', ['id' => $gm3]);",
          "1998:         \\core_message\\api::mark_message_as_read($user1->id, $dbgm3, $now + 5);",
          "2001:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "2004:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "2007:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "2010:         $this->assertEquals(8, $DB->count_records('messages'));",
          "2013:         $this->assertEquals(4, $DB->count_records('message_user_actions'));",
          "2016:         $this->assertEquals(4, $DB->count_records('message_conversations'));",
          "2019:         $this->assertEquals(9, $DB->count_records('message_conversation_members'));",
          "2022:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "2025:         $this->assertEquals(3, $DB->count_records('favourite'));",
          "2028:         provider::delete_conversations_for_all_users($systemcontext, $component, $itemtype);",
          "2031:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "2032:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "2033:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "2034:         $this->assertEquals(8, $DB->count_records('messages'));",
          "2035:         $this->assertEquals(4, $DB->count_records('message_user_actions'));",
          "2036:         $this->assertEquals(4, $DB->count_records('message_conversations'));",
          "2037:         $this->assertEquals(9, $DB->count_records('message_conversation_members'));",
          "2038:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "2039:         $this->assertEquals(3, $DB->count_records('favourite'));",
          "2042:         provider::delete_conversations_for_all_users($systemcontext, '', '');",
          "2045:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "2046:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "2047:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "2048:         $this->assertEquals(8, $DB->count_records('messages'));",
          "2049:         $this->assertEquals(4, $DB->count_records('message_user_actions'));",
          "2050:         $this->assertEquals(4, $DB->count_records('message_conversations'));",
          "2051:         $this->assertEquals(9, $DB->count_records('message_conversation_members'));",
          "2052:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "2053:         $this->assertEquals(3, $DB->count_records('favourite'));",
          "2054:     }",
          "2059:     public function test_delete_conversations_for_all_users_usercontext() {",
          "2060:         global $DB;",
          "2062:         $this->resetAfterTest();",
          "2063:         $this->setAdminUser();",
          "2064:         $now = time();",
          "2065:         $timeread = $now - DAYSECS;",
          "2066:         $component = 'core_group';",
          "2067:         $itemtype = 'groups';",
          "2070:         $user1 = $this->getDataGenerator()->create_user();",
          "2071:         $user2 = $this->getDataGenerator()->create_user();",
          "2072:         $user3 = $this->getDataGenerator()->create_user();",
          "2073:         $user4 = $this->getDataGenerator()->create_user();",
          "2074:         $user5 = $this->getDataGenerator()->create_user();",
          "2075:         $user1context = \\context_user::instance($user1->id);",
          "2078:         \\core_message\\api::add_contact($user1->id, $user2->id);",
          "2079:         \\core_message\\api::add_contact($user2->id, $user3->id);",
          "2082:         \\core_message\\api::create_contact_request($user1->id, $user3->id);",
          "2083:         \\core_message\\api::create_contact_request($user2->id, $user4->id);",
          "2086:         \\core_message\\api::block_user($user1->id, $user3->id);",
          "2087:         \\core_message\\api::block_user($user3->id, $user4->id);",
          "2090:         $im1 = $this->create_message($user1->id, $user2->id, $now + (9 * DAYSECS), true);",
          "2091:         $im2 = $this->create_message($user2->id, $user1->id, $now + (8 * DAYSECS), true);",
          "2092:         $im3 = $this->create_message($user2->id, $user3->id, $now + (7 * DAYSECS));",
          "2095:         $n1 = $this->create_notification($user1->id, $user2->id, $now + (9 * DAYSECS), $timeread);",
          "2096:         $n2 = $this->create_notification($user2->id, $user1->id, $now + (8 * DAYSECS));",
          "2097:         $n3 = $this->create_notification($user2->id, $user3->id, $now + (7 * DAYSECS));",
          "2100:         \\core_message\\api::delete_message($user1->id, $im2);",
          "2103:         $course1 = $this->getDataGenerator()->create_course();",
          "2104:         $course2 = $this->getDataGenerator()->create_course();",
          "2105:         $coursecontext1 = \\context_course::instance($course1->id);",
          "2106:         $coursecontext2 = \\context_course::instance($course2->id);",
          "2109:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id);",
          "2110:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id);",
          "2111:         $this->getDataGenerator()->enrol_user($user3->id, $course1->id);",
          "2112:         $this->getDataGenerator()->enrol_user($user1->id, $course2->id);",
          "2113:         $this->getDataGenerator()->enrol_user($user2->id, $course2->id);",
          "2116:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 1));",
          "2117:         $group2a = $this->getDataGenerator()->create_group(array('courseid' => $course2->id, 'enablemessaging' => 1));",
          "2120:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user1->id));",
          "2121:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user2->id));",
          "2122:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user3->id));",
          "2123:         $this->getDataGenerator()->create_group_member(array('groupid' => $group2a->id, 'userid' => $user1->id));",
          "2124:         $this->getDataGenerator()->create_group_member(array('groupid' => $group2a->id, 'userid' => $user2->id));",
          "2127:         $iconversation1id = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "2128:         $iconversation2id = \\core_message\\api::get_conversation_between_users([$user2->id, $user3->id]);",
          "2129:         $conversation1 = \\core_message\\api::get_conversation_by_area(",
          "2130:             $component,",
          "2131:             $itemtype,",
          "2132:             $group1a->id,",
          "2133:             $coursecontext1->id",
          "2134:         );",
          "2135:         $conversation2 = \\core_message\\api::get_conversation_by_area(",
          "2136:             $component,",
          "2137:             $itemtype,",
          "2138:             $group2a->id,",
          "2139:             $coursecontext2->id",
          "2140:         );",
          "2143:         \\core_message\\api::set_favourite_conversation($iconversation1id, $user1->id);",
          "2144:         \\core_message\\api::set_favourite_conversation($conversation1->id, $user1->id);",
          "2145:         \\core_message\\api::set_favourite_conversation($conversation1->id, $user2->id);",
          "2148:         $gm1 = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 1.1', $now + 1);",
          "2149:         $gm2 = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 1.2', $now + 2);",
          "2150:         $gm3 = testhelper::send_fake_message_to_conversation($user2, $conversation1->id, 'Message 1.3', $now + 3);",
          "2151:         $gm4 = testhelper::send_fake_message_to_conversation($user1, $conversation2->id, 'Message 2.1', $now + 4);",
          "2152:         $gm5 = testhelper::send_fake_message_to_conversation($user2, $conversation2->id, 'Message 2.2', $now + 5);",
          "2154:         $dbgm3 = $DB->get_record('messages', ['id' => $gm3]);",
          "2157:         \\core_message\\api::mark_message_as_read($user1->id, $dbgm3, $now + 5);",
          "2160:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "2163:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "2166:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "2169:         $this->assertEquals(8, $DB->count_records('messages'));",
          "2172:         $this->assertEquals(4, $DB->count_records('message_user_actions'));",
          "2175:         $this->assertEquals(4, $DB->count_records('message_conversations'));",
          "2178:         $this->assertEquals(9, $DB->count_records('message_conversation_members'));",
          "2181:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "2184:         $this->assertEquals(3, $DB->count_records('favourite'));",
          "2187:         provider::delete_conversations_for_all_users($user1context, $component, $itemtype);",
          "2190:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "2191:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "2192:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "2193:         $this->assertEquals(8, $DB->count_records('messages'));",
          "2194:         $this->assertEquals(4, $DB->count_records('message_user_actions'));",
          "2195:         $this->assertEquals(4, $DB->count_records('message_conversations'));",
          "2196:         $this->assertEquals(9, $DB->count_records('message_conversation_members'));",
          "2197:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "2198:         $this->assertEquals(3, $DB->count_records('favourite'));",
          "2201:         provider::delete_conversations_for_all_users($user1context, '', '');",
          "2204:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "2205:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "2206:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "2207:         $this->assertEquals(8, $DB->count_records('messages'));",
          "2208:         $this->assertEquals(4, $DB->count_records('message_user_actions'));",
          "2209:         $this->assertEquals(4, $DB->count_records('message_conversations'));",
          "2210:         $this->assertEquals(9, $DB->count_records('message_conversation_members'));",
          "2211:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "2212:         $this->assertEquals(3, $DB->count_records('favourite'));",
          "2213:     }",
          "2218:     public function test_delete_conversations_for_user() {",
          "2219:         global $DB;",
          "2221:         $this->resetAfterTest();",
          "2222:         $this->setAdminUser();",
          "2223:         $now = time();",
          "2224:         $timeread = $now - DAYSECS;",
          "2225:         $systemcontext = \\context_system::instance();",
          "2226:         $component = 'core_group';",
          "2227:         $itemtype = 'groups';",
          "2230:         $user1 = $this->getDataGenerator()->create_user();",
          "2231:         $user2 = $this->getDataGenerator()->create_user();",
          "2232:         $user3 = $this->getDataGenerator()->create_user();",
          "2233:         $user4 = $this->getDataGenerator()->create_user();",
          "2234:         $user5 = $this->getDataGenerator()->create_user();",
          "2235:         $user1context = \\context_user::instance($user1->id);",
          "2238:         \\core_message\\api::add_contact($user1->id, $user2->id);",
          "2239:         \\core_message\\api::add_contact($user2->id, $user3->id);",
          "2242:         \\core_message\\api::create_contact_request($user1->id, $user3->id);",
          "2243:         \\core_message\\api::create_contact_request($user2->id, $user4->id);",
          "2246:         \\core_message\\api::block_user($user1->id, $user3->id);",
          "2247:         \\core_message\\api::block_user($user3->id, $user4->id);",
          "2250:         $pm1 = $this->create_message($user1->id, $user2->id, $now + (9 * DAYSECS), true);",
          "2251:         $pm2 = $this->create_message($user2->id, $user1->id, $now + (8 * DAYSECS), true);",
          "2252:         $pm3 = $this->create_message($user2->id, $user3->id, $now + (7 * DAYSECS));",
          "2255:         $n1 = $this->create_notification($user1->id, $user2->id, $now + (9 * DAYSECS), $timeread);",
          "2256:         $n2 = $this->create_notification($user2->id, $user1->id, $now + (8 * DAYSECS));",
          "2257:         $n3 = $this->create_notification($user2->id, $user3->id, $now + (7 * DAYSECS));",
          "2260:         \\core_message\\api::delete_message($user1->id, $pm2);",
          "2263:         $course1 = $this->getDataGenerator()->create_course();",
          "2264:         $course2 = $this->getDataGenerator()->create_course();",
          "2265:         $coursecontext1 = \\context_course::instance($course1->id);",
          "2266:         $coursecontext2 = \\context_course::instance($course2->id);",
          "2269:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id);",
          "2270:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id);",
          "2271:         $this->getDataGenerator()->enrol_user($user3->id, $course1->id);",
          "2272:         $this->getDataGenerator()->enrol_user($user1->id, $course2->id);",
          "2275:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 1));",
          "2278:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user1->id));",
          "2279:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user2->id));",
          "2280:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user3->id));",
          "2283:         $iconversation1id = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "2284:         $conversation1 = \\core_message\\api::get_conversation_by_area(",
          "2285:             $component,",
          "2286:             $itemtype,",
          "2287:             $group1a->id,",
          "2288:             $coursecontext1->id",
          "2289:         );",
          "2292:         \\core_message\\api::set_favourite_conversation($iconversation1id, $user1->id);",
          "2293:         \\core_message\\api::set_favourite_conversation($conversation1->id, $user1->id);",
          "2294:         \\core_message\\api::set_favourite_conversation($conversation1->id, $user2->id);",
          "2297:         $gm1 = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 1', $now + 1);",
          "2298:         $gm2 = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 2', $now + 2);",
          "2299:         $gm3 = testhelper::send_fake_message_to_conversation($user2, $conversation1->id, 'Message 3', $now + 3);",
          "2301:         $dbm3 = $DB->get_record('messages', ['id' => $gm3]);",
          "2304:         \\core_message\\api::mark_message_as_read($user1->id, $dbm3, $now + 5);",
          "2307:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "2310:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "2313:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "2316:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "2319:         $this->assertEquals(6, $DB->count_records('messages'));",
          "2322:         $this->assertEquals(4, $DB->count_records('message_user_actions'));",
          "2325:         $this->assertEquals(3, $DB->count_records('message_conversations'));",
          "2328:         $this->assertEquals(7, $DB->count_records('message_conversation_members'));",
          "2329:         $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation1->id]);",
          "2330:         $members = array_map(function($member) {",
          "2331:                 return $member->userid;",
          "2332:         }, $members);",
          "2333:         $this->assertContains($user1->id, $members);",
          "2336:         $this->assertEquals(3, $DB->count_records('favourite'));",
          "2339:         $approvedcontextlist = new \\core_privacy\\tests\\request\\approved_contextlist($user1, 'core_message',",
          "2340:                 [$coursecontext1->id, $coursecontext2->id]);",
          "2341:         provider::delete_conversations_for_user($approvedcontextlist, $component, $itemtype);",
          "2344:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "2347:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "2350:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "2353:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "2356:         $this->assertEquals(4, $DB->count_records('messages'));",
          "2357:         $messages = array_keys($DB->get_records('messages'));",
          "2358:         $this->assertContains($pm1, $messages);",
          "2359:         $this->assertContains($pm2, $messages);",
          "2360:         $this->assertContains($pm3, $messages);",
          "2361:         $this->assertContains($gm3, $messages);",
          "2364:         $this->assertEquals(3, $DB->count_records('message_user_actions'));",
          "2365:         $useractions = $DB->get_records('message_user_actions');",
          "2366:         $useractions = array_map(function($action) {",
          "2367:                 return $action->messageid;",
          "2368:         }, $useractions);",
          "2369:         $this->assertNotContains($gm3, $useractions);",
          "2372:         $this->assertEquals(3, $DB->count_records('message_conversations'));",
          "2375:         $this->assertEquals(6, $DB->count_records('message_conversation_members'));",
          "2376:         $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation1->id]);",
          "2377:         $members = array_map(function($member) {",
          "2378:                 return $member->userid;",
          "2379:         }, $members);",
          "2380:         $this->assertNotContains($user1->id, $members);",
          "2383:         $this->assertEquals(2, $DB->count_records('favourite'));",
          "2384:         $favourites = $DB->get_records('favourite');",
          "2385:         foreach ($favourites as $favourite) {",
          "2386:             if ($favourite->userid == $user1->id) {",
          "2387:                 $this->assertEquals($iconversation1id, $favourite->itemid);",
          "2388:             } else if ($favourite->userid == $user2->id) {",
          "2389:                 $this->assertEquals($conversation1->id, $favourite->itemid);",
          "2390:             }",
          "2391:         }",
          "2392:     }",
          "2398:     public function test_delete_conversations_for_users() {",
          "2399:         global $DB;",
          "2401:         $this->resetAfterTest();",
          "2402:         $this->setAdminUser();",
          "2403:         $now = time();",
          "2404:         $timeread = $now - DAYSECS;",
          "2405:         $systemcontext = \\context_system::instance();",
          "2406:         $component = 'core_group';",
          "2407:         $itemtype = 'groups';",
          "2410:         $user1 = $this->getDataGenerator()->create_user();",
          "2411:         $user2 = $this->getDataGenerator()->create_user();",
          "2412:         $user3 = $this->getDataGenerator()->create_user();",
          "2413:         $user4 = $this->getDataGenerator()->create_user();",
          "2414:         $user5 = $this->getDataGenerator()->create_user();",
          "2415:         $user1context = \\context_user::instance($user1->id);",
          "2418:         \\core_message\\api::add_contact($user1->id, $user2->id);",
          "2419:         \\core_message\\api::add_contact($user2->id, $user3->id);",
          "2422:         \\core_message\\api::create_contact_request($user1->id, $user3->id);",
          "2423:         \\core_message\\api::create_contact_request($user2->id, $user4->id);",
          "2426:         \\core_message\\api::block_user($user1->id, $user3->id);",
          "2427:         \\core_message\\api::block_user($user3->id, $user4->id);",
          "2430:         $pm1 = $this->create_message($user1->id, $user2->id, $now + (9 * DAYSECS), true);",
          "2431:         $pm2 = $this->create_message($user2->id, $user1->id, $now + (8 * DAYSECS), true);",
          "2432:         $pm3 = $this->create_message($user2->id, $user3->id, $now + (7 * DAYSECS));",
          "2435:         $n1 = $this->create_notification($user1->id, $user2->id, $now + (9 * DAYSECS), $timeread);",
          "2436:         $n2 = $this->create_notification($user2->id, $user1->id, $now + (8 * DAYSECS));",
          "2437:         $n3 = $this->create_notification($user2->id, $user3->id, $now + (7 * DAYSECS));",
          "2440:         \\core_message\\api::delete_message($user1->id, $pm2);",
          "2443:         $course1 = $this->getDataGenerator()->create_course();",
          "2444:         $course2 = $this->getDataGenerator()->create_course();",
          "2445:         $coursecontext1 = \\context_course::instance($course1->id);",
          "2446:         $coursecontext2 = \\context_course::instance($course2->id);",
          "2449:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id);",
          "2450:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id);",
          "2451:         $this->getDataGenerator()->enrol_user($user3->id, $course1->id);",
          "2452:         $this->getDataGenerator()->enrol_user($user4->id, $course1->id);",
          "2453:         $this->getDataGenerator()->enrol_user($user1->id, $course2->id);",
          "2456:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 1));",
          "2457:         $group2a = $this->getDataGenerator()->create_group(array('courseid' => $course2->id, 'enablemessaging' => 1));",
          "2460:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user1->id));",
          "2461:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user2->id));",
          "2462:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user3->id));",
          "2463:         $this->getDataGenerator()->create_group_member(array('groupid' => $group1a->id, 'userid' => $user4->id));",
          "2466:         $iconversation1id = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "2467:         $conversation1 = \\core_message\\api::get_conversation_by_area(",
          "2468:             $component,",
          "2469:             $itemtype,",
          "2470:             $group1a->id,",
          "2471:             $coursecontext1->id",
          "2472:         );",
          "2475:         \\core_message\\api::set_favourite_conversation($iconversation1id, $user1->id);",
          "2476:         \\core_message\\api::set_favourite_conversation($conversation1->id, $user1->id);",
          "2477:         \\core_message\\api::set_favourite_conversation($conversation1->id, $user3->id);",
          "2480:         $gm1 = testhelper::send_fake_message_to_conversation($user1, $conversation1->id, 'Message 1', $now + 1);",
          "2481:         $gm2 = testhelper::send_fake_message_to_conversation($user2, $conversation1->id, 'Message 2', $now + 2);",
          "2482:         $gm3 = testhelper::send_fake_message_to_conversation($user3, $conversation1->id, 'Message 3', $now + 3);",
          "2484:         $dbm3 = $DB->get_record('messages', ['id' => $gm3]);",
          "2487:         \\core_message\\api::mark_message_as_read($user1->id, $dbm3, $now + 5);",
          "2490:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "2493:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "2496:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "2499:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "2502:         $this->assertEquals(6, $DB->count_records('messages'));",
          "2505:         $this->assertEquals(4, $DB->count_records('message_user_actions'));",
          "2508:         $this->assertEquals(4, $DB->count_records('message_conversations'));",
          "2511:         $this->assertEquals(8, $DB->count_records('message_conversation_members'));",
          "2512:         $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation1->id]);",
          "2513:         $members = array_map(function($member) {",
          "2514:                 return $member->userid;",
          "2515:         }, $members);",
          "2516:         $this->assertContains($user1->id, $members);",
          "2517:         $this->assertContains($user4->id, $members);",
          "2520:         $this->assertEquals(3, $DB->count_records('favourite'));",
          "2523:         $approveduserlist = new \\core_privacy\\local\\request\\approved_userlist($coursecontext2, 'core_message',",
          "2524:                 [$user1->id, $user2->id]);",
          "2525:         provider::delete_conversations_for_users($approveduserlist, $component, $itemtype);",
          "2528:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "2529:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "2530:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "2531:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "2532:         $this->assertEquals(6, $DB->count_records('messages'));",
          "2533:         $this->assertEquals(4, $DB->count_records('message_user_actions'));",
          "2534:         $this->assertEquals(4, $DB->count_records('message_conversations'));",
          "2535:         $this->assertEquals(8, $DB->count_records('message_conversation_members'));",
          "2536:         $this->assertEquals(3, $DB->count_records('favourite'));",
          "2539:         $approveduserlist = new \\core_privacy\\local\\request\\approved_userlist($coursecontext1, 'core_message',",
          "2540:                 [$user4->id]);",
          "2541:         provider::delete_conversations_for_users($approveduserlist, $component, $itemtype);",
          "2544:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "2545:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "2546:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "2547:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "2548:         $this->assertEquals(6, $DB->count_records('messages'));",
          "2549:         $this->assertEquals(4, $DB->count_records('message_user_actions'));",
          "2550:         $this->assertEquals(4, $DB->count_records('message_conversations'));",
          "2551:         $this->assertEquals(3, $DB->count_records('favourite'));",
          "2553:         $this->assertEquals(7, $DB->count_records('message_conversation_members'));",
          "2556:         $approveduserlist = new \\core_privacy\\local\\request\\approved_userlist($coursecontext1, 'core_message',",
          "2557:                 [$user1->id, $user2->id]);",
          "2558:         provider::delete_conversations_for_users($approveduserlist, $component, $itemtype);",
          "2561:         $this->assertEquals(2, $DB->count_records('message_contacts'));",
          "2564:         $this->assertEquals(2, $DB->count_records('message_contact_requests'));",
          "2567:         $this->assertEquals(2, $DB->count_records('message_users_blocked'));",
          "2570:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "2573:         $this->assertEquals(4, $DB->count_records('messages'));",
          "2574:         $messages = array_keys($DB->get_records('messages'));",
          "2575:         $this->assertContains($pm1, $messages);",
          "2576:         $this->assertContains($pm2, $messages);",
          "2577:         $this->assertContains($pm3, $messages);",
          "2578:         $this->assertContains($gm3, $messages);",
          "2581:         $this->assertEquals(3, $DB->count_records('message_user_actions'));",
          "2582:         $useractions = $DB->get_records('message_user_actions');",
          "2583:         $useractions = array_map(function($action) {",
          "2584:                 return $action->messageid;",
          "2585:         }, $useractions);",
          "2586:         $this->assertNotContains($gm3, $useractions);",
          "2589:         $this->assertEquals(4, $DB->count_records('message_conversations'));",
          "2592:         $this->assertEquals(5, $DB->count_records('message_conversation_members'));",
          "2593:         $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation1->id]);",
          "2594:         $members = array_map(function($member) {",
          "2595:                 return $member->userid;",
          "2596:         }, $members);",
          "2597:         $this->assertNotContains($user1->id, $members);",
          "2598:         $this->assertNotContains($user2->id, $members);",
          "2601:         $this->assertEquals(2, $DB->count_records('favourite'));",
          "2602:         $favourites = $DB->get_records('favourite');",
          "2603:         foreach ($favourites as $favourite) {",
          "2604:             if ($favourite->userid == $user1->id) {",
          "2605:                 $this->assertEquals($iconversation1id, $favourite->itemid);",
          "2606:             } else if ($favourite->userid == $user3->id) {",
          "2607:                 $this->assertEquals($conversation1->id, $favourite->itemid);",
          "2608:             }",
          "2609:         }",
          "2610:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018111900.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018112000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb41db9ce0dbf980f65db9f1899fc1e3b91964ee",
      "candidate_info": {
        "commit_hash": "bb41db9ce0dbf980f65db9f1899fc1e3b91964ee",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/bb41db9ce0dbf980f65db9f1899fc1e3b91964ee",
        "files": [
          "admin/settings/development.php",
          "lang/en/admin.php",
          "lib/accesslib.php",
          "lib/tests/accesslib_has_capability_test.php",
          "version.php"
        ],
        "message": "MDL-53566 core: Allow admins more control over locking\n\nThis change allows sites to configure locking such that it does not\napply to administrators at all.",
        "before_after_code_files": [
          "admin/settings/development.php||admin/settings/development.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lib/accesslib.php||lib/accesslib.php",
          "lib/tests/accesslib_has_capability_test.php||lib/tests/accesslib_has_capability_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/development.php||admin/settings/development.php": [
          "File: admin/settings/development.php -> admin/settings/development.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     $temp->add(new admin_setting_configcheckbox('contextlocking', new lang_string('contextlocking', 'core_admin'),",
          "20:         new lang_string('contextlocking_desc', 'core_admin'), 0));",
          "22:     $temp->add(new admin_setting_configcheckbox('forceclean', new lang_string('forceclean', 'core_admin'),",
          "23:         new lang_string('forceclean_desc', 'core_admin'), 0));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     $temp->add(new admin_setting_configcheckbox(",
          "23:             'contextlockappliestoadmin',",
          "24:             new lang_string('contextlockappliestoadmin', 'core_admin'),",
          "25:             new lang_string('contextlockappliestoadmin_desc', 'core_admin'),",
          "26:             1",
          "27:         ));",
          "",
          "---------------"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "385: $string['confirmed'] = 'Confirmed';",
          "386: $string['contextlocking'] = 'Context locking';",
          "387: $string['contextlocking_desc'] = 'This setting allows you to lock categories, courses, activites, and blocks within the site by removing all write-access to those locations.';",
          "388: $string['cookiehttponly'] = 'Only http cookies';",
          "389: $string['cookiesecure'] = 'Secure cookies only';",
          "390: $string['country'] = 'Default country';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "388: $string['contextlockappliestoadmin'] = 'Context locking applies to administrators';",
          "389: $string['contextlockappliestoadmin_desc'] = 'This setting allows administrators to make changes in any context which is locked.';",
          "",
          "---------------"
        ],
        "lib/accesslib.php||lib/accesslib.php": [
          "File: lib/accesslib.php -> lib/accesslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "482:     if (!empty($CFG->contextlocking)) {",
          "485:         }",
          "486:     }",
          "",
          "[Removed Lines]",
          "483:         if ($capinfo->captype === 'write' && $context->locked && $capinfo->name !== 'moodle/site:managecontextlocks') {",
          "484:             return false;",
          "",
          "[Added Lines]",
          "483:         if ($capinfo->captype === 'write' && $context->locked) {",
          "486:             if ($capinfo->name !== 'moodle/site:managecontextlocks') {",
          "489:                 if (!is_siteadmin($userid) || !empty($CFG->contextlockappliestoadmin)) {",
          "490:                     return false;",
          "491:                 }",
          "492:             }",
          "",
          "---------------"
        ],
        "lib/tests/accesslib_has_capability_test.php||lib/tests/accesslib_has_capability_test.php": [
          "File: lib/tests/accesslib_has_capability_test.php -> lib/tests/accesslib_has_capability_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:         }",
          "199:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:         }",
          "199:     }",
          "211:     public function test_locked_contexts_for_admin_with_config($lockedcontexts, $blocked) {",
          "212:         global $DB;",
          "214:         $this->resetAfterTest();",
          "215:         set_config('contextlocking', 1);",
          "216:         set_config('contextlockappliestoadmin', 0);",
          "218:         $generator = $this->getDataGenerator();",
          "219:         $otheruser = $generator->create_user();",
          "259:         $adminuser = \\core_user::get_user_by_username('admin');",
          "260:         $contexts = (object) [",
          "261:             'system' => \\context_system::instance(),",
          "262:             'adminuser' => \\context_user::instance($adminuser->id),",
          "263:         ];",
          "265:         $cat1 = $generator->create_category();",
          "266:         $cat1a = $generator->create_category(['parent' => $cat1->id]);",
          "267:         $cat1b = $generator->create_category(['parent' => $cat1->id]);",
          "269:         $contexts->cat1 = \\context_coursecat::instance($cat1->id);",
          "270:         $contexts->cat1a = \\context_coursecat::instance($cat1a->id);",
          "271:         $contexts->cat1b = \\context_coursecat::instance($cat1b->id);",
          "273:         $cat1course1 = $generator->create_course(['category' => $cat1->id]);",
          "274:         $cat1course2 = $generator->create_course(['category' => $cat1->id]);",
          "275:         $cat1acourse1 = $generator->create_course(['category' => $cat1a->id]);",
          "276:         $cat1acourse2 = $generator->create_course(['category' => $cat1a->id]);",
          "277:         $cat1bcourse1 = $generator->create_course(['category' => $cat1b->id]);",
          "278:         $cat1bcourse2 = $generator->create_course(['category' => $cat1b->id]);",
          "280:         $contexts->cat1course1 = \\context_course::instance($cat1course1->id);",
          "281:         $contexts->cat1acourse1 = \\context_course::instance($cat1acourse1->id);",
          "282:         $contexts->cat1bcourse1 = \\context_course::instance($cat1bcourse1->id);",
          "283:         $contexts->cat1course2 = \\context_course::instance($cat1course2->id);",
          "284:         $contexts->cat1acourse2 = \\context_course::instance($cat1acourse2->id);",
          "285:         $contexts->cat1bcourse2 = \\context_course::instance($cat1bcourse2->id);",
          "287:         $cat1block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1->id]);",
          "288:         $cat1ablock = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1a->id]);",
          "289:         $cat1bblock = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1b->id]);",
          "290:         $cat1course1block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1course1->id]);",
          "291:         $cat1course2block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1course2->id]);",
          "292:         $cat1acourse1block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1acourse1->id]);",
          "293:         $cat1acourse2block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1acourse2->id]);",
          "294:         $cat1bcourse1block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1bcourse1->id]);",
          "295:         $cat1bcourse2block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1bcourse2->id]);",
          "297:         $contexts->cat1block = \\context_block::instance($cat1block->id);",
          "298:         $contexts->cat1ablock = \\context_block::instance($cat1ablock->id);",
          "299:         $contexts->cat1bblock = \\context_block::instance($cat1bblock->id);",
          "300:         $contexts->cat1course1block = \\context_block::instance($cat1course1block->id);",
          "301:         $contexts->cat1course2block = \\context_block::instance($cat1course2block->id);",
          "302:         $contexts->cat1acourse1block = \\context_block::instance($cat1acourse1block->id);",
          "303:         $contexts->cat1acourse2block = \\context_block::instance($cat1acourse2block->id);",
          "304:         $contexts->cat1bcourse1block = \\context_block::instance($cat1bcourse1block->id);",
          "305:         $contexts->cat1bcourse2block = \\context_block::instance($cat1bcourse2block->id);",
          "307:         $writecapability = 'moodle/block:edit';",
          "308:         $readcapability = 'moodle/block:view';",
          "309:         $managecapability = 'moodle/site:managecontextlocks';",
          "311:         $this->setAdminUser();",
          "312:         $totest = (array) $contexts;",
          "313:         foreach ($totest as $context) {",
          "314:             $this->assertTrue(has_capability($writecapability, $context));",
          "315:             $this->assertTrue(has_capability($readcapability, $context));",
          "316:             $this->assertTrue(has_capability($managecapability, $context));",
          "317:         }",
          "320:         foreach ($lockedcontexts as $contextname => $value) {",
          "321:             $contexts->$contextname->set_locked($value);",
          "322:         }",
          "325:         foreach ((array) $contexts as $context) {",
          "326:             $this->assertTrue(has_capability($readcapability, $context));",
          "327:             $this->assertTrue(has_capability($managecapability, $context));",
          "328:         }",
          "331:         foreach ((array) $contexts as $contextname => $context) {",
          "332:             $this->assertTrue(has_capability($writecapability, $context));",
          "333:         }",
          "335:         $this->setUser($otheruser);",
          "337:         foreach ((array) $contexts as $contextname => $context) {",
          "338:             $this->assertFalse(has_capability($writecapability, $context));",
          "339:         }",
          "342:         set_config('contextlocking', 0);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018111300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018111301.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}