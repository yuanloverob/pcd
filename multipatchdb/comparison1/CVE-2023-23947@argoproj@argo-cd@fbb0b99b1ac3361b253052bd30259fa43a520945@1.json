{
  "cve_id": "CVE-2023-23947",
  "cve_desc": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. All Argo CD versions starting with 2.3.0-rc1 and prior to 2.3.17, 2.4.23  2.5.11, and 2.6.2 are vulnerable to an improper authorization bug which allows users who have the ability to update at least one cluster secret to update any cluster secret. The attacker could use this access to escalate privileges (potentially controlling Kubernetes resources) or to break Argo CD functionality (by preventing connections to external clusters). A patch for this vulnerability has been released in Argo CD versions 2.6.2, 2.5.11, 2.4.23, and 2.3.17. Two workarounds are available. Either modify the RBAC configuration to completely revoke all `clusters, update` access, or use the `destinations` and `clusterResourceWhitelist` fields to apply similar restrictions as the `namespaces` and `clusterResources` fields.",
  "repo": "argoproj/argo-cd",
  "patch_hash": "fbb0b99b1ac3361b253052bd30259fa43a520945",
  "patch_info": {
    "commit_hash": "fbb0b99b1ac3361b253052bd30259fa43a520945",
    "repo": "argoproj/argo-cd",
    "commit_url": "https://github.com/argoproj/argo-cd/commit/fbb0b99b1ac3361b253052bd30259fa43a520945",
    "files": [
      "common/common.go",
      "server/cluster/cluster.go",
      "server/cluster/cluster_test.go"
    ],
    "message": "Merge pull request from GHSA-3jfq-742w-xg8j\n\nfix test name\n\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
    "before_after_code_files": [
      "common/common.go||common/common.go",
      "server/cluster/cluster.go||server/cluster/cluster.go",
      "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
    ]
  },
  "patch_diff": {
    "common/common.go||common/common.go": [
      "File: common/common.go -> common/common.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "8:  \"time\"",
      "10:  \"github.com/sirupsen/logrus\"",
      "11: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11:  \"google.golang.org/grpc/codes\"",
      "12:  \"google.golang.org/grpc/status\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "316: const TokenVerificationError = \"failed to verify the token\"",
      "318: var TokenVerificationErr = errors.New(TokenVerificationError)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "322: var PermissionDeniedAPIError = status.Error(codes.PermissionDenied, \"permission denied\")",
      "",
      "---------------"
    ],
    "server/cluster/cluster.go||server/cluster/cluster.go": [
      "File: server/cluster/cluster.go -> server/cluster/cluster.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package cluster",
      "3: import (",
      "4:  \"net/url\"",
      "5:  \"time\"",
      "9:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
      "10:  log \"github.com/sirupsen/logrus\"",
      "11:  \"google.golang.org/grpc/codes\"",
      "",
      "[Removed Lines]",
      "7:  \"context\"",
      "",
      "[Added Lines]",
      "4:  \"context\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14:  \"k8s.io/apimachinery/pkg/util/sets\"",
      "15:  \"k8s.io/client-go/kubernetes\"",
      "17:  \"github.com/argoproj/argo-cd/v2/pkg/apiclient/cluster\"",
      "18:  appv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
      "19:  servercache \"github.com/argoproj/argo-cd/v2/server/cache\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16:  \"github.com/argoproj/argo-cd/v2/common\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "135: func (s *Server) getClusterWith403IfNotExist(ctx context.Context, q *cluster.ClusterQuery) (*appv1.Cluster, error) {",
      "136:  repo, err := s.getCluster(ctx, q)",
      "137:  if err != nil || repo == nil {",
      "139:  }",
      "140:  return repo, nil",
      "141: }",
      "",
      "[Removed Lines]",
      "138:   return nil, status.Error(codes.PermissionDenied, \"permission denied\")",
      "",
      "[Added Lines]",
      "138:   return nil, common.PermissionDeniedAPIError",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "221:  }",
      "226:  }",
      "228:  if len(q.UpdatedFields) == 0 || sets.NewString(q.UpdatedFields...).Has(\"project\") {",
      "232:   }",
      "233:  }",
      "",
      "[Removed Lines]",
      "224:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, q.Cluster.Server)); err != nil {",
      "225:   return nil, err",
      "230:   if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, q.Cluster.Server)); err != nil {",
      "231:    return nil, err",
      "",
      "[Added Lines]",
      "224:  if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, c.Server)) {",
      "225:   return nil, common.PermissionDeniedAPIError",
      "230:   if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, c.Server)) {",
      "231:    return nil, common.PermissionDeniedAPIError",
      "",
      "---------------"
    ],
    "server/cluster/cluster_test.go||server/cluster/cluster_test.go": [
      "File: server/cluster/cluster_test.go -> server/cluster/cluster_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"context\"",
      "5:  \"encoding/json\"",
      "6:  \"testing\"",
      "7:  \"time\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6:  \"fmt\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "49:  return enf",
      "50: }",
      "52: func TestGetCluster_UrlEncodedName(t *testing.T) {",
      "53:  db := &dbmocks.ArgoDB{}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53: func TestUpdateCluster_RejectInvalidParams(t *testing.T) {",
      "54:  testCases := []struct {",
      "55:   name    string",
      "56:   request clusterapi.ClusterUpdateRequest",
      "57:  }{",
      "58:   {",
      "59:    name:    \"allowed cluster URL in body, disallowed cluster URL in query\",",
      "60:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
      "61:   },",
      "62:   {",
      "63:    name:    \"allowed cluster URL in body, disallowed cluster name in query\",",
      "64:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
      "65:   },",
      "66:   {",
      "67:    name:    \"allowed cluster URL in body, disallowed cluster name in query, changing unscoped to scoped\",",
      "68:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
      "69:   },",
      "70:   {",
      "71:    name:    \"allowed cluster URL in body, disallowed cluster URL in query, changing unscoped to scoped\",",
      "72:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
      "73:   },",
      "74:  }",
      "76:  db := &dbmocks.ArgoDB{}",
      "78:  clusters := []v1alpha1.Cluster{",
      "79:   {",
      "80:    Name:   \"allowed-unscoped\",",
      "81:    Server: \"https://127.0.0.1\",",
      "82:   },",
      "83:   {",
      "84:    Name:   \"disallowed-unscoped\",",
      "85:    Server: \"https://127.0.0.2\",",
      "86:   },",
      "87:   {",
      "88:    Name:    \"allowed-scoped\",",
      "89:    Server:  \"https://127.0.0.3\",",
      "90:    Project: \"allowed-project\",",
      "91:   },",
      "92:   {",
      "93:    Name:    \"disallowed-scoped\",",
      "94:    Server:  \"https://127.0.0.4\",",
      "95:    Project: \"disallowed-project\",",
      "96:   },",
      "97:  }",
      "99:  db.On(\"ListClusters\", mock.Anything).Return(",
      "100:   func(ctx context.Context) *v1alpha1.ClusterList {",
      "101:    return &v1alpha1.ClusterList{",
      "102:     ListMeta: v1.ListMeta{},",
      "103:     Items:    clusters,",
      "104:    }",
      "105:   },",
      "106:   func(ctx context.Context) error {",
      "107:    return nil",
      "108:   },",
      "109:  )",
      "110:  db.On(\"UpdateCluster\", mock.Anything, mock.Anything).Return(",
      "111:   func(ctx context.Context, c *v1alpha1.Cluster) *v1alpha1.Cluster {",
      "112:    for _, cluster := range clusters {",
      "113:     if c.Server == cluster.Server {",
      "114:      return c",
      "115:     }",
      "116:    }",
      "117:    return nil",
      "118:   },",
      "119:   func(ctx context.Context, c *v1alpha1.Cluster) error {",
      "120:    for _, cluster := range clusters {",
      "121:     if c.Server == cluster.Server {",
      "122:      return nil",
      "123:     }",
      "124:    }",
      "125:    return fmt.Errorf(\"cluster '%s' not found\", c.Server)",
      "126:   },",
      "127:  )",
      "128:  db.On(\"GetCluster\", mock.Anything, mock.Anything).Return(",
      "129:   func(ctx context.Context, server string) *v1alpha1.Cluster {",
      "130:    for _, cluster := range clusters {",
      "131:     if server == cluster.Server {",
      "132:      return &cluster",
      "133:     }",
      "134:    }",
      "135:    return nil",
      "136:   },",
      "137:   func(ctx context.Context, server string) error {",
      "138:    for _, cluster := range clusters {",
      "139:     if server == cluster.Server {",
      "140:      return nil",
      "141:     }",
      "142:    }",
      "143:    return fmt.Errorf(\"cluster '%s' not found\", server)",
      "144:   },",
      "145:  )",
      "147:  enf := rbac.NewEnforcer(fake.NewSimpleClientset(test.NewFakeConfigMap()), test.FakeArgoCDNamespace, common.ArgoCDConfigMapName, nil)",
      "148:  _ = enf.SetBuiltinPolicy(`p, role:test, clusters, *, https://127.0.0.1, allow",
      "149: p, role:test, clusters, *, allowed-project/*, allow`)",
      "150:  enf.SetDefaultRole(\"role:test\")",
      "151:  server := NewServer(db, enf, newServerInMemoryCache(), &kubetest.MockKubectlCmd{})",
      "153:  for _, c := range testCases {",
      "154:   cc := c",
      "155:   t.Run(cc.name, func(t *testing.T) {",
      "156:    t.Parallel()",
      "157:    out, err := server.Update(context.Background(), &cc.request)",
      "158:    require.Nil(t, out)",
      "159:    assert.ErrorIs(t, err, common.PermissionDeniedAPIError)",
      "160:   })",
      "161:  }",
      "162: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "74726cf11e853ae94f5a9ae12cd43f3fa7228159",
      "candidate_info": {
        "commit_hash": "74726cf11e853ae94f5a9ae12cd43f3fa7228159",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/74726cf11e853ae94f5a9ae12cd43f3fa7228159",
        "files": [
          "common/common.go",
          "server/cluster/cluster.go",
          "server/cluster/cluster_test.go"
        ],
        "message": "Merge pull request from GHSA-3jfq-742w-xg8j\n\nfix test name\n\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
        "before_after_code_files": [
          "common/common.go||common/common.go",
          "server/cluster/cluster.go||server/cluster/cluster.go",
          "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "common/common.go||common/common.go",
            "server/cluster/cluster.go||server/cluster/cluster.go",
            "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
          ],
          "candidate": [
            "common/common.go||common/common.go",
            "server/cluster/cluster.go||server/cluster/cluster.go",
            "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
          ]
        }
      },
      "candidate_diff": {
        "common/common.go||common/common.go": [
          "File: common/common.go -> common/common.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"time\"",
          "10:  \"github.com/sirupsen/logrus\"",
          "11: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"google.golang.org/grpc/codes\"",
          "12:  \"google.golang.org/grpc/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316: const TokenVerificationError = \"failed to verify the token\"",
          "318: var TokenVerificationErr = errors.New(TokenVerificationError)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322: var PermissionDeniedAPIError = status.Error(codes.PermissionDenied, \"permission denied\")",
          "",
          "---------------"
        ],
        "server/cluster/cluster.go||server/cluster/cluster.go": [
          "File: server/cluster/cluster.go -> server/cluster/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package cluster",
          "3: import (",
          "4:  \"net/url\"",
          "5:  \"time\"",
          "9:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
          "10:  log \"github.com/sirupsen/logrus\"",
          "11:  \"google.golang.org/grpc/codes\"",
          "",
          "[Removed Lines]",
          "7:  \"context\"",
          "",
          "[Added Lines]",
          "4:  \"context\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:  \"k8s.io/apimachinery/pkg/util/sets\"",
          "15:  \"k8s.io/client-go/kubernetes\"",
          "17:  \"github.com/argoproj/argo-cd/v2/pkg/apiclient/cluster\"",
          "18:  appv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "19:  servercache \"github.com/argoproj/argo-cd/v2/server/cache\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:  \"github.com/argoproj/argo-cd/v2/common\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135: func (s *Server) getClusterWith403IfNotExist(ctx context.Context, q *cluster.ClusterQuery) (*appv1.Cluster, error) {",
          "136:  repo, err := s.getCluster(ctx, q)",
          "137:  if err != nil || repo == nil {",
          "139:  }",
          "140:  return repo, nil",
          "141: }",
          "",
          "[Removed Lines]",
          "138:   return nil, status.Error(codes.PermissionDenied, \"permission denied\")",
          "",
          "[Added Lines]",
          "138:   return nil, common.PermissionDeniedAPIError",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:  }",
          "226:  }",
          "228:  if len(q.UpdatedFields) == 0 || sets.NewString(q.UpdatedFields...).Has(\"project\") {",
          "232:   }",
          "233:  }",
          "",
          "[Removed Lines]",
          "224:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, q.Cluster.Server)); err != nil {",
          "225:   return nil, err",
          "230:   if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, q.Cluster.Server)); err != nil {",
          "231:    return nil, err",
          "",
          "[Added Lines]",
          "224:  if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, c.Server)) {",
          "225:   return nil, common.PermissionDeniedAPIError",
          "230:   if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, c.Server)) {",
          "231:    return nil, common.PermissionDeniedAPIError",
          "",
          "---------------"
        ],
        "server/cluster/cluster_test.go||server/cluster/cluster_test.go": [
          "File: server/cluster/cluster_test.go -> server/cluster/cluster_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "5:  \"encoding/json\"",
          "6:  \"testing\"",
          "7:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"fmt\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:  return enf",
          "50: }",
          "52: func TestGetCluster_UrlEncodedName(t *testing.T) {",
          "53:  db := &dbmocks.ArgoDB{}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: func TestUpdateCluster_RejectInvalidParams(t *testing.T) {",
          "54:  testCases := []struct {",
          "55:   name    string",
          "56:   request clusterapi.ClusterUpdateRequest",
          "57:  }{",
          "58:   {",
          "59:    name:    \"allowed cluster URL in body, disallowed cluster URL in query\",",
          "60:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "61:   },",
          "62:   {",
          "63:    name:    \"allowed cluster URL in body, disallowed cluster name in query\",",
          "64:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "65:   },",
          "66:   {",
          "67:    name:    \"allowed cluster URL in body, disallowed cluster name in query, changing unscoped to scoped\",",
          "68:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "69:   },",
          "70:   {",
          "71:    name:    \"allowed cluster URL in body, disallowed cluster URL in query, changing unscoped to scoped\",",
          "72:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "73:   },",
          "74:  }",
          "76:  db := &dbmocks.ArgoDB{}",
          "78:  clusters := []v1alpha1.Cluster{",
          "79:   {",
          "80:    Name:   \"allowed-unscoped\",",
          "81:    Server: \"https://127.0.0.1\",",
          "82:   },",
          "83:   {",
          "84:    Name:   \"disallowed-unscoped\",",
          "85:    Server: \"https://127.0.0.2\",",
          "86:   },",
          "87:   {",
          "88:    Name:    \"allowed-scoped\",",
          "89:    Server:  \"https://127.0.0.3\",",
          "90:    Project: \"allowed-project\",",
          "91:   },",
          "92:   {",
          "93:    Name:    \"disallowed-scoped\",",
          "94:    Server:  \"https://127.0.0.4\",",
          "95:    Project: \"disallowed-project\",",
          "96:   },",
          "97:  }",
          "99:  db.On(\"ListClusters\", mock.Anything).Return(",
          "100:   func(ctx context.Context) *v1alpha1.ClusterList {",
          "101:    return &v1alpha1.ClusterList{",
          "102:     ListMeta: v1.ListMeta{},",
          "103:     Items:    clusters,",
          "104:    }",
          "105:   },",
          "106:   func(ctx context.Context) error {",
          "107:    return nil",
          "108:   },",
          "109:  )",
          "110:  db.On(\"UpdateCluster\", mock.Anything, mock.Anything).Return(",
          "111:   func(ctx context.Context, c *v1alpha1.Cluster) *v1alpha1.Cluster {",
          "112:    for _, cluster := range clusters {",
          "113:     if c.Server == cluster.Server {",
          "114:      return c",
          "115:     }",
          "116:    }",
          "117:    return nil",
          "118:   },",
          "119:   func(ctx context.Context, c *v1alpha1.Cluster) error {",
          "120:    for _, cluster := range clusters {",
          "121:     if c.Server == cluster.Server {",
          "122:      return nil",
          "123:     }",
          "124:    }",
          "125:    return fmt.Errorf(\"cluster '%s' not found\", c.Server)",
          "126:   },",
          "127:  )",
          "128:  db.On(\"GetCluster\", mock.Anything, mock.Anything).Return(",
          "129:   func(ctx context.Context, server string) *v1alpha1.Cluster {",
          "130:    for _, cluster := range clusters {",
          "131:     if server == cluster.Server {",
          "132:      return &cluster",
          "133:     }",
          "134:    }",
          "135:    return nil",
          "136:   },",
          "137:   func(ctx context.Context, server string) error {",
          "138:    for _, cluster := range clusters {",
          "139:     if server == cluster.Server {",
          "140:      return nil",
          "141:     }",
          "142:    }",
          "143:    return fmt.Errorf(\"cluster '%s' not found\", server)",
          "144:   },",
          "145:  )",
          "147:  enf := rbac.NewEnforcer(fake.NewSimpleClientset(test.NewFakeConfigMap()), test.FakeArgoCDNamespace, common.ArgoCDConfigMapName, nil)",
          "148:  _ = enf.SetBuiltinPolicy(`p, role:test, clusters, *, https://127.0.0.1, allow",
          "149: p, role:test, clusters, *, allowed-project/*, allow`)",
          "150:  enf.SetDefaultRole(\"role:test\")",
          "151:  server := NewServer(db, enf, newServerInMemoryCache(), &kubetest.MockKubectlCmd{})",
          "153:  for _, c := range testCases {",
          "154:   cc := c",
          "155:   t.Run(cc.name, func(t *testing.T) {",
          "156:    t.Parallel()",
          "157:    out, err := server.Update(context.Background(), &cc.request)",
          "158:    require.Nil(t, out)",
          "159:    assert.ErrorIs(t, err, common.PermissionDeniedAPIError)",
          "160:   })",
          "161:  }",
          "162: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a21561d6e55575448cc2b2a0261c32ddeb6bc4b",
      "candidate_info": {
        "commit_hash": "5a21561d6e55575448cc2b2a0261c32ddeb6bc4b",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/5a21561d6e55575448cc2b2a0261c32ddeb6bc4b",
        "files": [
          "common/common.go",
          "server/cluster/cluster.go",
          "server/cluster/cluster_test.go"
        ],
        "message": "Merge pull request from GHSA-3jfq-742w-xg8j\n\nfix test name\n\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
        "before_after_code_files": [
          "common/common.go||common/common.go",
          "server/cluster/cluster.go||server/cluster/cluster.go",
          "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "common/common.go||common/common.go",
            "server/cluster/cluster.go||server/cluster/cluster.go",
            "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
          ],
          "candidate": [
            "common/common.go||common/common.go",
            "server/cluster/cluster.go||server/cluster/cluster.go",
            "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
          ]
        }
      },
      "candidate_diff": {
        "common/common.go||common/common.go": [
          "File: common/common.go -> common/common.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"time\"",
          "10:  \"github.com/sirupsen/logrus\"",
          "11: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"google.golang.org/grpc/codes\"",
          "12:  \"google.golang.org/grpc/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322: const TokenVerificationError = \"failed to verify the token\"",
          "324: var TokenVerificationErr = errors.New(TokenVerificationError)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328: var PermissionDeniedAPIError = status.Error(codes.PermissionDenied, \"permission denied\")",
          "",
          "---------------"
        ],
        "server/cluster/cluster.go||server/cluster/cluster.go": [
          "File: server/cluster/cluster.go -> server/cluster/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package cluster",
          "3: import (",
          "4:  \"net/url\"",
          "5:  \"time\"",
          "9:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
          "10:  log \"github.com/sirupsen/logrus\"",
          "11:  \"google.golang.org/grpc/codes\"",
          "",
          "[Removed Lines]",
          "7:  \"context\"",
          "",
          "[Added Lines]",
          "4:  \"context\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:  \"k8s.io/apimachinery/pkg/util/sets\"",
          "15:  \"k8s.io/client-go/kubernetes\"",
          "17:  \"github.com/argoproj/argo-cd/v2/pkg/apiclient/cluster\"",
          "18:  appv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "19:  servercache \"github.com/argoproj/argo-cd/v2/server/cache\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:  \"github.com/argoproj/argo-cd/v2/common\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135: func (s *Server) getClusterWith403IfNotExist(ctx context.Context, q *cluster.ClusterQuery) (*appv1.Cluster, error) {",
          "136:  repo, err := s.getCluster(ctx, q)",
          "137:  if err != nil || repo == nil {",
          "139:  }",
          "140:  return repo, nil",
          "141: }",
          "",
          "[Removed Lines]",
          "138:   return nil, status.Error(codes.PermissionDenied, \"permission denied\")",
          "",
          "[Added Lines]",
          "138:   return nil, common.PermissionDeniedAPIError",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:  }",
          "226:  }",
          "228:  if len(q.UpdatedFields) == 0 || sets.NewString(q.UpdatedFields...).Has(\"project\") {",
          "232:   }",
          "233:  }",
          "",
          "[Removed Lines]",
          "224:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, q.Cluster.Server)); err != nil {",
          "225:   return nil, err",
          "230:   if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, q.Cluster.Server)); err != nil {",
          "231:    return nil, err",
          "",
          "[Added Lines]",
          "224:  if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, c.Server)) {",
          "225:   return nil, common.PermissionDeniedAPIError",
          "230:   if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, c.Server)) {",
          "231:    return nil, common.PermissionDeniedAPIError",
          "",
          "---------------"
        ],
        "server/cluster/cluster_test.go||server/cluster/cluster_test.go": [
          "File: server/cluster/cluster_test.go -> server/cluster/cluster_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "5:  \"encoding/json\"",
          "6:  \"testing\"",
          "7:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"fmt\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:  return enf",
          "50: }",
          "52: func TestGetCluster_UrlEncodedName(t *testing.T) {",
          "53:  db := &dbmocks.ArgoDB{}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: func TestUpdateCluster_RejectInvalidParams(t *testing.T) {",
          "54:  testCases := []struct {",
          "55:   name    string",
          "56:   request clusterapi.ClusterUpdateRequest",
          "57:  }{",
          "58:   {",
          "59:    name:    \"allowed cluster URL in body, disallowed cluster URL in query\",",
          "60:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "61:   },",
          "62:   {",
          "63:    name:    \"allowed cluster URL in body, disallowed cluster name in query\",",
          "64:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "65:   },",
          "66:   {",
          "67:    name:    \"allowed cluster URL in body, disallowed cluster name in query, changing unscoped to scoped\",",
          "68:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "69:   },",
          "70:   {",
          "71:    name:    \"allowed cluster URL in body, disallowed cluster URL in query, changing unscoped to scoped\",",
          "72:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "73:   },",
          "74:  }",
          "76:  db := &dbmocks.ArgoDB{}",
          "78:  clusters := []v1alpha1.Cluster{",
          "79:   {",
          "80:    Name:   \"allowed-unscoped\",",
          "81:    Server: \"https://127.0.0.1\",",
          "82:   },",
          "83:   {",
          "84:    Name:   \"disallowed-unscoped\",",
          "85:    Server: \"https://127.0.0.2\",",
          "86:   },",
          "87:   {",
          "88:    Name:    \"allowed-scoped\",",
          "89:    Server:  \"https://127.0.0.3\",",
          "90:    Project: \"allowed-project\",",
          "91:   },",
          "92:   {",
          "93:    Name:    \"disallowed-scoped\",",
          "94:    Server:  \"https://127.0.0.4\",",
          "95:    Project: \"disallowed-project\",",
          "96:   },",
          "97:  }",
          "99:  db.On(\"ListClusters\", mock.Anything).Return(",
          "100:   func(ctx context.Context) *v1alpha1.ClusterList {",
          "101:    return &v1alpha1.ClusterList{",
          "102:     ListMeta: v1.ListMeta{},",
          "103:     Items:    clusters,",
          "104:    }",
          "105:   },",
          "106:   func(ctx context.Context) error {",
          "107:    return nil",
          "108:   },",
          "109:  )",
          "110:  db.On(\"UpdateCluster\", mock.Anything, mock.Anything).Return(",
          "111:   func(ctx context.Context, c *v1alpha1.Cluster) *v1alpha1.Cluster {",
          "112:    for _, cluster := range clusters {",
          "113:     if c.Server == cluster.Server {",
          "114:      return c",
          "115:     }",
          "116:    }",
          "117:    return nil",
          "118:   },",
          "119:   func(ctx context.Context, c *v1alpha1.Cluster) error {",
          "120:    for _, cluster := range clusters {",
          "121:     if c.Server == cluster.Server {",
          "122:      return nil",
          "123:     }",
          "124:    }",
          "125:    return fmt.Errorf(\"cluster '%s' not found\", c.Server)",
          "126:   },",
          "127:  )",
          "128:  db.On(\"GetCluster\", mock.Anything, mock.Anything).Return(",
          "129:   func(ctx context.Context, server string) *v1alpha1.Cluster {",
          "130:    for _, cluster := range clusters {",
          "131:     if server == cluster.Server {",
          "132:      return &cluster",
          "133:     }",
          "134:    }",
          "135:    return nil",
          "136:   },",
          "137:   func(ctx context.Context, server string) error {",
          "138:    for _, cluster := range clusters {",
          "139:     if server == cluster.Server {",
          "140:      return nil",
          "141:     }",
          "142:    }",
          "143:    return fmt.Errorf(\"cluster '%s' not found\", server)",
          "144:   },",
          "145:  )",
          "147:  enf := rbac.NewEnforcer(fake.NewSimpleClientset(test.NewFakeConfigMap()), test.FakeArgoCDNamespace, common.ArgoCDConfigMapName, nil)",
          "148:  _ = enf.SetBuiltinPolicy(`p, role:test, clusters, *, https://127.0.0.1, allow",
          "149: p, role:test, clusters, *, allowed-project/*, allow`)",
          "150:  enf.SetDefaultRole(\"role:test\")",
          "151:  server := NewServer(db, enf, newServerInMemoryCache(), &kubetest.MockKubectlCmd{})",
          "153:  for _, c := range testCases {",
          "154:   cc := c",
          "155:   t.Run(cc.name, func(t *testing.T) {",
          "156:    t.Parallel()",
          "157:    out, err := server.Update(context.Background(), &cc.request)",
          "158:    require.Nil(t, out)",
          "159:    assert.ErrorIs(t, err, common.PermissionDeniedAPIError)",
          "160:   })",
          "161:  }",
          "162: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}