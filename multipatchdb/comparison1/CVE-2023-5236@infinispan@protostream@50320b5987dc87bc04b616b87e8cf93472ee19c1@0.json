{
  "cve_id": "CVE-2023-5236",
  "cve_desc": "A flaw was found in Infinispan, which does not detect circular object references when unmarshalling. An authenticated attacker with sufficient permissions could insert a maliciously constructed object into the cache and use it to cause out of memory errors and achieve a denial of service.",
  "repo": "infinispan/protostream",
  "patch_hash": "50320b5987dc87bc04b616b87e8cf93472ee19c1",
  "patch_info": {
    "commit_hash": "50320b5987dc87bc04b616b87e8cf93472ee19c1",
    "repo": "infinispan/protostream",
    "commit_url": "https://github.com/infinispan/protostream/commit/50320b5987dc87bc04b616b87e8cf93472ee19c1",
    "files": [
      "core/src/main/java/org/infinispan/protostream/config/Configuration.java",
      "core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java"
    ],
    "message": "IPROTO-263 Allow to configure the DEFAULT_MAX_NESTED_DEPTH",
    "before_after_code_files": [
      "core/src/main/java/org/infinispan/protostream/config/Configuration.java||core/src/main/java/org/infinispan/protostream/config/Configuration.java",
      "core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java||core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/org/infinispan/protostream/config/Configuration.java||core/src/main/java/org/infinispan/protostream/config/Configuration.java": [
      "File: core/src/main/java/org/infinispan/protostream/config/Configuration.java -> core/src/main/java/org/infinispan/protostream/config/Configuration.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: public interface Configuration {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18:    int DEFAULT_MAX_NESTED_DEPTH = 100;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36:    boolean logOutOfSequenceWrites();",
      "38:    WrappingConfig wrappingConfig();",
      "40:    interface WrappingConfig {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:    int maxNestedMessageDepth();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "85:       Builder setLogOutOfSequenceWrites(boolean logOutOfSequenceWrites);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96:       Builder maxNestedMessageDepth(int maxNestedMessageDepth);",
      "",
      "---------------"
    ],
    "core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java||core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java": [
      "File: core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java -> core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:    private final AnnotationsConfigImpl annotationsConfig;",
      "26:    private ConfigurationImpl(boolean logOutOfSequenceReads, boolean logOutOfSequenceWrites,",
      "27:                              WrappedMessageTypeIdMapper wrappedMessageTypeIdMapper,",
      "28:                              Map<String, AnnotationConfigurationImpl> annotations, boolean logUndefinedAnnotations) {",
      "29:       this.logOutOfSequenceReads = logOutOfSequenceReads;",
      "30:       this.logOutOfSequenceWrites = logOutOfSequenceWrites;",
      "31:       this.wrappingConfig = new WrappingConfigImpl(wrappedMessageTypeIdMapper);",
      "32:       this.annotationsConfig = new AnnotationsConfigImpl(annotations, logUndefinedAnnotations);",
      "33:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26:    private final int maxNestedMessageDepth;",
      "29:                              int maxNestedMessageDepth,",
      "34:       this.maxNestedMessageDepth = maxNestedMessageDepth;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:       return logOutOfSequenceWrites;",
      "43:    }",
      "45:    @Override",
      "46:    public WrappingConfig wrappingConfig() {",
      "47:       return wrappingConfig;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49:    @Override",
      "50:    public int maxNestedMessageDepth() {",
      "51:       return maxNestedMessageDepth;",
      "52:    }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "115:       private boolean logOutOfSequenceWrites = true;",
      "117:       private WrappingConfigBuilderImpl wrappingConfigBuilder = null;",
      "119:       private AnnotationsConfigBuilderImpl annotationsConfigBuilder = null;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:       private int maxNestedMessageDepth = Configuration.DEFAULT_MAX_NESTED_DEPTH;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "180:          return this;",
      "181:       }",
      "183:       @Override",
      "184:       public WrappingConfigBuilderImpl wrappingConfig() {",
      "185:          if (wrappingConfigBuilder == null) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "194:       @Override",
      "195:       public Builder maxNestedMessageDepth(int maxNestedMessageDepth) {",
      "196:          this.maxNestedMessageDepth = maxNestedMessageDepth;",
      "197:          return this;",
      "198:       }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "230:          boolean logUndefinedAnnotations = annotationsConfig().logUndefinedAnnotations == null ? annotations.size() > 1 : annotationsConfig().logUndefinedAnnotations;",
      "232:                wrappingConfig().wrappedMessageTypeIdMapper,",
      "233:                annotations, logUndefinedAnnotations);",
      "234:       }",
      "",
      "[Removed Lines]",
      "231:          return new ConfigurationImpl(logOutOfSequenceReads, logOutOfSequenceWrites,",
      "",
      "[Added Lines]",
      "248:          return new ConfigurationImpl(logOutOfSequenceReads, logOutOfSequenceWrites, maxNestedMessageDepth,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5caed435d5937eb10319c05426a2ea8afd91bfff",
      "candidate_info": {
        "commit_hash": "5caed435d5937eb10319c05426a2ea8afd91bfff",
        "repo": "infinispan/protostream",
        "commit_url": "https://github.com/infinispan/protostream/commit/5caed435d5937eb10319c05426a2ea8afd91bfff",
        "files": [
          "integrationtests/pom.xml",
          "integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/GeneratedMarshallerTest.java",
          "integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballSchema.java",
          "integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballTeam.java",
          "integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/Player.java",
          "parent/pom.xml"
        ],
        "message": "IPROTO-263 Test circular dependencies entity marshalling",
        "before_after_code_files": [
          "integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/GeneratedMarshallerTest.java||integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/GeneratedMarshallerTest.java",
          "integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballSchema.java||integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballSchema.java",
          "integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballTeam.java||integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballTeam.java",
          "integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/Player.java||integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/Player.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/infinispan/protostream/pull/189"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/GeneratedMarshallerTest.java||integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/GeneratedMarshallerTest.java": [
          "File: integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/GeneratedMarshallerTest.java -> integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/GeneratedMarshallerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.infinispan.protostream.integrationtests.processor.marshaller;",
          "3: import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;",
          "4: import static org.junit.Assert.assertTrue;",
          "6: import java.util.Collections;",
          "8: import org.infinispan.protostream.GeneratedSchema;",
          "9: import org.infinispan.protostream.ProtobufUtil;",
          "10: import org.infinispan.protostream.SerializationContext;",
          "11: import org.infinispan.protostream.exception.ProtoStreamException;",
          "12: import org.infinispan.protostream.integrationtests.processor.marshaller.model.FootballSchemaImpl;",
          "13: import org.infinispan.protostream.integrationtests.processor.marshaller.model.FootballTeam;",
          "14: import org.infinispan.protostream.integrationtests.processor.marshaller.model.Player;",
          "15: import org.junit.Test;",
          "17: public class GeneratedMarshallerTest {",
          "19:    @Test",
          "20:    public void testGenericMessage() {",
          "21:       SerializationContext ctx = ProtobufUtil.newSerializationContext();",
          "23:       GeneratedSchema generatedSchema = new FootballSchemaImpl();",
          "24:       generatedSchema.registerSchema(ctx);",
          "25:       generatedSchema.registerMarshallers(ctx);",
          "27:       assertTrue(generatedSchema.getProtoFile().contains(\"message Player\"));",
          "29:       FootballTeam footBallTeam = new FootballTeam();",
          "30:       footBallTeam.setName(\"New-Team\");",
          "32:       Player player = new Player(\"fax4ever\", footBallTeam);",
          "33:       footBallTeam.setPlayers(Collections.singletonList(player));",
          "35:       assertThatThrownBy(() -> ProtobufUtil.toWrappedByteArray(ctx, player))",
          "36:             .isInstanceOf(ProtoStreamException.class)",
          "37:             .hasMessageContaining(\"IPROTO000008\");",
          "38:    }",
          "39: }",
          "",
          "---------------"
        ],
        "integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballSchema.java||integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballSchema.java": [
          "File: integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballSchema.java -> integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballSchema.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.infinispan.protostream.integrationtests.processor.marshaller.model;",
          "3: import org.infinispan.protostream.GeneratedSchema;",
          "4: import org.infinispan.protostream.annotations.AutoProtoSchemaBuilder;",
          "6: @AutoProtoSchemaBuilder(includeClasses = { FootballTeam.class, Player.class }, schemaPackageName = \"org.football\",",
          "7:       schemaFileName = \"football.proto\", schemaFilePath = \"proto\")",
          "8: public interface FootballSchema extends GeneratedSchema {",
          "10: }",
          "",
          "---------------"
        ],
        "integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballTeam.java||integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballTeam.java": [
          "File: integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballTeam.java -> integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/FootballTeam.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.infinispan.protostream.integrationtests.processor.marshaller.model;",
          "3: import java.util.List;",
          "5: import org.infinispan.protostream.annotations.ProtoField;",
          "7: public class FootballTeam {",
          "9:    private String name;",
          "10:    private List<Player> players;",
          "12:    @ProtoField(value = 1)",
          "13:    public String getName() {",
          "14:       return name;",
          "15:    }",
          "17:    public void setName(String name) {",
          "18:       this.name = name;",
          "19:    }",
          "21:    @ProtoField(value = 2)",
          "22:    public List<Player> getPlayers() {",
          "23:       return players;",
          "24:    }",
          "26:    public void setPlayers(List<Player> players) {",
          "27:       this.players = players;",
          "28:    }",
          "29: }",
          "",
          "---------------"
        ],
        "integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/Player.java||integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/Player.java": [
          "File: integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/Player.java -> integrationtests/src/test/java/org/infinispan/protostream/integrationtests/processor/marshaller/model/Player.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.infinispan.protostream.integrationtests.processor.marshaller.model;",
          "3: import org.infinispan.protostream.annotations.ProtoFactory;",
          "4: import org.infinispan.protostream.annotations.ProtoField;",
          "6: public class Player {",
          "8:    private String name;",
          "9:    private FootballTeam footballTeam;",
          "11:    @ProtoFactory",
          "12:    public Player(String name, FootballTeam footballTeam) {",
          "13:       this.name = name;",
          "14:       this.footballTeam = footballTeam;",
          "15:    }",
          "17:    @ProtoField(value = 1)",
          "18:    public String getName() {",
          "19:       return name;",
          "20:    }",
          "22:    @ProtoField(value = 2)",
          "23:    public FootballTeam getFootballTeam() {",
          "24:       return footballTeam;",
          "25:    }",
          "26: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "305e693b11281e45a56ded47f9b13f4ceed033d8",
      "candidate_info": {
        "commit_hash": "305e693b11281e45a56ded47f9b13f4ceed033d8",
        "repo": "infinispan/protostream",
        "commit_url": "https://github.com/infinispan/protostream/commit/305e693b11281e45a56ded47f9b13f4ceed033d8",
        "files": [
          "core/src/main/java/org/infinispan/protostream/DescriptorParser.java",
          "core/src/main/java/org/infinispan/protostream/RawProtoStreamReader.java",
          "core/src/main/java/org/infinispan/protostream/RawProtoStreamWriter.java",
          "core/src/main/java/org/infinispan/protostream/RawProtobufMarshaller.java",
          "core/src/main/java/org/infinispan/protostream/TagReader.java",
          "core/src/main/java/org/infinispan/protostream/TagWriter.java",
          "core/src/main/java/org/infinispan/protostream/WrappedMessage.java",
          "core/src/main/java/org/infinispan/protostream/WrappedMessageTypeIdMapper.java",
          "core/src/main/java/org/infinispan/protostream/annotations/impl/OriginatingClasses.java",
          "core/src/main/java/org/infinispan/protostream/config/Configuration.java",
          "core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java",
          "core/src/main/java/org/infinispan/protostream/impl/TagWriterImpl.java",
          "core/src/main/java/org/infinispan/protostream/impl/WireFormat.java",
          "core/src/test/java/org/infinispan/protostream/ProtobufUtilTest.java"
        ],
        "message": "IPROTO-296 Remove some deprecated classes",
        "before_after_code_files": [
          "core/src/main/java/org/infinispan/protostream/DescriptorParser.java||core/src/main/java/org/infinispan/protostream/DescriptorParser.java",
          "core/src/main/java/org/infinispan/protostream/RawProtoStreamReader.java||core/src/main/java/org/infinispan/protostream/RawProtoStreamReader.java",
          "core/src/main/java/org/infinispan/protostream/RawProtoStreamWriter.java||core/src/main/java/org/infinispan/protostream/RawProtoStreamWriter.java",
          "core/src/main/java/org/infinispan/protostream/RawProtobufMarshaller.java||core/src/main/java/org/infinispan/protostream/RawProtobufMarshaller.java",
          "core/src/main/java/org/infinispan/protostream/TagReader.java||core/src/main/java/org/infinispan/protostream/TagReader.java",
          "core/src/main/java/org/infinispan/protostream/TagWriter.java||core/src/main/java/org/infinispan/protostream/TagWriter.java",
          "core/src/main/java/org/infinispan/protostream/WrappedMessage.java||core/src/main/java/org/infinispan/protostream/WrappedMessage.java",
          "core/src/main/java/org/infinispan/protostream/WrappedMessageTypeIdMapper.java||core/src/main/java/org/infinispan/protostream/WrappedMessageTypeIdMapper.java",
          "core/src/main/java/org/infinispan/protostream/annotations/impl/OriginatingClasses.java||core/src/main/java/org/infinispan/protostream/annotations/impl/OriginatingClasses.java",
          "core/src/main/java/org/infinispan/protostream/config/Configuration.java||core/src/main/java/org/infinispan/protostream/config/Configuration.java",
          "core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java||core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java",
          "core/src/main/java/org/infinispan/protostream/impl/TagWriterImpl.java||core/src/main/java/org/infinispan/protostream/impl/TagWriterImpl.java",
          "core/src/main/java/org/infinispan/protostream/impl/WireFormat.java||core/src/main/java/org/infinispan/protostream/impl/WireFormat.java",
          "core/src/test/java/org/infinispan/protostream/ProtobufUtilTest.java||core/src/test/java/org/infinispan/protostream/ProtobufUtilTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/org/infinispan/protostream/config/Configuration.java||core/src/main/java/org/infinispan/protostream/config/Configuration.java",
            "core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java||core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java"
          ],
          "candidate": [
            "core/src/main/java/org/infinispan/protostream/config/Configuration.java||core/src/main/java/org/infinispan/protostream/config/Configuration.java",
            "core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java||core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/infinispan/protostream/DescriptorParser.java||core/src/main/java/org/infinispan/protostream/DescriptorParser.java": [
          "File: core/src/main/java/org/infinispan/protostream/DescriptorParser.java -> core/src/main/java/org/infinispan/protostream/DescriptorParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/org/infinispan/protostream/RawProtoStreamReader.java||core/src/main/java/org/infinispan/protostream/RawProtoStreamReader.java": [
          "File: core/src/main/java/org/infinispan/protostream/RawProtoStreamReader.java -> core/src/main/java/org/infinispan/protostream/RawProtoStreamReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/org/infinispan/protostream/RawProtoStreamWriter.java||core/src/main/java/org/infinispan/protostream/RawProtoStreamWriter.java": [
          "File: core/src/main/java/org/infinispan/protostream/RawProtoStreamWriter.java -> core/src/main/java/org/infinispan/protostream/RawProtoStreamWriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/org/infinispan/protostream/RawProtobufMarshaller.java||core/src/main/java/org/infinispan/protostream/RawProtobufMarshaller.java": [
          "File: core/src/main/java/org/infinispan/protostream/RawProtobufMarshaller.java -> core/src/main/java/org/infinispan/protostream/RawProtobufMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/org/infinispan/protostream/TagReader.java||core/src/main/java/org/infinispan/protostream/TagReader.java": [
          "File: core/src/main/java/org/infinispan/protostream/TagReader.java -> core/src/main/java/org/infinispan/protostream/TagReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "11: public interface TagReader extends RawProtoStreamReader {",
          "",
          "[Added Lines]",
          "11: public interface TagReader {",
          "",
          "---------------"
        ],
        "core/src/main/java/org/infinispan/protostream/TagWriter.java||core/src/main/java/org/infinispan/protostream/TagWriter.java": [
          "File: core/src/main/java/org/infinispan/protostream/TagWriter.java -> core/src/main/java/org/infinispan/protostream/TagWriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:    void flush() throws IOException;",
          "",
          "[Removed Lines]",
          "12: public interface TagWriter extends RawProtoStreamWriter {",
          "",
          "[Added Lines]",
          "12: public interface TagWriter {",
          "",
          "---------------"
        ],
        "core/src/main/java/org/infinispan/protostream/WrappedMessage.java||core/src/main/java/org/infinispan/protostream/WrappedMessage.java": [
          "File: core/src/main/java/org/infinispan/protostream/WrappedMessage.java -> core/src/main/java/org/infinispan/protostream/WrappedMessage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import java.time.Instant;",
          "5: import java.util.Date;",
          "6: import java.util.Iterator;",
          "8: import org.infinispan.protostream.containers.ElementContainerAdapter;",
          "9: import org.infinispan.protostream.containers.IndexedElementContainerAdapter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "607:       if (container == null) {",
          "608:          throw new IllegalStateException(\"The unmarshalled container must not be null\");",
          "609:       }",
          "613:       if (containerMarshaller instanceof IterableElementContainerAdapter) {",
          "614:          IterableElementContainerAdapter adapter = (IterableElementContainerAdapter) containerMarshaller;",
          "",
          "[Removed Lines]",
          "610:       containerMessage = null;",
          "611:       nestedInput = null;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "635:    private static int mapTypeIdIn(int typeId, ImmutableSerializationContext ctx) {",
          "638:    }",
          "",
          "[Removed Lines]",
          "636:       WrappedMessageTypeIdMapper mapper = ctx.getConfiguration().wrappingConfig().wrappedMessageTypeIdMapper();",
          "637:       return mapper == null ? typeId : mapper.mapTypeIdIn(typeId, ctx);",
          "",
          "[Added Lines]",
          "635:       return typeId;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "645:       if (typeId == null) {",
          "646:          return -1;",
          "647:       }",
          "650:    }",
          "652:    @Override",
          "",
          "[Removed Lines]",
          "648:       WrappedMessageTypeIdMapper mapper = ctx.getConfiguration().wrappingConfig().wrappedMessageTypeIdMapper();",
          "649:       return mapper == null ? typeId : mapper.mapTypeIdOut(typeId, ctx);",
          "",
          "[Added Lines]",
          "646:       return typeId;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "655:       if (o == null || getClass() != o.getClass()) return false;",
          "657:       WrappedMessage other = (WrappedMessage) o;",
          "659:    }",
          "661:    @Override",
          "",
          "[Removed Lines]",
          "658:       return value != null ? value.equals(other.value) : other.value == null;",
          "",
          "[Added Lines]",
          "655:       return Objects.equals(value, other.value);",
          "",
          "---------------"
        ],
        "core/src/main/java/org/infinispan/protostream/WrappedMessageTypeIdMapper.java||core/src/main/java/org/infinispan/protostream/WrappedMessageTypeIdMapper.java": [
          "File: core/src/main/java/org/infinispan/protostream/WrappedMessageTypeIdMapper.java -> core/src/main/java/org/infinispan/protostream/WrappedMessageTypeIdMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/org/infinispan/protostream/annotations/impl/OriginatingClasses.java||core/src/main/java/org/infinispan/protostream/annotations/impl/OriginatingClasses.java": [
          "File: core/src/main/java/org/infinispan/protostream/annotations/impl/OriginatingClasses.java -> core/src/main/java/org/infinispan/protostream/annotations/impl/OriginatingClasses.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/org/infinispan/protostream/config/Configuration.java||core/src/main/java/org/infinispan/protostream/config/Configuration.java": [
          "File: core/src/main/java/org/infinispan/protostream/config/Configuration.java -> core/src/main/java/org/infinispan/protostream/config/Configuration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.util.Map;",
          "6: import org.infinispan.protostream.config.impl.ConfigurationImpl;",
          "7: import org.infinispan.protostream.descriptors.AnnotationElement;",
          "",
          "[Removed Lines]",
          "5: import org.infinispan.protostream.WrappedMessageTypeIdMapper;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:    int maxNestedMessageDepth();",
          "61:    AnnotationsConfig annotationsConfig();",
          "63:    interface AnnotationsConfig {",
          "",
          "[Removed Lines]",
          "47:    WrappingConfig wrappingConfig();",
          "49:    interface WrappingConfig {",
          "51:       WrappedMessageTypeIdMapper wrappedMessageTypeIdMapper();",
          "53:       interface Builder {",
          "55:          Builder wrappedMessageTypeIdMapper(WrappedMessageTypeIdMapper wrappedMessageTypeIdMapper);",
          "57:          Configuration build();",
          "58:       }",
          "59:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:       Builder maxNestedMessageDepth(int maxNestedMessageDepth);",
          "112:       AnnotationsConfig.Builder annotationsConfig();",
          "114:       Configuration build();",
          "",
          "[Removed Lines]",
          "104:       @Deprecated",
          "105:       default Builder setLogUndefinedAnnotations(boolean logUndefinedAnnotations) {",
          "106:          annotationsConfig().setLogUndefinedAnnotations(logUndefinedAnnotations);",
          "107:          return this;",
          "108:       }",
          "110:       WrappingConfig.Builder wrappingConfig();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java||core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java": [
          "File: core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java -> core/src/main/java/org/infinispan/protostream/config/impl/ConfigurationImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import java.util.HashMap;",
          "5: import java.util.Map;",
          "8: import org.infinispan.protostream.config.AnnotationConfiguration;",
          "9: import org.infinispan.protostream.config.Configuration;",
          "10: import org.infinispan.protostream.descriptors.AnnotationElement;",
          "",
          "[Removed Lines]",
          "7: import org.infinispan.protostream.WrappedMessageTypeIdMapper;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:    private final boolean logOutOfSequenceWrites;",
          "24:    private final AnnotationsConfigImpl annotationsConfig;",
          "26:    private final int maxNestedMessageDepth;",
          "28:    private ConfigurationImpl(boolean logOutOfSequenceReads, boolean logOutOfSequenceWrites,",
          "29:                              int maxNestedMessageDepth,",
          "31:                              Map<String, AnnotationConfigurationImpl> annotations, boolean logUndefinedAnnotations) {",
          "32:       this.logOutOfSequenceReads = logOutOfSequenceReads;",
          "33:       this.logOutOfSequenceWrites = logOutOfSequenceWrites;",
          "34:       this.maxNestedMessageDepth = maxNestedMessageDepth;",
          "36:       this.annotationsConfig = new AnnotationsConfigImpl(annotations, logUndefinedAnnotations);",
          "37:    }",
          "",
          "[Removed Lines]",
          "22:    private final WrappingConfigImpl wrappingConfig;",
          "30:                              WrappedMessageTypeIdMapper wrappedMessageTypeIdMapper,",
          "35:       this.wrappingConfig = new WrappingConfigImpl(wrappedMessageTypeIdMapper);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:       return maxNestedMessageDepth;",
          "52:    }",
          "59:    @Override",
          "60:    public AnnotationsConfig annotationsConfig() {",
          "61:       return annotationsConfig;",
          "",
          "[Removed Lines]",
          "54:    @Override",
          "55:    public WrappingConfig wrappingConfig() {",
          "56:       return wrappingConfig;",
          "57:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66:       return \"Configuration{\" +",
          "67:             \"logOutOfSequenceReads=\" + logOutOfSequenceReads +",
          "68:             \", logOutOfSequenceWrites=\" + logOutOfSequenceWrites +",
          "70:             \", annotationsConfig=\" + annotationsConfig +",
          "71:             '}';",
          "72:    }",
          "93:    private static final class AnnotationsConfigImpl implements AnnotationsConfig {",
          "95:       private final Map<String, AnnotationConfiguration> annotations;",
          "",
          "[Removed Lines]",
          "69:             \", wrappingConfig=\" + wrappingConfig +",
          "74:    private static final class WrappingConfigImpl implements WrappingConfig {",
          "76:       private final WrappedMessageTypeIdMapper wrappedMessageTypeIdMapper;",
          "78:       private WrappingConfigImpl(WrappedMessageTypeIdMapper wrappedMessageTypeIdMapper) {",
          "79:          this.wrappedMessageTypeIdMapper = wrappedMessageTypeIdMapper;",
          "80:       }",
          "82:       @Override",
          "83:       public WrappedMessageTypeIdMapper wrappedMessageTypeIdMapper() {",
          "84:          return wrappedMessageTypeIdMapper;",
          "85:       }",
          "87:       @Override",
          "88:       public String toString() {",
          "89:          return \"WrappingConfigImpl{wrappedMessageTypeIdMapper=\" + wrappedMessageTypeIdMapper + '}';",
          "90:       }",
          "91:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126:       private int maxNestedMessageDepth = Configuration.DEFAULT_MAX_NESTED_DEPTH;",
          "130:       private AnnotationsConfigBuilderImpl annotationsConfigBuilder = null;",
          "148:       final class AnnotationsConfigBuilderImpl implements AnnotationsConfig.Builder {",
          "150:          private Boolean logUndefinedAnnotations = null;",
          "",
          "[Removed Lines]",
          "128:       private WrappingConfigBuilderImpl wrappingConfigBuilder = null;",
          "132:       final class WrappingConfigBuilderImpl implements WrappingConfig.Builder {",
          "134:          private WrappedMessageTypeIdMapper wrappedMessageTypeIdMapper;",
          "136:          @Override",
          "137:          public WrappingConfig.Builder wrappedMessageTypeIdMapper(WrappedMessageTypeIdMapper wrappedMessageTypeIdMapper) {",
          "138:             this.wrappedMessageTypeIdMapper = wrappedMessageTypeIdMapper;",
          "139:             return this;",
          "140:          }",
          "142:          @Override",
          "143:          public Configuration build() {",
          "144:             return BuilderImpl.this.build();",
          "145:          }",
          "146:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "198:       }",
          "200:       @Override",
          "210:          if (annotationsConfigBuilder == null) {",
          "211:             annotationsConfigBuilder = new AnnotationsConfigBuilderImpl();",
          "212:          }",
          "",
          "[Removed Lines]",
          "201:       public WrappingConfigBuilderImpl wrappingConfig() {",
          "202:          if (wrappingConfigBuilder == null) {",
          "203:             wrappingConfigBuilder = new WrappingConfigBuilderImpl();",
          "204:          }",
          "205:          return wrappingConfigBuilder;",
          "206:       }",
          "208:       @Override",
          "209:       public AnnotationsConfigBuilderImpl annotationsConfig() {",
          "",
          "[Added Lines]",
          "153:       public AnnotationsConfig.Builder annotationsConfig() {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "222:                .type(AnnotationElement.AttributeType.INT)",
          "223:                .metadataCreator((annotatedDescriptor, annotation) -> annotation.getDefaultAttributeValue().getValue());",
          "226:          Map<String, AnnotationConfigurationImpl> annotations = new HashMap<>(annotationsConfig.annotationBuilders.size());",
          "229:             annotations.put(annotationConfig.name(), annotationConfig);",
          "230:          }",
          "",
          "[Removed Lines]",
          "225:          AnnotationsConfigBuilderImpl annotationsConfig = annotationsConfig();",
          "227:          for (AnnotationConfiguration.Builder annotationBuilder : annotationsConfig.annotationBuilders.values()) {",
          "228:             AnnotationConfigurationImpl annotationConfig = ((AnnotationConfigurationImpl.BuilderImpl) annotationBuilder).buildAnnotationConfiguration();",
          "",
          "[Added Lines]",
          "169:          AnnotationsConfigBuilderImpl annotationsConfig = (AnnotationsConfigBuilderImpl) annotationsConfig();",
          "171:          for (AnnotationConfigurationImpl.BuilderImpl annotationBuilder : annotationsConfig.annotationBuilders.values()) {",
          "172:             AnnotationConfigurationImpl annotationConfig = annotationBuilder.buildAnnotationConfiguration();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "244:          }",
          "248:          return new ConfigurationImpl(logOutOfSequenceReads, logOutOfSequenceWrites, maxNestedMessageDepth,",
          "250:                annotations, logUndefinedAnnotations);",
          "251:       }",
          "252:    }",
          "",
          "[Removed Lines]",
          "247:          boolean logUndefinedAnnotations = annotationsConfig().logUndefinedAnnotations == null ? annotations.size() > 1 : annotationsConfig().logUndefinedAnnotations;",
          "249:                wrappingConfig().wrappedMessageTypeIdMapper,",
          "",
          "[Added Lines]",
          "191:          Boolean logUndefinedAnnotations = ((AnnotationsConfigBuilderImpl) annotationsConfig()).logUndefinedAnnotations;",
          "192:          if (logUndefinedAnnotations == null) logUndefinedAnnotations = annotations.size() > 1;",
          "",
          "---------------"
        ],
        "core/src/main/java/org/infinispan/protostream/impl/TagWriterImpl.java||core/src/main/java/org/infinispan/protostream/impl/TagWriterImpl.java": [
          "File: core/src/main/java/org/infinispan/protostream/impl/TagWriterImpl.java -> core/src/main/java/org/infinispan/protostream/impl/TagWriterImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:       encoder.writeBytes(value, offset, length);",
          "230:    }",
          "237:    @Override",
          "238:    public void writeRawBytes(byte[] value, int offset, int length) throws IOException {",
          "239:       encoder.writeBytes(value, offset, length);",
          "240:    }",
          "247:    @Override",
          "248:    public SerializationContextImpl getSerializationContext() {",
          "249:       return serCtx;",
          "",
          "[Removed Lines]",
          "232:    @Override",
          "233:    public void writeRawByte(byte value) throws IOException {",
          "234:       encoder.writeByte(value);",
          "235:    }",
          "242:    @Override",
          "243:    public void writeRawBytes(ByteBuffer value) throws IOException {",
          "244:       encoder.writeBytes(value);",
          "245:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/org/infinispan/protostream/impl/WireFormat.java||core/src/main/java/org/infinispan/protostream/impl/WireFormat.java": [
          "File: core/src/main/java/org/infinispan/protostream/impl/WireFormat.java -> core/src/main/java/org/infinispan/protostream/impl/WireFormat.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/test/java/org/infinispan/protostream/ProtobufUtilTest.java||core/src/test/java/org/infinispan/protostream/ProtobufUtilTest.java": [
          "File: core/src/test/java/org/infinispan/protostream/ProtobufUtilTest.java -> core/src/test/java/org/infinispan/protostream/ProtobufUtilTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.util.List;",
          "21: import java.util.function.Function;",
          "26: import org.infinispan.protostream.domain.Account;",
          "27: import org.infinispan.protostream.domain.Address;",
          "28: import org.infinispan.protostream.domain.Numerics;",
          "",
          "[Removed Lines]",
          "23: import org.infinispan.protostream.config.Configuration;",
          "24: import org.infinispan.protostream.descriptors.Descriptor;",
          "25: import org.infinispan.protostream.descriptors.FieldDescriptor;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:       assertArrayEquals(userBytes1, userBytes2);",
          "125:    }",
          "172:    @Test",
          "173:    public void testWithInvalidJson() throws Exception {",
          "174:       Throwable error = testFromJson(\"john\");",
          "",
          "[Removed Lines]",
          "127:    @Test",
          "128:    public void testWrappedMessageTypeIdMapper() throws Exception {",
          "129:       WrappedMessageTypeIdMapper mapper = new WrappedMessageTypeIdMapper() {",
          "130:          @Override",
          "131:          public int mapTypeIdOut(int typeId, ImmutableSerializationContext ctx) {",
          "132:             if (typeId == 100042) { // change typeId ouf User",
          "133:                return 100021;",
          "134:             }",
          "135:             return typeId;",
          "136:          }",
          "137:       };",
          "139:       Configuration cfg = Configuration.builder()",
          "140:             .wrappingConfig()",
          "141:             .wrappedMessageTypeIdMapper(mapper)",
          "142:             .build();",
          "144:       ImmutableSerializationContext ctx = createContext(cfg);",
          "147:       User user = new User();",
          "148:       user.setId(1);",
          "149:       user.setName(\"John\");",
          "150:       user.setSurname(\"Batman\");",
          "151:       user.setGender(User.Gender.MALE);",
          "153:       byte[] bytes = ProtobufUtil.toWrappedByteArray(ctx, user);",
          "155:       int[] seenTypeId = new int[]{-1};",
          "157:       TagHandler tagHandler = new TagHandler() {",
          "158:          @Override",
          "159:          public void onTag(int fieldNumber, FieldDescriptor fieldDescriptor, Object tagValue) {",
          "160:             if (fieldNumber == WrappedMessage.WRAPPED_TYPE_ID) {",
          "161:                seenTypeId[0] = (Integer) tagValue;",
          "162:             }",
          "163:          }",
          "164:       };",
          "166:       Descriptor wrappedMessageDescriptor = ctx.getMessageDescriptor(WrappedMessage.PROTOBUF_TYPE_NAME);",
          "167:       ProtobufParser.INSTANCE.parse(tagHandler, wrappedMessageDescriptor, bytes);",
          "169:       assertEquals(100021, seenTypeId[0]);",
          "170:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}