{
  "cve_id": "CVE-2022-30973",
  "cve_desc": "We failed to apply the fix for CVE-2022-30126 to the 1.x branch in the 1.28.2 release. In Apache Tika, a regular expression in the StandardsText class, used by the StandardsExtractingContentHandler could lead to a denial of service caused by backtracking on a specially crafted file. This only affects users who are running the StandardsExtractingContentHandler, which is a non-standard handler. This is fixed in 1.28.3.",
  "repo": "apache/tika",
  "patch_hash": "a36711610fa1f6f5ba0f594803415af795e0b265",
  "patch_info": {
    "commit_hash": "a36711610fa1f6f5ba0f594803415af795e0b265",
    "repo": "apache/tika",
    "commit_url": "https://github.com/apache/tika/commit/a36711610fa1f6f5ba0f594803415af795e0b265",
    "files": [
      "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java"
    ],
    "message": "improve regex in StandardsText",
    "before_after_code_files": [
      "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java||tika-core/src/main/java/org/apache/tika/sax/StandardsText.java"
    ]
  },
  "patch_diff": {
    "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java||tika-core/src/main/java/org/apache/tika/sax/StandardsText.java": [
      "File: tika-core/src/main/java/org/apache/tika/sax/StandardsText.java -> tika-core/src/main/java/org/apache/tika/sax/StandardsText.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: public class StandardsText {",
      "",
      "[Removed Lines]",
      "56:  private static final String REGEX_HEADER = \"(\\\\d+\\\\.(\\\\d+\\\\.?)*)\\\\p{Blank}+([A-Z]+(\\\\s[A-Z]+)*){5,}\";",
      "",
      "[Added Lines]",
      "55:  private static final String REGEX_HEADER =",
      "56:    \"(\\\\d{1,10}\\\\.(\\\\d{1,10}\\\\.?){0,10})\\\\p{Blank}+([A-Z]{1,256}(\\\\s[A-Z]+){0,256}){5,}\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e76302196ebcafb7b51fce37fbe8256e6c0fbc51",
      "candidate_info": {
        "commit_hash": "e76302196ebcafb7b51fce37fbe8256e6c0fbc51",
        "repo": "apache/tika",
        "commit_url": "https://github.com/apache/tika/commit/e76302196ebcafb7b51fce37fbe8256e6c0fbc51",
        "files": [
          "tika-core/src/main/java/org/apache/tika/sax/StandardOrganizations.java",
          "tika-core/src/main/java/org/apache/tika/sax/StandardReference.java",
          "tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java",
          "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java",
          "tika-example/src/main/java/org/apache/tika/example/StandardsExtractionExample.java",
          "tika-parsers/src/test/java/org/apache/tika/sax/StandardsExtractingContentHandlerTest.java",
          "tika-parsers/src/test/resources/test-documents/testStandardsExtractor.pdf"
        ],
        "message": "Improvement for TIKA-2449 contributed by Giuseppe Totaro",
        "before_after_code_files": [
          "tika-core/src/main/java/org/apache/tika/sax/StandardOrganizations.java||tika-core/src/main/java/org/apache/tika/sax/StandardOrganizations.java",
          "tika-core/src/main/java/org/apache/tika/sax/StandardReference.java||tika-core/src/main/java/org/apache/tika/sax/StandardReference.java",
          "tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java||tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java",
          "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java||tika-core/src/main/java/org/apache/tika/sax/StandardsText.java",
          "tika-example/src/main/java/org/apache/tika/example/StandardsExtractionExample.java||tika-example/src/main/java/org/apache/tika/example/StandardsExtractionExample.java",
          "tika-parsers/src/test/java/org/apache/tika/sax/StandardsExtractingContentHandlerTest.java||tika-parsers/src/test/java/org/apache/tika/sax/StandardsExtractingContentHandlerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java||tika-core/src/main/java/org/apache/tika/sax/StandardsText.java"
          ],
          "candidate": [
            "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java||tika-core/src/main/java/org/apache/tika/sax/StandardsText.java"
          ]
        }
      },
      "candidate_diff": {
        "tika-core/src/main/java/org/apache/tika/sax/StandardOrganizations.java||tika-core/src/main/java/org/apache/tika/sax/StandardOrganizations.java": [
          "File: tika-core/src/main/java/org/apache/tika/sax/StandardOrganizations.java -> tika-core/src/main/java/org/apache/tika/sax/StandardOrganizations.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.tika.sax;",
          "20: import java.util.HashMap;",
          "21: import java.util.Map;",
          "29: public class StandardOrganizations {",
          "31:  private static Map<String, String> organizations;",
          "32:  static {",
          "33:   organizations = new HashMap<String, String>();",
          "35:      organizations.put(\"3GPP\", \"3rd Generation Partnership Project\");",
          "36:      organizations.put(\"3GPP2\", \"3rd Generation Partnership Project 2\");",
          "37:      organizations.put(\"Accellera\", \"Accellera Organization\");",
          "38:      organizations.put(\"A4L\", \"Access for Learning Community (formerly known as the Schools Interoperability Framework)\");",
          "39:      organizations.put(\"AES\", \"Audio Engineering Society\");",
          "40:      organizations.put(\"AIIM\", \"Association for Information and Image Management\");",
          "41:      organizations.put(\"ASAM\", \"Association for Automation and Measuring Systems - Automotive technology\");",
          "42:      organizations.put(\"ASHRAE\", \"American Society of Heating, Refrigerating and Air-Conditioning Engineers (ASHRAE is an international organization, despite its name)\");",
          "43:      organizations.put(\"ASME\", \"formerly The American Society of Mechanical Engineers\");",
          "44:      organizations.put(\"ASTM\", \"ASTM (American Society for Testing and Materials) International\");",
          "45:      organizations.put(\"ATIS\", \"Alliance for Telecommunications Industry Solutions\");",
          "46:      organizations.put(\"AUTOSAR\", \"Automotive technology\");",
          "47:      organizations.put(\"BIPM, CGPM, and CIPM\", \"Bureau International des Poids et Mesures and the related organizations established under the Metre Convention of 1875.\");",
          "48:      organizations.put(\"CableLabs\", \"Cable Television Laboratories\");",
          "49:      organizations.put(\"CCSDS\", \"Consultative Committee for Space Data Sciences\");",
          "50:      organizations.put(\"CISPR\", \"International Special Committee on Radio Interference\");",
          "51:      organizations.put(\"CFA\", \"Compact flash association\");",
          "52:      organizations.put(\"DCMI\", \"Dublin Core Metadata Initiative\");",
          "53:      organizations.put(\"DMTF\", \"Distributed Management Task Force\");",
          "54:      organizations.put(\"Ecma International\", \"Ecma International (previously called ECMA)\");",
          "55:      organizations.put(\"EKOenergy\", \"EKOenergy Network managed by environmental NGOs\");",
          "56:      organizations.put(\"FAI\", \"F\u00e9d\u00e9ration A\u00e9ronautique Internationale\");",
          "57:      organizations.put(\"GlobalPlatform\", \"Secure element and TEE standards\");",
          "58:      organizations.put(\"GS1\", \"Global supply chain standards (identification numbers, barcodes, electronic commerce transactions, RFID)\");",
          "59:      organizations.put(\"HGI\", \"Home Gateway Initiative\");",
          "60:      organizations.put(\"HFSB\", \"Hedge Fund Standards Board\");",
          "61:      organizations.put(\"IATA\", \"International Air Transport Association\");",
          "62:      organizations.put(\"IAU*\", \"International Arabic Union\");",
          "63:      organizations.put(\"ICAO\", \"International Civil Aviation Organization\");",
          "64:      organizations.put(\"IEC\", \"International Electrotechnical Commission\");",
          "65:      organizations.put(\"IEEE\", \"Institute of Electrical and Electronics Engineers\");",
          "66:      organizations.put(\"IEEE-SA\", \"IEEE Standards Association\");",
          "67:      organizations.put(\"IETF\", \"Internet Engineering Task Force\");",
          "68:      organizations.put(\"IFOAM\", \"International Federation of Organic Agriculture Movements\");",
          "69:      organizations.put(\"IFSWF\", \"International Forum of Sovereign Wealth Funds\");",
          "70:      organizations.put(\"IMO\", \"International Maritime Organization\");",
          "71:      organizations.put(\"IMS\", \"IMS Global Learning Consortium\");",
          "72:      organizations.put(\"ISO\", \"International Organization for Standardization\");",
          "73:      organizations.put(\"IPTC\", \"International Press Telecommunications Council\");",
          "74:      organizations.put(\"ITU\", \"The International Telecommunication Union\");",
          "75:      organizations.put(\"ITU-R\", \"ITU Radiocommunications Sector (formerly known as CCIR)\");",
          "76:      organizations.put(\"CCIR\", \"Comit\u00e9 Consultatif International pour la Radio, a forerunner of the ITU-R\");",
          "77:      organizations.put(\"ITU-T\", \"ITU Telecommunications Sector (formerly known as CCITT)\");",
          "78:      organizations.put(\"CCITT\", \"Comit\u00e9 Consultatif International T\u00e9l\u00e9phonique et T\u00e9l\u00e9graphique, renamed ITU-T in 1993\");",
          "79:      organizations.put(\"ITU-D\", \"ITU Telecom Development (formerly known as BDT)\");",
          "80:      organizations.put(\"BDT\", \"Bureau de d\u00e9veloppement des t\u00e9l\u00e9communications, renamed ITU-D\");",
          "81:      organizations.put(\"IUPAC\", \"International Union of Pure and Applied Chemistry\");",
          "82:      organizations.put(\"Liberty Alliance\", \"Liberty Alliance\");",
          "83:      organizations.put(\"Media Grid\", \"Media Grid Standards Organization\");",
          "84:      organizations.put(\"NACE International\", \"Formerly known as National Association of Corrosion Engineers\");",
          "85:      organizations.put(\"OASIS\", \"Organization for the Advancement of Structured Information Standards\");",
          "86:      organizations.put(\"OGC\", \"Open Geospatial Consortium\");",
          "87:      organizations.put(\"OHICC\", \"Organization of Hotel Industry Classification & Certification\");",
          "88:      organizations.put(\"OMA\", \"Open Mobile Alliance\");",
          "89:      organizations.put(\"OMG\", \"Object Management Group\");",
          "90:      organizations.put(\"OGF\", \"Open Grid Forum (merger of Global Grid Forum (GGF) and Enterprise Grid Alliance (EGA))\");",
          "91:      organizations.put(\"GGF\", \"Global Grid Forum\");",
          "92:      organizations.put(\"EGA\", \"Enterprise Grid Alliance\");",
          "93:      organizations.put(\"OpenTravel Alliance\", \"OpenTravel Alliance (previously known as OTA)\");",
          "94:      organizations.put(\"OTA\", \"OpenTravel Alliance\");",
          "95:      organizations.put(\"OSGi\", \"OSGi Alliance\");",
          "96:      organizations.put(\"PESC\", \"P20 Education Standards Council[1]\");",
          "97:      organizations.put(\"SAI\", \"Social Accountability International\");",
          "98:      organizations.put(\"SDA\", \"Secure Digital Association\");",
          "99:      organizations.put(\"SNIA\", \"Storage Networking Industry Association\");",
          "100:      organizations.put(\"SMPTE\", \"Society of Motion Picture and Television Engineers\");",
          "101:      organizations.put(\"SSDA\", \"Solid State Drive Alliance\");",
          "102:      organizations.put(\"The Open Group\", \"The Open Group\");",
          "103:      organizations.put(\"TIA\", \"Telecommunications Industry Association\");",
          "104:      organizations.put(\"TM Forum\", \"Telemanagement Forum\");",
          "105:      organizations.put(\"UIC\", \"International Union of Railways\");",
          "106:      organizations.put(\"UL\", \"Underwriters Laboratories\");",
          "107:      organizations.put(\"UPU\", \"Universal Postal Union\");",
          "108:      organizations.put(\"WMO\", \"World Meteorological Organization\");",
          "109:      organizations.put(\"W3C\", \"World Wide Web Consortium\");",
          "110:      organizations.put(\"WSA\", \"Website Standards Association\");",
          "111:      organizations.put(\"WHO\", \"World Health Organization\");",
          "112:      organizations.put(\"XSF\", \"The XMPP Standards Foundation\");",
          "113:      organizations.put(\"FAO\", \"Food and Agriculture Organization\");",
          "116:      organizations.put(\"ARSO\", \"African Regional Organization for Standarization\");",
          "117:      organizations.put(\"SADCSTAN\", \"Southern African Development Community (SADC) Cooperation in Standarization\");",
          "119:      organizations.put(\"COPANT\", \"Pan American Standards Commission\");",
          "120:      organizations.put(\"AMN\", \"MERCOSUR Standardization Association\");",
          "121:      organizations.put(\"CROSQ\", \"CARICOM Regional Organization for Standards and Quality\");",
          "122:      organizations.put(\"AAQG\", \"America's Aerospace Quality Group\");",
          "124:      organizations.put(\"PASC\", \"Pacific Area Standards Congress\");",
          "125:      organizations.put(\"ACCSQ\", \"ASEAN Consultative Committee for Standards and Quality\");",
          "127:      organizations.put(\"RoyalCert\", \"RoyalCert International Registrars\");",
          "128:      organizations.put(\"CEN\", \"European Committee for Standardization\");",
          "129:      organizations.put(\"CENELEC\", \"European Committee for Electrotechnical Standardization\");",
          "130:      organizations.put(\"URS\", \"United Registrar of Systems, UK\");",
          "131:      organizations.put(\"ETSI\", \"European Telecommunications Standards Institute\");",
          "132:      organizations.put(\"EASC\", \"Euro-Asian Council for Standardization, Metrology and Certification\");",
          "133:      organizations.put(\"IRMM\", \"Institute for Reference Materials and Measurements (European Union)\");",
          "135:      organizations.put(\"AIDMO\", \"Arab Industrial Development and Mining Organization\");",
          "136:      organizations.put(\"IAU\", \"International Arabic Union\");",
          "139:      organizations.put(\"BSI\", \"British Standards Institution aka BSI Group\");",
          "140:      organizations.put(\"DStan\", \"UK Defence Standardization\");",
          "142:      organizations.put(\"ANSI\", \"American National Standards Institute\");",
          "143:      organizations.put(\"ACI\", \"American Concrete Institute\");",
          "144:      organizations.put(\"NIST\", \"National Institute of Standards and Technology\");",
          "145:  }",
          "152:  public static Map<String, String> getOrganizations() {",
          "153:   return organizations;",
          "154:  }",
          "161:  public static String getOrganzationsRegex() {",
          "162:   String regex = \"(\" + String.join(\"|\", organizations.keySet()) + \")\";",
          "164:   return regex;",
          "165:  }",
          "166: }",
          "",
          "---------------"
        ],
        "tika-core/src/main/java/org/apache/tika/sax/StandardReference.java||tika-core/src/main/java/org/apache/tika/sax/StandardReference.java": [
          "File: tika-core/src/main/java/org/apache/tika/sax/StandardReference.java -> tika-core/src/main/java/org/apache/tika/sax/StandardReference.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.tika.sax;",
          "24: public class StandardReference {",
          "25:  private String mainOrganization;",
          "26:  private String separator;",
          "27:  private String secondOrganization;",
          "28:  private String identifier;",
          "29:  private double score;",
          "31:  private StandardReference(String mainOrganizationAcronym, String separator, String secondOrganizationAcronym,",
          "32:    String identifier, double score) {",
          "33:   super();",
          "34:   this.mainOrganization = mainOrganizationAcronym;",
          "35:   this.separator = separator;",
          "36:   this.secondOrganization = secondOrganizationAcronym;",
          "37:   this.identifier = identifier;",
          "38:   this.score = score;",
          "39:  }",
          "41:  public String getMainOrganizationAcronym() {",
          "42:   return mainOrganization;",
          "43:  }",
          "45:  public void setMainOrganizationAcronym(String mainOrganizationAcronym) {",
          "46:   this.mainOrganization = mainOrganizationAcronym;",
          "47:  }",
          "49:  public String getSeparator() {",
          "50:   return separator;",
          "51:  }",
          "53:  public void setSeparator(String separator) {",
          "54:   this.separator = separator;",
          "55:  }",
          "57:  public String getSecondOrganizationAcronym() {",
          "58:   return secondOrganization;",
          "59:  }",
          "61:  public void setSecondOrganizationAcronym(String secondOrganizationAcronym) {",
          "62:   this.secondOrganization = secondOrganizationAcronym;",
          "63:  }",
          "65:  public String getIdentifier() {",
          "66:   return identifier;",
          "67:  }",
          "69:  public void setIdentifier(String identifier) {",
          "70:   this.identifier = identifier;",
          "71:  }",
          "73:  public double getScore() {",
          "74:   return score;",
          "75:  }",
          "77:  public void setScore(double score) {",
          "78:   this.score = score;",
          "79:  }",
          "81:  @Override",
          "82:  public String toString() {",
          "83:   String standardReference = mainOrganization;",
          "85:   if (separator != null && !separator.isEmpty()) {",
          "86:    standardReference += separator + secondOrganization;",
          "87:   }",
          "89:   standardReference += \" \" + identifier;",
          "91:   return standardReference;",
          "92:  }",
          "94:  public static class StandardReferenceBuilder {",
          "95:   private String mainOrganization;",
          "96:   private String separator;",
          "97:   private String secondOrganization;",
          "98:   private String identifier;",
          "99:   private double score;",
          "101:   public StandardReferenceBuilder(String mainOrganization, String identifier) {",
          "102:    this.mainOrganization = mainOrganization;",
          "103:    this.separator = null;",
          "104:    this.secondOrganization = null;",
          "105:    this.identifier = identifier;",
          "106:    this.score = 0;",
          "107:   }",
          "109:   public StandardReferenceBuilder setSecondOrganization(String separator, String secondOrganization) {",
          "110:    this.separator = separator;",
          "111:    this.secondOrganization = secondOrganization;",
          "112:    return this;",
          "113:   }",
          "115:   public StandardReferenceBuilder setScore(double score) {",
          "116:    this.score = score;",
          "117:    return this;",
          "118:   }",
          "120:   public StandardReference build() {",
          "121:    return new StandardReference(mainOrganization, separator, secondOrganization, identifier, score);",
          "122:   }",
          "123:  }",
          "124: }",
          "",
          "---------------"
        ],
        "tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java||tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java": [
          "File: tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java -> tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.tika.sax;",
          "20: import java.util.Arrays;",
          "21: import java.util.List;",
          "23: import org.apache.tika.metadata.Metadata;",
          "24: import org.xml.sax.ContentHandler;",
          "25: import org.xml.sax.SAXException;",
          "26: import org.xml.sax.helpers.DefaultHandler;",
          "33: public class StandardsExtractingContentHandler extends ContentHandlerDecorator {",
          "34:  public static final String STANDARD_REFERENCES = \"standard_references\";",
          "35:  private Metadata metadata;",
          "36:  private StringBuilder stringBuilder;",
          "37:  private double threshold = 0;",
          "47:  public StandardsExtractingContentHandler(ContentHandler handler, Metadata metadata) {",
          "48:   super(handler);",
          "49:   this.metadata = metadata;",
          "50:   this.stringBuilder = new StringBuilder();",
          "51:  }",
          "60:  protected StandardsExtractingContentHandler() {",
          "61:   this(new DefaultHandler(), new Metadata());",
          "62:  }",
          "71:  public double getThreshold() {",
          "72:   return threshold;",
          "73:  }",
          "81:  public void setThreshold(double score) {",
          "82:   this.threshold = score;",
          "83:  }",
          "92:  @Override",
          "93:  public void characters(char[] ch, int start, int length) throws SAXException {",
          "94:   try {",
          "95:    String text = new String(Arrays.copyOfRange(ch, start, start + length));",
          "96:    stringBuilder.append(text);",
          "97:    super.characters(ch, start, length);",
          "98:   } catch (SAXException e) {",
          "99:    handleException(e);",
          "100:   }",
          "101:  }",
          "107:  @Override",
          "108:  public void endDocument() throws SAXException {",
          "109:   super.endDocument();",
          "110:   List<StandardReference> standards = StandardsText.extractStandardReferences(stringBuilder.toString(),",
          "111:     threshold);",
          "112:   for (StandardReference standardReference : standards) {",
          "113:    metadata.add(STANDARD_REFERENCES, standardReference.toString());",
          "114:   }",
          "115:  }",
          "116: }",
          "",
          "---------------"
        ],
        "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java||tika-core/src/main/java/org/apache/tika/sax/StandardsText.java": [
          "File: tika-core/src/main/java/org/apache/tika/sax/StandardsText.java -> tika-core/src/main/java/org/apache/tika/sax/StandardsText.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.tika.sax;",
          "20: import java.util.ArrayList;",
          "21: import java.util.Iterator;",
          "22: import java.util.Map;",
          "23: import java.util.Map.Entry;",
          "24: import java.util.TreeMap;",
          "25: import java.util.regex.Matcher;",
          "26: import java.util.regex.Pattern;",
          "28: import org.apache.tika.sax.StandardReference.StandardReferenceBuilder;",
          "52: public class StandardsText {",
          "54:  private static final String REGEX_HEADER = \"(\\\\d+\\\\.(\\\\d+\\\\.?)*)\\\\p{Blank}+([A-Z]+(\\\\s[A-Z]+)*){5,}\";",
          "58:  private static final String REGEX_APPLICABLE_DOCUMENTS = \"(?i:.*APPLICABLE\\\\sDOCUMENTS|REFERENCE|STANDARD|REQUIREMENT|GUIDELINE|COMPLIANCE.*)\";",
          "61:  private static final String REGEX_IDENTIFIER = \"(?<identifier>([0-9]{3,}|([A-Z]+(-|_|\\\\.)?[0-9]{2,}))((-|_|\\\\.)?[A-Z0-9]+)*)\";",
          "64:  private static final String REGEX_ORGANIZATION = StandardOrganizations.getOrganzationsRegex();",
          "68:  private static final String REGEX_STANDARD_TYPE = \"(\\\\s(Publication|Standard))?\";",
          "72:  private static final String REGEX_FALLBACK = \"\\\\(?\" + \"(?<mainOrganization>[A-Z]\\\\w+)\"",
          "73:    + \"\\\\)?((\\\\s?(?<separator>\\\\/)\\\\s?)(\\\\w+\\\\s)*\\\\(?\" + \"(?<secondOrganization>[A-Z]\\\\w+)\" + \"\\\\)?)?\"",
          "74:    + REGEX_STANDARD_TYPE + \"(-|\\\\s)?\" + REGEX_IDENTIFIER;",
          "78:  private static final String REGEX_STANDARD = \".*\" + REGEX_ORGANIZATION + \".+\" + REGEX_ORGANIZATION + \"?.*\";",
          "93:  public static ArrayList<StandardReference> extractStandardReferences(String text, double threshold) {",
          "94:   Map<Integer, String> headers = findHeaders(text);",
          "96:   ArrayList<StandardReference> standardReferences = findStandards(text, headers, threshold);",
          "98:   return standardReferences;",
          "99:  }",
          "108:  private static Map<Integer, String> findHeaders(String text) {",
          "109:   Map<Integer, String> headers = new TreeMap<Integer, String>();",
          "111:   Pattern pattern = Pattern.compile(REGEX_HEADER);",
          "112:   Matcher matcher = pattern.matcher(text);",
          "114:   while (matcher.find()) {",
          "115:    headers.put(matcher.start(), matcher.group());",
          "116:   }",
          "118:   return headers;",
          "119:  }",
          "134:  private static ArrayList<StandardReference> findStandards(String text, Map<Integer, String> headers,",
          "135:    double threshold) {",
          "136:   ArrayList<StandardReference> standards = new ArrayList<StandardReference>();",
          "137:   double score = 0;",
          "139:   Pattern pattern = Pattern.compile(REGEX_FALLBACK);",
          "140:   Matcher matcher = pattern.matcher(text);",
          "142:   while (matcher.find()) {",
          "143:    StandardReferenceBuilder builder = new StandardReference.StandardReferenceBuilder(",
          "144:      matcher.group(\"mainOrganization\"), matcher.group(\"identifier\"))",
          "145:        .setSecondOrganization(matcher.group(\"separator\"), matcher.group(\"secondOrganization\"));",
          "146:    score = 0.25;",
          "148:    if (matcher.group().matches(REGEX_STANDARD)) {",
          "149:     score += 0.50;",
          "150:    }",
          "152:    int startHeader = 0;",
          "153:    int endHeader = 0;",
          "154:    boolean headerFound = false;",
          "155:    Iterator<Entry<Integer, String>> iterator = headers.entrySet().iterator();",
          "156:    while (iterator.hasNext() && !headerFound) {",
          "157:     startHeader = endHeader;",
          "158:     endHeader = iterator.next().getKey();",
          "159:     if (endHeader > matcher.start()) {",
          "160:      headerFound = true;",
          "161:     }",
          "162:    }",
          "164:    String header = headers.get(startHeader);",
          "165:    if (header != null && headers.get(startHeader).matches(REGEX_APPLICABLE_DOCUMENTS)) {",
          "166:     score += 0.25;",
          "167:    }",
          "169:    builder.setScore(score);",
          "171:    if (score >= threshold) {",
          "172:     standards.add(builder.build());",
          "173:    }",
          "174:   }",
          "176:   return standards;",
          "177:  }",
          "178: }",
          "",
          "---------------"
        ],
        "tika-example/src/main/java/org/apache/tika/example/StandardsExtractionExample.java||tika-example/src/main/java/org/apache/tika/example/StandardsExtractionExample.java": [
          "File: tika-example/src/main/java/org/apache/tika/example/StandardsExtractionExample.java -> tika-example/src/main/java/org/apache/tika/example/StandardsExtractionExample.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.tika.sax;",
          "20: import java.io.BufferedInputStream;",
          "21: import java.io.IOException;",
          "22: import java.io.InputStream;",
          "23: import java.nio.file.FileVisitResult;",
          "24: import java.nio.file.Files;",
          "25: import java.nio.file.Path;",
          "26: import java.nio.file.Paths;",
          "27: import java.nio.file.SimpleFileVisitor;",
          "28: import java.nio.file.attribute.BasicFileAttributes;",
          "29: import java.util.Collections;",
          "30: import java.util.HashSet;",
          "32: import org.apache.tika.metadata.Metadata;",
          "33: import org.apache.tika.parser.AutoDetectParser;",
          "34: import org.apache.tika.parser.ParseContext;",
          "35: import org.apache.tika.parser.Parser;",
          "49: public class StandardsExtractionExample {",
          "50:  private static HashSet<String> standardReferences = new HashSet<>();",
          "51:  private static int failedFiles = 0;",
          "52:  private static int successfulFiles = 0;",
          "54:  public static void main(String[] args) {",
          "55:   if (args.length < 1) {",
          "56:    System.err.println(\"Usage: \" + StandardsExtractionExample.class.getName() + \" /path/to/input\");",
          "57:    System.exit(1);",
          "58:   }",
          "59:   String pathname = args[0];",
          "61:   Path folder = Paths.get(pathname);",
          "62:   System.out.println(\"Searching \" + folder.toAbsolutePath() + \"...\");",
          "63:   processFolder(folder);",
          "64:   System.out.println(standardReferences.toString());",
          "65:   System.out.println(\"Parsed \" + successfulFiles + \"/\" + (successfulFiles + failedFiles));",
          "66:  }",
          "68:  public static void processFolder(Path folder) {",
          "69:   try {",
          "70:    Files.walkFileTree(folder, new SimpleFileVisitor<Path>() {",
          "71:     @Override",
          "72:     public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {",
          "73:      try {",
          "74:       process(file);",
          "75:       successfulFiles++;",
          "76:      } catch (Exception e) {",
          "77:       failedFiles++;",
          "79:      }",
          "80:      return FileVisitResult.CONTINUE;",
          "81:     }",
          "83:     @Override",
          "84:     public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {",
          "85:      failedFiles++;",
          "86:      return FileVisitResult.CONTINUE;",
          "87:     }",
          "88:    });",
          "89:   } catch (IOException e) {",
          "91:   }",
          "92:  }",
          "94:  public static void process(Path path) throws Exception {",
          "95:   Parser parser = new AutoDetectParser();",
          "96:   Metadata metadata = new Metadata();",
          "100:   StandardsExtractingContentHandler handler = new StandardsExtractingContentHandler(new BodyContentHandler(-1),",
          "101:     metadata);",
          "102:   handler.setThreshold(1.0);",
          "103:   try (InputStream stream = new BufferedInputStream(Files.newInputStream(path))) {",
          "104:    parser.parse(stream, handler, metadata, new ParseContext());",
          "105:   }",
          "106:   String[] references = metadata.getValues(StandardsExtractingContentHandler.STANDARD_REFERENCES);",
          "107:   Collections.addAll(standardReferences, references);",
          "108:  }",
          "109: }",
          "",
          "---------------"
        ],
        "tika-parsers/src/test/java/org/apache/tika/sax/StandardsExtractingContentHandlerTest.java||tika-parsers/src/test/java/org/apache/tika/sax/StandardsExtractingContentHandlerTest.java": [
          "File: tika-parsers/src/test/java/org/apache/tika/sax/StandardsExtractingContentHandlerTest.java -> tika-parsers/src/test/java/org/apache/tika/sax/StandardsExtractingContentHandlerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.tika.sax;",
          "20: import static org.junit.Assert.*;",
          "22: import java.io.InputStream;",
          "24: import org.apache.tika.metadata.Metadata;",
          "25: import org.apache.tika.parser.AutoDetectParser;",
          "26: import org.apache.tika.parser.ParseContext;",
          "27: import org.apache.tika.parser.Parser;",
          "28: import org.junit.Test;",
          "33: public class StandardsExtractingContentHandlerTest {",
          "35:  @Test",
          "36:  public void testExtractStandards() throws Exception {",
          "37:   Parser parser = new AutoDetectParser();",
          "38:   Metadata metadata = new Metadata();",
          "40:   StandardsExtractingContentHandler handler = new StandardsExtractingContentHandler(new BodyContentHandler(-1), metadata);",
          "41:   handler.setThreshold(0.75);",
          "42:   InputStream inputStream = StandardsExtractingContentHandlerTest.class.getResourceAsStream(\"/test-documents/testStandardsExtractor.pdf\");",
          "44:   parser.parse(inputStream, handler, metadata, new ParseContext());",
          "46:   String[] standardReferences = metadata.getValues(StandardsExtractingContentHandler.STANDARD_REFERENCES);",
          "47:   assertTrue(standardReferences[0].equals(\"ANSI/TIA 222-G\"));",
          "48:   assertTrue(standardReferences[1].equals(\"TIA/ANSI 222-G-1\"));",
          "49:  }",
          "50: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22f763a3f14f9a47e46212a74b2a5d4339de6ab5",
      "candidate_info": {
        "commit_hash": "22f763a3f14f9a47e46212a74b2a5d4339de6ab5",
        "repo": "apache/tika",
        "commit_url": "https://github.com/apache/tika/commit/22f763a3f14f9a47e46212a74b2a5d4339de6ab5",
        "files": [
          "tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java",
          "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java"
        ],
        "message": "TIKA-3781 -- add limits to buffer in StandardsExtractingContentHandler",
        "before_after_code_files": [
          "tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java||tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java",
          "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java||tika-core/src/main/java/org/apache/tika/sax/StandardsText.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java||tika-core/src/main/java/org/apache/tika/sax/StandardsText.java"
          ],
          "candidate": [
            "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java||tika-core/src/main/java/org/apache/tika/sax/StandardsText.java"
          ]
        }
      },
      "candidate_diff": {
        "tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java||tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java": [
          "File: tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java -> tika-core/src/main/java/org/apache/tika/sax/StandardsExtractingContentHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.util.Arrays;",
          "21: import java.util.List;",
          "24: import org.xml.sax.ContentHandler;",
          "25: import org.xml.sax.SAXException;",
          "26: import org.xml.sax.helpers.DefaultHandler;",
          "33: public class StandardsExtractingContentHandler extends ContentHandlerDecorator {",
          "34:  public static final String STANDARD_REFERENCES = \"standard_references\";",
          "37:  private double threshold = 0;",
          "47:  public StandardsExtractingContentHandler(ContentHandler handler, Metadata metadata) {",
          "48:   super(handler);",
          "",
          "[Removed Lines]",
          "23: import org.apache.tika.metadata.Metadata;",
          "35:  private Metadata metadata;",
          "36:  private StringBuilder stringBuilder;",
          "",
          "[Added Lines]",
          "27: import org.apache.tika.metadata.Metadata;",
          "38:  private final Metadata metadata;",
          "39:  private final StringBuilder stringBuilder;",
          "41:  private int maxBufferLength = 100000;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:  @Override",
          "93:  public void characters(char[] ch, int start, int length) throws SAXException {",
          "94:   try {",
          "95:    String text = new String(Arrays.copyOfRange(ch, start, start + length));",
          "96:    stringBuilder.append(text);",
          "97:    super.characters(ch, start, length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:    if (maxBufferLength > -1) {",
          "98:     int remaining = maxBufferLength - stringBuilder.length();",
          "99:     length = remaining > length ? length : remaining;",
          "100:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:  @Override",
          "108:  public void endDocument() throws SAXException {",
          "109:   super.endDocument();",
          "112:   for (StandardReference standardReference : standards) {",
          "113:    metadata.add(STANDARD_REFERENCES, standardReference.toString());",
          "114:   }",
          "115:  }",
          "",
          "[Removed Lines]",
          "110:   List<StandardReference> standards = StandardsText.extractStandardReferences(stringBuilder.toString(),",
          "111:     threshold);",
          "116: }",
          "",
          "[Added Lines]",
          "116:   List<StandardReference> standards =",
          "117:     StandardsText.extractStandardReferences(stringBuilder.toString(), threshold);",
          "131:   this.maxBufferLength = maxBufferLength;",
          "132:  }",
          "133: }",
          "",
          "---------------"
        ],
        "tika-core/src/main/java/org/apache/tika/sax/StandardsText.java||tika-core/src/main/java/org/apache/tika/sax/StandardsText.java": [
          "File: tika-core/src/main/java/org/apache/tika/sax/StandardsText.java -> tika-core/src/main/java/org/apache/tika/sax/StandardsText.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: public class StandardsText {",
          "55:  private static final String REGEX_HEADER =",
          "67:  private static final String REGEX_ORGANIZATION = StandardOrganizations.getOrganzationsRegex();",
          "",
          "[Removed Lines]",
          "56:    \"(\\\\d{1,10}\\\\.(\\\\d{1,10}\\\\.?){0,10})\\\\p{Blank}+([A-Z]{1,256}(\\\\s[A-Z]+){0,256}){5,}\";",
          "60:  private static final String REGEX_APPLICABLE_DOCUMENTS = \"(?i:.*APPLICABLE\\\\sDOCUMENTS|REFERENCE|STANDARD|REQUIREMENT|GUIDELINE|COMPLIANCE.*)\";",
          "63:  private static final String REGEX_IDENTIFIER = \"(?<identifier>([0-9]{3,20}|([A-Z]+(-|_|\\\\.)\" +",
          "64:    \"?[0-9]{2,20}))((-|_|\\\\.)?[A-Z0-9]+){0,10})\";",
          "",
          "[Added Lines]",
          "56:    \"(\\\\d{1,10}+\\\\.(\\\\d{1,10}+\\\\.?){0,10}+)\\\\p{Blank}+([A-Z]{1,64}+(\\\\s[A-Z]{1,64}+){0,\" +",
          "57:      \"256}+){5,10}+\";",
          "61:  private static final String REGEX_APPLICABLE_DOCUMENTS =",
          "62:    \"(?i:.*APPLICABLE\\\\sDOCUMENTS|REFERENCE|STANDARD|REQUIREMENT|GUIDELINE|COMPLIANCE.*)\";",
          "65:  private static final String REGEX_IDENTIFIER =",
          "66:    \"(?<identifier>([0-9]{3,64}+|([A-Z]{1,64}+(-|_|\\\\.)?[0-9]{2,64}+))((-|_|\\\\.)\" +",
          "67:      \"?[A-Z0-9]{1,64}+){0,64}+)\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:   Map<Integer, String> headers = findHeaders(text);",
          "103:  }",
          "112:  private static Map<Integer, String> findHeaders(String text) {",
          "115:   Pattern pattern = Pattern.compile(REGEX_HEADER);",
          "116:   Matcher matcher = pattern.matcher(text);",
          "",
          "[Removed Lines]",
          "75:  private static final String REGEX_FALLBACK = \"\\\\(?\" + \"(?<mainOrganization>[A-Z]\\\\w{1,100})\"",
          "76:    + \"\\\\)?((\\\\s?(?<separator>\\\\/)\\\\s?)(\\\\w{1,100}\\\\s)*\\\\(?\" + \"(?<secondOrganization>[A\" +",
          "77:    \"-Z]\\\\w{1,100})\" + \"\\\\)?)?\"",
          "78:    + REGEX_STANDARD_TYPE + \"?\" + \"(-|\\\\s)?\" + REGEX_IDENTIFIER;",
          "82:  private static final String REGEX_STANDARD = \".*\" + REGEX_ORGANIZATION + \".+\" + REGEX_ORGANIZATION + \"?.*\";",
          "97:  public static ArrayList<StandardReference> extractStandardReferences(String text, double threshold) {",
          "100:   ArrayList<StandardReference> standardReferences = findStandards(text, headers, threshold);",
          "102:   return standardReferences;",
          "113:   Map<Integer, String> headers = new TreeMap<Integer, String>();",
          "",
          "[Added Lines]",
          "78:  private static final String REGEX_FALLBACK = \"\\\\(?\" + \"(?<mainOrganization>[A-Z]\\\\w{1,64}+)\" +",
          "79:    \"\\\\)?((\\\\s?(?<separator>\\\\/)\\\\s?)(\\\\w{1,64}+\\\\s)*\\\\(?\" + \"(?<secondOrganization>[A-Z\" +",
          "80:    \"]\\\\w{1,64}+)\" +",
          "81:    \"\\\\)?)?\" + REGEX_STANDARD_TYPE + \"?\" + \"(-|\\\\s)?\" + REGEX_IDENTIFIER;",
          "85:  private static final String REGEX_STANDARD =",
          "86:    \".*\" + REGEX_ORGANIZATION + \".+\" + REGEX_ORGANIZATION + \"?.*\";",
          "99:  public static ArrayList<StandardReference> extractStandardReferences(String text,",
          "100:                    double threshold) {",
          "103:   return findStandards(text, headers, threshold);",
          "113:   Map<Integer, String> headers = new TreeMap<>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:   double score = 0;",
          "143:   Pattern pattern = Pattern.compile(REGEX_FALLBACK);",
          "",
          "[Removed Lines]",
          "138:  private static ArrayList<StandardReference> findStandards(String text, Map<Integer, String> headers,",
          "139:    double threshold) {",
          "140:   ArrayList<StandardReference> standards = new ArrayList<StandardReference>();",
          "",
          "[Added Lines]",
          "135:  private static ArrayList<StandardReference> findStandards(String text,",
          "136:                  Map<Integer, String> headers,",
          "137:                  double threshold) {",
          "138:   ArrayList<StandardReference> standards = new ArrayList<>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:   while (matcher.find()) {",
          "147:    StandardReferenceBuilder builder = new StandardReference.StandardReferenceBuilder(",
          "148:      matcher.group(\"mainOrganization\"), matcher.group(\"identifier\"))",
          "150:    score = 0.25;",
          "153:    if (matcher.group().matches(REGEX_STANDARD)) {",
          "154:     score += 0.25;",
          "155:    }",
          "158:    if (matcher.group().matches(\".*\" + REGEX_STANDARD_TYPE + \".*\")) {",
          "159:     score += 0.25;",
          "160:    }",
          "",
          "[Removed Lines]",
          "149:        .setSecondOrganization(matcher.group(\"separator\"), matcher.group(\"secondOrganization\"));",
          "",
          "[Added Lines]",
          "147:      .setSecondOrganization(matcher.group(\"separator\"),",
          "148:        matcher.group(\"secondOrganization\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "188:   return standards;",
          "189:  }",
          "",
          "[Removed Lines]",
          "190: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}