{
  "cve_id": "CVE-2024-24565",
  "cve_desc": "CrateDB is a distributed SQL database that makes it simple to store and analyze massive amounts of data in real-time. There is a COPY FROM function in the CrateDB database that is used to import file data into database tables. This function has a flaw, and authenticated attackers can use the COPY FROM function to import arbitrary file content into database tables, resulting in information leakage. This vulnerability is patched in 5.3.9, 5.4.8, 5.5.4, and 5.6.1.",
  "repo": "crate/crate",
  "patch_hash": "4e857d675683095945dd524d6ba03e692c70ecd6",
  "patch_info": {
    "commit_hash": "4e857d675683095945dd524d6ba03e692c70ecd6",
    "repo": "crate/crate",
    "commit_url": "https://github.com/crate/crate/commit/4e857d675683095945dd524d6ba03e692c70ecd6",
    "files": [
      "docs/appendices/release-notes/5.5.4.rst",
      "docs/appendices/release-notes/5.6.1.rst",
      "docs/sql/statements/copy-from.rst",
      "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
    ],
    "message": "Restrict `COPY FROM` using local files to superuser\n\nFixing a security issue where any user could read/import content\nof any file on the host system, the CrateDB process user has read\naccess to.",
    "before_after_code_files": [
      "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
    ]
  },
  "patch_diff": {
    "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
      "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:     private FileReadingIterator createBatchIterator(S3ObjectInputStream inputStream, String ... fileUris) {",
      "107:         String compression = null;",
      "108:         return new FileReadingIterator(",
      "110:             compression,",
      "111:             Map.of(",
      "112:                 S3FileInputFactory.NAME,",
      "",
      "[Removed Lines]",
      "109:             Arrays.asList(fileUris),",
      "",
      "[Added Lines]",
      "109:             Arrays.stream(fileUris).map(FileReadingIterator::toURI).toList(),",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java": [
      "File: server/src/main/java/io/crate/exceptions/UnauthorizedException.java -> server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: package io.crate.exceptions;",
      "26:     public UnauthorizedException(String message) {",
      "27:         super(message);",
      "28:     }",
      "30: }",
      "",
      "[Removed Lines]",
      "24: public class UnauthorizedException extends RuntimeException implements UnscopedException {",
      "",
      "[Added Lines]",
      "24: import java.io.IOException;",
      "26: import org.elasticsearch.ElasticsearchException;",
      "27: import org.elasticsearch.common.io.stream.StreamInput;",
      "29: public class UnauthorizedException extends ElasticsearchException implements UnscopedException {",
      "35:     public UnauthorizedException(StreamInput in) throws IOException {",
      "36:         super(in);",
      "37:     }",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java": [
      "File: server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java -> server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "175:         }",
      "176:     }",
      "179:                                String compression,",
      "180:                                Map<String, FileInputFactory> fileInputFactories,",
      "181:                                Boolean shared,",
      "",
      "[Removed Lines]",
      "178:     public FileReadingIterator(Collection<String> fileUris,",
      "",
      "[Added Lines]",
      "178:     public FileReadingIterator(Collection<URI> fileUris,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "398:     }",
      "400:     @Nullable",
      "403:         FileInputFactory fileInputFactory = fileInputFactories.get(uri.getScheme());",
      "404:         if (fileInputFactory != null) {",
      "405:             try {",
      "",
      "[Removed Lines]",
      "401:     private FileInput toFileInput(String fileUri, Settings withClauseOptions) {",
      "402:         URI uri = toURI(fileUri);",
      "",
      "[Added Lines]",
      "401:     private FileInput toFileInput(URI uri, Settings withClauseOptions) {",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java": [
      "File: server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java -> server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: package io.crate.execution.engine.collect.sources;",
      "24: import java.util.Arrays;",
      "25: import java.util.Collection;",
      "26: import java.util.Collections;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import static java.util.Objects.requireNonNull;",
      "26: import java.net.URI;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40: import io.crate.data.BatchIterator;",
      "41: import io.crate.data.Row;",
      "42: import io.crate.data.SkippingBatchIterator;",
      "43: import io.crate.execution.dsl.phases.CollectPhase;",
      "44: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
      "45: import io.crate.execution.engine.collect.CollectTask;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46: import io.crate.exceptions.UnauthorizedException;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53: import io.crate.metadata.NodeContext;",
      "54: import io.crate.metadata.TransactionContext;",
      "55: import io.crate.planner.operators.SubQueryResults;",
      "56: import io.crate.types.DataTypes;",
      "58: @Singleton",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60: import io.crate.role.Role;",
      "61: import io.crate.role.Roles;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "63:     private final InputFactory inputFactory;",
      "64:     private final NodeContext nodeCtx;",
      "65:     private final ThreadPool threadPool;",
      "67:     @Inject",
      "68:     public FileCollectSource(NodeContext nodeCtx,",
      "69:                              ClusterService clusterService,",
      "70:                              Map<String, FileInputFactory> fileInputFactoryMap,",
      "72:         this.fileInputFactoryMap = fileInputFactoryMap;",
      "73:         this.nodeCtx = nodeCtx;",
      "74:         this.inputFactory = new InputFactory(nodeCtx);",
      "75:         this.clusterService = clusterService;",
      "76:         this.threadPool = threadPool;",
      "77:     }",
      "79:     @Override",
      "",
      "[Removed Lines]",
      "71:                              ThreadPool threadPool) {",
      "",
      "[Added Lines]",
      "72:     private final Roles roles;",
      "78:                              ThreadPool threadPool,",
      "79:                              Roles roles) {",
      "85:         this.roles = roles;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "86:             inputFactory.ctxForRefs(txnCtx, FileLineReferenceResolver::getImplementation);",
      "87:         ctx.add(collectPhase.toCollect());",
      "90:         FileReadingIterator fileReadingIterator = new FileReadingIterator(",
      "91:             fileUris,",
      "92:             fileUriCollectPhase.compression(),",
      "",
      "[Removed Lines]",
      "89:         List<String> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri());",
      "",
      "[Added Lines]",
      "98:         Role user = requireNonNull(roles.findUser(txnCtx.sessionSettings().userName()), \"User who invoked a statement must exist\");",
      "99:         List<URI> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri()).stream()",
      "100:             .map(s -> {",
      "101:                 var uri = FileReadingIterator.toURI(s);",
      "102:                 if (uri.getScheme().equals(\"file\") && user.isSuperUser() == false) {",
      "103:                     throw new UnauthorizedException(\"Only a superuser can read from the local file system\");",
      "104:                 }",
      "105:                 return uri;",
      "106:             })",
      "107:             .toList();",
      "",
      "---------------"
    ],
    "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
      "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "973:             io.crate.exceptions.OperationOnInaccessibleRelationException.class,",
      "974:             io.crate.exceptions.OperationOnInaccessibleRelationException::new,",
      "975:             176,",
      "978:         final Class<? extends ElasticsearchException> exceptionClass;",
      "979:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
      "",
      "[Removed Lines]",
      "976:             Version.V_5_6_0);",
      "",
      "[Added Lines]",
      "976:             Version.V_5_6_0),",
      "977:         UNAUTHORIZED_EXCEPTION(",
      "978:             io.crate.exceptions.UnauthorizedException.class,",
      "979:             io.crate.exceptions.UnauthorizedException::new,",
      "980:             177,",
      "981:             Version.V_5_7_0);",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java -> server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: import io.crate.expression.symbol.Literal;",
      "55: import io.crate.metadata.ColumnIdent;",
      "56: import io.crate.metadata.CoordinatorTxnCtx;",
      "57: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
      "58: import io.crate.types.DataTypes;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: import io.crate.role.Role;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69:             createNodeContext(),",
      "70:             clusterService,",
      "71:             Collections.emptyMap(),",
      "73:             );",
      "75:         File tmpFile = temporaryFolder.newFile(\"fileUriCollectOperation.json\");",
      "",
      "[Removed Lines]",
      "72:             THREAD_POOL",
      "",
      "[Added Lines]",
      "73:             THREAD_POOL,",
      "74:             () -> List.of(Role.CRATE_USER)",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "201:     private static FileReadingIterator it(Collection<String> fileUris, String compression) {",
      "202:         return new FileReadingIterator(",
      "204:             compression,",
      "205:             Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
      "206:             false,",
      "",
      "[Removed Lines]",
      "203:             fileUris,",
      "",
      "[Added Lines]",
      "203:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: import java.io.InputStream;",
      "35: import java.io.InputStreamReader;",
      "36: import java.net.SocketTimeoutException;",
      "37: import java.nio.charset.StandardCharsets;",
      "38: import java.nio.file.Files;",
      "39: import java.nio.file.Path;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: import java.net.URI;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43: import java.util.concurrent.ScheduledExecutorService;",
      "44: import java.util.concurrent.TimeUnit;",
      "45: import java.util.function.Supplier;",
      "47: import org.elasticsearch.common.settings.Settings;",
      "48: import org.elasticsearch.test.ESTestCase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: import java.util.stream.Stream;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
      "88:         List<String> lines2 = List.of(\"name,id,age\", \"Trillian,5,33\");",
      "89:         Files.write(tempFile2, lines2);",
      "92:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
      "93:             () -> new FileReadingIterator(",
      "",
      "[Removed Lines]",
      "90:         List<String> fileUris = List.of(tempFile1.toUri().toString(), tempFile2.toUri().toString());",
      "",
      "[Added Lines]",
      "92:         List<URI> fileUris = Stream.of(tempFile1.toUri().toString(), tempFile2.toUri().toString())",
      "93:             .map(FileReadingIterator::toURI)",
      "94:             .toList();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "139:         Path tempFile = createTempFile(\"tempfile1\", \".csv\");",
      "140:         List<String> lines = List.of(\"id\", \"1\", \"2\", \"3\", \"4\", \"5\");",
      "141:         Files.write(tempFile, lines);",
      "144:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
      "145:             () -> new FileReadingIterator(",
      "",
      "[Removed Lines]",
      "142:         List<String> fileUris = List.of(tempFile.toUri().toString());",
      "",
      "[Added Lines]",
      "146:         List<URI> fileUris = Stream.of(tempFile.toUri().toString())",
      "147:             .map(FileReadingIterator::toURI).toList();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "213:         Files.write(tempFile, List.of(\"1\", \"2\", \"3\"));",
      "214:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
      "215:         Files.write(tempFile2, List.of(\"4\", \"5\", \"6\"));",
      "218:         var fi = new FileReadingIterator(",
      "219:             fileUris,",
      "",
      "[Removed Lines]",
      "216:         List<String> fileUris = List.of(tempFile.toUri().toString(), tempFile2.toUri().toString());",
      "",
      "[Added Lines]",
      "221:         List<URI> fileUris = Stream.of(tempFile.toUri().toString(), tempFile2.toUri().toString())",
      "222:             .map(FileReadingIterator::toURI).toList();",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java -> server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "92:             new NodeContext(new Functions(Map.of()), roles),",
      "93:             clusterService,",
      "94:             Map.of(),",
      "96:         );",
      "98:         CompletableFuture<BatchIterator<Row>> iterator = fileCollectSource.getIterator(",
      "",
      "[Removed Lines]",
      "95:             THREAD_POOL",
      "",
      "[Added Lines]",
      "95:             THREAD_POOL,",
      "96:             () -> List.of(Role.CRATE_USER)",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
      "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import static io.crate.testing.Asserts.assertThat;",
      "27: import static io.crate.testing.TestingHelpers.printedTable;",
      "28: import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;",
      "30: import java.io.File;",
      "31: import java.io.FileOutputStream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54: import com.carrotsearch.randomizedtesting.LifecycleScope;",
      "56: import io.crate.testing.Asserts;",
      "57: import io.crate.testing.SQLResponse;",
      "58: import io.crate.testing.UseJdbc;",
      "59: import io.crate.testing.UseNewCluster;",
      "61: @IntegTestCase.ClusterScope(numDataNodes = 2)",
      "62: public class CopyIntegrationTest extends SQLHttpIntegrationTest {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: import io.crate.action.sql.Sessions;",
      "58: import io.crate.exceptions.UnauthorizedException;",
      "59: import io.crate.role.Role;",
      "60: import io.crate.role.Roles;",
      "65: import io.crate.testing.UseRandomizedSchema;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1196:             \"2| 31123| apple safari| 23073\"",
      "1197:         );",
      "1198:     }",
      "1199: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1206:     @UseRandomizedSchema(random = false)",
      "1207:     @Test",
      "1208:     public void test_copy_from_local_file_is_only_allowed_for_superusers() {",
      "1209:         execute(\"CREATE TABLE quotes (id INT PRIMARY KEY, \" +",
      "1210:             \"quote STRING INDEX USING FULLTEXT) WITH (number_of_replicas = 0)\");",
      "1211:         execute(\"CREATE USER test_user\");",
      "1212:         execute(\"GRANT ALL TO test_user\");",
      "1214:         var roles = cluster().getInstance(Roles.class);",
      "1215:         Role user = roles.findUser(\"test_user\");",
      "1216:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
      "1217:         try (var session = sqlOperations.newSession(null, user)) {",
      "1218:             assertThatThrownBy(() -> execute(\"COPY quotes FROM ?\", new Object[]{copyFilePath + \"test_copy_from.json\"}, session))",
      "1219:                 .isExactlyInstanceOf(UnauthorizedException.class)",
      "1220:                 .hasMessage(\"Only a superuser can read from the local file system\");",
      "1221:         }",
      "1222:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "32d0fc2ebb834ea324eb7ab5d01320a67bc5c3c7",
      "candidate_info": {
        "commit_hash": "32d0fc2ebb834ea324eb7ab5d01320a67bc5c3c7",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/32d0fc2ebb834ea324eb7ab5d01320a67bc5c3c7",
        "files": [
          "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "docs/appendices/release-notes/5.4.8.rst",
          "docs/sql/statements/copy-from.rst",
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
        ],
        "message": "Restrict `COPY FROM` using local files to superuser\n\nFixing a security issue where any user could read/import content\nof any file on the host system, the CrateDB process user has read\naccess to.\n\n(cherry picked from commit 4e857d675683095945dd524d6ba03e692c70ecd6)",
        "before_after_code_files": [
          "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
            "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ],
          "candidate": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
            "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java": [
          "File: benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java -> benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "143:         BatchIterator<Row> batchIterator = FileReadingIterator.newInstance(",
          "145:             inputs,",
          "146:             ctx.expressions(),",
          "147:             null,",
          "",
          "[Removed Lines]",
          "144:             Collections.singletonList(fileUri),",
          "",
          "[Added Lines]",
          "144:             List.of(FileReadingIterator.toURI(fileUri)),",
          "",
          "---------------"
        ],
        "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java": [
          "File: benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java -> benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "143:         BatchIterator<Row> batchIterator = FileReadingIterator.newInstance(",
          "145:             inputs,",
          "146:             ctx.expressions(),",
          "147:             null,",
          "",
          "[Removed Lines]",
          "144:             Collections.singletonList(fileUri),",
          "",
          "[Added Lines]",
          "144:             List.of(FileReadingIterator.toURI(fileUri)),",
          "",
          "---------------"
        ],
        "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
          "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:             inputs.add(sourceUriFailureInput);",
          "218:         }",
          "219:         return FileReadingIterator.newInstance(",
          "221:             inputs,",
          "222:             ctx.expressions(),",
          "223:             compression,",
          "",
          "[Removed Lines]",
          "220:             fileUris,",
          "",
          "[Added Lines]",
          "220:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java": [
          "File: server/src/main/java/io/crate/exceptions/UnauthorizedException.java -> server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.exceptions;",
          "26:     public UnauthorizedException(String message) {",
          "27:         super(message);",
          "28:     }",
          "30: }",
          "",
          "[Removed Lines]",
          "24: public class UnauthorizedException extends RuntimeException implements UnscopedException {",
          "",
          "[Added Lines]",
          "24: import java.io.IOException;",
          "26: import org.elasticsearch.ElasticsearchException;",
          "27: import org.elasticsearch.common.io.stream.StreamInput;",
          "29: public class UnauthorizedException extends ElasticsearchException implements UnscopedException {",
          "35:     public UnauthorizedException(StreamInput in) throws IOException {",
          "36:         super(in);",
          "37:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java -> server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     @VisibleForTesting",
          "68:     static final int MAX_SOCKET_TIMEOUT_RETRIES = 5;",
          "71:                                                  List<Input<?>> inputs,",
          "72:                                                  Iterable<LineCollectorExpression<?>> collectorExpressions,",
          "73:                                                  String compression,",
          "",
          "[Removed Lines]",
          "70:     public static BatchIterator<Row> newInstance(Collection<String> fileUris,",
          "",
          "[Added Lines]",
          "70:     public static BatchIterator<Row> newInstance(Collection<URI> fileUris,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:     private final Iterator<TimeValue> backOffPolicy;",
          "127:     @VisibleForTesting",
          "129:                         List<? extends Input<?>> inputs,",
          "130:                         Iterable<LineCollectorExpression<?>> collectorExpressions,",
          "131:                         String compression,",
          "",
          "[Removed Lines]",
          "128:     FileReadingIterator(Collection<String> fileUris,",
          "",
          "[Added Lines]",
          "128:     FileReadingIterator(Collection<URI> fileUris,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "360:     }",
          "362:     @Nullable",
          "365:         FileInputFactory fileInputFactory = fileInputFactories.get(uri.getScheme());",
          "366:         if (fileInputFactory != null) {",
          "367:             try {",
          "",
          "[Removed Lines]",
          "363:     private FileInput toFileInput(String fileUri, Settings withClauseOptions) {",
          "364:         URI uri = toURI(fileUri);",
          "",
          "[Added Lines]",
          "363:     private FileInput toFileInput(URI uri, Settings withClauseOptions) {",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java -> server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.execution.engine.collect.sources;",
          "24: import io.crate.analyze.AnalyzedCopyFrom;",
          "25: import io.crate.analyze.SymbolEvaluator;",
          "26: import io.crate.common.annotations.VisibleForTesting;",
          "27: import io.crate.data.BatchIterator;",
          "28: import io.crate.data.Row;",
          "29: import io.crate.execution.dsl.phases.CollectPhase;",
          "30: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
          "31: import io.crate.execution.engine.collect.CollectTask;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import static java.util.Objects.requireNonNull;",
          "26: import java.net.URI;",
          "27: import java.util.Arrays;",
          "28: import java.util.Collection;",
          "29: import java.util.Collections;",
          "30: import java.util.List;",
          "31: import java.util.Map;",
          "32: import java.util.concurrent.CompletableFuture;",
          "34: import org.elasticsearch.cluster.service.ClusterService;",
          "35: import org.elasticsearch.common.inject.Inject;",
          "36: import org.elasticsearch.common.inject.Singleton;",
          "37: import org.elasticsearch.threadpool.ThreadPool;",
          "44: import io.crate.exceptions.UnauthorizedException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import io.crate.planner.operators.SubQueryResults;",
          "41: import io.crate.types.ArrayType;",
          "42: import io.crate.types.DataTypes;",
          "55: @Singleton",
          "56: public class FileCollectSource implements CollectSource {",
          "",
          "[Removed Lines]",
          "43: import org.elasticsearch.cluster.service.ClusterService;",
          "44: import org.elasticsearch.common.inject.Inject;",
          "45: import org.elasticsearch.common.inject.Singleton;",
          "46: import org.elasticsearch.threadpool.ThreadPool;",
          "48: import java.util.Arrays;",
          "49: import java.util.Collection;",
          "50: import java.util.Collections;",
          "51: import java.util.List;",
          "52: import java.util.Map;",
          "53: import java.util.concurrent.CompletableFuture;",
          "",
          "[Added Lines]",
          "59: import io.crate.user.UserLookup;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:     private final InputFactory inputFactory;",
          "61:     private final NodeContext nodeCtx;",
          "62:     private final ThreadPool threadPool;",
          "64:     @Inject",
          "65:     public FileCollectSource(NodeContext nodeCtx,",
          "66:                              ClusterService clusterService,",
          "67:                              Map<String, FileInputFactory> fileInputFactoryMap,",
          "69:         this.fileInputFactoryMap = fileInputFactoryMap;",
          "70:         this.nodeCtx = nodeCtx;",
          "71:         this.inputFactory = new InputFactory(nodeCtx);",
          "72:         this.clusterService = clusterService;",
          "73:         this.threadPool = threadPool;",
          "74:     }",
          "76:     @Override",
          "",
          "[Removed Lines]",
          "68:                              ThreadPool threadPool) {",
          "",
          "[Added Lines]",
          "69:     private final UserLookup userLookup;",
          "75:                              ThreadPool threadPool,",
          "76:                              UserLookup userLookup) {",
          "82:         this.userLookup = userLookup;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:             inputFactory.ctxForRefs(txnCtx, FileLineReferenceResolver::getImplementation);",
          "84:         ctx.add(collectPhase.toCollect());",
          "87:         return CompletableFuture.completedFuture(",
          "88:             FileReadingIterator.newInstance(",
          "89:                 fileUris,",
          "",
          "[Removed Lines]",
          "86:         List<String> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri());",
          "",
          "[Added Lines]",
          "95:         var user = requireNonNull(userLookup.findUser(txnCtx.sessionSettings().userName()), \"User who invoked a statement must exist\");",
          "96:         List<URI> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri()).stream()",
          "97:             .map(s -> {",
          "98:                 var uri = FileReadingIterator.toURI(s);",
          "99:                 if (uri.getScheme().equals(\"file\") && user.isSuperUser() == false) {",
          "100:                     throw new UnauthorizedException(\"Only a superuser can read from the local file system\");",
          "101:                 }",
          "102:                 return uri;",
          "103:             })",
          "104:             .toList();",
          "",
          "---------------"
        ],
        "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
          "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "969:             org.elasticsearch.cluster.coordination.NodeHealthCheckFailureException.class,",
          "970:             org.elasticsearch.cluster.coordination.NodeHealthCheckFailureException::new,",
          "971:             175,",
          "974:         final Class<? extends ElasticsearchException> exceptionClass;",
          "975:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
          "",
          "[Removed Lines]",
          "972:             Version.V_5_2_0);",
          "",
          "[Added Lines]",
          "972:             Version.V_5_2_0),",
          "973:         UNAUTHORIZED_EXCEPTION(",
          "974:             io.crate.exceptions.UnauthorizedException.class,",
          "975:             io.crate.exceptions.UnauthorizedException::new,",
          "976:             177,",
          "977:             Version.V_5_4_8);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java -> server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import io.crate.metadata.CoordinatorTxnCtx;",
          "57: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
          "58: import io.crate.types.DataTypes;",
          "61: public class MapSideDataCollectOperationTest extends CrateDummyClusterServiceUnitTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import io.crate.user.User;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:             createNodeContext(),",
          "70:             clusterService,",
          "71:             Collections.emptyMap(),",
          "73:             );",
          "75:         File tmpFile = temporaryFolder.newFile(\"fileUriCollectOperation.json\");",
          "",
          "[Removed Lines]",
          "72:             THREAD_POOL",
          "",
          "[Added Lines]",
          "73:             THREAD_POOL,",
          "74:             () -> List.of(User.CRATE_USER)",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:             inputs.add(sourceUriFailureInput);",
          "244:         }",
          "245:         return FileReadingIterator.newInstance(",
          "247:             inputs,",
          "248:             ctx.expressions(),",
          "249:             compression,",
          "",
          "[Removed Lines]",
          "246:             fileUris,",
          "",
          "[Added Lines]",
          "246:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:         Supplier<BatchIterator<Row>> batchIteratorSupplier =",
          "198:             () -> new FileReadingIterator(",
          "200:                 inputs,",
          "201:                 ctx.expressions(),",
          "202:                 null,",
          "",
          "[Removed Lines]",
          "199:                 fileUris,",
          "",
          "[Added Lines]",
          "199:                 fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256:         Supplier<BatchIterator<Row>> batchIteratorSupplier =",
          "257:             () -> new FileReadingIterator(",
          "259:                 inputs,",
          "260:                 ctx.expressions(),",
          "261:                 null,",
          "",
          "[Removed Lines]",
          "258:                 fileUris,",
          "",
          "[Added Lines]",
          "258:                 fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:         Supplier<BatchIterator<Row>> batchIteratorSupplier =",
          "319:             () -> new FileReadingIterator(",
          "321:                 inputs,",
          "322:                 ctx.expressions(),",
          "323:                 null,",
          "",
          "[Removed Lines]",
          "320:                 fileUris,",
          "",
          "[Added Lines]",
          "320:                 fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "411:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "413:         var fi = new FileReadingIterator(",
          "415:             inputs,",
          "416:             ctx.expressions(),",
          "417:             null,",
          "",
          "[Removed Lines]",
          "414:             fileUris,",
          "",
          "[Added Lines]",
          "414:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "478:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "479:         return FileReadingIterator.newInstance(",
          "481:             inputs,",
          "482:             ctx.expressions(),",
          "483:             null,",
          "",
          "[Removed Lines]",
          "480:             fileUris,",
          "",
          "[Added Lines]",
          "480:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import static io.crate.testing.Asserts.assertThat;",
          "27: import static io.crate.testing.TestingHelpers.printedTable;",
          "28: import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;",
          "29: import static org.hamcrest.Matchers.both;",
          "30: import static org.hamcrest.Matchers.contains;",
          "31: import static org.hamcrest.Matchers.containsString;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: import com.carrotsearch.randomizedtesting.LifecycleScope;",
          "70: import io.crate.testing.Asserts;",
          "71: import io.crate.testing.SQLResponse;",
          "72: import io.crate.testing.UseJdbc;",
          "74: @IntegTestCase.ClusterScope(numDataNodes = 2)",
          "75: public class CopyIntegrationTest extends SQLHttpIntegrationTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: import io.crate.action.sql.Sessions;",
          "72: import io.crate.exceptions.UnauthorizedException;",
          "76: import io.crate.testing.UseRandomizedSchema;",
          "77: import io.crate.user.UserLookup;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1217:             assertThat(response.rows()[0][1]).isEqualTo(created);",
          "1218:         }",
          "1219:     }",
          "1220: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1226:     @UseRandomizedSchema(random = false)",
          "1227:     @Test",
          "1228:     public void test_copy_from_local_file_is_only_allowed_for_superusers() {",
          "1229:         execute(\"CREATE TABLE quotes (id INT PRIMARY KEY, \" +",
          "1230:                 \"quote STRING INDEX USING FULLTEXT) WITH (number_of_replicas = 0)\");",
          "1231:         execute(\"CREATE USER test_user\");",
          "1232:         execute(\"GRANT ALL TO test_user\");",
          "1234:         var roles = cluster().getInstance(UserLookup.class);",
          "1235:         var user = roles.findUser(\"test_user\");",
          "1236:         var sqlOperations = cluster().getInstance(Sessions.class);",
          "1237:         try (var session = sqlOperations.createSession(null, user)) {",
          "1238:             assertThatThrownBy(() -> execute(\"COPY quotes FROM ?\", new Object[]{copyFilePath + \"test_copy_from.json\"}, session))",
          "1239:                 .isExactlyInstanceOf(UnauthorizedException.class)",
          "1240:                 .hasMessage(\"Only a superuser can read from the local file system\");",
          "1241:         }",
          "1242:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5034323f1b56ca5d04b8ef4c6029eb63a5ba172",
      "candidate_info": {
        "commit_hash": "c5034323f1b56ca5d04b8ef4c6029eb63a5ba172",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/c5034323f1b56ca5d04b8ef4c6029eb63a5ba172",
        "files": [
          "docs/appendices/release-notes/5.5.4.rst",
          "docs/appendices/release-notes/5.6.1.rst",
          "docs/sql/statements/copy-from.rst",
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
        ],
        "message": "Restrict `COPY FROM` using local files to superuser\n\nFixing a security issue where any user could read/import content\nof any file on the host system, the CrateDB process user has read\naccess to.\n\n(cherry picked from commit 4e857d675683095945dd524d6ba03e692c70ecd6)",
        "before_after_code_files": [
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
            "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ],
          "candidate": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
            "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
          "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     private FileReadingIterator createBatchIterator(S3ObjectInputStream inputStream, String ... fileUris) {",
          "107:         String compression = null;",
          "108:         return new FileReadingIterator(",
          "110:             compression,",
          "111:             Map.of(",
          "112:                 S3FileInputFactory.NAME,",
          "",
          "[Removed Lines]",
          "109:             Arrays.asList(fileUris),",
          "",
          "[Added Lines]",
          "109:             Arrays.stream(fileUris).map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java": [
          "File: server/src/main/java/io/crate/exceptions/UnauthorizedException.java -> server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.exceptions;",
          "26:     public UnauthorizedException(String message) {",
          "27:         super(message);",
          "28:     }",
          "30: }",
          "",
          "[Removed Lines]",
          "24: public class UnauthorizedException extends RuntimeException implements UnscopedException {",
          "",
          "[Added Lines]",
          "24: import java.io.IOException;",
          "26: import org.elasticsearch.ElasticsearchException;",
          "27: import org.elasticsearch.common.io.stream.StreamInput;",
          "29: public class UnauthorizedException extends ElasticsearchException implements UnscopedException {",
          "35:     public UnauthorizedException(StreamInput in) throws IOException {",
          "36:         super(in);",
          "37:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java -> server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:         }",
          "176:     }",
          "179:                                String compression,",
          "180:                                Map<String, FileInputFactory> fileInputFactories,",
          "181:                                Boolean shared,",
          "",
          "[Removed Lines]",
          "178:     public FileReadingIterator(Collection<String> fileUris,",
          "",
          "[Added Lines]",
          "178:     public FileReadingIterator(Collection<URI> fileUris,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:     }",
          "400:     @Nullable",
          "403:         FileInputFactory fileInputFactory = fileInputFactories.get(uri.getScheme());",
          "404:         if (fileInputFactory != null) {",
          "405:             try {",
          "",
          "[Removed Lines]",
          "401:     private FileInput toFileInput(String fileUri, Settings withClauseOptions) {",
          "402:         URI uri = toURI(fileUri);",
          "",
          "[Added Lines]",
          "401:     private FileInput toFileInput(URI uri, Settings withClauseOptions) {",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java -> server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.execution.engine.collect.sources;",
          "24: import java.util.Arrays;",
          "25: import java.util.Collection;",
          "26: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import static java.util.Objects.requireNonNull;",
          "26: import java.net.URI;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import io.crate.data.BatchIterator;",
          "41: import io.crate.data.Row;",
          "42: import io.crate.data.SkippingBatchIterator;",
          "43: import io.crate.execution.dsl.phases.CollectPhase;",
          "44: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
          "45: import io.crate.execution.engine.collect.CollectTask;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import io.crate.exceptions.UnauthorizedException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: import io.crate.metadata.NodeContext;",
          "54: import io.crate.metadata.TransactionContext;",
          "55: import io.crate.planner.operators.SubQueryResults;",
          "56: import io.crate.types.DataTypes;",
          "58: @Singleton",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: import io.crate.role.Role;",
          "61: import io.crate.role.Roles;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63:     private final InputFactory inputFactory;",
          "64:     private final NodeContext nodeCtx;",
          "65:     private final ThreadPool threadPool;",
          "67:     @Inject",
          "68:     public FileCollectSource(NodeContext nodeCtx,",
          "69:                              ClusterService clusterService,",
          "70:                              Map<String, FileInputFactory> fileInputFactoryMap,",
          "72:         this.fileInputFactoryMap = fileInputFactoryMap;",
          "73:         this.nodeCtx = nodeCtx;",
          "74:         this.inputFactory = new InputFactory(nodeCtx);",
          "75:         this.clusterService = clusterService;",
          "76:         this.threadPool = threadPool;",
          "77:     }",
          "79:     @Override",
          "",
          "[Removed Lines]",
          "71:                              ThreadPool threadPool) {",
          "",
          "[Added Lines]",
          "72:     private final Roles roles;",
          "78:                              ThreadPool threadPool,",
          "79:                              Roles roles) {",
          "85:         this.roles = roles;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "86:             inputFactory.ctxForRefs(txnCtx, FileLineReferenceResolver::getImplementation);",
          "87:         ctx.add(collectPhase.toCollect());",
          "90:         FileReadingIterator fileReadingIterator = new FileReadingIterator(",
          "91:             fileUris,",
          "92:             fileUriCollectPhase.compression(),",
          "",
          "[Removed Lines]",
          "89:         List<String> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri());",
          "",
          "[Added Lines]",
          "98:         Role user = requireNonNull(roles.findUser(txnCtx.sessionSettings().userName()), \"User who invoked a statement must exist\");",
          "99:         List<URI> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri()).stream()",
          "100:             .map(s -> {",
          "101:                 var uri = FileReadingIterator.toURI(s);",
          "102:                 if (uri.getScheme().equals(\"file\") && user.isSuperUser() == false) {",
          "103:                     throw new UnauthorizedException(\"Only a superuser can read from the local file system\");",
          "104:                 }",
          "105:                 return uri;",
          "106:             })",
          "107:             .toList();",
          "",
          "---------------"
        ],
        "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
          "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "972:             io.crate.exceptions.OperationOnInaccessibleRelationException.class,",
          "973:             io.crate.exceptions.OperationOnInaccessibleRelationException::new,",
          "974:             176,",
          "977:         final Class<? extends ElasticsearchException> exceptionClass;",
          "978:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
          "",
          "[Removed Lines]",
          "975:             Version.V_5_6_0);",
          "",
          "[Added Lines]",
          "975:             Version.V_5_6_0),",
          "976:         UNAUTHORIZED_EXCEPTION(",
          "977:             io.crate.exceptions.UnauthorizedException.class,",
          "978:             io.crate.exceptions.UnauthorizedException::new,",
          "979:             177,",
          "980:             Version.V_5_6_1);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java -> server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: import io.crate.expression.symbol.Literal;",
          "55: import io.crate.metadata.ColumnIdent;",
          "56: import io.crate.metadata.CoordinatorTxnCtx;",
          "57: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
          "58: import io.crate.types.DataTypes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: import io.crate.role.Role;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:             createNodeContext(),",
          "70:             clusterService,",
          "71:             Collections.emptyMap(),",
          "73:             );",
          "75:         File tmpFile = temporaryFolder.newFile(\"fileUriCollectOperation.json\");",
          "",
          "[Removed Lines]",
          "72:             THREAD_POOL",
          "",
          "[Added Lines]",
          "73:             THREAD_POOL,",
          "74:             () -> List.of(Role.CRATE_USER)",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:     private static FileReadingIterator it(Collection<String> fileUris, String compression) {",
          "202:         return new FileReadingIterator(",
          "204:             compression,",
          "205:             Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
          "206:             false,",
          "",
          "[Removed Lines]",
          "203:             fileUris,",
          "",
          "[Added Lines]",
          "203:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import java.io.InputStream;",
          "35: import java.io.InputStreamReader;",
          "36: import java.net.SocketTimeoutException;",
          "37: import java.nio.charset.StandardCharsets;",
          "38: import java.nio.file.Files;",
          "39: import java.nio.file.Path;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import java.net.URI;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: import java.util.concurrent.ScheduledExecutorService;",
          "44: import java.util.concurrent.TimeUnit;",
          "45: import java.util.function.Supplier;",
          "47: import org.elasticsearch.common.settings.Settings;",
          "48: import org.elasticsearch.test.ESTestCase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: import java.util.stream.Stream;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
          "88:         List<String> lines2 = List.of(\"name,id,age\", \"Trillian,5,33\");",
          "89:         Files.write(tempFile2, lines2);",
          "92:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
          "93:             () -> new FileReadingIterator(",
          "",
          "[Removed Lines]",
          "90:         List<String> fileUris = List.of(tempFile1.toUri().toString(), tempFile2.toUri().toString());",
          "",
          "[Added Lines]",
          "92:         List<URI> fileUris = Stream.of(tempFile1.toUri().toString(), tempFile2.toUri().toString())",
          "93:             .map(FileReadingIterator::toURI)",
          "94:             .toList();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:         Path tempFile = createTempFile(\"tempfile1\", \".csv\");",
          "140:         List<String> lines = List.of(\"id\", \"1\", \"2\", \"3\", \"4\", \"5\");",
          "141:         Files.write(tempFile, lines);",
          "144:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
          "145:             () -> new FileReadingIterator(",
          "",
          "[Removed Lines]",
          "142:         List<String> fileUris = List.of(tempFile.toUri().toString());",
          "",
          "[Added Lines]",
          "146:         List<URI> fileUris = Stream.of(tempFile.toUri().toString())",
          "147:             .map(FileReadingIterator::toURI).toList();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213:         Files.write(tempFile, List.of(\"1\", \"2\", \"3\"));",
          "214:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
          "215:         Files.write(tempFile2, List.of(\"4\", \"5\", \"6\"));",
          "218:         var fi = new FileReadingIterator(",
          "219:             fileUris,",
          "",
          "[Removed Lines]",
          "216:         List<String> fileUris = List.of(tempFile.toUri().toString(), tempFile2.toUri().toString());",
          "",
          "[Added Lines]",
          "221:         List<URI> fileUris = Stream.of(tempFile.toUri().toString(), tempFile2.toUri().toString())",
          "222:             .map(FileReadingIterator::toURI).toList();",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java -> server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:             new NodeContext(new Functions(Map.of()), roles),",
          "93:             clusterService,",
          "94:             Map.of(),",
          "96:         );",
          "98:         CompletableFuture<BatchIterator<Row>> iterator = fileCollectSource.getIterator(",
          "",
          "[Removed Lines]",
          "95:             THREAD_POOL",
          "",
          "[Added Lines]",
          "95:             THREAD_POOL,",
          "96:             () -> List.of(Role.CRATE_USER)",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import static io.crate.testing.Asserts.assertThat;",
          "27: import static io.crate.testing.TestingHelpers.printedTable;",
          "28: import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;",
          "30: import java.io.File;",
          "31: import java.io.FileOutputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: import com.carrotsearch.randomizedtesting.LifecycleScope;",
          "56: import io.crate.testing.Asserts;",
          "57: import io.crate.testing.SQLResponse;",
          "58: import io.crate.testing.UseJdbc;",
          "59: import io.crate.testing.UseNewCluster;",
          "61: @IntegTestCase.ClusterScope(numDataNodes = 2)",
          "62: public class CopyIntegrationTest extends SQLHttpIntegrationTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: import io.crate.action.sql.Sessions;",
          "58: import io.crate.exceptions.UnauthorizedException;",
          "59: import io.crate.role.Role;",
          "60: import io.crate.role.Roles;",
          "65: import io.crate.testing.UseRandomizedSchema;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1196:             \"2| 31123| apple safari| 23073\"",
          "1197:         );",
          "1198:     }",
          "1199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1206:     @UseRandomizedSchema(random = false)",
          "1207:     @Test",
          "1208:     public void test_copy_from_local_file_is_only_allowed_for_superusers() {",
          "1209:         execute(\"CREATE TABLE quotes (id INT PRIMARY KEY, \" +",
          "1210:             \"quote STRING INDEX USING FULLTEXT) WITH (number_of_replicas = 0)\");",
          "1211:         execute(\"CREATE USER test_user\");",
          "1212:         execute(\"GRANT ALL TO test_user\");",
          "1214:         var roles = cluster().getInstance(Roles.class);",
          "1215:         Role user = roles.findUser(\"test_user\");",
          "1216:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
          "1217:         try (var session = sqlOperations.newSession(null, user)) {",
          "1218:             assertThatThrownBy(() -> execute(\"COPY quotes FROM ?\", new Object[]{copyFilePath + \"test_copy_from.json\"}, session))",
          "1219:                 .isExactlyInstanceOf(UnauthorizedException.class)",
          "1220:                 .hasMessage(\"Only a superuser can read from the local file system\");",
          "1221:         }",
          "1222:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b75aeeabf90f51bd96ddb499903928fd10185207",
      "candidate_info": {
        "commit_hash": "b75aeeabf90f51bd96ddb499903928fd10185207",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/b75aeeabf90f51bd96ddb499903928fd10185207",
        "files": [
          "docs/appendices/release-notes/5.5.4.rst",
          "docs/sql/statements/copy-from.rst",
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
        ],
        "message": "Restrict `COPY FROM` using local files to superuser\n\nFixing a security issue where any user could read/import content\nof any file on the host system, the CrateDB process user has read\naccess to.\n\n(cherry picked from commit 4e857d675683095945dd524d6ba03e692c70ecd6)",
        "before_after_code_files": [
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
            "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ],
          "candidate": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
            "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
          "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     private FileReadingIterator createBatchIterator(S3ObjectInputStream inputStream, String ... fileUris) {",
          "107:         String compression = null;",
          "108:         return new FileReadingIterator(",
          "110:             compression,",
          "111:             Map.of(",
          "112:                 S3FileInputFactory.NAME,",
          "",
          "[Removed Lines]",
          "109:             Arrays.asList(fileUris),",
          "",
          "[Added Lines]",
          "109:             Arrays.stream(fileUris).map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java": [
          "File: server/src/main/java/io/crate/exceptions/UnauthorizedException.java -> server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.exceptions;",
          "26:     public UnauthorizedException(String message) {",
          "27:         super(message);",
          "28:     }",
          "30: }",
          "",
          "[Removed Lines]",
          "24: public class UnauthorizedException extends RuntimeException implements UnscopedException {",
          "",
          "[Added Lines]",
          "24: import java.io.IOException;",
          "26: import org.elasticsearch.ElasticsearchException;",
          "27: import org.elasticsearch.common.io.stream.StreamInput;",
          "29: public class UnauthorizedException extends ElasticsearchException implements UnscopedException {",
          "35:     public UnauthorizedException(StreamInput in) throws IOException {",
          "36:         super(in);",
          "37:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java -> server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:         }",
          "176:     }",
          "179:                                String compression,",
          "180:                                Map<String, FileInputFactory> fileInputFactories,",
          "181:                                Boolean shared,",
          "",
          "[Removed Lines]",
          "178:     public FileReadingIterator(Collection<String> fileUris,",
          "",
          "[Added Lines]",
          "178:     public FileReadingIterator(Collection<URI> fileUris,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:     }",
          "400:     @Nullable",
          "403:         FileInputFactory fileInputFactory = fileInputFactories.get(uri.getScheme());",
          "404:         if (fileInputFactory != null) {",
          "405:             try {",
          "",
          "[Removed Lines]",
          "401:     private FileInput toFileInput(String fileUri, Settings withClauseOptions) {",
          "402:         URI uri = toURI(fileUri);",
          "",
          "[Added Lines]",
          "401:     private FileInput toFileInput(URI uri, Settings withClauseOptions) {",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java -> server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.execution.engine.collect.sources;",
          "24: import java.util.Arrays;",
          "25: import java.util.Collection;",
          "26: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import static java.util.Objects.requireNonNull;",
          "26: import java.net.URI;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import io.crate.data.BatchIterator;",
          "41: import io.crate.data.Row;",
          "42: import io.crate.data.SkippingBatchIterator;",
          "43: import io.crate.execution.dsl.phases.CollectPhase;",
          "44: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
          "45: import io.crate.execution.engine.collect.CollectTask;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import io.crate.exceptions.UnauthorizedException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: import io.crate.planner.operators.SubQueryResults;",
          "56: import io.crate.types.ArrayType;",
          "57: import io.crate.types.DataTypes;",
          "59: @Singleton",
          "60: public class FileCollectSource implements CollectSource {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: import io.crate.user.UserLookup;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64:     private final InputFactory inputFactory;",
          "65:     private final NodeContext nodeCtx;",
          "66:     private final ThreadPool threadPool;",
          "68:     @Inject",
          "69:     public FileCollectSource(NodeContext nodeCtx,",
          "70:                              ClusterService clusterService,",
          "71:                              Map<String, FileInputFactory> fileInputFactoryMap,",
          "73:         this.fileInputFactoryMap = fileInputFactoryMap;",
          "74:         this.nodeCtx = nodeCtx;",
          "75:         this.inputFactory = new InputFactory(nodeCtx);",
          "76:         this.clusterService = clusterService;",
          "77:         this.threadPool = threadPool;",
          "78:     }",
          "80:     @Override",
          "",
          "[Removed Lines]",
          "72:                              ThreadPool threadPool) {",
          "",
          "[Added Lines]",
          "72:     private final UserLookup userLookup;",
          "78:                              ThreadPool threadPool,",
          "79:                              UserLookup userLookup) {",
          "85:         this.userLookup = userLookup;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:             inputFactory.ctxForRefs(txnCtx, FileLineReferenceResolver::getImplementation);",
          "88:         ctx.add(collectPhase.toCollect());",
          "91:         FileReadingIterator fileReadingIterator = new FileReadingIterator(",
          "92:             fileUris,",
          "93:             fileUriCollectPhase.compression(),",
          "",
          "[Removed Lines]",
          "90:         List<String> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri());",
          "",
          "[Added Lines]",
          "98:         var user = requireNonNull(userLookup.findUser(txnCtx.sessionSettings().userName()), \"User who invoked a statement must exist\");",
          "99:         List<URI> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri()).stream()",
          "100:             .map(s -> {",
          "101:                 var uri = FileReadingIterator.toURI(s);",
          "102:                 if (uri.getScheme().equals(\"file\") && user.isSuperUser() == false) {",
          "103:                     throw new UnauthorizedException(\"Only a superuser can read from the local file system\");",
          "104:                 }",
          "105:                 return uri;",
          "106:             })",
          "107:             .toList();",
          "",
          "---------------"
        ],
        "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
          "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "968:             org.elasticsearch.cluster.coordination.NodeHealthCheckFailureException.class,",
          "969:             org.elasticsearch.cluster.coordination.NodeHealthCheckFailureException::new,",
          "970:             175,",
          "973:         final Class<? extends ElasticsearchException> exceptionClass;",
          "974:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
          "",
          "[Removed Lines]",
          "971:             Version.V_5_2_0);",
          "",
          "[Added Lines]",
          "971:             Version.V_5_2_0),",
          "972:         UNAUTHORIZED_EXCEPTION(",
          "973:             io.crate.exceptions.UnauthorizedException.class,",
          "974:             io.crate.exceptions.UnauthorizedException::new,",
          "975:             177,",
          "976:             Version.V_5_5_4);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java -> server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import io.crate.metadata.CoordinatorTxnCtx;",
          "57: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
          "58: import io.crate.types.DataTypes;",
          "61: public class MapSideDataCollectOperationTest extends CrateDummyClusterServiceUnitTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import io.crate.user.User;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:             createNodeContext(),",
          "70:             clusterService,",
          "71:             Collections.emptyMap(),",
          "73:             );",
          "75:         File tmpFile = temporaryFolder.newFile(\"fileUriCollectOperation.json\");",
          "",
          "[Removed Lines]",
          "72:             THREAD_POOL",
          "",
          "[Added Lines]",
          "73:             THREAD_POOL,",
          "74:             () -> List.of(User.CRATE_USER)",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:     private static FileReadingIterator it(Collection<String> fileUris, String compression) {",
          "202:         return new FileReadingIterator(",
          "204:             compression,",
          "205:             Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
          "206:             false,",
          "",
          "[Removed Lines]",
          "203:             fileUris,",
          "",
          "[Added Lines]",
          "203:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import java.io.InputStream;",
          "35: import java.io.InputStreamReader;",
          "36: import java.net.SocketTimeoutException;",
          "37: import java.nio.charset.StandardCharsets;",
          "38: import java.nio.file.Files;",
          "39: import java.nio.file.Path;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import java.net.URI;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: import java.util.concurrent.ScheduledExecutorService;",
          "44: import java.util.concurrent.TimeUnit;",
          "45: import java.util.function.Supplier;",
          "47: import org.elasticsearch.common.settings.Settings;",
          "48: import org.elasticsearch.test.ESTestCase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: import java.util.stream.Stream;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
          "88:         List<String> lines2 = List.of(\"name,id,age\", \"Trillian,5,33\");",
          "89:         Files.write(tempFile2, lines2);",
          "92:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
          "93:             () -> new FileReadingIterator(",
          "",
          "[Removed Lines]",
          "90:         List<String> fileUris = List.of(tempFile1.toUri().toString(), tempFile2.toUri().toString());",
          "",
          "[Added Lines]",
          "92:         List<URI> fileUris = Stream.of(tempFile1.toUri().toString(), tempFile2.toUri().toString())",
          "93:             .map(FileReadingIterator::toURI)",
          "94:             .toList();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:         Path tempFile = createTempFile(\"tempfile1\", \".csv\");",
          "140:         List<String> lines = List.of(\"id\", \"1\", \"2\", \"3\", \"4\", \"5\");",
          "141:         Files.write(tempFile, lines);",
          "144:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
          "145:             () -> new FileReadingIterator(",
          "",
          "[Removed Lines]",
          "142:         List<String> fileUris = List.of(tempFile.toUri().toString());",
          "",
          "[Added Lines]",
          "146:         List<URI> fileUris = Stream.of(tempFile.toUri().toString())",
          "147:             .map(FileReadingIterator::toURI).toList();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213:         Files.write(tempFile, List.of(\"1\", \"2\", \"3\"));",
          "214:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
          "215:         Files.write(tempFile2, List.of(\"4\", \"5\", \"6\"));",
          "218:         var fi = new FileReadingIterator(",
          "219:             fileUris,",
          "",
          "[Removed Lines]",
          "216:         List<String> fileUris = List.of(tempFile.toUri().toString(), tempFile2.toUri().toString());",
          "",
          "[Added Lines]",
          "221:         List<URI> fileUris = Stream.of(tempFile.toUri().toString(), tempFile2.toUri().toString())",
          "222:             .map(FileReadingIterator::toURI).toList();",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java -> server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:             new NodeContext(new Functions(Map.of()), userLookup),",
          "93:             clusterService,",
          "94:             Map.of(),",
          "96:         );",
          "98:         CompletableFuture<BatchIterator<Row>> iterator = fileCollectSource.getIterator(",
          "",
          "[Removed Lines]",
          "95:             THREAD_POOL",
          "",
          "[Added Lines]",
          "95:             THREAD_POOL,",
          "96:             () -> List.of(User.CRATE_USER)",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import static io.crate.testing.Asserts.assertThat;",
          "27: import static io.crate.testing.TestingHelpers.printedTable;",
          "28: import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;",
          "30: import java.io.File;",
          "31: import java.io.FileOutputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: import com.carrotsearch.randomizedtesting.LifecycleScope;",
          "56: import io.crate.testing.Asserts;",
          "57: import io.crate.testing.SQLResponse;",
          "58: import io.crate.testing.UseJdbc;",
          "59: import io.crate.testing.UseNewCluster;",
          "61: @IntegTestCase.ClusterScope(numDataNodes = 2)",
          "62: public class CopyIntegrationTest extends SQLHttpIntegrationTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: import io.crate.action.sql.Sessions;",
          "58: import io.crate.exceptions.UnauthorizedException;",
          "63: import io.crate.testing.UseRandomizedSchema;",
          "64: import io.crate.user.UserLookup;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1196:             \"2| 31123| apple safari| 23073\"",
          "1197:         );",
          "1198:     }",
          "1199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1205:     @UseRandomizedSchema(random = false)",
          "1206:     @Test",
          "1207:     public void test_copy_from_local_file_is_only_allowed_for_superusers() {",
          "1208:         execute(\"CREATE TABLE quotes (id INT PRIMARY KEY, \" +",
          "1209:             \"quote STRING INDEX USING FULLTEXT) WITH (number_of_replicas = 0)\");",
          "1210:         execute(\"CREATE USER test_user\");",
          "1211:         execute(\"GRANT ALL TO test_user\");",
          "1213:         var roles = cluster().getInstance(UserLookup.class);",
          "1214:         var user = roles.findUser(\"test_user\");",
          "1215:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
          "1216:         try (var session = sqlOperations.newSession(null, user)) {",
          "1217:             assertThatThrownBy(() -> execute(\"COPY quotes FROM ?\", new Object[]{copyFilePath + \"test_copy_from.json\"}, session))",
          "1218:                 .isExactlyInstanceOf(UnauthorizedException.class)",
          "1219:                 .hasMessage(\"Only a superuser can read from the local file system\");",
          "1220:         }",
          "1221:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c4c97d5a1c52cc2250ea42d062a3d37550c19dd5",
      "candidate_info": {
        "commit_hash": "c4c97d5a1c52cc2250ea42d062a3d37550c19dd5",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/c4c97d5a1c52cc2250ea42d062a3d37550c19dd5",
        "files": [
          "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "docs/appendices/release-notes/5.3.9.rst",
          "docs/sql/statements/copy-from.rst",
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
        ],
        "message": "Restrict `COPY FROM` using local files to superuser\n\nFixing a security issue where any user could read/import content\nof any file on the host system, the CrateDB process user has read\naccess to.\n\n(cherry picked from commit 4e857d675683095945dd524d6ba03e692c70ecd6)",
        "before_after_code_files": [
          "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
            "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ],
          "candidate": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
            "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java": [
          "File: benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java -> benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "143:         BatchIterator<Row> batchIterator = FileReadingIterator.newInstance(",
          "145:             inputs,",
          "146:             ctx.expressions(),",
          "147:             null,",
          "",
          "[Removed Lines]",
          "144:             Collections.singletonList(fileUri),",
          "",
          "[Added Lines]",
          "144:             List.of(FileReadingIterator.toURI(fileUri)),",
          "",
          "---------------"
        ],
        "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java": [
          "File: benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java -> benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "143:         BatchIterator<Row> batchIterator = FileReadingIterator.newInstance(",
          "145:             inputs,",
          "146:             ctx.expressions(),",
          "147:             null,",
          "",
          "[Removed Lines]",
          "144:             Collections.singletonList(fileUri),",
          "",
          "[Added Lines]",
          "144:             List.of(FileReadingIterator.toURI(fileUri)),",
          "",
          "---------------"
        ],
        "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
          "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:             inputs.add(sourceUriFailureInput);",
          "213:         }",
          "214:         return FileReadingIterator.newInstance(",
          "216:             inputs,",
          "217:             ctx.expressions(),",
          "218:             compression,",
          "",
          "[Removed Lines]",
          "215:             fileUris,",
          "",
          "[Added Lines]",
          "215:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java": [
          "File: server/src/main/java/io/crate/exceptions/UnauthorizedException.java -> server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.exceptions;",
          "26:     public UnauthorizedException(String message) {",
          "27:         super(message);",
          "28:     }",
          "30: }",
          "",
          "[Removed Lines]",
          "24: public class UnauthorizedException extends RuntimeException implements UnscopedException {",
          "",
          "[Added Lines]",
          "24: import java.io.IOException;",
          "26: import org.elasticsearch.ElasticsearchException;",
          "27: import org.elasticsearch.common.io.stream.StreamInput;",
          "29: public class UnauthorizedException extends ElasticsearchException implements UnscopedException {",
          "35:     public UnauthorizedException(StreamInput in) throws IOException {",
          "36:         super(in);",
          "37:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java -> server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     @VisibleForTesting",
          "63:     static final int MAX_SOCKET_TIMEOUT_RETRIES = 5;",
          "66:                                                  List<Input<?>> inputs,",
          "67:                                                  Iterable<LineCollectorExpression<?>> collectorExpressions,",
          "68:                                                  String compression,",
          "",
          "[Removed Lines]",
          "65:     public static BatchIterator<Row> newInstance(Collection<String> fileUris,",
          "",
          "[Added Lines]",
          "65:     public static BatchIterator<Row> newInstance(Collection<URI> fileUris,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:     private LineProcessor lineProcessor;",
          "116:     @VisibleForTesting",
          "118:                         List<? extends Input<?>> inputs,",
          "119:                         Iterable<LineCollectorExpression<?>> collectorExpressions,",
          "120:                         String compression,",
          "",
          "[Removed Lines]",
          "117:     FileReadingIterator(Collection<String> fileUris,",
          "",
          "[Added Lines]",
          "117:     FileReadingIterator(Collection<URI> fileUris,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:     }",
          "326:     @Nullable",
          "329:         FileInputFactory fileInputFactory = fileInputFactories.get(uri.getScheme());",
          "330:         if (fileInputFactory != null) {",
          "331:             try {",
          "",
          "[Removed Lines]",
          "327:     private FileInput toFileInput(String fileUri, Settings withClauseOptions) {",
          "328:         URI uri = toURI(fileUri);",
          "",
          "[Added Lines]",
          "327:     private FileInput toFileInput(URI uri, Settings withClauseOptions) {",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java -> server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.execution.engine.collect.sources;",
          "24: import io.crate.analyze.AnalyzedCopyFrom;",
          "25: import io.crate.analyze.SymbolEvaluator;",
          "26: import io.crate.common.annotations.VisibleForTesting;",
          "27: import io.crate.data.BatchIterator;",
          "28: import io.crate.data.Row;",
          "29: import io.crate.execution.dsl.phases.CollectPhase;",
          "30: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
          "31: import io.crate.execution.engine.collect.CollectTask;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import static java.util.Objects.requireNonNull;",
          "26: import java.net.URI;",
          "27: import java.util.Arrays;",
          "28: import java.util.Collection;",
          "29: import java.util.Collections;",
          "30: import java.util.List;",
          "31: import java.util.Map;",
          "32: import java.util.concurrent.CompletableFuture;",
          "34: import org.elasticsearch.cluster.service.ClusterService;",
          "35: import org.elasticsearch.common.inject.Inject;",
          "36: import org.elasticsearch.common.inject.Singleton;",
          "43: import io.crate.exceptions.UnauthorizedException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import io.crate.planner.operators.SubQueryResults;",
          "41: import io.crate.types.ArrayType;",
          "42: import io.crate.types.DataTypes;",
          "54: @Singleton",
          "55: public class FileCollectSource implements CollectSource {",
          "",
          "[Removed Lines]",
          "43: import org.elasticsearch.cluster.service.ClusterService;",
          "44: import org.elasticsearch.common.inject.Inject;",
          "45: import org.elasticsearch.common.inject.Singleton;",
          "47: import java.util.Arrays;",
          "48: import java.util.Collection;",
          "49: import java.util.Collections;",
          "50: import java.util.List;",
          "51: import java.util.Map;",
          "52: import java.util.concurrent.CompletableFuture;",
          "",
          "[Added Lines]",
          "58: import io.crate.user.UserLookup;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     private final Map<String, FileInputFactory> fileInputFactoryMap;",
          "59:     private final InputFactory inputFactory;",
          "60:     private final NodeContext nodeCtx;",
          "62:     @Inject",
          "64:         this.fileInputFactoryMap = fileInputFactoryMap;",
          "65:         this.nodeCtx = nodeCtx;",
          "66:         this.inputFactory = new InputFactory(nodeCtx);",
          "67:         this.clusterService = clusterService;",
          "68:     }",
          "70:     @Override",
          "",
          "[Removed Lines]",
          "63:     public FileCollectSource(NodeContext nodeCtx, ClusterService clusterService, Map<String, FileInputFactory> fileInputFactoryMap) {",
          "",
          "[Added Lines]",
          "67:     private final UserLookup userLookup;",
          "70:     public FileCollectSource(NodeContext nodeCtx,",
          "71:                              ClusterService clusterService,",
          "72:                              Map<String, FileInputFactory> fileInputFactoryMap,",
          "73:                              UserLookup userLookup) {",
          "78:         this.userLookup = userLookup;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:             inputFactory.ctxForRefs(txnCtx, FileLineReferenceResolver::getImplementation);",
          "78:         ctx.add(collectPhase.toCollect());",
          "81:         return CompletableFuture.completedFuture(FileReadingIterator.newInstance(",
          "82:             fileUris,",
          "83:             ctx.topLevelInputs(),",
          "",
          "[Removed Lines]",
          "80:         List<String> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri());",
          "",
          "[Added Lines]",
          "91:         var user = requireNonNull(userLookup.findUser(txnCtx.sessionSettings().userName()), \"User who invoked a statement must exist\");",
          "92:         List<URI> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri()).stream()",
          "93:             .map(s -> {",
          "94:                 var uri = FileReadingIterator.toURI(s);",
          "95:                 if (uri.getScheme().equals(\"file\") && user.isSuperUser() == false) {",
          "96:                     throw new UnauthorizedException(\"Only a superuser can read from the local file system\");",
          "97:                 }",
          "98:                 return uri;",
          "99:             })",
          "100:             .toList();",
          "",
          "---------------"
        ],
        "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
          "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "969:             org.elasticsearch.cluster.coordination.NodeHealthCheckFailureException.class,",
          "970:             org.elasticsearch.cluster.coordination.NodeHealthCheckFailureException::new,",
          "971:             175,",
          "974:         final Class<? extends ElasticsearchException> exceptionClass;",
          "975:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
          "",
          "[Removed Lines]",
          "972:             Version.V_5_2_0);",
          "",
          "[Added Lines]",
          "972:             Version.V_5_2_0),",
          "973:         UNAUTHORIZED_EXCEPTION(",
          "974:             io.crate.exceptions.UnauthorizedException.class,",
          "975:             io.crate.exceptions.UnauthorizedException::new,",
          "976:             177,",
          "977:             Version.V_5_3_9);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java -> server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
          "57: import io.crate.testing.TestingRowConsumer;",
          "58: import io.crate.types.DataTypes;",
          "61: public class MapSideDataCollectOperationTest extends CrateDummyClusterServiceUnitTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import io.crate.user.User;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     @Test",
          "67:     public void testFileUriCollect() throws Exception {",
          "70:         File tmpFile = temporaryFolder.newFile(\"fileUriCollectOperation.json\");",
          "71:         try (OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tmpFile), StandardCharsets.UTF_8)) {",
          "",
          "[Removed Lines]",
          "68:         FileCollectSource fileCollectSource = new FileCollectSource(createNodeContext(), clusterService, Collections.emptyMap());",
          "",
          "[Added Lines]",
          "69:         FileCollectSource fileCollectSource = new FileCollectSource(",
          "70:             createNodeContext(),",
          "71:             clusterService,",
          "72:             Collections.emptyMap(),",
          "73:             () -> List.of(User.CRATE_USER)",
          "74:         );",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:             inputs.add(sourceUriFailureInput);",
          "239:         }",
          "240:         return FileReadingIterator.newInstance(",
          "242:             inputs,",
          "243:             ctx.expressions(),",
          "244:             compression,",
          "",
          "[Removed Lines]",
          "241:             fileUris,",
          "",
          "[Added Lines]",
          "241:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:         Supplier<BatchIterator<Row>> batchIteratorSupplier =",
          "172:             () -> new FileReadingIterator(",
          "174:                 inputs,",
          "175:                 ctx.expressions(),",
          "176:                 null,",
          "",
          "[Removed Lines]",
          "173:                 fileUris,",
          "",
          "[Added Lines]",
          "173:                 fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:         Supplier<BatchIterator<Row>> batchIteratorSupplier =",
          "230:             () -> new FileReadingIterator(",
          "232:                 inputs,",
          "233:                 ctx.expressions(),",
          "234:                 null,",
          "",
          "[Removed Lines]",
          "231:                 fileUris,",
          "",
          "[Added Lines]",
          "231:                 fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:         Supplier<BatchIterator<Row>> batchIteratorSupplier =",
          "291:             () -> new FileReadingIterator(",
          "293:                 inputs,",
          "294:                 ctx.expressions(),",
          "295:                 null,",
          "",
          "[Removed Lines]",
          "292:                 fileUris,",
          "",
          "[Added Lines]",
          "292:                 fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "342:         return FileReadingIterator.newInstance(",
          "344:             inputs,",
          "345:             ctx.expressions(),",
          "346:             null,",
          "",
          "[Removed Lines]",
          "343:             fileUris,",
          "",
          "[Added Lines]",
          "343:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import static io.crate.testing.Asserts.assertThat;",
          "27: import static io.crate.testing.TestingHelpers.printedTable;",
          "28: import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;",
          "30: import static org.hamcrest.Matchers.both;",
          "31: import static org.hamcrest.Matchers.contains;",
          "32: import static org.hamcrest.Matchers.containsString;",
          "",
          "[Removed Lines]",
          "29: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "[Added Lines]",
          "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: import com.carrotsearch.randomizedtesting.LifecycleScope;",
          "71: import io.crate.testing.Asserts;",
          "72: import io.crate.testing.SQLResponse;",
          "73: import io.crate.testing.UseJdbc;",
          "75: @IntegTestCase.ClusterScope(numDataNodes = 2)",
          "76: public class CopyIntegrationTest extends SQLHttpIntegrationTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: import io.crate.action.sql.Sessions;",
          "72: import io.crate.exceptions.UnauthorizedException;",
          "76: import io.crate.testing.UseRandomizedSchema;",
          "77: import io.crate.user.UserLookup;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1187:                 \")\"",
          "1188:             );",
          "1189:     }",
          "1190: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1195:     @UseRandomizedSchema(random = false)",
          "1196:     @Test",
          "1197:     public void test_copy_from_local_file_is_only_allowed_for_superusers() {",
          "1198:         execute(\"CREATE TABLE quotes (id INT PRIMARY KEY, \" +",
          "1199:                 \"quote STRING INDEX USING FULLTEXT) WITH (number_of_replicas = 0)\");",
          "1200:         execute(\"CREATE USER test_user\");",
          "1201:         execute(\"GRANT ALL TO test_user\");",
          "1203:         var roles = cluster().getInstance(UserLookup.class);",
          "1204:         var user = roles.findUser(\"test_user\");",
          "1205:         var sqlOperations = cluster().getInstance(Sessions.class);",
          "1206:         try (var session = sqlOperations.createSession(null, user)) {",
          "1207:             assertThatThrownBy(() -> execute(\"COPY quotes FROM ?\", new Object[]{copyFilePath + \"test_copy_from.json\"}, session))",
          "1208:                 .isExactlyInstanceOf(UnauthorizedException.class)",
          "1209:                 .hasMessage(\"Only a superuser can read from the local file system\");",
          "1210:         }",
          "1211:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04e24632509947cfde93ad66cec277986b7d45cb",
      "candidate_info": {
        "commit_hash": "04e24632509947cfde93ad66cec277986b7d45cb",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/04e24632509947cfde93ad66cec277986b7d45cb",
        "files": [
          "server/src/main/java/io/crate/exceptions/OperationOnInaccessibleRelationException.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java"
        ],
        "message": "Add streaming support to OperationOnInaccessibleRelationException\n\n- Improves error presenting to the user.\n- Fix flaky tests which expect this exception but fail sometimes\n  when it is thrown at the non-handler nodes and thus wrapped.\n  (concrete failed test: `MetadataTrackerITest.test_subscription_to_multiple_publications_should_not_stop_on_a_single_publication_drop`)",
        "before_after_code_files": [
          "server/src/main/java/io/crate/exceptions/OperationOnInaccessibleRelationException.java||server/src/main/java/io/crate/exceptions/OperationOnInaccessibleRelationException.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
          ],
          "candidate": [
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
          ]
        }
      },
      "candidate_diff": {
        "server/src/main/java/io/crate/exceptions/OperationOnInaccessibleRelationException.java||server/src/main/java/io/crate/exceptions/OperationOnInaccessibleRelationException.java": [
          "File: server/src/main/java/io/crate/exceptions/OperationOnInaccessibleRelationException.java -> server/src/main/java/io/crate/exceptions/OperationOnInaccessibleRelationException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.exceptions;",
          "26: import java.util.Collection;",
          "27: import java.util.Collections;",
          "33:     public OperationOnInaccessibleRelationException(RelationName relationName, String msg) {",
          "34:         super(msg);",
          "35:         this.relationName = relationName;",
          "36:     }",
          "38:     @Override",
          "39:     public Collection<RelationName> getTableIdents() {",
          "40:         return Collections.singletonList(relationName);",
          "",
          "[Removed Lines]",
          "24: import io.crate.metadata.RelationName;",
          "29: public class OperationOnInaccessibleRelationException extends RuntimeException implements TableScopeException {",
          "31:     private RelationName relationName;",
          "",
          "[Added Lines]",
          "24: import java.io.IOException;",
          "28: import org.elasticsearch.ElasticsearchException;",
          "29: import org.elasticsearch.common.io.stream.StreamInput;",
          "30: import org.elasticsearch.common.io.stream.StreamOutput;",
          "32: import io.crate.metadata.RelationName;",
          "34: public class OperationOnInaccessibleRelationException extends ElasticsearchException implements TableScopeException {",
          "36:     private final RelationName relationName;",
          "43:     public OperationOnInaccessibleRelationException(StreamInput in) throws IOException {",
          "44:         super(in);",
          "45:         relationName = new RelationName(in);",
          "46:     }",
          "48:     @Override",
          "49:     public void writeTo(StreamOutput out) throws IOException {",
          "50:         super.writeTo(out);",
          "51:         relationName.writeTo(out);",
          "52:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
          "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "968:             org.elasticsearch.cluster.coordination.NodeHealthCheckFailureException.class,",
          "969:             org.elasticsearch.cluster.coordination.NodeHealthCheckFailureException::new,",
          "970:             175,",
          "973:         final Class<? extends ElasticsearchException> exceptionClass;",
          "974:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
          "",
          "[Removed Lines]",
          "971:             Version.V_5_2_0);",
          "",
          "[Added Lines]",
          "971:             Version.V_5_2_0),",
          "972:         OPERATION_ON_INACCESSIBLE_RELATION_EXCEPTION(",
          "973:             io.crate.exceptions.OperationOnInaccessibleRelationException.class,",
          "974:             io.crate.exceptions.OperationOnInaccessibleRelationException::new,",
          "975:             176,",
          "976:             Version.V_5_6_0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}