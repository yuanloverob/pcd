{
  "cve_id": "CVE-2021-44217",
  "cve_desc": "In Ericsson CodeChecker through 6.18.0, a Stored Cross-site scripting (XSS) vulnerability in the comments component of the reports viewer allows remote attackers to inject arbitrary web script or HTML via the POST JSON data of the /CodeCheckerService API.",
  "repo": "Ericsson/codechecker",
  "patch_hash": "72ee51158e6d81150320223b85410c179b9ee2b1",
  "patch_info": {
    "commit_hash": "72ee51158e6d81150320223b85410c179b9ee2b1",
    "repo": "Ericsson/codechecker",
    "commit_url": "https://github.com/Ericsson/codechecker/commit/72ee51158e6d81150320223b85410c179b9ee2b1",
    "files": [
      "web/server/codechecker_server/api/report_server.py",
      "web/tests/functional/comment/test_comment.py",
      "web/tests/functional/export_import/test_export_import.py",
      "web/tests/functional/store/test_store.py",
      "docs/README.md",
      "docs/web/user_guide.md",
      "web/client/codechecker_client/cmd/cmd.py",
      "web/client/codechecker_client/cmd_line_client.py",
      "web/tests/functional/diff_remote/__init__.py",
      "web/tests/functional/diff_remote/test_diff_remote.py"
    ],
    "message": "Merge pull request #3549 from csordasmarton/escape_v_html_values\n\n[server][gui] Escape values for v-html attributes",
    "before_after_code_files": [
      "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
      "web/tests/functional/comment/test_comment.py||web/tests/functional/comment/test_comment.py",
      "web/tests/functional/export_import/test_export_import.py||web/tests/functional/export_import/test_export_import.py",
      "web/tests/functional/store/test_store.py||web/tests/functional/store/test_store.py"
    ]
  },
  "patch_diff": {
    "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py": [
      "File: web/server/codechecker_server/api/report_server.py -> web/server/codechecker_server/api/report_server.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: \"\"\"",
      "12: import base64",
      "13: import json",
      "14: import os",
      "15: import re",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: import html",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "790:         if system_comment:",
      "791:             for idx, value in enumerate(elements[1:]):",
      "792:                 system_comment = system_comment.replace(",
      "799: def create_review_data(review_status):",
      "",
      "[Removed Lines]",
      "793:                     '{' + str(idx) + '}', value)",
      "794:             message = system_comment",
      "796:     return message",
      "",
      "[Added Lines]",
      "794:                     '{' + str(idx) + '}', html.escape(value))",
      "795:             return system_comment",
      "797:     return html.escape(message)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1273:         analysis_info = self.getAnalysisInfo(",
      "1274:             analysis_info_filter, limit, offset)",
      "1278:     @exc_to_thrift_reqfail",
      "1279:     @timeit",
      "",
      "[Removed Lines]",
      "1276:         return \"; \".join([i.analyzerCommand for i in analysis_info])",
      "",
      "[Added Lines]",
      "1277:         return \"; \".join([html.escape(i.analyzerCommand)",
      "1278:                           for i in analysis_info])",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1326:                         zlib.decompress(cmd.analyzer_command).decode('utf-8')",
      "1328:                     res.append(ttypes.AnalysisInfo(",
      "1331:         return res",
      "",
      "[Removed Lines]",
      "1329:                         analyzerCommand=command))",
      "",
      "[Added Lines]",
      "1331:                         analyzerCommand=html.escape(command)))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1909:         \"\"\" Add new comment for the given bug. \"\"\"",
      "1910:         self.__require_access()",
      "1913:             raise codechecker_api_shared.ttypes.RequestFailed(",
      "1914:                 codechecker_api_shared.ttypes.ErrorCode.GENERAL,",
      "1915:                 'The comment message can not be empty!')",
      "",
      "[Removed Lines]",
      "1912:         if not comment_data.message.strip():",
      "",
      "[Added Lines]",
      "1914:         if not comment_data.message or not comment_data.message.strip():",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2119:                             name=commit[\"author\"][\"name\"],",
      "2120:                             email=commit[\"author\"][\"email\"]),",
      "2121:                         summary=commit[\"summary\"],",
      "2123:                         committedDateTime=commit[\"committed_datetime\"],",
      "2124:                     )",
      "2125:                     for commitHash, commit in blame_info[\"commits\"].items()",
      "",
      "[Removed Lines]",
      "2122:                         message=commit[\"message\"],",
      "",
      "[Added Lines]",
      "2124:                         message=html.escape(commit[\"message\"]),",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2989:                 comment_data = ttypes.CommentData(",
      "2990:                     id=data.id,",
      "2991:                     author=data.author,",
      "2993:                     createdAt=str(data.created_at),",
      "2994:                     kind=data.kind)",
      "2995:                 comment_data_list[report_id].append(comment_data)",
      "",
      "[Removed Lines]",
      "2992:                     message=data.message.decode('utf-8'),",
      "",
      "[Added Lines]",
      "2994:                     message=html.unescape(data.message.decode('utf-8')),",
      "",
      "---------------"
    ],
    "web/tests/functional/comment/test_comment.py||web/tests/functional/comment/test_comment.py": [
      "File: web/tests/functional/comment/test_comment.py -> web/tests/functional/comment/test_comment.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: Report commenting tests.",
      "11: \"\"\"",
      "14: import logging",
      "15: import os",
      "16: import unittest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: import html",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:         self.assertEqual(num_comment, 0)",
      "104:         # Try to add a new comment for the first bug",
      "106:         success = self._cc_client.addComment(bug.reportId, comment1)",
      "107:         self.assertTrue(success)",
      "108:         logging.debug('Bug commented successfully')",
      "",
      "[Removed Lines]",
      "105:         comment1 = CommentData(author='anybody', message='First msg')",
      "",
      "[Added Lines]",
      "105:         first_msg = 'First msg <img />'",
      "106:         comment1 = CommentData(author='anybody', message=first_msg)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "156:         comments = self._cc_client.getComments(bug.reportId)",
      "157:         self.assertEqual(len(comments), 1)",
      "159:         num_comment = self._cc_client.getCommentCount(bug.reportId)",
      "160:         self.assertEqual(num_comment, 1)",
      "162:         # Edit the message of the first remaining comment",
      "164:         success = self._cc_client.updateComment(comments[0].id, new_msg)",
      "165:         self.assertTrue(success)",
      "166:         logging.debug('Comment edited successfully')",
      "",
      "[Removed Lines]",
      "163:         new_msg = \"New msg'\\\"`\"",
      "",
      "[Added Lines]",
      "160:         self.assertIn(html.escape(first_msg), comments[0].message)",
      "166:         new_msg = \"New msg'\\\"` <img />\"",
      "167:         new_msg_escaped = html.escape(new_msg)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "179:         user_comments, system_comments = separate_comments(comments)",
      "181:         self.assertEqual(len(user_comments), 1)",
      "183:         self.assertEqual(len(system_comments), 1)",
      "185:         # Test user and system comments fetched",
      "186:         details = self._cc_client.getReportDetails(bug.reportId)",
      "",
      "[Removed Lines]",
      "182:         self.assertEqual(user_comments[0].message, new_msg)",
      "",
      "[Added Lines]",
      "186:         self.assertEqual(user_comments[0].message, new_msg_escaped)",
      "188:         self.assertIn(new_msg_escaped, system_comments[0].message)",
      "",
      "---------------"
    ],
    "web/tests/functional/export_import/test_export_import.py||web/tests/functional/export_import/test_export_import.py": [
      "File: web/tests/functional/export_import/test_export_import.py -> web/tests/functional/export_import/test_export_import.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "89:         comments = self._cc_client.getComments(bug.reportId)",
      "90:         self.assertEqual(len(comments), 0)",
      "93:         success = self._cc_client.addComment(bug.reportId, comment1)",
      "94:         self.assertTrue(success)",
      "95:         logging.debug('Bug commented successfully')",
      "",
      "[Removed Lines]",
      "92:         comment1 = CommentData(author='anybody', message='First msg')",
      "",
      "[Added Lines]",
      "91:         comment1 = CommentData(author='anybody', message='First msg <img />')",
      "",
      "---------------"
    ],
    "web/tests/functional/store/test_store.py||web/tests/functional/store/test_store.py": [
      "File: web/tests/functional/store/test_store.py -> web/tests/functional/store/test_store.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: store tests.",
      "11: \"\"\"",
      "14: import json",
      "15: import os",
      "16: import shlex",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: import html",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "181:             '-d', 'core.DivideZero', '-e', 'deadcode.DeadStores']",
      "182:         codechecker.analyze(cfg, self._divide_zero_workspace)",
      "184:         cfg['reportdir'] = report_dir2",
      "185:         cfg['checkers'] = [",
      "186:             '-e', 'core.DivideZero', '-d', 'deadcode.DeadStores']",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "184:         with open(os.path.join(report_dir1, 'metadata.json'), 'r+',",
      "185:                   encoding=\"utf-8\", errors=\"ignore\") as f:",
      "186:             data = json.load(f)",
      "187:             data[\"tools\"][0][\"command\"].append(\"<img />\")",
      "189:             f.seek(0)",
      "190:             f.truncate()",
      "191:             json.dump(data, f)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "235:             self.assertTrue(",
      "236:                 any(report_dir2 in i.analyzerCommand for i in analysis_info))",
      "238:             # Get analysis info for a report.",
      "239:             analysis_info_filter = AnalysisInfoFilter(",
      "240:                 reportId=report['reportId'])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "247:             self.assertTrue(all(",
      "248:                 '<' not in i.analyzerCommand for i in analysis_info))",
      "249:             self.assertTrue(any(",
      "250:                 html.escape('<') in i.analyzerCommand for i in analysis_info))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fa68b312a29b27b6c50df953c3b68fcbcda2435c",
      "candidate_info": {
        "commit_hash": "fa68b312a29b27b6c50df953c3b68fcbcda2435c",
        "repo": "Ericsson/codechecker",
        "commit_url": "https://github.com/Ericsson/codechecker/commit/fa68b312a29b27b6c50df953c3b68fcbcda2435c",
        "files": [
          "web/server/codechecker_server/api/report_server.py",
          "web/tests/functional/comment/test_comment.py",
          "web/tests/functional/export_import/test_export_import.py",
          "web/tests/functional/store/test_store.py"
        ],
        "message": "[server][gui] Escape values for v-html attributes\n\nWe are using `v-html` attribute on the UI side to dinamically rendering\ncomments and analyzer commands. This can be very dangerous because it can\neasily lead to XSS vulnerabilities. To solve this problem the server\nwill always return the escaped version of these values which can be safely\nrendered on the UI.",
        "before_after_code_files": [
          "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
          "web/tests/functional/comment/test_comment.py||web/tests/functional/comment/test_comment.py",
          "web/tests/functional/export_import/test_export_import.py||web/tests/functional/export_import/test_export_import.py",
          "web/tests/functional/store/test_store.py||web/tests/functional/store/test_store.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/Ericsson/codechecker/pull/3549"
        ],
        "olp_code_files": {
          "patch": [
            "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
            "web/tests/functional/comment/test_comment.py||web/tests/functional/comment/test_comment.py",
            "web/tests/functional/export_import/test_export_import.py||web/tests/functional/export_import/test_export_import.py",
            "web/tests/functional/store/test_store.py||web/tests/functional/store/test_store.py"
          ],
          "candidate": [
            "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
            "web/tests/functional/comment/test_comment.py||web/tests/functional/comment/test_comment.py",
            "web/tests/functional/export_import/test_export_import.py||web/tests/functional/export_import/test_export_import.py",
            "web/tests/functional/store/test_store.py||web/tests/functional/store/test_store.py"
          ]
        }
      },
      "candidate_diff": {
        "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py": [
          "File: web/server/codechecker_server/api/report_server.py -> web/server/codechecker_server/api/report_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: \"\"\"",
          "12: import base64",
          "13: import json",
          "14: import os",
          "15: import re",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import html",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "790:         if system_comment:",
          "791:             for idx, value in enumerate(elements[1:]):",
          "792:                 system_comment = system_comment.replace(",
          "799: def create_review_data(review_status):",
          "",
          "[Removed Lines]",
          "793:                     '{' + str(idx) + '}', value)",
          "794:             message = system_comment",
          "796:     return message",
          "",
          "[Added Lines]",
          "794:                     '{' + str(idx) + '}', html.escape(value))",
          "795:             return system_comment",
          "797:     return html.escape(message)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1273:         analysis_info = self.getAnalysisInfo(",
          "1274:             analysis_info_filter, limit, offset)",
          "1278:     @exc_to_thrift_reqfail",
          "1279:     @timeit",
          "",
          "[Removed Lines]",
          "1276:         return \"; \".join([i.analyzerCommand for i in analysis_info])",
          "",
          "[Added Lines]",
          "1277:         return \"; \".join([html.escape(i.analyzerCommand)",
          "1278:                           for i in analysis_info])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1326:                         zlib.decompress(cmd.analyzer_command).decode('utf-8')",
          "1328:                     res.append(ttypes.AnalysisInfo(",
          "1331:         return res",
          "",
          "[Removed Lines]",
          "1329:                         analyzerCommand=command))",
          "",
          "[Added Lines]",
          "1331:                         analyzerCommand=html.escape(command)))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1909:         \"\"\" Add new comment for the given bug. \"\"\"",
          "1910:         self.__require_access()",
          "1913:             raise codechecker_api_shared.ttypes.RequestFailed(",
          "1914:                 codechecker_api_shared.ttypes.ErrorCode.GENERAL,",
          "1915:                 'The comment message can not be empty!')",
          "",
          "[Removed Lines]",
          "1912:         if not comment_data.message.strip():",
          "",
          "[Added Lines]",
          "1914:         if not comment_data.message or not comment_data.message.strip():",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2119:                             name=commit[\"author\"][\"name\"],",
          "2120:                             email=commit[\"author\"][\"email\"]),",
          "2121:                         summary=commit[\"summary\"],",
          "2123:                         committedDateTime=commit[\"committed_datetime\"],",
          "2124:                     )",
          "2125:                     for commitHash, commit in blame_info[\"commits\"].items()",
          "",
          "[Removed Lines]",
          "2122:                         message=commit[\"message\"],",
          "",
          "[Added Lines]",
          "2124:                         message=html.escape(commit[\"message\"]),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2989:                 comment_data = ttypes.CommentData(",
          "2990:                     id=data.id,",
          "2991:                     author=data.author,",
          "2993:                     createdAt=str(data.created_at),",
          "2994:                     kind=data.kind)",
          "2995:                 comment_data_list[report_id].append(comment_data)",
          "",
          "[Removed Lines]",
          "2992:                     message=data.message.decode('utf-8'),",
          "",
          "[Added Lines]",
          "2994:                     message=html.unescape(data.message.decode('utf-8')),",
          "",
          "---------------"
        ],
        "web/tests/functional/comment/test_comment.py||web/tests/functional/comment/test_comment.py": [
          "File: web/tests/functional/comment/test_comment.py -> web/tests/functional/comment/test_comment.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: Report commenting tests.",
          "11: \"\"\"",
          "14: import logging",
          "15: import os",
          "16: import unittest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import html",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:         self.assertEqual(num_comment, 0)",
          "104:         # Try to add a new comment for the first bug",
          "106:         success = self._cc_client.addComment(bug.reportId, comment1)",
          "107:         self.assertTrue(success)",
          "108:         logging.debug('Bug commented successfully')",
          "",
          "[Removed Lines]",
          "105:         comment1 = CommentData(author='anybody', message='First msg')",
          "",
          "[Added Lines]",
          "105:         first_msg = 'First msg <img />'",
          "106:         comment1 = CommentData(author='anybody', message=first_msg)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156:         comments = self._cc_client.getComments(bug.reportId)",
          "157:         self.assertEqual(len(comments), 1)",
          "159:         num_comment = self._cc_client.getCommentCount(bug.reportId)",
          "160:         self.assertEqual(num_comment, 1)",
          "162:         # Edit the message of the first remaining comment",
          "164:         success = self._cc_client.updateComment(comments[0].id, new_msg)",
          "165:         self.assertTrue(success)",
          "166:         logging.debug('Comment edited successfully')",
          "",
          "[Removed Lines]",
          "163:         new_msg = \"New msg'\\\"`\"",
          "",
          "[Added Lines]",
          "160:         self.assertIn(html.escape(first_msg), comments[0].message)",
          "166:         new_msg = \"New msg'\\\"` <img />\"",
          "167:         new_msg_escaped = html.escape(new_msg)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:         user_comments, system_comments = separate_comments(comments)",
          "181:         self.assertEqual(len(user_comments), 1)",
          "183:         self.assertEqual(len(system_comments), 1)",
          "185:         # Test user and system comments fetched",
          "186:         details = self._cc_client.getReportDetails(bug.reportId)",
          "",
          "[Removed Lines]",
          "182:         self.assertEqual(user_comments[0].message, new_msg)",
          "",
          "[Added Lines]",
          "186:         self.assertEqual(user_comments[0].message, new_msg_escaped)",
          "188:         self.assertIn(new_msg_escaped, system_comments[0].message)",
          "",
          "---------------"
        ],
        "web/tests/functional/export_import/test_export_import.py||web/tests/functional/export_import/test_export_import.py": [
          "File: web/tests/functional/export_import/test_export_import.py -> web/tests/functional/export_import/test_export_import.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:         comments = self._cc_client.getComments(bug.reportId)",
          "90:         self.assertEqual(len(comments), 0)",
          "93:         success = self._cc_client.addComment(bug.reportId, comment1)",
          "94:         self.assertTrue(success)",
          "95:         logging.debug('Bug commented successfully')",
          "",
          "[Removed Lines]",
          "92:         comment1 = CommentData(author='anybody', message='First msg')",
          "",
          "[Added Lines]",
          "91:         comment1 = CommentData(author='anybody', message='First msg <img />')",
          "",
          "---------------"
        ],
        "web/tests/functional/store/test_store.py||web/tests/functional/store/test_store.py": [
          "File: web/tests/functional/store/test_store.py -> web/tests/functional/store/test_store.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: store tests.",
          "11: \"\"\"",
          "14: import json",
          "15: import os",
          "16: import shlex",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import html",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:             '-d', 'core.DivideZero', '-e', 'deadcode.DeadStores']",
          "182:         codechecker.analyze(cfg, self._divide_zero_workspace)",
          "184:         cfg['reportdir'] = report_dir2",
          "185:         cfg['checkers'] = [",
          "186:             '-e', 'core.DivideZero', '-d', 'deadcode.DeadStores']",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:         with open(os.path.join(report_dir1, 'metadata.json'), 'r+',",
          "185:                   encoding=\"utf-8\", errors=\"ignore\") as f:",
          "186:             data = json.load(f)",
          "187:             data[\"tools\"][0][\"command\"].append(\"<img />\")",
          "189:             f.seek(0)",
          "190:             f.truncate()",
          "191:             json.dump(data, f)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:             self.assertTrue(",
          "236:                 any(report_dir2 in i.analyzerCommand for i in analysis_info))",
          "238:             # Get analysis info for a report.",
          "239:             analysis_info_filter = AnalysisInfoFilter(",
          "240:                 reportId=report['reportId'])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:             self.assertTrue(all(",
          "248:                 '<' not in i.analyzerCommand for i in analysis_info))",
          "249:             self.assertTrue(any(",
          "250:                 html.escape('<') in i.analyzerCommand for i in analysis_info))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c9ce79466be9f4c1b2333162ac4ddf30435a375",
      "candidate_info": {
        "commit_hash": "8c9ce79466be9f4c1b2333162ac4ddf30435a375",
        "repo": "Ericsson/codechecker",
        "commit_url": "https://github.com/Ericsson/codechecker/commit/8c9ce79466be9f4c1b2333162ac4ddf30435a375",
        "files": [
          "web/server/codechecker_server/api/report_server.py",
          "web/tests/functional/comment/test_comment.py",
          "web/tests/functional/export_import/test_export_import.py",
          "web/tests/functional/store/test_store.py"
        ],
        "message": "[server][gui] Escape values for v-html attributes\n\nWe are using `v-html` attribute on the UI side to dinamically rendering\ncomments and analyzer commands. This can be very dangerous because it can\neasily lead to XSS vulnerabilities. To solve this problem the server\nwill always return the escaped version of these values which can be safely\nrendered on the UI.",
        "before_after_code_files": [
          "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
          "web/tests/functional/comment/test_comment.py||web/tests/functional/comment/test_comment.py",
          "web/tests/functional/export_import/test_export_import.py||web/tests/functional/export_import/test_export_import.py",
          "web/tests/functional/store/test_store.py||web/tests/functional/store/test_store.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
            "web/tests/functional/comment/test_comment.py||web/tests/functional/comment/test_comment.py",
            "web/tests/functional/export_import/test_export_import.py||web/tests/functional/export_import/test_export_import.py",
            "web/tests/functional/store/test_store.py||web/tests/functional/store/test_store.py"
          ],
          "candidate": [
            "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py",
            "web/tests/functional/comment/test_comment.py||web/tests/functional/comment/test_comment.py",
            "web/tests/functional/export_import/test_export_import.py||web/tests/functional/export_import/test_export_import.py",
            "web/tests/functional/store/test_store.py||web/tests/functional/store/test_store.py"
          ]
        }
      },
      "candidate_diff": {
        "web/server/codechecker_server/api/report_server.py||web/server/codechecker_server/api/report_server.py": [
          "File: web/server/codechecker_server/api/report_server.py -> web/server/codechecker_server/api/report_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: \"\"\"",
          "12: import base64",
          "13: import json",
          "14: import os",
          "15: import re",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import html",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "790:         if system_comment:",
          "791:             for idx, value in enumerate(elements[1:]):",
          "792:                 system_comment = system_comment.replace(",
          "799: def create_review_data(review_status):",
          "",
          "[Removed Lines]",
          "793:                     '{' + str(idx) + '}', value)",
          "794:             message = system_comment",
          "796:     return message",
          "",
          "[Added Lines]",
          "794:                     '{' + str(idx) + '}', html.escape(value))",
          "795:             return system_comment",
          "797:     return html.escape(message)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1273:         analysis_info = self.getAnalysisInfo(",
          "1274:             analysis_info_filter, limit, offset)",
          "1278:     @exc_to_thrift_reqfail",
          "1279:     @timeit",
          "",
          "[Removed Lines]",
          "1276:         return \"; \".join([i.analyzerCommand for i in analysis_info])",
          "",
          "[Added Lines]",
          "1277:         return \"; \".join([html.escape(i.analyzerCommand)",
          "1278:                           for i in analysis_info])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1326:                         zlib.decompress(cmd.analyzer_command).decode('utf-8')",
          "1328:                     res.append(ttypes.AnalysisInfo(",
          "1331:         return res",
          "",
          "[Removed Lines]",
          "1329:                         analyzerCommand=command))",
          "",
          "[Added Lines]",
          "1331:                         analyzerCommand=html.escape(command)))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1909:         \"\"\" Add new comment for the given bug. \"\"\"",
          "1910:         self.__require_access()",
          "1913:             raise codechecker_api_shared.ttypes.RequestFailed(",
          "1914:                 codechecker_api_shared.ttypes.ErrorCode.GENERAL,",
          "1915:                 'The comment message can not be empty!')",
          "",
          "[Removed Lines]",
          "1912:         if not comment_data.message.strip():",
          "",
          "[Added Lines]",
          "1914:         if not comment_data.message or not comment_data.message.strip():",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2119:                             name=commit[\"author\"][\"name\"],",
          "2120:                             email=commit[\"author\"][\"email\"]),",
          "2121:                         summary=commit[\"summary\"],",
          "2123:                         committedDateTime=commit[\"committed_datetime\"],",
          "2124:                     )",
          "2125:                     for commitHash, commit in blame_info[\"commits\"].items()",
          "",
          "[Removed Lines]",
          "2122:                         message=commit[\"message\"],",
          "",
          "[Added Lines]",
          "2124:                         message=html.escape(commit[\"message\"]),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2989:                 comment_data = ttypes.CommentData(",
          "2990:                     id=data.id,",
          "2991:                     author=data.author,",
          "2993:                     createdAt=str(data.created_at),",
          "2994:                     kind=data.kind)",
          "2995:                 comment_data_list[report_id].append(comment_data)",
          "",
          "[Removed Lines]",
          "2992:                     message=data.message.decode('utf-8'),",
          "",
          "[Added Lines]",
          "2994:                     message=html.unescape(data.message.decode('utf-8')),",
          "",
          "---------------"
        ],
        "web/tests/functional/comment/test_comment.py||web/tests/functional/comment/test_comment.py": [
          "File: web/tests/functional/comment/test_comment.py -> web/tests/functional/comment/test_comment.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: Report commenting tests.",
          "11: \"\"\"",
          "14: import logging",
          "15: import os",
          "16: import unittest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import html",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:         self.assertEqual(num_comment, 0)",
          "104:         # Try to add a new comment for the first bug",
          "106:         success = self._cc_client.addComment(bug.reportId, comment1)",
          "107:         self.assertTrue(success)",
          "108:         logging.debug('Bug commented successfully')",
          "",
          "[Removed Lines]",
          "105:         comment1 = CommentData(author='anybody', message='First msg')",
          "",
          "[Added Lines]",
          "105:         first_msg = 'First msg <img />'",
          "106:         comment1 = CommentData(author='anybody', message=first_msg)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156:         comments = self._cc_client.getComments(bug.reportId)",
          "157:         self.assertEqual(len(comments), 1)",
          "159:         num_comment = self._cc_client.getCommentCount(bug.reportId)",
          "160:         self.assertEqual(num_comment, 1)",
          "162:         # Edit the message of the first remaining comment",
          "164:         success = self._cc_client.updateComment(comments[0].id, new_msg)",
          "165:         self.assertTrue(success)",
          "166:         logging.debug('Comment edited successfully')",
          "",
          "[Removed Lines]",
          "163:         new_msg = \"New msg'\\\"`\"",
          "",
          "[Added Lines]",
          "160:         self.assertIn(html.escape(first_msg), comments[0].message)",
          "166:         new_msg = \"New msg'\\\"` <img />\"",
          "167:         new_msg_escaped = html.escape(new_msg)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:         user_comments, system_comments = separate_comments(comments)",
          "181:         self.assertEqual(len(user_comments), 1)",
          "183:         self.assertEqual(len(system_comments), 1)",
          "185:         # Test user and system comments fetched",
          "186:         details = self._cc_client.getReportDetails(bug.reportId)",
          "",
          "[Removed Lines]",
          "182:         self.assertEqual(user_comments[0].message, new_msg)",
          "",
          "[Added Lines]",
          "186:         self.assertEqual(user_comments[0].message, new_msg_escaped)",
          "188:         self.assertIn(new_msg_escaped, system_comments[0].message)",
          "",
          "---------------"
        ],
        "web/tests/functional/export_import/test_export_import.py||web/tests/functional/export_import/test_export_import.py": [
          "File: web/tests/functional/export_import/test_export_import.py -> web/tests/functional/export_import/test_export_import.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:         comments = self._cc_client.getComments(bug.reportId)",
          "90:         self.assertEqual(len(comments), 0)",
          "93:         success = self._cc_client.addComment(bug.reportId, comment1)",
          "94:         self.assertTrue(success)",
          "95:         logging.debug('Bug commented successfully')",
          "",
          "[Removed Lines]",
          "92:         comment1 = CommentData(author='anybody', message='First msg')",
          "",
          "[Added Lines]",
          "91:         comment1 = CommentData(author='anybody', message='First msg <img />')",
          "",
          "---------------"
        ],
        "web/tests/functional/store/test_store.py||web/tests/functional/store/test_store.py": [
          "File: web/tests/functional/store/test_store.py -> web/tests/functional/store/test_store.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: store tests.",
          "11: \"\"\"",
          "14: import json",
          "15: import os",
          "16: import shlex",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import html",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:             '-d', 'core.DivideZero', '-e', 'deadcode.DeadStores']",
          "182:         codechecker.analyze(cfg, self._divide_zero_workspace)",
          "184:         cfg['reportdir'] = report_dir2",
          "185:         cfg['checkers'] = [",
          "186:             '-e', 'core.DivideZero', '-d', 'deadcode.DeadStores']",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:         with open(os.path.join(report_dir1, 'metadata.json'), 'r+',",
          "185:                   encoding=\"utf-8\", errors=\"ignore\") as f:",
          "186:             data = json.load(f)",
          "187:             data[\"tools\"][0][\"command\"].append(\"<img />\")",
          "189:             f.seek(0)",
          "190:             f.truncate()",
          "191:             json.dump(data, f)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:             self.assertTrue(",
          "236:                 any(report_dir2 in i.analyzerCommand for i in analysis_info))",
          "238:             # Get analysis info for a report.",
          "239:             analysis_info_filter = AnalysisInfoFilter(",
          "240:                 reportId=report['reportId'])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:             self.assertTrue(all(",
          "248:                 '<' not in i.analyzerCommand for i in analysis_info))",
          "249:             self.assertTrue(any(",
          "250:                 html.escape('<') in i.analyzerCommand for i in analysis_info))",
          "",
          "---------------"
        ]
      }
    }
  ]
}