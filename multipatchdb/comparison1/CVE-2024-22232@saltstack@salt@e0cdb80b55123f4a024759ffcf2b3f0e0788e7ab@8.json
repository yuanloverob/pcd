{
  "cve_id": "CVE-2024-22232",
  "cve_desc": "A specially crafted url can be created which leads to a directory traversal in the salt file server.\nA malicious user can read an arbitrary file from a Salt master\u2019s filesystem.",
  "repo": "saltstack/salt",
  "patch_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
  "patch_info": {
    "commit_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "files": [
      "salt/fileserver/__init__.py",
      "salt/fileserver/roots.py",
      "salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py"
    ],
    "message": "CVE fix",
    "before_after_code_files": [
      "salt/fileserver/__init__.py||salt/fileserver/__init__.py",
      "salt/fileserver/roots.py||salt/fileserver/roots.py",
      "salt/master.py||salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py"
    ]
  },
  "patch_diff": {
    "salt/fileserver/__init__.py||salt/fileserver/__init__.py": [
      "File: salt/fileserver/__init__.py -> salt/fileserver/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "568:         saltenv = salt.utils.stringutils.to_unicode(saltenv)",
      "569:         back = self.backends(back)",
      "570:         kwargs = {}",
      "576:         if salt.utils.url.is_escaped(path):",
      "577:             # don't attempt to find URL query arguments in the path",
      "578:             path = salt.utils.url.unescape(path)",
      "",
      "[Removed Lines]",
      "571:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "572:         if os.path.isabs(path):",
      "573:             return fnd",
      "574:         if \"../\" in path:",
      "575:             return fnd",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "588:                     args = comp.split(\"=\", 1)",
      "589:                     kwargs[args[0]] = args[1]",
      "591:         if \"env\" in kwargs:",
      "592:             # \"env\" is not supported; Use \"saltenv\".",
      "593:             kwargs.pop(\"env\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "587:         if os.path.isabs(path) or \"../\" in path:",
      "588:             return fnd",
      "",
      "---------------"
    ],
    "salt/fileserver/roots.py||salt/fileserver/roots.py": [
      "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import salt.utils.path",
      "28: import salt.utils.platform",
      "29: import salt.utils.stringutils",
      "30: import salt.utils.versions",
      "32: log = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import salt.utils.verify",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:         if saltenv == \"__env__\":",
      "99:             root = root.replace(\"__env__\", actual_saltenv)",
      "100:         full = os.path.join(root, path)",
      "101:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
      "102:             fnd[\"path\"] = full",
      "103:             fnd[\"rel\"] = path",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:         # Refuse to serve file that is not under the root.",
      "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
      "105:             continue",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:     ret[\"dest\"] = fnd[\"rel\"]",
      "129:     gzip = load.get(\"gzip\", None)",
      "130:     fpath = os.path.normpath(fnd[\"path\"])",
      "131:     with salt.utils.files.fopen(fpath, \"rb\") as fp_:",
      "132:         fp_.seek(load[\"loc\"])",
      "133:         data = fp_.read(__opts__[\"file_buffer_size\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:     actual_saltenv = saltenv = load[\"saltenv\"]",
      "139:     if saltenv not in __opts__[\"file_roots\"]:",
      "140:         if \"__env__\" in __opts__[\"file_roots\"]:",
      "141:             log.debug(",
      "142:                 \"salt environment '%s' maps to __env__ file_roots directory\", saltenv",
      "143:             )",
      "144:             saltenv = \"__env__\"",
      "145:         else:",
      "146:             return fnd",
      "147:     file_in_root = False",
      "148:     for root in __opts__[\"file_roots\"][saltenv]:",
      "149:         if saltenv == \"__env__\":",
      "150:             root = root.replace(\"__env__\", actual_saltenv)",
      "151:         # Refuse to serve file that is not under the root.",
      "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
      "153:             file_in_root = True",
      "154:     if not file_in_root:",
      "155:         return ret",
      "",
      "---------------"
    ],
    "salt/master.py||salt/master.py": [
      "File: salt/master.py -> salt/master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:         \"\"\"",
      "1037:         key = payload[\"enc\"]",
      "1038:         load = payload[\"load\"]",
      "1040:         raise salt.ext.tornado.gen.Return(ret)",
      "1042:     def _post_stats(self, start, cmd):",
      "",
      "[Removed Lines]",
      "1039:         ret = {\"aes\": self._handle_aes, \"clear\": self._handle_clear}[key](load)",
      "",
      "[Added Lines]",
      "1039:         if key == \"aes\":",
      "1040:             ret = self.handle_aes(load)",
      "1041:         else:",
      "1042:             ret = self.handle_clear(load)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1738:                 self.mminion.returners[fstr](load[\"jid\"], load[\"load\"])",
      "1740:             # Register the syndic",
      "1741:             syndic_cache_path = os.path.join(",
      "1742:                 self.opts[\"cachedir\"], \"syndics\", load[\"id\"]",
      "1743:             )",
      "1745:                 path_name = os.path.split(syndic_cache_path)[0]",
      "1746:                 if not os.path.exists(path_name):",
      "1747:                     os.makedirs(path_name)",
      "",
      "[Removed Lines]",
      "1744:             if not os.path.exists(syndic_cache_path):",
      "",
      "[Added Lines]",
      "1745:             # We are creating a path using user suplied input. Use the",
      "1746:             # clean_path to prevent a directory traversal.",
      "1747:             root = os.path.join(self.opts[\"cachedir\"], \"syndics\")",
      "1751:             if salt.utils.verify.clean_path(",
      "1752:                 root, syndic_cache_path",
      "1753:             ) and not os.path.exists(syndic_cache_path):",
      "",
      "---------------"
    ],
    "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
      "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     return dirname",
      "56: @pytest.fixture",
      "57: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
      "58:     opts = temp_salt_master.config.copy()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: @pytest.fixture(autouse=True)",
      "57: def testfilepath(tmp_state_tree, testfile):",
      "58:     return tmp_state_tree / testfile.name",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     assert full_path_to_file == ret[\"path\"]",
      "79:     with patch.dict(roots.__opts__, {\"file_buffer_size\": 262144}):",
      "80:         load = {",
      "81:             \"saltenv\": \"base\",",
      "83:             \"loc\": 0,",
      "84:         }",
      "86:         ret = roots.serve_file(load, fnd)",
      "89:             data = fp_.read()",
      "91:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
      "",
      "[Removed Lines]",
      "78: def test_serve_file(testfile):",
      "82:             \"path\": str(testfile),",
      "85:         fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
      "88:         with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
      "",
      "[Added Lines]",
      "83: def test_serve_file(testfilepath):",
      "87:             \"path\": str(testfilepath),",
      "90:         fnd = {\"path\": str(testfilepath), \"rel\": \"testfile\"}",
      "93:         with salt.utils.files.fopen(str(testfilepath), \"rb\") as fp_:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:     # between Python releases.",
      "237:     lines_written = sorted(mtime_map_mock.write_calls())",
      "238:     expected = sorted(",
      "240:         for key, val in new_mtime_map.items()",
      "241:     )",
      "242:     assert lines_written == expected, lines_written",
      "",
      "[Removed Lines]",
      "239:         salt.utils.stringutils.to_bytes(\"{key}:{val}\\n\".format(key=key, val=val))",
      "",
      "[Added Lines]",
      "244:         salt.utils.stringutils.to_bytes(f\"{key}:{val}\\n\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "277:         },",
      "278:         \"backend\": \"roots\",",
      "279:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287: def test_find_file_not_in_root(tmp_state_tree):",
      "288:     \"\"\"",
      "289:     Fileroots should never 'find' a file that is outside of it's root.",
      "290:     \"\"\"",
      "291:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "292:     badfile.write_text(\"Bad file\")",
      "293:     badpath = f\"../bar\"",
      "294:     ret = roots.find_file(badpath)",
      "295:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "296:     badpath = f\"{tmp_state_tree / '..' / 'bar'}\"",
      "297:     ret = roots.find_file(badpath)",
      "298:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "301: def test_serve_file_not_in_root(tmp_state_tree):",
      "302:     \"\"\"",
      "303:     Fileroots should never 'serve' a file that is outside of it's root.",
      "304:     \"\"\"",
      "305:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "306:     badfile.write_text(\"Bad file\")",
      "307:     badpath = f\"../bar\"",
      "308:     load = {\"path\": \"salt://|..\\\\bar\", \"saltenv\": \"base\", \"loc\": 0}",
      "309:     fnd = {",
      "310:         \"path\": f\"{tmp_state_tree / '..' / 'bar'}\",",
      "311:         \"rel\": f\"{pathlib.Path('..') / 'bar'}\",",
      "312:     }",
      "313:     ret = roots.serve_file(load, fnd)",
      "314:     assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
      "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: \"\"\"",
      "5: import datetime",
      "6: import os",
      "7: import time",
      "9: import salt.fileserver",
      "10: import salt.utils.files",
      "13: def test_diff_with_diffent_keys():",
      "14:     \"\"\"",
      "15:     Test that different maps are indeed reported different",
      "16:     \"\"\"",
      "17:     map1 = {\"file1\": 1234}",
      "18:     map2 = {\"file2\": 1234}",
      "19:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "22: def test_diff_with_diffent_values():",
      "23:     \"\"\"",
      "24:     Test that different maps are indeed reported different",
      "25:     \"\"\"",
      "26:     map1 = {\"file1\": 12345}",
      "27:     map2 = {\"file1\": 1234}",
      "28:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "31: def test_whitelist():",
      "32:     opts = {",
      "33:         \"fileserver_backend\": [\"roots\", \"git\", \"s3fs\", \"hgfs\", \"svn\"],",
      "34:         \"extension_modules\": \"\",",
      "35:     }",
      "36:     fs = salt.fileserver.Fileserver(opts)",
      "37:     assert sorted(fs.servers.whitelist) == sorted(",
      "38:         [\"git\", \"gitfs\", \"hg\", \"hgfs\", \"svn\", \"svnfs\", \"roots\", \"s3fs\"]",
      "39:     ), fs.servers.whitelist",
      "42: def test_future_file_list_cache_file_ignored(tmp_path):",
      "43:     opts = {",
      "44:         \"fileserver_backend\": [\"roots\"],",
      "45:         \"cachedir\": tmp_path,",
      "46:         \"extension_modules\": \"\",",
      "47:     }",
      "49:     back_cachedir = os.path.join(tmp_path, \"file_lists/roots\")",
      "50:     os.makedirs(os.path.join(back_cachedir))",
      "52:     # Touch a couple files",
      "53:     for filename in (\"base.p\", \"foo.txt\"):",
      "54:         with salt.utils.files.fopen(os.path.join(back_cachedir, filename), \"wb\") as _f:",
      "55:             if filename == \"base.p\":",
      "56:                 _f.write(b\"\\x80\")",
      "58:     # Set modification time to file list cache file to 1 year in the future",
      "59:     now = datetime.datetime.utcnow()",
      "60:     future = now + datetime.timedelta(days=365)",
      "61:     mod_time = time.mktime(future.timetuple())",
      "62:     os.utime(os.path.join(back_cachedir, \"base.p\"), (mod_time, mod_time))",
      "64:     list_cache = os.path.join(back_cachedir, \"base.p\")",
      "65:     w_lock = os.path.join(back_cachedir, \".base.w\")",
      "66:     ret = salt.fileserver.check_file_list_cache(opts, \"files\", list_cache, w_lock)",
      "67:     assert (",
      "68:         ret[1] is True",
      "69:     ), \"Cache file list cache file is not refreshed when future modification time\"",
      "72: def test_file_server_url_escape(tmp_path):",
      "73:     (tmp_path / \"srv\").mkdir()",
      "74:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "75:     (tmp_path / \"foo\").mkdir()",
      "76:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "77:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "78:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "79:     opts = {",
      "80:         \"fileserver_backend\": [\"roots\"],",
      "81:         \"extension_modules\": \"\",",
      "82:         \"optimization_order\": [",
      "83:             0,",
      "84:         ],",
      "85:         \"file_roots\": {",
      "86:             \"base\": [fileroot],",
      "87:         },",
      "88:         \"file_ignore_regex\": \"\",",
      "89:         \"file_ignore_glob\": \"\",",
      "90:     }",
      "91:     fs = salt.fileserver.Fileserver(opts)",
      "92:     ret = fs.find_file(",
      "93:         \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "94:         \"base\",",
      "95:     )",
      "96:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "99: def test_file_server_serve_url_escape(tmp_path):",
      "100:     (tmp_path / \"srv\").mkdir()",
      "101:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "102:     (tmp_path / \"foo\").mkdir()",
      "103:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "104:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "105:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "106:     opts = {",
      "107:         \"fileserver_backend\": [\"roots\"],",
      "108:         \"extension_modules\": \"\",",
      "109:         \"optimization_order\": [",
      "110:             0,",
      "111:         ],",
      "112:         \"file_roots\": {",
      "113:             \"base\": [fileroot],",
      "114:         },",
      "115:         \"file_ignore_regex\": \"\",",
      "116:         \"file_ignore_glob\": \"\",",
      "117:         \"file_buffer_size\": 2048,",
      "118:     }",
      "119:     fs = salt.fileserver.Fileserver(opts)",
      "120:     ret = fs.serve_file(",
      "121:         {",
      "122:             \"path\": \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "123:             \"saltenv\": \"base\",",
      "124:             \"loc\": 0,",
      "125:         }",
      "126:     )",
      "127:     assert ret == {\"data\": \"\", \"dest\": \"\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py": [
      "File: tests/pytests/unit/test_master.py -> tests/pytests/unit/test_master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import time",
      "3: import pytest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pathlib",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     with patch.object(encrypted_requests, \"_return\", autospec=True) as fake_return:",
      "161:         encrypted_requests._syndic_return(payload)",
      "162:         fake_return.assert_called_with(expected_return)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166: def test_syndic_return_cache_dir_creation(encrypted_requests):",
      "167:     \"\"\"master's cachedir for a syndic will be created by AESFuncs._syndic_return method\"\"\"",
      "168:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "169:     assert not (cachedir / \"syndics\").exists()",
      "170:     encrypted_requests._syndic_return(",
      "171:         {",
      "172:             \"id\": \"mamajama\",",
      "173:             \"jid\": \"\",",
      "174:             \"return\": {},",
      "175:         }",
      "176:     )",
      "177:     assert (cachedir / \"syndics\").exists()",
      "178:     assert (cachedir / \"syndics\" / \"mamajama\").exists()",
      "181: def test_syndic_return_cache_dir_creation_traversal(encrypted_requests):",
      "182:     \"\"\"",
      "183:     master's  AESFuncs._syndic_return method cachdir creation is not vulnerable to a directory traversal",
      "184:     \"\"\"",
      "185:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "186:     assert not (cachedir / \"syndics\").exists()",
      "187:     encrypted_requests._syndic_return(",
      "188:         {",
      "189:             \"id\": \"../mamajama\",",
      "190:             \"jid\": \"\",",
      "191:             \"return\": {},",
      "192:         }",
      "193:     )",
      "194:     assert not (cachedir / \"syndics\").exists()",
      "195:     assert not (cachedir / \"mamajama\").exists()",
      "",
      "---------------"
    ],
    "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py": [
      "File: tests/unit/test_fileserver.py -> tests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8521ee290f5c53a718a635e323ceb99e41f008f",
      "candidate_info": {
        "commit_hash": "f8521ee290f5c53a718a635e323ceb99e41f008f",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/f8521ee290f5c53a718a635e323ceb99e41f008f",
        "files": [
          "noxfile.py",
          "pkg-tests-pytest.ini"
        ],
        "message": "We no longer have to maintain `pkg-tests-pytest.ini`\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "noxfile.py||noxfile.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "noxfile.py||noxfile.py": [
          "File: noxfile.py -> noxfile.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1842:         )",
          "1844:     chunks = {",
          "1846:         \"upgrade\": [",
          "1847:             \"--upgrade\",",
          "1848:             \"--no-uninstall\",",
          "",
          "[Removed Lines]",
          "1845:         \"install\": [\"tests/pytests/pkg/\"],",
          "",
          "[Added Lines]",
          "1845:         \"install\": [",
          "1846:             \"tests/pytests/pkg/\",",
          "1847:         ],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1895:     pytest_args = (",
          "1896:         cmd_args[:]",
          "1897:         + [",
          "1900:             f\"--junitxml=artifacts/xml-unittests-output/test-results-{chunk}.xml\",",
          "1901:             f\"--log-file=artifacts/logs/runtests-{chunk}.log\",",
          "1902:         ]",
          "",
          "[Removed Lines]",
          "1898:             \"-c\",",
          "1899:             str(REPO_ROOT / \"pkg-tests-pytest.ini\"),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1915:         pytest_args = (",
          "1916:             cmd_args[:]",
          "1917:             + [",
          "1920:                 f\"--junitxml=artifacts/xml-unittests-output/test-results-{chunk}-rerun.xml\",",
          "1921:                 f\"--log-file=artifacts/logs/runtests-{chunk}-rerun.log\",",
          "1922:                 \"--lf\",",
          "",
          "[Removed Lines]",
          "1918:                 \"-c\",",
          "1919:                 str(REPO_ROOT / \"pkg-tests-pytest.ini\"),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1936:         pytest_args = (",
          "1937:             cmd_args[:]",
          "1938:             + [",
          "1941:                 \"--no-install\",",
          "1942:                 f\"--junitxml=artifacts/xml-unittests-output/test-results-install.xml\",",
          "1943:                 f\"--log-file=artifacts/logs/runtests-install.log\",",
          "",
          "[Removed Lines]",
          "1939:                 \"-c\",",
          "1940:                 str(REPO_ROOT / \"pkg-tests-pytest.ini\"),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1955:             pytest_args = (",
          "1956:                 cmd_args[:]",
          "1957:                 + [",
          "1960:                     \"--no-install\",",
          "1961:                     f\"--junitxml=artifacts/xml-unittests-output/test-results-install-rerun.xml\",",
          "1962:                     f\"--log-file=artifacts/logs/runtests-install-rerun.log\",",
          "",
          "[Removed Lines]",
          "1958:                     \"-c\",",
          "1959:                     str(REPO_ROOT / \"pkg-tests-pytest.ini\"),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d5958d9e51bf9c0ba3d7099882f295c2f0b11b9",
      "candidate_info": {
        "commit_hash": "6d5958d9e51bf9c0ba3d7099882f295c2f0b11b9",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/6d5958d9e51bf9c0ba3d7099882f295c2f0b11b9",
        "files": [
          "tests/pytests/unit/crypt/__init__.py",
          "tests/pytests/unit/crypt/test_crypt.py",
          "tests/pytests/unit/crypt/test_crypt_cryptodome.py",
          "tests/pytests/unit/crypt/test_crypt_m2crypto.py",
          "tests/pytests/unit/test_crypt.py",
          "tests/unit/test_crypt.py"
        ],
        "message": "Migrate some crypt tests to pytest\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/unit/crypt/__init__.py||tests/pytests/unit/crypt/__init__.py",
          "tests/pytests/unit/crypt/test_crypt_cryptodome.py||tests/pytests/unit/crypt/test_crypt_cryptodome.py",
          "tests/pytests/unit/crypt/test_crypt_m2crypto.py||tests/pytests/unit/crypt/test_crypt_m2crypto.py",
          "tests/unit/test_crypt.py||tests/unit/test_crypt.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/crypt/__init__.py||tests/pytests/unit/crypt/__init__.py": [
          "File: tests/pytests/unit/crypt/__init__.py -> tests/pytests/unit/crypt/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: PRIVKEY_DATA = (",
          "2:     \"-----BEGIN RSA PRIVATE KEY-----\\n\"",
          "3:     \"MIIEpAIBAAKCAQEA75GR6ZTv5JOv90Vq8tKhKC7YQnhDIo2hM0HVziTEk5R4UQBW\\n\"",
          "4:     \"a0CKytFMbTONY2msEDwX9iA0x7F5Lgj0X8eD4ZMsYqLzqjWMekLC8bjhxc+EuPo9\\n\"",
          "5:     \"Dygu3mJ2VgRC7XhlFpmdo5NN8J2E7B/CNB3R4hOcMMZNZdi0xLtFoTfwU61UPfFX\\n\"",
          "6:     \"14mV2laqLbvDEfQLJhUTDeFFV8EN5Z4H1ttLP3sMXJvc3EvM0JiDVj4l1TWFUHHz\\n\"",
          "7:     \"eFgCA1Im0lv8i7PFrgW7nyMfK9uDSsUmIp7k6ai4tVzwkTmV5PsriP1ju88Lo3MB\\n\"",
          "8:     \"4/sUmDv/JmlZ9YyzTO3Po8Uz3Aeq9HJWyBWHAQIDAQABAoIBAGOzBzBYZUWRGOgl\\n\"",
          "9:     \"IY8QjTT12dY/ymC05GM6gMobjxuD7FZ5d32HDLu/QrknfS3kKlFPUQGDAbQhbbb0\\n\"",
          "10:     \"zw6VL5NO9mfOPO2W/3FaG1sRgBQcerWonoSSSn8OJwVBHMFLG3a+U1Zh1UvPoiPK\\n\"",
          "11:     \"S734swIM+zFpNYivGPvOm/muF/waFf8tF/47t1cwt/JGXYQnkG/P7z0vp47Irpsb\\n\"",
          "12:     \"Yjw7vPe4BnbY6SppSxscW3KoV7GtJLFKIxAXbxsuJMF/rYe3O3w2VKJ1Sug1VDJl\\n\"",
          "13:     \"/GytwAkSUer84WwP2b07Wn4c5pCnmLslMgXCLkENgi1NnJMhYVOnckxGDZk54hqP\\n\"",
          "14:     \"9RbLnkkCgYEA/yKuWEvgdzYRYkqpzB0l9ka7Y00CV4Dha9Of6GjQi9i4VCJ/UFVr\\n\"",
          "15:     \"UlhTo5y0ZzpcDAPcoZf5CFZsD90a/BpQ3YTtdln2MMCL/Kr3QFmetkmDrt+3wYnX\\n\"",
          "16:     \"sKESfsa2nZdOATRpl1antpwyD4RzsAeOPwBiACj4fkq5iZJBSI0bxrMCgYEA8GFi\\n\"",
          "17:     \"qAjgKh81/Uai6KWTOW2kX02LEMVRrnZLQ9VPPLGid4KZDDk1/dEfxjjkcyOxX1Ux\\n\"",
          "18:     \"Klu4W8ZEdZyzPcJrfk7PdopfGOfrhWzkREK9C40H7ou/1jUecq/STPfSOmxh3Y+D\\n\"",
          "19:     \"ifMNO6z4sQAHx8VaHaxVsJ7SGR/spr0pkZL+NXsCgYEA84rIgBKWB1W+TGRXJzdf\\n\"",
          "20:     \"yHIGaCjXpm2pQMN3LmP3RrcuZWm0vBt94dHcrR5l+u/zc6iwEDTAjJvqdU4rdyEr\\n\"",
          "21:     \"tfkwr7v6TNlQB3WvpWanIPyVzfVSNFX/ZWSsAgZvxYjr9ixw6vzWBXOeOb/Gqu7b\\n\"",
          "22:     \"cvpLkjmJ0wxDhbXtyXKhZA8CgYBZyvcQb+hUs732M4mtQBSD0kohc5TsGdlOQ1AQ\\n\"",
          "23:     \"McFcmbpnzDghkclyW8jzwdLMk9uxEeDAwuxWE/UEvhlSi6qdzxC+Zifp5NBc0fVe\\n\"",
          "24:     \"7lMx2mfJGxj5CnSqQLVdHQHB4zSXkAGB6XHbBd0MOUeuvzDPfs2voVQ4IG3FR0oc\\n\"",
          "25:     \"3/znuwKBgQChZGH3McQcxmLA28aUwOVbWssfXKdDCsiJO+PEXXlL0maO3SbnFn+Q\\n\"",
          "26:     \"Tyf8oHI5cdP7AbwDSx9bUfRPjg9dKKmATBFr2bn216pjGxK0OjYOCntFTVr0psRB\\n\"",
          "27:     \"CrKg52Qrq71/2l4V2NLQZU40Dr1bN9V+Ftd9L0pvpCAEAWpIbLXGDw==\\n\"",
          "28:     \"-----END RSA PRIVATE KEY-----\"",
          "29: )",
          "31: PUBKEY_DATA = (",
          "32:     \"-----BEGIN PUBLIC KEY-----\\n\"",
          "33:     \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA75GR6ZTv5JOv90Vq8tKh\\n\"",
          "34:     \"KC7YQnhDIo2hM0HVziTEk5R4UQBWa0CKytFMbTONY2msEDwX9iA0x7F5Lgj0X8eD\\n\"",
          "35:     \"4ZMsYqLzqjWMekLC8bjhxc+EuPo9Dygu3mJ2VgRC7XhlFpmdo5NN8J2E7B/CNB3R\\n\"",
          "36:     \"4hOcMMZNZdi0xLtFoTfwU61UPfFX14mV2laqLbvDEfQLJhUTDeFFV8EN5Z4H1ttL\\n\"",
          "37:     \"P3sMXJvc3EvM0JiDVj4l1TWFUHHzeFgCA1Im0lv8i7PFrgW7nyMfK9uDSsUmIp7k\\n\"",
          "38:     \"6ai4tVzwkTmV5PsriP1ju88Lo3MB4/sUmDv/JmlZ9YyzTO3Po8Uz3Aeq9HJWyBWH\\n\"",
          "39:     \"AQIDAQAB\\n\"",
          "40:     \"-----END PUBLIC KEY-----\"",
          "41: )",
          "43: MSG = b\"It's me, Mario\"",
          "45: SIG = (",
          "46:     b\"\\x07\\xf3\\xb1\\xe7\\xdb\\x06\\xf4_\\xe2\\xdc\\xcb!F\\xfb\\xbex{W\\x1d\\xe4E\"",
          "47:     b\"\\xd3\\r\\xc5\\x90\\xca(\\x05\\x1d\\x99\\x8b\\x1aug\\x9f\\x95>\\x94\\x7f\\xe3+\"",
          "48:     b\"\\x12\\xfa\\x9c\\xd4\\xb8\\x02]\\x0e\\xa5\\xa3LL\\xc3\\xa2\\x8f+\\x83Z\\x1b\\x17\"",
          "49:     b'\\xbfT\\xd3\\xc7\\xfd\\x0b\\xf4\\xd7J\\xfe^\\x86q\"I\\xa3x\\xbc\\xd3$\\xe9M<\\xe1'",
          "50:     b\"\\x07\\xad\\xf2_\\x9f\\xfa\\xf7g(~\\xd8\\xf5\\xe7\\xda-\\xa3Ko\\xfc.\\x99\\xcf\"",
          "51:     b\"\\x9b\\xb9\\xc1U\\x97\\x82'\\xcb\\xc6\\x08\\xaa\\xa0\\xe4\\xd0\\xc1+\\xfc\\x86\"",
          "52:     b'\\r\\xe4y\\xb1#\\xd3\\x1dS\\x96D28\\xc4\\xd5\\r\\xd4\\x98\\x1a44\"\\xd7\\xc2\\xb4'",
          "53:     b\"]\\xa7\\x0f\\xa7Db\\x85G\\x8c\\xd6\\x94!\\x8af1O\\xf6g\\xd7\\x03\\xfd\\xb3\\xbc\"",
          "54:     b\"\\xce\\x9f\\xe7\\x015\\xb8\\x1d]AHK\\xa0\\x14m\\xda=O\\xa7\\xde\\xf2\\xff\\x9b\"",
          "55:     b\"\\x8e\\x83\\xc8j\\x11\\x1a\\x98\\x85\\xde\\xc5\\x91\\x07\\x84!\\x12^4\\xcb\\xa8\"",
          "56:     b\"\\x98\\x8a\\x8a&#\\xb9(#?\\x80\\x15\\x9eW\\xb5\\x12\\xd1\\x95S\\xf2<G\\xeb\\xf1\"",
          "57:     b\"\\x14H\\xb2\\xc4>\\xc3A\\xed\\x86x~\\xcfU\\xd5Q\\xfe~\\x10\\xd2\\x9b\"",
          "58: )",
          "",
          "---------------"
        ],
        "tests/pytests/unit/crypt/test_crypt_cryptodome.py||tests/pytests/unit/crypt/test_crypt_cryptodome.py": [
          "File: tests/pytests/unit/crypt/test_crypt_cryptodome.py -> tests/pytests/unit/crypt/test_crypt_cryptodome.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import os",
          "3: import pytest",
          "5: import salt.crypt",
          "6: from tests.support.mock import MagicMock, MockCall, mock_open, patch",
          "8: from . import MSG, PRIVKEY_DATA, PUBKEY_DATA, SIG",
          "10: try:",
          "11:     import M2Crypto  # pylint: disable=unused-import",
          "13:     HAS_M2 = True",
          "14: except ImportError:",
          "15:     HAS_M2 = False",
          "16: try:",
          "17:     from Cryptodome.PublicKey import RSA",
          "19:     HAS_PYCRYPTO_RSA = True",
          "20: except ImportError:",
          "21:     HAS_PYCRYPTO_RSA = False",
          "22: if not HAS_PYCRYPTO_RSA:",
          "23:     try:",
          "24:         from Crypto.PublicKey import RSA  # nosec",
          "26:         HAS_PYCRYPTO_RSA = True",
          "27:     except ImportError:",
          "28:         HAS_PYCRYPTO_RSA = False",
          "30: pytestmark = [",
          "31:     pytest.mark.skipif(not HAS_PYCRYPTO_RSA, reason=\"pycrypto >= 2.6 is not available\"),",
          "32:     pytest.mark.skipif(HAS_M2, reason=\"m2crypto is used by salt.crypt if installed\"),",
          "33: ]",
          "36: @pytest.mark.slow_test",
          "37: def test_gen_keys():",
          "38:     open_priv_wb = MockCall(\"/keydir{}keyname.pem\".format(os.sep), \"wb+\")",
          "39:     open_pub_wb = MockCall(\"/keydir{}keyname.pub\".format(os.sep), \"wb+\")",
          "41:     with patch.multiple(",
          "42:         os,",
          "43:         umask=MagicMock(),",
          "44:         chmod=MagicMock(),",
          "45:         access=MagicMock(return_value=True),",
          "46:     ):",
          "47:         with patch(\"salt.utils.files.fopen\", mock_open()) as m_open, patch(",
          "48:             \"os.path.isfile\", return_value=True",
          "49:         ):",
          "50:             result = salt.crypt.gen_keys(\"/keydir\", \"keyname\", 2048)",
          "51:             assert result == \"/keydir{}keyname.pem\".format(os.sep), result",
          "52:             assert open_priv_wb not in m_open.calls",
          "53:             assert open_pub_wb not in m_open.calls",
          "55:         with patch(\"salt.utils.files.fopen\", mock_open()) as m_open, patch(",
          "56:             \"os.path.isfile\", return_value=False",
          "57:         ):",
          "58:             salt.crypt.gen_keys(\"/keydir\", \"keyname\", 2048)",
          "59:             assert open_priv_wb in m_open.calls",
          "60:             assert open_pub_wb in m_open.calls",
          "63: @patch(\"os.umask\", MagicMock())",
          "64: @patch(\"os.chmod\", MagicMock())",
          "65: @patch(\"os.chown\", MagicMock(), create=True)",
          "66: @patch(\"os.access\", MagicMock(return_value=True))",
          "67: @pytest.mark.slow_test",
          "68: def test_gen_keys_with_passphrase():",
          "69:     key_path = os.path.join(os.sep, \"keydir\")",
          "70:     open_priv_wb = MockCall(os.path.join(key_path, \"keyname.pem\"), \"wb+\")",
          "71:     open_pub_wb = MockCall(os.path.join(key_path, \"keyname.pub\"), \"wb+\")",
          "73:     with patch(\"salt.utils.files.fopen\", mock_open()) as m_open, patch(",
          "74:         \"os.path.isfile\", return_value=True",
          "75:     ):",
          "76:         assert salt.crypt.gen_keys(",
          "77:             key_path, \"keyname\", 2048, passphrase=\"password\"",
          "78:         ) == os.path.join(key_path, \"keyname.pem\")",
          "79:         result = salt.crypt.gen_keys(key_path, \"keyname\", 2048, passphrase=\"password\")",
          "80:         assert result == os.path.join(key_path, \"keyname.pem\"), result",
          "81:         assert open_priv_wb not in m_open.calls",
          "82:         assert open_pub_wb not in m_open.calls",
          "84:     with patch(\"salt.utils.files.fopen\", mock_open()) as m_open, patch(",
          "85:         \"os.path.isfile\", return_value=False",
          "86:     ):",
          "87:         salt.crypt.gen_keys(key_path, \"keyname\", 2048)",
          "88:         assert open_priv_wb in m_open.calls",
          "89:         assert open_pub_wb in m_open.calls",
          "92: def test_sign_message():",
          "93:     key = RSA.importKey(PRIVKEY_DATA)",
          "94:     with patch(\"salt.crypt.get_rsa_key\", return_value=key):",
          "95:         assert SIG == salt.crypt.sign_message(\"/keydir/keyname.pem\", MSG)",
          "98: def test_sign_message_with_passphrase():",
          "99:     key = RSA.importKey(PRIVKEY_DATA)",
          "100:     with patch(\"salt.crypt.get_rsa_key\", return_value=key):",
          "101:         assert SIG == salt.crypt.sign_message(",
          "102:             \"/keydir/keyname.pem\", MSG, passphrase=\"password\"",
          "103:         )",
          "106: def test_verify_signature():",
          "107:     with patch(\"salt.utils.files.fopen\", mock_open(read_data=PUBKEY_DATA)):",
          "108:         assert salt.crypt.verify_signature(\"/keydir/keyname.pub\", MSG, SIG)",
          "",
          "---------------"
        ],
        "tests/pytests/unit/crypt/test_crypt_m2crypto.py||tests/pytests/unit/crypt/test_crypt_m2crypto.py": [
          "File: tests/pytests/unit/crypt/test_crypt_m2crypto.py -> tests/pytests/unit/crypt/test_crypt_m2crypto.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import os",
          "3: import pytest",
          "5: import salt.crypt",
          "6: from tests.support.mock import MagicMock, mock_open, patch",
          "8: from . import MSG, PRIVKEY_DATA, PUBKEY_DATA, SIG",
          "10: M2Crypto = pytest.importorskip(\"M2Crypto\")",
          "13: @pytest.mark.slow_test",
          "14: def test_gen_keys():",
          "15:     with patch(\"os.umask\", MagicMock()), patch(\"os.chmod\", MagicMock()), patch(",
          "16:         \"os.access\", MagicMock(return_value=True)",
          "17:     ):",
          "18:         with patch(\"M2Crypto.RSA.RSA.save_pem\", MagicMock()) as save_pem, patch(",
          "19:             \"M2Crypto.RSA.RSA.save_pub_key\", MagicMock()",
          "20:         ) as save_pub:",
          "21:             with patch(\"os.path.isfile\", return_value=True):",
          "22:                 assert salt.crypt.gen_keys(",
          "23:                     \"/keydir\", \"keyname\", 2048",
          "24:                 ) == \"/keydir{}keyname.pem\".format(os.sep)",
          "25:                 save_pem.assert_not_called()",
          "26:                 save_pub.assert_not_called()",
          "28:             with patch(\"os.path.isfile\", return_value=False):",
          "29:                 assert salt.crypt.gen_keys(",
          "30:                     \"/keydir\", \"keyname\", 2048",
          "31:                 ) == \"/keydir{}keyname.pem\".format(os.sep)",
          "32:                 save_pem.assert_called_once_with(",
          "33:                     \"/keydir{}keyname.pem\".format(os.sep), cipher=None",
          "34:                 )",
          "35:                 save_pub.assert_called_once_with(\"/keydir{}keyname.pub\".format(os.sep))",
          "38: @pytest.mark.slow_test",
          "39: def test_gen_keys_with_passphrase():",
          "40:     with patch(\"os.umask\", MagicMock()), patch(\"os.chmod\", MagicMock()), patch(",
          "41:         \"os.chown\", MagicMock()",
          "42:     ), patch(\"os.access\", MagicMock(return_value=True)):",
          "43:         with patch(\"M2Crypto.RSA.RSA.save_pem\", MagicMock()) as save_pem, patch(",
          "44:             \"M2Crypto.RSA.RSA.save_pub_key\", MagicMock()",
          "45:         ) as save_pub:",
          "46:             with patch(\"os.path.isfile\", return_value=True):",
          "47:                 assert salt.crypt.gen_keys(",
          "48:                     \"/keydir\", \"keyname\", 2048, passphrase=\"password\"",
          "49:                 ) == \"/keydir{}keyname.pem\".format(os.sep)",
          "50:                 save_pem.assert_not_called()",
          "51:                 save_pub.assert_not_called()",
          "53:             with patch(\"os.path.isfile\", return_value=False):",
          "54:                 assert salt.crypt.gen_keys(",
          "55:                     \"/keydir\", \"keyname\", 2048, passphrase=\"password\"",
          "56:                 ) == \"/keydir{}keyname.pem\".format(os.sep)",
          "57:                 callback = save_pem.call_args[1][\"callback\"]",
          "58:                 save_pem.assert_called_once_with(",
          "59:                     \"/keydir{}keyname.pem\".format(os.sep),",
          "60:                     cipher=\"des_ede3_cbc\",",
          "61:                     callback=callback,",
          "62:                 )",
          "63:                 assert callback(None) == b\"password\"",
          "64:                 save_pub.assert_called_once_with(\"/keydir{}keyname.pub\".format(os.sep))",
          "67: def test_sign_message():",
          "68:     key = M2Crypto.RSA.load_key_string(salt.utils.stringutils.to_bytes(PRIVKEY_DATA))",
          "69:     with patch(\"salt.crypt.get_rsa_key\", return_value=key):",
          "70:         assert SIG == salt.crypt.sign_message(\"/keydir/keyname.pem\", MSG)",
          "73: def test_sign_message_with_passphrase():",
          "74:     key = M2Crypto.RSA.load_key_string(salt.utils.stringutils.to_bytes(PRIVKEY_DATA))",
          "75:     with patch(\"salt.crypt.get_rsa_key\", return_value=key):",
          "76:         assert SIG == salt.crypt.sign_message(",
          "77:             \"/keydir/keyname.pem\", MSG, passphrase=\"password\"",
          "78:         )",
          "81: def test_verify_signature():",
          "82:     with patch(",
          "83:         \"salt.utils.files.fopen\",",
          "84:         mock_open(read_data=salt.utils.stringutils.to_bytes(PUBKEY_DATA)),",
          "85:     ):",
          "86:         assert salt.crypt.verify_signature(\"/keydir/keyname.pub\", MSG, SIG)",
          "89: def test_encrypt_decrypt_bin():",
          "90:     priv_key = M2Crypto.RSA.load_key_string(",
          "91:         salt.utils.stringutils.to_bytes(PRIVKEY_DATA)",
          "92:     )",
          "93:     pub_key = M2Crypto.RSA.load_pub_key_bio(",
          "94:         M2Crypto.BIO.MemoryBuffer(salt.utils.stringutils.to_bytes(PUBKEY_DATA))",
          "95:     )",
          "96:     encrypted = salt.crypt.private_encrypt(priv_key, b\"salt\")",
          "97:     decrypted = salt.crypt.public_decrypt(pub_key, encrypted)",
          "98:     assert b\"salt\" == decrypted",
          "",
          "---------------"
        ],
        "tests/unit/test_crypt.py||tests/unit/test_crypt.py": [
          "File: tests/unit/test_crypt.py -> tests/unit/test_crypt.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import salt.utils.files",
          "8: import salt.utils.stringutils",
          "11: from tests.support.unit import TestCase",
          "13: try:",
          "",
          "[Removed Lines]",
          "9: from salt import crypt",
          "10: from tests.support.mock import MagicMock, MockCall, mock_open, patch",
          "",
          "[Added Lines]",
          "9: from tests.support.mock import mock_open, patch",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: except ImportError:",
          "18:     HAS_M2 = False",
          "19: try:",
          "22:     HAS_PYCRYPTO_RSA = True",
          "23: except ImportError:",
          "",
          "[Removed Lines]",
          "20:     from Cryptodome.PublicKey import RSA",
          "",
          "[Added Lines]",
          "19:     from Cryptodome.PublicKey import RSA  # pylint: disable=unused-import",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91: )",
          "271: class TestBadCryptodomePubKey(TestCase):",
          "272:     \"\"\"",
          "273:     Test that we can load public keys exported by pycrpytodome<=3.4.6",
          "",
          "[Removed Lines]",
          "94: @pytest.mark.skipif(not HAS_PYCRYPTO_RSA, reason=\"pycrypto >= 2.6 is not available\")",
          "95: @pytest.mark.skipif(HAS_M2, reason=\"m2crypto is used by salt.crypt if installed\")",
          "96: class CryptTestCase(TestCase):",
          "97:     @pytest.mark.slow_test",
          "98:     def test_gen_keys(self):",
          "99:         open_priv_wb = MockCall(\"/keydir{}keyname.pem\".format(os.sep), \"wb+\")",
          "100:         open_pub_wb = MockCall(\"/keydir{}keyname.pub\".format(os.sep), \"wb+\")",
          "102:         with patch.multiple(",
          "103:             os,",
          "104:             umask=MagicMock(),",
          "105:             chmod=MagicMock(),",
          "106:             access=MagicMock(return_value=True),",
          "107:         ):",
          "108:             with patch(\"salt.utils.files.fopen\", mock_open()) as m_open, patch(",
          "109:                 \"os.path.isfile\", return_value=True",
          "110:             ):",
          "111:                 result = crypt.gen_keys(\"/keydir\", \"keyname\", 2048)",
          "112:                 assert result == \"/keydir{}keyname.pem\".format(os.sep), result",
          "113:                 assert open_priv_wb not in m_open.calls",
          "114:                 assert open_pub_wb not in m_open.calls",
          "116:             with patch(\"salt.utils.files.fopen\", mock_open()) as m_open, patch(",
          "117:                 \"os.path.isfile\", return_value=False",
          "118:             ):",
          "119:                 crypt.gen_keys(\"/keydir\", \"keyname\", 2048)",
          "120:                 assert open_priv_wb in m_open.calls",
          "121:                 assert open_pub_wb in m_open.calls",
          "123:     @patch(\"os.umask\", MagicMock())",
          "124:     @patch(\"os.chmod\", MagicMock())",
          "125:     @patch(\"os.chown\", MagicMock(), create=True)",
          "126:     @patch(\"os.access\", MagicMock(return_value=True))",
          "127:     @pytest.mark.slow_test",
          "128:     def test_gen_keys_with_passphrase(self):",
          "129:         key_path = os.path.join(os.sep, \"keydir\")",
          "130:         open_priv_wb = MockCall(os.path.join(key_path, \"keyname.pem\"), \"wb+\")",
          "131:         open_pub_wb = MockCall(os.path.join(key_path, \"keyname.pub\"), \"wb+\")",
          "133:         with patch(\"salt.utils.files.fopen\", mock_open()) as m_open, patch(",
          "134:             \"os.path.isfile\", return_value=True",
          "135:         ):",
          "136:             self.assertEqual(",
          "137:                 crypt.gen_keys(key_path, \"keyname\", 2048, passphrase=\"password\"),",
          "138:                 os.path.join(key_path, \"keyname.pem\"),",
          "139:             )",
          "140:             result = crypt.gen_keys(key_path, \"keyname\", 2048, passphrase=\"password\")",
          "141:             assert result == os.path.join(key_path, \"keyname.pem\"), result",
          "142:             assert open_priv_wb not in m_open.calls",
          "143:             assert open_pub_wb not in m_open.calls",
          "145:         with patch(\"salt.utils.files.fopen\", mock_open()) as m_open, patch(",
          "146:             \"os.path.isfile\", return_value=False",
          "147:         ):",
          "148:             crypt.gen_keys(key_path, \"keyname\", 2048)",
          "149:             assert open_priv_wb in m_open.calls",
          "150:             assert open_pub_wb in m_open.calls",
          "152:     def test_sign_message(self):",
          "153:         key = RSA.importKey(PRIVKEY_DATA)",
          "154:         with patch(\"salt.crypt.get_rsa_key\", return_value=key):",
          "155:             self.assertEqual(SIG, salt.crypt.sign_message(\"/keydir/keyname.pem\", MSG))",
          "157:     def test_sign_message_with_passphrase(self):",
          "158:         key = RSA.importKey(PRIVKEY_DATA)",
          "159:         with patch(\"salt.crypt.get_rsa_key\", return_value=key):",
          "160:             self.assertEqual(",
          "161:                 SIG,",
          "162:                 crypt.sign_message(\"/keydir/keyname.pem\", MSG, passphrase=\"password\"),",
          "163:             )",
          "165:     def test_verify_signature(self):",
          "166:         with patch(\"salt.utils.files.fopen\", mock_open(read_data=PUBKEY_DATA)):",
          "167:             self.assertTrue(crypt.verify_signature(\"/keydir/keyname.pub\", MSG, SIG))",
          "170: @pytest.mark.skipif(not HAS_M2, reason=\"m2crypto is not available\")",
          "171: class M2CryptTestCase(TestCase):",
          "172:     @patch(\"os.umask\", MagicMock())",
          "173:     @patch(\"os.chmod\", MagicMock())",
          "174:     @patch(\"os.access\", MagicMock(return_value=True))",
          "175:     @pytest.mark.slow_test",
          "176:     def test_gen_keys(self):",
          "177:         with patch(\"M2Crypto.RSA.RSA.save_pem\", MagicMock()) as save_pem:",
          "178:             with patch(\"M2Crypto.RSA.RSA.save_pub_key\", MagicMock()) as save_pub:",
          "179:                 with patch(\"os.path.isfile\", return_value=True):",
          "180:                     self.assertEqual(",
          "181:                         crypt.gen_keys(\"/keydir\", \"keyname\", 2048),",
          "182:                         \"/keydir{}keyname.pem\".format(os.sep),",
          "183:                     )",
          "184:                     save_pem.assert_not_called()",
          "185:                     save_pub.assert_not_called()",
          "187:                 with patch(\"os.path.isfile\", return_value=False):",
          "188:                     self.assertEqual(",
          "189:                         crypt.gen_keys(\"/keydir\", \"keyname\", 2048),",
          "190:                         \"/keydir{}keyname.pem\".format(os.sep),",
          "191:                     )",
          "192:                     save_pem.assert_called_once_with(",
          "193:                         \"/keydir{}keyname.pem\".format(os.sep), cipher=None",
          "194:                     )",
          "195:                     save_pub.assert_called_once_with(",
          "196:                         \"/keydir{}keyname.pub\".format(os.sep)",
          "197:                     )",
          "199:     @patch(\"os.umask\", MagicMock())",
          "200:     @patch(\"os.chmod\", MagicMock())",
          "201:     @patch(\"os.chown\", MagicMock())",
          "202:     @patch(\"os.access\", MagicMock(return_value=True))",
          "203:     @pytest.mark.slow_test",
          "204:     def test_gen_keys_with_passphrase(self):",
          "205:         with patch(\"M2Crypto.RSA.RSA.save_pem\", MagicMock()) as save_pem:",
          "206:             with patch(\"M2Crypto.RSA.RSA.save_pub_key\", MagicMock()) as save_pub:",
          "207:                 with patch(\"os.path.isfile\", return_value=True):",
          "208:                     self.assertEqual(",
          "209:                         crypt.gen_keys(",
          "210:                             \"/keydir\", \"keyname\", 2048, passphrase=\"password\"",
          "211:                         ),",
          "212:                         \"/keydir{}keyname.pem\".format(os.sep),",
          "213:                     )",
          "214:                     save_pem.assert_not_called()",
          "215:                     save_pub.assert_not_called()",
          "217:                 with patch(\"os.path.isfile\", return_value=False):",
          "218:                     self.assertEqual(",
          "219:                         crypt.gen_keys(",
          "220:                             \"/keydir\", \"keyname\", 2048, passphrase=\"password\"",
          "221:                         ),",
          "222:                         \"/keydir{}keyname.pem\".format(os.sep),",
          "223:                     )",
          "224:                     callback = save_pem.call_args[1][\"callback\"]",
          "225:                     save_pem.assert_called_once_with(",
          "226:                         \"/keydir{}keyname.pem\".format(os.sep),",
          "227:                         cipher=\"des_ede3_cbc\",",
          "228:                         callback=callback,",
          "229:                     )",
          "230:                     self.assertEqual(callback(None), b\"password\")",
          "231:                     save_pub.assert_called_once_with(",
          "232:                         \"/keydir{}keyname.pub\".format(os.sep)",
          "233:                     )",
          "235:     def test_sign_message(self):",
          "236:         key = M2Crypto.RSA.load_key_string(",
          "237:             salt.utils.stringutils.to_bytes(PRIVKEY_DATA)",
          "238:         )",
          "239:         with patch(\"salt.crypt.get_rsa_key\", return_value=key):",
          "240:             self.assertEqual(SIG, salt.crypt.sign_message(\"/keydir/keyname.pem\", MSG))",
          "242:     def test_sign_message_with_passphrase(self):",
          "243:         key = M2Crypto.RSA.load_key_string(",
          "244:             salt.utils.stringutils.to_bytes(PRIVKEY_DATA)",
          "245:         )",
          "246:         with patch(\"salt.crypt.get_rsa_key\", return_value=key):",
          "247:             self.assertEqual(",
          "248:                 SIG,",
          "249:                 crypt.sign_message(\"/keydir/keyname.pem\", MSG, passphrase=\"password\"),",
          "250:             )",
          "252:     def test_verify_signature(self):",
          "253:         with patch(",
          "254:             \"salt.utils.files.fopen\",",
          "255:             mock_open(read_data=salt.utils.stringutils.to_bytes(PUBKEY_DATA)),",
          "256:         ):",
          "257:             self.assertTrue(crypt.verify_signature(\"/keydir/keyname.pub\", MSG, SIG))",
          "259:     def test_encrypt_decrypt_bin(self):",
          "260:         priv_key = M2Crypto.RSA.load_key_string(",
          "261:             salt.utils.stringutils.to_bytes(PRIVKEY_DATA)",
          "262:         )",
          "263:         pub_key = M2Crypto.RSA.load_pub_key_bio(",
          "264:             M2Crypto.BIO.MemoryBuffer(salt.utils.stringutils.to_bytes(PUBKEY_DATA))",
          "265:         )",
          "266:         encrypted = salt.crypt.private_encrypt(priv_key, b\"salt\")",
          "267:         decrypted = salt.crypt.public_decrypt(pub_key, encrypted)",
          "268:         self.assertEqual(b\"salt\", decrypted)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3366ba233facfec3d725d31b1acdfc1db32fb634",
      "candidate_info": {
        "commit_hash": "3366ba233facfec3d725d31b1acdfc1db32fb634",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/3366ba233facfec3d725d31b1acdfc1db32fb634",
        "files": [
          "tools/testsuite/__init__.py"
        ],
        "message": "It's a single `nox.*.tar.xz` archive now\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tools/testsuite/__init__.py||tools/testsuite/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/testsuite/__init__.py||tools/testsuite/__init__.py": [
          "File: tools/testsuite/__init__.py -> tools/testsuite/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:     if exitcode and exitcode != ExitCode.SOFT_FAIL:",
          "152:         ctx.exit(exitcode)",
          "153:     if pkg:",
          "163:         exitcode = tools.utils.gh.download_pkgs_artifact(",
          "164:             ctx,",
          "165:             run_id=run_id,",
          "",
          "[Removed Lines]",
          "154:         exitcode = tools.utils.gh.download_nox_artifact(",
          "155:             ctx,",
          "156:             run_id=run_id,",
          "157:             slug=slug,",
          "158:             nox_env=f\"test-pkgs-onedir-{arch}\",",
          "159:             repository=repository,",
          "160:         )",
          "161:         if exitcode and exitcode != ExitCode.SOFT_FAIL:",
          "162:             ctx.exit(exitcode)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "828ce69b80d9c3fe4589f353c2c36a6f8e6ae74e",
      "candidate_info": {
        "commit_hash": "828ce69b80d9c3fe4589f353c2c36a6f8e6ae74e",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/828ce69b80d9c3fe4589f353c2c36a6f8e6ae74e",
        "files": [
          "tests/pytests/integration/netapi/rest_tornado/conftest.py"
        ],
        "message": "Destroy event_listener when app is no-longer used",
        "before_after_code_files": [
          "tests/pytests/integration/netapi/rest_tornado/conftest.py||tests/pytests/integration/netapi/rest_tornado/conftest.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/integration/netapi/rest_tornado/conftest.py||tests/pytests/integration/netapi/rest_tornado/conftest.py": [
          "File: tests/pytests/integration/netapi/rest_tornado/conftest.py -> tests/pytests/integration/netapi/rest_tornado/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: @pytest.fixture",
          "20: def app(app_urls, load_auth, client_config, minion_config, salt_sub_minion):",
          "22:         app_urls, load_auth, client_config, minion_config, setup_event_listener=True",
          "23:     )",
          "26: @pytest.fixture",
          "",
          "[Removed Lines]",
          "21:     return netapi.build_tornado_app(",
          "",
          "[Added Lines]",
          "21:     app = netapi.build_tornado_app(",
          "24:     try:",
          "25:         yield app",
          "26:     finally:",
          "27:         app.event_listener.destroy()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "602aa0cbf7188e2d2e139f284655316c51702d87",
      "candidate_info": {
        "commit_hash": "602aa0cbf7188e2d2e139f284655316c51702d87",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/602aa0cbf7188e2d2e139f284655316c51702d87",
        "files": [
          ".github/workflows/build-deb-packages.yml",
          ".github/workflows/build-deps-ci-action-linux.yml",
          ".github/workflows/build-deps-ci-action-macos.yml",
          ".github/workflows/build-deps-ci-action-windows.yml",
          ".github/workflows/build-deps-ci-action.yml",
          ".github/workflows/build-deps-onedir-linux.yml",
          ".github/workflows/build-deps-onedir-macos.yml",
          ".github/workflows/build-deps-onedir-windows.yml",
          ".github/workflows/build-deps-onedir.yml",
          ".github/workflows/build-macos-packages.yml",
          ".github/workflows/build-packages.yml",
          ".github/workflows/build-rpm-packages.yml",
          ".github/workflows/build-salt-onedir-linux.yml",
          ".github/workflows/build-salt-onedir-macos.yml",
          ".github/workflows/build-salt-onedir-windows.yml",
          ".github/workflows/build-salt-onedir.yml",
          ".github/workflows/build-windows-packages.yml",
          ".github/workflows/ci.yml",
          ".github/workflows/nightly.yml",
          ".github/workflows/release.yml",
          ".github/workflows/scheduled.yml",
          ".github/workflows/staging.yml",
          ".github/workflows/templates/build-ci-deps.yml.jinja",
          ".github/workflows/templates/build-deps-ci-action.yml.jinja",
          ".github/workflows/templates/build-packages.yml.jinja",
          ".github/workflows/templates/build-repos.yml.jinja",
          ".github/workflows/templates/ci.yml.jinja",
          ".github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja",
          ".github/workflows/templates/test-salt-pkg.yml.jinja",
          ".github/workflows/templates/test-salt.yml.jinja",
          "tools/precommit/workflows.py"
        ],
        "message": "Reduce the number of workflows referenced\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          ".github/workflows/templates/build-ci-deps.yml.jinja||.github/workflows/templates/build-ci-deps.yml.jinja",
          ".github/workflows/templates/build-deps-ci-action.yml.jinja||.github/workflows/templates/build-deps-ci-action.yml.jinja",
          ".github/workflows/templates/build-packages.yml.jinja||.github/workflows/templates/build-packages.yml.jinja",
          ".github/workflows/templates/build-repos.yml.jinja||.github/workflows/templates/build-repos.yml.jinja",
          ".github/workflows/templates/ci.yml.jinja||.github/workflows/templates/ci.yml.jinja",
          ".github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja||.github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja",
          ".github/workflows/templates/test-salt-pkg.yml.jinja||.github/workflows/templates/test-salt-pkg.yml.jinja",
          ".github/workflows/templates/test-salt.yml.jinja||.github/workflows/templates/test-salt.yml.jinja",
          "tools/precommit/workflows.py||tools/precommit/workflows.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".github/workflows/templates/build-ci-deps.yml.jinja||.github/workflows/templates/build-ci-deps.yml.jinja": [
          "File: .github/workflows/templates/build-ci-deps.yml.jinja -> .github/workflows/templates/build-ci-deps.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     <%- if workflow_slug != 'release' %>",
          "8:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-deps-ci'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "9:     <%- endif %>",
          "10:     needs:",
          "11:       - prepare-workflow",
          "12:     <%- if workflow_slug != 'release' %>",
          "43:     <%- else %>",
          "44:       - download-onedir-artifact",
          "45:     <%- endif %>",
          "47:     with:",
          "49:       nox-session: ci-test-onedir",
          "52:       nox-version: <{ nox_version  }>",
          "53:       python-version: \"<{ gh_actions_workflows_python_version }>\"",
          "54:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "55:       cache-prefix: ${{ needs.prepare-workflow.outputs.cache-seed }}|<{ python_version }>",
          "",
          "[Removed Lines]",
          "2:   <%- for arch, build_distro_slug in build_ci_deps_listing[\"windows\"] %>",
          "4:   windows-<{ arch }>-ci-deps:",
          "5:     <%- do test_salt_needs.append(\"windows-\" + arch + \"-ci-deps\") %>",
          "6:     name: Windows <{ arch }> CI Deps",
          "13:       - build-salt-onedir-windows",
          "14:     <%- else %>",
          "15:       - download-onedir-artifact",
          "16:     <%- endif %>",
          "17:     uses: ./.github/workflows/build-deps-ci-action-windows.yml",
          "18:     with:",
          "19:       distro-slug: <{ build_distro_slug }>",
          "20:       nox-session: ci-test-onedir",
          "21:       platform: windows",
          "22:       arch: <{ arch }>",
          "23:       nox-version: <{ nox_version  }>",
          "24:       python-version: \"<{ gh_actions_workflows_python_version }>\"",
          "25:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "26:       cache-prefix: ${{ needs.prepare-workflow.outputs.cache-seed }}|<{ python_version }>",
          "28:   <%- endfor %>",
          "31:   <%- for arch, build_distro_slug in build_ci_deps_listing[\"macos\"] %>",
          "33:   macos-<{ arch }>-ci-deps:",
          "34:     <%- do test_salt_needs.append(\"macos-\" + arch + \"-ci-deps\") %>",
          "35:     name: MacOS <{ arch }> CI Deps",
          "36:     <%- if workflow_slug != 'release' %>",
          "37:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-deps-ci'] && fromJSON(needs.prepare-workflow.outputs.runners)['github-hosted'] }}",
          "38:     <%- endif %>",
          "39:     needs:",
          "40:       - prepare-workflow",
          "41:     <%- if workflow_slug != 'release' %>",
          "42:       - build-salt-onedir-macos",
          "46:     uses: ./.github/workflows/build-deps-ci-action-macos.yml",
          "48:       distro-slug: <{ build_distro_slug }>",
          "50:       platform: darwin",
          "51:       arch: <{ arch }>",
          "57:   <%- endfor %>",
          "60:   <%- for arch, build_distro_slug in build_ci_deps_listing[\"linux\"] %>",
          "62:   linux-<{ arch }>-ci-deps:",
          "63:     <%- do test_salt_needs.append(\"linux-\" + arch + \"-ci-deps\") %>",
          "64:     name: Linux <{ arch }> CI Deps",
          "65:     <%- if workflow_slug != 'release' %>",
          "66:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-deps-ci'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "67:     <%- endif %>",
          "68:     needs:",
          "69:       - prepare-workflow",
          "70:     <%- if workflow_slug != 'release' %>",
          "71:       - build-salt-onedir-linux",
          "72:     <%- else %>",
          "73:       - download-onedir-artifact",
          "74:     <%- endif %>",
          "75:     uses: ./.github/workflows/build-deps-ci-action-linux.yml",
          "76:     with:",
          "77:       distro-slug: <{ build_distro_slug }>",
          "78:       nox-session: ci-test-onedir",
          "79:       platform: linux",
          "80:       arch: <{ arch }>",
          "81:       nox-version: <{ nox_version  }>",
          "82:       python-version: \"<{ gh_actions_workflows_python_version }>\"",
          "83:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "84:       cache-prefix: ${{ needs.prepare-workflow.outputs.cache-seed }}|<{ python_version }>",
          "86:   <%- endfor %>",
          "",
          "[Added Lines]",
          "2:   build-ci-deps:",
          "3:     <%- do test_salt_needs.append(\"build-ci-deps\") %>",
          "4:     name: CI Deps",
          "11:       - build-salt-onedir",
          "15:     uses: ./.github/workflows/build-deps-ci-action.yml",
          "",
          "---------------"
        ],
        ".github/workflows/templates/build-deps-ci-action.yml.jinja||.github/workflows/templates/build-deps-ci-action.yml.jinja": [
          "File: .github/workflows/templates/build-deps-ci-action.yml.jinja -> .github/workflows/templates/build-deps-ci-action.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ---",
          "2: name: Install Test Dependencies",
          "4: on:",
          "5:   workflow_call:",
          "6:     inputs:",
          "7:       nox-session:",
          "8:         required: true",
          "9:         type: string",
          "10:         description: The nox session to run",
          "11:       salt-version:",
          "12:         type: string",
          "13:         required: true",
          "14:         description: The Salt version to set prior to running tests.",
          "15:       cache-prefix:",
          "16:         required: true",
          "17:         type: string",
          "18:         description: Seed used to invalidate caches",
          "19:       nox-version:",
          "20:         required: true",
          "21:         type: string",
          "22:         description: The nox version to install",
          "23:       python-version:",
          "24:         required: false",
          "25:         type: string",
          "26:         description: The python version to run tests with",
          "27:         default: \"3.10\"",
          "28:       package-name:",
          "29:         required: false",
          "30:         type: string",
          "31:         description: The onedir package name to use",
          "32:         default: salt",
          "35: env:",
          "36:   COLUMNS: 190",
          "37:   AWS_MAX_ATTEMPTS: \"10\"",
          "38:   AWS_RETRY_MODE: \"adaptive\"",
          "39:   PIP_INDEX_URL: https://pypi-proxy.saltstack.net/root/local/+simple/",
          "40:   PIP_EXTRA_INDEX_URL: https://pypi.org/simple",
          "42: jobs:",
          "44:   linux-dependencies:",
          "45:     name: Linux",
          "46:     runs-on:",
          "47:       - self-hosted",
          "48:       - linux",
          "49:       - bastion",
          "50:     timeout-minutes: 90",
          "51:     strategy:",
          "52:       fail-fast: false",
          "53:       matrix:",
          "54:         include:",
          "55:         <%- for arch, build_distro_slug in build_ci_deps_listing[\"linux\"] %>",
          "56:           - distro-slug: <{ build_distro_slug }>",
          "57:             arch: <{ arch }>",
          "58:         <%- endfor %>",
          "59:     steps:",
          "61:       - name: \"Throttle Builds\"",
          "62:         shell: bash",
          "63:         run: |",
          "64:           t=$(shuf -i 1-30 -n 1); echo \"Sleeping $t seconds\"; sleep \"$t\"",
          "66:       - name: Checkout Source Code",
          "67:         uses: actions/checkout@v4",
          "69:       - name: Cache nox.linux.${{ matrix.arch }}.tar.* for session ${{ inputs.nox-session }}",
          "70:         id: nox-dependencies-cache",
          "71:         uses: actions/cache@v3.3.1",
          "72:         with:",
          "73:           path: nox.linux.${{ matrix.arch }}.tar.*",
          "74:           key: ${{ inputs.cache-prefix }}|testrun-deps|${{ matrix.arch }}|linux|${{ inputs.nox-session }}|${{ inputs.python-version }}|${{",
          "75:               hashFiles('requirements/**/*.txt', 'cicd/golden-images.json', 'noxfile.py')",
          "76:             }}",
          "78:       - name: Download Onedir Tarball as an Artifact",
          "79:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "80:         uses: actions/download-artifact@v3",
          "81:         with:",
          "82:           name: ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-linux-${{ matrix.arch }}.tar.xz",
          "83:           path: artifacts/",
          "85:       - name: Decompress Onedir Tarball",
          "86:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "87:         shell: bash",
          "88:         run: |",
          "89:           python3 -c \"import os; os.makedirs('artifacts', exist_ok=True)\"",
          "90:           cd artifacts",
          "91:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-linux-${{ matrix.arch }}.tar.xz",
          "93:       - name: PyPi Proxy",
          "94:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "95:         run: |",
          "96:           sed -i '7s;^;--index-url=https://pypi-proxy.saltstack.net/root/local/+simple/ --extra-index-url=https://pypi.org/simple\\n;' requirements/static/ci/*/*.txt",
          "98:       - name: Setup Python Tools Scripts",
          "99:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "100:         uses: ./.github/actions/setup-python-tools-scripts",
          "101:         with:",
          "102:           cache-prefix: ${{ inputs.cache-prefix }}-build-deps-ci",
          "104:       - name: Get Salt Project GitHub Actions Bot Environment",
          "105:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "106:         run: |",
          "107:           TOKEN=$(curl -sS -f -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 30\")",
          "108:           SPB_ENVIRONMENT=$(curl -sS -f -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/tags/instance/spb:environment)",
          "109:           echo \"SPB_ENVIRONMENT=$SPB_ENVIRONMENT\" >> \"$GITHUB_ENV\"",
          "111:       - name: Start VM",
          "112:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "113:         id: spin-up-vm",
          "114:         run: |",
          "115:           tools --timestamps vm create --environment \"${SPB_ENVIRONMENT}\" --retries=2 ${{ matrix.distro-slug }}",
          "117:       - name: List Free Space",
          "118:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "119:         run: |",
          "120:           tools --timestamps vm ssh ${{ matrix.distro-slug }} -- df -h || true",
          "122:       - name: Upload Checkout To VM",
          "123:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "124:         run: |",
          "125:           tools --timestamps vm rsync ${{ matrix.distro-slug }}",
          "127:       - name: Install Dependencies",
          "128:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "129:         run: |",
          "130:           tools --timestamps vm install-dependencies --nox-session=${{ inputs.nox-session }} ${{ matrix.distro-slug }}",
          "132:       - name: Cleanup .nox Directory",
          "133:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "134:         run: |",
          "135:           tools --timestamps vm pre-archive-cleanup ${{ matrix.distro-slug }}",
          "137:       - name: Compress .nox Directory",
          "138:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "139:         run: |",
          "140:           tools --timestamps vm compress-dependencies ${{ matrix.distro-slug }}",
          "142:       - name: Download Compressed .nox Directory",
          "143:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "144:         run: |",
          "145:           tools --timestamps vm download-dependencies ${{ matrix.distro-slug }}",
          "147:       - name: Destroy VM",
          "148:         if: always() && steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "149:         run: |",
          "150:           tools --timestamps vm destroy --no-wait ${{ matrix.distro-slug }}",
          "152:       - name: Upload Nox Requirements Tarball",
          "153:         uses: actions/upload-artifact@v3",
          "154:         with:",
          "155:           name: nox-linux-${{ matrix.arch }}-${{ inputs.nox-session }}",
          "156:           path: nox.linux.${{ matrix.arch }}.tar.*",
          "158:   macos-dependencies:",
          "159:     name: MacOS",
          "160:     runs-on: ${{ matrix.distro-slug }}",
          "161:     timeout-minutes: 90",
          "162:     strategy:",
          "163:       fail-fast: false",
          "164:       matrix:",
          "165:         include:",
          "166:         <%- for arch, build_distro_slug in build_ci_deps_listing[\"macos\"] %>",
          "167:           - distro-slug: <{ build_distro_slug }>",
          "168:             arch: <{ arch }>",
          "169:         <%- endfor %>",
          "170:     steps:",
          "172:       - name: \"Throttle Builds\"",
          "173:         shell: bash",
          "174:         run: |",
          "175:           t=$(python3 -c 'import random, sys; sys.stdout.write(str(random.randint(1, 15)))'); echo \"Sleeping $t seconds\"; sleep \"$t\"",
          "177:       - name: Checkout Source Code",
          "178:         uses: actions/checkout@v4",
          "180:       - name: Cache nox.macos.${{ matrix.arch }}.tar.* for session ${{ inputs.nox-session }}",
          "181:         id: nox-dependencies-cache",
          "182:         uses: actions/cache@v3.3.1",
          "183:         with:",
          "184:           path: nox.macos.${{ matrix.arch }}.tar.*",
          "185:           key: ${{ inputs.cache-prefix }}|testrun-deps|${{ matrix.arch }}|macos|${{ inputs.nox-session }}|${{ inputs.python-version }}|${{",
          "186:               hashFiles('requirements/**/*.txt', 'cicd/golden-images.json', 'noxfile.py')",
          "187:             }}",
          "189:       - name: Download Onedir Tarball as an Artifact",
          "190:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "191:         uses: actions/download-artifact@v3",
          "192:         with:",
          "193:           name: ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-darwin-${{ matrix.arch }}.tar.xz",
          "194:           path: artifacts/",
          "196:       - name: Decompress Onedir Tarball",
          "197:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "198:         shell: bash",
          "199:         run: |",
          "200:           python3 -c \"import os; os.makedirs('artifacts', exist_ok=True)\"",
          "201:           cd artifacts",
          "202:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-darwin-${{ matrix.arch }}.tar.xz",
          "204:       - name: Set up Python ${{ inputs.python-version }}",
          "205:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "206:         uses: actions/setup-python@v4",
          "207:         with:",
          "208:           python-version: \"${{ inputs.python-version }}\"",
          "210:       - name: Install System Dependencies",
          "211:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "212:         run: |",
          "213:           brew install openssl@3",
          "215:       - name: Install Nox",
          "216:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "217:         run: |",
          "218:           python3 -m pip install 'nox==${{ inputs.nox-version }}'",
          "220:       - name: Install Dependencies",
          "221:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "222:         env:",
          "223:           PRINT_TEST_SELECTION: \"0\"",
          "224:           PRINT_SYSTEM_INFO: \"0\"",
          "225:         run: |",
          "226:           export PYCURL_SSL_LIBRARY=openssl",
          "227:           export LDFLAGS=\"-L/usr/local/opt/openssl@3/lib\"",
          "228:           export CPPFLAGS=\"-I/usr/local/opt/openssl@3/include\"",
          "229:           export PKG_CONFIG_PATH=\"/usr/local/opt/openssl@3/lib/pkgconfig\"",
          "230:           nox --install-only -e ${{ inputs.nox-session }}",
          "232:       - name: Cleanup .nox Directory",
          "233:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "234:         run: |",
          "235:           nox --force-color -e \"pre-archive-cleanup(pkg=False)\"",
          "237:       - name: Compress .nox Directory",
          "238:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "239:         run: |",
          "240:           nox --force-color -e compress-dependencies -- macos ${{ matrix.arch }}",
          "242:       - name: Upload Nox Requirements Tarball",
          "243:         uses: actions/upload-artifact@v3",
          "244:         with:",
          "245:           name: nox-macos-${{ matrix.arch }}-${{ inputs.nox-session }}",
          "246:           path: nox.macos.${{ matrix.arch }}.tar.*",
          "248:   windows-dependencies:",
          "249:     name: Windows",
          "250:     runs-on:",
          "251:       - self-hosted",
          "252:       - linux",
          "253:       - bastion",
          "254:     timeout-minutes: 90",
          "255:     strategy:",
          "256:       fail-fast: false",
          "257:       matrix:",
          "258:         include:",
          "259:         <%- for arch, build_distro_slug in build_ci_deps_listing[\"windows\"] %>",
          "260:           - distro-slug: <{ build_distro_slug }>",
          "261:             arch: <{ arch }>",
          "262:         <%- endfor %>",
          "263:     steps:",
          "265:       - name: \"Throttle Builds\"",
          "266:         shell: bash",
          "267:         run: |",
          "268:           t=$(shuf -i 1-30 -n 1); echo \"Sleeping $t seconds\"; sleep \"$t\"",
          "270:       - name: Checkout Source Code",
          "271:         uses: actions/checkout@v4",
          "273:       - name: Cache nox.windows.${{ matrix.arch }}.tar.* for session ${{ inputs.nox-session }}",
          "274:         id: nox-dependencies-cache",
          "275:         uses: actions/cache@v3.3.1",
          "276:         with:",
          "277:           path: nox.windows.${{ matrix.arch }}.tar.*",
          "278:           key: ${{ inputs.cache-prefix }}|testrun-deps|${{ matrix.arch }}|windows|${{ inputs.nox-session }}|${{ inputs.python-version }}|${{",
          "279:               hashFiles('requirements/**/*.txt', 'cicd/golden-images.json', 'noxfile.py')",
          "280:             }}",
          "282:       - name: Download Onedir Tarball as an Artifact",
          "283:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "284:         uses: actions/download-artifact@v3",
          "285:         with:",
          "286:           name: ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-windows-${{ matrix.arch }}.tar.xz",
          "287:           path: artifacts/",
          "289:       - name: Decompress Onedir Tarball",
          "290:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "291:         shell: bash",
          "292:         run: |",
          "293:           python3 -c \"import os; os.makedirs('artifacts', exist_ok=True)\"",
          "294:           cd artifacts",
          "295:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-windows-${{ matrix.arch }}.tar.xz",
          "297:       - name: PyPi Proxy",
          "298:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "299:         run: |",
          "300:           sed -i '7s;^;--index-url=https://pypi-proxy.saltstack.net/root/local/+simple/ --extra-index-url=https://pypi.org/simple\\n;' requirements/static/ci/*/*.txt",
          "302:       - name: Setup Python Tools Scripts",
          "303:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "304:         uses: ./.github/actions/setup-python-tools-scripts",
          "305:         with:",
          "306:           cache-prefix: ${{ inputs.cache-prefix }}-build-deps-ci",
          "308:       - name: Get Salt Project GitHub Actions Bot Environment",
          "309:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "310:         run: |",
          "311:           TOKEN=$(curl -sS -f -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 30\")",
          "312:           SPB_ENVIRONMENT=$(curl -sS -f -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/tags/instance/spb:environment)",
          "313:           echo \"SPB_ENVIRONMENT=$SPB_ENVIRONMENT\" >> \"$GITHUB_ENV\"",
          "315:       - name: Start VM",
          "316:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "317:         id: spin-up-vm",
          "318:         run: |",
          "319:           tools --timestamps vm create --environment \"${SPB_ENVIRONMENT}\" --retries=2 ${{ matrix.distro-slug }}",
          "321:       - name: List Free Space",
          "322:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "323:         run: |",
          "324:           tools --timestamps vm ssh ${{ matrix.distro-slug }} -- df -h || true",
          "326:       - name: Upload Checkout To VM",
          "327:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "328:         run: |",
          "329:           tools --timestamps vm rsync ${{ matrix.distro-slug }}",
          "331:       - name: Install Dependencies",
          "332:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "333:         run: |",
          "334:           tools --timestamps vm install-dependencies --nox-session=${{ inputs.nox-session }} ${{ matrix.distro-slug }}",
          "336:       - name: Cleanup .nox Directory",
          "337:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "338:         run: |",
          "339:           tools --timestamps vm pre-archive-cleanup ${{ matrix.distro-slug }}",
          "341:       - name: Compress .nox Directory",
          "342:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "343:         run: |",
          "344:           tools --timestamps vm compress-dependencies ${{ matrix.distro-slug }}",
          "346:       - name: Download Compressed .nox Directory",
          "347:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "348:         run: |",
          "349:           tools --timestamps vm download-dependencies ${{ matrix.distro-slug }}",
          "351:       - name: Destroy VM",
          "352:         if: always() && steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "353:         run: |",
          "354:           tools --timestamps vm destroy --no-wait ${{ matrix.distro-slug }}",
          "356:       - name: Upload Nox Requirements Tarball",
          "357:         uses: actions/upload-artifact@v3",
          "358:         with:",
          "359:           name: nox-windows-${{ matrix.arch }}-${{ inputs.nox-session }}",
          "360:           path: nox.windows.${{ matrix.arch }}.tar.*",
          "",
          "---------------"
        ],
        ".github/workflows/templates/build-packages.yml.jinja||.github/workflows/templates/build-packages.yml.jinja": [
          "File: .github/workflows/templates/build-packages.yml.jinja -> .github/workflows/templates/build-packages.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   <%- for backend in (\"onedir\", \"src\") %>",
          "10:   <%- if backend == \"src\" %>",
          "11:     <%- do conclusion_needs.append(job_name) %>",
          "12:   <%- endif %>",
          "14:   <{ job_name }>:",
          "15:     name: Build Packages",
          "17:     needs:",
          "18:       - prepare-workflow",
          "21:     with:",
          "22:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "23:       cache-prefix: ${{ needs.prepare-workflow.outputs.cache-seed }}",
          "24:       relenv-version: \"<{ relenv_version }>\"",
          "25:       python-version: \"<{ python_version }>\"",
          "26:       source: \"<{ backend }>\"",
          "28:       environment: <{ gh_environment }>",
          "34:     secrets: inherit",
          "35:     <%- endif %>",
          "37:   <%- endfor %>",
          "",
          "[Removed Lines]",
          "1: <%- for platform, pkg_type, display_name, runner_type in (",
          "2:                                                           (\"linux\", \"rpm\", \"RPM\", \"self-hosted\"),",
          "3:                                                           (\"linux\", \"deb\", \"DEB\", \"self-hosted\"),",
          "4:                                                           (\"windows\", \"windows\", \"Windows\", \"github-hosted\"),",
          "5:                                                           (\"macos\", \"macos\", \"macOS\", \"github-hosted\"),",
          "6:                                                         ) %>",
          "9:   <%- set job_name = \"build-{}-pkgs-{}\".format(pkg_type, backend) %>",
          "16:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-pkgs'] && fromJSON(needs.prepare-workflow.outputs.runners)['<{ runner_type }>'] }}",
          "19:       - build-salt-onedir-<{ platform }>",
          "20:     uses: ./.github/workflows/build-<{ pkg_type }>-packages.yml",
          "27:     <%- if pkg_type in (\"macos\", \"windows\") and gh_environment %>",
          "29:       <%- if pkg_type == \"macos\" %>",
          "30:       sign-packages: true",
          "31:       <%- else %>",
          "32:       sign-packages: <% if gh_environment == 'nightly' -%> false <%- else -%> ${{ inputs.sign-windows-packages }} <%- endif %>",
          "33:       <%- endif %>",
          "38: <%- endfor %>",
          "",
          "[Added Lines]",
          "2:   <%- set job_name = \"build-pkgs-{}\".format(backend) %>",
          "9:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-pkgs'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "12:       - build-salt-onedir",
          "13:     uses: ./.github/workflows/build-packages.yml",
          "20:     <%- if gh_environment %>",
          "22:       sign-macos-packages: true",
          "23:       sign-windows-packages: <% if gh_environment == 'nightly' -%> false <%- else -%> ${{ inputs.sign-windows-packages }} <%- endif %>",
          "",
          "---------------"
        ],
        ".github/workflows/templates/build-repos.yml.jinja||.github/workflows/templates/build-repos.yml.jinja": [
          "File: .github/workflows/templates/build-repos.yml.jinja -> .github/workflows/templates/build-repos.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     needs:",
          "21:       - prepare-workflow",
          "22:       <%- if type not in (\"src\", \"onedir\") %>",
          "24:       <%- elif type == 'onedir' %>",
          "28:       <%- elif type == 'src' %>",
          "29:       - build-source-tarball",
          "30:       <%- endif %>",
          "",
          "[Removed Lines]",
          "23:       - build-<{ type }>-pkgs-onedir",
          "25:       - build-salt-onedir-linux",
          "26:       - build-salt-onedir-macos",
          "27:       - build-salt-onedir-windows",
          "",
          "[Added Lines]",
          "23:       - build-pkgs-onedir",
          "25:       - build-salt-onedir",
          "",
          "---------------"
        ],
        ".github/workflows/templates/ci.yml.jinja||.github/workflows/templates/ci.yml.jinja": [
          "File: .github/workflows/templates/ci.yml.jinja -> .github/workflows/templates/ci.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:   <%- set job_name = \"build-deps-onedir\" %>",
          "237:   <%- if includes.get(job_name, True) %>",
          "243:     name: Build Dependencies Onedir",
          "244:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['<{ job_name }>'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "245:     needs:",
          "246:       - prepare-workflow",
          "248:     with:",
          "249:       cache-seed: ${{ needs.prepare-workflow.outputs.cache-seed }}",
          "250:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "",
          "[Removed Lines]",
          "238:   <%- for platform in (\"linux\", \"windows\", \"macos\") %>",
          "239:     <%- set platform_job_name = \"{}-{}\".format(job_name, platform) %>",
          "241:   <{ platform_job_name }>:",
          "242:     <%- do conclusion_needs.append(platform_job_name) %>",
          "247:     uses: ./.github/workflows/build-deps-onedir-<{ platform }>.yml",
          "",
          "[Added Lines]",
          "239:   <{ job_name }>:",
          "240:     <%- do conclusion_needs.append(job_name) %>",
          "245:     uses: ./.github/workflows/build-deps-onedir.yml",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:       relenv-version: \"<{ relenv_version }>\"",
          "254:       python-version: \"<{ python_version }>\"",
          "257:   <%- endif %>",
          "260:   <%- set job_name = \"build-salt-onedir\" %>",
          "261:   <%- if includes.get(job_name, True) %>",
          "267:     name: Build Salt Onedir",
          "268:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['<{ job_name }>'] }}",
          "269:     needs:",
          "270:       - prepare-workflow",
          "272:       - build-source-tarball",
          "274:     with:",
          "275:       cache-seed: ${{ needs.prepare-workflow.outputs.cache-seed }}",
          "276:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "",
          "[Removed Lines]",
          "256:   <%- endfor %>",
          "262:   <%- for platform in (\"linux\", \"windows\", \"macos\") %>",
          "263:     <%- set platform_job_name = \"{}-{}\".format(job_name, platform) %>",
          "265:   <{ platform_job_name }>:",
          "266:     <%- do conclusion_needs.append(platform_job_name) %>",
          "271:       - build-deps-onedir-<{ platform }>",
          "273:     uses: ./.github/workflows/build-salt-onedir-<{ platform }>.yml",
          "",
          "[Added Lines]",
          "260:   <{ job_name }>:",
          "261:     <%- do conclusion_needs.append(job_name) %>",
          "266:       - build-deps-onedir",
          "268:     uses: ./.github/workflows/build-salt-onedir.yml",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "279:       relenv-version: \"<{ relenv_version }>\"",
          "280:       python-version: \"<{ python_version }>\"",
          "283:   <%- endif %>",
          "",
          "[Removed Lines]",
          "282:   <%- endfor %>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        ".github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja||.github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja": [
          "File: .github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja -> .github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     <%- if gh_environment == \"release\" %>",
          "20:       - download-onedir-artifact",
          "21:     <%- else %>",
          "25:     <%- endif %>",
          "26:     uses: ./.github/workflows/test-package-downloads-action.yml",
          "27:     with:",
          "",
          "[Removed Lines]",
          "22:       - build-salt-onedir-linux",
          "23:       - build-salt-onedir-macos",
          "24:       - build-salt-onedir-windows",
          "",
          "[Added Lines]",
          "22:       - build-salt-onedir",
          "",
          "---------------"
        ],
        ".github/workflows/templates/test-salt-pkg.yml.jinja||.github/workflows/templates/test-salt-pkg.yml.jinja": [
          "File: .github/workflows/templates/test-salt-pkg.yml.jinja -> .github/workflows/templates/test-salt-pkg.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test-pkg'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "8:     needs:",
          "9:       - prepare-workflow",
          "12:     uses: ./.github/workflows/test-packages-action-linux.yml",
          "13:     with:",
          "14:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "10:       - build-<{ pkg_type }>-pkgs-onedir",
          "11:       - linux-<{ arch }>-ci-deps",
          "",
          "[Added Lines]",
          "10:       - build-pkgs-onedir",
          "11:       - build-ci-deps",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test-pkg'] && fromJSON(needs.prepare-workflow.outputs.runners)['github-hosted'] }}",
          "41:     needs:",
          "42:       - prepare-workflow",
          "45:     uses: ./.github/workflows/test-packages-action-macos.yml",
          "46:     with:",
          "47:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "43:       - build-macos-pkgs-onedir",
          "44:       - macos-<{ arch }>-ci-deps",
          "",
          "[Added Lines]",
          "43:       - build-pkgs-onedir",
          "44:       - build-ci-deps",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test-pkg'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "71:     needs:",
          "72:       - prepare-workflow",
          "75:     uses: ./.github/workflows/test-packages-action-windows.yml",
          "76:     with:",
          "77:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "73:       - build-windows-pkgs-onedir",
          "74:       - windows-<{ arch }>-ci-deps",
          "",
          "[Added Lines]",
          "73:       - build-pkgs-onedir",
          "74:       - build-ci-deps",
          "",
          "---------------"
        ],
        ".github/workflows/templates/test-salt.yml.jinja||.github/workflows/templates/test-salt.yml.jinja": [
          "File: .github/workflows/templates/test-salt.yml.jinja -> .github/workflows/templates/test-salt.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "13:     needs:",
          "14:       - prepare-workflow",
          "16:     uses: ./.github/workflows/test-action-windows.yml",
          "17:     with:",
          "18:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "15:       - windows-<{ arch }>-ci-deps",
          "",
          "[Added Lines]",
          "15:       - build-ci-deps",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test'] && fromJSON(needs.prepare-workflow.outputs.runners)['github-hosted'] }}",
          "41:     needs:",
          "42:       - prepare-workflow",
          "44:     uses: ./.github/workflows/test-action-macos.yml",
          "45:     with:",
          "46:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "43:       - macos-<{ arch }>-ci-deps",
          "",
          "[Added Lines]",
          "43:       - build-ci-deps",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "68:     needs:",
          "69:       - prepare-workflow",
          "71:     uses: ./.github/workflows/test-action-linux.yml",
          "72:     with:",
          "73:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "70:       - linux-<{ arch }>-ci-deps",
          "",
          "[Added Lines]",
          "70:       - build-ci-deps",
          "",
          "---------------"
        ],
        "tools/precommit/workflows.py||tools/precommit/workflows.py": [
          "File: tools/precommit/workflows.py -> tools/precommit/workflows.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         \"Test Package Downloads\": {",
          "88:             \"template\": \"test-package-downloads-action.yml\",",
          "89:         },",
          "90:     }",
          "91:     test_salt_listing: dict[str, list[tuple[str, ...]]] = {",
          "92:         \"linux\": [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:         \"Build CI Deps\": {",
          "91:             \"template\": \"build-deps-ci-action.yml\",",
          "92:         },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:     test_salt_pkg_downloads_needs_slugs = set()",
          "233:     for platform in test_salt_pkg_downloads_listing:",
          "234:         for _, arch, _ in test_salt_pkg_downloads_listing[platform]:",
          "237:     env = Environment(",
          "238:         block_start_string=\"<%\",",
          "",
          "[Removed Lines]",
          "235:             test_salt_pkg_downloads_needs_slugs.add(f\"{platform}-{arch}-ci-deps\")",
          "",
          "[Added Lines]",
          "238:             test_salt_pkg_downloads_needs_slugs.add(\"build-ci-deps\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}