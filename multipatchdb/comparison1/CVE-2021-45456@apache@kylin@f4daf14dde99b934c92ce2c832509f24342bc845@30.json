{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9e9a91a183fa045160765bc89052fb721c4307a9",
      "candidate_info": {
        "commit_hash": "9e9a91a183fa045160765bc89052fb721c4307a9",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/9e9a91a183fa045160765bc89052fb721c4307a9",
        "files": [
          "build/conf/setenv.sh"
        ],
        "message": "KYLIN-4609 setenv.sh add zgc config for big memory\n\n(cherry picked from commit e7444d26d2c3b9e1a91e89d6a5d7a6a5cfbe357e)",
        "before_after_code_files": [
          "build/conf/setenv.sh||build/conf/setenv.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "build/conf/setenv.sh||build/conf/setenv.sh": [
          "File: build/conf/setenv.sh -> build/conf/setenv.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: # export KYLIN_JVM_SETTINGS=\"-Xms16g -Xmx16g -XX:MaxPermSize=512m -XX:NewSize=3g -XX:MaxNewSize=3g -XX:SurvivorRatio=4 -XX:+CMSClassUnloadingEnabled -XX:+CMSParallelRemarkEnabled -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -XX:+DisableExplicitGC -XX:+HeapDumpOnOutOfMemoryError -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$KYLIN_HOME/logs/kylin.gc.%p -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=64M\"",
          "33: # uncomment following to for it to take effect(the values need adjusting to fit your env)",
          "34: # export KYLIN_DEBUG_SETTINGS=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: # for jdk version not less than 13",
          "34: # export KYLIN_JVM_SETTINGS=\"-Xms50g -Xmx50g -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:+HeapDumpOnOutOfMemoryError -verbose:gc -Xlog:gc*:$KYLIN_HOME/logs/kylin.gc.`date +'%Y%m%d%H%M'` -XX:+PrintFlagsFinal\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a56732e8bdc55a45c9bffff015bd6a19f6832196",
      "candidate_info": {
        "commit_hash": "a56732e8bdc55a45c9bffff015bd6a19f6832196",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/a56732e8bdc55a45c9bffff015bd6a19f6832196",
        "files": [
          "kylin-it/src/test/resources/query/sql/query115.sql",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/SparderRexVisitor.scala"
        ],
        "message": "[KYLIN-5152] support boolean expression on where clause",
        "before_after_code_files": [
          "kylin-it/src/test/resources/query/sql/query115.sql||kylin-it/src/test/resources/query/sql/query115.sql",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/SparderRexVisitor.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/SparderRexVisitor.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-it/src/test/resources/query/sql/query115.sql||kylin-it/src/test/resources/query/sql/query115.sql": [
          "File: kylin-it/src/test/resources/query/sql/query115.sql -> kylin-it/src/test/resources/query/sql/query115.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: select lstg_format_name, sum(price) as GMV",
          "20:  from test_kylin_fact",
          "21:  where lstg_format_name='FP-GTC' and true",
          "22:  group by lstg_format_name",
          "23: ;{\"scanRowCount\":300,\"scanBytes\":190822,\"scanFiles\":1,\"cuboidId\":14336}",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/SparderRexVisitor.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/SparderRexVisitor.scala": [
          "File: kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/SparderRexVisitor.scala -> kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/SparderRexVisitor.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:       }",
          "81:       val childFilter = operand.accept(this)",
          "83:     }",
          "85:     def getOperands: (Column, Column) = {",
          "",
          "[Removed Lines]",
          "82:       children += childFilter",
          "",
          "[Added Lines]",
          "82:       if (childFilter.isInstanceOf[Boolean]) {",
          "83:         children += lit(childFilter)",
          "84:       }else{",
          "85:         children += childFilter",
          "86:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f48ce8322e6e46df107564c7788e25bcd3abde0",
      "candidate_info": {
        "commit_hash": "6f48ce8322e6e46df107564c7788e25bcd3abde0",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/6f48ce8322e6e46df107564c7788e25bcd3abde0",
        "files": [
          "core-metrics/src/main/java/org/apache/kylin/metrics/lib/impl/BlockingReservoir.java",
          "server/src/main/resources/kylinMetrics.xml"
        ],
        "message": "KYLIN-4653 Make the capacity for the LinkedBlockingQueue of BlockingReservoir configurable\n\n(cherry picked from commit 8e44f573be5905fe85f10241f0f7a7844e48f5f0)",
        "before_after_code_files": [
          "core-metrics/src/main/java/org/apache/kylin/metrics/lib/impl/BlockingReservoir.java||core-metrics/src/main/java/org/apache/kylin/metrics/lib/impl/BlockingReservoir.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-metrics/src/main/java/org/apache/kylin/metrics/lib/impl/BlockingReservoir.java||core-metrics/src/main/java/org/apache/kylin/metrics/lib/impl/BlockingReservoir.java": [
          "File: core-metrics/src/main/java/org/apache/kylin/metrics/lib/impl/BlockingReservoir.java -> core-metrics/src/main/java/org/apache/kylin/metrics/lib/impl/BlockingReservoir.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.concurrent.BlockingQueue;",
          "23: import java.util.concurrent.LinkedBlockingQueue;",
          "25: import org.apache.kylin.metrics.lib.ActiveReservoirListener;",
          "26: import org.apache.kylin.metrics.lib.Record;",
          "27: import org.slf4j.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import com.google.common.annotations.VisibleForTesting;",
          "26: import com.google.common.base.Preconditions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     }",
          "60:     public BlockingReservoir(int minReportSize, int maxReportSize, int maxReportTime) {",
          "61:         this.minReportSize = minReportSize;",
          "62:         this.maxReportSize = maxReportSize;",
          "63:         this.maxReportTime = maxReportTime * 60 * 1000L;",
          "66:         this.listeners = Lists.newArrayList();",
          "68:         this.records = Lists.newArrayListWithExpectedSize(this.maxReportSize);",
          "",
          "[Removed Lines]",
          "65:         this.recordsQueue = new LinkedBlockingQueue<>(MAX_QUEUE_SIZE);",
          "",
          "[Added Lines]",
          "63:         this(minReportSize, maxReportSize, maxReportSize, MAX_QUEUE_SIZE);",
          "64:     }",
          "66:     public BlockingReservoir(int minReportSize, int maxReportSize, int maxReportTime, int maxQueueSize) {",
          "67:         Preconditions.checkArgument(minReportSize > 0, \"minReportSize should be larger than 0\");",
          "68:         Preconditions.checkArgument(maxReportSize >= minReportSize,",
          "69:                 \"maxReportSize should not be less than minBatchSize\");",
          "70:         Preconditions.checkArgument(maxReportTime > 0, \"maxReportTime should be larger than 0\");",
          "75:         this.recordsQueue = new LinkedBlockingQueue<>(maxQueueSize);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         if (ifAll) {",
          "96:             records = Lists.newArrayList();",
          "97:             recordsQueue.drainTo(records);",
          "98:         } else {",
          "99:             records.clear();",
          "100:             recordsQueue.drainTo(records, maxReportSize);",
          "101:         }",
          "103:         boolean ifSucceed = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:             logger.info(\"Will report {} metrics records\", records.size());",
          "112:             logger.info(\"Will report {} metrics records, remaining {} records\", records.size(), size());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:         return true;",
          "128:     }",
          "132:         super.start();",
          "133:         scheduledReporter.start();",
          "134:     }",
          "",
          "[Removed Lines]",
          "130:     @Override",
          "131:     public void start() {",
          "",
          "[Added Lines]",
          "142:     @VisibleForTesting",
          "143:     void notifyUpdate() {",
          "144:         onRecordUpdate(false);",
          "145:     }",
          "147:     @VisibleForTesting",
          "148:     void setReady() {",
          "150:     }",
          "152:     public void start() {",
          "153:         setReady();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c51b481e1c6006142c4b04d8957cbd3daa0e8f6b",
      "candidate_info": {
        "commit_hash": "c51b481e1c6006142c4b04d8957cbd3daa0e8f6b",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/c51b481e1c6006142c4b04d8957cbd3daa0e8f6b",
        "files": [
          "kylin-spark-project/kylin-spark-common/pom.xml",
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala",
          "kylin-spark-project/kylin-spark-metadata/pom.xml",
          "parquet-assembly/pom.xml"
        ],
        "message": "HOTFIX Fix some issues for spark3",
        "before_after_code_files": [
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala": [
          "File: kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala -> kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "492:     val rand = ctx.addMutableState(\"java.util.Random\", \"rand\")",
          "493:     val skewData = ctx.addMutableState(\"it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap\",",
          "494:       \"skewData\")",
          "497:     val initParamsFuncName = ctx.addNewFunction(s\"initParams\",",
          "498:       s\"\"\"",
          "",
          "[Removed Lines]",
          "495:     val skewDataStorage = right.simpleString",
          "",
          "[Added Lines]",
          "495:     val skewDataStorage = ExpressionUtils.simpleString(right)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52c48f97f18d168d9817cc6fa454e93ddb5a473b",
      "candidate_info": {
        "commit_hash": "52c48f97f18d168d9817cc6fa454e93ddb5a473b",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/52c48f97f18d168d9817cc6fa454e93ddb5a473b",
        "files": [
          "core-storage/src/main/java/org/apache/kylin/storage/translate/DerivedFilterTranslator.java",
          "query/src/main/java/org/apache/kylin/query/relnode/visitor/TupleFilterVisitor.java"
        ],
        "message": "KYLIN-4429 Auto convert filter date values to date format string when the related column type is string\n\n(cherry picked from commit b5ef6dd7ddd587e4eccdebd2ab3efb74e2745571)",
        "before_after_code_files": [
          "core-storage/src/main/java/org/apache/kylin/storage/translate/DerivedFilterTranslator.java||core-storage/src/main/java/org/apache/kylin/storage/translate/DerivedFilterTranslator.java",
          "query/src/main/java/org/apache/kylin/query/relnode/visitor/TupleFilterVisitor.java||query/src/main/java/org/apache/kylin/query/relnode/visitor/TupleFilterVisitor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-storage/src/main/java/org/apache/kylin/storage/translate/DerivedFilterTranslator.java||core-storage/src/main/java/org/apache/kylin/storage/translate/DerivedFilterTranslator.java": [
          "File: core-storage/src/main/java/org/apache/kylin/storage/translate/DerivedFilterTranslator.java -> core-storage/src/main/java/org/apache/kylin/storage/translate/DerivedFilterTranslator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.kylin.common.KylinConfig;",
          "25: import org.apache.kylin.common.util.Array;",
          "26: import org.apache.kylin.common.util.Pair;",
          "27: import org.apache.kylin.cube.model.CubeDesc.DeriveInfo;",
          "28: import org.apache.kylin.cube.model.CubeDesc.DeriveType;",
          "29: import org.apache.kylin.dict.lookup.ILookupTable;",
          "30: import org.apache.kylin.metadata.datatype.DataTypeOrder;",
          "31: import org.apache.kylin.metadata.filter.ColumnTupleFilter;",
          "32: import org.apache.kylin.metadata.filter.CompareTupleFilter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import org.apache.kylin.common.util.DateFormat;",
          "31: import org.apache.kylin.metadata.datatype.DataType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:             assert hostCols.length == 1;",
          "61:             CompareTupleFilter newComp = new CompareTupleFilter(compf.getOperator());",
          "62:             newComp.addChild(new ColumnTupleFilter(hostCols[0]));",
          "64:             return new Pair<TupleFilter, Boolean>(newComp, false);",
          "65:         }",
          "",
          "[Removed Lines]",
          "63:             newComp.addChild(new ConstantTupleFilter(compf.getValues()));",
          "",
          "[Added Lines]",
          "65:             Set<?> values = compf.getValues();",
          "66:             DataType pkDataType = compf.getColumn().getType();",
          "67:             if (pkDataType.isDateTimeFamily() && hostCols[0].getType().isStringFamily()) {",
          "68:                 Set<String> newValues = Sets.newHashSetWithExpectedSize(values.size());",
          "69:                 for (Object entry : values) {",
          "70:                     long ts = DateFormat.stringToMillis((String) entry);",
          "71:                     String newEntry = pkDataType.isDate() ? DateFormat.formatToDateStr(ts)",
          "72:                             : DateFormat.formatToTimeWithoutMilliStr(ts);",
          "73:                     newValues.add(newEntry);",
          "74:                 }",
          "75:                 newComp.addChild(new ConstantTupleFilter(newValues));",
          "76:             } else {",
          "77:                 newComp.addChild(new ConstantTupleFilter(values));",
          "78:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:             }",
          "84:         }",
          "86:         TupleFilter translated;",
          "87:         boolean loosened;",
          "88:         if (satisfyingHostRecords.size() > KylinConfig.getInstanceFromEnv().getDerivedInThreshold()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:         for (Array<String> entry : satisfyingHostRecords) {",
          "102:             for (int i = 0; i < pkCols.length; i++) {",
          "103:                 if (pkCols[i].getType().isDateTimeFamily() && hostCols[i].getType().isStringFamily()) {",
          "104:                     long ts = DateFormat.stringToMillis(entry.data[i]);",
          "105:                     entry.data[i] = pkCols[i].getType().isDate() ? DateFormat.formatToDateStr(ts)",
          "106:                             : DateFormat.formatToTimeWithoutMilliStr(ts);",
          "107:                 }",
          "108:             }",
          "109:         }",
          "",
          "---------------"
        ],
        "query/src/main/java/org/apache/kylin/query/relnode/visitor/TupleFilterVisitor.java||query/src/main/java/org/apache/kylin/query/relnode/visitor/TupleFilterVisitor.java": [
          "File: query/src/main/java/org/apache/kylin/query/relnode/visitor/TupleFilterVisitor.java -> query/src/main/java/org/apache/kylin/query/relnode/visitor/TupleFilterVisitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:             filter = new UnsupportedTupleFilter(TupleFilter.FilterOperatorEnum.UNSUPPORTED);",
          "150:         }",
          "152:         for (RexNode operand : call.operands) {",
          "153:             TupleFilter childFilter = operand.accept(this);",
          "154:             if (filter == null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:         boolean isChildValueDateTimeType = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:             } else {",
          "157:                 filter.addChild(childFilter);",
          "158:             }",
          "159:         }",
          "161:         if (op.getKind() == SqlKind.OR) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:             if (operand instanceof RexLiteral && ((RexLiteral) operand).getValue() instanceof GregorianCalendar) {",
          "161:                 isChildValueDateTimeType = true;",
          "162:             }",
          "163:         }",
          "164:         if (filter instanceof CompareTupleFilter) {",
          "165:             CompareTupleFilter compFilter = (CompareTupleFilter) filter;",
          "166:             if (compFilter.getChildren().size() == 2 && compFilter.getChildren().get(0) instanceof ColumnTupleFilter",
          "167:                     && compFilter.getChildren().get(1) instanceof ConstantTupleFilter) {",
          "168:                 ColumnTupleFilter colFilter = (ColumnTupleFilter) compFilter.getChildren().get(0);",
          "169:                 ConstantTupleFilter constFilter = (ConstantTupleFilter) compFilter.getChildren().get(1);",
          "170:                 if (isChildValueDateTimeType && colFilter.getColumn().getType().isStringFamily()) {",
          "171:                     Set<Object> newValues = Sets.newHashSet();",
          "172:                     for (Object v : constFilter.getValues()) {",
          "173:                         newValues.add(DateFormat.formatToDateStr(DateFormat.stringToMillis(v.toString())));",
          "174:                     }",
          "175:                     ConstantTupleFilter newConstFilter = new ConstantTupleFilter(newValues);",
          "176:                     filter = new CompareTupleFilter(filter.getOperator());",
          "177:                     filter.addChild(colFilter);",
          "178:                     filter.addChild(newConstFilter);",
          "179:                 }",
          "180:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}