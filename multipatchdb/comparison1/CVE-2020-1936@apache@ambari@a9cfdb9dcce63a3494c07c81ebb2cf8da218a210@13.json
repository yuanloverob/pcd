{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ec968edf78a11921d0555e3e481c0ce9763d80f1",
      "candidate_info": {
        "commit_hash": "ec968edf78a11921d0555e3e481c0ce9763d80f1",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ec968edf78a11921d0555e3e481c0ce9763d80f1",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java"
        ],
        "message": "AMBARI-24518. Requests STOMP topic sent updates for host check request. (#2142)\n\n* AMBARI-24518. Requests STOMP topic sent updates for host check request. (mpapirkovskyy)\n\n* AMBARI-24518. Requests STOMP topic sent updates for host check request. (mpapirkovskyy)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java||ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java||ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java||ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     TaskCreateEvent taskCreateEvent = new TaskCreateEvent(hostRoleCommands);",
          "437:     taskEventPublisher.publish(taskCreateEvent);",
          "438:     List<HostRoleCommandEntity> hostRoleCommandEntities = hostRoleCommandDAO.findByRequest(requestEntity.getRequestId());",
          "441:   }",
          "443:   @Override",
          "",
          "[Removed Lines]",
          "439:     STOMPUpdatePublisher.publish(new RequestUpdateEvent(requestEntity,",
          "440:         hostRoleCommandDAO, topologyManager, clusterName, hostRoleCommandEntities));",
          "",
          "[Added Lines]",
          "442:     if (clusterName != null) {",
          "443:       STOMPUpdatePublisher.publish(new RequestUpdateEvent(requestEntity,",
          "444:           hostRoleCommandDAO, topologyManager, clusterName, hostRoleCommandEntities));",
          "445:     } else {",
          "446:       LOG.debug(\"No STOMP request update event was fired for new request due no cluster related, \" +",
          "447:               \"request id: {}, command name: {}\",",
          "448:           requestEntity.getRequestId(),",
          "449:           requestEntity.getCommandName());",
          "450:     }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java||ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java -> ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import java.util.Set;",
          "29: import java.util.concurrent.ConcurrentHashMap;",
          "32: import org.apache.ambari.server.EagerSingleton;",
          "33: import org.apache.ambari.server.Role;",
          "34: import org.apache.ambari.server.actionmanager.HostRoleCommand;",
          "",
          "[Removed Lines]",
          "31: import org.apache.ambari.server.ClusterNotFoundException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:   @Subscribe",
          "127:     LOG.debug(\"Received task update event {}\", event);",
          "128:     List<HostRoleCommand> hostRoleCommandListAll = event.getHostRoleCommands();",
          "129:     List<HostRoleCommand>  hostRoleCommandWithReceivedStatus =  new ArrayList<>();",
          "",
          "[Removed Lines]",
          "126:   public void onTaskUpdateEvent(TaskUpdateEvent event) throws ClusterNotFoundException {",
          "",
          "[Added Lines]",
          "125:   public void onTaskUpdateEvent(TaskUpdateEvent event) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:         requestIdsWithReceivedTaskStatus.add(hostRoleCommand.getRequestId());",
          "147:         if (!activeTasksMap.get(reportedTaskId).getStatus().equals(hostRoleCommand.getStatus())) {",
          "155:         }",
          "156:       }",
          "157:     }",
          "",
          "[Removed Lines]",
          "148:           Set<RequestUpdateEvent.HostRoleCommand> hostRoleCommands = new HashSet<>();",
          "149:           hostRoleCommands.add(new RequestUpdateEvent.HostRoleCommand(hostRoleCommand.getTaskId(),",
          "150:               hostRoleCommand.getRequestId(),",
          "151:               hostRoleCommand.getStatus(),",
          "152:               hostRoleCommand.getHostName()));",
          "153:           requestsToPublish.add(new RequestUpdateEvent(hostRoleCommand.getRequestId(),",
          "154:               activeRequestMap.get(hostRoleCommand.getRequestId()).getStatus(), hostRoleCommands));",
          "",
          "[Added Lines]",
          "148:           Long clusterId = activeRequestMap.get(hostRoleCommand.getRequestId()).getClusterId();",
          "149:           if (clusterId != null && clusterId != -1) {",
          "150:             Set<RequestUpdateEvent.HostRoleCommand> hostRoleCommands = new HashSet<>();",
          "151:             hostRoleCommands.add(new RequestUpdateEvent.HostRoleCommand(hostRoleCommand.getTaskId(),",
          "152:                 hostRoleCommand.getRequestId(),",
          "153:                 hostRoleCommand.getStatus(),",
          "154:                 hostRoleCommand.getHostName()));",
          "155:             requestsToPublish.add(new RequestUpdateEvent(hostRoleCommand.getRequestId(),",
          "156:                 activeRequestMap.get(hostRoleCommand.getRequestId()).getStatus(), hostRoleCommands));",
          "157:           } else {",
          "158:             LOG.debug(\"No STOMP request update event was fired for host component status change due no cluster related, \" +",
          "159:                     \"request id: {}, role: {}, role command: {}, host: {}, task id: {}, old state: {}, new state: {}\",",
          "160:                 hostRoleCommand.getRequestId(),",
          "161:                 hostRoleCommand.getRole(),",
          "162:                 hostRoleCommand.getRoleCommand(),",
          "163:                 hostRoleCommand.getHostName(),",
          "164:                 hostRoleCommand.getTaskId(),",
          "165:                 activeTasksMap.get(reportedTaskId).getStatus(),",
          "166:                 hostRoleCommand.getStatus());",
          "167:           }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "265:       assert requestEntity != null;",
          "266:       Set<StageEntityPK> stageEntityPKs =  Sets.newHashSet(stageEntityPK);",
          "268:       activeRequestMap.put(requestId, request);",
          "269:     }",
          "270:   }",
          "",
          "[Removed Lines]",
          "267:       ActiveRequest request = new ActiveRequest(requestEntity.getStatus(),requestEntity.getDisplayStatus(), stageEntityPKs);",
          "",
          "[Added Lines]",
          "280:       ActiveRequest request = new ActiveRequest(requestEntity.getStatus(),requestEntity.getDisplayStatus(),",
          "281:           stageEntityPKs, requestEntity.getClusterId());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "524:     private HostRoleStatus status;",
          "525:     private HostRoleStatus displayStatus;",
          "526:     private Set <StageEntityPK> stageEntityPks;",
          "529:       this.status = status;",
          "530:       this.displayStatus = displayStatus;",
          "531:       this.stageEntityPks = stageEntityPks;",
          "532:     }",
          "534:     public HostRoleStatus getStatus() {",
          "",
          "[Removed Lines]",
          "528:     public ActiveRequest(HostRoleStatus status, HostRoleStatus displayStatus, Set<StageEntityPK> stageEntityPks) {",
          "",
          "[Added Lines]",
          "541:     private Long clusterId;",
          "543:     public ActiveRequest(HostRoleStatus status, HostRoleStatus displayStatus, Set<StageEntityPK> stageEntityPks,",
          "544:                          Long clusterId) {",
          "548:       this.clusterId = clusterId;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "559:       stageEntityPks.add(stageEntityPK);",
          "560:     }",
          "562:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "579:     public Long getClusterId() {",
          "580:       return clusterId;",
          "581:     }",
          "583:     public void setClusterId(Long clusterId) {",
          "584:       this.clusterId = clusterId;",
          "585:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42a46e961d3ea2ce53328aa8f2fa41998e4379c3",
      "candidate_info": {
        "commit_hash": "42a46e961d3ea2ce53328aa8f2fa41998e4379c3",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/42a46e961d3ea2ce53328aa8f2fa41998e4379c3",
        "files": [
          "ambari-logsearch/ambari-logsearch-logfeeder/pom.xml",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh",
          "ambari-logsearch/ambari-logsearch-server/pom.xml",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java",
          "ambari-logsearch/docker/Dockerfile"
        ],
        "message": "AMBARI-24692 - JDK 11 support for Log Search (#2843)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh||ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh||ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.springframework.boot.autoconfigure.SpringBootApplication;",
          "23: import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;",
          "24: import org.springframework.boot.builder.SpringApplicationBuilder;",
          "27: @SpringBootApplication(",
          "28:   scanBasePackages = {\"org.apache.ambari.logfeeder\"},",
          "",
          "[Removed Lines]",
          "25: import org.springframework.boot.system.ApplicationPidFileWriter;",
          "",
          "[Added Lines]",
          "25: import org.springframework.boot.context.ApplicationPidFileWriter;",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh||ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:   LOGFEEDER_GC_LOGFILE=\"$LOG_PATH_WITHOUT_SLASH/$LOGFEEDER_GC_LOGFILE\"",
          "81: fi",
          "85: function print_usage() {",
          "86:   cat << EOF",
          "",
          "[Removed Lines]",
          "83: LOGFEEDER_GC_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$LOGFEEDER_GC_LOGFILE\"",
          "",
          "[Added Lines]",
          "83: java_version=$($JVM -version 2>&1 | grep 'version' | cut -d'\"' -f2 | cut -d'.' -f2)",
          "84: if [ $java_version == \"8\" ]; then",
          "85:   LOGFEEDER_GC_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$LOGFEEDER_GC_LOGFILE\"",
          "86: else",
          "87:   LOGFEEDER_GC_OPTS=\"-Xlog:gc*:file=$LOGFEEDER_GC_LOGFILE:time\"",
          "88: fi",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:   LOGFEEDER_DEBUG_PORT=${LOGFEEDER_DEBUG_PORT:-\"5006\"}",
          "156:   if [ \"$LOGFEEDER_DEBUG\" = \"true\" ]; then",
          "158:   fi",
          "160:   if [ \"$LOGFEEDER_SSL\" = \"true\" ]; then",
          "",
          "[Removed Lines]",
          "157:     LOGFEEDER_JAVA_OPTS=\"$LOGFEEDER_JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$LOGFEEDER_DEBUG_PORT,server=y,suspend=$LOGFEEDER_DEBUG_SUSPEND \"",
          "",
          "[Added Lines]",
          "162:     if [ $java_version == \"8\" ]; then",
          "163:       LOGFEEDER_DEBUG_ADDRESS=$LOGFEEDER_DEBUG_PORT",
          "164:     else",
          "165:       LOGFEEDER_DEBUG_ADDRESS=\"*:$LOGFEEDER_DEBUG_PORT\"",
          "166:     fi",
          "167:     LOGFEEDER_JAVA_OPTS=\"$LOGFEEDER_JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$LOGFEEDER_DEBUG_ADDRESS,server=y,suspend=$LOGFEEDER_DEBUG_SUSPEND \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "209: }",
          "211: function stop() {",
          "213:   if [ -f \"$LOGFEEDER_PID_FILE\" ]; then",
          "214:     LOGFEEDER_PID=`cat \"$LOGFEEDER_PID_FILE\"`",
          "215:   fi",
          "",
          "[Removed Lines]",
          "212:   LOGFEEDER_STOP_WAIT=3",
          "",
          "[Added Lines]",
          "222:   LOGFEEDER_STOP_WAIT=${LOGFEEDER_STOP_WAIT:-60}",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch;",
          "21: import org.springframework.boot.Banner;",
          "22: import org.springframework.boot.autoconfigure.SpringBootApplication;",
          "23: import org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration;",
          "24: import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;",
          "26: import org.springframework.boot.builder.SpringApplicationBuilder;",
          "29: @SpringBootApplication(",
          "30:   scanBasePackages = {\"org.apache.ambari.logsearch\"},",
          "31:   exclude = {",
          "32:     RepositoryRestMvcAutoConfiguration.class,",
          "33:     WebMvcAutoConfiguration.class,",
          "35:   }",
          "36: )",
          "37: public class LogSearch {",
          "",
          "[Removed Lines]",
          "25: import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;",
          "27: import org.springframework.boot.system.ApplicationPidFileWriter;",
          "34:     SolrAutoConfiguration.class",
          "",
          "[Added Lines]",
          "22: import org.springframework.boot.WebApplicationType;",
          "25: import org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration;",
          "27: import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;",
          "29: import org.springframework.boot.context.ApplicationPidFileWriter;",
          "36:     SolrAutoConfiguration.class,",
          "37:     SolrRepositoriesAutoConfiguration.class",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     new SpringApplicationBuilder(LogSearch.class)",
          "43:       .bannerMode(Banner.Mode.OFF)",
          "44:       .listeners(new ApplicationPidFileWriter(pidFile))",
          "46:       .run(args);",
          "47:   }",
          "",
          "[Removed Lines]",
          "45:       .web(true)",
          "",
          "[Added Lines]",
          "48:       .web(WebApplicationType.SERVLET)",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "21: import org.apache.ambari.logsearch.config.api.LogSearchPropertyDescription;",
          "22: import org.springframework.beans.factory.annotation.Value;",
          "23: import org.springframework.context.annotation.Configuration;",
          "27: @Configuration",
          "28: public class LogSearchHttpConfig {",
          "",
          "[Removed Lines]",
          "25: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_PROPERTIES_FILE;",
          "",
          "[Added Lines]",
          "21: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_PROPERTIES_FILE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:   @Value(\"${logsearch.protocol:http}\")",
          "58:   private String protocol;",
          "60:   public String getProtocol() {",
          "61:     return protocol;",
          "62:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:   @LogSearchPropertyDescription(",
          "61:           name = \"logsearch.session.timeout\",",
          "62:           description = \"Log Search http session timeout in minutes.\",",
          "63:           examples = {\"300\"},",
          "64:           defaultValue = \"30\",",
          "65:           sources = {LOGSEARCH_PROPERTIES_FILE}",
          "66:   )",
          "67:   @Value(\"${logsearch.session.timeout:30}\")",
          "68:   private Integer sessionTimeout;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:   public void setHttpsPort(int httpsPort) {",
          "81:     this.httpsPort = httpsPort;",
          "82:   }",
          "83: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:   public Integer getSessionTimeout() {",
          "95:     return sessionTimeout;",
          "96:   }",
          "98:   public void setSessionTimeout(Integer sessionTimeout) {",
          "99:     this.sessionTimeout = sessionTimeout;",
          "100:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "21: import org.apache.ambari.logsearch.configurer.SslConfigurer;",
          "22: import org.apache.ambari.logsearch.web.listener.LogSearchSessionListener;",
          "27: import org.glassfish.jersey.servlet.ServletContainer;",
          "28: import org.glassfish.jersey.servlet.ServletProperties;",
          "29: import org.springframework.boot.autoconfigure.web.ServerProperties;",
          "34: import org.springframework.boot.web.servlet.ServletRegistrationBean;",
          "35: import org.springframework.context.annotation.Bean;",
          "36: import org.springframework.context.annotation.Configuration;",
          "44: @Configuration",
          "45: public class LogSearchServletConfig {",
          "",
          "[Removed Lines]",
          "23: import org.eclipse.jetty.server.Connector;",
          "24: import org.eclipse.jetty.server.Server;",
          "25: import org.eclipse.jetty.server.ServerConnector;",
          "26: import org.eclipse.jetty.util.ssl.SslContextFactory;",
          "30: import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;",
          "31: import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainer;",
          "32: import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;",
          "33: import org.springframework.boot.context.embedded.jetty.JettyServerCustomizer;",
          "38: import javax.inject.Inject;",
          "39: import javax.servlet.http.HttpSessionListener;",
          "41: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_APPLICATION_NAME;",
          "42: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;",
          "",
          "[Added Lines]",
          "21: import javax.inject.Inject;",
          "22: import javax.servlet.http.HttpSessionListener;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS, LogSearchJerseyResourceConfig.class.getName());",
          "67:     return registration;",
          "68:   }",
          "95: }",
          "",
          "[Removed Lines]",
          "70:   @Bean",
          "71:   public EmbeddedServletContainerFactory containerFactory() {",
          "72:     final JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory = new JettyEmbeddedServletContainerFactory() {",
          "73:       @Override",
          "74:       protected JettyEmbeddedServletContainer getJettyEmbeddedServletContainer(Server server) {",
          "75:         return new JettyEmbeddedServletContainer(server);",
          "76:       }",
          "77:     };",
          "78:     jettyEmbeddedServletContainerFactory.setSessionTimeout(SESSION_TIMEOUT);",
          "79:     serverProperties.getSession().getCookie().setName(LOGSEARCH_SESSION_ID);",
          "80:     serverProperties.setDisplayName(LOGSEARCH_APPLICATION_NAME);",
          "81:     if (\"https\".equals(logSearchHttpConfig.getProtocol())) {",
          "82:       sslConfigurer.ensureStorePasswords();",
          "83:       sslConfigurer.loadKeystore();",
          "84:       jettyEmbeddedServletContainerFactory.addServerCustomizers((JettyServerCustomizer) server -> {",
          "85:         SslContextFactory sslContextFactory = sslConfigurer.getSslContextFactory();",
          "86:         ServerConnector sslConnector = new ServerConnector(server, sslContextFactory);",
          "87:         sslConnector.setPort(logSearchHttpConfig.getHttpsPort());",
          "88:         server.setConnectors(new Connector[]{sslConnector});",
          "89:       });",
          "90:     } else {",
          "91:       jettyEmbeddedServletContainerFactory.setPort(logSearchHttpConfig.getHttpPort());",
          "92:     }",
          "93:     return jettyEmbeddedServletContainerFactory;",
          "94:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logsearch.conf;",
          "21: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;",
          "23: import java.time.Duration;",
          "25: import javax.inject.Inject;",
          "27: import org.apache.ambari.logsearch.configurer.SslConfigurer;",
          "28: import org.eclipse.jetty.server.Connector;",
          "29: import org.eclipse.jetty.server.ServerConnector;",
          "30: import org.eclipse.jetty.util.ssl.SslContextFactory;",
          "31: import org.springframework.boot.autoconfigure.web.ServerProperties;",
          "32: import org.springframework.boot.web.embedded.jetty.JettyServerCustomizer;",
          "33: import org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactory;",
          "34: import org.springframework.boot.web.server.WebServerFactoryCustomizer;",
          "35: import org.springframework.stereotype.Component;",
          "37: @Component",
          "38: public class LogSearchWebServerCustomizer implements WebServerFactoryCustomizer<JettyServletWebServerFactory> {",
          "40:   @Inject",
          "41:   private ServerProperties serverProperties;",
          "43:   @Inject",
          "44:   private LogSearchHttpConfig logSearchHttpConfig;",
          "46:   @Inject",
          "47:   private SslConfigurer sslConfigurer;",
          "49:   @Override",
          "50:   public void customize(JettyServletWebServerFactory webServerFactory) {",
          "51:     serverProperties.getServlet().getSession().setTimeout(Duration.ofMinutes(logSearchHttpConfig.getSessionTimeout()));",
          "52:     serverProperties.getServlet().getSession().getCookie().setName(LOGSEARCH_SESSION_ID);",
          "54:     if (\"https\".equals(logSearchHttpConfig.getProtocol())) {",
          "55:       sslConfigurer.ensureStorePasswords();",
          "56:       sslConfigurer.loadKeystore();",
          "57:       webServerFactory.addServerCustomizers((JettyServerCustomizer) server -> {",
          "58:         SslContextFactory sslContextFactory = sslConfigurer.getSslContextFactory();",
          "59:         ServerConnector sslConnector = new ServerConnector(server, sslContextFactory);",
          "60:         sslConnector.setPort(logSearchHttpConfig.getHttpsPort());",
          "61:         server.setConnectors(new Connector[]{sslConnector});",
          "62:       });",
          "63:     } else {",
          "64:       webServerFactory.setPort(logSearchHttpConfig.getHttpPort());",
          "65:     }",
          "66:   }",
          "67: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "23: import org.apache.ambari.logsearch.conf.global.LogSearchConfigState;",
          "24: import org.apache.ambari.logsearch.conf.global.SolrCollectionState;",
          "26: import org.apache.ambari.logsearch.web.authenticate.LogsearchAuthFailureHandler;",
          "27: import org.apache.ambari.logsearch.web.authenticate.LogsearchAuthSuccessHandler;",
          "28: import org.apache.ambari.logsearch.web.authenticate.LogsearchLogoutSuccessHandler;",
          "29: import org.apache.ambari.logsearch.web.filters.LogSearchLogLevelFilterManagerFilter;",
          "30: import org.apache.ambari.logsearch.web.filters.LogsearchAuditLogsStateFilter;",
          "31: import org.apache.ambari.logsearch.web.filters.LogsearchAuthenticationEntryPoint;",
          "32: import org.apache.ambari.logsearch.web.filters.LogsearchCorsFilter;",
          "35: import org.apache.ambari.logsearch.web.filters.LogsearchJWTFilter;",
          "36: import org.apache.ambari.logsearch.web.filters.LogsearchSecurityContextFormationFilter;",
          "37: import org.apache.ambari.logsearch.web.filters.LogsearchServiceLogsStateFilter;",
          "39: import org.apache.ambari.logsearch.web.filters.LogsearchUsernamePasswordAuthenticationFilter;",
          "40: import org.apache.ambari.logsearch.web.security.LogsearchAuthenticationProvider;",
          "41: import org.springframework.context.annotation.Bean;",
          "",
          "[Removed Lines]",
          "21: import com.google.common.collect.Lists;",
          "25: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "33: import org.apache.ambari.logsearch.web.filters.LogSearchConfigStateFilter;",
          "34: import org.apache.ambari.logsearch.web.filters.LogsearchKRBAuthenticationFilter;",
          "38: import org.apache.ambari.logsearch.web.filters.LogsearchEventHistoryStateFilter;",
          "",
          "[Added Lines]",
          "21: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;",
          "23: import java.util.ArrayList;",
          "24: import java.util.List;",
          "26: import javax.inject.Inject;",
          "27: import javax.inject.Named;",
          "29: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "35: import org.apache.ambari.logsearch.web.filters.LogSearchConfigStateFilter;",
          "40: import org.apache.ambari.logsearch.web.filters.LogsearchEventHistoryStateFilter;",
          "42: import org.apache.ambari.logsearch.web.filters.LogsearchKRBAuthenticationFilter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: import org.springframework.security.config.annotation.web.builders.HttpSecurity;",
          "44: import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;",
          "45: import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;",
          "46: import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;",
          "47: import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;",
          "48: import org.springframework.security.web.util.matcher.AntPathRequestMatcher;",
          "49: import org.springframework.security.web.util.matcher.OrRequestMatcher;",
          "50: import org.springframework.security.web.util.matcher.RequestMatcher;",
          "59: @Configuration",
          "60: @EnableWebSecurity",
          "",
          "[Removed Lines]",
          "52: import javax.inject.Inject;",
          "53: import javax.inject.Named;",
          "54: import java.util.ArrayList;",
          "55: import java.util.List;",
          "57: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;",
          "",
          "[Added Lines]",
          "52: import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;",
          "53: import org.springframework.security.crypto.password.PasswordEncoder;",
          "60: import com.google.common.collect.Lists;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     return filter;",
          "172:   }",
          "174:   @Bean",
          "175:   public LogsearchServiceLogsStateFilter logsearchServiceLogFilter() {",
          "176:     return new LogsearchServiceLogsStateFilter(serviceLogsRequestMatcher(), solrServiceLogsState, solrServiceLogPropsConfig);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:   @Bean",
          "178:   public PasswordEncoder passwordEncoder() {",
          "179:     return new BCryptPasswordEncoder();",
          "180:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.ambari.logsearch.conf.global.SolrAuditLogsState;",
          "22: import org.apache.ambari.logsearch.conf.global.SolrCollectionState;",
          "25: import org.apache.ambari.logsearch.conf.global.SolrEventHistoryState;",
          "26: import org.apache.ambari.logsearch.dao.SolrSchemaFieldDao;",
          "27: import org.springframework.context.annotation.Bean;",
          "28: import org.springframework.context.annotation.Configuration;",
          "30: import org.springframework.scheduling.annotation.EnableScheduling;",
          "32: @Configuration",
          "34: @EnableScheduling",
          "35: public class SolrConfig {",
          "",
          "[Removed Lines]",
          "23: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "24: import org.apache.ambari.logsearch.conf.global.SolrServiceLogsState;",
          "29: import org.springframework.data.solr.repository.config.EnableSolrRepositories;",
          "33: @EnableSolrRepositories",
          "",
          "[Added Lines]",
          "24: import org.apache.ambari.logsearch.conf.global.SolrServiceLogsState;",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import javax.inject.Inject;",
          "29: import org.apache.ambari.logsearch.conf.AuthPropsConfig;",
          "33: import org.apache.ambari.logsearch.util.FileUtil;",
          "34: import org.apache.ambari.logsearch.util.JSONUtil;",
          "35: import org.apache.ambari.logsearch.web.model.Privilege;",
          "",
          "[Removed Lines]",
          "30: import org.springframework.security.core.GrantedAuthority;",
          "31: import org.springframework.stereotype.Repository;",
          "32: import org.apache.ambari.logsearch.util.CommonUtil;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.apache.commons.collections.Predicate;",
          "40: import org.apache.commons.lang.StringUtils;",
          "41: import org.apache.log4j.Logger;",
          "43: @Repository",
          "44: public class UserDao {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.springframework.security.core.GrantedAuthority;",
          "40: import org.springframework.security.crypto.password.PasswordEncoder;",
          "41: import org.springframework.stereotype.Repository;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   @Inject",
          "53:   private AuthPropsConfig authPropsConfig;",
          "55:   private ArrayList<HashMap<String, String>> userList = null;",
          "57:   @SuppressWarnings(\"unchecked\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:   @Inject",
          "56:   private PasswordEncoder passwordEncoder;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:       String username = user.get(USER_NAME);",
          "137:       String password = user.get(PASSWORD);",
          "138:       if (StringUtils.isNotBlank(password)) {",
          "140:         user.put(PASSWORD, \"\");",
          "141:         user.put(ENC_PASSWORD, encPassword);",
          "142:         isUpdated = true;",
          "",
          "[Removed Lines]",
          "139:         encPassword = CommonUtil.encryptPassword(username, password);",
          "",
          "[Added Lines]",
          "142:         encPassword = passwordEncoder.encode(password);",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.web.filters;",
          "21: import java.io.IOException;",
          "23: import javax.inject.Inject;",
          "24: import javax.servlet.FilterChain;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.security.SecureRandom;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import org.apache.ambari.logsearch.common.LogSearchContext;",
          "34: import org.apache.ambari.logsearch.manager.SessionManager;",
          "36: import org.apache.ambari.logsearch.web.model.User;",
          "37: import org.apache.log4j.Logger;",
          "38: import org.springframework.security.authentication.AnonymousAuthenticationToken;",
          "",
          "[Removed Lines]",
          "35: import org.apache.ambari.logsearch.util.CommonUtil;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:   public static final String LOGSEARCH_SC_SESSION_KEY = \"LOGSEARCH_SECURITY_CONTEXT\";",
          "48:   public static final String USER_AGENT = \"User-Agent\";",
          "50:   @Inject",
          "51:   SessionManager sessionManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   private static SecureRandom secureRandom = new SecureRandom();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:         }",
          "81:         if (msaCookie == null) {",
          "82:           HttpServletResponse httpResponse = (HttpServletResponse) response;",
          "84:           Cookie cookie = new Cookie(\"msa\", msaCookie);",
          "86:           cookie.setMaxAge(Integer.MAX_VALUE);",
          "",
          "[Removed Lines]",
          "83:           msaCookie = CommonUtil.genGUI();",
          "",
          "[Added Lines]",
          "85:           msaCookie = System.currentTimeMillis() + \"_\" + secureRandom.nextInt(1000);",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import javax.servlet.Filter;",
          "30: import javax.servlet.FilterRegistration;",
          "31: import javax.servlet.RequestDispatcher;",
          "32: import javax.servlet.Servlet;",
          "33: import javax.servlet.ServletContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import javax.servlet.FilterRegistration.Dynamic;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import javax.servlet.ServletRegistration;",
          "36: import javax.servlet.SessionCookieConfig;",
          "37: import javax.servlet.SessionTrackingMode;",
          "39: import javax.servlet.descriptor.JspConfigDescriptor;",
          "41: public class NoServletContext implements ServletContext {",
          "",
          "[Removed Lines]",
          "38: import javax.servlet.FilterRegistration.Dynamic;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:     return null;",
          "76:   }",
          "78:   @Override",
          "79:   public SessionCookieConfig getSessionCookieConfig() {",
          "80:     return null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   @Override",
          "79:   public int getSessionTimeout() {",
          "80:     return 0;",
          "81:   }",
          "83:   @Override",
          "84:   public void setSessionTimeout(int i) {",
          "86:   }",
          "88:   @Override",
          "89:   public String getRequestCharacterEncoding() {",
          "90:     return null;",
          "91:   }",
          "93:   @Override",
          "94:   public void setRequestCharacterEncoding(String s) {",
          "96:   }",
          "98:   @Override",
          "99:   public String getResponseCharacterEncoding() {",
          "100:     return null;",
          "101:   }",
          "103:   @Override",
          "104:   public void setResponseCharacterEncoding(String s) {",
          "106:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:   }",
          "255:   @Override",
          "257:       String servletName, Class<? extends Servlet> servletClass) {",
          "258:     return null;",
          "259:   }",
          "261:   @Override",
          "263:       String servletName, Servlet servlet) {",
          "264:     return null;",
          "265:   }",
          "267:   @Override",
          "269:       String servletName, String className) {",
          "270:     return null;",
          "271:   }",
          "",
          "[Removed Lines]",
          "256:   public javax.servlet.ServletRegistration.Dynamic addServlet(",
          "262:   public javax.servlet.ServletRegistration.Dynamic addServlet(",
          "268:   public javax.servlet.ServletRegistration.Dynamic addServlet(",
          "",
          "[Added Lines]",
          "286:   public ServletRegistration.Dynamic addServlet(",
          "292:   public ServletRegistration.Dynamic addJspFile(String s, String s1) {",
          "293:     return null;",
          "294:   }",
          "296:   @Override",
          "297:   public ServletRegistration.Dynamic addServlet(",
          "303:   public ServletRegistration.Dynamic addServlet(",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Collection;",
          "23: import org.apache.ambari.logsearch.conf.AuthPropsConfig;",
          "25: import org.apache.commons.lang.StringEscapeUtils;",
          "26: import org.apache.commons.lang.StringUtils;",
          "27: import org.apache.log4j.Logger;",
          "",
          "[Removed Lines]",
          "24: import org.apache.ambari.logsearch.util.CommonUtil;",
          "",
          "[Added Lines]",
          "23: import javax.inject.Inject;",
          "24: import javax.inject.Named;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import org.springframework.security.core.GrantedAuthority;",
          "33: import org.springframework.security.core.userdetails.UserDetails;",
          "34: import org.springframework.security.core.userdetails.UserDetailsService;",
          "39: @Named",
          "40: public class LogsearchFileAuthenticationProvider extends LogsearchAbstractAuthenticationProvider {",
          "",
          "[Removed Lines]",
          "36: import javax.inject.Inject;",
          "37: import javax.inject.Named;",
          "",
          "[Added Lines]",
          "37: import org.springframework.security.crypto.password.PasswordEncoder;",
          "39: import com.google.common.annotations.VisibleForTesting;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:   @Inject",
          "48:   private UserDetailsService userDetailsService;",
          "50:   @Override",
          "51:   public Authentication authenticate(Authentication authentication) throws AuthenticationException {",
          "52:     if (!authPropsConfig.isAuthFileEnabled()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:   @Inject",
          "53:   private PasswordEncoder passwordEncoder;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:       logger.error(\"Password can't be null or empty.\");",
          "76:       throw new BadCredentialsException(\"Password can't be null or empty.\");",
          "77:     }",
          "80:       logger.error(\"Wrong password for user=\" + username);",
          "81:       throw new BadCredentialsException(\"Wrong password.\");",
          "82:     }",
          "84:     Collection<? extends GrantedAuthority> authorities = user.getAuthorities();",
          "86:     return authentication;",
          "87:   }",
          "88: }",
          "",
          "[Removed Lines]",
          "78:     String encPassword = CommonUtil.encryptPassword(username, password);",
          "79:     if (!encPassword.equals(user.getPassword())) {",
          "85:     authentication = new UsernamePasswordAuthenticationToken(username, encPassword, authorities);",
          "",
          "[Added Lines]",
          "84:     if (!passwordEncoder.matches(password, user.getPassword())) {",
          "90:     authentication = new UsernamePasswordAuthenticationToken(username, user.getPassword(), authorities);",
          "94:   @VisibleForTesting",
          "95:   public void setPasswordEncoder(PasswordEncoder passwordEncoder) {",
          "96:     this.passwordEncoder = passwordEncoder;",
          "97:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh||ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh -> ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   LOGSEARCH_GC_LOGFILE=\"$LOG_PATH_WITHOUT_SLASH/$LOGSEARCH_GC_LOGFILE\"",
          "79: fi",
          "83: function print_usage() {",
          "84:   cat << EOF",
          "",
          "[Removed Lines]",
          "81: LOGSEARCH_GC_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$LOGSEARCH_GC_LOGFILE\"",
          "",
          "[Added Lines]",
          "81: java_version=$($JVM -version 2>&1 | grep 'version' | cut -d'\"' -f2 | cut -d'.' -f2)",
          "82: if [ $java_version == \"8\" ]; then",
          "83:   LOGSEARCH_GC_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$LOGSEARCH_GC_LOGFILE\"",
          "84: else",
          "85:   LOGSEARCH_GC_OPTS=\"-Xlog:gc*:file=$LOGSEARCH_GC_LOGFILE:time\"",
          "86: fi",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:   LOGSEARCH_DEBUG_PORT=${LOGSEARCH_DEBUG_PORT:-\"5005\"}",
          "146:   if [ \"$LOGSEARCH_DEBUG\" = \"true\" ]; then",
          "148:   fi",
          "150:   if [ \"$LOGSEARCH_SSL\" = \"true\" ]; then",
          "",
          "[Removed Lines]",
          "147:     LOGSEARCH_JAVA_OPTS=\"$LOGSEARCH_JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$LOGSEARCH_DEBUG_PORT,server=y,suspend=$LOGSEARCH_DEBUG_SUSPEND \"",
          "",
          "[Added Lines]",
          "152:     if [ $java_version == \"8\" ]; then",
          "153:       LOGSEARCH_DEBUG_ADDRESS=$LOGSEARCH_DEBUG_PORT",
          "154:     else",
          "155:       LOGSEARCH_DEBUG_ADDRESS=\"*:$LOGSEARCH_DEBUG_PORT\"",
          "156:     fi",
          "157:     LOGSEARCH_JAVA_OPTS=\"$LOGSEARCH_JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$LOGSEARCH_DEBUG_ADDRESS,server=y,suspend=$LOGSEARCH_DEBUG_SUSPEND \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199: }",
          "201: function stop() {",
          "203:   if [ -f \"$LOGSEARCH_PID_FILE\" ]; then",
          "204:     LOGSEARCH_PID=`cat \"$LOGSEARCH_PID_FILE\"`",
          "205:   fi",
          "",
          "[Removed Lines]",
          "202:   LOGSEARCH_STOP_WAIT=3",
          "",
          "[Added Lines]",
          "212:   LOGSEARCH_STOP_WAIT=${LOGSEARCH_STOP_WAIT:-10}",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.AuditLogRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.AuditLogQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "27: import org.springframework.data.solr.core.query.SimpleQuery;",
          "31: public class AuditLogRequestConverterTest extends AbstractRequestConverterTest {",
          "33:   private AuditLogRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "29: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     SimpleQuery simpleQuery = underTest.convert(request);",
          "48:     SolrQuery queryResult = new DefaultQueryParser().doConstructSolrQuery(simpleQuery);",
          "52:       queryResult.toQueryString());",
          "53:   }",
          "",
          "[Removed Lines]",
          "50:     assertEquals(\"?q=*%3A*&start=0&rows=25&fq=repo%3A%28logsearch_app+OR+secure_log%29&fq=-repo%3A%28hst_agent+OR+system_message%29\" +",
          "51:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=cluster%3Acl1&fq=reqUser%3A%28joe+OR+steven%29&sort=evtTime+desc%2Cseq_num+desc\",",
          "",
          "[Added Lines]",
          "50:     assertEquals(\"?q=*%3A*&start=0&rows=25&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29\" +",
          "51:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=cluster%3Acl1&fq=reqUser%3A%28joe+%22OR%22+steven%29&sort=evtTime+desc%2Cseq_num+desc\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.AuditServiceLoadRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.AuditServiceLoadQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class AuditServiceLoadRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private AuditServiceLoadRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     SolrQuery solrQuery = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "47:     assertEquals(\"?q=*%3A*&rows=0&fq=evtTime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "50:   }",
          "52:   @Test",
          "",
          "[Removed Lines]",
          "48:       \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+OR+secure_log%29\" +",
          "49:       \"&fq=-repo%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=10&facet.field=repo\", solrQuery.toQueryString());",
          "",
          "[Added Lines]",
          "48:       \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "49:       \"&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=10&facet.field=repo\", solrQuery.toQueryString());",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceLogRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogQueryRequest;",
          "23: import org.apache.ambari.logsearch.util.SolrUtil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.springframework.data.solr.core.DefaultQueryParser;",
          "28: import org.springframework.data.solr.core.query.SimpleQuery;",
          "32: public class BaseServiceLogRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "34:   private BaseServiceLogRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "30: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:     SolrQuery solrQuery = defaultQueryParser.doConstructSolrQuery(query);",
          "54:     SolrUtil.removeDoubleOrTripleEscapeFromFilters(solrQuery);",
          "57:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=cluster%3Acl1&fq=path%3A%5C%2Fvar%5C%2Flog%5C%2Fmyfile%5C-%5C*%5C-hdfs.log\" +",
          "59:         \"&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D&sort=logtime+desc%2Cseq_num+desc\",",
          "60:       solrQuery.toQueryString());",
          "61:   }",
          "",
          "[Removed Lines]",
          "56:     assertEquals(\"?q=*%3A*&start=0&rows=25&fq=type%3A%28logsearch_app+OR+secure_log%29&fq=-type%3A%28hst_agent+OR+system_message%29\" +",
          "58:         \"&fq=type%3Acomponent&fq=level%3A%28FATAL+OR+ERROR+OR+WARN+OR+UNKNOWN%29&fq=host%3A%28logsearch1.com+OR+logsearch2.com%29\" +",
          "",
          "[Added Lines]",
          "56:     assertEquals(\"?q=*%3A*&start=0&rows=25&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29&fq=-type%3A%28hst_agent+%22OR%22+system_message%29\" +",
          "58:         \"&fq=type%3Acomponent&fq=level%3A%28FATAL+%22OR%22+ERROR+%22OR%22+WARN+%22OR%22+UNKNOWN%29&fq=host%3A%28logsearch1.com+%22OR%22+logsearch2.com%29\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.FieldAuditLogRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.FieldAuditLogQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class FieldAuditLogRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private FieldAuditLogRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "48:     assertEquals(\"?q=*%3A*&rows=0&fq=evtTime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "51:       query.toQueryString());",
          "52:   }",
          "",
          "[Removed Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+OR+secure_log%29\" +",
          "50:         \"&fq=-repo%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=myfield%2Crepo\",",
          "",
          "[Added Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "50:         \"&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=myfield%2Crepo\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceAnyGraphRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceAnyGraphQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogAnyGraphRequestConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogAnyGraphRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "48:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "51:       query.toQueryString());",
          "52:   }",
          "",
          "[Removed Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "50:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.field=level\",",
          "",
          "[Added Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "50:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.field=level\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceLogComponentLevelRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogComponentLevelQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogComponentLevelRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogComponentLevelRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "49:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "52:         \"&facet=true&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=type%2Clevel\",",
          "53:       query.toQueryString());",
          "54:   }",
          "",
          "[Removed Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=type%3Amycomponent&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29&fq=cluster%3Acl1\" +",
          "",
          "[Added Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=type%3Amycomponent&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29&fq=cluster%3Acl1\" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "65:       \"&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=type%2Clevel\", query.toQueryString());",
          "66:   }",
          "67: }",
          "",
          "[Removed Lines]",
          "64:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29&facet=true\" +",
          "",
          "[Added Lines]",
          "64:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29&facet=true\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceLogComponentHostRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogComponentHostQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogComponentRequestFacetQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogComponentRequestFacetQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "49:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "52:         \"&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=type%2Chost%2Clevel&facet.pivot=type%2Clevel\",",
          "53:       query.toQueryString());",
          "54:   }",
          "",
          "[Removed Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=type%3Amycomponent&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29\" +",
          "",
          "[Added Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=type%3Amycomponent&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29\" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "65:         \"&facet=true&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=type%2Chost%2Clevel&facet.pivot=type%2Clevel\",",
          "66:       query.toQueryString());",
          "67:   }",
          "",
          "[Removed Lines]",
          "64:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29\" +",
          "",
          "[Added Lines]",
          "64:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceLogLevelCountRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogLevelCountQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogLevelCountRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogLevelCountRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "47:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "50:       query.toQueryString());",
          "51:   }",
          "",
          "[Removed Lines]",
          "48:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "49:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.field=level\",",
          "",
          "[Added Lines]",
          "48:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "49:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.field=level\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceLogHostComponentRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogHostComponentQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogTreeRequestFacetQueryConverterTest extends AbstractRequestConverterTest {",
          "31:   private ServiceLogTreeRequestFacetQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "47:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "50:         \"&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=host%2Ctype%2Clevel&facet.pivot=host%2Clevel\",",
          "51:       query.toQueryString());",
          "52:   }",
          "",
          "[Removed Lines]",
          "48:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "49:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29&fq=cluster%3Acl1&facet=true\" +",
          "",
          "[Added Lines]",
          "48:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "49:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29&fq=cluster%3Acl1&facet=true\" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "63:         \"&facet=true&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=host%2Ctype%2Clevel&facet.pivot=host%2Clevel\",",
          "64:       query.toQueryString());",
          "65:   }",
          "",
          "[Removed Lines]",
          "62:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29\" +",
          "",
          "[Added Lines]",
          "62:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceLogTruncatedRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogTruncatedQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogTruncatedRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogTruncatedRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "52:         \"&fq=cluster%3Acl1&sort=logtime+desc%2Cseq_num+desc\",",
          "53:       query.toQueryString());",
          "54:   }",
          "",
          "[Removed Lines]",
          "50:     assertEquals(\"?q=*%3A*&start=0&rows=10&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage\" +",
          "",
          "[Added Lines]",
          "50:     assertEquals(\"?q=*%3A*&start=0&rows=10&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.TopFieldAuditLogRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.TopFieldAuditLogQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class TopFieldAuditLogRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private TopFieldAuditLogRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "49:     assertEquals(\"?q=*%3A*&rows=0&fq=evtTime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "52:       query.toQueryString());",
          "53:   }",
          "",
          "[Removed Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+OR+secure_log%29\" +",
          "51:         \"&fq=-repo%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=10&facet.pivot=myfield%2Crepo\",",
          "",
          "[Added Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "51:         \"&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=10&facet.pivot=myfield%2Crepo\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.UserExportRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.UserExportQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class UserExportRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "31:   private UserExportRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "48:     assertEquals(\"?q=*%3A*&rows=0&fq=evtTime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "51:       query.toQueryString());",
          "52:   }",
          "",
          "[Removed Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+OR+secure_log%29\" +",
          "50:         \"&fq=-repo%3A%28hst_agent+OR+system_message%29&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=reqUser%2Crepo&facet.pivot=resource%2Crepo\",",
          "",
          "[Added Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "50:         \"&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=reqUser%2Crepo&facet.pivot=resource%2Crepo\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.web.security;",
          "21: import org.apache.ambari.logsearch.conf.AuthPropsConfig;",
          "23: import org.apache.ambari.logsearch.web.model.User;",
          "24: import org.junit.Before;",
          "25: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "22: import org.apache.ambari.logsearch.util.CommonUtil;",
          "",
          "[Added Lines]",
          "21: import static junit.framework.Assert.assertEquals;",
          "22: import static junit.framework.Assert.assertSame;",
          "23: import static junit.framework.Assert.fail;",
          "24: import static org.easymock.EasyMock.expect;",
          "25: import static org.easymock.EasyMock.replay;",
          "26: import static org.easymock.EasyMock.strictMock;",
          "27: import static org.easymock.EasyMock.verify;",
          "29: import java.lang.reflect.Field;",
          "30: import java.util.Collections;",
          "31: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.springframework.security.core.GrantedAuthority;",
          "30: import org.springframework.security.core.authority.SimpleGrantedAuthority;",
          "31: import org.springframework.security.core.userdetails.UserDetailsService;",
          "45: public class LogsearchFileAuthenticationProviderTest {",
          "47:   private LogsearchFileAuthenticationProvider provider;",
          "48:   private AuthPropsConfig mockAuthPropsConfig;",
          "49:   private UserDetailsService mockUserDetailsService;",
          "51:   @Before",
          "52:   public void init() throws Exception {",
          "",
          "[Removed Lines]",
          "33: import static junit.framework.Assert.assertEquals;",
          "34: import static junit.framework.Assert.assertSame;",
          "35: import static junit.framework.Assert.assertTrue;",
          "36: import static org.easymock.EasyMock.strictMock;",
          "37: import static org.easymock.EasyMock.expect;",
          "38: import static org.easymock.EasyMock.replay;",
          "39: import static org.easymock.EasyMock.verify;",
          "41: import java.lang.reflect.Field;",
          "42: import java.util.Arrays;",
          "43: import java.util.List;",
          "",
          "[Added Lines]",
          "43: import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;",
          "44: import org.springframework.security.crypto.password.PasswordEncoder;",
          "51:   private PasswordEncoder passwordEncoder;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     Field userDetailsServiceField = LogsearchFileAuthenticationProvider.class.getDeclaredField(\"userDetailsService\");",
          "62:     userDetailsServiceField.setAccessible(true);",
          "63:     userDetailsServiceField.set(provider, mockUserDetailsService);",
          "64:   }",
          "66:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     passwordEncoder = new BCryptPasswordEncoder();",
          "68:     provider.setPasswordEncoder(passwordEncoder);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:     try {",
          "87:       provider.authenticate(authentication);",
          "89:     } catch(BadCredentialsException e) {",
          "90:       assertEquals(\"Username can't be null or empty.\", e.getMessage());",
          "91:     }",
          "",
          "[Removed Lines]",
          "88:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "93:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:     try {",
          "105:       provider.authenticate(authentication);",
          "107:     } catch(BadCredentialsException e) {",
          "108:       assertEquals(\"Username can't be null or empty.\", e.getMessage());",
          "109:     }",
          "",
          "[Removed Lines]",
          "106:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "111:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:     try {",
          "124:       provider.authenticate(authentication);",
          "126:     } catch(BadCredentialsException e) {",
          "127:       assertEquals(\"Password can't be null or empty.\", e.getMessage());",
          "128:     }",
          "",
          "[Removed Lines]",
          "125:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "130:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "141:     try {",
          "142:       provider.authenticate(authentication);",
          "144:     } catch(BadCredentialsException e) {",
          "145:       assertEquals(\"Password can't be null or empty.\", e.getMessage());",
          "146:     }",
          "",
          "[Removed Lines]",
          "143:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "148:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "158:     Authentication authentication = new TestingAuthenticationToken(\"principal\", \"credentials\");",
          "159:     try {",
          "160:       provider.authenticate(authentication);",
          "162:     } catch (BadCredentialsException e) {",
          "163:       assertEquals(\"User not found.\", e.getMessage());",
          "164:     }",
          "",
          "[Removed Lines]",
          "161:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "166:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "169:   @Test",
          "170:   public void testAuthenticationNoPassword() {",
          "172:     User user = new User(\"principal\", null, grantedAuths);",
          "174:     expect(mockAuthPropsConfig.isAuthFileEnabled()).andReturn(true);",
          "",
          "[Removed Lines]",
          "171:     List<GrantedAuthority> grantedAuths = Arrays.<GrantedAuthority>asList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "",
          "[Added Lines]",
          "176:     List<GrantedAuthority> grantedAuths = Collections.singletonList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "179:     Authentication authentication = new TestingAuthenticationToken(\"principal\", \"credentials\");",
          "180:     try {",
          "181:       provider.authenticate(authentication);",
          "183:     } catch (BadCredentialsException e) {",
          "184:       assertEquals(\"Password can't be null or empty.\", e.getMessage());",
          "185:     }",
          "",
          "[Removed Lines]",
          "182:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "187:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "190:   @Test",
          "191:   public void testAuthenticationWrongPassword() {",
          "195:     expect(mockAuthPropsConfig.isAuthFileEnabled()).andReturn(true);",
          "196:     expect(mockUserDetailsService.loadUserByUsername(\"principal\")).andReturn(user);",
          "",
          "[Removed Lines]",
          "192:     List<GrantedAuthority> grantedAuths = Arrays.<GrantedAuthority>asList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "193:     User user = new User(\"principal\", CommonUtil.encryptPassword(\"principal\", \"notCredentials\"), grantedAuths);",
          "",
          "[Added Lines]",
          "197:     List<GrantedAuthority> grantedAuths = Collections.singletonList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "198:     User user = new User(\"principal\", passwordEncoder.encode(\"notCredentials\"), grantedAuths);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "200:     Authentication authentication = new TestingAuthenticationToken(\"principal\", \"credentials\");",
          "201:     try {",
          "202:       provider.authenticate(authentication);",
          "204:     } catch (BadCredentialsException e) {",
          "205:       assertEquals(\"Wrong password.\", e.getMessage());",
          "206:     }",
          "",
          "[Removed Lines]",
          "203:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "208:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "211:   @Test",
          "212:   public void testAuthenticationSuccessful() {",
          "216:     expect(mockAuthPropsConfig.isAuthFileEnabled()).andReturn(true);",
          "217:     expect(mockUserDetailsService.loadUserByUsername(\"principal\")).andReturn(user);",
          "",
          "[Removed Lines]",
          "213:     List<GrantedAuthority> grantedAuths = Arrays.<GrantedAuthority>asList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "214:     User user = new User(\"principal\", CommonUtil.encryptPassword(\"principal\", \"credentials\"), grantedAuths);",
          "",
          "[Added Lines]",
          "218:     List<GrantedAuthority> grantedAuths = Collections.singletonList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "219:     String encodedPassword = passwordEncoder.encode(\"credentials\");",
          "220:     User user = new User(\"principal\", encodedPassword, grantedAuths);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "219:     replay(mockAuthPropsConfig, mockUserDetailsService);",
          "221:     Authentication authentication = new TestingAuthenticationToken(\"principal\", \"credentials\");",
          "223:     Authentication authenticationResult = provider.authenticate(authentication);",
          "224:     assertEquals(\"principal\", authenticationResult.getName());",
          "226:     assertEquals(1, authenticationResult.getAuthorities().size());",
          "227:     assertEquals(new SimpleGrantedAuthority(\"ROLE_USER\"), authenticationResult.getAuthorities().iterator().next());",
          "",
          "[Removed Lines]",
          "225:     assertEquals(CommonUtil.encryptPassword(\"principal\", \"credentials\"), authenticationResult.getCredentials());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69cd83e9f577779430ddaee2e1d3f84dc673d20e",
      "candidate_info": {
        "commit_hash": "69cd83e9f577779430ddaee2e1d3f84dc673d20e",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/69cd83e9f577779430ddaee2e1d3f84dc673d20e",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java"
        ],
        "message": "AMBARI-24462. ambari-server upgrade stuck with NPE (amagyar) (#2043) (#2045)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1615:               boolean differentOwners = false;",
          "1616:               String warnTemplate = \"Keytab '{}' on host '{}' has different {}, originally set to '{}' and '{}:{}' has '{}', using '{}'\";",
          "1618:                 LOG.warn(warnTemplate,",
          "1619:                   keytabFilePath, hostname, \"owners\", sameKeytab.getOwnerName(),",
          "1620:                   serviceName, componentName, resolvedKeytab.getOwnerName(),",
          "1621:                   sameKeytab.getOwnerName());",
          "1622:                 differentOwners = true;",
          "1623:               }",
          "1625:                 LOG.warn(warnTemplate,",
          "1626:                   keytabFilePath, hostname, \"owner access\", sameKeytab.getOwnerAccess(),",
          "1627:                   serviceName, componentName, resolvedKeytab.getOwnerAccess(),",
          "",
          "[Removed Lines]",
          "1617:               if (!resolvedKeytab.getOwnerName().equals(sameKeytab.getOwnerName())) {",
          "1624:               if (!resolvedKeytab.getOwnerAccess().equals(sameKeytab.getOwnerAccess())) {",
          "",
          "[Added Lines]",
          "1617:               if (!StringUtils.equals(resolvedKeytab.getOwnerName(), sameKeytab.getOwnerName())) {",
          "1624:               if (!StringUtils.equals(resolvedKeytab.getOwnerAccess(), sameKeytab.getOwnerAccess())) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f9e7f5730dfa989034d5afd60279c616398f175",
      "candidate_info": {
        "commit_hash": "2f9e7f5730dfa989034d5afd60279c616398f175",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/2f9e7f5730dfa989034d5afd60279c616398f175",
        "files": [
          "ambari-web/app/controllers/main/service/item.js",
          "ambari-web/app/mixins/common/configs/enhanced_configs.js"
        ],
        "message": "[AMBARI-24636] Add Service wizard fails if a service without configs is installed.",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/service/item.js||ambari-web/app/controllers/main/service/item.js",
          "ambari-web/app/mixins/common/configs/enhanced_configs.js||ambari-web/app/mixins/common/configs/enhanced_configs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/service/item.js||ambari-web/app/controllers/main/service/item.js": [
          "File: ambari-web/app/controllers/main/service/item.js -> ambari-web/app/controllers/main/service/item.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "576:           sender: this,",
          "577:           data: {",
          "578:             context,",
          "580:             state: serviceHealth,",
          "581:             query: requestQuery",
          "582:           },",
          "",
          "[Removed Lines]",
          "579:             serviceName: serviceName.toUpperCase(),",
          "",
          "[Added Lines]",
          "579:             serviceName: serviceName,",
          "",
          "---------------"
        ],
        "ambari-web/app/mixins/common/configs/enhanced_configs.js||ambari-web/app/mixins/common/configs/enhanced_configs.js": [
          "File: ambari-web/app/mixins/common/configs/enhanced_configs.js -> ambari-web/app/mixins/common/configs/enhanced_configs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "650:   updateAttributesFromTheme: function (serviceName) {",
          "651:     this.prepareSectionsConfigProperties(serviceName);",
          "665:         });",
          "668:   },",
          "670:   prepareSectionsConfigProperties: function (serviceName) {",
          "",
          "[Removed Lines]",
          "652:     const serviceConfigs = this.get('stepConfigs').findProperty('serviceName', serviceName).get('configs'),",
          "653:       configConditions = App.ThemeCondition.find().filter(condition => {",
          "654:         const dependentConfigName = condition.get('configName'),",
          "655:           dependentConfigFileName = condition.get('fileName'),",
          "656:           configsToDependOn = condition.getWithDefault('configs', []);",
          "657:         return serviceConfigs.some(serviceConfig => {",
          "658:           const serviceConfigName = Em.get(serviceConfig, 'name'),",
          "659:             serviceConfigFileName = Em.get(serviceConfig, 'filename');",
          "660:           return (serviceConfigName === dependentConfigName && serviceConfigFileName === dependentConfigFileName)",
          "661:             || configsToDependOn.some(config => {",
          "662:               const {configName, fileName} = config;",
          "663:               return serviceConfigName === configName && serviceConfigFileName === fileName;",
          "664:             });",
          "666:       });",
          "667:     this.updateAttributesFromConditions(configConditions, serviceConfigs, serviceName);",
          "",
          "[Added Lines]",
          "652:     const service = this.get('stepConfigs').findProperty('serviceName', serviceName);",
          "653:     if (service) {",
          "654:       const serviceConfigs = service.get('configs'),",
          "655:         configConditions = App.ThemeCondition.find().filter(condition => {",
          "656:           const dependentConfigName = condition.get('configName'),",
          "657:             dependentConfigFileName = condition.get('fileName'),",
          "658:             configsToDependOn = condition.getWithDefault('configs', []);",
          "659:           return serviceConfigs.some(serviceConfig => {",
          "660:             const serviceConfigName = Em.get(serviceConfig, 'name'),",
          "661:               serviceConfigFileName = Em.get(serviceConfig, 'filename');",
          "662:             return (serviceConfigName === dependentConfigName && serviceConfigFileName === dependentConfigFileName)",
          "663:               || configsToDependOn.some(config => {",
          "664:                 const {configName, fileName} = config;",
          "665:                 return serviceConfigName === configName && serviceConfigFileName === fileName;",
          "666:               });",
          "667:           });",
          "669:       this.updateAttributesFromConditions(configConditions, serviceConfigs, serviceName);",
          "670:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2514a5bac549f0d853f03b5eac6a5a4ae185cb9",
      "candidate_info": {
        "commit_hash": "a2514a5bac549f0d853f03b5eac6a5a4ae185cb9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a2514a5bac549f0d853f03b5eac6a5a4ae185cb9",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java"
        ],
        "message": "AMBARI-25300. Improper Error Handling when user creates a duplicate alert (dlysnichenko) (#3005)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:       }",
          "343:       if (null == entity) {",
          "344:         entity = new AlertTargetEntity();",
          "345:       }",
          "",
          "[Removed Lines]",
          "338:       AlertTargetEntity entity = null;",
          "339:       if( overwriteExisting ) {",
          "340:         entity = s_dao.findTargetByName(name);",
          "341:       }",
          "",
          "[Added Lines]",
          "338:       AlertTargetEntity entity = s_dao.findTargetByName(name);",
          "342:       } else {",
          "343:         if( !overwriteExisting ) {",
          "344:           throw new IllegalArgumentException(",
          "345:               \"Alert targets already exists and can't be created\");",
          "346:         }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:   private void testCreateResources(Authentication authentication) throws Exception {",
          "297:     Capture<AlertTargetEntity> targetCapture = newCapture();",
          "298:     m_dao.create(capture(targetCapture));",
          "299:     expectLastCall();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:     expect(m_dao.findTargetByName(ALERT_TARGET_NAME)).andReturn(null).atLeastOnce();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364:     group2.setGroupId(2L);",
          "365:     group3.setGroupId(3L);",
          "366:     groups.addAll(Arrays.asList(group1, group2, group3));",
          "367:     expect(m_dao.findGroupsById(groupIds)).andReturn(groups).once();",
          "369:     Capture<AlertTargetEntity> targetCapture = EasyMock.newCapture();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368:     expect(m_dao.findTargetByName(ALERT_TARGET_NAME)).andReturn(null).atLeastOnce();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:   private void testCreateGlobalTarget(Authentication authentication) throws Exception {",
          "434:     Capture<AlertTargetEntity> targetCapture = EasyMock.newCapture();",
          "435:     m_dao.create(capture(targetCapture));",
          "436:     expectLastCall();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:     expect(m_dao.findTargetByName(ALERT_TARGET_NAME)).andReturn(null).atLeastOnce();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "499:   private void testCreateResourceWithRecipientArray(Authentication  authentication) throws Exception {",
          "500:     Capture<AlertTargetEntity> targetCapture = EasyMock.newCapture();",
          "501:     m_dao.create(capture(targetCapture));",
          "502:     expectLastCall();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:     expect(m_dao.findTargetByName(ALERT_TARGET_NAME)).andReturn(null).atLeastOnce();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "563:   private void testCreateResourceWithAlertStates(Authentication authentication) throws Exception {",
          "564:     Capture<AlertTargetEntity> targetCapture = EasyMock.newCapture();",
          "565:     m_dao.create(capture(targetCapture));",
          "566:     expectLastCall();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568:     expect(m_dao.findTargetByName(ALERT_TARGET_NAME)).andReturn(null).atLeastOnce();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "630:   private void testUpdateResources(Authentication authentication) throws Exception {",
          "631:     Capture<AlertTargetEntity> entityCapture = EasyMock.newCapture();",
          "632:     m_dao.create(capture(entityCapture));",
          "633:     expectLastCall().times(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:     expect(m_dao.findTargetByName(ALERT_TARGET_NAME)).andReturn(null).atLeastOnce();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "705:   private void testUpdateResourcesWithGroups(Authentication authentication) throws Exception {",
          "706:     Capture<AlertTargetEntity> entityCapture = EasyMock.newCapture();",
          "707:     m_dao.create(capture(entityCapture));",
          "708:     expectLastCall().times(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "712:     expect(m_dao.findTargetByName(ALERT_TARGET_NAME)).andReturn(null).atLeastOnce();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "787:   private void testDeleteResources(Authentication authentication) throws Exception {",
          "788:     Capture<AlertTargetEntity> entityCapture = EasyMock.newCapture();",
          "789:     m_dao.create(capture(entityCapture));",
          "790:     expectLastCall().times(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "795:     expect(m_dao.findTargetByName(ALERT_TARGET_NAME)).andReturn(null).atLeastOnce();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "824:     verify(m_amc, m_dao);",
          "825:   }",
          "827:   @Test",
          "828:   public void testOverwriteDirectiveAsAdministrator() throws Exception {",
          "829:     testOverwriteDirective(TestAuthenticationFactory.createAdministrator());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835:   @Test",
          "836:   public void testDuplicateDirectiveAsClusterAdministrator() throws Exception {",
          "837:     testDuplicate(TestAuthenticationFactory.createClusterAdministrator());",
          "838:   }",
          "840:   @Test(expected = AuthorizationException.class)",
          "841:   public void testDuplicateDirectiveAsServiceAdministrator() throws Exception {",
          "842:     testDuplicate(TestAuthenticationFactory.createServiceAdministrator());",
          "843:   }",
          "845:   @Test(expected = AuthorizationException.class)",
          "846:   public void testDuplicateDirectiveAsClusterUser() throws Exception {",
          "847:     testDuplicate(TestAuthenticationFactory.createClusterUser());",
          "848:   }",
          "850:   @Test(expected = AuthorizationException.class)",
          "851:   public void testDuplicateDirectiveAsViewUser() throws Exception {",
          "852:     testDuplicate(TestAuthenticationFactory.createViewUser(99L));",
          "853:   }",
          "855:   @Test",
          "856:   public void testDuplicateDirectiveAsAdministrator() throws Exception {",
          "857:     testDuplicate(TestAuthenticationFactory.createAdministrator());",
          "858:   }",
          "861:   public void testDuplicate(Authentication authentication) throws Exception{",
          "863:     AlertTargetEntity entity = getMockEntities().get(0);",
          "864:     expect(m_dao.findTargetByName(ALERT_TARGET_NAME)).andReturn(entity).atLeastOnce();",
          "866:     replay(m_amc, m_dao);",
          "868:     SecurityContextHolder.getContext().setAuthentication(authentication);",
          "870:     AlertTargetResourceProvider provider = createProvider(m_amc);",
          "871:     Map<String, Object> requestProps = getCreationProperties();",
          "874:     Map<String, String> requestInfoProperties = new HashMap<>();",
          "876:     Request request = PropertyHelper.getCreateRequest(",
          "877:         Collections.singleton(requestProps), requestInfoProperties);",
          "879:     try {",
          "880:       provider.createResources(request);",
          "881:       Assert.fail(\"IllegalArgumentException expected as duplicate not allowed\");",
          "882:     } catch (IllegalArgumentException e){",
          "883:       assertEquals(e.getMessage(), \"Alert targets already exists and can't be created\");",
          "884:     }",
          "886:     verify(m_amc, m_dao);",
          "887:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "894:   @Test",
          "895:   public void testUpdateAlertTargetsWithCustomGroups() throws Exception{",
          "896:     Capture<AlertTargetEntity> entityCapture = EasyMock.newCapture();",
          "897:     m_dao.create(capture(entityCapture));",
          "898:     expectLastCall().times(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "958:     expect(m_dao.findTargetByName(ALERT_TARGET_NAME)).andReturn(null).atLeastOnce();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "955:   @Test",
          "956:   public void testUpdateAlertTargetsWithAllGroups() throws Exception{",
          "957:     Capture<AlertTargetEntity> entityCapture = EasyMock.newCapture();",
          "958:     m_dao.create(capture(entityCapture));",
          "959:     expectLastCall().times(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1020:     expect(m_dao.findTargetByName(ALERT_TARGET_NAME)).andReturn(null).atLeastOnce();",
          "",
          "---------------"
        ]
      }
    }
  ]
}