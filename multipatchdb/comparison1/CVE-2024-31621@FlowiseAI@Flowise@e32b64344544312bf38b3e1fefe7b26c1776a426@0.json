{
  "cve_id": "CVE-2024-31621",
  "cve_desc": "An issue in FlowiseAI Inc Flowise v.1.6.2 and before allows a remote attacker to execute arbitrary code via a crafted script to the api/v1 component.",
  "repo": "FlowiseAI/Flowise",
  "patch_hash": "e32b64344544312bf38b3e1fefe7b26c1776a426",
  "patch_info": {
    "commit_hash": "e32b64344544312bf38b3e1fefe7b26c1776a426",
    "repo": "FlowiseAI/Flowise",
    "commit_url": "https://github.com/FlowiseAI/Flowise/commit/e32b64344544312bf38b3e1fefe7b26c1776a426",
    "files": [
      "packages/server/src/index.ts",
      "packages/server/src/utils/logger.ts"
    ],
    "message": "Bugfix/Regex check for auth middleware (#2469)\n\nadd regex check for auth middleware",
    "before_after_code_files": [
      "packages/server/src/index.ts||packages/server/src/index.ts",
      "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
    ]
  },
  "patch_diff": {
    "packages/server/src/index.ts||packages/server/src/index.ts": [
      "File: packages/server/src/index.ts -> packages/server/src/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "140:                 '/api/v1/ip'",
      "141:             ]",
      "142:             this.app.use((req, res, next) => {",
      "145:                 } else next()",
      "146:             })",
      "147:         }",
      "",
      "[Removed Lines]",
      "143:                 if (req.url.includes('/api/v1/')) {",
      "144:                     whitelistURLs.some((url) => req.url.includes(url)) ? next() : basicAuthMiddleware(req, res, next)",
      "",
      "[Added Lines]",
      "143:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
      "144:                     whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url)) ? next() : basicAuthMiddleware(req, res, next)",
      "",
      "---------------"
    ],
    "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts": [
      "File: packages/server/src/utils/logger.ts -> packages/server/src/utils/logger.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "59: export function expressRequestLogger(req: Request, res: Response, next: NextFunction): void {",
      "62:         const fileLogger = createLogger({",
      "63:             format: combine(timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), format.json(), errors({ stack: true })),",
      "64:             defaultMeta: {",
      "",
      "[Removed Lines]",
      "60:     const unwantedLogURLs = ['/api/v1/node-icon/']",
      "61:     if (req.url.includes('/api/v1/') && !unwantedLogURLs.some((url) => req.url.includes(url))) {",
      "",
      "[Added Lines]",
      "60:     const unwantedLogURLs = ['/api/v1/node-icon/', '/api/v1/components-credentials-icon/']",
      "61:     if (/\\/api\\/v1\\//i.test(req.url) && !unwantedLogURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b278e94fe4ab9d3c48c0064183fb3d2b4c55d348",
      "candidate_info": {
        "commit_hash": "b278e94fe4ab9d3c48c0064183fb3d2b4c55d348",
        "repo": "FlowiseAI/Flowise",
        "commit_url": "https://github.com/FlowiseAI/Flowise/commit/b278e94fe4ab9d3c48c0064183fb3d2b4c55d348",
        "files": [
          "packages/server/src/index.ts",
          "packages/server/src/utils/logger.ts"
        ],
        "message": "add regex check for auth middleware",
        "before_after_code_files": [
          "packages/server/src/index.ts||packages/server/src/index.ts",
          "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FlowiseAI/Flowise/pull/2469"
        ],
        "olp_code_files": {
          "patch": [
            "packages/server/src/index.ts||packages/server/src/index.ts",
            "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
          ],
          "candidate": [
            "packages/server/src/index.ts||packages/server/src/index.ts",
            "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/server/src/index.ts||packages/server/src/index.ts": [
          "File: packages/server/src/index.ts -> packages/server/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:                 '/api/v1/ip'",
          "141:             ]",
          "142:             this.app.use((req, res, next) => {",
          "145:                 } else next()",
          "146:             })",
          "147:         }",
          "",
          "[Removed Lines]",
          "143:                 if (req.url.includes('/api/v1/')) {",
          "144:                     whitelistURLs.some((url) => req.url.includes(url)) ? next() : basicAuthMiddleware(req, res, next)",
          "",
          "[Added Lines]",
          "143:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
          "144:                     whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url)) ? next() : basicAuthMiddleware(req, res, next)",
          "",
          "---------------"
        ],
        "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts": [
          "File: packages/server/src/utils/logger.ts -> packages/server/src/utils/logger.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: export function expressRequestLogger(req: Request, res: Response, next: NextFunction): void {",
          "62:         const fileLogger = createLogger({",
          "63:             format: combine(timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), format.json(), errors({ stack: true })),",
          "64:             defaultMeta: {",
          "",
          "[Removed Lines]",
          "60:     const unwantedLogURLs = ['/api/v1/node-icon/']",
          "61:     if (req.url.includes('/api/v1/') && !unwantedLogURLs.some((url) => req.url.includes(url))) {",
          "",
          "[Added Lines]",
          "60:     const unwantedLogURLs = ['/api/v1/node-icon/', '/api/v1/components-credentials-icon/']",
          "61:     if (/\\/api\\/v1\\//i.test(req.url) && !unwantedLogURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69e754788ce03b959d1b354eb76041a6cdaacae0",
      "candidate_info": {
        "commit_hash": "69e754788ce03b959d1b354eb76041a6cdaacae0",
        "repo": "FlowiseAI/Flowise",
        "commit_url": "https://github.com/FlowiseAI/Flowise/commit/69e754788ce03b959d1b354eb76041a6cdaacae0",
        "files": [
          "packages/server/src/index.ts"
        ],
        "message": "add fixes to prevent bypassing api url",
        "before_after_code_files": [
          "packages/server/src/index.ts||packages/server/src/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/server/src/index.ts||packages/server/src/index.ts"
          ],
          "candidate": [
            "packages/server/src/index.ts||packages/server/src/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/server/src/index.ts||packages/server/src/index.ts": [
          "File: packages/server/src/index.ts -> packages/server/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:             '/api/v1/ip',",
          "136:             '/api/v1/ping'",
          "137:         ]",
          "139:         if (process.env.FLOWISE_USERNAME && process.env.FLOWISE_PASSWORD) {",
          "140:             const username = process.env.FLOWISE_USERNAME",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:         const URL_CASE_INSENSITIVE_REGEX: RegExp = /\\/api\\/v1\\//i",
          "139:         const URL_CASE_SENSITIVE_REGEX: RegExp = /\\/api\\/v1\\//",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:                 users: { [username]: password }",
          "144:             })",
          "145:             this.app.use(async (req, res, next) => {",
          "155:                         }",
          "157:                     }",
          "158:                 } else {",
          "159:                     next()",
          "160:                 }",
          "161:             })",
          "162:         } else {",
          "163:             this.app.use(async (req, res, next) => {",
          "173:                         }",
          "175:                     }",
          "176:                 } else {",
          "177:                     next()",
          "178:                 }",
          "179:             })",
          "",
          "[Removed Lines]",
          "146:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
          "147:                     if (whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
          "148:                         next()",
          "149:                     } else if (req.headers['x-request-from'] === 'internal') {",
          "150:                         basicAuthMiddleware(req, res, next)",
          "151:                     } else {",
          "152:                         const isKeyValidated = await validateAPIKey(req)",
          "153:                         if (!isKeyValidated) {",
          "154:                             return res.status(401).json({ error: 'Unauthorized Access' })",
          "156:                         next()",
          "164:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
          "165:                     if (whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
          "166:                         next()",
          "167:                     } else if (req.headers['x-request-from'] === 'internal') {",
          "168:                         next()",
          "169:                     } else {",
          "170:                         const isKeyValidated = await validateAPIKey(req)",
          "171:                         if (!isKeyValidated) {",
          "172:                             return res.status(401).json({ error: 'Unauthorized Access' })",
          "174:                         next()",
          "",
          "[Added Lines]",
          "149:                 if (URL_CASE_INSENSITIVE_REGEX.test(req.path)) {",
          "151:                     if (URL_CASE_SENSITIVE_REGEX.test(req.path)) {",
          "153:                         const isWhitelisted = whitelistURLs.some((url) => req.path.startsWith(url))",
          "154:                         if (isWhitelisted) {",
          "155:                             next()",
          "156:                         } else if (req.headers['x-request-from'] === 'internal') {",
          "157:                             basicAuthMiddleware(req, res, next)",
          "158:                         } else {",
          "159:                             const isKeyValidated = await validateAPIKey(req)",
          "160:                             if (!isKeyValidated) {",
          "161:                                 return res.status(401).json({ error: 'Unauthorized Access' })",
          "162:                             }",
          "163:                             next()",
          "165:                     } else {",
          "166:                         return res.status(401).json({ error: 'Unauthorized Access' })",
          "176:                 if (URL_CASE_INSENSITIVE_REGEX.test(req.path)) {",
          "178:                     if (URL_CASE_SENSITIVE_REGEX.test(req.path)) {",
          "180:                         const isWhitelisted = whitelistURLs.some((url) => req.path.startsWith(url))",
          "181:                         if (isWhitelisted) {",
          "182:                             next()",
          "183:                         } else if (req.headers['x-request-from'] === 'internal') {",
          "184:                             next()",
          "185:                         } else {",
          "186:                             const isKeyValidated = await validateAPIKey(req)",
          "187:                             if (!isKeyValidated) {",
          "188:                                 return res.status(401).json({ error: 'Unauthorized Access' })",
          "189:                             }",
          "190:                             next()",
          "192:                     } else {",
          "193:                         return res.status(401).json({ error: 'Unauthorized Access' })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75f779f8619adfae6e2ca8aef79f6962803232af",
      "candidate_info": {
        "commit_hash": "75f779f8619adfae6e2ca8aef79f6962803232af",
        "repo": "FlowiseAI/Flowise",
        "commit_url": "https://github.com/FlowiseAI/Flowise/commit/75f779f8619adfae6e2ca8aef79f6962803232af",
        "files": [
          "packages/server/src/index.ts"
        ],
        "message": "Bugfix/whitelist urls for non password protected instance (#3085)\n\nwhitelist urls for non password protected instance",
        "before_after_code_files": [
          "packages/server/src/index.ts||packages/server/src/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/server/src/index.ts||packages/server/src/index.ts"
          ],
          "candidate": [
            "packages/server/src/index.ts||packages/server/src/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/server/src/index.ts||packages/server/src/index.ts": [
          "File: packages/server/src/index.ts -> packages/server/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:             next()",
          "118:         })",
          "120:         if (process.env.FLOWISE_USERNAME && process.env.FLOWISE_PASSWORD) {",
          "121:             const username = process.env.FLOWISE_USERNAME",
          "122:             const password = process.env.FLOWISE_PASSWORD",
          "123:             const basicAuthMiddleware = basicAuth({",
          "124:                 users: { [username]: password }",
          "125:             })",
          "144:             this.app.use(async (req, res, next) => {",
          "145:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
          "146:                     if (whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
          "",
          "[Removed Lines]",
          "126:             const whitelistURLs = [",
          "127:                 '/api/v1/verify/apikey/',",
          "128:                 '/api/v1/chatflows/apikey/',",
          "129:                 '/api/v1/public-chatflows',",
          "130:                 '/api/v1/public-chatbotConfig',",
          "131:                 '/api/v1/prediction/',",
          "132:                 '/api/v1/vector/upsert/',",
          "133:                 '/api/v1/node-icon/',",
          "134:                 '/api/v1/components-credentials-icon/',",
          "135:                 '/api/v1/chatflows-streaming',",
          "136:                 '/api/v1/chatflows-uploads',",
          "137:                 '/api/v1/openai-assistants-file/download',",
          "138:                 '/api/v1/feedback',",
          "139:                 '/api/v1/leads',",
          "140:                 '/api/v1/get-upload-file',",
          "141:                 '/api/v1/ip',",
          "142:                 '/api/v1/ping'",
          "143:             ]",
          "",
          "[Added Lines]",
          "120:         const whitelistURLs = [",
          "121:             '/api/v1/verify/apikey/',",
          "122:             '/api/v1/chatflows/apikey/',",
          "123:             '/api/v1/public-chatflows',",
          "124:             '/api/v1/public-chatbotConfig',",
          "125:             '/api/v1/prediction/',",
          "126:             '/api/v1/vector/upsert/',",
          "127:             '/api/v1/node-icon/',",
          "128:             '/api/v1/components-credentials-icon/',",
          "129:             '/api/v1/chatflows-streaming',",
          "130:             '/api/v1/chatflows-uploads',",
          "131:             '/api/v1/openai-assistants-file/download',",
          "132:             '/api/v1/feedback',",
          "133:             '/api/v1/leads',",
          "134:             '/api/v1/get-upload-file',",
          "135:             '/api/v1/ip',",
          "136:             '/api/v1/ping'",
          "137:         ]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:         } else {",
          "162:             this.app.use(async (req, res, next) => {",
          "163:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
          "165:                         next()",
          "166:                     } else {",
          "167:                         const isKeyValidated = await validateAPIKey(req)",
          "",
          "[Removed Lines]",
          "164:                     if (req.headers['x-request-from'] === 'internal') {",
          "",
          "[Added Lines]",
          "165:                     if (whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
          "166:                         next()",
          "167:                     } else if (req.headers['x-request-from'] === 'internal') {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4ccfdaa6e567d100a94adcdcef3902663aae604",
      "candidate_info": {
        "commit_hash": "e4ccfdaa6e567d100a94adcdcef3902663aae604",
        "repo": "FlowiseAI/Flowise",
        "commit_url": "https://github.com/FlowiseAI/Flowise/commit/e4ccfdaa6e567d100a94adcdcef3902663aae604",
        "files": [
          "packages/api-documentation/nodemon.json",
          "packages/api-documentation/package.json",
          "packages/api-documentation/src/configs/swagger.config.ts",
          "packages/api-documentation/src/index.ts",
          "packages/api-documentation/src/yml/swagger.yml",
          "packages/server/src/controllers/chat-messages/index.ts",
          "packages/server/src/index.ts",
          "packages/server/src/routes/documentstore/index.ts",
          "packages/server/src/services/apikey/index.ts",
          "packages/server/src/services/assistants/index.ts",
          "packages/server/src/services/documentstore/index.ts",
          "packages/server/src/services/feedback/index.ts",
          "packages/server/src/utils/buildChatflow.ts",
          "packages/server/src/utils/upsertVector.ts",
          "packages/server/src/utils/validateKey.ts",
          "packages/server/test/utils/validateKey.test.ts",
          "packages/ui/src/api/client.js",
          "packages/ui/src/api/documentstore.js",
          "packages/ui/src/ui-component/dialog/AboutDialog.jsx",
          "packages/ui/src/ui-component/dialog/ViewMessagesDialog.jsx",
          "packages/ui/src/ui-component/dropdown/AsyncDropdown.jsx",
          "packages/ui/src/views/chatmessage/ChatMessage.jsx",
          "pnpm-lock.yaml"
        ],
        "message": "update swagger yml file",
        "before_after_code_files": [
          "packages/api-documentation/src/configs/swagger.config.ts||packages/api-documentation/src/configs/swagger.config.ts",
          "packages/api-documentation/src/index.ts||packages/api-documentation/src/index.ts",
          "packages/server/src/controllers/chat-messages/index.ts||packages/server/src/controllers/chat-messages/index.ts",
          "packages/server/src/index.ts||packages/server/src/index.ts",
          "packages/server/src/routes/documentstore/index.ts||packages/server/src/routes/documentstore/index.ts",
          "packages/server/src/services/apikey/index.ts||packages/server/src/services/apikey/index.ts",
          "packages/server/src/services/assistants/index.ts||packages/server/src/services/assistants/index.ts",
          "packages/server/src/services/documentstore/index.ts||packages/server/src/services/documentstore/index.ts",
          "packages/server/src/services/feedback/index.ts||packages/server/src/services/feedback/index.ts",
          "packages/server/src/utils/buildChatflow.ts||packages/server/src/utils/buildChatflow.ts",
          "packages/server/src/utils/upsertVector.ts||packages/server/src/utils/upsertVector.ts",
          "packages/server/src/utils/validateKey.ts||packages/server/src/utils/validateKey.ts",
          "packages/server/test/utils/validateKey.test.ts||packages/server/test/utils/validateKey.test.ts",
          "packages/ui/src/api/client.js||packages/ui/src/api/client.js",
          "packages/ui/src/api/documentstore.js||packages/ui/src/api/documentstore.js",
          "packages/ui/src/ui-component/dialog/AboutDialog.jsx||packages/ui/src/ui-component/dialog/AboutDialog.jsx",
          "packages/ui/src/ui-component/dialog/ViewMessagesDialog.jsx||packages/ui/src/ui-component/dialog/ViewMessagesDialog.jsx",
          "packages/ui/src/ui-component/dropdown/AsyncDropdown.jsx||packages/ui/src/ui-component/dropdown/AsyncDropdown.jsx",
          "packages/ui/src/views/chatmessage/ChatMessage.jsx||packages/ui/src/views/chatmessage/ChatMessage.jsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/server/src/index.ts||packages/server/src/index.ts"
          ],
          "candidate": [
            "packages/server/src/index.ts||packages/server/src/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/api-documentation/src/configs/swagger.config.ts||packages/api-documentation/src/configs/swagger.config.ts": [
          "File: packages/api-documentation/src/configs/swagger.config.ts -> packages/api-documentation/src/configs/swagger.config.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:             summary: 'Interactive swagger-ui auto-generated API docs from express, based on a swagger.yml file',",
          "13:             version: '1.0.0',",
          "14:             description:",
          "16:             termsOfService: 'https://flowiseai.com',",
          "17:             license: {",
          "18:                 name: 'FlowiseAI',",
          "19:                 url: 'https://github.com/FlowiseAI/Flowise/blob/main/LICENSE.md'",
          "20:             },",
          "21:             contact: {",
          "24:             }",
          "25:         },",
          "26:         servers: [",
          "27:             {",
          "28:                 url: 'http://localhost:3000/api/v1',",
          "30:             }",
          "31:         ]",
          "32:     },",
          "",
          "[Removed Lines]",
          "15:                 'This module serves auto-generated swagger-ui generated API docs from express, based on a swagger.yml file. \\n\\n This module works only when running Flowise in dev mode. \\n\\n The result is living documentation for Flowise API served via http://localhost:6655/api-docs route.',",
          "22:                 name: 'Octavian FlowiseAI',",
          "23:                 email: 'octavian.selardi@flowiseai.com'",
          "29:                 description: 'Flowise Server Dev Mode'",
          "",
          "[Added Lines]",
          "14:                 'This module serves auto-generated swagger-ui generated API docs from Flowise express backend, based on a swagger.yml file. Document is served via http://localhost:6655/api-docs route.',",
          "21:                 name: 'FlowiseAI',",
          "22:                 email: 'support@flowiseai.com'",
          "28:                 description: 'Flowise Server'",
          "",
          "---------------"
        ],
        "packages/api-documentation/src/index.ts||packages/api-documentation/src/index.ts": [
          "File: packages/api-documentation/src/index.ts -> packages/api-documentation/src/index.ts"
        ],
        "packages/server/src/controllers/chat-messages/index.ts||packages/server/src/controllers/chat-messages/index.ts": [
          "File: packages/server/src/controllers/chat-messages/index.ts -> packages/server/src/controllers/chat-messages/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:             )",
          "19:         }",
          "20:         const apiResponse = await chatMessagesService.createChatMessage(req.body)",
          "22:     } catch (error) {",
          "23:         next(error)",
          "24:     }",
          "",
          "[Removed Lines]",
          "21:         return res.json(apiResponse)",
          "",
          "[Added Lines]",
          "21:         return res.json(parseAPIResponse(apiResponse))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:             feedback,",
          "89:             feedbackTypeFilters",
          "90:         )",
          "92:     } catch (error) {",
          "93:         next(error)",
          "94:     }",
          "",
          "[Removed Lines]",
          "91:         return res.json(apiResponse)",
          "",
          "[Added Lines]",
          "92:         return res.json(parseAPIResponse(apiResponse))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:             messageId,",
          "117:             feedback",
          "118:         )",
          "120:     } catch (error) {",
          "121:         next(error)",
          "122:     }",
          "",
          "[Removed Lines]",
          "119:         return res.json(apiResponse)",
          "",
          "[Added Lines]",
          "120:         return res.json(parseAPIResponse(apiResponse))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186:     }",
          "187: }",
          "189: export default {",
          "190:     createChatMessage,",
          "191:     getAllChatMessages,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: const parseAPIResponse = (apiResponse: ChatMessage | ChatMessage[]): ChatMessage | ChatMessage[] => {",
          "191:     const parseResponse = (response: ChatMessage): ChatMessage => {",
          "192:         const parsedResponse = { ...response }",
          "194:         if (parsedResponse.sourceDocuments) {",
          "195:             parsedResponse.sourceDocuments = JSON.parse(parsedResponse.sourceDocuments)",
          "196:         }",
          "197:         if (parsedResponse.usedTools) {",
          "198:             parsedResponse.usedTools = JSON.parse(parsedResponse.usedTools)",
          "199:         }",
          "200:         if (parsedResponse.fileAnnotations) {",
          "201:             parsedResponse.fileAnnotations = JSON.parse(parsedResponse.fileAnnotations)",
          "202:         }",
          "203:         if (parsedResponse.agentReasoning) {",
          "204:             parsedResponse.agentReasoning = JSON.parse(parsedResponse.agentReasoning)",
          "205:         }",
          "206:         if (parsedResponse.fileUploads) {",
          "207:             parsedResponse.fileUploads = JSON.parse(parsedResponse.fileUploads)",
          "208:         }",
          "209:         if (parsedResponse.action) {",
          "210:             parsedResponse.action = JSON.parse(parsedResponse.action)",
          "211:         }",
          "213:         return parsedResponse",
          "214:     }",
          "216:     if (Array.isArray(apiResponse)) {",
          "217:         return apiResponse.map(parseResponse)",
          "218:     } else {",
          "219:         return parseResponse(apiResponse)",
          "220:     }",
          "221: }",
          "",
          "---------------"
        ],
        "packages/server/src/index.ts||packages/server/src/index.ts": [
          "File: packages/server/src/index.ts -> packages/server/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import { Telemetry } from './utils/telemetry'",
          "21: import flowiseApiV1Router from './routes'",
          "22: import errorHandlerMiddleware from './middlewares/errors'",
          "24: declare global {",
          "25:     namespace Express {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import { validateAPIKey } from './utils/validateKey'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:                 '/api/v1/ip',",
          "141:                 '/api/v1/ping'",
          "142:             ]",
          "144:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
          "147:             })",
          "148:         }",
          "",
          "[Removed Lines]",
          "143:             this.app.use((req, res, next) => {",
          "145:                     whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url)) ? next() : basicAuthMiddleware(req, res, next)",
          "146:                 } else next()",
          "",
          "[Added Lines]",
          "144:             this.app.use(async (req, res, next) => {",
          "146:                     if (whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
          "147:                         next()",
          "148:                     } else if (req.headers['x-request-from'] === 'internal') {",
          "149:                         basicAuthMiddleware(req, res, next)",
          "150:                     } else {",
          "151:                         const isKeyValidated = await validateAPIKey(req)",
          "152:                         if (!isKeyValidated) {",
          "153:                             return res.status(401).json({ error: 'Unauthorized Access' })",
          "154:                         }",
          "155:                         next()",
          "156:                     }",
          "157:                 } else {",
          "158:                     next()",
          "159:                 }",
          "160:             })",
          "161:         } else {",
          "162:             this.app.use(async (req, res, next) => {",
          "163:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
          "164:                     if (req.headers['x-request-from'] === 'internal') {",
          "165:                         next()",
          "166:                     } else {",
          "167:                         const isKeyValidated = await validateAPIKey(req)",
          "168:                         if (!isKeyValidated) {",
          "169:                             return res.status(401).json({ error: 'Unauthorized Access' })",
          "170:                         }",
          "171:                         next()",
          "172:                     }",
          "173:                 } else {",
          "174:                     next()",
          "175:                 }",
          "",
          "---------------"
        ],
        "packages/server/src/routes/documentstore/index.ts||packages/server/src/routes/documentstore/index.ts": [
          "File: packages/server/src/routes/documentstore/index.ts -> packages/server/src/routes/documentstore/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: router.post('/store', documentStoreController.createDocumentStore)",
          "11: router.get('/store/:id', documentStoreController.getDocumentStoreById)",
          "",
          "[Removed Lines]",
          "9: router.get('/stores', documentStoreController.getAllDocumentStores)",
          "",
          "[Added Lines]",
          "9: router.get('/store', documentStoreController.getAllDocumentStores)",
          "",
          "---------------"
        ],
        "packages/server/src/services/apikey/index.ts||packages/server/src/services/apikey/index.ts": [
          "File: packages/server/src/services/apikey/index.ts -> packages/server/src/services/apikey/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     }",
          "49: }",
          "52:     try {",
          "53:         if (_apikeysStoredInJson()) {",
          "55:         } else if (_apikeysStoredInDb()) {",
          "56:             const appServer = getRunningExpressApp()",
          "57:             const currentKey = await appServer.AppDataSource.getRepository(ApiKey).findOneBy({",
          "59:             })",
          "60:             if (!currentKey) {",
          "61:                 return undefined",
          "",
          "[Removed Lines]",
          "51: const getApiKey = async (keyName: string) => {",
          "54:             return getApiKey_json(keyName)",
          "58:                 keyName: keyName",
          "",
          "[Added Lines]",
          "51: const getApiKey = async (apiKey: string) => {",
          "54:             return getApiKey_json(apiKey)",
          "58:                 apiKey: apiKey",
          "",
          "---------------"
        ],
        "packages/server/src/services/assistants/index.ts||packages/server/src/services/assistants/index.ts": [
          "File: packages/server/src/services/assistants/index.ts -> packages/server/src/services/assistants/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import { decryptCredentialData, getAppVersion } from '../../utils'",
          "8: import { InternalFlowiseError } from '../../errors/internalFlowiseError'",
          "9: import { getErrorMessage } from '../../errors/utils'",
          "12:     try {",
          "13:         const appServer = getRunningExpressApp()",
          "14:         if (!requestBody.details) {",
          "",
          "[Removed Lines]",
          "11: const createAssistant = async (requestBody: any): Promise<any> => {",
          "",
          "[Added Lines]",
          "10: import { DeleteResult } from 'typeorm'",
          "12: const createAssistant = async (requestBody: any): Promise<Assistant> => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:     }",
          "120: }",
          "123:     try {",
          "124:         const appServer = getRunningExpressApp()",
          "125:         const assistant = await appServer.AppDataSource.getRepository(Assistant).findOneBy({",
          "",
          "[Removed Lines]",
          "122: const deleteAssistant = async (assistantId: string, isDeleteBoth: any): Promise<any> => {",
          "",
          "[Added Lines]",
          "123: const deleteAssistant = async (assistantId: string, isDeleteBoth: any): Promise<DeleteResult> => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:             if (isDeleteBoth) await openai.beta.assistants.del(assistantDetails.id)",
          "151:             return dbResponse",
          "152:         } catch (error: any) {",
          "158:         }",
          "159:     } catch (error) {",
          "160:         throw new InternalFlowiseError(",
          "",
          "[Removed Lines]",
          "153:             if (error.status === 404 && error.type === 'invalid_request_error') {",
          "154:                 return 'OK'",
          "155:             } else {",
          "156:                 throw new InternalFlowiseError(StatusCodes.INTERNAL_SERVER_ERROR, `Error deleting assistant - ${getErrorMessage(error)}`)",
          "157:             }",
          "",
          "[Added Lines]",
          "154:             throw new InternalFlowiseError(StatusCodes.INTERNAL_SERVER_ERROR, `Error deleting assistant - ${getErrorMessage(error)}`)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:     }",
          "165: }",
          "168:     try {",
          "169:         const appServer = getRunningExpressApp()",
          "170:         const dbResponse = await appServer.AppDataSource.getRepository(Assistant).find()",
          "",
          "[Removed Lines]",
          "167: const getAllAssistants = async (): Promise<any> => {",
          "",
          "[Added Lines]",
          "164: const getAllAssistants = async (): Promise<Assistant[]> => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:     }",
          "178: }",
          "181:     try {",
          "182:         const appServer = getRunningExpressApp()",
          "183:         const dbResponse = await appServer.AppDataSource.getRepository(Assistant).findOneBy({",
          "",
          "[Removed Lines]",
          "180: const getAssistantById = async (assistantId: string): Promise<any> => {",
          "",
          "[Added Lines]",
          "177: const getAssistantById = async (assistantId: string): Promise<Assistant> => {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195:     }",
          "196: }",
          "199:     try {",
          "200:         const appServer = getRunningExpressApp()",
          "201:         const assistant = await appServer.AppDataSource.getRepository(Assistant).findOneBy({",
          "",
          "[Removed Lines]",
          "198: const updateAssistant = async (assistantId: string, requestBody: any): Promise<any> => {",
          "",
          "[Added Lines]",
          "195: const updateAssistant = async (assistantId: string, requestBody: any): Promise<Assistant> => {",
          "",
          "---------------"
        ],
        "packages/server/src/services/documentstore/index.ts||packages/server/src/services/documentstore/index.ts": [
          "File: packages/server/src/services/documentstore/index.ts -> packages/server/src/services/documentstore/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:                 `Error: documentStoreServices.processAndSaveChunks - Document store ${data.storeId} not found`",
          "581:             )",
          "582:         }",
          "585:         const existingLoaders = JSON.parse(entity.loaders)",
          "586:         const found = existingLoaders.find((ldr: IDocumentStoreLoader) => ldr.id === newLoaderId)",
          "587:         if (found) {",
          "",
          "[Removed Lines]",
          "584:         const newLoaderId = data.id ?? uuidv4()",
          "",
          "[Added Lines]",
          "584:         const newLoaderId = data.id ?? uuidv4()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "590:             found.totalChars = 0",
          "591:             found.status = DocumentStoreStatus.SYNCING",
          "592:             entity.loaders = JSON.stringify(existingLoaders)",
          "593:         } else {",
          "594:             let loader: IDocumentStoreLoader = {",
          "595:                 id: newLoaderId,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592:             data.loaderId = found.loaderId",
          "593:             data.loaderName = found.loaderName",
          "594:             data.loaderConfig = found.loaderConfig",
          "595:             data.splitterId = found.splitterId",
          "596:             data.splitterName = found.splitterName",
          "597:             data.splitterConfig = found.splitterConfig",
          "598:             if (found.credential) {",
          "599:                 data.credential = found.credential",
          "600:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "833:                 config: data.embeddingConfig,",
          "834:                 name: data.embeddingName",
          "835:             })",
          "836:         } else if (!data.embeddingName && !data.embeddingConfig) {",
          "837:             entity.embeddingConfig = null",
          "838:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844:         } else if (entity.embeddingConfig && !data.embeddingName && !data.embeddingConfig) {",
          "845:             data.embeddingConfig = JSON.parse(entity.embeddingConfig)?.config",
          "846:             data.embeddingName = JSON.parse(entity.embeddingConfig)?.name",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "842:                 config: data.vectorStoreConfig,",
          "843:                 name: data.vectorStoreName",
          "844:             })",
          "845:         } else if (!data.vectorStoreName && !data.vectorStoreConfig) {",
          "846:             entity.vectorStoreConfig = null",
          "847:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856:         } else if (entity.vectorStoreConfig && !data.vectorStoreName && !data.vectorStoreConfig) {",
          "857:             data.vectorStoreConfig = JSON.parse(entity.vectorStoreConfig)?.config",
          "858:             data.vectorStoreName = JSON.parse(entity.vectorStoreConfig)?.name",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "851:                 config: data.recordManagerConfig,",
          "852:                 name: data.recordManagerName",
          "853:             })",
          "854:         } else if (!data.recordManagerName && !data.recordManagerConfig) {",
          "855:             entity.recordManagerConfig = null",
          "856:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "868:         } else if (entity.recordManagerConfig && !data.recordManagerName && !data.recordManagerConfig) {",
          "869:             data.recordManagerConfig = JSON.parse(entity.recordManagerConfig)?.config",
          "870:             data.recordManagerName = JSON.parse(entity.recordManagerConfig)?.name",
          "",
          "---------------"
        ],
        "packages/server/src/services/feedback/index.ts||packages/server/src/services/feedback/index.ts": [
          "File: packages/server/src/services/feedback/index.ts -> packages/server/src/services/feedback/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     }",
          "39: }",
          "43:     try {",
          "45:         return dbResponse",
          "46:     } catch (error) {",
          "47:         throw new InternalFlowiseError(",
          "",
          "[Removed Lines]",
          "42: const updateChatMessageFeedbackForChatflow = async (chatflowId: string, requestBody: Partial<IChatMessageFeedback>): Promise<any> => {",
          "44:         const dbResponse = await utilUpdateChatMessageFeedback(chatflowId, requestBody)",
          "",
          "[Added Lines]",
          "42: const updateChatMessageFeedbackForChatflow = async (feedbackId: string, requestBody: Partial<IChatMessageFeedback>): Promise<any> => {",
          "44:         const dbResponse = await utilUpdateChatMessageFeedback(feedbackId, requestBody)",
          "",
          "---------------"
        ],
        "packages/server/src/utils/buildChatflow.ts||packages/server/src/utils/buildChatflow.ts": [
          "File: packages/server/src/utils/buildChatflow.ts -> packages/server/src/utils/buildChatflow.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     getEndingNodes,",
          "35:     constructGraphs",
          "36: } from '../utils'",
          "38: import { databaseEntities } from '.'",
          "39: import { v4 as uuidv4 } from 'uuid'",
          "40: import { omit } from 'lodash'",
          "",
          "[Removed Lines]",
          "37: import { utilValidateKey } from './validateKey'",
          "",
          "[Added Lines]",
          "37: import { validateChatflowAPIKey } from './validateKey'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:         const userMessageDateTime = new Date()",
          "75:         if (!isInternal) {",
          "77:             if (!isKeyValidated) {",
          "78:                 throw new InternalFlowiseError(StatusCodes.UNAUTHORIZED, `Unauthorized`)",
          "79:             }",
          "",
          "[Removed Lines]",
          "76:             const isKeyValidated = await utilValidateKey(req, chatflow)",
          "",
          "[Added Lines]",
          "76:             const isKeyValidated = await validateChatflowAPIKey(req, chatflow)",
          "",
          "---------------"
        ],
        "packages/server/src/utils/upsertVector.ts||packages/server/src/utils/upsertVector.ts": [
          "File: packages/server/src/utils/upsertVector.ts -> packages/server/src/utils/upsertVector.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:     getTelemetryFlowObj,",
          "16:     getStartingNodes",
          "17: } from '../utils'",
          "19: import { IncomingInput, INodeDirectedGraph, IReactFlowObject, chatType } from '../Interface'",
          "20: import { ChatFlow } from '../database/entities/ChatFlow'",
          "21: import { getRunningExpressApp } from '../utils/getRunningExpressApp'",
          "",
          "[Removed Lines]",
          "18: import { utilValidateKey } from './validateKey'",
          "",
          "[Added Lines]",
          "18: import { validateChatflowAPIKey } from './validateKey'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:         }",
          "45:         if (!isInternal) {",
          "47:             if (!isKeyValidated) {",
          "48:                 throw new InternalFlowiseError(StatusCodes.UNAUTHORIZED, `Unauthorized`)",
          "49:             }",
          "",
          "[Removed Lines]",
          "46:             const isKeyValidated = await utilValidateKey(req, chatflow)",
          "",
          "[Added Lines]",
          "46:             const isKeyValidated = await validateChatflowAPIKey(req, chatflow)",
          "",
          "---------------"
        ],
        "packages/server/src/utils/validateKey.ts||packages/server/src/utils/validateKey.ts": [
          "File: packages/server/src/utils/validateKey.ts -> packages/server/src/utils/validateKey.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { ChatFlow } from '../database/entities/ChatFlow'",
          "3: import { compareKeys } from './apiKey'",
          "4: import apikeyService from '../services/apikey'",
          "13:     if (!chatFlowApiKeyId) return true",
          "15:     const authorizationHeader = (req.headers['Authorization'] as string) ?? (req.headers['authorization'] as string) ?? ''",
          "",
          "[Removed Lines]",
          "11: export const utilValidateKey = async (req: Request, chatflow: ChatFlow) => {",
          "12:     const chatFlowApiKeyId = chatflow.apikeyid",
          "",
          "[Added Lines]",
          "11: export const validateChatflowAPIKey = async (req: Request, chatflow: ChatFlow) => {",
          "12:     const chatFlowApiKeyId = chatflow?.apikeyid",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     }",
          "25:     return false",
          "26: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: export const validateAPIKey = async (req: Request) => {",
          "33:     const authorizationHeader = (req.headers['Authorization'] as string) ?? (req.headers['authorization'] as string) ?? ''",
          "34:     if (!authorizationHeader) return false",
          "36:     const suppliedKey = authorizationHeader.split(`Bearer `).pop()",
          "37:     if (suppliedKey) {",
          "38:         const keys = await apikeyService.getAllApiKeys()",
          "39:         const apiSecret = keys.find((key: any) => key.apiKey === suppliedKey)?.apiSecret",
          "40:         if (!apiSecret) return false",
          "41:         if (!compareKeys(apiSecret, suppliedKey)) return false",
          "42:         return true",
          "43:     }",
          "44:     return false",
          "45: }",
          "",
          "---------------"
        ],
        "packages/server/test/utils/validateKey.test.ts||packages/server/test/utils/validateKey.test.ts": [
          "File: packages/server/test/utils/validateKey.test.ts -> packages/server/test/utils/validateKey.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { Request } from 'express'",
          "2: import { ChatFlow } from '../../src/database/entities/ChatFlow'",
          "4: import { compareKeys, getAPIKeys } from '../../src/utils/apiKey'",
          "6: jest.mock('../../src/utils/apiKey')",
          "9:     let req: Partial<Request>",
          "10:     let chatflow: ChatFlow",
          "",
          "[Removed Lines]",
          "3: import { utilValidateKey } from '../../src/utils/validateKey'",
          "8: describe('utilValidateKey', () => {",
          "",
          "[Added Lines]",
          "3: import { validateChatflowAPIKey } from '../../src/utils/validateKey'",
          "8: describe('validateChatflowAPIKey', () => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:     })",
          "21:     it('should return true if chatflow.apikeyid is not set', async () => {",
          "23:         expect(result).toBe(true)",
          "24:     })",
          "26:     it('should return false if chatflow.apikeyid is set but authorization header is missing', async () => {",
          "27:         chatflow.apikeyid = 'some-api-key-id'",
          "29:         expect(result).toBe(false)",
          "30:     })",
          "",
          "[Removed Lines]",
          "22:         const result = await utilValidateKey(req as Request, chatflow)",
          "28:         const result = await utilValidateKey(req as Request, chatflow)",
          "",
          "[Added Lines]",
          "22:         const result = await validateChatflowAPIKey(req as Request, chatflow)",
          "28:         const result = await validateChatflowAPIKey(req as Request, chatflow)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:         ;(getAPIKeys as jest.Mock).mockResolvedValue([{ id: 'some-api-key-id', apiSecret: 'expected-secret-key' }])",
          "36:         ;(compareKeys as jest.Mock).mockImplementation((expected, supplied) => expected === supplied)",
          "39:         expect(result).toBe(false)",
          "40:     })",
          "41: })",
          "",
          "[Removed Lines]",
          "38:         const result = await utilValidateKey(req as Request, chatflow)",
          "",
          "[Added Lines]",
          "38:         const result = await validateChatflowAPIKey(req as Request, chatflow)",
          "",
          "---------------"
        ],
        "packages/ui/src/api/client.js||packages/ui/src/api/client.js": [
          "File: packages/ui/src/api/client.js -> packages/ui/src/api/client.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: const apiClient = axios.create({",
          "5:     baseURL: `${baseURL}/api/v1`,",
          "6:     headers: {",
          "8:     }",
          "9: })",
          "",
          "[Removed Lines]",
          "7:         'Content-type': 'application/json'",
          "",
          "[Added Lines]",
          "7:         'Content-type': 'application/json',",
          "8:         'x-request-from': 'internal'",
          "",
          "---------------"
        ],
        "packages/ui/src/api/documentstore.js||packages/ui/src/api/documentstore.js": [
          "File: packages/ui/src/api/documentstore.js -> packages/ui/src/api/documentstore.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import client from './client'",
          "4: const getDocumentLoaders = () => client.get('/document-store/components/loaders')",
          "5: const getSpecificDocumentStore = (id) => client.get(`/document-store/store/${id}`)",
          "6: const createDocumentStore = (body) => client.post(`/document-store/store`, body)",
          "",
          "[Removed Lines]",
          "3: const getAllDocumentStores = () => client.get('/document-store/stores')",
          "",
          "[Added Lines]",
          "3: const getAllDocumentStores = () => client.get('/document-store/store')",
          "",
          "---------------"
        ],
        "packages/ui/src/ui-component/dialog/AboutDialog.jsx||packages/ui/src/ui-component/dialog/AboutDialog.jsx": [
          "File: packages/ui/src/ui-component/dialog/AboutDialog.jsx -> packages/ui/src/ui-component/dialog/AboutDialog.jsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:                     username,",
          "23:                     password",
          "24:                 }",
          "25:             }",
          "26:             const latestReleaseReq = axios.get('https://api.github.com/repos/FlowiseAI/Flowise/releases/latest')",
          "27:             const currentVersionReq = axios.get(`${baseURL}/api/v1/version`, { ...config })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:                 config.headers = {",
          "26:                     'Content-type': 'application/json',",
          "27:                     'x-request-from': 'internal'",
          "28:                 }",
          "",
          "---------------"
        ],
        "packages/ui/src/ui-component/dialog/ViewMessagesDialog.jsx||packages/ui/src/ui-component/dialog/ViewMessagesDialog.jsx": [
          "File: packages/ui/src/ui-component/dialog/ViewMessagesDialog.jsx -> packages/ui/src/ui-component/dialog/ViewMessagesDialog.jsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:             const chatmsg = allChatlogs[i]",
          "188:             const chatPK = getChatPK(chatmsg)",
          "189:             let filePaths = []",
          "192:                 chatmsg.fileUploads.forEach((file) => {",
          "193:                     if (file.type === 'stored-file') {",
          "194:                         filePaths.push(",
          "",
          "[Removed Lines]",
          "190:             if (chatmsg.fileUploads) {",
          "191:                 chatmsg.fileUploads = JSON.parse(chatmsg.fileUploads)",
          "",
          "[Added Lines]",
          "190:             if (chatmsg.fileUploads && Array.isArray(chatmsg.fileUploads)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:                 time: chatmsg.createdDate",
          "204:             }",
          "205:             if (filePaths.length) msg.filePaths = filePaths",
          "209:             if (chatmsg.feedback) msg.feedback = chatmsg.feedback?.content",
          "212:             if (!Object.prototype.hasOwnProperty.call(obj, chatPK)) {",
          "213:                 obj[chatPK] = {",
          "",
          "[Removed Lines]",
          "206:             if (chatmsg.sourceDocuments) msg.sourceDocuments = JSON.parse(chatmsg.sourceDocuments)",
          "207:             if (chatmsg.usedTools) msg.usedTools = JSON.parse(chatmsg.usedTools)",
          "208:             if (chatmsg.fileAnnotations) msg.fileAnnotations = JSON.parse(chatmsg.fileAnnotations)",
          "210:             if (chatmsg.agentReasoning) msg.agentReasoning = JSON.parse(chatmsg.agentReasoning)",
          "",
          "[Added Lines]",
          "205:             if (chatmsg.sourceDocuments) msg.sourceDocuments = chatmsg.sourceDocuments",
          "206:             if (chatmsg.usedTools) msg.usedTools = Jchatmsg.usedTools",
          "207:             if (chatmsg.fileAnnotations) msg.fileAnnotations = chatmsg.fileAnnotations",
          "209:             if (chatmsg.agentReasoning) msg.agentReasoning = chatmsg.agentReasoning",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "326:                     })",
          "327:                 }",
          "328:             }",
          "331:                 chatmsg.fileUploads.forEach((file) => {",
          "332:                     if (file.type === 'stored-file') {",
          "333:                         file.data = `${baseURL}/api/v1/get-upload-file?chatflowId=${chatmsg.chatflowid}&chatId=${chatmsg.chatId}&fileName=${file.name}`",
          "",
          "[Removed Lines]",
          "329:             if (chatmsg.fileUploads) {",
          "330:                 chatmsg.fileUploads = JSON.parse(chatmsg.fileUploads)",
          "",
          "[Added Lines]",
          "328:             if (chatmsg.fileUploads && Array.isArray(chatmsg.fileUploads)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "339:                 message: chatmsg.content,",
          "340:                 type: chatmsg.role",
          "341:             }",
          "347:             loadedMessages.push(obj)",
          "348:         }",
          "",
          "[Removed Lines]",
          "342:             if (chatmsg.sourceDocuments) obj.sourceDocuments = JSON.parse(chatmsg.sourceDocuments)",
          "343:             if (chatmsg.usedTools) obj.usedTools = JSON.parse(chatmsg.usedTools)",
          "344:             if (chatmsg.fileAnnotations) obj.fileAnnotations = JSON.parse(chatmsg.fileAnnotations)",
          "345:             if (chatmsg.agentReasoning) obj.agentReasoning = JSON.parse(chatmsg.agentReasoning)",
          "",
          "[Added Lines]",
          "340:             if (chatmsg.sourceDocuments) obj.sourceDocuments = chatmsg.sourceDocuments",
          "341:             if (chatmsg.usedTools) obj.usedTools = chatmsg.usedTools",
          "342:             if (chatmsg.fileAnnotations) obj.fileAnnotations = chatmsg.fileAnnotations",
          "343:             if (chatmsg.agentReasoning) obj.agentReasoning = chatmsg.agentReasoning",
          "",
          "---------------"
        ],
        "packages/ui/src/ui-component/dropdown/AsyncDropdown.jsx||packages/ui/src/ui-component/dropdown/AsyncDropdown.jsx": [
          "File: packages/ui/src/ui-component/dropdown/AsyncDropdown.jsx -> packages/ui/src/ui-component/dropdown/AsyncDropdown.jsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         .post(",
          "36:             `${baseURL}/api/v1/node-load-method/${nodeData.name}`,",
          "37:             { ...nodeData, loadMethod },",
          "39:         )",
          "40:         .then(async function (response) {",
          "41:             return response.data",
          "",
          "[Removed Lines]",
          "38:             { auth: username && password ? { username, password } : undefined }",
          "",
          "[Added Lines]",
          "38:             {",
          "39:                 auth: username && password ? { username, password } : undefined,",
          "40:                 headers: { 'Content-type': 'application/json', 'x-request-from': 'internal' }",
          "41:             }",
          "",
          "---------------"
        ],
        "packages/ui/src/views/chatmessage/ChatMessage.jsx||packages/ui/src/views/chatmessage/ChatMessage.jsx": [
          "File: packages/ui/src/views/chatmessage/ChatMessage.jsx -> packages/ui/src/views/chatmessage/ChatMessage.jsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:                     feedback: message.feedback,",
          "685:                     type: message.role",
          "686:                 }",
          "692:                 if (message.fileUploads) {",
          "694:                     obj.fileUploads.forEach((file) => {",
          "695:                         if (file.type === 'stored-file') {",
          "696:                             file.data = `${baseURL}/api/v1/get-upload-file?chatflowId=${chatflowid}&chatId=${chatId}&fileName=${file.name}`",
          "",
          "[Removed Lines]",
          "687:                 if (message.sourceDocuments) obj.sourceDocuments = JSON.parse(message.sourceDocuments)",
          "688:                 if (message.usedTools) obj.usedTools = JSON.parse(message.usedTools)",
          "689:                 if (message.fileAnnotations) obj.fileAnnotations = JSON.parse(message.fileAnnotations)",
          "690:                 if (message.agentReasoning) obj.agentReasoning = JSON.parse(message.agentReasoning)",
          "691:                 if (message.action) obj.action = JSON.parse(message.action)",
          "693:                     obj.fileUploads = JSON.parse(message.fileUploads)",
          "",
          "[Added Lines]",
          "687:                 if (message.sourceDocuments) obj.sourceDocuments = message.sourceDocuments",
          "688:                 if (message.usedTools) obj.usedTools = message.usedTools",
          "689:                 if (message.fileAnnotations) obj.fileAnnotations = message.fileAnnotations",
          "690:                 if (message.agentReasoning) obj.agentReasoning = message.agentReasoning",
          "691:                 if (message.action) obj.action = message.action",
          "693:                     obj.fileUploads = message.fileUploads",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1390:                                                 </>",
          "1391:                                             )}",
          "1392:                                         </div>",
          "1425:                                         {message.fileAnnotations && (",
          "1426:                                             <div",
          "1427:                                                 style={{",
          "1428:                                                     display: 'block',",
          "1429:                                                     flexDirection: 'row',",
          "1431:                                                 }}",
          "1432:                                             >",
          "1433:                                                 {message.fileAnnotations.map((fileAnnotation, index) => {",
          "",
          "[Removed Lines]",
          "1393:                                         {message.type === 'apiMessage' && message.id && chatFeedbackStatus ? (",
          "1394:                                             <>",
          "1395:                                                 <Box",
          "1396:                                                     sx={{",
          "1397:                                                         display: 'flex',",
          "1398:                                                         alignItems: 'center',",
          "1399:                                                         justifyContent: 'start',",
          "1400:                                                         gap: 1",
          "1401:                                                     }}",
          "1402:                                                 >",
          "1403:                                                     <CopyToClipboardButton onClick={() => copyMessageToClipboard(message.message)} />",
          "1404:                                                     {!message.feedback ||",
          "1405:                                                     message.feedback.rating === '' ||",
          "1406:                                                     message.feedback.rating === 'THUMBS_UP' ? (",
          "1407:                                                         <ThumbsUpButton",
          "1408:                                                             isDisabled={message.feedback && message.feedback.rating === 'THUMBS_UP'}",
          "1409:                                                             rating={message.feedback ? message.feedback.rating : ''}",
          "1410:                                                             onClick={() => onThumbsUpClick(message.id)}",
          "1411:                                                         />",
          "1412:                                                     ) : null}",
          "1413:                                                     {!message.feedback ||",
          "1414:                                                     message.feedback.rating === '' ||",
          "1415:                                                     message.feedback.rating === 'THUMBS_DOWN' ? (",
          "1416:                                                         <ThumbsDownButton",
          "1417:                                                             isDisabled={message.feedback && message.feedback.rating === 'THUMBS_DOWN'}",
          "1418:                                                             rating={message.feedback ? message.feedback.rating : ''}",
          "1419:                                                             onClick={() => onThumbsDownClick(message.id)}",
          "1420:                                                         />",
          "1421:                                                     ) : null}",
          "1422:                                                 </Box>",
          "1423:                                             </>",
          "1424:                                         ) : null}",
          "1430:                                                     width: '100%'",
          "",
          "[Added Lines]",
          "1398:                                                     width: '100%',",
          "1399:                                                     marginBottom: '8px'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1454:                                                 style={{",
          "1455:                                                     display: 'block',",
          "1456:                                                     flexDirection: 'row',",
          "1458:                                                 }}",
          "1459:                                             >",
          "1460:                                                 {removeDuplicateURL(message).map((source, index) => {",
          "",
          "[Removed Lines]",
          "1457:                                                     width: '100%'",
          "",
          "[Added Lines]",
          "1426:                                                     width: '100%',",
          "1427:                                                     marginBottom: '8px'",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1486:                                                     flexWrap: 'wrap',",
          "1487:                                                     flexDirection: 'row',",
          "1488:                                                     width: '100%',",
          "1490:                                                 }}",
          "1491:                                             >",
          "1492:                                                 {(message.action.elements || []).map((elem, index) => {",
          "",
          "[Removed Lines]",
          "1489:                                                     gap: '8px'",
          "",
          "[Added Lines]",
          "1459:                                                     gap: '8px',",
          "1460:                                                     marginBottom: '8px'",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1537:                                                 })}",
          "1538:                                             </div>",
          "1539:                                         )}",
          "1540:                                     </div>",
          "1541:                                 </Box>",
          "1542:                             )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1511:                                         {message.type === 'apiMessage' && message.id && chatFeedbackStatus ? (",
          "1512:                                             <>",
          "1513:                                                 <Box",
          "1514:                                                     sx={{",
          "1515:                                                         display: 'flex',",
          "1516:                                                         alignItems: 'center',",
          "1517:                                                         justifyContent: 'start',",
          "1518:                                                         gap: 1",
          "1519:                                                     }}",
          "1520:                                                 >",
          "1521:                                                     <CopyToClipboardButton onClick={() => copyMessageToClipboard(message.message)} />",
          "1522:                                                     {!message.feedback ||",
          "1523:                                                     message.feedback.rating === '' ||",
          "1524:                                                     message.feedback.rating === 'THUMBS_UP' ? (",
          "1525:                                                         <ThumbsUpButton",
          "1526:                                                             isDisabled={message.feedback && message.feedback.rating === 'THUMBS_UP'}",
          "1527:                                                             rating={message.feedback ? message.feedback.rating : ''}",
          "1528:                                                             onClick={() => onThumbsUpClick(message.id)}",
          "1529:                                                         />",
          "1530:                                                     ) : null}",
          "1531:                                                     {!message.feedback ||",
          "1532:                                                     message.feedback.rating === '' ||",
          "1533:                                                     message.feedback.rating === 'THUMBS_DOWN' ? (",
          "1534:                                                         <ThumbsDownButton",
          "1535:                                                             isDisabled={message.feedback && message.feedback.rating === 'THUMBS_DOWN'}",
          "1536:                                                             rating={message.feedback ? message.feedback.rating : ''}",
          "1537:                                                             onClick={() => onThumbsDownClick(message.id)}",
          "1538:                                                         />",
          "1539:                                                     ) : null}",
          "1540:                                                 </Box>",
          "1541:                                             </>",
          "1542:                                         ) : null}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "582dcc85083eec441ca91ce10d140dc0398c58dd",
      "candidate_info": {
        "commit_hash": "582dcc85083eec441ca91ce10d140dc0398c58dd",
        "repo": "FlowiseAI/Flowise",
        "commit_url": "https://github.com/FlowiseAI/Flowise/commit/582dcc85083eec441ca91ce10d140dc0398c58dd",
        "files": [
          "packages/server/src/controllers/ping/index.ts",
          "packages/server/src/index.ts",
          "packages/server/src/routes/index.ts",
          "packages/server/src/routes/ping/index.ts"
        ],
        "message": "Feature/add status check ping (#2579)\n\nadd status check ping",
        "before_after_code_files": [
          "packages/server/src/controllers/ping/index.ts||packages/server/src/controllers/ping/index.ts",
          "packages/server/src/index.ts||packages/server/src/index.ts",
          "packages/server/src/routes/index.ts||packages/server/src/routes/index.ts",
          "packages/server/src/routes/ping/index.ts||packages/server/src/routes/ping/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/server/src/index.ts||packages/server/src/index.ts"
          ],
          "candidate": [
            "packages/server/src/index.ts||packages/server/src/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/server/src/controllers/ping/index.ts||packages/server/src/controllers/ping/index.ts": [
          "File: packages/server/src/controllers/ping/index.ts -> packages/server/src/controllers/ping/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { Request, Response, NextFunction } from 'express'",
          "3: const getPing = async (req: Request, res: Response, next: NextFunction) => {",
          "4:     try {",
          "5:         return res.status(200).send('pong')",
          "6:     } catch (error) {",
          "7:         next(error)",
          "8:     }",
          "9: }",
          "11: export default {",
          "12:     getPing",
          "13: }",
          "",
          "---------------"
        ],
        "packages/server/src/index.ts||packages/server/src/index.ts": [
          "File: packages/server/src/index.ts -> packages/server/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:                 '/api/v1/feedback',",
          "138:                 '/api/v1/leads',",
          "139:                 '/api/v1/get-upload-file',",
          "141:             ]",
          "142:             this.app.use((req, res, next) => {",
          "143:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
          "",
          "[Removed Lines]",
          "140:                 '/api/v1/ip'",
          "",
          "[Added Lines]",
          "140:                 '/api/v1/ip',",
          "141:                 '/api/v1/ping'",
          "",
          "---------------"
        ],
        "packages/server/src/routes/index.ts||packages/server/src/routes/index.ts": [
          "File: packages/server/src/routes/index.ts -> packages/server/src/routes/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import verifyRouter from './verify'",
          "39: import versionRouter from './versions'",
          "40: import upsertHistoryRouter from './upsert-history'",
          "42: const router = express.Router()",
          "44: router.use('/apikey', apikeyRouter)",
          "45: router.use('/assistants', assistantsRouter)",
          "46: router.use('/chatflows', chatflowsRouter)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import pingRouter from './ping'",
          "45: router.use('/ping', pingRouter)",
          "",
          "---------------"
        ],
        "packages/server/src/routes/ping/index.ts||packages/server/src/routes/ping/index.ts": [
          "File: packages/server/src/routes/ping/index.ts -> packages/server/src/routes/ping/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import express from 'express'",
          "2: import pingController from '../../controllers/ping'",
          "3: const router = express.Router()",
          "6: router.get('/', pingController.getPing)",
          "8: export default router",
          "",
          "---------------"
        ]
      }
    }
  ]
}