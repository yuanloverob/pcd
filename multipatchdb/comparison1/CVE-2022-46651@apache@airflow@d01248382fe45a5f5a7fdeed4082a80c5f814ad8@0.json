{
  "cve_id": "CVE-2022-46651",
  "cve_desc": "Apache Airflow, versions before 2.6.3, is affected by a vulnerability that allows an unauthorized actor to gain access to sensitive information in Connection edit view. This vulnerability is considered low since it requires someone with access to Connection resources specifically updating the connection to exploit it. Users should upgrade to version 2.6.3 or later which has removed the vulnerability.\n",
  "repo": "apache/airflow",
  "patch_hash": "d01248382fe45a5f5a7fdeed4082a80c5f814ad8",
  "patch_info": {
    "commit_hash": "d01248382fe45a5f5a7fdeed4082a80c5f814ad8",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/d01248382fe45a5f5a7fdeed4082a80c5f814ad8",
    "files": [
      "airflow/providers_manager.py",
      "airflow/www/views.py",
      "tests/www/views/test_views_connection.py"
    ],
    "message": "Hide sensitive values from extra in connection edit form (#32309)\n\nThe fields that are sensitive (i.e password field is used\nto show them in Connection edit view) should also be hidden\nwhen they are stored as \"extra\" in the form extra field.\n\nThis PR handles both - replacing such values with a\nplaceholder as well as not updating the value if the\nplaceholder has not been modified.",
    "before_after_code_files": [
      "airflow/providers_manager.py||airflow/providers_manager.py",
      "airflow/www/views.py||airflow/www/views.py",
      "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py"
    ]
  },
  "patch_diff": {
    "airflow/providers_manager.py||airflow/providers_manager.py": [
      "File: airflow/providers_manager.py -> airflow/providers_manager.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "223:     package_name: str",
      "224:     field: Any",
      "225:     field_name: str",
      "228: T = TypeVar(\"T\", bound=Callable)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226:     is_sensitive: bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "882:                 # In case of inherited hooks this might be happening several times",
      "883:                 continue",
      "884:             self._connection_form_widgets[prefixed_field_name] = ConnectionFormWidgetInfo(",
      "886:             )",
      "888:     def _add_customized_fields(self, package_name: str, hook_class: type, customized_fields: dict):",
      "",
      "[Removed Lines]",
      "885:                 hook_class.__name__, package_name, field, field_identifier",
      "",
      "[Added Lines]",
      "886:                 hook_class.__name__,",
      "887:                 package_name,",
      "888:                 field,",
      "889:                 field_identifier,",
      "890:                 hasattr(field.field_class.widget, \"input_type\")",
      "891:                 and field.field_class.widget.input_type == \"password\",",
      "",
      "---------------"
    ],
    "airflow/www/views.py||airflow/www/views.py": [
      "File: airflow/www/views.py -> airflow/www/views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "88: from airflow.exceptions import (",
      "89:     AirflowConfigException,",
      "90:     AirflowException,",
      "91:     ParamValidationError,",
      "92:     RemovedInAirflow3Warning,",
      "93: )",
      "94: from airflow.executors.executor_loader import ExecutorLoader",
      "95: from airflow.jobs.job import Job",
      "96: from airflow.jobs.scheduler_job_runner import SchedulerJobRunner",
      "97: from airflow.jobs.triggerer_job_runner import TriggererJobRunner",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "91:     AirflowNotFoundException,",
      "96: from airflow.hooks.base import BaseHook",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "147:     \"} else {xLabel = d3.time.format('%H:%M, %d %b')(new Date(parseInt(d)));} return xLabel;}\"",
      "148: )",
      "151: def sanitize_args(args: dict[str, str]) -> dict[str, str]:",
      "152:     \"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "152: SENSITIVE_FIELD_PLACEHOLDER = \"RATHER_LONG_SENSITIVE_FIELD_PLACEHOLDER\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4658:     base_order = (\"conn_id\", \"asc\")",
      "4661:         \"\"\"Iterate through provider-backed connection fields.",
      "4663:         Note that this cannot be a property (including a cached property)",
      "4664:         because Flask-Appbuilder attempts to access all members on startup, and",
      "4665:         using a property would initialize the providers manager too eagerly.",
      "4666:         \"\"\"",
      "4669:     @property",
      "4670:     def add_columns(self) -> list[str]:",
      "",
      "[Removed Lines]",
      "4660:     def _iter_extra_field_names(self) -> Iterator[tuple[str, str]]:",
      "4667:         return ((k, v.field_name) for k, v in ProvidersManager().connection_form_widgets.items())",
      "",
      "[Added Lines]",
      "4664:     def _iter_extra_field_names_and_sensitivity(self) -> Iterator[tuple[str, str, bool]]:",
      "4671:         Returns tuple of:",
      "4677:         return (",
      "4678:             (k, v.field_name, v.is_sensitive) for k, v in ProvidersManager().connection_form_widgets.items()",
      "4679:         )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4677:         superfuluous checks done by Flask-Appbuilder on startup).",
      "4678:         \"\"\"",
      "4679:         if self._add_columns is type(self)._add_columns and has_request_context():",
      "4681:         return self._add_columns",
      "4683:     @property",
      "",
      "[Removed Lines]",
      "4680:             self._add_columns = [*self._add_columns, *(k for k, _ in self._iter_extra_field_names())]",
      "",
      "[Added Lines]",
      "4692:             self._add_columns = [",
      "4695:             ]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4691:         superfuluous checks done by Flask-Appbuilder on startup).",
      "4692:         \"\"\"",
      "4693:         if self._edit_columns is type(self)._edit_columns and has_request_context():",
      "4695:         return self._edit_columns",
      "4697:     @action(\"muldelete\", \"Delete\", \"Are you sure you want to delete selected records?\", single=False)",
      "",
      "[Removed Lines]",
      "4694:             self._edit_columns = [*self._edit_columns, *(k for k, _ in self._iter_extra_field_names())]",
      "",
      "[Added Lines]",
      "4709:             self._edit_columns = [",
      "4712:             ]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4807:                 )",
      "4808:                 del form.extra",
      "4809:         del extra_json",
      "4812:             if key in form.data and key.startswith(\"extra__\"):",
      "4813:                 conn_type_from_extra_field = key.split(\"__\")[1]",
      "4814:                 if conn_type_from_extra_field == conn_type:",
      "",
      "[Removed Lines]",
      "4811:         for key, field_name in self._iter_extra_field_names():",
      "",
      "[Added Lines]",
      "4827:         for key, field_name, is_sensitive in self._iter_extra_field_names_and_sensitivity():",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4817:                     # value isn't an empty string.",
      "4818:                     if value != \"\":",
      "4819:                         extra[field_name] = value",
      "4821:         if extra.keys():",
      "4822:             form.extra.data = json.dumps(extra)",
      "4824:     def prefill_form(self, form, pk):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4837:             sensitive_unchanged_keys = set()",
      "4838:             for key, value in extra.items():",
      "4839:                 if value == SENSITIVE_FIELD_PLACEHOLDER:",
      "4840:                     sensitive_unchanged_keys.add(key)",
      "4841:             if sensitive_unchanged_keys:",
      "4842:                 try:",
      "4843:                     conn = BaseHook.get_connection(conn_id)",
      "4844:                 except AirflowNotFoundException:",
      "4845:                     conn = None",
      "4846:                 for key in sensitive_unchanged_keys:",
      "4847:                     if conn and conn.extra_dejson.get(key):",
      "4848:                         extra[key] = conn.extra_dejson.get(key)",
      "4849:                     else:",
      "4850:                         del extra[key]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "4836:             logging.warning(\"extra field for %s is not a dictionary\", form.data.get(\"conn_id\", \"<unknown>\"))",
      "4837:             return",
      "4840:             value = extra_dictionary.get(field_name, \"\")",
      "4842:             if not value:",
      "",
      "[Removed Lines]",
      "4839:         for field_key, field_name in self._iter_extra_field_names():",
      "",
      "[Added Lines]",
      "4868:         for field_key, field_name, is_sensitive in self._iter_extra_field_names_and_sensitivity():",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "4846:             if value:",
      "4847:                 field = getattr(form, field_key)",
      "4848:                 field.data = value",
      "4851: class PluginView(AirflowBaseView):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4878:             if is_sensitive and field_name in extra_dictionary:",
      "4879:                 extra_dictionary[field_name] = SENSITIVE_FIELD_PLACEHOLDER",
      "4880:         # form.data is a property that builds the dictionary from fields so we have to modify the fields",
      "4881:         form.extra.data = json.dumps(extra_dictionary)",
      "",
      "---------------"
    ],
    "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py": [
      "File: tests/www/views/test_views_connection.py -> tests/www/views/test_views_connection.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:     mock_form.data = {\"conn_id\": \"test\", \"extra\": None, \"conn_type\": \"test\"}",
      "81:     cmv = ConnectionModelView()",
      "83:     cmv.prefill_form(form=mock_form, pk=1)",
      "86: @pytest.mark.parametrize(",
      "87:     \"extras, expected\",",
      "88:     [",
      "",
      "[Removed Lines]",
      "82:     cmv._iter_extra_field_names = mock.Mock(return_value=())",
      "",
      "[Added Lines]",
      "82:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(return_value=())",
      "86: def test_prefill_form_sensitive_fields_extra():",
      "87:     mock_form = mock.Mock()",
      "88:     mock_form.data = {",
      "89:         \"conn_id\": \"test\",",
      "90:         \"extra\": json.dumps({\"sensitive_extra\": \"TEST1\", \"non_sensitive_extra\": \"TEST2\"}),",
      "91:         \"conn_type\": \"test\",",
      "92:     }",
      "94:     cmv = ConnectionModelView()",
      "95:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
      "96:         return_value=[(\"sensitive_extra_key\", \"sensitive_extra\", True)]",
      "97:     )",
      "98:     cmv.prefill_form(form=mock_form, pk=1)",
      "99:     assert json.loads(mock_form.extra.data) == {",
      "100:         \"sensitive_extra\": \"RATHER_LONG_SENSITIVE_FIELD_PLACEHOLDER\",",
      "101:         \"non_sensitive_extra\": \"TEST2\",",
      "102:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "106:     mock_form.data = {\"conn_id\": \"test\", \"extra\": json.dumps(extras), \"conn_type\": \"test\"}",
      "108:     cmv = ConnectionModelView()",
      "110:     cmv.prefill_form(form=mock_form, pk=1)",
      "111:     assert mock_form.extra__test__my_param.data == expected",
      "",
      "[Removed Lines]",
      "109:     cmv._iter_extra_field_names = mock.Mock(return_value=[(\"extra__test__my_param\", \"my_param\")])",
      "",
      "[Added Lines]",
      "128:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
      "129:         return_value=[(\"extra__test__my_param\", \"my_param\", False)]",
      "130:     )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "134:     }",
      "136:     cmv = ConnectionModelView()",
      "138:     cmv.process_form(form=mock_form, is_created=True)",
      "139:     assert json.loads(mock_form.extra.data) == {",
      "140:         field_name: \"custom_field_val\",",
      "",
      "[Removed Lines]",
      "137:     cmv._iter_extra_field_names = mock.Mock(return_value=[(\"extra__test__custom_field\", field_name)])",
      "",
      "[Added Lines]",
      "158:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
      "159:         return_value=[(\"extra__test__custom_field\", field_name, False)]",
      "160:     )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "160:     }",
      "162:     cmv = ConnectionModelView()",
      "164:     cmv.process_form(form=mock_form, is_created=True)",
      "165:     assert json.loads(mock_form.extra.data) == {\"param2\": \"param2_val\"}",
      "",
      "[Removed Lines]",
      "163:     cmv._iter_extra_field_names = mock.Mock(return_value=())",
      "",
      "[Added Lines]",
      "186:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(return_value=())",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "186:     }",
      "188:     cmv = ConnectionModelView()",
      "190:         return_value=[",
      "193:         ],",
      "194:     )",
      "195:     cmv.process_form(form=mock_form, is_created=True)",
      "",
      "[Removed Lines]",
      "189:     cmv._iter_extra_field_names = mock.Mock(",
      "191:             (\"extra__test3__custom_field\", field_name),",
      "192:             (\"extra__test3__custom_bool_field\", False),",
      "",
      "[Added Lines]",
      "212:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
      "214:             (\"extra__test3__custom_field\", field_name, False),",
      "215:             (\"extra__test3__custom_bool_field\", False, False),",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "217:     }",
      "219:     cmv = ConnectionModelView()",
      "221:     cmv.process_form(form=mock_form, is_created=True)",
      "223:     if field_name == \"custom_field\":",
      "",
      "[Removed Lines]",
      "220:     cmv._iter_extra_field_names = mock.Mock(return_value=[(\"extra__test4__custom_field\", field_name)])",
      "",
      "[Added Lines]",
      "243:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
      "244:         return_value=[(\"extra__test4__custom_field\", field_name, False)]",
      "245:     )",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "229:         assert json.loads(mock_form.extra.data) == {\"extra__test4__custom_field\": \"custom_field_val4\"}",
      "232: def test_duplicate_connection(admin_client):",
      "233:     \"\"\"Test Duplicate multiple connection with suffix\"\"\"",
      "234:     conn1 = Connection(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "257: @mock.patch(\"airflow.utils.module_loading.import_string\")",
      "258: @mock.patch(\"airflow.providers_manager.ProvidersManager.hooks\", new_callable=PropertyMock)",
      "259: @mock.patch(\"airflow.www.views.BaseHook\")",
      "260: def test_process_form_extras_updates_sensitive_placeholder_unchanged(",
      "261:     mock_base_hook, mock_pm_hooks, mock_import_str",
      "262: ):",
      "263:     \"\"\"",
      "264:     Test the handling of sensitive unchanged field (where placeholder has not been modified).",
      "265:     \"\"\"",
      "267:     # Testing parameters set in both extra and custom fields (connection updates).",
      "268:     mock_form = mock.Mock()",
      "269:     mock_form.data = {",
      "270:         \"conn_type\": \"test4\",",
      "271:         \"conn_id\": \"extras_test4\",",
      "272:         \"extra\": '{\"sensitive_extra\": \"RATHER_LONG_SENSITIVE_FIELD_PLACEHOLDER\", \"extra__custom\": \"value\"}',",
      "273:     }",
      "274:     mock_base_hook.get_connection.return_value = Connection(extra='{\"sensitive_extra\": \"old_value\"}')",
      "275:     cmv = ConnectionModelView()",
      "276:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
      "277:         return_value=[(\"sensitive_extra_key\", \"sensitive_extra\", True)]",
      "278:     )",
      "279:     cmv.process_form(form=mock_form, is_created=True)",
      "281:     assert json.loads(mock_form.extra.data) == {",
      "282:         \"extra__custom\": \"value\",",
      "283:         \"sensitive_extra\": \"old_value\",",
      "284:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "191daab7a4f9e632e95e506724d053a3a7cf4606",
      "candidate_info": {
        "commit_hash": "191daab7a4f9e632e95e506724d053a3a7cf4606",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/191daab7a4f9e632e95e506724d053a3a7cf4606",
        "files": [
          "airflow/providers_manager.py",
          "airflow/www/views.py",
          "tests/www/views/test_views_connection.py"
        ],
        "message": "Hide sensitive values from extra in connection edit form (#32309)\n\nThe fields that are sensitive (i.e password field is used\nto show them in Connection edit view) should also be hidden\nwhen they are stored as \"extra\" in the form extra field.\n\nThis PR handles both - replacing such values with a\nplaceholder as well as not updating the value if the\nplaceholder has not been modified.\n\n(cherry picked from commit d01248382fe45a5f5a7fdeed4082a80c5f814ad8)",
        "before_after_code_files": [
          "airflow/providers_manager.py||airflow/providers_manager.py",
          "airflow/www/views.py||airflow/www/views.py",
          "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "airflow/providers_manager.py||airflow/providers_manager.py",
            "airflow/www/views.py||airflow/www/views.py",
            "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py"
          ],
          "candidate": [
            "airflow/providers_manager.py||airflow/providers_manager.py",
            "airflow/www/views.py||airflow/www/views.py",
            "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/providers_manager.py||airflow/providers_manager.py": [
          "File: airflow/providers_manager.py -> airflow/providers_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:     package_name: str",
          "216:     field: Any",
          "217:     field_name: str",
          "220: T = TypeVar(\"T\", bound=Callable)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:     is_sensitive: bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "873:                 # In case of inherited hooks this might be happening several times",
          "874:                 continue",
          "875:             self._connection_form_widgets[prefixed_field_name] = ConnectionFormWidgetInfo(",
          "877:             )",
          "879:     def _add_customized_fields(self, package_name: str, hook_class: type, customized_fields: dict):",
          "",
          "[Removed Lines]",
          "876:                 hook_class.__name__, package_name, field, field_identifier",
          "",
          "[Added Lines]",
          "877:                 hook_class.__name__,",
          "878:                 package_name,",
          "879:                 field,",
          "880:                 field_identifier,",
          "881:                 hasattr(field.field_class.widget, \"input_type\")",
          "882:                 and field.field_class.widget.input_type == \"password\",",
          "",
          "---------------"
        ],
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: from airflow.compat.functools import cached_property",
          "88: from airflow.configuration import AIRFLOW_CONFIG, conf",
          "89: from airflow.datasets import Dataset",
          "91: from airflow.executors.executor_loader import ExecutorLoader",
          "92: from airflow.jobs.job import Job",
          "93: from airflow.jobs.scheduler_job_runner import SchedulerJobRunner",
          "94: from airflow.jobs.triggerer_job_runner import TriggererJobRunner",
          "",
          "[Removed Lines]",
          "90: from airflow.exceptions import AirflowException, ParamValidationError, RemovedInAirflow3Warning",
          "",
          "[Added Lines]",
          "90: from airflow.exceptions import (",
          "91:     AirflowException,",
          "92:     AirflowNotFoundException,",
          "93:     ParamValidationError,",
          "94:     RemovedInAirflow3Warning,",
          "95: )",
          "97: from airflow.hooks.base import BaseHook",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:     \"} else {xLabel = d3.time.format('%H:%M, %d %b')(new Date(parseInt(d)));} return xLabel;}\"",
          "145: )",
          "148: def truncate_task_duration(task_duration):",
          "149:     \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153: SENSITIVE_FIELD_PLACEHOLDER = \"RATHER_LONG_SENSITIVE_FIELD_PLACEHOLDER\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4421:     base_order = (\"conn_id\", \"asc\")",
          "4424:         \"\"\"Iterate through provider-backed connection fields.",
          "4426:         Note that this cannot be a property (including a cached property)",
          "4427:         because Flask-Appbuilder attempts to access all members on startup, and",
          "4428:         using a property would initialize the providers manager too eagerly.",
          "4429:         \"\"\"",
          "4432:     @property",
          "4433:     def add_columns(self) -> list[str]:",
          "",
          "[Removed Lines]",
          "4423:     def _iter_extra_field_names(self) -> Iterator[tuple[str, str]]:",
          "4430:         return ((k, v.field_name) for k, v in ProvidersManager().connection_form_widgets.items())",
          "",
          "[Added Lines]",
          "4431:     def _iter_extra_field_names_and_sensitivity(self) -> Iterator[tuple[str, str, bool]]:",
          "4438:         Returns tuple of:",
          "4444:         return (",
          "4445:             (k, v.field_name, v.is_sensitive) for k, v in ProvidersManager().connection_form_widgets.items()",
          "4446:         )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4440:         superfuluous checks done by Flask-Appbuilder on startup).",
          "4441:         \"\"\"",
          "4442:         if self._add_columns is type(self)._add_columns and has_request_context():",
          "4444:         return self._add_columns",
          "4446:     @property",
          "",
          "[Removed Lines]",
          "4443:             self._add_columns = [*self._add_columns, *(k for k, _ in self._iter_extra_field_names())]",
          "",
          "[Added Lines]",
          "4459:             self._add_columns = [",
          "4462:             ]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4454:         superfuluous checks done by Flask-Appbuilder on startup).",
          "4455:         \"\"\"",
          "4456:         if self._edit_columns is type(self)._edit_columns and has_request_context():",
          "4458:         return self._edit_columns",
          "4460:     @action(\"muldelete\", \"Delete\", \"Are you sure you want to delete selected records?\", single=False)",
          "",
          "[Removed Lines]",
          "4457:             self._edit_columns = [*self._edit_columns, *(k for k, _ in self._iter_extra_field_names())]",
          "",
          "[Added Lines]",
          "4476:             self._edit_columns = [",
          "4479:             ]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4568:                 )",
          "4569:                 del form.extra",
          "4570:         del extra_json",
          "4573:             if key in form.data and key.startswith(\"extra__\"):",
          "4574:                 conn_type_from_extra_field = key.split(\"__\")[1]",
          "4575:                 if conn_type_from_extra_field == conn_type:",
          "",
          "[Removed Lines]",
          "4572:         for key, field_name in self._iter_extra_field_names():",
          "",
          "[Added Lines]",
          "4592:         for key, field_name, is_sensitive in self._iter_extra_field_names_and_sensitivity():",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4578:                     # value isn't an empty string.",
          "4579:                     if value != \"\":",
          "4580:                         extra[field_name] = value",
          "4582:         if extra.keys():",
          "4583:             form.extra.data = json.dumps(extra)",
          "4585:     def prefill_form(self, form, pk):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4602:             sensitive_unchanged_keys = set()",
          "4603:             for key, value in extra.items():",
          "4604:                 if value == SENSITIVE_FIELD_PLACEHOLDER:",
          "4605:                     sensitive_unchanged_keys.add(key)",
          "4606:             if sensitive_unchanged_keys:",
          "4607:                 try:",
          "4608:                     conn = BaseHook.get_connection(conn_id)",
          "4609:                 except AirflowNotFoundException:",
          "4610:                     conn = None",
          "4611:                 for key in sensitive_unchanged_keys:",
          "4612:                     if conn and conn.extra_dejson.get(key):",
          "4613:                         extra[key] = conn.extra_dejson.get(key)",
          "4614:                     else:",
          "4615:                         del extra[key]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4597:             logging.warning(\"extra field for %s is not a dictionary\", form.data.get(\"conn_id\", \"<unknown>\"))",
          "4598:             return",
          "4601:             value = extra_dictionary.get(field_name, \"\")",
          "4603:             if not value:",
          "",
          "[Removed Lines]",
          "4600:         for field_key, field_name in self._iter_extra_field_names():",
          "",
          "[Added Lines]",
          "4633:         for field_key, field_name, is_sensitive in self._iter_extra_field_names_and_sensitivity():",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4607:             if value:",
          "4608:                 field = getattr(form, field_key)",
          "4609:                 field.data = value",
          "4612: class PluginView(AirflowBaseView):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4643:             if is_sensitive and field_name in extra_dictionary:",
          "4644:                 extra_dictionary[field_name] = SENSITIVE_FIELD_PLACEHOLDER",
          "4645:         # form.data is a property that builds the dictionary from fields so we have to modify the fields",
          "4646:         form.extra.data = json.dumps(extra_dictionary)",
          "",
          "---------------"
        ],
        "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py": [
          "File: tests/www/views/test_views_connection.py -> tests/www/views/test_views_connection.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     mock_form.data = {\"conn_id\": \"test\", \"extra\": None, \"conn_type\": \"test\"}",
          "80:     cmv = ConnectionModelView()",
          "82:     cmv.prefill_form(form=mock_form, pk=1)",
          "85: @pytest.mark.parametrize(",
          "86:     \"extras, expected\",",
          "87:     [",
          "",
          "[Removed Lines]",
          "81:     cmv._iter_extra_field_names = mock.Mock(return_value=())",
          "",
          "[Added Lines]",
          "81:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(return_value=())",
          "85: def test_prefill_form_sensitive_fields_extra():",
          "86:     mock_form = mock.Mock()",
          "87:     mock_form.data = {",
          "88:         \"conn_id\": \"test\",",
          "89:         \"extra\": json.dumps({\"sensitive_extra\": \"TEST1\", \"non_sensitive_extra\": \"TEST2\"}),",
          "90:         \"conn_type\": \"test\",",
          "91:     }",
          "93:     cmv = ConnectionModelView()",
          "94:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
          "95:         return_value=[(\"sensitive_extra_key\", \"sensitive_extra\", True)]",
          "96:     )",
          "97:     cmv.prefill_form(form=mock_form, pk=1)",
          "98:     assert json.loads(mock_form.extra.data) == {",
          "99:         \"sensitive_extra\": \"RATHER_LONG_SENSITIVE_FIELD_PLACEHOLDER\",",
          "100:         \"non_sensitive_extra\": \"TEST2\",",
          "101:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     mock_form.data = {\"conn_id\": \"test\", \"extra\": json.dumps(extras), \"conn_type\": \"test\"}",
          "107:     cmv = ConnectionModelView()",
          "109:     cmv.prefill_form(form=mock_form, pk=1)",
          "110:     assert mock_form.extra__test__my_param.data == expected",
          "",
          "[Removed Lines]",
          "108:     cmv._iter_extra_field_names = mock.Mock(return_value=[(\"extra__test__my_param\", \"my_param\")])",
          "",
          "[Added Lines]",
          "127:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
          "128:         return_value=[(\"extra__test__my_param\", \"my_param\", False)]",
          "129:     )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:     }",
          "135:     cmv = ConnectionModelView()",
          "137:     cmv.process_form(form=mock_form, is_created=True)",
          "138:     assert json.loads(mock_form.extra.data) == {",
          "139:         field_name: \"custom_field_val\",",
          "",
          "[Removed Lines]",
          "136:     cmv._iter_extra_field_names = mock.Mock(return_value=[(\"extra__test__custom_field\", field_name)])",
          "",
          "[Added Lines]",
          "157:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
          "158:         return_value=[(\"extra__test__custom_field\", field_name, False)]",
          "159:     )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:     }",
          "161:     cmv = ConnectionModelView()",
          "163:     cmv.process_form(form=mock_form, is_created=True)",
          "164:     assert json.loads(mock_form.extra.data) == {\"param2\": \"param2_val\"}",
          "",
          "[Removed Lines]",
          "162:     cmv._iter_extra_field_names = mock.Mock(return_value=())",
          "",
          "[Added Lines]",
          "185:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(return_value=())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185:     }",
          "187:     cmv = ConnectionModelView()",
          "189:         return_value=[",
          "192:         ],",
          "193:     )",
          "194:     cmv.process_form(form=mock_form, is_created=True)",
          "",
          "[Removed Lines]",
          "188:     cmv._iter_extra_field_names = mock.Mock(",
          "190:             (\"extra__test3__custom_field\", field_name),",
          "191:             (\"extra__test3__custom_bool_field\", False),",
          "",
          "[Added Lines]",
          "211:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
          "213:             (\"extra__test3__custom_field\", field_name, False),",
          "214:             (\"extra__test3__custom_bool_field\", False, False),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "216:     }",
          "218:     cmv = ConnectionModelView()",
          "220:     cmv.process_form(form=mock_form, is_created=True)",
          "222:     if field_name == \"custom_field\":",
          "",
          "[Removed Lines]",
          "219:     cmv._iter_extra_field_names = mock.Mock(return_value=[(\"extra__test4__custom_field\", field_name)])",
          "",
          "[Added Lines]",
          "242:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
          "243:         return_value=[(\"extra__test4__custom_field\", field_name, False)]",
          "244:     )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "228:         assert json.loads(mock_form.extra.data) == {\"extra__test4__custom_field\": \"custom_field_val4\"}",
          "231: def test_duplicate_connection(admin_client):",
          "232:     \"\"\"Test Duplicate multiple connection with suffix\"\"\"",
          "233:     conn1 = Connection(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256: @mock.patch(\"airflow.utils.module_loading.import_string\")",
          "257: @mock.patch(\"airflow.providers_manager.ProvidersManager.hooks\", new_callable=PropertyMock)",
          "258: @mock.patch(\"airflow.www.views.BaseHook\")",
          "259: def test_process_form_extras_updates_sensitive_placeholder_unchanged(",
          "260:     mock_base_hook, mock_pm_hooks, mock_import_str",
          "261: ):",
          "262:     \"\"\"",
          "263:     Test the handling of sensitive unchanged field (where placeholder has not been modified).",
          "264:     \"\"\"",
          "266:     # Testing parameters set in both extra and custom fields (connection updates).",
          "267:     mock_form = mock.Mock()",
          "268:     mock_form.data = {",
          "269:         \"conn_type\": \"test4\",",
          "270:         \"conn_id\": \"extras_test4\",",
          "271:         \"extra\": '{\"sensitive_extra\": \"RATHER_LONG_SENSITIVE_FIELD_PLACEHOLDER\", \"extra__custom\": \"value\"}',",
          "272:     }",
          "273:     mock_base_hook.get_connection.return_value = Connection(extra='{\"sensitive_extra\": \"old_value\"}')",
          "274:     cmv = ConnectionModelView()",
          "275:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
          "276:         return_value=[(\"sensitive_extra_key\", \"sensitive_extra\", True)]",
          "277:     )",
          "278:     cmv.process_form(form=mock_form, is_created=True)",
          "280:     assert json.loads(mock_form.extra.data) == {",
          "281:         \"extra__custom\": \"value\",",
          "282:         \"sensitive_extra\": \"old_value\",",
          "283:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "208fba009980f66ccda3b238929c6cc90214eda4",
      "candidate_info": {
        "commit_hash": "208fba009980f66ccda3b238929c6cc90214eda4",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/208fba009980f66ccda3b238929c6cc90214eda4",
        "files": [
          "airflow/www/app.py",
          "airflow/www/extensions/init_views.py",
          "airflow/www/forms.py",
          "airflow/www/views.py",
          "tests/test_utils/decorators.py",
          "tests/www/views/test_views_connection.py"
        ],
        "message": "Delay ConnectionModelView init until it's accessed (#29946)\n\n* Delay ConnectionModelView init until it's accessed\n\nThis removed the \"lazy\" initialization of ConnectionModelView (and\nConnectionForm used by it) that happens when the webserver first\nlaunches, and moves the corresponding logic to until the view is\nactually being accessed.\n\nThis further delays the provider manager from loading connection form\nwidgets until the last possible moment and speeds up the webserver's\nstartup sequence.\n\nWhile this does make the connection form view a bit slower (only the\nfirst time since the result is cached), the slowdown should not be as\nnoticeable since the provider manager should generally be partially\nloaded into memory at that point.\n\n* Fix connection model view tests\n\n* Use flask.has_request_context() to time the init\n\nThis makes sure we only init when the view is accessed (instead of on\nstartup) without relying on Flask-Appbuilder internals.",
        "before_after_code_files": [
          "airflow/www/app.py||airflow/www/app.py",
          "airflow/www/extensions/init_views.py||airflow/www/extensions/init_views.py",
          "airflow/www/forms.py||airflow/www/forms.py",
          "airflow/www/views.py||airflow/www/views.py",
          "tests/test_utils/decorators.py||tests/test_utils/decorators.py",
          "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/www/views.py||airflow/www/views.py",
            "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py"
          ],
          "candidate": [
            "airflow/www/views.py||airflow/www/views.py",
            "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/www/app.py||airflow/www/app.py": [
          "File: airflow/www/app.py -> airflow/www/app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     init_api_experimental,",
          "52:     init_api_internal,",
          "53:     init_appbuilder_views,",
          "55:     init_error_handlers,",
          "56:     init_flash_views,",
          "57:     init_plugins,",
          "",
          "[Removed Lines]",
          "54:     init_connection_form,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:         init_appbuilder_views(flask_app)",
          "151:         init_appbuilder_links(flask_app)",
          "152:         init_plugins(flask_app)",
          "154:         init_error_handlers(flask_app)",
          "155:         init_api_connexion(flask_app)",
          "156:         if conf.getboolean(\"webserver\", \"run_internal_api\", fallback=False):",
          "",
          "[Removed Lines]",
          "153:         init_connection_form()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/www/extensions/init_views.py||airflow/www/extensions/init_views.py": [
          "File: airflow/www/extensions/init_views.py -> airflow/www/extensions/init_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:         app.register_blueprint(blue_print[\"blueprint\"])",
          "160: def init_error_handlers(app: Flask):",
          "161:     \"\"\"Add custom errors handlers\"\"\"",
          "162:     from airflow.www import views",
          "",
          "[Removed Lines]",
          "153: def init_connection_form():",
          "154:     \"\"\"Initializes connection form\"\"\"",
          "155:     from airflow.www.views import lazy_add_provider_discovered_options_to_connection_form",
          "157:     lazy_add_provider_discovered_options_to_connection_form()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/www/forms.py||airflow/www/forms.py": [
          "File: airflow/www/forms.py -> airflow/www/forms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from __future__ import annotations",
          "20: import json",
          "21: from datetime import datetime as dt",
          "23: import pendulum",
          "24: from flask_appbuilder.fieldwidgets import (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import operator",
          "23: from typing import Iterator",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: from wtforms.fields import Field, IntegerField, PasswordField, SelectField, StringField, TextAreaField",
          "35: from wtforms.validators import InputRequired, Optional",
          "37: from airflow.configuration import conf",
          "38: from airflow.utils import timezone",
          "39: from airflow.utils.types import DagRunType",
          "40: from airflow.www.widgets import (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: from airflow.compat.functools import cache",
          "41: from airflow.providers_manager import ProvidersManager",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:     note = TextAreaField(lazy_gettext(\"User Note\"), widget=BS3TextAreaFieldWidget())",
          "",
          "[Removed Lines]",
          "179: class ConnectionForm(DynamicForm):",
          "180:     \"\"\"Form for editing and adding Connection\"\"\"",
          "182:     conn_id = StringField(",
          "183:         lazy_gettext(\"Connection Id\"), validators=[InputRequired()], widget=BS3TextFieldWidget()",
          "184:     )",
          "185:     # conn_type is added later via lazy_add_provider_discovered_options_to_connection_form",
          "186:     description = StringField(lazy_gettext(\"Description\"), widget=BS3TextAreaFieldWidget())",
          "187:     host = StringField(lazy_gettext(\"Host\"), widget=BS3TextFieldWidget())",
          "188:     schema = StringField(lazy_gettext(\"Schema\"), widget=BS3TextFieldWidget())",
          "189:     login = StringField(lazy_gettext(\"Login\"), widget=BS3TextFieldWidget())",
          "190:     password = PasswordField(lazy_gettext(\"Password\"), widget=BS3PasswordFieldWidget())",
          "191:     port = IntegerField(lazy_gettext(\"Port\"), validators=[Optional()], widget=BS3TextFieldWidget())",
          "192:     extra = TextAreaField(lazy_gettext(\"Extra\"), widget=BS3TextAreaFieldWidget())",
          "",
          "[Added Lines]",
          "183: @cache",
          "184: def create_connection_form_class() -> type[DynamicForm]:",
          "185:     \"\"\"Create a form class for editing and adding Connection.",
          "187:     This class is created dynamically because it relies heavily on run-time",
          "188:     provider discovery, which slows down webserver startup a lot.",
          "189:     By creating the class at runtime, we can delay loading the providers until",
          "190:     when the connection form is first used, which may as well be never for a",
          "191:     short-lived server.",
          "192:     \"\"\"",
          "193:     providers_manager = ProvidersManager()",
          "195:     def _iter_connection_types() -> Iterator[tuple[str, str]]:",
          "196:         \"\"\"List available connection types.\"\"\"",
          "197:         yield (\"email\", \"Email\")",
          "198:         yield (\"fs\", \"File (path)\")",
          "199:         yield (\"generic\", \"Generic\")",
          "200:         yield (\"mesos_framework-id\", \"Mesos Framework ID\")",
          "201:         for connection_type, provider_info in providers_manager.hooks.items():",
          "202:             if provider_info:",
          "203:                 yield (connection_type, provider_info.hook_name)",
          "205:     class ConnectionForm(DynamicForm):",
          "206:         conn_id = StringField(",
          "207:             lazy_gettext(\"Connection Id\"),",
          "208:             validators=[InputRequired()],",
          "209:             widget=BS3TextFieldWidget(),",
          "210:         )",
          "211:         conn_type = SelectField(",
          "212:             lazy_gettext(\"Connection Type\"),",
          "213:             choices=sorted(_iter_connection_types(), key=operator.itemgetter(1)),",
          "214:             widget=Select2Widget(),",
          "215:             validators=[InputRequired()],",
          "216:             description=(",
          "217:                 \"Connection Type missing? Make sure you've installed the \"",
          "218:                 \"corresponding Airflow Provider Package.\"",
          "219:             ),",
          "220:         )",
          "221:         description = StringField(lazy_gettext(\"Description\"), widget=BS3TextAreaFieldWidget())",
          "222:         host = StringField(lazy_gettext(\"Host\"), widget=BS3TextFieldWidget())",
          "223:         schema = StringField(lazy_gettext(\"Schema\"), widget=BS3TextFieldWidget())",
          "224:         login = StringField(lazy_gettext(\"Login\"), widget=BS3TextFieldWidget())",
          "225:         password = PasswordField(lazy_gettext(\"Password\"), widget=BS3PasswordFieldWidget())",
          "226:         port = IntegerField(lazy_gettext(\"Port\"), validators=[Optional()], widget=BS3TextFieldWidget())",
          "227:         extra = TextAreaField(lazy_gettext(\"Extra\"), widget=BS3TextAreaFieldWidget())",
          "229:     for key, value in providers_manager.connection_form_widgets.items():",
          "230:         setattr(ConnectionForm, key, value.field)",
          "232:     return ConnectionForm",
          "",
          "---------------"
        ],
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: from datetime import datetime, timedelta",
          "33: from functools import wraps",
          "34: from json import JSONDecodeError",
          "36: from typing import Any, Callable, Collection, Iterator, Mapping, MutableMapping, Sequence",
          "37: from urllib.parse import unquote, urljoin, urlsplit",
          "",
          "[Removed Lines]",
          "35: from operator import itemgetter",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     before_render_template,",
          "50:     flash,",
          "51:     g,",
          "52:     make_response,",
          "53:     redirect,",
          "54:     render_template,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     has_request_context,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59: )",
          "60: from flask_appbuilder import BaseView, ModelView, expose",
          "61: from flask_appbuilder.actions import action",
          "63: from flask_appbuilder.models.sqla.filters import BaseFilter",
          "64: from flask_appbuilder.security.decorators import has_access",
          "65: from flask_appbuilder.urltools import get_order_args, get_page_args, get_page_size_args",
          "",
          "[Removed Lines]",
          "62: from flask_appbuilder.fieldwidgets import Select2Widget",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75: from sqlalchemy.exc import IntegrityError",
          "76: from sqlalchemy.orm import Session, joinedload",
          "77: from wtforms import SelectField, validators",
          "80: import airflow",
          "81: from airflow import models, plugins_manager, settings",
          "",
          "[Removed Lines]",
          "78: from wtforms.validators import InputRequired",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127: from airflow.www import auth, utils as wwwutils",
          "128: from airflow.www.decorators import action_logging, gzipped",
          "129: from airflow.www.forms import (",
          "131:     DagRunEditForm,",
          "132:     DateTimeForm,",
          "133:     DateTimeWithNumRunsForm,",
          "134:     DateTimeWithNumRunsWithDagRunsForm,",
          "135:     TaskInstanceEditForm,",
          "136: )",
          "137: from airflow.www.widgets import AirflowModelListWidget, AirflowVariableShowWidget",
          "",
          "[Removed Lines]",
          "130:     ConnectionForm,",
          "",
          "[Added Lines]",
          "133:     create_connection_form_class,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4278:         )",
          "4316: # Used to store a dictionary of field behaviours used to dynamically change available",
          "4317: # fields in ConnectionForm based on type of connection chosen",
          "4318: # See airflow.hooks.base_hook.DiscoverableHook for details on how to customize your Hooks.",
          "",
          "[Removed Lines]",
          "4281: def lazy_add_provider_discovered_options_to_connection_form():",
          "4282:     \"\"\"Adds provider-discovered connection parameters as late as possible\"\"\"",
          "4284:     def _get_connection_types() -> list[tuple[str, str]]:",
          "4285:         \"\"\"Returns connection types available.\"\"\"",
          "4286:         _connection_types = [",
          "4287:             (\"fs\", \"File (path)\"),",
          "4288:             (\"mesos_framework-id\", \"Mesos Framework ID\"),",
          "4289:             (\"email\", \"Email\"),",
          "4290:             (\"generic\", \"Generic\"),",
          "4291:         ]",
          "4292:         providers_manager = ProvidersManager()",
          "4293:         for connection_type, provider_info in providers_manager.hooks.items():",
          "4294:             if provider_info:",
          "4295:                 _connection_types.append((connection_type, provider_info.hook_name))",
          "4296:         return _connection_types",
          "4298:     ConnectionForm.conn_type = SelectField(",
          "4299:         lazy_gettext(\"Connection Type\"),",
          "4300:         choices=sorted(_get_connection_types(), key=itemgetter(1)),",
          "4301:         widget=Select2Widget(),",
          "4302:         validators=[InputRequired()],",
          "4303:         description=\"\"\"",
          "4304:             Connection Type missing?",
          "4305:             Make sure you've installed the corresponding Airflow Provider Package.",
          "4306:         \"\"\",",
          "4307:     )",
          "4308:     for key, value in ProvidersManager().connection_form_widgets.items():",
          "4309:         setattr(ConnectionForm, key, value.field)",
          "4310:         ConnectionModelView.extra_field_name_mapping[key] = value.field_name",
          "4311:         ConnectionModelView.add_columns.append(key)",
          "4312:         ConnectionModelView.edit_columns.append(key)",
          "4313:         ConnectionModelView.extra_fields.append(key)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4338:         ]",
          "4341: class ConnectionModelView(AirflowModelView):",
          "4342:     \"\"\"View to show records from Connections table\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4304: class ConnectionFormProxy:",
          "4305:     \"\"\"A stand-in for the connection form class.",
          "4307:     Flask-Appbuilder model views only ever call the ``refresh()`` function on",
          "4308:     the form class, so this is the perfect place to make the form generation",
          "4309:     dynamic. See docstring of ``create_connection_form_class`` for rationales.",
          "4310:     \"\"\"",
          "4312:     @staticmethod",
          "4313:     def refresh(obj=None):",
          "4314:         return create_connection_form_class().refresh(obj)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4372:         \"is_encrypted\",",
          "4373:         \"is_extra_encrypted\",",
          "4374:     ]",
          "4376:         \"conn_id\",",
          "4377:         \"conn_type\",",
          "4378:         \"description\",",
          "",
          "[Removed Lines]",
          "4375:     add_columns = [",
          "",
          "[Added Lines]",
          "4352:     # The real add_columns and edit_columns are dynamically generated at runtime",
          "4353:     # so we can delay calculating entries relying on providers to make webserver",
          "4354:     # start up faster.",
          "4355:     _add_columns = _edit_columns = [",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4383:         \"port\",",
          "4384:         \"extra\",",
          "4385:     ]",
          "4392:     add_template = \"airflow/conn_create.html\"",
          "4393:     edit_template = \"airflow/conn_edit.html\"",
          "",
          "[Removed Lines]",
          "4386:     edit_columns = add_columns.copy()",
          "4388:     # Initialized later by lazy_add_provider_discovered_options_to_connection_form",
          "4389:     extra_fields: list[str] = []",
          "4391:     add_form = edit_form = ConnectionForm",
          "",
          "[Added Lines]",
          "4367:     # We will generate the actual ConnectionForm when it is actually needed,",
          "4368:     # i.e. when the web form views are displayed and submitted.",
          "4369:     add_form = edit_form = ConnectionFormProxy",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4398:     base_order = (\"conn_id\", \"asc\")",
          "4402:     @action(\"muldelete\", \"Delete\", \"Are you sure you want to delete selected records?\", single=False)",
          "4403:     @auth.has_access(",
          "",
          "[Removed Lines]",
          "4400:     extra_field_name_mapping: dict[str, str] = {}",
          "",
          "[Added Lines]",
          "4379:     def _iter_extra_field_names(self) -> Iterator[tuple[str, str]]:",
          "4380:         \"\"\"Iterate through provider-backed connection fields.",
          "4382:         Note that this cannot be a property (including a cached property)",
          "4383:         because Flask-Appbuilder attempts to access all members on startup, and",
          "4384:         using a property would initialize the providers manager too eagerly.",
          "4385:         \"\"\"",
          "4386:         return ((k, v.field_name) for k, v in ProvidersManager().connection_form_widgets.items())",
          "4388:     @property",
          "4389:     def add_columns(self) -> list[str]:",
          "4390:         \"\"\"A list of columns to show in the Add form.",
          "4392:         This dynamically calculates additional fields from providers and add",
          "4393:         them to the backing list. This calculation is done exactly once (by",
          "4394:         checking we're referencing the class-level variable instead of the",
          "4395:         instance-level), and only after we enter the request context (to skip",
          "4396:         superfuluous checks done by Flask-Appbuilder on startup).",
          "4397:         \"\"\"",
          "4398:         if self._add_columns is type(self)._add_columns and has_request_context():",
          "4399:             self._add_columns = [*self._add_columns, *(k for k, _ in self._iter_extra_field_names())]",
          "4400:         return self._add_columns",
          "4402:     @property",
          "4403:     def edit_columns(self) -> list[str]:",
          "4404:         \"\"\"A list of columns to show in the Edit form.",
          "4406:         This dynamically calculates additional fields from providers and add",
          "4407:         them to the backing list. This calculation is done exactly once (by",
          "4408:         checking we're referencing the class-level variable instead of the",
          "4409:         instance-level), and only after we enter the request context (to skip",
          "4410:         superfuluous checks done by Flask-Appbuilder on startup).",
          "4411:         \"\"\"",
          "4412:         if self._edit_columns is type(self)._edit_columns and has_request_context():",
          "4413:             self._edit_columns = [*self._edit_columns, *(k for k, _ in self._iter_extra_field_names())]",
          "4414:         return self._edit_columns",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4512:                 del form.extra",
          "4513:         del extra_json",
          "4516:             if key in form.data and key.startswith(\"extra__\"):",
          "4519:                 conn_type_from_extra_field = key.split(\"__\")[1]",
          "4520:                 if conn_type_from_extra_field == conn_type:",
          "4521:                     value = form.data[key]",
          "4522:                     # Some extra fields have a default value of False so we need to explicitly check the",
          "4523:                     # value isn't an empty string.",
          "4524:                     if value != \"\":",
          "4526:                         extra[field_name] = value",
          "4528:         if extra.keys():",
          "",
          "[Removed Lines]",
          "4515:         for key in self.extra_fields:",
          "4517:                 # Check to ensure the extra field corresponds to the connection type of the form submission",
          "4518:                 # before adding to extra_field_name_mapping.",
          "4525:                         field_name = self.extra_field_name_mapping[key]",
          "",
          "[Added Lines]",
          "4529:         for key, field_name in self._iter_extra_field_names():",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4543:             logging.warning(\"extra field for %s is not a dictionary\", form.data.get(\"conn_id\", \"<unknown>\"))",
          "4544:             return",
          "4548:             value = extra_dictionary.get(field_name, \"\")",
          "4550:             if not value:",
          "",
          "[Removed Lines]",
          "4546:         for field_key in self.extra_fields:",
          "4547:             field_name = self.extra_field_name_mapping[field_key]",
          "",
          "[Added Lines]",
          "4557:         for field_key, field_name in self._iter_extra_field_names():",
          "",
          "---------------"
        ],
        "tests/test_utils/decorators.py||tests/test_utils/decorators.py": [
          "File: tests/test_utils/decorators.py -> tests/test_utils/decorators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:             \"init_appbuilder_links\",",
          "37:             \"init_appbuilder_views\",",
          "38:             \"init_plugins\",",
          "40:             \"init_error_handlers\",",
          "41:             \"init_api_connexion\",",
          "42:             \"init_api_internal\",",
          "",
          "[Removed Lines]",
          "39:             \"init_connection_form\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py": [
          "File: tests/www/views/test_views_connection.py -> tests/www/views/test_views_connection.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: from airflow.models import Connection",
          "29: from airflow.utils.session import create_session",
          "31: from airflow.www.views import ConnectionFormWidget, ConnectionModelView",
          "32: from tests.test_utils.www import _check_last_log, _check_last_log_masked_connection, check_content_in_response",
          "",
          "[Removed Lines]",
          "30: from airflow.www.extensions import init_views",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: def test_create_connection(admin_client, session):",
          "57:     resp = admin_client.post(\"/connection/add\", data=CONNECTION, follow_redirects=True)",
          "58:     check_content_in_response(\"Added Row\", resp)",
          "59:     _check_last_log(session, dag_id=None, event=\"connection.create\", execution_date=None)",
          "62: def test_action_logging_connection_masked_secrets(session, admin_client):",
          "64:     admin_client.post(\"/connection/add\", data=conn_with_extra(), follow_redirects=True)",
          "65:     _check_last_log_masked_connection(session, dag_id=None, event=\"connection.create\", execution_date=None)",
          "",
          "[Removed Lines]",
          "56:     init_views.init_connection_form()",
          "63:     init_views.init_connection_form()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:     mock_form.data = {\"conn_id\": \"test\", \"extra\": None, \"conn_type\": \"test\"}",
          "72:     cmv = ConnectionModelView()",
          "73:     cmv.prefill_form(form=mock_form, pk=1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     cmv._iter_extra_field_names = mock.Mock(return_value=())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:     \"\"\"",
          "95:     mock_form = mock.Mock()",
          "96:     mock_form.data = {\"conn_id\": \"test\", \"extra\": json.dumps(extras), \"conn_type\": \"test\"}",
          "103:     cmv.prefill_form(form=mock_form, pk=1)",
          "104:     assert mock_form.extra__test__my_param.data == expected",
          "",
          "[Removed Lines]",
          "97:     cmv = ConnectionModelView()",
          "98:     cmv.extra_fields = [\"extra__test__my_param\"]",
          "100:     # this is set by `lazy_add_provider_discovered_options_to_connection_form`",
          "101:     cmv.extra_field_name_mapping[\"extra__test__my_param\"] = \"my_param\"",
          "",
          "[Added Lines]",
          "96:     cmv = ConnectionModelView()",
          "97:     cmv._iter_extra_field_names = mock.Mock(return_value=[(\"extra__test__my_param\", \"my_param\")])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127:     }",
          "129:     cmv = ConnectionModelView()",
          "134:     cmv.process_form(form=mock_form, is_created=True)",
          "136:     assert json.loads(mock_form.extra.data) == {",
          "137:         field_name: \"custom_field_val\",",
          "138:         \"param1\": \"param1_val\",",
          "",
          "[Removed Lines]",
          "131:     # this is set by `lazy_add_provider_discovered_options_to_connection_form`",
          "132:     cmv.extra_field_name_mapping[\"extra__test__custom_field\"] = field_name",
          "133:     cmv.extra_fields = [\"extra__test__custom_field\"]  # Custom field",
          "",
          "[Added Lines]",
          "125:     cmv._iter_extra_field_names = mock.Mock(return_value=[(\"extra__test__custom_field\", field_name)])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "157:     }",
          "159:     cmv = ConnectionModelView()",
          "161:     cmv.process_form(form=mock_form, is_created=True)",
          "163:     assert json.loads(mock_form.extra.data) == {\"param2\": \"param2_val\"}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:     cmv._iter_extra_field_names = mock.Mock(return_value=())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "184:     }",
          "186:     cmv = ConnectionModelView()",
          "191:     cmv.process_form(form=mock_form, is_created=True)",
          "193:     assert json.loads(mock_form.extra.data) == {field_name: False}",
          "",
          "[Removed Lines]",
          "187:     cmv.extra_fields = [\"extra__test3__custom_field\", \"extra__test3__custom_bool_field\"]  # Custom fields",
          "189:     # this is set by `lazy_add_provider_discovered_options_to_connection_form`",
          "190:     cmv.extra_field_name_mapping[\"extra__test3__custom_field\"] = field_name",
          "",
          "[Added Lines]",
          "177:     cmv._iter_extra_field_names = mock.Mock(",
          "178:         return_value=[",
          "179:             (\"extra__test3__custom_field\", field_name),",
          "180:             (\"extra__test3__custom_bool_field\", False),",
          "181:         ],",
          "182:     )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "214:     }",
          "216:     cmv = ConnectionModelView()",
          "222:     cmv.process_form(form=mock_form, is_created=True)",
          "224:     if field_name == \"custom_field\":",
          "",
          "[Removed Lines]",
          "217:     cmv.extra_fields = [\"extra__test4__custom_field\"]  # Custom field",
          "219:     # this is set by `lazy_add_provider_discovered_options_to_connection_form`",
          "220:     cmv.extra_field_name_mapping[\"extra__test4__custom_field\"] = field_name",
          "",
          "[Added Lines]",
          "208:     cmv._iter_extra_field_names = mock.Mock(return_value=[(\"extra__test4__custom_field\", field_name)])",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "343:     Test that when an invalid json `extra` is passed in the form, it is removed and _not_",
          "344:     saved over the existing extras.",
          "345:     \"\"\"",
          "350:     conn_details = {\"conn_id\": \"test_conn\", \"conn_type\": \"http\"}",
          "351:     conn = Connection(**conn_details, extra='{\"foo\": \"bar\"}')",
          "352:     conn.id = 1",
          "",
          "[Removed Lines]",
          "346:     from airflow.www.views import lazy_add_provider_discovered_options_to_connection_form",
          "348:     lazy_add_provider_discovered_options_to_connection_form()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e7b1add435164112b80b9319ec0b2f2df94fa12",
      "candidate_info": {
        "commit_hash": "8e7b1add435164112b80b9319ec0b2f2df94fa12",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/8e7b1add435164112b80b9319ec0b2f2df94fa12",
        "files": [
          "airflow/dag_processing/manager.py",
          "airflow/jobs/scheduler_job_runner.py",
          "airflow/providers/google/cloud/hooks/bigquery.py",
          "airflow/providers/google/cloud/transfers/gcs_to_bigquery.py",
          "airflow/providers/weaviate/hooks/weaviate.py",
          "airflow/www/utils.py",
          "airflow/www/views.py"
        ],
        "message": "Remove unused loop variable from airflow package (#38308)",
        "before_after_code_files": [
          "airflow/dag_processing/manager.py||airflow/dag_processing/manager.py",
          "airflow/jobs/scheduler_job_runner.py||airflow/jobs/scheduler_job_runner.py",
          "airflow/providers/google/cloud/hooks/bigquery.py||airflow/providers/google/cloud/hooks/bigquery.py",
          "airflow/providers/google/cloud/transfers/gcs_to_bigquery.py||airflow/providers/google/cloud/transfers/gcs_to_bigquery.py",
          "airflow/providers/weaviate/hooks/weaviate.py||airflow/providers/weaviate/hooks/weaviate.py",
          "airflow/www/utils.py||airflow/www/utils.py",
          "airflow/www/views.py||airflow/www/views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/www/views.py||airflow/www/views.py"
          ],
          "candidate": [
            "airflow/www/views.py||airflow/www/views.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/dag_processing/manager.py||airflow/dag_processing/manager.py": [
          "File: airflow/dag_processing/manager.py -> airflow/dag_processing/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1177:         ]",
          "1179:         if self.log.isEnabledFor(logging.DEBUG):",
          "1181:                 self.log.debug(",
          "1182:                     \"File path %s is still being processed (started: %s)\",",
          "1183:                     processor.file_path,",
          "",
          "[Removed Lines]",
          "1180:             for file_path, processor in self._processors.items():",
          "",
          "[Added Lines]",
          "1180:             for processor in self._processors.values():",
          "",
          "---------------"
        ],
        "airflow/jobs/scheduler_job_runner.py||airflow/jobs/scheduler_job_runner.py": [
          "File: airflow/jobs/scheduler_job_runner.py -> airflow/jobs/scheduler_job_runner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     @classmethod",
          "111:     def from_concurrency_map(cls, mapping: dict[tuple[str, str, str], int]) -> ConcurrencyMap:",
          "112:         instance = cls(Counter(), Counter(), Counter(mapping))",
          "114:             instance.dag_active_tasks_map[d] += c",
          "115:             instance.task_concurrency_map[(d, t)] += c",
          "116:         return instance",
          "",
          "[Removed Lines]",
          "113:         for (d, r, t), c in mapping.items():",
          "",
          "[Added Lines]",
          "113:         for (d, _, t), c in mapping.items():",
          "",
          "---------------"
        ],
        "airflow/providers/google/cloud/hooks/bigquery.py||airflow/providers/google/cloud/hooks/bigquery.py": [
          "File: airflow/providers/google/cloud/hooks/bigquery.py -> airflow/providers/google/cloud/hooks/bigquery.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3185:         if k not in src_fmt_configs and k in valid_configs:",
          "3186:             src_fmt_configs[k] = v",
          "3189:         if k not in valid_configs:",
          "3190:             raise ValueError(f\"{k} is not a valid src_fmt_configs for type {source_format}.\")",
          "",
          "[Removed Lines]",
          "3188:     for k, v in src_fmt_configs.items():",
          "",
          "[Added Lines]",
          "3188:     for k in src_fmt_configs:",
          "",
          "---------------"
        ],
        "airflow/providers/google/cloud/transfers/gcs_to_bigquery.py||airflow/providers/google/cloud/transfers/gcs_to_bigquery.py": [
          "File: airflow/providers/google/cloud/transfers/gcs_to_bigquery.py -> airflow/providers/google/cloud/transfers/gcs_to_bigquery.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "714:             if k not in src_fmt_configs and k in valid_configs:",
          "715:                 src_fmt_configs[k] = v",
          "718:             if k not in valid_configs:",
          "719:                 raise ValueError(f\"{k} is not a valid src_fmt_configs for type {source_format}.\")",
          "",
          "[Removed Lines]",
          "717:         for k, v in src_fmt_configs.items():",
          "",
          "[Added Lines]",
          "717:         for k in src_fmt_configs:",
          "",
          "---------------"
        ],
        "airflow/providers/weaviate/hooks/weaviate.py||airflow/providers/weaviate/hooks/weaviate.py": [
          "File: airflow/providers/weaviate/hooks/weaviate.py -> airflow/providers/weaviate/hooks/weaviate.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:         client.batch.configure(**batch_config_params)",
          "460:         with client.batch as batch:",
          "461:             # Batch import all data",
          "463:                 for attempt in Retrying(",
          "464:                     stop=stop_after_attempt(retry_attempts_per_object),",
          "465:                     retry=(",
          "",
          "[Removed Lines]",
          "462:             for index, data_obj in enumerate(converted_data):",
          "",
          "[Added Lines]",
          "462:             for data_obj in converted_data:",
          "",
          "---------------"
        ],
        "airflow/www/utils.py||airflow/www/utils.py": [
          "File: airflow/www/utils.py -> airflow/www/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "790:     def __init__(self, datamodel):",
          "791:         super().__init__(datamodel)",
          "794:             if FilterIsNull not in filters:",
          "795:                 filters.append(FilterIsNull)",
          "796:             if FilterIsNotNull not in filters:",
          "",
          "[Removed Lines]",
          "793:         for method, filters in self.conversion_table:",
          "",
          "[Added Lines]",
          "793:         for _, filters in self.conversion_table:",
          "",
          "---------------"
        ],
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2147:             flash(f\"{ve}\", \"error\")",
          "2148:             form = DateTimeForm(data={\"execution_date\": execution_date})",
          "2149:             # Take over \"bad\" submitted fields for new form display",
          "2151:                 if k in run_conf:",
          "2152:                     form_fields[k][\"value\"] = run_conf[k]",
          "2153:             return self.render_template(",
          "",
          "[Removed Lines]",
          "2150:             for k, v in form_fields.items():",
          "",
          "[Added Lines]",
          "2150:             for k in form_fields:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4579:                 )",
          "4580:                 del form.extra",
          "4581:         del extra_json",
          "4583:             if key in form.data and key.startswith(\"extra__\"):",
          "4584:                 conn_type_from_extra_field = key.split(\"__\")[1]",
          "4585:                 if conn_type_from_extra_field == conn_type:",
          "",
          "[Removed Lines]",
          "4582:         for key, field_name, is_sensitive in self._iter_extra_field_names_and_sensitivity():",
          "",
          "[Added Lines]",
          "4582:         for key, field_name, _ in self._iter_extra_field_names_and_sensitivity():",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "668aace06f8e4366917878eafc20550d9129faea",
      "candidate_info": {
        "commit_hash": "668aace06f8e4366917878eafc20550d9129faea",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/668aace06f8e4366917878eafc20550d9129faea",
        "files": [
          "airflow/decorators/base.py",
          "airflow/executors/debug_executor.py",
          "airflow/plugins_manager.py",
          "airflow/providers_manager.py",
          "airflow/serialization/serialized_objects.py",
          "airflow/template/templater.py"
        ],
        "message": "Refactor unneeded 'continue' jumps around the repo (#33849)",
        "before_after_code_files": [
          "airflow/decorators/base.py||airflow/decorators/base.py",
          "airflow/executors/debug_executor.py||airflow/executors/debug_executor.py",
          "airflow/plugins_manager.py||airflow/plugins_manager.py",
          "airflow/providers_manager.py||airflow/providers_manager.py",
          "airflow/serialization/serialized_objects.py||airflow/serialization/serialized_objects.py",
          "airflow/template/templater.py||airflow/template/templater.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/providers_manager.py||airflow/providers_manager.py"
          ],
          "candidate": [
            "airflow/providers_manager.py||airflow/providers_manager.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/decorators/base.py||airflow/decorators/base.py": [
          "File: airflow/decorators/base.py -> airflow/decorators/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:         kwargs_left = kwargs.copy()",
          "113:         for arg_name in self._mappable_function_argument_names:",
          "114:             value = kwargs_left.pop(arg_name, NOTSET)",
          "119:         if len(kwargs_left) == 1:",
          "120:             raise TypeError(f\"{func}() got an unexpected keyword argument {next(iter(kwargs_left))!r}\")",
          "121:         elif kwargs_left:",
          "",
          "[Removed Lines]",
          "115:             if func != \"expand\" or value is NOTSET or is_mappable(value):",
          "116:                 continue",
          "117:             tname = type(value).__name__",
          "118:             raise ValueError(f\"expand() got an unexpected type {tname!r} for keyword argument {arg_name!r}\")",
          "",
          "[Added Lines]",
          "115:             if func == \"expand\" and value is not NOTSET and not is_mappable(value):",
          "116:                 tname = type(value).__name__",
          "117:                 raise ValueError(",
          "118:                     f\"expand() got an unexpected type {tname!r} for keyword argument {arg_name!r}\"",
          "119:                 )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:         prefix = re2.split(r\"__\\d+$\", tg_task_id)[0]",
          "158:         for task_id in dag.task_ids:",
          "159:             match = re2.match(rf\"^{prefix}__(\\d+)$\", task_id)",
          "163:         yield 0  # Default if there's no matching task ID.",
          "165:     core = re2.split(r\"__\\d+$\", task_id)[0]",
          "",
          "[Removed Lines]",
          "160:             if match is None:",
          "161:                 continue",
          "162:             yield int(match.group(1))",
          "",
          "[Added Lines]",
          "161:             if match:",
          "162:                 yield int(match.group(1))",
          "",
          "---------------"
        ],
        "airflow/executors/debug_executor.py||airflow/executors/debug_executor.py": [
          "File: airflow/executors/debug_executor.py -> airflow/executors/debug_executor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:                 self.log.info(\"Setting %s to %s\", ti.key, TaskInstanceState.UPSTREAM_FAILED)",
          "72:                 ti.set_state(TaskInstanceState.UPSTREAM_FAILED)",
          "73:                 self.change_state(ti.key, TaskInstanceState.UPSTREAM_FAILED)",
          "77:                 self.log.info(\"Executor is terminated! Stopping %s to %s\", ti.key, TaskInstanceState.FAILED)",
          "78:                 ti.set_state(TaskInstanceState.FAILED)",
          "79:                 self.change_state(ti.key, TaskInstanceState.FAILED)",
          "84:     def _run_task(self, ti: TaskInstance) -> bool:",
          "85:         self.log.debug(\"Executing task: %s\", ti)",
          "",
          "[Removed Lines]",
          "74:                 continue",
          "76:             if self._terminated.is_set():",
          "80:                 continue",
          "82:             task_succeeded = self._run_task(ti)",
          "",
          "[Added Lines]",
          "74:             elif self._terminated.is_set():",
          "78:             else:",
          "79:                 task_succeeded = self._run_task(ti)",
          "",
          "---------------"
        ],
        "airflow/plugins_manager.py||airflow/plugins_manager.py": [
          "File: airflow/plugins_manager.py -> airflow/plugins_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import os",
          "27: import sys",
          "28: import types",
          "29: from typing import TYPE_CHECKING, Any, Iterable",
          "31: from airflow import settings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: from pathlib import Path",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:     log.debug(\"Loading plugins from directory: %s\", settings.PLUGINS_FOLDER)",
          "253:     for file_path in find_path_from_directory(settings.PLUGINS_FOLDER, \".airflowignore\"):",
          "258:             continue",
          "260:         try:",
          "261:             loader = importlib.machinery.SourceFileLoader(mod_name, file_path)",
          "",
          "[Removed Lines]",
          "254:         if not os.path.isfile(file_path):",
          "255:             continue",
          "256:         mod_name, file_ext = os.path.splitext(os.path.split(file_path)[-1])",
          "257:         if file_ext != \".py\":",
          "",
          "[Added Lines]",
          "255:         path = Path(file_path)",
          "256:         if not path.is_file() or path.suffix != \".py\":",
          "258:         mod_name = path.stem",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "286:         try:",
          "287:             plugin_instance = import_string(plugin.plugin_class)",
          "289:                 log.warning(\"Plugin %s is not a valid plugin\", plugin.name)",
          "292:         except ImportError:",
          "293:             log.exception(\"Failed to load plugin %s from class name %s\", plugin.name, plugin.plugin_class)",
          "297: def make_module(name: str, objects: list[Any]):",
          "",
          "[Removed Lines]",
          "288:             if not is_valid_plugin(plugin_instance):",
          "290:                 continue",
          "291:             register_plugin(plugin_instance)",
          "294:             continue",
          "",
          "[Added Lines]",
          "288:             if is_valid_plugin(plugin_instance):",
          "289:                 register_plugin(plugin_instance)",
          "290:             else:",
          "",
          "---------------"
        ],
        "airflow/providers_manager.py||airflow/providers_manager.py": [
          "File: airflow/providers_manager.py -> airflow/providers_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:                 # The same path can appear in the __path__ twice, under non-normalized paths (ie.",
          "635:                 # /path/to/repo/airflow/providers and /path/to/repo/./airflow/providers)",
          "636:                 path = os.path.realpath(path)",
          "641:             except Exception as e:",
          "642:                 log.warning(f\"Error when loading 'provider.yaml' files from {path} airflow sources: {e}\")",
          "",
          "[Removed Lines]",
          "637:                 if path in seen:",
          "638:                     continue",
          "639:                 seen.add(path)",
          "640:                 self._add_provider_info_from_local_source_files_on_path(path)",
          "",
          "[Added Lines]",
          "637:                 if path not in seen:",
          "638:                     seen.add(path)",
          "639:                     self._add_provider_info_from_local_source_files_on_path(path)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1004:                     hook_class.__name__,",
          "1005:                 )",
          "1006:                 # In case of inherited hooks this might be happening several times",
          "1017:     def _add_customized_fields(self, package_name: str, hook_class: type, customized_fields: dict):",
          "1018:         try:",
          "",
          "[Removed Lines]",
          "1007:                 continue",
          "1008:             self._connection_form_widgets[prefixed_field_name] = ConnectionFormWidgetInfo(",
          "1009:                 hook_class.__name__,",
          "1010:                 package_name,",
          "1011:                 field,",
          "1012:                 field_identifier,",
          "1013:                 hasattr(field.field_class.widget, \"input_type\")",
          "1014:                 and field.field_class.widget.input_type == \"password\",",
          "1015:             )",
          "",
          "[Added Lines]",
          "1006:             else:",
          "1007:                 self._connection_form_widgets[prefixed_field_name] = ConnectionFormWidgetInfo(",
          "1008:                     hook_class.__name__,",
          "1009:                     package_name,",
          "1010:                     field,",
          "1011:                     field_identifier,",
          "1012:                     hasattr(field.field_class.widget, \"input_type\")",
          "1013:                     and field.field_class.widget.input_type == \"password\",",
          "1014:                 )",
          "",
          "---------------"
        ],
        "airflow/serialization/serialized_objects.py||airflow/serialization/serialized_objects.py": [
          "File: airflow/serialization/serialized_objects.py -> airflow/serialization/serialized_objects.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "660:             return False",
          "662:         for attr in attrs:",
          "670:                 kwargs[attr] = val",
          "671:         return class_(**kwargs)",
          "",
          "[Removed Lines]",
          "663:             if attr not in param_dict:",
          "664:                 continue",
          "665:             val = param_dict[attr]",
          "666:             if is_serialized(val):",
          "667:                 deserialized_val = cls.deserialize(param_dict[attr])",
          "668:                 kwargs[attr] = deserialized_val",
          "669:             else:",
          "",
          "[Added Lines]",
          "663:             if attr in param_dict:",
          "664:                 val = param_dict[attr]",
          "665:                 if is_serialized(val):",
          "666:                     val = cls.deserialize(val)",
          "",
          "---------------"
        ],
        "airflow/template/templater.py||airflow/template/templater.py": [
          "File: airflow/template/templater.py -> airflow/template/templater.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         if self.template_ext:",
          "69:             for field in self.template_fields:",
          "70:                 content = getattr(self, field, None)",
          "74:                     env = self.get_template_env()",
          "75:                     try:",
          "76:                         setattr(self, field, env.loader.get_source(env, content)[0])  # type: ignore",
          "",
          "[Removed Lines]",
          "71:                 if content is None:",
          "72:                     continue",
          "73:                 elif isinstance(content, str) and content.endswith(tuple(self.template_ext)):",
          "",
          "[Added Lines]",
          "71:                 if isinstance(content, str) and content.endswith(tuple(self.template_ext)):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a856ed4fb04352798664e79b9ff32b9f375b1d75",
      "candidate_info": {
        "commit_hash": "a856ed4fb04352798664e79b9ff32b9f375b1d75",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/a856ed4fb04352798664e79b9ff32b9f375b1d75",
        "files": [
          "airflow/www/views.py"
        ],
        "message": "extra being passed to SQLalchemy (#40391)\n\nThe edit prefills an empty extra field (None)\nwith a empty dictionary, which is decoded\nto an extra field being passed in the con url.",
        "before_after_code_files": [
          "airflow/www/views.py||airflow/www/views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/www/views.py||airflow/www/views.py"
          ],
          "candidate": [
            "airflow/www/views.py||airflow/www/views.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4408:             if is_sensitive and field_name in extra_dictionary:",
          "4409:                 extra_dictionary[field_name] = SENSITIVE_FIELD_PLACEHOLDER",
          "4410:         # form.data is a property that builds the dictionary from fields so we have to modify the fields",
          "4414: class PluginView(AirflowBaseView):",
          "",
          "[Removed Lines]",
          "4411:         form.extra.data = json.dumps(extra_dictionary)",
          "",
          "[Added Lines]",
          "4411:         if extra_dictionary:",
          "4412:             form.extra.data = json.dumps(extra_dictionary)",
          "4413:         else:",
          "4414:             form.extra.data = None",
          "",
          "---------------"
        ]
      }
    }
  ]
}