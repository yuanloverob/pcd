{
  "cve_id": "CVE-2021-41104",
  "cve_desc": "ESPHome is a system to control the ESP8266/ESP32. Anyone with web_server enabled and HTTP basic auth configured on version 2021.9.1 or older is vulnerable to an issue in which `web_server` allows over-the-air (OTA) updates without checking user defined basic auth username & password. This issue is patched in version 2021.9.2. As a workaround, one may disable or remove `web_server`.",
  "repo": "esphome/esphome",
  "patch_hash": "be965a60eba6bb769e2a5afdbc8eed132f077a59",
  "patch_info": {
    "commit_hash": "be965a60eba6bb769e2a5afdbc8eed132f077a59",
    "repo": "esphome/esphome",
    "commit_url": "https://github.com/esphome/esphome/commit/be965a60eba6bb769e2a5afdbc8eed132f077a59",
    "files": [
      "esphome/components/web_server/__init__.py",
      "esphome/components/web_server/web_server.cpp",
      "esphome/components/web_server/web_server.h",
      "esphome/components/web_server_base/web_server_base.cpp",
      "esphome/components/web_server_base/web_server_base.h"
    ],
    "message": "Merge pull request from GHSA-48mj-p7x2-5jfm\n\n* Move web_server auth to web_server_base\n\n* Fix\n\n* Fix\n\n* Add middleware system",
    "before_after_code_files": [
      "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py",
      "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp",
      "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h",
      "esphome/components/web_server_base/web_server_base.cpp||esphome/components/web_server_base/web_server_base.cpp",
      "esphome/components/web_server_base/web_server_base.h||esphome/components/web_server_base/web_server_base.h"
    ]
  },
  "patch_diff": {
    "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py": [
      "File: esphome/components/web_server/__init__.py -> esphome/components/web_server/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:         cv.Optional(CONF_JS_INCLUDE): cv.file_,",
      "35:         cv.Optional(CONF_AUTH): cv.Schema(",
      "36:             {",
      "39:             }",
      "40:         ),",
      "41:         cv.GenerateID(CONF_WEB_SERVER_BASE_ID): cv.use_id(",
      "",
      "[Removed Lines]",
      "37:                 cv.Required(CONF_USERNAME): cv.string_strict,",
      "38:                 cv.Required(CONF_PASSWORD): cv.string_strict,",
      "",
      "[Added Lines]",
      "37:                 cv.Required(CONF_USERNAME): cv.All(cv.string_strict, cv.Length(min=1)),",
      "38:                 cv.Required(CONF_PASSWORD): cv.All(cv.string_strict, cv.Length(min=1)),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57:     cg.add(var.set_css_url(config[CONF_CSS_URL]))",
      "58:     cg.add(var.set_js_url(config[CONF_JS_URL]))",
      "59:     if CONF_AUTH in config:",
      "62:     if CONF_CSS_INCLUDE in config:",
      "63:         cg.add_define(\"WEBSERVER_CSS_INCLUDE\")",
      "64:         path = CORE.relative_config_path(config[CONF_CSS_INCLUDE])",
      "",
      "[Removed Lines]",
      "60:         cg.add(var.set_username(config[CONF_AUTH][CONF_USERNAME]))",
      "61:         cg.add(var.set_password(config[CONF_AUTH][CONF_PASSWORD]))",
      "",
      "[Added Lines]",
      "60:         cg.add(paren.set_auth_username(config[CONF_AUTH][CONF_USERNAME]))",
      "61:         cg.add(paren.set_auth_password(config[CONF_AUTH][CONF_PASSWORD]))",
      "",
      "---------------"
    ],
    "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp": [
      "File: esphome/components/web_server/web_server.cpp -> esphome/components/web_server/web_server.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "158: void WebServer::dump_config() {",
      "159:   ESP_LOGCONFIG(TAG, \"Web Server:\");",
      "160:   ESP_LOGCONFIG(TAG, \"  Address: %s:%u\", network::get_use_address().c_str(), this->base_->get_port());",
      "164: }",
      "165: float WebServer::get_setup_priority() const { return setup_priority::WIFI - 1.0f; }",
      "",
      "[Removed Lines]",
      "161:   if (this->using_auth()) {",
      "162:     ESP_LOGCONFIG(TAG, \"  Basic authentication enabled\");",
      "163:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "764:   return false;",
      "765: }",
      "766: void WebServer::handleRequest(AsyncWebServerRequest *request) {",
      "771:   if (request->url() == \"/\") {",
      "772:     this->handle_index_request(request);",
      "773:     return;",
      "",
      "[Removed Lines]",
      "767:   if (this->using_auth() && !request->authenticate(this->username_, this->password_)) {",
      "768:     return request->requestAuthentication();",
      "769:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h": [
      "File: esphome/components/web_server/web_server.h -> esphome/components/web_server/web_server.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  public:",
      "33:   WebServer(web_server_base::WebServerBase *base) : base_(base) {}",
      "",
      "[Removed Lines]",
      "35:   void set_username(const char *username) { username_ = username; }",
      "37:   void set_password(const char *password) { password_ = password; }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:   void handle_js_request(AsyncWebServerRequest *request);",
      "86: #endif",
      "90: #ifdef USE_SENSOR",
      "91:   void on_sensor_update(sensor::Sensor *obj, float state) override;",
      "",
      "[Removed Lines]",
      "88:   bool using_auth() { return username_ != nullptr && password_ != nullptr; }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "184:  protected:",
      "185:   web_server_base::WebServerBase *base_;",
      "186:   AsyncEventSource events_{\"/events\"};",
      "189:   const char *css_url_{nullptr};",
      "190:   const char *css_include_{nullptr};",
      "191:   const char *js_url_{nullptr};",
      "",
      "[Removed Lines]",
      "187:   const char *username_{nullptr};",
      "188:   const char *password_{nullptr};",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "esphome/components/web_server_base/web_server_base.cpp||esphome/components/web_server_base/web_server_base.cpp": [
      "File: esphome/components/web_server_base/web_server_base.cpp -> esphome/components/web_server_base/web_server_base.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: static const char *const TAG = \"web_server_base\";",
      "20: void report_ota_error() {",
      "21:   StreamString ss;",
      "22:   Update.printError(ss);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: void WebServerBase::add_handler(AsyncWebHandler *handler) {",
      "23:   if (!credentials_.username.empty()) {",
      "24:     handler = new internal::AuthMiddlewareHandler(handler, &credentials_);",
      "25:   }",
      "26:   this->handlers_.push_back(handler);",
      "27:   if (this->server_ != nullptr)",
      "28:     this->server_->addHandler(handler);",
      "29: }",
      "",
      "---------------"
    ],
    "esphome/components/web_server_base/web_server_base.h||esphome/components/web_server_base/web_server_base.h": [
      "File: esphome/components/web_server_base/web_server_base.h -> esphome/components/web_server_base/web_server_base.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: namespace esphome {",
      "11: namespace web_server_base {",
      "13: class WebServerBase : public Component {",
      "14:  public:",
      "15:   void init() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: namespace internal {",
      "15: class MiddlewareHandler : public AsyncWebHandler {",
      "16:  public:",
      "17:   MiddlewareHandler(AsyncWebHandler *next) : next_(next) {}",
      "19:   bool canHandle(AsyncWebServerRequest *request) override { return next_->canHandle(request); }",
      "20:   void handleRequest(AsyncWebServerRequest *request) override { next_->handleRequest(request); }",
      "21:   void handleUpload(AsyncWebServerRequest *request, const String &filename, size_t index, uint8_t *data, size_t len,",
      "22:                     bool final) override {",
      "23:     next_->handleUpload(request, filename, index, data, len, final);",
      "24:   }",
      "25:   void handleBody(AsyncWebServerRequest *request, uint8_t *data, size_t len, size_t index, size_t total) override {",
      "26:     next_->handleBody(request, data, len, index, total);",
      "27:   }",
      "28:   bool isRequestHandlerTrivial() override { return next_->isRequestHandlerTrivial(); }",
      "30:  protected:",
      "31:   AsyncWebHandler *next_;",
      "32: };",
      "34: struct Credentials {",
      "35:   std::string username;",
      "36:   std::string password;",
      "37: };",
      "39: class AuthMiddlewareHandler : public MiddlewareHandler {",
      "40:  public:",
      "41:   AuthMiddlewareHandler(AsyncWebHandler *next, Credentials *credentials)",
      "42:       : MiddlewareHandler(next), credentials_(credentials) {}",
      "44:   bool check_auth(AsyncWebServerRequest *request) {",
      "45:     bool success = request->authenticate(credentials_->username.c_str(), credentials_->password.c_str());",
      "46:     if (!success) {",
      "47:       request->requestAuthentication();",
      "48:     }",
      "49:     return success;",
      "50:   }",
      "52:   void handleRequest(AsyncWebServerRequest *request) override {",
      "53:     if (!check_auth(request))",
      "54:       return;",
      "55:     MiddlewareHandler::handleRequest(request);",
      "56:   }",
      "57:   void handleUpload(AsyncWebServerRequest *request, const String &filename, size_t index, uint8_t *data, size_t len,",
      "58:                     bool final) override {",
      "59:     if (!check_auth(request))",
      "60:       return;",
      "61:     MiddlewareHandler::handleUpload(request, filename, index, data, len, final);",
      "62:   }",
      "63:   void handleBody(AsyncWebServerRequest *request, uint8_t *data, size_t len, size_t index, size_t total) override {",
      "64:     if (!check_auth(request))",
      "65:       return;",
      "66:     MiddlewareHandler::handleBody(request, data, len, index, total);",
      "67:   }",
      "69:  protected:",
      "70:   Credentials *credentials_;",
      "71: };",
      "73: }  // namespace internal",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "34:   std::shared_ptr<AsyncWebServer> get_server() const { return server_; }",
      "35:   float get_setup_priority() const override;",
      "45:   void add_ota_handler();",
      "",
      "[Removed Lines]",
      "37:   void add_handler(AsyncWebHandler *handler) {",
      "40:     this->handlers_.push_back(handler);",
      "41:     if (this->server_ != nullptr)",
      "42:       this->server_->addHandler(handler);",
      "43:   }",
      "",
      "[Added Lines]",
      "99:   void set_auth_username(std::string auth_username) { credentials_.username = auth_username; }",
      "100:   void set_auth_password(std::string auth_password) { credentials_.password = auth_password; }",
      "102:   void add_handler(AsyncWebHandler *handler);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "54:   uint16_t port_{80};",
      "55:   std::shared_ptr<AsyncWebServer> server_{nullptr};",
      "56:   std::vector<AsyncWebHandler *> handlers_;",
      "57: };",
      "59: class OTARequestHandler : public AsyncWebHandler {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:   internal::Credentials credentials_;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a779592414092163f5e29299567102f9072f6475",
      "candidate_info": {
        "commit_hash": "a779592414092163f5e29299567102f9072f6475",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/a779592414092163f5e29299567102f9072f6475",
        "files": [
          "esphome/const.py"
        ],
        "message": "Bump version to 2021.10.0b1",
        "before_after_code_files": [
          "esphome/const.py||esphome/const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/esphome/esphome/pull/2504"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "esphome/const.py||esphome/const.py": [
          "File: esphome/const.py -> esphome/const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Constants used by esphome.\"\"\"",
          "5: ALLOWED_NAME_CHARS = \"abcdefghijklmnopqrstuvwxyz0123456789-_\"",
          "",
          "[Removed Lines]",
          "3: __version__ = \"2021.10.0-dev\"",
          "",
          "[Added Lines]",
          "3: __version__ = \"2021.10.0b1\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aed140d80208032ecb6d3d3358b6c48b7dee95be",
      "candidate_info": {
        "commit_hash": "aed140d80208032ecb6d3d3358b6c48b7dee95be",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/aed140d80208032ecb6d3d3358b6c48b7dee95be",
        "files": [
          "docker/platformio_install_deps.py"
        ],
        "message": "Fix typo",
        "before_after_code_files": [
          "docker/platformio_install_deps.py||docker/platformio_install_deps.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/esphome/esphome/pull/2504"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "docker/platformio_install_deps.py||docker/platformio_install_deps.py": [
          "File: docker/platformio_install_deps.py -> docker/platformio_install_deps.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: config.read(sys.argv[1])",
          "11: libs = [x for x in config['common']['lib_deps'].splitlines() if len(x) != 0]",
          "",
          "[Removed Lines]",
          "13: subprocess.check_call(['platformio', 'lib', '-g', 'uninstall', *libs])",
          "",
          "[Added Lines]",
          "13: subprocess.check_call(['platformio', 'lib', '-g', 'install', *libs])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c69b88bb554694c4059057717c10ee45f46580df",
      "candidate_info": {
        "commit_hash": "c69b88bb554694c4059057717c10ee45f46580df",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/c69b88bb554694c4059057717c10ee45f46580df",
        "files": [
          "docker/platformio_install_deps.py"
        ],
        "message": "Fix platformio.ini parser used by container build",
        "before_after_code_files": [
          "docker/platformio_install_deps.py||docker/platformio_install_deps.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/esphome/esphome/pull/2504"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "docker/platformio_install_deps.py||docker/platformio_install_deps.py": [
          "File: docker/platformio_install_deps.py -> docker/platformio_install_deps.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # all platformio libraries in the global storage",
          "5: import configparser",
          "7: import subprocess",
          "8: import sys",
          "11: config.read(sys.argv[1])",
          "",
          "[Removed Lines]",
          "6: import re",
          "10: config = configparser.ConfigParser()",
          "12: libs = []",
          "13: for line in config['common']['lib_deps'].splitlines():",
          "14:     # Format: '1655@1.0.2  ; TinyGPSPlus (has name conflict)' (includes comment)",
          "15:     m = re.search(r'([a-zA-Z0-9-_/]+@[0-9\\.]+)', line)",
          "16:     if m is None:",
          "17:         continue",
          "18:     libs.append(m.group(1))",
          "20: subprocess.check_call(['platformio', 'lib', '-g', 'install', *libs])",
          "",
          "[Added Lines]",
          "9: config = configparser.ConfigParser(inline_comment_prefixes=(';', ))",
          "11: libs = [x for x in config['common']['lib_deps'].splitlines() if len(x) != 0]",
          "13: subprocess.check_call(['platformio', 'lib', '-g', 'uninstall', *libs])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bad161a5c1d87d335ab88b7ad3ddc0297f2520a6",
      "candidate_info": {
        "commit_hash": "bad161a5c1d87d335ab88b7ad3ddc0297f2520a6",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/bad161a5c1d87d335ab88b7ad3ddc0297f2520a6",
        "files": [
          "esphome/const.py"
        ],
        "message": "Bump version to 2021.10.0-dev",
        "before_after_code_files": [
          "esphome/const.py||esphome/const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/esphome/esphome/pull/2504"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "esphome/const.py||esphome/const.py": [
          "File: esphome/const.py -> esphome/const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Constants used by esphome.\"\"\"",
          "5: ESP_PLATFORM_ESP32 = \"ESP32\"",
          "6: ESP_PLATFORM_ESP8266 = \"ESP8266\"",
          "",
          "[Removed Lines]",
          "3: __version__ = \"2021.9.0-dev\"",
          "",
          "[Added Lines]",
          "3: __version__ = \"2021.10.0-dev\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc5947467f742a05c0b85823cf5ef29ba2bba59b",
      "candidate_info": {
        "commit_hash": "cc5947467f742a05c0b85823cf5ef29ba2bba59b",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/cc5947467f742a05c0b85823cf5ef29ba2bba59b",
        "files": [
          "esphome/components/web_server/__init__.py"
        ],
        "message": "Require arduino in webserver for better validation (#2941)",
        "before_after_code_files": [
          "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py"
          ],
          "candidate": [
            "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py": [
          "File: esphome/components/web_server/__init__.py -> esphome/components/web_server/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: web_server_ns = cg.esphome_ns.namespace(\"web_server\")",
          "23: WebServer = web_server_ns.class_(\"WebServer\", cg.Component, cg.Controller)",
          "52: @coroutine_with_priority(40.0)",
          "",
          "[Removed Lines]",
          "25: CONFIG_SCHEMA = cv.Schema(",
          "26:     {",
          "27:         cv.GenerateID(): cv.declare_id(WebServer),",
          "28:         cv.Optional(CONF_PORT, default=80): cv.port,",
          "29:         cv.Optional(",
          "30:             CONF_CSS_URL, default=\"https://esphome.io/_static/webserver-v1.min.css\"",
          "31:         ): cv.string,",
          "32:         cv.Optional(CONF_CSS_INCLUDE): cv.file_,",
          "33:         cv.Optional(",
          "34:             CONF_JS_URL, default=\"https://esphome.io/_static/webserver-v1.min.js\"",
          "35:         ): cv.string,",
          "36:         cv.Optional(CONF_JS_INCLUDE): cv.file_,",
          "37:         cv.Optional(CONF_AUTH): cv.Schema(",
          "38:             {",
          "39:                 cv.Required(CONF_USERNAME): cv.All(cv.string_strict, cv.Length(min=1)),",
          "40:                 cv.Required(CONF_PASSWORD): cv.All(cv.string_strict, cv.Length(min=1)),",
          "41:             }",
          "42:         ),",
          "43:         cv.GenerateID(CONF_WEB_SERVER_BASE_ID): cv.use_id(",
          "44:             web_server_base.WebServerBase",
          "45:         ),",
          "46:         cv.Optional(CONF_INCLUDE_INTERNAL, default=False): cv.boolean,",
          "47:         cv.Optional(CONF_OTA, default=True): cv.boolean,",
          "48:     }",
          "49: ).extend(cv.COMPONENT_SCHEMA)",
          "",
          "[Added Lines]",
          "25: CONFIG_SCHEMA = cv.All(",
          "26:     cv.Schema(",
          "27:         {",
          "28:             cv.GenerateID(): cv.declare_id(WebServer),",
          "29:             cv.Optional(CONF_PORT, default=80): cv.port,",
          "30:             cv.Optional(",
          "31:                 CONF_CSS_URL, default=\"https://esphome.io/_static/webserver-v1.min.css\"",
          "32:             ): cv.string,",
          "33:             cv.Optional(CONF_CSS_INCLUDE): cv.file_,",
          "34:             cv.Optional(",
          "35:                 CONF_JS_URL, default=\"https://esphome.io/_static/webserver-v1.min.js\"",
          "36:             ): cv.string,",
          "37:             cv.Optional(CONF_JS_INCLUDE): cv.file_,",
          "38:             cv.Optional(CONF_AUTH): cv.Schema(",
          "39:                 {",
          "40:                     cv.Required(CONF_USERNAME): cv.All(",
          "41:                         cv.string_strict, cv.Length(min=1)",
          "42:                     ),",
          "43:                     cv.Required(CONF_PASSWORD): cv.All(",
          "44:                         cv.string_strict, cv.Length(min=1)",
          "45:                     ),",
          "46:                 }",
          "47:             ),",
          "48:             cv.GenerateID(CONF_WEB_SERVER_BASE_ID): cv.use_id(",
          "49:                 web_server_base.WebServerBase",
          "50:             ),",
          "51:             cv.Optional(CONF_INCLUDE_INTERNAL, default=False): cv.boolean,",
          "52:             cv.Optional(CONF_OTA, default=True): cv.boolean,",
          "53:         },",
          "54:     ).extend(cv.COMPONENT_SCHEMA),",
          "55:     cv.only_with_arduino,",
          "56: )",
          "",
          "---------------"
        ]
      }
    }
  ]
}