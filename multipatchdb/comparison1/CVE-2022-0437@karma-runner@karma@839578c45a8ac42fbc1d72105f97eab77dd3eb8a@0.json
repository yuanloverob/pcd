{
  "cve_id": "CVE-2022-0437",
  "cve_desc": "Cross-site Scripting (XSS) - DOM in NPM karma prior to 6.3.14.",
  "repo": "karma-runner/karma",
  "patch_hash": "839578c45a8ac42fbc1d72105f97eab77dd3eb8a",
  "patch_info": {
    "commit_hash": "839578c45a8ac42fbc1d72105f97eab77dd3eb8a",
    "repo": "karma-runner/karma",
    "commit_url": "https://github.com/karma-runner/karma/commit/839578c45a8ac42fbc1d72105f97eab77dd3eb8a",
    "files": [
      "client/karma.js",
      "static/karma.js"
    ],
    "message": "fix(security): remove XSS vulnerability in `returnUrl` query param\n\nThe `returnUrl` query parameter can be used to execute malicious code. For\nexample, visiting\n`http://localhost:9876/?return_url=javascript:alert(document.domain)` will\ndisplay an alert.",
    "before_after_code_files": [
      "client/karma.js||client/karma.js",
      "static/karma.js||static/karma.js"
    ]
  },
  "patch_diff": {
    "client/karma.js||client/karma.js": [
      "File: client/karma.js -> client/karma.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:       self.updater.updateTestStatus('complete')",
      "240:     }",
      "241:     if (returnUrl) {",
      "242:       location.href = returnUrl",
      "243:     }",
      "244:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "242:       if (!/^https?:\\/\\//.test(returnUrl)) {",
      "243:         throw new Error(`Security: Navigation to ${returnUrl} was blocked to prevent malicious exploits.`)",
      "244:       }",
      "",
      "---------------"
    ],
    "static/karma.js||static/karma.js": [
      "File: static/karma.js -> static/karma.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "249:       self.updater.updateTestStatus('complete')",
      "250:     }",
      "251:     if (returnUrl) {",
      "252:       location.href = returnUrl",
      "253:     }",
      "254:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "252:       if (!/^https?:\\/\\//.test(returnUrl)) {",
      "253:         throw new Error(`Security: Navigation to ${returnUrl} was blocked to prevent malicious exploits.`)",
      "254:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ff7edbb2ffbcdd69761bece86b7dc1ef0740508d",
      "candidate_info": {
        "commit_hash": "ff7edbb2ffbcdd69761bece86b7dc1ef0740508d",
        "repo": "karma-runner/karma",
        "commit_url": "https://github.com/karma-runner/karma/commit/ff7edbb2ffbcdd69761bece86b7dc1ef0740508d",
        "files": [
          "client/karma.js",
          "docs/config/01-configuration-file.md",
          "lib/config.js",
          "static/karma.js",
          "test/client/karma.spec.js"
        ],
        "message": "fix(security): mitigate the \"Open Redirect Vulnerability\"",
        "before_after_code_files": [
          "client/karma.js||client/karma.js",
          "lib/config.js||lib/config.js",
          "static/karma.js||static/karma.js",
          "test/client/karma.spec.js||test/client/karma.spec.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "client/karma.js||client/karma.js",
            "static/karma.js||static/karma.js"
          ],
          "candidate": [
            "client/karma.js||client/karma.js",
            "static/karma.js||static/karma.js"
          ]
        }
      },
      "candidate_diff": {
        "client/karma.js||client/karma.js": [
          "File: client/karma.js -> client/karma.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:       self.updater.updateTestStatus('complete')",
          "240:     }",
          "241:     if (returnUrl) {",
          "243:         throw new Error(",
          "244:           'Security: Navigation to '.concat(",
          "245:             returnUrl,",
          "",
          "[Removed Lines]",
          "242:       if (!/^https?:\\/\\//.test(returnUrl)) {",
          "",
          "[Added Lines]",
          "242:       var isReturnUrlAllowed = false",
          "243:       for (var i = 0; i < this.config.allowedReturnUrlPatterns.length; i++) {",
          "244:         var allowedReturnUrlPattern = new RegExp(this.config.allowedReturnUrlPatterns[i])",
          "245:         if (allowedReturnUrlPattern.test(returnUrl)) {",
          "246:           isReturnUrlAllowed = true",
          "247:           break",
          "248:         }",
          "249:       }",
          "250:       if (!isReturnUrlAllowed) {",
          "",
          "---------------"
        ],
        "lib/config.js||lib/config.js": [
          "File: lib/config.js -> lib/config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: try {",
          "18:   require('coffeescript').register()",
          "19:   COFFEE_SCRIPT_AVAILABLE = true",
          "24: try {",
          "25:   require('LiveScript')",
          "26:   LIVE_SCRIPT_AVAILABLE = true",
          "29: try {",
          "30:   require('ts-node')",
          "31:   TYPE_SCRIPT_AVAILABLE = true",
          "34: class Pattern {",
          "35:   constructor (pattern, served, included, watched, nocache, type, isBinary) {",
          "",
          "[Removed Lines]",
          "20: } catch (e) {}",
          "27: } catch (e) {}",
          "32: } catch (e) {}",
          "",
          "[Added Lines]",
          "20: } catch {}",
          "27: } catch {}",
          "32: } catch {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324:       useIframe: true,",
          "325:       runInParent: false,",
          "326:       captureConsole: true,",
          "328:     }",
          "329:     this.browserDisconnectTimeout = 2000",
          "330:     this.browserDisconnectTolerance = 0",
          "",
          "[Removed Lines]",
          "327:       clearContext: true",
          "",
          "[Added Lines]",
          "327:       clearContext: true,",
          "328:       allowedReturnUrlPatterns: ['^https?://']",
          "",
          "---------------"
        ],
        "static/karma.js||static/karma.js": [
          "File: static/karma.js -> static/karma.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:       self.updater.updateTestStatus('complete')",
          "250:     }",
          "251:     if (returnUrl) {",
          "253:         throw new Error(",
          "254:           'Security: Navigation to '.concat(",
          "255:             returnUrl,",
          "",
          "[Removed Lines]",
          "252:       if (!/^https?:\\/\\//.test(returnUrl)) {",
          "",
          "[Added Lines]",
          "252:       var isReturnUrlAllowed = false",
          "253:       for (var i = 0; i < this.config.allowedReturnUrlPatterns.length; i++) {",
          "254:         var allowedReturnUrlPattern = new RegExp(this.config.allowedReturnUrlPatterns[i])",
          "255:         if (allowedReturnUrlPattern.test(returnUrl)) {",
          "256:           isReturnUrlAllowed = true",
          "257:           break",
          "258:         }",
          "259:       }",
          "260:       if (!isReturnUrlAllowed) {",
          "",
          "---------------"
        ],
        "test/client/karma.spec.js||test/client/karma.spec.js": [
          "File: test/client/karma.spec.js -> test/client/karma.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:       assert(spyResult.called)",
          "443:     })",
          "446:       windowLocation.search = '?id=567&return_url=http://return.com'",
          "447:       socket = new MockSocket()",
          "448:       k = new ClientKarma(updater, socket, iframe, windowStub, windowNavigator, windowLocation)",
          "449:       clientWindow = { karma: k }",
          "450:       ck = new ContextKarma(ContextKarma.getDirectCallParentKarmaMethod(clientWindow))",
          "454:       clock.tick(500)",
          "456:       ck.complete()",
          "",
          "[Removed Lines]",
          "445:     it('should navigate the client to return_url if specified', function (done) {",
          "451:       ck.config = {}",
          "453:       sinon.spy(socket, 'disconnect')",
          "",
          "[Added Lines]",
          "445:     it('should navigate the client to return_url if specified and allowed', function (done) {",
          "446:       var config = {",
          "448:         allowedReturnUrlPatterns: ['^https?://']",
          "449:       }",
          "455:       socket.emit('execute', config)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "462:       clock.tick(10)",
          "463:     })",
          "465:     it('should clear context window upon complete when clearContext config is true', function () {",
          "466:       var config = ck.config = {",
          "467:         clearContext: true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:     it('should not navigate the client to return_url if not allowed', function () {",
          "469:       var config = {",
          "470:         allowedReturnUrlPatterns: []",
          "471:       }",
          "473:       windowLocation.search = '?id=567&return_url=javascript:alert(document.domain)'",
          "474:       socket = new MockSocket()",
          "475:       k = new ClientKarma(updater, socket, iframe, windowStub, windowNavigator, windowLocation)",
          "476:       clientWindow = { karma: k }",
          "477:       ck = new ContextKarma(ContextKarma.getDirectCallParentKarmaMethod(clientWindow))",
          "478:       socket.emit('execute', config)",
          "480:       try {",
          "481:         ck.complete()",
          "482:         throw new Error('An error should have been caught.')",
          "483:       } catch (error) {",
          "484:         assert(/Error: Security: Navigation to .* was blocked to prevent malicious exploits./.test(error))",
          "485:       }",
          "486:     })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91d5acda6325caf91685da465d688527bd412b47",
      "candidate_info": {
        "commit_hash": "91d5acda6325caf91685da465d688527bd412b47",
        "repo": "karma-runner/karma",
        "commit_url": "https://github.com/karma-runner/karma/commit/91d5acda6325caf91685da465d688527bd412b47",
        "files": [
          "client/karma.js",
          "static/karma.js"
        ],
        "message": "fix: remove string template from client code\n\nIt is incompatible with IE.",
        "before_after_code_files": [
          "client/karma.js||client/karma.js",
          "static/karma.js||static/karma.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "client/karma.js||client/karma.js",
            "static/karma.js||static/karma.js"
          ],
          "candidate": [
            "client/karma.js||client/karma.js",
            "static/karma.js||static/karma.js"
          ]
        }
      },
      "candidate_diff": {
        "client/karma.js||client/karma.js": [
          "File: client/karma.js -> client/karma.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:     }",
          "241:     if (returnUrl) {",
          "242:       if (!/^https?:\\/\\//.test(returnUrl)) {",
          "244:       }",
          "245:       location.href = returnUrl",
          "246:     }",
          "",
          "[Removed Lines]",
          "243:         throw new Error(`Security: Navigation to ${returnUrl} was blocked to prevent malicious exploits.`)",
          "",
          "[Added Lines]",
          "243:         throw new Error(",
          "244:           'Security: Navigation to '.concat(",
          "245:             returnUrl,",
          "246:             ' was blocked to prevent malicious exploits.'",
          "247:           )",
          "248:         )",
          "",
          "---------------"
        ],
        "static/karma.js||static/karma.js": [
          "File: static/karma.js -> static/karma.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:     }",
          "251:     if (returnUrl) {",
          "252:       if (!/^https?:\\/\\//.test(returnUrl)) {",
          "254:       }",
          "255:       location.href = returnUrl",
          "256:     }",
          "",
          "[Removed Lines]",
          "253:         throw new Error(`Security: Navigation to ${returnUrl} was blocked to prevent malicious exploits.`)",
          "",
          "[Added Lines]",
          "253:         throw new Error(",
          "254:           'Security: Navigation to '.concat(",
          "255:             returnUrl,",
          "256:             ' was blocked to prevent malicious exploits.'",
          "257:           )",
          "258:         )",
          "",
          "---------------"
        ]
      }
    }
  ]
}