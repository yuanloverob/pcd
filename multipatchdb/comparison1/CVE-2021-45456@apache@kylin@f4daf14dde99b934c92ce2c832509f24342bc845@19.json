{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c7b63726c356f65d7d81fb780acbe5ef85cb03f",
      "candidate_info": {
        "commit_hash": "6c7b63726c356f65d7d81fb780acbe5ef85cb03f",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/6c7b63726c356f65d7d81fb780acbe5ef85cb03f",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
          "core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/AdminController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/AdminService.java"
        ],
        "message": "Minor, refactor\n\n- disbale setting kylin config\n- add check for database name\n- add check for command parameter\n\n(cherry picked from commit 7322b5f9d275a9f29962bea76ea185d83f89962a)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java||core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
          "core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java||core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/AdminController.java||server-base/src/main/java/org/apache/kylin/rest/controller/AdminController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java||server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/AdminService.java||server-base/src/main/java/org/apache/kylin/rest/service/AdminService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1127:     }",
          "1129:     public String getHiveDatabaseForIntermediateTable() {",
          "1131:     }",
          "1133:     public String getFlatTableStorageFormat() {",
          "",
          "[Removed Lines]",
          "1130:         return this.getOptional(\"kylin.source.hive.database-for-flat-table\", DEFAULT);",
          "",
          "[Added Lines]",
          "1130:         return CliCommandExecutor.checkHiveProperty(this.getOptional(\"kylin.source.hive.database-for-flat-table\", DEFAULT));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2260:         return Boolean.parseBoolean(getOptional(\"kylin.web.dashboard-enabled\", FALSE));",
          "2261:     }",
          "2263:     public String getPropertiesWhiteList() {",
          "2264:         return getOptional(\"kylin.web.properties.whitelist\", \"kylin.web.timezone,kylin.query.cache-enabled,kylin.env,\"",
          "2265:                 + \"kylin.web.hive-limit,kylin.storage.default,\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2263:     public boolean isWebConfigEnabled() {",
          "2264:         return Boolean.parseBoolean(getOptional(\"kylin.web.set-config-enable\", FALSE));",
          "2265:     }",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java||core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java -> core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:         }",
          "177:     }",
          "180:     public static final String COMMAND_WHITE_LIST = \"[^\\\\w%,@/:=?.\\\"\\\\[\\\\]]\";",
          "",
          "[Removed Lines]",
          "179:     public static final String COMMAND_INJECT_REX = \"[ &`>|{}()$;\\\\-#~!+*\u201d\\\\\\\\]+\";",
          "",
          "[Added Lines]",
          "179:     public static final String COMMAND_BLOCK_LIST = \"[ &`>|{}()$;\\\\-#~!+*\\\\\\\\]+\";",
          "181:     public static final String HIVE_BLOCK_LIST = \"[ <>()$;\\\\-#!+*\\\"'/=%@]+\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:     public static String checkParameter(String commandParameter) {",
          "205:     }",
          "207:     public static String checkParameterWhiteList(String commandParameter) {",
          "208:         return checkParameter(commandParameter, COMMAND_WHITE_LIST);",
          "209:     }",
          "211:     private static String checkParameter(String commandParameter, String rex) {",
          "212:         String repaired = commandParameter.replaceAll(rex, \"\");",
          "213:         if (repaired.length() != commandParameter.length()) {",
          "215:         }",
          "216:         return repaired;",
          "217:     }",
          "",
          "[Removed Lines]",
          "204:         return checkParameter(commandParameter, COMMAND_INJECT_REX);",
          "214:             logger.info(\"Detected illegal character in command {} by {} , replace it to {}.\", commandParameter, rex, repaired);",
          "",
          "[Added Lines]",
          "206:         return checkParameter(commandParameter, COMMAND_BLOCK_LIST);",
          "213:     public static String checkHiveProperty(String hiveProperty) {",
          "214:         return checkParameter(hiveProperty, HIVE_BLOCK_LIST);",
          "215:     }",
          "220:             logger.warn(\"Detected illegal character in command {} by {} , replace it to {}.\", commandParameter, rex, repaired);",
          "",
          "---------------"
        ],
        "core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java||core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java": [
          "File: core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java -> core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:             {\"c1 | ${c2}\", \"c1c2\"},",
          "36:     };",
          "38:     @Test",
          "39:     public void testCmd() {",
          "40:         for (String[] pair : commands) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     private String[][] properties = {",
          "39:             {\"default;show tables\", \"defaultshowtables\"},",
          "40:             {\"default_kylin;drop tables;\", \"default_kylindroptables\"},",
          "41:             {\"db and 1=2\", \"dband12\"}",
          "42:     };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:             assertEquals(pair[1], CliCommandExecutor.checkParameterWhiteList(pair[0]));",
          "49:         }",
          "50:     }",
          "51: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:     @Test",
          "59:     public void testHiveProperties() {",
          "60:         for (String[] pair : properties) {",
          "61:             assertEquals(pair[1], CliCommandExecutor.checkHiveProperty(pair[0]));",
          "62:         }",
          "63:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/AdminController.java||server-base/src/main/java/org/apache/kylin/rest/controller/AdminController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/AdminController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/AdminController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.kylin.common.KylinConfig;",
          "26: import org.apache.kylin.common.KylinVersion;",
          "27: import org.apache.kylin.common.util.VersionUtil;",
          "28: import org.apache.kylin.rest.msg.Message;",
          "29: import org.apache.kylin.rest.msg.MsgPicker;",
          "30: import org.apache.kylin.rest.request.MetricsRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.kylin.rest.exception.BadRequestException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:     @RequestMapping(value = \"/config\", method = { RequestMethod.PUT }, produces = { \"application/json\" })",
          "131:     public void updateKylinConfig(@RequestBody UpdateConfigRequest updateConfigRequest) {",
          "132:         adminService.updateConfig(updateConfigRequest.getKey(), updateConfigRequest.getValue());",
          "133:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:         if (!adminService.configWritableStatus()) {",
          "134:             throw new BadRequestException(\"Update configuration from API is not allowed.\");",
          "135:         }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java||server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import javax.servlet.http.HttpServletResponse;",
          "28: import org.apache.kylin.common.persistence.AutoDeleteDirectory;",
          "29: import org.apache.kylin.metadata.badquery.BadQueryEntry;",
          "30: import org.apache.kylin.metadata.badquery.BadQueryHistory;",
          "31: import org.apache.kylin.rest.exception.InternalErrorException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.kylin.common.util.CliCommandExecutor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     public void dumpProjectDiagnosisInfo(@PathVariable String project, final HttpServletRequest request,",
          "80:             final HttpServletResponse response) {",
          "81:         try (AutoDeleteDirectory diagDir = new AutoDeleteDirectory(\"diag_project\", \"\")) {",
          "83:             setDownloadResponse(filePath, response);",
          "84:         } catch (IOException e) {",
          "85:             throw new InternalErrorException(\"Failed to dump project diagnosis info. \" + e.getMessage(), e);",
          "",
          "[Removed Lines]",
          "82:             String filePath = dgService.dumpProjectDiagnosisInfo(project, diagDir.getFile());",
          "",
          "[Added Lines]",
          "83:             String filePath = dgService.dumpProjectDiagnosisInfo(CliCommandExecutor.checkParameter(project), diagDir.getFile());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:     public void dumpJobDiagnosisInfo(@PathVariable String jobId, final HttpServletRequest request,",
          "96:             final HttpServletResponse response) {",
          "97:         try (AutoDeleteDirectory diagDir = new AutoDeleteDirectory(\"diag_job\", \"\")) {",
          "99:             setDownloadResponse(filePath, response);",
          "100:         } catch (IOException e) {",
          "101:             throw new InternalErrorException(\"Failed to dump job diagnosis info. \" + e.getMessage(), e);",
          "",
          "[Removed Lines]",
          "98:             String filePath = dgService.dumpJobDiagnosisInfo(jobId, diagDir.getFile());",
          "",
          "[Added Lines]",
          "99:             String filePath = dgService.dumpJobDiagnosisInfo(CliCommandExecutor.checkParameter(jobId), diagDir.getFile());",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/AdminService.java||server-base/src/main/java/org/apache/kylin/rest/service/AdminService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/AdminService.java -> server-base/src/main/java/org/apache/kylin/rest/service/AdminService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:         KylinConfig.getInstanceFromEnv().setProperty(key, value);",
          "91:     }",
          "93:     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN)",
          "94:     public void cleanupStorage() {",
          "95:         StorageCleanupJob job = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN)",
          "94:     public boolean configWritableStatus() {",
          "95:         return KylinConfig.getInstanceFromEnv().isWebConfigEnabled();",
          "96:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec0e538534df66bb05f05ecb70c7a99049b60f44",
      "candidate_info": {
        "commit_hash": "ec0e538534df66bb05f05ecb70c7a99049b60f44",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/ec0e538534df66bb05f05ecb70c7a99049b60f44",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/util/JsonUtil.java"
        ],
        "message": "KYLIN-4543 Remove the usage for jackson enableDefaultTyping()\n\n(cherry picked from commit fefd5f6df6a0fdb90cda7a0a66d1aa09d14edbd1)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/util/JsonUtil.java||core-common/src/main/java/org/apache/kylin/common/util/JsonUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/util/JsonUtil.java||core-common/src/main/java/org/apache/kylin/common/util/JsonUtil.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/util/JsonUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/JsonUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     private static final ObjectMapper mapper = new ObjectMapper();",
          "47:     private static final ObjectMapper indentMapper = new ObjectMapper();",
          "50:     static {",
          "51:         mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);",
          "52:         indentMapper.configure(SerializationFeature.INDENT_OUTPUT, true);",
          "54:     }",
          "56:     public static <T> T readValue(File src, Class<T> valueType)",
          "",
          "[Removed Lines]",
          "48:     private static final ObjectMapper typeMapper = new ObjectMapper();",
          "53:         typeMapper.enableDefaultTyping();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:         return mapper.readTree(content);",
          "94:     }",
          "100:     public static void writeValueIndent(OutputStream out, Object value)",
          "101:             throws IOException, JsonGenerationException, JsonMappingException {",
          "102:         indentMapper.writeValue(out, value);",
          "",
          "[Removed Lines]",
          "96:     public static <T> T readValueWithTyping(InputStream src, Class<T> valueType) throws IOException {",
          "97:         return typeMapper.readValue(src, valueType);",
          "98:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:         return indentMapper.writeValueAsString(value);",
          "120:     }",
          "126:     public static <T> T deepCopy(T src, Class<T> valueType) throws IOException {",
          "127:         String s = mapper.writeValueAsString(src);",
          "128:         return mapper.readValue(s, valueType);",
          "",
          "[Removed Lines]",
          "122:     public static void writeValueWithTyping(OutputStream out, Object value) throws IOException {",
          "123:         typeMapper.writeValue(out, value);",
          "124:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a0aadf785d3ff6fd1e3393f79d830527c1cbeec",
      "candidate_info": {
        "commit_hash": "3a0aadf785d3ff6fd1e3393f79d830527c1cbeec",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/3a0aadf785d3ff6fd1e3393f79d830527c1cbeec",
        "files": [
          "core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java"
        ],
        "message": "Job duration may become negative after the job resumed from error or paused status",
        "before_after_code_files": [
          "core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java||core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java||core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java": [
          "File: core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java -> core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:             if (endTime != 0) {",
          "571:                 long interruptTime = System.currentTimeMillis() - endTime + job.getInterruptTime();",
          "572:                 info = Maps.newHashMap(getJobOutput(jobId).getInfo());",
          "573:                 info.put(AbstractExecutable.INTERRUPT_TIME, Long.toString(interruptTime));",
          "574:                 info.remove(AbstractExecutable.END_TIME);",
          "575:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:                 getJobOutput(jobId).getInfo().remove(AbstractExecutable.END_TIME);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "310593370b99b7ec86c652709dc9fec125f30b87",
      "candidate_info": {
        "commit_hash": "310593370b99b7ec86c652709dc9fec125f30b87",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/310593370b99b7ec86c652709dc9fec125f30b87",
        "files": [
          "query/src/main/java/org/apache/kylin/query/enumerator/LookupTableEnumerator.java",
          "query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java"
        ],
        "message": "[KYLIN-4794] Make it possible to force hit a cube set for sqls with cube join\n\n(cherry picked from commit e44aee2eb6f8e8686f6e4edc3de1a90493d00288)",
        "before_after_code_files": [
          "query/src/main/java/org/apache/kylin/query/enumerator/LookupTableEnumerator.java||query/src/main/java/org/apache/kylin/query/enumerator/LookupTableEnumerator.java",
          "query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "query/src/main/java/org/apache/kylin/query/enumerator/LookupTableEnumerator.java||query/src/main/java/org/apache/kylin/query/enumerator/LookupTableEnumerator.java": [
          "File: query/src/main/java/org/apache/kylin/query/enumerator/LookupTableEnumerator.java -> query/src/main/java/org/apache/kylin/query/enumerator/LookupTableEnumerator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.IOException;",
          "22: import java.util.Arrays;",
          "23: import java.util.Iterator;",
          "24: import java.util.List;",
          "26: import org.apache.calcite.linq4j.Enumerator;",
          "27: import org.apache.kylin.cube.CubeInstance;",
          "28: import org.apache.kylin.cube.CubeManager;",
          "29: import org.apache.kylin.cube.model.DimensionDesc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.HashSet;",
          "26: import java.util.Locale;",
          "27: import java.util.Set;",
          "30: import org.apache.kylin.common.debug.BackdoorToggles;",
          "31: import org.apache.kylin.common.util.StringUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:             List<RealizationEntry> realizationEntries = project.getRealizationEntries();",
          "61:             String lookupTableName = olapContext.firstTableScan.getTableName();",
          "62:             CubeManager cubeMgr = CubeManager.getInstance(cube.getConfig());",
          "65:         } else if (olapContext.realization instanceof HybridInstance) {",
          "66:             final HybridInstance hybridInstance = (HybridInstance) olapContext.realization;",
          "67:             final IRealization latestRealization = hybridInstance.getLatestRealization();",
          "",
          "[Removed Lines]",
          "63:             cube = cubeMgr.findLatestSnapshot(realizationEntries, lookupTableName, cube);",
          "64:             olapContext.realization = cube;",
          "",
          "[Added Lines]",
          "70:             String forceHitCubeName = BackdoorToggles.getForceHitCube();",
          "71:             if (!StringUtil.isEmpty(forceHitCubeName)) {",
          "72:                 String forceHitCubeNameLower = forceHitCubeName.toLowerCase(Locale.ROOT);",
          "73:                 String[] forceHitCubeNames = forceHitCubeNameLower.split(\",\");",
          "74:                 final Set<String> forceHitCubeNameSet = new HashSet<String>(Arrays.asList(forceHitCubeNames));",
          "75:                 cube = cubeMgr.findLatestSnapshot(",
          "76:                         (List<RealizationEntry>) realizationEntries.stream()",
          "77:                                 .filter(x -> forceHitCubeNameSet.contains(x.getRealization().toLowerCase(Locale.ROOT))),",
          "78:                         lookupTableName, cube);",
          "79:                 olapContext.realization = cube;",
          "80:             } else {",
          "81:                 cube = cubeMgr.findLatestSnapshot(realizationEntries, lookupTableName, cube);",
          "82:                 olapContext.realization = cube;",
          "83:             }",
          "",
          "---------------"
        ],
        "query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java": [
          "File: query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java -> query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.List;",
          "22: import java.util.Set;",
          "24: import org.apache.commons.lang3.StringUtils;",
          "25: import org.apache.kylin.common.debug.BackdoorToggles;",
          "26: import org.apache.kylin.metadata.model.FunctionDesc;",
          "27: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "28: import org.apache.kylin.metadata.realization.CapabilityResult.CapabilityInfluence;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.util.Arrays;",
          "22: import java.util.HashSet;",
          "24: import java.util.Locale;",
          "29: import org.apache.kylin.common.util.StringUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:         String projectName = olapContext.olapSchema.getProjectName();",
          "51:         SQLDigest sqlDigest = olapContext.getSQLDigest();",
          "54:         for (IRealization real : realizations) {",
          "60:                 candidates.add(new Candidate(real, sqlDigest));",
          "61:                 break;",
          "62:             }",
          "63:         }",
          "",
          "[Removed Lines]",
          "53:         List<Candidate> candidates = Lists.newArrayListWithCapacity(realizations.size());",
          "55:             if (real.isReady())",
          "56:                 candidates.add(new Candidate(real, sqlDigest));",
          "57:             if (BackdoorToggles.getForceHitCube() != null && BackdoorToggles.getForceHitCube().equalsIgnoreCase(real.getName())) {",
          "58:                 logger.info(\"Force choose {} as selected cube for specific purpose.\", real.getName());",
          "59:                 candidates = Lists.newArrayListWithCapacity(1);",
          "",
          "[Added Lines]",
          "57:         String forceHitCubeName = BackdoorToggles.getForceHitCube();",
          "58:         Set<String> forceHitCubeNameSet = new HashSet<String>();",
          "59:         if (!StringUtil.isEmpty(forceHitCubeName)) {",
          "60:             String forceHitCubeNameLower = forceHitCubeName.toLowerCase(Locale.ROOT);",
          "61:             String[] forceHitCubeNames = forceHitCubeNameLower.split(\",\");",
          "62:             forceHitCubeNameSet = new HashSet<String>(Arrays.asList(forceHitCubeNames));",
          "63:         }",
          "65:         List<Candidate> candidates = Lists.newArrayList();",
          "67:             if (!forceHitCubeNameSet.isEmpty()) {",
          "68:                 if (!forceHitCubeNameSet.contains(real.getName().toLowerCase(Locale.ROOT))) {",
          "69:                     continue;",
          "70:                 }",
          "71:                 if (!real.isReady()) {",
          "72:                     throw new RuntimeException(",
          "73:                             \"Realization \" + real.getName() + \" is not ready and should not be force hit\");",
          "74:                 }",
          "77:             } else {",
          "78:                 if (real.isReady()) {",
          "79:                     candidates.add(new Candidate(real, sqlDigest));",
          "80:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83f8a3d450323eb6774999f9b1a61c85b7c4bea8",
      "candidate_info": {
        "commit_hash": "83f8a3d450323eb6774999f9b1a61c85b7c4bea8",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/83f8a3d450323eb6774999f9b1a61c85b7c4bea8",
        "files": [
          "core-common/src/main/resources/kylin-defaults.properties"
        ],
        "message": "minor, fix invalid config",
        "before_after_code_files": [
          "core-common/src/main/resources/kylin-defaults.properties||core-common/src/main/resources/kylin-defaults.properties"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-common/src/main/resources/kylin-defaults.properties||core-common/src/main/resources/kylin-defaults.properties": [
          "File: core-common/src/main/resources/kylin-defaults.properties -> core-common/src/main/resources/kylin-defaults.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: # Enlarge cores and memory to improve query performance in production env, please check https://cwiki.apache.org/confluence/display/KYLIN/User+Manual+4.X",
          "258: #Whether or not to start SparderContext when query server start",
          "260: #kylin.query.sparder-context.app-name=",
          "262: kylin.query.spark-conf.spark.master=yarn",
          "",
          "[Removed Lines]",
          "259: kylin.query.auto-sparder-context-enabled-enabled=false",
          "",
          "[Added Lines]",
          "259: kylin.query.auto-sparder-context-enabled=false",
          "",
          "---------------"
        ]
      }
    }
  ]
}