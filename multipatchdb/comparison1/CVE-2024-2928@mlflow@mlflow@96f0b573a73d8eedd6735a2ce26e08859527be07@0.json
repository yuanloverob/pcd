{
  "cve_id": "CVE-2024-2928",
  "cve_desc": "A Local File Inclusion (LFI) vulnerability was identified in mlflow/mlflow, specifically in version 2.9.2, which was fixed in version 2.11.3. This vulnerability arises from the application's failure to properly validate URI fragments for directory traversal sequences such as '../'. An attacker can exploit this flaw by manipulating the fragment part of the URI to read arbitrary files on the local file system, including sensitive files like '/etc/passwd'. The vulnerability is a bypass to a previous patch that only addressed similar manipulation within the URI's query string, highlighting the need for comprehensive validation of all parts of a URI to prevent LFI attacks.",
  "repo": "mlflow/mlflow",
  "patch_hash": "96f0b573a73d8eedd6735a2ce26e08859527be07",
  "patch_info": {
    "commit_hash": "96f0b573a73d8eedd6735a2ce26e08859527be07",
    "repo": "mlflow/mlflow",
    "commit_url": "https://github.com/mlflow/mlflow/commit/96f0b573a73d8eedd6735a2ce26e08859527be07",
    "files": [
      "mlflow/server/handlers.py"
    ],
    "message": "init\n\nSigned-off-by: Weichen Xu <weichen.xu@databricks.com>",
    "before_after_code_files": [
      "mlflow/server/handlers.py||mlflow/server/handlers.py"
    ]
  },
  "patch_diff": {
    "mlflow/server/handlers.py||mlflow/server/handlers.py": [
      "File: mlflow/server/handlers.py -> mlflow/server/handlers.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "601:     # Validate query string in artifact location to prevent attacks",
      "602:     parsed_artifact_locaion = urllib.parse.urlparse(request_message.artifact_location)",
      "603:     validate_query_string(parsed_artifact_locaion.query)",
      "605:     experiment_id = _get_tracking_store().create_experiment(",
      "606:         request_message.name, request_message.artifact_location, tags",
      "607:     )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "603:     if parsed_artifact_locaion.fragment:",
      "604:         raise MlflowException(",
      "605:             \"'artifact_location' URL can't include fragment part.\",",
      "606:             error_code=INVALID_PARAMETER_VALUE,",
      "607:         )",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1726:             store = _get_tracking_store()",
      "1727:             run = store.get_run(run_id)",
      "1728:             source = pathlib.Path(local_file_uri_to_path(source)).resolve()",
      "1733:         raise MlflowException(",
      "1734:             f\"Invalid model version source: '{source}'. To use a local path as a model version \"",
      "",
      "[Removed Lines]",
      "1729:             run_artifact_dir = pathlib.Path(local_file_uri_to_path(run.info.artifact_uri)).resolve()",
      "1730:             if run_artifact_dir in [source, *source.parents]:",
      "1731:                 return",
      "",
      "[Added Lines]",
      "1733:             if is_local_uri(run.info.artifact_uri):",
      "1734:                 run_artifact_dir = pathlib.Path(local_file_uri_to_path(run.info.artifact_uri)).resolve()",
      "1735:                 if run_artifact_dir in [source, *source.parents]:",
      "1736:                     return",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8d51e21523238280ebcfdb378612afd7844eca8",
      "candidate_info": {
        "commit_hash": "f8d51e21523238280ebcfdb378612afd7844eca8",
        "repo": "mlflow/mlflow",
        "commit_url": "https://github.com/mlflow/mlflow/commit/f8d51e21523238280ebcfdb378612afd7844eca8",
        "files": [
          "mlflow/server/handlers.py",
          "tests/server/test_handlers.py"
        ],
        "message": "Fix Local File Read/Path Traversal bypass (#11376)\n\nSigned-off-by: Weichen Xu <weichen.xu@databricks.com>",
        "before_after_code_files": [
          "mlflow/server/handlers.py||mlflow/server/handlers.py",
          "tests/server/test_handlers.py||tests/server/test_handlers.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mlflow/mlflow/pull/11376"
        ],
        "olp_code_files": {
          "patch": [
            "mlflow/server/handlers.py||mlflow/server/handlers.py"
          ],
          "candidate": [
            "mlflow/server/handlers.py||mlflow/server/handlers.py"
          ]
        }
      },
      "candidate_diff": {
        "mlflow/server/handlers.py||mlflow/server/handlers.py": [
          "File: mlflow/server/handlers.py -> mlflow/server/handlers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "601:     # Validate query string in artifact location to prevent attacks",
          "602:     parsed_artifact_locaion = urllib.parse.urlparse(request_message.artifact_location)",
          "603:     validate_query_string(parsed_artifact_locaion.query)",
          "605:     experiment_id = _get_tracking_store().create_experiment(",
          "606:         request_message.name, request_message.artifact_location, tags",
          "607:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603:     if parsed_artifact_locaion.fragment:",
          "604:         raise MlflowException(",
          "605:             \"'artifact_location' URL can't include fragment part.\",",
          "606:             error_code=INVALID_PARAMETER_VALUE,",
          "607:         )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1726:             store = _get_tracking_store()",
          "1727:             run = store.get_run(run_id)",
          "1728:             source = pathlib.Path(local_file_uri_to_path(source)).resolve()",
          "1733:         raise MlflowException(",
          "1734:             f\"Invalid model version source: '{source}'. To use a local path as a model version \"",
          "",
          "[Removed Lines]",
          "1729:             run_artifact_dir = pathlib.Path(local_file_uri_to_path(run.info.artifact_uri)).resolve()",
          "1730:             if run_artifact_dir in [source, *source.parents]:",
          "1731:                 return",
          "",
          "[Added Lines]",
          "1733:             if is_local_uri(run.info.artifact_uri):",
          "1734:                 run_artifact_dir = pathlib.Path(",
          "1735:                     local_file_uri_to_path(run.info.artifact_uri)",
          "1736:                 ).resolve()",
          "1737:                 if run_artifact_dir in [source, *source.parents]:",
          "1738:                     return",
          "",
          "---------------"
        ],
        "tests/server/test_handlers.py||tests/server/test_handlers.py": [
          "File: tests/server/test_handlers.py -> tests/server/test_handlers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     _transition_stage,",
          "67:     _update_model_version,",
          "68:     _update_registered_model,",
          "69:     catch_mlflow_exception,",
          "70:     get_endpoints,",
          "71: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     _validate_source,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "801:     json_response = json.loads(response.get_data())",
          "802:     assert json_response[\"error_code\"] == ErrorCode.Name(INVALID_PARAMETER_VALUE)",
          "803:     assert json_response[\"message\"] == \"Invalid path\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "807: def test_local_file_read_write_by_pass_vulnerability():",
          "808:     request = mock.MagicMock()",
          "809:     request.method = \"POST\"",
          "810:     request.content_type = \"application/json; charset=utf-8\"",
          "811:     request.get_json = mock.MagicMock()",
          "812:     request.get_json.return_value = {",
          "813:         \"name\": \"hello\",",
          "814:         \"artifact_location\": \"http://host#/abc/etc/\",",
          "815:     }",
          "816:     msg = _get_request_message(CreateExperiment(), flask_request=request)",
          "817:     with mock.patch(\"mlflow.server.handlers._get_request_message\", return_value=msg):",
          "818:         response = _create_experiment()",
          "819:         json_response = json.loads(response.get_data())",
          "820:         assert json_response[\"message\"] == \"'artifact_location' URL can't include fragment part.\"",
          "822:     # Test if source is a local filesystem path, `_validate_source` validates that the run",
          "823:     # artifact_uri is also a local filesystem path.",
          "824:     run_id = uuid.uuid4().hex",
          "825:     with mock.patch(\"mlflow.server.handlers._get_tracking_store\") as mock_get_tracking_store:",
          "826:         mock_get_tracking_store().get_run(",
          "827:             run_id",
          "828:         ).info.artifact_uri = f\"http://host/{run_id}/artifacts/abc\"",
          "830:         with pytest.raises(",
          "831:             MlflowException,",
          "832:             match=(",
          "833:                 \"the run_id request parameter has to be specified and the local \"",
          "834:                 \"path has to be contained within the artifact directory of the \"",
          "835:                 \"run specified by the run_id\"",
          "836:             ),",
          "837:         ):",
          "838:             _validate_source(\"/local/path/xyz\", run_id)",
          "",
          "---------------"
        ]
      }
    }
  ]
}