{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b098fca4e1966de8e28a6475afc338749277f375",
      "candidate_info": {
        "commit_hash": "b098fca4e1966de8e28a6475afc338749277f375",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/b098fca4e1966de8e28a6475afc338749277f375",
        "files": [
          "package.json",
          "packages/form/src/form-config-item.js",
          "packages/form/src/form-item.js",
          "packages/form/src/form.js",
          "packages/form/src/render.js",
          "packages/table/src/methods.js",
          "packages/table/src/table.js",
          "styles/table.scss"
        ],
        "message": "releases 3.8.11",
        "before_after_code_files": [
          "packages/form/src/form-config-item.js||packages/form/src/form-config-item.js",
          "packages/form/src/form-item.js||packages/form/src/form-item.js",
          "packages/form/src/form.js||packages/form/src/form.js",
          "packages/form/src/render.js||packages/form/src/render.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "styles/table.scss||styles/table.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/form/src/form-config-item.js||packages/form/src/form-config-item.js": [
          "File: packages/form/src/form-config-item.js -> packages/form/src/form-config-item.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:   },",
          "28:   render (h) {",
          "29:     const { _e, $xeform, itemConfig: item } = this",
          "31:     const { slots, title, folding, visible, field, collapseNode, itemRender, showError, errRule, className, titleOverflow, vertical, children, showTitle, contentClassName, contentStyle, titleClassName, titleStyle } = item",
          "32:     const compConf = isEnableConf(itemRender) ? VXETable.renderer.get(itemRender.name) : null",
          "33:     const itemClassName = compConf ? (compConf.formItemClassName || compConf.itemClassName) : ''",
          "",
          "[Removed Lines]",
          "30:     const { rules, data, collapseAll, validOpts, titleAlign: allTitleAlign, titleWidth: allTitleWidth, titleColon: allTitleColon, titleAsterisk: allTitleAsterisk, titleOverflow: allTitleOverflow, vertical: allVertical } = $xeform",
          "",
          "[Added Lines]",
          "30:     const { rules, data, disabled, readonly, collapseAll, validOpts, titleAlign: allTitleAlign, titleWidth: allTitleWidth, titleColon: allTitleColon, titleAsterisk: allTitleAsterisk, titleOverflow: allTitleOverflow, vertical: allVertical } = $xeform",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     const ovTitle = itemOverflow === 'title'",
          "49:     const ovTooltip = itemOverflow === true || itemOverflow === 'tooltip'",
          "50:     const hasEllipsis = ovTitle || ovTooltip || ovEllipsis",
          "52:     let isRequired",
          "53:     if (visible === false) {",
          "54:       return _e()",
          "",
          "[Removed Lines]",
          "51:     const params = { data, field, property: field, item, $form: $xeform, $grid: $xeform.xegrid }",
          "",
          "[Added Lines]",
          "51:     const params = { data, disabled, readonly, field, property: field, item, $form: $xeform, $grid: $xeform.xegrid }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:         class: ['vxe-form--gather vxe-form--item-row', item.id, span ? `vxe-form--item-col_${span} is--span` : '', className ? (XEUtils.isFunction(className) ? className(params) : className) : '']",
          "69:       }, childVNs) : _e()",
          "70:     }",
          "72:       const itemRules = rules[field]",
          "73:       if (itemRules) {",
          "74:         isRequired = itemRules.some(rule => rule.required)",
          "",
          "[Removed Lines]",
          "71:     if (rules) {",
          "",
          "[Added Lines]",
          "71:     if (!readonly && rules) {",
          "",
          "---------------"
        ],
        "packages/form/src/form-item.js||packages/form/src/form-item.js": [
          "File: packages/form/src/form-item.js -> packages/form/src/form-item.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: })",
          "66: const renderItem = (h, _vm, item, slots) => {",
          "68:   const { title, folding, visible, field, collapseNode, itemRender, showError, errRule, className, titleOverflow, vertical, showTitle, contentClassName, contentStyle, titleClassName, titleStyle } = item",
          "69:   const compConf = isEnableConf(itemRender) ? VXETable.renderer.get(itemRender.name) : null",
          "70:   const itemClassName = compConf ? (compConf.formItemClassName || compConf.itemClassName) : ''",
          "",
          "[Removed Lines]",
          "67:   const { _e, rules, data, collapseAll, validOpts, titleAlign: allTitleAlign, titleWidth: allTitleWidth, titleColon: allTitleColon, titleAsterisk: allTitleAsterisk, titleOverflow: allTitleOverflow, vertical: allVertical } = _vm",
          "",
          "[Added Lines]",
          "67:   const { _e, rules, data, disabled, readonly, collapseAll, validOpts, titleAlign: allTitleAlign, titleWidth: allTitleWidth, titleColon: allTitleColon, titleAsterisk: allTitleAsterisk, titleOverflow: allTitleOverflow, vertical: allVertical } = _vm",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   const ovTitle = itemOverflow === 'title'",
          "86:   const ovTooltip = itemOverflow === true || itemOverflow === 'tooltip'",
          "87:   const hasEllipsis = ovTitle || ovTooltip || ovEllipsis",
          "89:   let isRequired",
          "90:   if (visible === false) {",
          "91:     return _e()",
          "92:   }",
          "94:     const itemRules = rules[field]",
          "95:     if (itemRules) {",
          "96:       isRequired = itemRules.some(rule => rule.required)",
          "",
          "[Removed Lines]",
          "88:   const params = { data, field, property: field, item, $form: _vm, $grid: _vm.xegrid }",
          "93:   if (rules) {",
          "",
          "[Added Lines]",
          "88:   const params = { data, disabled, readonly, field, property: field, item, $form: _vm, $grid: _vm.xegrid }",
          "93:   if (!readonly && rules) {",
          "",
          "---------------"
        ],
        "packages/form/src/form.js||packages/form/src/form.js": [
          "File: packages/form/src/form.js -> packages/form/src/form.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:       default: null",
          "85:     },",
          "86:     className: [String, Function],",
          "87:     readonly: Boolean,",
          "88:     items: Array,",
          "89:     rules: Object,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:     disabled: Boolean,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:       this.dispatchEvent('collapse', { status, collapse: status, data: this.data }, evnt)",
          "252:     },",
          "253:     submitEvent (evnt) {",
          "254:       evnt.preventDefault()",
          "255:       if (!this.preventSubmit) {",
          "256:         this.clearValidate()",
          "257:         this.beginValidate(this.getItems()).then((errMap) => {",
          "258:           if (errMap) {",
          "259:             this.dispatchEvent('submit-invalid', { data: this.data, errMap }, evnt)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:       const { readonly } = this",
          "259:         if (readonly) {",
          "260:           this.dispatchEvent('submit', { data: this.data }, evnt)",
          "261:           return",
          "262:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "361:       return this.$nextTick()",
          "362:     },",
          "363:     validate (callback) {",
          "364:       this.clearValidate()",
          "365:       return this.beginValidate(this.getItems(), '', callback)",
          "366:     },",
          "367:     validateField (fieldOrItem, callback) {",
          "368:       let fields = []",
          "369:       if (XEUtils.isArray(fieldOrItem)) {",
          "370:         fields = fieldOrItem",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:       const { readonly } = this",
          "372:       if (readonly) {",
          "373:         return this.$nextTick()",
          "374:       }",
          "378:       const { readonly } = this",
          "379:       if (readonly) {",
          "380:         return this.$nextTick()",
          "381:       }",
          "",
          "---------------"
        ],
        "packages/form/src/render.js||packages/form/src/render.js": [
          "File: packages/form/src/render.js -> packages/form/src/render.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: }",
          "26: export function renderTitle (h, _vm, item) {",
          "28:   const { slots, field, itemRender, titlePrefix, titleSuffix } = item",
          "29:   const compConf = isEnableConf(itemRender) ? VXETable.renderer.get(itemRender.name) : null",
          "31:   const contVNs = []",
          "32:   const titVNs = []",
          "33:   if (titlePrefix) {",
          "",
          "[Removed Lines]",
          "27:   const { data, tooltipOpts } = _vm",
          "30:   const params = { data, field, property: field, item, $form: _vm, $grid: _vm.xegrid }",
          "",
          "[Added Lines]",
          "27:   const { data, readonly, disabled, tooltipOpts } = _vm",
          "30:   const params = { data, readonly, disabled, field, property: field, item, $form: _vm, $grid: _vm.xegrid }",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2978:       tooltipStore.row = null",
          "2979:       tooltipStore.column = column",
          "2980:       tooltipStore.visible = true",
          "2982:       this.$nextTick(() => {",
          "2983:         const $tooltip = $refs.tooltip",
          "2984:         if ($tooltip) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2981:       tooltipStore.currOpts = iconParams",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3064:       Object.assign(tooltipStore, {",
          "3065:         row,",
          "3066:         column,",
          "3068:       })",
          "3069:       this.$nextTick(() => {",
          "3070:         const $tooltip = $refs.tooltip",
          "",
          "[Removed Lines]",
          "3067:         visible: true",
          "",
          "[Added Lines]",
          "3067:         visible: true,",
          "3068:         currOpts: {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3095:         row: null,",
          "3096:         column: null,",
          "3097:         content: null,",
          "3099:       })",
          "3100:       if (tooltip) {",
          "3101:         tooltip.close()",
          "",
          "[Removed Lines]",
          "3098:         visible: false",
          "",
          "[Added Lines]",
          "3099:         visible: false,",
          "3100:         currOpts: {}",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:       tooltipStore: {",
          "433:         row: null,",
          "434:         column: null,",
          "436:       },",
          "438:       validStore: {",
          "",
          "[Removed Lines]",
          "435:         visible: false",
          "",
          "[Added Lines]",
          "435:         visible: false,",
          "436:         currOpts: {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1255:       hasTip ? h('vxe-tooltip', {",
          "1256:         ref: 'tooltip',",
          "1258:       }) : _e(),",
          "",
          "[Removed Lines]",
          "1257:         props: this.tipConfig",
          "",
          "[Added Lines]",
          "1258:         props: Object.assign({}, this.tipConfig, this.tooltipStore.currOpts)",
          "",
          "---------------"
        ],
        "styles/table.scss||styles/table.scss": [
          "File: styles/table.scss -> styles/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:       }",
          "612:     }",
          "613:   }",
          "616:     .vxe-body--column {",
          "617:       user-select: none;",
          "618:     }",
          "",
          "[Removed Lines]",
          "614:   &.checkbox--range,",
          "615:   &.cell--selected {",
          "",
          "[Added Lines]",
          "614:   &.checkbox--range {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21e0d8562bc2a2a7698ccb1608795bb0b318daec",
      "candidate_info": {
        "commit_hash": "21e0d8562bc2a2a7698ccb1608795bb0b318daec",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/21e0d8562bc2a2a7698ccb1608795bb0b318daec",
        "files": [
          "examples/views/table/TableTest6.vue",
          "package.json",
          "packages/grid/src/grid.ts",
          "packages/table/module/custom/panel.ts",
          "packages/table/module/edit/mixin.ts",
          "packages/table/module/export/export-panel.ts",
          "packages/table/module/export/import-panel.ts",
          "packages/table/module/export/mixin.ts",
          "packages/table/module/menu/mixin.ts",
          "packages/table/module/validator/mixin.ts",
          "packages/table/src/columnInfo.ts",
          "packages/table/src/methods.ts",
          "packages/table/src/table.ts",
          "packages/table/src/util.ts"
        ],
        "message": "fix",
        "before_after_code_files": [
          "examples/views/table/TableTest6.vue||examples/views/table/TableTest6.vue",
          "packages/grid/src/grid.ts||packages/grid/src/grid.ts",
          "packages/table/module/custom/panel.ts||packages/table/module/custom/panel.ts",
          "packages/table/module/edit/mixin.ts||packages/table/module/edit/mixin.ts",
          "packages/table/module/export/export-panel.ts||packages/table/module/export/export-panel.ts",
          "packages/table/module/export/import-panel.ts||packages/table/module/export/import-panel.ts",
          "packages/table/module/export/mixin.ts||packages/table/module/export/mixin.ts",
          "packages/table/module/menu/mixin.ts||packages/table/module/menu/mixin.ts",
          "packages/table/module/validator/mixin.ts||packages/table/module/validator/mixin.ts",
          "packages/table/src/columnInfo.ts||packages/table/src/columnInfo.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts",
          "packages/table/src/util.ts||packages/table/src/util.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/table/TableTest6.vue||examples/views/table/TableTest6.vue": [
          "File: examples/views/table/TableTest6.vue -> examples/views/table/TableTest6.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:         { id: 10020, name: 'Test20', role: 'Develop', sex: '1', age: 41, address: 'test abc' }",
          "137:       ]",
          "138:       this.demo1.loading = false",
          "140:   }",
          "141: })",
          "142: </script>",
          "",
          "[Removed Lines]",
          "139:     }, 100)",
          "",
          "[Added Lines]",
          "139:     }, 800)",
          "",
          "---------------"
        ],
        "packages/grid/src/grid.ts||packages/grid/src/grid.ts": [
          "File: packages/grid/src/grid.ts -> packages/grid/src/grid.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { getSlotVNs } from '../../ui/src/vn'",
          "10: import { warnLog, errLog } from '../../ui/src/log'",
          "14: const methods: any = {}",
          "15: const propKeys = Object.keys(tableComponentProps)",
          "19:   if (isEnableConf(formConfig) && formOpts.items && formOpts.items.length) {",
          "20:     const formSlots: any = {}",
          "21:     if (!formOpts.inited) {",
          "",
          "[Removed Lines]",
          "12: const { getConfig, getI18n, commands, globalEvents, globalMixins } = VxeUI",
          "17: function renderDefaultForm (h: CreateElement, _vm: any) {",
          "18:   const { $scopedSlots, proxyConfig, proxyOpts, formData, formConfig, formOpts } = _vm",
          "",
          "[Added Lines]",
          "12: import type { VxeFormComponent, VxePagerComponent } from 'vxe-pc-ui'",
          "14: const { getConfig, getI18n, commands, globalEvents, globalMixins, renderEmptyElement } = VxeUI",
          "19: function renderDefaultForm (h: CreateElement, $xeGrid: any) {",
          "20:   const VxeUIFormComponent = VxeUI.getComponent<VxeFormComponent>('VxeForm')",
          "21:   const props = $xeGrid",
          "22:   const slots = $xeGrid.$scopedSlots",
          "24:   const { proxyConfig, formConfig } = props",
          "25:   const { proxyOpts, formData, formOpts } = $xeGrid",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:       const beforeItem = proxyOpts.beforeItem",
          "24:       if (proxyOpts && beforeItem) {",
          "25:         formOpts.items.forEach((item: any) => {",
          "27:         })",
          "28:       }",
          "29:     }",
          "",
          "[Removed Lines]",
          "26:           beforeItem.call(_vm, { $grid: _vm, item })",
          "",
          "[Added Lines]",
          "33:           beforeItem.call($xeGrid, { $grid: $xeGrid, item })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31:     formOpts.items.forEach((item: any) => {",
          "32:       XEUtils.each(item.slots, (func) => {",
          "33:         if (!XEUtils.isFunction(func)) {",
          "36:           }",
          "37:         }",
          "38:       })",
          "39:     })",
          "40:     return [",
          "53:     ]",
          "54:   }",
          "55:   return []",
          "56: }",
          "60:   const funcSlot = optSlots[slotKey]",
          "61:   if (funcSlot) {",
          "62:     if (XEUtils.isString(funcSlot)) {",
          "65:       } else {",
          "67:           errLog('vxe.error.notSlot', [funcSlot])",
          "68:         }",
          "69:       }",
          "",
          "[Removed Lines]",
          "34:           if ($scopedSlots[func]) {",
          "35:             formSlots[func] = $scopedSlots[func]",
          "41:       h('vxe-form', {",
          "42:         props: Object.assign({}, formOpts, {",
          "43:           data: proxyConfig && proxyOpts.form ? formData : formOpts.data",
          "44:         }),",
          "45:         on: {",
          "46:           submit: _vm.submitEvent,",
          "47:           reset: _vm.resetEvent,",
          "48:           collapse: _vm.collapseEvent,",
          "49:           'submit-invalid': _vm.submitInvalidEvent",
          "50:         },",
          "51:         scopedSlots: formSlots",
          "52:       })",
          "58: function getFuncSlot (_vm: any, optSlots: any, slotKey: any) {",
          "59:   const { $scopedSlots } = _vm",
          "63:       if ($scopedSlots[funcSlot]) {",
          "64:         return $scopedSlots[funcSlot]",
          "66:         if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "41:           if (slots[func]) {",
          "42:             formSlots[func] = slots[func]",
          "48:       VxeUIFormComponent",
          "49:         ? h(VxeUIFormComponent, {",
          "50:           props: Object.assign({}, formOpts, {",
          "51:             data: proxyConfig && proxyOpts.form ? formData : formOpts.data",
          "52:           }),",
          "53:           on: {",
          "54:             submit: $xeGrid.submitEvent,",
          "55:             reset: $xeGrid.resetEvent,",
          "56:             collapse: $xeGrid.collapseEvent,",
          "57:             'submit-invalid': $xeGrid.submitInvalidEvent",
          "58:           },",
          "59:           scopedSlots: formSlots",
          "60:         })",
          "61:         : renderEmptyElement($xeGrid)",
          "67: function getFuncSlot ($xeGrid: any, optSlots: any, slotKey: any) {",
          "68:   const slots = $xeGrid.$scopedSlots",
          "73:       if (slots[funcSlot]) {",
          "74:         return slots[funcSlot]",
          "76:         if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:   let buttonsSlot",
          "81:   let toolsSlot",
          "82:   const slots: any = {}",
          "84:     if ($scopedSlots.buttons && (!toolbarOptSlots || toolbarOptSlots.buttons !== 'buttons')) {",
          "85:       warnLog('vxe.error.reqProp', ['toolbar-config.slots.buttons'])",
          "86:     }",
          "",
          "[Removed Lines]",
          "83:   if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "93:   if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "265:   const pagerSlot = $scopedSlots.pager",
          "266:   const hasPager = !!(pagerSlot || isEnableConf(pagerConfig))",
          "",
          "[Removed Lines]",
          "263: function renderPager (h: CreateElement, _vm: any) {",
          "264:   const { _e, $scopedSlots, pagerConfig, proxyConfig, tablePage } = _vm",
          "",
          "[Added Lines]",
          "273: function renderPager (h: CreateElement, $xeGrid: any) {",
          "274:   const VxeUIPagerComponent = VxeUI.getComponent<VxePagerComponent>('VxePager')",
          "275:   const props = $xeGrid",
          "277:   const { pagerConfig, proxyConfig } = props",
          "278:   const { $scopedSlots, tablePage } = $xeGrid",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "271:       ref: 'pagerWrapper',",
          "272:       class: 'vxe-grid--pager-wrapper'",
          "273:     }, pagerSlot",
          "275:       : [",
          "283:         ]",
          "284:     )",
          "285:   }",
          "287: }",
          "289: const defaultLayouts = ['Form', 'Toolbar', 'Top', 'Table', 'Bottom', 'Pager']",
          "",
          "[Removed Lines]",
          "274:       ? pagerSlot.call(_vm, { $grid: _vm }, h)",
          "276:           h('vxe-pager', {",
          "277:             props: { ..._vm.pagerOpts, ...(proxyConfig ? tablePage : {}) },",
          "278:             on: {",
          "279:               'page-change': _vm.pageChangeEvent",
          "280:             },",
          "281:             scopedSlots: getPagerSlots(_vm)",
          "282:           })",
          "286:   return _e()",
          "",
          "[Added Lines]",
          "288:       ? pagerSlot.call($xeGrid, { $grid: $xeGrid }, h)",
          "290:           VxeUIPagerComponent",
          "291:             ? h(VxeUIPagerComponent, {",
          "292:               props: { ...$xeGrid.pagerOpts, ...(proxyConfig ? tablePage : {}) },",
          "293:               on: {",
          "294:                 'page-change': $xeGrid.pageChangeEvent",
          "295:               },",
          "296:               scopedSlots: getPagerSlots($xeGrid)",
          "297:             })",
          "298:             : renderEmptyElement($xeGrid)",
          "302:   return renderEmptyElement($xeGrid)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "322:         vns.push(renderPager(h, _vm))",
          "323:         break",
          "324:       default:",
          "326:           errLog('vxe.error.notProp', [`layouts -> ${name}`])",
          "327:         }",
          "328:         break",
          "",
          "[Removed Lines]",
          "325:         if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "341:         if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "371:       tZindex: 0,",
          "372:       tablePage: {",
          "373:         total: 0,",
          "375:         currentPage: 1",
          "376:       }",
          "377:     }",
          "",
          "[Removed Lines]",
          "374:         pageSize: getConfig().pager.pageSize || 10,",
          "",
          "[Added Lines]",
          "390:         pageSize: getConfig().pager?.pageSize || 10,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "469:     }",
          "470:   } as any,",
          "471:   created (this: any) {",
          "478:       if (this.toolbar) {",
          "479:         warnLog('vxe.error.delProp', ['grid.toolbar', 'grid.toolbar-config'])",
          "480:       }",
          "",
          "[Removed Lines]",
          "477:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "488:     const $xeGrid = this",
          "489:     const props = $xeGrid",
          "496:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "487:     }",
          "488:     this.initPages()",
          "489:     globalEvents.on(this, 'keydown', this.handleGlobalKeydownEvent)",
          "490:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "510:       const VxeUIFormComponent = VxeUI.getComponent<VxeFormComponent>('VxeForm')",
          "511:       const VxeUIPagerComponent = VxeUI.getComponent<VxePagerComponent>('VxePager')",
          "513:       $xeGrid.$nextTick(() => {",
          "514:         if (props.formConfig) {",
          "515:           if (!VxeUIFormComponent) {",
          "516:             errLog('vxe.error.reqComp', ['vxe-form'])",
          "517:           }",
          "518:         }",
          "519:         if (props.pagerConfig) {",
          "520:           if (!VxeUIPagerComponent) {",
          "521:             errLog('vxe.error.reqComp', ['vxe-pager'])",
          "522:           }",
          "523:         }",
          "524:       })",
          "525:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "753:                 return { status: false }",
          "754:               })",
          "755:           } else {",
          "757:               errLog('vxe.error.notFunc', ['proxy-config.ajax.query'])",
          "758:             }",
          "759:           }",
          "",
          "[Removed Lines]",
          "756:             if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "795:             if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "781:                     $xetable.setPendingRow(removeRecords, false)",
          "782:                     if (isRespMsg) {",
          "785:                         if (!VxeUI.modal) {",
          "786:                           errLog('vxe.error.reqModule', ['Modal'])",
          "787:                         }",
          "",
          "[Removed Lines]",
          "784:                       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "823:                       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "802:                     this.tableLoading = false",
          "803:                     if (isRespMsg) {",
          "806:                         if (!VxeUI.modal) {",
          "807:                           errLog('vxe.error.reqModule', ['Modal'])",
          "808:                         }",
          "",
          "[Removed Lines]",
          "805:                       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "844:                       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "818:             } else {",
          "819:               if (isActiveMsg) {",
          "822:                   if (!VxeUI.modal) {",
          "823:                     errLog('vxe.error.reqModule', ['Modal'])",
          "824:                   }",
          "",
          "[Removed Lines]",
          "821:                 if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "860:                 if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "827:               }",
          "828:             }",
          "829:           } else {",
          "831:               errLog('vxe.error.notFunc', ['proxy-config.ajax.delete'])",
          "832:             }",
          "833:           }",
          "",
          "[Removed Lines]",
          "830:             if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "869:             if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "868:                     $xetable.clearPendingRow()",
          "869:                     if (isRespMsg) {",
          "872:                         if (!VxeUI.modal) {",
          "873:                           errLog('vxe.error.reqModule', ['Modal'])",
          "874:                         }",
          "",
          "[Removed Lines]",
          "871:                       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "910:                       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "889:                     this.tableLoading = false",
          "890:                     if (isRespMsg) {",
          "893:                         if (!VxeUI.modal) {",
          "894:                           errLog('vxe.error.reqModule', ['Modal'])",
          "895:                         }",
          "",
          "[Removed Lines]",
          "892:                       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "931:                       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "904:               } else {",
          "905:                 if (isActiveMsg) {",
          "908:                     if (!VxeUI.modal) {",
          "909:                       errLog('vxe.error.reqModule', ['Modal'])",
          "910:                     }",
          "",
          "[Removed Lines]",
          "907:                   if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "946:                   if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "914:               }",
          "915:             })",
          "916:           } else {",
          "918:               errLog('vxe.error.notFunc', ['proxy-config.ajax.save'])",
          "919:             }",
          "920:           }",
          "",
          "[Removed Lines]",
          "917:             if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "956:             if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "926:             if (gCommandOpts.commandMethod) {",
          "927:               gCommandOpts.commandMethod({ code, button, $grid: this, $table: $xetable }, ...args)",
          "928:             } else {",
          "930:                 errLog('vxe.error.notCommands', [code])",
          "931:               }",
          "932:             }",
          "",
          "[Removed Lines]",
          "929:               if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "968:               if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "955:           })",
          "956:         } else {",
          "959:             if (!VxeUI.modal) {",
          "960:               errLog('vxe.error.reqModule', ['Modal'])",
          "961:             }",
          "",
          "[Removed Lines]",
          "958:           if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "997:           if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1006:       } else {",
          "1007:         if (isActiveMsg) {",
          "1010:             if (!VxeUI.modal) {",
          "1011:               errLog('vxe.error.reqModule', ['Modal'])",
          "1012:             }",
          "",
          "[Removed Lines]",
          "1009:           if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "1048:           if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1125:       return null",
          "1126:     },",
          "1129:       ? {",
          "1130:           loadColumn (columns: any[]) {",
          "1131:             const { $scopedSlots } = this",
          "",
          "[Removed Lines]",
          "1128:     ...(process.env.VUE_APP_VXE_TABLE_ENV === 'development'",
          "",
          "[Added Lines]",
          "1167:     ...(process.env.VUE_APP_VXE_ENV === 'development'",
          "",
          "---------------"
        ],
        "packages/table/module/custom/panel.ts||packages/table/module/custom/panel.ts": [
          "File: packages/table/module/custom/panel.ts -> packages/table/module/custom/panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import type { VxeModalComponent, VxeDrawerComponent, VxeButtonComponent, VxeRadioGroupComponent, VxeTooltipComponent, VxeInputComponent } from 'vxe-pc-ui'",
          "12: function updateDropHint (_vm: any, evnt: any) {",
          "13:   const { $refs } = _vm",
          "",
          "[Removed Lines]",
          "10: const { getI18n, getIcon } = VxeUI",
          "",
          "[Added Lines]",
          "10: const { getI18n, getIcon, renderEmptyElement } = VxeUI",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277: }",
          "279: const renderPopupPanel = (h: CreateElement, _vm: any) => {",
          "280:   const VxeUIButtonComponent = VxeUI.getComponent<VxeButtonComponent>('VxeButton')",
          "282:   const { _e, $xetable, customStore } = _vm",
          "283:   const { customOpts, customColumnList, columnOpts, isMaxFixedColumn } = $xetable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:   const VxeUIModalComponent = VxeUI.getComponent<VxeModalComponent>('VxeModal')",
          "282:   const VxeUIInputComponent = VxeUI.getComponent<VxeInputComponent>('VxeInput')",
          "283:   const VxeUITooltipComponent = VxeUI.getComponent<VxeTooltipComponent>('VxeTooltip')",
          "284:   const $xeTableCustomPanel = _vm",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "387:             }, [",
          "388:               column.children && column.children.length",
          "389:                 ? h('span', '-')",
          "402:             ])",
          "403:             : _e(),",
          "404:           allowFixed",
          "",
          "[Removed Lines]",
          "390:                 : h('vxe-input', {",
          "391:                   props: {",
          "392:                     type: 'integer',",
          "393:                     disabled: isHidden,",
          "394:                     value: column.renderResizeWidth",
          "395:                   },",
          "396:                   on: {",
          "397:                     modelValue (value: any) {",
          "398:                       column.renderResizeWidth = Math.max(0, Number(value))",
          "399:                     }",
          "400:                   }",
          "401:                 })",
          "",
          "[Added Lines]",
          "394:                 : (VxeUIInputComponent",
          "395:                     ? h(VxeUIInputComponent, {",
          "396:                       props: {",
          "397:                         type: 'integer',",
          "398:                         disabled: isHidden,",
          "399:                         value: column.renderResizeWidth",
          "400:                       },",
          "401:                       on: {",
          "402:                         modelValue (value: any) {",
          "403:                           column.renderResizeWidth = Math.max(0, Number(value))",
          "404:                         }",
          "405:                       }",
          "406:                     })",
          "407:                     : renderEmptyElement($xeTableCustomPanel)",
          "408:                   )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "433:   })",
          "434:   const isAllChecked = customStore.isAll",
          "435:   const isAllIndeterminate = customStore.isIndeterminate",
          "467:           }, [",
          "506:                   allowVisible",
          "529:                     : _e(),",
          "530:                   allowSort",
          "550:                     : _e(),",
          "552:                   allowResizable",
          "554:                     : _e(),",
          "555:                   allowFixed",
          "557:                     : _e()",
          "605:       }",
          "608: }",
          "610: export default {",
          "",
          "[Removed Lines]",
          "436:   return h('vxe-modal', {",
          "437:     key: 'modal',",
          "438:     props: {",
          "439:       className: ['vxe-table-custom-popup-wrapper', 'vxe-table--ignore-clear', modalOpts.className || ''].join(' '),",
          "440:       value: customStore.visible,",
          "441:       title: modalOpts.title || getI18n('vxe.custom.cstmTitle'),",
          "442:       width: modalOpts.width || Math.min(880, document.documentElement.clientWidth),",
          "443:       minWidth: modalOpts.minWidth || 700,",
          "444:       height: modalOpts.height || Math.min(680, document.documentElement.clientHeight),",
          "445:       minHeight: modalOpts.minHeight || 400,",
          "446:       showZoom: !!modalOpts.showZoom,",
          "447:       mask: !!modalOpts.mask,",
          "448:       lockView: !!modalOpts.lockView,",
          "449:       resize: !!modalOpts.resize,",
          "450:       escClosable: !!modalOpts.escClosable,",
          "451:       destroyOnClose: true,",
          "452:       showFooter: true",
          "453:     },",
          "454:     on: {",
          "455:       input (value: any) {",
          "456:         customStore.visible = value",
          "457:       }",
          "458:     },",
          "459:     scopedSlots: {",
          "460:       default: () => {",
          "461:         return h('div', {",
          "462:           ref: 'bodyElemRef',",
          "463:           class: 'vxe-table-custom-popup--body'",
          "464:         }, [",
          "465:           h('div', {",
          "466:             class: 'vxe-table-custom-popup--table-wrapper'",
          "468:             h('table', {}, [",
          "469:               h('colgroup', {}, [",
          "470:                 allowVisible",
          "471:                   ? h('col', {",
          "472:                     style: {",
          "473:                       width: '80px'",
          "474:                     }",
          "475:                   })",
          "476:                   : _e(),",
          "477:                 allowSort",
          "478:                   ? h('col', {",
          "479:                     style: {",
          "480:                       width: '80px'",
          "481:                     }",
          "482:                   })",
          "483:                   : _e(),",
          "484:                 h('col', {",
          "485:                   style: {",
          "486:                     minWidth: '120px'",
          "487:                   }",
          "488:                 }),",
          "489:                 allowResizable",
          "490:                   ? h('col', {",
          "491:                     style: {",
          "492:                       width: '140px'",
          "493:                     }",
          "494:                   })",
          "495:                   : _e(),",
          "496:                 allowFixed",
          "497:                   ? h('col', {",
          "498:                     style: {",
          "499:                       width: '200px'",
          "500:                     }",
          "501:                   })",
          "502:                   : _e()",
          "503:               ]),",
          "504:               h('thead', {}, [",
          "505:                 h('tr', {}, [",
          "507:                     ? h('th', {}, [",
          "508:                       h('div', {",
          "509:                         class: ['vxe-table-custom--checkbox-option', {",
          "510:                           'is--checked': isAllChecked,",
          "511:                           'is--indeterminate': isAllIndeterminate",
          "512:                         }],",
          "513:                         attrs: {",
          "514:                           title: getI18n('vxe.table.allTitle')",
          "515:                         },",
          "516:                         on: {",
          "517:                           click: _vm.allOptionEvent",
          "518:                         }",
          "520:                       }, [",
          "521:                         h('span', {",
          "522:                           class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]",
          "523:                         }),",
          "524:                         h('span', {",
          "525:                           class: 'vxe-checkbox--label'",
          "526:                         }, getI18n('vxe.toolbar.customAll'))",
          "527:                       ])",
          "528:                     ])",
          "531:                     ? h('th', {}, [",
          "532:                       h('span', {",
          "533:                         class: 'vxe-table-custom-popup--table-sort-help-title'",
          "534:                       }, getI18n('vxe.custom.setting.colSort')),",
          "535:                       h('vxe-tooltip', {",
          "536:                         props: {",
          "537:                           enterable: true,",
          "538:                           content: getI18n('vxe.custom.setting.sortHelpTip'),",
          "539:                           popupClassName: 'vxe-table--ignore-clear'",
          "540:                         },",
          "541:                         scopedSlots: {",
          "542:                           default: () => {",
          "543:                             return h('i', {",
          "544:                               class: 'vxe-table-custom-popup--table-sort-help-icon vxe-icon-question-circle-fill'",
          "545:                             })",
          "546:                           }",
          "547:                         }",
          "548:                       })",
          "549:                     ])",
          "551:                   h('th', {}, getI18n('vxe.custom.setting.colTitle')),",
          "553:                     ? h('th', {}, getI18n('vxe.custom.setting.colResizable'))",
          "556:                     ? h('th', {}, getI18n(`vxe.custom.setting.${maxFixedSize ? 'colFixedMax' : 'colFixed'}`, [maxFixedSize]))",
          "558:                 ])",
          "559:               ]),",
          "560:               h('transition-group', {",
          "561:                 class: 'vxe-table-custom--body',",
          "562:                 props: {",
          "563:                   tag: 'tbody',",
          "564:                   name: 'vxe-table-custom--list'",
          "565:                 }",
          "566:               }, trVNs)",
          "567:             ])",
          "568:           ]),",
          "569:           h('div', {",
          "570:             ref: 'dragHintElemRef',",
          "571:             class: 'vxe-table-custom-popup--drag-hint'",
          "572:           }, getI18n('vxe.custom.cstmDragTarget', [_vm.dragColumn ? _vm.dragColumn.getTitle() : '']))",
          "573:         ])",
          "574:       },",
          "575:       footer: () => {",
          "576:         return h('div', {",
          "577:           class: 'vxe-table-custom-popup--footer'",
          "578:         }, [",
          "579:           h(VxeUIButtonComponent, {",
          "580:             props: {",
          "581:               content: customOpts.resetButtonText || getI18n('vxe.custom.cstmRestore')",
          "582:             },",
          "583:             on: {",
          "584:               click: _vm.resetCustomEvent",
          "585:             }",
          "586:           }),",
          "587:           h(VxeUIButtonComponent, {",
          "588:             props: {",
          "589:               content: customOpts.resetButtonText || getI18n('vxe.custom.cstmCancel')",
          "590:             },",
          "591:             on: {",
          "592:               click: _vm.cancelCustomEvent",
          "593:             }",
          "594:           }),",
          "595:           h(VxeUIButtonComponent, {",
          "596:             props: {",
          "597:               status: 'primary',",
          "598:               content: customOpts.confirmButtonText || getI18n('vxe.custom.cstmConfirm')",
          "599:             },",
          "600:             on: {",
          "601:               click: _vm.confirmCustomEvent",
          "602:             }",
          "603:           })",
          "604:         ])",
          "606:     }",
          "607:   })",
          "",
          "[Added Lines]",
          "443:   return VxeUIModalComponent",
          "444:     ? h(VxeUIModalComponent, {",
          "445:       key: 'modal',",
          "446:       props: {",
          "447:         className: ['vxe-table-custom-popup-wrapper', 'vxe-table--ignore-clear', modalOpts.className || ''].join(' '),",
          "448:         value: customStore.visible,",
          "449:         title: modalOpts.title || getI18n('vxe.custom.cstmTitle'),",
          "450:         width: modalOpts.width || Math.min(880, document.documentElement.clientWidth),",
          "451:         minWidth: modalOpts.minWidth || 700,",
          "452:         height: modalOpts.height || Math.min(680, document.documentElement.clientHeight),",
          "453:         minHeight: modalOpts.minHeight || 400,",
          "454:         showZoom: !!modalOpts.showZoom,",
          "455:         mask: !!modalOpts.mask,",
          "456:         lockView: !!modalOpts.lockView,",
          "457:         resize: !!modalOpts.resize,",
          "458:         escClosable: !!modalOpts.escClosable,",
          "459:         destroyOnClose: true,",
          "460:         showFooter: true",
          "461:       },",
          "462:       on: {",
          "463:         input (value: any) {",
          "464:           customStore.visible = value",
          "465:         }",
          "466:       },",
          "467:       scopedSlots: {",
          "468:         default: () => {",
          "469:           return h('div', {",
          "470:             ref: 'bodyElemRef',",
          "471:             class: 'vxe-table-custom-popup--body'",
          "473:             h('div', {",
          "474:               class: 'vxe-table-custom-popup--table-wrapper'",
          "475:             }, [",
          "476:               h('table', {}, [",
          "477:                 h('colgroup', {}, [",
          "479:                     ? h('col', {",
          "480:                       style: {",
          "481:                         width: '80px'",
          "482:                       }",
          "483:                     })",
          "486:                     ? h('col', {",
          "487:                       style: {",
          "488:                         width: '80px'",
          "489:                       }",
          "490:                     })",
          "492:                   h('col', {",
          "493:                     style: {",
          "494:                       minWidth: '120px'",
          "495:                     }",
          "496:                   }),",
          "498:                     ? h('col', {",
          "499:                       style: {",
          "500:                         width: '140px'",
          "501:                       }",
          "502:                     })",
          "505:                     ? h('col', {",
          "506:                       style: {",
          "507:                         width: '200px'",
          "508:                       }",
          "509:                     })",
          "511:                 ]),",
          "512:                 h('thead', {}, [",
          "513:                   h('tr', {}, [",
          "514:                     allowVisible",
          "515:                       ? h('th', {}, [",
          "516:                         h('div', {",
          "517:                           class: ['vxe-table-custom--checkbox-option', {",
          "518:                             'is--checked': isAllChecked,",
          "519:                             'is--indeterminate': isAllIndeterminate",
          "520:                           }],",
          "521:                           attrs: {",
          "522:                             title: getI18n('vxe.table.allTitle')",
          "523:                           },",
          "524:                           on: {",
          "525:                             click: _vm.allOptionEvent",
          "526:                           }",
          "528:                         }, [",
          "529:                           h('span', {",
          "530:                             class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]",
          "531:                           }),",
          "532:                           h('span', {",
          "533:                             class: 'vxe-checkbox--label'",
          "534:                           }, getI18n('vxe.toolbar.customAll'))",
          "535:                         ])",
          "536:                       ])",
          "537:                       : _e(),",
          "538:                     allowSort",
          "539:                       ? h('th', {}, [",
          "540:                         h('span', {",
          "541:                           class: 'vxe-table-custom-popup--table-sort-help-title'",
          "542:                         }, getI18n('vxe.custom.setting.colSort')),",
          "543:                         VxeUITooltipComponent",
          "544:                           ? h(VxeUITooltipComponent, {",
          "545:                             props: {",
          "546:                               enterable: true,",
          "547:                               content: getI18n('vxe.custom.setting.sortHelpTip'),",
          "548:                               popupClassName: 'vxe-table--ignore-clear'",
          "549:                             },",
          "550:                             scopedSlots: {",
          "551:                               default: () => {",
          "552:                                 return h('i', {",
          "553:                                   class: 'vxe-table-custom-popup--table-sort-help-icon vxe-icon-question-circle-fill'",
          "554:                                 })",
          "555:                               }",
          "556:                             }",
          "557:                           })",
          "558:                           : renderEmptyElement($xeTableCustomPanel)",
          "559:                       ])",
          "560:                       : _e(),",
          "561:                     h('th', {}, getI18n('vxe.custom.setting.colTitle')),",
          "562:                     allowResizable",
          "563:                       ? h('th', {}, getI18n('vxe.custom.setting.colResizable'))",
          "564:                       : _e(),",
          "565:                     allowFixed",
          "566:                       ? h('th', {}, getI18n(`vxe.custom.setting.${maxFixedSize ? 'colFixedMax' : 'colFixed'}`, [maxFixedSize]))",
          "567:                       : _e()",
          "568:                   ])",
          "569:                 ]),",
          "570:                 h('transition-group', {",
          "571:                   class: 'vxe-table-custom--body',",
          "572:                   props: {",
          "573:                     tag: 'tbody',",
          "574:                     name: 'vxe-table-custom--list'",
          "575:                   }",
          "576:                 }, trVNs)",
          "577:               ])",
          "578:             ]),",
          "579:             h('div', {",
          "580:               ref: 'dragHintElemRef',",
          "581:               class: 'vxe-table-custom-popup--drag-hint'",
          "582:             }, getI18n('vxe.custom.cstmDragTarget', [_vm.dragColumn ? _vm.dragColumn.getTitle() : '']))",
          "583:           ])",
          "584:         },",
          "585:         footer: () => {",
          "586:           return h('div', {",
          "587:             class: 'vxe-table-custom-popup--footer'",
          "588:           }, [",
          "589:             h(VxeUIButtonComponent, {",
          "590:               props: {",
          "591:                 content: customOpts.resetButtonText || getI18n('vxe.custom.cstmRestore')",
          "592:               },",
          "593:               on: {",
          "594:                 click: _vm.resetCustomEvent",
          "595:               }",
          "596:             }),",
          "597:             h(VxeUIButtonComponent, {",
          "598:               props: {",
          "599:                 content: customOpts.resetButtonText || getI18n('vxe.custom.cstmCancel')",
          "600:               },",
          "601:               on: {",
          "602:                 click: _vm.cancelCustomEvent",
          "603:               }",
          "604:             }),",
          "605:             h(VxeUIButtonComponent, {",
          "606:               props: {",
          "607:                 status: 'primary',",
          "608:                 content: customOpts.confirmButtonText || getI18n('vxe.custom.cstmConfirm')",
          "609:               },",
          "610:               on: {",
          "611:                 click: _vm.confirmCustomEvent",
          "612:               }",
          "613:             })",
          "614:           ])",
          "615:         }",
          "617:     })",
          "618:     : renderEmptyElement($xeTableCustomPanel)",
          "",
          "---------------"
        ],
        "packages/table/module/edit/mixin.ts||packages/table/module/edit/mixin.ts": [
          "File: packages/table/module/edit/mixin.ts -> packages/table/module/edit/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:       fullDataRowIdData[rowid] = rest",
          "35:       fullAllDataRowIdData[rowid] = rest",
          "36:     } else {",
          "38:         if (parentRowId) {",
          "39:           warnLog('vxe.error.unableInsert')",
          "40:         }",
          "",
          "[Removed Lines]",
          "37:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "37:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:           const parentLevel = parentRest ? parentRest.level : 0",
          "99:           newRecords.forEach((item: any, i: any) => {",
          "100:             const rowid = getRowid(_vm, item)",
          "102:               if (item[treeOpts.parentField]) {",
          "103:                 if (parentRow && item[treeOpts.parentField] !== parentRow[rowField]) {",
          "104:                   errLog('vxe.error.errProp', [`${treeOpts.parentField}=${item[treeOpts.parentField]}`, `${treeOpts.parentField}=${parentRow[rowField]}`])",
          "",
          "[Removed Lines]",
          "101:             if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "101:             if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:             }",
          "132:           }",
          "133:         } else {",
          "135:             warnLog('vxe.error.unableInsert')",
          "136:           }",
          "137:           insertTreeRow(_vm, newRecords, true)",
          "",
          "[Removed Lines]",
          "134:           if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "134:           if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "551:       }",
          "552:     },",
          "553:     _clearActived (evnt: any) {",
          "555:         warnLog('vxe.error.delFunc', ['clearActived', 'clearEdit'])",
          "556:       }",
          "",
          "[Removed Lines]",
          "554:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "554:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "589:       return this.$nextTick()",
          "590:     },",
          "591:     _getActiveRecord () {",
          "593:         warnLog('vxe.error.delFunc', ['getActiveRecord', 'getEditRecord'])",
          "594:       }",
          "",
          "[Removed Lines]",
          "592:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "592:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "605:       return null",
          "606:     },",
          "607:     _isActiveByRow (row: any) {",
          "609:         warnLog('vxe.error.delFunc', ['isActiveByRow', 'isEditByRow'])",
          "610:       }",
          "",
          "[Removed Lines]",
          "608:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "608:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "662:       }",
          "663:     },",
          "664:     _setActiveRow (row: any) {",
          "666:         warnLog('vxe.error.delFunc', ['setActiveRow', 'setEditRow'])",
          "667:       }",
          "",
          "[Removed Lines]",
          "665:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "665:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "679:       return this.setEditCell(row, column)",
          "680:     },",
          "681:     _setActiveCell (row: any, fieldOrColumn: any) {",
          "683:         warnLog('vxe.error.delFunc', ['setActiveCell', 'setEditCell'])",
          "684:       }",
          "",
          "[Removed Lines]",
          "682:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "682:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------"
        ],
        "packages/table/module/export/export-panel.ts||packages/table/module/export/export-panel.ts": [
          "File: packages/table/module/export/export-panel.ts -> packages/table/module/export/export-panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { VxeUI } from '../../../ui'",
          "3: import XEUtils from 'xe-utils'",
          "4: import { formatText } from '../../../ui/src/utils'",
          "6: const { getI18n, getIcon, globalMixins } = VxeUI",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import { errLog } from '../../../ui/src/log'",
          "7: import type { VxeModalComponent, VxeInputComponent, VxeCheckboxComponent, VxeSelectComponent, VxeButtonComponent } from 'vxe-pc-ui'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:       return !defaultOptions.original && ['xlsx'].indexOf(defaultOptions.type) > -1",
          "45:     }",
          "46:   } as any,",
          "47:   render (this: any, h: CreateElement) {",
          "48:     const { _e, checkedAll, isAll: isAllChecked, isIndeterminate: isAllIndeterminate, showSheet, supportMerge, supportStyle, defaultOptions, storeData } = this",
          "49:     const { hasTree, hasMerge, isPrint, hasColgroup } = storeData",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   created (this: any) {",
          "51:     const $xeTableExportPanel = this",
          "53:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "54:       const VxeUIModalComponent = VxeUI.getComponent<VxeModalComponent>('VxeModal')",
          "55:       const VxeUIButtonComponent = VxeUI.getComponent<VxeButtonComponent>('VxeButton')",
          "56:       const VxeUISelectComponent = VxeUI.getComponent<VxeSelectComponent>('VxeSelect')",
          "57:       const VxeUIInputComponent = VxeUI.getComponent<VxeInputComponent>('VxeInput')",
          "58:       const VxeUICheckboxComponent = VxeUI.getComponent<VxeCheckboxComponent>('VxeCheckbox')",
          "60:       $xeTableExportPanel.$nextTick(() => {",
          "61:         if (!VxeUIModalComponent) {",
          "62:           errLog('vxe.error.reqComp', ['vxe-modal'])",
          "63:         }",
          "64:         if (!VxeUIButtonComponent) {",
          "65:           errLog('vxe.error.reqComp', ['vxe-button'])",
          "66:         }",
          "67:         if (!VxeUISelectComponent) {",
          "68:           errLog('vxe.error.reqComp', ['vxe-select'])",
          "69:         }",
          "70:         if (!VxeUIInputComponent) {",
          "71:           errLog('vxe.error.reqComp', ['vxe-input'])",
          "72:         }",
          "73:         if (!VxeUICheckboxComponent) {",
          "74:           errLog('vxe.error.reqComp', ['vxe-checkbox'])",
          "75:         }",
          "76:       })",
          "77:     }",
          "78:   },",
          "",
          "---------------"
        ],
        "packages/table/module/export/import-panel.ts||packages/table/module/export/import-panel.ts": [
          "File: packages/table/module/export/import-panel.ts -> packages/table/module/export/import-panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { VxeUI } from '../../../ui'",
          "3: import XEUtils from 'xe-utils'",
          "4: import { parseFile } from '../../../ui/src/utils'",
          "7: const { getI18n, getIcon, globalMixins } = VxeUI",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import { errLog } from '../../../ui/src/log'",
          "7: import type { VxeModalComponent, VxeSelectComponent, VxeButtonComponent } from 'vxe-pc-ui'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:       return `*.${typeList.map((item: any) => item.value).join(', *.')}`",
          "42:     }",
          "43:   } as any,",
          "44:   render (this: any, h: CreateElement) {",
          "45:     const { hasFile, parseTypeLabel, defaultOptions, storeData, selectName } = this",
          "46:     return h('vxe-modal', {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   created (this: any) {",
          "47:     const $xeTableImportPanel = this",
          "49:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "50:       const VxeUIModalComponent = VxeUI.getComponent<VxeModalComponent>('VxeModal')",
          "51:       const VxeUIButtonComponent = VxeUI.getComponent<VxeButtonComponent>('VxeButton')",
          "52:       const VxeUISelectComponent = VxeUI.getComponent<VxeSelectComponent>('VxeSelect')",
          "54:       $xeTableImportPanel.$nextTick(() => {",
          "55:         if (!VxeUIModalComponent) {",
          "56:           errLog('vxe.error.reqComp', ['vxe-modal'])",
          "57:         }",
          "58:         if (!VxeUIButtonComponent) {",
          "59:           errLog('vxe.error.reqComp', ['vxe-button'])",
          "60:         }",
          "61:         if (!VxeUISelectComponent) {",
          "62:           errLog('vxe.error.reqComp', ['vxe-select'])",
          "63:         }",
          "64:       })",
          "65:     }",
          "66:   },",
          "",
          "---------------"
        ],
        "packages/table/module/export/mixin.ts||packages/table/module/export/mixin.ts": [
          "File: packages/table/module/export/mixin.ts -> packages/table/module/export/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:   saveLocalFile({ filename, type, content }).then(() => {",
          "585:     if (opts.message !== false) {",
          "588:         if (!VxeUI.modal) {",
          "589:           errLog('vxe.error.reqModule', ['Modal'])",
          "590:         }",
          "",
          "[Removed Lines]",
          "587:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "587:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "813:         }",
          "814:         if (opts.message !== false) {",
          "817:             if (!VxeUI.modal) {",
          "818:               errLog('vxe.error.reqModule', ['Modal'])",
          "819:             }",
          "",
          "[Removed Lines]",
          "816:           if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "816:           if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "828:       })",
          "829:   } else if (opts.message !== false) {",
          "832:       if (!VxeUI.modal) {",
          "833:         errLog('vxe.error.reqModule', ['Modal'])",
          "834:       }",
          "",
          "[Removed Lines]",
          "831:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "831:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "849:   if (!importMethod && !XEUtils.includes(XEUtils.keys(importOpts._typeMaps), type)) {",
          "850:     if (opts.message !== false) {",
          "853:         if (!VxeUI.modal) {",
          "854:           errLog('vxe.error.reqModule', ['Modal'])",
          "855:         }",
          "",
          "[Removed Lines]",
          "852:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "852:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "900:       }",
          "901:     } else {",
          "904:         errLog('vxe.error.notExp')",
          "905:       }",
          "906:       _importResolve({ status: true })",
          "",
          "[Removed Lines]",
          "903:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "903:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "957:       } else {",
          "958:         if (options.message !== false) {",
          "961:             if (!VxeUI.modal) {",
          "962:               errLog('vxe.error.reqModule', ['Modal'])",
          "963:             }",
          "",
          "[Removed Lines]",
          "960:           if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "960:           if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1279:       if (!opts.exportMethod && !XEUtils.includes(XEUtils.keys(exportOpts._typeMaps), type)) {",
          "1281:           errLog('vxe.error.notType', [type])",
          "1282:         }",
          "1283:         const params = { status: false }",
          "",
          "[Removed Lines]",
          "1280:         if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "1280:         if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1300:             opts.data = selectRecords",
          "1301:           }",
          "1302:         } else if (mode === 'all') {",
          "1304:             if (!$xegrid) {",
          "1305:               warnLog('vxe.error.errProp', ['all', 'mode=current,selected'])",
          "1306:             }",
          "",
          "[Removed Lines]",
          "1303:           if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "1303:           if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1312:             const queryAllSuccessMethods = ajax.queryAllSuccess",
          "1313:             const queryAllErrorMethods = ajax.queryAllError",
          "1316:               if (!ajaxMethods) {",
          "1317:                 warnLog('vxe.error.notFunc', ['proxy-config.ajax.queryAll'])",
          "1318:               }",
          "",
          "[Removed Lines]",
          "1315:             if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "1315:             if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1484:     },",
          "1485:     _openExport (options: any) {",
          "1486:       const { exportOpts } = this",
          "1488:         if (!this.exportConfig) {",
          "1489:           errLog('vxe.error.reqProp', ['export-config'])",
          "1490:         }",
          "",
          "[Removed Lines]",
          "1487:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "1487:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1493:     },",
          "1494:     _openPrint (options: any) {",
          "1495:       const { printOpts } = this",
          "1497:         if (!this.printConfig) {",
          "1498:           errLog('vxe.error.reqProp', ['print-config'])",
          "1499:         }",
          "",
          "[Removed Lines]",
          "1496:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "1496:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------"
        ],
        "packages/table/module/menu/mixin.ts||packages/table/module/menu/mixin.ts": [
          "File: packages/table/module/menu/mixin.ts -> packages/table/module/menu/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:             this.handleOpenMenuEvent(evnt, layout, params)",
          "109:             if (this.$listeners[`${typePrefix}cell-context-menu`]) {",
          "111:                 warnLog('vxe.error.delEvent', [`${typePrefix}cell-context-menu`, `${typePrefix}cell-menu`])",
          "112:               }",
          "113:               this.emitEvent(`${typePrefix}cell-context-menu`, params, evnt)",
          "",
          "[Removed Lines]",
          "110:               if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "110:               if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:         }",
          "260:         if (this.$listeners['context-menu-click']) {",
          "262:             warnLog('vxe.error.delEvent', ['context-menu-click', 'menu-click'])",
          "263:           }",
          "264:           this.emitEvent('context-menu-click', params, evnt)",
          "",
          "[Removed Lines]",
          "261:           if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "261:           if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------"
        ],
        "packages/table/module/validator/mixin.ts||packages/table/module/validator/mixin.ts": [
          "File: packages/table/module/validator/mixin.ts -> packages/table/module/validator/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     _fullValidate (rows: any, cb: any) {",
          "72:         if (XEUtils.isFunction(cb)) {",
          "73:           warnLog('vxe.error.notValidators', ['fullValidate(rows, callback)', 'fullValidate(rows)'])",
          "74:         }",
          "",
          "[Removed Lines]",
          "71:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "71:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     _validate (rows: any, cb: any) {",
          "83:         if (XEUtils.isFunction(cb)) {",
          "84:           warnLog('vxe.error.notValidators', ['validate(rows, callback)', 'validate(rows)'])",
          "85:         }",
          "",
          "[Removed Lines]",
          "82:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "82:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308:                     if (gvItem.cellValidatorMethod) {",
          "309:                       customValid = gvItem.cellValidatorMethod(validParams)",
          "310:                     } else {",
          "312:                         warnLog('vxe.error.notValidators', [validator])",
          "313:                       }",
          "314:                     }",
          "315:                   } else {",
          "317:                       errLog('vxe.error.notValidators', [validator])",
          "318:                     }",
          "319:                   }",
          "",
          "[Removed Lines]",
          "311:                       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "316:                     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "311:                       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "316:                     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------"
        ],
        "packages/table/src/columnInfo.ts||packages/table/src/columnInfo.ts": [
          "File: packages/table/src/columnInfo.ts -> packages/table/src/columnInfo.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     const formatter = _vm.formatter",
          "15:     const visible = XEUtils.isBoolean(_vm.visible) ? _vm.visible : true",
          "18:       const types = ['seq', 'checkbox', 'radio', 'expand', 'html']",
          "19:       if (_vm.type && types.indexOf(_vm.type) === -1) {",
          "20:         warnLog('vxe.error.errProp', [`type=${_vm.type}`, types.join(', ')])",
          "",
          "[Removed Lines]",
          "17:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "17:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "396:     if (treeConfig) {",
          "398:       if (treeOpts.transform) {",
          "400:           if (!treeOpts.rowField) {",
          "401:             errLog('vxe.error.reqProp', ['table.tree-config.rowField'])",
          "402:           }",
          "",
          "[Removed Lines]",
          "399:         if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "399:         if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "450:     if (keepSource) {",
          "451:       this.cacheSourceMap(fullData)",
          "452:     }",
          "454:       if (sYLoad) {",
          "455:         if (!(this.height || this.maxHeight)) {",
          "456:           errLog('vxe.error.reqProp', ['table.height | table.max-height | table.scroll-y={enabled: false}'])",
          "",
          "[Removed Lines]",
          "453:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "453:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "581:       }",
          "582:       this.tableData = tableData.slice(0)",
          "583:     } else {",
          "585:         warnLog('vxe.error.reqProp', ['keep-source'])",
          "586:       }",
          "587:     }",
          "",
          "[Removed Lines]",
          "584:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "584:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "633:       this.clearMergeCells()",
          "634:       this.clearMergeFooterItems()",
          "635:       this.handleTableData(true)",
          "637:         if ((this.scrollXLoad || this.scrollYLoad) && this.expandColumn) {",
          "638:           warnLog('vxe.error.scrollErrProp', ['column.type=expand'])",
          "639:         }",
          "",
          "[Removed Lines]",
          "636:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "636:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "771:       const { id: colid, field, fixed, type, treeNode } = column",
          "772:       const rest = { column, colid, index, items, parent }",
          "773:       if (field) {",
          "775:           if (fullColumnFieldData[field]) {",
          "776:             warnLog('vxe.error.colRepet', ['field', field])",
          "777:           }",
          "",
          "[Removed Lines]",
          "774:         if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "774:         if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "787:       }",
          "789:       if (treeNode) {",
          "791:           if (treeNodeColumn) {",
          "792:             warnLog('vxe.error.colRepet', ['tree-node', treeNode])",
          "793:           }",
          "",
          "[Removed Lines]",
          "790:         if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "790:         if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "796:           treeNodeColumn = column",
          "797:         }",
          "798:       } else if (type === 'expand') {",
          "800:           if (expandColumn) {",
          "801:             warnLog('vxe.error.colRepet', ['type', type])",
          "802:           }",
          "",
          "[Removed Lines]",
          "799:         if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "799:         if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "805:           expandColumn = column",
          "806:         }",
          "807:       }",
          "809:         if (type === 'checkbox') {",
          "810:           if (checkboxColumn) {",
          "811:             warnLog('vxe.error.colRepet', ['type', type])",
          "",
          "[Removed Lines]",
          "808:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "808:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "822:           }",
          "823:         }",
          "824:       }",
          "826:         if (this.showOverflow && column.showOverflow === false) {",
          "827:           warnLog('vxe.error.errConflicts', [`table.show-overflow=${this.showOverflow}`, `column.show-overflow=${column.showOverflow}`])",
          "828:         }",
          "",
          "[Removed Lines]",
          "825:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "825:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "834:         }",
          "835:       }",
          "838:         if (htmlColumn) {",
          "839:           if (!columnOpts.useKey) {",
          "840:             errLog('vxe.error.reqProp', ['column-config.useKey', 'column.type=html'])",
          "",
          "[Removed Lines]",
          "837:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "837:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "864:       tableFullColumn.forEach(handleFunc)",
          "865:     }",
          "868:       if (expandColumn && this.mouseOpts.area) {",
          "869:         errLog('vxe.error.errConflicts', ['mouse-config.area', 'column.type=expand'])",
          "870:       }",
          "",
          "[Removed Lines]",
          "867:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "867:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "936:   },",
          "938:   _getRowIndex (row: any) {",
          "940:       warnLog('vxe.error.delFunc', ['_getRowIndex', 'getVTRowIndex'])",
          "941:     }",
          "942:     return this.getVTRowIndex(row)",
          "",
          "[Removed Lines]",
          "939:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "939:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "950:   },",
          "952:   $getRowIndex (row: any) {",
          "954:       warnLog('vxe.error.delFunc', ['$getRowIndex', 'getVMRowIndex'])",
          "955:     }",
          "956:     return this.getVMRowIndex(row)",
          "",
          "[Removed Lines]",
          "953:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "953:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "971:   },",
          "973:   _getColumnIndex (column: any) {",
          "975:       warnLog('vxe.error.delFunc', ['_getColumnIndex', 'getVTColumnIndex'])",
          "976:     }",
          "977:     return this.getVTColumnIndex(column)",
          "",
          "[Removed Lines]",
          "974:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "974:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "985:   },",
          "987:   $getColumnIndex (column: any) {",
          "989:       warnLog('vxe.error.delFunc', ['$getColumnIndex', 'getVMColumnIndex'])",
          "990:     }",
          "991:     return this.getVMColumnIndex(column)",
          "",
          "[Removed Lines]",
          "988:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "988:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1072:   revertData (rows: any, field: any) {",
          "1073:     const { keepSource, tableSourceData, treeConfig } = this",
          "1074:     if (!keepSource) {",
          "1076:         warnLog('vxe.error.reqProp', ['keep-source'])",
          "1077:       }",
          "1078:       return this.$nextTick()",
          "",
          "[Removed Lines]",
          "1075:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "1075:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1983:     this.hasFixedColumn = leftList.length > 0 || rightList.length > 0",
          "1984:     Object.assign(columnStore, { leftList, centerList, rightList })",
          "1985:     if (scrollXLoad) {",
          "",
          "[Removed Lines]",
          "1986:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "1986:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2602:     if (!evntList.length && type === 'event.clearEdit') {",
          "2603:       evntList = interceptor.get('event.clearActived')",
          "2605:         if (evntList.length) {",
          "2606:           warnLog('vxe.error.delEvent', ['event.clearActived', 'event.clearEdit'])",
          "2607:         }",
          "",
          "[Removed Lines]",
          "2604:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "2604:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4405:   },",
          "4407:   getSortColumn () {",
          "4409:       warnLog('vxe.error.delFunc', ['getSortColumn', 'getSortColumns'])",
          "4410:     }",
          "4411:     return XEUtils.find(this.tableFullColumn, column => (column.sortable || column.remoteSort) && column.order)",
          "",
          "[Removed Lines]",
          "4408:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "4408:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4502:     return this.$nextTick()",
          "4503:   },",
          "4504:   reloadExpandContent (row: any) {",
          "4506:       warnLog('vxe.error.delFunc', ['reloadExpandContent', 'reloadRowExpand'])",
          "4507:     }",
          "",
          "[Removed Lines]",
          "4505:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "4505:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4664:     return !!rowExpandedMaps[rowid]",
          "4665:   },",
          "4666:   isExpandByRow (row: any) {",
          "4668:       warnLog('vxe.error.delFunc', ['isExpandByRow', 'isRowExpandByRow'])",
          "4669:     }",
          "",
          "[Removed Lines]",
          "4667:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "4667:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4781:     return this.$nextTick()",
          "4782:   },",
          "4783:   reloadTreeChilds (row: any) {",
          "4785:       warnLog('vxe.error.delFunc', ['reloadTreeChilds', 'reloadTreeExpand'])",
          "4786:     }",
          "",
          "[Removed Lines]",
          "4784:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "4784:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5549: funcs.forEach(name => {",
          "5550:   Methods[name] = function (...args: any[]) {",
          "5552:       if (!this[`_${name}`]) {",
          "5553:         if ('openExport,openPrint,exportData,openImport,importData,saveFile,readFile,importByFile,print'.split(',').includes(name)) {",
          "5554:           errLog('vxe.error.reqModule', ['VxeTableExportModule'])",
          "",
          "[Removed Lines]",
          "5551:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "5551:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import validatorMixin from '../module/validator/mixin'",
          "24: import customMixin from '../module/custom/mixin'",
          "26: const { getConfig, getI18n, renderer, globalResize, globalEvents, globalMixins } = VxeUI",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import type { VxeLoadingComponent, VxeTooltipComponent } from 'vxe-pc-ui'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489:     computeFNROpts () {",
          "490:       return Object.assign({}, getConfig().table.fnrConfig, this.fnrConfig)",
          "491:     },",
          "496:     headerCtxMenu () {",
          "497:       const headerOpts = this.ctxMenuOpts.header",
          "498:       return headerOpts && headerOpts.options ? headerOpts.options : []",
          "",
          "[Removed Lines]",
          "492:     hasTip () {",
          "493:       return true",
          "495:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "745:       fullColumnFieldData: {}",
          "746:     })",
          "749:       if (this.rowId) {",
          "750:         warnLog('vxe.error.delProp', ['row-id', 'row-config.keyField'])",
          "751:       }",
          "",
          "[Removed Lines]",
          "748:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "746:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "795:       }",
          "796:     }",
          "799:       const customOpts = this.customOpts",
          "800:       if (!this.id && this.customConfig && (customOpts.storage === true || (customOpts.storage && customOpts.storage.resizable) || (customOpts.storage && customOpts.storage.visible))) {",
          "801:         errLog('vxe.error.reqProp', ['id'])",
          "",
          "[Removed Lines]",
          "798:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "796:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "836:     }",
          "841:       if (this.contextMenu) {",
          "842:         warnLog('vxe.error.delProp', ['context-menu', 'menu-config'])",
          "",
          "[Removed Lines]",
          "839:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "837:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "880:     }",
          "884:       if (this.editConfig && !this._insert) {",
          "885:         errLog('vxe.error.reqModule', ['Edit'])",
          "886:       }",
          "",
          "[Removed Lines]",
          "883:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "881:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "927:     this.preventEvent(null, 'created')",
          "928:   },",
          "929:   mounted () {",
          "931:       const { $listeners } = this",
          "932:       if (!this.menuConfig && ($listeners['menu-click'] || $listeners['cell-menu'] || $listeners['header-cell-menu'] || $listeners['footer-cell-menu'])) {",
          "933:         warnLog('vxe.error.reqProp', ['menu-config'])",
          "",
          "[Removed Lines]",
          "930:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "928:     const $xeTable = this",
          "929:     const props = $xeTable",
          "931:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "936:         warnLog('vxe.error.reqProp', ['tooltip-config'])",
          "937:       }",
          "938:     }",
          "939:     if (this.autoResize) {",
          "940:       const handleWrapperResize = this.resizeOpts.refreshDelay ? XEUtils.throttle(() => this.recalculate(true), this.resizeOpts.refreshDelay, { leading: true, trailing: true }) : null",
          "941:       const resizeObserver = globalResize.create(handleWrapperResize",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "943:       const VxeUILoadingComponent = VxeUI.getComponent<VxeLoadingComponent>('VxeLoading')",
          "944:       const VxeUITooltipComponent = VxeUI.getComponent<VxeTooltipComponent>('VxeTooltip')",
          "946:       $xeTable.$nextTick(() => {",
          "947:         if (props.loading) {",
          "948:           if (!VxeUILoadingComponent) {",
          "949:             errLog('vxe.error.reqComp', ['vxe-loading'])",
          "950:           }",
          "951:         }",
          "952:         if ((props.showOverflow === true || props.showOverflow === 'tooltip') ||",
          "953:           (props.showHeaderOverflow === true || props.showHeaderOverflow === 'tooltip') ||",
          "954:           (props.showFooterOverflow === true || props.showFooterOverflow === 'tooltip') ||",
          "955:           props.tooltipConfig || props.editRules) {",
          "956:           if (!VxeUITooltipComponent) {",
          "957:             errLog('vxe.error.reqComp', ['vxe-tooltip'])",
          "958:           }",
          "959:         }",
          "960:       })",
          "961:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "983:     this.preventEvent(null, 'destroyed')",
          "984:   },",
          "985:   render (h: CreateElement) {",
          "986:     const {",
          "987:       _e,",
          "988:       $scopedSlots,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1010:     const VxeUILoadingComponent = VxeUI.getComponent<VxeLoadingComponent>('VxeLoading')",
          "1011:     const VxeUITooltipComponent = VxeUI.getComponent<VxeTooltipComponent>('VxeTooltip')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1021:       ctxMenuStore,",
          "1022:       ctxMenuOpts,",
          "1023:       footerTableData,",
          "1025:       columnOpts,",
          "1026:       rowOpts,",
          "1027:       checkboxOpts,",
          "",
          "[Removed Lines]",
          "1024:       hasTip,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1166:       h('vxe-loading', {",
          "1167:         class: 'vxe-table--loading',",
          "1168:         props: {",
          "1169:           value: currLoading,",
          "1170:           icon: loadingOpts.icon,",
          "1171:           text: loadingOpts.text",
          "1172:         }",
          "1173:       }, this.callSlot($scopedSlots.loading, {}, h)),",
          "",
          "[Added Lines]",
          "1192:       VxeUILoadingComponent",
          "1193:         ? h(VxeUILoadingComponent, {",
          "1194:           class: 'vxe-table--loading',",
          "1195:           props: {",
          "1196:             value: currLoading,",
          "1197:             icon: loadingOpts.icon,",
          "1198:             text: loadingOpts.text",
          "1199:           }",
          "1200:         }, this.callSlot($scopedSlots.loading, {}, h))",
          "1201:         : _e(),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1236:             ref: 'commTip',",
          "1237:             props: {",
          "1238:               isArrow: false,",
          "",
          "[Removed Lines]",
          "1234:         hasTip",
          "1235:           ? h('vxe-tooltip', {",
          "",
          "[Added Lines]",
          "1262:         VxeUITooltipComponent",
          "1263:           ? h(VxeUITooltipComponent, {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1248:             ref: 'tooltip',",
          "1249:             props: Object.assign({}, this.tipConfig, this.tooltipStore.currOpts)",
          "1250:           })",
          "",
          "[Removed Lines]",
          "1246:         hasTip",
          "1247:           ? h('vxe-tooltip', {",
          "",
          "[Added Lines]",
          "1274:         VxeUITooltipComponent",
          "1275:           ? h(VxeUITooltipComponent, {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1257:             ref: 'validTip',",
          "1258:             class: [{",
          "1259:               'old-cell-valid': editRules && getConfig().cellVaildMode === 'obsolete'",
          "",
          "[Removed Lines]",
          "1255:         hasTip && this.editRules && validOpts.showMessage && (validOpts.message === 'default' ? !height : validOpts.message === 'tooltip')",
          "1256:           ? h('vxe-tooltip', {",
          "",
          "[Added Lines]",
          "1283:         VxeUITooltipComponent && this.editRules && validOpts.showMessage && (validOpts.message === 'default' ? !height : validOpts.message === 'tooltip')",
          "1284:           ? h(VxeUITooltipComponent, {",
          "",
          "---------------"
        ],
        "packages/table/src/util.ts||packages/table/src/util.ts": [
          "File: packages/table/src/util.ts -> packages/table/src/util.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:   const groupConfig = $xecolumn ? $xecolumn.columnConfig : null",
          "152:   columnConfig.slots = _vm.$scopedSlots",
          "153:   if (groupConfig) {",
          "155:       if ($xecolumn.$options._componentTag === 'vxe-table-column') {",
          "156:         errLog('vxe.error.groupTag', [`<vxe-table-colgroup title=${$xecolumn.title} ...>`, `<vxe-table-column title=${$xecolumn.title} ...>`])",
          "157:       } else if ($xecolumn.$options._componentTag === 'vxe-column') {",
          "",
          "[Removed Lines]",
          "154:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Added Lines]",
          "154:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfe084b72fffdba51c05879442e4a0e596884e97",
      "candidate_info": {
        "commit_hash": "dfe084b72fffdba51c05879442e4a0e596884e97",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/dfe084b72fffdba51c05879442e4a0e596884e97",
        "files": [
          "packages/button/src/button.js"
        ],
        "message": "\u4fee\u590d\u4e0b\u62c9\u6309\u94ae\u663e\u793a\u95ee\u9898",
        "before_after_code_files": [
          "packages/button/src/button.js||packages/button/src/button.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/button/src/button.js||packages/button/src/button.js": [
          "File: packages/button/src/button.js -> packages/button/src/button.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     GlobalEvent.on(this, 'mousedown', this.handleGlobalMousedownEvent)",
          "103:   },",
          "104:   beforeDestroy () {",
          "106:     if (panelElem && panelElem.parentNode) {",
          "107:       panelElem.parentNode.removeChild(panelElem)",
          "108:     }",
          "",
          "[Removed Lines]",
          "105:     const panelElem = this.$refs.panel",
          "",
          "[Added Lines]",
          "105:     const panelElem = this.$refs.btnPanel",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:       btnOns.mouseenter = this.mouseenterTargetEvent",
          "122:       btnOns.mouseleave = this.mouseleaveTargetEvent",
          "126:     }",
          "127:     return downsSlot ? h('div', {",
          "128:       class: ['vxe-button--dropdown', className ? (XEUtils.isFunction(className) ? className({ $button: this }) : className) : '', {",
          "",
          "[Removed Lines]",
          "124:       panelOns.onMouseenter = this.mouseenterDropdownEvent",
          "125:       panelOns.onMouseleave = this.mouseleaveDropdownEvent",
          "",
          "[Added Lines]",
          "124:       panelOns.mouseenter = this.mouseenterDropdownEvent",
          "125:       panelOns.mouseleave = this.mouseleaveDropdownEvent",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156:         })",
          "157:       ])),",
          "158:       h('div', {",
          "160:         class: ['vxe-button--dropdown-panel', popupClassName ? (XEUtils.isFunction(popupClassName) ? popupClassName({ $button: this }) : popupClassName) : '', {",
          "161:           [`size--${vSize}`]: vSize,",
          "162:           'animat--leave': animatVisible,",
          "",
          "[Removed Lines]",
          "159:         ref: 'panel',",
          "",
          "[Added Lines]",
          "159:         ref: 'btnPanel',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238:       return contents",
          "239:     },",
          "240:     handleGlobalMousewheelEvent (evnt) {",
          "242:         this.closePanel()",
          "243:       }",
          "244:     },",
          "",
          "[Removed Lines]",
          "241:       if (this.visiblePanel && !DomTools.getEventTargetNode(evnt, this.$refs.panel).flag) {",
          "",
          "[Added Lines]",
          "241:       if (this.visiblePanel && !DomTools.getEventTargetNode(evnt, this.$refs.btnPanel).flag) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:       const { disabled, visiblePanel } = this",
          "247:       if (!disabled) {",
          "248:         const el = this.$refs.$el",
          "250:         this.isActivated = DomTools.getEventTargetNode(evnt, el).flag || DomTools.getEventTargetNode(evnt, panelElem).flag",
          "251:         if (visiblePanel && !this.isActivated) {",
          "252:           this.closePanel()",
          "",
          "[Removed Lines]",
          "249:         const panelElem = this.$refs.panel",
          "",
          "[Added Lines]",
          "249:         const panelElem = this.$refs.btnPanel",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "274:     },",
          "275:     clickDropdownEvent (evnt) {",
          "276:       const dropdownElem = evnt.currentTarget",
          "278:       const { flag, targetElem } = DomTools.getEventTargetNode(evnt, dropdownElem, 'vxe-button')",
          "279:       if (flag) {",
          "280:         if (panelElem) {",
          "",
          "[Removed Lines]",
          "277:       const panelElem = this.$refs.panel",
          "",
          "[Added Lines]",
          "277:       const panelElem = this.$refs.btnPanel",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "304:       this.$emit('mouseenter', { $event: evnt })",
          "305:     },",
          "306:     mouseenterDropdownEvent () {",
          "322:     },",
          "323:     mouseleaveDropdownEvent () {",
          "324:       this.closePanel()",
          "",
          "[Removed Lines]",
          "307:       const panelElem = this.$refs.panel",
          "308:       panelElem.dataset.active = 'Y'",
          "309:       this.animatVisible = true",
          "310:       setTimeout(() => {",
          "311:         if (panelElem.dataset.active === 'Y') {",
          "312:           this.visiblePanel = true",
          "313:           this.updateZindex()",
          "314:           this.updatePlacement()",
          "315:           setTimeout(() => {",
          "316:             if (this.visiblePanel) {",
          "317:               this.updatePlacement()",
          "318:             }",
          "319:           }, 50)",
          "320:         }",
          "321:       }, 20)",
          "",
          "[Added Lines]",
          "307:       const panelElem = this.$refs.btnPanel",
          "308:       if (panelElem) {",
          "309:         panelElem.dataset.active = 'Y'",
          "310:         this.animatVisible = true",
          "311:         setTimeout(() => {",
          "312:           if (panelElem.dataset.active === 'Y') {",
          "313:             this.visiblePanel = true",
          "314:             this.updateZindex()",
          "315:             this.updatePlacement()",
          "316:             setTimeout(() => {",
          "317:               if (this.visiblePanel) {",
          "318:                 this.updatePlacement()",
          "319:               }",
          "320:             }, 50)",
          "321:           }",
          "322:         }, 20)",
          "323:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "336:     },",
          "337:     openPanel () {",
          "338:       const { trigger } = this",
          "345:         }",
          "346:       }",
          "354:       return this.$nextTick()",
          "355:     },",
          "356:     closePanel () {",
          "358:       clearTimeout(this.showTime)",
          "359:       if (panelElem) {",
          "360:         panelElem.dataset.active = 'N'",
          "",
          "[Removed Lines]",
          "339:       const panelElem = this.$refs.panel",
          "340:       panelElem.dataset.active = 'Y'",
          "341:       if (!this.inited) {",
          "342:         this.inited = true",
          "343:         if (this.transfer) {",
          "344:           document.body.appendChild(panelElem)",
          "347:       this.showTime = setTimeout(() => {",
          "348:         if (panelElem.dataset.active === 'Y') {",
          "349:           this.mouseenterDropdownEvent()",
          "350:         } else {",
          "351:           this.animatVisible = false",
          "352:         }",
          "353:       }, trigger === 'click' ? 50 : 250)",
          "357:       const panelElem = this.$refs.panel",
          "",
          "[Added Lines]",
          "341:       const panelElem = this.$refs.btnPanel",
          "342:       if (panelElem) {",
          "343:         panelElem.dataset.active = 'Y'",
          "344:         if (!this.inited) {",
          "345:           this.inited = true",
          "346:           if (this.transfer) {",
          "347:             document.body.appendChild(panelElem)",
          "348:           }",
          "350:         this.showTime = setTimeout(() => {",
          "351:           if (panelElem.dataset.active === 'Y') {",
          "352:             this.mouseenterDropdownEvent()",
          "353:           } else {",
          "354:             this.animatVisible = false",
          "355:           }",
          "356:         }, trigger === 'click' ? 50 : 250)",
          "361:       const panelElem = this.$refs.btnPanel",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "378:       return this.$nextTick().then(() => {",
          "379:         const { $refs, transfer, placement, panelIndex } = this",
          "380:         const targetElem = $refs.xBtn",
          "382:         if (panelElem && targetElem) {",
          "383:           const targetHeight = targetElem.offsetHeight",
          "384:           const targetWidth = targetElem.offsetWidth",
          "",
          "[Removed Lines]",
          "381:         const panelElem = $refs.panel",
          "",
          "[Added Lines]",
          "385:         const panelElem = $refs.btnPanel",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "507c1447fbd0a348c009733b67d14a4fbbada388",
      "candidate_info": {
        "commit_hash": "507c1447fbd0a348c009733b67d14a4fbbada388",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/507c1447fbd0a348c009733b67d14a4fbbada388",
        "files": [
          "packages/edit/src/mixin.js",
          "packages/export/src/mixin.js",
          "packages/grid/src/grid.js",
          "packages/table/src/methods.js",
          "packages/toolbar/src/toolbar.js",
          "packages/v-x-e-table/src/conf.js",
          "styles/icon.scss",
          "styles/table.scss"
        ],
        "message": "gird \u5e9f\u5f03 proxy-config.message \u88ab showResponseMsg \u548c showActiveMsg \u66ff\u6362",
        "before_after_code_files": [
          "packages/edit/src/mixin.js||packages/edit/src/mixin.js",
          "packages/export/src/mixin.js||packages/export/src/mixin.js",
          "packages/grid/src/grid.js||packages/grid/src/grid.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/toolbar/src/toolbar.js||packages/toolbar/src/toolbar.js",
          "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js",
          "styles/icon.scss||styles/icon.scss",
          "styles/table.scss||styles/table.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/edit/src/mixin.js||packages/edit/src/mixin.js": [
          "File: packages/edit/src/mixin.js -> packages/edit/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:     _getRecordset () {",
          "371:       return {",
          "372:         insertRecords: this.getInsertRecords(),",
          "376:       }",
          "377:     },",
          "",
          "[Removed Lines]",
          "373:         removeRecords: this.getRemoveRecords(),",
          "374:         updateRecords: this.getUpdateRecords(),",
          "375:         pendingRecords: this.getPendingRecords()",
          "",
          "[Added Lines]",
          "371:       const removeRecords = this.getRemoveRecords()",
          "372:       const pendingRecords = this.getPendingRecords()",
          "373:       const delRecords = removeRecords.concat(pendingRecords)",
          "375:       const updateRecords = this.getUpdateRecords().filter(row => {",
          "376:         return !delRecords.some(item => this.eqRow(item, row))",
          "377:       })",
          "380:         removeRecords,",
          "381:         updateRecords,",
          "382:         pendingRecords",
          "",
          "---------------"
        ],
        "packages/export/src/mixin.js||packages/export/src/mixin.js": [
          "File: packages/export/src/mixin.js -> packages/export/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "828:       .then((data) => {",
          "829:         let loadRest",
          "830:         if (opts.mode === 'insert' || opts.mode === 'insertBottom') {",
          "831:           loadRest = $xetable.insert(data)",
          "832:         } else {",
          "833:           loadRest = $xetable.reloadData(data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "831:           loadRest = $xetable.insertAt(data, -1)",
          "832:         } if (opts.mode === 'insertTop') {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "895:     $xetable._importResolve = _importResolve",
          "896:     $xetable._importReject = _importReject",
          "897:     if (window.FileReader) {",
          "899:       if (options.remote) {",
          "900:         if (importMethod) {",
          "901:           Promise.resolve(importMethod({ file, options, $table: $xetable })).then(() => {",
          "",
          "[Removed Lines]",
          "898:       const options = Object.assign({ mode: 'insertBottom' }, opts, { type, filename })",
          "",
          "[Added Lines]",
          "900:       const options = Object.assign({ mode: 'insertTop' }, opts, { type, filename })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1442:     _openImport (options) {",
          "1443:       const { importOpts } = this",
          "1444:       const defOpts = Object.assign({",
          "1446:         message: true,",
          "1447:         types: XEUtils.keys(importOpts._typeMaps),",
          "1449:       }, options, importOpts)",
          "1450:       const types = defOpts.types || []",
          "1451:       const modes = defOpts.modes || []",
          "",
          "[Removed Lines]",
          "1445:         mode: 'insertBottom',",
          "1448:         modes: ['insertBottom', 'covering']",
          "",
          "[Added Lines]",
          "1447:         mode: 'insertTop',",
          "1450:         modes: ['insertTop', 'covering']",
          "",
          "---------------"
        ],
        "packages/grid/src/grid.js||packages/grid/src/grid.js": [
          "File: packages/grid/src/grid.js -> packages/grid/src/grid.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:     }",
          "369:   },",
          "370:   computed: {",
          "373:     },",
          "374:     proxyOpts () {",
          "375:       return Object.assign({}, GlobalConfig.grid.proxyConfig, this.proxyConfig)",
          "",
          "[Removed Lines]",
          "371:     isMsg () {",
          "372:       return this.proxyOpts.message !== false",
          "",
          "[Added Lines]",
          "371:     isRespMsg () {",
          "372:       const { proxyOpts } = this",
          "373:       return XEUtils.isBoolean(proxyOpts.message) ? proxyOpts.message : proxyOpts.showResponseMsg",
          "374:     },",
          "375:     isActiveMsg () {",
          "376:       return this.proxyOpts.showActiveMsg",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "573:     commitProxy (proxyTarget, ...args) {",
          "575:       const { beforeQuery, afterQuery, beforeDelete, afterDelete, beforeSave, afterSave, ajax = {} } = proxyOpts",
          "576:       const resConfigs = proxyOpts.response || proxyOpts.props || {}",
          "577:       const $xetable = $refs.xTable",
          "",
          "[Removed Lines]",
          "574:       const { $refs, toolbar, toolbarConfig, toolbarOpts, proxyOpts, tablePage, pagerConfig, editRules, formData, isMsg, validConfig, pagerOpts } = this",
          "",
          "[Added Lines]",
          "578:       const { $refs, toolbar, toolbarConfig, toolbarOpts, proxyOpts, tablePage, pagerConfig, editRules, formData, isRespMsg, isActiveMsg, validConfig, pagerOpts } = this",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "731:                   .then(rest => {",
          "732:                     this.tableLoading = false",
          "733:                     $xetable.setPendingRow(removeRecords, false)",
          "736:                       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "737:                         if (!VXETable.modal) {",
          "",
          "[Removed Lines]",
          "734:                     if (isMsg) {",
          "",
          "[Added Lines]",
          "738:                     if (isRespMsg) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "749:                   })",
          "750:                   .catch(rest => {",
          "751:                     this.tableLoading = false",
          "754:                       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "755:                         if (!VXETable.modal) {",
          "",
          "[Removed Lines]",
          "752:                     if (isMsg) {",
          "",
          "[Added Lines]",
          "756:                     if (isRespMsg) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "762:                   })",
          "763:               })",
          "764:             } else {",
          "767:                 if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "768:                   if (!VXETable.modal) {",
          "",
          "[Removed Lines]",
          "765:               if (isMsg) {",
          "",
          "[Added Lines]",
          "769:               if (isActiveMsg) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "809:                   .then(rest => {",
          "810:                     this.tableLoading = false",
          "811:                     $xetable.clearPendingRow()",
          "814:                       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "815:                         if (!VXETable.modal) {",
          "",
          "[Removed Lines]",
          "812:                     if (isMsg) {",
          "",
          "[Added Lines]",
          "816:                     if (isRespMsg) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "827:                   })",
          "828:                   .catch(rest => {",
          "829:                     this.tableLoading = false",
          "832:                       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "833:                         if (!VXETable.modal) {",
          "",
          "[Removed Lines]",
          "830:                     if (isMsg) {",
          "",
          "[Added Lines]",
          "834:                     if (isRespMsg) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "839:                     return { status: false }",
          "840:                   })",
          "841:               } else {",
          "844:                   if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "845:                     if (!VXETable.modal) {",
          "",
          "[Removed Lines]",
          "842:                 if (isMsg) {",
          "",
          "[Added Lines]",
          "846:                 if (isActiveMsg) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "883:     },",
          "884:     handleDeleteRow (code, alertKey, callback) {",
          "885:       const selectRecords = this.getCheckboxRecords()",
          "887:         if (selectRecords.length) {",
          "888:           return VXETable.modal.confirm({ id: `cfm_${code}`, content: GlobalConfig.i18n(alertKey), escClosable: true }).then(type => {",
          "889:             if (type === 'confirm') {",
          "",
          "[Removed Lines]",
          "886:       if (this.isMsg) {",
          "",
          "[Added Lines]",
          "890:       if (this.isActiveMsg) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "931:       this.$emit('toolbar-tool-click', { code: tool.code, tool, $grid: this, $event: evnt })",
          "932:     },",
          "933:     triggerPendingEvent (code) {",
          "935:       const selectRecords = this.getCheckboxRecords()",
          "936:       if (selectRecords.length) {",
          "937:         this.togglePendingRow(selectRecords)",
          "938:         this.clearCheckboxRow()",
          "939:       } else {",
          "942:           if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "943:             if (!VXETable.modal) {",
          "",
          "[Removed Lines]",
          "934:       const { isMsg } = this",
          "940:         if (isMsg) {",
          "",
          "[Added Lines]",
          "938:       const { isActiveMsg } = this",
          "944:         if (isActiveMsg) {",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:           if (childrenField === treeOpts.mapChildrenField) {",
          "393:             errLog('vxe.error.errConflicts', ['tree-config.childrenField', 'tree-config.mapChildrenField'])",
          "394:           }",
          "400:         }",
          "401:         treeData = XEUtils.toArrayTree(fullData, {",
          "402:           key: treeOpts.rowField,",
          "",
          "[Removed Lines]",
          "395:           fullData.forEach(row => {",
          "396:             if (row[childrenField] && row[childrenField].length) {",
          "397:               warnLog('vxe.error.errConflicts', ['tree-config.transform', `row.${childrenField}`])",
          "398:             }",
          "399:           })",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/toolbar/src/toolbar.js||packages/toolbar/src/toolbar.js": [
          "File: packages/toolbar/src/toolbar.js -> packages/toolbar/src/toolbar.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:           disabled: child.disabled,",
          "19:           loading: child.loading,",
          "20:           type: child.type,",
          "21:           icon: child.icon,",
          "22:           circle: child.circle,",
          "23:           round: child.round,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:           mode: child.mode,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:         disabled: item.disabled,",
          "64:         loading: item.loading,",
          "65:         type: item.type,",
          "66:         icon: item.icon,",
          "67:         circle: item.circle,",
          "68:         round: item.round,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:         mode: item.mode,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:         disabled: item.disabled,",
          "113:         loading: item.loading,",
          "114:         type: item.type,",
          "115:         icon: item.icon,",
          "116:         circle: item.circle,",
          "117:         round: item.round,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:         mode: item.mode,",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js": [
          "File: packages/v-x-e-table/src/conf.js -> packages/v-x-e-table/src/conf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:     proxyConfig: {",
          "264:       enabled: true,",
          "265:       autoLoad: true,",
          "267:       props: {",
          "268:         list: null,",
          "269:         result: 'result',",
          "",
          "[Removed Lines]",
          "266:       message: true,",
          "",
          "[Added Lines]",
          "266:       showResponseMsg: true,",
          "267:       showActiveMsg: true,",
          "",
          "---------------"
        ],
        "styles/icon.scss||styles/icon.scss": [
          "File: styles/icon.scss -> styles/icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   font-style: normal;",
          "48:   font-weight: 400;",
          "49:   font-size: 1.1em;",
          "51:   -webkit-font-smoothing: antialiased;",
          "52:   -moz-osx-font-smoothing: grayscale;",
          "53:   &.animat,",
          "",
          "[Removed Lines]",
          "50:   line-height: 1;",
          "",
          "[Added Lines]",
          "50:   line-height: 1em;",
          "",
          "---------------"
        ],
        "styles/table.scss||styles/table.scss": [
          "File: styles/table.scss -> styles/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: .vxe-cell,",
          "52:   .vxe-default-input,",
          "53:   .vxe-default-textarea {",
          "55:   }",
          "56:   .vxe-default-input,",
          "57:   .vxe-default-textarea,",
          "",
          "[Removed Lines]",
          "51: .vxe-table--filter-wrapper {",
          "54:     background-color: $vxe-table-body-background-color;",
          "",
          "[Added Lines]",
          "51: .vxe-table--filter-template {",
          "54:     background-color: var(--vxe-ui-layout-background-color);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     outline: 0;",
          "60:     padding: 0 2px;",
          "61:     width: 100%;",
          "65:     &:focus {",
          "67:     }",
          "68:     &[disabled] {",
          "69:       cursor: not-allowed;",
          "71:     }",
          "72:   }",
          "73:   .vxe-default-input,",
          "74:   .vxe-default-textarea,",
          "75:   .vxe-default-select {",
          "77:   }",
          "78:   .vxe-default-input {",
          "79:     &[type=\"date\"]::-webkit-inner-spin-button {",
          "",
          "[Removed Lines]",
          "62:     color: $vxe-font-color;",
          "63:     border-radius: $vxe-border-radius;",
          "64:     border: 1px solid $vxe-input-border-color;",
          "66:       border: 1px solid $vxe-primary-color;",
          "70:       background-color: $vxe-input-disabled-background-color;",
          "76:     height: $vxe-input-height-default;",
          "",
          "[Added Lines]",
          "62:     color: var(--vxe-ui-font-color);",
          "63:     border-radius: var(--vxe-ui-border-radius);",
          "64:     border: 1px solid var(--vxe-ui-input-border-color);",
          "66:       border: 1px solid var(--vxe-ui-font-primary-color);",
          "70:       background-color: var(--vxe-ui-input-disabled-background-color);",
          "76:     height: var(--vxe-ui-input-height-default);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:       height: 24px;",
          "85:     }",
          "86:     &::placeholder {",
          "88:     }",
          "89:   }",
          "90:   .vxe-default-textarea {",
          "91:     resize: none;",
          "92:     vertical-align: middle;",
          "93:   }",
          "97:     width: 100%;",
          "99:   }",
          "102:     padding: 0 2px;",
          "103:   }",
          "106:     resize: none;",
          "107:   }",
          "108: }",
          "110: .vxe-table--checkbox-range,",
          "",
          "[Removed Lines]",
          "87:       color: $vxe-input-placeholder-color;",
          "94:   .vxe-input,",
          "95:   .vxe-textarea,",
          "96:   .vxe-select {",
          "98:     display: block;",
          "100:   .vxe-input > .vxe-input--inner,",
          "101:   .vxe-textarea > .vxe-textarea--inner {",
          "104:   .vxe-textarea--inner,",
          "105:   .vxe-default-textarea {",
          "",
          "[Added Lines]",
          "87:       color: var(--vxe-ui-input-placeholder-color);",
          "94:   & > .vxe-input,",
          "95:   & > .vxe-textarea,",
          "96:   & > .vxe-select,",
          "97:   & > .vxe-tree-select,",
          "98:   & > .vxe-date-picker,",
          "99:   & > .vxe-number-input {",
          "102:   & > .vxe-input > .vxe-input--inner,",
          "103:   & > .vxe-textarea > .vxe-textarea--inner {",
          "106:   & > .vxe-textarea--inner,",
          "107:   & > .vxe-default-textarea {",
          "110:   & > .vxe-cell--tree-node {",
          "111:     .vxe-input,",
          "112:     .vxe-textarea,",
          "113:     .vxe-select,",
          "114:     .vxe-tree-select,",
          "115:     .vxe-date-picker,",
          "116:     .vxe-number-input {",
          "117:       width: 100%;",
          "118:     }",
          "119:     .vxe-input > .vxe-input--inner,",
          "120:     .vxe-textarea > .vxe-textarea--inner {",
          "121:       padding: 0 2px;",
          "122:     }",
          "123:     .vxe-textarea--inner,",
          "124:     .vxe-default-textarea {",
          "125:       resize: none;",
          "126:     }",
          "127:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5341753cb1abc439293e34778d723d3563710f12",
      "candidate_info": {
        "commit_hash": "5341753cb1abc439293e34778d723d3563710f12",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/5341753cb1abc439293e34778d723d3563710f12",
        "files": [
          "package.json",
          "packages/custom/src/mixin.js",
          "packages/custom/src/panel.js",
          "packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js",
          "packages/table/src/columnInfo.js",
          "packages/table/src/methods.js",
          "packages/table/src/table.js",
          "packages/v-x-e-table/src/conf.js",
          "styles/custom.scss",
          "styles/icon.scss",
          "styles/icon/iconfont.ttf",
          "styles/icon/iconfont.woff",
          "styles/icon/iconfont.woff2",
          "styles/old-icon.scss"
        ],
        "message": "\u4f18\u5316\u81ea\u5b9a\u4e49\u5217",
        "before_after_code_files": [
          "packages/custom/src/mixin.js||packages/custom/src/mixin.js",
          "packages/custom/src/panel.js||packages/custom/src/panel.js",
          "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js",
          "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js",
          "styles/custom.scss||styles/custom.scss",
          "styles/icon.scss||styles/icon.scss",
          "styles/old-icon.scss||styles/old-icon.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/custom/src/mixin.js||packages/custom/src/mixin.js": [
          "File: packages/custom/src/mixin.js -> packages/custom/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export default {",
          "2:   methods: {",
          "3:     _openCustom () {",
          "4:       const { initStore, customStore, collectColumn } = this",
          "5:       customStore.visible = true",
          "6:       initStore.custom = true",
          "8:       this.checkCustomStatus()",
          "9:       this.calcMaxHeight()",
          "10:       return this.$nextTick().then(() => this.calcMaxHeight())",
          "",
          "[Removed Lines]",
          "7:       this.customColumnList = collectColumn.slice(0)",
          "",
          "[Added Lines]",
          "1: import XEUtils from 'xe-utils'",
          "7:       const sortMaps = {}",
          "8:       const fixedMaps = {}",
          "9:       const visibleMaps = {}",
          "10:       XEUtils.eachTree(collectColumn, column => {",
          "11:         const colid = column.getKey()",
          "12:         column.renderFixed = column.fixed",
          "13:         column.renderVisible = column.visible",
          "14:         sortMaps[colid] = column.renderSortNumber",
          "15:         fixedMaps[colid] = column.fixed",
          "16:         visibleMaps[colid] = column.visible",
          "17:       }, { children: 'children' })",
          "18:       customStore.oldSortMaps = sortMaps",
          "19:       customStore.oldFixedMaps = fixedMaps",
          "20:       customStore.oldVisibleMaps = visibleMaps",
          "21:       this.customColumnList = collectColumn.slice(0)",
          "",
          "---------------"
        ],
        "packages/custom/src/panel.js||packages/custom/src/panel.js": [
          "File: packages/custom/src/panel.js -> packages/custom/src/panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   }",
          "24: }",
          "29:   const { maxHeight } = customStore",
          "31:   const colVNs = []",
          "32:   const customWrapperOns = {}",
          "",
          "[Removed Lines]",
          "26: function renderSimplePanel (h, _vm) {",
          "27:   const { $xetable, customStore } = _vm",
          "28:   const { customOpts, customColumnList, isMaxFixedColumn } = $xetable",
          "30:   const { checkMethod, visibleMethod, trigger } = customOpts",
          "",
          "[Added Lines]",
          "26: const renderSimplePanel = (h, _vm) => {",
          "27:   const { _e, $xetable, customStore } = _vm",
          "28:   const { customColumnList, customOpts, isMaxFixedColumn } = $xetable",
          "30:   const { checkMethod, visibleMethod, allowSort, allowFixed, trigger } = customOpts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {",
          "39:     const isVisible = visibleMethod ? visibleMethod({ column }) : true",
          "40:     if (isVisible) {",
          "42:       const isIndeterminate = column.halfVisible",
          "43:       const isColGroup = column.children && column.children.length",
          "44:       const colTitle = formatText(column.getTitle(), 1)",
          "",
          "[Removed Lines]",
          "41:       const isChecked = column.visible",
          "",
          "[Added Lines]",
          "41:       const isChecked = column.renderVisible",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:       colVNs.push(",
          "47:         h('li', {",
          "48:           key: column.id,",
          "49:           class: ['vxe-table-custom--option', `level--${column.level}`, {",
          "50:             'is--group': isColGroup",
          "52:         }, [",
          "53:           h('div', {",
          "55:             class: ['vxe-table-custom--checkbox-option', {",
          "56:               'is--checked': isChecked,",
          "57:               'is--indeterminate': isIndeterminate,",
          "58:               'is--disabled': isDisabled",
          "59:             }],",
          "60:             on: {",
          "61:               click: () => {",
          "62:                 if (!isDisabled) {",
          "63:                   _vm.changeCheckboxOption(column)",
          "64:                 }",
          "65:               }",
          "67:             }",
          "68:           }, [",
          "69:             h('span', {",
          "70:               class: ['vxe-checkbox--icon', isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "75:           ]),",
          "90:                 }",
          "104:                 }",
          "108:         ])",
          "109:       )",
          "110:     }",
          "",
          "[Removed Lines]",
          "51:           }]",
          "54:             title: colTitle,",
          "71:             }),",
          "72:             h('span', {",
          "73:               class: 'vxe-checkbox--label'",
          "74:             }, colTitle)",
          "76:           !parent && customOpts.allowFixed ? h('div', {",
          "77:             class: 'vxe-table-custom--fixed-option'",
          "78:           }, [",
          "79:             h('span', {",
          "80:               class: ['vxe-table-custom--fixed-left-option', column.fixed === 'left' ? GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_LEFT_ACTIVED : GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_LEFT, {",
          "81:                 'is--checked': column.fixed === 'left',",
          "82:                 'is--disabled': isMaxFixedColumn && !column.fixed",
          "83:               }],",
          "84:               attrs: {",
          "85:                 title: GlobalConfig.i18n(column.fixed === 'left' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedLeft')",
          "86:               },",
          "87:               on: {",
          "88:                 click: () => {",
          "89:                   _vm.changeFixedOption(column, 'left')",
          "91:               }",
          "92:             }),",
          "93:             h('span', {",
          "94:               class: ['vxe-table-custom--fixed-right-option', column.fixed === 'right' ? GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVED : GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_RIGHT, {",
          "95:                 'is--checked': column.fixed === 'right',",
          "96:                 'is--disabled': isMaxFixedColumn && !column.fixed",
          "97:               }],",
          "98:               attrs: {",
          "99:                 title: GlobalConfig.i18n(column.fixed === 'right' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedRight')",
          "100:               },",
          "101:               on: {",
          "102:                 click: () => {",
          "103:                   _vm.changeFixedOption(column, 'right')",
          "105:               }",
          "106:             })",
          "107:           ]) : null",
          "",
          "[Added Lines]",
          "49:           attrs: {",
          "50:             colid: column.id",
          "51:           },",
          "54:           }],",
          "55:           on: {",
          "56:             dragstart: _vm.sortDragstartEvent,",
          "57:             dragend: _vm.sortDragendEvent,",
          "58:             dragover: _vm.sortDragoverEvent",
          "59:           }",
          "67:             attrs: {",
          "68:               title: GlobalConfig.i18n('vxe.custom.setting.colVisible')",
          "69:             },",
          "80:             })",
          "82:           allowSort && column.level === 1",
          "83:             ? h('div', {",
          "84:               class: 'vxe-table-custom--sort-option'",
          "85:             }, [",
          "86:               h('span', {",
          "87:                 class: 'vxe-table-custom--sort-btn',",
          "88:                 attrs: {",
          "89:                   title: GlobalConfig.i18n('vxe.custom.setting.sortHelpTip')",
          "90:                 },",
          "91:                 on: {",
          "92:                   mousedown: _vm.sortMousedownEvent,",
          "93:                   mouseup: _vm.sortMouseupEvent",
          "95:               }, [",
          "96:                 h('i', {",
          "97:                   class: GlobalConfig.icon.TABLE_CUSTOM_SORT",
          "98:                 })",
          "99:               ])",
          "100:             ])",
          "101:             : _e(),",
          "102:           h('div', {",
          "103:             class: 'vxe-table-custom--checkbox-label',",
          "104:             attrs: {",
          "105:               title: colTitle",
          "106:             }",
          "107:           }, colTitle),",
          "108:           !parent && allowFixed",
          "109:             ? h('div', {",
          "110:               class: 'vxe-table-custom--fixed-option'",
          "111:             }, [",
          "112:               h('span', {",
          "113:                 class: ['vxe-table-custom--fixed-left-option', column.renderFixed === 'left' ? GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_LEFT_ACTIVE : GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_LEFT, {",
          "114:                   'is--checked': column.renderFixed === 'left',",
          "115:                   'is--disabled': isMaxFixedColumn && !column.renderFixed",
          "116:                 }],",
          "117:                 attrs: {",
          "118:                   title: GlobalConfig.i18n(column.renderFixed === 'left' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedLeft')",
          "119:                 },",
          "120:                 on: {",
          "121:                   click: () => {",
          "122:                     _vm.changeFixedOption(column, 'left')",
          "123:                   }",
          "125:               }),",
          "126:               h('span', {",
          "127:                 class: ['vxe-table-custom--fixed-right-option', column.renderFixed === 'right' ? GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVE : GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_RIGHT, {",
          "128:                   'is--checked': column.renderFixed === 'right',",
          "129:                   'is--disabled': isMaxFixedColumn && !column.renderFixed",
          "130:                 }],",
          "131:                 attrs: {",
          "132:                   title: GlobalConfig.i18n(column.renderFixed === 'right' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedRight')",
          "133:                 },",
          "134:                 on: {",
          "136:                   click: () => {",
          "137:                     _vm.changeFixedOption(column, 'right')",
          "138:                   }",
          "139:                 }",
          "140:               })",
          "141:             ])",
          "142:             : _e()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:     class: ['vxe-table-custom-wrapper', {",
          "117:       'is--active': customStore.visible",
          "118:     }]",
          "126:         h('div', {",
          "137:         }, [",
          "171: }",
          "175:   const { customOpts, customColumnList, columnOpts, isMaxFixedColumn } = $xetable",
          "177:   const trVNs = []",
          "178:   XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {",
          "179:     const isVisible = visibleMethod ? visibleMethod({ column }) : true",
          "180:     if (isVisible) {",
          "182:       const isIndeterminate = column.halfVisible",
          "183:       const colTitle = formatText(column.getTitle(), 1)",
          "184:       const isColGroup = column.children && column.children.length",
          "",
          "[Removed Lines]",
          "119:   }, [",
          "120:     h('ul', {",
          "121:       class: 'vxe-table-custom--header'",
          "122:     }, [",
          "123:       h('li', {",
          "124:         class: 'vxe-table-custom--option'",
          "125:       }, [",
          "127:           class: ['vxe-table-custom--checkbox-option', {",
          "128:             'is--checked': isAllChecked,",
          "129:             'is--indeterminate': isAllIndeterminate",
          "130:           }],",
          "131:           attrs: {",
          "132:             title: GlobalConfig.i18n('vxe.table.allTitle')",
          "133:           },",
          "134:           on: {",
          "135:             click: _vm.allCustomEvent",
          "136:           }",
          "138:           h('span', {",
          "139:             class: ['vxe-checkbox--icon', isAllIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "140:           }),",
          "141:           h('span', {",
          "142:             class: 'vxe-checkbox--label'",
          "143:           }, GlobalConfig.i18n('vxe.toolbar.customAll'))",
          "144:         ])",
          "145:       ])",
          "146:     ]),",
          "147:     h('ul', {",
          "148:       class: 'vxe-table-custom--body',",
          "149:       style: maxHeight ? {",
          "150:         maxHeight: `${maxHeight}px`",
          "151:       } : {},",
          "152:       on: customWrapperOns",
          "153:     }, colVNs),",
          "154:     customOpts.showFooter ? h('div', {",
          "155:       class: 'vxe-table-custom--footer'",
          "156:     }, [",
          "157:       h('button', {",
          "158:         class: 'btn--reset',",
          "159:         on: {",
          "160:           click: _vm.resetCustomEvent",
          "161:         }",
          "162:       }, customOpts.resetButtonText || GlobalConfig.i18n('vxe.toolbar.customRestore')),",
          "163:       h('button', {",
          "164:         class: 'btn--confirm',",
          "165:         on: {",
          "166:           click: _vm.confirmCustomEvent",
          "167:         }",
          "168:       }, customOpts.confirmButtonText || GlobalConfig.i18n('vxe.toolbar.customConfirm'))",
          "169:     ]) : null",
          "170:   ])",
          "173: function renderPopupPanel (h, _vm) {",
          "174:   const { $xetable, customStore } = _vm",
          "176:   const { checkMethod, visibleMethod } = customOpts",
          "181:       const isChecked = column.visible",
          "",
          "[Added Lines]",
          "154:   }, customStore.visible",
          "155:     ? [",
          "156:         h('ul', {",
          "157:           class: 'vxe-table-custom--header'",
          "158:         }, [",
          "159:           h('li', {",
          "160:             class: 'vxe-table-custom--option'",
          "161:           }, [",
          "162:             h('div', {",
          "163:               class: ['vxe-table-custom--checkbox-option', {",
          "164:                 'is--checked': isAllChecked,",
          "165:                 'is--indeterminate': isAllIndeterminate",
          "166:               }],",
          "167:               attrs: {",
          "168:                 title: GlobalConfig.i18n('vxe.table.allTitle')",
          "169:               },",
          "170:               on: {",
          "171:                 click: _vm.allCustomEvent",
          "172:               }",
          "173:             }, [",
          "174:               h('span', {",
          "175:                 class: ['vxe-checkbox--icon', isAllIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "176:               }),",
          "177:               h('span', {",
          "178:                 class: 'vxe-checkbox--label'",
          "179:               }, GlobalConfig.i18n('vxe.toolbar.customAll'))",
          "180:             ])",
          "181:           ])",
          "182:         ]),",
          "184:           ref: 'bodyElemRef',",
          "185:           class: 'vxe-table-custom--list-wrapper'",
          "187:           h('transition-group', {",
          "188:             class: 'vxe-table-custom--body',",
          "189:             props: {",
          "190:               name: 'vxe-table-custom--list',",
          "191:               tag: 'ul'",
          "192:             },",
          "193:             style: maxHeight",
          "194:               ? {",
          "195:                   maxHeight: `${maxHeight}px`",
          "196:                 }",
          "197:               : {},",
          "198:             on: customWrapperOns",
          "199:           }, colVNs),",
          "200:           h('div', {",
          "201:             ref: 'dragHintElemRef',",
          "202:             class: 'vxe-table-custom-popup--drag-hint'",
          "203:           }, GlobalConfig.i18n('vxe.custom.cstmDragTarget', [_vm.dragColumn ? _vm.dragColumn.getTitle() : '']))",
          "204:         ]),",
          "205:         customOpts.showFooter",
          "206:           ? h('div', {",
          "207:             class: 'vxe-table-custom--footer'",
          "208:           }, [",
          "209:             h('button', {",
          "210:               class: 'btn--reset',",
          "211:               on: {",
          "212:                 click: _vm.resetCustomEvent",
          "213:               }",
          "214:             }, customOpts.resetButtonText || GlobalConfig.i18n('vxe.table.customRestore')),",
          "215:             customOpts.immediate",
          "216:               ? _e()",
          "217:               : h('button', {",
          "218:                 class: 'btn--cancel',",
          "219:                 on: {",
          "220:                   click: _vm.cancelCustomEvent",
          "221:                 }",
          "222:               }, customOpts.resetButtonText || GlobalConfig.i18n('vxe.table.customCancel')),",
          "223:             h('button', {",
          "224:               class: 'btn--confirm',",
          "225:               on: {",
          "226:                 click: _vm.confirmCustomEvent",
          "227:               }",
          "228:             }, customOpts.confirmButtonText || GlobalConfig.i18n('vxe.table.customConfirm'))",
          "229:           ])",
          "230:           : null",
          "231:       ]",
          "232:     : [])",
          "235: const renderPopupPanel = (h, _vm) => {",
          "236:   const { _e, $xetable, customStore } = _vm",
          "238:   const { allowSort, allowFixed, checkMethod, visibleMethod } = customOpts",
          "243:       const isChecked = column.renderVisible",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "186:       trVNs.push(",
          "187:         h('tr', {",
          "188:           key: column.id,",
          "192:           attrs: {",
          "193:             colid: column.id",
          "194:           },",
          "195:           on: {",
          "196:             dragstart: _vm.sortDragstartEvent,",
          "197:             dragend: _vm.sortDragendEvent,",
          "198:             dragover: _vm.sortDragoverEvent",
          "199:           }",
          "200:         }, [",
          "226:           h('td', {",
          "227:             class: 'vxe-table-custom-popup--column-item col--visible'",
          "228:           }, [",
          "",
          "[Removed Lines]",
          "189:           class: [`vxe-table-custom-popup--row level--${column.level}`, {",
          "190:             'is--group': isColGroup",
          "191:           }],",
          "201:           h('td', {",
          "202:             class: 'vxe-table-custom-popup--column-item col--sort'",
          "203:           }, [",
          "204:             column.level === 1 ? h('span', {",
          "205:               class: 'vxe-table-custom-popup--column-sort-btn',",
          "206:               on: {",
          "207:                 mousedown: _vm.sortMousedownEvent,",
          "208:                 mouseup: _vm.sortMouseupEvent",
          "209:               }",
          "210:             }, [",
          "211:               h('i', {",
          "212:                 class: 'vxe-icon-sort'",
          "213:               })",
          "214:             ]) : null",
          "215:           ]),",
          "216:           h('td', {",
          "217:             class: 'vxe-table-custom-popup--column-item col--name'",
          "218:           }, [",
          "219:             h('div', {",
          "220:               class: 'vxe-table-custom-popup--name',",
          "221:               attrs: {",
          "222:                 title: colTitle",
          "223:               }",
          "224:             }, colTitle)",
          "225:           ]),",
          "",
          "[Added Lines]",
          "254:           class: [`vxe-table-custom-popup--row level--${column.level}`, {",
          "255:             'is--group': isColGroup",
          "256:           }],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "232:                 'is--indeterminate': isIndeterminate,",
          "233:                 'is--disabled': isDisabled",
          "234:               }],",
          "235:               on: {",
          "236:                 click: () => {",
          "237:                   if (!isDisabled) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272:               attrs: {",
          "273:                 title: GlobalConfig.i18n('vxe.custom.setting.colVisible')",
          "274:               },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "245:               })",
          "246:             ])",
          "247:           ]),",
          "248:           h('td', {",
          "250:           }, [",
          "269:               }",
          "272:         ])",
          "273:       )",
          "274:     }",
          "275:   })",
          "276:   return h('vxe-modal', {",
          "277:     key: 'popup',",
          "278:     props: {",
          "279:       value: customStore.visible,",
          "280:       title: GlobalConfig.i18n('vxe.custom.cstmTitle'),",
          "282:       width: '40vw',",
          "283:       minWidth: 520,",
          "284:       height: '50vh',",
          "",
          "[Removed Lines]",
          "249:             class: 'vxe-table-custom-popup--column-item col--fixed'",
          "251:             !parent && customOpts.allowFixed ? h('vxe-radio-group', {",
          "252:               props: {",
          "253:                 value: column.fixed || '',",
          "254:                 type: 'button',",
          "255:                 size: 'mini',",
          "256:                 options: [",
          "257:                   { label: GlobalConfig.i18n('vxe.custom.setting.fixedLeft'), value: 'left', disabled: isMaxFixedColumn },",
          "258:                   { label: GlobalConfig.i18n('vxe.custom.setting.fixedUnset'), value: '' },",
          "259:                   { label: GlobalConfig.i18n('vxe.custom.setting.fixedRight'), value: 'right', disabled: isMaxFixedColumn }",
          "260:                 ]",
          "261:               },",
          "262:               on: {",
          "263:                 input (value) {",
          "264:                   column.fixed = value",
          "265:                 },",
          "266:                 change () {",
          "267:                   _vm.changePopupFixedOption(column)",
          "268:                 }",
          "270:             }) : null",
          "271:           ])",
          "281:       className: 'vxe-table-custom-popup-wrapper vxe-table--ignore-clear',",
          "",
          "[Added Lines]",
          "288:           allowSort",
          "289:             ? h('td', {",
          "290:               class: 'vxe-table-custom-popup--column-item col--sort'",
          "291:             }, [",
          "292:               column.level === 1",
          "293:                 ? h('span', {",
          "294:                   class: 'vxe-table-custom-popup--column-sort-btn',",
          "295:                   attrs: {",
          "296:                     title: GlobalConfig.i18n('vxe.custom.setting.sortHelpTip')",
          "297:                   },",
          "298:                   on: {",
          "299:                     mousedown: _vm.sortMousedownEvent,",
          "300:                     mouseup: _vm.sortMouseupEvent",
          "301:                   }",
          "302:                 }, [",
          "303:                   h('i', {",
          "304:                     class: GlobalConfig.icon.TABLE_CUSTOM_SORT",
          "305:                   })",
          "306:                 ])",
          "307:                 : null",
          "308:             ])",
          "309:             : _e(),",
          "311:             class: 'vxe-table-custom-popup--column-item col--name'",
          "313:             h('div', {",
          "314:               class: 'vxe-table-custom-popup--name',",
          "315:               attrs: {",
          "316:                 title: colTitle",
          "318:             }, colTitle)",
          "319:           ]),",
          "320:           allowFixed",
          "321:             ? h('td', {",
          "322:               class: 'vxe-table-custom-popup--column-item col--fixed'",
          "323:             }, [",
          "324:               !parent",
          "325:                 ? h('vxe-radio-group', {",
          "326:                   props: {",
          "327:                     value: column.renderFixed || '',",
          "328:                     type: 'button',",
          "329:                     size: 'mini',",
          "330:                     options: [",
          "331:                       { label: GlobalConfig.i18n('vxe.custom.setting.fixedLeft'), value: 'left', disabled: isMaxFixedColumn },",
          "332:                       { label: GlobalConfig.i18n('vxe.custom.setting.fixedUnset'), value: '' },",
          "333:                       { label: GlobalConfig.i18n('vxe.custom.setting.fixedRight'), value: 'right', disabled: isMaxFixedColumn }",
          "334:                     ]",
          "335:                   },",
          "336:                   on: {",
          "337:                     input (value) {",
          "338:                       column.renderFixed = value",
          "339:                     }",
          "343:                   }",
          "344:                 })",
          "345:                 : null",
          "346:             ])",
          "347:             : _e()",
          "352:   const isAllChecked = customStore.isAll",
          "353:   const isAllIndeterminate = customStore.isIndeterminate",
          "357:       className: 'vxe-table-custom-popup-wrapper vxe-table--ignore-clear',",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "311:                     width: '80px'",
          "312:                   }",
          "313:                 }),",
          "315:                 h('col', {",
          "316:                   style: {",
          "318:                   }",
          "319:                 }),",
          "325:               ]),",
          "326:               h('thead', {}, [",
          "327:                 h('tr', {}, [",
          "328:                   h('th', {}, [",
          "336:                       },",
          "343:                       }",
          "345:                   ]),",
          "346:                   h('th', {}, GlobalConfig.i18n('vxe.custom.setting.colTitle')),",
          "349:                 ])",
          "350:               ]),",
          "351:               h('transition-group', {",
          "",
          "[Removed Lines]",
          "314:                 h('col'),",
          "317:                     width: '80px'",
          "320:                 h('col', {",
          "321:                   style: {",
          "322:                     width: '200px'",
          "323:                   }",
          "324:                 })",
          "329:                     h('span', {",
          "330:                       class: 'vxe-table-custom-popup--table-sort-help-title'",
          "331:                     }, GlobalConfig.i18n('vxe.custom.setting.colSort')),",
          "332:                     h('vxe-tooltip', {",
          "333:                       props: {",
          "334:                         enterable: true,",
          "335:                         content: '\u70b9\u51fb\u5e76\u62d6\u52a8\u56fe\u6807\u53ef\u4ee5\u8c03\u6574\u5217\u7684\u6392\u5e8f'",
          "337:                       scopedSlots: {",
          "338:                         default: () => {",
          "339:                           return h('i', {",
          "340:                             class: 'vxe-table-custom-popup--table-sort-help-icon vxe-icon-question-circle-fill'",
          "341:                           })",
          "342:                         }",
          "344:                     })",
          "347:                   h('th', {}, GlobalConfig.i18n('vxe.custom.setting.colVisible')),",
          "348:                   h('th', {}, GlobalConfig.i18n('vxe.custom.setting.colFixed', [columnOpts.maxFixedSize || 0]))",
          "",
          "[Added Lines]",
          "392:                 allowSort",
          "393:                   ? h('col', {",
          "394:                     style: {",
          "395:                       width: '80px'",
          "396:                     }",
          "397:                   })",
          "398:                   : _e(),",
          "401:                     minWidth: '120px'",
          "404:                 allowFixed",
          "405:                   ? h('col', {",
          "406:                     style: {",
          "407:                       width: '200px'",
          "408:                     }",
          "409:                   })",
          "410:                   : _e()",
          "415:                     h('div', {",
          "416:                       class: ['vxe-table-custom--checkbox-option', {",
          "417:                         'is--checked': isAllChecked,",
          "418:                         'is--indeterminate': isAllIndeterminate",
          "419:                       }],",
          "420:                       attrs: {",
          "421:                         title: GlobalConfig.i18n('vxe.table.allTitle')",
          "423:                       on: {",
          "424:                         click: _vm.allCustomEvent",
          "427:                     }, [",
          "428:                       h('span', {",
          "429:                         class: ['vxe-checkbox--icon', isAllIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "430:                       }),",
          "431:                       h('span', {",
          "432:                         class: 'vxe-checkbox--label'",
          "433:                       }, GlobalConfig.i18n('vxe.toolbar.customAll'))",
          "434:                     ])",
          "436:                   allowSort",
          "437:                     ? h('th', {}, [",
          "438:                       h('span', {",
          "439:                         class: 'vxe-table-custom-popup--table-sort-help-title'",
          "440:                       }, GlobalConfig.i18n('vxe.custom.setting.colSort')),",
          "441:                       h('vxe-tooltip', {",
          "442:                         props: {",
          "443:                           enterable: true,",
          "444:                           content: GlobalConfig.i18n('vxe.custom.setting.sortHelpTip')",
          "445:                         },",
          "446:                         scopedSlots: {",
          "447:                           default: () => {",
          "448:                             return h('i', {",
          "449:                               class: 'vxe-table-custom-popup--table-sort-help-icon vxe-icon-question-circle-fill'",
          "450:                             })",
          "451:                           }",
          "452:                         }",
          "453:                       })",
          "454:                     ])",
          "455:                     : _e(),",
          "457:                   allowFixed",
          "458:                     ? h('th', {}, GlobalConfig.i18n('vxe.custom.setting.colFixed', [columnOpts.maxFixedSize || 0]))",
          "459:                     : _e()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "372:               content: customOpts.resetButtonText || GlobalConfig.i18n('vxe.custom.cstmRestore')",
          "373:             },",
          "374:             on: {",
          "376:             }",
          "377:           }),",
          "378:           h('vxe-button', {",
          "",
          "[Removed Lines]",
          "375:               click: _vm.resetPopupCustomEvent",
          "",
          "[Added Lines]",
          "486:               click: _vm.resetCustomEvent",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "441:         }",
          "442:       }, 300)",
          "443:     },",
          "444:     confirmCustomEvent  (evnt) {",
          "445:       const { $xetable } = this",
          "446:       $xetable.closeCustom()",
          "447:       $xetable.emitCustomEvent('confirm', evnt)",
          "448:     },",
          "449:     cancelCustomEvent  (evnt) {",
          "450:       const { $xetable } = this",
          "451:       $xetable.closeCustom()",
          "452:       $xetable.emitCustomEvent('cancel', evnt)",
          "453:     },",
          "455:       const { $xetable } = this",
          "456:       $xetable.resetColumn(true)",
          "457:       $xetable.closeCustom()",
          "458:       $xetable.emitCustomEvent('reset', evnt)",
          "459:     },",
          "460:     resetPopupCustomEvent  (evnt) {",
          "461:       if (VXETable.modal) {",
          "",
          "[Removed Lines]",
          "454:     resetCustomEvent  (evnt) {",
          "",
          "[Added Lines]",
          "555:     getStoreData () {",
          "556:       return {}",
          "557:     },",
          "558:     handleSaveStore (type) {",
          "559:       const { $xetable } = this",
          "560:       const { id, customOpts } = $xetable",
          "561:       const { storage, updateStore } = customOpts",
          "562:       if (storage && id && updateStore) {",
          "563:         updateStore({",
          "564:           id,",
          "565:           type,",
          "566:           storeData: this.getStoreData()",
          "567:         })",
          "568:       }",
          "569:     },",
          "572:       const { customColumnList } = $xetable",
          "573:       customColumnList.forEach((column, index) => {",
          "574:         const sortIndex = index + 1",
          "575:         column.renderSortNumber = sortIndex",
          "576:         column.fixed = column.renderFixed",
          "577:         column.visible = column.renderVisible",
          "578:       })",
          "581:       this.handleSaveStore('confirm')",
          "585:       const { customStore, customColumnList } = $xetable",
          "586:       const { oldSortMaps, oldFixedMaps, oldVisibleMaps } = customStore",
          "587:       XEUtils.eachTree(customColumnList, column => {",
          "588:         const colid = column.getKey()",
          "589:         const visible = !!oldVisibleMaps[colid]",
          "590:         const fixed = oldFixedMaps[colid] || ''",
          "591:         column.renderVisible = visible",
          "592:         column.visible = visible",
          "593:         column.renderFixed = fixed",
          "594:         column.fixed = fixed",
          "595:         column.renderSortNumber = oldSortMaps[colid] || 0",
          "596:       }, { children: 'children' })",
          "600:     handleResetCustomEvent (evnt) {",
          "605:       this.handleSaveStore('confirm')",
          "606:     },",
          "607:     resetCustomEvent  (evnt) {",
          "608:       if (VXETable.modal) {",
          "609:         VXETable.modal.confirm({",
          "610:           content: GlobalConfig.i18n('vxe.custom.cstmConfirmRestore'),",
          "611:           className: 'vxe-table--ignore-clear',",
          "612:           escClosable: true",
          "613:         }).then(type => {",
          "614:           if (type === 'confirm') {",
          "615:             this.handleResetCustomEvent(evnt)",
          "616:           }",
          "617:         })",
          "618:       } else {",
          "619:         this.handleResetCustomEvent(evnt)",
          "620:       }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "488:     changeCheckboxOption (column) {",
          "489:       const { $xetable } = this",
          "490:       const { customOpts } = $xetable",
          "492:       XEUtils.eachTree([column], (item) => {",
          "494:         item.halfVisible = false",
          "495:       })",
          "496:       this.handleOptionCheck(column)",
          "",
          "[Removed Lines]",
          "491:       const isChecked = !column.visible",
          "493:         item.visible = isChecked",
          "",
          "[Added Lines]",
          "653:       const isChecked = !column.renderVisible",
          "655:         item.renderVisible = isChecked",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "502:     changeFixedOption  (column, colFixed) {",
          "503:       const { $xetable } = this",
          "504:       const { isMaxFixedColumn } = $xetable",
          "507:       } else {",
          "510:         }",
          "511:       }",
          "512:     },",
          "520:     allCustomEvent () {",
          "521:       const { $xetable, customStore } = this",
          "522:       const { customOpts, customColumnList } = $xetable",
          "",
          "[Removed Lines]",
          "505:       if (column.fixed === colFixed) {",
          "506:         $xetable.clearColumnFixed(column)",
          "508:         if (!isMaxFixedColumn || column.fixed) {",
          "509:           $xetable.setColumnFixed(column, colFixed)",
          "513:     changePopupFixedOption  (column) {",
          "514:       const { $xetable } = this",
          "515:       const { isMaxFixedColumn } = $xetable",
          "516:       if (!isMaxFixedColumn) {",
          "517:         $xetable.setColumnFixed(column, column.fixed)",
          "518:       }",
          "519:     },",
          "",
          "[Added Lines]",
          "667:       if (column.renderFixed === colFixed) {",
          "668:         column.renderFixed = ''",
          "671:         if (!isMaxFixedColumn || column.renderFixed) {",
          "672:           column.renderFixed = colFixed",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "524:       const isAll = !customStore.isAll",
          "525:       XEUtils.eachTree(customColumnList, (column) => {",
          "526:         if (!checkMethod || checkMethod({ column })) {",
          "528:           column.halfVisible = false",
          "529:         }",
          "530:       })",
          "",
          "[Removed Lines]",
          "527:           column.visible = isAll",
          "",
          "[Added Lines]",
          "691:           column.renderVisible = isAll",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "598:       }",
          "599:       removeClass(trEl, 'active--drag-target')",
          "600:       removeClass(trEl, 'active--drag-origin')",
          "603:     },",
          "604:     sortDragoverEvent  (evnt) {",
          "605:       const { $xetable, prevDropTrEl } = this",
          "",
          "[Removed Lines]",
          "602:       this.updateColumnSort()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "619:         this.prevDropTrEl = trEl",
          "620:       }",
          "621:       updateDropHint(this, evnt)",
          "631:     }",
          "632:   }",
          "633: }",
          "",
          "[Removed Lines]",
          "622:     },",
          "623:     updateColumnSort () {",
          "624:       const { $xetable } = this",
          "625:       const { customColumnList } = $xetable",
          "627:       customColumnList.forEach((column, index) => {",
          "628:         const sortIndex = index + 1",
          "629:         column.renderSortNumber = sortIndex",
          "630:       })",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js": [
          "File: packages/locale/lang/en-US.js -> packages/locale/lang/en-US.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       customTitle: 'Column settings',",
          "61:       customAll: 'All',",
          "62:       customConfirm: 'Confirm',",
          "64:       maxFixedCol: 'The maximum number of Freeze columns cannot exceed {0}'",
          "65:     },",
          "66:     grid: {",
          "",
          "[Removed Lines]",
          "63:       customRestore: 'Reset',",
          "",
          "[Added Lines]",
          "63:       customCancel: 'Cancel',",
          "64:       customRestore: 'Restore default',",
          "",
          "---------------"
        ],
        "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js": [
          "File: packages/locale/lang/es-ES.js -> packages/locale/lang/es-ES.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       customTitle: 'Configuraciones de columna',",
          "61:       customAll: 'Todo',",
          "62:       customConfirm: 'Confirmar',",
          "64:       maxFixedCol: 'The maximum number of Freeze columns cannot exceed {0}'",
          "65:     },",
          "66:     grid: {",
          "",
          "[Removed Lines]",
          "63:       customRestore: 'Restaurar',",
          "",
          "[Added Lines]",
          "63:       customCancel: 'Cancel',",
          "64:       customRestore: 'Restore default',",
          "",
          "---------------"
        ],
        "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js": [
          "File: packages/locale/lang/ja-JP.js -> packages/locale/lang/ja-JP.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       customTitle: '\u5217\u8a2d\u5b9a',",
          "61:       customAll: '\u5168\u90e8',",
          "62:       customConfirm: 'OK',",
          "64:       maxFixedCol: '\u6700\u5927\u56fa\u5b9a\u5217\u6570\u304c {0} \u3067\u3059\u3002'",
          "65:     },",
          "66:     grid: {",
          "",
          "[Removed Lines]",
          "63:       customRestore: '\u30ea\u30bb\u30c3\u30c8',",
          "",
          "[Added Lines]",
          "63:       customCancel: 'Cancel',",
          "64:       customRestore: 'Restore default',",
          "",
          "---------------"
        ],
        "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js": [
          "File: packages/locale/lang/pt-BR.js -> packages/locale/lang/pt-BR.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       customTitle: 'Configura\u00e7\u00f5es de coluna',",
          "61:       customAll: 'Todos',",
          "62:       customConfirm: 'Confirmar',",
          "64:       maxFixedCol: 'The maximum number of Freeze columns cannot exceed {0}'",
          "65:     },",
          "66:     grid: {",
          "",
          "[Removed Lines]",
          "63:       customRestore: 'Redefinir',",
          "",
          "[Added Lines]",
          "63:       customCancel: 'Cancel',",
          "64:       customRestore: 'Restore default',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js": [
          "File: packages/locale/lang/zh-CN.js -> packages/locale/lang/zh-CN.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       customTitle: '\u5217\u8bbe\u7f6e',",
          "61:       customAll: '\u5168\u90e8',",
          "62:       customConfirm: '\u786e\u8ba4',",
          "64:       maxFixedCol: '\u6700\u5927\u51bb\u7ed3\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a'",
          "65:     },",
          "66:     grid: {",
          "",
          "[Removed Lines]",
          "63:       customRestore: '\u91cd\u7f6e',",
          "",
          "[Added Lines]",
          "63:       customCancel: '\u53d6\u6d88',",
          "64:       customRestore: '\u6062\u590d\u9ed8\u8ba4',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js": [
          "File: packages/locale/lang/zh-TC.js -> packages/locale/lang/zh-TC.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       customTitle: '\u5217\u8a2d\u5b9a',",
          "61:       customAll: '\u5168\u90e8',",
          "62:       customConfirm: '\u78ba\u8a8d',",
          "64:       maxFixedCol: '\u6700\u5927\u51bb\u7ed3\u5217\u7684\u6578\u91cf\u4e0d\u80fd\u8d85\u904e {0} \u500b'",
          "65:     },",
          "66:     grid: {",
          "",
          "[Removed Lines]",
          "63:       customRestore: '\u91cd\u7f6e',",
          "",
          "[Added Lines]",
          "63:       customCancel: '\u53d6\u6d88',",
          "64:       customRestore: '\u6062\u590d\u9ed8\u8ba4',",
          "",
          "---------------"
        ],
        "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js": [
          "File: packages/table/src/columnInfo.js -> packages/table/src/columnInfo.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:       sortNumber: 0, // \u7528\u4e8e\u8bb0\u5f55\u81ea\u5b9a\u4e49\u5217\u987a\u5e8f",
          "122:       renderSortNumber: 0, // \u7528\u4e8e\u8bb0\u5f55\u81ea\u5b9a\u4e49\u5217\u987a\u5e8f",
          "124:       renderWidth: 0,",
          "125:       renderHeight: 0,",
          "126:       resizeWidth: 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:       renderFixed: '',",
          "125:       renderVisible: false,",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1630:   restoreCustomStorage () {",
          "1631:     const { id, customConfig, customOpts } = this",
          "1633:     const isAllStorage = storage === true",
          "1634:     const storageOpts = isAllStorage ? {} : Object.assign({}, storage || {})",
          "1635:     const isCustomResizable = isAllStorage || storageOpts.resizable",
          "1636:     const isCustomVisible = isAllStorage || storageOpts.visible",
          "1637:     const isCustomFixed = isAllStorage || storageOpts.fixed",
          "1638:     const isCustomSort = isAllStorage || storageOpts.sort",
          "1639:     if (customConfig && (isCustomResizable || isCustomVisible || isCustomFixed || isCustomSort)) {",
          "1640:       const customMap = {}",
          "1641:       if (!id) {",
          "",
          "[Removed Lines]",
          "1632:     const { storage } = customOpts",
          "",
          "[Added Lines]",
          "1632:     const { storage, restoreStore } = customOpts",
          "1639:     if (storage && id && restoreStore) {",
          "1640:       restoreStore({ id })",
          "1641:     }",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:         activeBtn: false,",
          "358:         activeWrapper: false,",
          "359:         visible: false,",
          "361:       },",
          "363:       filterStore: {",
          "",
          "[Removed Lines]",
          "360:         maxHeight: 0",
          "",
          "[Added Lines]",
          "360:         maxHeight: 0,",
          "361:         oldSortMaps: {},",
          "362:         oldFixedMaps: {},",
          "363:         oldVisibleMaps: {}",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js": [
          "File: packages/v-x-e-table/src/conf.js -> packages/v-x-e-table/src/conf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     customConfig: {",
          "62:       allowFixed: true,",
          "63:       showFooter: true",
          "66:     },",
          "67:     sortConfig: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:       allowSort: true,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:     TABLE_EXPAND_LOADED: iconPrefix + 'spinner roll',",
          "164:     TABLE_EXPAND_OPEN: iconPrefix + 'arrow-right rotate90',",
          "165:     TABLE_EXPAND_CLOSE: iconPrefix + 'arrow-right',",
          "167:     TABLE_CHECKBOX_UNCHECKED: iconPrefix + 'checkbox-unchecked',",
          "170:     TABLE_RADIO_UNCHECKED: iconPrefix + 'radio-unchecked',",
          "173:     BUTTON_DROPDOWN: iconPrefix + 'arrow-down',",
          "",
          "[Removed Lines]",
          "166:     TABLE_CHECKBOX_CHECKED: iconPrefix + 'checkbox-checked',",
          "168:     TABLE_CHECKBOX_INDETERMINATE: iconPrefix + 'checkbox-indeterminate',",
          "169:     TABLE_RADIO_CHECKED: iconPrefix + 'radio-checked',",
          "",
          "[Added Lines]",
          "167:     TABLE_CHECKBOX_CHECKED: iconPrefix + 'checkbox-checked-fill',",
          "169:     TABLE_CHECKBOX_INDETERMINATE: iconPrefix + 'checkbox-indeterminate-fill',",
          "170:     TABLE_RADIO_CHECKED: iconPrefix + 'radio-checked-fill',",
          "172:     TABLE_CUSTOM_SORT: iconPrefix + 'drag-handle',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:     TOOLBAR_TOOLS_MINIMIZE: iconPrefix + 'minimize',",
          "218:     TOOLBAR_TOOLS_CUSTOM: iconPrefix + 'custom-column',",
          "219:     TOOLBAR_TOOLS_FIXED_LEFT: iconPrefix + 'fixed-left',",
          "221:     TOOLBAR_TOOLS_FIXED_RIGHT: iconPrefix + 'fixed-right',",
          "225:     FORM_PREFIX: iconPrefix + 'question-circle-fill',",
          "",
          "[Removed Lines]",
          "220:     TOOLBAR_TOOLS_FIXED_LEFT_ACTIVED: iconPrefix + 'fixed-left-fill',",
          "222:     TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVED: iconPrefix + 'fixed-right-fill',",
          "",
          "[Added Lines]",
          "222:     TOOLBAR_TOOLS_FIXED_LEFT_ACTIVE: iconPrefix + 'fixed-left-fill',",
          "224:     TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVE: iconPrefix + 'fixed-right-fill',",
          "",
          "---------------"
        ],
        "styles/custom.scss||styles/custom.scss": [
          "File: styles/custom.scss -> styles/custom.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: @import './base/common.scss';",
          "5: .vxe-table-custom--option {",
          "6:   display: flex;",
          "7:   flex-direction: row;",
          "8: }",
          "10: .vxe-table-custom-wrapper {",
          "11:   display: none;",
          "12:   position: absolute;",
          "14:   right: 2px;",
          "15:   text-align: left;",
          "16:   background-color: $vxe-toolbar-panel-background-color;",
          "17:   z-index: 19;",
          "18:   border: 1px solid $vxe-table-border-color;",
          "19:   border-radius: $vxe-border-radius;",
          "21:   &.is--active {",
          "22:     display: block;",
          "23:   }",
          "24: }",
          "26: .vxe-table-custom--header,",
          "27: .vxe-table-custom--body {",
          "28:   list-style-type: none;",
          "",
          "[Removed Lines]",
          "13:   top: -4px;",
          "20:   box-shadow: 0 1px 6px rgba(0,0,0,.2);",
          "",
          "[Added Lines]",
          "6:   position: relative;",
          "9:   &.active--drag-target {",
          "10:     &[drag-pos=\"top\"] {",
          "11:       &::after {",
          "12:         display: block;",
          "13:         top: -2px;",
          "14:       }",
          "15:     }",
          "16:     &[drag-pos=\"bottom\"] {",
          "17:       &::after {",
          "18:         display: block;",
          "19:         bottom: -2px;",
          "20:       }",
          "21:     }",
          "22:   }",
          "23:   &:first-child {",
          "24:     &[drag-pos=\"top\"] {",
          "25:       &::after {",
          "26:         top: 0;",
          "27:       }",
          "28:     }",
          "29:   }",
          "30:   &:last-child {",
          "31:     &[drag-pos=\"bottom\"] {",
          "32:       &::after {",
          "33:         bottom: 0;",
          "34:       }",
          "35:     }",
          "36:   }",
          "37:   &::after {",
          "38:     display: none;",
          "39:     content: \"\";",
          "40:     position: absolute;",
          "41:     left: -1px;",
          "42:     width: calc(100% + 1px);",
          "43:     height: 3px;",
          "44:     background-color: $vxe-primary-color;",
          "45:     z-index: 12;",
          "46:   }",
          "47:   &:last-child {",
          "48:     &::after {",
          "49:       width: 100%;",
          "50:     }",
          "51:   }",
          "57:   top: 1px;",
          "64:   box-shadow: $vxe-border-radius;",
          "70: .vxe-table-custom--list-wrapper {",
          "71:   display: block;",
          "72: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   overflow-y: auto;",
          "31:   margin: 0;",
          "32:   padding: 0;",
          "34:   & > li {",
          "37:     padding: 0.2em 1em 0.2em 1em;",
          "38:     @for $i from 2 through 8 {",
          "39:       $interval: $i - 1 + 0.2;",
          "",
          "[Removed Lines]",
          "33:   user-select: none;",
          "35:     max-width: 18em;",
          "36:     min-width: 14em;",
          "",
          "[Added Lines]",
          "82:     max-width: 26em;",
          "83:     min-width: 18em;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:   padding: 0.28em 0;",
          "52:   font-weight: 700;",
          "53:   border-bottom: 1px solid $vxe-table-popup-border-color;",
          "54: }",
          "56: .vxe-table-custom--body {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:   user-select: none;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64: }",
          "66: .vxe-table-custom--footer {",
          "67:   border-top: 1px solid $vxe-table-popup-border-color;",
          "68:   text-align: right;",
          "69:   button {",
          "70:     background-color: transparent;",
          "71:     width: 50%;",
          "73:     border: 0;",
          "74:     color: $vxe-font-color;",
          "75:     text-align: center;",
          "",
          "[Removed Lines]",
          "72:     height: 2.5em;",
          "",
          "[Added Lines]",
          "115:   display: flex;",
          "116:   flex-direction: row;",
          "122:     height: 2.8em;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "86: .vxe-table-custom--checkbox-option {",
          "87:   @include createCheckboxIcon();",
          "88:   overflow: hidden;",
          "89:   text-overflow: ellipsis;",
          "90:   white-space: nowrap;",
          "92: }",
          "94: .vxe-table-custom--fixed-option {",
          "",
          "[Removed Lines]",
          "91:   flex-grow: 1;",
          "",
          "[Added Lines]",
          "138: }",
          "139: .vxe-table-custom--checkbox-option,",
          "140: .vxe-table-custom--sort-option {",
          "141:   padding-right: 0.4em;",
          "142:   flex-shrink: 0;",
          "143:   user-select: none;",
          "144: }",
          "145: .vxe-table-custom--sort-option {",
          "146:   display: flex;",
          "147:   flex-direction: row;",
          "148:   align-items: center;",
          "149:   justify-content: center;",
          "150: }",
          "151: .vxe-table-custom--sort-btn {",
          "152:   padding-left: 0.2em;",
          "153:   padding-right: 0.4em;",
          "154:   cursor: grabbing;",
          "155:   &:hover {",
          "156:     color: $vxe-primary-color;",
          "157:   }",
          "158: }",
          "159: .vxe-table-custom--checkbox-label  {",
          "160:   flex-grow: 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "97:   display: flex;",
          "98:   flex-direction: row;",
          "99:   align-items: center;",
          "100: }",
          "102: .vxe-table-custom--fixed-left-option,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:   user-select: none;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "165: }",
          "167: .vxe-table-custom-popup--drag-hint {",
          "169:   display: none;",
          "170:   position: absolute;",
          "171:   top: 0;",
          "",
          "[Removed Lines]",
          "168:   @extend %TextEllipsis;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "173:   padding: 0.6em 1em 0.6em 1.8em;",
          "174:   max-width: 300px;",
          "175:   border-radius: $vxe-border-radius;",
          "176:   user-select: none;",
          "177:   pointer-events: none;",
          "178:   background-color: $vxe-table-body-background-color;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:   overflow: hidden;",
          "249:   text-overflow: ellipsis;",
          "250:   white-space: nowrap;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "271:   font-size: 1.2em;",
          "272:   padding: 0.2em 0.5em;",
          "273:   cursor: grab;",
          "274:   &:active {",
          "275:     cursor: grabbing;",
          "276:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:   &:hover {",
          "350:     color:  $vxe-primary-color;",
          "351:   }",
          "",
          "---------------"
        ],
        "styles/icon.scss||styles/icon.scss": [
          "File: styles/icon.scss -> styles/icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: @font-face {",
          "4:   font-family: \"vxeiconfont\";",
          "5:   src:",
          "7: }",
          "9: @keyframes rollCircle {",
          "",
          "[Removed Lines]",
          "6:        url('data:application/x-font-woff2;charset=utf-8;base64,') format('woff2');",
          "",
          "[Added Lines]",
          "6:        url('data:application/x-font-woff2;charset=utf-8;base64,') format('woff2');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   }",
          "74: }",
          "76: .vxe-icon-sort:before {",
          "77:   content: \"\\e93e\";",
          "78: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: .vxe-icon-drag-handle:before {",
          "77:   content: \"\\e64e\";",
          "78: }",
          "80: .vxe-icon-print-batch:before {",
          "81:   content: \"\\e783\";",
          "82: }",
          "84: .vxe-icon-pct-full:before {",
          "85:   content: \"\\ec13\";",
          "86: }",
          "88: .vxe-icon-rotate-right:before {",
          "89:   content: \"\\e631\";",
          "90: }",
          "92: .vxe-icon-rotate-left:before {",
          "93:   content: \"\\e62f\";",
          "94: }",
          "96: .vxe-icon-search-zoom-out:before {",
          "97:   content: \"\\e667\";",
          "98: }",
          "100: .vxe-icon-pct-1-1:before {",
          "101:   content: \"\\e65b\";",
          "102: }",
          "104: .vxe-icon-radio-checked:before {",
          "105:   content: \"\\e75b\";",
          "106: }",
          "108: .vxe-icon-checkbox-checked:before {",
          "109:   content: \"\\e685\";",
          "110: }",
          "112: .vxe-icon-mobile:before {",
          "113:   content: \"\\e638\";",
          "114: }",
          "116: .vxe-icon-align-left:before {",
          "117:   content: \"\\e60f\";",
          "118: }",
          "120: .vxe-icon-align-center:before {",
          "121:   content: \"\\e610\";",
          "122: }",
          "124: .vxe-icon-align-right:before {",
          "125:   content: \"\\e611\";",
          "126: }",
          "128: .vxe-icon-pc:before {",
          "129:   content: \"\\e65a\";",
          "130: }",
          "132: .vxe-icon-layout:before {",
          "133:   content: \"\\e80f\";",
          "134: }",
          "136: .vxe-icon-click-button:before {",
          "137:   content: \"\\e609\";",
          "138: }",
          "140: .vxe-icon-select:before {",
          "141:   content: \"\\e7a4\";",
          "142: }",
          "144: .vxe-icon-textarea:before {",
          "145:   content: \"\\e6e7\";",
          "146: }",
          "148: .vxe-icon-file:before {",
          "149:   content: \"\\e88a\";",
          "150: }",
          "152: .vxe-icon-signature:before {",
          "153:   content: \"\\e6b1\";",
          "154: }",
          "156: .vxe-icon-input:before {",
          "157:   content: \"\\e62a\";",
          "158: }",
          "160: .vxe-icon-title:before {",
          "161:   content: \"\\e659\";",
          "162: }",
          "164: .vxe-icon-switch:before {",
          "165:   content: \"\\e60d\";",
          "166: }",
          "168: .vxe-icon-add-user:before {",
          "169:   content: \"\\e60b\";",
          "170: }",
          "172: .vxe-icon-row-col:before {",
          "173:   content: \"\\e695\";",
          "174: }",
          "176: .vxe-icon-tabs:before {",
          "177:   content: \"\\e60e\";",
          "178: }",
          "180: .vxe-icon-subtable:before {",
          "181:   content: \"\\e678\";",
          "182: }",
          "184: .vxe-icon-add-users:before {",
          "185:   content: \"\\e7dd\";",
          "186: }",
          "188: .vxe-icon-number:before {",
          "189:   content: \"\\e761\";",
          "190: }",
          "192: .vxe-icon-association-form:before {",
          "193:   content: \"\\e903\";",
          "194: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:   content: \"\\e867\";",
          "342: }",
          "345:   content: \"\\e67d\";",
          "346: }",
          "349:   content: \"\\e8c4\";",
          "350: }",
          "",
          "[Removed Lines]",
          "344: .vxe-icon-checkbox-checked:before {",
          "348: .vxe-icon-checkbox-indeterminate:before {",
          "",
          "[Added Lines]",
          "464: .vxe-icon-checkbox-checked-fill:before {",
          "468: .vxe-icon-checkbox-indeterminate-fill:before {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "777:   content: \"\\e67e\";",
          "778: }",
          "781:   content: \"\\e763\";",
          "782: }",
          "",
          "[Removed Lines]",
          "780: .vxe-icon-radio-checked:before {",
          "",
          "[Added Lines]",
          "900: .vxe-icon-radio-checked-fill:before {",
          "",
          "---------------"
        ],
        "styles/old-icon.scss||styles/old-icon.scss": [
          "File: styles/old-icon.scss -> styles/old-icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:   vertical-align: middle;",
          "7:   position: relative;",
          "8:   direction: ltr;",
          "10:   font-weight: normal;",
          "11:   user-select: none;",
          "12:   &.rotate45 {",
          "",
          "[Removed Lines]",
          "9:   font-family: $vxe-icon-font-family;",
          "",
          "[Added Lines]",
          "9:   font-family: Verdana,Arial,Tahoma;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "716: .vxe-icon-warnion-circle-fill:before {",
          "717:   content: \"\\e848\";",
          "",
          "[Removed Lines]",
          "718: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}