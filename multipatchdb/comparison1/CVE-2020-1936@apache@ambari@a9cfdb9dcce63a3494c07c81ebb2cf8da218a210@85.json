{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd1a02b3e1879f0987af2c9215dee8fe56367e2f",
      "candidate_info": {
        "commit_hash": "bd1a02b3e1879f0987af2c9215dee8fe56367e2f",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/bd1a02b3e1879f0987af2c9215dee8fe56367e2f",
        "files": [
          "contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/service_advisor.py",
          "contrib/management-packs/isilon-onefs-mpack/src/main/resources/mpack.json"
        ],
        "message": "set hbase.wal.provider with value filesystem for HBASE2 (#3195)",
        "before_after_code_files": [
          "contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/service_advisor.py||contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/service_advisor.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/service_advisor.py||contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/service_advisor.py": [
          "File: contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/service_advisor.py -> contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/service_advisor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         putHdfsSiteProperty(\"dfs.namenode.http-address\", Uri.http_namenode(services).fix_host(onefs_host))",
          "117:         putHdfsSiteProperty(\"dfs.namenode.https-address\", Uri.https_namenode(services).fix_host(onefs_host))",
          "118:         # self.updateYarnConfig(configs, services) TODO doesn't work possibly due to a UI bug (Couldn't retrieve 'capacity-scheduler' from services)",
          "119:       except KeyError as e:",
          "120:         self.logger.info('Cannot get OneFS properties from config. KeyError: %s' % e)",
          "122:     def updateYarnConfig(self, configs, services):",
          "123:       if not 'YARN' in self.installedServices(services): return",
          "124:       capacity_scheduler_dict, received_as_key_value_pair = self.getCapacitySchedulerProperties(services)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:         self.updateHbaseConfig(configs, services)",
          "123:     def updateHbaseConfig(self, configs, services):",
          "124:       if not 'HBASE' in self.installedServices(services): return",
          "125:       putHbaseSiteProperty = self.putProperty(configs, \"hbase-site\", services)",
          "126:       putHbaseSiteProperty(\"hbase.wal.provider\", \"filesystem\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22ba363715e31d7b7bcfc3088ab3d66bdf34670b",
      "candidate_info": {
        "commit_hash": "22ba363715e31d7b7bcfc3088ab3d66bdf34670b",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/22ba363715e31d7b7bcfc3088ab3d66bdf34670b",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/action-menu/action-menu.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.less"
        ],
        "message": "[AMBARI-24439] [Log Search UI] center the log tabs so they're aligned with the buttons (#2057)\n\n(cherry picked from commit aa2996853aaea64c69be34ce859311a4708c7341)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/action-menu/action-menu.component.less||ambari-logsearch/ambari-logsearch-web/src/app/components/action-menu/action-menu.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.html||ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.less||ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.less"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/components/action-menu/action-menu.component.less||ambari-logsearch/ambari-logsearch-web/src/app/components/action-menu/action-menu.component.less": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/action-menu/action-menu.component.less -> ambari-logsearch/ambari-logsearch-web/src/app/components/action-menu/action-menu.component.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: :host {",
          "21:   display: block;",
          "23:   menu-button {",
          "24:     margin: 0 1em;",
          "25:     /deep/ .stop-icon {",
          "",
          "[Removed Lines]",
          "22:   margin-left: auto;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.html||ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.html": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.html -> ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: <div class=\"tabs-container container-fluid\">",
          "19:   <div class=\"row\">",
          "20:     <div class=\"col-md-12 tabs-menu-container\">",
          "22:         (tabClosed)=\"onCloseTab($event[0], $event[1])\"",
          "23:         [switchMode]=\"'ROUTE_SEGMENT'\" [basePathForRoutingMode]=\"routerPath\" queryParamsHandling=\"merge\"></tabs>",
          "25:     </div>",
          "26:   </div>",
          "27: </div>",
          "",
          "[Removed Lines]",
          "21:       <tabs class=\"pull-left\" [items]=\"tabs | async\" (tabSwitched)=\"onSwitchTab($event)\"",
          "24:       <action-menu class=\"pull-right\"></action-menu>",
          "",
          "[Added Lines]",
          "21:       <tabs [items]=\"tabs | async\" (tabSwitched)=\"onSwitchTab($event)\"",
          "24:       <action-menu></action-menu>",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.less||ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.less": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.less -> ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     border-bottom: 1px solid @table-border-color;",
          "29:     .tabs-menu-container {",
          "30:       .flex-vertical-align;",
          "31:     }",
          "32:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:       height: 62px;",
          "32:       action-menu {",
          "33:         margin-left: auto;",
          "34:       }",
          "35:       /deep/ tabs ul.nav.nav-tabs {",
          "36:         margin: 0;",
          "37:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca4a712f8747227ca68575687596d704fd92e8f8",
      "candidate_info": {
        "commit_hash": "ca4a712f8747227ca68575687596d704fd92e8f8",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ca4a712f8747227ca68575687596d704fd92e8f8",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java"
        ],
        "message": "[AMBARI-25333] Regenerate keytab generates empty keytab file if no file present in cache (apappu)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:         processPrincipal = true;",
          "152:       } else if (!StringUtils.isEmpty(kerberosPrincipalEntity.getCachedKeytabPath())) {",
          "155:       } else {",
          "157:         processPrincipal = true;",
          "",
          "[Removed Lines]",
          "154:         processPrincipal = false;",
          "",
          "[Added Lines]",
          "154:  File file = new File(kerberosPrincipalEntity.getCachedKeytabPath());",
          "155:  processPrincipal = !file.exists();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:   protected static Map<String, String> getPrincipalPasswordMap(Map<String, Object> requestSharedDataContext) {",
          "297:     if (requestSharedDataContext == null) {",
          "298:       return null;",
          "309:   }",
          "",
          "[Removed Lines]",
          "299:     } else {",
          "300:       Object map = requestSharedDataContext.get(PRINCIPAL_PASSWORD_MAP);",
          "302:       if (map == null) {",
          "303:         map = new HashMap<String, String>();",
          "304:         requestSharedDataContext.put(PRINCIPAL_PASSWORD_MAP, map);",
          "305:       }",
          "307:       return (Map<String, String>) map;",
          "308:     }",
          "",
          "[Added Lines]",
          "296:   @SuppressWarnings(\"unchecked\")",
          "300:     }",
          "301:     Object map = requestSharedDataContext.computeIfAbsent(PRINCIPAL_PASSWORD_MAP, k -> new HashMap<String, String>());",
          "302:     return (Map<String, String>) map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:   protected static Map<String, Integer> getPrincipalKeyNumberMap(Map<String, Object> requestSharedDataContext) {",
          "323:     if (requestSharedDataContext == null) {",
          "324:       return null;",
          "334:     }",
          "335:   }",
          "",
          "[Removed Lines]",
          "325:     } else {",
          "326:       Object map = requestSharedDataContext.get(PRINCIPAL_KEY_NUMBER_MAP);",
          "328:       if (map == null) {",
          "329:         map = new HashMap<String, String>();",
          "330:         requestSharedDataContext.put(PRINCIPAL_KEY_NUMBER_MAP, map);",
          "331:       }",
          "333:       return (Map<String, Integer>) map;",
          "",
          "[Added Lines]",
          "316:   @SuppressWarnings(\"unchecked\")",
          "321:     Object map = requestSharedDataContext.computeIfAbsent(PRINCIPAL_KEY_NUMBER_MAP, k -> new HashMap<String, String>());",
          "322:     return (Map<String, Integer>) map;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25f53eb7aef4f979b8ceca30d9e35beeb7f959d5",
      "candidate_info": {
        "commit_hash": "25f53eb7aef4f979b8ceca30d9e35beeb7f959d5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/25f53eb7aef4f979b8ceca30d9e35beeb7f959d5",
        "files": [
          "ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/params.py",
          "ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/setup_livy2.py"
        ],
        "message": "[AMBARI-24470] HDP 3.0 Livy2-Server fails to start. (#2048)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/params.py||ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/params.py",
          "ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/setup_livy2.py||ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/setup_livy2.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/params.py||ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/params.py": [
          "File: ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/params.py -> ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   livy2_hdfs_user_dir = format(\"/user/{livy2_user}\")",
          "215:   livy2_server_pid_file = status_params.livy2_server_pid_file",
          "216:   livy2_recovery_dir = default(\"/configurations/livy2-conf/livy.server.recovery.state-store.url\", \"/livy2-recovery\")",
          "218:   livy2_server_start = format(\"{livy2_home}/bin/livy-server start\")",
          "219:   livy2_server_stop = format(\"{livy2_home}/bin/livy-server stop\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   livy2_recovery_store = default(\"/configurations/livy2-conf/livy.server.recovery.state-store\", \"filesystem\")",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/setup_livy2.py||ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/setup_livy2.py": [
          "File: ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/setup_livy2.py -> ambari-server/src/main/resources/common-services/SPARK2/2.0.0/package/scripts/setup_livy2.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     )",
          "43:     params.HdfsResource(None, action=\"execute\")",
          "53:   # create livy-env.sh in etc/conf dir",
          "54:   File(os.path.join(params.livy2_conf, 'livy-env.sh'),",
          "",
          "[Removed Lines]",
          "45:     params.HdfsResource(params.livy2_recovery_dir,",
          "46:                         type=\"directory\",",
          "47:                         action=\"create_on_execute\",",
          "48:                         owner=params.livy2_user,",
          "49:                         mode=0700",
          "50:        )",
          "51:     params.HdfsResource(None, action=\"execute\")",
          "",
          "[Added Lines]",
          "45:     if params.livy2_recovery_store == 'filesystem':",
          "46:       params.HdfsResource(params.livy2_recovery_dir,",
          "47:                           type=\"directory\",",
          "48:                           action=\"create_on_execute\",",
          "49:                           owner=params.livy2_user,",
          "50:                           mode=0700",
          "51:                           )",
          "52:       params.HdfsResource(None, action=\"execute\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c3812bbb563b1d05d916e7af46ac9bc6cab31ea",
      "candidate_info": {
        "commit_hash": "0c3812bbb563b1d05d916e7af46ac9bc6cab31ea",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0c3812bbb563b1d05d916e7af46ac9bc6cab31ea",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/RoleAuthorization.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/RequestResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java"
        ],
        "message": "AMBARI-24546. Only authenticated users with proper AMBARI/CLUSTER authorization roles can query Ambari Request related information (#2219)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/RoleAuthorization.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/RoleAuthorization.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/RequestResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/RequestResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.apache.ambari.server.controller.internal.HostComponentResourceProvider.COMPONENT_NAME;",
          "22: import static org.apache.ambari.server.controller.internal.HostComponentResourceProvider.HOST_NAME;",
          "23: import static org.apache.ambari.server.controller.internal.HostComponentResourceProvider.SERVICE_NAME;",
          "25: import java.util.ArrayList;",
          "26: import java.util.Collection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import static org.apache.ambari.server.security.authorization.RoleAuthorization.AMBARI_VIEW_STATUS_INFO;",
          "25: import static org.apache.ambari.server.security.authorization.RoleAuthorization.CLUSTER_VIEW_STATUS_INFO;",
          "26: import static org.apache.ambari.server.security.authorization.RoleAuthorization.HOST_VIEW_STATUS_INFO;",
          "27: import static org.apache.ambari.server.security.authorization.RoleAuthorization.SERVICE_VIEW_STATUS_INFO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:     Boolean ascOrder = (ascOrderRaw == null ? null : Boolean.parseBoolean(ascOrderRaw));",
          "297:     if (null == predicate) {",
          "301:     } else {",
          "",
          "[Removed Lines]",
          "299:       resources.addAll(",
          "300:           getRequestResources(null, null, null, maxResults, ascOrder, requestedIds));",
          "",
          "[Added Lines]",
          "302:       authorizeGetResources(null);",
          "304:       resources.addAll(getRequestResources(null, null, null, maxResults, ascOrder, requestedIds));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316:           requestStatus = (String) properties.get(REQUEST_STATUS_PROPERTY_ID);",
          "317:         }",
          "319:         resources.addAll(getRequestResources(clusterName, requestId, requestStatus, maxResults,",
          "320:             ascOrder, requestedIds));",
          "321:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:         authorizeGetResources(clusterName);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324:     return resources;",
          "325:   }",
          "327:   @Override",
          "328:   public RequestStatus updateResources(Request requestInfo, Predicate predicate)",
          "329:           throws SystemException, UnsupportedPropertyException,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:   private void authorizeGetResources(String clusterName) throws NoSuchParentResourceException, AuthorizationException {",
          "333:     final boolean ambariLevelRequest = StringUtils.isBlank(clusterName);",
          "334:     final ResourceType resourceType = ambariLevelRequest ? ResourceType.AMBARI : ResourceType.CLUSTER;",
          "335:     Long resourceId;",
          "336:     try {",
          "337:       resourceId = ambariLevelRequest ? null : getClusterResourceId(clusterName);",
          "338:     } catch (AmbariException e) {",
          "339:       throw new NoSuchParentResourceException(\"Error while fetching cluster resource ID\", e);",
          "340:     }",
          "341:     final Set<RoleAuthorization> requiredAuthorizations = ambariLevelRequest ? Sets.newHashSet(AMBARI_VIEW_STATUS_INFO)",
          "342:         : Sets.newHashSet(CLUSTER_VIEW_STATUS_INFO, HOST_VIEW_STATUS_INFO, SERVICE_VIEW_STATUS_INFO);",
          "344:     if (!AuthorizationHelper.isAuthorized(resourceType, resourceId, requiredAuthorizations)) {",
          "345:       throw new AuthorizationException(String.format(\"The authenticated user is not authorized to fetch request related information.\"));",
          "346:     }",
          "347:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/RoleAuthorization.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/RoleAuthorization.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/authorization/RoleAuthorization.java -> ambari-server/src/main/java/org/apache/ambari/server/security/authorization/RoleAuthorization.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   AMBARI_RENAME_CLUSTER(\"AMBARI.RENAME_CLUSTER\"),",
          "41:   AMBARI_RUN_CUSTOM_COMMAND(\"AMBARI.RUN_CUSTOM_COMMAND\"),",
          "42:   AMBARI_MANAGE_CONFIGURATION(\"AMBARI.MANAGE_CONFIGURATION\"),",
          "43:   CLUSTER_MANAGE_CREDENTIALS(\"CLUSTER.MANAGE_CREDENTIALS\"),",
          "44:   CLUSTER_MODIFY_CONFIGS(\"CLUSTER.MODIFY_CONFIGS\"),",
          "45:   CLUSTER_MANAGE_CONFIG_GROUPS(\"CLUSTER.MANAGE_CONFIG_GROUPS\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:   AMBARI_VIEW_STATUS_INFO(\"AMBARI.VIEW_STATUS_INFO\"),",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.upgrade;",
          "20: import static org.apache.ambari.server.configuration.AmbariServerConfigurationCategory.LDAP_CONFIGURATION;",
          "21: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.AMBARI_CONFIGURATION_CATEGORY_NAME_COLUMN;",
          "22: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.AMBARI_CONFIGURATION_PROPERTY_NAME_COLUMN;",
          "23: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.AMBARI_CONFIGURATION_TABLE;",
          "25: import java.sql.SQLException;",
          "27: import org.apache.ambari.server.AmbariException;",
          "28: import org.slf4j.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.apache.ambari.server.security.authorization.RoleAuthorization.AMBARI_VIEW_STATUS_INFO;",
          "27: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   @Override",
          "73:   protected void executeDMLUpdates() throws AmbariException, SQLException {",
          "74:     renameLdapSynchCollisionBehaviorValue();",
          "75:   }",
          "77:   protected int renameLdapSynchCollisionBehaviorValue() throws SQLException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     createRoleAuthorizations();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:     return numberOfRecordsRenamed;",
          "87:   }",
          "89: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:   protected void createRoleAuthorizations() throws SQLException {",
          "93:     addRoleAuthorization(AMBARI_VIEW_STATUS_INFO.getId(), \"View status information\", Collections.singleton(\"AMBARI.ADMINISTRATOR:AMBARI\"));",
          "94:     LOG.info(\"Added new role authorization {}\", AMBARI_VIEW_STATUS_INFO.getId());",
          "95:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/RequestResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/RequestResourceProviderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/RequestResourceProviderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/RequestResourceProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import static org.apache.ambari.server.controller.internal.HostComponentResourceProvider.STALE_CONFIGS;",
          "23: import static org.easymock.EasyMock.anyObject;",
          "24: import static org.easymock.EasyMock.capture;",
          "25: import static org.easymock.EasyMock.eq;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import static org.apache.ambari.server.security.TestAuthenticationFactory.createAdministrator;",
          "24: import static org.apache.ambari.server.security.TestAuthenticationFactory.createViewUser;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:     expect(requestDAO.findByPks(Collections.emptyList(), true)).andReturn(Collections.emptyList()).anyTimes();",
          "215:     ActionManager actionManager = createNiceMock(ActionManager.class);",
          "217:     Cluster cluster = createNiceMock(Cluster.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:     prepareGetAuthorizationExpectations();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267:     verify(requestDAO);",
          "268:   }",
          "270:   @Test",
          "271:   public void testGetResources() throws Exception {",
          "272:     Resource.Type type = Resource.Type.Request;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:   private void prepareGetAuthorizationExpectations() {",
          "275:     prepareGetAuthorizationExpectations(true);",
          "276:   }",
          "278:   private void prepareGetAuthorizationExpectations(boolean allowedToAuthorize) {",
          "279:     SecurityContextHolder.getContext().setAuthentication(allowedToAuthorize ? createAdministrator() : createViewUser(1L));",
          "280:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "313:       put(1L, HostRoleCommandStatusSummaryDTO.create().inProgress(1));",
          "314:     }}).anyTimes();",
          "317:     replay(managementController, actionManager, requestDAO, hrcDAO, requestMock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:     prepareGetAuthorizationExpectations();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "363:       put(1L, HostRoleCommandStatusSummaryDTO.create().inProgress(1));",
          "364:     }}).anyTimes();",
          "367:     replay(managementController, actionManager, requestDAO, hrcDAO, requestMock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380:     prepareGetAuthorizationExpectations();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "414:       put(1L, HostRoleCommandStatusSummaryDTO.create().inProgress(1));",
          "415:     }}).anyTimes();",
          "418:     replay(managementController, actionManager, requestMock, requestDAO, hrcDAO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:     prepareGetAuthorizationExpectations();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "472:       put(1L, HostRoleCommandStatusSummaryDTO.create().inProgress(1));",
          "473:     }}).anyTimes();",
          "477:     replay(managementController, actionManager, clusters, cluster, requestMock, requestDAO, hrcDAO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:     prepareGetAuthorizationExpectations();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "538:       put(1L, HostRoleCommandStatusSummaryDTO.create().inProgress(1));",
          "539:     }}).anyTimes();",
          "542:     replay(managementController, actionManager, requestMock, requestMock1, requestDAO, hrcDAO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560:     prepareGetAuthorizationExpectations();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "590:       put(1L, HostRoleCommandStatusSummaryDTO.create().completed(2));",
          "591:     }}).anyTimes();",
          "594:     replay(managementController, actionManager, requestMock0, requestMock1, requestDAO, hrcDAO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:     prepareGetAuthorizationExpectations();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "659:       put(1L, HostRoleCommandStatusSummaryDTO.create().inProgress(1).queued(1));",
          "660:     }}).once();",
          "663:     replay(managementController, actionManager, requestMock0, requestMock1, requestDAO, hrcDAO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "685:     prepareGetAuthorizationExpectations();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "737:       put(1L, HostRoleCommandStatusSummaryDTO.create().aborted(1).timedout(1));",
          "738:     }}).once();",
          "742:     replay(managementController, actionManager, requestMock0, requestMock1, requestDAO, hrcDAO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "765:     prepareGetAuthorizationExpectations();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "785:     verify(managementController, actionManager, requestMock0, requestMock1, requestDAO, hrcDAO);",
          "786:   }",
          "788:   @Test",
          "789:   public void testUpdateResources_CancelRequest() throws Exception {",
          "790:     Resource.Type type = Resource.Type.Request;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "814:   @Test(expected = AuthorizationException.class)",
          "815:   public void shouldThrowAuthorizationErrorInCaseTheAuthenticatedUserDoesNotHaveTheAppropriatePermissions() throws Exception {",
          "817:     prepareGetAuthorizationExpectations(false);",
          "818:     final ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(Resource.Type.Request, createMock(AmbariManagementController.class));",
          "819:     final Request request = PropertyHelper.getUpdateRequest(new LinkedHashMap<>(), null);",
          "820:     final Predicate predicate = new PredicateBuilder().property(RequestResourceProvider.REQUEST_ID_PROPERTY_ID).equals(\"100\").toPredicate();",
          "823:     provider.getResources(request, predicate);",
          "826:   }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "819:     RequestStatusResponse response = createNiceMock(RequestStatusResponse.class);",
          "822:     replay(managementController, actionManager, hostRoleCommand, clusters, requestMock, response, stage);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "861:     prepareGetAuthorizationExpectations();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1559:       put(1L, HostRoleCommandStatusSummaryDTO.create().inProgress(1));",
          "1560:     }}).anyTimes();",
          "1564:     replay(managementController, actionManager, clusters, requestMock, requestDAO, hrcDAO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1604:     prepareGetAuthorizationExpectations();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1612:     expect(hrcDAO.findAggregateCounts((Long) anyObject())).andReturn(",
          "1613:       Collections.emptyMap()).anyTimes();",
          "1616:     replay(managementController, actionManager, clusters, requestMock, requestDAO, hrcDAO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1658:     prepareGetAuthorizationExpectations();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1707:         : Optional.<String>absent();",
          "1708:       expect(logicalRequest.getFailureReason()).andReturn(failureReason).anyTimes();",
          "1710:       replayAll();",
          "1712:       Resource.Type type = Resource.Type.Request;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1755:       prepareGetAuthorizationExpectations();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.apache.ambari.server.upgrade.UpgradeCatalog272.RENAME_COLLISION_BEHAVIOR_PROPERTY_SQL;",
          "22: import static org.easymock.EasyMock.createMockBuilder;",
          "23: import static org.easymock.EasyMock.expect;",
          "24: import static org.easymock.EasyMock.replay;",
          "25: import static org.easymock.EasyMock.verify;",
          "26: import static org.junit.Assert.assertEquals;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import static org.easymock.EasyMock.expectLastCall;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:   @Test",
          "50:   public void testExecuteDMLUpdates() throws Exception {",
          "51:     final Method renameLdapSynchCollisionBehaviorValue = UpgradeCatalog272.class.getDeclaredMethod(\"renameLdapSynchCollisionBehaviorValue\");",
          "55:     expect(upgradeCatalog272.renameLdapSynchCollisionBehaviorValue()).andReturn(0).once();",
          "57:     replay(upgradeCatalog272);",
          "59:     upgradeCatalog272.executeDMLUpdates();",
          "",
          "[Removed Lines]",
          "53:     final UpgradeCatalog272 upgradeCatalog272 = createMockBuilder(UpgradeCatalog272.class).addMockedMethod(renameLdapSynchCollisionBehaviorValue).createMock();",
          "",
          "[Added Lines]",
          "53:     final Method createRoleAuthorizations = UpgradeCatalog272.class.getDeclaredMethod(\"createRoleAuthorizations\");",
          "55:     final UpgradeCatalog272 upgradeCatalog272 = createMockBuilder(UpgradeCatalog272.class).addMockedMethod(renameLdapSynchCollisionBehaviorValue)",
          "56:         .addMockedMethod(createRoleAuthorizations).createMock();",
          "60:     upgradeCatalog272.createRoleAuthorizations();",
          "61:     expectLastCall().once();",
          "",
          "---------------"
        ]
      }
    }
  ]
}