{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3a1b343769b08c64be345678b66c8c9a32a01c0",
      "candidate_info": {
        "commit_hash": "e3a1b343769b08c64be345678b66c8c9a32a01c0",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e3a1b343769b08c64be345678b66c8c9a32a01c0",
        "files": [
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "Revert \"MDL-61876 admin: for upgraded sites keep forceclean=0\"\n\nThis reverts commit 75290313680125d0f8e1264f004016778d0a14b4.",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2216:         upgrade_main_savepoint(true, 2018040500.01);",
          "2217:     }",
          "2229:     return true;",
          "2230: }",
          "",
          "[Removed Lines]",
          "2219:     if ($oldversion < 2018050200.01) {",
          "2223:         set_config('forceclean', 0);",
          "2226:         upgrade_main_savepoint(true, 2018050200.01);",
          "2227:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018050200.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018050200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f046b7035563808de90f38789b8c6b0e073c5e73",
      "candidate_info": {
        "commit_hash": "f046b7035563808de90f38789b8c6b0e073c5e73",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f046b7035563808de90f38789b8c6b0e073c5e73",
        "files": [
          "calendar/amd/build/repository.min.js",
          "calendar/amd/build/repository.min.js.map",
          "calendar/amd/build/view_manager.min.js",
          "calendar/amd/build/view_manager.min.js.map",
          "calendar/amd/src/repository.js",
          "calendar/amd/src/view_manager.js",
          "calendar/externallib.php",
          "calendar/templates/month_mini.mustache",
          "calendar/tests/externallib_test.php",
          "version.php"
        ],
        "message": "MDL-67152 calendar: The day view should start from the current day",
        "before_after_code_files": [
          "calendar/amd/src/repository.js||calendar/amd/src/repository.js",
          "calendar/amd/src/view_manager.js||calendar/amd/src/view_manager.js",
          "calendar/externallib.php||calendar/externallib.php",
          "calendar/templates/month_mini.mustache||calendar/templates/month_mini.mustache",
          "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "calendar/amd/src/repository.js||calendar/amd/src/repository.js": [
          "File: calendar/amd/src/repository.js -> calendar/amd/src/repository.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:         var request = {",
          "103:             methodname: 'core_calendar_get_calendar_monthly_view',",
          "104:             args: {",
          "",
          "[Removed Lines]",
          "101:     var getCalendarMonthData = function(year, month, courseid, categoryid, includenavigation, mini) {",
          "",
          "[Added Lines]",
          "102:     var getCalendarMonthData = function(year, month, courseid, categoryid, includenavigation, mini, day = 1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:                 courseid: courseid,",
          "108:                 categoryid: categoryid,",
          "109:                 includenavigation: includenavigation,",
          "111:             }",
          "112:         };",
          "",
          "[Removed Lines]",
          "110:                 mini: mini",
          "",
          "[Added Lines]",
          "111:                 mini: mini,",
          "112:                 day: day",
          "",
          "---------------"
        ],
        "calendar/amd/src/view_manager.js||calendar/amd/src/view_manager.js": [
          "File: calendar/amd/src/view_manager.js -> calendar/amd/src/view_manager.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:                 var link = $(e.currentTarget);",
          "96:                 if (view === 'month') {",
          "98:                     e.preventDefault();",
          "99:                 } else if (view === 'day') {",
          "100:                     changeDay(root, link.attr('href'), link.data('year'), link.data('month'), link.data('day'),",
          "",
          "[Removed Lines]",
          "97:                     changeMonth(root, link.attr('href'), link.data('year'), link.data('month'), courseId, categoryId);",
          "",
          "[Added Lines]",
          "97:                     changeMonth(root, link.attr('href'), link.data('year'), link.data('month'), courseId, categoryId,",
          "98:                         link.data('day'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:                         categoryId = option.data('categoryid');",
          "126:                     if (view == 'month') {",
          "128:                             .then(function() {",
          "129:                                 return window.history.pushState({}, '', '?view=month');",
          "130:                             }).fail(Notification.exception);",
          "",
          "[Removed Lines]",
          "127:                         refreshMonthContent(root, year, month, courseId, categoryId, root, 'core_calendar/calendar_month')",
          "",
          "[Added Lines]",
          "128:                         refreshMonthContent(root, year, month, courseId, categoryId, root, 'core_calendar/calendar_month', day)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:             startLoading(root);",
          "161:             target = target || root.find(CalendarSelectors.wrapper);",
          "",
          "[Removed Lines]",
          "158:         var refreshMonthContent = function(root, year, month, courseid, categoryid, target, template) {",
          "",
          "[Added Lines]",
          "160:         var refreshMonthContent = function(root, year, month, courseid, categoryid, target, template, day = 1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163:             M.util.js_pending([root.get('id'), year, month, courseid].join('-'));",
          "164:             var includenavigation = root.data('includenavigation');",
          "165:             var mini = root.data('mini');",
          "167:                 .then(function(context) {",
          "168:                     context.viewingmonth = true;",
          "169:                     return Templates.render(template, context);",
          "",
          "[Removed Lines]",
          "166:             return CalendarRepository.getCalendarMonthData(year, month, courseid, categoryid, includenavigation, mini)",
          "",
          "[Added Lines]",
          "168:             return CalendarRepository.getCalendarMonthData(year, month, courseid, categoryid, includenavigation, mini, day)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198:                 .then(function() {",
          "199:                     if (url.length && url !== '#') {",
          "200:                         window.history.pushState({}, '', url);",
          "",
          "[Removed Lines]",
          "196:         var changeMonth = function(root, url, year, month, courseid, categoryid) {",
          "197:             return refreshMonthContent(root, year, month, courseid, categoryid)",
          "",
          "[Added Lines]",
          "199:         var changeMonth = function(root, url, year, month, courseid, categoryid, day = 1) {",
          "200:             return refreshMonthContent(root, year, month, courseid, categoryid, null, null, day)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "218:         var reloadCurrentMonth = function(root, courseId, categoryId) {",
          "219:             var year = root.find(CalendarSelectors.wrapper).data('year');",
          "220:             var month = root.find(CalendarSelectors.wrapper).data('month');",
          "222:             if (typeof courseId === 'undefined') {",
          "223:                 courseId = root.find(CalendarSelectors.wrapper).data('courseid');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:             var day = root.find(CalendarSelectors.wrapper).data('day');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "227:                 categoryId = root.find(CalendarSelectors.wrapper).data('categoryid');",
          "228:             }",
          "231:         };",
          "",
          "[Removed Lines]",
          "230:             return refreshMonthContent(root, year, month, courseId, categoryId);",
          "",
          "[Added Lines]",
          "234:             return refreshMonthContent(root, year, month, courseId, categoryId, null, null, day);",
          "",
          "---------------"
        ],
        "calendar/externallib.php||calendar/externallib.php": [
          "File: calendar/externallib.php -> calendar/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "997:         $params = self::validate_parameters(self::get_calendar_monthly_view_parameters(), [",
          "",
          "[Removed Lines]",
          "993:     public static function get_calendar_monthly_view($year, $month, $courseid, $categoryid, $includenavigation, $mini) {",
          "994:         global $DB, $USER, $PAGE;",
          "",
          "[Added Lines]",
          "994:     public static function get_calendar_monthly_view($year, $month, $courseid, $categoryid, $includenavigation, $mini, $day) {",
          "995:         global $USER, $PAGE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1001:             'categoryid' => $categoryid,",
          "1002:             'includenavigation' => $includenavigation,",
          "1003:             'mini' => $mini,",
          "1004:         ]);",
          "1006:         $context = \\context_user::instance($USER->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1005:             'day' => $day,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1010:         $type = \\core_calendar\\type_factory::get_calendar_instance();",
          "1013:         $calendar = \\calendar_information::create($time, $params['courseid'], $params['categoryid']);",
          "1014:         self::validate_context($calendar->context);",
          "",
          "[Removed Lines]",
          "1012:         $time = $type->convert_to_timestamp($params['year'], $params['month'], 1);",
          "",
          "[Added Lines]",
          "1014:         $time = $type->convert_to_timestamp($params['year'], $params['month'], $params['day']);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1045:                     false,",
          "1046:                     NULL_ALLOWED",
          "1047:                 ),",
          "1048:             ]",
          "1049:         );",
          "1050:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1050:                 'day' => new external_value(PARAM_INT, 'Day to be viewed', VALUE_DEFAULT, 1),",
          "",
          "---------------"
        ],
        "calendar/templates/month_mini.mustache||calendar/templates/month_mini.mustache": [
          "File: calendar/templates/month_mini.mustache -> calendar/templates/month_mini.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     }} data-categoryid=\"{{categoryid}}\"{{!",
          "39:     }} data-month=\"{{date.mon}}\"{{!",
          "40:     }} data-year=\"{{date.year}}\"{{!",
          "41:     }} data-view=\"month\"{{!",
          "42:     }}>",
          "43:     {{> core/overlay_loading}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     }} data-day=\"{{date.mday}}\"{{!",
          "",
          "---------------"
        ],
        "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php": [
          "File: calendar/tests/externallib_test.php -> calendar/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2372:         $data = external_api::clean_returnvalue(",
          "2373:             core_calendar_external::get_calendar_monthly_view_returns(),",
          "2374:             core_calendar_external::get_calendar_monthly_view($timestart->format('Y'), $timestart->format('n'),",
          "2376:         );",
          "2377:         $this->assertEquals($data['courseid'], $course->id);",
          "",
          "[Removed Lines]",
          "2375:                                                               $course->id, null, false, true)",
          "",
          "[Added Lines]",
          "2375:                                                               $course->id, null, false, true, $timestart->format('d'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2380:         $data = external_api::clean_returnvalue(",
          "2381:             core_calendar_external::get_calendar_monthly_view_returns(),",
          "2382:             core_calendar_external::get_calendar_monthly_view($timestart->format('Y'), $timestart->format('n'),",
          "2384:         );",
          "2385:         $this->assertEquals($data['courseid'], $course->id);",
          "",
          "[Removed Lines]",
          "2383:                                                               $course->id, null, false, true)",
          "",
          "[Added Lines]",
          "2383:                                                               $course->id, null, false, true, $timestart->format('d'))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2389:         $data = external_api::clean_returnvalue(",
          "2390:             core_calendar_external::get_calendar_monthly_view_returns(),",
          "2391:             core_calendar_external::get_calendar_monthly_view($timestart->format('Y'), $timestart->format('n'),",
          "2393:         );",
          "2394:     }",
          "",
          "[Removed Lines]",
          "2392:                                                               $course->id, null, false, false)",
          "",
          "[Added Lines]",
          "2392:                                                               $course->id, null, false, false, $timestart->format('d'))",
          "2399:     public function test_get_calendar_monthly_view_with_day_provided() {",
          "2400:         $this->resetAfterTest();",
          "2401:         $this->setAdminUser();",
          "2403:         $timestart = new DateTime();",
          "2404:         $data = external_api::clean_returnvalue(",
          "2405:             core_calendar_external::get_calendar_monthly_view_returns(),",
          "2406:             core_calendar_external::get_calendar_monthly_view($timestart->format('Y'), $timestart->format('n'),",
          "2407:                                                               SITEID, null, false, true, $timestart->format('d'))",
          "2408:         );",
          "2409:         $this->assertEquals($data['date']['mday'], $timestart->format('d'));",
          "2410:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "35: $release  = '3.9dev (Build: 20191205)'; // Human-friendly version name",
          "",
          "[Removed Lines]",
          "32: $version  = 2019120500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019120500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "086409f6010673c3672b9194195355114c661860",
      "candidate_info": {
        "commit_hash": "086409f6010673c3672b9194195355114c661860",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/086409f6010673c3672b9194195355114c661860",
        "files": [
          "lib/db/services.php",
          "message/externallib.php",
          "message/tests/externallib_test.php",
          "version.php"
        ],
        "message": "MDL-64773 core_message: added web services to mute/unmute conversations",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "message/externallib.php||message/externallib.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "874:         'type' => 'write',",
          "875:         'capabilities' => 'moodle/course:managegroups'",
          "876:     ),",
          "877:     'core_message_block_user' => array(",
          "878:         'classname' => 'core_message_external',",
          "879:         'methodname' => 'block_user',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "877:     'core_message_mute_conversations' => array(",
          "878:         'classname' => 'core_message_external',",
          "879:         'methodname' => 'mute_conversations',",
          "880:         'classpath' => 'message/externallib.php',",
          "881:         'description' => 'Mutes a list of conversations',",
          "882:         'type' => 'write',",
          "883:         'ajax' => true,",
          "884:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "885:     ),",
          "886:     'core_message_unmute_conversations' => array(",
          "887:         'classname' => 'core_message_external',",
          "888:         'methodname' => 'unmute_conversations',",
          "889:         'classpath' => 'message/externallib.php',",
          "890:         'description' => 'Unmutes a list of conversations',",
          "891:         'type' => 'write',",
          "892:         'ajax' => true,",
          "893:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "894:     ),",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:         return null;",
          "411:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:     public static function mute_conversations_parameters() {",
          "419:         return new external_function_parameters(",
          "420:             [",
          "421:                 'userid' => new external_value(PARAM_INT, 'The id of the user who is blocking'),",
          "422:                 'conversationids' => new external_multiple_structure(",
          "423:                     new external_value(PARAM_INT, 'id of the conversation', VALUE_REQUIRED)",
          "424:                 ),",
          "425:             ]",
          "426:         );",
          "427:     }",
          "436:     public static function mute_conversations(int $userid, array $conversationids) {",
          "437:         global $CFG, $USER;",
          "440:         if (empty($CFG->messaging)) {",
          "441:             throw new moodle_exception('disabled', 'message');",
          "442:         }",
          "445:         $context = context_system::instance();",
          "446:         self::validate_context($context);",
          "448:         $params = ['userid' => $userid, 'conversationids' => $conversationids];",
          "449:         $params = self::validate_parameters(self::mute_conversations_parameters(), $params);",
          "451:         $capability = 'moodle/site:manageallmessaging';",
          "452:         if (($USER->id != $params['userid']) && !has_capability($capability, $context)) {",
          "453:             throw new required_capability_exception($context, $capability, 'nopermissions', '');",
          "454:         }",
          "456:         foreach ($params['conversationids'] as $conversationid) {",
          "457:             if (!\\core_message\\api::is_conversation_muted($params['userid'], $conversationid)) {",
          "458:                 \\core_message\\api::mute_conversation($params['userid'], $conversationid);",
          "459:             }",
          "460:         }",
          "462:         return [];",
          "463:     }",
          "470:     public static function mute_conversations_returns() {",
          "471:         return new external_warnings();",
          "472:     }",
          "479:     public static function unmute_conversations_parameters() {",
          "480:         return new external_function_parameters(",
          "481:             [",
          "482:                 'userid' => new external_value(PARAM_INT, 'The id of the user who is unblocking'),",
          "483:                 'conversationids' => new external_multiple_structure(",
          "484:                     new external_value(PARAM_INT, 'id of the conversation', VALUE_REQUIRED)",
          "485:                 ),",
          "486:             ]",
          "487:         );",
          "488:     }",
          "496:     public static function unmute_conversations(int $userid, array $conversationids) {",
          "497:         global $CFG, $USER;",
          "500:         if (empty($CFG->messaging)) {",
          "501:             throw new moodle_exception('disabled', 'message');",
          "502:         }",
          "505:         $context = context_system::instance();",
          "506:         self::validate_context($context);",
          "508:         $params = ['userid' => $userid, 'conversationids' => $conversationids];",
          "509:         $params = self::validate_parameters(self::unmute_conversations_parameters(), $params);",
          "511:         $capability = 'moodle/site:manageallmessaging';",
          "512:         if (($USER->id != $params['userid']) && !has_capability($capability, $context)) {",
          "513:             throw new required_capability_exception($context, $capability, 'nopermissions', '');",
          "514:         }",
          "516:         foreach ($params['conversationids'] as $conversationid) {",
          "517:             \\core_message\\api::unmute_conversation($params['userid'], $conversationid);",
          "518:         }",
          "520:         return [];",
          "521:     }",
          "528:     public static function unmute_conversations_returns() {",
          "529:         return new external_warnings();",
          "530:     }",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1022:         core_message_external::decline_contact_request($user1->id, $user2->id);",
          "1023:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1028:     public function test_mute_conversations() {",
          "1029:         global $DB;",
          "1031:         $this->resetAfterTest(true);",
          "1033:         $user1 = self::getDataGenerator()->create_user();",
          "1034:         $user2 = self::getDataGenerator()->create_user();",
          "1036:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1037:             [$user1->id, $user2->id]);",
          "1039:         $this->setUser($user1);",
          "1042:         $return = core_message_external::mute_conversations($user1->id, [$conversation->id]);",
          "1043:         $return = external_api::clean_returnvalue(core_message_external::mute_conversations_returns(), $return);",
          "1044:         $this->assertEquals(array(), $return);",
          "1047:         $mca = $DB->get_record('message_conversation_actions', []);",
          "1049:         $this->assertEquals($user1->id, $mca->userid);",
          "1050:         $this->assertEquals($conversation->id, $mca->conversationid);",
          "1051:         $this->assertEquals(\\core_message\\api::CONVERSATION_ACTION_MUTED, $mca->action);",
          "1054:         $return = core_message_external::mute_conversations($user1->id, [$conversation->id]);",
          "1055:         $return = external_api::clean_returnvalue(core_message_external::mute_conversations_returns(), $return);",
          "1056:         $this->assertEquals(array(), $return);",
          "1058:         $this->assertEquals(1, $DB->count_records('message_conversation_actions'));",
          "1059:     }",
          "1064:     public function test_mute_conversations_messaging_disabled() {",
          "1065:         global $CFG;",
          "1067:         $this->resetAfterTest();",
          "1070:         $user1 = self::getDataGenerator()->create_user();",
          "1071:         $user2 = self::getDataGenerator()->create_user();",
          "1073:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1074:             [$user1->id, $user2->id]);",
          "1076:         $this->setUser($user1);",
          "1079:         $CFG->messaging = 0;",
          "1082:         $this->expectException('moodle_exception');",
          "1083:         core_message_external::mute_conversations($user1->id, [$conversation->id]);",
          "1084:     }",
          "1089:     public function test_mute_conversations_no_permission() {",
          "1090:         $this->resetAfterTest();",
          "1093:         $user1 = self::getDataGenerator()->create_user();",
          "1094:         $user2 = self::getDataGenerator()->create_user();",
          "1095:         $user3 = self::getDataGenerator()->create_user();",
          "1097:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1098:             [$user1->id, $user2->id]);",
          "1100:         $this->setUser($user3);",
          "1103:         $this->expectException('required_capability_exception');",
          "1104:         core_message_external::mute_conversations($user1->id, [$conversation->id]);",
          "1105:     }",
          "1110:     public function test_unmute_conversations() {",
          "1111:         global $DB;",
          "1113:         $this->resetAfterTest(true);",
          "1115:         $user1 = self::getDataGenerator()->create_user();",
          "1116:         $user2 = self::getDataGenerator()->create_user();",
          "1118:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1119:             [$user1->id, $user2->id]);",
          "1121:         $this->setUser($user1);",
          "1124:         \\core_message\\api::mute_conversation($user1->id, $conversation->id);",
          "1127:         $return = core_message_external::unmute_conversations($user1->id, [$conversation->id]);",
          "1128:         $return = external_api::clean_returnvalue(core_message_external::unmute_conversations_returns(), $return);",
          "1129:         $this->assertEquals(array(), $return);",
          "1131:         $this->assertEquals(0, $DB->count_records('message_conversation_actions'));",
          "1134:         $return = core_message_external::unmute_conversations($user1->id, [$conversation->id]);",
          "1135:         $return = external_api::clean_returnvalue(core_message_external::unmute_conversations_returns(), $return);",
          "1136:         $this->assertEquals(array(), $return);",
          "1138:         $this->assertEquals(0, $DB->count_records('message_conversation_actions'));",
          "1139:     }",
          "1144:     public function test_unmute_conversation_messaging_disabled() {",
          "1145:         global $CFG;",
          "1147:         $this->resetAfterTest();",
          "1150:         $user1 = self::getDataGenerator()->create_user();",
          "1151:         $user2 = self::getDataGenerator()->create_user();",
          "1153:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1154:             [$user1->id, $user2->id]);",
          "1156:         $this->setUser($user1);",
          "1159:         $CFG->messaging = 0;",
          "1162:         $this->expectException('moodle_exception');",
          "1163:         core_message_external::unmute_conversations($user1->id, [$user2->id]);",
          "1164:     }",
          "1169:     public function test_unmute_conversation_no_permission() {",
          "1170:         $this->resetAfterTest();",
          "1173:         $user1 = self::getDataGenerator()->create_user();",
          "1174:         $user2 = self::getDataGenerator()->create_user();",
          "1175:         $user3 = self::getDataGenerator()->create_user();",
          "1177:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1178:             [$user1->id, $user2->id]);",
          "1180:         $this->setUser($user3);",
          "1183:         $this->expectException('required_capability_exception');",
          "1184:         core_message_external::unmute_conversations($user1->id, [$conversation->id]);",
          "1185:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019030800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019030800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f16f4115d0e5ce4c277011738d20e89af11cf6a",
      "candidate_info": {
        "commit_hash": "1f16f4115d0e5ce4c277011738d20e89af11cf6a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1f16f4115d0e5ce4c277011738d20e89af11cf6a",
        "files": [
          "lib/db/messages.php",
          "lib/db/upgrade.php",
          "message/amd/build/message_drawer.min.js",
          "message/amd/build/message_drawer.min.js.map",
          "message/amd/build/message_drawer_view_contacts.min.js",
          "message/amd/build/message_drawer_view_contacts.min.js.map",
          "message/amd/src/message_drawer.js",
          "message/amd/src/message_drawer_view_contacts.js",
          "message/classes/helper.php",
          "message/index.php",
          "message/pendingcontactrequests.php",
          "message/templates/message_index.mustache",
          "version.php"
        ],
        "message": "Merge branch 'MDL-65219-master' of https://github.com/ryanwyllie/moodle",
        "before_after_code_files": [
          "lib/db/messages.php||lib/db/messages.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "message/amd/src/message_drawer.js||message/amd/src/message_drawer.js",
          "message/amd/src/message_drawer_view_contacts.js||message/amd/src/message_drawer_view_contacts.js",
          "message/classes/helper.php||message/classes/helper.php",
          "message/index.php||message/index.php",
          "message/pendingcontactrequests.php||message/pendingcontactrequests.php",
          "message/templates/message_index.mustache||message/templates/message_index.mustache",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/messages.php||lib/db/messages.php": [
          "File: lib/db/messages.php -> lib/db/messages.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     'messagecontactrequests' => [",
          "123:         'defaults' => [",
          "125:             'email' => MESSAGE_PERMITTED + MESSAGE_DEFAULT_LOGGEDOFF,",
          "126:             'airnotifier' => MESSAGE_PERMITTED + MESSAGE_DEFAULT_LOGGEDIN + MESSAGE_DEFAULT_LOGGEDOFF,",
          "127:         ]",
          "",
          "[Removed Lines]",
          "124:             'popup' => MESSAGE_PERMITTED + MESSAGE_DEFAULT_LOGGEDIN + MESSAGE_DEFAULT_LOGGEDOFF,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3431:         upgrade_main_savepoint(true, 2019072200.00);",
          "3432:     }",
          "3434:     return true;",
          "3435: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3434:     if ($oldversion < 2019072500.01) {",
          "3436:         $oldloggedinconfig = get_config('message', 'message_provider_moodle_messagecontactrequests_loggedin');",
          "3437:         $oldloggedoffconfig = get_config('message', 'message_provider_moodle_messagecontactrequests_loggedoff');",
          "3438:         $newloggedinconfig = implode(',', array_filter(explode(',', $oldloggedinconfig), function($value) {",
          "3439:             return $value != 'popup';",
          "3440:         }));",
          "3441:         $newloggedoffconfig = implode(',', array_filter(explode(',', $oldloggedoffconfig), function($value) {",
          "3442:             return $value != 'popup';",
          "3443:         }));",
          "3444:         set_config('message_provider_moodle_messagecontactrequests_loggedin', $newloggedinconfig, 'message');",
          "3445:         set_config('message_provider_moodle_messagecontactrequests_loggedoff', $newloggedoffconfig, 'message');",
          "3447:         upgrade_main_savepoint(true, 2019072500.01);",
          "3448:     }",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer.js||message/amd/src/message_drawer.js": [
          "File: message/amd/src/message_drawer.js -> message/amd/src/message_drawer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:         root = $(root);",
          "275:         createRoutes(uniqueId, root);",
          "276:         registerEventListeners(uniqueId, root, alwaysVisible);",
          "277:         if (alwaysVisible) {",
          "278:             show(uniqueId, root);",
          "289:             }",
          "290:         }",
          "291:     };",
          "",
          "[Removed Lines]",
          "273:     var init = function(root, uniqueId, alwaysVisible, sendToUser, conversationId) {",
          "280:             if (sendToUser) {",
          "282:                 if (conversationId) {",
          "283:                     Router.go(uniqueId, Routes.VIEW_CONVERSATION, conversationId);",
          "284:                 } else {",
          "285:                     Router.go(uniqueId, Routes.VIEW_CONVERSATION, null, 'create', sendToUser);",
          "286:                 }",
          "287:             } else if (conversationId) { // We aren't sending to a specific user, but to a group conversation.",
          "288:                 Router.go(uniqueId, Routes.VIEW_CONVERSATION, conversationId);",
          "",
          "[Added Lines]",
          "273:     var init = function(root, uniqueId, alwaysVisible, route) {",
          "281:             if (route) {",
          "282:                 var routeParams = route.params || [];",
          "283:                 routeParams = [uniqueId, route.path].concat(routeParams);",
          "284:                 Router.go.apply(null, routeParams);",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_contacts.js||message/amd/src/message_drawer_view_contacts.js": [
          "File: message/amd/src/message_drawer_view_contacts.js -> message/amd/src/message_drawer_view_contacts.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         return body.find(SELECTORS.REQUESTS_SECTION_CONTAINER);",
          "67:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     var getShowContactsAction = function(body) {",
          "76:         return body.find(SELECTORS.ACTION_SHOW_CONTACTS_SECTION);",
          "77:     };",
          "85:     var getShowRequestsAction = function(body) {",
          "86:         return body.find(SELECTORS.ACTION_SHOW_REQUESTS_SECTION);",
          "87:     };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     var registerEventListeners = function(body) {",
          "106:         var contactsSection = getContactsSectionContainer(body);",
          "107:         var requestsSection = getRequestsSectionContainer(body);",
          "111:         showContactsAction.on('show.bs.tab', function() {",
          "112:             ContactsSection.show(contactsSection);",
          "",
          "[Removed Lines]",
          "108:         var showContactsAction = body.find(SELECTORS.ACTION_SHOW_CONTACTS_SECTION);",
          "109:         var showRequestsAction = body.find(SELECTORS.ACTION_SHOW_REQUESTS_SECTION);",
          "",
          "[Added Lines]",
          "128:         var showContactsAction = getShowContactsAction(body);",
          "129:         var showRequestsAction = getShowRequestsAction(body);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:         body = $(body);",
          "134:         if (!body.attr('data-contacts-init')) {",
          "",
          "[Removed Lines]",
          "131:     var show = function(namespace, header, body) {",
          "",
          "[Added Lines]",
          "153:     var show = function(namespace, header, body, footer, tab) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:         var contactsSection = getContactsSectionContainer(body);",
          "140:         var requestsSection = getRequestsSectionContainer(body);",
          "142:         if (isSectionVisible(contactsSection)) {",
          "143:             ContactsSection.show(contactsSection);",
          "144:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:         if (tab) {",
          "165:             var showContactsAction = getShowContactsAction(body);",
          "166:             var showRequestsAction = getShowRequestsAction(body);",
          "172:             if (tab == 'requests') {",
          "173:                 showContactsAction.removeClass('active');",
          "174:                 contactsSection.removeClass('show active');",
          "175:                 showRequestsAction.addClass('active');",
          "176:                 requestsSection.addClass('show active');",
          "177:             } else {",
          "178:                 showRequestsAction.removeClass('active');",
          "179:                 requestsSection.removeClass('show active');",
          "180:                 showContactsAction.addClass('active');",
          "181:                 contactsSection.addClass('show active');",
          "182:             }",
          "183:         }",
          "",
          "---------------"
        ],
        "message/classes/helper.php||message/classes/helper.php": [
          "File: message/classes/helper.php -> message/classes/helper.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "693:         global $USER, $CFG, $PAGE;",
          "",
          "[Removed Lines]",
          "692:     public static function render_messaging_widget(bool $isdrawer, int $sendtouser = null, int $conversationid = null) {",
          "",
          "[Added Lines]",
          "693:     public static function render_messaging_widget(",
          "694:         bool $isdrawer,",
          "695:         int $sendtouser = null,",
          "696:         int $conversationid = null,",
          "697:         string $view = null",
          "698:     ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "765:                 'messageurl' => $messageurl,",
          "766:                 'notification' => $notification",
          "767:             ],",
          "770:             'isdrawer' => $isdrawer",
          "771:         ];",
          "775:         }",
          "781:         return $renderer->render_from_template($template, $templatecontext);",
          "782:     }",
          "",
          "[Removed Lines]",
          "768:             'sendtouser' => false,",
          "769:             'conversationid' => false,",
          "773:         if ($sendtouser) {",
          "774:             $templatecontext['sendtouser'] = $sendtouser;",
          "777:         if ($conversationid) {",
          "778:             $templatecontext['conversationid'] = $conversationid;",
          "779:         }",
          "",
          "[Added Lines]",
          "777:         if ($sendtouser || $conversationid) {",
          "778:             $route = [",
          "779:                 'path' => 'view-conversation',",
          "780:                 'params' => $conversationid ? [$conversationid] : [null, 'create', $sendtouser]",
          "781:             ];",
          "782:         } else if ($view === 'contactrequests') {",
          "783:             $route = [",
          "784:                 'path' => 'view-contacts',",
          "785:                 'params' => ['requests']",
          "786:             ];",
          "787:         } else {",
          "788:             $route = null;",
          "791:         $templatecontext['route'] = json_encode($route);",
          "",
          "---------------"
        ],
        "message/index.php||message/index.php": [
          "File: message/index.php -> message/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: $id = optional_param('id', 0, PARAM_INT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: $view = optional_param('view', null, PARAM_ALPHANUM);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         \\core\\output\\notification::NOTIFY_WARNING);",
          "91:     echo $OUTPUT->render($notify);",
          "92: }",
          "94: echo $OUTPUT->footer();",
          "",
          "[Removed Lines]",
          "93: echo \\core_message\\helper::render_messaging_widget(false, $userid, $conversationid);",
          "",
          "[Added Lines]",
          "94: echo \\core_message\\helper::render_messaging_widget(false, $userid, $conversationid, $view);",
          "",
          "---------------"
        ],
        "message/pendingcontactrequests.php||message/pendingcontactrequests.php": [
          "File: message/pendingcontactrequests.php -> message/pendingcontactrequests.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: define('NO_DEBUG_DISPLAY', true);",
          "27: require('../config.php');",
          "29: require_login(null, false);",
          "33: redirect(\"{$CFG->wwwroot}/message/index.php?view=contactrequests\");",
          "",
          "---------------"
        ],
        "message/templates/message_index.mustache||message/templates/message_index.mustache": [
          "File: message/templates/message_index.mustache -> message/templates/message_index.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: {{#js}}",
          "80:     require(['jquery', 'core_message/message_drawer'], function($, MessageDrawer) {",
          "81:     var root = $('#message-index-{{uniqid}}');",
          "83:     });",
          "84: {{/js}}",
          "",
          "[Removed Lines]",
          "82:     MessageDrawer.init(root, '{{uniqid}}', true, {{sendtouser}}, {{conversationid}});",
          "",
          "[Added Lines]",
          "82:     MessageDrawer.init(root, '{{uniqid}}', true, {{{route}}});",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019072500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019072500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52fcc0b827f3da7b4b20a28f12396095a0a40bdb",
      "candidate_info": {
        "commit_hash": "52fcc0b827f3da7b4b20a28f12396095a0a40bdb",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/52fcc0b827f3da7b4b20a28f12396095a0a40bdb",
        "files": [
          "lib/db/services.php",
          "version.php"
        ],
        "message": "MDL-64656 core_tag: Add existing WebServices to the mobile app service",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1498:         'description' => 'Gets tag index page for one tag and one tag area',",
          "1499:         'type' => 'read',",
          "1500:         'ajax' => true,",
          "1501:     ),",
          "1502:     'core_tag_get_tags' => array(",
          "1503:         'classname' => 'core_tag_external',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1501:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019040600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019040600.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}