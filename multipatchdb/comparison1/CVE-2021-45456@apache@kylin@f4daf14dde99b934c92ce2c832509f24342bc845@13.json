{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "05a7bed1655a342915fc591013314f052090d7af",
      "candidate_info": {
        "commit_hash": "05a7bed1655a342915fc591013314f052090d7af",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/05a7bed1655a342915fc591013314f052090d7af",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java",
          "kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java"
        ],
        "message": "minor, api format\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>\n\n(cherry picked from commit 363ebeac1227d6d6fe10d728076e033ba66ed434)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java||core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java",
          "kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java||kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java||core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java -> core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: import org.slf4j.LoggerFactory;",
          "56: import com.fasterxml.jackson.databind.ObjectMapper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: import org.apache.kylin.shaded.com.google.common.base.Strings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:         }",
          "175:     }",
          "177:     public void wipeCache(String entity, String event, String cacheKey) throws IOException {",
          "178:         HttpPut request;",
          "179:         String url;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:     public void announceWipeCache(String entity, String event, String cacheKey) throws IOException {",
          "179:         String url = baseUrl + \"/cache/announce/\" + entity + \"/\" + cacheKey + \"/\" + event;",
          "180:         HttpPut request = new HttpPut(url);",
          "182:         try {",
          "183:             HttpResponse response = client.execute(request);",
          "185:             if (response.getStatusLine().getStatusCode() != 200) {",
          "186:                 String msg = EntityUtils.toString(response.getEntity());",
          "187:                 throw new IOException(\"Invalid response \" + response.getStatusLine().getStatusCode()",
          "188:                         + \" with announce cache wipe url \" + url + \"\\n\" + msg);",
          "189:             }",
          "190:         } catch (Exception ex) {",
          "191:             throw new IOException(ex);",
          "192:         } finally {",
          "193:             request.releaseConnection();",
          "194:         }",
          "195:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:     }",
          "203:     public String getKylinProperties() throws IOException {",
          "206:         HttpResponse response = null;",
          "207:         try {",
          "208:             response = client.execute(request);",
          "209:             String msg = EntityUtils.toString(response.getEntity());",
          "213:             if (response.getStatusLine().getStatusCode() != 200)",
          "214:                 throw new IOException(INVALID_RESPONSE + response.getStatusLine().getStatusCode()",
          "215:                         + \" with cache wipe url \" + url + \"\\n\" + msg);",
          "216:             return msg;",
          "217:         } finally {",
          "218:             cleanup(request, response);",
          "",
          "[Removed Lines]",
          "204:         String url = baseUrl + \"/admin/config\";",
          "205:         HttpGet request = newGet(url);",
          "210:             Map<String, String> map = JsonUtil.readValueAsMap(msg);",
          "211:             msg = map.get(\"config\");",
          "",
          "[Added Lines]",
          "224:         return getConfiguration(baseUrl + \"/admin/config\", true);",
          "225:     }",
          "227:     public String getHDFSConfiguration() throws IOException {",
          "228:         return getConfiguration(baseUrl + \"/admin/config/hdfs\", true);",
          "229:     }",
          "231:     public String getHBaseConfiguration() throws IOException {",
          "232:         return getConfiguration(baseUrl + \"/admin/config/hbase\", true);",
          "233:     }",
          "235:     private String getConfiguration(String url, boolean ifAuth) throws IOException {",
          "236:         HttpGet request = ifAuth ? newGet(url) : new HttpGet(url);",
          "246:             Map<String, String> map = JsonUtil.readValueAsMap(msg);",
          "247:             msg = map.get(\"config\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "350:         return content;",
          "351:     }",
          "353:     private HashMap dealResponse(HttpResponse response) throws IOException {",
          "354:         if (response.getStatusLine().getStatusCode() != 200) {",
          "355:             throw new IOException(INVALID_RESPONSE + response.getStatusLine().getStatusCode());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385:     public void checkCompatibility(String jsonRequest) throws IOException {",
          "386:         checkCompatibility(jsonRequest, false);",
          "387:     }",
          "389:     public void checkCompatibility(String jsonRequest, boolean ifHiveCheck) throws IOException {",
          "390:         if (ifHiveCheck) {",
          "391:             checkCompatibility(jsonRequest, baseUrl + \"/cubes/checkCompatibility/hiveTable\");",
          "392:         }",
          "393:         checkCompatibility(jsonRequest, baseUrl + \"/cubes/checkCompatibility\");",
          "394:     }",
          "396:     private void checkCompatibility(String jsonRequest, String url) throws IOException {",
          "397:         HttpPost post = newPost(url);",
          "398:         try {",
          "399:             post.setEntity(new StringEntity(jsonRequest, \"UTF-8\"));",
          "400:             HttpResponse response = client.execute(post);",
          "401:             if (response.getStatusLine().getStatusCode() != 200) {",
          "402:                 String msg = getContent(response);",
          "403:                 Map<String, String> kvMap = JsonUtil.readValueAsMap(msg);",
          "404:                 String exception = kvMap.containsKey(\"exception\") ? kvMap.get(\"exception\") : \"unknown\";",
          "405:                 throw new IOException(\"Error code: \" + response.getStatusLine().getStatusCode() + \"\\n\" + exception);",
          "406:             }",
          "407:         } finally {",
          "408:             post.releaseConnection();",
          "409:         }",
          "410:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:     private void addHttpHeaders(HttpRequestBase method) {",
          "363:         method.addHeader(\"Accept\", \"application/json, text/plain, */*\");",
          "364:         method.addHeader(\"Content-Type\", APPLICATION_JSON);",
          "368:     }",
          "370:     private HttpPost newPost(String url) {",
          "",
          "[Removed Lines]",
          "365:         String basicAuth = DatatypeConverter",
          "366:                 .printBase64Binary((this.userName + \":\" + this.password).getBytes(StandardCharsets.UTF_8));",
          "367:         method.addHeader(\"Authorization\", \"Basic \" + basicAuth);",
          "",
          "[Added Lines]",
          "424:         if (!Strings.isNullOrEmpty(this.userName) && !Strings.isNullOrEmpty(this.password)) {",
          "425:             String basicAuth = DatatypeConverter",
          "426:                     .printBase64Binary((this.userName + \":\" + this.password).getBytes(StandardCharsets.UTF_8));",
          "427:             method.addHeader(\"Authorization\", \"Basic \" + basicAuth);",
          "428:         }",
          "",
          "---------------"
        ],
        "kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java||kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java": [
          "File: kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java -> kylin-it/src/test/java/org/apache/kylin/restclient/ITRestClientTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import static org.junit.Assert.assertTrue;",
          "24: import java.io.File;",
          "25: import java.util.HashMap;",
          "26: import java.util.Random;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.io.IOException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:         HttpResponse result = client.query(sql, PROJECT_NAME);",
          "105:     }",
          "107:     protected static void stopJetty() throws Exception {",
          "108:         if (server != null)",
          "109:             server.stop();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:     @Test",
          "109:     public void testGetConfigByAdmin() throws Exception {",
          "110:         RestClient client = new RestClient(HOST, PORT, USERNAME, PASSWD);",
          "111:         String result = client.getKylinProperties();",
          "112:         assertTrue(result != null && result.length() > 0);",
          "113:     }",
          "115:     @Test(expected = IOException.class)",
          "116:     public void testGetConfigUnauthorized() throws Exception {",
          "117:         RestClient client = new RestClient(HOST, PORT, \"\", \"\");",
          "118:         client.getKylinProperties();",
          "119:     }",
          "121:     @Test(expected = IOException.class)",
          "122:     public void testGetConfigNonAdmin() throws Exception {",
          "123:         RestClient client = new RestClient(HOST, PORT, \"MODELER\", \"MODELER\");",
          "124:         client.getKylinProperties();",
          "125:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "737f79edc0ef73ab780355f2a54f5898e5809ab3",
      "candidate_info": {
        "commit_hash": "737f79edc0ef73ab780355f2a54f5898e5809ab3",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/737f79edc0ef73ab780355f2a54f5898e5809ab3",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
          "core-common/src/main/java/org/apache/kylin/common/util/ParameterFilter.java",
          "core-common/src/test/java/org/apache/kylin/common/util/ParameterFilterTest.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java"
        ],
        "message": "fix",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java||core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
          "core-common/src/main/java/org/apache/kylin/common/util/ParameterFilter.java||core-common/src/main/java/org/apache/kylin/common/util/ParameterFilter.java",
          "core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java||core-common/src/test/java/org/apache/kylin/common/util/ParameterFilterTest.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java||server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java||server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java||server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: import org.apache.kylin.common.util.CliCommandExecutor;",
          "47: import org.apache.kylin.common.util.FileUtils;",
          "48: import org.apache.kylin.common.util.HadoopUtil;",
          "49: import org.apache.kylin.common.util.StringUtil;",
          "50: import org.slf4j.Logger;",
          "51: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import org.apache.kylin.common.util.ParameterFilter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1113:     }",
          "1115:     public String getHiveDatabaseForIntermediateTable() {",
          "1117:     }",
          "1119:     public String getFlatTableStorageFormat() {",
          "",
          "[Removed Lines]",
          "1116:         return CliCommandExecutor.checkHiveProperty(this.getOptional(\"kylin.source.hive.database-for-flat-table\", DEFAULT));",
          "",
          "[Added Lines]",
          "1117:         return ParameterFilter.checkHiveProperty(this.getOptional(\"kylin.source.hive.database-for-flat-table\", DEFAULT));",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java||core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java -> core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:             }",
          "176:         }",
          "177:     }",
          "224: }",
          "",
          "[Removed Lines]",
          "179:     public static final String COMMAND_BLOCK_LIST = \"[ &`>|{}()$;\\\\-#~!+*\\\\\\\\]+\";",
          "180:     public static final String COMMAND_WHITE_LIST = \"[^\\\\w%,@/:=?.\\\"\\\\[\\\\]]\";",
          "181:     public static final String HIVE_BLOCK_LIST = \"[ <>()$;\\\\-#!+*\\\"'/=%@]+\";",
          "205:     public static String checkParameter(String commandParameter) {",
          "206:         return checkParameter(commandParameter, COMMAND_BLOCK_LIST);",
          "207:     }",
          "209:     public static String checkParameterWhiteList(String commandParameter) {",
          "210:         return checkParameter(commandParameter, COMMAND_WHITE_LIST);",
          "211:     }",
          "213:     public static String checkHiveProperty(String hiveProperty) {",
          "214:         return checkParameter(hiveProperty, HIVE_BLOCK_LIST);",
          "215:     }",
          "217:     private static String checkParameter(String commandParameter, String rex) {",
          "218:         String repaired = commandParameter.replaceAll(rex, \"\");",
          "219:         if (repaired.length() != commandParameter.length()) {",
          "220:             logger.warn(\"Detected illegal character in command {} by {} , replace it to {}.\", commandParameter, rex, repaired);",
          "221:         }",
          "222:         return repaired;",
          "223:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/util/ParameterFilter.java||core-common/src/main/java/org/apache/kylin/common/util/ParameterFilter.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/util/ParameterFilter.java -> core-common/src/main/java/org/apache/kylin/common/util/ParameterFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.common.util;",
          "21: import org.slf4j.LoggerFactory;",
          "22: import org.slf4j.Logger;",
          "24: public class ParameterFilter {",
          "25:     private static final Logger logger = LoggerFactory.getLogger(ParameterFilter.class);",
          "27:     public static final String PARAMETER_REGULAR_EXPRESSION = \"[ &`>|{}()$;\\\\-#~!+*\\\\\\\\]+\";",
          "28:     public static final String URI_REGULAR_EXPRESSION = \"[^\\\\w%,@/:=?.\\\"\\\\[\\\\]]\";",
          "29:     public static final String HIVE_PROPERTY_REGULAR_EXPRESSION = \"[ <>()$;\\\\-#!+*\\\"'/=%@]+\";",
          "30:     public static final String SPARK_CONF_REGULAR_EXPRESSION = \"[`$|&;]+\";",
          "53:     public static String checkParameter(String commandParameter) {",
          "54:         return checkParameter(commandParameter, PARAMETER_REGULAR_EXPRESSION, false);",
          "55:     }",
          "57:     public static String checkURI(String commandParameter) {",
          "58:         return checkParameter(commandParameter, URI_REGULAR_EXPRESSION, false);",
          "59:     }",
          "61:     public static String checkHiveProperty(String hiveProperty) {",
          "62:         return checkParameter(hiveProperty, HIVE_PROPERTY_REGULAR_EXPRESSION, false);",
          "63:     }",
          "65:     public static String checkSparkConf(String sparkConf) {",
          "66:         return checkParameter(sparkConf, SPARK_CONF_REGULAR_EXPRESSION, true);",
          "67:     }",
          "69:     private static String checkParameter(String commandParameter, String rex, boolean throwException) {",
          "70:         String repaired = commandParameter.replaceAll(rex, \"\");",
          "71:         if (repaired.length() != commandParameter.length()) {",
          "72:             if (throwException) {",
          "73:                 throw new IllegalArgumentException(\"Detected illegal character in \" + commandParameter + \" by \" + rex);",
          "74:             } else {",
          "75:                 logger.warn(\"Detected illegal character in command {} by {} , replace it to {}.\",",
          "76:                         commandParameter, rex, repaired);",
          "77:             }",
          "78:         }",
          "79:         return repaired;",
          "80:     }",
          "81: }",
          "",
          "---------------"
        ],
        "core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java||core-common/src/test/java/org/apache/kylin/common/util/ParameterFilterTest.java": [
          "File: core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java -> core-common/src/test/java/org/apache/kylin/common/util/ParameterFilterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.kylin.common.util;",
          "20: import org.junit.Test;",
          "22: import static org.junit.Assert.assertEquals;",
          "26:     private String[][] commands = {",
          "27:             {\"nslookup unknown.com &\", \"nslookupunknown.com\"},",
          "",
          "[Removed Lines]",
          "24: public class CliCommandExecutorTest {",
          "",
          "[Added Lines]",
          "20: import org.junit.Assert;",
          "25: public class ParameterFilterTest {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:             {\"db and 1=2\", \"dband12\"}",
          "42:     };",
          "44:     @Test",
          "46:         for (String[] pair : commands) {",
          "48:         }",
          "49:     }",
          "51:     @Test",
          "53:         for (String[] pair : commands) {",
          "55:         }",
          "56:     }",
          "58:     @Test",
          "59:     public void testHiveProperties() {",
          "60:         for (String[] pair : properties) {",
          "62:         }",
          "63:     }",
          "64: }",
          "",
          "[Removed Lines]",
          "45:     public void testCmd() {",
          "47:             assertEquals(pair[1], CliCommandExecutor.checkParameter(pair[0]));",
          "52:     public void testCmd2() {",
          "54:             assertEquals(pair[1], CliCommandExecutor.checkParameterWhiteList(pair[0]));",
          "61:             assertEquals(pair[1], CliCommandExecutor.checkHiveProperty(pair[0]));",
          "",
          "[Added Lines]",
          "45:     private String[] sparkConf = {\"kylin.engine.spark-conf.'`touch /tmp/test`'\", \"'$(touch /tmp/test)'\",",
          "46:     \"'|touch /tmp/test|'\", \"';touch /tmp/test;'\", \"'&touch /tmp/test&'\", \"'$(|;&touch /tmp/test&;|)'\", \"default\"};",
          "49:     public void testParameter() {",
          "51:             assertEquals(pair[1], ParameterFilter.checkParameter(pair[0]));",
          "56:     public void testURI() {",
          "58:             assertEquals(pair[1], ParameterFilter.checkURI(pair[0]));",
          "65:             assertEquals(pair[1], ParameterFilter.checkHiveProperty(pair[0]));",
          "66:         }",
          "67:     }",
          "69:     @Test",
          "70:     public void testSparkConf() {",
          "71:         int exceptionNum = 0;",
          "72:         for(String conf : sparkConf) {",
          "73:             try {",
          "74:                 ParameterFilter.checkSparkConf(conf);",
          "75:             } catch (Exception exception) {",
          "76:                 Assert.assertTrue(exception instanceof IllegalArgumentException);",
          "77:                 exceptionNum++;",
          "78:             }",
          "80:         assertEquals(6, exceptionNum);",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java -> kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import java.util.Collections;",
          "28: import java.util.EnumSet;",
          "29: import java.util.HashMap;",
          "30: import java.util.List;",
          "31: import java.util.Locale;",
          "32: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import java.util.LinkedHashMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import java.util.Objects;",
          "35: import java.util.Map.Entry;",
          "37: import org.apache.kylin.cube.CubeInstance;",
          "38: import org.apache.kylin.cube.CubeManager;",
          "39: import org.apache.kylin.engine.spark.utils.MetaDumpUtil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.kylin.common.util.ParameterFilter;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:     @Override",
          "112:     protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {",
          "114:         CubeManager cubeMgr = CubeManager.getInstance(KylinConfig.getInstanceFromEnv());",
          "115:         CubeInstance cube = cubeMgr.getCube(this.getCubeName());",
          "116:         KylinConfig config = cube.getConfig();",
          "117:         this.setLogPath(getSparkDriverLogHdfsPath(context.getConfig()));",
          "118:         config = wrapConfig(config);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:         Map<String, String> overrideKylinProps = new HashMap<>();",
          "120:         LinkedHashMap<String, String> cubeConfig = cube.getDescriptor().getOverrideKylinProps();",
          "121:         LinkedHashMap<String, String> projectConfig = cube.getProjectInstance().getOverrideKylinProps();",
          "122:         overrideKylinProps.putAll(projectConfig);",
          "123:         overrideKylinProps.putAll(cubeConfig);",
          "124:         for (Map.Entry<String, String> configEntry : overrideKylinProps.entrySet()) {",
          "125:             ParameterFilter.checkSparkConf(configEntry.getKey());",
          "126:             ParameterFilter.checkSparkConf(configEntry.getValue());",
          "127:         }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java||server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import java.util.Map;",
          "28: import java.util.Locale;",
          "31: import org.apache.kylin.common.KylinConfig;",
          "32: import org.apache.kylin.job.JobInstance;",
          "33: import org.apache.kylin.job.constant.JobStatusEnum;",
          "34: import org.apache.kylin.job.constant.JobTimeFilterEnum;",
          "",
          "[Removed Lines]",
          "30: import org.apache.kylin.common.util.CliCommandExecutor;",
          "",
          "[Added Lines]",
          "31: import org.apache.kylin.common.util.ParameterFilter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:         checkRequiredArg(\"job_id\", jobId);",
          "196:         checkRequiredArg(\"step_id\", stepId);",
          "197:         checkRequiredArg(\"project\", project);",
          "200:         String downloadFilename = String.format(Locale.ROOT, \"%s_%s.log\", validatedPrj, validatedStepId);",
          "202:         String jobOutput = jobService.getAllJobStepOutput(jobId, stepId);",
          "",
          "[Removed Lines]",
          "198:         String validatedPrj =  CliCommandExecutor.checkParameter(project);",
          "199:         String validatedStepId =  CliCommandExecutor.checkParameter(stepId);",
          "",
          "[Added Lines]",
          "198:         String validatedPrj = ParameterFilter.checkParameter(project);",
          "199:         String validatedStepId =  ParameterFilter.checkParameter(stepId);",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java||server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     @RequestMapping(value = \"\", method = { RequestMethod.GET }, produces = { \"application/json\" })",
          "90:     @ResponseBody",
          "91:     public List<ProjectInstance> getProjects(@RequestParam(value = \"limit\", required = false) Integer limit,",
          "93:         return projectService.listProjects(limit, offset);",
          "94:     }",
          "",
          "[Removed Lines]",
          "92:             @RequestParam(value = \"offset\", required = false) Integer offset) {",
          "",
          "[Added Lines]",
          "92:                                              @RequestParam(value = \"offset\", required = false) Integer offset) {",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java||server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java -> server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.apache.kylin.common.persistence.RootPersistentEntity;",
          "36: import org.apache.kylin.common.util.CliCommandExecutor;",
          "37: import org.apache.kylin.common.util.Pair;",
          "38: import org.apache.kylin.cube.CubeInstance;",
          "39: import org.apache.kylin.cube.CubeManager;",
          "40: import org.apache.kylin.cube.CubeSegment;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.kylin.common.util.ParameterFilter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1152:         String cmd = String.format(Locale.ROOT,",
          "1153:                 stringBuilder,",
          "1154:                 KylinConfig.getKylinHome(),",
          "1157:                 cube.getName(),",
          "1159:                 config.isAutoMigrateCubeCopyAcl(),",
          "1160:                 config.isAutoMigrateCubePurge());",
          "",
          "[Removed Lines]",
          "1155:                 CliCommandExecutor.checkParameterWhiteList(srcCfgUri),",
          "1156:                 CliCommandExecutor.checkParameterWhiteList(dstCfgUri),",
          "1158:                 CliCommandExecutor.checkParameterWhiteList(projectName),",
          "",
          "[Added Lines]",
          "1156:                 ParameterFilter.checkURI(srcCfgUri),",
          "1157:                 ParameterFilter.checkURI(dstCfgUri),",
          "1159:                 ParameterFilter.checkParameter(projectName),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "591c0e61e5cdd74b2bce2d36d5b3995130673559",
      "candidate_info": {
        "commit_hash": "591c0e61e5cdd74b2bce2d36d5b3995130673559",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/591c0e61e5cdd74b2bce2d36d5b3995130673559",
        "files": [
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/KylinSession.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala"
        ],
        "message": "KYLIN-4889, fix spark engine in local mode",
        "before_after_code_files": [
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/KylinSession.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/KylinSession.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/KylinSession.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/KylinSession.scala": [
          "File: kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/KylinSession.scala -> kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/KylinSession.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:         }",
          "200:         sparkConf.set(\"spark.yarn.am.extraJavaOptions\",",
          "201:           s\"$yarnAMJavaOptions $amKerberosConf\")",
          "202:       }",
          "204:       sparkConf",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:       } else {",
          "204:         sparkConf.setMaster(\"local\")",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala": [
          "File: kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala -> kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:           override def run(): Unit = {",
          "132:             try {",
          "133:               val kylinConf: KylinConfig = KylinConfig.getInstanceFromEnv",
          "135:                 case \"true\" =>",
          "144:                 case _ =>",
          "153:               }",
          "154:               if (kylinConf.isKylinMetricsReporterForQueryEnabled) {",
          "155:                 val appStatusListener = new SparderMetricsListener()",
          "156:                 sparkSession.sparkContext.addSparkListener(appStatusListener)",
          "",
          "[Removed Lines]",
          "134:               val sparkSession = System.getProperty(\"spark.local\") match {",
          "136:                   SparkSession.builder",
          "137:                     .master(\"local\")",
          "138:                     .appName(kylinConf.getSparderAppName)",
          "139:                     .withExtensions { ext =>",
          "140:                       ext.injectPlannerStrategy(_ => KylinSourceStrategy)",
          "141:                     }",
          "142:                     .enableHiveSupport()",
          "143:                     .getOrCreateKylinSession()",
          "145:                   SparkSession.builder",
          "146:                     .appName(kylinConf.getSparderAppName)",
          "147:                     .master(\"yarn-client\")",
          "148:                     .withExtensions { ext =>",
          "149:                       ext.injectPlannerStrategy(_ => KylinSourceStrategy)",
          "150:                     }",
          "151:                     .enableHiveSupport()",
          "152:                     .getOrCreateKylinSession()",
          "",
          "[Added Lines]",
          "134:               val master = System.getProperty(\"spark.local\") match {",
          "136:                   \"local\"",
          "138:                   \"yarn-client\"",
          "140:               val sparkSession = SparkSession.builder",
          "141:                 .master(master)",
          "142:                 .appName(kylinConf.getSparderAppName)",
          "143:                 .withExtensions { ext =>",
          "144:                   ext.injectPlannerStrategy(_ => KylinSourceStrategy)",
          "145:                 }",
          "146:                 .enableHiveSupport()",
          "147:                 .getOrCreateKylinSession()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:                   .getContextClassLoader",
          "178:                   .toString)",
          "179:               initMonitorEnv()",
          "181:                 case \"true\" =>",
          "182:                   master_app_url = \"http://localhost:\" + sparkSession.sparkContext.getConf",
          "183:                     .get(\"spark.ui.port\", \"4040\")",
          "",
          "[Removed Lines]",
          "180:               System.getProperty(\"spark.local\") match {",
          "",
          "[Added Lines]",
          "175:               master match {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "261f0cb735b0f48eb5a769aaf3412fc3f6e59af9",
      "candidate_info": {
        "commit_hash": "261f0cb735b0f48eb5a769aaf3412fc3f6e59af9",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/261f0cb735b0f48eb5a769aaf3412fc3f6e59af9",
        "files": [
          "kylin-it/src/test/java/org/apache/kylin/query/ITKylinQueryTest.java",
          "kylin-it/src/test/resources/query/sql_non_equal_join/query_00.sql",
          "kylin-it/src/test/resources/query/sql_non_equal_join/query_01.sql",
          "kylin-it/src/test/resources/query/sql_non_equal_join/query_02.sql",
          "pom.xml",
          "query/src/main/java/org/apache/kylin/query/optrule/OLAPJoinRule.java",
          "query/src/main/java/org/apache/kylin/query/relnode/OLAPNonEquiJoinRel.java"
        ],
        "message": "KYLIN-4480 runtime non-equi join\n\n(cherry picked from commit 1fce51edf5cfb687b77b2a3f41ca3ce382efd923)",
        "before_after_code_files": [
          "kylin-it/src/test/java/org/apache/kylin/query/ITKylinQueryTest.java||kylin-it/src/test/java/org/apache/kylin/query/ITKylinQueryTest.java",
          "kylin-it/src/test/resources/query/sql_non_equal_join/query_00.sql||kylin-it/src/test/resources/query/sql_non_equal_join/query_00.sql",
          "kylin-it/src/test/resources/query/sql_non_equal_join/query_01.sql||kylin-it/src/test/resources/query/sql_non_equal_join/query_01.sql",
          "kylin-it/src/test/resources/query/sql_non_equal_join/query_02.sql||kylin-it/src/test/resources/query/sql_non_equal_join/query_02.sql",
          "query/src/main/java/org/apache/kylin/query/optrule/OLAPJoinRule.java||query/src/main/java/org/apache/kylin/query/optrule/OLAPJoinRule.java",
          "query/src/main/java/org/apache/kylin/query/relnode/OLAPNonEquiJoinRel.java||query/src/main/java/org/apache/kylin/query/relnode/OLAPNonEquiJoinRel.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-it/src/test/java/org/apache/kylin/query/ITKylinQueryTest.java||kylin-it/src/test/java/org/apache/kylin/query/ITKylinQueryTest.java": [
          "File: kylin-it/src/test/java/org/apache/kylin/query/ITKylinQueryTest.java -> kylin-it/src/test/java/org/apache/kylin/query/ITKylinQueryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:         execAndCompQuery(getQueryFolderPrefix() + \"src/test/resources/query/sql_join\", null, true);",
          "240:     }",
          "242:     @Test",
          "243:     public void testUnionQuery() throws Exception {",
          "244:         execAndCompQuery(getQueryFolderPrefix() + \"src/test/resources/query/sql_union\", null, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     @Test",
          "243:     public void testNonEqualJoin() throws Exception {",
          "244:         execAndCompQuery(getQueryFolderPrefix() + \"src/test/resources/query/sql_non_equal_join\", null, true);",
          "245:     }",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_non_equal_join/query_00.sql||kylin-it/src/test/resources/query/sql_non_equal_join/query_00.sql": [
          "File: kylin-it/src/test/resources/query/sql_non_equal_join/query_00.sql -> kylin-it/src/test/resources/query/sql_non_equal_join/query_00.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: -- non-equal join",
          "2: SELECT * FROM",
          "3: (",
          "4: SELECT CAL_DT, ORDER_ID FROM TEST_KYLIN_FACT GROUP BY CAL_DT, ORDER_ID",
          "5: ) FACT",
          "6: LEFT JOIN",
          "7: (",
          "8: SELECT CAL_DT as DT_CAL_DT, WEEK_BEG_DT FROM EDW.TEST_CAL_DT",
          "9: ) DT",
          "10: ON FACT.CAL_DT = DT.DT_CAL_DT AND WEEK_BEG_DT = DATE'2013-03-24'",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_non_equal_join/query_01.sql||kylin-it/src/test/resources/query/sql_non_equal_join/query_01.sql": [
          "File: kylin-it/src/test/resources/query/sql_non_equal_join/query_01.sql -> kylin-it/src/test/resources/query/sql_non_equal_join/query_01.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: -- non equal join with equal join",
          "2: SELECT ITEM_CNT, FACT.CAL_DT, ORDER_ID, WEEK_BEG_DT FROM",
          "3: (",
          "4: select sum(ITEM_COUNT) as ITEM_CNT, CAL_DT, TEST_ORDER.ORDER_ID",
          "5: FROM TEST_KYLIN_FACT as TEST_KYLIN_FACT",
          "6: INNER JOIN TEST_ORDER as TEST_ORDER",
          "7: ON TEST_KYLIN_FACT.ORDER_ID = TEST_ORDER.ORDER_ID",
          "8: GROUP BY CAL_DT, TEST_ORDER.ORDER_ID",
          "9: ) FACT",
          "10: LEFT JOIN EDW.TEST_CAL_DT DT",
          "11: ON FACT.CAL_DT = DT.CAL_DT AND WEEK_BEG_DT = DATE'2013-03-24'",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_non_equal_join/query_02.sql||kylin-it/src/test/resources/query/sql_non_equal_join/query_02.sql": [
          "File: kylin-it/src/test/resources/query/sql_non_equal_join/query_02.sql -> kylin-it/src/test/resources/query/sql_non_equal_join/query_02.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: -- non equal join with complex join conditions",
          "2: SELECT ITEM_CNT, FACT.CAL_DT, ORDER_ID, WEEK_BEG_DT FROM",
          "3: (",
          "4:     SELECT SUM(ITEM_COUNT) AS ITEM_CNT, CAL_DT, TEST_ORDER.ORDER_ID",
          "5:     FROM TEST_KYLIN_FACT AS TEST_KYLIN_FACT",
          "6:     INNER JOIN TEST_ORDER AS TEST_ORDER",
          "7:     ON TEST_KYLIN_FACT.ORDER_ID = TEST_ORDER.ORDER_ID",
          "8:     GROUP BY CAL_DT, TEST_ORDER.ORDER_ID",
          "9: ) FACT",
          "10: LEFT JOIN EDW.TEST_CAL_DT DT",
          "11: ON FACT.CAL_DT = DT.CAL_DT",
          "12:     AND WEEK_BEG_DT = DATE'2013-03-24'",
          "13:     OR (WEEK_BEG_DT < DATE'2013-03-24'",
          "14:     AND (CASE WHEN ITEM_CNT > 100 THEN ORDER_ID > 10000 ELSE DT.CAL_DT < DATE'2013-04-24' END)",
          "15:     AND SUBSTRING(CAST(ORDER_ID AS VARCHAR), 1, 2) <> '14')",
          "",
          "---------------"
        ],
        "query/src/main/java/org/apache/kylin/query/optrule/OLAPJoinRule.java||query/src/main/java/org/apache/kylin/query/optrule/OLAPJoinRule.java": [
          "File: query/src/main/java/org/apache/kylin/query/optrule/OLAPJoinRule.java -> query/src/main/java/org/apache/kylin/query/optrule/OLAPJoinRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.kylin.metadata.realization.RoutingIndicatorException;",
          "31: import org.apache.kylin.query.relnode.OLAPFilterRel;",
          "32: import org.apache.kylin.query.relnode.OLAPJoinRel;",
          "33: import org.apache.kylin.query.relnode.OLAPRel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.apache.kylin.query.relnode.OLAPNonEquiJoinRel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:         right = convert(right, right.getTraitSet().replace(OLAPRel.CONVENTION));",
          "55:         final JoinInfo info = JoinInfo.of(left, right, join.getCondition());",
          "57:         RelOptCluster cluster = join.getCluster();",
          "58:         RelNode newRel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         if (!info.isEqui() && join.getJoinType() != JoinRelType.INNER) {",
          "58:             try {",
          "59:                 return new OLAPNonEquiJoinRel(join.getCluster(), traitSet, left, right,",
          "60:                         join.getCondition(), join.getVariablesSet(), join.getJoinType());",
          "61:             } catch (InvalidRelException e) {",
          "62:                 throw new IllegalStateException(e);",
          "63:             }",
          "64:         }",
          "",
          "---------------"
        ],
        "query/src/main/java/org/apache/kylin/query/relnode/OLAPNonEquiJoinRel.java||query/src/main/java/org/apache/kylin/query/relnode/OLAPNonEquiJoinRel.java": [
          "File: query/src/main/java/org/apache/kylin/query/relnode/OLAPNonEquiJoinRel.java -> query/src/main/java/org/apache/kylin/query/relnode/OLAPNonEquiJoinRel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.relnode;",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collection;",
          "23: import java.util.List;",
          "24: import java.util.Map;",
          "25: import java.util.Set;",
          "27: import org.apache.calcite.adapter.enumerable.EnumerableRel;",
          "28: import org.apache.calcite.adapter.enumerable.EnumerableThetaJoin;",
          "29: import org.apache.calcite.plan.RelOptCluster;",
          "30: import org.apache.calcite.plan.RelOptCost;",
          "31: import org.apache.calcite.plan.RelOptPlanner;",
          "32: import org.apache.calcite.plan.RelTrait;",
          "33: import org.apache.calcite.plan.RelTraitSet;",
          "34: import org.apache.calcite.rel.InvalidRelException;",
          "35: import org.apache.calcite.rel.RelNode;",
          "36: import org.apache.calcite.rel.core.CorrelationId;",
          "37: import org.apache.calcite.rel.core.JoinRelType;",
          "38: import org.apache.calcite.rel.metadata.RelMetadataQuery;",
          "39: import org.apache.calcite.rel.type.RelDataType;",
          "40: import org.apache.calcite.rel.type.RelDataTypeFactory;",
          "41: import org.apache.calcite.rel.type.RelDataTypeField;",
          "42: import org.apache.calcite.rel.type.RelDataTypeFieldImpl;",
          "43: import org.apache.calcite.rex.RexCall;",
          "44: import org.apache.calcite.rex.RexInputRef;",
          "45: import org.apache.calcite.rex.RexNode;",
          "46: import org.apache.kylin.metadata.model.TblColRef;",
          "48: import com.google.common.collect.Lists;",
          "49: import com.google.common.collect.Sets;",
          "51: public class OLAPNonEquiJoinRel extends EnumerableThetaJoin implements OLAPRel {",
          "53:     private OLAPContext context;",
          "54:     private ColumnRowType columnRowType;",
          "55:     private boolean hasSubQuery;",
          "57:     private boolean isTopJoin;",
          "59:     public OLAPNonEquiJoinRel(RelOptCluster cluster, RelTraitSet traits, RelNode left, RelNode right, RexNode condition,",
          "60:                              Set<CorrelationId> variablesSet, JoinRelType joinType) throws InvalidRelException {",
          "61:         super(cluster, traits, left, right, condition, variablesSet, joinType);",
          "62:         rowType = getRowType();",
          "63:     }",
          "65:     @Override",
          "66:     public OLAPContext getContext() {",
          "67:         return context;",
          "68:     }",
          "70:     @Override",
          "71:     public ColumnRowType getColumnRowType() {",
          "72:         return columnRowType;",
          "73:     }",
          "75:     @Override",
          "76:     public boolean hasSubQuery() {",
          "77:         return hasSubQuery;",
          "78:     }",
          "80:     @Override",
          "81:     public RelTraitSet replaceTraitSet(RelTrait trait) {",
          "82:         RelTraitSet oldTraitSet = this.traitSet;",
          "83:         this.traitSet = this.traitSet.replace(trait);",
          "84:         return oldTraitSet;",
          "85:     }",
          "87:     protected boolean isParentMerelyPermutation(OLAPImplementor implementor) {",
          "88:         if (implementor.getParentNode() instanceof OLAPProjectRel) {",
          "89:             return ((OLAPProjectRel) implementor.getParentNode()).isMerelyPermutation();",
          "90:         }",
          "91:         return false;",
          "92:     }",
          "94:     @Override",
          "95:     public void implementOLAP(OLAPImplementor implementor) {",
          "97:         if (!(implementor.getParentNode() instanceof OLAPJoinRel)",
          "98:                 && !(implementor.getParentNode() instanceof OLAPNonEquiJoinRel)",
          "99:                 && !isParentMerelyPermutation(implementor)) {",
          "100:             implementor.allocateContext();",
          "101:         }",
          "104:         this.context = implementor.getContext();",
          "105:         this.isTopJoin = !context.hasJoin;",
          "106:         this.context.hasJoin = true;",
          "107:         this.hasSubQuery = true;",
          "110:         implementor.fixSharedOlapTableScanOnTheLeft(this);",
          "111:         implementor.setNewOLAPContextRequired(true);",
          "112:         implementor.visitChild(this.left, this);",
          "113:         if (this.context != implementor.getContext()) {",
          "114:             implementor.freeContext();",
          "115:         }",
          "118:         implementor.fixSharedOlapTableScanOnTheRight(this);",
          "119:         implementor.setNewOLAPContextRequired(true);",
          "120:         implementor.visitChild(this.right, this);",
          "121:         if (this.context != implementor.getContext()) {",
          "122:             implementor.freeContext();",
          "123:         }",
          "125:         this.columnRowType = buildColumnRowType();",
          "127:         if (isTopJoin) {",
          "128:             this.context.afterJoin = true;",
          "129:         }",
          "131:         this.context.subqueryJoinParticipants.addAll(collectJoinColumns(condition));",
          "132:     }",
          "134:     @Override",
          "135:     public void implementRewrite(RewriteImplementor implementor) {",
          "136:         implementor.visitChild(this, this.left);",
          "137:         implementor.visitChild(this, this.right);",
          "139:         this.rowType = this.deriveRowType();",
          "140:         if (this.isTopJoin) {",
          "143:             Map<TblColRef, RelDataType> dynFields = this.context.dynamicFields;",
          "144:             if (!dynFields.isEmpty()) {",
          "145:                 List<TblColRef> newCols = Lists.newArrayList(this.columnRowType.getAllColumns());",
          "146:                 List<RelDataTypeField> newFieldList = Lists.newArrayList();",
          "147:                 int paramIndex = this.rowType.getFieldList().size();",
          "148:                 for (TblColRef fieldCol : dynFields.keySet()) {",
          "149:                     RelDataType fieldType = dynFields.get(fieldCol);",
          "151:                     RelDataTypeField newField = new RelDataTypeFieldImpl(fieldCol.getName(), paramIndex++, fieldType);",
          "152:                     newFieldList.add(newField);",
          "154:                     newCols.add(fieldCol);",
          "155:                 }",
          "158:                 RelDataTypeFactory.FieldInfoBuilder fieldInfo = getCluster().getTypeFactory().builder();",
          "159:                 fieldInfo.addAll(this.rowType.getFieldList());",
          "160:                 fieldInfo.addAll(newFieldList);",
          "161:                 this.rowType = getCluster().getTypeFactory().createStructType(fieldInfo);",
          "163:                 this.columnRowType = new ColumnRowType(newCols);",
          "164:             }",
          "165:         }",
          "166:     }",
          "168:     @Override",
          "169:     public EnumerableRel implementEnumerable(List<EnumerableRel> inputs) {",
          "170:         return super.copy(traitSet, condition, inputs.get(0), inputs.get(1), joinType, isSemiJoinDone());",
          "171:     }",
          "173:     protected ColumnRowType buildColumnRowType() {",
          "174:         List<TblColRef> columns = new ArrayList<TblColRef>();",
          "176:         OLAPRel olapLeft = (OLAPRel) this.left;",
          "177:         ColumnRowType leftColumnRowType = olapLeft.getColumnRowType();",
          "178:         columns.addAll(leftColumnRowType.getAllColumns());",
          "180:         OLAPRel olapRight = (OLAPRel) this.right;",
          "181:         ColumnRowType rightColumnRowType = olapRight.getColumnRowType();",
          "182:         columns.addAll(rightColumnRowType.getAllColumns());",
          "184:         if (columns.size() != this.rowType.getFieldCount()) {",
          "185:             throw new IllegalStateException(",
          "186:                     \"RowType=\" + this.rowType.getFieldCount() + \", ColumnRowType=\" + columns.size());",
          "187:         }",
          "188:         return new ColumnRowType(columns);",
          "189:     }",
          "191:     @Override",
          "192:     public RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {",
          "193:         return super.computeSelfCost(planner, mq).multiplyBy(.05);",
          "194:     }",
          "196:     @Override",
          "197:     public double estimateRowCount(RelMetadataQuery mq) {",
          "198:         return super.estimateRowCount(mq) * 0.1;",
          "199:     }",
          "201:     @Override",
          "202:     public EnumerableThetaJoin copy(RelTraitSet traitSet, RexNode condition, RelNode left, RelNode right, JoinRelType joinType, boolean semiJoinDone) {",
          "203:         try {",
          "204:             return new OLAPNonEquiJoinRel(this.getCluster(), traitSet, left, right, condition, this.variablesSet, joinType);",
          "205:         } catch (InvalidRelException var8) {",
          "206:             throw new AssertionError(var8);",
          "207:         }",
          "208:     }",
          "210:     private Collection<TblColRef> collectJoinColumns(RexNode condition) {",
          "211:         Set<TblColRef> joinColumns = Sets.newHashSet();",
          "212:         doCollectJoinColumns(condition, joinColumns);",
          "213:         return joinColumns;",
          "214:     }",
          "216:     private void doCollectJoinColumns(RexNode node, Set<TblColRef> joinColumns) {",
          "217:         if (node instanceof RexCall) {",
          "218:             ((RexCall) node).getOperands().forEach(operand -> doCollectJoinColumns(operand, joinColumns));",
          "219:         } else if (node instanceof RexInputRef) {",
          "220:             joinColumns.add(columnRowType.getColumnByIndex(((RexInputRef) node).getIndex()));",
          "221:         }",
          "222:     }",
          "224: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1436a3ea2610a2f41b7b0b89f2db87dd9999909",
      "candidate_info": {
        "commit_hash": "f1436a3ea2610a2f41b7b0b89f2db87dd9999909",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/f1436a3ea2610a2f41b7b0b89f2db87dd9999909",
        "files": [
          "core-cube/src/main/java/org/apache/kylin/cube/CubeCapabilityChecker.java"
        ],
        "message": "KYLIN-5027 Fix query result when the cube does not build baseCuboid",
        "before_after_code_files": [
          "core-cube/src/main/java/org/apache/kylin/cube/CubeCapabilityChecker.java||core-cube/src/main/java/org/apache/kylin/cube/CubeCapabilityChecker.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-cube/src/main/java/org/apache/kylin/cube/CubeCapabilityChecker.java||core-cube/src/main/java/org/apache/kylin/cube/CubeCapabilityChecker.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/CubeCapabilityChecker.java -> core-cube/src/main/java/org/apache/kylin/cube/CubeCapabilityChecker.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.Iterator;",
          "24: import java.util.List;",
          "25: import java.util.Set;",
          "27: import org.apache.commons.collections.CollectionUtils;",
          "28: import org.apache.commons.lang.StringUtils;",
          "29: import org.apache.kylin.cube.model.CubeDesc;",
          "30: import org.apache.kylin.measure.MeasureType;",
          "31: import org.apache.kylin.measure.basic.BasicMeasureType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.util.Arrays;",
          "27: import java.util.stream.Collectors;",
          "31: import org.apache.kylin.cube.model.AggregationGroup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:     private static Set<TblColRef> unmatchedDimensions(Collection<TblColRef> dimensionColumns, CubeInstance cube) {",
          "176:         HashSet<TblColRef> result = Sets.newHashSet(dimensionColumns);",
          "177:         CubeDesc cubeDesc = cube.getDescriptor();",
          "179:         return result;",
          "180:     }",
          "",
          "[Removed Lines]",
          "178:         result.removeAll(cubeDesc.listDimensionColumnsIncludingDerived());",
          "",
          "[Added Lines]",
          "181:         if (cube.getConfig().isBuildBaseCuboid()) {",
          "182:             result.removeAll(cubeDesc.listDimensionColumnsIncludingDerived());",
          "183:         } else {",
          "184:             HashSet<TblColRef> aggResult = result;",
          "185:             for (AggregationGroup aggGroup : cubeDesc.getAggregationGroups()) {",
          "186:                 HashSet<TblColRef> tmpAggResult = (HashSet<TblColRef>) result.stream().filter(col -> !Arrays.asList(aggGroup.getIncludes()).contains(col.getCanonicalName())).collect(Collectors.toSet());",
          "187:                 if (tmpAggResult.size() < aggResult.size()) {",
          "188:                     aggResult = tmpAggResult;",
          "189:                 }",
          "190:             }",
          "191:             result = aggResult;",
          "192:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}