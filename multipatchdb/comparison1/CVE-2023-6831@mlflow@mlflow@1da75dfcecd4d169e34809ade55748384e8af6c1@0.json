{
  "cve_id": "CVE-2023-6831",
  "cve_desc": "Path Traversal: '\\..\\filename' in GitHub repository mlflow/mlflow prior to 2.9.2.",
  "repo": "mlflow/mlflow",
  "patch_hash": "1da75dfcecd4d169e34809ade55748384e8af6c1",
  "patch_info": {
    "commit_hash": "1da75dfcecd4d169e34809ade55748384e8af6c1",
    "repo": "mlflow/mlflow",
    "commit_url": "https://github.com/mlflow/mlflow/commit/1da75dfcecd4d169e34809ade55748384e8af6c1",
    "files": [
      "mlflow/utils/uri.py",
      "tests/server/test_handlers.py",
      "tests/store/artifact/test_http_artifact_repo.py",
      "tests/tracking/test_rest_tracking.py",
      "tests/utils/test_uri.py"
    ],
    "message": "Prevent path traversal with encoded URL (#10650)\n\nSigned-off-by: B-Step62 <yuki.watanabe@databricks.com>",
    "before_after_code_files": [
      "mlflow/utils/uri.py||mlflow/utils/uri.py",
      "tests/server/test_handlers.py||tests/server/test_handlers.py",
      "tests/store/artifact/test_http_artifact_repo.py||tests/store/artifact/test_http_artifact_repo.py",
      "tests/tracking/test_rest_tracking.py||tests/tracking/test_rest_tracking.py",
      "tests/utils/test_uri.py||tests/utils/test_uri.py"
    ]
  },
  "patch_diff": {
    "mlflow/utils/uri.py||mlflow/utils/uri.py": [
      "File: mlflow/utils/uri.py -> mlflow/utils/uri.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "430:     \"\"\"",
      "431:     from mlflow.utils.file_utils import local_file_uri_to_path",
      "434:     if any((s in path) for s in (\"#\", \"%23\")):",
      "435:         raise exc",
      "",
      "[Removed Lines]",
      "433:     exc = MlflowException(f\"Invalid path: {path}\", error_code=INVALID_PARAMETER_VALUE)",
      "",
      "[Added Lines]",
      "433:     # We must decode URL before validating it",
      "434:     path = urllib.parse.unquote(path)",
      "436:     exc = MlflowException(\"Invalid path\", error_code=INVALID_PARAMETER_VALUE)",
      "",
      "---------------"
    ],
    "tests/server/test_handlers.py||tests/server/test_handlers.py": [
      "File: tests/server/test_handlers.py -> tests/server/test_handlers.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:     UpdateRegisteredModel,",
      "39: )",
      "40: from mlflow.protos.service_pb2 import CreateExperiment, SearchRuns",
      "42: from mlflow.server.handlers import (",
      "43:     _create_experiment,",
      "44:     _create_model_version,",
      "45:     _create_registered_model,",
      "46:     _delete_model_version,",
      "47:     _delete_model_version_tag,",
      "48:     _delete_registered_model,",
      "",
      "[Removed Lines]",
      "41: from mlflow.server import BACKEND_STORE_URI_ENV_VAR, app",
      "",
      "[Added Lines]",
      "41: from mlflow.server import BACKEND_STORE_URI_ENV_VAR, SERVE_ARTIFACTS_ENV_VAR, app",
      "46:     _delete_artifact_mlflow_artifacts,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:         yield mock_store",
      "108: def test_health():",
      "109:     with app.test_client() as c:",
      "110:         response = c.get(\"/health\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "109: @pytest.fixture",
      "110: def enable_serve_artifacts(monkeypatch):",
      "111:     monkeypatch.setenv(SERVE_ARTIFACTS_ENV_VAR, \"true\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "777:     _, args = mock_model_registry_store.get_model_version_by_alias.call_args",
      "778:     assert args == {\"name\": name, \"alias\": alias}",
      "779:     assert json.loads(resp.get_data()) == {\"model_version\": jsonify(mvd)}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "788: @pytest.mark.parametrize(",
      "789:     \"path\",",
      "790:     [",
      "791:         \"/path\",",
      "792:         \"path/../to/file\",",
      "793:         \"/etc/passwd\",",
      "794:         \"/etc/passwd%00.jpg\",",
      "795:         \"/file://etc/passwd\",",
      "796:         \"%2E%2E%2F%2E%2E%2Fpath\",",
      "797:     ],",
      "798: )",
      "799: def test_delete_artifact_mlflow_artifacts_throws_for_malicious_path(enable_serve_artifacts, path):",
      "800:     response = _delete_artifact_mlflow_artifacts(path)",
      "801:     assert response.status_code == 400",
      "802:     json_response = json.loads(response.get_data())",
      "803:     assert json_response[\"error_code\"] == ErrorCode.Name(INVALID_PARAMETER_VALUE)",
      "804:     assert json_response[\"message\"] == \"Invalid path\"",
      "",
      "---------------"
    ],
    "tests/store/artifact/test_http_artifact_repo.py||tests/store/artifact/test_http_artifact_repo.py": [
      "File: tests/store/artifact/test_http_artifact_repo.py -> tests/store/artifact/test_http_artifact_repo.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "246:             http_artifact_repo.list_artifacts()",
      "250: def test_list_artifacts_malicious_path(http_artifact_repo, path):",
      "251:     with mock.patch(",
      "252:         \"mlflow.store.artifact.http_artifact_repo.http_request\",",
      "",
      "[Removed Lines]",
      "249: @pytest.mark.parametrize(\"path\", [\"/tmp/path\", \"../../path\"])",
      "",
      "[Added Lines]",
      "249: @pytest.mark.parametrize(\"path\", [\"/tmp/path\", \"../../path\", \"%2E%2E%2Fpath\"])",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "259:             200,",
      "260:         ),",
      "261:     ):",
      "263:             http_artifact_repo.list_artifacts()",
      "",
      "[Removed Lines]",
      "262:         with pytest.raises(MlflowException, match=f\"Invalid path: {path}\"):",
      "",
      "[Added Lines]",
      "262:         with pytest.raises(MlflowException, match=\"Invalid path\"):",
      "",
      "---------------"
    ],
    "tests/tracking/test_rest_tracking.py||tests/tracking/test_rest_tracking.py": [
      "File: tests/tracking/test_rest_tracking.py -> tests/tracking/test_rest_tracking.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: )",
      "36: from mlflow.exceptions import MlflowException",
      "37: from mlflow.models import Model",
      "39: from mlflow.store.tracking.sqlalchemy_store import SqlAlchemyStore",
      "40: from mlflow.utils import mlflow_tags",
      "41: from mlflow.utils.file_utils import TempDir, path_to_local_file_uri",
      "",
      "[Removed Lines]",
      "38: from mlflow.server.handlers import validate_path_is_safe",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "514:     assert response.status_code == 200",
      "663: def test_path_validation(mlflow_client):",
      "664:     experiment_id = mlflow_client.create_experiment(\"tags validation\")",
      "665:     created_run = mlflow_client.create_run(experiment_id)",
      "",
      "[Removed Lines]",
      "517: @pytest.mark.parametrize(",
      "518:     \"path\",",
      "519:     [",
      "520:         \"path\",",
      "521:         \"path/\",",
      "522:         \"path/to/file\",",
      "523:     ],",
      "524: )",
      "525: def test_validate_path_is_safe_good(path):",
      "526:     validate_path_is_safe(path)",
      "529: @pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")",
      "530: @pytest.mark.parametrize(",
      "531:     \"path\",",
      "532:     [",
      "533:         # relative path from current directory of C: drive",
      "534:         \".../...//\",",
      "535:     ],",
      "536: )",
      "537: def test_validate_path_is_safe_windows_good(path):",
      "538:     validate_path_is_safe(path)",
      "541: @pytest.mark.skipif(is_windows(), reason=\"This test does not pass on Windows\")",
      "542: @pytest.mark.parametrize(",
      "543:     \"path\",",
      "544:     [",
      "545:         \"/path\",",
      "546:         \"../path\",",
      "547:         \"../../path\",",
      "548:         \"./../path\",",
      "549:         \"path/../to/file\",",
      "550:         \"path/../../to/file\",",
      "551:         \"file://a#/..//tmp\",",
      "552:         \"file://a%23/..//tmp/\",",
      "553:         \"/etc/passwd\",",
      "554:         \"/etc/passwd%00.jpg\",",
      "555:         \"/etc/passwd%00.html\",",
      "556:         \"/etc/passwd%00.txt\",",
      "557:         \"/etc/passwd%00.php\",",
      "558:         \"/etc/passwd%00.asp\",",
      "559:         \"/file://etc/passwd\",",
      "560:     ],",
      "561: )",
      "562: def test_validate_path_is_safe_bad(path):",
      "563:     with pytest.raises(MlflowException, match=\"Invalid path\"):",
      "564:         validate_path_is_safe(path)",
      "567: @pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")",
      "568: @pytest.mark.parametrize(",
      "569:     \"path\",",
      "570:     [",
      "571:         r\"../path\",",
      "572:         r\"../../path\",",
      "573:         r\"./../path\",",
      "574:         r\"path/../to/file\",",
      "575:         r\"path/../../to/file\",",
      "576:         r\"..\\path\",",
      "577:         r\"..\\..\\path\",",
      "578:         r\".\\..\\path\",",
      "579:         r\"path\\..\\to\\file\",",
      "580:         r\"path\\..\\..\\to\\file\",",
      "581:         # Drive-relative paths",
      "582:         r\"C:path\",",
      "583:         r\"C:path/\",",
      "584:         r\"C:path/to/file\",",
      "585:         r\"C:../path/to/file\",",
      "586:         r\"C:\\path\",",
      "587:         r\"C:/path\",",
      "588:         r\"C:\\path\\to\\file\",",
      "589:         r\"C:\\path/to/file\",",
      "590:         r\"C:\\path\\..\\to\\file\",",
      "591:         r\"C:/path/../to/file\",",
      "592:         # UNC(Universal Naming Convention) paths",
      "593:         r\"\\\\path\\to\\file\",",
      "594:         r\"\\\\path/to/file\",",
      "595:         r\"\\\\.\\\\C:\\path\\to\\file\",",
      "596:         r\"\\\\?\\C:\\path\\to\\file\",",
      "597:         r\"\\\\?\\UNC/path/to/file\",",
      "598:         # Other potential attackable paths",
      "599:         r\"/etc/password\",",
      "600:         r\"/path\",",
      "601:         r\"/etc/passwd%00.jpg\",",
      "602:         r\"/etc/passwd%00.html\",",
      "603:         r\"/etc/passwd%00.txt\",",
      "604:         r\"/etc/passwd%00.php\",",
      "605:         r\"/etc/passwd%00.asp\",",
      "606:         r\"/Windows/no/such/path\",",
      "607:         r\"/file://etc/passwd\",",
      "608:         r\"/file:c:/passwd\",",
      "609:         r\"/file://d:/windows/win.ini\",",
      "610:         r\"/file://./windows/win.ini\",",
      "611:         r\"file://c:/boot.ini\",",
      "612:         r\"file://C:path\",",
      "613:         r\"file://C:path/\",",
      "614:         r\"file://C:path/to/file\",",
      "615:         r\"file:///C:/Windows/System32/\",",
      "616:         r\"file:///etc/passwd\",",
      "617:         r\"file:///d:/windows/repair/sam\",",
      "618:         r\"file:///proc/version\",",
      "619:         r\"file:///inetpub/wwwroot/global.asa\",",
      "620:         r\"/file://../windows/win.ini\",",
      "621:         r\"../etc/passwd\",",
      "622:         r\"..\\Windows\\System32\\\\\",",
      "623:         r\"C:\\Windows\\System32\\\\\",",
      "624:         r\"/etc/passwd\",",
      "625:         r\"::Windows\\System32\",",
      "626:         r\"..\\..\\..\\..\\Windows\\System32\\\\\",",
      "627:         r\"../Windows/System32\",",
      "628:         r\"....\\\\\",",
      "629:         r\"\\\\?\\C:\\Windows\\System32\\\\\",",
      "630:         r\"\\\\.\\C:\\Windows\\System32\\\\\",",
      "631:         r\"\\\\UNC\\Server\\Share\\\\\",",
      "632:         r\"\\\\Server\\Share\\folder\\\\\",",
      "633:         r\"\\\\127.0.0.1\\c$\\Windows\\\\\",",
      "634:         r\"\\\\localhost\\c$\\Windows\\\\\",",
      "635:         r\"\\\\smbserver\\share\\path\\\\\",",
      "636:         r\"..\\\\?\\C:\\Windows\\System32\\\\\",",
      "637:         r\"C:/Windows/../Windows/System32/\",",
      "638:         r\"C:\\Windows\\..\\Windows\\System32\\\\\",",
      "639:         r\"../../../../../../../../../../../../Windows/System32\",",
      "640:         r\"../../../../../../../../../../../../etc/passwd\",",
      "641:         r\"../../../../../../../../../../../../var/www/html/index.html\",",
      "642:         r\"../../../../../../../../../../../../usr/local/etc/openvpn/server.conf\",",
      "643:         r\"../../../../../../../../../../../../Program Files (x86)\",",
      "644:         r\"/../../../../../../../../../../../../Windows/System32\",",
      "645:         r\"/Windows\\../etc/passwd\",",
      "646:         r\"/Windows\\..\\Windows\\System32\\\\\",",
      "647:         r\"/Windows\\..\\Windows\\System32\\cmd.exe\",",
      "648:         r\"/Windows\\..\\Windows\\System32\\msconfig.exe\",",
      "649:         r\"/Windows\\..\\Windows\\System32\\regedit.exe\",",
      "650:         r\"/Windows\\..\\Windows\\System32\\taskmgr.exe\",",
      "651:         r\"/Windows\\..\\Windows\\System32\\control.exe\",",
      "652:         r\"/Windows\\..\\Windows\\System32\\services.msc\",",
      "653:         r\"/Windows\\..\\Windows\\System32\\diskmgmt.msc\",",
      "654:         r\"/Windows\\..\\Windows\\System32\\eventvwr.msc\",",
      "655:         r\"/Windows/System32/drivers/etc/hosts\",",
      "656:     ],",
      "657: )",
      "658: def test_validate_path_is_safe_windows_bad(path):",
      "659:     with pytest.raises(MlflowException, match=\"Invalid path\"):",
      "660:         validate_path_is_safe(path)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "670:         assert resp.status_code == 400",
      "671:         assert response.json() == {",
      "672:             \"error_code\": \"INVALID_PARAMETER_VALUE\",",
      "674:         }",
      "676:     response = requests.get(",
      "",
      "[Removed Lines]",
      "673:             \"message\": f\"Invalid path: {invalid_path}\",",
      "",
      "[Added Lines]",
      "526:             \"message\": \"Invalid path\",",
      "",
      "---------------"
    ],
    "tests/utils/test_uri.py||tests/utils/test_uri.py": [
      "File: tests/utils/test_uri.py -> tests/utils/test_uri.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:     is_valid_dbfs_uri,",
      "25:     remove_databricks_profile_info_from_artifact_uri,",
      "26:     resolve_uri_if_local,",
      "27: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27:     validate_path_is_safe,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "724: )",
      "725: def test_negative_detection(uri):",
      "726:     assert not is_fuse_or_uc_volumes_uri(uri)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "730: @pytest.mark.parametrize(",
      "731:     \"path\",",
      "732:     [",
      "733:         \"path\",",
      "734:         \"path/\",",
      "735:         \"path/to/file\",",
      "736:     ],",
      "737: )",
      "738: def test_validate_path_is_safe_good(path):",
      "739:     validate_path_is_safe(path)",
      "742: @pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")",
      "743: @pytest.mark.parametrize(",
      "744:     \"path\",",
      "745:     [",
      "746:         # relative path from current directory of C: drive",
      "747:         \".../...//\",",
      "748:     ],",
      "749: )",
      "750: def test_validate_path_is_safe_windows_good(path):",
      "751:     validate_path_is_safe(path)",
      "754: @pytest.mark.skipif(is_windows(), reason=\"This test does not pass on Windows\")",
      "755: @pytest.mark.parametrize(",
      "756:     \"path\",",
      "757:     [",
      "758:         \"/path\",",
      "759:         \"../path\",",
      "760:         \"../../path\",",
      "761:         \"./../path\",",
      "762:         \"path/../to/file\",",
      "763:         \"path/../../to/file\",",
      "764:         \"file://a#/..//tmp\",",
      "765:         \"file://a%23/..//tmp/\",",
      "766:         \"/etc/passwd\",",
      "767:         \"/etc/passwd%00.jpg\",",
      "768:         \"/etc/passwd%00.html\",",
      "769:         \"/etc/passwd%00.txt\",",
      "770:         \"/etc/passwd%00.php\",",
      "771:         \"/etc/passwd%00.asp\",",
      "772:         \"/file://etc/passwd\",",
      "773:         # Encoded paths with '..'",
      "774:         \"%2E%2E%2Fpath\",",
      "775:         \"%2E%2E%2F%2E%2E%2Fpath\",",
      "776:     ],",
      "777: )",
      "778: def test_validate_path_is_safe_bad(path):",
      "779:     with pytest.raises(MlflowException, match=\"Invalid path\"):",
      "780:         validate_path_is_safe(path)",
      "783: @pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")",
      "784: @pytest.mark.parametrize(",
      "785:     \"path\",",
      "786:     [",
      "787:         r\"../path\",",
      "788:         r\"../../path\",",
      "789:         r\"./../path\",",
      "790:         r\"path/../to/file\",",
      "791:         r\"path/../../to/file\",",
      "792:         r\"..\\path\",",
      "793:         r\"..\\..\\path\",",
      "794:         r\".\\..\\path\",",
      "795:         r\"path\\..\\to\\file\",",
      "796:         r\"path\\..\\..\\to\\file\",",
      "797:         # Drive-relative paths",
      "798:         r\"C:path\",",
      "799:         r\"C:path/\",",
      "800:         r\"C:path/to/file\",",
      "801:         r\"C:../path/to/file\",",
      "802:         r\"C:\\path\",",
      "803:         r\"C:/path\",",
      "804:         r\"C:\\path\\to\\file\",",
      "805:         r\"C:\\path/to/file\",",
      "806:         r\"C:\\path\\..\\to\\file\",",
      "807:         r\"C:/path/../to/file\",",
      "808:         # UNC(Universal Naming Convention) paths",
      "809:         r\"\\\\path\\to\\file\",",
      "810:         r\"\\\\path/to/file\",",
      "811:         r\"\\\\.\\\\C:\\path\\to\\file\",",
      "812:         r\"\\\\?\\C:\\path\\to\\file\",",
      "813:         r\"\\\\?\\UNC/path/to/file\",",
      "814:         # Other potential attackable paths",
      "815:         r\"/etc/password\",",
      "816:         r\"/path\",",
      "817:         r\"/etc/passwd%00.jpg\",",
      "818:         r\"/etc/passwd%00.html\",",
      "819:         r\"/etc/passwd%00.txt\",",
      "820:         r\"/etc/passwd%00.php\",",
      "821:         r\"/etc/passwd%00.asp\",",
      "822:         r\"/Windows/no/such/path\",",
      "823:         r\"/file://etc/passwd\",",
      "824:         r\"/file:c:/passwd\",",
      "825:         r\"/file://d:/windows/win.ini\",",
      "826:         r\"/file://./windows/win.ini\",",
      "827:         r\"file://c:/boot.ini\",",
      "828:         r\"file://C:path\",",
      "829:         r\"file://C:path/\",",
      "830:         r\"file://C:path/to/file\",",
      "831:         r\"file:///C:/Windows/System32/\",",
      "832:         r\"file:///etc/passwd\",",
      "833:         r\"file:///d:/windows/repair/sam\",",
      "834:         r\"file:///proc/version\",",
      "835:         r\"file:///inetpub/wwwroot/global.asa\",",
      "836:         r\"/file://../windows/win.ini\",",
      "837:         r\"../etc/passwd\",",
      "838:         r\"..\\Windows\\System32\\\\\",",
      "839:         r\"C:\\Windows\\System32\\\\\",",
      "840:         r\"/etc/passwd\",",
      "841:         r\"::Windows\\System32\",",
      "842:         r\"..\\..\\..\\..\\Windows\\System32\\\\\",",
      "843:         r\"../Windows/System32\",",
      "844:         r\"....\\\\\",",
      "845:         r\"\\\\?\\C:\\Windows\\System32\\\\\",",
      "846:         r\"\\\\.\\C:\\Windows\\System32\\\\\",",
      "847:         r\"\\\\UNC\\Server\\Share\\\\\",",
      "848:         r\"\\\\Server\\Share\\folder\\\\\",",
      "849:         r\"\\\\127.0.0.1\\c$\\Windows\\\\\",",
      "850:         r\"\\\\localhost\\c$\\Windows\\\\\",",
      "851:         r\"\\\\smbserver\\share\\path\\\\\",",
      "852:         r\"..\\\\?\\C:\\Windows\\System32\\\\\",",
      "853:         r\"C:/Windows/../Windows/System32/\",",
      "854:         r\"C:\\Windows\\..\\Windows\\System32\\\\\",",
      "855:         r\"../../../../../../../../../../../../Windows/System32\",",
      "856:         r\"../../../../../../../../../../../../etc/passwd\",",
      "857:         r\"../../../../../../../../../../../../var/www/html/index.html\",",
      "858:         r\"../../../../../../../../../../../../usr/local/etc/openvpn/server.conf\",",
      "859:         r\"../../../../../../../../../../../../Program Files (x86)\",",
      "860:         r\"/../../../../../../../../../../../../Windows/System32\",",
      "861:         r\"/Windows\\../etc/passwd\",",
      "862:         r\"/Windows\\..\\Windows\\System32\\\\\",",
      "863:         r\"/Windows\\..\\Windows\\System32\\cmd.exe\",",
      "864:         r\"/Windows\\..\\Windows\\System32\\msconfig.exe\",",
      "865:         r\"/Windows\\..\\Windows\\System32\\regedit.exe\",",
      "866:         r\"/Windows\\..\\Windows\\System32\\taskmgr.exe\",",
      "867:         r\"/Windows\\..\\Windows\\System32\\control.exe\",",
      "868:         r\"/Windows\\..\\Windows\\System32\\services.msc\",",
      "869:         r\"/Windows\\..\\Windows\\System32\\diskmgmt.msc\",",
      "870:         r\"/Windows\\..\\Windows\\System32\\eventvwr.msc\",",
      "871:         r\"/Windows/System32/drivers/etc/hosts\",",
      "872:     ],",
      "873: )",
      "874: def test_validate_path_is_safe_windows_bad(path):",
      "875:     with pytest.raises(MlflowException, match=\"Invalid path\"):",
      "876:         validate_path_is_safe(path)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fad47af31ce0e2e5149732aacdecf2c2023c5b52",
      "candidate_info": {
        "commit_hash": "fad47af31ce0e2e5149732aacdecf2c2023c5b52",
        "repo": "mlflow/mlflow",
        "commit_url": "https://github.com/mlflow/mlflow/commit/fad47af31ce0e2e5149732aacdecf2c2023c5b52",
        "files": [
          "mlflow/server/handlers.py",
          "tests/tracking/test_rest_tracking.py"
        ],
        "message": "Fix log batch schema validation (#8358)\n\n* use .get to access dict keys as to not error\n\nSigned-off-by: mrkaye97 <mrkaye97@gmail.com>\n\n* add a couple tests\n\nSigned-off-by: mrkaye97 <mrkaye97@gmail.com>\n\n* remove the incorrect assertion\n\nSigned-off-by: mrkaye97 <mrkaye97@gmail.com>\n\n* stop the immediate bleeding\n\nSigned-off-by: mrkaye97 <mrkaye97@gmail.com>\n\n* test fix\n\nSigned-off-by: mrkaye97 <mrkaye97@gmail.com>\n\n* revert to old error\n\nSigned-off-by: mrkaye97 <mrkaye97@gmail.com>\n\n* fixing test\n\nSigned-off-by: mrkaye97 <mrkaye97@gmail.com>\n\n* Autoformat: https://github.com/mlflow/mlflow/actions/runs/4855930284\n\nSigned-off-by: mlflow-automation <mlflow-automation@users.noreply.github.com>\n\n---------\n\nSigned-off-by: mrkaye97 <mrkaye97@gmail.com>\nSigned-off-by: mlflow-automation <mlflow-automation@users.noreply.github.com>\nCo-authored-by: mlflow-automation <mlflow-automation@users.noreply.github.com>",
        "before_after_code_files": [
          "mlflow/server/handlers.py||mlflow/server/handlers.py",
          "tests/tracking/test_rest_tracking.py||tests/tracking/test_rest_tracking.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/tracking/test_rest_tracking.py||tests/tracking/test_rest_tracking.py"
          ],
          "candidate": [
            "tests/tracking/test_rest_tracking.py||tests/tracking/test_rest_tracking.py"
          ]
        }
      },
      "candidate_diff": {
        "mlflow/server/handlers.py||mlflow/server/handlers.py": [
          "File: mlflow/server/handlers.py -> mlflow/server/handlers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1095: def _log_batch():",
          "1096:     def _assert_metrics_fields_present(metrics):",
          "1097:         for m in metrics:",
          "1103:     def _assert_params_tags_fields_present(params_or_tags):",
          "1104:         for param_or_tag in params_or_tags:",
          "1107:     _validate_batch_log_api_req(_get_request_json())",
          "1108:     request_message = _get_request_message(",
          "",
          "[Removed Lines]",
          "1098:             _assert_required(m[\"key\"])",
          "1099:             _assert_required(m[\"value\"])",
          "1100:             _assert_required(m[\"timestamp\"])",
          "1101:             _assert_required(m[\"step\"])",
          "1105:             _assert_required(param_or_tag[\"key\"])",
          "",
          "[Added Lines]",
          "1098:             _assert_required(m.get(\"key\"))",
          "1099:             _assert_required(m.get(\"value\"))",
          "1100:             _assert_required(m.get(\"timestamp\"))",
          "1104:             _assert_required(param_or_tag.get(\"key\"))",
          "",
          "---------------"
        ],
        "tests/tracking/test_rest_tracking.py||tests/tracking/test_rest_tracking.py": [
          "File: tests/tracking/test_rest_tracking.py -> tests/tracking/test_rest_tracking.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:             f\"Invalid value foo for parameter '{request_parameter}' supplied\",",
          "674:         )",
          "677: @pytest.mark.allow_infer_pip_requirements_fallback",
          "678: def test_log_model(mlflow_client):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676:     ## Should 400 if missing timestamp",
          "677:     assert_bad_request(",
          "678:         {\"run_id\": run_id, \"metrics\": [{\"key\": \"mae\", \"value\": 2.5}]},",
          "679:         \"Invalid value [{'key': 'mae', 'value': 2.5}] for parameter 'metrics' supplied\",",
          "680:     )",
          "682:     ## Should 200 if timestamp provided but step is not",
          "683:     response = _send_rest_tracking_post_request(",
          "684:         mlflow_client.tracking_uri,",
          "685:         \"/api/2.0/mlflow/runs/log-batch\",",
          "686:         {\"run_id\": run_id, \"metrics\": [{\"key\": \"mae\", \"value\": 2.5, \"timestamp\": 123456789}]},",
          "687:     )",
          "689:     assert response.status_code == 200",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86d5b10e6c4a4fff0c68765c4eda4cc9ee878a47",
      "candidate_info": {
        "commit_hash": "86d5b10e6c4a4fff0c68765c4eda4cc9ee878a47",
        "repo": "mlflow/mlflow",
        "commit_url": "https://github.com/mlflow/mlflow/commit/86d5b10e6c4a4fff0c68765c4eda4cc9ee878a47",
        "files": [
          "mlflow/server/handlers.py",
          "tests/server/test_handlers.py"
        ],
        "message": "Fix proxy artifact URI handling for fetching trace data (#12147)\n\nSigned-off-by: B-Step62 <yuki.watanabe@databricks.com>\nSigned-off-by: Yuki Watanabe <31463517+B-Step62@users.noreply.github.com>\nCo-authored-by: Harutaka Kawamura <hkawamura0130@gmail.com>",
        "before_after_code_files": [
          "mlflow/server/handlers.py||mlflow/server/handlers.py",
          "tests/server/test_handlers.py||tests/server/test_handlers.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/server/test_handlers.py||tests/server/test_handlers.py"
          ],
          "candidate": [
            "tests/server/test_handlers.py||tests/server/test_handlers.py"
          ]
        }
      },
      "candidate_diff": {
        "mlflow/server/handlers.py||mlflow/server/handlers.py": [
          "File: mlflow/server/handlers.py -> mlflow/server/handlers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from mlflow.entities import DatasetInput, ExperimentTag, FileInfo, Metric, Param, RunTag, ViewType",
          "22: from mlflow.entities.model_registry import ModelVersionTag, RegisteredModelTag",
          "23: from mlflow.entities.multipart_upload import MultipartUploadPart",
          "24: from mlflow.entities.trace_status import TraceStatus",
          "25: from mlflow.environment_variables import MLFLOW_DEPLOYMENTS_TARGET",
          "26: from mlflow.exceptions import MlflowException, _UnsupportedMultipartUploadException",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from mlflow.entities.trace_info import TraceInfo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:     return _artifact_repo",
          "190: def _is_serving_proxied_artifacts():",
          "191:     \"\"\"",
          "192:     Returns:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: def _get_trace_artifact_repo(trace_info: TraceInfo):",
          "192:     \"\"\"",
          "193:     Resolve the artifact repository for fetching data for the given trace.",
          "195:     Args:",
          "196:         trace_info: The trace info object containing metadata about the trace.",
          "197:     \"\"\"",
          "198:     artifact_uri = get_artifact_uri_for_trace(trace_info)",
          "200:     if _is_servable_proxied_run_artifact_root(artifact_uri):",
          "201:         # If the artifact location is a proxied run artifact root (e.g. mlflow-artifacts://...),",
          "202:         # we need to resolve it to the actual artifact location.",
          "203:         from mlflow.server import ARTIFACTS_DESTINATION_ENV_VAR",
          "205:         path = _get_proxied_run_artifact_destination_path(artifact_uri)",
          "206:         if not path:",
          "207:             raise MlflowException(",
          "208:                 f\"Failed to resolve the proxied run artifact URI: {artifact_uri}. \",",
          "209:                 \"Trace artifact URI must contain subpath to the trace data directory.\",",
          "210:                 error_code=BAD_REQUEST,",
          "211:             )",
          "212:         root = os.environ[ARTIFACTS_DESTINATION_ENV_VAR]",
          "213:         artifact_uri = posixpath.join(root, path)",
          "215:         # We don't set it to global var unlike run artifact, because the artifact repo has",
          "216:         # to be created with full trace artifact URI including request_id.",
          "217:         # e.g. s3://<experiment_id>/traces/<request_id>",
          "218:         artifact_repo = get_artifact_repository(artifact_uri)",
          "219:     else:",
          "220:         artifact_repo = get_artifact_repository(artifact_uri)",
          "221:     return artifact_repo",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2455:         )",
          "2457:     trace_info = _get_tracking_store().get_trace_info(request_id)",
          "2465:     buf = io.BytesIO()",
          "2467:     buf.write(json.dumps(trace_data).encode())",
          "2468:     buf.seek(0)",
          "",
          "[Removed Lines]",
          "2458:     artifact_uri = get_artifact_uri_for_trace(trace_info)",
          "2460:     if _is_servable_proxied_run_artifact_root(artifact_uri):",
          "2461:         artifact_repo = _get_artifact_repo_mlflow_artifacts()",
          "2462:     else:",
          "2463:         artifact_repo = get_artifact_repository(artifact_uri)",
          "2466:     trace_data = artifact_repo.download_trace_data()",
          "",
          "[Added Lines]",
          "2492:     trace_data = _get_trace_artifact_repo(trace_info).download_trace_data()",
          "2494:     # Write data to a BytesIO buffer instead of needing to save a temp file",
          "",
          "---------------"
        ],
        "tests/server/test_handlers.py||tests/server/test_handlers.py": [
          "File: tests/server/test_handlers.py -> tests/server/test_handlers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     RegisteredModel,",
          "13:     RegisteredModelTag,",
          "14: )",
          "15: from mlflow.exceptions import MlflowException",
          "16: from mlflow.protos.databricks_pb2 import INTERNAL_ERROR, INVALID_PARAMETER_VALUE, ErrorCode",
          "17: from mlflow.protos.model_registry_pb2 import (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: from mlflow.entities.trace_info import TraceInfo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     UpdateRegisteredModel,",
          "39: )",
          "40: from mlflow.protos.service_pb2 import CreateExperiment, SearchRuns",
          "42: from mlflow.server.handlers import (",
          "43:     _convert_path_parameter_to_flask_format,",
          "44:     _create_experiment,",
          "",
          "[Removed Lines]",
          "41: from mlflow.server import BACKEND_STORE_URI_ENV_VAR, SERVE_ARTIFACTS_ENV_VAR, app",
          "",
          "[Added Lines]",
          "42: from mlflow.server import (",
          "43:     ARTIFACTS_DESTINATION_ENV_VAR,",
          "44:     BACKEND_STORE_URI_ENV_VAR,",
          "45:     SERVE_ARTIFACTS_ENV_VAR,",
          "46:     app,",
          "47: )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     _get_model_version_download_uri,",
          "57:     _get_registered_model,",
          "58:     _get_request_message,",
          "59:     _log_batch,",
          "60:     _rename_registered_model,",
          "61:     _search_model_versions,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     _get_trace_artifact_repo,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:     catch_mlflow_exception,",
          "72:     get_endpoints,",
          "73: )",
          "74: from mlflow.store.entities.paged_list import PagedList",
          "75: from mlflow.store.model_registry import (",
          "76:     SEARCH_MODEL_VERSION_MAX_RESULTS_THRESHOLD,",
          "77:     SEARCH_REGISTERED_MODEL_MAX_RESULTS_DEFAULT,",
          "78: )",
          "79: from mlflow.utils.proto_json_utils import message_to_json",
          "80: from mlflow.utils.validation import MAX_BATCH_LOG_REQUEST_SIZE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: from mlflow.store.artifact.azure_blob_artifact_repo import AzureBlobArtifactRepository",
          "82: from mlflow.store.artifact.local_artifact_repo import LocalArtifactRepository",
          "83: from mlflow.store.artifact.s3_artifact_repo import S3ArtifactRepository",
          "89: from mlflow.utils.mlflow_tags import MLFLOW_ARTIFACT_LOCATION",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "857:             ),",
          "858:         ):",
          "859:             _validate_source(\"/local/path/xyz\", run_id)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "873: @pytest.mark.parametrize(",
          "874:     (\"location\", \"expected_class\", \"expected_uri\"),",
          "875:     [",
          "876:         (\"file:///0/traces/123\", LocalArtifactRepository, \"file:///0/traces/123\"),",
          "877:         (\"s3://bucket/0/traces/123\", S3ArtifactRepository, \"s3://bucket/0/traces/123\"),",
          "878:         (",
          "879:             \"wasbs://container@account.blob.core.windows.net/bucket/1/traces/123\",",
          "880:             AzureBlobArtifactRepository,",
          "881:             \"wasbs://container@account.blob.core.windows.net/bucket/1/traces/123\",",
          "882:         ),",
          "883:         # Proxy URI must be resolved to the actual storage URI",
          "884:         (",
          "885:             \"https://127.0.0.1/api/2.0/mlflow-artifacts/artifacts/2/traces/123\",",
          "886:             S3ArtifactRepository,",
          "887:             \"s3://bucket/2/traces/123\",",
          "888:         ),",
          "889:         (\"mlflow-artifacts:/1/traces/123\", S3ArtifactRepository, \"s3://bucket/1/traces/123\"),",
          "890:     ],",
          "891: )",
          "892: def test_get_trace_artifact_repo(location, expected_class, expected_uri, monkeypatch):",
          "893:     monkeypatch.setenv(SERVE_ARTIFACTS_ENV_VAR, \"true\")",
          "894:     monkeypatch.setenv(ARTIFACTS_DESTINATION_ENV_VAR, \"s3://bucket\")",
          "895:     trace_info = TraceInfo(\"123\", \"0\", 0, 1, \"OK\", tags={MLFLOW_ARTIFACT_LOCATION: location})",
          "896:     repo = _get_trace_artifact_repo(trace_info)",
          "897:     assert isinstance(repo, expected_class)",
          "898:     assert repo.artifact_uri == expected_uri",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55c72d02380e8db8118595a4fdae7879cb7ac5bd",
      "candidate_info": {
        "commit_hash": "55c72d02380e8db8118595a4fdae7879cb7ac5bd",
        "repo": "mlflow/mlflow",
        "commit_url": "https://github.com/mlflow/mlflow/commit/55c72d02380e8db8118595a4fdae7879cb7ac5bd",
        "files": [
          "mlflow/server/handlers.py",
          "mlflow/store/artifact/http_artifact_repo.py",
          "mlflow/utils/uri.py",
          "tests/store/artifact/test_http_artifact_repo.py"
        ],
        "message": "Validate path in `HttpArtifactRepository.list_artifacts` (#10585)\n\nSigned-off-by: harupy <17039389+harupy@users.noreply.github.com>",
        "before_after_code_files": [
          "mlflow/server/handlers.py||mlflow/server/handlers.py",
          "mlflow/store/artifact/http_artifact_repo.py||mlflow/store/artifact/http_artifact_repo.py",
          "mlflow/utils/uri.py||mlflow/utils/uri.py",
          "tests/store/artifact/test_http_artifact_repo.py||tests/store/artifact/test_http_artifact_repo.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mlflow/utils/uri.py||mlflow/utils/uri.py",
            "tests/store/artifact/test_http_artifact_repo.py||tests/store/artifact/test_http_artifact_repo.py"
          ],
          "candidate": [
            "mlflow/utils/uri.py||mlflow/utils/uri.py",
            "tests/store/artifact/test_http_artifact_repo.py||tests/store/artifact/test_http_artifact_repo.py"
          ]
        }
      },
      "candidate_diff": {
        "mlflow/server/handlers.py||mlflow/server/handlers.py": [
          "File: mlflow/server/handlers.py -> mlflow/server/handlers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: from mlflow.tracking.registry import UnsupportedModelRegistryStoreURIException",
          "103: from mlflow.utils.file_utils import local_file_uri_to_path",
          "104: from mlflow.utils.mime_type_utils import _guess_mime_type",
          "106: from mlflow.utils.promptlab_utils import _create_promptlab_run_impl",
          "107: from mlflow.utils.proto_json_utils import message_to_json, parse_dict",
          "108: from mlflow.utils.string_utils import is_string_type",
          "110: from mlflow.utils.validation import _validate_batch_log_api_req",
          "112: _logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "105: from mlflow.utils.os import is_windows",
          "109: from mlflow.utils.uri import is_file_uri, is_local_uri",
          "",
          "[Added Lines]",
          "108: from mlflow.utils.uri import is_file_uri, is_local_uri, validate_path_is_safe",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "541:     return wrapper",
          "568: @catch_mlflow_exception",
          "569: def get_artifact_handler():",
          "570:     from querystring_parser import parser",
          "",
          "[Removed Lines]",
          "544: _OS_ALT_SEPS = [sep for sep in [os.sep, os.path.altsep] if sep is not None and sep != \"/\"]",
          "547: def validate_path_is_safe(path):",
          "548:     \"\"\"",
          "549:     Validates that the specified path is safe to join with a trusted prefix. This is a security",
          "550:     measure to prevent path traversal attacks.",
          "551:     A valid path should:",
          "552:         not contain separators other than '/'",
          "553:         not contain .. to navigate to parent dir in path",
          "554:         not be an absolute path",
          "555:     \"\"\"",
          "556:     if is_file_uri(path):",
          "557:         path = local_file_uri_to_path(path)",
          "558:     if (",
          "559:         any((s in path) for s in _OS_ALT_SEPS)",
          "560:         or \"..\" in path.split(\"/\")",
          "561:         or pathlib.PureWindowsPath(path).is_absolute()",
          "562:         or pathlib.PurePosixPath(path).is_absolute()",
          "563:         or (is_windows() and len(path) >= 2 and path[1] == \":\")",
          "564:     ):",
          "565:         raise MlflowException(f\"Invalid path: {path}\", error_code=INVALID_PARAMETER_VALUE)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mlflow/store/artifact/http_artifact_repo.py||mlflow/store/artifact/http_artifact_repo.py": [
          "File: mlflow/store/artifact/http_artifact_repo.py -> mlflow/store/artifact/http_artifact_repo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from mlflow.utils.file_utils import read_chunk, relative_path_to_artifact_path",
          "28: from mlflow.utils.mime_type_utils import _guess_mime_type",
          "29: from mlflow.utils.rest_utils import augmented_raise_for_status, http_request",
          "31: _logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: from mlflow.utils.uri import validate_path_is_safe",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         augmented_raise_for_status(resp)",
          "89:         file_infos = []",
          "90:         for f in resp.json().get(\"files\", []):",
          "91:             file_info = FileInfo(",
          "92:                 posixpath.join(path, f[\"path\"]) if path else f[\"path\"],",
          "93:                 f[\"is_dir\"],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:             validate_path_is_safe(f[\"path\"])",
          "",
          "---------------"
        ],
        "mlflow/utils/uri.py||mlflow/utils/uri.py": [
          "File: mlflow/utils/uri.py -> mlflow/utils/uri.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pathlib",
          "2: import posixpath",
          "3: import re",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import os",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "406: def generate_tmp_dfs_path(dfs_tmp):",
          "407:     return posixpath.join(dfs_tmp, str(uuid.uuid4()))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411: _OS_ALT_SEPS = [sep for sep in [os.sep, os.path.altsep] if sep is not None and sep != \"/\"]",
          "414: def validate_path_is_safe(path):",
          "415:     \"\"\"",
          "416:     Validates that the specified path is safe to join with a trusted prefix. This is a security",
          "417:     measure to prevent path traversal attacks.",
          "418:     A valid path should:",
          "419:         not contain separators other than '/'",
          "420:         not contain .. to navigate to parent dir in path",
          "421:         not be an absolute path",
          "422:     \"\"\"",
          "423:     from mlflow.utils.file_utils import local_file_uri_to_path",
          "425:     if is_file_uri(path):",
          "426:         path = local_file_uri_to_path(path)",
          "427:     if (",
          "428:         any((s in path) for s in _OS_ALT_SEPS)",
          "429:         or \"..\" in path.split(\"/\")",
          "430:         or pathlib.PureWindowsPath(path).is_absolute()",
          "431:         or pathlib.PurePosixPath(path).is_absolute()",
          "432:         or (is_windows() and len(path) >= 2 and path[1] == \":\")",
          "433:     ):",
          "434:         raise MlflowException(f\"Invalid path: {path}\", error_code=INVALID_PARAMETER_VALUE)",
          "",
          "---------------"
        ],
        "tests/store/artifact/test_http_artifact_repo.py||tests/store/artifact/test_http_artifact_repo.py": [
          "File: tests/store/artifact/test_http_artifact_repo.py -> tests/store/artifact/test_http_artifact_repo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     MLFLOW_TRACKING_TOKEN,",
          "20:     MLFLOW_TRACKING_USERNAME,",
          "21: )",
          "22: from mlflow.store.artifact.artifact_repository_registry import get_artifact_repository",
          "23: from mlflow.store.artifact.http_artifact_repo import HttpArtifactRepository",
          "24: from mlflow.tracking._tracking_service.utils import _get_default_host_creds",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: from mlflow.exceptions import MlflowException",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:             http_artifact_repo.list_artifacts()",
          "248: def read_file(path):",
          "249:     with open(path) as f:",
          "250:         return f.read()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249: @pytest.mark.parametrize(\"path\", [\"/tmp/path\", \"../../path\"])",
          "250: def test_list_artifacts_malicious_path(http_artifact_repo, path):",
          "251:     with mock.patch(",
          "252:         \"mlflow.store.artifact.http_artifact_repo.http_request\",",
          "253:         return_value=MockResponse(",
          "254:             {",
          "255:                 \"files\": [",
          "256:                     {\"path\": path, \"is_dir\": False, \"file_size\": 1},",
          "257:                 ]",
          "258:             },",
          "259:             200,",
          "260:         ),",
          "261:     ):",
          "262:         with pytest.raises(MlflowException, match=f\"Invalid path: {path}\"):",
          "263:             http_artifact_repo.list_artifacts()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "369fde468e4231eda4e7fb8e91a74d673226e497",
      "candidate_info": {
        "commit_hash": "369fde468e4231eda4e7fb8e91a74d673226e497",
        "repo": "mlflow/mlflow",
        "commit_url": "https://github.com/mlflow/mlflow/commit/369fde468e4231eda4e7fb8e91a74d673226e497",
        "files": [
          "mlflow/utils/uri.py",
          "tests/tracking/test_rest_tracking.py"
        ],
        "message": "Reject path containing `#` or `%23` (#10641)\n\nSigned-off-by: harupy <17039389+harupy@users.noreply.github.com>",
        "before_after_code_files": [
          "mlflow/utils/uri.py||mlflow/utils/uri.py",
          "tests/tracking/test_rest_tracking.py||tests/tracking/test_rest_tracking.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mlflow/utils/uri.py||mlflow/utils/uri.py",
            "tests/tracking/test_rest_tracking.py||tests/tracking/test_rest_tracking.py"
          ],
          "candidate": [
            "mlflow/utils/uri.py||mlflow/utils/uri.py",
            "tests/tracking/test_rest_tracking.py||tests/tracking/test_rest_tracking.py"
          ]
        }
      },
      "candidate_diff": {
        "mlflow/utils/uri.py||mlflow/utils/uri.py": [
          "File: mlflow/utils/uri.py -> mlflow/utils/uri.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:     \"\"\"",
          "428:     from mlflow.utils.file_utils import local_file_uri_to_path",
          "430:     if is_file_uri(path):",
          "431:         path = local_file_uri_to_path(path)",
          "432:     if (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:     exc = MlflowException(f\"Invalid path: {path}\", error_code=INVALID_PARAMETER_VALUE)",
          "431:     if any((s in path) for s in (\"#\", \"%23\")):",
          "432:         raise exc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436:         or pathlib.PurePosixPath(path).is_absolute()",
          "437:         or (is_windows() and len(path) >= 2 and path[1] == \":\")",
          "438:     ):",
          "",
          "[Removed Lines]",
          "439:         raise MlflowException(f\"Invalid path: {path}\", error_code=INVALID_PARAMETER_VALUE)",
          "",
          "[Added Lines]",
          "443:         raise exc",
          "",
          "---------------"
        ],
        "tests/tracking/test_rest_tracking.py||tests/tracking/test_rest_tracking.py": [
          "File: tests/tracking/test_rest_tracking.py -> tests/tracking/test_rest_tracking.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "548:         \"./../path\",",
          "549:         \"path/../to/file\",",
          "550:         \"path/../../to/file\",",
          "551:         \"/etc/passwd\",",
          "552:         \"/etc/passwd%00.jpg\",",
          "553:         \"/etc/passwd%00.html\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:         \"file://a#/..//tmp\",",
          "552:         \"file://a%23/..//tmp/\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4b0b8aa34866071bcf128e108445c4743920e1b",
      "candidate_info": {
        "commit_hash": "b4b0b8aa34866071bcf128e108445c4743920e1b",
        "repo": "mlflow/mlflow",
        "commit_url": "https://github.com/mlflow/mlflow/commit/b4b0b8aa34866071bcf128e108445c4743920e1b",
        "files": [
          "mlflow/server/handlers.py",
          "mlflow/utils/uri.py",
          "tests/utils/test_uri.py"
        ],
        "message": "Disable '..' in query string for artifact URI (#10653)\n\nSigned-off-by: B-Step62 <yuki.watanabe@databricks.com>",
        "before_after_code_files": [
          "mlflow/server/handlers.py||mlflow/server/handlers.py",
          "mlflow/utils/uri.py||mlflow/utils/uri.py",
          "tests/utils/test_uri.py||tests/utils/test_uri.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mlflow/utils/uri.py||mlflow/utils/uri.py",
            "tests/utils/test_uri.py||tests/utils/test_uri.py"
          ],
          "candidate": [
            "mlflow/utils/uri.py||mlflow/utils/uri.py",
            "tests/utils/test_uri.py||tests/utils/test_uri.py"
          ]
        }
      },
      "candidate_diff": {
        "mlflow/server/handlers.py||mlflow/server/handlers.py": [
          "File: mlflow/server/handlers.py -> mlflow/server/handlers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: from mlflow.utils.promptlab_utils import _create_promptlab_run_impl",
          "106: from mlflow.utils.proto_json_utils import message_to_json, parse_dict",
          "107: from mlflow.utils.string_utils import is_string_type",
          "109: from mlflow.utils.validation import _validate_batch_log_api_req",
          "111: _logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "108: from mlflow.utils.uri import is_file_uri, is_local_uri, validate_path_is_safe",
          "",
          "[Added Lines]",
          "108: from mlflow.utils.uri import is_file_uri, is_local_uri, validate_path_is_safe, validate_query_string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "586:     )",
          "588:     tags = [ExperimentTag(tag.key, tag.value) for tag in request_message.tags]",
          "589:     experiment_id = _get_tracking_store().create_experiment(",
          "590:         request_message.name, request_message.artifact_location, tags",
          "591:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:     # Validate query string in artifact location to prevent attacks",
          "591:     parsed_artifact_locaion = urllib.parse.urlparse(request_message.artifact_location)",
          "592:     validate_query_string(parsed_artifact_locaion.query)",
          "",
          "---------------"
        ],
        "mlflow/utils/uri.py||mlflow/utils/uri.py": [
          "File: mlflow/utils/uri.py -> mlflow/utils/uri.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:         path = _join_posixpaths_and_append_absolute_suffixes(path, subpath)",
          "266:     parsed_uri = urllib.parse.urlparse(uri)",
          "267:     if len(parsed_uri.scheme) == 0:",
          "268:         # If the input URI does not define a scheme, we assume that it is a POSIX path",
          "269:         # and join it with the specified input paths",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:     # Validate query string not to contain any traveral path (../) before appending",
          "269:     # to the end of the path, otherwise they will be resolved as part of the path.",
          "270:     validate_query_string(parsed_uri.query)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430:     \"\"\"",
          "431:     from mlflow.utils.file_utils import local_file_uri_to_path",
          "436:     exc = MlflowException(\"Invalid path\", error_code=INVALID_PARAMETER_VALUE)",
          "438:         raise exc",
          "440:     if is_file_uri(path):",
          "",
          "[Removed Lines]",
          "433:     # We must decode URL before validating it",
          "434:     path = urllib.parse.unquote(path)",
          "437:     if any((s in path) for s in (\"#\", \"%23\")):",
          "",
          "[Added Lines]",
          "438:     # We must decode path before validating it",
          "439:     path = _decode(path)",
          "442:     if \"#\" in path:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "447:         or (is_windows() and len(path) >= 2 and path[1] == \":\")",
          "448:     ):",
          "449:         raise exc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457: def validate_query_string(query):",
          "458:     query = _decode(query)",
          "459:     # Block query strings contain any traveral path (../) because they",
          "460:     # could be resolved as part of the path and allow path traversal.",
          "461:     if \"..\" in query:",
          "462:         raise MlflowException(\"Invalid query string\", error_code=INVALID_PARAMETER_VALUE)",
          "465: def _decode(url):",
          "466:     # Keep decoding until the url stops changing (with a max of 10 iterations)",
          "467:     for _ in range(10):",
          "468:         decoded = urllib.parse.unquote(url)",
          "469:         if decoded == url:",
          "470:             return url",
          "471:         url = decoded",
          "473:     raise ValueError(\"Failed to decode url\")",
          "",
          "---------------"
        ],
        "tests/utils/test_uri.py||tests/utils/test_uri.py": [
          "File: tests/utils/test_uri.py -> tests/utils/test_uri.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     )",
          "237: @pytest.mark.parametrize(",
          "238:     (\"uri\", \"existing_query_params\", \"query_params\", \"expected\"),",
          "239:     [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237: @pytest.mark.parametrize(",
          "238:     \"uri\",",
          "239:     [",
          "240:         # query string contains '..' (and its encoded form) are considered invalid",
          "241:         \"https://example.com?..\",",
          "242:         \"https://example.com?/path/../path/../path\",",
          "243:         \"https://example.com?key=value&../../path\",",
          "244:         \"https://example.com?key=value&%2E%2E%2Fpath\",",
          "245:         \"https://example.com?key=value&%252E%252E%252Fpath\",",
          "246:     ],",
          "247: )",
          "248: def test_append_to_uri_throws_for_malicious_query_string_in_uri(uri):",
          "249:     with pytest.raises(MlflowException, match=r\"Invalid query string\"):",
          "250:         append_to_uri_path(uri)",
          "",
          "---------------"
        ]
      }
    }
  ]
}