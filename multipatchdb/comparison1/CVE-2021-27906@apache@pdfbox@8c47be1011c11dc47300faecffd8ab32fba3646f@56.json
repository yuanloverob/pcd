{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "604b81c1414114a0d8419d2889a21e66199e81d7",
      "candidate_info": {
        "commit_hash": "604b81c1414114a0d8419d2889a21e66199e81d7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/604b81c1414114a0d8419d2889a21e66199e81d7",
        "files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ],
        "message": "PDFBOX-4297: introduce new method to get the signature contents; remove line forgotten in a previous refactoring\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882383 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java -> examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:         PDDocument doc = PDDocument.load(new File(outDir + fileName));",
          "291:         PDSignature signature = doc.getLastSignatureDictionary();",
          "293:         byte[] signedFileContent =",
          "294:                 signature.getSignedContent(new FileInputStream(new File(outDir, fileName)));",
          "298:         Collection<? extends Certificate> certs = certificateFactory.generateCertificates(certStream);",
          "300:         String hashAlgorithm = timeStampToken.getTimeStampInfo().getMessageImprintAlgOID().getId();",
          "",
          "[Removed Lines]",
          "292:         COSString contents = (COSString) signature.getCOSObject().getDictionaryObject(COSName.CONTENTS);",
          "295:         TimeStampToken timeStampToken = new TimeStampToken(new CMSSignedData(contents.getBytes()));",
          "296:         certificateFactory.getInstance(\"X.509\");",
          "297:         ByteArrayInputStream certStream = new ByteArrayInputStream(contents.getBytes());",
          "",
          "[Added Lines]",
          "294:         byte[] contents = signature.getContents();",
          "295:         TimeStampToken timeStampToken = new TimeStampToken(new CMSSignedData(contents));",
          "296:         ByteArrayInputStream certStream = new ByteArrayInputStream(contents);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "458:         }",
          "459:         for (PDSignature sig : document.getSignatureDictionaries())",
          "460:         {",
          "463:             byte[] buf = sig.getSignedContent(new FileInputStream(signedFile));",
          "",
          "[Removed Lines]",
          "461:             COSString contents = (COSString) sig.getCOSObject().getDictionaryObject(COSName.CONTENTS);",
          "",
          "[Added Lines]",
          "460:             byte[] contents = sig.getContents();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "473:             FileInputStream fis3 = new FileInputStream(signedFile);",
          "474:             byte[] contents2 = sig.getContents(IOUtils.toByteArray(fis3));",
          "476:             fis3.close();",
          "477:             byte[] contents3 = sig.getContents(new FileInputStream(signedFile));",
          "484:             Store certificatesStore = signedData.getCertificates();",
          "485:             Collection<SignerInformation> signers = signedData.getSignerInfos().getSigners();",
          "486:             SignerInformation signerInformation = signers.iterator().next();",
          "",
          "[Removed Lines]",
          "475:             Assert.assertArrayEquals(contents.getBytes(), contents2);",
          "478:             Assert.assertArrayEquals(contents.getBytes(), contents3);",
          "483:             CMSSignedData signedData = new CMSSignedData(new CMSProcessableByteArray(buf), contents.getBytes());",
          "",
          "[Added Lines]",
          "474:             Assert.assertArrayEquals(contents, contents2);",
          "477:             Assert.assertArrayEquals(contents, contents3);",
          "482:             CMSSignedData signedData = new CMSSignedData(new CMSProcessableByteArray(buf), contents);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "814:         AddValidationInformation addValidationInformation = new AddValidationInformation();",
          "815:         addValidationInformation.validateSignature(inFile, outFile);",
          "818:         PDDocument doc = PDDocument.load(outFile);",
          "820:         PDSignature signature = doc.getLastSignatureDictionary();",
          "823:         PDDocumentCatalog docCatalog = doc.getDocumentCatalog();",
          "824:         COSDictionary dssDict = docCatalog.getCOSObject().getCOSDictionary(COSName.getPDFName(\"DSS\"));",
          "",
          "[Removed Lines]",
          "817:         certificateFactory.getInstance(\"X.509\");",
          "821:         COSString contents = (COSString) signature.getCOSObject().getDictionaryObject(COSName.CONTENTS);",
          "",
          "[Added Lines]",
          "819:         byte[] contents = signature.getContents();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "826:         COSDictionary vriDict = dssDict.getCOSDictionary(COSName.getPDFName(\"VRI\"));",
          "830:         String hexSignatureHash = Hex.getString(signatureHash);",
          "831:         System.out.println(\"hexSignatureHash: \" + hexSignatureHash);",
          "833:         Store<X509CertificateHolder> certificatesStore = signedData.getCertificates();",
          "834:         HashSet<X509CertificateHolder> certificateHolderSet =",
          "835:                 new HashSet<X509CertificateHolder>(certificatesStore.getMatches(null));",
          "",
          "[Removed Lines]",
          "829:         byte[] signatureHash = MessageDigest.getInstance(\"SHA-1\").digest(contents.getBytes());",
          "832:         CMSSignedData signedData = new CMSSignedData(contents.getBytes());",
          "",
          "[Added Lines]",
          "827:         byte[] signatureHash = MessageDigest.getInstance(\"SHA-1\").digest(contents);",
          "830:         CMSSignedData signedData = new CMSSignedData(contents);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec83b68b2943ba385c5764b27c9c2153620349b4",
      "candidate_info": {
        "commit_hash": "ec83b68b2943ba385c5764b27c9c2153620349b4",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/ec83b68b2943ba385c5764b27c9c2153620349b4",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature.java",
          "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java"
        ],
        "message": "PDFBOX-4398: avoid modifying any acroform related stuff, because this could invalidate existing signatures\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1885554 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature.java||examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature.java",
          "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java||examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature.java||examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:             SigUtils.setMDPPermission(doc, signature, 2);",
          "223:         }",
          "226:         if (acroForm != null && acroForm.getNeedAppearances())",
          "227:         {",
          "",
          "[Removed Lines]",
          "225:         PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm();",
          "",
          "[Added Lines]",
          "225:         PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm(null);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "332:     {",
          "333:         PDSignature signature = null;",
          "334:         PDSignatureField signatureField;",
          "336:         if (acroForm != null)",
          "337:         {",
          "338:             signatureField = (PDSignatureField) acroForm.getField(sigFieldName);",
          "",
          "[Removed Lines]",
          "335:         PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm();",
          "",
          "[Added Lines]",
          "335:         PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm(null);",
          "",
          "---------------"
        ],
        "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java||examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:         PDSignature signature = null;",
          "178:         PDRectangle rect = null;",
          "",
          "[Removed Lines]",
          "177:         PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm();",
          "",
          "[Added Lines]",
          "177:         PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm(null);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7253c85e20efa0c14b3629ffdad81d0cb2d2338",
      "candidate_info": {
        "commit_hash": "a7253c85e20efa0c14b3629ffdad81d0cb2d2338",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a7253c85e20efa0c14b3629ffdad81d0cb2d2338",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
          "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java"
        ],
        "message": "PDFBOX-5004: new option to use the acroForm repair feature\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882927 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java||debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
          "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java||debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java||debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java -> debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:     private JMenuItem viewModeItem;",
          "183:     public static JCheckBoxMenuItem allowSubsampling;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:     public static JCheckBoxMenuItem repairAcroFormMenuItem;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:         allowSubsampling = new JCheckBoxMenuItem(\"Allow subsampling\");",
          "539:         allowSubsampling.setEnabled(false);",
          "540:         viewMenu.add(allowSubsampling);",
          "542:         return viewMenu;",
          "543:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "543:         viewMenu.addSeparator();",
          "545:         repairAcroFormMenuItem = new JCheckBoxMenuItem(\"Repair AcroForm\");",
          "546:         repairAcroFormMenuItem.setEnabled(false);",
          "547:         viewMenu.add(repairAcroFormMenuItem);",
          "",
          "---------------"
        ],
        "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java||debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java -> debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:     private void collectFieldLocations() throws IOException",
          "162:     {",
          "164:         if (acroForm == null)",
          "165:         {",
          "166:             return;",
          "",
          "[Removed Lines]",
          "163:         PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm(false);",
          "",
          "[Added Lines]",
          "164:         boolean repairSelected = PDFDebugger.repairAcroFormMenuItem.isSelected();",
          "165:         PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm(repairSelected);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:     public void actionPerformed(ActionEvent actionEvent)",
          "232:     {",
          "233:         String actionCommand = actionEvent.getActionCommand();",
          "235:             RotationMenu.isRotationMenu(actionCommand) ||",
          "236:             ImageTypeMenu.isImageTypeMenu(actionCommand) ||",
          "237:             RenderDestinationMenu.isRenderDestinationMenu(actionCommand) ||",
          "",
          "[Removed Lines]",
          "234:         if (ZoomMenu.isZoomMenu(actionCommand) ||",
          "",
          "[Added Lines]",
          "236:         if (actionEvent.getSource() == PDFDebugger.repairAcroFormMenuItem)",
          "237:         {",
          "238:             boolean repairSelected = PDFDebugger.repairAcroFormMenuItem.isSelected();",
          "239:             document.getDocumentCatalog().getAcroForm(repairSelected);",
          "240:             startRendering();",
          "241:         }",
          "242:         else if (ZoomMenu.isZoomMenu(actionCommand) ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "271:         PDFDebugger.allowSubsampling.setEnabled(true);",
          "272:         PDFDebugger.allowSubsampling.addActionListener(this);",
          "273:     }",
          "275:     @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:         PDFDebugger.repairAcroFormMenuItem.setEnabled(true);",
          "283:         PDFDebugger.repairAcroFormMenuItem.addActionListener(this);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "934fa9b8db07185ba512a1b1464d4a935dbb6402",
      "candidate_info": {
        "commit_hash": "934fa9b8db07185ba512a1b1464d4a935dbb6402",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/934fa9b8db07185ba512a1b1464d4a935dbb6402",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java"
        ],
        "message": "PDFBOX-5229: Sonar fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891112 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "485:         final BufferedImage image;",
          "488:         if (softMask != null)",
          "489:         {",
          "",
          "[Removed Lines]",
          "486:         final PDImageXObject softMask = getSoftMask(), mask = getMask();",
          "",
          "[Added Lines]",
          "486:         final PDImageXObject softMask = getSoftMask();",
          "487:         final PDImageXObject mask = getMask();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "676:             {",
          "677:                 raster.getPixels(0, y, width, 1, pixels);",
          "678:                 alpha.getSamples(0, y, width, 1, 0, alphas);",
          "680:                 {",
          "681:                     int a = alphas[x];",
          "682:                     if (a == 0)",
          "",
          "[Removed Lines]",
          "679:                 for (int x = 0, offset = 0; x < width; x++)",
          "",
          "[Added Lines]",
          "680:                 int offset = 0;",
          "681:                 for (int x = 0; x < width; x++)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "709:     private static BufferedImage scaleImage(BufferedImage image, int width, int height, int type, boolean interpolate)",
          "710:     {",
          "713:         boolean largeScale = width * height > 3000 * 3000 * (type == BufferedImage.TYPE_BYTE_GRAY ? 3 : 1);",
          "714:         interpolate &= imgWidth != width || imgHeight != height;",
          "",
          "[Removed Lines]",
          "711:         final int imgWidth = image.getWidth(), imgHeight = image.getHeight();",
          "",
          "[Added Lines]",
          "713:         final int imgWidth = image.getWidth();",
          "714:         final int imgHeight = image.getHeight();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0ea546aa7ab7b0d64bbf633df35c7ff9c0507eb",
      "candidate_info": {
        "commit_hash": "e0ea546aa7ab7b0d64bbf633df35c7ff9c0507eb",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e0ea546aa7ab7b0d64bbf633df35c7ff9c0507eb",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov; clarify code\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889407 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:         }",
          "394:         PDSignatureField signatureField = null;",
          "396:         {",
          "398:         }",
          "399:         else",
          "400:         {",
          "404:         }",
          "405:         if (signatureField == null)",
          "406:         {",
          "",
          "[Removed Lines]",
          "395:         if (!(acroForm.getCOSObject().getDictionaryObject(COSName.FIELDS) instanceof COSArray))",
          "397:             acroForm.getCOSObject().setItem(COSName.FIELDS, new COSArray());",
          "401:             COSArray fieldArray = (COSArray) acroForm.getCOSObject().getDictionaryObject(COSName.FIELDS);",
          "402:             fieldArray.setNeedToBeUpdated(true);",
          "403:             signatureField = findSignatureField(acroForm.getFieldIterator(), sigObject);",
          "",
          "[Added Lines]",
          "395:         COSBase cosFieldBase = acroForm.getCOSObject().getDictionaryObject(COSName.FIELDS);",
          "396:         if (cosFieldBase instanceof COSArray)",
          "398:             COSArray fieldArray = (COSArray) cosFieldBase;",
          "399:             fieldArray.setNeedToBeUpdated(true);",
          "400:             signatureField = findSignatureField(acroForm.getFieldIterator(), sigObject);",
          "404:             acroForm.getCOSObject().setItem(COSName.FIELDS, new COSArray());",
          "",
          "---------------"
        ]
      }
    }
  ]
}