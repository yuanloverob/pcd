{
  "cve_id": "CVE-2024-41888",
  "cve_desc": "Missing Release of Resource after Effective Lifetime vulnerability in Apache Answer.\n\nThis issue affects Apache Answer: through 1.3.5.\n\nThe password reset link remains valid within its expiration period even after it has been used. This could potentially lead to the link being misused or hijacked.\nUsers are recommended to upgrade to version 1.3.6, which fixes the issue.",
  "repo": "apache/incubator-answer",
  "patch_hash": "2820efc454f5808974dce0aa99aac106be3f727b",
  "patch_info": {
    "commit_hash": "2820efc454f5808974dce0aa99aac106be3f727b",
    "repo": "apache/incubator-answer",
    "commit_url": "https://github.com/apache/incubator-answer/commit/2820efc454f5808974dce0aa99aac106be3f727b",
    "files": [
      "internal/base/constant/cache_key.go",
      "internal/repo/export/email_repo.go",
      "internal/schema/email_template.go",
      "internal/service/content/user_service.go",
      "internal/service/export/email_service.go",
      "internal/service/notification/invite_answer_notification.go",
      "internal/service/notification/new_answer_notification.go",
      "internal/service/notification/new_comment_notification.go",
      "internal/service/notification/new_question_notification.go",
      "internal/service/siteinfo/siteinfo_service.go",
      "internal/service/user_admin/user_backyard.go",
      "internal/service/user_external_login/user_external_login_service.go"
    ],
    "message": "feat(user): ensure that only one link is active at a time",
    "before_after_code_files": [
      "internal/base/constant/cache_key.go||internal/base/constant/cache_key.go",
      "internal/repo/export/email_repo.go||internal/repo/export/email_repo.go",
      "internal/schema/email_template.go||internal/schema/email_template.go",
      "internal/service/content/user_service.go||internal/service/content/user_service.go",
      "internal/service/export/email_service.go||internal/service/export/email_service.go",
      "internal/service/notification/invite_answer_notification.go||internal/service/notification/invite_answer_notification.go",
      "internal/service/notification/new_answer_notification.go||internal/service/notification/new_answer_notification.go",
      "internal/service/notification/new_comment_notification.go||internal/service/notification/new_comment_notification.go",
      "internal/service/notification/new_question_notification.go||internal/service/notification/new_question_notification.go",
      "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go",
      "internal/service/user_admin/user_backyard.go||internal/service/user_admin/user_backyard.go",
      "internal/service/user_external_login/user_external_login_service.go||internal/service/user_external_login/user_external_login_service.go"
    ]
  },
  "patch_diff": {
    "internal/base/constant/cache_key.go||internal/base/constant/cache_key.go": [
      "File: internal/base/constant/cache_key.go -> internal/base/constant/cache_key.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  AdminTokenCacheKey                         = \"answer:admin:token:\"",
      "33:  AdminTokenCacheTime                        = 7 * 24 * time.Hour",
      "34:  UserTokenMappingCacheKey                   = \"answer:user-token:mapping:\"",
      "35:  SiteInfoCacheKey                           = \"answer:site-info:\"",
      "36:  SiteInfoCacheTime                          = 1 * time.Hour",
      "37:  ConfigID2KEYCacheKeyPrefix                 = \"answer:config:id:\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:  UserEmailCodeCacheKey                      = \"answer:user:email-code:\"",
      "36:  UserEmailCodeCacheTime                     = 10 * time.Minute",
      "37:  UserLatestEmailCodeCacheKey                = \"answer:user-id:email-code:\"",
      "",
      "---------------"
    ],
    "internal/repo/export/email_repo.go||internal/repo/export/email_repo.go": [
      "File: internal/repo/export/email_repo.go -> internal/repo/export/email_repo.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import (",
      "23:  \"context\"",
      "24:  \"time\"",
      "26:  \"github.com/apache/incubator-answer/internal/base/data\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:  \"github.com/apache/incubator-answer/internal/base/constant\"",
      "25:  \"github.com/tidwall/gjson\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: }",
      "48:   return errors.InternalServer(reason.DatabaseError).WithError(err).WithStack()",
      "49:  }",
      "50:  return nil",
      "",
      "[Removed Lines]",
      "45: func (e *emailRepo) SetCode(ctx context.Context, code, content string, duration time.Duration) error {",
      "46:  err := e.data.Cache.SetString(ctx, code, content, duration)",
      "47:  if err != nil {",
      "",
      "[Added Lines]",
      "47: func (e *emailRepo) SetCode(ctx context.Context, userID, code, content string, duration time.Duration) error {",
      "50:  if err := e.data.Cache.SetString(ctx, constant.UserLatestEmailCodeCacheKey+userID, code, duration); err != nil {",
      "51:   return errors.InternalServer(reason.DatabaseError).WithError(err).WithStack()",
      "52:  }",
      "55:  if err := e.data.Cache.SetString(ctx, constant.UserEmailCodeCacheKey+code, content, duration); err != nil {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "54: func (e *emailRepo) VerifyCode(ctx context.Context, code string) (content string, err error) {",
      "56:  if err != nil {",
      "57:   return \"\", err",
      "58:  }",
      "59:  if !exist {",
      "60:   return \"\", nil",
      "61:  }",
      "62:  return content, nil",
      "63: }",
      "",
      "[Removed Lines]",
      "55:  content, exist, err := e.data.Cache.GetString(ctx, code)",
      "",
      "[Added Lines]",
      "64:  codeCacheKey := constant.UserEmailCodeCacheKey + code",
      "65:  content, exist, err := e.data.Cache.GetString(ctx, codeCacheKey)",
      "74:  _ = e.data.Cache.Del(ctx, codeCacheKey)",
      "79:  if skipValidationLatestCode := gjson.Get(content, \"skip_validation_latest_code\").Bool(); skipValidationLatestCode {",
      "80:   return content, nil",
      "81:  }",
      "82:  userID := gjson.Get(content, \"user_id\").String()",
      "85:  latestCode, exist, err := e.data.Cache.GetString(ctx, constant.UserLatestEmailCodeCacheKey+userID)",
      "86:  if err != nil {",
      "87:   return \"\", err",
      "88:  }",
      "89:  if !exist {",
      "90:   return \"\", nil",
      "91:  }",
      "94:  if latestCode != code {",
      "95:   return \"\", nil",
      "96:  }",
      "",
      "---------------"
    ],
    "internal/schema/email_template.go||internal/schema/email_template.go": [
      "File: internal/schema/email_template.go -> internal/schema/email_template.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:  NotificationSources []constant.NotificationSource `json:\"notification_source,omitempty\"`",
      "44:  BindingKey string `json:\"binding_key,omitempty\"`",
      "45: }",
      "47: func (r *EmailCodeContent) ToJSONString() string {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:  SkipValidationLatestCode bool `json:\"skip_validation_latest_code\"`",
      "",
      "---------------"
    ],
    "internal/service/content/user_service.go||internal/service/content/user_service.go": [
      "File: internal/service/content/user_service.go -> internal/service/content/user_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "227:  if err != nil {",
      "228:   return err",
      "229:  }",
      "231:  return nil",
      "232: }",
      "",
      "[Removed Lines]",
      "230:  go us.emailService.SendAndSaveCode(ctx, req.Email, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "230:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, req.Email, title, body, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "450:  if err != nil {",
      "451:   return nil, nil, err",
      "452:  }",
      "455:  roleID, err := us.userRoleService.GetUserRole(ctx, userInfo.ID)",
      "456:  if err != nil {",
      "",
      "[Removed Lines]",
      "453:  go us.emailService.SendAndSaveCode(ctx, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "453:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "500:  if err != nil {",
      "501:   return err",
      "502:  }",
      "504:  return nil",
      "505: }",
      "",
      "[Removed Lines]",
      "503:  go us.emailService.SendAndSaveCode(ctx, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "503:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "621:  }",
      "622:  log.Infof(\"send email confirmation %s\", verifyEmailURL)",
      "625:  return nil, nil",
      "626: }",
      "",
      "[Removed Lines]",
      "624:  go us.emailService.SendAndSaveCode(ctx, req.Email, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "624:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, req.Email, title, body, code, data.ToJSONString())",
      "",
      "---------------"
    ],
    "internal/service/export/email_service.go||internal/service/export/email_service.go": [
      "File: internal/service/export/email_service.go -> internal/service/export/email_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: type EmailRepo interface {",
      "55:  VerifyCode(ctx context.Context, code string) (content string, err error)",
      "56: }",
      "",
      "[Removed Lines]",
      "54:  SetCode(ctx context.Context, code, content string, duration time.Duration) error",
      "",
      "[Added Lines]",
      "54:  SetCode(ctx context.Context, userID, code, content string, duration time.Duration) error",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89: }",
      "94:  if err != nil {",
      "95:   log.Error(err)",
      "96:  }",
      "97: }",
      "103:  if err != nil {",
      "104:   log.Error(err)",
      "105:  }",
      "106: }",
      "109: func (es *EmailService) SendAndSaveCodeWithTime(",
      "113:  if err != nil {",
      "114:   log.Error(err)",
      "115:  }",
      "116: }",
      "",
      "[Removed Lines]",
      "92: func (es *EmailService) SaveCode(ctx context.Context, code, codeContent string) {",
      "93:  err := es.emailRepo.SetCode(ctx, code, codeContent, 10*time.Minute)",
      "100: func (es *EmailService) SendAndSaveCode(ctx context.Context, toEmailAddr, subject, body, code, codeContent string) {",
      "101:  es.Send(ctx, toEmailAddr, subject, body)",
      "102:  err := es.emailRepo.SetCode(ctx, code, codeContent, 10*time.Minute)",
      "110:  ctx context.Context, toEmailAddr, subject, body, code, codeContent string, duration time.Duration) {",
      "111:  es.Send(ctx, toEmailAddr, subject, body)",
      "112:  err := es.emailRepo.SetCode(ctx, code, codeContent, duration)",
      "",
      "[Added Lines]",
      "92: func (es *EmailService) SaveCode(ctx context.Context, userID, code, codeContent string) {",
      "93:  err := es.emailRepo.SetCode(ctx, userID, code, codeContent, constant.UserEmailCodeCacheTime)",
      "100: func (es *EmailService) SendAndSaveCode(ctx context.Context, userID, toEmailAddr, subject, body, code, codeContent string) {",
      "101:  err := es.emailRepo.SetCode(ctx, userID, code, codeContent, constant.UserEmailCodeCacheTime)",
      "104:   return",
      "106:  es.Send(ctx, toEmailAddr, subject, body)",
      "111:  ctx context.Context, userID, toEmailAddr, subject, body, code, codeContent string, duration time.Duration) {",
      "112:  err := es.emailRepo.SetCode(ctx, userID, code, codeContent, duration)",
      "115:   return",
      "117:  es.Send(ctx, toEmailAddr, subject, body)",
      "",
      "---------------"
    ],
    "internal/service/notification/invite_answer_notification.go||internal/service/notification/invite_answer_notification.go": [
      "File: internal/service/notification/invite_answer_notification.go -> internal/service/notification/invite_answer_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   NotificationSources: []constant.NotificationSource{",
      "60:    constant.InboxSource,",
      "61:   },",
      "64:  }",
      "",
      "[Removed Lines]",
      "62:   Email:  email,",
      "63:   UserID: userID,",
      "",
      "[Added Lines]",
      "62:   Email:                    email,",
      "63:   UserID:                   userID,",
      "64:   SkipValidationLatestCode: true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:  }",
      "76:  ns.emailService.SendAndSaveCodeWithTime(",
      "78: }",
      "",
      "[Removed Lines]",
      "77:   ctx, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "78:   ctx, userID, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/notification/new_answer_notification.go||internal/service/notification/new_answer_notification.go": [
      "File: internal/service/notification/new_answer_notification.go -> internal/service/notification/new_answer_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   NotificationSources: []constant.NotificationSource{",
      "60:    constant.InboxSource,",
      "61:   },",
      "64:  }",
      "",
      "[Removed Lines]",
      "62:   Email:  email,",
      "63:   UserID: userID,",
      "",
      "[Added Lines]",
      "62:   Email:                    email,",
      "63:   UserID:                   userID,",
      "64:   SkipValidationLatestCode: true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:  }",
      "76:  ns.emailService.SendAndSaveCodeWithTime(",
      "78: }",
      "",
      "[Removed Lines]",
      "77:   ctx, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "78:   ctx, userID, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/notification/new_comment_notification.go||internal/service/notification/new_comment_notification.go": [
      "File: internal/service/notification/new_comment_notification.go -> internal/service/notification/new_comment_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   NotificationSources: []constant.NotificationSource{",
      "60:    constant.InboxSource,",
      "61:   },",
      "64:  }",
      "66:  if len(lang) > 0 {",
      "",
      "[Removed Lines]",
      "62:   Email:  email,",
      "63:   UserID: userID,",
      "",
      "[Added Lines]",
      "62:   Email:                    email,",
      "63:   UserID:                   userID,",
      "64:   SkipValidationLatestCode: true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73:  }",
      "75:  ns.emailService.SendAndSaveCodeWithTime(",
      "77: }",
      "",
      "[Removed Lines]",
      "76:   ctx, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "77:   ctx, userID, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/notification/new_question_notification.go||internal/service/notification/new_question_notification.go": [
      "File: internal/service/notification/new_question_notification.go -> internal/service/notification/new_question_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:    constant.AllNewQuestionSource,",
      "190:    constant.AllNewQuestionForFollowingTagsSource,",
      "191:   },",
      "192:  }",
      "193:  ns.emailService.SendAndSaveCodeWithTime(",
      "195: }",
      "197: func (ns *ExternalNotificationService) syncNewQuestionNotificationToPlugin(ctx context.Context,",
      "",
      "[Removed Lines]",
      "194:   ctx, userInfo.EMail, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "192:   SkipValidationLatestCode: true,",
      "195:   ctx, userInfo.ID, userInfo.EMail, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go": [
      "File: internal/service/siteinfo/siteinfo_service.go -> internal/service/siteinfo/siteinfo_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "274:   if err != nil {",
      "275:    return err",
      "276:   }",
      "278:  }",
      "279:  return nil",
      "280: }",
      "",
      "[Removed Lines]",
      "277:   go s.emailService.SendAndSaveCode(ctx, req.TestEmailRecipient, title, body, \"\", \"\")",
      "",
      "[Added Lines]",
      "277:   go s.emailService.Send(ctx, req.TestEmailRecipient, title, body)",
      "",
      "---------------"
    ],
    "internal/service/user_admin/user_backyard.go||internal/service/user_admin/user_backyard.go": [
      "File: internal/service/user_admin/user_backyard.go -> internal/service/user_admin/user_backyard.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "514: func (us *UserAdminService) GetUserActivation(ctx context.Context, req *schema.GetUserActivationReq) (",
      "515:  resp *schema.GetUserActivationResp, err error) {",
      "517:  if err != nil {",
      "518:   return nil, err",
      "519:  }",
      "",
      "[Removed Lines]",
      "516:  user, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "[Added Lines]",
      "516:  userInfo, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "527:  }",
      "529:  data := &schema.EmailCodeContent{",
      "532:  }",
      "533:  code := uuid.NewString()",
      "535:  resp = &schema.GetUserActivationResp{",
      "536:   ActivationURL: fmt.Sprintf(\"%s/users/account-activation?code=%s\", general.SiteUrl, code),",
      "537:  }",
      "",
      "[Removed Lines]",
      "530:   Email:  user.EMail,",
      "531:   UserID: user.ID,",
      "534:  us.emailService.SaveCode(ctx, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "530:   Email:  userInfo.EMail,",
      "531:   UserID: userInfo.ID,",
      "534:  us.emailService.SaveCode(ctx, userInfo.ID, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "542: func (us *UserAdminService) SendUserActivation(ctx context.Context, req *schema.SendUserActivationReq) (err error) {",
      "544:  if err != nil {",
      "545:   return err",
      "546:  }",
      "",
      "[Removed Lines]",
      "543:  user, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "[Added Lines]",
      "543:  userInfo, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "554:  }",
      "556:  data := &schema.EmailCodeContent{",
      "559:  }",
      "560:  code := uuid.NewString()",
      "563:  verifyEmailURL := fmt.Sprintf(\"%s/users/account-activation?code=%s\", general.SiteUrl, code)",
      "564:  title, body, err := us.emailService.RegisterTemplate(ctx, verifyEmailURL)",
      "565:  if err != nil {",
      "566:   return err",
      "567:  }",
      "569:  return nil",
      "570: }",
      "",
      "[Removed Lines]",
      "557:   Email:  user.EMail,",
      "558:   UserID: user.ID,",
      "561:  us.emailService.SaveCode(ctx, code, data.ToJSONString())",
      "568:  go us.emailService.SendAndSaveCode(ctx, user.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "557:   Email:  userInfo.EMail,",
      "558:   UserID: userInfo.ID,",
      "567:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------"
    ],
    "internal/service/user_external_login/user_external_login_service.go||internal/service/user_external_login/user_external_login_service.go": [
      "File: internal/service/user_external_login/user_external_login_service.go -> internal/service/user_external_login/user_external_login_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:  if err != nil {",
      "329:   return nil, err",
      "330:  }",
      "332:  return resp, nil",
      "333: }",
      "",
      "[Removed Lines]",
      "331:  go us.emailService.SendAndSaveCode(ctx, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "331:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eba1d4d8d61d99d92dad5f3de357b79dd9aa793d",
      "candidate_info": {
        "commit_hash": "eba1d4d8d61d99d92dad5f3de357b79dd9aa793d",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/eba1d4d8d61d99d92dad5f3de357b79dd9aa793d",
        "files": [
          "ui/src/components/Pagination/index.tsx",
          "ui/src/pages/Layout/index.tsx",
          "ui/src/pages/Questions/Detail/index.tsx",
          "ui/src/pages/Questions/EditAnswer/index.tsx",
          "ui/src/pages/Tags/Detail/index.tsx"
        ],
        "message": "fix: use ScrollRestoration component control page position",
        "before_after_code_files": [
          "ui/src/components/Pagination/index.tsx||ui/src/components/Pagination/index.tsx",
          "ui/src/pages/Layout/index.tsx||ui/src/pages/Layout/index.tsx",
          "ui/src/pages/Questions/Detail/index.tsx||ui/src/pages/Questions/Detail/index.tsx",
          "ui/src/pages/Questions/EditAnswer/index.tsx||ui/src/pages/Questions/EditAnswer/index.tsx",
          "ui/src/pages/Tags/Detail/index.tsx||ui/src/pages/Tags/Detail/index.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/src/components/Pagination/index.tsx||ui/src/components/Pagination/index.tsx": [
          "File: ui/src/components/Pagination/index.tsx -> ui/src/components/Pagination/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import { useTranslation } from 'react-i18next';",
          "23: import { useSearchParams, useNavigate, useLocation } from 'react-router-dom';",
          "27: interface Props {",
          "28:   currentPage: number;",
          "",
          "[Removed Lines]",
          "25: import { scrollToDocTop, floppyNavigation } from '@/utils';",
          "",
          "[Added Lines]",
          "25: import { floppyNavigation } from '@/utils';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:           e.preventDefault();",
          "72:           e.stopPropagation();",
          "73:           navigate(path);",
          "75:         }",
          "76:       }}>",
          "77:       {page}",
          "",
          "[Removed Lines]",
          "74:           scrollToDocTop();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:             if (floppyNavigation.shouldProcessLinkClick(e)) {",
          "116:               e.preventDefault();",
          "117:               navigate(handleParams(currentPage - 1));",
          "119:             }",
          "120:           }}>",
          "121:           {t('prev')}",
          "",
          "[Removed Lines]",
          "118:               scrollToDocTop();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:             if (floppyNavigation.shouldProcessLinkClick(e)) {",
          "213:               e.preventDefault();",
          "214:               navigate(handleParams(currentPage + 1));",
          "216:             }",
          "217:           }}>",
          "218:           {t('next')}",
          "",
          "[Removed Lines]",
          "215:               scrollToDocTop();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/pages/Layout/index.tsx||ui/src/pages/Layout/index.tsx": [
          "File: ui/src/pages/Layout/index.tsx -> ui/src/pages/Layout/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import { FC, memo, useEffect } from 'react';",
          "22: import { HelmetProvider } from 'react-helmet-async';",
          "24: import { SWRConfig } from 'swr';",
          "",
          "[Removed Lines]",
          "21: import { Outlet, useLocation } from 'react-router-dom';",
          "",
          "[Added Lines]",
          "21: import { Outlet, useLocation, ScrollRestoration } from 'react-router-dom';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:         <Footer />",
          "87:         <Customize />",
          "88:         <LoginToContinueModal visible={showLoginToContinueModal} />",
          "89:       </SWRConfig>",
          "90:     </HelmetProvider>",
          "91:   );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:         <ScrollRestoration />",
          "",
          "---------------"
        ],
        "ui/src/pages/Questions/Detail/index.tsx||ui/src/pages/Questions/Detail/index.tsx": [
          "File: ui/src/pages/Questions/Detail/index.tsx -> ui/src/pages/Questions/Detail/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:     if (!qid) {",
          "215:       return;",
          "216:     }",
          "218:     getDetail();",
          "219:     requestAnswers();",
          "220:   }, [qid]);",
          "",
          "[Removed Lines]",
          "217:     scrollToDocTop();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/pages/Questions/EditAnswer/index.tsx||ui/src/pages/Questions/EditAnswer/index.tsx": [
          "File: ui/src/pages/Questions/EditAnswer/index.tsx -> ui/src/pages/Questions/EditAnswer/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import { Row, Col, Form, Button, Card } from 'react-bootstrap';",
          "22: import { useParams, useNavigate, Link } from 'react-router-dom';",
          "23: import { useTranslation } from 'react-i18next';",
          "",
          "[Removed Lines]",
          "20: import React, { useState, useRef, useEffect, useLayoutEffect } from 'react';",
          "",
          "[Added Lines]",
          "20: import React, { useState, useRef, useEffect } from 'react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import dayjs from 'dayjs';",
          "26: import classNames from 'classnames';",
          "29: import { usePageTags, usePromptWithUnload } from '@/hooks';",
          "30: import { useCaptchaPlugin, useRenderHtmlPlugin } from '@/utils/pluginKit';",
          "31: import { pathFactory } from '@/router/pathFactory';",
          "",
          "[Removed Lines]",
          "28: import { handleFormError, scrollToDocTop } from '@/utils';",
          "",
          "[Added Lines]",
          "28: import { handleFormError } from '@/utils';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47: const Index = () => {",
          "48:   const { aid = '', qid = '' } = useParams();",
          "49:   const [focusType, setForceType] = useState('');",
          "54:   const { t } = useTranslation('translation', { keyPrefix: 'edit_answer' });",
          "55:   const navigate = useNavigate();",
          "",
          "[Removed Lines]",
          "50:   useLayoutEffect(() => {",
          "51:     scrollToDocTop();",
          "52:   }, []);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/pages/Tags/Detail/index.tsx||ui/src/pages/Tags/Detail/index.tsx": [
          "File: ui/src/pages/Tags/Detail/index.tsx -> ui/src/pages/Tags/Detail/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: } from '@/services';",
          "39: import QuestionList, { QUESTION_ORDER_KEYS } from '@/components/QuestionList';",
          "40: import HotQuestions from '@/components/HotQuestions';",
          "42: import { pathFactory } from '@/router/pathFactory';",
          "44: const Index: FC = () => {",
          "",
          "[Removed Lines]",
          "41: import { escapeRemove, guard, scrollToDocTop } from '@/utils';",
          "",
          "[Added Lines]",
          "41: import { escapeRemove, guard } from '@/utils';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     });",
          "76:   };",
          "84:   useEffect(() => {",
          "85:     if (tagResp) {",
          "86:       const info = { ...tagResp };",
          "",
          "[Removed Lines]",
          "78:   useEffect(() => {",
          "79:     if (!listLoading) {",
          "80:       scrollToDocTop();",
          "81:     }",
          "82:   }, [listLoading]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c553f52f849082c8799930d37718772a595e7f8",
      "candidate_info": {
        "commit_hash": "6c553f52f849082c8799930d37718772a595e7f8",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/6c553f52f849082c8799930d37718772a595e7f8",
        "files": [
          "internal/migrations/v18.go",
          "internal/schema/siteinfo_schema.go",
          "internal/service/siteinfo/siteinfo_service.go",
          "internal/service/tag_common/tag_common.go"
        ],
        "message": "feat(admin): update recommend_tags and reserved_tags filed in site write req",
        "before_after_code_files": [
          "internal/migrations/v18.go||internal/migrations/v18.go",
          "internal/schema/siteinfo_schema.go||internal/schema/siteinfo_schema.go",
          "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go",
          "internal/service/tag_common/tag_common.go||internal/service/tag_common/tag_common.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [
            "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go"
          ],
          "candidate": [
            "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/migrations/v18.go||internal/migrations/v18.go": [
          "File: internal/migrations/v18.go -> internal/migrations/v18.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   return fmt.Errorf(\"get config failed: %w\", err)",
          "58:  }",
          "59:  if exist {",
          "61:   _ = json.Unmarshal([]byte(writeSiteInfo.Content), content)",
          "62:   content.RestrictAnswer = true",
          "63:   data, _ := json.Marshal(content)",
          "",
          "[Removed Lines]",
          "60:   content := &schema.SiteWriteReq{}",
          "",
          "[Added Lines]",
          "60:   type OldSiteWriteReq struct {",
          "61:    RestrictAnswer bool     `validate:\"omitempty\" form:\"restrict_answer\" json:\"restrict_answer\"`",
          "62:    RequiredTag    bool     `validate:\"omitempty\" form:\"required_tag\" json:\"required_tag\"`",
          "63:    RecommendTags  []string `validate:\"omitempty\" form:\"recommend_tags\" json:\"recommend_tags\"`",
          "64:    ReservedTags   []string `validate:\"omitempty\" form:\"reserved_tags\" json:\"reserved_tags\"`",
          "65:    UserID         string   `json:\"-\"`",
          "66:   }",
          "67:   content := &OldSiteWriteReq{}",
          "",
          "---------------"
        ],
        "internal/schema/siteinfo_schema.go||internal/schema/siteinfo_schema.go": [
          "File: internal/schema/siteinfo_schema.go -> internal/schema/siteinfo_schema.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: type SiteWriteReq struct {",
          "80: }",
          "",
          "[Removed Lines]",
          "75:  RestrictAnswer bool     `validate:\"omitempty\" form:\"restrict_answer\" json:\"restrict_answer\"`",
          "76:  RequiredTag    bool     `validate:\"omitempty\" form:\"required_tag\" json:\"required_tag\"`",
          "77:  RecommendTags  []string `validate:\"omitempty\" form:\"recommend_tags\" json:\"recommend_tags\"`",
          "78:  ReservedTags   []string `validate:\"omitempty\" form:\"reserved_tags\" json:\"reserved_tags\"`",
          "79:  UserID         string   `json:\"-\"`",
          "",
          "[Added Lines]",
          "75:  RestrictAnswer bool            `validate:\"omitempty\" json:\"restrict_answer\"`",
          "76:  RequiredTag    bool            `validate:\"omitempty\" json:\"required_tag\"`",
          "77:  RecommendTags  []*SiteWriteTag `validate:\"omitempty,dive\" json:\"recommend_tags\"`",
          "78:  ReservedTags   []*SiteWriteTag `validate:\"omitempty,dive\" json:\"reserved_tags\"`",
          "79:  UserID         string          `json:\"-\"`",
          "80: }",
          "83: type SiteWriteTag struct {",
          "84:  SlugName    string `validate:\"required\" json:\"slug_name\"`",
          "85:  DisplayName string `json:\"display_name\"`",
          "",
          "---------------"
        ],
        "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go": [
          "File: internal/service/siteinfo/siteinfo_service.go -> internal/service/siteinfo/siteinfo_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: func (s *SiteInfoService) SaveSiteWrite(ctx context.Context, req *schema.SiteWriteReq) (resp interface{}, err error) {",
          "184:  if err != nil {",
          "185:   return errData, err",
          "186:  }",
          "",
          "[Removed Lines]",
          "183:  errData, err := s.tagCommonService.SetSiteWriteTag(ctx, req.RecommendTags, req.ReservedTags, req.UserID)",
          "",
          "[Added Lines]",
          "183:  recommendTags, reservedTags := make([]string, 0), make([]string, 0)",
          "184:  for _, tag := range req.RecommendTags {",
          "185:   recommendTags = append(recommendTags, tag.SlugName)",
          "186:  }",
          "187:  for _, tag := range req.ReservedTags {",
          "188:   reservedTags = append(reservedTags, tag.SlugName)",
          "189:  }",
          "190:  errData, err := s.tagCommonService.SetSiteWriteTag(ctx, recommendTags, reservedTags, req.UserID)",
          "",
          "---------------"
        ],
        "internal/service/tag_common/tag_common.go||internal/service/tag_common/tag_common.go": [
          "File: internal/service/tag_common/tag_common.go -> internal/service/tag_common/tag_common.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:  return resp, nil",
          "159: }",
          "163:  list, err := ts.tagCommonRepo.GetRecommendTagList(ctx)",
          "164:  if err != nil {",
          "165:   return tags, err",
          "166:  }",
          "167:  for _, item := range list {",
          "169:  }",
          "170:  return tags, nil",
          "171: }",
          "",
          "[Removed Lines]",
          "161: func (ts *TagCommonService) GetSiteWriteRecommendTag(ctx context.Context) (tags []string, err error) {",
          "162:  tags = make([]string, 0)",
          "168:   tags = append(tags, item.SlugName)",
          "",
          "[Added Lines]",
          "161: func (ts *TagCommonService) GetSiteWriteRecommendTag(ctx context.Context) (tags []*schema.SiteWriteTag, err error) {",
          "162:  tags = make([]*schema.SiteWriteTag, 0)",
          "168:   tags = append(tags, &schema.SiteWriteTag{",
          "169:    SlugName:    item.SlugName,",
          "170:    DisplayName: item.DisplayName,",
          "171:   })",
          "172:  }",
          "173:  return tags, nil",
          "174: }",
          "176: func (ts *TagCommonService) GetSiteWriteReservedTag(ctx context.Context) (tags []*schema.SiteWriteTag, err error) {",
          "177:  tags = make([]*schema.SiteWriteTag, 0)",
          "178:  list, err := ts.tagCommonRepo.GetReservedTagList(ctx)",
          "179:  if err != nil {",
          "180:   return tags, err",
          "181:  }",
          "182:  for _, item := range list {",
          "183:   tags = append(tags, &schema.SiteWriteTag{",
          "184:    SlugName:    item.SlugName,",
          "185:    DisplayName: item.DisplayName,",
          "186:   })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:  return nil, nil",
          "204: }",
          "219: func (ts *TagCommonService) SetTagsAttribute(ctx context.Context, tags []string, attribute string) (err error) {",
          "221:  switch attribute {",
          "222:  case \"recommend\":",
          "224:  case \"reserved\":",
          "226:  default:",
          "227:   return",
          "228:  }",
          "229:  if err != nil {",
          "230:   return err",
          "231:  }",
          "233:  if err != nil {",
          "234:   return err",
          "235:  }",
          "",
          "[Removed Lines]",
          "206: func (ts *TagCommonService) GetSiteWriteReservedTag(ctx context.Context) (tags []string, err error) {",
          "207:  tags = make([]string, 0)",
          "208:  list, err := ts.tagCommonRepo.GetReservedTagList(ctx)",
          "209:  if err != nil {",
          "210:   return tags, err",
          "211:  }",
          "212:  for _, item := range list {",
          "213:   tags = append(tags, item.SlugName)",
          "214:  }",
          "215:  return tags, nil",
          "216: }",
          "220:  var tagslist []string",
          "223:   tagslist, err = ts.GetSiteWriteRecommendTag(ctx)",
          "225:   tagslist, err = ts.GetSiteWriteReservedTag(ctx)",
          "232:  err = ts.tagCommonRepo.UpdateTagsAttribute(ctx, tagslist, attribute, false)",
          "",
          "[Added Lines]",
          "226:  var oldTags []*entity.Tag",
          "229:   oldTags, err = ts.tagCommonRepo.GetRecommendTagList(ctx)",
          "231:   oldTags, err = ts.tagCommonRepo.GetReservedTagList(ctx)",
          "238:  oldTagSlugNameList := make([]string, 0)",
          "239:  for _, tag := range oldTags {",
          "240:   oldTagSlugNameList = append(oldTagSlugNameList, tag.SlugName)",
          "241:  }",
          "243:  err = ts.tagCommonRepo.UpdateTagsAttribute(ctx, oldTagSlugNameList, attribute, false)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ba1ad9fa2fa9c40ae2f1c814dc9177c6c559edc",
      "candidate_info": {
        "commit_hash": "1ba1ad9fa2fa9c40ae2f1c814dc9177c6c559edc",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/1ba1ad9fa2fa9c40ae2f1c814dc9177c6c559edc",
        "files": [
          "internal/service/tag_common/tag_common.go"
        ],
        "message": "fix(tag): remove check when recommend tags is empty",
        "before_after_code_files": [
          "internal/service/tag_common/tag_common.go||internal/service/tag_common/tag_common.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "internal/service/tag_common/tag_common.go||internal/service/tag_common/tag_common.go": [
          "File: internal/service/tag_common/tag_common.go -> internal/service/tag_common/tag_common.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:  if err != nil {",
          "269:   return false, err",
          "270:  }",
          "272:   return true, nil",
          "273:  }",
          "274:  tagNames := make([]string, 0)",
          "",
          "[Removed Lines]",
          "271:  if !taginfo.RequiredTag {",
          "",
          "[Added Lines]",
          "271:  if !taginfo.RequiredTag || len(taginfo.RecommendTags) == 0 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f30a1530cd2c354c16eeb6043e779502980515b",
      "candidate_info": {
        "commit_hash": "8f30a1530cd2c354c16eeb6043e779502980515b",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/8f30a1530cd2c354c16eeb6043e779502980515b",
        "files": [
          "cmd/wire_gen.go",
          "internal/service/review/review_service.go"
        ],
        "message": "fix(question): update answer count after reviewing",
        "before_after_code_files": [
          "cmd/wire_gen.go||cmd/wire_gen.go",
          "internal/service/review/review_service.go||internal/service/review/review_service.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cmd/wire_gen.go||cmd/wire_gen.go": [
          "File: cmd/wire_gen.go -> cmd/wire_gen.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:  answerActivityService := activity2.NewAnswerActivityService(answerActivityRepo, configService)",
          "194:  externalNotificationService := notification.NewExternalNotificationService(dataData, userNotificationConfigRepo, followRepo, emailService, userRepo, externalNotificationQueueService, userExternalLoginRepo, siteInfoCommonService)",
          "195:  reviewRepo := review.NewReviewRepo(dataData)",
          "197:  questionService := content.NewQuestionService(questionRepo, tagCommonService, questionCommon, userCommon, userRepo, userRoleRelService, revisionService, metaCommonService, collectionCommon, answerActivityService, emailService, notificationQueueService, externalNotificationQueueService, activityQueueService, siteInfoCommonService, externalNotificationService, reviewService, configService)",
          "198:  answerService := content.NewAnswerService(answerRepo, questionRepo, questionCommon, userCommon, collectionCommon, userRepo, revisionService, answerActivityService, answerCommon, voteRepo, emailService, userRoleRelService, notificationQueueService, externalNotificationQueueService, activityQueueService, reviewService)",
          "199:  reportHandle := report_handle.NewReportHandle(questionService, answerService, commentService)",
          "",
          "[Removed Lines]",
          "196:  reviewService := review2.NewReviewService(reviewRepo, objService, userCommon, userRepo, questionRepo, answerRepo, userRoleRelService, externalNotificationQueueService, tagCommonService, notificationQueueService, siteInfoCommonService)",
          "",
          "[Added Lines]",
          "196:  reviewService := review2.NewReviewService(reviewRepo, objService, userCommon, userRepo, questionRepo, answerRepo, userRoleRelService, externalNotificationQueueService, tagCommonService, questionCommon, notificationQueueService, siteInfoCommonService)",
          "",
          "---------------"
        ],
        "internal/service/review/review_service.go||internal/service/review/review_service.go": [
          "File: internal/service/review/review_service.go -> internal/service/review/review_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  answerRepo                       answercommon.AnswerRepo",
          "64:  userRoleService                  *role.UserRoleRelService",
          "65:  tagCommon                        *tagcommon.TagCommonService",
          "66:  externalNotificationQueueService notice_queue.ExternalNotificationQueueService",
          "67:  notificationQueueService         notice_queue.NotificationQueueService",
          "68:  siteInfoService                  siteinfo_common.SiteInfoCommonService",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:  questionCommon                   *questioncommon.QuestionCommon",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:  userRoleService *role.UserRoleRelService,",
          "80:  externalNotificationQueueService notice_queue.ExternalNotificationQueueService,",
          "81:  tagCommon *tagcommon.TagCommonService,",
          "82:  notificationQueueService notice_queue.NotificationQueueService,",
          "83:  siteInfoService siteinfo_common.SiteInfoCommonService,",
          "84: ) *ReviewService {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:  questionCommon *questioncommon.QuestionCommon,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   userRoleService:                  userRoleService,",
          "93:   externalNotificationQueueService: externalNotificationQueueService,",
          "94:   tagCommon:                        tagCommon,",
          "95:   notificationQueueService:         notificationQueueService,",
          "96:   siteInfoService:                  siteInfoService,",
          "97:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:   questionCommon:                   questionCommon,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "295:    cs.notificationAnswerTheQuestion(ctx, questionInfo.UserID, questionInfo.ID, answerInfo.ID,",
          "296:     answerInfo.UserID, questionInfo.Title, answerInfo.OriginalText)",
          "297:   }",
          "298:   userAnswerCount, err := cs.answerRepo.GetCountByUserID(ctx, answerInfo.UserID)",
          "299:   if err != nil {",
          "300:    log.Errorf(\"get user answer count failed, err: %v\", err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301:   if err := cs.questionCommon.UpdateAnswerCount(ctx, answerInfo.QuestionID); err != nil {",
          "302:    log.Errorf(\"update question answer count failed, err: %v\", err)",
          "303:   }",
          "304:   if err := cs.questionCommon.UpdateLastAnswer(ctx, answerInfo.QuestionID, uid.DeShortID(answerInfo.ID)); err != nil {",
          "305:    log.Errorf(\"update question last answer failed, err: %v\", err)",
          "306:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2120ff582e30adca01e314885d6703a0ff907f0",
      "candidate_info": {
        "commit_hash": "f2120ff582e30adca01e314885d6703a0ff907f0",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/f2120ff582e30adca01e314885d6703a0ff907f0",
        "files": [
          "answer.db",
          "cmd/wire_gen.go",
          "internal/service/mock/siteinfo_repo_mock.go",
          "ui/public/index.html",
          "ui/src/components/Customize/index.tsx"
        ],
        "message": "fix: test custome content",
        "before_after_code_files": [
          "cmd/wire_gen.go||cmd/wire_gen.go",
          "internal/service/mock/siteinfo_repo_mock.go||internal/service/mock/siteinfo_repo_mock.go",
          "ui/public/index.html||ui/public/index.html",
          "ui/src/components/Customize/index.tsx||ui/src/components/Customize/index.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cmd/wire_gen.go||cmd/wire_gen.go": [
          "File: cmd/wire_gen.go -> cmd/wire_gen.go"
        ],
        "internal/service/mock/siteinfo_repo_mock.go||internal/service/mock/siteinfo_repo_mock.go": [
          "File: internal/service/mock/siteinfo_repo_mock.go -> internal/service/mock/siteinfo_repo_mock.go"
        ],
        "ui/public/index.html||ui/public/index.html": [
          "File: ui/public/index.html -> ui/public/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   <body>",
          "31:     <noscript>You need to enable JavaScript to run this app.</noscript>",
          "32:     <div id=\"root\">",
          "34:       <div id=\"spin-mask\">",
          "35:         <noscript>",
          "36:           <style>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:       <!--customize_header-->",
          "34:       \u8fd9\u90e8\u5206\u662fheader233",
          "35:       <h1>123</h1>",
          "36:       <!--customize_header-->",
          "",
          "---------------"
        ],
        "ui/src/components/Customize/index.tsx||ui/src/components/Customize/index.tsx": [
          "File: ui/src/components/Customize/index.tsx -> ui/src/components/Customize/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: const renderCustomArea = (el, part, pos: pos, content: string = '') => {",
          "69:   let startMarkNode;",
          "70:   let endMarkNode;",
          "71:   const { childNodes } = el;",
          "72:   for (let i = 0; i < childNodes.length; i += 1) {",
          "73:     const node = childNodes[i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   let accumulatedContent = ''; //",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:       }",
          "81:     }",
          "82:   }",
          "83:   if (startMarkNode && endMarkNode) {",
          "84:     while (",
          "85:       startMarkNode.nextSibling &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   if (startMarkNode && endMarkNode) {",
          "87:     let contentNode = startMarkNode.nextSibling;",
          "88:     while (contentNode && contentNode !== endMarkNode) {",
          "89:       if (contentNode.nodeType === 1) {",
          "91:         accumulatedContent += contentNode.outerHTML;",
          "92:       } else if (contentNode.nodeType === 3) {",
          "94:         accumulatedContent += contentNode.textContent;",
          "95:       }",
          "96:       contentNode = contentNode.nextSibling;",
          "97:     }",
          "98:   }",
          "100:   console.log('====', accumulatedContent);",
          "103:   if (accumulatedContent.includes(content)) {",
          "104:     console.log('Content already exists. No insertion needed.');",
          "105:     return;",
          "106:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107: const handleCustomHeader = (content) => {",
          "108:   const el = document.body;",
          "109:   renderCustomArea(el, CUSTOM_MARK_HEADER, 'afterbegin', content);",
          "110: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:   console.log('====11', content);",
          "",
          "---------------"
        ]
      }
    }
  ]
}