{
  "cve_id": "CVE-2024-47066",
  "cve_desc": "Lobe Chat is an open-source artificial intelligence chat framework. Prior to version 1.19.13, server-side request forgery protection implemented in `src/app/api/proxy/route.ts` does not consider redirect and could be bypassed when attacker provides an external malicious URL which redirects to internal resources like a private network or loopback address. Version 1.19.13 contains an improved fix for the issue.",
  "repo": "lobehub/lobe-chat",
  "patch_hash": "e960a23b0c69a5762eb27d776d33dac443058faf",
  "patch_info": {
    "commit_hash": "e960a23b0c69a5762eb27d776d33dac443058faf",
    "repo": "lobehub/lobe-chat",
    "commit_url": "https://github.com/lobehub/lobe-chat/commit/e960a23b0c69a5762eb27d776d33dac443058faf",
    "files": [
      "package.json",
      "src/app/api/proxy/route.ts",
      "src/app/webapi/proxy/route.ts",
      "src/server/routers/lambda/user.ts",
      "src/services/_url.ts",
      "src/services/user/client.ts"
    ],
    "message": "\ud83d\udc1b fix: try to implement better ssrf-protect (#4044)\n\n* \ud83d\udc1b fix: try to implement better ssrf-protect\n\n* \ud83d\udc1b fix: fix error\n\n* \ud83d\udc84 style: improve pwa",
    "before_after_code_files": [
      "src/app/api/proxy/route.ts||src/app/api/proxy/route.ts",
      "src/app/webapi/proxy/route.ts||src/app/webapi/proxy/route.ts",
      "src/server/routers/lambda/user.ts||src/server/routers/lambda/user.ts",
      "src/services/_url.ts||src/services/_url.ts",
      "src/services/user/client.ts||src/services/user/client.ts"
    ]
  },
  "patch_diff": {
    "src/app/api/proxy/route.ts||src/app/api/proxy/route.ts": [
      "File: src/app/api/proxy/route.ts -> src/app/api/proxy/route.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/app/webapi/proxy/route.ts||src/app/webapi/proxy/route.ts": [
      "File: src/app/webapi/proxy/route.ts -> src/app/webapi/proxy/route.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { NextResponse } from 'next/server';",
      "2: import fetch from 'node-fetch';",
      "3: import { useAgent as ssrfAgent } from 'request-filtering-agent';",
      "8: export const POST = async (req: Request) => {",
      "9:   const url = await req.text();",
      "11:   try {",
      "12:     const res = await fetch(url, { agent: ssrfAgent(url) });",
      "14:     return new Response(await res.arrayBuffer(), { headers: { ...res.headers } });",
      "15:   } catch (err) {",
      "16:     console.error(err); // DNS lookup 127.0.0.1(family:4, host:127.0.0.1.nip.io) is not allowed. Because, It is private IP address.",
      "17:     return NextResponse.json({ error: 'Not support internal host proxy' }, { status: 400 });",
      "18:   }",
      "19: };",
      "",
      "---------------"
    ],
    "src/server/routers/lambda/user.ts||src/server/routers/lambda/user.ts": [
      "File: src/server/routers/lambda/user.ts -> src/server/routers/lambda/user.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "63:     const sessionCount = await sessionModel.count();",
      "65:     return {",
      "67:       canEnableTrace: messageCount >= 4,",
      "69:       hasConversation: messageCount > 0 || sessionCount > 1,",
      "",
      "[Removed Lines]",
      "66:       canEnablePWAGuide: messageCount >= 2,",
      "",
      "[Added Lines]",
      "66:       canEnablePWAGuide: messageCount >= 4,",
      "",
      "---------------"
    ],
    "src/services/_url.ts||src/services/_url.ts": [
      "File: src/services/_url.ts -> src/services/_url.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: };",
      "19: export const API_ENDPOINTS = mapWithBasePath({",
      "21:   oauth: '/api/auth',",
      "",
      "[Removed Lines]",
      "20:   proxy: '/api/proxy',",
      "",
      "[Added Lines]",
      "20:   proxy: '/webapi/proxy',",
      "",
      "---------------"
    ],
    "src/services/user/client.ts||src/services/user/client.ts": [
      "File: src/services/user/client.ts -> src/services/user/client.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:     return {",
      "25:       avatar: user.avatar,",
      "27:       canEnableTrace: messageCount >= 4,",
      "28:       hasConversation: messageCount > 0 || sessionCount > 0,",
      "29:       isOnboard: true,",
      "",
      "[Removed Lines]",
      "26:       canEnablePWAGuide: messageCount >= 2,",
      "",
      "[Added Lines]",
      "26:       canEnablePWAGuide: messageCount >= 4,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f032112e3dd446ef4d72cfb62fd2a3fe29553bb5",
      "candidate_info": {
        "commit_hash": "f032112e3dd446ef4d72cfb62fd2a3fe29553bb5",
        "repo": "lobehub/lobe-chat",
        "commit_url": "https://github.com/lobehub/lobe-chat/commit/f032112e3dd446ef4d72cfb62fd2a3fe29553bb5",
        "files": [
          "docs/Environment-Variable.md",
          "docs/Environment-Variable.zh-CN.md",
          "next.config.mjs",
          "src/app/api/auth.ts",
          "src/app/api/openai/chat/route.ts",
          "src/app/api/openai/createAzureOpenai.ts",
          "src/app/api/openai/createChatCompletion.ts",
          "src/app/api/openai/createOpenai.ts",
          "src/app/api/openai/errorResponse.ts",
          "src/app/api/openai/models/route.ts",
          "src/app/api/plugins/route.ts",
          "src/pages/api/plugins.api.ts",
          "src/services/_url.ts"
        ],
        "message": ":recycle: refactor: refactor the api router to app route handlers (#254)\n\n* :recycle: refactor: refactor the api router to app route handlers\n\n* :green_heart: refactor: refactor the runtime config\n\n* :memo: docs: update document",
        "before_after_code_files": [
          "next.config.mjs||next.config.mjs",
          "src/pages/api/openai/chat.api.ts||src/app/api/openai/chat/route.ts",
          "src/pages/api/createChatCompletion.ts||src/app/api/openai/createChatCompletion.ts",
          "src/pages/api/openai/models.api.ts||src/app/api/openai/models/route.ts",
          "src/app/api/plugins/route.ts||src/app/api/plugins/route.ts",
          "src/pages/api/plugins.api.ts||src/pages/api/plugins.api.ts",
          "src/services/_url.ts||src/services/_url.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/services/_url.ts||src/services/_url.ts"
          ],
          "candidate": [
            "src/services/_url.ts||src/services/_url.ts"
          ]
        }
      },
      "candidate_diff": {
        "next.config.mjs||next.config.mjs": [
          "File: next.config.mjs -> next.config.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import nextPWA from 'next-pwa';",
          "3: const isProd = process.env.NODE_ENV === 'production';",
          "6: const withPWA = nextPWA({",
          "7:   dest: 'public',",
          "",
          "[Removed Lines]",
          "4: const DEV_API_END_PORT_URL = process.env.DEV_API_END_PORT_URL || '';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: const nextConfig = {",
          "14:   reactStrictMode: true,",
          "18:   transpilePackages: ['@lobehub/ui', 'antd-style'],",
          "",
          "[Removed Lines]",
          "15:   pageExtensions: ['tsx', 'api.ts'],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "25:     return config;",
          "26:   },",
          "44:   env: {",
          "45:     AGENTS_INDEX_URL: process.env.AGENTS_INDEX_URL,",
          "46:     PLUGINS_INDEX_URL: process.env.PLUGINS_INDEX_URL,",
          "",
          "[Removed Lines]",
          "28:   async rewrites() {",
          "29:     return [",
          "30:       {",
          "31:         source: '/api/openai/chat-dev',",
          "32:         destination: `${DEV_API_END_PORT_URL}/api/openai/chat`,",
          "33:       },",
          "34:       {",
          "35:         source: '/api/openai/models-dev',",
          "36:         destination: `${DEV_API_END_PORT_URL}/api/openai/models`,",
          "37:       },",
          "38:       {",
          "39:         source: '/api/plugins-dev',",
          "40:         destination: `${DEV_API_END_PORT_URL}/api/plugins`,",
          "41:       },",
          "42:     ];",
          "43:   },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pages/api/openai/chat.api.ts||src/app/api/openai/chat/route.ts": [
          "File: src/pages/api/openai/chat.api.ts -> src/app/api/openai/chat/route.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import { ErrorType } from '@/types/fetch';",
          "6: import { OpenAIStreamPayload } from '@/types/openai';",
          "9: import { createChatCompletion } from '../createChatCompletion';",
          "14: export const runtime = 'edge';",
          "17:   const payload = (await req.json()) as OpenAIStreamPayload;",
          "19:   const { apiKey, accessCode, endpoint, useAzure, apiVersion } = getOpenAIAuthFromRequest(req);",
          "",
          "[Removed Lines]",
          "8: import { checkAuth } from '../auth';",
          "10: import { createErrorResponse } from '../error';",
          "11: import { createAzureOpenai } from './createAzureOpenai';",
          "12: import { createOpenai } from './createOpenai';",
          "16: export default async function handler(req: Request) {",
          "",
          "[Added Lines]",
          "8: import { checkAuth } from '../../auth';",
          "9: import { createAzureOpenai } from '../createAzureOpenai';",
          "11: import { createOpenai } from '../createOpenai';",
          "12: import { createErrorResponse } from '../errorResponse';",
          "16: export const POST = async (req: Request) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:   }",
          "38:   return createChatCompletion({ openai, payload });",
          "",
          "[Removed Lines]",
          "39: }",
          "",
          "[Added Lines]",
          "39: };",
          "",
          "---------------"
        ],
        "src/pages/api/createChatCompletion.ts||src/app/api/openai/createChatCompletion.ts": [
          "File: src/pages/api/createChatCompletion.ts -> src/app/api/openai/createChatCompletion.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { OpenAIStream, StreamingTextResponse } from 'ai';",
          "2: import OpenAI from 'openai';",
          "5: import { ChatErrorType } from '@/types/fetch';",
          "6: import { OpenAIStreamPayload } from '@/types/openai';",
          "",
          "[Removed Lines]",
          "4: import { createErrorResponse } from '@/pages/api/error';",
          "",
          "[Added Lines]",
          "4: import { createErrorResponse } from '@/app/api/openai/errorResponse';",
          "",
          "---------------"
        ],
        "src/pages/api/openai/models.api.ts||src/app/api/openai/models/route.ts": [
          "File: src/pages/api/openai/models.api.ts -> src/app/api/openai/models/route.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { getOpenAIAuthFromRequest } from '@/const/fetch';",
          "5: export const runtime = 'edge';",
          "8:   const { apiKey, endpoint } = getOpenAIAuthFromRequest(req);",
          "10:   const openAI = createOpenai(apiKey, endpoint);",
          "",
          "[Removed Lines]",
          "3: import { createOpenai } from './createOpenai';",
          "7: export default async function handler(req: Request) {",
          "",
          "[Added Lines]",
          "3: import { createOpenai } from '../createOpenai';",
          "7: export const POST = async (req: Request) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:   const modelList = res.data.map((i) => i.id);",
          "16:   return new Response(JSON.stringify(modelList));",
          "",
          "[Removed Lines]",
          "17: }",
          "",
          "[Added Lines]",
          "17: };",
          "",
          "---------------"
        ],
        "src/app/api/plugins/route.ts||src/app/api/plugins/route.ts": [
          "File: src/app/api/plugins/route.ts -> src/app/api/plugins/route.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { createLobeChatPluginGateway } from '@lobehub/chat-plugins-gateway';",
          "3: import { PLUGINS_INDEX_URL } from '@/const/url';",
          "5: export const runtime = 'edge';",
          "7: export const POST = createLobeChatPluginGateway({ pluginsIndexUrl: PLUGINS_INDEX_URL });",
          "",
          "---------------"
        ],
        "src/pages/api/plugins.api.ts||src/pages/api/plugins.api.ts": [
          "File: src/pages/api/plugins.api.ts -> src/pages/api/plugins.api.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/services/_url.ts||src/services/_url.ts": [
          "File: src/services/_url.ts -> src/services/_url.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: export const URLS = {",
          "7: };",
          "9: export const OPENAI_URLS = {",
          "17: };",
          "",
          "[Removed Lines]",
          "1: const isDev = process.env.NODE_ENV === 'development';",
          "3: const prefix = isDev ? '-dev' : '';",
          "6:   plugins: '/api/plugins' + prefix,",
          "10:   chat: '/api/openai/chat' + prefix,",
          "11:   models: '/api/openai/models' + prefix,",
          "12: };",
          "14: export const AZURE_OPENAI_URLS = {",
          "15:   chat: '/api/azure-openai/chat' + prefix,",
          "16:   models: '/api/azure-openai/models' + prefix,",
          "",
          "[Added Lines]",
          "2:   plugins: '/api/plugins',",
          "6:   chat: '/api/openai/chat',",
          "7:   models: '/api/openai/models',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "542c359f666585c3a2f08496ad9a10bf065f0682",
      "candidate_info": {
        "commit_hash": "542c359f666585c3a2f08496ad9a10bf065f0682",
        "repo": "lobehub/lobe-chat",
        "commit_url": "https://github.com/lobehub/lobe-chat/commit/542c359f666585c3a2f08496ad9a10bf065f0682",
        "files": [
          "src/app/webapi/assistant/[id]/route.ts",
          "src/app/webapi/assistant/store/route.ts",
          "src/app/webapi/plugin/gateway/route.ts",
          "src/app/webapi/plugin/gateway/settings.test.ts",
          "src/app/webapi/plugin/gateway/settings.ts",
          "src/app/webapi/plugin/store/route.ts",
          "src/app/webapi/text-to-image/[provider]/route.ts",
          "src/app/webapi/trace/route.ts",
          "src/services/__tests__/assistant.test.ts",
          "src/services/__tests__/tool.test.ts",
          "src/services/_url.ts"
        ],
        "message": "\u267b\ufe0f refactor: move most `/api` to `/webapi` (#4233)\n\n* \u267b\ufe0f refactor: /api to /webapi\n\n* \u2705 test: fix tests",
        "before_after_code_files": [
          "src/services/__tests__/assistant.test.ts||src/services/__tests__/assistant.test.ts",
          "src/services/__tests__/tool.test.ts||src/services/__tests__/tool.test.ts",
          "src/services/_url.ts||src/services/_url.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/services/_url.ts||src/services/_url.ts"
          ],
          "candidate": [
            "src/services/_url.ts||src/services/_url.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/services/__tests__/assistant.test.ts||src/services/__tests__/assistant.test.ts": [
          "File: src/services/__tests__/assistant.test.ts -> src/services/__tests__/assistant.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:       expect(globalHelpers.getCurrentLanguage).toHaveBeenCalled();",
          "37:       expect(assistantList).toEqual(fakeResponse.agents);",
          "38:     });",
          "",
          "[Removed Lines]",
          "36:       expect(fetch).toHaveBeenCalledWith('/api/assistant/store?locale=tt');",
          "",
          "[Added Lines]",
          "36:       expect(fetch).toHaveBeenCalledWith('/webapi/assistant/store?locale=tt');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:       expect(globalHelpers.getCurrentLanguage).toHaveBeenCalled();",
          "67:       expect(assistant.identifier).toEqual(fakeResponse.identifier);",
          "68:     });",
          "",
          "[Removed Lines]",
          "66:       expect(fetch).toHaveBeenCalledWith('/api/assistant/test-assisstant?locale=tt');",
          "",
          "[Added Lines]",
          "66:       expect(fetch).toHaveBeenCalledWith('/webapi/assistant/test-assisstant?locale=tt');",
          "",
          "---------------"
        ],
        "src/services/__tests__/tool.test.ts||src/services/__tests__/tool.test.ts": [
          "File: src/services/__tests__/tool.test.ts -> src/services/__tests__/tool.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:       expect(globalHelpers.getCurrentLanguage).toHaveBeenCalled();",
          "39:       expect(pluginList).toEqual(fakeResponse.plugins);",
          "40:     });",
          "",
          "[Removed Lines]",
          "38:       expect(fetch).toHaveBeenCalledWith('/api/plugin/store?locale=tt');",
          "",
          "[Added Lines]",
          "38:       expect(fetch).toHaveBeenCalledWith('/webapi/plugin/store?locale=tt');",
          "",
          "---------------"
        ],
        "src/services/_url.ts||src/services/_url.ts": [
          "File: src/services/_url.ts -> src/services/_url.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: };",
          "19: export const API_ENDPOINTS = mapWithBasePath({",
          "21:   oauth: '/api/auth',",
          "42:   stt: '/webapi/stt/openai',",
          "",
          "[Removed Lines]",
          "20:   proxy: '/webapi/proxy',",
          "24:   assistantStore: '/api/assistant/store',",
          "25:   assistant: (identifier: string) => withBasePath(`/api/assistant/${identifier}`),",
          "28:   gateway: '/api/plugin/gateway',",
          "29:   pluginStore: '/api/plugin/store',",
          "32:   chat: (provider: string) => withBasePath(`/api/chat/${provider}`),",
          "33:   chatModels: (provider: string) => withBasePath(`/api/chat/models/${provider}`),",
          "36:   trace: '/api/trace',",
          "39:   images: '/api/text-to-image/openai',",
          "",
          "[Added Lines]",
          "21:   chat: (provider: string) => withBasePath(`/api/chat/${provider}`),",
          "22:   chatModels: (provider: string) => withBasePath(`/api/chat/models/${provider}`),",
          "25:   proxy: '/webapi/proxy',",
          "28:   assistantStore: '/webapi/assistant/store',",
          "29:   assistant: (identifier: string) => withBasePath(`/webapi/assistant/${identifier}`),",
          "32:   gateway: '/webapi/plugin/gateway',",
          "33:   pluginStore: '/webapi/plugin/store',",
          "36:   trace: '/webapi/trace',",
          "39:   images: '/webapi/api/text-to-image/openai',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f16a233559bf62df87e3f790d08d0dd6cfb6f1be",
      "candidate_info": {
        "commit_hash": "f16a233559bf62df87e3f790d08d0dd6cfb6f1be",
        "repo": "lobehub/lobe-chat",
        "commit_url": "https://github.com/lobehub/lobe-chat/commit/f16a233559bf62df87e3f790d08d0dd6cfb6f1be",
        "files": [
          "src/database/server/models/message.ts",
          "src/database/server/models/session.ts",
          "src/server/routers/lambda/user.ts"
        ],
        "message": "\u26a1\ufe0f perf: improve `getUserState` api performance (#5076)",
        "before_after_code_files": [
          "src/database/server/models/message.ts||src/database/server/models/message.ts",
          "src/database/server/models/session.ts||src/database/server/models/session.ts",
          "src/server/routers/lambda/user.ts||src/server/routers/lambda/user.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/server/routers/lambda/user.ts||src/server/routers/lambda/user.ts"
          ],
          "candidate": [
            "src/server/routers/lambda/user.ts||src/server/routers/lambda/user.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/database/server/models/message.ts||src/database/server/models/message.ts": [
          "File: src/database/server/models/message.ts -> src/database/server/models/message.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:     return result[0].count;",
          "295:   };",
          "299:   create = async (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:   hasMoreThanN = async (n: number): Promise<boolean> => {",
          "298:     const result = await this.db",
          "299:       .select({ id: messages.id })",
          "300:       .from(messages)",
          "301:       .where(eq(messages.userId, this.userId))",
          "302:       .limit(n + 1);",
          "304:     return result.length > n;",
          "305:   };",
          "",
          "---------------"
        ],
        "src/database/server/models/session.ts||src/database/server/models/session.ts": [
          "File: src/database/server/models/session.ts -> src/database/server/models/session.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     return result[0].count;",
          "96:   };",
          "100:   create = async ({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:   hasMoreThanN = async (n: number): Promise<boolean> => {",
          "99:     const result = await this.db",
          "100:       .select({ id: sessions.id })",
          "101:       .from(sessions)",
          "102:       .where(eq(sessions.userId, this.userId))",
          "103:       .limit(n + 1);",
          "105:     return result.length > n;",
          "106:   };",
          "",
          "---------------"
        ],
        "src/server/routers/lambda/user.ts||src/server/routers/lambda/user.ts": [
          "File: src/server/routers/lambda/user.ts -> src/server/routers/lambda/user.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     }",
          "60:     const messageModel = new MessageModel(serverDB, ctx.userId);",
          "63:     const sessionModel = new SessionModel(serverDB, ctx.userId);",
          "66:     return {",
          "73:       isOnboard: state.isOnboarded || true,",
          "",
          "[Removed Lines]",
          "61:     const messageCount = await messageModel.count();",
          "64:     const sessionCount = await sessionModel.count();",
          "67:       canEnablePWAGuide: messageCount >= 4,",
          "68:       canEnableTrace: messageCount >= 4,",
          "70:       hasConversation: messageCount > 0 || sessionCount > 1,",
          "",
          "[Added Lines]",
          "61:     const hasMoreThan4Messages = await messageModel.hasMoreThanN(4);",
          "64:     const hasAnyMessages = await messageModel.hasMoreThanN(0);",
          "65:     const hasExtraSession = await sessionModel.hasMoreThanN(1);",
          "68:       canEnablePWAGuide: hasMoreThan4Messages,",
          "69:       canEnableTrace: hasMoreThan4Messages,",
          "71:       hasConversation: hasAnyMessages || hasExtraSession,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "152913e29dd0072005bcdde6264448ac8912ca7a",
      "candidate_info": {
        "commit_hash": "152913e29dd0072005bcdde6264448ac8912ca7a",
        "repo": "lobehub/lobe-chat",
        "commit_url": "https://github.com/lobehub/lobe-chat/commit/152913e29dd0072005bcdde6264448ac8912ca7a",
        "files": [
          "src/app/api/plugin/gateway/route.ts",
          "src/app/api/plugin/store/Store.ts",
          "src/app/api/plugin/store/route.ts",
          "src/const/url.ts",
          "src/services/__tests__/plugin.test.ts",
          "src/services/_url.ts",
          "src/services/chat.ts",
          "src/services/file.ts",
          "src/services/plugin.ts"
        ],
        "message": "\ud83d\udc1b fix: fix `PLUGINS_INDEX_URL` not working (#793)",
        "before_after_code_files": [
          "src/app/api/plugins/route.ts||src/app/api/plugin/gateway/route.ts",
          "src/app/api/plugin/store/Store.ts||src/app/api/plugin/store/Store.ts",
          "src/app/api/plugin/store/route.ts||src/app/api/plugin/store/route.ts",
          "src/const/url.ts||src/const/url.ts",
          "src/services/__tests__/plugin.test.ts||src/services/__tests__/plugin.test.ts",
          "src/services/_url.ts||src/services/_url.ts",
          "src/services/chat.ts||src/services/chat.ts",
          "src/services/file.ts||src/services/file.ts",
          "src/services/plugin.ts||src/services/plugin.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/services/_url.ts||src/services/_url.ts"
          ],
          "candidate": [
            "src/services/_url.ts||src/services/_url.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/app/api/plugins/route.ts||src/app/api/plugin/gateway/route.ts": [
          "File: src/app/api/plugins/route.ts -> src/app/api/plugin/gateway/route.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { createGatewayOnEdgeRuntime } from '@lobehub/chat-plugins-gateway';",
          "",
          "[Removed Lines]",
          "3: import { PLUGINS_INDEX_URL } from '@/const/url';",
          "5: export const POST = createGatewayOnEdgeRuntime({ pluginsIndexUrl: PLUGINS_INDEX_URL });",
          "",
          "[Added Lines]",
          "3: import { getServerConfig } from '@/config/server';",
          "5: const pluginsIndexUrl = getServerConfig().PLUGINS_INDEX_URL;",
          "7: export const POST = createGatewayOnEdgeRuntime({ pluginsIndexUrl });",
          "",
          "---------------"
        ],
        "src/app/api/plugin/store/Store.ts||src/app/api/plugin/store/Store.ts": [
          "File: src/app/api/plugin/store/Store.ts -> src/app/api/plugin/store/Store.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import urlJoin from 'url-join';",
          "3: import { getServerConfig } from '@/config/server';",
          "4: import { DEFAULT_LANG, checkLang } from '@/const/locale';",
          "5: import { Locales } from '@/locales/resources';",
          "7: export class PluginStore {",
          "8:   private readonly baseUrl: string;",
          "10:   constructor(baseUrl?: string) {",
          "11:     this.baseUrl = baseUrl || getServerConfig().PLUGINS_INDEX_URL;",
          "12:   }",
          "14:   getPluginIndexUrl = (lang: Locales = DEFAULT_LANG) => {",
          "15:     if (checkLang(lang)) return this.baseUrl;",
          "17:     return urlJoin(this.baseUrl, `index.${lang}.json`);",
          "18:   };",
          "19: }",
          "",
          "---------------"
        ],
        "src/app/api/plugin/store/route.ts||src/app/api/plugin/store/route.ts": [
          "File: src/app/api/plugin/store/route.ts -> src/app/api/plugin/store/route.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { DEFAULT_LANG } from '@/const/locale';",
          "3: import { PluginStore } from './Store';",
          "5: export const runtime = 'edge';",
          "7: export const GET = async (req: Request) => {",
          "8:   const locale = new URL(req.url).searchParams.get('locale');",
          "10:   const pluginStore = new PluginStore();",
          "12:   let res: Response;",
          "14:   res = await fetch(pluginStore.getPluginIndexUrl(locale as any));",
          "16:   if (res.status === 404) {",
          "17:     res = await fetch(pluginStore.getPluginIndexUrl(DEFAULT_LANG));",
          "18:   }",
          "20:   return res;",
          "21: };",
          "",
          "---------------"
        ],
        "src/const/url.ts||src/const/url.ts": [
          "File: src/const/url.ts -> src/const/url.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import urlJoin from 'url-join';",
          "5: import pkg from '../../package.json';",
          "7: import { INBOX_SESSION_ID } from './session';",
          "9: export const GITHUB = pkg.homepage;",
          "",
          "[Removed Lines]",
          "3: import { Locales } from '@/locales/resources';",
          "6: import { DEFAULT_LANG, checkLang } from './locale';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: export const PLUGINS_INDEX_URL = 'https://chat-plugins.lobehub.com';",
          "25: export const AGENTS_INDEX_GITHUB = 'https://github.com/lobehub/lobe-chat-agents';",
          "26: export const AGENTS_INDEX_GITHUB_ISSUE = urlJoin(AGENTS_INDEX_GITHUB, 'issues/new');",
          "",
          "[Removed Lines]",
          "19: export const getPluginIndexJSON = (lang: Locales = DEFAULT_LANG, baseUrl = PLUGINS_INDEX_URL) => {",
          "20:   if (checkLang(lang)) return baseUrl;",
          "22:   return urlJoin(baseUrl, `index.${lang}.json`);",
          "23: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/services/__tests__/plugin.test.ts||src/services/__tests__/plugin.test.ts": [
          "File: src/services/__tests__/plugin.test.ts -> src/services/__tests__/plugin.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { LobeChatPluginManifest } from '@lobehub/chat-plugin-sdk';",
          "2: import { Mock, beforeEach, describe, expect, it, vi } from 'vitest';",
          "5: import { PluginModel } from '@/database/models/plugin';",
          "6: import { DB_Plugin } from '@/database/schemas/plugin';",
          "7: import { globalHelpers } from '@/store/global/helpers';",
          "",
          "[Removed Lines]",
          "4: import { getPluginIndexJSON } from '@/const/url';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: import OpenAIPlugin from './openai/plugin.json';",
          "19: vi.mock('@/store/global/helpers', () => ({",
          "20:   globalHelpers: {",
          "21:     getCurrentLanguage: vi.fn(),",
          "",
          "[Removed Lines]",
          "16: vi.mock('@/const/url', () => ({",
          "17:   getPluginIndexJSON: vi.fn(),",
          "18: }));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:     it('should fetch and return the plugin list', async () => {",
          "42:       const fakeResponse = { plugins: [{ name: 'TestPlugin' }] };",
          "46:       global.fetch = vi.fn(() =>",
          "47:         Promise.resolve({",
          "48:           json: () => Promise.resolve(fakeResponse),",
          "",
          "[Removed Lines]",
          "43:       const fakeUrl = 'http://fake-url.com/plugins.json';",
          "44:       (globalHelpers.getCurrentLanguage as Mock).mockReturnValue('en');",
          "45:       (getPluginIndexJSON as Mock).mockReturnValue(fakeUrl);",
          "",
          "[Added Lines]",
          "40:       (globalHelpers.getCurrentLanguage as Mock).mockReturnValue('tt');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "56:       expect(globalHelpers.getCurrentLanguage).toHaveBeenCalled();",
          "59:       expect(pluginList).toEqual(fakeResponse);",
          "60:     });",
          "",
          "[Removed Lines]",
          "57:       expect(getPluginIndexJSON).toHaveBeenCalledWith('en');",
          "58:       expect(fetch).toHaveBeenCalledWith(fakeUrl);",
          "",
          "[Added Lines]",
          "52:       expect(fetch).toHaveBeenCalledWith('/api/plugin/store?locale=tt');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "64:       const fakeUrl = 'http://fake-url.com/plugins.json';",
          "65:       (globalHelpers.getCurrentLanguage as Mock).mockReturnValue('en');",
          "67:       global.fetch = vi.fn(() => Promise.reject(new Error('Network error')));",
          "",
          "[Removed Lines]",
          "66:       (getPluginIndexJSON as Mock).mockReturnValue(fakeUrl);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/services/_url.ts||src/services/_url.ts": [
          "File: src/services/_url.ts -> src/services/_url.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export const URLS = {",
          "2:   config: '/api/config',",
          "3:   market: '/api/market',",
          "5: };",
          "7: export const OPENAI_URLS = {",
          "",
          "[Removed Lines]",
          "4:   plugins: '/api/plugins',",
          "",
          "[Added Lines]",
          "4:   proxy: '/api/proxy',",
          "5: };",
          "7: export const PLUGINS_URLS = {",
          "8:   gateway: '/api/plugin/gateway',",
          "9:   store: '/api/plugin/store',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:   edge: '/api/tts/edge-speech',",
          "17:   microsoft: '/api/tts/microsoft-speech',",
          "18: };",
          "",
          "[Removed Lines]",
          "20: export const PROXY_URL = '/api/proxy';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/services/chat.ts||src/services/chat.ts": [
          "File: src/services/chat.ts -> src/services/chat.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import { fetchAIFactory, getMessageError } from '@/utils/fetch';",
          "15: import { createHeaderWithOpenAI } from './_header';",
          "18: const isVisionModel = (model?: string) => model && VISION_MODEL_WHITE_LIST.includes(model);",
          "",
          "[Removed Lines]",
          "16: import { OPENAI_URLS, URLS } from './_url';",
          "",
          "[Added Lines]",
          "16: import { OPENAI_URLS, PLUGINS_URLS } from './_url';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     const gatewayURL = manifest?.gateway;",
          "96:       body: JSON.stringify({ ...params, manifest }),",
          "97:       headers: createHeadersWithPluginSettings(settings),",
          "98:       method: 'POST',",
          "",
          "[Removed Lines]",
          "95:     const res = await fetch(gatewayURL ?? URLS.plugins, {",
          "",
          "[Added Lines]",
          "95:     const res = await fetch(gatewayURL ?? PLUGINS_URLS.gateway, {",
          "",
          "---------------"
        ],
        "src/services/file.ts||src/services/file.ts": [
          "File: src/services/file.ts -> src/services/file.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { FileModel } from '@/database/models/file';",
          "2: import { DB_File } from '@/database/schemas/files';",
          "4: import { FilePreview } from '@/types/files';",
          "5: import compressImage from '@/utils/compressImage';",
          "",
          "[Removed Lines]",
          "3: import { PROXY_URL } from '@/services/_url';",
          "",
          "[Added Lines]",
          "3: import { URLS } from '@/services/_url';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:   }",
          "45:   async uploadImageByUrl(url: string, file: Pick<DB_File, 'name' | 'metadata'>) {",
          "47:     const data = await res.arrayBuffer();",
          "48:     const fileType = res.headers.get('content-type') || 'image/webp';",
          "",
          "[Removed Lines]",
          "46:     const res = await fetch(PROXY_URL, { body: url, method: 'POST' });",
          "",
          "[Added Lines]",
          "46:     const res = await fetch(URLS.proxy, { body: url, method: 'POST' });",
          "",
          "---------------"
        ],
        "src/services/plugin.ts||src/services/plugin.ts": [
          "File: src/services/plugin.ts -> src/services/plugin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:   pluginManifestSchema,",
          "5: } from '@lobehub/chat-plugin-sdk';",
          "8: import { PluginModel } from '@/database/models/plugin';",
          "10: import { globalHelpers } from '@/store/global/helpers';",
          "11: import { OpenAIPluginManifest } from '@/types/openai/plugin';",
          "12: import { LobeTool } from '@/types/tool';",
          "",
          "[Removed Lines]",
          "7: import { getPluginIndexJSON } from '@/const/url';",
          "9: import { PROXY_URL } from '@/services/_url';",
          "",
          "[Added Lines]",
          "8: import { PLUGINS_URLS, URLS } from '@/services/_url';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:     let res: Response;",
          "24:     try {",
          "26:     } catch {",
          "27:       throw new TypeError('fetchError');",
          "28:     }",
          "",
          "[Removed Lines]",
          "25:       res = await (proxy ? fetch(PROXY_URL, { body: url, method: 'POST' }) : fetch(url));",
          "",
          "[Added Lines]",
          "24:       res = await (proxy ? fetch(URLS.proxy, { body: url, method: 'POST' }) : fetch(url));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:   };",
          "65:   getPluginManifest = async (",
          "",
          "[Removed Lines]",
          "55:   getPluginList = async () => {",
          "56:     const url = getPluginIndexJSON(globalHelpers.getCurrentLanguage());",
          "58:     const res = await fetch(url);",
          "60:     const data: LobeChatPluginsMarketIndex = await res.json();",
          "62:     return data;",
          "",
          "[Added Lines]",
          "54:   getPluginList = async (): Promise<LobeChatPluginsMarketIndex> => {",
          "55:     const locale = globalHelpers.getCurrentLanguage();",
          "57:     const res = await fetch(`${PLUGINS_URLS.store}?locale=${locale}`);",
          "59:     return res.json();",
          "",
          "---------------"
        ]
      }
    }
  ]
}