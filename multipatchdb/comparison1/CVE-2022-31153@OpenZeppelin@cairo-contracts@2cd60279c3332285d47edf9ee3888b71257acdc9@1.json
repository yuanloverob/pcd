{
  "cve_id": "CVE-2022-31153",
  "cve_desc": "OpenZeppelin Contracts for Cairo is a library for contract development written in Cairo for StarkNet, a decentralized ZK Rollup. Version 0.2.0 is vulnerable to an error that renders account contracts unusable on live networks. This issue affects all accounts (vanilla and ethereum flavors) in the v0.2.0 release of OpenZeppelin Contracts for Cairo, which are not whitelisted on StarkNet mainnet. Only goerli deployments of v0.2.0 accounts are affected. This faulty behavior is not observed in StarkNet's testing framework. This bug has been patched in v0.2.1.",
  "repo": "OpenZeppelin/cairo-contracts",
  "patch_hash": "2cd60279c3332285d47edf9ee3888b71257acdc9",
  "patch_info": {
    "commit_hash": "2cd60279c3332285d47edf9ee3888b71257acdc9",
    "repo": "OpenZeppelin/cairo-contracts",
    "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/2cd60279c3332285d47edf9ee3888b71257acdc9",
    "files": [
      "docs/Account.md",
      "src/openzeppelin/account/Account.cairo",
      "src/openzeppelin/account/EthAccount.cairo",
      "src/openzeppelin/account/library.cairo",
      "tests/access/test_Ownable.py",
      "tests/account/test_Account.py",
      "tests/account/test_AddressRegistry.py",
      "tests/account/test_EthAccount.py",
      "tests/security/test_pausable.py",
      "tests/signers.py",
      "tests/token/erc20/test_ERC20.py",
      "tests/token/erc20/test_ERC20_Burnable_mock.py",
      "tests/token/erc20/test_ERC20_Mintable.py",
      "tests/token/erc20/test_ERC20_Pausable.py",
      "tests/token/erc20/test_ERC20_Upgradeable.py",
      "tests/token/erc721/test_ERC721_Mintable_Burnable.py",
      "tests/token/erc721/test_ERC721_Mintable_Pausable.py",
      "tests/token/erc721/test_ERC721_SafeMintable_mock.py",
      "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
      "tests/upgrades/test_Proxy.py",
      "tests/upgrades/test_upgrades.py",
      "tests/utils.py"
    ],
    "message": "Eth account support (#361)\n\n* Create separate execute function\n\n* Add is_valid_eth_signature to account library\n\n* Add eth_execute to account library\n\n* Create eth account mock and test\n\n* Add missing dependencies\n\n* Create TestEthSigner\n\n* Update used private key\n\n* Update implicit parameters\n\n* Update execute parameters\n\n* Update all implicit arguments\n\n* Update signature values and hash\n\n* Update variable name\n\n* Update documentation\n\n* Fix merge error\n\n* Improve format\n\n* Update tests/utils.py\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Rename test and fix documentation\n\n* Add documentation\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/utils.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/utils.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/mocks/eth_account.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Create eth account preset\n\n* Create signers module\n\n* use assert_revert to test nonce\n\n* Add test for valid signature\n\n* use internal hash\n\n* Update validity test\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/signers.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Fix after merge\n\n* Improve tests\n\n* Update account library\n\n* Update Account.md\n\n* update format\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Update tests/access/test_Ownable.py\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Update eth test\n\n* Update Account.md\n\n* Update test\n\n* Update tests/signers.py\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Fix typo\n\n* Update signers\n\n* Update test\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/signers.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* update test\n\n* Update documenation for Account\n\n* Update docs/Account.md\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>",
    "before_after_code_files": [
      "src/openzeppelin/account/Account.cairo||src/openzeppelin/account/Account.cairo",
      "src/openzeppelin/account/EthAccount.cairo||src/openzeppelin/account/EthAccount.cairo",
      "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo",
      "tests/access/test_Ownable.py||tests/access/test_Ownable.py",
      "tests/account/test_Account.py||tests/account/test_Account.py",
      "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py",
      "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
      "tests/security/test_pausable.py||tests/security/test_pausable.py",
      "tests/signers.py||tests/signers.py",
      "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py",
      "tests/token/erc20/test_ERC20_Burnable_mock.py||tests/token/erc20/test_ERC20_Burnable_mock.py",
      "tests/token/erc20/test_ERC20_Mintable.py||tests/token/erc20/test_ERC20_Mintable.py",
      "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py",
      "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py",
      "tests/token/erc721/test_ERC721_Mintable_Burnable.py||tests/token/erc721/test_ERC721_Mintable_Burnable.py",
      "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py",
      "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py",
      "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py||tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
      "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
      "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py",
      "tests/utils.py||tests/utils.py"
    ]
  },
  "patch_diff": {
    "src/openzeppelin/account/Account.cairo||src/openzeppelin/account/Account.cairo": [
      "File: src/openzeppelin/account/Account.cairo -> src/openzeppelin/account/Account.cairo",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: %lang starknet",
      "8: from openzeppelin.account.library import Account, AccountCallArray",
      "",
      "[Removed Lines]",
      "6: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin",
      "",
      "[Added Lines]",
      "6: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin, BitwiseBuiltin",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "95:         syscall_ptr : felt*,",
      "96:         pedersen_ptr : HashBuiltin*,",
      "97:         range_check_ptr,",
      "99:     }(",
      "100:         call_array_len: felt,",
      "101:         call_array: AccountCallArray*,",
      "",
      "[Removed Lines]",
      "98:         ecdsa_ptr: SignatureBuiltin*",
      "",
      "[Added Lines]",
      "98:         ecdsa_ptr: SignatureBuiltin*,",
      "99:         bitwise_ptr: BitwiseBuiltin*",
      "",
      "---------------"
    ],
    "src/openzeppelin/account/EthAccount.cairo||src/openzeppelin/account/EthAccount.cairo": [
      "File: src/openzeppelin/account/EthAccount.cairo -> src/openzeppelin/account/EthAccount.cairo",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # SPDX-License-Identifier: MIT",
      "2: # OpenZeppelin Contracts for Cairo v0.1.0 (account/EthAccount.cairo)",
      "4: %lang starknet",
      "5: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin, BitwiseBuiltin",
      "6: from openzeppelin.account.library import Account, AccountCallArray",
      "8: from openzeppelin.introspection.ERC165 import ERC165",
      "10: #",
      "11: # Constructor",
      "12: #",
      "14: @constructor",
      "15: func constructor{",
      "16:         syscall_ptr : felt*,",
      "17:         pedersen_ptr : HashBuiltin*,",
      "18:         range_check_ptr",
      "19:     }(eth_address: felt):",
      "20:     Account.initializer(eth_address)",
      "21:     return ()",
      "22: end",
      "24: #",
      "25: # Getters",
      "26: #",
      "28: @view",
      "29: func get_eth_address{",
      "30:         syscall_ptr : felt*,",
      "31:         pedersen_ptr : HashBuiltin*,",
      "32:         range_check_ptr",
      "33:     }() -> (res: felt):",
      "34:     let (res) = Account.get_public_key()",
      "35:     return (res=res)",
      "36: end",
      "38: @view",
      "39: func get_nonce{",
      "40:         syscall_ptr : felt*,",
      "41:         pedersen_ptr : HashBuiltin*,",
      "42:         range_check_ptr",
      "43:     }() -> (res: felt):",
      "44:     let (res) = Account.get_nonce()",
      "45:     return (res=res)",
      "46: end",
      "48: @view",
      "49: func supportsInterface{",
      "50:         syscall_ptr: felt*,",
      "51:         pedersen_ptr: HashBuiltin*,",
      "52:         range_check_ptr",
      "53:     } (interfaceId: felt) -> (success: felt):",
      "54:     let (success) = ERC165.supports_interface(interfaceId)",
      "55:     return (success)",
      "56: end",
      "58: #",
      "59: # Setters",
      "60: #",
      "62: @external",
      "63: func set_eth_address{",
      "64:         syscall_ptr : felt*,",
      "65:         pedersen_ptr : HashBuiltin*,",
      "66:         range_check_ptr",
      "67:     }(new_eth_address: felt):",
      "68:     Account.set_public_key(new_eth_address)",
      "69:     return ()",
      "70: end",
      "72: #",
      "73: # Business logic",
      "74: #",
      "76: @view",
      "77: func is_valid_signature{",
      "78:         syscall_ptr : felt*,",
      "79:         pedersen_ptr : HashBuiltin*,",
      "80:         range_check_ptr,",
      "81:         ecdsa_ptr: SignatureBuiltin*,",
      "82:         bitwise_ptr: BitwiseBuiltin*",
      "83:     }(",
      "84:         hash: felt,",
      "85:         signature_len: felt,",
      "86:         signature: felt*",
      "87:     ) -> (is_valid: felt):",
      "88:     let (is_valid) = Account.is_valid_eth_signature(hash, signature_len, signature)",
      "89:     return (is_valid=is_valid)",
      "90: end",
      "92: @external",
      "93: func __execute__{",
      "94:         syscall_ptr : felt*,",
      "95:         pedersen_ptr : HashBuiltin*,",
      "96:         range_check_ptr,",
      "97:         bitwise_ptr: BitwiseBuiltin*",
      "98:     }(",
      "99:         call_array_len: felt,",
      "100:         call_array: AccountCallArray*,",
      "101:         calldata_len: felt,",
      "102:         calldata: felt*,",
      "103:         nonce: felt",
      "104:     ) -> (response_len: felt, response: felt*):",
      "105:     let (response_len, response) = Account.eth_execute(",
      "106:         call_array_len,",
      "107:         call_array,",
      "108:         calldata_len,",
      "109:         calldata,",
      "110:         nonce",
      "111:     )",
      "112:     return (response_len=response_len, response=response)",
      "113: end",
      "",
      "---------------"
    ],
    "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo": [
      "File: src/openzeppelin/account/library.cairo -> src/openzeppelin/account/library.cairo",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: from starkware.cairo.common.registers import get_fp_and_pc",
      "4: from starkware.starknet.common.syscalls import get_contract_address",
      "5: from starkware.cairo.common.signature import verify_ecdsa_signature",
      "7: from starkware.cairo.common.alloc import alloc",
      "8: from starkware.cairo.common.memcpy import memcpy",
      "9: from starkware.cairo.common.bool import TRUE",
      "10: from starkware.starknet.common.syscalls import call_contract, get_caller_address, get_tx_info",
      "12: from openzeppelin.introspection.ERC165 import ERC165",
      "14: from openzeppelin.utils.constants import IACCOUNT_ID",
      "",
      "[Removed Lines]",
      "6: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin",
      "",
      "[Added Lines]",
      "6: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin, BitwiseBuiltin",
      "8: from starkware.cairo.common.uint256 import Uint256",
      "10: from starkware.cairo.common.math import split_felt",
      "13: from starkware.cairo.common.cairo_secp.signature import verify_eth_signature_uint256",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141:         return (is_valid=TRUE)",
      "142:     end",
      "145:     func execute{",
      "146:             syscall_ptr : felt*,",
      "147:             pedersen_ptr : HashBuiltin*,",
      "148:             range_check_ptr,",
      "150:         }(",
      "151:             call_array_len: felt,",
      "152:             call_array: AccountCallArray*,",
      "",
      "[Removed Lines]",
      "149:             ecdsa_ptr: SignatureBuiltin*",
      "",
      "[Added Lines]",
      "146:  func is_valid_eth_signature{",
      "147:             syscall_ptr : felt*,",
      "148:             pedersen_ptr : HashBuiltin*,",
      "149:             bitwise_ptr: BitwiseBuiltin*,",
      "150:             range_check_ptr",
      "151:         }(",
      "152:             hash: felt,",
      "153:             signature_len: felt,",
      "154:             signature: felt*",
      "155:         ) -> (is_valid: felt):",
      "156:         alloc_locals",
      "157:         let (_public_key) = get_public_key()",
      "158:         let (__fp__, _) = get_fp_and_pc()",
      "160:         # This interface expects a signature pointer and length to make",
      "161:         # no assumption about signature validation schemes.",
      "162:         # But this implementation does, and it expects a the sig_v, sig_r,",
      "163:         # sig_s, and hash elements.",
      "164:         let sig_v : felt = signature[0]",
      "165:         let sig_r : Uint256 = Uint256(low=signature[1], high=signature[2])",
      "166:         let sig_s : Uint256 = Uint256(low=signature[3], high=signature[4])",
      "167:         let (high, low) = split_felt(hash)",
      "168:         let msg_hash : Uint256 = Uint256(low=low, high=high)",
      "170:         let (local keccak_ptr : felt*) = alloc()",
      "172:         with keccak_ptr:",
      "173:             verify_eth_signature_uint256(",
      "174:                 msg_hash=msg_hash,",
      "175:                 r=sig_r,",
      "176:                 s=sig_s,",
      "177:                 v=sig_v,",
      "178:                 eth_address=_public_key)",
      "179:         end",
      "181:         return (is_valid=TRUE)",
      "182:     end",
      "188:             bitwise_ptr: BitwiseBuiltin*",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "156:         ) -> (response_len: felt, response: felt*):",
      "157:         alloc_locals",
      "159:         let (caller) = get_caller_address()",
      "160:         with_attr error_message(\"Account: no reentrant call\"):",
      "161:             assert caller = 0",
      "162:         end",
      "168:         # validate nonce",
      "169:         with_attr error_message(\"Account: nonce is invalid\"):",
      "170:             assert _current_nonce = nonce",
      "171:         end",
      "173:         # TMP: Convert `AccountCallArray` to 'Call'.",
      "174:         let (calls : Call*) = alloc()",
      "175:         _from_call_array_to_call(call_array_len, call_array, calldata, calls)",
      "176:         let calls_len = call_array_len",
      "187:         # execute call",
      "188:         let (response : felt*) = alloc()",
      "189:         let (response_len) = _execute_list(calls_len, calls, response)",
      "",
      "[Removed Lines]",
      "164:         let (__fp__, _) = get_fp_and_pc()",
      "165:         let (tx_info) = get_tx_info()",
      "166:         let (_current_nonce) = Account_current_nonce.read()",
      "178:         # validate transaction",
      "179:         let (is_valid) = is_valid_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature)",
      "180:         with_attr error_message(\"Account: invalid signature\"):",
      "181:             assert is_valid = TRUE",
      "182:         end",
      "184:         # bump nonce",
      "185:         Account_current_nonce.write(_current_nonce + 1)",
      "",
      "[Added Lines]",
      "198:         let (__fp__, _) = get_fp_and_pc()",
      "199:         let (tx_info) = get_tx_info()",
      "200:         let (local ecdsa_ptr : SignatureBuiltin*) = alloc()",
      "201:         with ecdsa_ptr:",
      "202:             # validate transaction",
      "203:             with_attr error_message(\"Account: invalid signature\"):",
      "204:                 let (is_valid) = is_valid_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature)",
      "205:                 assert is_valid = TRUE",
      "206:             end",
      "207:         end",
      "209:         return _unsafe_execute(call_array_len, call_array, calldata_len, calldata, nonce)",
      "210:     end",
      "212:     func eth_execute{",
      "213:             syscall_ptr : felt*,",
      "214:             pedersen_ptr : HashBuiltin*,",
      "215:             range_check_ptr,",
      "216:             bitwise_ptr: BitwiseBuiltin*",
      "217:         }(",
      "218:             call_array_len: felt,",
      "219:             call_array: AccountCallArray*,",
      "220:             calldata_len: felt,",
      "221:             calldata: felt*,",
      "222:             nonce: felt",
      "223:         ) -> (response_len: felt, response: felt*):",
      "224:         alloc_locals",
      "226:         let (__fp__, _) = get_fp_and_pc()",
      "227:         let (tx_info) = get_tx_info()",
      "229:         # validate transaction",
      "230:         with_attr error_message(\"Account: invalid secp256k1 signature\"):",
      "231:             let (is_valid) = is_valid_eth_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature)",
      "232:             assert is_valid = TRUE",
      "233:         end",
      "235:         return _unsafe_execute(call_array_len, call_array, calldata_len, calldata, nonce)",
      "236:     end",
      "238:     func _unsafe_execute{",
      "239:             syscall_ptr : felt*,",
      "240:             pedersen_ptr : HashBuiltin*,",
      "241:             range_check_ptr,",
      "242:             bitwise_ptr: BitwiseBuiltin*",
      "243:         }(",
      "244:             call_array_len: felt,",
      "245:             call_array: AccountCallArray*,",
      "246:             calldata_len: felt,",
      "247:             calldata: felt*,",
      "248:             nonce: felt",
      "249:         ) -> (response_len: felt, response: felt*):",
      "250:         alloc_locals",
      "259:         let (_current_nonce) = Account_current_nonce.read()",
      "265:         # bump nonce",
      "266:         Account_current_nonce.write(_current_nonce + 1)",
      "",
      "---------------"
    ],
    "tests/access/test_Ownable.py||tests/access/test_Ownable.py": [
      "File: tests/access/test_Ownable.py -> tests/access/test_Ownable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     ZERO_ADDRESS,",
      "6:     assert_event_emitted,",
      "7:     get_contract_class,",
      "",
      "[Removed Lines]",
      "4:     MockSigner,",
      "",
      "[Added Lines]",
      "2: from signers import MockSigner",
      "",
      "---------------"
    ],
    "tests/account/test_Account.py||tests/account/test_Account.py": [
      "File: tests/account/test_Account.py -> tests/account/test_Account.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "6: signer = MockSigner(123456789987654321)",
      "",
      "[Removed Lines]",
      "3: from utils import MockSigner, assert_revert, get_contract_class, cached_contract, TRUE",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "4: from utils import assert_revert, get_contract_class, cached_contract, TRUE",
      "",
      "---------------"
    ],
    "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py": [
      "File: tests/account/test_AddressRegistry.py -> tests/account/test_AddressRegistry.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "6: signer = MockSigner(123456789987654321)",
      "",
      "[Removed Lines]",
      "3: from utils import MockSigner, get_contract_class, cached_contract",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "4: from utils import get_contract_class, cached_contract",
      "",
      "---------------"
    ],
    "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py": [
      "File: tests/account/test_EthAccount.py -> tests/account/test_EthAccount.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from starkware.starkware_utils.error_handling import StarkException",
      "4: from starkware.starknet.definitions.error_codes import StarknetErrorCode",
      "5: from utils import assert_revert, get_contract_class, cached_contract, TRUE, FALSE",
      "6: from signers import MockEthSigner",
      "8: private_key = b'\\x01' * 32",
      "9: signer = MockEthSigner(b'\\x01' * 32)",
      "10: other = MockEthSigner(b'\\x02' * 32)",
      "12: IACCOUNT_ID = 0xf10dbd44",
      "15: @pytest.fixture(scope='module')",
      "16: def contract_defs():",
      "17:     account_cls = get_contract_class('openzeppelin/account/EthAccount.cairo')",
      "18:     init_cls = get_contract_class(\"tests/mocks/Initializable.cairo\")",
      "19:     attacker_cls = get_contract_class(\"tests/mocks/account_reentrancy.cairo\")",
      "21:     return account_cls, init_cls, attacker_cls",
      "24: @pytest.fixture(scope='module')",
      "25: async def account_init(contract_defs):",
      "26:     account_cls, init_cls, attacker_cls = contract_defs",
      "27:     starknet = await Starknet.empty()",
      "29:     account1 = await starknet.deploy(",
      "30:         contract_class=account_cls,",
      "31:         constructor_calldata=[signer.eth_address]",
      "32:     )",
      "33:     account2 = await starknet.deploy(",
      "34:         contract_class=account_cls,",
      "35:         constructor_calldata=[signer.eth_address]",
      "36:     )",
      "37:     initializable1 = await starknet.deploy(",
      "38:         contract_class=init_cls,",
      "39:         constructor_calldata=[],",
      "40:     )",
      "41:     initializable2 = await starknet.deploy(",
      "42:         contract_class=init_cls,",
      "43:         constructor_calldata=[],",
      "44:     )",
      "45:     attacker = await starknet.deploy(",
      "46:         contract_class=attacker_cls,",
      "47:         constructor_calldata=[],",
      "48:     )",
      "50:     return starknet.state, account1, account2, initializable1, initializable2, attacker",
      "53: @pytest.fixture",
      "54: def account_factory(contract_defs, account_init):",
      "55:     account_cls, init_cls, attacker_cls = contract_defs",
      "56:     state, account1, account2, initializable1, initializable2, attacker = account_init",
      "57:     _state = state.copy()",
      "58:     account1 = cached_contract(_state, account_cls, account1)",
      "59:     account2 = cached_contract(_state, account_cls, account2)",
      "60:     initializable1 = cached_contract(_state, init_cls, initializable1)",
      "61:     initializable2 = cached_contract(_state, init_cls, initializable2)",
      "62:     attacker = cached_contract(_state, attacker_cls, attacker)",
      "64:     return account1, account2, initializable1, initializable2, attacker",
      "67: @pytest.mark.asyncio",
      "68: async def test_constructor(account_factory):",
      "69:     account, *_ = account_factory",
      "71:     execution_info = await account.get_eth_address().call()",
      "72:     assert execution_info.result == (signer.eth_address,)",
      "74:     execution_info = await account.supportsInterface(IACCOUNT_ID).call()",
      "75:     assert execution_info.result == (TRUE,)",
      "78: @pytest.mark.asyncio",
      "79: async def test_execute(account_factory):",
      "80:     account, _, initializable, *_ = account_factory",
      "82:     execution_info = await initializable.initialized().call()",
      "83:     assert execution_info.result == (FALSE,)",
      "85:     _, hash, signature = await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])])",
      "87:     validity_info, *_ = await signer.send_transactions(account, [(account.contract_address, 'is_valid_signature', [hash, len(signature), *signature])])",
      "88:     assert validity_info.result.response[0] == TRUE",
      "90:     execution_info = await initializable.initialized().call()",
      "91:     assert execution_info.result == (TRUE,)",
      "93:     # should revert if signature is not correct",
      "94:     await assert_revert(",
      "95:         signer.send_transactions(account, [(account.contract_address, 'is_valid_signature', [hash-1, len(signature), *signature])]),",
      "96:         reverted_with=\"Invalid signature\"",
      "97:     )",
      "100: @pytest.mark.asyncio",
      "101: async def test_multicall(account_factory):",
      "102:     account, _, initializable_1, initializable_2, _ = account_factory",
      "104:     execution_info = await initializable_1.initialized().call()",
      "105:     assert execution_info.result == (FALSE,)",
      "106:     execution_info = await initializable_2.initialized().call()",
      "107:     assert execution_info.result == (FALSE,)",
      "109:     await signer.send_transactions(",
      "110:         account,",
      "111:         [",
      "112:             (initializable_1.contract_address, 'initialize', []),",
      "113:             (initializable_2.contract_address, 'initialize', [])",
      "114:         ]",
      "115:     )",
      "117:     execution_info = await initializable_1.initialized().call()",
      "118:     assert execution_info.result == (TRUE,)",
      "119:     execution_info = await initializable_2.initialized().call()",
      "120:     assert execution_info.result == (TRUE,)",
      "123: @pytest.mark.asyncio",
      "124: async def test_return_value(account_factory):",
      "125:     account, _, initializable, *_ = account_factory",
      "127:     # initialize, set `initialized = 1`",
      "128:     await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])])",
      "130:     read_info, *_ = await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
      "131:     call_info = await initializable.initialized().call()",
      "132:     (call_result, ) = call_info.result",
      "133:     assert read_info.result.response == [call_result]  # 1",
      "136: @ pytest.mark.asyncio",
      "137: async def test_nonce(account_factory):",
      "138:     account, _, initializable, *_ = account_factory",
      "140:     # bump nonce",
      "141:     _, hash, signature = await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
      "143:     execution_info = await account.get_nonce().call()",
      "144:     current_nonce = execution_info.result.res",
      "146:     # lower nonce",
      "147:     await assert_revert(",
      "148:         signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], current_nonce - 1),",
      "149:         reverted_with=\"Account: nonce is invalid\"",
      "150:     )",
      "152:     # higher nonce",
      "153:     await assert_revert(",
      "154:         signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], current_nonce + 1),",
      "155:         reverted_with=\"Account: nonce is invalid\"",
      "156:     )",
      "158:     # right nonce",
      "159:     await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], current_nonce)",
      "161:     execution_info = await initializable.initialized().call()",
      "162:     assert execution_info.result == (TRUE,)",
      "165: @pytest.mark.asyncio",
      "166: async def test_eth_address_setter(account_factory):",
      "167:     account, *_ = account_factory",
      "169:     execution_info = await account.get_eth_address().call()",
      "170:     assert execution_info.result == (signer.eth_address,)",
      "172:     # set new pubkey",
      "173:     await signer.send_transactions(account, [(account.contract_address, 'set_eth_address', [other.eth_address])])",
      "175:     execution_info = await account.get_eth_address().call()",
      "176:     assert execution_info.result == (other.eth_address,)",
      "179: @pytest.mark.asyncio",
      "180: async def test_eth_address_setter_different_account(account_factory):",
      "181:     account, bad_account, *_ = account_factory",
      "183:     # set new pubkey",
      "184:     await assert_revert(",
      "185:         signer.send_transactions(",
      "186:             bad_account,",
      "187:             [(account.contract_address, 'set_eth_address', [other.eth_address])]",
      "188:         ),",
      "189:         reverted_with=\"Account: caller is not this account\"",
      "190:     )",
      "193: @pytest.mark.asyncio",
      "194: async def test_account_takeover_with_reentrant_call(account_factory):",
      "195:     account, _, _, _, attacker = account_factory",
      "197:     await assert_revert(",
      "198:         signer.send_transaction(account, attacker.contract_address, 'account_takeover', []),",
      "199:         reverted_with=\"Account: no reentrant call\"",
      "200:     )",
      "202:     execution_info = await account.get_eth_address().call()",
      "203:     assert execution_info.result == (signer.eth_address,)",
      "",
      "---------------"
    ],
    "tests/security/test_pausable.py||tests/security/test_pausable.py": [
      "File: tests/security/test_pausable.py -> tests/security/test_pausable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "4:     TRUE, FALSE, assert_revert, assert_event_emitted,",
      "6: )",
      "8: signer = MockSigner(12345678987654321)",
      "10: @pytest.fixture",
      "",
      "[Removed Lines]",
      "5:     get_contract_class, cached_contract, MockSigner",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "6:     get_contract_class, cached_contract",
      "",
      "---------------"
    ],
    "tests/signers.py||tests/signers.py": [
      "File: tests/signers.py -> tests/signers.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: from nile.signer import Signer, from_call_to_call_array, get_transaction_hash",
      "2: from utils import to_uint",
      "3: import eth_keys",
      "5: class MockSigner():",
      "6:     \"\"\"",
      "7:     Utility for sending signed transactions to an Account on Starknet.",
      "9:     Parameters",
      "10:     ----------",
      "12:     private_key : int",
      "14:     Examples",
      "15:     ---------",
      "16:     Constructing a MockSigner object",
      "18:     >>> signer = MockSigner(1234)",
      "20:     Sending a transaction",
      "22:     >>> await signer.send_transaction(",
      "23:             account, contract_address, 'contract_method', [arg_1]",
      "24:         )",
      "26:     Sending multiple transactions",
      "28:     >>> await signer.send_transaction(",
      "29:             account, [",
      "30:                 (contract_address, 'contract_method', [arg_1]),",
      "31:                 (contract_address, 'another_method', [arg_1, arg_2])",
      "32:             ]",
      "33:         )",
      "35:     \"\"\"",
      "36:     def __init__(self, private_key):",
      "37:         self.signer = Signer(private_key)",
      "38:         self.public_key = self.signer.public_key",
      "40:     async def send_transaction(self, account, to, selector_name, calldata, nonce=None, max_fee=0):",
      "41:         return await self.send_transactions(account, [(to, selector_name, calldata)], nonce, max_fee)",
      "43:     async def send_transactions(self, account, calls, nonce=None, max_fee=0):",
      "44:         if nonce is None:",
      "45:             execution_info = await account.get_nonce().call()",
      "46:             nonce, = execution_info.result",
      "48:         build_calls = []",
      "49:         for call in calls:",
      "50:             build_call = list(call)",
      "51:             build_call[0] = hex(build_call[0])",
      "52:             build_calls.append(build_call)",
      "54:         (call_array, calldata, sig_r, sig_s) = self.signer.sign_transaction(hex(account.contract_address), build_calls, nonce, max_fee)",
      "55:         return await account.__execute__(call_array, calldata, nonce).invoke(signature=[sig_r, sig_s])",
      "57: class MockEthSigner():",
      "58:     \"\"\"",
      "59:     Utility for sending signed transactions to an Account on Starknet, like MockSigner, but using a secp256k1 signature.",
      "60:     Parameters",
      "61:     ----------",
      "62:     private_key : int",
      "64:     \"\"\"",
      "65:     def __init__(self, private_key):",
      "66:         self.signer = eth_keys.keys.PrivateKey(private_key)",
      "67:         self.eth_address = int(self.signer.public_key.to_checksum_address(),0)",
      "69:     async def send_transaction(self, account, to, selector_name, calldata, nonce=None, max_fee=0):",
      "70:         return await self.send_transactions(account, [(to, selector_name, calldata)], nonce, max_fee)",
      "72:     async def send_transactions(self, account, calls, nonce=None, max_fee=0):",
      "73:         if nonce is None:",
      "74:             execution_info = await account.get_nonce().call()",
      "75:             nonce, = execution_info.result",
      "77:         build_calls = []",
      "78:         for call in calls:",
      "79:             build_call = list(call)",
      "80:             build_call[0] = hex(build_call[0])",
      "81:             build_calls.append(build_call)",
      "83:         (call_array, calldata) = from_call_to_call_array(build_calls)",
      "84:         message_hash = get_transaction_hash(",
      "85:             account.contract_address, call_array, calldata, nonce, max_fee",
      "86:         )",
      "88:         signature = self.signer.sign_msg_hash((message_hash).to_bytes(32, byteorder=\"big\"))",
      "89:         sig_r = to_uint(signature.r)",
      "90:         sig_s = to_uint(signature.s)",
      "92:         # the hash and signature are returned for other tests to use",
      "93:         return await account.__execute__(call_array, calldata, nonce).invoke(",
      "94:             signature=[signature.v, *sig_r, *sig_s]",
      "95:         ), message_hash, [signature.v, *sig_r, *sig_s]",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py": [
      "File: tests/token/erc20/test_ERC20.py -> tests/token/erc20/test_ERC20.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     ZERO_ADDRESS, INVALID_UINT256, TRUE, get_contract_class, cached_contract,",
      "6:     assert_revert, assert_event_emitted, contract_path",
      "7: )",
      "9: signer = MockSigner(123456789987654321)",
      "11: # testing vars",
      "",
      "[Removed Lines]",
      "4:     MockSigner, to_uint, add_uint, sub_uint, str_to_felt, MAX_UINT256,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     to_uint, add_uint, sub_uint, str_to_felt, MAX_UINT256,",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20_Burnable_mock.py||tests/token/erc20/test_ERC20_Burnable_mock.py": [
      "File: tests/token/erc20/test_ERC20_Burnable_mock.py -> tests/token/erc20/test_ERC20_Burnable_mock.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "6: )",
      "8: signer = MockSigner(123456789987654321)",
      "10: # testing vars",
      "",
      "[Removed Lines]",
      "4:     MockSigner, to_uint, add_uint, sub_uint, str_to_felt, ZERO_ADDRESS, INVALID_UINT256,",
      "5:     get_contract_class, cached_contract, assert_revert, assert_event_emitted,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     to_uint, add_uint, sub_uint, str_to_felt, ZERO_ADDRESS, INVALID_UINT256,",
      "6:     get_contract_class, cached_contract, assert_revert, assert_event_emitted",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20_Mintable.py||tests/token/erc20/test_ERC20_Mintable.py": [
      "File: tests/token/erc20/test_ERC20_Mintable.py -> tests/token/erc20/test_ERC20_Mintable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     MAX_UINT256, ZERO_ADDRESS, INVALID_UINT256, get_contract_class,",
      "6:     cached_contract, assert_revert, assert_event_emitted",
      "7: )",
      "9: signer = MockSigner(123456789987654321)",
      "11: # testing vars",
      "",
      "[Removed Lines]",
      "4:     MockSigner, to_uint, add_uint, sub_uint, str_to_felt,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     to_uint, add_uint, sub_uint, str_to_felt,",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py": [
      "File: tests/token/erc20/test_ERC20_Pausable.py -> tests/token/erc20/test_ERC20_Pausable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     get_contract_class, cached_contract",
      "6: )",
      "8: signer = MockSigner(123456789987654321)",
      "10: # testing vars",
      "",
      "[Removed Lines]",
      "4:     MockSigner, TRUE, FALSE, to_uint, str_to_felt, assert_revert,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     TRUE, FALSE, to_uint, str_to_felt, assert_revert,",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py": [
      "File: tests/token/erc20/test_ERC20_Upgradeable.py -> tests/token/erc20/test_ERC20_Upgradeable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     get_contract_class, cached_contract",
      "6: )",
      "9: signer = MockSigner(123456789987654321)",
      "11: USER = 999",
      "",
      "[Removed Lines]",
      "4:     MockSigner, to_uint, sub_uint, str_to_felt, assert_revert,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     to_uint, sub_uint, str_to_felt, assert_revert,",
      "",
      "---------------"
    ],
    "tests/token/erc721/test_ERC721_Mintable_Burnable.py||tests/token/erc721/test_ERC721_Mintable_Burnable.py": [
      "File: tests/token/erc721/test_ERC721_Mintable_Burnable.py -> tests/token/erc721/test_ERC721_Mintable_Burnable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_event_emitted, get_contract_class, cached_contract, to_uint, sub_uint, add_uint",
      "6: )",
      "",
      "[Removed Lines]",
      "4:     MockSigner, str_to_felt, ZERO_ADDRESS, TRUE, FALSE, assert_revert, INVALID_UINT256,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     str_to_felt, ZERO_ADDRESS, TRUE, FALSE, assert_revert, INVALID_UINT256,",
      "",
      "---------------"
    ],
    "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py": [
      "File: tests/token/erc721/test_ERC721_Mintable_Pausable.py -> tests/token/erc721/test_ERC721_Mintable_Pausable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_revert, to_uint",
      "6: )",
      "",
      "[Removed Lines]",
      "4:     MockSigner, str_to_felt, TRUE, FALSE, get_contract_class, cached_contract,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     str_to_felt, TRUE, FALSE, get_contract_class, cached_contract,",
      "",
      "---------------"
    ],
    "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py": [
      "File: tests/token/erc721/test_ERC721_SafeMintable_mock.py -> tests/token/erc721/test_ERC721_SafeMintable_mock.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_event_emitted, get_contract_class, cached_contract, to_uint",
      "6: )",
      "",
      "[Removed Lines]",
      "4:     MockSigner, str_to_felt, ZERO_ADDRESS, INVALID_UINT256, assert_revert,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     str_to_felt, ZERO_ADDRESS, INVALID_UINT256, assert_revert,",
      "",
      "---------------"
    ],
    "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py||tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py": [
      "File: tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py -> tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     TRUE, assert_revert, to_uint, sub_uint, add_uint",
      "6: )",
      "",
      "[Removed Lines]",
      "4:     MockSigner, str_to_felt, MAX_UINT256, get_contract_class, cached_contract,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     str_to_felt, MAX_UINT256, get_contract_class, cached_contract,",
      "",
      "---------------"
    ],
    "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py": [
      "File: tests/upgrades/test_Proxy.py -> tests/upgrades/test_Proxy.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_revert,",
      "6:     get_contract_class,",
      "7:     cached_contract,",
      "",
      "[Removed Lines]",
      "4:     MockSigner,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "",
      "---------------"
    ],
    "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py": [
      "File: tests/upgrades/test_upgrades.py -> tests/upgrades/test_upgrades.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_revert,",
      "6:     assert_revert_entry_point,",
      "7:     assert_event_emitted,",
      "",
      "[Removed Lines]",
      "4:     MockSigner,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "",
      "---------------"
    ],
    "tests/utils.py||tests/utils.py": [
      "File: tests/utils.py -> tests/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from starkware.starkware_utils.error_handling import StarkException",
      "8: from starkware.starknet.testing.starknet import StarknetContract",
      "9: from starkware.starknet.business_logic.execution.objects import Event",
      "13: MAX_UINT256 = (2**128 - 1, 2**128 - 1)",
      "",
      "[Removed Lines]",
      "10: from nile.signer import Signer",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "130:         deploy_execution_info=deployed.deploy_execution_info",
      "131:     )",
      "132:     return contract",
      "",
      "[Removed Lines]",
      "135: class MockSigner():",
      "136:     \"\"\"",
      "137:     Utility for sending signed transactions to an Account on Starknet.",
      "139:     Parameters",
      "140:     ----------",
      "142:     private_key : int",
      "144:     Examples",
      "145:     ---------",
      "146:     Constructing a MockSigner object",
      "148:     >>> signer = MockSigner(1234)",
      "150:     Sending a transaction",
      "152:     >>> await signer.send_transaction(",
      "153:             account, contract_address, 'contract_method', [arg_1]",
      "154:         )",
      "156:     Sending multiple transactions",
      "158:     >>> await signer.send_transaction(",
      "159:             account, [",
      "160:                 (contract_address, 'contract_method', [arg_1]),",
      "161:                 (contract_address, 'another_method', [arg_1, arg_2])",
      "162:             ]",
      "163:         )",
      "165:     \"\"\"",
      "166:     def __init__(self, private_key):",
      "167:         self.signer = Signer(private_key)",
      "168:         self.public_key = self.signer.public_key",
      "170:     async def send_transaction(self, account, to, selector_name, calldata, nonce=None, max_fee=0):",
      "171:         return await self.send_transactions(account, [(to, selector_name, calldata)], nonce, max_fee)",
      "173:     async def send_transactions(self, account, calls, nonce=None, max_fee=0):",
      "174:         if nonce is None:",
      "175:             execution_info = await account.get_nonce().call()",
      "176:             nonce, = execution_info.result",
      "178:         build_calls = []",
      "179:         for call in calls:",
      "180:             build_call = list(call)",
      "181:             build_call[0] = hex(build_call[0])",
      "182:             build_calls.append(build_call)",
      "184:         (call_array, calldata, sig_r, sig_s) = self.signer.sign_transaction(hex(account.contract_address), build_calls, nonce, max_fee)",
      "185:         return await account.__execute__(call_array, calldata, nonce).invoke(signature=[sig_r, sig_s])",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d14e9dc49fdcdad71ef8b0c7edd91974bfd28535",
      "candidate_info": {
        "commit_hash": "d14e9dc49fdcdad71ef8b0c7edd91974bfd28535",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/d14e9dc49fdcdad71ef8b0c7edd91974bfd28535",
        "files": [
          "src/openzeppelin/account/library.cairo",
          "src/openzeppelin/upgrades/presets/Proxy.cairo",
          "src/openzeppelin/utils/constants/library.cairo",
          "tests/account/test_Account.py",
          "tests/account/test_EthAccount.py"
        ],
        "message": "Allow simulating calls in Account (#486)\n\n* feat: allow QUERY_VERSION in account\n\n* refactor: update error message\n\n* feat: update tests\n\n* fix: pr review comments\n\n* Update src/openzeppelin/utils/constants/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* feat: update tx version assertion logic\n\n* refactor: remove unnecessary constants\n\n* fix: update tests\n\n* feat: fix big compare\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>",
        "before_after_code_files": [
          "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo",
          "src/openzeppelin/upgrades/presets/Proxy.cairo||src/openzeppelin/upgrades/presets/Proxy.cairo",
          "src/openzeppelin/utils/constants/library.cairo||src/openzeppelin/utils/constants/library.cairo",
          "tests/account/test_Account.py||tests/account/test_Account.py",
          "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo",
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py"
          ],
          "candidate": [
            "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo",
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py"
          ]
        }
      },
      "candidate_diff": {
        "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo": [
          "File: src/openzeppelin/account/library.cairo -> src/openzeppelin/account/library.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from starkware.cairo.common.uint256 import Uint256",
          "11: from starkware.cairo.common.memcpy import memcpy",
          "12: from starkware.cairo.common.math import split_felt",
          "13: from starkware.cairo.common.bool import TRUE, FALSE",
          "14: from starkware.starknet.common.syscalls import (",
          "15:     call_contract,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: from starkware.cairo.common.math_cmp import is_le_felt",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     get_tx_info",
          "19: )",
          "20: from starkware.cairo.common.cairo_secp.signature import verify_eth_signature_uint256",
          "",
          "[Removed Lines]",
          "21: from openzeppelin.utils.constants.library import IACCOUNT_ID, IERC165_ID",
          "",
          "[Added Lines]",
          "22: from openzeppelin.utils.constants.library import (",
          "23:     IACCOUNT_ID,",
          "24:     IERC165_ID,",
          "25:     TRANSACTION_VERSION",
          "26: )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:         alloc_locals;",
          "177:         let (tx_info) = get_tx_info();",
          "180:         }",
          "183:         let (caller) = get_caller_address();",
          "185:             assert caller = 0;",
          "186:         }",
          "",
          "[Removed Lines]",
          "178:         with_attr error_message(\"Account: invalid tx version\") {",
          "179:             assert tx_info.version = 1;",
          "184:         with_attr error_message(\"Account: no reentrant call\") {",
          "",
          "[Added Lines]",
          "184:         with_attr error_message(\"Account: deprecated tx version\") {",
          "185:             assert is_le_felt(TRANSACTION_VERSION, tx_info.version) = TRUE;",
          "190:         with_attr error_message(\"Account: reentrant call\") {",
          "",
          "---------------"
        ],
        "src/openzeppelin/upgrades/presets/Proxy.cairo||src/openzeppelin/upgrades/presets/Proxy.cairo": [
          "File: src/openzeppelin/upgrades/presets/Proxy.cairo -> src/openzeppelin/upgrades/presets/Proxy.cairo"
        ],
        "src/openzeppelin/utils/constants/library.cairo||src/openzeppelin/utils/constants/library.cairo": [
          "File: src/openzeppelin/utils/constants/library.cairo -> src/openzeppelin/utils/constants/library.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: const DEFAULT_ADMIN_ROLE = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: const TRANSACTION_VERSION = 1;",
          "",
          "---------------"
        ],
        "tests/account/test_Account.py||tests/account/test_Account.py": [
          "File: tests/account/test_Account.py -> tests/account/test_Account.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:     await assert_revert(",
          "187:         signer.send_transaction(",
          "188:             account, attacker.contract_address, 'account_takeover', []),",
          "190:     )",
          "192:     execution_info = await account.getPublicKey().call()",
          "",
          "[Removed Lines]",
          "189:         reverted_with=\"Account: no reentrant call\"",
          "",
          "[Added Lines]",
          "189:         reverted_with=\"Account: reentrant call\"",
          "",
          "---------------"
        ],
        "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py": [
          "File: tests/account/test_EthAccount.py -> tests/account/test_EthAccount.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:     await assert_revert(",
          "202:         signer.send_transaction(",
          "203:             account, attacker.contract_address, 'account_takeover', []),",
          "205:     )",
          "207:     execution_info = await account.getEthAddress().call()",
          "",
          "[Removed Lines]",
          "204:         reverted_with=\"Account: no reentrant call\"",
          "",
          "[Added Lines]",
          "204:         reverted_with=\"Account: reentrant call\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "127712bef3b2fc832a11528c4aa17275b0b4a5d5",
      "candidate_info": {
        "commit_hash": "127712bef3b2fc832a11528c4aa17275b0b4a5d5",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/127712bef3b2fc832a11528c4aa17275b0b4a5d5",
        "files": [
          "src/openzeppelin/utils/presets/UniversalDeployer.cairo",
          "tests/account/test_Account.py",
          "tests/account/test_EthAccount.py",
          "tests/utils.py",
          "tests/utils/test_UniversalDeployer.py"
        ],
        "message": "Add deployer preset (#467)\n\n* add deployer preset\n\n* simplify if\n\n* move deployer\n\n* fix missing semicolon\n\n* fix syntax\n\n* centralize iaccount_id\n\n* update ethacc\n\n* rename vars, remove locals\n\n* rename vars\n\n* fix typo\n\n* add and fix tests\n\n* rename vars\n\n* Update src/openzeppelin/utils/presets/UniversalDeployer.cairo\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* conditionalize deployment from zero\n\n* add calldata to event log\n\n* add  and user passed salt to logged event\n\n* fix tests\n\n* fix event test\n\n* remove prefix when not unique\n\n* apply andrew's review suggestions\n\n* remove unnecessary tempvar\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>",
        "before_after_code_files": [
          "src/openzeppelin/utils/presets/UniversalDeployer.cairo||src/openzeppelin/utils/presets/UniversalDeployer.cairo",
          "tests/account/test_Account.py||tests/account/test_Account.py",
          "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
          "tests/utils.py||tests/utils.py",
          "tests/utils/test_UniversalDeployer.py||tests/utils/test_UniversalDeployer.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
            "tests/utils.py||tests/utils.py"
          ],
          "candidate": [
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
            "tests/utils.py||tests/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "src/openzeppelin/utils/presets/UniversalDeployer.cairo||src/openzeppelin/utils/presets/UniversalDeployer.cairo": [
          "File: src/openzeppelin/utils/presets/UniversalDeployer.cairo -> src/openzeppelin/utils/presets/UniversalDeployer.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: %lang starknet",
          "6: from starkware.starknet.common.syscalls import get_caller_address, deploy",
          "7: from starkware.cairo.common.cairo_builtins import HashBuiltin",
          "8: from starkware.cairo.common.hash import hash2",
          "9: from starkware.cairo.common.bool import FALSE, TRUE",
          "11: @event",
          "12: func ContractDeployed(",
          "13:     address: felt,",
          "14:     deployer: felt,",
          "15:     unique: felt,",
          "16:     classHash: felt,",
          "17:     calldata_len: felt,",
          "18:     calldata: felt*,",
          "19:     salt: felt",
          "20: ) {",
          "21: }",
          "23: @external",
          "24: func deployContract{",
          "25:     syscall_ptr: felt*,",
          "26:     pedersen_ptr: HashBuiltin*,",
          "27:     range_check_ptr",
          "28: }(",
          "29:     classHash: felt,",
          "30:     salt: felt,",
          "31:     unique: felt,",
          "32:     calldata_len: felt,",
          "33:     calldata: felt*",
          "34: ) -> (address: felt) {",
          "35:     alloc_locals;",
          "36:     let (deployer) = get_caller_address();",
          "38:     local _salt;",
          "39:     local from_zero;",
          "40:     if (unique == TRUE) {",
          "41:         let (unique_salt) = hash2{hash_ptr=pedersen_ptr}(deployer, salt);",
          "42:         _salt = unique_salt;",
          "43:         from_zero = FALSE;",
          "44:         tempvar _pedersen = pedersen_ptr;",
          "45:     } else {",
          "46:         _salt = salt;",
          "47:         from_zero = TRUE;",
          "48:         tempvar _pedersen = pedersen_ptr;",
          "49:     }",
          "51:     let pedersen_ptr = _pedersen;",
          "53:     let (address) = deploy(",
          "54:         class_hash=classHash,",
          "55:         contract_address_salt=_salt,",
          "56:         constructor_calldata_size=calldata_len,",
          "57:         constructor_calldata=calldata,",
          "58:         deploy_from_zero=from_zero,",
          "59:     );",
          "61:     ContractDeployed.emit(",
          "62:         address=address,",
          "63:         deployer=deployer,",
          "64:         unique=unique,",
          "65:         classHash=classHash,",
          "66:         calldata_len=calldata_len,",
          "67:         calldata=calldata,",
          "68:         salt=salt",
          "69:     );",
          "71:     return (address=address);",
          "72: }",
          "",
          "---------------"
        ],
        "tests/account/test_Account.py||tests/account/test_Account.py": [
          "File: tests/account/test_Account.py -> tests/account/test_Account.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner, get_raw_invoke",
          "3: from nile.utils import TRUE, assert_revert",
          "7: signer = MockSigner(123456789987654321)",
          "8: other = MockSigner(987654321123456789)",
          "13: @pytest.fixture(scope='module')",
          "14: def contract_classes():",
          "",
          "[Removed Lines]",
          "4: from utils import get_contract_class, cached_contract, State, Account",
          "10: IACCOUNT_ID = 0xa66bd575",
          "",
          "[Added Lines]",
          "4: from utils import get_contract_class, cached_contract, State, Account, IACCOUNT_ID",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:     read_info = await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
          "114:     call_info = await initializable.initialized().call()",
          "115:     (call_result, ) = call_info.result",
          "119: @ pytest.mark.asyncio",
          "",
          "[Removed Lines]",
          "116:     assert read_info.call_info.retdata[1] == call_result #1",
          "",
          "[Added Lines]",
          "114:     assert read_info.call_info.retdata[1] == call_result  # 1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:     # higher nonce",
          "141:     await assert_revert(",
          "143:         reverted_with=\"Invalid transaction nonce. Expected: {}, got: {}.\".format(",
          "144:             current_nonce, current_nonce + 1",
          "145:         )",
          "",
          "[Removed Lines]",
          "142:         signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], nonce=current_nonce + 1),",
          "",
          "[Added Lines]",
          "140:         signer.send_transactions(account, [(",
          "141:             initializable.contract_address, 'initialize', [])], nonce=current_nonce + 1),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "185:     account, _, _, _, attacker = account_factory",
          "187:     await assert_revert(",
          "189:         reverted_with=\"Account: no reentrant call\"",
          "190:     )",
          "",
          "[Removed Lines]",
          "188:         signer.send_transaction(account, attacker.contract_address, 'account_takeover', []),",
          "",
          "[Added Lines]",
          "187:         signer.send_transaction(",
          "188:             account, attacker.contract_address, 'account_takeover', []),",
          "",
          "---------------"
        ],
        "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py": [
          "File: tests/account/test_EthAccount.py -> tests/account/test_EthAccount.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from nile.utils import assert_revert, TRUE, FALSE",
          "4: from signers import MockEthSigner, get_raw_invoke",
          "6: private_key = b'\\x01' * 32",
          "7: signer = MockEthSigner(b'\\x01' * 32)",
          "8: other = MockEthSigner(b'\\x02' * 32)",
          "13: @pytest.fixture(scope='module')",
          "14: def contract_defs():",
          "",
          "[Removed Lines]",
          "3: from utils import get_contract_class, cached_contract, State",
          "10: IACCOUNT_ID = 0xa66bd575",
          "",
          "[Added Lines]",
          "3: from utils import get_contract_class, cached_contract, State, IACCOUNT_ID",
          "",
          "---------------"
        ],
        "tests/utils.py||tests/utils.py": [
          "File: tests/utils.py -> tests/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Utilities for testing Cairo contracts.\"\"\"",
          "4: import os",
          "5: from starkware.starknet.compiler.compile import compile_starknet_files",
          "6: from starkware.starknet.testing.starknet import StarknetContract",
          "7: from starkware.starknet.testing.starknet import Starknet",
          "12: _root = Path(__file__).parent.parent",
          "",
          "[Removed Lines]",
          "3: from pathlib import Path",
          "8: from starkware.starknet.business_logic.execution.objects import OrderedEvent",
          "9: from starkware.starknet.public.abi import get_selector_from_name",
          "",
          "[Added Lines]",
          "4: from pathlib import Path",
          "5: from starkware.starknet.public.abi import get_selector_from_name",
          "6: from starkware.starknet.business_logic.execution.objects import OrderedEvent",
          "11: MAX_UINT256 = (2**128 - 1, 2**128 - 1)",
          "12: INVALID_UINT256 = (MAX_UINT256[0] + 1, MAX_UINT256[1])",
          "13: ZERO_ADDRESS = 0",
          "14: TRUE = 1",
          "15: FALSE = 0",
          "16: IACCOUNT_ID = 0xa66bd575",
          "",
          "---------------"
        ],
        "tests/utils/test_UniversalDeployer.py||tests/utils/test_UniversalDeployer.py": [
          "File: tests/utils/test_UniversalDeployer.py -> tests/utils/test_UniversalDeployer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import pytest",
          "2: from starkware.starknet.core.os.contract_address.contract_address import calculate_contract_address_from_hash",
          "3: from starkware.crypto.signature.fast_pedersen_hash import pedersen_hash",
          "4: from starkware.starknet.core.os.class_hash import compute_class_hash",
          "6: from signers import MockSigner",
          "7: from utils import (",
          "8:     State,",
          "9:     Account,",
          "10:     get_contract_class,",
          "11:     assert_event_emitted,",
          "12:     cached_contract,",
          "13:     IACCOUNT_ID,",
          "14:     FALSE,",
          "15:     TRUE,",
          "16: )",
          "18: signer = MockSigner(123456789987654321)",
          "21: @pytest.fixture(scope='module')",
          "22: def contract_classes():",
          "23:     account_cls = Account.get_class",
          "24:     deployer_cls = get_contract_class('UniversalDeployer')",
          "26:     return account_cls, deployer_cls",
          "29: @pytest.fixture(scope='module')",
          "30: async def deployer_init(contract_classes):",
          "31:     _, deployer_cls = contract_classes",
          "32:     starknet = await State.init()",
          "33:     account = await Account.deploy(signer.public_key)",
          "34:     deployer = await starknet.deploy(contract_class=deployer_cls)",
          "35:     return (",
          "36:         starknet.state,",
          "37:         account,",
          "38:         deployer",
          "39:     )",
          "42: @pytest.fixture",
          "43: def deployer_factory(contract_classes, deployer_init):",
          "44:     account_cls, deployer_cls = contract_classes",
          "45:     state, account, deployer = deployer_init",
          "46:     _state = state.copy()",
          "47:     _account = cached_contract(_state, account_cls, account)",
          "48:     deployer = cached_contract(_state, deployer_cls, deployer)",
          "50:     return _account, deployer",
          "53: @pytest.mark.asyncio",
          "54: @pytest.mark.parametrize('unique', [TRUE, FALSE])",
          "55: async def test_deployment(deployer_factory, unique):",
          "56:     account, deployer = deployer_factory",
          "57:     salt = 1234567875432  # random value",
          "58:     calldata = [signer.public_key]",
          "59:     class_hash = compute_class_hash(",
          "60:         contract_class=Account.get_class, hash_func=pedersen_hash)",
          "62:     # deploy contract",
          "63:     params = [class_hash, salt, unique, len(calldata), *calldata]",
          "64:     deploy_exec_info = await signer.send_transaction(account, deployer.contract_address, 'deployContract', params)",
          "65:     deployed_address = deploy_exec_info.call_info.retdata[1]",
          "67:     # check address",
          "68:     if unique:",
          "69:         actual_salt = pedersen_hash(account.contract_address, salt)",
          "70:         deployer_address = deployer.contract_address",
          "71:     else:",
          "72:         actual_salt = salt",
          "73:         deployer_address = 0",
          "75:     expected_address = calculate_contract_address_from_hash(",
          "76:         salt=actual_salt,",
          "77:         class_hash=class_hash,",
          "78:         constructor_calldata=calldata,",
          "79:         deployer_address=deployer_address",
          "80:     )",
          "82:     assert deployed_address == expected_address",
          "84:     # check deployment",
          "85:     tx_exec_info = await signer.send_transaction(account, deployed_address, 'supportsInterface', [IACCOUNT_ID])",
          "86:     is_account = tx_exec_info.call_info.retdata[1]",
          "87:     assert is_account == TRUE",
          "89:     assert_event_emitted(",
          "90:         deploy_exec_info,",
          "91:         from_address=deployer.contract_address,",
          "92:         name='ContractDeployed',",
          "93:         data=[",
          "94:             deployed_address,         # contractAddress",
          "95:             account.contract_address, # deployer",
          "96:             unique,                   # unique",
          "97:             class_hash,               # classHash",
          "98:             len(calldata),            # calldata_len",
          "100:             salt,                     # salt",
          "101:         ]",
          "102:     )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0d2839ce0f681b89c7cc5dbb7b0ca784b96002f",
      "candidate_info": {
        "commit_hash": "d0d2839ce0f681b89c7cc5dbb7b0ca784b96002f",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/d0d2839ce0f681b89c7cc5dbb7b0ca784b96002f",
        "files": [
          "tests/access/OwnableBaseSuite.py",
          "tests/access/test_AccessControl.py",
          "tests/access/test_Ownable.py",
          "tests/account/test_Account.py",
          "tests/account/test_EthAccount.py",
          "tests/introspection/test_ERC165.py",
          "tests/security/test_initializable.py",
          "tests/security/test_pausable.py",
          "tests/security/test_reentrancy.py",
          "tests/security/test_safemath.py",
          "tests/signers.py",
          "tests/token/erc20/ERC20BaseSuite.py",
          "tests/token/erc20/test_ERC20Burnable.py",
          "tests/token/erc20/test_ERC20Mintable.py",
          "tests/token/erc20/test_ERC20Pausable.py",
          "tests/token/erc20/test_ERC20Upgradeable.py",
          "tests/token/erc721/ERC721BaseSuite.py",
          "tests/token/erc721/test_ERC721EnumerableMintableBurnable.py",
          "tests/token/erc721/test_ERC721MintableBurnable.py",
          "tests/token/erc721/test_ERC721MintablePausable.py",
          "tests/token/erc721/test_ERC721SafeMintableMock.py",
          "tests/upgrades/test_Proxy.py",
          "tests/upgrades/test_upgrades.py",
          "tests/utils.py"
        ],
        "message": "import utils from nile (#450)",
        "before_after_code_files": [
          "tests/access/OwnableBaseSuite.py||tests/access/OwnableBaseSuite.py",
          "tests/access/test_AccessControl.py||tests/access/test_AccessControl.py",
          "tests/access/test_Ownable.py||tests/access/test_Ownable.py",
          "tests/account/test_Account.py||tests/account/test_Account.py",
          "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
          "tests/introspection/test_ERC165.py||tests/introspection/test_ERC165.py",
          "tests/security/test_initializable.py||tests/security/test_initializable.py",
          "tests/security/test_pausable.py||tests/security/test_pausable.py",
          "tests/security/test_reentrancy.py||tests/security/test_reentrancy.py",
          "tests/security/test_safemath.py||tests/security/test_safemath.py",
          "tests/signers.py||tests/signers.py",
          "tests/token/erc20/ERC20BaseSuite.py||tests/token/erc20/ERC20BaseSuite.py",
          "tests/token/erc20/test_ERC20Burnable.py||tests/token/erc20/test_ERC20Burnable.py",
          "tests/token/erc20/test_ERC20Mintable.py||tests/token/erc20/test_ERC20Mintable.py",
          "tests/token/erc20/test_ERC20Pausable.py||tests/token/erc20/test_ERC20Pausable.py",
          "tests/token/erc20/test_ERC20Upgradeable.py||tests/token/erc20/test_ERC20Upgradeable.py",
          "tests/token/erc721/ERC721BaseSuite.py||tests/token/erc721/ERC721BaseSuite.py",
          "tests/token/erc721/test_ERC721EnumerableMintableBurnable.py||tests/token/erc721/test_ERC721EnumerableMintableBurnable.py",
          "tests/token/erc721/test_ERC721MintableBurnable.py||tests/token/erc721/test_ERC721MintableBurnable.py",
          "tests/token/erc721/test_ERC721MintablePausable.py||tests/token/erc721/test_ERC721MintablePausable.py",
          "tests/token/erc721/test_ERC721SafeMintableMock.py||tests/token/erc721/test_ERC721SafeMintableMock.py",
          "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
          "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py",
          "tests/utils.py||tests/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/access/test_Ownable.py||tests/access/test_Ownable.py",
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
            "tests/security/test_pausable.py||tests/security/test_pausable.py",
            "tests/signers.py||tests/signers.py",
            "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
            "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py",
            "tests/utils.py||tests/utils.py"
          ],
          "candidate": [
            "tests/access/test_Ownable.py||tests/access/test_Ownable.py",
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
            "tests/security/test_pausable.py||tests/security/test_pausable.py",
            "tests/signers.py||tests/signers.py",
            "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
            "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py",
            "tests/utils.py||tests/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/access/OwnableBaseSuite.py||tests/access/OwnableBaseSuite.py": [
          "File: tests/access/OwnableBaseSuite.py -> tests/access/OwnableBaseSuite.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "9: signer = MockSigner(123456789987654321)",
          "",
          "[Removed Lines]",
          "3: from utils import (",
          "4:     ZERO_ADDRESS,",
          "5:     assert_event_emitted,",
          "6: )",
          "",
          "[Added Lines]",
          "3: from nile.utils import ZERO_ADDRESS",
          "4: from utils import assert_event_emitted",
          "",
          "---------------"
        ],
        "tests/access/test_AccessControl.py||tests/access/test_AccessControl.py": [
          "File: tests/access/test_AccessControl.py -> tests/access/test_AccessControl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from pathlib import Path",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "9: )",
          "11: DEFAULT_ADMIN_ROLE = 0",
          "",
          "[Removed Lines]",
          "5:     TRUE, FALSE,",
          "6:     assert_event_emitted, assert_revert,",
          "7:     get_contract_class, cached_contract,",
          "8:     State, Account",
          "",
          "[Added Lines]",
          "4: from nile.utils import TRUE, FALSE, assert_revert",
          "6:     State, Account, assert_event_emitted, get_contract_class, cached_contract",
          "",
          "---------------"
        ],
        "tests/access/test_Ownable.py||tests/access/test_Ownable.py": [
          "File: tests/access/test_Ownable.py -> tests/access/test_Ownable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "4: from OwnableBaseSuite import OwnableBase",
          "",
          "[Removed Lines]",
          "3: from utils import  get_contract_class, assert_revert, cached_contract, State, Account",
          "",
          "[Added Lines]",
          "3: from nile.utils import assert_revert",
          "4: from utils import State, Account, get_contract_class, cached_contract",
          "",
          "---------------"
        ],
        "tests/account/test_Account.py||tests/account/test_Account.py": [
          "File: tests/account/test_Account.py -> tests/account/test_Account.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner, get_raw_invoke",
          "6: signer = MockSigner(123456789987654321)",
          "",
          "[Removed Lines]",
          "3: from utils import assert_revert, get_contract_class, cached_contract, TRUE, State, Account",
          "",
          "[Added Lines]",
          "3: from nile.utils import TRUE, assert_revert",
          "4: from utils import get_contract_class, cached_contract, State, Account",
          "",
          "---------------"
        ],
        "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py": [
          "File: tests/account/test_EthAccount.py -> tests/account/test_EthAccount.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockEthSigner, get_raw_invoke",
          "5: private_key = b'\\x01' * 32",
          "",
          "[Removed Lines]",
          "2: from utils import assert_revert, get_contract_class, cached_contract, TRUE, FALSE, State",
          "",
          "[Added Lines]",
          "2: from nile.utils import assert_revert, TRUE, FALSE",
          "3: from utils import get_contract_class, cached_contract, State",
          "",
          "---------------"
        ],
        "tests/introspection/test_ERC165.py||tests/introspection/test_ERC165.py": [
          "File: tests/introspection/test_ERC165.py -> tests/introspection/test_ERC165.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from utils import (",
          "4:     get_contract_class,",
          "5:     cached_contract,",
          "8:     State",
          "9: )",
          "",
          "[Removed Lines]",
          "3:     assert_revert,",
          "6:     TRUE,",
          "7:     FALSE,",
          "",
          "[Added Lines]",
          "2: from nile.utils import assert_revert, TRUE, FALSE",
          "",
          "---------------"
        ],
        "tests/security/test_initializable.py||tests/security/test_initializable.py": [
          "File: tests/security/test_initializable.py -> tests/security/test_initializable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "5: @pytest.mark.asyncio",
          "",
          "[Removed Lines]",
          "2: from utils import TRUE, FALSE, assert_revert, get_contract_class, State",
          "",
          "[Added Lines]",
          "2: from nile.utils import TRUE, FALSE, assert_revert",
          "3: from utils import get_contract_class, State",
          "",
          "---------------"
        ],
        "tests/security/test_pausable.py||tests/security/test_pausable.py": [
          "File: tests/security/test_pausable.py -> tests/security/test_pausable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "3: from utils import (",
          "6: )",
          "",
          "[Removed Lines]",
          "4:     TRUE, FALSE, assert_revert, assert_event_emitted,",
          "5:     get_contract_class, cached_contract, State, Account",
          "",
          "[Added Lines]",
          "3: from nile.utils import TRUE, FALSE, assert_revert",
          "5:     get_contract_class, cached_contract, assert_event_emitted, State, Account",
          "",
          "---------------"
        ],
        "tests/security/test_reentrancy.py||tests/security/test_reentrancy.py": [
          "File: tests/security/test_reentrancy.py -> tests/security/test_reentrancy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "6: INITIAL_COUNTER = 0",
          "",
          "[Removed Lines]",
          "2: from utils import (",
          "3:     assert_revert, get_contract_class, State",
          "4: )",
          "",
          "[Added Lines]",
          "2: from nile.utils import assert_revert",
          "3: from utils import get_contract_class, State",
          "",
          "---------------"
        ],
        "tests/security/test_safemath.py||tests/security/test_safemath.py": [
          "File: tests/security/test_safemath.py -> tests/security/test_safemath.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3:     MAX_UINT256, assert_revert, add_uint, sub_uint,",
          "6: )",
          "9: @pytest.fixture(scope='module')",
          "",
          "[Removed Lines]",
          "2: from utils import (",
          "4:     mul_uint, div_rem_uint, to_uint,",
          "5:     get_contract_class, State",
          "",
          "[Added Lines]",
          "2: from nile.utils import (",
          "4:     mul_uint, div_rem_uint, to_uint",
          "6: from utils import get_contract_class, State",
          "",
          "---------------"
        ],
        "tests/signers.py||tests/signers.py": [
          "File: tests/signers.py -> tests/signers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from starkware.starknet.services.api.gateway.transaction import InvokeFunction",
          "3: from starkware.starknet.business_logic.transaction.objects import InternalTransaction, TransactionExecutionInfo",
          "4: from nile.signer import Signer, from_call_to_call_array, get_transaction_hash, TRANSACTION_VERSION",
          "6: import eth_keys",
          "",
          "[Removed Lines]",
          "5: from utils import to_uint",
          "",
          "[Added Lines]",
          "5: from nile.utils import to_uint",
          "",
          "---------------"
        ],
        "tests/token/erc20/ERC20BaseSuite.py||tests/token/erc20/ERC20BaseSuite.py": [
          "File: tests/token/erc20/ERC20BaseSuite.py -> tests/token/erc20/ERC20BaseSuite.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "4:     to_uint, add_uint, sub_uint, str_to_felt, MAX_UINT256, ZERO_ADDRESS,",
          "7: )",
          "",
          "[Removed Lines]",
          "3: from utils import (",
          "5:     INVALID_UINT256, TRUE, assert_revert, assert_event_emitted, assert_events_emitted,",
          "6:     contract_path, State",
          "",
          "[Added Lines]",
          "3: from nile.utils import (",
          "5:     INVALID_UINT256, TRUE, assert_revert",
          "6: )",
          "7: from utils import (",
          "8:     assert_event_emitted, assert_events_emitted, contract_path, State",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20Burnable.py||tests/token/erc20/test_ERC20Burnable.py": [
          "File: tests/token/erc20/test_ERC20Burnable.py -> tests/token/erc20/test_ERC20Burnable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "3: from utils import (",
          "7: )",
          "8: from ERC20BaseSuite import (",
          "9:     ERC20Base, NAME, SYMBOL, DECIMALS, INIT_SUPPLY, AMOUNT, UINT_ONE, UINT_ZERO",
          "",
          "[Removed Lines]",
          "4:     add_uint, sub_uint, ZERO_ADDRESS, INVALID_UINT256,",
          "5:     get_contract_class, cached_contract, assert_revert, assert_event_emitted,",
          "6:     assert_events_emitted, State, Account",
          "",
          "[Added Lines]",
          "3: from nile.utils import (",
          "4:     add_uint, sub_uint, ZERO_ADDRESS, INVALID_UINT256, assert_revert,",
          "5: )",
          "7:     get_contract_class, cached_contract, assert_events_emitted,",
          "8:     assert_event_emitted, State, Account",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20Mintable.py||tests/token/erc20/test_ERC20Mintable.py": [
          "File: tests/token/erc20/test_ERC20Mintable.py -> tests/token/erc20/test_ERC20Mintable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "3: from utils import (",
          "7: )",
          "8: from ERC20BaseSuite import ERC20Base, NAME, SYMBOL, DECIMALS, INIT_SUPPLY, UINT_ONE",
          "9: from access.OwnableBaseSuite import OwnableBase",
          "",
          "[Removed Lines]",
          "4:     add_uint, sub_uint, MAX_UINT256, ZERO_ADDRESS, INVALID_UINT256,",
          "5:     get_contract_class, cached_contract, assert_revert, assert_event_emitted,",
          "6:     State, Account",
          "",
          "[Added Lines]",
          "3: from nile.utils import (",
          "4:     add_uint, sub_uint, MAX_UINT256, ZERO_ADDRESS, INVALID_UINT256, assert_revert",
          "5: )",
          "7:     get_contract_class, cached_contract, assert_event_emitted, State, Account",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20Pausable.py||tests/token/erc20/test_ERC20Pausable.py": [
          "File: tests/token/erc20/test_ERC20Pausable.py -> tests/token/erc20/test_ERC20Pausable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "3: from utils import (",
          "6: )",
          "7: from ERC20BaseSuite import ERC20Base, NAME, SYMBOL, DECIMALS, INIT_SUPPLY, AMOUNT",
          "8: from access.OwnableBaseSuite import OwnableBase",
          "",
          "[Removed Lines]",
          "4:     TRUE, FALSE, assert_revert, get_contract_class,",
          "5:     cached_contract, State, Account",
          "",
          "[Added Lines]",
          "3: from nile.utils import TRUE, FALSE, assert_revert",
          "5:     get_contract_class, cached_contract, State, Account",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20Upgradeable.py||tests/token/erc20/test_ERC20Upgradeable.py": [
          "File: tests/token/erc20/test_ERC20Upgradeable.py -> tests/token/erc20/test_ERC20Upgradeable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "10: signer = MockSigner(123456789987654321)",
          "",
          "[Removed Lines]",
          "3: from utils import (",
          "4:     to_uint, sub_uint, str_to_felt, assert_revert, TRUE,",
          "5:     get_contract_class, cached_contract, State, Account,",
          "6:     get_selector_from_name",
          "7: )",
          "",
          "[Added Lines]",
          "2: from starkware.starknet.public.abi import get_selector_from_name",
          "4: from nile.utils import to_uint, sub_uint, str_to_felt, assert_revert, TRUE",
          "5: from utils import get_contract_class, cached_contract, State, Account",
          "",
          "---------------"
        ],
        "tests/token/erc721/ERC721BaseSuite.py||tests/token/erc721/ERC721BaseSuite.py": [
          "File: tests/token/erc721/ERC721BaseSuite.py -> tests/token/erc721/ERC721BaseSuite.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "4:     str_to_felt, ZERO_ADDRESS, TRUE, FALSE, assert_revert, INVALID_UINT256,",
          "6: )",
          "",
          "[Removed Lines]",
          "3: from utils import (",
          "5:     assert_event_emitted, assert_events_emitted, to_uint, sub_uint, add_uint,",
          "",
          "[Added Lines]",
          "3: from nile.utils import (",
          "5:     to_uint, sub_uint, add_uint",
          "6: )",
          "7: from utils import (",
          "8:     assert_event_emitted, assert_events_emitted,",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721EnumerableMintableBurnable.py||tests/token/erc721/test_ERC721EnumerableMintableBurnable.py": [
          "File: tests/token/erc721/test_ERC721EnumerableMintableBurnable.py -> tests/token/erc721/test_ERC721EnumerableMintableBurnable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "3: from utils import (",
          "7: )",
          "9: from access.OwnableBaseSuite import OwnableBase",
          "",
          "[Removed Lines]",
          "4:     MAX_UINT256, get_contract_class, cached_contract, TRUE,",
          "5:     assert_revert, assert_event_emitted, assert_events_emitted, to_uint,",
          "6:     sub_uint, add_uint, ZERO_ADDRESS, State, Account",
          "8: from ERC721BaseSuite import ERC721Base, NAME, SYMBOL, NONEXISTENT_TOKEN, DATA, RECIPIENT",
          "",
          "[Added Lines]",
          "3: from nile.utils import (",
          "4:     MAX_UINT256, ZERO_ADDRESS, TRUE, assert_revert, to_uint, sub_uint, add_uint",
          "5: )",
          "7:     get_contract_class, cached_contract, assert_event_emitted,",
          "8:     assert_events_emitted, State, Account",
          "9: )",
          "10: from ERC721BaseSuite import (",
          "11:     ERC721Base, NAME, SYMBOL, NONEXISTENT_TOKEN, DATA, RECIPIENT",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721MintableBurnable.py||tests/token/erc721/test_ERC721MintableBurnable.py": [
          "File: tests/token/erc721/test_ERC721MintableBurnable.py -> tests/token/erc721/test_ERC721MintableBurnable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "3: from utils import (",
          "7: )",
          "9: from access.OwnableBaseSuite import OwnableBase",
          "",
          "[Removed Lines]",
          "4:     ZERO_ADDRESS, assert_revert, assert_event_emitted,",
          "5:     assert_events_emitted, get_contract_class, cached_contract, to_uint,",
          "6:     sub_uint, State, Account",
          "8: from ERC721BaseSuite import ERC721Base, NAME, SYMBOL, NONEXISTENT_TOKEN, TOKENS, TOKEN",
          "",
          "[Added Lines]",
          "3: from nile.utils import ZERO_ADDRESS, assert_revert, to_uint, sub_uint",
          "5:     get_contract_class, cached_contract, assert_event_emitted,",
          "6:     assert_events_emitted, State, Account",
          "7: )",
          "8: from ERC721BaseSuite import (",
          "9:     ERC721Base, NAME, SYMBOL, NONEXISTENT_TOKEN, TOKENS, TOKEN",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721MintablePausable.py||tests/token/erc721/test_ERC721MintablePausable.py": [
          "File: tests/token/erc721/test_ERC721MintablePausable.py -> tests/token/erc721/test_ERC721MintablePausable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "3: from utils import (",
          "6: )",
          "8: from access.OwnableBaseSuite import OwnableBase",
          "",
          "[Removed Lines]",
          "4:     str_to_felt, TRUE, FALSE, get_contract_class, cached_contract,",
          "5:     assert_revert, assert_event_emitted, to_uint, ZERO_ADDRESS, State, Account",
          "7: from ERC721BaseSuite import ERC721Base, NAME, SYMBOL, TOKENS, TOKEN, NONEXISTENT_TOKEN, DATA",
          "",
          "[Added Lines]",
          "3: from nile.utils import TRUE, FALSE, ZERO_ADDRESS, assert_revert, to_uint",
          "5:     get_contract_class, cached_contract, assert_event_emitted, State, Account",
          "6: )",
          "7: from ERC721BaseSuite import (",
          "8:     ERC721Base, NAME, SYMBOL, TOKENS, TOKEN, NONEXISTENT_TOKEN, DATA",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721SafeMintableMock.py||tests/token/erc721/test_ERC721SafeMintableMock.py": [
          "File: tests/token/erc721/test_ERC721SafeMintableMock.py -> tests/token/erc721/test_ERC721SafeMintableMock.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "3: from utils import (",
          "7: )",
          "8: from ERC721BaseSuite import ERC721Base, NAME, SYMBOL, DATA, TOKEN, TOKENS",
          "9: from access.OwnableBaseSuite import OwnableBase",
          "",
          "[Removed Lines]",
          "4:     ZERO_ADDRESS, INVALID_UINT256, assert_revert,",
          "5:     assert_event_emitted, get_contract_class, cached_contract, to_uint,",
          "6:     State, Account",
          "",
          "[Added Lines]",
          "3: from nile.utils import (",
          "4:     ZERO_ADDRESS, INVALID_UINT256, assert_revert, to_uint",
          "5: )",
          "7:     get_contract_class, cached_contract, assert_event_emitted, State, Account",
          "",
          "---------------"
        ],
        "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py": [
          "File: tests/upgrades/test_Proxy.py -> tests/upgrades/test_Proxy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "3: from utils import (",
          "5:     get_contract_class,",
          "6:     cached_contract,",
          "7:     assert_event_emitted,",
          "10:     State,",
          "11:     Account",
          "12: )",
          "",
          "[Removed Lines]",
          "4:     assert_revert,",
          "8:     assert_revert_entry_point,",
          "9:     get_selector_from_name,",
          "",
          "[Added Lines]",
          "2: from starkware.starknet.public.abi import get_selector_from_name",
          "4: from nile.utils import (",
          "5:     assert_revert, assert_revert_entry_point",
          "6: )",
          "",
          "---------------"
        ],
        "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py": [
          "File: tests/upgrades/test_upgrades.py -> tests/upgrades/test_upgrades.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "3: from utils import (",
          "4:     State,",
          "5:     Account,",
          "8:     assert_event_emitted,",
          "9:     get_contract_class,",
          "10:     cached_contract,",
          "13: )",
          "",
          "[Removed Lines]",
          "6:     assert_revert,",
          "7:     assert_revert_entry_point,",
          "11:     get_selector_from_name,",
          "12:     FALSE, TRUE",
          "",
          "[Added Lines]",
          "3: from starkware.starknet.public.abi import get_selector_from_name",
          "4: from nile.utils import assert_revert, assert_revert_entry_point, FALSE, TRUE",
          "",
          "---------------"
        ],
        "tests/utils.py||tests/utils.py": [
          "File: tests/utils.py -> tests/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Utilities for testing Cairo contracts.\"\"\"",
          "3: from pathlib import Path",
          "5: import os",
          "7: from starkware.starknet.compiler.compile import compile_starknet_files",
          "9: from starkware.starknet.testing.starknet import StarknetContract",
          "10: from starkware.starknet.testing.starknet import Starknet",
          "11: from starkware.starknet.business_logic.execution.objects import OrderedEvent",
          "21: _root = Path(__file__).parent.parent",
          "",
          "[Removed Lines]",
          "4: import math",
          "6: from starkware.starknet.public.abi import get_selector_from_name",
          "8: from starkware.starkware_utils.error_handling import StarkException",
          "14: MAX_UINT256 = (2**128 - 1, 2**128 - 1)",
          "15: INVALID_UINT256 = (MAX_UINT256[0] + 1, MAX_UINT256[1])",
          "16: ZERO_ADDRESS = 0",
          "17: TRUE = 1",
          "18: FALSE = 0",
          "",
          "[Added Lines]",
          "9: from starkware.starknet.public.abi import get_selector_from_name",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:         return str(_root / \"src\" / name)",
          "105: def assert_event_emitted(tx_exec_info, from_address, name, data, order=0):",
          "106:     \"\"\"Assert one single event is fired with correct data.\"\"\"",
          "107:     assert_events_emitted(tx_exec_info, [(order, from_address, name, data)])",
          "",
          "[Removed Lines]",
          "31: def str_to_felt(text):",
          "32:     b_text = bytes(text, \"ascii\")",
          "33:     return int.from_bytes(b_text, \"big\")",
          "36: def felt_to_str(felt):",
          "37:     b_felt = felt.to_bytes(31, \"big\")",
          "38:     return b_felt.decode()",
          "41: def uint(a):",
          "42:     return(a, 0)",
          "45: def to_uint(a):",
          "46:     \"\"\"Takes in value, returns uint256-ish tuple.\"\"\"",
          "47:     return (a & ((1 << 128) - 1), a >> 128)",
          "50: def from_uint(uint):",
          "51:     \"\"\"Takes in uint256-ish tuple, returns value.\"\"\"",
          "52:     return uint[0] + (uint[1] << 128)",
          "55: def add_uint(a, b):",
          "56:     \"\"\"Returns the sum of two uint256-ish tuples.\"\"\"",
          "57:     a = from_uint(a)",
          "58:     b = from_uint(b)",
          "59:     c = a + b",
          "60:     return to_uint(c)",
          "63: def sub_uint(a, b):",
          "64:     \"\"\"Returns the difference of two uint256-ish tuples.\"\"\"",
          "65:     a = from_uint(a)",
          "66:     b = from_uint(b)",
          "67:     c = a - b",
          "68:     return to_uint(c)",
          "71: def mul_uint(a, b):",
          "72:     \"\"\"Returns the product of two uint256-ish tuples.\"\"\"",
          "73:     a = from_uint(a)",
          "74:     b = from_uint(b)",
          "75:     c = a * b",
          "76:     return to_uint(c)",
          "79: def div_rem_uint(a, b):",
          "80:     \"\"\"Returns the quotient and remainder of two uint256-ish tuples.\"\"\"",
          "81:     a = from_uint(a)",
          "82:     b = from_uint(b)",
          "83:     c = math.trunc(a / b)",
          "84:     m = a % b",
          "85:     return (to_uint(c), to_uint(m))",
          "88: async def assert_revert(fun, reverted_with=None):",
          "89:     try:",
          "90:         await fun",
          "91:         assert False",
          "92:     except StarkException as err:",
          "93:         _, error = err.args",
          "94:         if reverted_with is not None:",
          "95:             assert reverted_with in error['message']",
          "98: async def assert_revert_entry_point(fun, invalid_selector):",
          "99:     selector_hex = hex(get_selector_from_name(invalid_selector))",
          "100:     entry_point_msg = f\"Entry point {selector_hex} not found in contract\"",
          "102:     await assert_revert(fun, entry_point_msg)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7df5a64f88f5e42d922a4dc05a7bea744e61b0ad",
      "candidate_info": {
        "commit_hash": "7df5a64f88f5e42d922a4dc05a7bea744e61b0ad",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/7df5a64f88f5e42d922a4dc05a7bea744e61b0ad",
        "files": [
          "docs/modules/ROOT/pages/utilities.adoc",
          "tests/access/test_AccessControl.py",
          "tests/access/test_Ownable.py",
          "tests/account/test_Account.py",
          "tests/account/test_AddressRegistry.py",
          "tests/account/test_EthAccount.py",
          "tests/introspection/test_ERC165.py",
          "tests/security/test_initializable.py",
          "tests/security/test_pausable.py",
          "tests/security/test_reentrancy.py",
          "tests/security/test_safemath.py",
          "tests/token/erc20/test_ERC20.py",
          "tests/token/erc20/test_ERC20BurnableMock.py",
          "tests/token/erc20/test_ERC20Mintable.py",
          "tests/token/erc20/test_ERC20Pausable.py",
          "tests/token/erc20/test_ERC20Upgradeable.py",
          "tests/token/erc721/test_ERC721EnumerableMintableBurnable.py",
          "tests/token/erc721/test_ERC721MintableBurnable.py",
          "tests/token/erc721/test_ERC721MintablePausable.py",
          "tests/token/erc721/test_ERC721SafeMintableMock.py",
          "tests/upgrades/test_Proxy.py",
          "tests/upgrades/test_upgrades.py",
          "tests/utils.py"
        ],
        "message": "Deploy account util (#339)\n\n* add State and Account classes\n\n* add State and Account sections\n\n* update tests with State and Account\n\n* fix codeblock\n\n* remove unused import\n\n* add line\n\n* remove unused import\n\n* fix state init\n\n* change def to class\n\n* update util docs\n\n* add simplified account to accesscontrol\n\n* remove trailing spaces/unused imports\n\n* fix conflicts\n\n* add State class\n\n* update branch\n\n* add to ToC",
        "before_after_code_files": [
          "tests/access/test_AccessControl.py||tests/access/test_AccessControl.py",
          "tests/access/test_Ownable.py||tests/access/test_Ownable.py",
          "tests/account/test_Account.py||tests/account/test_Account.py",
          "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py",
          "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
          "tests/introspection/test_ERC165.py||tests/introspection/test_ERC165.py",
          "tests/security/test_initializable.py||tests/security/test_initializable.py",
          "tests/security/test_pausable.py||tests/security/test_pausable.py",
          "tests/security/test_reentrancy.py||tests/security/test_reentrancy.py",
          "tests/security/test_safemath.py||tests/security/test_safemath.py",
          "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py",
          "tests/token/erc20/test_ERC20BurnableMock.py||tests/token/erc20/test_ERC20BurnableMock.py",
          "tests/token/erc20/test_ERC20Mintable.py||tests/token/erc20/test_ERC20Mintable.py",
          "tests/token/erc20/test_ERC20Pausable.py||tests/token/erc20/test_ERC20Pausable.py",
          "tests/token/erc20/test_ERC20Upgradeable.py||tests/token/erc20/test_ERC20Upgradeable.py",
          "tests/token/erc721/test_ERC721EnumerableMintableBurnable.py||tests/token/erc721/test_ERC721EnumerableMintableBurnable.py",
          "tests/token/erc721/test_ERC721MintableBurnable.py||tests/token/erc721/test_ERC721MintableBurnable.py",
          "tests/token/erc721/test_ERC721MintablePausable.py||tests/token/erc721/test_ERC721MintablePausable.py",
          "tests/token/erc721/test_ERC721SafeMintableMock.py||tests/token/erc721/test_ERC721SafeMintableMock.py",
          "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
          "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py",
          "tests/utils.py||tests/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/access/test_Ownable.py||tests/access/test_Ownable.py",
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
            "tests/security/test_pausable.py||tests/security/test_pausable.py",
            "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py",
            "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
            "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py",
            "tests/utils.py||tests/utils.py"
          ],
          "candidate": [
            "tests/access/test_Ownable.py||tests/access/test_Ownable.py",
            "tests/account/test_Account.py||tests/account/test_Account.py",
            "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py",
            "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
            "tests/security/test_pausable.py||tests/security/test_pausable.py",
            "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py",
            "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
            "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py",
            "tests/utils.py||tests/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/access/test_AccessControl.py||tests/access/test_AccessControl.py": [
          "File: tests/access/test_AccessControl.py -> tests/access/test_AccessControl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from pathlib import Path",
          "3: from signers import MockSigner",
          "5: from utils import (",
          "6:     TRUE, FALSE,",
          "7:     assert_event_emitted, assert_revert,",
          "9: )",
          "11: DEFAULT_ADMIN_ROLE = 0",
          "",
          "[Removed Lines]",
          "4: from starkware.starknet.testing.starknet import Starknet",
          "8:     get_contract_class, cached_contract",
          "",
          "[Added Lines]",
          "7:     get_contract_class, cached_contract,",
          "8:     State, Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: @pytest.fixture(scope='module')",
          "30: async def accesscontrol_init(contract_classes):",
          "40:     accesscontrol = await starknet.deploy(",
          "41:         contract_class=contract_classes['AccessControl'],",
          "42:         constructor_calldata=[account1.contract_address]",
          "",
          "[Removed Lines]",
          "31:     starknet = await Starknet.empty()",
          "32:     account1 = await starknet.deploy(",
          "33:         contract_class=contract_classes['Account'],",
          "34:         constructor_calldata=[signer.public_key]",
          "35:     )",
          "36:     account2 = await starknet.deploy(",
          "37:         contract_class=contract_classes['Account'],",
          "38:         constructor_calldata=[signer.public_key]",
          "39:     )",
          "",
          "[Added Lines]",
          "31:     starknet = await State.init()",
          "32:     account1 = await Account.deploy(signer.public_key)",
          "33:     account2 = await Account.deploy(signer.public_key)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:     _state = state.copy()",
          "51:     accesscontrol = cached_contract(",
          "52:         _state, contract_classes['AccessControl'], accesscontrol)",
          "55:     return accesscontrol, account1, account2",
          "",
          "[Removed Lines]",
          "53:     account1 = cached_contract(_state, contract_classes['Account'], account1)",
          "54:     account2 = cached_contract(_state, contract_classes['Account'], account2)",
          "",
          "[Added Lines]",
          "47:     account1 = cached_contract(_state, Account.get_class, account1)",
          "48:     account2 = cached_contract(_state, Account.get_class, account2)",
          "",
          "---------------"
        ],
        "tests/access/test_Ownable.py||tests/access/test_Ownable.py": [
          "File: tests/access/test_Ownable.py -> tests/access/test_Ownable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from signers import MockSigner",
          "4: from utils import (",
          "5:     ZERO_ADDRESS,",
          "6:     assert_event_emitted,",
          "7:     get_contract_class,",
          "8:     cached_contract,",
          "9:     assert_revert",
          "10: )",
          "13: signer = MockSigner(123456789987654321)",
          "16: @pytest.fixture(scope='module')",
          "17: def contract_classes():",
          "18:     return (",
          "20:         get_contract_class('Ownable')",
          "21:     )",
          "",
          "[Removed Lines]",
          "3: from starkware.starknet.testing.starknet import Starknet",
          "19:         get_contract_class('Account'),",
          "",
          "[Added Lines]",
          "8:     State,",
          "9:     Account,",
          "19:         Account.get_class,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: @pytest.fixture(scope='module')",
          "25: async def ownable_init(contract_classes):",
          "26:     account_cls, ownable_cls = contract_classes",
          "32:     ownable = await starknet.deploy(",
          "33:         contract_class=ownable_cls,",
          "34:         constructor_calldata=[owner.contract_address]",
          "",
          "[Removed Lines]",
          "27:     starknet = await Starknet.empty()",
          "28:     owner = await starknet.deploy(",
          "29:         contract_class=account_cls,",
          "30:         constructor_calldata=[signer.public_key]",
          "31:     )",
          "",
          "[Added Lines]",
          "27:     starknet = await State.init()",
          "28:     owner = await Account.deploy(signer.public_key)",
          "",
          "---------------"
        ],
        "tests/account/test_Account.py||tests/account/test_Account.py": [
          "File: tests/account/test_Account.py -> tests/account/test_Account.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "7: signer = MockSigner(123456789987654321)",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "4: from utils import assert_revert, get_contract_class, cached_contract, TRUE",
          "",
          "[Added Lines]",
          "3: from utils import assert_revert, get_contract_class, cached_contract, TRUE, State, Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: @pytest.fixture(scope='module')",
          "14: def contract_classes():",
          "16:     init_cls = get_contract_class(\"Initializable\")",
          "17:     attacker_cls = get_contract_class(\"AccountReentrancy\")",
          "",
          "[Removed Lines]",
          "15:     account_cls = get_contract_class('Account')",
          "",
          "[Added Lines]",
          "14:     account_cls = Account.get_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "22: @pytest.fixture(scope='module')",
          "23: async def account_init(contract_classes):",
          "24:     account_cls, init_cls, attacker_cls = contract_classes",
          "35:     initializable1 = await starknet.deploy(",
          "36:         contract_class=init_cls,",
          "37:         constructor_calldata=[],",
          "",
          "[Removed Lines]",
          "25:     starknet = await Starknet.empty()",
          "27:     account1 = await starknet.deploy(",
          "28:         contract_class=account_cls,",
          "29:         constructor_calldata=[signer.public_key]",
          "30:     )",
          "31:     account2 = await starknet.deploy(",
          "32:         contract_class=account_cls,",
          "33:         constructor_calldata=[signer.public_key]",
          "34:     )",
          "",
          "[Added Lines]",
          "24:     starknet = await State.init()",
          "25:     account1 = await Account.deploy(signer.public_key)",
          "26:     account2 = await Account.deploy(signer.public_key)",
          "",
          "---------------"
        ],
        "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py": [
          "File: tests/account/test_AddressRegistry.py -> tests/account/test_AddressRegistry.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "7: signer = MockSigner(123456789987654321)",
          "8: L1_ADDRESS = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
          "9: ANOTHER_ADDRESS = 0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f",
          "12: @pytest.fixture(scope='module')",
          "13: async def registry_factory():",
          "14:     # contract classes",
          "15:     registry_cls = get_contract_class(\"AddressRegistry\")",
          "18:     # deployments",
          "24:     registry = await starknet.deploy(",
          "25:         contract_class=registry_cls,",
          "26:         constructor_calldata=[]",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "4: from utils import get_contract_class, cached_contract",
          "16:     account_cls = get_contract_class('Account')",
          "19:     starknet = await Starknet.empty()",
          "20:     account = await starknet.deploy(",
          "21:         contract_class=account_cls,",
          "22:         constructor_calldata=[signer.public_key]",
          "23:     )",
          "",
          "[Added Lines]",
          "3: from utils import get_contract_class, cached_contract, State, Account",
          "14:     account_cls = Account.get_class",
          "17:     starknet = await State.init()",
          "18:     account = await Account.deploy(signer.public_key)",
          "",
          "---------------"
        ],
        "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py": [
          "File: tests/account/test_EthAccount.py -> tests/account/test_EthAccount.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "4: from signers import MockEthSigner",
          "6: private_key = b'\\x01' * 32",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "3: from utils import assert_revert, get_contract_class, cached_contract, TRUE, FALSE",
          "",
          "[Added Lines]",
          "2: from utils import assert_revert, get_contract_class, cached_contract, TRUE, FALSE, State",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: @pytest.fixture(scope='module')",
          "23: async def account_init(contract_defs):",
          "24:     account_cls, init_cls, attacker_cls = contract_defs",
          "27:     account1 = await starknet.deploy(",
          "28:         contract_class=account_cls,",
          "",
          "[Removed Lines]",
          "25:     starknet = await Starknet.empty()",
          "",
          "[Added Lines]",
          "24:     starknet = await State.init()",
          "",
          "---------------"
        ],
        "tests/introspection/test_ERC165.py||tests/introspection/test_ERC165.py": [
          "File: tests/introspection/test_ERC165.py -> tests/introspection/test_ERC165.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:     get_contract_class,",
          "6:     cached_contract,",
          "7:     TRUE,",
          "9: )",
          "",
          "[Removed Lines]",
          "8:     FALSE",
          "",
          "[Added Lines]",
          "8:     FALSE,",
          "9:     State",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: OTHER_ID = 0x12345678",
          "19: async def erc165_factory():",
          "20:     # class",
          "21:     erc165_cls = get_contract_class(\"tests/mocks/ERC165.cairo\", is_path=True)",
          "23:     # deployment",
          "25:     erc165 = await starknet.deploy(contract_class=erc165_cls)",
          "27:     # cache",
          "",
          "[Removed Lines]",
          "18: @pytest.fixture(scope='module')",
          "24:     starknet = await Starknet.empty()",
          "",
          "[Added Lines]",
          "19: @pytest.fixture",
          "25:     starknet = await State.init()",
          "",
          "---------------"
        ],
        "tests/security/test_initializable.py||tests/security/test_initializable.py": [
          "File: tests/security/test_initializable.py -> tests/security/test_initializable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "6: @pytest.mark.asyncio",
          "7: async def test_initializer():",
          "9:     initializable = await starknet.deploy(",
          "10:         contract_class=get_contract_class(\"Initializable\")",
          "11:     )",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "3: from utils import TRUE, FALSE, assert_revert, get_contract_class",
          "8:     starknet = await Starknet.empty()",
          "",
          "[Added Lines]",
          "2: from utils import TRUE, FALSE, assert_revert, get_contract_class, State",
          "7:     starknet = await State.init()",
          "",
          "---------------"
        ],
        "tests/security/test_pausable.py||tests/security/test_pausable.py": [
          "File: tests/security/test_pausable.py -> tests/security/test_pausable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "7: )",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "5:     TRUE, FALSE, assert_revert, assert_event_emitted,",
          "6:     get_contract_class, cached_contract",
          "",
          "[Added Lines]",
          "4:     TRUE, FALSE, assert_revert, assert_event_emitted,",
          "5:     get_contract_class, cached_contract, State, Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: async def pausable_factory():",
          "14:     # class",
          "15:     pausable_cls = get_contract_class(\"Pausable\")",
          "19:     pausable = await starknet.deploy(",
          "20:         contract_class=pausable_cls,",
          "21:         constructor_calldata=[]",
          "22:     )",
          "27:     state = starknet.state.copy()",
          "29:     pausable = cached_contract(state, pausable_cls, pausable)",
          "30:     account = cached_contract(state, account_cls, account)",
          "31:     return pausable, account",
          "",
          "[Removed Lines]",
          "16:     account_cls = get_contract_class(\"Account\")",
          "18:     starknet = await Starknet.empty()",
          "23:     account = await starknet.deploy(",
          "24:         contract_class=account_cls,",
          "25:         constructor_calldata=[signer.public_key]",
          "26:     )",
          "",
          "[Added Lines]",
          "15:     account_cls = Account.get_class",
          "17:     # deploy",
          "18:     starknet = await State.init()",
          "19:     account = await Account.deploy(signer.public_key)",
          "26:     # cache",
          "",
          "---------------"
        ],
        "tests/security/test_reentrancy.py||tests/security/test_reentrancy.py": [
          "File: tests/security/test_reentrancy.py -> tests/security/test_reentrancy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from utils import (",
          "5: )",
          "7: INITIAL_COUNTER = 0",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "4:     assert_revert, get_contract_class",
          "",
          "[Added Lines]",
          "3:     assert_revert, get_contract_class, State",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: @pytest.fixture(scope='module')",
          "11: async def reentrancy_mock():",
          "13:     contract = await starknet.deploy(",
          "14:         contract_class=get_contract_class(\"ReentrancyMock\"),",
          "15:         constructor_calldata=[INITIAL_COUNTER]",
          "",
          "[Removed Lines]",
          "12:     starknet = await Starknet.empty()",
          "",
          "[Added Lines]",
          "11:     starknet = await State.init()",
          "",
          "---------------"
        ],
        "tests/security/test_safemath.py||tests/security/test_safemath.py": [
          "File: tests/security/test_safemath.py -> tests/security/test_safemath.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from utils import (",
          "4:     MAX_UINT256, assert_revert, add_uint, sub_uint,",
          "7: )",
          "10: @pytest.fixture(scope='module')",
          "11: async def safemath_mock():",
          "13:     safemath = await starknet.deploy(",
          "14:         contract_class=get_contract_class(\"SafeMathMock\")",
          "15:     )",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "5:     mul_uint, div_rem_uint, to_uint, contract_path,",
          "6:     get_contract_class",
          "12:     starknet = await Starknet.empty()",
          "",
          "[Added Lines]",
          "4:     mul_uint, div_rem_uint, to_uint,",
          "5:     get_contract_class, State",
          "11:     starknet = await State.init()",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py": [
          "File: tests/token/erc20/test_ERC20.py -> tests/token/erc20/test_ERC20.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "8: )",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "5:     to_uint, add_uint, sub_uint, str_to_felt, MAX_UINT256,",
          "6:     ZERO_ADDRESS, INVALID_UINT256, TRUE, get_contract_class, cached_contract,",
          "7:     assert_revert, assert_event_emitted, contract_path",
          "",
          "[Added Lines]",
          "4:     to_uint, add_uint, sub_uint, str_to_felt, MAX_UINT256, ZERO_ADDRESS,",
          "5:     INVALID_UINT256, TRUE, get_contract_class, cached_contract, assert_revert,",
          "6:     assert_event_emitted, contract_path, State, Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: @pytest.fixture(scope='module')",
          "25: def contract_classes():",
          "27:     erc20_cls = get_contract_class('ERC20')",
          "29:     return account_cls, erc20_cls",
          "",
          "[Removed Lines]",
          "26:     account_cls = get_contract_class('Account')",
          "",
          "[Added Lines]",
          "25:     account_cls = Account.get_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32: @pytest.fixture(scope='module')",
          "33: async def erc20_init(contract_classes):",
          "34:     account_cls, erc20_cls = contract_classes",
          "44:     erc20 = await starknet.deploy(",
          "45:         contract_class=erc20_cls,",
          "46:         constructor_calldata=[",
          "",
          "[Removed Lines]",
          "35:     starknet = await Starknet.empty()",
          "36:     account1 = await starknet.deploy(",
          "37:         contract_class=account_cls,",
          "38:         constructor_calldata=[signer.public_key]",
          "39:     )",
          "40:     account2 = await starknet.deploy(",
          "41:         contract_class=account_cls,",
          "42:         constructor_calldata=[signer.public_key]",
          "43:     )",
          "",
          "[Added Lines]",
          "34:     starknet = await State.init()",
          "35:     account1 = await Account.deploy(signer.public_key)",
          "36:     account2 = await Account.deploy(signer.public_key)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:     bad_decimals = 2**8 + 1",
          "98:     await assert_revert(",
          "99:         starknet.deploy(",
          "100:             contract_path(\"openzeppelin/token/erc20/presets/ERC20.cairo\"),",
          "",
          "[Removed Lines]",
          "97:     starknet = await Starknet.empty()",
          "",
          "[Added Lines]",
          "90:     starknet = await State.init()",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20BurnableMock.py||tests/token/erc20/test_ERC20BurnableMock.py": [
          "File: tests/token/erc20/test_ERC20BurnableMock.py -> tests/token/erc20/test_ERC20BurnableMock.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "5:     to_uint, add_uint, sub_uint, str_to_felt, ZERO_ADDRESS, INVALID_UINT256,",
          "7: )",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "6:     get_contract_class, cached_contract, assert_revert, assert_event_emitted",
          "",
          "[Added Lines]",
          "5:     get_contract_class, cached_contract, assert_revert, assert_event_emitted,",
          "6:     State, Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: @pytest.fixture(scope='module')",
          "22: def contract_classes():",
          "24:     erc20_cls = get_contract_class('ERC20BurnableMock')",
          "26:     return account_cls, erc20_cls",
          "",
          "[Removed Lines]",
          "23:     account_cls = get_contract_class('Account')",
          "",
          "[Added Lines]",
          "23:     account_cls = Account.get_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29: @pytest.fixture(scope='module')",
          "30: async def erc20_init(contract_classes):",
          "37:     erc20 = await starknet.deploy(",
          "38:         contract_class=erc20_cls,",
          "39:         constructor_calldata=[",
          "",
          "[Removed Lines]",
          "31:     account_cls, erc20_cls = contract_classes",
          "32:     starknet = await Starknet.empty()",
          "33:     account1 = await starknet.deploy(",
          "34:         contract_class=account_cls,",
          "35:         constructor_calldata=[signer.public_key]",
          "36:     )",
          "",
          "[Added Lines]",
          "31:     _, erc20_cls = contract_classes",
          "32:     starknet = await State.init()",
          "33:     account = await Account.deploy(signer.public_key)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "41:             SYMBOL,",
          "42:             DECIMALS,",
          "45:         ]",
          "46:     )",
          "47:     return (",
          "48:         starknet.state,",
          "50:         erc20",
          "51:     )",
          "",
          "[Removed Lines]",
          "44:             account1.contract_address,        # recipient",
          "49:         account1,",
          "",
          "[Added Lines]",
          "41:             account.contract_address,        # recipient",
          "46:         account,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "54: @pytest.fixture",
          "55: def erc20_factory(contract_classes, erc20_init):",
          "56:     account_cls, erc20_cls = contract_classes",
          "58:     _state = state.copy()",
          "60:     erc20 = cached_contract(_state, erc20_cls, erc20)",
          "65: @pytest.mark.asyncio",
          "",
          "[Removed Lines]",
          "57:     state, account1, erc20 = erc20_init",
          "59:     account1 = cached_contract(_state, account_cls, account1)",
          "62:     return erc20, account1",
          "",
          "[Added Lines]",
          "54:     state, account, erc20 = erc20_init",
          "56:     account = cached_contract(_state, account_cls, account)",
          "59:     return erc20, account",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20Mintable.py||tests/token/erc20/test_ERC20Mintable.py": [
          "File: tests/token/erc20/test_ERC20Mintable.py -> tests/token/erc20/test_ERC20Mintable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "8: )",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "5:     to_uint, add_uint, sub_uint, str_to_felt,",
          "6:     MAX_UINT256, ZERO_ADDRESS, INVALID_UINT256, get_contract_class,",
          "7:     cached_contract, assert_revert, assert_event_emitted",
          "",
          "[Added Lines]",
          "4:     to_uint, add_uint, sub_uint, str_to_felt, MAX_UINT256, ZERO_ADDRESS,",
          "5:     INVALID_UINT256, get_contract_class, cached_contract, assert_revert,",
          "6:     assert_event_emitted, State, Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: @pytest.fixture(scope='module')",
          "24: def contract_classes():",
          "26:     erc20_cls = get_contract_class('ERC20Mintable')",
          "28:     return account_cls, erc20_cls",
          "",
          "[Removed Lines]",
          "25:     account_cls = get_contract_class('Account')",
          "",
          "[Added Lines]",
          "24:     account_cls = Account.get_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31: @pytest.fixture(scope='module')",
          "32: async def erc20_init(contract_classes):",
          "33:     account_cls, erc20_cls = contract_classes",
          "39:     erc20 = await starknet.deploy(",
          "40:         contract_class=erc20_cls,",
          "41:         constructor_calldata=[",
          "",
          "[Removed Lines]",
          "34:     starknet = await Starknet.empty()",
          "35:     account1 = await starknet.deploy(",
          "36:         contract_class=account_cls,",
          "37:         constructor_calldata=[signer.public_key]",
          "38:     )",
          "",
          "[Added Lines]",
          "33:     starknet = await State.init()",
          "34:     account = await Account.deploy(signer.public_key)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "43:             SYMBOL,",
          "44:             DECIMALS,",
          "48:         ]",
          "49:     )",
          "50:     return (",
          "51:         starknet.state,",
          "53:         erc20",
          "54:     )",
          "",
          "[Removed Lines]",
          "46:             account1.contract_address,        # recipient",
          "47:             account1.contract_address         # owner",
          "52:         account1,",
          "",
          "[Added Lines]",
          "42:             account.contract_address,        # recipient",
          "43:             account.contract_address         # owner",
          "48:         account,",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20Pausable.py||tests/token/erc20/test_ERC20Pausable.py": [
          "File: tests/token/erc20/test_ERC20Pausable.py -> tests/token/erc20/test_ERC20Pausable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "7: )",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "5:     TRUE, FALSE, to_uint, str_to_felt, assert_revert,",
          "6:     get_contract_class, cached_contract",
          "",
          "[Added Lines]",
          "4:     TRUE, FALSE, to_uint, str_to_felt, assert_revert,",
          "5:     get_contract_class, cached_contract, State, Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: @pytest.fixture(scope='module')",
          "21: def contract_classes():",
          "23:     erc20_cls = get_contract_class('ERC20Pausable')",
          "25:     return account_cls, erc20_cls",
          "",
          "[Removed Lines]",
          "22:     account_cls = get_contract_class('Account')",
          "",
          "[Added Lines]",
          "21:     account_cls = Account.get_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28: @pytest.fixture(scope='module')",
          "29: async def erc20_init(contract_classes):",
          "30:     account_cls, erc20_cls = contract_classes",
          "40:     erc20 = await starknet.deploy(",
          "41:         contract_class=erc20_cls,",
          "42:         constructor_calldata=[",
          "",
          "[Removed Lines]",
          "31:     starknet = await Starknet.empty()",
          "32:     account1 = await starknet.deploy(",
          "33:         contract_class=account_cls,",
          "34:         constructor_calldata=[signer.public_key]",
          "35:     )",
          "36:     account2 = await starknet.deploy(",
          "37:         contract_class=account_cls,",
          "38:         constructor_calldata=[signer.public_key]",
          "39:     )",
          "",
          "[Added Lines]",
          "30:     starknet = await State.init()",
          "31:     account1 = await Account.deploy(signer.public_key)",
          "32:     account2 = await Account.deploy(signer.public_key)",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20Upgradeable.py||tests/token/erc20/test_ERC20Upgradeable.py": [
          "File: tests/token/erc20/test_ERC20Upgradeable.py -> tests/token/erc20/test_ERC20Upgradeable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "5:     to_uint, sub_uint, str_to_felt, assert_revert,",
          "7: )",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "6:     get_contract_class, cached_contract",
          "",
          "[Added Lines]",
          "5:     get_contract_class, cached_contract, State, Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: @pytest.fixture(scope='module')",
          "22: def contract_classes():",
          "24:     token_cls = get_contract_class('ERC20Upgradeable')",
          "25:     proxy_cls = get_contract_class('Proxy')",
          "",
          "[Removed Lines]",
          "23:     account_cls = get_contract_class('Account')",
          "",
          "[Added Lines]",
          "22:     account_cls = Account.get_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30: @pytest.fixture(scope='module')",
          "31: async def token_init(contract_classes):",
          "32:     account_cls, token_cls, proxy_cls = contract_classes",
          "42:     token_v1 = await starknet.declare(",
          "43:         contract_class=token_cls,",
          "44:     )",
          "",
          "[Removed Lines]",
          "33:     starknet = await Starknet.empty()",
          "34:     account1 = await starknet.deploy(",
          "35:         contract_class=account_cls,",
          "36:         constructor_calldata=[signer.public_key]",
          "37:     )",
          "38:     account2 = await starknet.deploy(",
          "39:         contract_class=account_cls,",
          "40:         constructor_calldata=[signer.public_key]",
          "41:     )",
          "",
          "[Added Lines]",
          "32:     starknet = await State.init()",
          "33:     account1 = await Account.deploy(signer.public_key)",
          "34:     account2 = await Account.deploy(signer.public_key)",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721EnumerableMintableBurnable.py||tests/token/erc721/test_ERC721EnumerableMintableBurnable.py": [
          "File: tests/token/erc721/test_ERC721EnumerableMintableBurnable.py -> tests/token/erc721/test_ERC721EnumerableMintableBurnable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "5:     str_to_felt, MAX_UINT256, get_contract_class, cached_contract,",
          "7: )",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "6:     TRUE, assert_revert, to_uint, sub_uint, add_uint",
          "",
          "[Added Lines]",
          "5:     TRUE, assert_revert, to_uint, sub_uint, add_uint, State, Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: @pytest.fixture(scope='module')",
          "27: def contract_classes():",
          "29:     erc721_cls = get_contract_class('ERC721EnumerableMintableBurnable')",
          "31:     return account_cls, erc721_cls",
          "",
          "[Removed Lines]",
          "28:     account_cls = get_contract_class('Account')",
          "",
          "[Added Lines]",
          "27:     account_cls = Account.get_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34: @pytest.fixture(scope='module')",
          "35: async def erc721_init(contract_classes):",
          "36:     account_cls, erc721_cls = contract_classes",
          "46:     erc721 = await starknet.deploy(",
          "47:         contract_class=erc721_cls,",
          "48:         constructor_calldata=[",
          "",
          "[Removed Lines]",
          "37:     starknet = await Starknet.empty()",
          "38:     account1 = await starknet.deploy(",
          "39:         contract_class=account_cls,",
          "40:         constructor_calldata=[signer.public_key]",
          "41:     )",
          "42:     account2 = await starknet.deploy(",
          "43:         contract_class=account_cls,",
          "44:         constructor_calldata=[signer.public_key]",
          "45:     )",
          "",
          "[Added Lines]",
          "36:     starknet = await State.init()",
          "37:     account1 = await Account.deploy(signer.public_key)",
          "38:     account2 = await Account.deploy(signer.public_key)",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721MintableBurnable.py||tests/token/erc721/test_ERC721MintableBurnable.py": [
          "File: tests/token/erc721/test_ERC721MintableBurnable.py -> tests/token/erc721/test_ERC721MintableBurnable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "5:     str_to_felt, ZERO_ADDRESS, TRUE, FALSE, assert_revert, INVALID_UINT256,",
          "7: )",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "6:     assert_event_emitted, get_contract_class, cached_contract, to_uint, sub_uint, add_uint",
          "",
          "[Added Lines]",
          "5:     assert_event_emitted, get_contract_class, cached_contract, to_uint, sub_uint,",
          "6:     add_uint, State, Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: @pytest.fixture(scope='module')",
          "34: def contract_classes():",
          "36:     erc721_cls = get_contract_class('ERC721MintableBurnable')",
          "37:     erc721_holder_cls = get_contract_class('ERC721Holder')",
          "38:     unsupported_cls = get_contract_class('Initializable')",
          "",
          "[Removed Lines]",
          "35:     account_cls = get_contract_class('Account')",
          "",
          "[Added Lines]",
          "35:     account_cls = Account.get_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43: @pytest.fixture(scope='module')",
          "44: async def erc721_init(contract_classes):",
          "45:     account_cls, erc721_cls, erc721_holder_cls, unsupported_cls = contract_classes",
          "55:     erc721 = await starknet.deploy(",
          "56:         contract_class=erc721_cls,",
          "57:         constructor_calldata=[",
          "",
          "[Removed Lines]",
          "46:     starknet = await Starknet.empty()",
          "47:     account1 = await starknet.deploy(",
          "48:         contract_class=account_cls,",
          "49:         constructor_calldata=[signer.public_key]",
          "50:     )",
          "51:     account2 = await starknet.deploy(",
          "52:         contract_class=account_cls,",
          "53:         constructor_calldata=[signer.public_key]",
          "54:     )",
          "",
          "[Added Lines]",
          "46:     starknet = await State.init()",
          "47:     account1 = await Account.deploy(signer.public_key)",
          "48:     account2 = await Account.deploy(signer.public_key)",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721MintablePausable.py||tests/token/erc721/test_ERC721MintablePausable.py": [
          "File: tests/token/erc721/test_ERC721MintablePausable.py -> tests/token/erc721/test_ERC721MintablePausable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "7: )",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "5:     str_to_felt, TRUE, FALSE, get_contract_class, cached_contract,",
          "6:     assert_revert, to_uint",
          "",
          "[Added Lines]",
          "4:     str_to_felt, TRUE, FALSE, get_contract_class, cached_contract,",
          "5:     assert_revert, to_uint, State, Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: @pytest.fixture(scope='module')",
          "20: def contract_classes():",
          "22:     erc721_cls = get_contract_class('ERC721MintablePausable')",
          "23:     erc721_holder_cls = get_contract_class('ERC721Holder')",
          "",
          "[Removed Lines]",
          "21:     account_cls = get_contract_class('Account')",
          "",
          "[Added Lines]",
          "20:     account_cls = Account.get_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28: @pytest.fixture(scope='module')",
          "29: async def erc721_init(contract_classes):",
          "30:     account_cls, erc721_cls, erc721_holder_cls = contract_classes",
          "40:     erc721 = await starknet.deploy(",
          "41:         contract_class=erc721_cls,",
          "42:         constructor_calldata=[",
          "",
          "[Removed Lines]",
          "31:     starknet = await Starknet.empty()",
          "32:     account1 = await starknet.deploy(",
          "33:         contract_class=account_cls,",
          "34:         constructor_calldata=[signer.public_key]",
          "35:     )",
          "36:     account2 = await starknet.deploy(",
          "37:         contract_class=account_cls,",
          "38:         constructor_calldata=[signer.public_key]",
          "39:     )",
          "",
          "[Added Lines]",
          "30:     starknet = await State.init()",
          "31:     account1 = await Account.deploy(signer.public_key)",
          "32:     account2 = await Account.deploy(signer.public_key)",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721SafeMintableMock.py||tests/token/erc721/test_ERC721SafeMintableMock.py": [
          "File: tests/token/erc721/test_ERC721SafeMintableMock.py -> tests/token/erc721/test_ERC721SafeMintableMock.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "5:     str_to_felt, ZERO_ADDRESS, INVALID_UINT256, assert_revert,",
          "7: )",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "6:     assert_event_emitted, get_contract_class, cached_contract, to_uint",
          "",
          "[Added Lines]",
          "5:     assert_event_emitted, get_contract_class, cached_contract, to_uint,",
          "6:     State, Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: @pytest.fixture(scope='module')",
          "19: def contract_classes():",
          "21:     erc721_cls = get_contract_class('ERC721SafeMintableMock')",
          "22:     erc721_holder_cls = get_contract_class('ERC721Holder')",
          "23:     unsupported_cls = get_contract_class('Initializable')",
          "",
          "[Removed Lines]",
          "20:     account_cls = get_contract_class('Account')",
          "",
          "[Added Lines]",
          "20:     account_cls = Account.get_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28: @pytest.fixture(scope='module')",
          "29: async def erc721_init(contract_classes):",
          "30:     account_cls, erc721_cls, erc721_holder_cls, unsupported_cls = contract_classes",
          "40:     erc721 = await starknet.deploy(",
          "41:         contract_class=erc721_cls,",
          "42:         constructor_calldata=[",
          "",
          "[Removed Lines]",
          "31:     starknet = await Starknet.empty()",
          "32:     account1 = await starknet.deploy(",
          "33:         contract_class=account_cls,",
          "34:         constructor_calldata=[signer.public_key]",
          "35:     )",
          "36:     account2 = await starknet.deploy(",
          "37:         contract_class=account_cls,",
          "38:         constructor_calldata=[signer.public_key]",
          "39:     )",
          "",
          "[Added Lines]",
          "31:     starknet = await State.init()",
          "32:     account1 = await Account.deploy(signer.public_key)",
          "33:     account2 = await Account.deploy(signer.public_key)",
          "",
          "---------------"
        ],
        "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py": [
          "File: tests/upgrades/test_Proxy.py -> tests/upgrades/test_Proxy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "5:     assert_revert,",
          "6:     get_contract_class,",
          "7:     cached_contract,",
          "8:     assert_event_emitted,",
          "10: )",
          "12: # random value",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "9:     assert_revert_entry_point",
          "",
          "[Added Lines]",
          "8:     assert_revert_entry_point,",
          "9:     State,",
          "10:     Account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: @pytest.fixture(scope='module')",
          "19: def contract_classes():",
          "21:     implementation_cls = get_contract_class('ProxiableImplementation')",
          "22:     proxy_cls = get_contract_class('Proxy')",
          "",
          "[Removed Lines]",
          "20:     account_cls = get_contract_class('Account')",
          "",
          "[Added Lines]",
          "21:     account_cls = Account.get_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27: @pytest.fixture(scope='module')",
          "28: async def proxy_init(contract_classes):",
          "29:     account_cls, implementation_cls, proxy_cls = contract_classes",
          "39:     implementation_decl = await starknet.declare(",
          "40:         contract_class=implementation_cls",
          "41:     )",
          "",
          "[Removed Lines]",
          "30:     starknet = await Starknet.empty()",
          "31:     account1 = await starknet.deploy(",
          "32:         contract_class=account_cls,",
          "33:         constructor_calldata=[signer.public_key]",
          "34:     )",
          "35:     account2 = await starknet.deploy(",
          "36:         contract_class=account_cls,",
          "37:         constructor_calldata=[signer.public_key]",
          "38:     )",
          "",
          "[Added Lines]",
          "31:     starknet = await State.init()",
          "32:     account1 = await Account.deploy(signer.public_key)",
          "33:     account2 = await Account.deploy(signer.public_key)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66: @pytest.fixture",
          "67: async def after_initialized(proxy_factory):",
          "70:     # initialize proxy",
          "71:     await signer.send_transaction(",
          "",
          "[Removed Lines]",
          "68:     admin, other, proxy = proxy_factory",
          "",
          "[Added Lines]",
          "63:     admin, other, proxy = proxy_factory",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "81: @pytest.mark.asyncio",
          "82: async def test_initializer(proxy_factory):",
          "85:     await signer.send_transaction(",
          "86:         admin, proxy.contract_address, 'initializer', [admin.contract_address]",
          "",
          "[Removed Lines]",
          "83:     admin, _, proxy = proxy_factory",
          "",
          "[Added Lines]",
          "78:     admin, _, proxy = proxy_factory",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "96: @pytest.mark.asyncio",
          "97: async def test_initializer_after_initialized(after_initialized):",
          "100:     await assert_revert(signer.send_transaction(",
          "101:         admin, proxy.contract_address, 'initializer', [admin.contract_address]),",
          "",
          "[Removed Lines]",
          "98:     admin, _, proxy = after_initialized",
          "",
          "[Added Lines]",
          "93:     admin, _, proxy = after_initialized",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "109: @pytest.mark.asyncio",
          "110: async def test_set_admin(after_initialized):",
          "113:     # set admin",
          "114:     tx_exec_info = await signer.send_transaction(",
          "",
          "[Removed Lines]",
          "111:     admin, _, proxy = after_initialized",
          "",
          "[Added Lines]",
          "106:     admin, _, proxy = after_initialized",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "136: @pytest.mark.asyncio",
          "137: async def test_set_admin_from_unauthorized(after_initialized):",
          "140:     # set admin",
          "141:     await assert_revert(signer.send_transaction(",
          "",
          "[Removed Lines]",
          "138:     _, non_admin, proxy = after_initialized",
          "",
          "[Added Lines]",
          "133:     _, non_admin, proxy = after_initialized",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "150: @pytest.mark.asyncio",
          "151: async def test_default_fallback(proxy_factory):",
          "154:     # set value through proxy",
          "155:     await signer.send_transaction(",
          "",
          "[Removed Lines]",
          "152:     admin, _, proxy = proxy_factory",
          "",
          "[Added Lines]",
          "147:     admin, _, proxy = proxy_factory",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "166: @pytest.mark.asyncio",
          "167: async def test_fallback_when_selector_does_not_exist(proxy_factory):",
          "170:     # should fail with entry point error",
          "171:     await assert_revert_entry_point(",
          "",
          "[Removed Lines]",
          "168:     admin, _, proxy = proxy_factory",
          "",
          "[Added Lines]",
          "163:     admin, _, proxy = proxy_factory",
          "",
          "---------------"
        ],
        "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py": [
          "File: tests/upgrades/test_upgrades.py -> tests/upgrades/test_upgrades.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "5:     assert_revert,",
          "6:     assert_revert_entry_point,",
          "7:     assert_event_emitted,",
          "",
          "[Removed Lines]",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "",
          "[Added Lines]",
          "4:     State,",
          "5:     Account,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: @pytest.fixture(scope='module')",
          "21: def contract_classes():",
          "23:     v1_cls = get_contract_class('UpgradesMockV1')",
          "24:     v2_cls = get_contract_class('UpgradesMockV2')",
          "25:     proxy_cls = get_contract_class('Proxy')",
          "",
          "[Removed Lines]",
          "22:     account_cls = get_contract_class('Account')",
          "",
          "[Added Lines]",
          "23:     account_cls = Account.get_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30: @pytest.fixture(scope='module')",
          "31: async def proxy_init(contract_classes):",
          "42:     v1_decl = await starknet.declare(",
          "43:         contract_class=v1_cls,",
          "44:     )",
          "",
          "[Removed Lines]",
          "32:     account_cls, v1_cls, v2_cls, proxy_cls = contract_classes",
          "33:     starknet = await Starknet.empty()",
          "34:     account1 = await starknet.deploy(",
          "35:         contract_class=account_cls,",
          "36:         constructor_calldata=[signer.public_key]",
          "37:     )",
          "38:     account2 = await starknet.deploy(",
          "39:         contract_class=account_cls,",
          "40:         constructor_calldata=[signer.public_key]",
          "41:     )",
          "",
          "[Added Lines]",
          "33:     _, v1_cls, v2_cls, proxy_cls = contract_classes",
          "34:     starknet = await State.init()",
          "35:     account1 = await Account.deploy(signer.public_key)",
          "36:     account2 = await Account.deploy(signer.public_key)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "292:     await assert_revert_entry_point(",
          "293:         signer.send_transaction(",
          "294:             admin, proxy.contract_address, 'getValue2', []",
          "296:         invalid_selector='getValue2'",
          "297:     )",
          "",
          "[Removed Lines]",
          "295:         ),",
          "",
          "[Added Lines]",
          "291:         ),",
          "",
          "---------------"
        ],
        "tests/utils.py||tests/utils.py": [
          "File: tests/utils.py -> tests/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from starkware.starknet.compiler.compile import compile_starknet_files",
          "8: from starkware.starkware_utils.error_handling import StarkException",
          "9: from starkware.starknet.testing.starknet import StarknetContract",
          "10: from starkware.starknet.business_logic.execution.objects import Event",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: from starkware.starknet.testing.starknet import Starknet",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:         deploy_execution_info=deployed.deploy_execution_info",
          "147:     )",
          "148:     return contract",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: class State:",
          "153:     \"\"\"",
          "154:     Utility helper for Account class to initialize and return StarkNet state.",
          "156:     Example",
          "157:     ---------",
          "158:     Initalize StarkNet state",
          "160:     >>> starknet = await State.init()",
          "162:     \"\"\"",
          "163:     async def init():",
          "164:         global starknet",
          "165:         starknet = await Starknet.empty()",
          "166:         return starknet",
          "169: class Account:",
          "170:     \"\"\"",
          "171:     Utility for deploying Account contract.",
          "173:     Parameters",
          "174:     ----------",
          "176:     public_key : int",
          "178:     Examples",
          "179:     ----------",
          "181:     >>> starknet = await State.init()",
          "182:     >>> account = await Account.deploy(public_key)",
          "184:     \"\"\"",
          "185:     get_class = get_contract_class(\"Account\")",
          "187:     async def deploy(public_key):",
          "188:         account = await starknet.deploy(",
          "189:             contract_class=Account.get_class,",
          "190:             constructor_calldata=[public_key]",
          "191:         )",
          "192:         return account",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc8a45e90aafb09b73fc0adbbc2c22de268e690a",
      "candidate_info": {
        "commit_hash": "fc8a45e90aafb09b73fc0adbbc2c22de268e690a",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/fc8a45e90aafb09b73fc0adbbc2c22de268e690a",
        "files": [
          "tests/signers.py",
          "tests/test_signers.py",
          "tests/utils.py"
        ],
        "message": "Fix test state in `signer.declare_class` (#532)\n\n* add get_class_hash\n\n* import get_class_hash and get_contract_class from utils instead of nile\n\n* set state in declare_class\n\n* add test for declare_class and deploy\n\n* fix comment\n\n* fix comment\n\n* fix imports\n\n* add get_class_hash\n\n* import get_class_hash from utils\n\n* change return type for declare_class\n\n* move declare_class test to test_signers\n\n* fix return type",
        "before_after_code_files": [
          "tests/signers.py||tests/signers.py",
          "tests/test_signers.py||tests/test_signers.py",
          "tests/utils.py||tests/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/signers.py||tests/signers.py",
            "tests/utils.py||tests/utils.py"
          ],
          "candidate": [
            "tests/signers.py||tests/signers.py",
            "tests/utils.py||tests/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/signers.py||tests/signers.py": [
          "File: tests/signers.py -> tests/signers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from starkware.starknet.core.os.transaction_hash.transaction_hash import TransactionHashPrefix",
          "2: from starkware.starknet.core.os.contract_address.contract_address import (",
          "3:     calculate_contract_address_from_hash,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from typing import Tuple",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6: from starkware.starknet.services.api.gateway.transaction import InvokeFunction, DeployAccount",
          "7: from starkware.starknet.business_logic.transaction.objects import InternalTransaction, InternalDeclare, TransactionExecutionInfo",
          "8: from nile.signer import Signer, from_call_to_call_array, get_transaction_hash, TRANSACTION_VERSION",
          "10: from nile.utils import to_uint",
          "11: import eth_keys",
          "",
          "[Removed Lines]",
          "9: from nile.common import get_contract_class, get_class_hash",
          "",
          "[Added Lines]",
          "11: from utils import get_class_hash, get_contract_class",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:         contract_name,",
          "63:         nonce=None,",
          "64:         max_fee=0,",
          "66:         state = account.state",
          "68:         if nonce is None:",
          "",
          "[Removed Lines]",
          "65:     ) -> TransactionExecutionInfo:",
          "",
          "[Added Lines]",
          "66:     ) -> Tuple[int, TransactionExecutionInfo]:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:         )",
          "96:         execution_info = await state.execute_tx(tx=tx)",
          "99:     async def deploy_account(",
          "100:         self,",
          "",
          "[Removed Lines]",
          "97:         return execution_info",
          "",
          "[Added Lines]",
          "99:         await state.state.set_contract_class(",
          "100:             class_hash=tx.class_hash,",
          "101:             contract_class=contract_class",
          "102:         )",
          "103:         return class_hash, execution_info",
          "",
          "---------------"
        ],
        "tests/test_signers.py||tests/test_signers.py": [
          "File: tests/test_signers.py -> tests/test_signers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import pytest",
          "3: from signers import MockSigner",
          "4: from utils import (",
          "5:     State,",
          "6:     Account,",
          "7:     get_contract_class,",
          "8:     cached_contract,",
          "9:     FALSE,",
          "10:     TRUE,",
          "11: )",
          "13: signer = MockSigner(123456789987654321)",
          "16: @pytest.fixture(scope='module')",
          "17: def contract_classes():",
          "18:     account_cls = Account.get_class",
          "19:     deployer_cls = get_contract_class('UniversalDeployer')",
          "21:     return account_cls, deployer_cls",
          "24: @pytest.fixture(scope='module')",
          "25: async def deployer_init(contract_classes):",
          "26:     _, deployer_cls = contract_classes",
          "27:     starknet = await State.init()",
          "28:     account = await Account.deploy(signer.public_key)",
          "29:     deployer = await starknet.deploy(contract_class=deployer_cls)",
          "30:     return (",
          "31:         starknet.state,",
          "32:         account,",
          "33:         deployer",
          "34:     )",
          "37: @pytest.fixture",
          "38: def deployer_factory(contract_classes, deployer_init):",
          "39:     account_cls, deployer_cls = contract_classes",
          "40:     state, account, deployer = deployer_init",
          "41:     _state = state.copy()",
          "42:     _account = cached_contract(_state, account_cls, account)",
          "43:     deployer = cached_contract(_state, deployer_cls, deployer)",
          "45:     return _account, deployer",
          "48: @pytest.mark.asyncio",
          "49: async def test_signer_declare_class(deployer_factory):",
          "50:     account, deployer = deployer_factory",
          "51:     salt = 1234567875432  # random value",
          "52:     unique = 0",
          "53:     calldata = []",
          "55:     # declare contract class",
          "56:     class_hash, _ = await signer.declare_class(account, \"Initializable\")",
          "58:     # deploy contract",
          "59:     params = [class_hash, salt, unique, len(calldata), *calldata]",
          "60:     deploy_exec_info = await signer.send_transaction(account, deployer.contract_address, 'deployContract', params)",
          "61:     deployed_address = deploy_exec_info.call_info.retdata[1]",
          "63:     # test deployment",
          "64:     tx_exec_info = await signer.send_transaction(account, deployed_address, 'initialized', [])",
          "65:     is_initialized = tx_exec_info.call_info.retdata[1]",
          "66:     assert is_initialized == FALSE",
          "68:     await signer.send_transaction(account, deployed_address, 'initialize', [])",
          "70:     tx_exec_info = await signer.send_transaction(account, deployed_address, 'initialized', [])",
          "71:     is_initialized = tx_exec_info.call_info.retdata[1]",
          "72:     assert is_initialized == TRUE",
          "",
          "---------------"
        ],
        "tests/utils.py||tests/utils.py": [
          "File: tests/utils.py -> tests/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import os",
          "4: from pathlib import Path",
          "5: from starkware.starknet.public.abi import get_selector_from_name",
          "6: from starkware.starknet.business_logic.execution.objects import OrderedEvent",
          "7: from starkware.starknet.compiler.compile import compile_starknet_files",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: from starkware.crypto.signature.fast_pedersen_hash import pedersen_hash",
          "6: from starkware.starknet.core.os.class_hash import compute_class_hash",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     return contract_class",
          "95: def cached_contract(state, _class, deployed):",
          "96:     \"\"\"Return the cached contract\"\"\"",
          "97:     contract = StarknetContract(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: def get_class_hash(contract_name, is_path=False):",
          "98:     \"\"\"Return the class_hash for a given contract.\"\"\"",
          "99:     contract_class = get_contract_class(contract_name, is_path)",
          "100:     return compute_class_hash(contract_class=contract_class, hash_func=pedersen_hash)",
          "",
          "---------------"
        ]
      }
    }
  ]
}