{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8734de995cd88b20f78fbfb7c05eb569938fadec",
      "candidate_info": {
        "commit_hash": "8734de995cd88b20f78fbfb7c05eb569938fadec",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8734de995cd88b20f78fbfb7c05eb569938fadec",
        "files": [
          "ambari-web/app/utils/http_client.js"
        ],
        "message": "AMBARI-25117. getAsPost requests don't work when ambari is used behind knox proxy (amagyar) (#2775) (#2799)",
        "before_after_code_files": [
          "ambari-web/app/utils/http_client.js||ambari-web/app/utils/http_client.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/utils/http_client.js||ambari-web/app/utils/http_client.js": [
          "File: ambari-web/app/utils/http_client.js -> ambari-web/app/utils/http_client.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     xhr.open(method, url + (url.indexOf('?') >= 0 ? '&_=' : '?_=') + curTime, true);",
          "69:     if (isGetAsPost) {",
          "70:       xhr.setRequestHeader(\"X-Http-Method-Override\", \"GET\");",
          "72:     }",
          "73:     xhr.send(params);",
          "",
          "[Removed Lines]",
          "71:       xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");",
          "",
          "[Added Lines]",
          "71:       xhr.setRequestHeader(\"Content-type\", \"text/plain\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c94263bedd2f3c53547632f3cc2989847aecb841",
      "candidate_info": {
        "commit_hash": "c94263bedd2f3c53547632f3cc2989847aecb841",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/c94263bedd2f3c53547632f3cc2989847aecb841",
        "files": [
          "ambari-web/app/controllers/main/host/details.js"
        ],
        "message": "AMBARI-25034 Ambari is not updating core-site : ha.zookeeper.quorumonce a zookeeper server is added or removed (asnaik) (#2910)",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js": [
          "File: ambari-web/app/controllers/main/host/details.js -> ambari-web/app/controllers/main/host/details.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1735:   constructZookeeperConfigUrlParams: function (data) {",
          "1736:     var urlParams = [];",
          "1737:     var services = App.Service.find();",
          "1738:     if (App.get('isHaEnabled')) {",
          "1740:     }",
          "1742:       if (services.someProperty('serviceName', service.serviceName)) {",
          "1743:         service.typesToLoad.forEach(function (type) {",
          "1744:           if (data.Clusters.desired_configs[type]) {",
          "",
          "[Removed Lines]",
          "1739:       urlParams.push('(type=core-site&tag=' + data.Clusters.desired_configs['core-site'].tag + ')');",
          "1741:     this.get('zooKeeperRelatedServices').forEach(function (service) {",
          "",
          "[Added Lines]",
          "1738:     var zooKeeperRelatedServices = this.get('zooKeeperRelatedServices').slice(0);",
          "1740:       zooKeeperRelatedServices.push({",
          "1741:         serviceName: 'HDFS',",
          "1742:         typesToLoad: ['core-site'],",
          "1743:         typesToSave: ['core-site']",
          "1744:       });",
          "1746:     zooKeeperRelatedServices.forEach(function (service) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1767:     this.updateZkConfigs(configs);",
          "1768:     var groups = [];",
          "1769:     var installedServiceNames = App.Service.find().mapProperty('serviceName');",
          "1771:       if (installedServiceNames.contains(service.serviceName)) {",
          "1772:         var group = {",
          "1773:           properties: {},",
          "",
          "[Removed Lines]",
          "1770:     this.get('zooKeeperRelatedServices').forEach(function (service) {",
          "",
          "[Added Lines]",
          "1775:     var zooKeeperRelatedServices = this.get('zooKeeperRelatedServices').slice(0);",
          "1776:     if (App.get('isHaEnabled')) {",
          "1777:       zooKeeperRelatedServices.push({",
          "1778:         serviceName: 'HDFS',",
          "1779:         typesToLoad: ['core-site'],",
          "1780:         typesToSave: ['core-site']",
          "1781:       });",
          "1782:     }",
          "1783:     zooKeeperRelatedServices.forEach(function (service) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a822a365c35b51146f8d08b15180bb7ccd6a5979",
      "candidate_info": {
        "commit_hash": "a822a365c35b51146f8d08b15180bb7ccd6a5979",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a822a365c35b51146f8d08b15180bb7ccd6a5979",
        "files": [
          "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js"
        ],
        "message": "AMBARI-24403 grafana is not showing any datapoints if the queue name contains special characters (#1958)",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js||ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js||ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js": [
          "File: ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js -> ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:             var metricAggregator = target.aggregator === \"none\" ? '' : '._' + target.aggregator;",
          "285:             var metricTransform = !target.transform || target.transform === \"none\" ? '' : '._' + target.transform;",
          "286:             var seriesAggregator = !target.seriesAggregator || target.seriesAggregator === \"none\" ? '' : '&seriesAggregateFunction=' + target.seriesAggregator;",
          "288:               + metricAggregator + '&appId=resourcemanager' + instanceId + '&startTime=' + from +",
          "289:               '&endTime=' + to + precision + seriesAggregator }).then(",
          "290:               getMetricsData(target)",
          "",
          "[Removed Lines]",
          "287:             return self.doAmbariRequest({ url: '/ws/v1/timeline/metrics?metricNames=' + target.queue + metricTransform",
          "",
          "[Added Lines]",
          "287:             return self.doAmbariRequest({ url: '/ws/v1/timeline/metrics?metricNames=' + encodeURIComponent(target.queue) + metricTransform",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64346015f36ea0f466cd9bae0c5f9c875b3292ad",
      "candidate_info": {
        "commit_hash": "64346015f36ea0f466cd9bae0c5f9c875b3292ad",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/64346015f36ea0f466cd9bae0c5f9c875b3292ad",
        "files": [
          "contrib/views/wfmanager/src/main/resources/ui/app/templates/components/workflow-actions.hbs"
        ],
        "message": "AMBARI-24819 do not allow creation of new hive actions in WFM (#2507)",
        "before_after_code_files": [
          "contrib/views/wfmanager/src/main/resources/ui/app/templates/components/workflow-actions.hbs||contrib/views/wfmanager/src/main/resources/ui/app/templates/components/workflow-actions.hbs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/views/wfmanager/src/main/resources/ui/app/templates/components/workflow-actions.hbs||contrib/views/wfmanager/src/main/resources/ui/app/templates/components/workflow-actions.hbs": [
          "File: contrib/views/wfmanager/src/main/resources/ui/app/templates/components/workflow-actions.hbs -> contrib/views/wfmanager/src/main/resources/ui/app/templates/components/workflow-actions.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:       <div {{action 'showImportActionNodeFileBrowser'}} class=\"btn asset-import-btn margin3\"> <i class=\"fa fa-cloud-download\"></i> <span class=\"font10px\">Import Asset from Shared File System</span></div>",
          "40:       <div class=\"clearfix\"></div>",
          "41:       <ul class=\"actions_list_left actionNodes\">",
          "43:           <li {{action 'addAction' 'hive2'}} class=\"dr_action enabled\" data-name=\"Hive\" data-type=\"hive2\"> <i class=\"fa fa-server\"></i> Hive2</li>",
          "44:           <li {{action 'addAction' 'sqoop'}} class=\"dr_action enabled\" data-name=\"Sqoop\" data-type=\"sqoop\"> <i class=\"fa fa-database\"></i> Sqoop </li>",
          "45:           <li {{action 'addAction' 'pig'}} class=\"dr_action enabled\" data-name=\"Pig\" data-type=\"pig\"> <i class=\"fa fa-product-hunt\"></i>&nbsp; Pig </li>",
          "",
          "[Removed Lines]",
          "42:           <li {{action 'addAction' 'hive'}} class=\"dr_action enabled\" data-name=\"Hive\" data-type=\"hive\"> <i class=\"fa fa-server\"></i> Hive </li>",
          "",
          "[Added Lines]",
          "42: {{!--           <li {{action 'addAction' 'hive'}} class=\"dr_action enabled\" data-name=\"Hive\" data-type=\"hive\"> <i class=\"fa fa-server\"></i> Hive </li> --}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "214f7ce9dae42224ff60629905cd56c3654ef7f4",
      "candidate_info": {
        "commit_hash": "214f7ce9dae42224ff60629905cd56c3654ef7f4",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/214f7ce9dae42224ff60629905cd56c3654ef7f4",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java"
        ],
        "message": "AMBARI-24251. Ambari Schema Upgrade is failing after creating views (dlysnichenko)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:   public static final String AMBARI_INFRA_OLD_NAME = \"AMBARI_INFRA\";",
          "254:   public static final String AMBARI_INFRA_NEW_NAME = \"AMBARI_INFRA_SOLR\";",
          "256:   static final String YARN_SERVICE = \"YARN\";",
          "258:   @Inject",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:   public static final String FK_HOSTCOMPONENTDESIREDSTATE_COMPONENT_NAME = \"fk_hostcomponentdesiredstate_component_name\";",
          "258:   public static final String FK_HOSTCOMPONENTSTATE_COMPONENT_NAME = \"fk_hostcomponentstate_component_name\";",
          "259:   public static final String FK_SERVICECOMPONENTDESIREDSTATE_SERVICE_NAME = \"fk_servicecomponentdesiredstate_service_name\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298:   @Override",
          "299:   protected void executeDDLUpdates() throws AmbariException, SQLException {",
          "300:     updateStageTable();",
          "301:     updateRequestTable();",
          "302:     addOpsDisplayNameColumnToHostRoleCommand();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305:     dropBrokenFKs();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "941:     dbAccessor.dropTable(temporaryTable);",
          "942:   }",
          "944:   protected void updateStageTable() throws SQLException {",
          "945:     dbAccessor.addColumn(STAGE_TABLE,",
          "946:       new DBAccessor.DBColumnInfo(STAGE_STATUS_COLUMN, String.class, 255, HostRoleStatus.PENDING, false));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "950:   private void dropBrokenFKs() throws SQLException {",
          "951:     dbAccessor.dropFKConstraint(COMPONENT_DESIRED_STATE_TABLE, FK_HOSTCOMPONENTDESIREDSTATE_COMPONENT_NAME);",
          "952:     dbAccessor.dropFKConstraint(COMPONENT_STATE_TABLE, FK_HOSTCOMPONENTSTATE_COMPONENT_NAME);",
          "953:     dbAccessor.dropFKConstraint(SERVICE_COMPONENT_DESIRED_STATE_TABLE, FK_SERVICECOMPONENTDESIREDSTATE_SERVICE_NAME);",
          "954:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.COMPONENT_DESIRED_STATE_TABLE;",
          "35: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.COMPONENT_NAME_COLUMN;",
          "36: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.COMPONENT_STATE_TABLE;",
          "37: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.FK_KKP_HOST_ID;",
          "38: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.FK_KKP_KEYTAB_PATH;",
          "39: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.FK_KKP_PRINCIPAL_NAME;",
          "40: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.FK_KKP_SERVICE_PRINCIPAL;",
          "41: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.HOSTS_TABLE;",
          "42: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.HOST_ID_COLUMN;",
          "43: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.KERBEROS_KEYTAB_PRINCIPAL_TABLE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.FK_HOSTCOMPONENTDESIREDSTATE_COMPONENT_NAME;",
          "38: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.FK_HOSTCOMPONENTSTATE_COMPONENT_NAME;",
          "43: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.FK_SERVICECOMPONENTDESIREDSTATE_SERVICE_NAME;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.REQUEST_TABLE;",
          "89: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.REQUEST_USER_NAME_COLUMN;",
          "90: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.SECURITY_STATE_COLUMN;",
          "91: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.SERVICE_DESIRED_STATE_TABLE;",
          "92: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.SERVICE_NAME_COLUMN;",
          "93: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.STAGE_DISPLAY_STATUS_COLUMN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.SERVICE_COMPONENT_DESIRED_STATE_TABLE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "395:   @Test",
          "396:   public void testExecuteDDLUpdates() throws Exception {",
          "398:     Capture<DBAccessor.DBColumnInfo> updateStageTableCaptures = newCapture(CaptureType.ALL);",
          "399:     dbAccessor.addColumn(eq(STAGE_TABLE), capture(updateStageTableCaptures));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402:     dbAccessor.dropFKConstraint(COMPONENT_DESIRED_STATE_TABLE, FK_HOSTCOMPONENTDESIREDSTATE_COMPONENT_NAME);",
          "403:     expectLastCall().once();",
          "404:     dbAccessor.dropFKConstraint(COMPONENT_STATE_TABLE, FK_HOSTCOMPONENTSTATE_COMPONENT_NAME);",
          "405:     expectLastCall().once();",
          "406:     dbAccessor.dropFKConstraint(SERVICE_COMPONENT_DESIRED_STATE_TABLE, FK_SERVICECOMPONENTDESIREDSTATE_SERVICE_NAME);",
          "407:     expectLastCall().once();",
          "",
          "---------------"
        ]
      }
    }
  ]
}