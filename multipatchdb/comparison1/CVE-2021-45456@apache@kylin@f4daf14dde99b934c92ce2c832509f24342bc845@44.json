{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "13fd437297101c70fc21669f0fbadcbc1926fa0d",
      "candidate_info": {
        "commit_hash": "13fd437297101c70fc21669f0fbadcbc1926fa0d",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/13fd437297101c70fc21669f0fbadcbc1926fa0d",
        "files": [
          "webapp/app/partials/cubeDesigner/measures.html"
        ],
        "message": "KYLIN-4490 Fix minor bug which add measure on frontend\n\n(cherry picked from commit 17da7e58c8ffe34ab39b42b0e15de76814b7ac17)",
        "before_after_code_files": [
          "webapp/app/partials/cubeDesigner/measures.html||webapp/app/partials/cubeDesigner/measures.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "webapp/app/partials/cubeDesigner/measures.html||webapp/app/partials/cubeDesigner/measures.html": [
          "File: webapp/app/partials/cubeDesigner/measures.html -> webapp/app/partials/cubeDesigner/measures.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:                         <div class=\"row\">",
          "238:                           <label class=\"col-xs-12 col-sm-3 control-label no-padding-right font-color-default\">",
          "239:                             <b ng-if=\"newMeasure.function.expression === 'TOP_N'\">Group by Column:</b>",
          "241:                           </label>",
          "242:                           <div class=\"form-group large-popover\" >",
          "243:                               <div class=\"box-body\">",
          "",
          "[Removed Lines]",
          "240:                             <b ng-if=\"newMeasure.function.expression === 'COUNT_DISTINCT' && newMeasure.function.returntype!=='bitmap')\">Additional distinct column in this measure:</b>",
          "",
          "[Added Lines]",
          "240:                             <b ng-if=\"newMeasure.function.expression === 'COUNT_DISTINCT' && (newMeasure.function.returntype!=='bitmap')\">Additional distinct column in this measure:</b>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "245ed3030a8d7339c84b279d327cbe45e9dfc370",
      "candidate_info": {
        "commit_hash": "245ed3030a8d7339c84b279d327cbe45e9dfc370",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/245ed3030a8d7339c84b279d327cbe45e9dfc370",
        "files": [
          "core-cube/src/main/java/org/apache/kylin/cube/CubeInstance.java",
          "core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/AggregationGroup.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/CubeDesc.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/DictionaryDesc.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/HBaseColumnFamilyDesc.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/SelectRule.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/SnapshotTableDesc.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/DataModelDesc.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/JoinTableDesc.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/ModelDimensionDesc.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdateMapping.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdater.java",
          "server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java",
          "server-base/src/test/resources/update/TableSchemaUpdateMapping.json",
          "server-base/src/test/resources/update/cube/test_kylin_cube_with_slr_left_join_ready.json",
          "server-base/src/test/resources/update/cube_desc/ci_left_join_cube.json",
          "server-base/src/test/resources/update/model_desc/ci_inner_join_model.json",
          "server-base/src/test/resources/update/table/EDW.CAL_DT.json",
          "server-base/src/test/resources/update/table/TEST.COUNTRY.json",
          "server-base/src/test/resources/update/table/TEST.KYLIN_FACT.json",
          "server-base/src/test/resources/update/table/TEST.TEST_ACCOUNT.json",
          "server-base/src/test/resources/update/table/TEST.TEST_CATEGORY_GROUPINGS.json"
        ],
        "message": "KYLIN-4421 Allow to update table & database name\n\n(cherry picked from commit d494b8d05f75fd648d2dbb1dcb4b72f452de8b55)",
        "before_after_code_files": [
          "core-cube/src/main/java/org/apache/kylin/cube/CubeInstance.java||core-cube/src/main/java/org/apache/kylin/cube/CubeInstance.java",
          "core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java||core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/AggregationGroup.java||core-cube/src/main/java/org/apache/kylin/cube/model/AggregationGroup.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/CubeDesc.java||core-cube/src/main/java/org/apache/kylin/cube/model/CubeDesc.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/DictionaryDesc.java||core-cube/src/main/java/org/apache/kylin/cube/model/DictionaryDesc.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/HBaseColumnFamilyDesc.java||core-cube/src/main/java/org/apache/kylin/cube/model/HBaseColumnFamilyDesc.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/SelectRule.java||core-cube/src/main/java/org/apache/kylin/cube/model/SelectRule.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/SnapshotTableDesc.java||core-cube/src/main/java/org/apache/kylin/cube/model/SnapshotTableDesc.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/DataModelDesc.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/DataModelDesc.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/JoinTableDesc.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/JoinTableDesc.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/ModelDimensionDesc.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/ModelDimensionDesc.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdateMapping.java||server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdateMapping.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdater.java||server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdater.java",
          "server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java||server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-cube/src/main/java/org/apache/kylin/cube/CubeInstance.java||core-cube/src/main/java/org/apache/kylin/cube/CubeInstance.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/CubeInstance.java -> core-cube/src/main/java/org/apache/kylin/cube/CubeInstance.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.io.IOException;",
          "26: import java.nio.charset.StandardCharsets;",
          "27: import java.util.List;",
          "28: import java.util.Map;",
          "29: import java.util.Set;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import java.util.Arrays;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:         return true;",
          "274:     }",
          "278:     @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:     public boolean equalsRaw(Object o) {",
          "278:         if (this == o)",
          "279:             return true;",
          "280:         if (o == null || getClass() != o.getClass())",
          "281:             return false;",
          "283:         CubeInstance that = (CubeInstance) o;",
          "284:         if (!java.util.Objects.equals(name, that.name))",
          "285:             return false;",
          "286:         if (!java.util.Objects.equals(owner, that.owner))",
          "287:             return false;",
          "288:         if (!java.util.Objects.equals(descName, that.descName))",
          "289:             return false;",
          "290:         if (!java.util.Objects.equals(displayName, that.displayName))",
          "291:             return false;",
          "292:         if (!java.util.Objects.equals(status, that.status))",
          "293:             return false;",
          "295:         if (!java.util.Objects.equals(segments, that.segments))",
          "296:             return false;",
          "297:         if (!java.util.Arrays.equals(cuboidBytes, that.cuboidBytes))",
          "298:             return false;",
          "299:         if (!java.util.Arrays.equals(cuboidBytesRecommend, that.cuboidBytesRecommend))",
          "300:             return false;",
          "301:         return java.util.Objects.equals(snapshots, that.snapshots);",
          "302:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "695:         return snapshots;",
          "696:     }",
          "698:     public String getSnapshotResPath(String tableName) {",
          "699:         return getSnapshots().get(tableName);",
          "700:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "726:     public void resetSnapshots() {",
          "727:         snapshots = Maps.newHashMap();",
          "728:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "703:         getSnapshots().put(table, snapshotResPath);",
          "704:     }",
          "718:     }",
          "720:     public static CubeSegment findSegmentWithJobId(String jobID, CubeInstance cubeInstance) {",
          "",
          "[Removed Lines]",
          "706:     public static CubeInstance getCopyOf(CubeInstance cubeInstance) {",
          "707:         CubeInstance newCube = new CubeInstance();",
          "708:         newCube.setName(cubeInstance.getName());",
          "709:         newCube.setSegments(cubeInstance.getSegments());",
          "710:         newCube.setDescName(cubeInstance.getDescName());",
          "711:         newCube.setConfig((KylinConfigExt) cubeInstance.getConfig());",
          "712:         newCube.setStatus(cubeInstance.getStatus());",
          "713:         newCube.setOwner(cubeInstance.getOwner());",
          "714:         newCube.setCost(cubeInstance.getCost());",
          "715:         newCube.setCreateTimeUTC(System.currentTimeMillis());",
          "716:         newCube.updateRandomUuid();",
          "717:         return newCube;",
          "",
          "[Added Lines]",
          "738:     public static CubeInstance getCopyOf(CubeInstance other) {",
          "739:         CubeInstance ret = new CubeInstance();",
          "740:         ret.setName(other.getName());",
          "741:         ret.setOwner(other.getOwner());",
          "742:         ret.setDescName(other.getDescName());",
          "743:         ret.setCost(other.getCost());",
          "744:         ret.setStatus(other.getStatus());",
          "745:         ret.setSegments(other.getSegments());",
          "746:         ret.setCreateTimeUTC(System.currentTimeMillis());",
          "747:         if (other.cuboidBytes != null) {",
          "748:             ret.cuboidBytes = Arrays.copyOf(other.cuboidBytes, other.cuboidBytes.length);",
          "749:         }",
          "750:         if (other.cuboidBytesRecommend != null) {",
          "751:             ret.cuboidBytesRecommend = Arrays.copyOf(other.cuboidBytesRecommend, other.cuboidBytesRecommend.length);",
          "752:         }",
          "753:         ret.cuboidLastOptimized = other.cuboidLastOptimized;",
          "754:         ret.getSnapshots().putAll(other.getSnapshots());",
          "756:         ret.setConfig((KylinConfigExt) other.getConfig());",
          "757:         ret.updateRandomUuid();",
          "758:         return ret;",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java||core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java -> core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:         return snapshots;",
          "329:     }",
          "331:     public String getSnapshotResPath(String table) {",
          "332:         return getSnapshots().get(table);",
          "333:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:     public void resetSnapshots() {",
          "332:         snapshots = new ConcurrentHashMap<String, String>();",
          "333:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "674:     public void setStreamSourceCheckpoint(String streamSourceCheckpoint) {",
          "675:         this.streamSourceCheckpoint = streamSourceCheckpoint;",
          "676:     }",
          "677: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682:     public static CubeSegment getCopyOf(CubeSegment other) {",
          "683:         CubeSegment copy = new CubeSegment();",
          "684:         copy.cubeInstance = other.cubeInstance;",
          "685:         copy.uuid = other.uuid;",
          "686:         copy.name = other.name;",
          "687:         copy.storageLocationIdentifier = other.storageLocationIdentifier;",
          "688:         copy.dateRangeStart = other.dateRangeStart;",
          "689:         copy.dateRangeEnd = other.dateRangeEnd;",
          "690:         copy.sourceOffsetStart = other.sourceOffsetStart;",
          "691:         copy.sourceOffsetEnd = other.sourceOffsetEnd;",
          "692:         copy.status = other.status;",
          "693:         copy.sizeKB = other.sizeKB;",
          "694:         copy.isMerged = other.isMerged;",
          "695:         copy.estimateRatio = other.estimateRatio == null ? null : Lists.newArrayList(other.estimateRatio);",
          "696:         copy.inputRecords = other.inputRecords;",
          "697:         copy.inputRecordsSize = other.inputRecordsSize;",
          "698:         copy.lastBuildTime = other.lastBuildTime;",
          "699:         copy.lastBuildJobID = other.lastBuildJobID;",
          "700:         copy.createTimeUTC = other.createTimeUTC;",
          "701:         copy.cuboidShardNums.putAll(other.cuboidShardNums);",
          "702:         copy.totalShards = other.totalShards;",
          "703:         copy.blackoutCuboids.addAll(other.blackoutCuboids);",
          "704:         copy.getDictionaries().putAll(other.getDictionaries());",
          "705:         copy.getSnapshots().putAll(other.getSnapshots());",
          "706:         copy.rowkeyStats.addAll(other.rowkeyStats);",
          "707:         copy.sourcePartitionOffsetStart.putAll(other.sourcePartitionOffsetStart);",
          "708:         copy.sourcePartitionOffsetEnd.putAll(other.sourcePartitionOffsetEnd);",
          "709:         if (other.streamSourceCheckpoint != null) {",
          "710:             copy.streamSourceCheckpoint = other.streamSourceCheckpoint;",
          "711:         }",
          "712:         copy.additionalInfo.putAll(other.additionalInfo);",
          "713:         copy.dimensionRangeInfoMap = other.dimensionRangeInfoMap == null ? null",
          "714:                 : Maps.newHashMap(other.dimensionRangeInfoMap);",
          "715:         copy.binarySignature = other.binarySignature;",
          "716:         return copy;",
          "717:     }",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/model/AggregationGroup.java||core-cube/src/main/java/org/apache/kylin/cube/model/AggregationGroup.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/model/AggregationGroup.java -> core-cube/src/main/java/org/apache/kylin/cube/model/AggregationGroup.java"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/model/CubeDesc.java||core-cube/src/main/java/org/apache/kylin/cube/model/CubeDesc.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/model/CubeDesc.java -> core-cube/src/main/java/org/apache/kylin/cube/model/CubeDesc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import java.util.Objects;",
          "44: import java.util.Set;",
          "45: import java.util.TreeSet;",
          "47: import org.apache.commons.codec.binary.Base64;",
          "48: import org.apache.commons.collections.CollectionUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import java.util.stream.IntStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "485:         return mandatoryCuboids;",
          "486:     }",
          "488:     @Override",
          "489:     public boolean equals(Object o) {",
          "490:         if (this == o)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:     public boolean equalsRaw(Object o) {",
          "490:         if (this == o)",
          "491:             return true;",
          "492:         if (o == null || getClass() != o.getClass())",
          "493:             return false;",
          "495:         CubeDesc that = (CubeDesc) o;",
          "497:         if (!Objects.equals(name, that.name))",
          "498:             return false;",
          "499:         if (!Objects.equals(modelName, that.modelName))",
          "500:             return false;",
          "501:         if (!Objects.equals(description, that.description))",
          "502:             return false;",
          "503:         if (!Objects.equals(dimensions, that.dimensions))",
          "504:             return false;",
          "505:         if (!Objects.equals(measures, that.measures))",
          "506:             return false;",
          "507:         if (!Objects.equals(dictionaries, that.dictionaries))",
          "508:             return false;",
          "509:         if (!Arrays.equals(rowkey.getRowKeyColumns(), that.rowkey.getRowKeyColumns()))",
          "510:             return false;",
          "511:         if (!Objects.equals(nullStrings, that.nullStrings))",
          "512:             return false;",
          "513:         if (!Arrays.equals(hbaseMapping.getColumnFamily(), that.hbaseMapping.getColumnFamily()))",
          "514:             return false;",
          "515:         if (aggregationGroups != that.aggregationGroups) {",
          "516:             if (aggregationGroups == null || that.aggregationGroups == null) {",
          "517:                 return false;",
          "518:             } else if (!IntStream.range(0, aggregationGroups.size())",
          "519:                     .allMatch(i -> Arrays.equals(aggregationGroups.get(i).getIncludes(),",
          "520:                             that.aggregationGroups.get(i).getIncludes())",
          "521:                             && Objects.equals(aggregationGroups.get(i).getSelectRule(),",
          "522:                                     that.aggregationGroups.get(i).getSelectRule()))) {",
          "523:                 return false;",
          "524:             }",
          "525:         }",
          "526:         if (!Objects.equals(notifyList, that.notifyList))",
          "527:             return false;",
          "528:         if (!Objects.equals(statusNeedNotify, that.statusNeedNotify))",
          "529:             return false;",
          "530:         if (!Arrays.equals(autoMergeTimeRanges, that.autoMergeTimeRanges))",
          "531:             return false;",
          "532:         if (!Objects.equals(retentionRange, that.retentionRange))",
          "533:             return false;",
          "534:         if (!Objects.equals(engineType, that.engineType))",
          "535:             return false;",
          "536:         if (!Objects.equals(storageType, that.storageType))",
          "537:             return false;",
          "538:         if (!Objects.equals(overrideKylinProps, that.overrideKylinProps))",
          "539:             return false;",
          "540:         if (!Objects.equals(snapshotTableDescList, that.snapshotTableDescList))",
          "541:             return false;",
          "542:         if (!Objects.equals(partitionDateStart, that.partitionDateStart))",
          "543:             return false;",
          "544:         if (!Objects.equals(partitionDateEnd, that.partitionDateEnd))",
          "545:             return false;",
          "546:         if (!Objects.equals(parentForward, that.parentForward))",
          "547:             return false;",
          "548:         if (!Objects.equals(mandatoryDimensionSetList, that.mandatoryDimensionSetList))",
          "549:             return false;",
          "550:         return Objects.equals(cuboidBlackSet, that.cuboidBlackSet);",
          "551:     }",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/model/DictionaryDesc.java||core-cube/src/main/java/org/apache/kylin/cube/model/DictionaryDesc.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/model/DictionaryDesc.java -> core-cube/src/main/java/org/apache/kylin/cube/model/DictionaryDesc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:         desc.builderClass = builderClass;",
          "119:         return desc;",
          "120:     }",
          "121: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:     @Override",
          "123:     public boolean equals(Object o) {",
          "124:         if (this == o) return true;",
          "125:         if (o == null || getClass() != o.getClass()) return false;",
          "126:         DictionaryDesc that = (DictionaryDesc) o;",
          "127:         return Objects.equals(column, that.column) &&",
          "128:                 Objects.equals(reuseColumn, that.reuseColumn) &&",
          "129:                 Objects.equals(builderClass, that.builderClass) &&",
          "130:                 Objects.equals(cube, that.cube) &&",
          "131:                 Objects.equals(model, that.model);",
          "132:     }",
          "134:     @Override",
          "135:     public int hashCode() {",
          "136:         return Objects.hash(column, reuseColumn, builderClass, cube, model);",
          "137:     }",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/model/HBaseColumnFamilyDesc.java||core-cube/src/main/java/org/apache/kylin/cube/model/HBaseColumnFamilyDesc.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/model/HBaseColumnFamilyDesc.java -> core-cube/src/main/java/org/apache/kylin/cube/model/HBaseColumnFamilyDesc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.kylin.metadata.model.MeasureDesc;",
          "26: import java.util.Arrays;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:         return false;",
          "68:     }",
          "70: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     @Override",
          "72:     public boolean equals(Object o) {",
          "73:         if (this == o) return true;",
          "74:         if (o == null || getClass() != o.getClass()) return false;",
          "75:         HBaseColumnFamilyDesc that = (HBaseColumnFamilyDesc) o;",
          "76:         return Objects.equals(name, that.name) &&",
          "77:                 Arrays.equals(columns, that.columns);",
          "78:     }",
          "80:     @Override",
          "81:     public int hashCode() {",
          "82:         int result = Objects.hash(name);",
          "83:         result = 31 * result + Arrays.hashCode(columns);",
          "84:         return result;",
          "85:     }",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/model/SelectRule.java||core-cube/src/main/java/org/apache/kylin/cube/model/SelectRule.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/model/SelectRule.java -> core-cube/src/main/java/org/apache/kylin/cube/model/SelectRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.cube.model;",
          "21: import java.io.Serializable;",
          "23: import com.fasterxml.jackson.annotation.JsonInclude;",
          "24: import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.Arrays;",
          "23: import java.util.Objects;",
          "24: import java.util.stream.IntStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     @JsonProperty(\"dim_cap\")",
          "36:     @JsonInclude(JsonInclude.Include.NON_NULL)",
          "37:     public Integer dimCap;",
          "38: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     @Override",
          "43:     public boolean equals(Object o) {",
          "44:         if (this == o)",
          "45:             return true;",
          "46:         if (o == null || getClass() != o.getClass())",
          "47:             return false;",
          "49:         SelectRule that = (SelectRule) o;",
          "50:         if (hierarchyDims != that.hierarchyDims) {",
          "51:             if (hierarchyDims == null || that.hierarchyDims == null) {",
          "52:                 return false;",
          "53:             } else if (!IntStream.range(0, hierarchyDims.length)",
          "54:                     .allMatch(i -> Arrays.equals(hierarchyDims[i], that.hierarchyDims[i]))) {",
          "55:                 return false;",
          "56:             }",
          "57:         }",
          "59:         if (jointDims != that.jointDims) {",
          "60:             if (jointDims == null || that.jointDims == null) {",
          "61:                 return false;",
          "62:             } else if (!IntStream.range(0, jointDims.length)",
          "63:                     .allMatch(i -> Arrays.equals(jointDims[i], that.jointDims[i]))) {",
          "64:                 return false;",
          "65:             }",
          "66:         }",
          "67:         return Arrays.equals(mandatoryDims, that.mandatoryDims) && Objects.equals(dimCap, that.dimCap);",
          "68:     }",
          "70:     @Override",
          "71:     public int hashCode() {",
          "72:         int result = Objects.hash(dimCap);",
          "73:         result = 31 * result + Arrays.hashCode(hierarchyDims);",
          "74:         result = 31 * result + Arrays.hashCode(mandatoryDims);",
          "75:         result = 31 * result + Arrays.hashCode(jointDims);",
          "76:         return result;",
          "77:     }",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/model/SnapshotTableDesc.java||core-cube/src/main/java/org/apache/kylin/cube/model/SnapshotTableDesc.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/model/SnapshotTableDesc.java -> core-cube/src/main/java/org/apache/kylin/cube/model/SnapshotTableDesc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.cube.model;",
          "21: import com.fasterxml.jackson.annotation.JsonAutoDetect;",
          "22: import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;",
          "23: import com.fasterxml.jackson.annotation.JsonProperty;",
          "26: @JsonAutoDetect(fieldVisibility = Visibility.NONE, getterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE)",
          "28:     @JsonProperty(\"table_name\")",
          "29:     private String tableName;",
          "",
          "[Removed Lines]",
          "24: import org.apache.kylin.dict.lookup.SnapshotTable;",
          "27: public class SnapshotTableDesc implements java.io.Serializable{",
          "",
          "[Added Lines]",
          "21: import org.apache.kylin.dict.lookup.SnapshotTable;",
          "27: import java.util.Objects;",
          "30: public class",
          "31: SnapshotTableDesc implements java.io.Serializable{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     public void setGlobal(boolean global) {",
          "61:         this.global = global;",
          "62:     }",
          "63: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     public boolean isExtSnapshotTable() {",
          "69:         return !SnapshotTable.STORAGE_TYPE_METASTORE.equals(storageType);",
          "70:     }",
          "72:     public boolean isEnableLocalCache() {",
          "73:         return enableLocalCache;",
          "74:     }",
          "76:     public void setEnableLocalCache(boolean enableLocalCache) {",
          "77:         this.enableLocalCache = enableLocalCache;",
          "78:     }",
          "80:     public static SnapshotTableDesc getCopyOf(SnapshotTableDesc other) {",
          "81:         SnapshotTableDesc copy = new SnapshotTableDesc();",
          "82:         copy.tableName = other.tableName;",
          "83:         copy.storageType = other.storageType;",
          "84:         copy.enableLocalCache = other.enableLocalCache;",
          "85:         copy.global = other.global;",
          "86:         return copy;",
          "87:     }",
          "89:     @Override",
          "90:     public boolean equals(Object o) {",
          "91:         if (this == o) return true;",
          "92:         if (o == null || getClass() != o.getClass()) return false;",
          "93:         SnapshotTableDesc that = (SnapshotTableDesc) o;",
          "94:         return enableLocalCache == that.enableLocalCache &&",
          "95:                 global == that.global &&",
          "96:                 Objects.equals(tableName, that.tableName) &&",
          "97:                 Objects.equals(storageType, that.storageType);",
          "98:     }",
          "100:     @Override",
          "101:     public int hashCode() {",
          "102:         return Objects.hash(tableName, storageType, enableLocalCache, global);",
          "103:     }",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/metadata/model/DataModelDesc.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/DataModelDesc.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/metadata/model/DataModelDesc.java -> core-metadata/src/main/java/org/apache/kylin/metadata/model/DataModelDesc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:         return this.errors;",
          "721:     }",
          "723:     @Override",
          "724:     public boolean equals(Object o) {",
          "725:         if (this == o)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723:     private Map<String, JoinTableDesc> getJoinTableMap(JoinTableDesc[] joinTables) {",
          "724:         if (joinTables == null) {",
          "725:             return Maps.newHashMap();",
          "726:         }",
          "727:         Map<String, JoinTableDesc> ret = Maps.newHashMapWithExpectedSize(joinTables.length);",
          "728:         for (JoinTableDesc joinTable : joinTables) {",
          "729:             ret.put(joinTable.getAlias(), joinTable);",
          "730:         }",
          "731:         return ret;",
          "732:     }",
          "734:     public boolean equalsRaw(Object o) {",
          "735:         if (this == o)",
          "736:             return true;",
          "737:         if (o == null || getClass() != o.getClass())",
          "738:             return false;",
          "740:         DataModelDesc that = (DataModelDesc) o;",
          "742:         if (isDraft != that.isDraft)",
          "743:             return false;",
          "744:         if (name != null ? !name.equals(that.name) : that.name != null)",
          "745:             return false;",
          "746:         if (owner != null ? !owner.equals(that.owner) : that.owner != null)",
          "747:             return false;",
          "748:         if (description != null ? !description.equals(that.description) : that.description != null)",
          "749:             return false;",
          "750:         if (rootFactTable != null ? !rootFactTable.equals(that.rootFactTable) : that.rootFactTable != null)",
          "751:             return false;",
          "752:         if (rootFactTableAlias != null ? !rootFactTableAlias.equals(that.rootFactTableAlias)",
          "753:                 : that.rootFactTableAlias != null)",
          "754:             return false;",
          "755:         if (!getJoinTableMap(joinTables).equals(getJoinTableMap(that.joinTables)))",
          "756:             return false;",
          "757:         if (dimensions != null ? !dimensions.equals(that.dimensions) : that.dimensions != null)",
          "758:             return false;",
          "760:         if (!Arrays.equals(metrics, that.metrics))",
          "761:             return false;",
          "762:         if (filterCondition != null ? !filterCondition.equals(that.filterCondition) : that.filterCondition != null)",
          "763:             return false;",
          "764:         if (partitionDesc != null ? !partitionDesc.equalsRaw(that.partitionDesc) : that.partitionDesc != null)",
          "765:             return false;",
          "766:         return capacity == that.capacity;",
          "767:     }",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/metadata/model/JoinTableDesc.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/JoinTableDesc.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/metadata/model/JoinTableDesc.java -> core-metadata/src/main/java/org/apache/kylin/metadata/model/JoinTableDesc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         this.tableRef = ref;",
          "88:     }",
          "90:     @Override",
          "91:     public boolean equals(Object o) {",
          "92:         if (this == o)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     public static JoinTableDesc getCopyOf(JoinTableDesc other) {",
          "91:         JoinTableDesc copy = new JoinTableDesc();",
          "92:         copy.table = other.table;",
          "93:         copy.kind = other.kind;",
          "94:         copy.alias = other.alias;",
          "95:         copy.join = other.join;",
          "96:         return copy;",
          "97:     }",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/metadata/model/ModelDimensionDesc.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/ModelDimensionDesc.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/metadata/model/ModelDimensionDesc.java -> core-metadata/src/main/java/org/apache/kylin/metadata/model/ModelDimensionDesc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.metadata.model;",
          "21: import java.io.Serializable;",
          "22: import java.util.List;",
          "24: import java.util.Locale;",
          "25: import org.apache.kylin.common.util.StringUtil;",
          "27: import com.fasterxml.jackson.annotation.JsonAutoDetect;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.Arrays;",
          "26: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:         return count;",
          "95:     }",
          "97: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     @Override",
          "101:     public boolean equals(Object o) {",
          "102:         if (this == o) return true;",
          "103:         if (o == null || getClass() != o.getClass()) return false;",
          "104:         ModelDimensionDesc that = (ModelDimensionDesc) o;",
          "105:         return Objects.equals(table, that.table) &&",
          "106:                 Arrays.equals(columns, that.columns);",
          "107:     }",
          "109:     @Override",
          "110:     public int hashCode() {",
          "111:         int result = Objects.hash(table);",
          "112:         result = 31 * result + Arrays.hashCode(columns);",
          "113:         return result;",
          "114:     }",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java -> core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.Arrays;",
          "25: import java.util.List;",
          "26: import java.util.Locale;",
          "27: import java.util.Set;",
          "29: import com.fasterxml.jackson.annotation.JsonAutoDetect;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:             PlainParameter that = (PlainParameter) o;",
          "270:                 return false;",
          "272:             if (this.isColumnType()) {",
          "273:                 if (!that.isColumnType())",
          "274:                     return false;",
          "276:                     return false;",
          "277:                 }",
          "278:             } else {",
          "279:                 if (that.isColumnType())",
          "280:                     return false;",
          "282:                     return false;",
          "283:             }",
          "",
          "[Removed Lines]",
          "269:             if (type != null ? !type.equals(that.type) : that.type != null)",
          "275:                 if (!this.colRef.equals(that.colRef)) {",
          "281:                 if (!this.value.equals(that.value))",
          "",
          "[Added Lines]",
          "270:             if (!Objects.equals(type, that.type))",
          "276:                 if (!Objects.equals(colRef, that.colRef)) {",
          "282:                 if (!Objects.equals(value, that.value))",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java||core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java -> core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:     public String getIdentity() {",
          "238:         if (identity == null) {",
          "241:         }",
          "242:         return identity;",
          "243:     }",
          "",
          "[Removed Lines]",
          "239:             identity = String.format(Locale.ROOT, \"%s.%s\", this.getDatabase().toUpperCase(Locale.ROOT), this.getName())",
          "240:                     .toUpperCase(Locale.ROOT);",
          "",
          "[Added Lines]",
          "239:             setIdentity();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:         } else {",
          "279:             this.name = null;",
          "280:         }",
          "281:     }",
          "283:     @JsonProperty(\"database\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:         if (identity != null) {",
          "281:             setIdentity();",
          "282:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "288:     @JsonProperty(\"database\")",
          "289:     public void setDatabase(String database) {",
          "290:         this.database.setName(database);",
          "291:     }",
          "293:     public ColumnDesc[] getColumns() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:         if (identity != null) {",
          "294:             setIdentity();",
          "295:         }",
          "296:     }",
          "298:     private void setIdentity() {",
          "299:         identity = String.format(Locale.ROOT, \"%s.%s\", this.getDatabase().toUpperCase(Locale.ROOT), this.getName())",
          "300:                 .toUpperCase(Locale.ROOT);",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdateMapping.java||server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdateMapping.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdateMapping.java -> server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdateMapping.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.rest.service.update;",
          "21: import java.util.Locale;",
          "23: import com.google.common.base.Preconditions;",
          "24: import com.google.common.base.Strings;",
          "26: public class TableSchemaUpdateMapping {",
          "28:     private String database;",
          "30:     private String tableName;",
          "32:     public boolean isDatabaseChanged() {",
          "33:         return !Strings.isNullOrEmpty(database);",
          "34:     }",
          "36:     public String getDatabase(String dbName) {",
          "37:         String ret = isDatabaseChanged() ? database : dbName;",
          "38:         return ret.toUpperCase(Locale.ROOT);",
          "39:     }",
          "41:     public void setDatabase(String database) {",
          "42:         this.database = database;",
          "43:     }",
          "45:     public boolean isTableNameChanged() {",
          "46:         return !Strings.isNullOrEmpty(tableName);",
          "47:     }",
          "49:     public String getTableName(String tblName) {",
          "50:         String ret = isTableNameChanged() ? tableName : tblName;",
          "51:         return ret.toUpperCase(Locale.ROOT);",
          "52:     }",
          "54:     public void setTableName(String tableName) {",
          "55:         this.tableName = tableName;",
          "56:     }",
          "58:     public boolean isTableIdentityChanged() {",
          "59:         return isDatabaseChanged() || isTableNameChanged();",
          "60:     }",
          "62:     public String getTableIdentity(String tableIdentity) {",
          "63:         String[] tableNameEs = tableIdentity.split(\"\\\\.\");",
          "64:         Preconditions.checkArgument(tableNameEs.length == 2);",
          "65:         return getTableIdentity(tableNameEs[0], tableNameEs[1]);",
          "66:     }",
          "68:     public String getTableIdentity(String database, String tableName) {",
          "69:         return getDatabase(database) + \".\" + getTableName(tableName);",
          "70:     }",
          "71: }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdater.java||server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdater.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdater.java -> server-base/src/main/java/org/apache/kylin/rest/service/update/TableSchemaUpdater.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.rest.service.update;",
          "21: import java.util.List;",
          "22: import java.util.Locale;",
          "23: import java.util.Map;",
          "25: import org.apache.kylin.cube.CubeInstance;",
          "26: import org.apache.kylin.cube.CubeSegment;",
          "27: import org.apache.kylin.cube.model.CubeDesc;",
          "28: import org.apache.kylin.cube.model.SnapshotTableDesc;",
          "29: import org.apache.kylin.metadata.model.DataModelDesc;",
          "30: import org.apache.kylin.metadata.model.JoinTableDesc;",
          "31: import org.apache.kylin.metadata.model.PartitionDesc;",
          "32: import org.apache.kylin.metadata.model.Segments;",
          "33: import org.apache.kylin.metadata.model.TableDesc;",
          "35: import com.google.common.base.Strings;",
          "36: import com.google.common.collect.Lists;",
          "37: import com.google.common.collect.Maps;",
          "39: public class TableSchemaUpdater {",
          "41:     public static TableDesc dealWithMappingForTable(TableDesc other, Map<String, TableSchemaUpdateMapping> mappings) {",
          "42:         TableSchemaUpdateMapping mapping = getTableSchemaUpdateMapping(mappings, other.getIdentity());",
          "43:         if (mapping == null) {",
          "44:             return other;",
          "45:         }",
          "47:         TableDesc copy = new TableDesc(other);",
          "49:         copy.setDatabase(mapping.getDatabase(other.getDatabase()));",
          "51:         copy.setName(mapping.getTableName(other.getName()));",
          "54:         copy.setLastModified(0L);",
          "56:         return copy;",
          "57:     }",
          "60:     public static DataModelDesc dealWithMappingForModel(DataModelDesc other,",
          "61:             Map<String, TableSchemaUpdateMapping> mappings) {",
          "63:         if (!Strings.isNullOrEmpty(other.getFilterCondition())) {",
          "64:             throw new UnsupportedOperationException(\"Cannot deal with filter condition \" + other.getFilterCondition());",
          "65:         }",
          "67:         DataModelDesc copy = DataModelDesc.getCopyOf(other);",
          "68:         copy.setLastModified(other.getLastModified());",
          "71:         TableSchemaUpdateMapping rootMapping = getTableSchemaUpdateMapping(mappings, other.getRootFactTableName());",
          "72:         if (rootMapping != null) {",
          "73:             TableDesc rootFactTable = other.getRootFactTable().getTableDesc();",
          "74:             copy.setRootFactTableName(",
          "75:                     rootMapping.getTableIdentity(rootFactTable.getDatabase(), rootFactTable.getName()));",
          "76:         }",
          "79:         JoinTableDesc[] joinTables = other.getJoinTables();",
          "80:         JoinTableDesc[] joinTablesCopy = new JoinTableDesc[joinTables.length];",
          "81:         for (int i = 0; i < joinTables.length; i++) {",
          "82:             JoinTableDesc joinTable = joinTables[i];",
          "83:             joinTablesCopy[i] = JoinTableDesc.getCopyOf(joinTable);",
          "84:             String tableIdentity = joinTable.getTable();",
          "85:             TableSchemaUpdateMapping mapping = getTableSchemaUpdateMapping(mappings, tableIdentity);",
          "86:             if (mapping != null && mapping.isTableIdentityChanged()) {",
          "87:                 joinTablesCopy[i].setTable(mapping.getTableIdentity(tableIdentity));",
          "88:             }",
          "89:         }",
          "90:         copy.setJoinTables(joinTablesCopy);",
          "93:         PartitionDesc partDesc = other.getPartitionDesc();",
          "94:         PartitionDesc partCopy = PartitionDesc.getCopyOf(partDesc);",
          "95:         if (partDesc.getPartitionDateColumnRef() != null) {",
          "96:             partCopy.setPartitionDateColumn(",
          "97:                     replacePartitionCol(partDesc.getPartitionDateColumnRef().getCanonicalName(), mappings));",
          "98:         }",
          "99:         if (partDesc.getPartitionTimeColumnRef() != null) {",
          "100:             partCopy.setPartitionTimeColumn(",
          "101:                     replacePartitionCol(partDesc.getPartitionTimeColumnRef().getCanonicalName(), mappings));",
          "102:         }",
          "103:         copy.setPartitionDesc(partCopy);",
          "105:         return copy;",
          "106:     }",
          "108:     public static CubeDesc dealWithMappingForCubeDesc(CubeDesc other, Map<String, TableSchemaUpdateMapping> mappings) {",
          "109:         CubeDesc copy = CubeDesc.getCopyOf(other);",
          "110:         copy.setLastModified(other.getLastModified());",
          "113:         if (other.getSnapshotTableDescList() != null && !other.getSnapshotTableDescList().isEmpty()) {",
          "114:             List<SnapshotTableDesc> snapshotTableDescListCopy = Lists",
          "115:                     .newArrayListWithExpectedSize(other.getSnapshotTableDescList().size());",
          "116:             for (SnapshotTableDesc snapshotDesc : other.getSnapshotTableDescList()) {",
          "117:                 TableSchemaUpdateMapping mapping = getTableSchemaUpdateMapping(mappings, snapshotDesc.getTableName());",
          "118:                 if (mapping != null && mapping.isTableIdentityChanged()) {",
          "119:                     snapshotDesc = SnapshotTableDesc.getCopyOf(snapshotDesc);",
          "120:                     snapshotDesc.setTableName(mapping.getTableIdentity(snapshotDesc.getTableName()));",
          "121:                 }",
          "122:                 snapshotTableDescListCopy.add(snapshotDesc);",
          "123:             }",
          "124:             copy.setSnapshotTableDescList(snapshotTableDescListCopy);",
          "125:         }",
          "127:         return copy;",
          "128:     }",
          "130:     public static CubeInstance dealWithMappingForCube(CubeInstance other,",
          "131:             Map<String, TableSchemaUpdateMapping> mappings) {",
          "132:         CubeInstance copy = CubeInstance.getCopyOf(other);",
          "133:         copy.setLastModified(other.getLastModified());",
          "136:         if (other.getSnapshots() != null && !other.getSnapshots().isEmpty()) {",
          "137:             Map<String, String> snapshotsCopy = replaceTableIdentityForTableSnapshots(other.getSnapshots(), mappings);",
          "138:             copy.resetSnapshots();",
          "139:             copy.getSnapshots().putAll(snapshotsCopy);",
          "140:         }",
          "143:         if (other.getSegments() != null && !other.getSegments().isEmpty()) {",
          "144:             Segments<CubeSegment> segmentsCopy = new Segments<>();",
          "145:             for (CubeSegment segment : other.getSegments()) {",
          "146:                 CubeSegment segmentCopy = CubeSegment.getCopyOf(segment);",
          "147:                 segmentCopy.setCubeInstance(copy);",
          "148:                 Map<String, String> snapshotsCopy = replaceTableIdentityForTableSnapshots(segment.getSnapshots(),",
          "149:                         mappings);",
          "150:                 segmentCopy.resetSnapshots();",
          "151:                 segmentCopy.getSnapshots().putAll(snapshotsCopy);",
          "152:                 segmentsCopy.add(segmentCopy);",
          "153:             }",
          "154:             copy.setSegments(segmentsCopy);",
          "155:         }",
          "157:         return copy;",
          "158:     }",
          "160:     private static Map<String, String> replaceTableIdentityForTableSnapshots(Map<String, String> snapshots,",
          "161:             Map<String, TableSchemaUpdateMapping> mappings) {",
          "162:         Map<String, String> snapshotsCopy = Maps.newHashMapWithExpectedSize(snapshots.size());",
          "163:         for (String tableIdentity : snapshots.keySet()) {",
          "164:             String resPath = snapshots.get(tableIdentity);",
          "165:             TableSchemaUpdateMapping mapping = getTableSchemaUpdateMapping(mappings, tableIdentity);",
          "166:             if (mapping != null && mapping.isTableIdentityChanged()) {",
          "167:                 tableIdentity = mapping.getTableIdentity(tableIdentity);",
          "168:             }",
          "169:             snapshotsCopy.put(tableIdentity, resPath);",
          "170:         }",
          "171:         return snapshotsCopy;",
          "172:     }",
          "174:     private static String replacePartitionCol(String partCol, Map<String, TableSchemaUpdateMapping> mappings) {",
          "175:         int cut = partCol.lastIndexOf('.');",
          "176:         if (cut < 0) {",
          "177:             return partCol;",
          "178:         }",
          "179:         String partTableIdentity = partCol.substring(0, cut);",
          "180:         TableSchemaUpdateMapping mapping = getTableSchemaUpdateMapping(mappings, partTableIdentity);",
          "181:         if (mapping != null) {",
          "182:             return mapping.getTableIdentity(partTableIdentity) + \".\" + partCol.substring(cut + 1);",
          "183:         }",
          "184:         return partCol;",
          "185:     }",
          "187:     public static TableSchemaUpdateMapping getTableSchemaUpdateMapping(Map<String, TableSchemaUpdateMapping> mappings,",
          "188:             String key) {",
          "189:         return mappings.get(key.toUpperCase(Locale.ROOT));",
          "190:     }",
          "191: }",
          "",
          "---------------"
        ],
        "server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java||server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java": [
          "File: server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java -> server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.rest.service.update;",
          "21: import java.io.ByteArrayInputStream;",
          "22: import java.io.ByteArrayOutputStream;",
          "23: import java.io.DataInputStream;",
          "24: import java.io.DataOutputStream;",
          "25: import java.io.File;",
          "26: import java.io.FileInputStream;",
          "27: import java.io.FileNotFoundException;",
          "28: import java.io.IOException;",
          "29: import java.nio.charset.StandardCharsets;",
          "30: import java.nio.file.Files;",
          "31: import java.util.Map;",
          "32: import java.util.Set;",
          "34: import org.apache.kylin.common.persistence.ResourceStore;",
          "35: import org.apache.kylin.common.persistence.RootPersistentEntity;",
          "36: import org.apache.kylin.common.persistence.Serializer;",
          "37: import org.apache.kylin.common.util.JsonUtil;",
          "38: import org.apache.kylin.common.util.LocalFileMetadataTestCase;",
          "39: import org.apache.kylin.cube.CubeDescManager;",
          "40: import org.apache.kylin.cube.CubeInstance;",
          "41: import org.apache.kylin.cube.CubeManager;",
          "42: import org.apache.kylin.cube.model.CubeDesc;",
          "43: import org.apache.kylin.metadata.TableMetadataManager;",
          "44: import org.apache.kylin.metadata.model.DataModelDesc;",
          "45: import org.apache.kylin.metadata.model.DataModelManager;",
          "46: import org.apache.kylin.metadata.model.TableDesc;",
          "47: import org.junit.Assert;",
          "48: import org.junit.Before;",
          "49: import org.junit.Test;",
          "51: import com.fasterxml.jackson.core.type.TypeReference;",
          "52: import com.google.common.collect.Sets;",
          "54: public class TableSchemaUpdaterTest extends LocalFileMetadataTestCase {",
          "56:     private final String mappingRootPath = \"src/test/resources/update\";",
          "57:     private final String mappingFileName = \"TableSchemaUpdateMapping.json\";",
          "58:     private Map<String, TableSchemaUpdateMapping> mappings;",
          "60:     @Before",
          "61:     public void setUp() throws IOException {",
          "62:         this.createTestMetadata();",
          "64:         File mappingFile = new File(mappingRootPath + \"/\" + mappingFileName);",
          "65:         String content = new String(Files.readAllBytes(mappingFile.toPath()), StandardCharsets.UTF_8);",
          "66:         mappings = JsonUtil.readValue(content, new TypeReference<Map<String, TableSchemaUpdateMapping>>() {",
          "67:         });",
          "68:     }",
          "70:     @Test",
          "71:     public void testDealWithMappingForTable() throws IOException {",
          "72:         TableMetadataManager tableMetaManager = TableMetadataManager.getInstance(getTestConfig());",
          "73:         ResourceStore store = tableMetaManager.getStore();",
          "75:         Set<TableDesc> tables = Sets.newHashSet();",
          "76:         for (String tableIdentity : mappings.keySet()) {",
          "77:             tables.add(store.getResource(TableDesc.concatResourcePath(tableIdentity, null),",
          "78:                     TableMetadataManager.TABLE_SERIALIZER));",
          "79:         }",
          "81:         for (TableDesc tableDesc : tables) {",
          "82:             TableDesc updated = TableSchemaUpdater.dealWithMappingForTable(tableDesc, mappings);",
          "83:             updated = reinit(updated, TableMetadataManager.TABLE_SERIALIZER);",
          "85:             try (DataInputStream bis = new DataInputStream(new FileInputStream(",
          "86:                     new File(mappingRootPath + TableDesc.concatResourcePath(updated.getIdentity(), null))))) {",
          "87:                 TableDesc expected = TableMetadataManager.TABLE_SERIALIZER.deserialize(bis);",
          "88:                 Assert.assertEquals(expected, updated);",
          "89:             } catch (Exception e) {",
          "90:                 Assert.fail(\"Table identity is not updated correctly\");",
          "91:             }",
          "92:         }",
          "93:     }",
          "95:     @Test",
          "96:     public void testDealWithMappingForModel() throws IOException {",
          "97:         DataModelManager dataModelManager = DataModelManager.getInstance(getTestConfig());",
          "98:         DataModelDesc model = dataModelManager.getDataModelDesc(\"ci_inner_join_model\");",
          "100:         DataModelDesc updated = TableSchemaUpdater.dealWithMappingForModel(model, mappings);",
          "101:         updated = reinit(updated, dataModelManager.getDataModelSerializer());",
          "103:         try (DataInputStream bis = new DataInputStream(",
          "104:                 new FileInputStream(new File(mappingRootPath + DataModelDesc.concatResourcePath(updated.getName()))))) {",
          "105:             DataModelDesc expected = dataModelManager.getDataModelSerializer().deserialize(bis);",
          "106:             Assert.assertTrue(expected.equalsRaw(updated));",
          "107:         } catch (Exception e) {",
          "108:             Assert.fail(\"Model is not updated correctly\");",
          "109:         }",
          "110:     }",
          "112:     @Test",
          "113:     public void testDealWithMappingForCubeDesc() throws IOException {",
          "114:         CubeDescManager cubeDescManager = CubeDescManager.getInstance(getTestConfig());",
          "115:         CubeDesc cubeDesc = cubeDescManager.getCubeDesc(\"ci_left_join_cube\");",
          "117:         CubeDesc updated = TableSchemaUpdater.dealWithMappingForCubeDesc(cubeDesc, mappings);",
          "118:         updated = reinit(updated, cubeDescManager.CUBE_DESC_SERIALIZER);",
          "120:         try (DataInputStream bis = new DataInputStream(",
          "121:                 new FileInputStream(new File(mappingRootPath + CubeDesc.concatResourcePath(updated.getName()))))) {",
          "122:             CubeDesc expected = cubeDescManager.CUBE_DESC_SERIALIZER.deserialize(bis);",
          "123:             Assert.assertTrue(expected.equalsRaw(updated));",
          "124:         } catch (Exception e) {",
          "125:             Assert.fail(\"CubeDesc is not updated correctly\");",
          "126:         }",
          "127:     }",
          "129:     @Test",
          "130:     public void testDealWithMappingForCube() throws IOException {",
          "131:         CubeManager cubeManager = CubeManager.getInstance(getTestConfig());",
          "132:         CubeInstance cube = cubeManager.getCube(\"test_kylin_cube_with_slr_left_join_ready\");",
          "134:         CubeInstance updated = TableSchemaUpdater.dealWithMappingForCube(cube, mappings);",
          "135:         updated = reinit(updated, cubeManager.CUBE_SERIALIZER);",
          "137:         try (DataInputStream bis = new DataInputStream(",
          "138:                 new FileInputStream(new File(mappingRootPath + CubeInstance.concatResourcePath(updated.getName()))))) {",
          "139:             CubeInstance expected = cubeManager.CUBE_SERIALIZER.deserialize(bis);",
          "140:             Assert.assertTrue(expected.equalsRaw(updated));",
          "141:         } catch (Exception e) {",
          "142:             Assert.fail(\"CubeInstance is not updated correctly\");",
          "143:         }",
          "144:     }",
          "146:     private <T extends RootPersistentEntity> T reinit(T obj, Serializer<T> serializer) throws IOException {",
          "147:         ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "148:         DataOutputStream dos = new DataOutputStream(baos);",
          "149:         serializer.serialize(obj, dos);",
          "150:         ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());",
          "151:         DataInputStream dis = new DataInputStream(bais);",
          "152:         return serializer.deserialize(dis);",
          "153:     }",
          "154: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd2977e21c51f1afed668f2d9713cf562f2dc42d",
      "candidate_info": {
        "commit_hash": "fd2977e21c51f1afed668f2d9713cf562f2dc42d",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/fd2977e21c51f1afed668f2d9713cf562f2dc42d",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java"
        ],
        "message": "Remove useless code",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java||server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2107:         return getFileName(kylinHome + File.separator + \"lib\", PARQUET_JOB_JAR_NAME_PATTERN);",
          "2108:     }",
          "2118:     public void overrideKylinParquetJobJarPath(String path) {",
          "2119:         logger.info(\"override {} to {}\", KYLIN_ENGINE_PARQUET_JOB_JAR, path);",
          "2120:         System.setProperty(KYLIN_ENGINE_PARQUET_JOB_JAR, path);",
          "",
          "[Removed Lines]",
          "2113:     @ConfigTag(ConfigTag.Tag.DEBUG_HACK)",
          "2114:     public String getSparkSubmitCmd() {",
          "2115:         return getOptional(\"kylin.engine.spark-cmd\", null);",
          "2116:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java -> kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:                                       String appArgs) {",
          "398:         StringBuilder sb = new StringBuilder();",
          "402:         sb.append(\"export HADOOP_CONF_DIR=%s && %s --class org.apache.kylin.engine.spark.application.SparkEntry \");",
          "404:         Map<String, String> sparkConfs = getSparkConfigOverride(config);",
          "",
          "[Removed Lines]",
          "400:         String sparkSubmitCmd = config.getSparkSubmitCmd() != null ?",
          "401:                 config.getSparkSubmitCmd() : KylinConfig.getSparkHome() + \"/bin/spark-submit\";",
          "",
          "[Added Lines]",
          "400:         String sparkSubmitCmd = KylinConfig.getSparkHome() + \"/bin/spark-submit\";",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java||server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import javax.servlet.http.HttpServletResponse;",
          "28: import org.apache.kylin.common.persistence.AutoDeleteDirectory;",
          "29: import org.apache.kylin.metadata.badquery.BadQueryEntry;",
          "30: import org.apache.kylin.metadata.badquery.BadQueryHistory;",
          "31: import org.apache.kylin.rest.exception.InternalErrorException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.kylin.common.util.ParameterFilter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     public void dumpJobDiagnosisInfo(@PathVariable String jobId, final HttpServletRequest request,",
          "96:             final HttpServletResponse response) {",
          "97:         try (AutoDeleteDirectory diagDir = new AutoDeleteDirectory(\"diag_job\", \"\")) {",
          "99:             setDownloadResponse(filePath, response);",
          "100:         } catch (IOException e) {",
          "101:             throw new InternalErrorException(\"Failed to dump job diagnosis info. \" + e.getMessage(), e);",
          "",
          "[Removed Lines]",
          "98:             String filePath = dgService.dumpJobDiagnosisInfo(jobId, diagDir.getFile());",
          "",
          "[Added Lines]",
          "99:             String filePath = dgService.dumpJobDiagnosisInfo(ParameterFilter.checkParameter(jobId), diagDir.getFile());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20e544636d3425ec0917f04305a1db0b19910486",
      "candidate_info": {
        "commit_hash": "20e544636d3425ec0917f04305a1db0b19910486",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/20e544636d3425ec0917f04305a1db0b19910486",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-cube/src/main/java/org/apache/kylin/cube/RawQueryLastHacker.java"
        ],
        "message": "KYLIN-5250 work round for no hack aggregation group",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-cube/src/main/java/org/apache/kylin/cube/RawQueryLastHacker.java||core-cube/src/main/java/org/apache/kylin/cube/RawQueryLastHacker.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2822:     public String getEncryptCipherIvSpec() {",
          "2823:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
          "2824:     }",
          "2825: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2826:     public boolean isEnabledNoAggQuery() {",
          "2827:         return Boolean.parseBoolean(getOptional(\"kylin.query.enable-no-aggregate-query\", FALSE));",
          "2828:     }",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/RawQueryLastHacker.java||core-cube/src/main/java/org/apache/kylin/cube/RawQueryLastHacker.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/RawQueryLastHacker.java -> core-cube/src/main/java/org/apache/kylin/cube/RawQueryLastHacker.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.cube;",
          "21: import org.apache.kylin.common.debug.BackdoorToggles;",
          "22: import org.apache.kylin.cube.model.CubeDesc;",
          "23: import org.apache.kylin.metadata.model.FunctionDesc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import org.apache.kylin.common.KylinConfig;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     private static final Logger logger = LoggerFactory.getLogger(RawQueryLastHacker.class);",
          "36:     public static void hackNoAggregations(SQLDigest sqlDigest, CubeDesc cubeDesc, TupleInfo tupleInfo) {",
          "38:             return;",
          "39:         }",
          "",
          "[Removed Lines]",
          "37:         if (!sqlDigest.isRawQuery || BackdoorToggles.getDisabledRawQueryLastHacker()) {",
          "",
          "[Added Lines]",
          "38:         if (!sqlDigest.isRawQuery ||",
          "39:                 BackdoorToggles.getDisabledRawQueryLastHacker() ||",
          "40:                 KylinConfig.getInstanceFromEnv().isEnabledNoAggQuery()) {",
          "41:             if (KylinConfig.getInstanceFromEnv().isEnabledNoAggQuery()) {",
          "42:                 logger.info(\"No hack for aggregation sql by kylin.query.enable-no-aggregate-query which is 'true'.\");",
          "43:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63f9ac6bcd0db005f10935d88747d39fc0819ab7",
      "candidate_info": {
        "commit_hash": "63f9ac6bcd0db005f10935d88747d39fc0819ab7",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/63f9ac6bcd0db005f10935d88747d39fc0819ab7",
        "files": [
          "server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java",
          "server-base/src/main/java/org/apache/kylin/rest/signature/FactTableRealizationSetCalculator.java",
          "tool/src/main/java/org/apache/kylin/tool/ExtendCubeToHybridCLI.java"
        ],
        "message": "minor,log print format",
        "before_after_code_files": [
          "server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java||server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java",
          "server-base/src/main/java/org/apache/kylin/rest/signature/FactTableRealizationSetCalculator.java||server-base/src/main/java/org/apache/kylin/rest/signature/FactTableRealizationSetCalculator.java",
          "tool/src/main/java/org/apache/kylin/tool/ExtendCubeToHybridCLI.java||tool/src/main/java/org/apache/kylin/tool/ExtendCubeToHybridCLI.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java||server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java -> server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:         try {",
          "163:             timestamp = store.getResourceTimestamp(resPath);",
          "164:         } catch (IOException e) {",
          "166:         }",
          "167:         return timestamp;",
          "168:     }",
          "",
          "[Removed Lines]",
          "165:             logger.warn(\"Failed to get resource timestamp from remote resource store, details:{}\", e);",
          "",
          "[Added Lines]",
          "165:             logger.warn(\"Failed to get resource timestamp from remote resource store, details:\", e);",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/signature/FactTableRealizationSetCalculator.java||server-base/src/main/java/org/apache/kylin/rest/signature/FactTableRealizationSetCalculator.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/signature/FactTableRealizationSetCalculator.java -> server-base/src/main/java/org/apache/kylin/rest/signature/FactTableRealizationSetCalculator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     private String getRootFactTableForRealization(IRealization realization) {",
          "77:         if (realization == null) {",
          "79:             return null;",
          "80:         }",
          "81:         DataModelDesc model = realization.getModel();",
          "82:         if (model == null) {",
          "84:             return null;",
          "85:         }",
          "86:         TableRef rootFactTable = model.getRootFactTable();",
          "87:         if (rootFactTable == null) {",
          "89:             return null;",
          "90:         }",
          "91:         return rootFactTable.getTableIdentity();",
          "",
          "[Removed Lines]",
          "78:             logger.warn(\"Cannot find realization %s\", realization);",
          "83:             logger.warn(\"The model for realization %s is null\", realization.getName());",
          "88:             logger.warn(\"The root table for model %s is null\", model.getName());",
          "",
          "[Added Lines]",
          "78:             logger.warn(\"Cannot find realization {}\", realization);",
          "83:             logger.warn(\"The model for realization {} is null\", realization.getName());",
          "88:             logger.warn(\"The root table for model {} is null\", model.getName());",
          "",
          "---------------"
        ],
        "tool/src/main/java/org/apache/kylin/tool/ExtendCubeToHybridCLI.java||tool/src/main/java/org/apache/kylin/tool/ExtendCubeToHybridCLI.java": [
          "File: tool/src/main/java/org/apache/kylin/tool/ExtendCubeToHybridCLI.java -> tool/src/main/java/org/apache/kylin/tool/ExtendCubeToHybridCLI.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:             logger.info(\"Job Finished.\");",
          "102:         } catch (Exception e) {",
          "103:             e.printStackTrace();",
          "105:         }",
          "106:     }",
          "",
          "[Removed Lines]",
          "104:             logger.error(\"Job Aborted.\", e.getMessage());",
          "",
          "[Added Lines]",
          "104:             logger.error(\"Job Aborted. msg:{}\", e.getMessage());",
          "",
          "---------------"
        ]
      }
    }
  ]
}