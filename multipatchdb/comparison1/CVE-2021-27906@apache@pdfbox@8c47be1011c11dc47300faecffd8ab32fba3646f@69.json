{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e961e5855efd964e816b5fc05c8fbe6c78ff4977",
      "candidate_info": {
        "commit_hash": "e961e5855efd964e816b5fc05c8fbe6c78ff4977",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e961e5855efd964e816b5fc05c8fbe6c78ff4977",
        "files": [
          "xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891629 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java||xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java||xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java": [
          "File: xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java -> xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         Calendar retval = null;",
          "86:         if ((date != null) && (date.trim().length() > 0))",
          "87:         {",
          "89:             int month = 1;",
          "90:             int day = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:             date = date.trim();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:                 }",
          "104:                 else if (date.startsWith(\"D:\"))",
          "105:                 {",
          "107:                 }",
          "109:                 date = date.replaceAll(\"[-:T]\", \"\");",
          "",
          "[Removed Lines]",
          "106:                     date = date.substring(2, date.length());",
          "",
          "[Added Lines]",
          "108:                     date = date.substring(2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:             catch (NumberFormatException e)",
          "194:             {",
          "201:                 {",
          "203:                     date = date.substring(0, date.length() - 3) + date.substring(date.length() - 2);",
          "",
          "[Removed Lines]",
          "198:                 if (date.substring(date.length() - 3, date.length() - 2).equals(\":\")",
          "199:                         && (date.substring(date.length() - 6, date.length() - 5).equals(\"+\") || date.substring(",
          "200:                                 date.length() - 6, date.length() - 5).equals(\"-\")))",
          "",
          "[Added Lines]",
          "199:                 if (date.charAt(date.length() - 3) == ':' &&",
          "200:                     (date.charAt(date.length() - 6) == '+' || date.charAt(date.length() - 6) == '-'))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:         {",
          "350:             for (int i = 1; i <= timeZoneMatcher.groupCount(); i++)",
          "351:             {",
          "353:                 {",
          "355:                 }",
          "356:             }",
          "357:         }",
          "",
          "[Removed Lines]",
          "352:                 if (timeZoneMatcher.group(i) != null)",
          "354:                     timeZoneString = timeZoneMatcher.group(i);",
          "",
          "[Added Lines]",
          "352:                 String group = timeZoneMatcher.group(i);",
          "353:                 if (group != null)",
          "355:                     timeZoneString = group;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e4a1e45bff1552e8f11c163110be4e5356c228d",
      "candidate_info": {
        "commit_hash": "9e4a1e45bff1552e8f11c163110be4e5356c228d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9e4a1e45bff1552e8f11c163110be4e5356c228d",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java"
        ],
        "message": "PDFBOX-4892: remove unneeded assignment, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889726 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.awt.geom.AffineTransform;",
          "21: import java.awt.image.ColorModel;",
          "22: import java.io.IOException;",
          "24: import java.util.HashMap;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "",
          "[Removed Lines]",
          "23: import java.util.ArrayList;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "42:     private List<Patch> patchList = new ArrayList<Patch>();",
          "",
          "[Added Lines]",
          "41:     private List<Patch> patchList;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f34a33824c4363b9b683245cb582328dc92b79ca",
      "candidate_info": {
        "commit_hash": "f34a33824c4363b9b683245cb582328dc92b79ca",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f34a33824c4363b9b683245cb582328dc92b79ca",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
        ],
        "message": "PDFBOX-5112: added another check for the W and the Index array, reduce memory footprint\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887079 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [
            "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
          ],
          "candidate": [
            "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
          ]
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdfparser;",
          "19: import java.io.IOException;",
          "22: import java.util.Arrays;",
          "23: import java.util.Iterator;",
          "26: import org.apache.pdfbox.cos.COSArray;",
          "27: import org.apache.pdfbox.cos.COSBase;",
          "",
          "[Removed Lines]",
          "21: import java.util.ArrayList;",
          "24: import java.util.List;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: {",
          "42:     private final XrefTrailerResolver xrefTrailerResolver;",
          "43:     private final int[] w = new int[3];",
          "",
          "[Removed Lines]",
          "44:     private final List<Long> objNums = new ArrayList<Long>();",
          "",
          "[Added Lines]",
          "41:     private ObjectNumbers objectNumbers = null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:         {",
          "76:             throw new IOException(\"/W array is missing in Xref stream\");",
          "77:         }",
          "78:         for (int i = 0; i < 3; i++)",
          "79:         {",
          "80:             w[i] = wArray.getInt(i, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:         if (wArray.size() != 3)",
          "76:         {",
          "77:             throw new IOException(",
          "78:                     \"Wrong number of values for /W array in XRef: \" + Arrays.toString(w));",
          "79:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:             indexArray.add(COSInteger.ZERO);",
          "93:             indexArray.add(COSInteger.get(stream.getInt(COSName.SIZE, 0)));",
          "94:         }",
          "101:         {",
          "122:         }",
          "123:     }",
          "125:     private void close() throws IOException",
          "",
          "[Removed Lines]",
          "99:         Iterator<COSBase> indexIter = indexArray.iterator();",
          "100:         while (indexIter.hasNext())",
          "102:             COSBase base = indexIter.next();",
          "103:             if (!(base instanceof COSInteger))",
          "104:             {",
          "105:                 throw new IOException(\"Xref stream must have integer in /Index array\");",
          "106:             }",
          "107:             long objID = ((COSInteger) base).longValue();",
          "108:             if (!indexIter.hasNext())",
          "109:             {",
          "110:                 break;",
          "111:             }",
          "112:             base = indexIter.next();",
          "113:             if (!(base instanceof COSInteger))",
          "114:             {",
          "115:                 throw new IOException(\"Xref stream must have integer in /Index array\");",
          "116:             }",
          "117:             int size = ((COSInteger) base).intValue();",
          "118:             for (int i = 0; i < size; i++)",
          "119:             {",
          "120:                 objNums.add(objID + i);",
          "121:             }",
          "",
          "[Added Lines]",
          "97:         if (indexArray.size() % 2 == 1)",
          "99:             throw new IOException(",
          "100:                     \"Wrong number of values for /Index array in XRef: \" + Arrays.toString(w));",
          "103:         objectNumbers = new ObjectNumbers(indexArray);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "129:             seqSource.close();",
          "130:         }",
          "131:         document = null;",
          "133:     }",
          "",
          "[Removed Lines]",
          "132:         objNums.clear();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "139:     public void parse() throws IOException",
          "140:     {",
          "142:         byte[] currLine = new byte[w[0] + w[1] + w[2]];",
          "145:         {",
          "146:             seqSource.read(currLine);",
          "152:             int type = w[0] == 0 ? 1 : (int) parseValue(currLine, 0, w[0]);",
          "",
          "[Removed Lines]",
          "141:         Iterator<Long> objIter = objNums.iterator();",
          "144:         while (!seqSource.isEOF() && objIter.hasNext())",
          "149:             Long objID = objIter.next();",
          "",
          "[Added Lines]",
          "123:         while (!seqSource.isEOF() && objectNumbers.hasNext())",
          "127:             long objID = objectNumbers.next();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "184:         }",
          "185:         return value;",
          "186:     }",
          "187: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:     private static class ObjectNumbers implements Iterator<Long>",
          "166:     {",
          "167:         private final long[] start;",
          "168:         private final long[] end;",
          "169:         private int currentRange = 0;",
          "170:         private long currentEnd = 0;",
          "171:         private long currentNumber = 0;",
          "172:         private long maxValue = 0;",
          "174:         private ObjectNumbers(COSArray indexArray) throws IOException",
          "175:         {",
          "176:             start = new long[indexArray.size() / 2];",
          "177:             end = new long[start.length];",
          "178:             int counter = 0;",
          "179:             Iterator<COSBase> indexIter = indexArray.iterator();",
          "180:             while (indexIter.hasNext())",
          "181:             {",
          "182:                 COSBase base = indexIter.next();",
          "183:                 if (!(base instanceof COSInteger))",
          "184:                 {",
          "185:                     throw new IOException(\"Xref stream must have integer in /Index array\");",
          "186:                 }",
          "187:                 long startValue = ((COSInteger) base).longValue();",
          "188:                 if (!indexIter.hasNext())",
          "189:                 {",
          "190:                     break;",
          "191:                 }",
          "192:                 base = indexIter.next();",
          "193:                 if (!(base instanceof COSInteger))",
          "194:                 {",
          "195:                     throw new IOException(\"Xref stream must have integer in /Index array\");",
          "196:                 }",
          "197:                 long sizeValue = ((COSInteger) base).longValue();",
          "198:                 start[counter] = startValue;",
          "199:                 end[counter++] = startValue + sizeValue;",
          "200:             }",
          "201:             currentNumber = start[0];",
          "202:             currentEnd = end[0];",
          "203:             maxValue = end[counter - 1];",
          "204:         }",
          "206:         @Override",
          "207:         public boolean hasNext()",
          "208:         {",
          "209:             return currentNumber < maxValue;",
          "210:         }",
          "212:         @Override",
          "213:         public Long next()",
          "214:         {",
          "215:             if (currentNumber < currentEnd)",
          "216:             {",
          "217:                 return currentNumber++;",
          "218:             }",
          "219:             currentNumber = start[++currentRange];",
          "220:             currentEnd = end[currentRange];",
          "221:             return currentNumber++;",
          "222:         }",
          "224:         @Override",
          "225:         public void remove()",
          "226:         {",
          "227:             throw new UnsupportedOperationException();",
          "228:         }",
          "230:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08d8ff5198f999ef7748d55e9947aa6933bd9abc",
      "candidate_info": {
        "commit_hash": "08d8ff5198f999ef7748d55e9947aa6933bd9abc",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/08d8ff5198f999ef7748d55e9947aa6933bd9abc",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"
        ],
        "message": "PDFBOX-5254: preserve a possible indirect object reference\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892111 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.apache.commons.logging.LogFactory;",
          "29: import org.apache.fontbox.util.BoundingBox;",
          "30: import org.apache.pdfbox.contentstream.operator.Operator;",
          "31: import org.apache.pdfbox.cos.COSName;",
          "32: import org.apache.pdfbox.cos.COSString;",
          "33: import org.apache.pdfbox.pdfparser.PDFStreamParser;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import org.apache.pdfbox.cos.COSDictionary;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:             {",
          "145:                 continue;",
          "146:             }",
          "147:             for (COSName fontResourceName : widgetResources.getFontNames())",
          "148:             {",
          "149:                 try",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:             COSDictionary widgetFontDict = widgetResources.getCOSObject()",
          "149:                     .getCOSDictionary(COSName.FONT);",
          "150:             COSDictionary acroFormFontDict = acroFormResources.getCOSObject()",
          "151:                     .getCOSDictionary(COSName.FONT);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151:                     if (acroFormResources.getFont(fontResourceName) == null)",
          "152:                     {",
          "153:                         LOG.debug(\"Adding font resource \" + fontResourceName + \" from widget to AcroForm\");",
          "155:                     }",
          "156:                 }",
          "157:                 catch (IOException e)",
          "",
          "[Removed Lines]",
          "154:                         acroFormResources.put(fontResourceName, widgetResources.getFont(fontResourceName));",
          "",
          "[Added Lines]",
          "160:                         acroFormFontDict.setItem(fontResourceName,",
          "161:                                 widgetFontDict.getItem(fontResourceName));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e78233297386cbf5758327c6f32dde8150190388",
      "candidate_info": {
        "commit_hash": "e78233297386cbf5758327c6f32dde8150190388",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e78233297386cbf5758327c6f32dde8150190388",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java"
        ],
        "message": "PDFBOX-4963: avoid TOCTOU-like race condition when a font is needed, as suggested by Maison\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882035 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:         @Override",
          "120:         {",
          "121:             FontBoxFont cached = parent.cache.getFont(this);",
          "122:             if (cached != null)",
          "123:             {",
          "",
          "[Removed Lines]",
          "119:         public FontBoxFont getFont()",
          "",
          "[Added Lines]",
          "119:         public synchronized FontBoxFont getFont()",
          "",
          "---------------"
        ]
      }
    }
  ]
}