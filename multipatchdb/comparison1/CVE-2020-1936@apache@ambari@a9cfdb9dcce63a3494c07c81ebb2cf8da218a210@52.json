{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "230188512eee49a04011e3772a313188c3802ff3",
      "candidate_info": {
        "commit_hash": "230188512eee49a04011e3772a313188c3802ff3",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/230188512eee49a04011e3772a313188c3802ff3",
        "files": [
          "ambari-logsearch/ambari-logsearch-logfeeder/pom.xml",
          "ambari-logsearch/ambari-logsearch-server/pom.xml",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java"
        ],
        "message": "AMBARI-25319 - Logsearch: Upgrade dependency on org.springframework.boot:spring-boot-starter-jetty:jar:2.0.6.RELEASE (#3029)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "22: import org.apache.ambari.logsearch.config.api.LogSearchPropertyDescription;",
          "23: import org.springframework.beans.factory.annotation.Value;",
          "25: import org.springframework.context.annotation.Configuration;",
          "29: @Configuration",
          "30: public class LogSearchConfigApiConfig {",
          "",
          "[Removed Lines]",
          "21: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "24: import org.springframework.context.annotation.Bean;",
          "27: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_PROPERTIES_FILE;",
          "",
          "[Added Lines]",
          "21: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_PROPERTIES_FILE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:   @Value(\"${logsearch.config.api.filter.zk.enabled:false}\")",
          "60:   public boolean zkFilterStorage;",
          "67:   public boolean isConfigApiEnabled() {",
          "68:     return configApiEnabled;",
          "69:   }",
          "",
          "[Removed Lines]",
          "62:   @Bean(name = \"logLevelFilterManagerState\")",
          "63:   public LogLevelFilterManagerState logLevelFilterManagerState() {",
          "64:     return new LogLevelFilterManagerState();",
          "65:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   @Inject",
          "101:   private LogSearchConfigApiConfig logSearchConfigApiConfig;",
          "103:   @Override",
          "104:   protected void configure(HttpSecurity http) throws Exception {",
          "105:     http",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:   @Inject",
          "104:   private LogsearchAuthenticationProvider logsearchAuthenticationProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:         .requestMatchers(requestMatcher()).permitAll()",
          "109:         .antMatchers(\"/**\").authenticated()",
          "110:       .and()",
          "112:       .httpBasic()",
          "113:         .authenticationEntryPoint(logsearchAuthenticationEntryPoint())",
          "114:       .and()",
          "",
          "[Removed Lines]",
          "111:       .authenticationProvider(logsearchAuthenticationProvider())",
          "",
          "[Added Lines]",
          "114:       .authenticationProvider(logsearchAuthenticationProvider)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:     return new LogsearchKRBAuthenticationFilter(requestMatcher());",
          "144:   }",
          "151:   @Bean",
          "152:   public LogsearchJWTFilter logsearchJwtFilter() throws Exception {",
          "153:     LogsearchJWTFilter filter = new LogsearchJWTFilter(requestMatcher(), authPropsConfig);",
          "",
          "[Removed Lines]",
          "146:   @Bean",
          "147:   public LogsearchAuthenticationProvider logsearchAuthenticationProvider() {",
          "148:     return new LogsearchAuthenticationProvider();",
          "149:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "25: import org.apache.ambari.logsearch.dao.SolrSchemaFieldDao;",
          "26: import org.springframework.context.annotation.Bean;",
          "27: import org.springframework.context.annotation.Configuration;",
          "",
          "[Removed Lines]",
          "21: import org.apache.ambari.logsearch.conf.global.SolrAuditLogsState;",
          "22: import org.apache.ambari.logsearch.conf.global.SolrCollectionState;",
          "23: import org.apache.ambari.logsearch.conf.global.SolrEventHistoryState;",
          "24: import org.apache.ambari.logsearch.conf.global.SolrServiceLogsState;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     return new SolrSchemaFieldDao();",
          "37:   }",
          "54:   @Bean",
          "55:   public SolrClientsHolder solrClientsHolder() {",
          "56:     return new SolrClientsHolder();",
          "",
          "[Removed Lines]",
          "39:   @Bean(name = \"solrServiceLogsState\")",
          "40:   public SolrCollectionState solrServiceLogsState() {",
          "41:     return new SolrServiceLogsState();",
          "42:   }",
          "44:   @Bean(name = \"solrAuditLogsState\")",
          "45:   public SolrCollectionState solrAuditLogsState() {",
          "46:     return new SolrAuditLogsState();",
          "47:   }",
          "49:   @Bean(name = \"solrEventHistoryState\")",
          "50:   public SolrCollectionState solrEventHistoryState() {",
          "51:     return new SolrEventHistoryState();",
          "52:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a10880a63e6fbef44662ba9f37e87082e9985c64",
      "candidate_info": {
        "commit_hash": "a10880a63e6fbef44662ba9f37e87082e9985c64",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a10880a63e6fbef44662ba9f37e87082e9985c64",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java"
        ],
        "message": "AMBARI-25520. Insecure Transport : Weak SSL Cipher and weak protocol. (#3204) (dvitiuk via dgrinenko)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   public static final EnumSet<DispatcherType> DISPATCHER_TYPES = EnumSet.of(DispatcherType.REQUEST);",
          "202:   private static final int DEFAULT_ACCEPTORS_COUNT = 1;",
          "204:   static {",
          "205:     Velocity.setProperty(\"runtime.log.logsystem.log4j.logger\", VELOCITY_LOG_CATEGORY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:   private static final String[] DEPRECATED_SSL_PROTOCOLS = new String[] {\"TLSv1\"};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "804:   private void disableInsecureProtocols(SslContextFactory factory) {",
          "809:     if (!configs.getSrvrDisabledCiphers().isEmpty()) {",
          "810:       String[] masks = configs.getSrvrDisabledCiphers().split(DISABLED_ENTRIES_SPLITTER);",
          "",
          "[Removed Lines]",
          "806:     factory.setExcludeProtocols();",
          "807:     factory.setIncludeProtocols(new String[] {\"SSLv2Hello\",\"SSLv3\",\"TLSv1\",\"TLSv1.1\",\"TLSv1.2\"});",
          "",
          "[Added Lines]",
          "807:     factory.setExcludeProtocols(DEPRECATED_SSL_PROTOCOLS);",
          "808:     factory.setIncludeProtocols(new String[] {\"SSLv2Hello\",\"SSLv3\",\"TLSv1.1\",\"TLSv1.2\"});",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77d87ee506c020c83a0910d73726081c4c1503ef",
      "candidate_info": {
        "commit_hash": "77d87ee506c020c83a0910d73726081c4c1503ef",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/77d87ee506c020c83a0910d73726081c4c1503ef",
        "files": [
          "ambari-server/src/main/resources/scripts/Ambaripreupload.py"
        ],
        "message": "AMBARI-24843. Make Ambaripreupload.py more configurable - fallback to default driver (#2573)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/scripts/Ambaripreupload.py||ambari-server/src/main/resources/scripts/Ambaripreupload.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/scripts/Ambaripreupload.py||ambari-server/src/main/resources/scripts/Ambaripreupload.py": [
          "File: ambari-server/src/main/resources/scripts/Ambaripreupload.py -> ambari-server/src/main/resources/scripts/Ambaripreupload.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: from resource_management.libraries.functions.oozie_prepare_war import prepare_war",
          "49: from resource_management.libraries.resources.hdfs_resource import HdfsResource",
          "53: with Environment() as env:",
          "54:   def get_stack_version():",
          "",
          "[Removed Lines]",
          "51: DEFAULT_SQL_DRIVER_PATH = get_value_from_properties(get_ambari_properties(), JDBC_DRIVER_PATH_PROPERTY, \"/var/lib/ambari-server/resources/sqljdbc41.jar\")",
          "",
          "[Added Lines]",
          "51: DEFAULT_SQL_DRIVER_PATH = \"/var/lib/ambari-server/resources/sqljdbc41.jar\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     return stack_version",
          "80:   parser = OptionParser()",
          "82:                     help=\"Path to JDBC driver\")",
          "83:   parser.add_option(\"-f\", \"--fs-type\", dest=\"fs_type\", default=\"wasb\",",
          "84:                     help=\"Expected protocol of fs.defaultFS\")",
          "",
          "[Removed Lines]",
          "81:   parser.add_option(\"-d\", \"--database-driver\", dest=\"sql_driver_path\", default=DEFAULT_SQL_DRIVER_PATH,",
          "",
          "[Added Lines]",
          "81:   parser.add_option(\"-d\", \"--database-driver\", dest=\"sql_driver_path\",",
          "82:                     default=get_value_from_properties(get_ambari_properties(), JDBC_DRIVER_PATH_PROPERTY, DEFAULT_SQL_DRIVER_PATH),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   if not os.path.exists(options.sql_driver_path):",
          "92:     Logger.error(\"SQL driver file {} does not exist\".format(options.sql_driver_path))",
          "95:   Logger.info(\"Using SQL driver from {}\".format(options.sql_driver_path))",
          "96:   sql_driver_filename = os.path.basename(options.sql_driver_path)",
          "",
          "[Removed Lines]",
          "93:     sys.exit(1)",
          "",
          "[Added Lines]",
          "94:     if os.path.exists(DEFAULT_SQL_DRIVER_PATH):",
          "95:       Logger.warning(\"Fallback to SQL driver {}\".format(DEFAULT_SQL_DRIVER_PATH))",
          "96:       options.sql_driver_path = DEFAULT_SQL_DRIVER_PATH",
          "97:     else:",
          "98:       sys.exit(1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8540ac6634f4e245f5d45fea12c36441d95b1ee2",
      "candidate_info": {
        "commit_hash": "8540ac6634f4e245f5d45fea12c36441d95b1ee2",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8540ac6634f4e245f5d45fea12c36441d95b1ee2",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java"
        ],
        "message": "[AMBARI-25333] Regenerate keytab generates empty keytab file if no file present in cache Tabs have been replaced by 4 spaces.",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:         processPrincipal = true;",
          "152:       } else if (!StringUtils.isEmpty(kerberosPrincipalEntity.getCachedKeytabPath())) {",
          "156:       } else {",
          "158:         processPrincipal = true;",
          "",
          "[Removed Lines]",
          "154:  File file = new File(kerberosPrincipalEntity.getCachedKeytabPath());",
          "155:  processPrincipal = !file.exists();",
          "",
          "[Added Lines]",
          "154:         File file = new File(kerberosPrincipalEntity.getCachedKeytabPath());",
          "155:         processPrincipal = !file.exists();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f313c5c9028e88cea475853e4ec4c7be903d2747",
      "candidate_info": {
        "commit_hash": "f313c5c9028e88cea475853e4ec4c7be903d2747",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f313c5c9028e88cea475853e4ec4c7be903d2747",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts"
        ],
        "message": "AMBARI-25418 Cannot select any configuration in logsearch configuration editor (santal)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   }",
          "43:   set selection(items: ListItem[]) {",
          "45:     if (this.isMultipleChoice && this.options) {",
          "46:       this.options.forEach((option: ListItem): void => {",
          "48:         option.isChecked = Boolean(selectionItem);",
          "49:       });",
          "50:     }",
          "",
          "[Removed Lines]",
          "44:     this.selectedItems = items;",
          "47:         const selectionItem = items.find((item: ListItem): boolean => this.utils.isEqual(item.value, option.value));",
          "",
          "[Added Lines]",
          "44:     this.selectedItems = Array.isArray(items) ? items : [items];",
          "47:         const selectionItem = this.selectedItems.find((item: ListItem): boolean => this.utils.isEqual(item.value, option.value));",
          "",
          "---------------"
        ]
      }
    }
  ]
}