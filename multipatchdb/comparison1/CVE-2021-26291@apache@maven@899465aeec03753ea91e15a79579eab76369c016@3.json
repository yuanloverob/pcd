{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "899465aeec03753ea91e15a79579eab76369c016",
  "patch_info": {
    "commit_hash": "899465aeec03753ea91e15a79579eab76369c016",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/899465aeec03753ea91e15a79579eab76369c016",
    "files": [
      "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "maven-settings/pom.xml",
      "maven-settings/src/main/mdo/settings.mdo"
    ],
    "message": "[MNG-7117] add support for blocked mirror",
    "before_after_code_files": [
      "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo"
    ]
  },
  "patch_diff": {
    "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java": [
      "File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java -> maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:         DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();",
      "178:         for ( Mirror mirror : request.getMirrors() )",
      "179:         {",
      "182:         }",
      "183:         session.setMirrorSelector( mirrorSelector );",
      "",
      "[Removed Lines]",
      "180:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),",
      "181:                                 mirror.getMirrorOfLayouts() );",
      "",
      "[Added Lines]",
      "180:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.isBlocked(),",
      "181:                                 mirror.getMirrorOf(), mirror.getMirrorOfLayouts() );",
      "",
      "---------------"
    ],
    "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo": [
      "File: maven-settings/src/main/mdo/settings.mdo -> maven-settings/src/main/mdo/settings.mdo",
      "--- Hunk 1 ---",
      "[Context before]",
      "633:             of the mirror to repositories with a matching layout (apart from a matching id). Since Maven 3.",
      "634:           </description>",
      "635:         </field>",
      "636:       </fields>",
      "637:       <codeSegments>",
      "638:         <codeSegment>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "636:         <field>",
      "637:           <name>blocked</name>",
      "638:           <version>1.2.0+</version>",
      "639:           <type>boolean</type>",
      "640:           <defaultValue>false</defaultValue>",
      "641:           <description>",
      "642:             Whether this mirror should be blocked from any download request but fail the download process, explaining why.",
      "643:           </description>",
      "644:         </field>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "648:         sb.append( \",mirrorOf=\" ).append( mirrorOf );",
      "649:         sb.append( \",url=\" ).append( this.url );",
      "650:         sb.append( \",name=\" ).append( this.name );",
      "651:         sb.append( \"]\" );",
      "652:         return sb.toString();",
      "653:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "660:         if ( isBlocked() )",
      "661:         {",
      "662:             sb.append( \",blocked\" );",
      "663:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f4fd031828c3cd6a6b8184d4ee0e914cd86009a0",
      "candidate_info": {
        "commit_hash": "f4fd031828c3cd6a6b8184d4ee0e914cd86009a0",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/f4fd031828c3cd6a6b8184d4ee0e914cd86009a0",
        "files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ],
        "message": "Fix checkstyle issue",
        "before_after_code_files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "498:             problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage(",
          "499:                     \"Failed to interpolate file location \" + path + \": \" + e.getMessage() ).setLocation(",
          "501:                     .setException( e ) );",
          "502:         }",
          "503:     }",
          "",
          "[Removed Lines]",
          "500:                     activationFile.getLocation( StringUtils.isNotEmpty( activationFile.getExists() ) ? \"exists\" : \"missing\"  ) )",
          "",
          "[Added Lines]",
          "500:                     activationFile.getLocation( StringUtils.isNotEmpty( activationFile.getExists() )",
          "501:                                                                         ? \"exists\" : \"missing\"  ) )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e5b3d55545e5f03f05ac7b0cd1b56689df36201",
      "candidate_info": {
        "commit_hash": "4e5b3d55545e5f03f05ac7b0cd1b56689df36201",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/4e5b3d55545e5f03f05ac7b0cd1b56689df36201",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java"
        ],
        "message": "[MNG-7251] Fix threadLocalArtifactsHolder leaking into cloned project\n\nThis closes #527",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java||maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java -> maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     private Artifact artifact;",
          "154:     private Model originalModel;",
          "",
          "[Removed Lines]",
          "146:     private final ThreadLocal<ArtifactsHolder> threadLocalArtifactsHolder = new ThreadLocal()",
          "147:     {",
          "148:         protected ArtifactsHolder initialValue()",
          "149:         {",
          "150:             return new ArtifactsHolder();",
          "151:         }",
          "152:     };",
          "",
          "[Added Lines]",
          "146:     private ThreadLocal<ArtifactsHolder> threadLocalArtifactsHolder = newThreadLocalArtifactsHolder();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:         setModel( model );",
          "189:     }",
          "191:     public MavenProject( Model model )",
          "192:     {",
          "193:         setModel( model );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:     private static ThreadLocal<ArtifactsHolder> newThreadLocalArtifactsHolder()",
          "186:     {",
          "187:         return new ThreadLocal<ArtifactsHolder>()",
          "188:         {",
          "189:             protected ArtifactsHolder initialValue()",
          "190:             {",
          "191:                 return new ArtifactsHolder();",
          "192:             }",
          "193:         };",
          "194:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1181:         {",
          "1182:             throw new UnsupportedOperationException( e );",
          "1183:         }",
          "1185:         clone.deepCopy( this );",
          "1187:         return clone;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1190:         clone.threadLocalArtifactsHolder = newThreadLocalArtifactsHolder();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1225:         file = project.file;",
          "1226:         basedir = project.basedir;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1233:         threadLocalArtifactsHolder.set( project.threadLocalArtifactsHolder.get().copy() );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1232:             setDependencyArtifacts( Collections.unmodifiableSet( project.getDependencyArtifacts() ) );",
          "1233:         }",
          "1240:         if ( project.getParentFile() != null )",
          "1241:         {",
          "1242:             parentFile = new File( project.getParentFile().getAbsolutePath() );",
          "",
          "[Removed Lines]",
          "1235:         if ( project.getArtifacts() != null )",
          "1236:         {",
          "1237:             setArtifacts( Collections.unmodifiableSet( project.getArtifacts() ) );",
          "1238:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1995:         private ArtifactFilter artifactFilter;",
          "1996:         private Set<Artifact> artifacts;",
          "1997:         private Map<String, Artifact> artifactMap;",
          "1998:     }",
          "1999: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1991:         ArtifactsHolder copy()",
          "1992:         {",
          "1993:            ArtifactsHolder copy = new ArtifactsHolder();",
          "1994:            copy.artifactFilter = artifactFilter;",
          "1995:            copy.artifacts = artifacts != null ? new LinkedHashSet<>( artifacts ) : null;",
          "1996:            copy.artifactMap = artifactMap != null ? new LinkedHashMap<>( artifactMap ) : null;",
          "1997:            return copy;",
          "1998:         }",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java||maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java -> maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.File;",
          "23: import java.io.IOException;",
          "24: import java.util.List;",
          "25: import java.util.Map;",
          "27: import org.apache.maven.model.DependencyManagement;",
          "28: import org.apache.maven.model.Model;",
          "29: import org.apache.maven.model.Parent;",
          "30: import org.apache.maven.model.Profile;",
          "32: public class MavenProjectTest",
          "33:     extends AbstractMavenProjectTestCase",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.Collections;",
          "27: import java.util.Set;",
          "28: import java.util.concurrent.atomic.AtomicReference;",
          "30: import org.apache.maven.artifact.Artifact;",
          "35: import org.mockito.Mockito;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:         assertEquals( \"Base directory is preserved across clone\", projectToClone.getBasedir(), clonedProject.getBasedir() );",
          "189:     }",
          "191:     public void testUndefinedOutputDirectory()",
          "192:         throws Exception",
          "193:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:     public void testCloneWithArtifacts()",
          "197:         throws InterruptedException",
          "198:     {",
          "199:         Artifact initialArtifact = Mockito.mock( Artifact.class, \"initialArtifact\" );",
          "200:         MavenProject originalProject = new MavenProject();",
          "201:         originalProject.setArtifacts( Collections.singleton( initialArtifact ) );",
          "202:         assertEquals( \"Sanity check: originalProject returns artifact that has just been set\",",
          "203:                       Collections.singleton( initialArtifact ), originalProject.getArtifacts() );",
          "205:         final MavenProject clonedProject = originalProject.clone();",
          "207:         assertEquals( \"Cloned project returns the artifact that was set for the original project\",",
          "208:                       Collections.singleton( initialArtifact ), clonedProject.getArtifacts() );",
          "210:         Artifact anotherArtifact = Mockito.mock( Artifact.class, \"anotherArtifact\" );",
          "211:         clonedProject.setArtifacts( Collections.singleton( anotherArtifact ) );",
          "212:         assertEquals( \"Sanity check: clonedProject returns artifact that has just been set\",",
          "213:                       Collections.singleton( anotherArtifact ), clonedProject.getArtifacts() );",
          "215:         assertEquals( \"Original project returns the artifact that was set initially (not the one for clonedProject)\",",
          "216:                       Collections.singleton( initialArtifact ), originalProject.getArtifacts() );",
          "218:         final AtomicReference<Set<Artifact>> artifactsFromThread = new AtomicReference<>();",
          "219:         Thread thread = new Thread( new Runnable()",
          "220:         {",
          "221:             @Override",
          "222:             public void run()",
          "223:             {",
          "224:                 artifactsFromThread.set( clonedProject.getArtifacts() );",
          "225:             }",
          "226:         } );",
          "227:         thread.start();",
          "228:         thread.join();",
          "230:         assertEquals( \"Another thread does not see the same artifacts\",",
          "231:                       Collections.emptySet(), artifactsFromThread.get() );",
          "232:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a96fd11b1fb9724d563cfde60288d17ddd22bf7e",
      "candidate_info": {
        "commit_hash": "a96fd11b1fb9724d563cfde60288d17ddd22bf7e",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/a96fd11b1fb9724d563cfde60288d17ddd22bf7e",
        "files": [
          "maven-model-builder/src/site/apt/index.apt"
        ],
        "message": "[MNG-3220] fix doc: dependencyManagement import require scope import",
        "before_after_code_files": [
          "maven-model-builder/src/site/apt/index.apt||maven-model-builder/src/site/apt/index.apt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/site/apt/index.apt||maven-model-builder/src/site/apt/index.apt": [
          "File: maven-model-builder/src/site/apt/index.apt -> maven-model-builder/src/site/apt/index.apt"
        ]
      }
    },
    {
      "candidate_hash": "05e96dae96030864cb2ab3a3ae877f6bb9e134f7",
      "candidate_info": {
        "commit_hash": "05e96dae96030864cb2ab3a3ae877f6bb9e134f7",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/05e96dae96030864cb2ab3a3ae877f6bb9e134f7",
        "files": [
          "maven-repository-metadata/pom.xml",
          "maven-repository-metadata/src/main/mdo/metadata.mdo",
          "maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java"
        ],
        "message": "[MNG-5180] Versioning's snapshot version list is not included in metadata merge\n\nCo-authored-by: Konrad Windszus <kwin@apache.org>\n\nThis closes #684",
        "before_after_code_files": [
          "maven-repository-metadata/src/main/mdo/metadata.mdo||maven-repository-metadata/src/main/mdo/metadata.mdo",
          "maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java||maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-repository-metadata/src/main/mdo/metadata.mdo||maven-repository-metadata/src/main/mdo/metadata.mdo": [
          "File: maven-repository-metadata/src/main/mdo/metadata.mdo -> maven-repository-metadata/src/main/mdo/metadata.mdo",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         <codeSegment>",
          "89:           <version>1.0.0+</version>",
          "90:           <code><![CDATA[",
          "91:     public boolean merge( Metadata sourceMetadata )",
          "92:     {",
          "93:         boolean changed = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:     private String getSnapshotVersionKey( SnapshotVersion sv )",
          "92:     {",
          "93:         return sv.getClassifier() + \":\" + sv.getExtension();",
          "94:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:                 Snapshot snapshot = versioning.getSnapshot();",
          "179:                 if ( snapshot != null )",
          "180:                 {",
          "181:                     if ( s == null )",
          "182:                     {",
          "183:                         s = new Snapshot();",
          "184:                         v.setSnapshot( s );",
          "185:                         changed = true;",
          "186:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:                     boolean updateSnapshotVersions = false;",
          "192:                         updateSnapshotVersions = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:                     {",
          "192:                         s.setTimestamp( snapshot.getTimestamp() );",
          "193:                         changed = true;",
          "194:                     }",
          "195:                     if ( s.getBuildNumber() != snapshot.getBuildNumber() )",
          "196:                     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:                         updateSnapshotVersions = true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:                         s.setLocalCopy( snapshot.isLocalCopy() );",
          "203:                         changed = true;",
          "204:                     }",
          "205:                 }",
          "206:             }",
          "207:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:                     if ( updateSnapshotVersions )",
          "214:                     {",
          "215:                         java.util.Map<String, SnapshotVersion> versions = new java.util.LinkedHashMap<>();",
          "217:                         if ( !v.getSnapshotVersions().isEmpty() )",
          "218:                         {",
          "219:                             for ( SnapshotVersion sv : versioning.getSnapshotVersions() )",
          "220:                             {",
          "221:                                 String key = getSnapshotVersionKey( sv );",
          "222:                                 versions.put( key, sv );",
          "223:                             }",
          "225:                             if ( !versions.isEmpty() )",
          "226:                             {",
          "227:                                 for ( SnapshotVersion sv : v.getSnapshotVersions() )",
          "228:                                 {",
          "229:                                     String key = getSnapshotVersionKey( sv );",
          "230:                                     if ( !versions.containsKey( key ) )",
          "231:                                     {",
          "232:                                         versions.put( key, sv );",
          "233:                                     }",
          "234:                                 }",
          "235:                             }",
          "236:                             v.setSnapshotVersions( new java.util.ArrayList<SnapshotVersion>( versions.values() ) );",
          "237:                         }",
          "239:                         changed = true;",
          "240:                     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "241:           <name>lastUpdated</name>",
          "242:           <version>1.0.0+</version>",
          "243:           <type>String</type>",
          "245:         </field>",
          "246:         <field xdoc.separator=\"blank\">",
          "247:           <name>snapshot</name>",
          "",
          "[Removed Lines]",
          "244:           <description>When the metadata was last updated (both \"groupId/artifactId\" and \"groupId/artifactId/version\" directories)</description>",
          "",
          "[Added Lines]",
          "280:           <description>When the metadata was last updated (both \"groupId/artifactId\" and \"groupId/artifactId/version\" directories). The timestamp is expressed using UTC in the format yyyyMMddHHmmss.</description>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "254:         <field>",
          "255:           <name>snapshotVersions</name>",
          "256:           <version>1.1.0+</version>",
          "258:           <association>",
          "259:             <type>SnapshotVersion</type>",
          "260:             <multiplicity>*</multiplicity>",
          "",
          "[Removed Lines]",
          "257:           <description>Information for each sub-artifact available in this artifact snapshot.</description>",
          "",
          "[Added Lines]",
          "293:           <description>Information for each sub-artifact available in this artifact snapshot. This is only the most recent SNAPSHOT for each unique extension/classifier combination.</description>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "289:         <field>",
          "290:           <name>timestamp</name>",
          "291:           <version>1.0.0+</version>",
          "293:           <type>String</type>",
          "294:         </field>",
          "295:         <field>",
          "",
          "[Removed Lines]",
          "292:           <description>The time it was deployed</description>",
          "",
          "[Added Lines]",
          "328:           <description>The timestamp when this version was deployed. The timestamp is expressed using UTC in the format yyyyMMdd.HHmmss.</description>",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "316:           <name>classifier</name>",
          "317:           <version>1.1.0+</version>",
          "318:           <type>String</type>",
          "320:           <defaultValue></defaultValue>",
          "321:         </field>",
          "322:         <field>",
          "323:           <name>extension</name>",
          "324:           <version>1.1.0+</version>",
          "325:           <type>String</type>",
          "327:         </field>",
          "328:         <field xml.tagName=\"value\">",
          "329:           <name>version</name>",
          "330:           <version>1.1.0+</version>",
          "331:           <type>String</type>",
          "332:           <description>The resolved snapshot version of the sub-artifact.</description>",
          "333:         </field>",
          "334:         <field>",
          "335:           <name>updated</name>",
          "336:           <version>1.1.0+</version>",
          "337:           <type>String</type>",
          "338:           <description>The timestamp when this version information was last updated. The timestamp is expressed using UTC in the format yyyyMMddHHmmss.</description>",
          "339:         </field>",
          "340:       </fields>",
          "341:     </class>",
          "",
          "[Removed Lines]",
          "319:           <description>The classifier of the sub-artifact.</description>",
          "326:           <description>The file extension of the sub-artifact.</description>",
          "",
          "[Added Lines]",
          "355:           <description>The classifier of the sub-artifact. Each classifier and extension pair may only appear once.</description>",
          "357:           <identifier>true</identifier>",
          "363:           <description>The file extension of the sub-artifact. Each classifier and extension pair may only appear once.</description>",
          "364:           <identifier>true</identifier>",
          "371:           <identifier>true</identifier>",
          "378:           <identifier>true</identifier>",
          "",
          "---------------"
        ],
        "maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java||maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java": [
          "File: maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java -> maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.artifact.repository.metadata;",
          "23: import java.text.DateFormat;",
          "24: import java.text.SimpleDateFormat;",
          "25: import java.util.Date;",
          "26: import java.util.GregorianCalendar;",
          "27: import java.util.TimeZone;",
          "29: import org.eclipse.aether.artifact.Artifact;",
          "30: import org.eclipse.aether.artifact.DefaultArtifact;",
          "31: import org.junit.Before;",
          "32: import org.junit.Test;",
          "34: import static org.junit.Assert.assertEquals;",
          "35: import static org.junit.Assert.assertFalse;",
          "36: import static org.junit.Assert.assertTrue;",
          "38: public class MetadataTest",
          "39: {",
          "41:     Artifact artifact;",
          "43:     Metadata target;",
          "45:     @Before",
          "46:     public void before()",
          "47:     {",
          "48:         artifact = new DefaultArtifact( \"myGroup:myArtifact:1.0-SNAPSHOT\" );",
          "49:         target = createMetadataFromArtifact( artifact );",
          "50:     }",
          "53:     @Test",
          "54:     public void mergeEmptyMetadata()",
          "55:         throws Exception",
          "56:     {",
          "57:         Metadata metadata = new Metadata();",
          "58:         assertFalse( metadata.merge( new Metadata() ) );",
          "59:     }",
          "61:     @Test",
          "62:     public void mergeDifferentGAV()",
          "63:         throws Exception",
          "64:     {",
          "66:         Metadata source = new Metadata();",
          "67:         source.setArtifactId( \"source-artifact\" );",
          "68:         source.setGroupId( \"source-group\" );",
          "69:         source.setVersion( \"2.0\" );",
          "70:         assertFalse( target.merge( source ) );",
          "71:         assertEquals( \"myArtifact\", target.getArtifactId() );",
          "72:         assertEquals( \"myGroup\", target.getGroupId() );",
          "73:         assertEquals( \"1.0-SNAPSHOT\", target.getVersion() );",
          "74:     }",
          "78:     @Test",
          "79:     public void mergeSnapshotWithEmptyList()",
          "80:         throws Exception",
          "81:     {",
          "82:         Snapshot snapshot = new Snapshot();",
          "83:         snapshot.setBuildNumber( 3 );",
          "84:         snapshot.setTimestamp( \"20200710.072412\" );",
          "85:         target.getVersioning().setSnapshot( snapshot );",
          "86:         target.getVersioning().setLastUpdated( \"20200921071745\" );",
          "87:         SnapshotVersion sv = new SnapshotVersion();",
          "88:         sv.setClassifier( \"sources\" );",
          "89:         sv.setExtension( \"jar\" );",
          "90:         sv.setUpdated( \"20200710072412\" );",
          "91:         target.getVersioning().addSnapshotVersion( sv );",
          "93:         Metadata source = createMetadataFromArtifact( artifact );",
          "95:         assertTrue( target.merge( source ) );",
          "98:         assertEquals( \"20200921071745\", source.getVersioning().getLastUpdated() );",
          "100:         assertEquals( \"myArtifact\", target.getArtifactId() );",
          "101:         assertEquals( \"myGroup\", target.getGroupId() );",
          "103:         assertEquals( 3, target.getVersioning().getSnapshot().getBuildNumber() );",
          "104:         assertEquals( \"20200710.072412\", target.getVersioning().getSnapshot().getTimestamp() );",
          "106:         assertEquals( 1, target.getVersioning().getSnapshotVersions().size() );",
          "107:         assertEquals( \"sources\", target.getVersioning().getSnapshotVersions().get( 0 ).getClassifier() );",
          "108:         assertEquals( \"jar\", target.getVersioning().getSnapshotVersions().get( 0 ).getExtension() );",
          "109:         assertEquals( \"20200710072412\", target.getVersioning().getSnapshotVersions().get( 0 ).getUpdated() );",
          "110:     }",
          "112:     @Test",
          "113:     public void mergeWithSameSnapshotWithDifferentVersionsAndNewerLastUpdated()",
          "114:     {",
          "115:         Metadata source = createMetadataFromArtifact( artifact );",
          "116:         Date before = new Date( System.currentTimeMillis() - 5000 );",
          "117:         Date after = new Date( System.currentTimeMillis() );",
          "118:         addSnapshotVersion( target.getVersioning(), \"jar\", before, \"1\", 1 );",
          "119:         SnapshotVersion sv2 =",
          "120:             addSnapshotVersion( source.getVersioning(), \"jar\", after, \"1.0-\" + formatDate( after, true ) + \"-2\", 2 );",
          "121:         SnapshotVersion sv3 =",
          "122:             addSnapshotVersion( source.getVersioning(), \"pom\", after, \"1.0-\" + formatDate( after, true ) + \"-2\", 2 );",
          "123:         assertTrue( target.merge( source ) );",
          "124:         Versioning actualVersioning = target.getVersioning();",
          "125:         assertEquals( 2, actualVersioning.getSnapshotVersions().size() );",
          "126:         assertEquals( sv2, actualVersioning.getSnapshotVersions().get( 0 ) );",
          "127:         assertEquals( sv3, actualVersioning.getSnapshotVersions().get( 1 ) );",
          "128:         assertEquals( formatDate( after, false ), actualVersioning.getLastUpdated() );",
          "129:         assertEquals( formatDate( after, true ), actualVersioning.getSnapshot().getTimestamp() );",
          "130:         assertEquals( 2, actualVersioning.getSnapshot().getBuildNumber() );",
          "131:     }",
          "133:     @Test",
          "134:     public void mergeWithSameSnapshotWithDifferentVersionsAndOlderLastUpdated()",
          "135:     {",
          "136:         Metadata source = createMetadataFromArtifact( artifact );",
          "137:         Date before = new Date( System.currentTimeMillis() - 5000 );",
          "138:         Date after = new Date( System.currentTimeMillis() );",
          "139:         SnapshotVersion sv1 = addSnapshotVersion( target.getVersioning(), after, artifact );",
          "140:         addSnapshotVersion( source.getVersioning(), before, artifact );",
          "142:         assertFalse( target.merge( source ) );",
          "143:         assertEquals( 1, target.getVersioning().getSnapshotVersions().size() );",
          "144:         assertEquals( sv1, target.getVersioning().getSnapshotVersions().get( 0 ) );",
          "145:         assertEquals( formatDate( after, false ), target.getVersioning().getLastUpdated() );",
          "146:         assertEquals( formatDate( after, true ), target.getVersioning().getSnapshot().getTimestamp() );",
          "147:     }",
          "149:     @Test",
          "150:     public void mergeWithSameSnapshotWithSameVersionAndTimestamp()",
          "151:     {",
          "152:         Metadata source = createMetadataFromArtifact( artifact );",
          "153:         Date date = new Date();",
          "154:         addSnapshotVersion( target.getVersioning(), date, artifact );",
          "155:         SnapshotVersion sv1 = addSnapshotVersion( source.getVersioning(), date, artifact );",
          "158:         assertTrue( target.merge( source ) );",
          "159:         assertEquals( 1, target.getVersioning().getSnapshotVersions().size() );",
          "160:         assertEquals( sv1, target.getVersioning().getSnapshotVersions().get( 0 ) );",
          "161:         assertEquals( formatDate( date, false ), target.getVersioning().getLastUpdated() );",
          "162:         assertEquals( formatDate( date, true ), target.getVersioning().getSnapshot().getTimestamp() );",
          "163:     }",
          "165:     @Test",
          "166:     public void mergeLegacyWithSnapshotLegacy()",
          "167:     {",
          "168:         Metadata source = createMetadataFromArtifact( artifact );",
          "169:         Date before = new Date( System.currentTimeMillis() - 5000 );",
          "170:         Date after = new Date( System.currentTimeMillis() );",
          "172:         addSnapshotVersionLegacy( target.getVersioning(), before, 1 );",
          "173:         addSnapshotVersionLegacy( source.getVersioning(), after, 2 );",
          "176:         assertTrue( target.merge( source ) );",
          "177:         assertEquals( 0, target.getVersioning().getSnapshotVersions().size() );",
          "178:         assertEquals( formatDate( after, false ), target.getVersioning().getLastUpdated() );",
          "179:         assertEquals( formatDate( after, true ), target.getVersioning().getSnapshot().getTimestamp() );",
          "180:     }",
          "182:     @Test",
          "183:     public void mergeLegacyWithSnapshot()",
          "184:     {",
          "185:         Metadata source = createMetadataFromArtifact( artifact );",
          "186:         Date before = new Date( System.currentTimeMillis() - 5000 );",
          "187:         Date after = new Date( System.currentTimeMillis() );",
          "189:         addSnapshotVersionLegacy( target.getVersioning(), before, 1 );",
          "190:         addSnapshotVersion( source.getVersioning(), after, artifact );",
          "193:         assertTrue( target.merge( source ) );",
          "195:         assertEquals( 0, target.getVersioning().getSnapshotVersions().size() );",
          "196:         assertEquals( formatDate( after, false ), target.getVersioning().getLastUpdated() );",
          "197:         assertEquals( formatDate( after, true ), target.getVersioning().getSnapshot().getTimestamp() );",
          "198:     }",
          "200:     @Test",
          "201:     public void mergeWithSnapshotLegacy()",
          "202:     {",
          "203:         Metadata source = createMetadataFromArtifact( artifact );",
          "204:         Date before = new Date( System.currentTimeMillis() - 5000 );",
          "205:         Date after = new Date( System.currentTimeMillis() );",
          "206:         addSnapshotVersion( target.getVersioning(), before, artifact );",
          "208:         addSnapshotVersionLegacy( source.getVersioning(), after, 2 );",
          "211:         assertTrue( target.merge( source ) );",
          "213:         assertEquals( 0, target.getVersioning().getSnapshotVersions().size() );",
          "214:         assertEquals( formatDate( after, false ), target.getVersioning().getLastUpdated() );",
          "215:         assertEquals( formatDate( after, true ), target.getVersioning().getSnapshot().getTimestamp() );",
          "216:         assertEquals( 2, target.getVersioning().getSnapshot().getBuildNumber() );",
          "217:     }",
          "221:     private static final String SNAPSHOT = \"SNAPSHOT\";",
          "223:     private static final String DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT = \"yyyyMMdd.HHmmss\";",
          "225:     private static final String DEFAULT_DATE_FORMAT = \"yyyyMMddHHmmss\";",
          "227:     private static String formatDate( Date date, boolean forSnapshotTimestamp )",
          "228:     {",
          "230:         TimeZone timezone = TimeZone.getTimeZone( \"UTC\" );",
          "231:         DateFormat fmt =",
          "232:             new SimpleDateFormat( forSnapshotTimestamp ? DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT : DEFAULT_DATE_FORMAT );",
          "233:         fmt.setCalendar( new GregorianCalendar() );",
          "234:         fmt.setTimeZone( timezone );",
          "235:         return fmt.format( date );",
          "236:     }",
          "238:     private static Metadata createMetadataFromArtifact( Artifact artifact )",
          "239:     {",
          "240:         Metadata metadata = new Metadata();",
          "241:         metadata.setArtifactId( artifact.getArtifactId() );",
          "242:         metadata.setGroupId( artifact.getGroupId() );",
          "243:         metadata.setVersion( artifact.getVersion() );",
          "244:         metadata.setVersioning( new Versioning() );",
          "245:         return metadata;",
          "246:     }",
          "248:     private static SnapshotVersion addSnapshotVersion( Versioning versioning, Date timestamp, Artifact artifact )",
          "249:     {",
          "250:         int buildNumber = 1;",
          "253:         String version = artifact.getVersion();",
          "254:         String qualifier = formatDate( timestamp, true ) + '-' + buildNumber;",
          "255:         version = version.substring( 0, version.length() - SNAPSHOT.length() ) + qualifier;",
          "256:         return addSnapshotVersion( versioning, artifact.getExtension(), timestamp, version, buildNumber );",
          "257:     }",
          "259:     private static SnapshotVersion addSnapshotVersion( Versioning versioning, String extension, Date timestamp,",
          "260:                                                        String version, int buildNumber )",
          "261:     {",
          "262:         Snapshot snapshot = new Snapshot();",
          "263:         snapshot.setBuildNumber( buildNumber );",
          "264:         snapshot.setTimestamp( formatDate( timestamp, true ) );",
          "266:         SnapshotVersion sv = new SnapshotVersion();",
          "267:         sv.setExtension( extension );",
          "268:         sv.setVersion( version );",
          "269:         sv.setUpdated( formatDate( timestamp, false ) );",
          "270:         versioning.addSnapshotVersion( sv );",
          "273:         versioning.setSnapshot( snapshot );",
          "274:         versioning.setLastUpdatedTimestamp( timestamp );",
          "275:         return sv;",
          "276:     }",
          "280:     private static void addSnapshotVersionLegacy( Versioning versioning, Date timestamp, int buildNumber )",
          "281:     {",
          "282:         Snapshot snapshot = new Snapshot();",
          "283:         snapshot.setBuildNumber( buildNumber );",
          "284:         snapshot.setTimestamp( formatDate( timestamp, true ) );",
          "286:         versioning.setSnapshot( snapshot );",
          "287:         versioning.setLastUpdatedTimestamp( timestamp );",
          "288:     }",
          "290: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfeea9dac4c5a14c846382aa7a47a7d4e5f110f5",
      "candidate_info": {
        "commit_hash": "cfeea9dac4c5a14c846382aa7a47a7d4e5f110f5",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/cfeea9dac4c5a14c846382aa7a47a7d4e5f110f5",
        "files": [
          "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
        ],
        "message": "Remove unused imports",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [
            "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
          ],
          "candidate": [
            "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java": [
          "File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java -> maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: import javax.inject.Inject;",
          "56: import javax.inject.Named;",
          "59: import java.util.LinkedHashMap;",
          "60: import java.util.Map;",
          "",
          "[Removed Lines]",
          "57: import java.io.IOException;",
          "58: import java.io.InputStream;",
          "61: import java.util.Properties;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}