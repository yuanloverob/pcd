{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "913ab5862e00669808e6776a23123b2d2f03ce24",
      "candidate_info": {
        "commit_hash": "913ab5862e00669808e6776a23123b2d2f03ce24",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/913ab5862e00669808e6776a23123b2d2f03ce24",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ConfigFactory.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java",
          "ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java"
        ],
        "message": "AMBARI-25385. Reduce cluster creation request processing time. (mpapirkovskyy) (#3085)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java||ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ConfigFactory.java||ambari-server/src/main/java/org/apache/ambari/server/state/ConfigFactory.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java||ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java",
          "ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java||ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   void createHostComponents(",
          "118:       Set<ServiceComponentHostRequest> requests, boolean isBlueprintProvisioned) throws AmbariException, AuthorizationException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:   ConfigurationResponse createConfiguration(ConfigurationRequest request, boolean refreshCluster)",
          "129:       throws AmbariException, AuthorizationException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:   Config createConfig(Cluster cluster, StackId stackId, String type, Map<String, String> properties,",
          "136:                       String versionTag, Map<String, Map<String, String>> propertiesAttributes);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:   Config createConfig(Cluster cluster, StackId stackId, String type, Map<String, String> properties,",
          "147:                       String versionTag, Map<String, Map<String, String>> propertiesAttributes, boolean refreshCluster);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:       throws AmbariException, AuthorizationException;",
          "",
          "[Removed Lines]",
          "270:   RequestStatusResponse updateClusters(Set<ClusterRequest> requests,",
          "271:                                               Map<String, String> requestProperties, boolean fireAgentUpdates)",
          "",
          "[Added Lines]",
          "290:   RequestStatusResponse updateClusters(Set<ClusterRequest> requests, Map<String, String> requestProperties,",
          "291:                                        boolean fireAgentUpdates, boolean refreshCluster)",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "923:   @Override",
          "924:   public synchronized ConfigurationResponse createConfiguration(",
          "926:     if (null == request.getClusterName() || request.getClusterName().isEmpty()",
          "927:         || null == request.getType() || request.getType().isEmpty()",
          "928:         || null == request.getProperties()) {",
          "",
          "[Removed Lines]",
          "925:       ConfigurationRequest request) throws AmbariException, AuthorizationException {",
          "",
          "[Added Lines]",
          "925:       ConfigurationRequest request, boolean refreshCluster) throws AmbariException, AuthorizationException {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1059:     }",
          "1061:     Config config = createConfig(cluster, stackId, request.getType(), requestProperties,",
          "1064:     LOG.info(MessageFormat.format(\"Creating configuration with tag ''{0}'' to cluster ''{1}''  for configuration type {2}\",",
          "1065:         request.getVersionTag(),",
          "",
          "[Removed Lines]",
          "1062:       request.getVersionTag(), propertiesAttributes);",
          "",
          "[Added Lines]",
          "1062:       request.getVersionTag(), propertiesAttributes, refreshCluster);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1069:     return new ConfigurationResponse(cluster.getClusterName(), config);",
          "1070:   }",
          "1072:   @Override",
          "1073:   public Config createConfig(Cluster cluster, StackId stackId, String type, Map<String, String> properties,",
          "1079:     cluster.addConfig(config);",
          "1080:     return config;",
          "1081:   }",
          "1083:   @Override",
          "1084:   public void createGroups(Set<GroupRequest> requests) throws AmbariException {",
          "1085:     for (GroupRequest request : requests) {",
          "",
          "[Removed Lines]",
          "1074:                              String versionTag, Map<String, Map<String, String>> propertiesAttributes) {",
          "1076:     Config config = configFactory.createNew(stackId, cluster, type, versionTag, properties,",
          "1077:         propertiesAttributes);",
          "",
          "[Added Lines]",
          "1072:   @Override",
          "1073:   public synchronized ConfigurationResponse createConfiguration(",
          "1074:       ConfigurationRequest request) throws AmbariException, AuthorizationException {",
          "1075:     return createConfiguration(request, true);",
          "1076:   }",
          "1080:                              String versionTag, Map<String, Map<String, String>> propertiesAttributes, boolean refreshCluster) {",
          "1082:     Config config = configFactory.createNew(stackId, type, cluster, versionTag, properties,",
          "1083:         propertiesAttributes, refreshCluster);",
          "1089:   @Override",
          "1090:   public Config createConfig(Cluster cluster, StackId stackId, String type, Map<String, String> properties,",
          "1091:                              String versionTag, Map<String, Map<String, String>> propertiesAttributes) {",
          "1093:     return createConfig(cluster, stackId, type, properties, versionTag, propertiesAttributes, true);",
          "1094:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1566:   public synchronized RequestStatusResponse updateClusters(Set<ClusterRequest> requests,",
          "1567:                                                            Map<String, String> requestProperties)",
          "1568:       throws AmbariException, AuthorizationException {",
          "1570:   }",
          "1572:   @Override",
          "1573:   @Transactional",
          "1574:   public synchronized RequestStatusResponse updateClusters(Set<ClusterRequest> requests,",
          "1575:                                                            Map<String, String> requestProperties,",
          "1577:       throws AmbariException, AuthorizationException {",
          "1579:     RequestStatusResponse response = null;",
          "",
          "[Removed Lines]",
          "1569:     return updateClusters(requests, requestProperties, true);",
          "1576:                                                            boolean fireAgentUpdates)",
          "",
          "[Added Lines]",
          "1582:     return updateClusters(requests, requestProperties, true, true);",
          "1589:                                                            boolean fireAgentUpdates, boolean refreshCluster)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1583:     for (ClusterRequest request : requests) {",
          "1585:     }",
          "1586:     return response;",
          "1587:   }",
          "",
          "[Removed Lines]",
          "1584:       response = updateCluster(request, requestProperties, fireAgentUpdates);",
          "",
          "[Added Lines]",
          "1597:       response = updateCluster(request, requestProperties, fireAgentUpdates, refreshCluster);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1683:   private synchronized RequestStatusResponse updateCluster(ClusterRequest request,",
          "1684:                                                            Map<String, String> requestProperties,",
          "1686:   )",
          "1687:       throws AmbariException, AuthorizationException {",
          "",
          "[Removed Lines]",
          "1685:                                                            boolean fireAgentUpdates",
          "",
          "[Added Lines]",
          "1698:                                                            boolean fireAgentUpdates, boolean refreshCluster",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1841:                 cr.getProperties().size() > 0) {            // properties to set",
          "1843:               cr.setClusterName(cluster.getClusterName());",
          "1846:               LOG.info(MessageFormat.format(\"Applying configuration with tag ''{0}'' to cluster ''{1}''  for configuration type {2}\",",
          "1847:                   cr.getVersionTag(),",
          "",
          "[Removed Lines]",
          "1844:               configurationResponses.add(createConfiguration(cr));",
          "",
          "[Added Lines]",
          "1857:               configurationResponses.add(createConfiguration(cr, refreshCluster));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterDAO.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterDAO.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:     return merge(clusterConfigEntity, false);",
          "380:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:   @Transactional",
          "387:   public void merge(Collection<ClusterConfigEntity> clusterConfigEntities) {",
          "388:     merge(clusterConfigEntities, false);",
          "389:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399:     return clusterConfigEntityRes;",
          "400:   }",
          "402:   @Transactional",
          "403:   public void remove(ClusterEntity clusterEntity) {",
          "404:     entityManagerProvider.get().remove(clusterEntity);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417:   @Transactional",
          "418:   public void merge(Collection<ClusterConfigEntity> clusterConfigEntities, boolean flush) {",
          "419:     EntityManager entityManager = entityManagerProvider.get();",
          "420:     for (ClusterConfigEntity clusterConfigEntity : clusterConfigEntities) {",
          "421:       entityManager.merge(clusterConfigEntity);",
          "422:     }",
          "423:     if(flush) {",
          "424:       entityManager.flush();",
          "425:     }",
          "426:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:   @ManyToMany(mappedBy = \"clusterEntities\")",
          "112:   private Collection<HostEntity> hostEntities;",
          "115:   private Collection<ClusterConfigEntity> configEntities;",
          "117:   @OneToMany(mappedBy = \"clusterEntity\", cascade = CascadeType.ALL)",
          "",
          "[Removed Lines]",
          "114:   @OneToMany(mappedBy = \"clusterEntity\", cascade = CascadeType.ALL)",
          "",
          "[Added Lines]",
          "114:   @OneToMany(mappedBy = \"clusterEntity\")",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java||ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java -> ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:   void deleteAllServices() throws AmbariException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:   void deleteAllClusterConfigs();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/ConfigFactory.java||ambari-server/src/main/java/org/apache/ambari/server/state/ConfigFactory.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/ConfigFactory.java -> ambari-server/src/main/java/org/apache/ambari/server/state/ConfigFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   Config createNew(StackId stackId, Cluster cluster, @Assisted(\"type\") String type, @Assisted(\"tag\") String tag,",
          "53:       Map<String, String> map, Map<String, Map<String, String>> mapAttributes);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   Config createNew(StackId stackId, @Assisted(\"type\") String type, Cluster cluster, @Assisted(\"tag\") String tag,",
          "54:       Map<String, String> map, Map<String, Map<String, String>> mapAttributes, boolean refreshCluster);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:       @Assisted @Nullable Map<String, Map<String, String>> propertiesAttributes,",
          "106:       ClusterDAO clusterDAO, StackDAO stackDAO,",
          "107:       Gson gson, AmbariEventPublisher eventPublisher, LockFactory lockFactory) {",
          "110:   }",
          "113:   @AssistedInject",
          "115:       @Assisted(\"tag\") @Nullable String tag,",
          "116:       @Assisted Map<String, String> properties,",
          "117:       @Assisted @Nullable Map<String, Map<String, String>> propertiesAttributes,",
          "118:       ClusterDAO clusterDAO, StackDAO stackDAO,",
          "121:     propertyLock = lockFactory.newReadWriteLock(PROPERTY_LOCK_LABEL);",
          "",
          "[Removed Lines]",
          "108:     this(cluster.getDesiredStackVersion(), cluster, type, tag, properties, propertiesAttributes,",
          "109:         clusterDAO, stackDAO, gson, eventPublisher, lockFactory);",
          "114:   ConfigImpl(@Assisted @Nullable StackId stackId, @Assisted Cluster cluster, @Assisted(\"type\") String type,",
          "119:       Gson gson, AmbariEventPublisher eventPublisher, LockFactory lockFactory) {",
          "",
          "[Added Lines]",
          "108:     this(cluster.getDesiredStackVersion(), type, cluster, tag, properties, propertiesAttributes,",
          "109:         clusterDAO, stackDAO, gson, eventPublisher, lockFactory, true);",
          "114:   ConfigImpl(@Assisted @Nullable StackId stackId, @Assisted(\"type\") String type, @Assisted Cluster cluster,",
          "119:       Gson gson, AmbariEventPublisher eventPublisher, LockFactory lockFactory, @Assisted boolean refreshCluster) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     this.stackId = stackId;",
          "160:     propertiesTypes = cluster.getConfigPropertiesTypes(type);",
          "163:     configId = entity.getConfigId();",
          "164:   }",
          "166:   @AssistedInject",
          "167:   ConfigImpl(@Assisted Cluster cluster, @Assisted ClusterConfigEntity entity,",
          "168:       ClusterDAO clusterDAO, Gson gson, AmbariEventPublisher eventPublisher,",
          "",
          "[Removed Lines]",
          "161:     persist(entity);",
          "",
          "[Added Lines]",
          "161:     persist(entity, refreshCluster);",
          "166:   @AssistedInject",
          "167:   ConfigImpl(@Assisted StackId stackId, @Assisted Cluster cluster, @Assisted(\"type\") String type,",
          "168:       @Assisted(\"tag\") @Nullable String tag,",
          "169:       @Assisted Map<String, String> properties,",
          "170:       @Assisted @Nullable Map<String, Map<String, String>> propertiesAttributes,",
          "171:       ClusterDAO clusterDAO, StackDAO stackDAO,",
          "172:       Gson gson, AmbariEventPublisher eventPublisher, LockFactory lockFactory) {",
          "173:     this(stackId, type, cluster, tag, properties, propertiesAttributes, clusterDAO, stackDAO, gson, eventPublisher,",
          "174:         lockFactory, true);",
          "175:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "347:     persistEntitiesInTransaction(entity);",
          "350:     cluster.addConfig(this);",
          "356:     ClusterConfigChangedEvent event = new ClusterConfigChangedEvent(cluster.getClusterName(),",
          "",
          "[Removed Lines]",
          "346:   private void persist(ClusterConfigEntity entity) {",
          "353:     cluster.refresh();",
          "",
          "[Added Lines]",
          "357:   private void persist(ClusterConfigEntity entity, boolean refreshCluster) {",
          "363:     if (refreshCluster) {",
          "364:       cluster.refresh();",
          "365:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400:       cluster.refresh();",
          "",
          "[Removed Lines]",
          "397:       clusterDAO.merge(clusterEntity, true);",
          "",
          "[Added Lines]",
          "409:       clusterDAO.merge(entity, true);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1311:     }",
          "1312:   }",
          "1314:   @Override",
          "1315:   public void deleteService(String serviceName, DeleteHostComponentStatusMetaData deleteMetaData)",
          "1316:     throws AmbariException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1314:   @Override",
          "1315:   @Transactional",
          "1316:   public void deleteAllClusterConfigs() {",
          "1317:     clusterGlobalLock.writeLock().lock();",
          "1318:     try {",
          "1319:       Collection<ClusterConfigEntity> clusterConfigs = getClusterEntity().getClusterConfigEntities();",
          "1320:       for (ClusterConfigEntity clusterConfigEntity : clusterConfigs) {",
          "1321:         clusterDAO.removeConfig(clusterConfigEntity);",
          "1322:       }",
          "1323:     } finally {",
          "1324:       clusterGlobalLock.writeLock().unlock();",
          "1325:     }",
          "1326:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1389:     try {",
          "1390:       refresh();",
          "1391:       deleteAllServices();",
          "1392:       resetHostVersions();",
          "1394:       refresh(); // update one-to-many clusterServiceEntities",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1406:       deleteAllClusterConfigs();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2003:       }",
          "2004:     }",
          "2008:     if (serviceName == null) {",
          "2009:       ArrayList<String> configTypes = new ArrayList<>();",
          "",
          "[Removed Lines]",
          "2006:     clusterEntity = clusterDAO.merge(clusterEntity);",
          "",
          "[Added Lines]",
          "2021:     clusterDAO.merge(clusterConfigs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2524:       cacheConfigurations();",
          "",
          "[Removed Lines]",
          "2522:       clusterEntity = clusterDAO.merge(clusterEntity, true);",
          "",
          "[Added Lines]",
          "2537:       clusterDAO.merge(configEntities, true);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:           String serviceName = getServiceName();",
          "420:           Service service = cluster.getService(serviceName);",
          "425:           entry.setValue(config);",
          "",
          "[Removed Lines]",
          "422:           config = configFactory.createNew(service.getDesiredStackId(), cluster, config.getType(),",
          "423:               config.getTag(), config.getProperties(), config.getPropertiesAttributes());",
          "",
          "[Added Lines]",
          "422:           config = configFactory.createNew(service.getDesiredStackId(), config.getType(), cluster,",
          "423:               config.getTag(), config.getProperties(), config.getPropertiesAttributes(), true);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java||ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java -> ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:       RetryHelper.executeWithRetry(new Callable<Object>() {",
          "534:         @Override",
          "535:         public Object call() throws Exception {",
          "537:           return null;",
          "538:         }",
          "539:       });",
          "",
          "[Removed Lines]",
          "536:           getController().updateClusters(Collections.singleton(clusterRequest), null, false);",
          "",
          "[Added Lines]",
          "536:           getController().updateClusters(Collections.singleton(clusterRequest), null,",
          "537:               false, false);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java||ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java -> ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:   private void setConfigurationsOnCluster(List<BlueprintServiceConfigRequest> configurationRequests,",
          "400:                                          String tag, Set<String> updatedConfigTypes)  {",
          "401:     String clusterName = null;",
          "402:     try {",
          "403:       clusterName = ambariContext.getClusterName(clusterTopology.getClusterId());",
          "404:     } catch (AmbariException e) {",
          "405:       LOG.error(\"Cannot get cluster name for clusterId = \" + clusterTopology.getClusterId(), e);",
          "406:       throw new RuntimeException(e);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402:     Cluster cluster;",
          "405:       cluster = AmbariContext.getController().getClusters().getCluster(clusterName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "468:         LOG.error(\"ClusterRequest should not be null for service = \" + blueprintConfigRequest.getServiceName());",
          "469:       }",
          "470:     }",
          "472:     ambariContext.notifyAgentsAboutConfigsChanges(clusterName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473:     cluster.refresh();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java -> ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:     PowerMock.replay(AmbariServer.class);",
          "341:     expect(managementController.getClusters()).andReturn(clusters).anyTimes();",
          "342:     expect(clusters.getClusterById(anyLong())).andReturn(cluster).anyTimes();",
          "343:     expect(cluster.getClusterName()).andReturn(CLUSTER_NAME).anyTimes();",
          "345:     expect(ambariContext.getPersistedTopologyState()).andReturn(persistedState).anyTimes();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343:     expect(clusters.getCluster(CLUSTER_NAME)).andReturn(cluster).anyTimes();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java -> ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:     PowerMock.replay(AmbariServer.class);",
          "343:     expect(managementController.getClusters()).andReturn(clusters).anyTimes();",
          "344:     expect(clusters.getClusterById(anyLong())).andReturn(cluster).anyTimes();",
          "345:     expect(cluster.getClusterName()).andReturn(CLUSTER_NAME).anyTimes();",
          "347:     expect(ambariContext.getPersistedTopologyState()).andReturn(persistedState).anyTimes();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:     expect(clusters.getCluster(CLUSTER_NAME)).andReturn(cluster).anyTimes();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java -> ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     PowerMock.replay(AmbariServer.class);",
          "340:     expect(managementController.getClusters()).andReturn(clusters).anyTimes();",
          "341:     expect(clusters.getClusterById(anyLong())).andReturn(cluster).anyTimes();",
          "342:     expect(cluster.getClusterName()).andReturn(CLUSTER_NAME).anyTimes();",
          "344:     expect(ambariContext.getPersistedTopologyState()).andReturn(persistedState).anyTimes();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:     expect(clusters.getCluster(CLUSTER_NAME)).andReturn(cluster).anyTimes();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java -> ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import static org.powermock.api.easymock.PowerMock.mockStatic;",
          "35: import java.lang.reflect.Field;",
          "36: import java.util.ArrayList;",
          "37: import java.util.Arrays;",
          "38: import java.util.Collection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import java.lang.reflect.Modifier;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: import org.apache.ambari.server.AmbariException;",
          "49: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "50: import org.apache.ambari.server.controller.ClusterRequest;",
          "51: import org.apache.ambari.server.controller.ConfigurationRequest;",
          "52: import org.apache.ambari.server.controller.KerberosHelper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.apache.ambari.server.controller.AmbariManagementController;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71: import org.apache.ambari.server.security.encryption.CredentialStoreService;",
          "72: import org.apache.ambari.server.security.encryption.CredentialStoreType;",
          "73: import org.apache.ambari.server.stack.NoSuchStackException;",
          "74: import org.apache.ambari.server.state.SecurityType;",
          "75: import org.apache.ambari.server.state.quicklinksprofile.QuickLinksProfile;",
          "76: import org.apache.ambari.server.topology.tasks.ConfigureClusterTask;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: import org.apache.ambari.server.state.Cluster;",
          "77: import org.apache.ambari.server.state.Clusters;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99: @RunWith(PowerMockRunner.class)",
          "101: public class TopologyManagerTest {",
          "103:   private static final String CLUSTER_NAME = \"test-cluster\";",
          "",
          "[Removed Lines]",
          "100: @PrepareForTest( { TopologyManager.class })",
          "",
          "[Added Lines]",
          "104: @PrepareForTest( { TopologyManager.class, AmbariContext.class })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "172:   private ConfigureClusterTask configureClusterTask;",
          "173:   @Mock(type = MockType.NICE)",
          "174:   private AmbariEventPublisher eventPublisher;",
          "176:   @Mock(type = MockType.STRICT)",
          "177:   private Future mockFuture;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:   @Mock(type = MockType.NICE)",
          "180:   private AmbariManagementController ambariManagementController;",
          "181:   @Mock(type = MockType.NICE)",
          "182:   private Clusters clusters;",
          "183:   @Mock(type = MockType.NICE)",
          "184:   private Cluster cluster;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "346:     expect(ambariContext.isClusterKerberosEnabled(CLUSTER_ID)).andReturn(false).anyTimes();",
          "347:     expect(ambariContext.getClusterId(CLUSTER_NAME)).andReturn(CLUSTER_ID).anyTimes();",
          "348:     expect(ambariContext.getClusterName(CLUSTER_ID)).andReturn(CLUSTER_NAME).anyTimes();",
          "351:     expect(ambariContext.createConfigurationRequests(capture(configRequestPropertiesCapture))).",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "359:     expect(clusters.getCluster(CLUSTER_NAME)).andReturn(cluster).anyTimes();",
          "360:     expect(ambariManagementController.getClusters()).andReturn(clusters).anyTimes();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "393:     f.set(ambariContext, clusterController);",
          "395:     EasyMockSupport.injectMocks(ambariContext);",
          "396:   }",
          "398:   @After",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:     Field controllerField = AmbariContext.class.getDeclaredField(\"controller\");",
          "410:     controllerField.setAccessible(true);",
          "411:     Field modifiersField = Field.class.getDeclaredField(\"modifiers\");",
          "412:     modifiersField.setAccessible(true);",
          "413:     modifiersField.setInt(controllerField, controllerField.getModifiers() & ~Modifier.FINAL);",
          "414:     controllerField.set(null, ambariManagementController);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "401:     verify(blueprint, stack, request, group1, group2, ambariContext, logicalRequestFactory,",
          "402:         logicalRequest, configurationRequest, configurationRequest2, configurationRequest3,",
          "403:         requestStatusResponse, executor, persistedState, clusterTopologyMock, mockFuture, settingDAO, eventPublisher,",
          "406:     PowerMock.reset(System.class);",
          "407:     reset(blueprint, stack, request, group1, group2, ambariContext, logicalRequestFactory,",
          "408:         logicalRequest, configurationRequest, configurationRequest2, configurationRequest3,",
          "409:         requestStatusResponse, executor, persistedState, clusterTopologyMock, mockFuture, settingDAO, eventPublisher,",
          "411:   }",
          "413:   @Test",
          "",
          "[Removed Lines]",
          "404:         securityConfiguration, credential);",
          "410:         securityConfiguration, credential);",
          "",
          "[Added Lines]",
          "424:         securityConfiguration, credential, ambariManagementController, clusters, cluster);",
          "430:         securityConfiguration, credential, ambariManagementController, clusters, cluster);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "629:             configurationRequest, configurationRequest2, configurationRequest3, executor,",
          "630:             persistedState, clusterTopologyMock, securityConfigurationFactory, credentialStoreService,",
          "631:             clusterController, resourceProvider, mockFuture, requestStatusResponse, logicalRequest, settingDAO,",
          "633:   }",
          "635:   @Test(expected = InvalidTopologyException.class)",
          "",
          "[Removed Lines]",
          "632:             configureClusterTaskFactory, configureClusterTask, eventPublisher, securityConfiguration, credential);",
          "",
          "[Added Lines]",
          "652:             configureClusterTaskFactory, configureClusterTask, eventPublisher, securityConfiguration, credential,",
          "653:            ambariManagementController, clusters, cluster);",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: import org.apache.ambari.server.controller.AbstractRootServiceResponseFactory;",
          "71: import org.apache.ambari.server.controller.AmbariManagementController;",
          "72: import org.apache.ambari.server.controller.AmbariManagementControllerImpl;",
          "73: import org.apache.ambari.server.controller.KerberosHelper;",
          "74: import org.apache.ambari.server.controller.KerberosHelperImpl;",
          "75: import org.apache.ambari.server.controller.MaintenanceStateHelper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: import org.apache.ambari.server.controller.ConfigurationRequest;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "900:     replay(injector, clusters, mockAmsSslClient, cluster);",
          "902:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "904:         .addMockedMethod(\"getClusters\", new Class[] { })",
          "906:         .withConstructor(createNiceMock(ActionManager.class), clusters, injector)",
          "907:         .createNiceMock();",
          "",
          "[Removed Lines]",
          "903:         .addMockedMethod(\"createConfiguration\")",
          "905:         .addMockedMethod(\"createConfig\")",
          "",
          "[Added Lines]",
          "904:         .addMockedMethod(\"createConfiguration\", ConfigurationRequest.class)",
          "906:         .addMockedMethod(\"createConfig\", Cluster.class, StackId.class, String.class, Map.class,",
          "907:             String.class, Map.class)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "959:     replay(injector, clusters, mockHsiConfigs, cluster);",
          "961:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "963:             .addMockedMethod(\"getClusters\", new Class[] { })",
          "965:             .withConstructor(createNiceMock(ActionManager.class), clusters, injector)",
          "966:             .createNiceMock();",
          "",
          "[Removed Lines]",
          "962:             .addMockedMethod(\"createConfiguration\")",
          "964:             .addMockedMethod(\"createConfig\")",
          "",
          "[Added Lines]",
          "964:             .addMockedMethod(\"createConfiguration\", ConfigurationRequest.class)",
          "966:             .addMockedMethod(\"createConfig\", Cluster.class, StackId.class, String.class, Map.class,",
          "967:                 String.class, Map.class)",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "185: import org.apache.ambari.server.controller.AmbariManagementController;",
          "186: import org.apache.ambari.server.controller.AmbariManagementControllerImpl;",
          "187: import org.apache.ambari.server.controller.AmbariServer;",
          "188: import org.apache.ambari.server.controller.KerberosHelper;",
          "189: import org.apache.ambari.server.controller.KerberosHelperImpl;",
          "190: import org.apache.ambari.server.controller.MaintenanceStateHelper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: import org.apache.ambari.server.controller.ConfigurationRequest;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "989:     Injector injector2 = easyMockSupport.createNiceMock(Injector.class);",
          "990:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "992:         .addMockedMethod(\"getClusters\", new Class[]{})",
          "994:         .createNiceMock();",
          "995:     ConfigHelper configHelper = createMockBuilder(ConfigHelper.class)",
          "996:         .addMockedMethod(\"createConfigType\", Cluster.class, StackId.class, AmbariManagementController.class,",
          "",
          "[Removed Lines]",
          "991:         .addMockedMethod(\"createConfiguration\")",
          "993:         .addMockedMethod(\"createConfig\")",
          "",
          "[Added Lines]",
          "992:         .addMockedMethod(\"createConfiguration\", ConfigurationRequest.class)",
          "994:         .addMockedMethod(\"createConfig\", Cluster.class, StackId.class, String.class, Map.class,",
          "995:             String.class, Map.class)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1202:     Capture<Map<String, String>> capturedProperties = newCapture();",
          "1204:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "1206:         .addMockedMethod(\"getClusters\", new Class[]{})",
          "1208:         .addMockedMethod(\"getClusterMetadataOnConfigsUpdate\", Cluster.class)",
          "1209:         .createMock();",
          "1210:     expect(controller.getClusters()).andReturn(clusters).anyTimes();",
          "",
          "[Removed Lines]",
          "1205:         .addMockedMethod(\"createConfiguration\")",
          "1207:         .addMockedMethod(\"createConfig\")",
          "",
          "[Added Lines]",
          "1207:         .addMockedMethod(\"createConfiguration\", ConfigurationRequest.class)",
          "1209:         .addMockedMethod(\"createConfig\", Cluster.class, StackId.class, String.class, Map.class,",
          "1210:             String.class, Map.class)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1455:     replay(injector, clusters, mockAmsSite, mockAmsHbaseSite, cluster);",
          "1457:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "1459:       .addMockedMethod(\"getClusters\", new Class[] { })",
          "1461:       .withConstructor(createNiceMock(ActionManager.class), clusters, injector)",
          "1462:       .createNiceMock();",
          "",
          "[Removed Lines]",
          "1458:       .addMockedMethod(\"createConfiguration\")",
          "1460:       .addMockedMethod(\"createConfig\")",
          "",
          "[Added Lines]",
          "1461:       .addMockedMethod(\"createConfiguration\", ConfigurationRequest.class)",
          "1463:       .addMockedMethod(\"createConfig\", Cluster.class, StackId.class, String.class, Map.class,",
          "1464:           String.class, Map.class)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1517:     replay(injector, clusters, mockAmsSite, cluster);",
          "1519:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "1521:       .addMockedMethod(\"getClusters\", new Class[] { })",
          "1523:       .withConstructor(createNiceMock(ActionManager.class), clusters, injector)",
          "1524:       .createNiceMock();",
          "",
          "[Removed Lines]",
          "1520:       .addMockedMethod(\"createConfiguration\")",
          "1522:       .addMockedMethod(\"createConfig\")",
          "",
          "[Added Lines]",
          "1524:       .addMockedMethod(\"createConfiguration\", ConfigurationRequest.class)",
          "1526:       .addMockedMethod(\"createConfig\", Cluster.class, StackId.class, String.class, Map.class,",
          "1527:           String.class, Map.class)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1577:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "1578:       .addMockedMethod(\"getClusters\", new Class[] { })",
          "1580:       .withConstructor(createNiceMock(ActionManager.class), clusters, injector)",
          "1581:       .createNiceMock();",
          "",
          "[Removed Lines]",
          "1579:       .addMockedMethod(\"createConfig\")",
          "",
          "[Added Lines]",
          "1584:       .addMockedMethod(\"createConfig\", Cluster.class, StackId.class, String.class, Map.class,",
          "1585:           String.class, Map.class)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1635:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "1636:       .addMockedMethod(\"getClusters\", new Class[] { })",
          "1638:       .withConstructor(createNiceMock(ActionManager.class), clusters, injector)",
          "1639:       .createNiceMock();",
          "",
          "[Removed Lines]",
          "1637:       .addMockedMethod(\"createConfig\")",
          "",
          "[Added Lines]",
          "1643:       .addMockedMethod(\"createConfig\", Cluster.class, StackId.class, String.class, Map.class,",
          "1644:           String.class, Map.class)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1688:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "1689:         .addMockedMethod(\"getClusters\", new Class[] { })",
          "1691:         .withConstructor(createNiceMock(ActionManager.class), clusters, injector)",
          "1692:         .createNiceMock();",
          "",
          "[Removed Lines]",
          "1690:         .addMockedMethod(\"createConfig\")",
          "",
          "[Added Lines]",
          "1697:         .addMockedMethod(\"createConfig\", Cluster.class, StackId.class, String.class, Map.class,",
          "1698:             String.class, Map.class)",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import org.apache.ambari.server.controller.AmbariManagementController;",
          "43: import org.apache.ambari.server.controller.AmbariManagementControllerImpl;",
          "44: import org.apache.ambari.server.orm.DBAccessor;",
          "45: import org.apache.ambari.server.orm.dao.DaoUtils;",
          "46: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import org.apache.ambari.server.controller.ConfigurationRequest;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:     Injector injector = easyMockSupport.createNiceMock(Injector.class);",
          "185:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "187:       .addMockedMethod(\"getClusters\", new Class[] { })",
          "189:       .createNiceMock();",
          "191:     expect(injector.getInstance(AmbariManagementController.class)).andReturn(controller).anyTimes();",
          "",
          "[Removed Lines]",
          "186:       .addMockedMethod(\"createConfiguration\")",
          "188:       .addMockedMethod(\"createConfig\")",
          "",
          "[Added Lines]",
          "187:       .addMockedMethod(\"createConfiguration\", ConfigurationRequest.class)",
          "189:       .addMockedMethod(\"createConfig\", Cluster.class, StackId.class, String.class, Map.class,",
          "190:           String.class, Map.class)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "266:     Injector injector = easyMockSupport.createNiceMock(Injector.class);",
          "267:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "269:       .addMockedMethod(\"getClusters\", new Class[] { })",
          "271:       .createNiceMock();",
          "273:     expect(injector.getInstance(AmbariManagementController.class)).andReturn(controller).anyTimes();",
          "",
          "[Removed Lines]",
          "268:       .addMockedMethod(\"createConfiguration\")",
          "270:       .addMockedMethod(\"createConfig\")",
          "",
          "[Added Lines]",
          "270:       .addMockedMethod(\"createConfiguration\", ConfigurationRequest.class)",
          "272:       .addMockedMethod(\"createConfig\", Cluster.class, StackId.class, String.class, Map.class,",
          "273:           String.class, Map.class)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "328:     Injector injector = easyMockSupport.createNiceMock(Injector.class);",
          "329:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "331:       .addMockedMethod(\"getClusters\", new Class[] { })",
          "333:       .createNiceMock();",
          "335:     DaoUtils daoUtilsMock = easyMockSupport.createNiceMock(DaoUtils.class);",
          "",
          "[Removed Lines]",
          "330:       .addMockedMethod(\"createConfiguration\")",
          "332:       .addMockedMethod(\"createConfig\")",
          "",
          "[Added Lines]",
          "333:       .addMockedMethod(\"createConfiguration\", ConfigurationRequest.class)",
          "335:       .addMockedMethod(\"createConfig\", Cluster.class, StackId.class, String.class, Map.class,",
          "336:           String.class, Map.class)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8951386dd303023f2e2af8940f55fdc392ed16b",
      "candidate_info": {
        "commit_hash": "f8951386dd303023f2e2af8940f55fdc392ed16b",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f8951386dd303023f2e2af8940f55fdc392ed16b",
        "files": [
          "ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py"
        ],
        "message": "AMBARI-24399. Components start failing with 'Holder DFSClient_NONMAPREDUCE does not have any open files' while adding Namespace  (aonishuk)",
        "before_after_code_files": [
          "ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py||ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py||ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py -> ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: EXCEPTIONS_TO_RETRY = {",
          "61:   # (\"ExceptionName\"): (\"required text fragment\", try_count, try_sleep_seconds)",
          "67:   \"FileNotFoundException\": (\" does not have any open files\", 6, 30),",
          "69:   \"LeaseExpiredException\": (\"\", 20, 6),",
          "",
          "[Removed Lines]",
          "63:   \"\"\"",
          "64:   Happens when multiple nodes try to put same file at the same time.",
          "65:   Needs a longer retry time, to wait for other nodes success.",
          "66:   \"\"\"",
          "",
          "[Added Lines]",
          "63:   # Happens when multiple nodes try to put same file at the same time.",
          "64:   # Needs a longer retry time, to wait for other nodes success.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d19eb2e37067137d6e06a8d1a86c759db5b90fc",
      "candidate_info": {
        "commit_hash": "7d19eb2e37067137d6e06a8d1a86c759db5b90fc",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/7d19eb2e37067137d6e06a8d1a86c759db5b90fc",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java"
        ],
        "message": "AMBARI-24845. Sometimes host status still in heartbeat lost after agent become heartbeating. (mpapirkovskyy) (#2560)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:       host.topologyManager.onHostRegistered(host, associatedWithCluster);",
          "364:       host.updateHostTimestamps(e);",
          "365:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363:       host.setHealthStatus(new HostHealthStatus(HealthStatus.HEALTHY,",
          "364:           host.getHealthStatus().getHealthReport()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8d12b0a3768c710612656d9b6cdb1787cbc82d1",
      "candidate_info": {
        "commit_hash": "e8d12b0a3768c710612656d9b6cdb1787cbc82d1",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/e8d12b0a3768c710612656d9b6cdb1787cbc82d1",
        "files": [
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2"
        ],
        "message": "AMBARI-25379 fix missing quotation mark\n\nChange-Id: Ie85fbce0a8d02bde9103501b5d3b38984886a480",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2||ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2||ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2": [
          "File: ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2 -> ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: {",
          "20:   \"name\": \"{{ams_datasource_name}}\",",
          "22:   \"access\": \"proxy\",",
          "23:   \"url\": \"{{metric_collector_protocol}}://{{ams_datasource_host}}:{{metric_collector_port}}\",",
          "24:   \"password\": \"\",",
          "",
          "[Removed Lines]",
          "21:   \"type\": \"ambarimetrics,",
          "",
          "[Added Lines]",
          "21:   \"type\": \"ambarimetrics\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffe3aba719e90ddba3ef25eb425e353a08d5b560",
      "candidate_info": {
        "commit_hash": "ffe3aba719e90ddba3ef25eb425e353a08d5b560",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ffe3aba719e90ddba3ef25eb425e353a08d5b560",
        "files": [
          "ambari-server/src/main/resources/scripts/Ambaripreupload.py"
        ],
        "message": "AMBARI-24671. Workaround for non-atomic directory creation (#2407)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/scripts/Ambaripreupload.py||ambari-server/src/main/resources/scripts/Ambaripreupload.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/scripts/Ambaripreupload.py||ambari-server/src/main/resources/scripts/Ambaripreupload.py": [
          "File: ambari-server/src/main/resources/scripts/Ambaripreupload.py -> ambari-server/src/main/resources/scripts/Ambaripreupload.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: from resource_management.core import shell",
          "37: from resource_management.core.environment import Environment",
          "38: from resource_management.core.logger import Logger",
          "39: from resource_management.core.resources.system import Execute",
          "40: from resource_management.core.source import StaticFile",
          "41: from resource_management.libraries import ConfigDictionary",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: from resource_management.core.resources.system import Directory",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:   env.set_params(params)",
          "326:   hadoop_conf_dir = params.hadoop_conf_dir",
          "328:   oozie_libext_dir = params.oozie_libext_dir",
          "329:   sql_driver_filename = os.path.basename(SQL_DRIVER_PATH)",
          "330:   oozie_home=params.oozie_home",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:   Directory('/var/lib/ambari-agent/tmp/hadoop_java_io_tmpdir',",
          "330:             owner=params.hdfs_user,",
          "331:             group=params.user_group,",
          "332:             mode=01777",
          "333:   )",
          "334:   Directory('/var/log/hadoop',",
          "335:             create_parents = True,",
          "336:             owner='root',",
          "337:             group=params.user_group,",
          "338:             mode=0775,",
          "339:             cd_access='a',",
          "340:   )",
          "341:   Directory('/var/run/hadoop',",
          "342:             create_parents = True,",
          "343:             owner='root',",
          "344:             group='root',",
          "345:             cd_access='a',",
          "346:   )",
          "347:   Directory('/var/run/hadoop/hdfs',",
          "348:             owner=params.hdfs_user,",
          "349:             cd_access='a',",
          "350:   )",
          "351:   Directory('/tmp/hadoop-hdfs',",
          "352:             create_parents = True,",
          "353:             owner=params.hdfs_user,",
          "354:             cd_access='a',",
          "355:   )",
          "356:   Directory('/tmp/hbase-hbase',",
          "357:             owner='hbase',",
          "358:             mode=0775,",
          "359:             create_parents = True,",
          "360:             cd_access=\"a\",",
          "361:   )",
          "",
          "---------------"
        ]
      }
    }
  ]
}