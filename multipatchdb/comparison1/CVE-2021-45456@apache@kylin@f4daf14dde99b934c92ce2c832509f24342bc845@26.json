{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eff7d420875977a2d8dc9738bd3dc4c1f608b589",
      "candidate_info": {
        "commit_hash": "eff7d420875977a2d8dc9738bd3dc4c1f608b589",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/eff7d420875977a2d8dc9738bd3dc4c1f608b589",
        "files": [
          "webapp/app/js/model/projectConfig.js",
          "webapp/app/partials/projects/projects.html"
        ],
        "message": "KYLIN-4585 Add cube count column for project table (#1277)\n\nCo-authored-by: tianhui5 <tianhui5@xiaomi.com>\n(cherry picked from commit 0b9456c94e33f333f0b1ebbd3711b50143cc239a)",
        "before_after_code_files": [
          "webapp/app/js/model/projectConfig.js||webapp/app/js/model/projectConfig.js",
          "webapp/app/partials/projects/projects.html||webapp/app/partials/projects/projects.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "webapp/app/js/model/projectConfig.js||webapp/app/js/model/projectConfig.js": [
          "File: webapp/app/js/model/projectConfig.js -> webapp/app/js/model/projectConfig.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     {attr: 'name', name: 'Name'},",
          "22:     {attr: 'owner', name: 'Owner'},",
          "23:     {attr: 'description', name: 'Description'},",
          "24:     {attr: 'create_time_utc', name: 'Create Time'}",
          "25:   ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     {attr: 'realizations.length', name: '#Cubes'},",
          "",
          "---------------"
        ],
        "webapp/app/partials/projects/projects.html||webapp/app/partials/projects/projects.html": [
          "File: webapp/app/partials/projects/projects.html -> webapp/app/partials/projects/projects.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:                 </td>",
          "56:                 <td>{{ project.owner}}</td>",
          "57:                 <td>{{ project.description}}</td>",
          "58:                 <td>{{ project.create_time_utc | utcToConfigTimeZone}}</td>",
          "59:                 <td>",
          "60:                     <button class=\"btn btn-xs btn-info\" ng-click=\"toEdit(project)\" tooltip=\"Edit\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:                 <td>{{ project.realizations.length}}</td>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b171aaccacbee0d41ab1465138677b431e691d81",
      "candidate_info": {
        "commit_hash": "b171aaccacbee0d41ab1465138677b431e691d81",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/b171aaccacbee0d41ab1465138677b431e691d81",
        "files": [
          "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java"
        ],
        "message": "KYLIN-4890 Use numSlices = 1 to reduce task num when executing sparder canary\n\n(cherry picked from commit 32f77a0c5569bdd3c1c5ea588d8042c58c493555)\n(cherry picked from commit a963db414169d1ca614664268effc74a983174df)",
        "before_after_code_files": [
          "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java||kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java||kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java": [
          "File: kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java -> kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     private static JavaFutureAction<Long> numberCount(JavaSparkContext jsc) {",
          "134:         List<Integer> list = new ArrayList<>();",
          "136:             list.add(i);",
          "137:         }",
          "140:     }",
          "141: }",
          "",
          "[Removed Lines]",
          "135:         for (int i = 0; i < 100; i++) {",
          "139:         return jsc.parallelize(list).countAsync();",
          "",
          "[Added Lines]",
          "135:         for (int i = 0; i < 10; i++) {",
          "140:         return jsc.parallelize(list, 1).countAsync();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9f112cd78490106694a6ab1bc15f51c7e5832d7",
      "candidate_info": {
        "commit_hash": "d9f112cd78490106694a6ab1bc15f51c7e5832d7",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/d9f112cd78490106694a6ab1bc15f51c7e5832d7",
        "files": [
          "server-base/src/main/java/org/apache/kylin/rest/controller/UserController.java",
          "server-base/src/main/java/org/apache/kylin/rest/security/KylinUserManager.java"
        ],
        "message": "KYLIN-5194, fix deleted user can login when auth cache is valid",
        "before_after_code_files": [
          "server-base/src/main/java/org/apache/kylin/rest/controller/UserController.java||server-base/src/main/java/org/apache/kylin/rest/controller/UserController.java",
          "server-base/src/main/java/org/apache/kylin/rest/security/KylinUserManager.java||server-base/src/main/java/org/apache/kylin/rest/security/KylinUserManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server-base/src/main/java/org/apache/kylin/rest/controller/UserController.java||server-base/src/main/java/org/apache/kylin/rest/controller/UserController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/UserController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/UserController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: import org.slf4j.LoggerFactory;",
          "47: import org.springframework.beans.factory.annotation.Autowired;",
          "48: import org.springframework.beans.factory.annotation.Qualifier;",
          "49: import org.springframework.security.access.prepost.PreAuthorize;",
          "50: import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;",
          "51: import org.springframework.security.core.Authentication;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import org.springframework.cache.CacheManager;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: import org.apache.kylin.shaded.com.google.common.collect.Lists;",
          "74: @Controller",
          "75: @RequestMapping(value = \"/user\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: import static org.apache.kylin.cache.cachemanager.CacheConstants.USER_CACHE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:     @Qualifier(\"userGroupService\")",
          "95:     private UserGroupService userGroupService;",
          "97:     private Pattern passwordPattern;",
          "98:     private Pattern bcryptPattern;",
          "99:     private BCryptPasswordEncoder pwdEncoder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     @Autowired",
          "101:     private CacheManager cacheManager;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:         try {",
          "182:             ManagedUser existing = get(userName);",
          "183:             if (existing != null) {",
          "185:                     user.setPassword(existing.getPassword());",
          "187:                     user.setGrantedAuthorities(existing.getAuthorities());",
          "188:             }",
          "189:         } catch (UsernameNotFoundException ex) {",
          "",
          "[Removed Lines]",
          "184:                 if (user.getPassword() == null)",
          "186:                 if (user.getAuthorities() == null || user.getAuthorities().isEmpty())",
          "",
          "[Added Lines]",
          "190:                 if (user.getPassword() == null) {",
          "192:                 }",
          "193:                 if (user.getAuthorities() == null || user.getAuthorities().isEmpty()) {",
          "195:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "196:         completeAuthorities(user);",
          "197:         userService.updateUser(user);",
          "198:         return get(userName);",
          "199:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:         cacheManager.getCache(USER_CACHE).clear();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "237:     }",
          "239:     private String pwdEncode(String pwd) {",
          "241:             return pwd;",
          "243:         return pwdEncoder.encode(pwd);",
          "244:     }",
          "246:     private void checkUserName(String userName) {",
          "248:             throw new BadRequestException(\"empty user name\");",
          "249:     }",
          "251:     private void checkNewPwdRule(String newPwd) {",
          "",
          "[Removed Lines]",
          "240:         if (bcryptPattern.matcher(pwd).matches())",
          "247:         if (userName == null || userName.isEmpty())",
          "",
          "[Added Lines]",
          "250:         if (bcryptPattern.matcher(pwd).matches()) {",
          "252:         }",
          "258:         if (userName == null || userName.isEmpty()) {",
          "260:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "280:         checkUserName(userName);",
          "282:         UserDetails details = userService.loadUserByUsername(userName);",
          "284:             return null;",
          "285:         return (ManagedUser) details;",
          "286:     }",
          "",
          "[Removed Lines]",
          "283:         if (details == null)",
          "",
          "[Added Lines]",
          "295:         if (details == null) {",
          "297:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "329:         checkUserName(userName);",
          "330:         userService.deleteUser(userName);",
          "331:         return new EnvelopeResponse(ResponseCode.CODE_SUCCESS, userName, \"\");",
          "332:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:         cacheManager.getCache(USER_CACHE).clear();",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/security/KylinUserManager.java||server-base/src/main/java/org/apache/kylin/rest/security/KylinUserManager.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/security/KylinUserManager.java -> server-base/src/main/java/org/apache/kylin/rest/security/KylinUserManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:         public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)",
          "78:                 throws IOException {",
          "79:             try (AutoReadWriteLock.AutoLock l = lock.lockForWrite()) {",
          "81:                     userMap.removeLocal(cacheKey);",
          "83:                     crud.reloadQuietly(cacheKey);",
          "84:             }",
          "85:         }",
          "86:     }",
          "",
          "[Removed Lines]",
          "80:                 if (event == Broadcaster.Event.DROP)",
          "82:                 else",
          "",
          "[Added Lines]",
          "80:                 if (event == Broadcaster.Event.DROP) {",
          "82:                 } else {",
          "85:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10d901d6ec7bb80d898491cae6dde550d1bddc2d",
      "candidate_info": {
        "commit_hash": "10d901d6ec7bb80d898491cae6dde550d1bddc2d",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/10d901d6ec7bb80d898491cae6dde550d1bddc2d",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-cube/src/main/java/org/apache/kylin/cube/gridtable/CubeCodeSystem.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyColDesc.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyDesc.java",
          "core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryGenerator.java",
          "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java",
          "core-dictionary/src/test/java/org/apache/kylin/dict/DictionaryProviderTest.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/tuple/Tuple.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/tuple/TupleInfo.java",
          "core-storage/src/main/java/org/apache/kylin/storage/gtrecord/CubeTupleConverter.java",
          "kylin-it/src/test/resources/query/sql_casewhen/query58.sql",
          "server-base/src/main/java/org/apache/kylin/rest/service/TableSchemaUpdateChecker.java",
          "server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java"
        ],
        "message": "KYLIN-4422 Allow to change data type from varchar to datetime\n\n(cherry picked from commit 6bd5b43bb06b6bf19d1a096d99146396aab8d5b2)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-cube/src/main/java/org/apache/kylin/cube/gridtable/CubeCodeSystem.java||core-cube/src/main/java/org/apache/kylin/cube/gridtable/CubeCodeSystem.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyColDesc.java||core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyColDesc.java",
          "core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyDesc.java||core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyDesc.java",
          "core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryGenerator.java||core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryGenerator.java",
          "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java||core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java",
          "core-dictionary/src/test/java/org/apache/kylin/dict/DictionaryProviderTest.java||core-dictionary/src/test/java/org/apache/kylin/dict/DictionaryProviderTest.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/tuple/Tuple.java||core-metadata/src/main/java/org/apache/kylin/metadata/tuple/Tuple.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/tuple/TupleInfo.java||core-metadata/src/main/java/org/apache/kylin/metadata/tuple/TupleInfo.java",
          "core-storage/src/main/java/org/apache/kylin/storage/gtrecord/CubeTupleConverter.java||core-storage/src/main/java/org/apache/kylin/storage/gtrecord/CubeTupleConverter.java",
          "kylin-it/src/test/resources/query/sql_casewhen/query58.sql||kylin-it/src/test/resources/query/sql_casewhen/query58.sql",
          "server-base/src/main/java/org/apache/kylin/rest/service/TableSchemaUpdateChecker.java||server-base/src/main/java/org/apache/kylin/rest/service/TableSchemaUpdateChecker.java",
          "server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java||server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:         return Boolean.parseBoolean(getOptional(\"kylin.metadata.model-schema-updater-checker-enabled\", \"false\"));",
          "558:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560:     public boolean isAbleChangeStringToDateTime() {",
          "561:         return Boolean.parseBoolean(getOptional(\"kylin.metadata.able-change-string-to-datetime\", \"false\"));",
          "562:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "711:         return getOptional(\"kylin.cube.cuboid-scheduler\", \"org.apache.kylin.cube.cuboid.DefaultCuboidScheduler\");",
          "712:     }",
          "714:     public String getSegmentAdvisor() {",
          "715:         return getOptional(\"kylin.cube.segment-advisor\", \"org.apache.kylin.cube.CubeSegmentAdvisor\");",
          "716:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:     public boolean isRowKeyEncodingAutoConvert() {",
          "719:         return Boolean.parseBoolean(getOptional(\"kylin.cube.kylin.cube.rowkey-encoding-auto-convert\", \"true\"));",
          "720:     }",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/gridtable/CubeCodeSystem.java||core-cube/src/main/java/org/apache/kylin/cube/gridtable/CubeCodeSystem.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/gridtable/CubeCodeSystem.java -> core-cube/src/main/java/org/apache/kylin/cube/gridtable/CubeCodeSystem.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.cube.gridtable;",
          "21: import java.nio.ByteBuffer;",
          "22: import java.nio.charset.Charset;",
          "23: import java.util.Collections;",
          "24: import java.util.Map;",
          "26: import org.apache.kylin.common.util.Bytes;",
          "27: import org.apache.kylin.common.util.ImmutableBitSet;",
          "28: import org.apache.kylin.dimension.DictionaryDimEnc;",
          "29: import org.apache.kylin.dimension.DictionaryDimEnc.DictionarySerializer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.apache.kylin.metadata.filter.FilterOptimizeTransformer.logger;",
          "29: import org.apache.kylin.common.util.DateFormat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import org.apache.kylin.gridtable.IGTCodeSystem;",
          "34: import org.apache.kylin.gridtable.IGTComparator;",
          "35: import org.apache.kylin.measure.MeasureAggregator;",
          "36: import org.apache.kylin.metadata.datatype.DataTypeSerializer;",
          "37: import org.apache.kylin.metadata.datatype.DynamicDimSerializer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.apache.kylin.metadata.datatype.DataType;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:             if (dictEnc.getRoundingFlag() != roundingFlag) {",
          "128:                 serializer = dictEnc.copy(roundingFlag).asDataTypeSerializer();",
          "129:             }",
          "130:             try {",
          "131:                 serializer.serialize(value, buf);",
          "132:             } catch (IllegalArgumentException ex) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:             DataType dataType = info.getColumnType(col);",
          "137:             if (dataType.isDateTimeFamily()) {",
          "138:                 try {",
          "139:                     long ts = DateFormat.stringToMillis((String) value);",
          "140:                     if (dataType.isDate()) {",
          "141:                         value = DateFormat.formatToDateStr(ts);",
          "142:                     } else {",
          "143:                         value = DateFormat.formatToTimeWithoutMilliStr(ts);",
          "144:                     }",
          "145:                     logger.info(\"Convert value from {} to {}\", ts, value);",
          "146:                 } catch (Exception e) {",
          "147:                     logger.warn(\"Fail to convert value {} to string due to {}\", value, e);",
          "148:                 }",
          "149:             }",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyColDesc.java||core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyColDesc.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyColDesc.java -> core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyColDesc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: public class RowKeyColDesc implements java.io.Serializable {",
          "46:     private static final Logger logger = LoggerFactory.getLogger(RowKeyColDesc.class);",
          "48:     @JsonProperty(\"column\")",
          "49:     private String column;",
          "50:     @JsonProperty(\"encoding\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     public static boolean isDateDimEnc(RowKeyColDesc rowKeyColDesc) {",
          "49:         return DateDimEnc.ENCODING_NAME.equals(rowKeyColDesc.getEncodingName());",
          "50:     }",
          "52:     public static boolean isTimeDimEnc(RowKeyColDesc rowKeyColDesc) {",
          "53:         return TimeDimEnc.ENCODING_NAME.equals(rowKeyColDesc.getEncodingName());",
          "54:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:         DataType type = colRef.getType();",
          "85:             if (type.isDate()) {",
          "86:                 encoding = encodingName = DateDimEnc.ENCODING_NAME;",
          "87:             }",
          "88:             if (type.isTimeFamily()) {",
          "89:                 encoding = encodingName = TimeDimEnc.ENCODING_NAME;",
          "90:             }",
          "91:         }",
          "",
          "[Removed Lines]",
          "84:         if (DictionaryDimEnc.ENCODING_NAME.equals(encodingName)) {",
          "",
          "[Added Lines]",
          "92:         if (DictionaryDimEnc.ENCODING_NAME.equals(encodingName) && cubeDesc.getConfig().isRowKeyEncodingAutoConvert()) {",
          "95:                 logger.info(\"Implicitly convert encoding to {}\", encodingName);",
          "99:                 logger.info(\"Implicitly convert encoding to {}\", encodingName);",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyDesc.java||core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyDesc.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyDesc.java -> core-cube/src/main/java/org/apache/kylin/cube/model/RowKeyDesc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         return desc;",
          "68:     }",
          "70:     public boolean isUseDictionary(TblColRef col) {",
          "71:         return getColDesc(col).isUsingDictionary();",
          "72:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     public RowKeyColDesc getColDescUncheck(TblColRef col) {",
          "71:         return columnMap.get(col);",
          "72:     }",
          "",
          "---------------"
        ],
        "core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryGenerator.java||core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryGenerator.java": [
          "File: core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryGenerator.java -> core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryGenerator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.ArrayList;",
          "23: import java.util.List;",
          "27: import org.apache.commons.lang.StringUtils;",
          "28: import org.apache.kylin.common.KylinConfig;",
          "30: import org.apache.kylin.common.util.Dictionary;",
          "31: import org.apache.kylin.metadata.datatype.DataType;",
          "32: import org.slf4j.Logger;",
          "33: import org.slf4j.LoggerFactory;",
          "35: import com.google.common.base.Preconditions;",
          "",
          "[Removed Lines]",
          "25: import com.google.common.base.Function;",
          "26: import com.google.common.collect.Lists;",
          "29: import org.apache.kylin.common.util.DateFormat;",
          "37: import javax.annotation.Nullable;",
          "",
          "[Added Lines]",
          "25: import javax.annotation.Nullable;",
          "34: import com.google.common.base.Function;",
          "36: import com.google.common.collect.Lists;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:         IDictionaryBuilder builder;",
          "64:         return builder;",
          "65:     }",
          "",
          "[Removed Lines]",
          "52:         if (dataType.isDateTimeFamily()) {",
          "53:             if (dataType.isDate())",
          "54:                 builder = new DateDictBuilder();",
          "55:             else",
          "56:                 builder = new TimeDictBuilder();",
          "57:         } else {",
          "58:             boolean useForest = KylinConfig.getInstanceFromEnv().isUseForestTrieDictionary();",
          "59:             if (dataType.isNumberFamily())",
          "60:                 builder = useForest ? new NumberTrieDictForestBuilder() : new NumberTrieDictBuilder();",
          "61:             else",
          "62:                 builder = useForest ? new StringTrieDictForestBuilder() : new StringTrieDictBuilder();",
          "63:         }",
          "",
          "[Added Lines]",
          "51:         boolean useForest = KylinConfig.getInstanceFromEnv().isUseForestTrieDictionary();",
          "52:         if (dataType.isNumberFamily())",
          "53:             builder = useForest ? new NumberTrieDictForestBuilder() : new NumberTrieDictBuilder();",
          "54:         else",
          "55:             builder = useForest ? new StringTrieDictForestBuilder() : new StringTrieDictBuilder();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:         return buildDictionary(dataType, new MultipleDictionaryValueEnumerator(dataType, dictList));",
          "124:     }",
          "204:     private static class StringTrieDictBuilder implements IDictionaryBuilder {",
          "205:         int baseId;",
          "206:         TrieDictionaryBuilder builder;",
          "",
          "[Removed Lines]",
          "126:     private static class DateDictBuilder implements IDictionaryBuilder {",
          "127:         private static final String[] DATE_PATTERNS = new String[] { \"yyyy-MM-dd\", \"yyyyMMdd\" };",
          "129:         private int baseId;",
          "130:         private String datePattern;",
          "132:         @Override",
          "133:         public void init(DictionaryInfo info, int baseId, String hdfsDir) throws IOException {",
          "134:             this.baseId = baseId;",
          "135:         }",
          "137:         @Override",
          "138:         public boolean addValue(String value) {",
          "139:             if (StringUtils.isBlank(value)) // empty string is treated as null",
          "140:                 return false;",
          "143:             if (datePattern == null) {",
          "144:                 for (String p : DATE_PATTERNS) {",
          "145:                     try {",
          "146:                         DateFormat.stringToDate(value, p);",
          "147:                         datePattern = p;",
          "148:                         break;",
          "149:                     } catch (Exception e) {",
          "151:                     }",
          "152:                 }",
          "153:                 if (datePattern == null)",
          "154:                     throw new IllegalArgumentException(\"Unknown date pattern for input value: \" + value);",
          "155:             }",
          "158:             DateFormat.stringToDate(value, datePattern);",
          "159:             return true;",
          "160:         }",
          "162:         @Override",
          "163:         public Dictionary<String> build() throws IOException {",
          "164:             if (datePattern == null)",
          "165:                 datePattern = DATE_PATTERNS[0];",
          "167:             return new DateStrDictionary(datePattern, baseId);",
          "168:         }",
          "171:         @Override",
          "172:         public void clear() {",
          "174:         }",
          "175:     }",
          "177:     private static class TimeDictBuilder implements IDictionaryBuilder {",
          "179:         @Override",
          "180:         public void init(DictionaryInfo info, int baseId, String hdfsDir) throws IOException {",
          "181:         }",
          "183:         @Override",
          "184:         public boolean addValue(String value) {",
          "185:             if (StringUtils.isBlank(value)) // empty string is treated as null",
          "186:                 return false;",
          "189:             DateFormat.stringToMillis(value);",
          "190:             return true;",
          "191:         }",
          "193:         @Override",
          "194:         public Dictionary<String> build() throws IOException {",
          "195:             return new TimeStrDictionary(); // base ID is always 0",
          "196:         }",
          "198:         @Override",
          "199:         public void clear() {",
          "201:         }",
          "202:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java||core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java": [
          "File: core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java -> core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     protected String[] convertRow(String[] cols) {",
          "85:         for (int i = 0; i < cols.length; i++) {",
          "86:             if (colIsDateTime[i]) {",
          "89:             }",
          "90:         }",
          "91:         return cols;",
          "",
          "[Removed Lines]",
          "87:                 if (cols[i] != null)",
          "88:                     cols[i] = String.valueOf(DateFormat.stringToMillis(cols[i]));",
          "",
          "[Added Lines]",
          "87:                 if (cols[i] != null) {",
          "88:                     if (cols[i].isEmpty())",
          "89:                         cols[i] = null;",
          "90:                     else",
          "91:                         cols[i] = String.valueOf(DateFormat.stringToMillis(cols[i]));",
          "92:                 }",
          "",
          "---------------"
        ],
        "core-dictionary/src/test/java/org/apache/kylin/dict/DictionaryProviderTest.java||core-dictionary/src/test/java/org/apache/kylin/dict/DictionaryProviderTest.java": [
          "File: core-dictionary/src/test/java/org/apache/kylin/dict/DictionaryProviderTest.java -> core-dictionary/src/test/java/org/apache/kylin/dict/DictionaryProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.dict;",
          "21: import static org.junit.Assert.assertTrue;",
          "24: import java.io.DataInputStream;",
          "25: import java.io.DataOutputStream;",
          "",
          "[Removed Lines]",
          "22: import static org.junit.Assert.fail;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: import org.junit.Before;",
          "38: import org.junit.Test;",
          "42:     @Before",
          "43:     public void setUp() throws Exception {",
          "",
          "[Removed Lines]",
          "40: public class DictionaryProviderTest extends LocalFileMetadataTestCase{",
          "",
          "[Added Lines]",
          "39: public class DictionaryProviderTest extends LocalFileMetadataTestCase {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:     @Test",
          "53:     public void testReadWrite() throws Exception {",
          "56:         readWriteTest(dict);",
          "59:         readWriteTest(dict2);",
          "77:     }",
          "79:     @Test",
          "",
          "[Removed Lines]",
          "55:         Dictionary<String> dict = getDict(DataType.getType(\"string\"), Arrays.asList(new String[] { \"a\", \"b\" }).iterator());",
          "58:         Dictionary<String> dict2 = getDict(DataType.getType(\"long\"), Arrays.asList(new String[] { \"1\", \"2\" }).iterator());",
          "62:         Dictionary<String> dict3 = getDict(DataType.getType(\"datetime\"), Arrays.asList(new String[] { \"20161122\", \"20161123\" }).iterator());",
          "63:         readWriteTest(dict3);",
          "66:         Dictionary<String> dict4 = getDict(DataType.getType(\"datetime\"), Arrays.asList(new String[] { \"2016-11-22\", \"2016-11-23\" }).iterator());",
          "67:         readWriteTest(dict4);",
          "70:         try {",
          "71:             Dictionary<String> dict5 = getDict(DataType.getType(\"date\"), Arrays.asList(new String[] { \"2016-11-22\", \"20161122\" }).iterator());",
          "72:             readWriteTest(dict5);",
          "73:             fail(\"Date format not correct.Should throw exception\");",
          "74:         } catch (IllegalArgumentException e) {",
          "76:         }",
          "",
          "[Added Lines]",
          "54:         Dictionary<String> dict = getDict(DataType.getType(\"string\"),",
          "55:                 Arrays.asList(new String[] { \"a\", \"b\" }).iterator());",
          "58:         Dictionary<String> dict2 = getDict(DataType.getType(\"long\"),",
          "59:                 Arrays.asList(new String[] { \"1\", \"2\" }).iterator());",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/metadata/tuple/Tuple.java||core-metadata/src/main/java/org/apache/kylin/metadata/tuple/Tuple.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/metadata/tuple/Tuple.java -> core-metadata/src/main/java/org/apache/kylin/metadata/tuple/Tuple.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:         values[idx] = objectValue;",
          "104:     }",
          "106:     public void setMeasureValue(String fieldName, Object fieldValue) {",
          "107:         setMeasureValue(info.getFieldIndex(fieldName), fieldValue);",
          "108:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     public void setDimensionValueDirectly(int idx, Object objectValue) {",
          "107:         values[idx] = objectValue;",
          "108:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:         }",
          "183:     }",
          "186:         return 1L * days * (1000 * 3600 * 24);",
          "187:     }",
          "189:     public static Object convertOptiqCellValue(String strValue, String dataTypeName) {",
          "190:         if (strValue == null)",
          "191:             return null;",
          "",
          "[Removed Lines]",
          "185:     private static long epicDaysToMillis(int days) {",
          "",
          "[Added Lines]",
          "189:     public static long epicDaysToMillis(int days) {",
          "193:     public static int millisToEpicDays(long millis) {",
          "194:         return (int) (millis / (1000 * 3600 * 24));",
          "195:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:         switch (dataTypeName) {",
          "198:         case \"date\":",
          "201:         case \"datetime\":",
          "202:         case \"timestamp\":",
          "204:         case \"tinyint\":",
          "205:             return Byte.valueOf(strValue);",
          "206:         case \"smallint\":",
          "",
          "[Removed Lines]",
          "200:             return Integer.valueOf(dateToEpicDays(strValue));// Optiq expects Integer instead of Long. by honma",
          "203:             return Long.valueOf(DateFormat.stringToMillis(strValue));",
          "",
          "[Added Lines]",
          "208:             return millisToEpicDays(DateFormat.stringToMillis(strValue));// Optiq expects Integer instead of Long. by honma",
          "211:             return DateFormat.stringToMillis(strValue);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "222:         }",
          "223:     }",
          "230: }",
          "",
          "[Removed Lines]",
          "225:     private static int dateToEpicDays(String strValue) {",
          "226:         long millis = DateFormat.stringToMillis(strValue);",
          "227:         return (int) (millis / (1000 * 3600 * 24));",
          "228:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/metadata/tuple/TupleInfo.java||core-metadata/src/main/java/org/apache/kylin/metadata/tuple/TupleInfo.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/metadata/tuple/TupleInfo.java -> core-metadata/src/main/java/org/apache/kylin/metadata/tuple/TupleInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         return columns.get(idx);",
          "53:     }",
          "55:     public int getColumnIndex(TblColRef col) {",
          "56:         return columnMap.get(col);",
          "57:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     public TblColRef getColumn(int idx) {",
          "56:         return columns.get(idx);",
          "57:     }",
          "",
          "---------------"
        ],
        "core-storage/src/main/java/org/apache/kylin/storage/gtrecord/CubeTupleConverter.java||core-storage/src/main/java/org/apache/kylin/storage/gtrecord/CubeTupleConverter.java": [
          "File: core-storage/src/main/java/org/apache/kylin/storage/gtrecord/CubeTupleConverter.java -> core-storage/src/main/java/org/apache/kylin/storage/gtrecord/CubeTupleConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.apache.kylin.common.KylinConfig;",
          "30: import org.apache.kylin.common.util.Array;",
          "31: import org.apache.kylin.common.util.Dictionary;",
          "32: import org.apache.kylin.cube.CubeManager;",
          "33: import org.apache.kylin.cube.CubeSegment;",
          "34: import org.apache.kylin.cube.cuboid.Cuboid;",
          "35: import org.apache.kylin.cube.model.CubeDesc.DeriveInfo;",
          "36: import org.apache.kylin.dict.lookup.ILookupTable;",
          "37: import org.apache.kylin.dimension.TimeDerivedColumnType;",
          "38: import org.apache.kylin.measure.MeasureType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import org.apache.kylin.common.util.DateFormat;",
          "37: import org.apache.kylin.cube.model.RowKeyColDesc;",
          "38: import org.apache.kylin.cube.model.RowKeyDesc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     public final int nSelectedDims;",
          "78:     public CubeTupleConverter(CubeSegment cubeSeg, Cuboid cuboid, //",
          "79:             Set<TblColRef> selectedDimensions, Set<FunctionDesc> selectedMetrics, int[] gtColIdx, TupleInfo returnTupleInfo) {",
          "80:         this.cubeSeg = cubeSeg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     private final RowKeyDesc rowKeyDesc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148:                 }",
          "149:             }",
          "150:         }",
          "151:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:         rowKeyDesc = cubeSeg.getCubeDesc().getRowkey();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:                         tuple.setDimensionValue(ti, toString(gtValues[i]));",
          "180:                     }",
          "181:                 } else {",
          "183:                 }",
          "184:             }",
          "185:         }",
          "",
          "[Removed Lines]",
          "182:                     tuple.setDimensionValue(ti, toString(gtValues[i]));",
          "",
          "[Added Lines]",
          "191:                     setDimensionValue(tuple, ti, toString(gtValues[i]));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "209:         }",
          "210:     }",
          "212:     @Override",
          "213:     public void close() throws IOException {",
          "214:         for (ILookupTable usedLookupTable : usedLookupTables) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:     private void setDimensionValue(Tuple tuple, int idx, String valueStr) {",
          "222:         if (valueStr == null) {",
          "223:             tuple.setDimensionValueDirectly(idx, valueStr);",
          "224:             return;",
          "225:         }",
          "227:         Object valueConvert = null;",
          "228:         TblColRef col = tupleInfo.getColumn(idx);",
          "229:         RowKeyColDesc rowKeyColDesc = rowKeyDesc.getColDescUncheck(col);",
          "230:         if (rowKeyColDesc != null) {",
          "232:             if (col.getType().isDate() && !RowKeyColDesc.isDateDimEnc(rowKeyColDesc)) {",
          "233:                 long tmpValue = (Long) Tuple.convertOptiqCellValue(valueStr, \"timestamp\");",
          "234:                 valueConvert = Tuple.millisToEpicDays(tmpValue);",
          "235:             } else if (col.getType().isDatetime() && !RowKeyColDesc.isTimeDimEnc(rowKeyColDesc)) {",
          "236:                 int tmpValue = (Integer) Tuple.convertOptiqCellValue(valueStr, \"date\");",
          "237:                 valueConvert = Tuple.epicDaysToMillis(tmpValue);",
          "238:             }",
          "239:         }",
          "241:         if (valueConvert != null) {",
          "242:             tuple.setDimensionValueDirectly(idx, valueConvert);",
          "243:         } else {",
          "244:             tuple.setDimensionValue(idx, valueStr);",
          "245:         }",
          "246:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "262:                 public void fillDerivedColumns(Object[] gtValues, Tuple tuple) {",
          "263:                     for (int i = 0; i < hostTmpIdx.length; i++) {",
          "264:                         lookupKey.data[i] = CubeTupleConverter.toString(gtValues[hostTmpIdx[i]]);",
          "265:                     }",
          "267:                     String[] lookupRow = lookupTable.getRow(lookupKey);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:                         if (deriveInfo.join.getPrimaryKeyColumns()[i].getType().isDateTimeFamily()) {",
          "303:                             lookupKey.data[i] = String.valueOf(DateFormat.stringToMillis(lookupKey.data[i]));",
          "304:                         }",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_casewhen/query58.sql||kylin-it/src/test/resources/query/sql_casewhen/query58.sql": [
          "File: kylin-it/src/test/resources/query/sql_casewhen/query58.sql -> kylin-it/src/test/resources/query/sql_casewhen/query58.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: SELECT (CASE WHEN (\"TEST_KYLIN_FACT\".\"LSTG_FORMAT_NAME\" = 'Auction') THEN 'Auction2' ELSE 'Auction1' END) AS \"LSTG_FORMAT_NAME__group_\",",
          "20:   SUM(\"TEST_KYLIN_FACT\".\"PRICE\") AS \"sum_PRICE_ok\"",
          "21: FROM \"TEST_KYLIN_FACT\" \"TEST_KYLIN_FACT\"",
          "22: GROUP BY (CASE WHEN (\"TEST_KYLIN_FACT\".\"LSTG_FORMAT_NAME\" =  'Auction') THEN 'Auction2' ELSE 'Auction1' END)",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/TableSchemaUpdateChecker.java||server-base/src/main/java/org/apache/kylin/rest/service/TableSchemaUpdateChecker.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/TableSchemaUpdateChecker.java -> server-base/src/main/java/org/apache/kylin/rest/service/TableSchemaUpdateChecker.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:         } else if (column.getType().isNumberFamily()) {",
          "130:             return newCol.getType().isNumberFamily();",
          "131:         } else {",
          "133:             return column.getTypeName().equals(newCol.getTypeName());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:         } else if ((column.getType().isStringFamily() && newCol.getType().isDateTimeFamily())",
          "132:                 && metadataManager.getConfig().isAbleChangeStringToDateTime()) {",
          "134:             return true;",
          "",
          "---------------"
        ],
        "server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java||server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java": [
          "File: server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java -> server-base/src/test/java/org/apache/kylin/rest/service/update/TableSchemaUpdaterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.io.DataOutputStream;",
          "25: import java.io.File;",
          "26: import java.io.FileInputStream;",
          "28: import java.io.IOException;",
          "29: import java.nio.charset.StandardCharsets;",
          "30: import java.nio.file.Files;",
          "",
          "[Removed Lines]",
          "27: import java.io.FileNotFoundException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25080df65fae347edc28ebf73167fae7689aa561",
      "candidate_info": {
        "commit_hash": "25080df65fae347edc28ebf73167fae7689aa561",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/25080df65fae347edc28ebf73167fae7689aa561",
        "files": [
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java"
        ],
        "message": "add kerberos usage check before set spark submit conf",
        "before_after_code_files": [
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java -> kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:         if (StringUtils.isNotBlank(sparkUploadFiles)) {",
          "388:             sb.append(\"--files \").append(sparkUploadFiles).append(\" \");",
          "389:         }",
          "392:         sb.append(\"--name job_step_%s \");",
          "393:         sb.append(\"--jars %s %s %s\");",
          "394:         String cmd = String.format(Locale.ROOT, sb.toString(), hadoopConf, sparkSubmitCmd, getId(), jars, kylinJobJar,",
          "",
          "[Removed Lines]",
          "390:         sb.append(\"--principal \").append(config.getKerberosPrincipal()).append(\" \");",
          "391:         sb.append(\"--keytab \").append(config.getKerberosKeytabPath()).append(\" \");",
          "",
          "[Added Lines]",
          "390:         if (config.isKerberosEnabled()) {",
          "391:             sb.append(\"--principal \").append(config.getKerberosPrincipal()).append(\" \");",
          "392:             sb.append(\"--keytab \").append(config.getKerberosKeytabPath()).append(\" \");",
          "393:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}