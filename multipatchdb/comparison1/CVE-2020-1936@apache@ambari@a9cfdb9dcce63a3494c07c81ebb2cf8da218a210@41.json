{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "302fa8a62e9d5e289f2bcbc9ef71cc27ae852a9e",
      "candidate_info": {
        "commit_hash": "302fa8a62e9d5e289f2bcbc9ef71cc27ae852a9e",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/302fa8a62e9d5e289f2bcbc9ef71cc27ae852a9e",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog273.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java"
        ],
        "message": "AMBARI-25312. Ambari 2.7.4 is missing upgrade catalogs (dlysnichenko) (#3018)\n\n* AMBARI-25312. Ambari 2.7.4 is missing upgrade catalogs (dlysnichenko)\n\n* AMBARI-25312. Ambari 2.7.4 is missing upgrade catalogs (dlysnichenko)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog273.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog273.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:       catalogBinder.addBinding().to(UpgradeCatalog270.class);",
          "192:       catalogBinder.addBinding().to(UpgradeCatalog271.class);",
          "193:       catalogBinder.addBinding().to(UpgradeCatalog272.class);",
          "194:       catalogBinder.addBinding().to(UpgradeCatalog274.class);",
          "195:       catalogBinder.addBinding().to(UpdateAlertScriptPaths.class);",
          "196:       catalogBinder.addBinding().to(FinalUpgradeCatalog.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:       catalogBinder.addBinding().to(UpgradeCatalog273.class);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog273.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog273.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog273.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog273.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.upgrade;",
          "20: import java.sql.SQLException;",
          "22: import org.apache.ambari.server.AmbariException;",
          "23: import org.slf4j.Logger;",
          "24: import org.slf4j.LoggerFactory;",
          "26: import com.google.inject.Inject;",
          "27: import com.google.inject.Injector;",
          "32: public class UpgradeCatalog273 extends AbstractUpgradeCatalog {",
          "34:   private static final Logger LOG = LoggerFactory.getLogger(UpgradeCatalog273.class);",
          "36:   @Inject",
          "37:   public UpgradeCatalog273(Injector injector) {",
          "38:     super(injector);",
          "39:   }",
          "41:   @Override",
          "42:   public String getSourceVersion() {",
          "43:     return \"2.7.2\";",
          "44:   }",
          "46:   @Override",
          "47:   public String getTargetVersion() {",
          "48:     return \"2.7.3\";",
          "49:   }",
          "51:   @Override",
          "52:   protected void executeDDLUpdates() throws AmbariException, SQLException {",
          "54:   }",
          "56:   @Override",
          "57:   protected void executePreDMLUpdates() throws AmbariException, SQLException {",
          "59:   }",
          "61:   @Override",
          "62:   protected void executeDMLUpdates() throws AmbariException, SQLException {",
          "63:     addNewConfigurationsFromXml();",
          "64:   }",
          "66: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   @Override",
          "50:   public String getSourceVersion() {",
          "52:   }",
          "",
          "[Removed Lines]",
          "51:     return \"2.7.2\";",
          "",
          "[Added Lines]",
          "51:     return \"2.7.3\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:   @Override",
          "88:   protected void executeDMLUpdates() throws AmbariException, SQLException {",
          "90:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     addNewConfigurationsFromXml();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8461bf951fc9175f95ac2a434ef03d4ff534325",
      "candidate_info": {
        "commit_hash": "b8461bf951fc9175f95ac2a434ef03d4ff534325",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b8461bf951fc9175f95ac2a434ef03d4ff534325",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts"
        ],
        "message": "[AMBARI-24354] [Log Search UI] wrong filter label on open log tab (#1880)\n\n(cherry picked from commit 6917b7146437f66f00a2d52ff7d0da8c213da3df)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts||ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts||ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts -> ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:                 });",
          "436:               } else {",
          "437:                 Object.assign(timeRangeParams, {",
          "439:                   timeRangeUnit: timeRangeValue.unit",
          "440:                 });",
          "441:               }",
          "442:               Object.assign(newParams, timeRangeParams);",
          "443:             }",
          "",
          "[Removed Lines]",
          "438:                   timeRangeInterval: timeRangeValue.interval,",
          "",
          "[Added Lines]",
          "440:                 if (timeRangeValue.interval !== undefined) {",
          "441:                   Object.assign(timeRangeParams, {",
          "442:                     timeRangeInterval: timeRangeValue.interval",
          "443:                   });",
          "444:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "493:           break;",
          "494:         case 'timeRangeType':",
          "495:           const type = params.timeRangeType || 'LAST';",
          "497:           const unit = params.timeRangeUnit;",
          "498:           const timeRangeFilterValue: {[key: string]: any} = {type, unit, interval};",
          "499:           let timeRangeFilterLabel = 'filter.timeRange.';",
          "",
          "[Removed Lines]",
          "496:           const interval = parseInt(params.timeRangeInterval, 0);",
          "",
          "[Added Lines]",
          "500:           const interval = params.timeRangeInterval && parseInt(params.timeRangeInterval, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1661b4e07ba0c37c608f8ef2c5f0e4e8028824a9",
      "candidate_info": {
        "commit_hash": "1661b4e07ba0c37c608f8ef2c5f0e4e8028824a9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/1661b4e07ba0c37c608f8ef2c5f0e4e8028824a9",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/AbstractUpgradeServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java"
        ],
        "message": "AMBARI-24401. Ambari doesn't replace Timeline Reader localhost address with corresponding host in fresh and upgrade installation (amagyar) (#1955) (#1960)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/AbstractUpgradeServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/AbstractUpgradeServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/AbstractUpgradeServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/AbstractUpgradeServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/AbstractUpgradeServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/AbstractUpgradeServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   }",
          "42:   @Inject",
          "",
          "[Removed Lines]",
          "43:   private Clusters m_clusters;",
          "",
          "[Added Lines]",
          "43:   protected Clusters m_clusters;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: package org.apache.ambari.server.serveraction.upgrades;",
          "23: import static java.util.stream.Collectors.toList;",
          "24: import static org.apache.commons.lang.StringUtils.join;",
          "26: import java.util.ArrayList;",
          "27: import java.util.HashMap;",
          "28: import java.util.List;",
          "29: import java.util.Map;",
          "30: import java.util.Set;",
          "31: import java.util.concurrent.ConcurrentMap;",
          "33: import org.apache.ambari.server.AmbariException;",
          "34: import org.apache.ambari.server.ObjectNotFoundException;",
          "35: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "36: import org.apache.ambari.server.agent.CommandReport;",
          "37: import org.apache.ambari.server.state.Cluster;",
          "38: import org.apache.ambari.server.state.Config;",
          "39: import org.apache.ambari.server.state.Host;",
          "40: import org.apache.ambari.server.state.ServiceComponent;",
          "41: import org.slf4j.Logger;",
          "42: import org.slf4j.LoggerFactory;",
          "48: public class FixTimelineReaderAddress extends AbstractUpgradeServerAction {",
          "49:   private static final Logger LOG = LoggerFactory.getLogger(CreateAndConfigureAction.class);",
          "50:   private static final String YARN_SITE = \"yarn-site\";",
          "51:   private static final String TIMELINE_READER = \"TIMELINE_READER\";",
          "52:   private static final String[] HOST_PROPERTIES = new String[] {",
          "53:     \"yarn.timeline-service.reader.webapp.address\",",
          "54:     \"yarn.timeline-service.reader.webapp.https.address\"",
          "55:   };",
          "57:   @Override",
          "58:   public CommandReport execute(ConcurrentMap<String, Object> requestSharedDataContext) throws AmbariException, InterruptedException {",
          "59:     Cluster cluster = getClusters().getCluster(getExecutionCommand().getClusterName());",
          "60:     List<String> updatedHosts = new ArrayList<>();",
          "61:     try {",
          "62:       for (String propertyName : HOST_PROPERTIES) {",
          "63:         Config config = cluster.getDesiredConfigByType(YARN_SITE);",
          "64:         if (config == null) {",
          "65:           continue;",
          "66:         }",
          "67:         String oldHost = config.getProperties().get(propertyName);",
          "68:         if (oldHost == null) {",
          "69:           continue;",
          "70:         }",
          "71:         String newHost = oldHost.replace(\"localhost\", hostNameOf(cluster, \"YARN\", TIMELINE_READER));",
          "72:         updatedHosts.add(newHost);",
          "73:         updateConfig(cluster, propertyName, newHost, config);",
          "74:       }",
          "75:       return commandReport(String.format(\"Updated %s hosts to: %s\", TIMELINE_READER, join(updatedHosts, \", \")));",
          "76:     } catch (ObjectNotFoundException e) {",
          "77:       return commandReport(\"Skipping \" + this.getClass().getSimpleName() + \". Reason: \" + e.getMessage());",
          "78:     }",
          "79:   }",
          "81:   private void updateConfig(Cluster cluster, String propertyName, String propertyValue, Config config) throws AmbariException {",
          "82:     Map<String, String> newProperties = new HashMap<>();",
          "83:     newProperties.put(propertyName, propertyValue);",
          "84:     config.updateProperties(newProperties);",
          "85:     config.save();",
          "86:     agentConfigsHolder.updateData(cluster.getClusterId(), cluster.getHosts().stream().map(Host::getHostId).collect(toList()));",
          "87:   }",
          "92:   private String hostNameOf(Cluster cluster, String serviceName, String componentName) throws AmbariException {",
          "93:     ServiceComponent timelineReader = cluster.getService(serviceName).getServiceComponent(componentName);",
          "94:     Set<String> allHosts = timelineReader.getServiceComponentHosts().keySet();",
          "95:     if (allHosts.isEmpty()) {",
          "96:       throw new ObjectNotFoundException(\"No \" + componentName + \" hosts found.\");",
          "97:     }",
          "98:     if (allHosts.size() > 1) {",
          "99:       LOG.warn(\"Expected one \" + componentName + \" host, found \" + allHosts.size() + \". Using the first host.\");",
          "100:     }",
          "101:     return allHosts.iterator().next();",
          "102:   }",
          "104:   private CommandReport commandReport(String message) {",
          "105:     return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", message, \"\");",
          "106:   }",
          "107: }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: package org.apache.ambari.server.serveraction.upgrades;",
          "23: import static java.util.Collections.emptyList;",
          "24: import static org.easymock.EasyMock.anyString;",
          "25: import static org.easymock.EasyMock.expect;",
          "26: import static org.easymock.EasyMock.expectLastCall;",
          "28: import java.util.HashMap;",
          "30: import org.apache.ambari.server.agent.ExecutionCommand;",
          "31: import org.apache.ambari.server.agent.stomp.AgentConfigsHolder;",
          "32: import org.apache.ambari.server.state.Cluster;",
          "33: import org.apache.ambari.server.state.Clusters;",
          "34: import org.apache.ambari.server.state.Config;",
          "35: import org.apache.ambari.server.state.Service;",
          "36: import org.apache.ambari.server.state.ServiceComponent;",
          "37: import org.apache.ambari.server.state.ServiceComponentHost;",
          "38: import org.easymock.EasyMockRunner;",
          "39: import org.easymock.EasyMockSupport;",
          "40: import org.easymock.Mock;",
          "41: import org.easymock.MockType;",
          "42: import org.junit.Before;",
          "43: import org.junit.Test;",
          "44: import org.junit.runner.RunWith;",
          "46: @RunWith(EasyMockRunner.class)",
          "47: public class FixTimelineReaderAddressTest extends EasyMockSupport {",
          "48:   @Mock(type = MockType.NICE)",
          "49:   private Cluster cluster;",
          "50:   @Mock(type = MockType.NICE)",
          "51:   private Config config;",
          "52:   @Mock",
          "53:   private Service yarn;",
          "54:   @Mock",
          "55:   private ServiceComponent timelineReader;",
          "56:   private FixTimelineReaderAddress action;",
          "58:   @Before",
          "59:   public void setup() throws Exception {",
          "60:     action = new FixTimelineReaderAddress();",
          "61:     action.m_clusters = createMock(Clusters.class);",
          "62:     action.agentConfigsHolder = createNiceMock(AgentConfigsHolder.class);",
          "63:     action.setExecutionCommand(new ExecutionCommand());",
          "64:     expect(action.m_clusters.getCluster(anyString())).andReturn(cluster).anyTimes();",
          "65:     expect(cluster.getService(\"YARN\")).andReturn(yarn).anyTimes();",
          "66:     expect(cluster.getHosts()).andReturn(emptyList()).anyTimes();",
          "67:     expect(cluster.getDesiredConfigByType(\"yarn-site\")).andReturn(config).anyTimes();",
          "68:     expect(config.getProperties()).andReturn(new HashMap<String, String>() {{",
          "69:       put(\"yarn.timeline-service.reader.webapp.address\", \"localhost:8080\");",
          "70:       put(\"yarn.timeline-service.reader.webapp.https.address\", \"localhost:8081\");",
          "71:     }}).anyTimes();",
          "72:     expect(yarn.getServiceComponent(\"TIMELINE_READER\")).andReturn(timelineReader).anyTimes();",
          "73:     expect(timelineReader.getServiceComponentHosts()).andReturn(new HashMap<String, ServiceComponentHost>(){{",
          "74:       put(\"newhost\", null);",
          "75:     }}).anyTimes();",
          "76:   }",
          "78:   @Test",
          "79:   public void testReplaceTimelineReaderHost() throws Exception {",
          "80:     config.updateProperties(new HashMap<String, String>() {{",
          "81:       put(\"yarn.timeline-service.reader.webapp.address\", \"newhost:8080\");",
          "82:     }});",
          "83:     expectLastCall();",
          "84:     config.updateProperties(new HashMap<String, String>() {{",
          "85:       put(\"yarn.timeline-service.reader.webapp.https.address\", \"newhost:8081\");",
          "86:     }});",
          "87:     expectLastCall();",
          "88:     replayAll();",
          "89:     action.execute(null);",
          "90:     verifyAll();",
          "91:   }",
          "92: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e51875535a9c84d5a06a5c501fe6fddd51eb5421",
      "candidate_info": {
        "commit_hash": "e51875535a9c84d5a06a5c501fe6fddd51eb5421",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/e51875535a9c84d5a06a5c501fe6fddd51eb5421",
        "files": [
          "ambari-web/app/controllers/wizard.js",
          "ambari-web/app/mappers/stack_service_mapper.js",
          "ambari-web/test/controllers/wizard_test.js"
        ],
        "message": "AMBARI-24313 Service disappear from the UI when Going back to \"Customize Services\" page or doing page refresh",
        "before_after_code_files": [
          "ambari-web/app/controllers/wizard.js||ambari-web/app/controllers/wizard.js",
          "ambari-web/app/mappers/stack_service_mapper.js||ambari-web/app/mappers/stack_service_mapper.js",
          "ambari-web/test/controllers/wizard_test.js||ambari-web/test/controllers/wizard_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/wizard.js||ambari-web/app/controllers/wizard.js": [
          "File: ambari-web/app/controllers/wizard.js -> ambari-web/app/controllers/wizard.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "645:     this.set('content.selectedServiceNames', savedSelectedServices);",
          "646:     this.set('content.installedServiceNames', savedInstalledServices);",
          "647:     if (!savedSelectedServices) {",
          "651:     } else {",
          "652:       jsonData.items.forEach(function (service) {",
          "653:         service.StackServices.is_selected = savedSelectedServices.contains(service.StackServices.service_name);",
          "",
          "[Removed Lines]",
          "648:       jsonData.items.forEach(function (service) {",
          "649:         service.StackServices.is_selected = !(service.StackServices.selection === \"TECH_PREVIEW\");",
          "650:       }, this);",
          "",
          "[Added Lines]",
          "648:       jsonData.items.forEach(this.setStackServiceSelectedByDefault);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670:   loadServiceComponentsErrorCallback: function (request, ajaxOptions, error) {",
          "671:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "674:   setStackServiceSelectedByDefault: function (service) {",
          "675:     service.StackServices.is_selected = !(service.StackServices.selection === \"TECH_PREVIEW\");",
          "676:     if (service.StackServices.service_type === 'HCFS' && service.StackServices.service_name !== 'HDFS') {",
          "677:       service.StackServices.is_selected = false;",
          "678:     }",
          "679:   },",
          "",
          "---------------"
        ],
        "ambari-web/app/mappers/stack_service_mapper.js||ambari-web/app/mappers/stack_service_mapper.js": [
          "File: ambari-web/app/mappers/stack_service_mapper.js -> ambari-web/app/mappers/stack_service_mapper.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:         stackService.is_installable = false;",
          "121:         stackService.is_selected = false;",
          "122:       }",
          "126:       if(stackService.selection === \"MANDATORY\") {",
          "127:         stackService.is_mandatory = true;",
          "128:       }",
          "",
          "[Removed Lines]",
          "123:       if (stackService.service_type === 'HCFS' && stackService.service_name !== 'HDFS') {",
          "124:         stackService.is_selected = false;",
          "125:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-web/test/controllers/wizard_test.js||ambari-web/test/controllers/wizard_test.js": [
          "File: ambari-web/test/controllers/wizard_test.js -> ambari-web/test/controllers/wizard_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1754:       ]);",
          "1755:     });",
          "1756:   });",
          "1759: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1758:   describe('#setStackServiceSelectedByDefault', function() {",
          "1760:     it('regular service should be selected', function() {",
          "1761:       var service = {",
          "1762:         StackServices: {",
          "1763:           selection: null,",
          "1764:           service_name: 'S1'",
          "1765:         }",
          "1766:       };",
          "1767:       c.setStackServiceSelectedByDefault(service);",
          "1768:       expect(service.StackServices.is_selected).to.be.true;",
          "1769:     });",
          "1771:     it('TECH_PREVIEW service should not be selected', function() {",
          "1772:       var service = {",
          "1773:         StackServices: {",
          "1774:           selection: \"TECH_PREVIEW\",",
          "1775:           service_name: 'S1'",
          "1776:         }",
          "1777:       };",
          "1778:       c.setStackServiceSelectedByDefault(service);",
          "1779:       expect(service.StackServices.is_selected).to.be.false;",
          "1780:     });",
          "1782:     it('service_type service should not be selected', function() {",
          "1783:       var service = {",
          "1784:         StackServices: {",
          "1785:           selection: null,",
          "1786:           service_name: 'S1',",
          "1787:           service_type: 'HCFS'",
          "1788:         }",
          "1789:       };",
          "1790:       c.setStackServiceSelectedByDefault(service);",
          "1791:       expect(service.StackServices.is_selected).to.be.false;",
          "1792:     });",
          "1793:   });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1372f03a0b19457467002c8eea5f900b9fbb1e86",
      "candidate_info": {
        "commit_hash": "1372f03a0b19457467002c8eea5f900b9fbb1e86",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/1372f03a0b19457467002c8eea5f900b9fbb1e86",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/Service.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/ServiceTest.java",
          "ambari-server/src/test/resources/stacks/HDP/0.1/services/HDFS/metainfo.xml"
        ],
        "message": "[AMBARI-24384] Logic and declaration used to determine if Kerberos is enabled for a service",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java||ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/Service.java||ambari-server/src/main/java/org/apache/ambari/server/state/Service.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/ServiceTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/ServiceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java||ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   private final boolean ssoIntegrationDesired;",
          "41:   private final boolean ssoIntegrationEnabled;",
          "42:   private final boolean ssoIntegrationRequiresKerberos;",
          "44:   public ServiceResponse(Long clusterId, String clusterName, String serviceName,",
          "45:                          StackId desiredStackId, String desiredRepositoryVersion,",
          "46:                          RepositoryVersionState repositoryVersionState, String desiredState,",
          "47:                          boolean credentialStoreSupported, boolean credentialStoreEnabled, boolean ssoIntegrationSupported,",
          "49:     this.clusterId = clusterId;",
          "50:     this.clusterName = clusterName;",
          "51:     this.serviceName = serviceName;",
          "",
          "[Removed Lines]",
          "48:                          boolean ssoIntegrationDesired, boolean ssoIntegrationEnabled, boolean ssoIntegrationRequiresKerberos) {",
          "",
          "[Added Lines]",
          "43:   private final boolean kerberosEnabled;",
          "49:                          boolean ssoIntegrationDesired, boolean ssoIntegrationEnabled, boolean ssoIntegrationRequiresKerberos,",
          "50:                          boolean kerberosEnabled) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     this.credentialStoreSupported = credentialStoreSupported;",
          "60:     this.credentialStoreEnabled = credentialStoreEnabled;",
          "61:     this.ssoIntegrationRequiresKerberos = ssoIntegrationRequiresKerberos;",
          "62:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     this.kerberosEnabled = kerberosEnabled;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:   @Override",
          "233:   public int hashCode() {",
          "235:     result = 71 * result + (clusterName != null ? clusterName.hashCode() : 0);",
          "236:     result = 71 * result + (serviceName != null ? serviceName.hashCode() : 0);",
          "237:     return result;",
          "",
          "[Removed Lines]",
          "234:     int result = clusterId != null? clusterId.intValue() : 0;",
          "",
          "[Added Lines]",
          "235:     int result = clusterId != null ? clusterId.intValue() : 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269:     return ssoIntegrationRequiresKerberos;",
          "270:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:   @ApiModelProperty(name = \"kerberos_enabled\")",
          "277:   public boolean isKerberosEnabled() {",
          "278:     return kerberosEnabled;",
          "279:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   private static final String SSO_INTEGRATION_REQUIRES_KERBEROS_PROPERTY_ID = PropertyHelper.getPropertyId(",
          "134:       \"ServiceInfo\", \"sso_integration_requires_kerberos\");",
          "136:   protected static final String SERVICE_REPOSITORY_STATE = \"ServiceInfo/repository_state\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:   private static final String KERBEROS_ENABLED_PROPERTY_ID = PropertyHelper.getPropertyId(",
          "137:       \"ServiceInfo\", \"kerberos_enabled\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:     PROPERTY_IDS.add(SSO_INTEGRATION_ENABLED_PROPERTY_ID);",
          "177:     PROPERTY_IDS.add(SSO_INTEGRATION_DESIRED_PROPERTY_ID);",
          "178:     PROPERTY_IDS.add(SSO_INTEGRATION_REQUIRES_KERBEROS_PROPERTY_ID);",
          "181:     KEY_PROPERTY_IDS.put(Resource.Type.Service, SERVICE_SERVICE_NAME_PROPERTY_ID);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     PROPERTY_IDS.add(KERBEROS_ENABLED_PROPERTY_ID);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:         response.isSsoIntegrationDesired(), requestedIds);",
          "302:       setResourceProperty(resource, SSO_INTEGRATION_REQUIRES_KERBEROS_PROPERTY_ID,",
          "303:         response.isSsoIntegrationRequiresKerberos(), requestedIds);",
          "305:       Map<String, Object> serviceSpecificProperties = getServiceSpecificProperties(",
          "306:           response.getClusterName(), response.getServiceName(), requestedIds);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308:       setResourceProperty(resource, KERBEROS_ENABLED_PROPERTY_ID,",
          "309:           response.isKerberosEnabled(), requestedIds);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/Service.java||ambari-server/src/main/java/org/apache/ambari/server/state/Service.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/Service.java -> ambari-server/src/main/java/org/apache/ambari/server/state/Service.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:   MaintenanceState getMaintenanceState();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:   boolean isKerberosEnabled();",
          "109:   boolean isKerberosEnabled(Map<String, Map<String, String>> configurations);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collection;",
          "23: import java.util.HashMap;",
          "24: import java.util.HashSet;",
          "25: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import java.util.concurrent.locks.ReentrantLock;",
          "34: import org.apache.ambari.server.AmbariException;",
          "36: import org.apache.ambari.server.ObjectNotFoundException;",
          "37: import org.apache.ambari.server.ServiceComponentNotFoundException;",
          "38: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "",
          "[Removed Lines]",
          "35: import org.apache.ambari.server.AmbariRuntimeException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:   private boolean isCredentialStoreSupported;",
          "87:   private boolean isCredentialStoreRequired;",
          "88:   private final boolean ssoIntegrationSupported;",
          "90:   private final boolean ssoRequiresKerberos;",
          "91:   private AmbariMetaInfo ambariMetaInfo;",
          "92:   private AtomicReference<MaintenanceState> maintenanceState = new AtomicReference<>();",
          "",
          "[Removed Lines]",
          "89:   private final Predicate ssoEnabledConfiguration;",
          "",
          "[Added Lines]",
          "89:   private final Predicate ssoEnabledTest;",
          "91:   private final Predicate kerberosEnabledTest;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:   @AssistedInject",
          "123:   ServiceImpl(@Assisted Cluster cluster, @Assisted String serviceName,",
          "128:     this.cluster = cluster;",
          "129:     this.clusterDAO = clusterDAO;",
          "130:     this.clusterServiceDAO = clusterServiceDAO;",
          "",
          "[Removed Lines]",
          "124:       @Assisted RepositoryVersionEntity desiredRepositoryVersion, ClusterDAO clusterDAO,",
          "125:       ClusterServiceDAO clusterServiceDAO, ServiceDesiredStateDAO serviceDesiredStateDAO,",
          "126:       ServiceComponentFactory serviceComponentFactory, AmbariMetaInfo ambariMetaInfo,",
          "127:       AmbariEventPublisher eventPublisher) throws AmbariException {",
          "",
          "[Added Lines]",
          "125:               @Assisted RepositoryVersionEntity desiredRepositoryVersion, ClusterDAO clusterDAO,",
          "126:               ClusterServiceDAO clusterServiceDAO, ServiceDesiredStateDAO serviceDesiredStateDAO,",
          "127:               ServiceComponentFactory serviceComponentFactory, AmbariMetaInfo ambariMetaInfo,",
          "128:               AmbariEventPublisher eventPublisher) throws AmbariException {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:     isCredentialStoreSupported = sInfo.isCredentialStoreSupported();",
          "158:     isCredentialStoreRequired = sInfo.isCredentialStoreRequired();",
          "159:     ssoIntegrationSupported = sInfo.isSingleSignOnSupported();",
          "161:     ssoRequiresKerberos = sInfo.isKerberosRequiredForSingleSignOnIntegration();",
          "176:     }",
          "178:   }",
          "180:   @AssistedInject",
          "181:   ServiceImpl(@Assisted Cluster cluster, @Assisted ClusterServiceEntity serviceEntity,",
          "186:     this.cluster = cluster;",
          "187:     this.clusterDAO = clusterDAO;",
          "188:     this.clusterServiceDAO = clusterServiceDAO;",
          "",
          "[Removed Lines]",
          "160:     ssoEnabledConfiguration = compileSsoEnabledPredicate(sInfo);",
          "163:     persist(serviceEntity);",
          "164:   }",
          "166:   private Predicate compileSsoEnabledPredicate(ServiceInfo sInfo) {",
          "167:     if (StringUtils.isNotBlank(sInfo.getSingleSignOnEnabledTest())) {",
          "168:       if (StringUtils.isNotBlank(sInfo.getSingleSignOnEnabledConfiguration())) {",
          "169:         LOG.warn(\"Both <ssoEnabledTest> and <enabledConfiguration> have been declared within <sso> for {}; using <ssoEnabledTest>\", serviceName);",
          "170:       }",
          "171:       return PredicateUtils.fromJSON(sInfo.getSingleSignOnEnabledTest());",
          "172:     } else if (StringUtils.isNotBlank(sInfo.getSingleSignOnEnabledConfiguration())) {",
          "173:       LOG.warn(\"Only <enabledConfiguration> have been declared  within <sso> for {}; converting its value to an equals predicate\", serviceName);",
          "174:       final String equalsPredicateJson = \"{\\\"equals\\\": [\\\"\" + sInfo.getSingleSignOnEnabledConfiguration() + \"\\\", \\\"true\\\"]}\";",
          "175:       return PredicateUtils.fromJSON(equalsPredicateJson);",
          "177:     return null;",
          "182:       ClusterDAO clusterDAO, ClusterServiceDAO clusterServiceDAO,",
          "183:       ServiceDesiredStateDAO serviceDesiredStateDAO,",
          "184:       ServiceComponentFactory serviceComponentFactory, AmbariMetaInfo ambariMetaInfo,",
          "185:       AmbariEventPublisher eventPublisher) throws AmbariException {",
          "",
          "[Added Lines]",
          "161:     ssoEnabledTest = compileSsoEnabledPredicate(sInfo);",
          "163:     kerberosEnabledTest = compileKerberosEnabledPredicate(sInfo);",
          "165:     if (ssoIntegrationSupported && ssoRequiresKerberos && (kerberosEnabledTest == null)) {",
          "166:       LOG.warn(\"The service, {}, requires Kerberos to be enabled for SSO integration support; \" +",
          "167:               \"however, the kerberosEnabledTest specification has not been specified in the metainfo.xml file. \" +",
          "168:               \"Automated SSO integration will not be allowed for this service.\",",
          "169:           serviceName);",
          "172:     persist(serviceEntity);",
          "177:               ClusterDAO clusterDAO, ClusterServiceDAO clusterServiceDAO,",
          "178:               ServiceDesiredStateDAO serviceDesiredStateDAO,",
          "179:               ServiceComponentFactory serviceComponentFactory, AmbariMetaInfo ambariMetaInfo,",
          "180:               AmbariEventPublisher eventPublisher) throws AmbariException {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "200:       for (ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity",
          "201:           : serviceEntity.getServiceComponentDesiredStateEntities()) {",
          "202:         try {",
          "213:       }",
          "214:     }",
          "",
          "[Removed Lines]",
          "203:             components.put(serviceComponentDesiredStateEntity.getComponentName(),",
          "204:                 serviceComponentFactory.createExisting(this,",
          "205:                     serviceComponentDesiredStateEntity));",
          "206:           } catch(ProvisionException ex) {",
          "207:             StackId stackId = new StackId(serviceComponentDesiredStateEntity.getDesiredStack());",
          "208:             LOG.error(String.format(\"Can not get component info: stackName=%s, stackVersion=%s, serviceName=%s, componentName=%s\",",
          "209:                 stackId.getStackName(), stackId.getStackVersion(),",
          "210:                 serviceEntity.getServiceName(),serviceComponentDesiredStateEntity.getComponentName()));",
          "211:             ex.printStackTrace();",
          "212:           }",
          "",
          "[Added Lines]",
          "198:           components.put(serviceComponentDesiredStateEntity.getComponentName(),",
          "199:               serviceComponentFactory.createExisting(this,",
          "200:                   serviceComponentDesiredStateEntity));",
          "201:         } catch (ProvisionException ex) {",
          "202:           StackId stackId = new StackId(serviceComponentDesiredStateEntity.getDesiredStack());",
          "203:           LOG.error(String.format(\"Can not get component info: stackName=%s, stackVersion=%s, serviceName=%s, componentName=%s\",",
          "204:               stackId.getStackName(), stackId.getStackVersion(),",
          "205:               serviceEntity.getServiceName(), serviceComponentDesiredStateEntity.getComponentName()));",
          "206:           ex.printStackTrace();",
          "207:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "221:     isCredentialStoreRequired = sInfo.isCredentialStoreRequired();",
          "222:     displayName = sInfo.getDisplayName();",
          "223:     ssoIntegrationSupported = sInfo.isSingleSignOnSupported();",
          "225:     ssoRequiresKerberos = sInfo.isKerberosRequiredForSingleSignOnIntegration();",
          "226:   }",
          "",
          "[Removed Lines]",
          "224:     ssoEnabledConfiguration = compileSsoEnabledPredicate(sInfo);",
          "",
          "[Added Lines]",
          "219:     ssoEnabledTest = compileSsoEnabledPredicate(sInfo);",
          "221:     kerberosEnabledTest = compileKerberosEnabledPredicate(sInfo);",
          "223:     if (ssoIntegrationSupported && ssoRequiresKerberos && (kerberosEnabledTest == null)) {",
          "224:       LOG.warn(\"The service, {}, requires Kerberos to be enabled for SSO integration support; \" +",
          "225:               \"however, the kerberosEnabledTest specification has not been specified in the metainfo.xml file. \" +",
          "226:               \"Automated SSO integration will not be allowed for this service.\",",
          "227:           serviceName);",
          "228:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "242:     } catch (ObjectNotFoundException e) {",
          "243:       throw new RuntimeException(\"Trying to create a ServiceInfo\"",
          "248:     }",
          "249:   }",
          "",
          "[Removed Lines]",
          "244:               + \" not recognized in stack info\"",
          "245:               + \", clusterName=\" + cluster.getClusterName()",
          "246:               + \", serviceName=\" + getName()",
          "247:               + \", stackInfo=\" + getDesiredStackId().getStackName());",
          "",
          "[Added Lines]",
          "247:           + \" not recognized in stack info\"",
          "248:           + \", clusterName=\" + cluster.getClusterName()",
          "249:           + \", serviceName=\" + getName()",
          "250:           + \", stackInfo=\" + getDesiredStackId().getStackName());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "271:   @Override",
          "272:   public Set<String> getServiceHosts() {",
          "273:     Set<String> hostNames = new HashSet<>();",
          "275:       hostNames.addAll(serviceComponent.getServiceComponentsHosts());",
          "276:     }",
          "277:     return hostNames;",
          "",
          "[Removed Lines]",
          "274:     for (ServiceComponent serviceComponent  : getServiceComponents().values()) {",
          "",
          "[Added Lines]",
          "277:     for (ServiceComponent serviceComponent : getServiceComponents().values()) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "328:   public void setDesiredState(State state) {",
          "329:     if (LOG.isDebugEnabled()) {",
          "330:       LOG.debug(\"Setting DesiredState of Service, clusterName={}, clusterId={}, serviceName={}, oldDesiredState={}, newDesiredState={}\",",
          "332:     }",
          "334:     ServiceDesiredStateEntity serviceDesiredStateEntity = getServiceDesiredStateEntity();",
          "",
          "[Removed Lines]",
          "331:         cluster.getClusterName(), cluster.getClusterId(), getName(), getDesiredState(), state);",
          "",
          "[Added Lines]",
          "334:           cluster.getClusterName(), cluster.getClusterId(), getName(), getDesiredState(), state);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "386:     }",
          "388:     List<RepositoryVersionState> states = new ArrayList<>();",
          "390:       states.add(component.getRepositoryState());",
          "391:     }",
          "",
          "[Removed Lines]",
          "389:     for( ServiceComponent component : components.values() ){",
          "",
          "[Added Lines]",
          "392:     for (ServiceComponent component : components.values()) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "398:     RepositoryVersionEntity desiredRespositoryVersion = getDesiredRepositoryVersion();",
          "399:     StackId desiredStackId = desiredRespositoryVersion.getStackId();",
          "401:     ServiceResponse r = new ServiceResponse(cluster.getClusterId(), cluster.getClusterName(),",
          "402:         getName(), desiredStackId, desiredRespositoryVersion.getVersion(), getRepositoryState(),",
          "403:         getDesiredState().toString(), isCredentialStoreSupported(), isCredentialStoreEnabled(),",
          "406:     r.setDesiredRepositoryVersionId(desiredRespositoryVersion.getId());",
          "",
          "[Removed Lines]",
          "404:       ssoIntegrationSupported, isSsoIntegrationDesired(), isSsoIntegrationEnabled(), isKerberosRequredForSsoIntegration());",
          "",
          "[Added Lines]",
          "404:     Map<String, Map<String, String>> existingConfigurations;",
          "406:     try {",
          "407:       existingConfigurations = configHelper.calculateExistingConfigurations(ambariManagementController, cluster);",
          "408:     } catch (AmbariException e) {",
          "409:       LOG.warn(\"Failed to get the existing configurations for the cluster.  Predicate calculations may not be correct due to missing data.\");",
          "410:       existingConfigurations = Collections.emptyMap();",
          "411:     }",
          "416:         ssoIntegrationSupported, isSsoIntegrationDesired(), isSsoIntegrationEnabled(existingConfigurations),",
          "417:         isKerberosRequiredForSsoIntegration(), isKerberosEnabled(existingConfigurations));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "451:       return desiredStateEntity.isCredentialStoreEnabled();",
          "452:     } else {",
          "453:       LOG.warn(\"Trying to fetch a member from an entity object that may \" +",
          "455:     }",
          "456:     return false;",
          "457:   }",
          "",
          "[Removed Lines]",
          "454:               \"have been previously deleted, serviceName = \" + getName());",
          "",
          "[Added Lines]",
          "467:           \"have been previously deleted, serviceName = \" + getName());",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "467:   public void setCredentialStoreEnabled(boolean credentialStoreEnabled) {",
          "468:     if (LOG.isDebugEnabled()) {",
          "469:       LOG.debug(\"Setting CredentialStoreEnabled of Service, clusterName={}, clusterId={}, serviceName={}, oldCredentialStoreEnabled={}, newCredentialStoreEnabled={}\",",
          "471:     }",
          "473:     ServiceDesiredStateEntity desiredStateEntity = getServiceDesiredStateEntity();",
          "",
          "[Removed Lines]",
          "470:         cluster.getClusterName(), cluster.getClusterId(), getName(), isCredentialStoreEnabled(), credentialStoreEnabled);",
          "",
          "[Added Lines]",
          "483:           cluster.getClusterName(), cluster.getClusterId(), getName(), isCredentialStoreEnabled(), credentialStoreEnabled);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "479:         StackId stackId = getDesiredStackId();",
          "480:         serviceCredentialStoreUpdateEvent =",
          "481:             new ServiceCredentialStoreUpdateEvent(getClusterId(), stackId.getStackName(),",
          "483:       }",
          "484:       desiredStateEntity.setCredentialStoreEnabled(credentialStoreEnabled);",
          "485:       desiredStateEntity = serviceDesiredStateDAO.merge(desiredStateEntity);",
          "",
          "[Removed Lines]",
          "482:                                                   stackId.getStackVersion(), getName());",
          "",
          "[Added Lines]",
          "495:                 stackId.getStackVersion(), getName());",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "490:       }",
          "491:     } else {",
          "492:       LOG.warn(\"Setting a member on an entity object that may have been \"",
          "494:     }",
          "495:   }",
          "497:   @Override",
          "498:   public void debugDump(StringBuilder sb) {",
          "499:     sb.append(\"Service={ serviceName=\").append(getName())",
          "505:     boolean first = true;",
          "506:     for (ServiceComponent sc : components.values()) {",
          "507:       if (!first) {",
          "",
          "[Removed Lines]",
          "493:               + \"previously deleted, serviceName = \" + getName());",
          "500:       .append(\", clusterName=\").append(cluster.getClusterName())",
          "501:       .append(\", clusterId=\").append(cluster.getClusterId())",
          "502:       .append(\", desiredStackVersion=\").append(getDesiredStackId())",
          "503:       .append(\", desiredState=\").append(getDesiredState())",
          "504:       .append(\", components=[ \");",
          "",
          "[Added Lines]",
          "506:           + \"previously deleted, serviceName = \" + getName());",
          "513:         .append(\", clusterName=\").append(cluster.getClusterName())",
          "514:         .append(\", clusterId=\").append(cluster.getClusterId())",
          "515:         .append(\", desiredStackVersion=\").append(getDesiredStackId())",
          "516:         .append(\", desiredState=\").append(getDesiredState())",
          "517:         .append(\", components=[ \");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "578:     LOG.info(\"Deleting all configuration associations for {} on cluster {}\", getName(), cluster.getClusterName());",
          "580:     List<ServiceConfigEntity> serviceConfigEntities =",
          "583:     for (ServiceConfigEntity serviceConfigEntity : serviceConfigEntities) {",
          "",
          "[Removed Lines]",
          "581:       serviceConfigDAO.findByService(cluster.getClusterId(), getName());",
          "",
          "[Added Lines]",
          "594:         serviceConfigDAO.findByService(cluster.getClusterId(), getName());",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "710:     return maintenanceState.get();",
          "711:   }",
          "713:   private ClusterServiceEntityPK getServiceEntityPK(ClusterServiceEntity serviceEntity) {",
          "714:     ClusterServiceEntityPK pk = new ClusterServiceEntityPK();",
          "715:     pk.setClusterId(serviceEntity.getClusterId());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "726:   @Override",
          "727:   public boolean isKerberosEnabled() {",
          "728:     if (kerberosEnabledTest != null) {",
          "729:       Map<String, Map<String, String>> existingConfigurations;",
          "731:       try {",
          "732:         existingConfigurations = configHelper.calculateExistingConfigurations(ambariManagementController, cluster);",
          "733:       } catch (AmbariException e) {",
          "734:         LOG.warn(\"Failed to get the existing configurations for the cluster.  Predicate calculations may not be correct due to missing data.\");",
          "735:         existingConfigurations = Collections.emptyMap();",
          "736:       }",
          "737:       return isKerberosEnabled(existingConfigurations);",
          "738:     }",
          "740:     return false;",
          "741:   }",
          "743:   @Override",
          "744:   public boolean isKerberosEnabled(Map<String, Map<String, String>> configurations) {",
          "745:     return kerberosEnabledTest != null && kerberosEnabledTest.evaluate(configurations);",
          "746:   }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "729:     return serviceDesiredStateDAO.findByPK(serviceDesiredStateEntityPK);",
          "730:   }",
          "734:   }",
          "741:     }",
          "742:   }",
          "746:   }",
          "748: }",
          "",
          "[Removed Lines]",
          "732:   public boolean isSsoIntegrationDesired() {",
          "733:     return ambariServerConfigurationHandler.getSSOEnabledServices().contains(serviceName);",
          "736:   public boolean isSsoIntegrationEnabled() {",
          "737:     try {",
          "738:       return ssoIntegrationSupported && ssoEnabledConfiguration != null && ssoEnabledConfiguration.evaluate(configHelper.calculateExistingConfigurations(ambariManagementController, cluster));",
          "739:     } catch (AmbariException e) {",
          "740:       throw new AmbariRuntimeException(\"Error while evaulating if SSO integration is enabled\", e);",
          "744:   private boolean isKerberosRequredForSsoIntegration() {",
          "745:     return ssoRequiresKerberos;",
          "",
          "[Added Lines]",
          "768:   private Predicate compileSsoEnabledPredicate(ServiceInfo sInfo) {",
          "769:     if (StringUtils.isNotBlank(sInfo.getSingleSignOnEnabledTest())) {",
          "770:       if (StringUtils.isNotBlank(sInfo.getSingleSignOnEnabledConfiguration())) {",
          "771:         LOG.warn(\"Both <ssoEnabledTest> and <enabledConfiguration> have been declared within <sso> for {}; using <ssoEnabledTest>\", serviceName);",
          "772:       }",
          "773:       return PredicateUtils.fromJSON(sInfo.getSingleSignOnEnabledTest());",
          "774:     } else if (StringUtils.isNotBlank(sInfo.getSingleSignOnEnabledConfiguration())) {",
          "775:       LOG.warn(\"Only <enabledConfiguration> have been declared  within <sso> for {}; converting its value to an equals predicate\", serviceName);",
          "776:       final String equalsPredicateJson = \"{\\\"equals\\\": [\\\"\" + sInfo.getSingleSignOnEnabledConfiguration() + \"\\\", \\\"true\\\"]}\";",
          "777:       return PredicateUtils.fromJSON(equalsPredicateJson);",
          "778:     }",
          "779:     return null;",
          "782:   private Predicate compileKerberosEnabledPredicate(ServiceInfo sInfo) {",
          "783:     if (StringUtils.isNotBlank(sInfo.getKerberosEnabledTest())) {",
          "784:       return PredicateUtils.fromJSON(sInfo.getKerberosEnabledTest());",
          "786:     return null;",
          "789:   private boolean isSsoIntegrationDesired() {",
          "790:     return ambariServerConfigurationHandler.getSSOEnabledServices().contains(serviceName);",
          "793:   private boolean isSsoIntegrationEnabled(Map<String, Map<String, String>> existingConfigurations) {",
          "794:     return ssoIntegrationSupported && ssoEnabledTest != null && ssoEnabledTest.evaluate(existingConfigurations);",
          "795:   }",
          "797:   private boolean isKerberosRequiredForSsoIntegration() {",
          "798:     return ssoRequiresKerberos;",
          "799:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java -> ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import javax.xml.bind.annotation.XmlTransient;",
          "43: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "44: import org.apache.ambari.server.stack.StackDirectory;",
          "45: import org.apache.ambari.server.stack.Validable;",
          "46: import org.apache.ambari.server.state.stack.MetricDefinition;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import org.apache.ambari.server.collections.PredicateUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:   @XmlElements(@XmlElement(name = \"credential-store\"))",
          "152:   private CredentialStoreInfo credentialStoreInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:   @XmlElement(name = \"kerberosEnabledTest\")",
          "161:   private String kerberosEnabledTest = null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "626:     this.credentialStoreInfo = credentialStoreInfo;",
          "627:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "644:   public String getKerberosEnabledTest() {",
          "645:     return kerberosEnabledTest;",
          "646:   }",
          "654:   public void setKerberosEnabledTest(String kerberosEnabledTest) {",
          "655:     this.kerberosEnabledTest = kerberosEnabledTest;",
          "656:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "680:     sb.append(serviceType);",
          "681:     sb.append(\"\\nversion:\");",
          "682:     sb.append(version);",
          "683:     sb.append(\"\\ncomment:\");",
          "684:     sb.append(comment);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:     sb.append(\"\\nKerberos enabled test:\");",
          "714:     sb.append(kerberosEnabledTest);",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java -> ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "790:     assertNull(singleSignOnInfo.getEnabledConfiguration());",
          "791:   }",
          "793:   private static Map<String, ServiceInfo> getServiceInfo(String xml) throws JAXBException {",
          "794:     InputStream configStream = new ByteArrayInputStream(xml.getBytes());",
          "795:     JAXBContext jaxbContext = JAXBContext.newInstance(ServiceMetainfoXml.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "796:   @Test",
          "797:   public void testKerberosEnabledTest() throws Exception {",
          "798:     Map<String, ServiceInfo> serviceInfoMap;",
          "799:     ServiceInfo service;",
          "801:     String kerberosEnabledTest =",
          "802:         \"{\\n\" +",
          "803:             \"  \\\"or\\\": [\\n\" +",
          "804:             \"    {\\n\" +",
          "805:             \"      \\\"equals\\\": [\\n\" +",
          "806:             \"        \\\"core-site/hadoop.security.authentication\\\",\\n\" +",
          "807:             \"        \\\"kerberos\\\"\\n\" +",
          "808:             \"      ]\\n\" +",
          "809:             \"    },\\n\" +",
          "810:             \"    {\\n\" +",
          "811:             \"      \\\"equals\\\": [\\n\" +",
          "812:             \"        \\\"hdfs-site/hadoop.security.authentication\\\",\\n\" +",
          "813:             \"        \\\"kerberos\\\"\\n\" +",
          "814:             \"      ]\\n\" +",
          "815:             \"    }\\n\" +",
          "816:             \"  ]\\n\" +",
          "817:             \"}\";",
          "819:     String serviceInfoXml = \"<metainfo>\\n\" +",
          "820:         \"  <schemaVersion>2.0</schemaVersion>\\n\" +",
          "821:         \"  <services>\\n\" +",
          "822:         \"    <service>\\n\" +",
          "823:         \"      <name>HDFS</name>\\n\" +",
          "824:         \"      <kerberosEnabledTest>\\n\" +",
          "825:         kerberosEnabledTest +",
          "826:         \"      </kerberosEnabledTest>\\n\" +",
          "827:         \"    </service>\\n\" +",
          "828:         \"  </services>\\n\" +",
          "829:         \"</metainfo>\\n\";",
          "830:     serviceInfoMap = getServiceInfo(serviceInfoXml);",
          "831:     service = serviceInfoMap.get(\"HDFS\");",
          "832:     assertEquals(kerberosEnabledTest, service.getKerberosEnabledTest().trim());",
          "837:     serviceInfoXml = \"<metainfo>\\n\" +",
          "838:         \"  <schemaVersion>2.0</schemaVersion>\\n\" +",
          "839:         \"  <services>\\n\" +",
          "840:         \"    <service>\\n\" +",
          "841:         \"      <name>HDFS</name>\\n\" +",
          "842:         \"    </service>\\n\" +",
          "843:         \"  </services>\\n\" +",
          "844:         \"</metainfo>\\n\";",
          "845:     serviceInfoMap = getServiceInfo(serviceInfoXml);",
          "846:     service = serviceInfoMap.get(\"HDFS\");",
          "847:     assertNull(service.getKerberosEnabledTest());",
          "848:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/state/ServiceTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/ServiceTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/state/ServiceTest.java -> ambari-server/src/test/java/org/apache/ambari/server/state/ServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import static org.junit.Assert.fail;",
          "24: import java.sql.SQLException;",
          "25: import java.util.HashMap;",
          "26: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291:     Assert.assertEquals(MaintenanceState.ON, entity.getServiceDesiredStateEntity().getMaintenanceState());",
          "292:   }",
          "294:   private void addHostToCluster(String hostname,",
          "295:                                 String clusterName) throws AmbariException {",
          "296:     clusters.addHost(hostname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316:   @Test",
          "317:   public void testServiceKerberosEnabledTest() throws Exception {",
          "318:     String serviceName = \"HDFS\";",
          "319:     Service s = serviceFactory.createNew(cluster, serviceName, repositoryVersion);",
          "320:     cluster.addService(s);",
          "322:     Service service = cluster.getService(serviceName);",
          "323:     Assert.assertNotNull(service);",
          "326:     Map<String, Map<String, String>> map = new HashMap<>();",
          "328:     Assert.assertFalse(service.isKerberosEnabled(null));",
          "330:     Assert.assertFalse(service.isKerberosEnabled(map));",
          "332:     map.put(\"core-site\", Collections.singletonMap(\"hadoop.security.authentication\", \"none\"));",
          "333:     map.put(\"hdfs-site\", Collections.singletonMap(\"hadoop.security.authentication\", \"none\"));",
          "334:     Assert.assertFalse(service.isKerberosEnabled(map));",
          "336:     map.put(\"core-site\", Collections.singletonMap(\"hadoop.security.authentication\", \"kerberos\"));",
          "337:     map.put(\"hdfs-site\", Collections.singletonMap(\"hadoop.security.authentication\", \"none\"));",
          "338:     Assert.assertTrue(service.isKerberosEnabled(map));",
          "340:     map.put(\"core-site\", Collections.singletonMap(\"hadoop.security.authentication\", \"none\"));",
          "341:     map.put(\"hdfs-site\", Collections.singletonMap(\"hadoop.security.authentication\", \"kerberos\"));",
          "342:     Assert.assertTrue(service.isKerberosEnabled(map));",
          "344:     map.put(\"core-site\", Collections.singletonMap(\"hadoop.security.authentication\", \"kerberos\"));",
          "345:     map.put(\"hdfs-site\", Collections.singletonMap(\"hadoop.security.authentication\", \"kerberos\"));",
          "346:     Assert.assertTrue(service.isKerberosEnabled(map));",
          "348:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}