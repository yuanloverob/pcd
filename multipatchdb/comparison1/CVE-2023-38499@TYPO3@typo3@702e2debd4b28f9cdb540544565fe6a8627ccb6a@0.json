{
  "cve_id": "CVE-2023-38499",
  "cve_desc": "TYPO3 is an open source PHP based web content management system. Starting in version 9.4.0 and prior to versions 9.5.42 ELTS, 10.4.39 ELTS, 11.5.30, and 12.4.4, in multi-site scenarios, enumerating the HTTP query parameters `id` and `L` allowed out-of-scope access to rendered content in the website frontend. For instance, this allowed visitors to access content of an internal site by adding handcrafted query parameters to the URL of a site that was publicly available. TYPO3 versions 9.5.42 ELTS, 10.4.39 ELTS, 11.5.30, 12.4.4 fix the problem.",
  "repo": "TYPO3/typo3",
  "patch_hash": "702e2debd4b28f9cdb540544565fe6a8627ccb6a",
  "patch_info": {
    "commit_hash": "702e2debd4b28f9cdb540544565fe6a8627ccb6a",
    "repo": "TYPO3/typo3",
    "commit_url": "https://github.com/TYPO3/typo3/commit/702e2debd4b28f9cdb540544565fe6a8627ccb6a",
    "files": [
      "typo3/sysext/core/Classes/Routing/SiteMatcher.php",
      "typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
      "typo3/sysext/core/Configuration/DefaultConfiguration.php",
      "typo3/sysext/core/Configuration/DefaultConfigurationDescription.yaml",
      "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
      "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
      "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
      "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
      "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php"
    ],
    "message": "[SECURITY] Avoid out-of-scope page access for non-matching site\n\nThis change disallows calling an URI with page-id query parameters\nthat are not part of a particular site - for instance the following\nURL `https://example.org/?id=3000&L=0` has two aspects:\n\n* the site `example.org` has the root page-id 1000\n* the site `internal.example.org` has the root page-id 3000\n\nThe example above allows to call a page-id for an internal site,\nby using a valid and public entry point.\n\nThe new feature flag\n`security.frontend.allowInsecureSiteResolutionByQueryParameters`\nallows to control this behavior for backward compatibility reasons.\nPer default `allowInsecureSiteResolutionByQueryParameters` is disabled.\n\nResolves: #100889\nReleases: main, 12.4, 11.5\nChange-Id: I88d565b5d9bea556b4f754c3069d56124cea98bd\nSecurity-Bulletin: TYPO3-CORE-SA-2023-003\nSecurity-References: CVE-2023-38499\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/80159\nTested-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>",
    "before_after_code_files": [
      "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php",
      "typo3/sysext/core/Classes/Routing/SiteRouteResult.php||typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
      "typo3/sysext/core/Configuration/DefaultConfiguration.php||typo3/sysext/core/Configuration/DefaultConfiguration.php",
      "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
      "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
      "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
      "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
      "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php||typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php"
    ]
  },
  "patch_diff": {
    "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php": [
      "File: typo3/sysext/core/Classes/Routing/SiteMatcher.php -> typo3/sysext/core/Classes/Routing/SiteMatcher.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: namespace TYPO3\\CMS\\Core\\Routing;",
      "20: use Psr\\Http\\Message\\ServerRequestInterface;",
      "21: use Symfony\\Component\\Routing\\Exception\\NoConfigurationException;",
      "22: use Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException;",
      "23: use TYPO3\\CMS\\Core\\Cache\\CacheManager;",
      "24: use TYPO3\\CMS\\Core\\Exception\\SiteNotFoundException;",
      "25: use TYPO3\\CMS\\Core\\Http\\NormalizedParams;",
      "26: use TYPO3\\CMS\\Core\\SingletonInterface;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: use Psr\\Http\\Message\\UriInterface;",
      "25: use TYPO3\\CMS\\Core\\Configuration\\Features;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48: class SiteMatcher implements SingletonInterface",
      "49: {",
      "50:     public function __construct(",
      "51:         protected readonly SiteFinder $finder,",
      "52:         protected readonly RequestContextFactory $requestContextFactory",
      "53:     ) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53:         protected readonly Features $features,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "80:     public function matchRequest(ServerRequestInterface $request): RouteResultInterface",
      "81:     {",
      "107:         }",
      "121:         }",
      "130:             try {",
      "147:             }",
      "148:         }",
      "151:     }",
      "",
      "[Removed Lines]",
      "82:         $site = new NullSite();",
      "83:         $language = null;",
      "84:         $defaultLanguage = null;",
      "86:         $pageId = $request->getQueryParams()['id'] ?? $request->getParsedBody()['id'] ?? 0;",
      "89:         if ($pageId > 0) {",
      "91:             try {",
      "92:                 $site = $this->finder->getSiteByPageId((int)$pageId);",
      "94:                 $languageId = $request->getQueryParams()['L'] ?? $request->getParsedBody()['L'] ?? null;",
      "95:                 if ($languageId !== null) {",
      "96:                     $language = $site->getLanguageById((int)$languageId);",
      "97:                 } else {",
      "99:                     $defaultLanguage = $site->getDefaultLanguage();",
      "100:                 }",
      "101:             } catch (SiteNotFoundException $e) {",
      "103:             } catch (\\InvalidArgumentException $e) {",
      "106:             }",
      "109:         $uri = $request->getUri();",
      "110:         if (!empty($uri->getPath())) {",
      "111:             $normalizedParams = $request->getAttribute('normalizedParams');",
      "112:             if ($normalizedParams instanceof NormalizedParams) {",
      "113:                 $urlPath = ltrim($uri->getPath(), '/');",
      "114:                 $scriptName = ltrim($normalizedParams->getScriptName(), '/');",
      "115:                 $scriptPath = ltrim($normalizedParams->getSitePath(), '/');",
      "116:                 if ($scriptName !== '' && str_starts_with($urlPath, $scriptName)) {",
      "117:                     $urlPath = '/' . $scriptPath . substr($urlPath, mb_strlen($scriptName));",
      "118:                     $uri = $uri->withPath($urlPath);",
      "119:                 }",
      "120:             }",
      "126:         if (!($language instanceof SiteLanguage)) {",
      "127:             $collection = $this->getRouteCollectionForAllSites();",
      "128:             $requestContext = $this->requestContextFactory->fromUri($uri, $request->getMethod());",
      "129:             $matcher = new BestUrlMatcher($collection, $requestContext);",
      "131:                 $result = $matcher->match($uri->getPath());",
      "132:                 return new SiteRouteResult(",
      "133:                     $uri,",
      "134:                     $result['site'],",
      "138:                     $result['language'] ?? $defaultLanguage,",
      "139:                     $result['tail']",
      "140:                 );",
      "141:             } catch (NoConfigurationException | ResourceNotFoundException $e) {",
      "146:                 $site = new NullSite();",
      "150:         return new SiteRouteResult($uri, $site, $language);",
      "",
      "[Added Lines]",
      "86:         $uri = $this->canonicalizeUri($request->getUri(), $request);",
      "87:         $pageId = $this->resolvePageIdQueryParam($request);",
      "88:         $languageId = $this->resolveLanguageIdQueryParam($request);",
      "90:         $routeResult = $this->matchSiteByUri($uri, $request);",
      "94:         if (",
      "95:             $this->features->isFeatureEnabled('security.frontend.allowInsecureSiteResolutionByQueryParameters') &&",
      "96:             $pageId !== null && $languageId !== null",
      "97:         ) {",
      "98:             return $this->matchSiteByQueryParams($pageId, $languageId, $routeResult, $uri);",
      "105:         if ($pageId !== null && $routeResult->getLanguage() === null) {",
      "106:             $routeResult = $routeResult->withLanguage($routeResult->getSite()->getDefaultLanguage());",
      "111:         if ($languageId !== null && $pageId !== null) {",
      "114:                 $routeResult = $routeResult->withLanguage($routeResult->getSite()->getLanguageById($languageId));",
      "115:             } catch (\\InvalidArgumentException) {",
      "120:         return $routeResult;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "206:         }",
      "207:         return $collection;",
      "208:     }",
      "209: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "183:     protected function resolvePageIdQueryParam(ServerRequestInterface $request): ?int",
      "184:     {",
      "185:         $pageId = $request->getQueryParams()['id'] ?? $request->getParsedBody()['id'] ?? null;",
      "186:         if ($pageId === null) {",
      "187:             return null;",
      "188:         }",
      "189:         return (int)$pageId <= 0 ? null : (int)$pageId;",
      "190:     }",
      "195:     protected function resolveLanguageIdQueryParam(ServerRequestInterface $request): ?int",
      "196:     {",
      "197:         $languageId = $request->getQueryParams()['L'] ?? $request->getParsedBody()['L'] ?? null;",
      "198:         if ($languageId === null) {",
      "199:             return null;",
      "200:         }",
      "201:         return (int)$languageId < 0 ? null : (int)$languageId;",
      "202:     }",
      "207:     protected function canonicalizeUri(UriInterface $uri, ServerRequestInterface $request): UriInterface",
      "208:     {",
      "209:         if ($uri->getPath() === '') {",
      "210:             return $uri;",
      "211:         }",
      "213:         $normalizedParams = $request->getAttribute('normalizedParams');",
      "214:         if (!$normalizedParams instanceof NormalizedParams) {",
      "215:             return $uri;",
      "216:         }",
      "218:         $urlPath = ltrim($uri->getPath(), '/');",
      "219:         $scriptName = ltrim($normalizedParams->getScriptName(), '/');",
      "220:         $scriptPath = ltrim($normalizedParams->getSitePath(), '/');",
      "221:         if ($scriptName !== '' && str_starts_with($urlPath, $scriptName)) {",
      "222:             $urlPath = '/' . $scriptPath . substr($urlPath, mb_strlen($scriptName));",
      "223:             $uri = $uri->withPath($urlPath);",
      "224:         }",
      "226:         return $uri;",
      "227:     }",
      "229:     protected function matchSiteByUri(UriInterface $uri, ServerRequestInterface $request): SiteRouteResult",
      "230:     {",
      "231:         $collection = $this->getRouteCollectionForAllSites();",
      "232:         $requestContext = $this->requestContextFactory->fromUri($uri, $request->getMethod());",
      "233:         $matcher = new BestUrlMatcher($collection, $requestContext);",
      "234:         try {",
      "236:             $match = $matcher->match($uri->getPath());",
      "237:             return new SiteRouteResult(",
      "238:                 $uri,",
      "239:                 $match['site'],",
      "240:                 $match['language'],",
      "241:                 $match['tail']",
      "242:             );",
      "243:         } catch (NoConfigurationException | ResourceNotFoundException) {",
      "244:             return new SiteRouteResult($uri, new NullSite(), null, '');",
      "245:         }",
      "246:     }",
      "248:     protected function matchSiteByQueryParams(",
      "249:         int $pageId,",
      "250:         int $languageId,",
      "251:         SiteRouteResult $fallback,",
      "252:         UriInterface $uri,",
      "253:     ): SiteRouteResult {",
      "254:         try {",
      "255:             $site = $this->finder->getSiteByPageId($pageId);",
      "256:         } catch (SiteNotFoundException) {",
      "257:             return $fallback;",
      "258:         }",
      "260:         try {",
      "262:             $language = $site->getLanguageById($languageId);",
      "263:         } catch (\\InvalidArgumentException) {",
      "264:             return $fallback;",
      "265:         }",
      "267:         return new SiteRouteResult($uri, $site, $language);",
      "268:     }",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Classes/Routing/SiteRouteResult.php||typo3/sysext/core/Classes/Routing/SiteRouteResult.php": [
      "File: typo3/sysext/core/Classes/Routing/SiteRouteResult.php -> typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:         return in_array($offset, $this->validProperties, true) || isset($this->data[$offset]);",
      "96:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "101:     public function withLanguage(SiteLanguage $language): self",
      "102:     {",
      "103:         $clone = clone $this;",
      "104:         $clone->language = $language;",
      "106:         return $clone;",
      "107:     }",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Configuration/DefaultConfiguration.php||typo3/sysext/core/Configuration/DefaultConfiguration.php": [
      "File: typo3/sysext/core/Configuration/DefaultConfiguration.php -> typo3/sysext/core/Configuration/DefaultConfiguration.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:             'security.backend.enforceReferrer' => true,",
      "77:             'security.backend.enforceContentSecurityPolicy' => false,",
      "78:             'security.frontend.enforceContentSecurityPolicy' => false,",
      "79:             'security.usePasswordPolicyForFrontendUsers' => false,",
      "80:         ],",
      "81:         'createGroup' => '',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "79:             'security.frontend.allowInsecureSiteResolutionByQueryParameters' => false,",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php": [
      "File: typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php -> typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: namespace TYPO3\\CMS\\Core\\Tests\\Unit\\Routing;",
      "20: use TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration;",
      "21: use TYPO3\\CMS\\Core\\Http\\ServerRequest;",
      "22: use TYPO3\\CMS\\Core\\Routing\\BackendEntryPointResolver;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: use PHPUnit\\Framework\\MockObject\\MockObject;",
      "21: use TYPO3\\CMS\\Core\\Configuration\\Features;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:                 ],",
      "75:             ],",
      "76:         ]);",
      "77:         $finderMock = $this->createSiteFinder($site, $secondSite);",
      "78:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
      "81:         $request = new ServerRequest('http://9-5.typo3.test/da/my-page/');",
      "",
      "[Removed Lines]",
      "79:         $subject = new SiteMatcher($finderMock, $requestContextFactory);",
      "",
      "[Added Lines]",
      "79:         $featuresMock = $this->createFeaturesMock();",
      "82:         $subject = new SiteMatcher($featuresMock, $finderMock, $requestContextFactory);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:                 ],",
      "172:             ],",
      "173:         ]);",
      "174:         $finderMock = $this->createSiteFinder($site, $secondSite);",
      "175:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
      "178:         $request = new ServerRequest('https://www.example.com/de');",
      "",
      "[Removed Lines]",
      "176:         $subject = new SiteMatcher($finderMock, $requestContextFactory);",
      "",
      "[Added Lines]",
      "177:         $featuresMock = $this->createFeaturesMock();",
      "180:         $subject = new SiteMatcher($featuresMock, $finderMock, $requestContextFactory);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "253:             ],",
      "254:         ]);",
      "256:         $finderMock = $this->createSiteFinder($mainSite, $dkSite, $frSite);",
      "257:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
      "260:         $request = new ServerRequest($requestUri);",
      "",
      "[Removed Lines]",
      "258:         $subject = new SiteMatcher($finderMock, $requestContextFactory);",
      "",
      "[Added Lines]",
      "260:         $featuresMock = $this->createFeaturesMock();",
      "263:         $subject = new SiteMatcher($featuresMock, $finderMock, $requestContextFactory);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "265:         self::assertSame($expectedLocale, (string)$result->getLanguage()->getLocale());",
      "266:     }",
      "268:     private function createSiteFinder(Site ...$sites): SiteFinder",
      "269:     {",
      "270:         $siteConfiguration = new class ($sites) extends SiteConfiguration {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "273:     private function createFeaturesMock(): MockObject&Features",
      "274:     {",
      "275:         $mock = $this->getMockBuilder(Features::class)",
      "276:             ->onlyMethods(['isFeatureEnabled'])",
      "277:             ->getMock();",
      "278:         $mock->expects(self::any())",
      "279:             ->method('isFeatureEnabled')",
      "280:             ->with('security.frontend.allowInsecureSiteResolutionByQueryParameters')",
      "281:             ->willReturn(false);",
      "282:         return $mock;",
      "283:     }",
      "",
      "---------------"
    ],
    "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php": [
      "File: typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php -> typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: declare(strict_types=1);",
      "18: namespace TYPO3\\CMS\\Frontend\\Tests\\Functional\\SiteHandling;",
      "20: use TYPO3\\CMS\\Core\\Core\\Bootstrap;",
      "21: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerFactory;",
      "22: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerWriter;",
      "23: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\Frontend\\InternalRequest;",
      "25: final class SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest extends AbstractTestCase",
      "26: {",
      "27:     protected array $configurationToUseInTestInstance = [",
      "28:         'SYS' => [",
      "29:             'devIPmask' => '123.123.123.123',",
      "30:             'encryptionKey' => '4408d27a916d51e624b69af3554f516dbab61037a9f7b9fd6f81b4d3bedeccb6',",
      "31:             'features' => [",
      "32:                 'security.frontend.allowInsecureSiteResolutionByQueryParameters' => false,",
      "33:             ],",
      "34:         ],",
      "35:         'FE' => [",
      "36:             'cacheHash' => [",
      "37:                 'requireCacheHashPresenceParameters' => ['value', 'testing[value]', 'tx_testing_link[value]'],",
      "38:                 'excludedParameters' => ['L', 'tx_testing_link[excludedValue]'],",
      "39:                 'enforceValidation' => true,",
      "40:             ],",
      "41:             'debug' => false,",
      "42:         ],",
      "43:     ];",
      "45:     protected function setUp(): void",
      "46:     {",
      "47:         parent::setUp();",
      "48:         $this->withDatabaseSnapshot(function () {",
      "49:             $this->importCSVDataSet(__DIR__ . '/../Fixtures/be_users.csv');",
      "50:             $backendUser = $this->setUpBackendUser(1);",
      "51:             Bootstrap::initializeLanguageObject();",
      "52:             $scenarioFile = __DIR__ . '/Fixtures/SlugScenario.yaml';",
      "53:             $factory = DataHandlerFactory::fromYamlFile($scenarioFile);",
      "54:             $writer = DataHandlerWriter::withBackendUser($backendUser);",
      "55:             $writer->invokeFactory($factory);",
      "56:             static::failIfArrayIsNotEmpty($writer->getErrors());",
      "57:             $this->setUpFrontendRootPage(",
      "58:                 1000,",
      "59:                 [",
      "60:                     'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',",
      "61:                     'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',",
      "62:                 ],",
      "63:                 [",
      "64:                     'title' => 'ACME Root',",
      "65:                 ]",
      "66:             );",
      "67:             $this->setUpFrontendRootPage(",
      "68:                 3000,",
      "69:                 [",
      "70:                     'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',",
      "71:                     'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',",
      "72:                 ],",
      "73:                 [",
      "74:                     'title' => 'ACME Archive',",
      "75:                 ]",
      "76:             );",
      "77:         });",
      "78:     }",
      "80:     public static function siteWithPageIdRequestsAreCorrectlyHandledDataProvider(): \\Generator",
      "81:     {",
      "82:         yield 'valid same-site request is redirected' => ['https://website.local/?id=1000&L=0', 307];",
      "83:         yield 'valid same-site request is processed' => ['https://website.local/?id=1100&L=0', 200];",
      "84:         yield 'invalid off-site request with unknown domain is denied' => ['https://otherdomain.website.local/?id=3000&L=0', 404];",
      "85:         yield 'invalid off-site request with unknown domain and without L parameter is denied' => ['https://otherdomain.website.local/?id=3000', 404];",
      "86:         yield 'invalid cross-site request without L parameter is denied' => ['https://website.local/?id=3000', 404];",
      "87:         yield 'invalid cross-site request *not* denied' => ['https://website.local/?id=3000&L=0', 404];",
      "88:     }",
      "94:     public function siteWithPageIdRequestsAreCorrectlyHandled(string $uri, int $expectation): void",
      "95:     {",
      "96:         $this->writeSiteConfiguration(",
      "97:             'website-local',",
      "98:             $this->buildSiteConfiguration(1000, 'https://website.local/'),",
      "99:             [",
      "100:                 $this->buildDefaultLanguageConfiguration('EN', '/'),",
      "101:             ],",
      "102:             $this->buildErrorHandlingConfiguration('Fluid', [404])",
      "103:         );",
      "104:         $this->writeSiteConfiguration(",
      "105:             'archive-acme-com',",
      "106:             $this->buildSiteConfiguration(3000, 'https://archive.acme.com/'),",
      "107:             [",
      "108:                 $this->buildDefaultLanguageConfiguration('EN', '/'),",
      "109:             ],",
      "110:             $this->buildErrorHandlingConfiguration('Fluid', [404])",
      "111:         );",
      "113:         $response = $this->executeFrontendSubRequest(new InternalRequest($uri));",
      "114:         self::assertSame($expectation, $response->getStatusCode());",
      "115:     }",
      "116: }",
      "",
      "---------------"
    ],
    "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php": [
      "File: typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php -> typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: declare(strict_types=1);",
      "18: namespace TYPO3\\CMS\\Frontend\\Tests\\Functional\\SiteHandling;",
      "20: use TYPO3\\CMS\\Core\\Core\\Bootstrap;",
      "21: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerFactory;",
      "22: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerWriter;",
      "23: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\Frontend\\InternalRequest;",
      "25: final class SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest extends AbstractTestCase",
      "26: {",
      "27:     protected array $configurationToUseInTestInstance = [",
      "28:         'SYS' => [",
      "29:             'devIPmask' => '123.123.123.123',",
      "30:             'encryptionKey' => '4408d27a916d51e624b69af3554f516dbab61037a9f7b9fd6f81b4d3bedeccb6',",
      "31:             'features' => [",
      "32:                 'security.frontend.allowInsecureSiteResolutionByQueryParameters' => true,",
      "33:             ],",
      "34:         ],",
      "35:         'FE' => [",
      "36:             'cacheHash' => [",
      "37:                 'requireCacheHashPresenceParameters' => ['value', 'testing[value]', 'tx_testing_link[value]'],",
      "38:                 'excludedParameters' => ['L', 'tx_testing_link[excludedValue]'],",
      "39:                 'enforceValidation' => true,",
      "40:             ],",
      "41:             'debug' => false,",
      "42:         ],",
      "43:     ];",
      "45:     protected function setUp(): void",
      "46:     {",
      "47:         parent::setUp();",
      "48:         $this->withDatabaseSnapshot(function () {",
      "49:             $this->importCSVDataSet(__DIR__ . '/../Fixtures/be_users.csv');",
      "50:             $backendUser = $this->setUpBackendUser(1);",
      "51:             Bootstrap::initializeLanguageObject();",
      "52:             $scenarioFile = __DIR__ . '/Fixtures/SlugScenario.yaml';",
      "53:             $factory = DataHandlerFactory::fromYamlFile($scenarioFile);",
      "54:             $writer = DataHandlerWriter::withBackendUser($backendUser);",
      "55:             $writer->invokeFactory($factory);",
      "56:             static::failIfArrayIsNotEmpty($writer->getErrors());",
      "57:             $this->setUpFrontendRootPage(",
      "58:                 1000,",
      "59:                 [",
      "60:                     'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',",
      "61:                     'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',",
      "62:                 ],",
      "63:                 [",
      "64:                     'title' => 'ACME Root',",
      "65:                 ]",
      "66:             );",
      "67:             $this->setUpFrontendRootPage(",
      "68:                 3000,",
      "69:                 [",
      "70:                     'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',",
      "71:                     'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',",
      "72:                 ],",
      "73:                 [",
      "74:                     'title' => 'ACME Archive',",
      "75:                 ]",
      "76:             );",
      "77:         });",
      "78:     }",
      "80:     public static function siteWithPageIdRequestsAreCorrectlyHandledDataProvider(): \\Generator",
      "81:     {",
      "82:         yield 'valid same-site request is redirected' => ['https://website.local/?id=1000&L=0', 307];",
      "83:         yield 'valid same-site request is processed' => ['https://website.local/?id=1100&L=0', 200];",
      "85:         yield 'invalid off-site request with unknown domain is denied' => ['https://otherdomain.website.local/?id=3000&L=0', 200];",
      "86:         yield 'invalid off-site request with unknown domain and without L parameter is denied' => ['https://otherdomain.website.local/?id=3000', 404];",
      "87:         yield 'invalid cross-site request without L parameter is denied' => ['https://website.local/?id=3000', 404];",
      "89:         yield 'invalid cross-site request *not* denied' => ['https://website.local/?id=3000&L=0', 200];",
      "90:     }",
      "96:     public function siteWithPageIdRequestsAreCorrectlyHandled(string $uri, int $expectation): void",
      "97:     {",
      "98:         $this->writeSiteConfiguration(",
      "99:             'website-local',",
      "100:             $this->buildSiteConfiguration(1000, 'https://website.local/'),",
      "101:             [",
      "102:                 $this->buildDefaultLanguageConfiguration('EN', '/'),",
      "103:             ],",
      "104:             $this->buildErrorHandlingConfiguration('Fluid', [404])",
      "105:         );",
      "106:         $this->writeSiteConfiguration(",
      "107:             'archive-acme-com',",
      "108:             $this->buildSiteConfiguration(3000, 'https://archive.acme.com/'),",
      "109:             [",
      "110:                 $this->buildDefaultLanguageConfiguration('EN', '/'),",
      "111:             ],",
      "112:             $this->buildErrorHandlingConfiguration('Fluid', [404])",
      "113:         );",
      "115:         $response = $this->executeFrontendSubRequest(new InternalRequest($uri));",
      "116:         self::assertSame($expectation, $response->getStatusCode());",
      "117:     }",
      "118: }",
      "",
      "---------------"
    ],
    "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php": [
      "File: typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php -> typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "273:     {",
      "274:         yield 'valid same-site request is redirected' => ['https://website.local/?id=1000&L=0', 307];",
      "275:         yield 'valid same-site request is processed' => ['https://website.local/?id=1100&L=0', 200];",
      "276:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "276:         yield 'invalid off-site request with unknown domain is denied' => ['https://otherdomain.website.local/?id=3000&L=0', 404];",
      "277:         yield 'invalid off-site request with unknown domain and without L parameter is denied' => ['https://otherdomain.website.local/?id=3000', 404];",
      "",
      "---------------"
    ],
    "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php||typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php": [
      "File: typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php -> typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: namespace TYPO3\\CMS\\Frontend\\Tests\\Unit\\Middleware;",
      "20: use Psr\\Http\\Message\\ResponseInterface;",
      "21: use Psr\\Http\\Message\\ServerRequestInterface;",
      "22: use Psr\\Http\\Server\\RequestHandlerInterface;",
      "23: use TYPO3\\CMS\\Core\\Cache\\CacheManager;",
      "24: use TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration;",
      "25: use TYPO3\\CMS\\Core\\Http\\JsonResponse;",
      "26: use TYPO3\\CMS\\Core\\Http\\NullResponse;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: use PHPUnit\\Framework\\MockObject\\MockObject;",
      "25: use TYPO3\\CMS\\Core\\Configuration\\Features;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "107:                 ],",
      "108:             ],",
      "109:         ]));",
      "110:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
      "113:         $request = new ServerRequest($incomingUrl, 'GET');",
      "114:         $response = $subject->process($request, $this->siteFoundRequestHandler);",
      "",
      "[Removed Lines]",
      "111:         $subject = new SiteResolver(new SiteMatcher($siteFinder, $requestContextFactory));",
      "",
      "[Added Lines]",
      "112:         $featuresMock = $this->createFeaturesMock();",
      "114:         $subject = new SiteResolver(new SiteMatcher($featuresMock, $siteFinder, $requestContextFactory));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "161:             ]),",
      "162:         );",
      "164:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
      "167:         $request = new ServerRequest($incomingUrl, 'GET');",
      "168:         $response = $subject->process($request, $this->siteFoundRequestHandler);",
      "",
      "[Removed Lines]",
      "165:         $subject = new SiteResolver(new SiteMatcher($siteFinder, $requestContextFactory));",
      "",
      "[Added Lines]",
      "167:         $featuresMock = $this->createFeaturesMock();",
      "169:         $subject = new SiteResolver(new SiteMatcher($featuresMock, $siteFinder, $requestContextFactory));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "252:             ]),",
      "253:         );",
      "255:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
      "258:         $request = new ServerRequest($incomingUrl, 'GET');",
      "259:         $response = $subject->process($request, $this->siteFoundRequestHandler);",
      "",
      "[Removed Lines]",
      "256:         $subject = new SiteResolver(new SiteMatcher($siteFinder, $requestContextFactory));",
      "",
      "[Added Lines]",
      "259:         $featuresMock = $this->createFeaturesMock();",
      "261:         $subject = new SiteResolver(new SiteMatcher($featuresMock, $siteFinder, $requestContextFactory));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "363:             ]),",
      "364:         );",
      "366:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
      "369:         $request = new ServerRequest($incomingUrl, 'GET');",
      "370:         $response = $subject->process($request, $this->siteFoundRequestHandler);",
      "",
      "[Removed Lines]",
      "367:         $subject = new SiteResolver(new SiteMatcher($siteFinder, $requestContextFactory));",
      "",
      "[Added Lines]",
      "371:         $featuresMock = $this->createFeaturesMock();",
      "373:         $subject = new SiteResolver(new SiteMatcher($featuresMock, $siteFinder, $requestContextFactory));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "381:         }",
      "382:     }",
      "384:     private function createSiteFinder(Site ...$sites): SiteFinder",
      "385:     {",
      "386:         $siteConfiguration = new class ($sites) extends SiteConfiguration {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390:     private function createFeaturesMock(): MockObject&Features",
      "391:     {",
      "392:         $mock = $this->getMockBuilder(Features::class)",
      "393:             ->onlyMethods(['isFeatureEnabled'])",
      "394:             ->getMock();",
      "395:         $mock->expects(self::any())",
      "396:             ->method('isFeatureEnabled')",
      "397:             ->with('security.frontend.allowInsecureSiteResolutionByQueryParameters')",
      "398:             ->willReturn(false);",
      "399:         return $mock;",
      "400:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0dd2f76d6ad8d30bf9d6f28f660fb9b2a9f8613d",
      "candidate_info": {
        "commit_hash": "0dd2f76d6ad8d30bf9d6f28f660fb9b2a9f8613d",
        "repo": "TYPO3/typo3",
        "commit_url": "https://github.com/TYPO3/typo3/commit/0dd2f76d6ad8d30bf9d6f28f660fb9b2a9f8613d",
        "files": [
          "typo3/sysext/backend/Classes/Middleware/SiteResolver.php",
          "typo3/sysext/backend/Tests/Functional/Middleware/SiteResolverTest.php",
          "typo3/sysext/backend/Tests/Unit/Middleware/SiteResolverTest.php",
          "typo3/sysext/core/Classes/Routing/SiteMatcher.php"
        ],
        "message": "[TASK] Have site attribute in filelist module\n\nWhen the Site construct has been added to TYPO3\nin v9, the setup together with PseudoSites was\npretty complex. This has been simplified meanwhile\nand the resolved site is usually added to the\nbackend request as attribute.\n\nExcept in cases where GET / POST param \"id\" is\nmisused. This is the case in filelist module.\n\nThe patch changes the backend related SiteResolver\nmiddleware to *always* add a site attribute to\nthe request, backend controllers can now rely\non it to be set, even if its just a NullSite.\n\nResolves: #99121\nRelated: #86153\nReleases: main\nChange-Id: I63ea9ed1b5bca5db298f7a3bf000fcb4f777f627\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/76665\nTested-by: core-ci <typo3@b13.com>\nTested-by: Stefan B\u00fcrk <stefan@buerk.tech>\nReviewed-by: Stefan B\u00fcrk <stefan@buerk.tech>\nTested-by: Benni Mack <benni@typo3.org>\nReviewed-by: Benni Mack <benni@typo3.org>\nTested-by: Christian Kuhn <lolli@schwarzbu.ch>\nReviewed-by: Christian Kuhn <lolli@schwarzbu.ch>",
        "before_after_code_files": [
          "typo3/sysext/backend/Classes/Middleware/SiteResolver.php||typo3/sysext/backend/Classes/Middleware/SiteResolver.php",
          "typo3/sysext/backend/Tests/Unit/Middleware/SiteResolverTest.php||typo3/sysext/backend/Tests/Functional/Middleware/SiteResolverTest.php",
          "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php"
          ],
          "candidate": [
            "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php"
          ]
        }
      },
      "candidate_diff": {
        "typo3/sysext/backend/Classes/Middleware/SiteResolver.php||typo3/sysext/backend/Classes/Middleware/SiteResolver.php": [
          "File: typo3/sysext/backend/Classes/Middleware/SiteResolver.php -> typo3/sysext/backend/Classes/Middleware/SiteResolver.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: class SiteResolver implements MiddlewareInterface",
          "37: {",
          "46:     }",
          "56:     public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface",
          "57:     {",
          "58:         $pageId = ($request->getQueryParams()['id'] ?? $request->getParsedBody()['id'] ?? 0);",
          "68:         }",
          "69:         return $handler->handle($request);",
          "70:     }",
          "71: }",
          "",
          "[Removed Lines]",
          "41:     protected $siteMatcher;",
          "43:     public function __construct(SiteMatcher $siteMatcher)",
          "44:     {",
          "45:         $this->siteMatcher = $siteMatcher;",
          "60:         if (MathUtility::canBeInterpretedAsInteger($pageId)) {",
          "61:             $pageId = (int)$pageId;",
          "62:             $rootLine = null;",
          "63:             if ($pageId > 0) {",
          "64:                 $rootLine = BackendUtility::BEgetRootLine($pageId);",
          "65:             }",
          "66:             $site = $this->siteMatcher->matchByPageId($pageId, $rootLine);",
          "67:             $request = $request->withAttribute('site', $site);",
          "",
          "[Added Lines]",
          "38:     public function __construct(",
          "39:         private readonly SiteMatcher $siteMatcher",
          "40:     ) {",
          "50:         if (!MathUtility::canBeInterpretedAsInteger($pageId)) {",
          "56:             $pageId = 0;",
          "57:         }",
          "58:         $pageId = (int)$pageId;",
          "59:         $rootLine = null;",
          "60:         if ($pageId > 0) {",
          "61:             $rootLine = BackendUtility::BEgetRootLine($pageId);",
          "63:         $site = $this->siteMatcher->matchByPageId($pageId, $rootLine);",
          "64:         $request = $request->withAttribute('site', $site);",
          "",
          "---------------"
        ],
        "typo3/sysext/backend/Tests/Unit/Middleware/SiteResolverTest.php||typo3/sysext/backend/Tests/Functional/Middleware/SiteResolverTest.php": [
          "File: typo3/sysext/backend/Tests/Unit/Middleware/SiteResolverTest.php -> typo3/sysext/backend/Tests/Functional/Middleware/SiteResolverTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use Psr\\Http\\Message\\ResponseInterface;",
          "21: use Psr\\Http\\Message\\ServerRequestInterface;",
          "",
          "[Removed Lines]",
          "18: namespace TYPO3\\CMS\\Backend\\Tests\\Unit\\Middleware;",
          "",
          "[Added Lines]",
          "18: namespace TYPO3\\CMS\\Backend\\Tests\\Functional\\Middleware;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: use TYPO3\\CMS\\Backend\\Middleware\\SiteResolver;",
          "24: use TYPO3\\CMS\\Core\\Http\\JsonResponse;",
          "25: use TYPO3\\CMS\\Core\\Http\\ServerRequest;",
          "30: {",
          "35:     {",
          "36:         $incomingUrl = 'http://localhost:8080/typo3/module/file/FilelistList?token=d7d864db2b26c1d0f0537718b16890f336f4af2b&id=9831:/styleguide/';",
          "41:         $incomingRequest = new ServerRequest($incomingUrl, 'GET');",
          "42:         $incomingRequest = $incomingRequest->withQueryParams(['id' => '9831:/styleguide/']);",
          "43:         $requestHandler = new class () implements RequestHandlerInterface {",
          "45:             public function handle(ServerRequestInterface $request): ResponseInterface",
          "46:             {",
          "52:             }",
          "53:         };",
          "57:     }",
          "58: }",
          "",
          "[Removed Lines]",
          "26: use TYPO3\\CMS\\Core\\Routing\\SiteMatcher;",
          "27: use TYPO3\\TestingFramework\\Core\\Unit\\UnitTestCase;",
          "29: class SiteResolverTest extends UnitTestCase",
          "34:     public function requestIsNotModifiedIfPageIdParameterIsNoInteger(): void",
          "38:         $siteMatcherMock = $this->createMock(SiteMatcher::class);",
          "39:         $subject = new SiteResolver($siteMatcherMock);",
          "44:             public ServerRequestInterface $incomingRequest;",
          "47:                 return new JsonResponse([], $request === $this->incomingRequest ? 200 : 500);",
          "48:             }",
          "49:             public function setIncomingRequest(ServerRequestInterface $incomingRequest): void",
          "50:             {",
          "51:                 $this->incomingRequest = $incomingRequest;",
          "54:         $requestHandler->setIncomingRequest($incomingRequest);",
          "55:         $response = $subject->process($incomingRequest, $requestHandler);",
          "56:         self::assertEquals(200, $response->getStatusCode());",
          "",
          "[Added Lines]",
          "26: use TYPO3\\CMS\\Core\\Site\\Entity\\NullSite;",
          "27: use TYPO3\\TestingFramework\\Core\\Functional\\FunctionalTestCase;",
          "29: class SiteResolverTest extends FunctionalTestCase",
          "34:     public function requestHasNullSiteAttributeIfIdParameterIsNoInteger(): void",
          "36:         $this->expectException(\\RuntimeException::class);",
          "37:         $this->expectExceptionCode(1668696350);",
          "39:         $subject = $this->get(SiteResolver::class);",
          "45:                 if ($request->getAttribute('site') instanceof NullSite) {",
          "46:                     throw new \\RuntimeException('testing', 1668696350);",
          "47:                 }",
          "48:                 return new JsonResponse();",
          "51:         $subject->process($incomingRequest, $requestHandler);",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php": [
          "File: typo3/sysext/core/Classes/Routing/SiteMatcher.php -> typo3/sysext/core/Classes/Routing/SiteMatcher.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:     public function matchByPageId(int $pageId, array $rootLine = null): SiteInterface",
          "182:     {",
          "183:         try {",
          "184:             return $this->finder->getSiteByPageId($pageId, $rootLine);",
          "186:             return new NullSite();",
          "187:         }",
          "188:     }",
          "",
          "[Removed Lines]",
          "185:         } catch (SiteNotFoundException $e) {",
          "",
          "[Added Lines]",
          "184:         } catch (SiteNotFoundException) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "adc8b4402393668b6a148b736e46c692e88ed7e5",
      "candidate_info": {
        "commit_hash": "adc8b4402393668b6a148b736e46c692e88ed7e5",
        "repo": "TYPO3/typo3",
        "commit_url": "https://github.com/TYPO3/typo3/commit/adc8b4402393668b6a148b736e46c692e88ed7e5",
        "files": [
          "typo3/sysext/core/Classes/Routing/BestUrlMatcher.php",
          "typo3/sysext/core/Classes/Routing/MatchedRoute.php",
          "typo3/sysext/core/Classes/Routing/SiteMatcher.php",
          "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php"
        ],
        "message": "[BUGFIX] Ensure best matching URL is used during site resolving\n\nSymfony's UrlMatcher takes multiple routes and returns the first\nmatch. However there might be better matches that are not considered\nat all. That's why a custom BestUrlMatcher is introduce, which\nresolves all matches for further reduction.\n\nPreviously the route collection was sorted by names and identifiers,\nwhich now has been adjusted to focus on the actual matches when being\ncompared to the current request. The fallback route (site base URI).\nThis way, overlapping route definitions can be resolved better.\n\nResolves: #93240\nReleases: main, 11.5\nChange-Id: Ib1a7361dc86ed48a474d5e55583a622df58e8939\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/76464\nTested-by: Benni Mack <benni@typo3.org>\nTested-by: Susanne Moog <look@susi.dev>\nTested-by: core-ci <typo3@b13.com>\nTested-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Benni Mack <benni@typo3.org>\nReviewed-by: Susanne Moog <look@susi.dev>\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>",
        "before_after_code_files": [
          "typo3/sysext/core/Classes/Routing/BestUrlMatcher.php||typo3/sysext/core/Classes/Routing/BestUrlMatcher.php",
          "typo3/sysext/core/Classes/Routing/MatchedRoute.php||typo3/sysext/core/Classes/Routing/MatchedRoute.php",
          "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php",
          "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php",
            "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php"
          ],
          "candidate": [
            "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php",
            "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php"
          ]
        }
      },
      "candidate_diff": {
        "typo3/sysext/core/Classes/Routing/BestUrlMatcher.php||typo3/sysext/core/Classes/Routing/BestUrlMatcher.php": [
          "File: typo3/sysext/core/Classes/Routing/BestUrlMatcher.php -> typo3/sysext/core/Classes/Routing/BestUrlMatcher.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: declare(strict_types=1);",
          "18: namespace TYPO3\\CMS\\Core\\Routing;",
          "20: use Symfony\\Component\\Routing\\Matcher\\RedirectableUrlMatcherInterface;",
          "21: use Symfony\\Component\\Routing\\Matcher\\UrlMatcher;",
          "22: use Symfony\\Component\\Routing\\RouteCollection as SymfonyRouteCollection;",
          "23: use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;",
          "28: class BestUrlMatcher extends UrlMatcher",
          "29: {",
          "30:     protected function matchCollection(string $pathinfo, SymfonyRouteCollection $routes): array",
          "31:     {",
          "32:         $matchedRoutes = $this->preMatchCollection($pathinfo, $routes);",
          "33:         $matches = count($matchedRoutes);",
          "34:         if ($matches === 0) {",
          "35:             return [];",
          "36:         }",
          "37:         if ($matches === 1) {",
          "38:             return $matchedRoutes[0]->getRouteResult();",
          "39:         }",
          "40:         usort($matchedRoutes, [$this, 'sortMatchedRoutes']);",
          "41:         return array_shift($matchedRoutes)->getRouteResult();",
          "42:     }",
          "52:     protected function preMatchCollection(string $pathinfo, SymfonyRouteCollection $routes): array",
          "53:     {",
          "54:         $matchedRoutes = [];",
          "57:         $method = $this->context->getMethod();",
          "58:         if ($method === 'HEAD') {",
          "59:             $method = 'GET';",
          "60:         }",
          "61:         $supportsTrailingSlash = $method === 'GET' && $this instanceof RedirectableUrlMatcherInterface;",
          "62:         $trimmedPathinfo = rtrim($pathinfo, '/') ?: '/';",
          "64:         foreach ($routes as $name => $route) {",
          "65:             $compiledRoute = $route->compile();",
          "66:             $staticPrefix = rtrim($compiledRoute->getStaticPrefix(), '/');",
          "67:             $requiredMethods = $route->getMethods();",
          "70:             if ($staticPrefix !== '' && !str_starts_with($trimmedPathinfo, $staticPrefix)) {",
          "71:                 continue;",
          "72:             }",
          "73:             $regex = $compiledRoute->getRegex();",
          "75:             $pos = strrpos($regex, '$');",
          "76:             $hasTrailingSlash = $regex[$pos - 1] === '/';",
          "77:             $regex = substr_replace($regex, '/?$', $pos - $hasTrailingSlash, 1 + $hasTrailingSlash);",
          "79:             if (!preg_match($regex, $pathinfo, $matches)) {",
          "80:                 continue;",
          "81:             }",
          "83:             $hasTrailingVar = $trimmedPathinfo !== $pathinfo && preg_match('#\\{[\\w\\x80-\\xFF]+\\}/?$#', $route->getPath());",
          "85:             if ($hasTrailingVar && ($hasTrailingSlash || (null === $m = $matches[\\count($compiledRoute->getPathVariables())] ?? null) || '/' !== ($m[-1] ?? '/')) && preg_match($regex, $trimmedPathinfo, $m)) {",
          "86:                 if ($hasTrailingSlash) {",
          "87:                     $matches = $m;",
          "88:                 } else {",
          "89:                     $hasTrailingVar = false;",
          "90:                 }",
          "91:             }",
          "93:             $hostMatches = [];",
          "94:             if ($compiledRoute->getHostRegex() && !preg_match($compiledRoute->getHostRegex(), $this->context->getHost(), $hostMatches)) {",
          "95:                 continue;",
          "96:             }",
          "98:             $attributes = $this->getAttributes($route, $name, array_replace($matches, $hostMatches));",
          "100:             $status = $this->handleRouteRequirements($pathinfo, $name, $route, $attributes);",
          "102:             if ($status[0] === self::REQUIREMENT_MISMATCH) {",
          "103:                 continue;",
          "104:             }",
          "106:             if ($pathinfo !== '/' && !$hasTrailingVar && $hasTrailingSlash === ($trimmedPathinfo === $pathinfo)) {",
          "107:                 if ($supportsTrailingSlash && (!$requiredMethods || \\in_array('GET', $requiredMethods))) {",
          "108:                     return $this->allow = $this->allowSchemes = [];",
          "109:                 }",
          "110:                 continue;",
          "111:             }",
          "113:             if ($route->getSchemes() && !$route->hasScheme($this->context->getScheme())) {",
          "114:                 $this->allowSchemes = array_merge($this->allowSchemes, $route->getSchemes());",
          "115:                 continue;",
          "116:             }",
          "118:             if ($requiredMethods && !\\in_array($method, $requiredMethods)) {",
          "119:                 $this->allow = array_merge($this->allow, $requiredMethods);",
          "120:                 continue;",
          "121:             }",
          "123:             $matchedRoute = GeneralUtility::makeInstance(",
          "124:                 MatchedRoute::class,",
          "125:                 $route,",
          "126:                 array_replace($attributes, $status[1] ?? [])",
          "127:             );",
          "128:             $matchedRoutes[] = $matchedRoute->withPathMatches($matches)->withHostMatches($hostMatches);",
          "129:         }",
          "131:         return $matchedRoutes;",
          "132:     }",
          "137:     protected function sortMatchedRoutes(MatchedRoute $a, MatchedRoute $b): int",
          "138:     {",
          "139:         if ($a->getFallbackScore() !== $b->getFallbackScore()) {",
          "141:             return $a->getFallbackScore() <=> $b->getFallbackScore();",
          "142:         }",
          "143:         if ($b->getHostMatchScore() !== $a->getHostMatchScore()) {",
          "145:             return $b->getHostMatchScore() <=> $a->getHostMatchScore();",
          "146:         }",
          "149:         return $b->getPathMatchScore(1) <=> $a->getPathMatchScore(1);",
          "150:     }",
          "151: }",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Classes/Routing/MatchedRoute.php||typo3/sysext/core/Classes/Routing/MatchedRoute.php": [
          "File: typo3/sysext/core/Classes/Routing/MatchedRoute.php -> typo3/sysext/core/Classes/Routing/MatchedRoute.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: declare(strict_types=1);",
          "18: namespace TYPO3\\CMS\\Core\\Routing;",
          "20: use Symfony\\Component\\Routing\\Route as SymfonyRoute;",
          "25: class MatchedRoute",
          "26: {",
          "27:     protected array $hostMatches = [];",
          "28:     protected array $pathMatches = [];",
          "30:     public function __construct(protected SymfonyRoute $route, protected array $routeResult)",
          "31:     {",
          "32:     }",
          "34:     public function withPathMatches(array $pathMatches): self",
          "35:     {",
          "36:         $target = clone $this;",
          "37:         $target->pathMatches = $pathMatches;",
          "38:         return $target;",
          "39:     }",
          "41:     public function withHostMatches(array $hostMatches): self",
          "42:     {",
          "43:         $target = clone $this;",
          "44:         $target->hostMatches = $hostMatches;",
          "45:         return $target;",
          "46:     }",
          "48:     public function getRoute(): SymfonyRoute",
          "49:     {",
          "50:         return $this->route;",
          "51:     }",
          "56:     public function getRouteResult(): array",
          "57:     {",
          "58:         return $this->routeResult;",
          "59:     }",
          "61:     public function getFallbackScore(): int",
          "62:     {",
          "63:         return $this->route->getOption('fallback') === true ? 1 : 0;",
          "64:     }",
          "66:     public function getHostMatchScore(): int",
          "67:     {",
          "68:         return empty($this->hostMatches[0]) ? 0 : 1;",
          "69:     }",
          "71:     public function getPathMatchScore(int $index): int",
          "72:     {",
          "73:         $completeMatch = $this->pathMatches[0];",
          "74:         $tailMatch = $this->pathMatches[$index] ?? '';",
          "76:         if ($tailMatch === '') {",
          "77:             return strlen($completeMatch);",
          "78:         }",
          "81:         return strpos($completeMatch, $tailMatch);",
          "82:     }",
          "83: }",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php": [
          "File: typo3/sysext/core/Classes/Routing/SiteMatcher.php -> typo3/sysext/core/Classes/Routing/SiteMatcher.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use Psr\\Http\\Message\\ServerRequestInterface;",
          "21: use Symfony\\Component\\Routing\\Exception\\NoConfigurationException;",
          "22: use Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException;",
          "24: use Symfony\\Component\\Routing\\RequestContext;",
          "25: use TYPO3\\CMS\\Core\\Cache\\CacheManager;",
          "26: use TYPO3\\CMS\\Core\\Exception\\SiteNotFoundException;",
          "",
          "[Removed Lines]",
          "23: use Symfony\\Component\\Routing\\Matcher\\UrlMatcher;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:                 443,",
          "147:                 $uri->getPath()",
          "148:             );",
          "150:             try {",
          "151:                 $result = $matcher->match($uri->getPath());",
          "152:                 return new SiteRouteResult(",
          "",
          "[Removed Lines]",
          "149:             $matcher = new UrlMatcher($collection, $context);",
          "",
          "[Added Lines]",
          "148:             $matcher = new BestUrlMatcher($collection, $context);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:     protected function getRouteCollectionForAllSites(): RouteCollection",
          "196:     {",
          "198:         foreach ($this->finder->getAllSites() as $site) {",
          "202:             $uri = $site->getBase();",
          "203:             $route = new Route(",
          "204:                 (rawurldecode($uri->getPath()) ?: '/') . '{tail}',",
          "205:                 ['site' => $site, 'language' => null, 'tail' => ''],",
          "206:                 array_filter(['tail' => '.*', 'port' => (string)$uri->getPort()]),",
          "209:                 $uri->getHost() ?: '',",
          "210:                 $uri->getScheme() === '' ? [] : [$uri->getScheme()]",
          "211:             );",
          "212:             $identifier = 'site_' . $site->getIdentifier();",
          "215:             foreach ($site->getAllLanguages() as $siteLanguage) {",
          "216:                 $uri = $siteLanguage->getBase();",
          "",
          "[Removed Lines]",
          "197:         $groupedRoutes = [];",
          "207:                 ['utf8' => true],",
          "213:             $groupedRoutes[($uri->getScheme() ?: '-') . ($uri->getHost() ?: '-')][$uri->getPath() ?: '/'][$identifier] = $route;",
          "",
          "[Added Lines]",
          "196:         $collection = new RouteCollection();",
          "207:                 ['utf8' => true, 'fallback' => true],",
          "213:             $collection->add($identifier, $route);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "223:                     $uri->getScheme() === '' ? [] : [$uri->getScheme()]",
          "224:                 );",
          "225:                 $identifier = 'site_' . $site->getIdentifier() . '_' . $siteLanguage->getLanguageId();",
          "251:             }",
          "252:         }",
          "253:         return $collection;",
          "",
          "[Removed Lines]",
          "226:                 $groupedRoutes[($uri->getScheme() ?: '-') . ($uri->getHost() ?: '-')][$uri->getPath() ?: '/'][$identifier] = $route;",
          "227:             }",
          "228:         }",
          "229:         return $this->createRouteCollectionFromGroupedRoutes($groupedRoutes);",
          "230:     }",
          "239:     protected function createRouteCollectionFromGroupedRoutes(array $groupedRoutes): RouteCollection",
          "240:     {",
          "241:         $collection = new RouteCollection();",
          "243:         krsort($groupedRoutes);",
          "244:         foreach ($groupedRoutes as $groupedRoutesPerHost) {",
          "245:             krsort($groupedRoutesPerHost);",
          "246:             foreach ($groupedRoutesPerHost as $groupedRoutesPerPath) {",
          "247:                 krsort($groupedRoutesPerPath);",
          "248:                 foreach ($groupedRoutesPerPath as $identifier => $route) {",
          "249:                     $collection->add($identifier, $route);",
          "250:                 }",
          "",
          "[Added Lines]",
          "227:                 $collection->add($identifier, $route);",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php": [
          "File: typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php -> typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:                 ],",
          "72:             ],",
          "73:         ]);",
          "80:         $subject = new SiteMatcher($finderMock);",
          "82:         $request = new ServerRequest('http://9-5.typo3.test/da/my-page/');",
          "",
          "[Removed Lines]",
          "74:         $finderMock = $this",
          "75:             ->getMockBuilder(SiteFinder::class)",
          "76:             ->onlyMethods(['getAllSites'])",
          "77:             ->disableOriginalConstructor()",
          "78:             ->getMock();",
          "79:         $finderMock->method('getAllSites')->willReturn(['main' => $site, 'second' => $secondSite]);",
          "",
          "[Added Lines]",
          "74:         $finderMock = $this->createSiteFinderMock($site, $secondSite);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:         self::assertEquals(0, $result->getLanguage()->getLanguageId());",
          "112:         $request = new ServerRequest('http://www.example.com/');",
          "114:         $result = $subject->matchRequest($request);",
          "116:         self::assertNull($result->getLanguage());",
          "118:     }",
          "",
          "[Removed Lines]",
          "117:         self::assertEquals('second', $result->getSite()->getIdentifier());",
          "",
          "[Added Lines]",
          "114:         self::assertEquals('main', $result->getSite()->getIdentifier());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:                 ],",
          "170:             ],",
          "171:         ]);",
          "179:         $subject = new SiteMatcher($finderMock);",
          "181:         $request = new ServerRequest('https://www.example.com/de');",
          "",
          "[Removed Lines]",
          "173:         $finderMock = $this",
          "174:             ->getMockBuilder(SiteFinder::class)",
          "175:             ->onlyMethods(['getAllSites'])",
          "176:             ->disableOriginalConstructor()",
          "177:             ->getMock();",
          "178:         $finderMock->method('getAllSites')->willReturn(['main' => $site, 'second' => $secondSite]);",
          "",
          "[Added Lines]",
          "169:         $finderMock = $this->createSiteFinderMock($site, $secondSite);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:         self::assertEquals($secondSite, $result->getSite());",
          "199:         self::assertNull($result->getLanguage());",
          "200:     }",
          "201: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:     public static function bestMatchingUrlIsUsedDataProvider(): \\Generator",
          "194:     {",
          "195:         yield  ['https://example.org/page', '1-main', 'en_US'];",
          "196:         yield  ['https://example.org/', '1-main', 'en_US'];",
          "197:         yield  ['https://example.org/f', '1-main', 'en_US'];",
          "198:         yield  ['https://example.org/fr', '3-fr', 'fr_FR'];",
          "199:         yield  ['https://example.org/friendly-page', '1-main', 'en_US'];",
          "200:         yield  ['https://example.org/fr/', '3-fr', 'fr_FR'];",
          "201:         yield  ['https://example.org/fr/page', '3-fr', 'fr_FR'];",
          "202:         yield  ['https://example.org/de', '1-main', 'de_DE'];",
          "203:         yield  ['https://example.org/deterministic', '1-main', 'en_US'];",
          "204:         yield  ['https://example.org/dk', '2-dk', 'da_DK'];",
          "205:         yield  ['https://example.org/dkother', '1-main', 'en_US'];",
          "206:     }",
          "212:     public function bestMatchingUrlIsUsed(string $requestUri, string $expectedSite, string $expectedLocale): void",
          "213:     {",
          "214:         $mainSite = new Site('1-main', 31, [",
          "215:             'base' => 'https://example.org/',",
          "216:             'languages' => [",
          "217:                 [",
          "218:                     'languageId' => 0,",
          "219:                     'base' => 'https://example.org/',",
          "220:                     'locale' => 'en_US',",
          "221:                 ],",
          "222:                 [",
          "223:                     'languageId' => 2,",
          "224:                     'base' => 'https://example.org/de/',",
          "225:                     'locale' => 'de_DE',",
          "226:                 ],",
          "227:             ],",
          "228:         ]);",
          "229:         $dkSite = new Site('2-dk', 21, [",
          "230:             'base' => 'https://example.org/',",
          "231:             'languages' => [",
          "232:                 [",
          "233:                     'languageId' => 0,",
          "234:                     'base' => 'https://example.org/dk/',",
          "235:                     'locale' => 'da_DK',",
          "236:                 ],",
          "237:             ],",
          "238:         ]);",
          "239:         $frSite = new Site('3-fr', 11, [",
          "240:             'base' => 'https://example.org/',",
          "241:             'languages' => [",
          "242:                 [",
          "243:                     'languageId' => 0,",
          "244:                     'base' => 'https://example.org/fr/',",
          "245:                     'locale' => 'fr_FR',",
          "246:                 ],",
          "247:             ],",
          "248:         ]);",
          "250:         $finderMock = $this->createSiteFinderMock($mainSite, $dkSite, $frSite);",
          "251:         $subject = new SiteMatcher($finderMock);",
          "253:         $request = new ServerRequest($requestUri);",
          "255:         $result = $subject->matchRequest($request);",
          "257:         self::assertSame($expectedSite, $result->getSite()->getIdentifier());",
          "258:         self::assertSame($expectedLocale, $result->getLanguage()->getLocale());",
          "259:     }",
          "261:     private function createSiteFinderMock(Site ...$sites): SiteFinder",
          "262:     {",
          "264:         $finderMock = $this",
          "265:             ->getMockBuilder(SiteFinder::class)",
          "266:             ->onlyMethods(['getAllSites'])",
          "267:             ->disableOriginalConstructor()",
          "268:             ->getMock();",
          "269:         $finderMock->method('getAllSites')->willReturn(array_combine(",
          "270:             array_map(static function (Site $site) { return $site->getIdentifier(); }, $sites),",
          "271:             $sites",
          "272:         ));",
          "273:         return $finderMock;",
          "274:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71e2d04ee8e786d3deb8dfa2c323e571e19c95e9",
      "candidate_info": {
        "commit_hash": "71e2d04ee8e786d3deb8dfa2c323e571e19c95e9",
        "repo": "TYPO3/typo3",
        "commit_url": "https://github.com/TYPO3/typo3/commit/71e2d04ee8e786d3deb8dfa2c323e571e19c95e9",
        "files": [
          "typo3/sysext/core/Classes/Routing/SiteMatcher.php",
          "typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
          "typo3/sysext/core/Configuration/DefaultConfiguration.php",
          "typo3/sysext/core/Configuration/DefaultConfigurationDescription.yaml",
          "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
          "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
          "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
          "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
          "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php"
        ],
        "message": "[SECURITY] Avoid out-of-scope page access for non-matching site\n\nThis change disallows calling an URI with page-id query parameters\nthat are not part of a particular site - for instance the following\nURL `https://example.org/?id=3000&L=0` has two aspects:\n\n* the site `example.org` has the root page-id 1000\n* the site `internal.example.org` has the root page-id 3000\n\nThe example above allows to call a page-id for an internal site,\nby using a valid and public entry point.\n\nThe new feature flag\n`security.frontend.allowInsecureSiteResolutionByQueryParameters`\nallows to control this behavior for backward compatibility reasons.\nPer default `allowInsecureSiteResolutionByQueryParameters` is disabled.\n\nResolves: #100889\nReleases: main, 12.4, 11.5\nChange-Id: I88d565b5d9bea556b4f754c3069d56124cea98bd\nSecurity-Bulletin: TYPO3-CORE-SA-2023-003\nSecurity-References: CVE-2023-38499\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/80156\nTested-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>",
        "before_after_code_files": [
          "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php",
          "typo3/sysext/core/Classes/Routing/SiteRouteResult.php||typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
          "typo3/sysext/core/Configuration/DefaultConfiguration.php||typo3/sysext/core/Configuration/DefaultConfiguration.php",
          "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
          "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
          "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
          "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
          "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php||typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php",
            "typo3/sysext/core/Classes/Routing/SiteRouteResult.php||typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
            "typo3/sysext/core/Configuration/DefaultConfiguration.php||typo3/sysext/core/Configuration/DefaultConfiguration.php",
            "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
            "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
            "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
            "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
            "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php||typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php"
          ],
          "candidate": [
            "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php",
            "typo3/sysext/core/Classes/Routing/SiteRouteResult.php||typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
            "typo3/sysext/core/Configuration/DefaultConfiguration.php||typo3/sysext/core/Configuration/DefaultConfiguration.php",
            "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
            "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
            "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
            "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
            "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php||typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php"
          ]
        }
      },
      "candidate_diff": {
        "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php": [
          "File: typo3/sysext/core/Classes/Routing/SiteMatcher.php -> typo3/sysext/core/Classes/Routing/SiteMatcher.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace TYPO3\\CMS\\Core\\Routing;",
          "20: use Psr\\Http\\Message\\ServerRequestInterface;",
          "21: use Symfony\\Component\\Routing\\Exception\\NoConfigurationException;",
          "22: use Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException;",
          "23: use Symfony\\Component\\Routing\\RequestContext;",
          "24: use TYPO3\\CMS\\Core\\Cache\\CacheManager;",
          "25: use TYPO3\\CMS\\Core\\Exception\\SiteNotFoundException;",
          "26: use TYPO3\\CMS\\Core\\Http\\NormalizedParams;",
          "27: use TYPO3\\CMS\\Core\\SingletonInterface;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: use Psr\\Http\\Message\\UriInterface;",
          "26: use TYPO3\\CMS\\Core\\Configuration\\Features;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     public function matchRequest(ServerRequestInterface $request): RouteResultInterface",
          "91:     {",
          "117:         }",
          "131:         }",
          "149:             try {",
          "166:             }",
          "167:         }",
          "170:     }",
          "",
          "[Removed Lines]",
          "92:         $site = new NullSite();",
          "93:         $language = null;",
          "94:         $defaultLanguage = null;",
          "96:         $pageId = $request->getQueryParams()['id'] ?? $request->getParsedBody()['id'] ?? 0;",
          "99:         if ($pageId > 0) {",
          "101:             try {",
          "102:                 $site = $this->finder->getSiteByPageId((int)$pageId);",
          "104:                 $languageId = $request->getQueryParams()['L'] ?? $request->getParsedBody()['L'] ?? null;",
          "105:                 if ($languageId !== null) {",
          "106:                     $language = $site->getLanguageById((int)$languageId);",
          "107:                 } else {",
          "109:                     $defaultLanguage = $site->getDefaultLanguage();",
          "110:                 }",
          "111:             } catch (SiteNotFoundException $e) {",
          "113:             } catch (\\InvalidArgumentException $e) {",
          "116:             }",
          "119:         $uri = $request->getUri();",
          "120:         if (!empty($uri->getPath())) {",
          "121:             $normalizedParams = $request->getAttribute('normalizedParams');",
          "122:             if ($normalizedParams instanceof NormalizedParams) {",
          "123:                 $urlPath = ltrim($uri->getPath(), '/');",
          "124:                 $scriptName = ltrim($normalizedParams->getScriptName(), '/');",
          "125:                 $scriptPath = ltrim($normalizedParams->getSitePath(), '/');",
          "126:                 if ($scriptName !== '' && str_starts_with($urlPath, $scriptName)) {",
          "127:                     $urlPath = '/' . $scriptPath . substr($urlPath, mb_strlen($scriptName));",
          "128:                     $uri = $uri->withPath($urlPath);",
          "129:                 }",
          "130:             }",
          "136:         if (!($language instanceof SiteLanguage)) {",
          "137:             $collection = $this->getRouteCollectionForAllSites();",
          "138:             $context = new RequestContext(",
          "139:                 '',",
          "140:                 $request->getMethod(),",
          "141:                 (string)idn_to_ascii($uri->getHost()),",
          "142:                 $uri->getScheme(),",
          "144:                 80,",
          "145:                 443,",
          "146:                 $uri->getPath()",
          "147:             );",
          "148:             $matcher = new BestUrlMatcher($collection, $context);",
          "150:                 $result = $matcher->match($uri->getPath());",
          "151:                 return new SiteRouteResult(",
          "152:                     $uri,",
          "153:                     $result['site'],",
          "157:                     $result['language'] ?? $defaultLanguage,",
          "158:                     $result['tail']",
          "159:                 );",
          "160:             } catch (NoConfigurationException | ResourceNotFoundException $e) {",
          "165:                 $site = new NullSite();",
          "169:         return new SiteRouteResult($uri, $site, $language);",
          "",
          "[Added Lines]",
          "95:         $uri = $this->canonicalizeUri($request->getUri(), $request);",
          "96:         $pageId = $this->resolvePageIdQueryParam($request);",
          "97:         $languageId = $this->resolveLanguageIdQueryParam($request);",
          "99:         $routeResult = $this->matchSiteByUri($uri, $request);",
          "103:         if (",
          "104:             GeneralUtility::makeInstance(Features::class)->isFeatureEnabled('security.frontend.allowInsecureSiteResolutionByQueryParameters') &&",
          "105:             $pageId !== null && $languageId !== null",
          "106:         ) {",
          "107:             return $this->matchSiteByQueryParams($pageId, $languageId, $routeResult, $uri);",
          "114:         if ($pageId !== null && $routeResult->getLanguage() === null) {",
          "115:             $routeResult = $routeResult->withLanguage($routeResult->getSite()->getDefaultLanguage());",
          "120:         if ($languageId !== null && $pageId !== null) {",
          "123:                 $routeResult = $routeResult->withLanguage($routeResult->getSite()->getLanguageById($languageId));",
          "124:             } catch (\\InvalidArgumentException $e) {",
          "129:         return $routeResult;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "229:         }",
          "230:         return $collection;",
          "231:     }",
          "232: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:     protected function resolvePageIdQueryParam(ServerRequestInterface $request): ?int",
          "197:     {",
          "198:         $pageId = $request->getQueryParams()['id'] ?? $request->getParsedBody()['id'] ?? null;",
          "199:         if ($pageId === null) {",
          "200:             return null;",
          "201:         }",
          "202:         return (int)$pageId <= 0 ? null : (int)$pageId;",
          "203:     }",
          "208:     protected function resolveLanguageIdQueryParam(ServerRequestInterface $request): ?int",
          "209:     {",
          "210:         $languageId = $request->getQueryParams()['L'] ?? $request->getParsedBody()['L'] ?? null;",
          "211:         if ($languageId === null) {",
          "212:             return null;",
          "213:         }",
          "214:         return (int)$languageId < 0 ? null : (int)$languageId;",
          "215:     }",
          "220:     protected function canonicalizeUri(UriInterface $uri, ServerRequestInterface $request): UriInterface",
          "221:     {",
          "222:         if ($uri->getPath() === '') {",
          "223:             return $uri;",
          "224:         }",
          "226:         $normalizedParams = $request->getAttribute('normalizedParams');",
          "227:         if (!$normalizedParams instanceof NormalizedParams) {",
          "228:             return $uri;",
          "229:         }",
          "231:         $urlPath = ltrim($uri->getPath(), '/');",
          "232:         $scriptName = ltrim($normalizedParams->getScriptName(), '/');",
          "233:         $scriptPath = ltrim($normalizedParams->getSitePath(), '/');",
          "234:         if ($scriptName !== '' && str_starts_with($urlPath, $scriptName)) {",
          "235:             $urlPath = '/' . $scriptPath . substr($urlPath, mb_strlen($scriptName));",
          "236:             $uri = $uri->withPath($urlPath);",
          "237:         }",
          "239:         return $uri;",
          "240:     }",
          "242:     protected function matchSiteByUri(UriInterface $uri, ServerRequestInterface $request): SiteRouteResult",
          "243:     {",
          "244:         $collection = $this->getRouteCollectionForAllSites();",
          "245:         $requestContext = new RequestContext(",
          "246:             '',",
          "247:             $request->getMethod(),",
          "248:             (string)idn_to_ascii($uri->getHost()),",
          "249:             $uri->getScheme(),",
          "251:             80,",
          "252:             443,",
          "253:             $uri->getPath()",
          "254:         );",
          "255:         $matcher = new BestUrlMatcher($collection, $requestContext);",
          "256:         try {",
          "258:             $match = $matcher->match($uri->getPath());",
          "259:             return new SiteRouteResult(",
          "260:                 $uri,",
          "261:                 $match['site'],",
          "262:                 $match['language'],",
          "263:                 $match['tail']",
          "264:             );",
          "265:         } catch (NoConfigurationException | ResourceNotFoundException $e) {",
          "266:             return new SiteRouteResult($uri, new NullSite(), null, '');",
          "267:         }",
          "268:     }",
          "270:     protected function matchSiteByQueryParams(",
          "271:         int $pageId,",
          "272:         int $languageId,",
          "273:         SiteRouteResult $fallback,",
          "274:         UriInterface $uri",
          "275:     ): SiteRouteResult {",
          "276:         try {",
          "277:             $site = $this->finder->getSiteByPageId($pageId);",
          "278:         } catch (SiteNotFoundException $e) {",
          "279:             return $fallback;",
          "280:         }",
          "282:         try {",
          "284:             $language = $site->getLanguageById($languageId);",
          "285:         } catch (\\InvalidArgumentException $e) {",
          "286:             return $fallback;",
          "287:         }",
          "289:         return new SiteRouteResult($uri, $site, $language);",
          "290:     }",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Classes/Routing/SiteRouteResult.php||typo3/sysext/core/Classes/Routing/SiteRouteResult.php": [
          "File: typo3/sysext/core/Classes/Routing/SiteRouteResult.php -> typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:         return in_array($offset, $this->validProperties, true) || isset($this->data[$offset]);",
          "96:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:     public function withLanguage(SiteLanguage $language): self",
          "102:     {",
          "103:         $clone = clone $this;",
          "104:         $clone->language = $language;",
          "106:         return $clone;",
          "107:     }",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Configuration/DefaultConfiguration.php||typo3/sysext/core/Configuration/DefaultConfiguration.php": [
          "File: typo3/sysext/core/Configuration/DefaultConfiguration.php -> typo3/sysext/core/Configuration/DefaultConfiguration.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:             'runtimeDbQuotingOfTcaConfiguration' => true,",
          "76:             'security.frontend.htmlSanitizeParseFuncDefault' => true,",
          "77:             'security.frontend.enforceLoginSigning' => true,",
          "78:             'security.backend.htmlSanitizeRte' => false,",
          "79:             'security.backend.enforceReferrer' => true,",
          "80:             'yamlImportsFollowDeclarationOrder' => false,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:             'security.frontend.allowInsecureSiteResolutionByQueryParameters' => false,",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php": [
          "File: typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php -> typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace TYPO3\\CMS\\Core\\Tests\\Unit\\Routing;",
          "20: use TYPO3\\CMS\\Core\\Http\\ServerRequest;",
          "21: use TYPO3\\CMS\\Core\\Routing\\SiteMatcher;",
          "22: use TYPO3\\CMS\\Core\\Routing\\SiteRouteResult;",
          "23: use TYPO3\\CMS\\Core\\Site\\Entity\\Site;",
          "24: use TYPO3\\CMS\\Core\\Site\\SiteFinder;",
          "25: use TYPO3\\TestingFramework\\Core\\Unit\\UnitTestCase;",
          "27: class SiteMatcherTest extends UnitTestCase",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: use TYPO3\\CMS\\Core\\Configuration\\Features;",
          "26: use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:                 ],",
          "72:             ],",
          "73:         ]);",
          "74:         $finderMock = $this->createSiteFinderMock($site, $secondSite);",
          "75:         $subject = new SiteMatcher($finderMock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:         $featuresMock = $this->createFeaturesMock();",
          "77:         GeneralUtility::addInstance(Features::class, $featuresMock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:                 ],",
          "168:             ],",
          "169:         ]);",
          "170:         $finderMock = $this->createSiteFinderMock($site, $secondSite);",
          "171:         $subject = new SiteMatcher($finderMock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:         $featuresMock = $this->createFeaturesMock();",
          "175:         GeneralUtility::addInstance(Features::class, $featuresMock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "248:             ],",
          "249:         ]);",
          "251:         $finderMock = $this->createSiteFinderMock($mainSite, $dkSite, $frSite);",
          "252:         $subject = new SiteMatcher($finderMock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:         $featuresMock = $this->createFeaturesMock();",
          "258:         GeneralUtility::addInstance(Features::class, $featuresMock);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:         self::assertSame($expectedLocale, $result->getLanguage()->getLocale());",
          "260:     }",
          "262:     private function createSiteFinderMock(Site ...$sites): SiteFinder",
          "263:     {",
          "264:         $finderMock = $this",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:     private function createFeaturesMock(): Features",
          "271:     {",
          "272:         $mock = $this->getMockBuilder(Features::class)",
          "273:             ->onlyMethods(['isFeatureEnabled'])",
          "274:             ->getMock();",
          "275:         $mock->expects(self::any())",
          "276:             ->method('isFeatureEnabled')",
          "277:             ->with('security.frontend.allowInsecureSiteResolutionByQueryParameters')",
          "278:             ->willReturn(false);",
          "279:         return $mock;",
          "280:     }",
          "",
          "---------------"
        ],
        "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php": [
          "File: typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php -> typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: declare(strict_types=1);",
          "18: namespace TYPO3\\CMS\\Frontend\\Tests\\Functional\\SiteHandling;",
          "20: use TYPO3\\CMS\\Core\\Core\\Bootstrap;",
          "21: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerFactory;",
          "22: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerWriter;",
          "23: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\Frontend\\InternalRequest;",
          "25: final class SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest extends AbstractTestCase",
          "26: {",
          "27:     protected $configurationToUseInTestInstance = [",
          "28:         'SYS' => [",
          "29:             'devIPmask' => '123.123.123.123',",
          "30:             'encryptionKey' => '4408d27a916d51e624b69af3554f516dbab61037a9f7b9fd6f81b4d3bedeccb6',",
          "31:             'features' => [",
          "32:                 'security.frontend.allowInsecureSiteResolutionByQueryParameters' => false,",
          "33:             ],",
          "34:         ],",
          "35:         'FE' => [",
          "36:             'cacheHash' => [",
          "37:                 'requireCacheHashPresenceParameters' => ['value', 'testing[value]', 'tx_testing_link[value]'],",
          "38:                 'excludedParameters' => ['L', 'tx_testing_link[excludedValue]'],",
          "39:                 'enforceValidation' => true,",
          "40:             ],",
          "41:             'debug' => false,",
          "42:         ],",
          "43:     ];",
          "45:     protected function setUp(): void",
          "46:     {",
          "47:         parent::setUp();",
          "48:         $this->withDatabaseSnapshot(function () {",
          "49:             $this->importCSVDataSet(__DIR__ . '/../Fixtures/be_users.csv');",
          "50:             $backendUser = $this->setUpBackendUser(1);",
          "51:             Bootstrap::initializeLanguageObject();",
          "52:             $scenarioFile = __DIR__ . '/Fixtures/SlugScenario.yaml';",
          "53:             $factory = DataHandlerFactory::fromYamlFile($scenarioFile);",
          "54:             $writer = DataHandlerWriter::withBackendUser($backendUser);",
          "55:             $writer->invokeFactory($factory);",
          "56:             static::failIfArrayIsNotEmpty($writer->getErrors());",
          "57:             $this->setUpFrontendRootPage(",
          "58:                 1000,",
          "59:                 [",
          "60:                     'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',",
          "61:                     'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',",
          "62:                 ],",
          "63:                 [",
          "64:                     'title' => 'ACME Root',",
          "65:                 ]",
          "66:             );",
          "67:             $this->setUpFrontendRootPage(",
          "68:                 3000,",
          "69:                 [",
          "70:                     'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',",
          "71:                     'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',",
          "72:                 ],",
          "73:                 [",
          "74:                     'title' => 'ACME Archive',",
          "75:                 ]",
          "76:             );",
          "77:         });",
          "78:     }",
          "80:     public static function siteWithPageIdRequestsAreCorrectlyHandledDataProvider(): \\Generator",
          "81:     {",
          "82:         yield 'valid same-site request is redirected' => ['https://website.local/?id=1000&L=0', 307];",
          "83:         yield 'valid same-site request is processed' => ['https://website.local/?id=1100&L=0', 200];",
          "84:         yield 'invalid off-site request with unknown domain is denied' => ['https://otherdomain.website.local/?id=3000&L=0', 404];",
          "85:         yield 'invalid off-site request with unknown domain and without L parameter is denied' => ['https://otherdomain.website.local/?id=3000', 404];",
          "86:         yield 'invalid cross-site request without L parameter is denied' => ['https://website.local/?id=3000', 404];",
          "87:         yield 'invalid cross-site request *not* denied' => ['https://website.local/?id=3000&L=0', 404];",
          "88:     }",
          "94:     public function siteWithPageIdRequestsAreCorrectlyHandled(string $uri, int $expectation): void",
          "95:     {",
          "96:         $this->writeSiteConfiguration(",
          "97:             'website-local',",
          "98:             $this->buildSiteConfiguration(1000, 'https://website.local/'),",
          "99:             [",
          "100:                 $this->buildDefaultLanguageConfiguration('EN', '/'),",
          "101:             ],",
          "102:             $this->buildErrorHandlingConfiguration('Fluid', [404])",
          "103:         );",
          "104:         $this->writeSiteConfiguration(",
          "105:             'archive-acme-com',",
          "106:             $this->buildSiteConfiguration(3000, 'https://archive.acme.com/'),",
          "107:             [",
          "108:                 $this->buildDefaultLanguageConfiguration('EN', '/'),",
          "109:             ],",
          "110:             $this->buildErrorHandlingConfiguration('Fluid', [404])",
          "111:         );",
          "113:         $response = $this->executeFrontendSubRequest(new InternalRequest($uri));",
          "114:         self::assertSame($expectation, $response->getStatusCode());",
          "115:     }",
          "116: }",
          "",
          "---------------"
        ],
        "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php": [
          "File: typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php -> typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: declare(strict_types=1);",
          "18: namespace TYPO3\\CMS\\Frontend\\Tests\\Functional\\SiteHandling;",
          "20: use TYPO3\\CMS\\Core\\Core\\Bootstrap;",
          "21: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerFactory;",
          "22: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerWriter;",
          "23: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\Frontend\\InternalRequest;",
          "25: final class SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest extends AbstractTestCase",
          "26: {",
          "27:     protected $configurationToUseInTestInstance = [",
          "28:         'SYS' => [",
          "29:             'devIPmask' => '123.123.123.123',",
          "30:             'encryptionKey' => '4408d27a916d51e624b69af3554f516dbab61037a9f7b9fd6f81b4d3bedeccb6',",
          "31:             'features' => [",
          "32:                 'security.frontend.allowInsecureSiteResolutionByQueryParameters' => true,",
          "33:             ],",
          "34:         ],",
          "35:         'FE' => [",
          "36:             'cacheHash' => [",
          "37:                 'requireCacheHashPresenceParameters' => ['value', 'testing[value]', 'tx_testing_link[value]'],",
          "38:                 'excludedParameters' => ['L', 'tx_testing_link[excludedValue]'],",
          "39:                 'enforceValidation' => true,",
          "40:             ],",
          "41:             'debug' => false,",
          "42:         ],",
          "43:     ];",
          "45:     protected function setUp(): void",
          "46:     {",
          "47:         parent::setUp();",
          "48:         $this->withDatabaseSnapshot(function () {",
          "49:             $this->importCSVDataSet(__DIR__ . '/../Fixtures/be_users.csv');",
          "50:             $backendUser = $this->setUpBackendUser(1);",
          "51:             Bootstrap::initializeLanguageObject();",
          "52:             $scenarioFile = __DIR__ . '/Fixtures/SlugScenario.yaml';",
          "53:             $factory = DataHandlerFactory::fromYamlFile($scenarioFile);",
          "54:             $writer = DataHandlerWriter::withBackendUser($backendUser);",
          "55:             $writer->invokeFactory($factory);",
          "56:             static::failIfArrayIsNotEmpty($writer->getErrors());",
          "57:             $this->setUpFrontendRootPage(",
          "58:                 1000,",
          "59:                 [",
          "60:                     'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',",
          "61:                     'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',",
          "62:                 ],",
          "63:                 [",
          "64:                     'title' => 'ACME Root',",
          "65:                 ]",
          "66:             );",
          "67:             $this->setUpFrontendRootPage(",
          "68:                 3000,",
          "69:                 [",
          "70:                     'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',",
          "71:                     'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',",
          "72:                 ],",
          "73:                 [",
          "74:                     'title' => 'ACME Archive',",
          "75:                 ]",
          "76:             );",
          "77:         });",
          "78:     }",
          "80:     public static function siteWithPageIdRequestsAreCorrectlyHandledDataProvider(): \\Generator",
          "81:     {",
          "82:         yield 'valid same-site request is redirected' => ['https://website.local/?id=1000&L=0', 307];",
          "83:         yield 'valid same-site request is processed' => ['https://website.local/?id=1100&L=0', 200];",
          "85:         yield 'invalid off-site request with unknown domain is denied' => ['https://otherdomain.website.local/?id=3000&L=0', 200];",
          "86:         yield 'invalid off-site request with unknown domain and without L parameter is denied' => ['https://otherdomain.website.local/?id=3000', 404];",
          "87:         yield 'invalid cross-site request without L parameter is denied' => ['https://website.local/?id=3000', 404];",
          "89:         yield 'invalid cross-site request *not* denied' => ['https://website.local/?id=3000&L=0', 200];",
          "90:     }",
          "96:     public function siteWithPageIdRequestsAreCorrectlyHandled(string $uri, int $expectation): void",
          "97:     {",
          "98:         $this->writeSiteConfiguration(",
          "99:             'website-local',",
          "100:             $this->buildSiteConfiguration(1000, 'https://website.local/'),",
          "101:             [",
          "102:                 $this->buildDefaultLanguageConfiguration('EN', '/'),",
          "103:             ],",
          "104:             $this->buildErrorHandlingConfiguration('Fluid', [404])",
          "105:         );",
          "106:         $this->writeSiteConfiguration(",
          "107:             'archive-acme-com',",
          "108:             $this->buildSiteConfiguration(3000, 'https://archive.acme.com/'),",
          "109:             [",
          "110:                 $this->buildDefaultLanguageConfiguration('EN', '/'),",
          "111:             ],",
          "112:             $this->buildErrorHandlingConfiguration('Fluid', [404])",
          "113:         );",
          "115:         $response = $this->executeFrontendSubRequest(new InternalRequest($uri));",
          "116:         self::assertSame($expectation, $response->getStatusCode());",
          "117:     }",
          "118: }",
          "",
          "---------------"
        ],
        "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php": [
          "File: typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php -> typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:     {",
          "317:         yield 'valid same-site request is redirected' => ['https://website.local/?id=1000&L=0', 307];",
          "318:         yield 'valid same-site request is processed' => ['https://website.local/?id=1100&L=0', 200];",
          "319:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319:         yield 'invalid off-site request with unknown domain is denied' => ['https://otherdomain.website.local/?id=3000&L=0', 404];",
          "320:         yield 'invalid off-site request with unknown domain and without L parameter is denied' => ['https://otherdomain.website.local/?id=3000', 404];",
          "",
          "---------------"
        ],
        "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php||typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php": [
          "File: typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php -> typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: use Psr\\Http\\Message\\ServerRequestInterface;",
          "23: use Psr\\Http\\Server\\RequestHandlerInterface;",
          "24: use TYPO3\\CMS\\Core\\Cache\\CacheManager;",
          "25: use TYPO3\\CMS\\Core\\Http\\JsonResponse;",
          "26: use TYPO3\\CMS\\Core\\Http\\NullResponse;",
          "27: use TYPO3\\CMS\\Core\\Http\\ServerRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: use TYPO3\\CMS\\Core\\Configuration\\Features;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:             ]),",
          "121:         ]);",
          "123:         $subject = new SiteResolver(new SiteMatcher($this->siteFinder));",
          "125:         $request = new ServerRequest($incomingUrl, 'GET');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:         $featuresMock = $this->createFeaturesMock();",
          "125:         GeneralUtility::addInstance(Features::class, $featuresMock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:             ]),",
          "174:         ]);",
          "176:         $subject = new SiteResolver(new SiteMatcher($this->siteFinder));",
          "178:         $request = new ServerRequest($incomingUrl, 'GET');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:         $featuresMock = $this->createFeaturesMock();",
          "180:         GeneralUtility::addInstance(Features::class, $featuresMock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:             ]),",
          "264:         ]);",
          "266:         $subject = new SiteResolver(new SiteMatcher($this->siteFinder));",
          "268:         $request = new ServerRequest($incomingUrl, 'GET');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:         $featuresMock = $this->createFeaturesMock();",
          "272:         GeneralUtility::addInstance(Features::class, $featuresMock);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "373:             ]),",
          "374:         ]);",
          "376:         $subject = new SiteResolver(new SiteMatcher($this->siteFinder));",
          "378:         $request = new ServerRequest($incomingUrl, 'GET');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383:         $featuresMock = $this->createFeaturesMock();",
          "384:         GeneralUtility::addInstance(Features::class, $featuresMock);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "389:             self::assertEquals($expectedBase, $result['language-base']);",
          "390:         }",
          "391:     }",
          "392: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402:     private function createFeaturesMock(): Features",
          "403:     {",
          "404:         $mock = $this->getMockBuilder(Features::class)",
          "405:             ->onlyMethods(['isFeatureEnabled'])",
          "406:             ->getMock();",
          "407:         $mock->expects(self::any())",
          "408:             ->method('isFeatureEnabled')",
          "409:             ->with('security.frontend.allowInsecureSiteResolutionByQueryParameters')",
          "410:             ->willReturn(false);",
          "411:         return $mock;",
          "412:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37ab012c7baab36b92c8d163bc51569daedb88a0",
      "candidate_info": {
        "commit_hash": "37ab012c7baab36b92c8d163bc51569daedb88a0",
        "repo": "TYPO3/typo3",
        "commit_url": "https://github.com/TYPO3/typo3/commit/37ab012c7baab36b92c8d163bc51569daedb88a0",
        "files": [
          "typo3/sysext/core/Classes/Routing/SiteMatcher.php",
          "typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
          "typo3/sysext/core/Configuration/DefaultConfiguration.php",
          "typo3/sysext/core/Configuration/DefaultConfigurationDescription.yaml",
          "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
          "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
          "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
          "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
          "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php"
        ],
        "message": "[SECURITY] Avoid out-of-scope page access for non-matching site\n\nThis change disallows calling an URI with page-id query parameters\nthat are not part of a particular site - for instance the following\nURL `https://example.org/?id=3000&L=0` has two aspects:\n\n* the site `example.org` has the root page-id 1000\n* the site `internal.example.org` has the root page-id 3000\n\nThe example above allows to call a page-id for an internal site,\nby using a valid and public entry point.\n\nThe new feature flag\n`security.frontend.allowInsecureSiteResolutionByQueryParameters`\nallows to control this behavior for backward compatibility reasons.\nPer default `allowInsecureSiteResolutionByQueryParameters` is disabled.\n\nResolves: #100889\nReleases: main, 12.4, 11.5\nChange-Id: I88d565b5d9bea556b4f754c3069d56124cea98bd\nSecurity-Bulletin: TYPO3-CORE-SA-2023-003\nSecurity-References: CVE-2023-38499\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/80161\nTested-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>",
        "before_after_code_files": [
          "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php",
          "typo3/sysext/core/Classes/Routing/SiteRouteResult.php||typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
          "typo3/sysext/core/Configuration/DefaultConfiguration.php||typo3/sysext/core/Configuration/DefaultConfiguration.php",
          "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
          "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
          "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
          "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
          "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php||typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php",
            "typo3/sysext/core/Classes/Routing/SiteRouteResult.php||typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
            "typo3/sysext/core/Configuration/DefaultConfiguration.php||typo3/sysext/core/Configuration/DefaultConfiguration.php",
            "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
            "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
            "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
            "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
            "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php||typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php"
          ],
          "candidate": [
            "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php",
            "typo3/sysext/core/Classes/Routing/SiteRouteResult.php||typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
            "typo3/sysext/core/Configuration/DefaultConfiguration.php||typo3/sysext/core/Configuration/DefaultConfiguration.php",
            "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
            "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
            "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
            "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
            "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php||typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php"
          ]
        }
      },
      "candidate_diff": {
        "typo3/sysext/core/Classes/Routing/SiteMatcher.php||typo3/sysext/core/Classes/Routing/SiteMatcher.php": [
          "File: typo3/sysext/core/Classes/Routing/SiteMatcher.php -> typo3/sysext/core/Classes/Routing/SiteMatcher.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace TYPO3\\CMS\\Core\\Routing;",
          "20: use Psr\\Http\\Message\\ServerRequestInterface;",
          "21: use Symfony\\Component\\Routing\\Exception\\NoConfigurationException;",
          "22: use Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException;",
          "23: use TYPO3\\CMS\\Core\\Cache\\CacheManager;",
          "24: use TYPO3\\CMS\\Core\\Exception\\SiteNotFoundException;",
          "25: use TYPO3\\CMS\\Core\\Http\\NormalizedParams;",
          "26: use TYPO3\\CMS\\Core\\SingletonInterface;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: use Psr\\Http\\Message\\UriInterface;",
          "25: use TYPO3\\CMS\\Core\\Configuration\\Features;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: class SiteMatcher implements SingletonInterface",
          "49: {",
          "50:     public function __construct(",
          "51:         protected readonly SiteFinder $finder,",
          "52:         protected readonly RequestContextFactory $requestContextFactory",
          "53:     ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:         protected readonly Features $features,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:     public function matchRequest(ServerRequestInterface $request): RouteResultInterface",
          "81:     {",
          "107:         }",
          "121:         }",
          "130:             try {",
          "147:             }",
          "148:         }",
          "151:     }",
          "",
          "[Removed Lines]",
          "82:         $site = new NullSite();",
          "83:         $language = null;",
          "84:         $defaultLanguage = null;",
          "86:         $pageId = $request->getQueryParams()['id'] ?? $request->getParsedBody()['id'] ?? 0;",
          "89:         if ($pageId > 0) {",
          "91:             try {",
          "92:                 $site = $this->finder->getSiteByPageId((int)$pageId);",
          "94:                 $languageId = $request->getQueryParams()['L'] ?? $request->getParsedBody()['L'] ?? null;",
          "95:                 if ($languageId !== null) {",
          "96:                     $language = $site->getLanguageById((int)$languageId);",
          "97:                 } else {",
          "99:                     $defaultLanguage = $site->getDefaultLanguage();",
          "100:                 }",
          "101:             } catch (SiteNotFoundException $e) {",
          "103:             } catch (\\InvalidArgumentException $e) {",
          "106:             }",
          "109:         $uri = $request->getUri();",
          "110:         if (!empty($uri->getPath())) {",
          "111:             $normalizedParams = $request->getAttribute('normalizedParams');",
          "112:             if ($normalizedParams instanceof NormalizedParams) {",
          "113:                 $urlPath = ltrim($uri->getPath(), '/');",
          "114:                 $scriptName = ltrim($normalizedParams->getScriptName(), '/');",
          "115:                 $scriptPath = ltrim($normalizedParams->getSitePath(), '/');",
          "116:                 if ($scriptName !== '' && str_starts_with($urlPath, $scriptName)) {",
          "117:                     $urlPath = '/' . $scriptPath . substr($urlPath, mb_strlen($scriptName));",
          "118:                     $uri = $uri->withPath($urlPath);",
          "119:                 }",
          "120:             }",
          "126:         if (!($language instanceof SiteLanguage)) {",
          "127:             $collection = $this->getRouteCollectionForAllSites();",
          "128:             $requestContext = $this->requestContextFactory->fromUri($uri, $request->getMethod());",
          "129:             $matcher = new BestUrlMatcher($collection, $requestContext);",
          "131:                 $result = $matcher->match($uri->getPath());",
          "132:                 return new SiteRouteResult(",
          "133:                     $uri,",
          "134:                     $result['site'],",
          "138:                     $result['language'] ?? $defaultLanguage,",
          "139:                     $result['tail']",
          "140:                 );",
          "141:             } catch (NoConfigurationException | ResourceNotFoundException $e) {",
          "146:                 $site = new NullSite();",
          "150:         return new SiteRouteResult($uri, $site, $language);",
          "",
          "[Added Lines]",
          "86:         $uri = $this->canonicalizeUri($request->getUri(), $request);",
          "87:         $pageId = $this->resolvePageIdQueryParam($request);",
          "88:         $languageId = $this->resolveLanguageIdQueryParam($request);",
          "90:         $routeResult = $this->matchSiteByUri($uri, $request);",
          "94:         if (",
          "95:             $this->features->isFeatureEnabled('security.frontend.allowInsecureSiteResolutionByQueryParameters') &&",
          "96:             $pageId !== null && $languageId !== null",
          "97:         ) {",
          "98:             return $this->matchSiteByQueryParams($pageId, $languageId, $routeResult, $uri);",
          "105:         if ($pageId !== null && $routeResult->getLanguage() === null) {",
          "106:             $routeResult = $routeResult->withLanguage($routeResult->getSite()->getDefaultLanguage());",
          "111:         if ($languageId !== null && $pageId !== null) {",
          "114:                 $routeResult = $routeResult->withLanguage($routeResult->getSite()->getLanguageById($languageId));",
          "115:             } catch (\\InvalidArgumentException) {",
          "120:         return $routeResult;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "206:         }",
          "207:         return $collection;",
          "208:     }",
          "209: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:     protected function resolvePageIdQueryParam(ServerRequestInterface $request): ?int",
          "184:     {",
          "185:         $pageId = $request->getQueryParams()['id'] ?? $request->getParsedBody()['id'] ?? null;",
          "186:         if ($pageId === null) {",
          "187:             return null;",
          "188:         }",
          "189:         return (int)$pageId <= 0 ? null : (int)$pageId;",
          "190:     }",
          "195:     protected function resolveLanguageIdQueryParam(ServerRequestInterface $request): ?int",
          "196:     {",
          "197:         $languageId = $request->getQueryParams()['L'] ?? $request->getParsedBody()['L'] ?? null;",
          "198:         if ($languageId === null) {",
          "199:             return null;",
          "200:         }",
          "201:         return (int)$languageId < 0 ? null : (int)$languageId;",
          "202:     }",
          "207:     protected function canonicalizeUri(UriInterface $uri, ServerRequestInterface $request): UriInterface",
          "208:     {",
          "209:         if ($uri->getPath() === '') {",
          "210:             return $uri;",
          "211:         }",
          "213:         $normalizedParams = $request->getAttribute('normalizedParams');",
          "214:         if (!$normalizedParams instanceof NormalizedParams) {",
          "215:             return $uri;",
          "216:         }",
          "218:         $urlPath = ltrim($uri->getPath(), '/');",
          "219:         $scriptName = ltrim($normalizedParams->getScriptName(), '/');",
          "220:         $scriptPath = ltrim($normalizedParams->getSitePath(), '/');",
          "221:         if ($scriptName !== '' && str_starts_with($urlPath, $scriptName)) {",
          "222:             $urlPath = '/' . $scriptPath . substr($urlPath, mb_strlen($scriptName));",
          "223:             $uri = $uri->withPath($urlPath);",
          "224:         }",
          "226:         return $uri;",
          "227:     }",
          "229:     protected function matchSiteByUri(UriInterface $uri, ServerRequestInterface $request): SiteRouteResult",
          "230:     {",
          "231:         $collection = $this->getRouteCollectionForAllSites();",
          "232:         $requestContext = $this->requestContextFactory->fromUri($uri, $request->getMethod());",
          "233:         $matcher = new BestUrlMatcher($collection, $requestContext);",
          "234:         try {",
          "236:             $match = $matcher->match($uri->getPath());",
          "237:             return new SiteRouteResult(",
          "238:                 $uri,",
          "239:                 $match['site'],",
          "240:                 $match['language'],",
          "241:                 $match['tail']",
          "242:             );",
          "243:         } catch (NoConfigurationException | ResourceNotFoundException) {",
          "244:             return new SiteRouteResult($uri, new NullSite(), null, '');",
          "245:         }",
          "246:     }",
          "248:     protected function matchSiteByQueryParams(",
          "249:         int $pageId,",
          "250:         int $languageId,",
          "251:         SiteRouteResult $fallback,",
          "252:         UriInterface $uri,",
          "253:     ): SiteRouteResult {",
          "254:         try {",
          "255:             $site = $this->finder->getSiteByPageId($pageId);",
          "256:         } catch (SiteNotFoundException) {",
          "257:             return $fallback;",
          "258:         }",
          "260:         try {",
          "262:             $language = $site->getLanguageById($languageId);",
          "263:         } catch (\\InvalidArgumentException) {",
          "264:             return $fallback;",
          "265:         }",
          "267:         return new SiteRouteResult($uri, $site, $language);",
          "268:     }",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Classes/Routing/SiteRouteResult.php||typo3/sysext/core/Classes/Routing/SiteRouteResult.php": [
          "File: typo3/sysext/core/Classes/Routing/SiteRouteResult.php -> typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:         return in_array($offset, $this->validProperties, true) || isset($this->data[$offset]);",
          "96:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:     public function withLanguage(SiteLanguage $language): self",
          "102:     {",
          "103:         $clone = clone $this;",
          "104:         $clone->language = $language;",
          "106:         return $clone;",
          "107:     }",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Configuration/DefaultConfiguration.php||typo3/sysext/core/Configuration/DefaultConfiguration.php": [
          "File: typo3/sysext/core/Configuration/DefaultConfiguration.php -> typo3/sysext/core/Configuration/DefaultConfiguration.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:             'security.backend.htmlSanitizeRte' => false,",
          "76:             'security.backend.enforceReferrer' => true,",
          "77:             'security.frontend.enforceContentSecurityPolicy' => false,",
          "78:             'security.usePasswordPolicyForFrontendUsers' => false,",
          "79:         ],",
          "80:         'createGroup' => '',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:             'security.frontend.allowInsecureSiteResolutionByQueryParameters' => false,",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php||typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php": [
          "File: typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php -> typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace TYPO3\\CMS\\Core\\Tests\\Unit\\Routing;",
          "20: use TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration;",
          "21: use TYPO3\\CMS\\Core\\Http\\ServerRequest;",
          "22: use TYPO3\\CMS\\Core\\Routing\\BackendEntryPointResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: use PHPUnit\\Framework\\MockObject\\MockObject;",
          "21: use TYPO3\\CMS\\Core\\Configuration\\Features;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:                 ],",
          "75:             ],",
          "76:         ]);",
          "77:         $finderMock = $this->createSiteFinder($site, $secondSite);",
          "78:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
          "81:         $request = new ServerRequest('http://9-5.typo3.test/da/my-page/');",
          "",
          "[Removed Lines]",
          "79:         $subject = new SiteMatcher($finderMock, $requestContextFactory);",
          "",
          "[Added Lines]",
          "79:         $featuresMock = $this->createFeaturesMock();",
          "82:         $subject = new SiteMatcher($featuresMock, $finderMock, $requestContextFactory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:                 ],",
          "172:             ],",
          "173:         ]);",
          "174:         $finderMock = $this->createSiteFinder($site, $secondSite);",
          "175:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
          "178:         $request = new ServerRequest('https://www.example.com/de');",
          "",
          "[Removed Lines]",
          "176:         $subject = new SiteMatcher($finderMock, $requestContextFactory);",
          "",
          "[Added Lines]",
          "177:         $featuresMock = $this->createFeaturesMock();",
          "180:         $subject = new SiteMatcher($featuresMock, $finderMock, $requestContextFactory);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:             ],",
          "254:         ]);",
          "256:         $finderMock = $this->createSiteFinder($mainSite, $dkSite, $frSite);",
          "257:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
          "260:         $request = new ServerRequest($requestUri);",
          "",
          "[Removed Lines]",
          "258:         $subject = new SiteMatcher($finderMock, $requestContextFactory);",
          "",
          "[Added Lines]",
          "260:         $featuresMock = $this->createFeaturesMock();",
          "263:         $subject = new SiteMatcher($featuresMock, $finderMock, $requestContextFactory);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "265:         self::assertSame($expectedLocale, (string)$result->getLanguage()->getLocale());",
          "266:     }",
          "268:     private function createSiteFinder(Site ...$sites): SiteFinder",
          "269:     {",
          "270:         $siteConfiguration = new class ($sites) extends SiteConfiguration {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273:     private function createFeaturesMock(): MockObject&Features",
          "274:     {",
          "275:         $mock = $this->getMockBuilder(Features::class)",
          "276:             ->onlyMethods(['isFeatureEnabled'])",
          "277:             ->getMock();",
          "278:         $mock->expects(self::any())",
          "279:             ->method('isFeatureEnabled')",
          "280:             ->with('security.frontend.allowInsecureSiteResolutionByQueryParameters')",
          "281:             ->willReturn(false);",
          "282:         return $mock;",
          "283:     }",
          "",
          "---------------"
        ],
        "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php": [
          "File: typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php -> typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: declare(strict_types=1);",
          "18: namespace TYPO3\\CMS\\Frontend\\Tests\\Functional\\SiteHandling;",
          "20: use TYPO3\\CMS\\Core\\Core\\Bootstrap;",
          "21: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerFactory;",
          "22: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerWriter;",
          "23: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\Frontend\\InternalRequest;",
          "25: final class SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest extends AbstractTestCase",
          "26: {",
          "27:     protected array $configurationToUseInTestInstance = [",
          "28:         'SYS' => [",
          "29:             'devIPmask' => '123.123.123.123',",
          "30:             'encryptionKey' => '4408d27a916d51e624b69af3554f516dbab61037a9f7b9fd6f81b4d3bedeccb6',",
          "31:             'features' => [",
          "32:                 'security.frontend.allowInsecureSiteResolutionByQueryParameters' => false,",
          "33:             ],",
          "34:         ],",
          "35:         'FE' => [",
          "36:             'cacheHash' => [",
          "37:                 'requireCacheHashPresenceParameters' => ['value', 'testing[value]', 'tx_testing_link[value]'],",
          "38:                 'excludedParameters' => ['L', 'tx_testing_link[excludedValue]'],",
          "39:                 'enforceValidation' => true,",
          "40:             ],",
          "41:             'debug' => false,",
          "42:         ],",
          "43:     ];",
          "45:     protected function setUp(): void",
          "46:     {",
          "47:         parent::setUp();",
          "48:         $this->withDatabaseSnapshot(function () {",
          "49:             $this->importCSVDataSet(__DIR__ . '/../Fixtures/be_users.csv');",
          "50:             $backendUser = $this->setUpBackendUser(1);",
          "51:             Bootstrap::initializeLanguageObject();",
          "52:             $scenarioFile = __DIR__ . '/Fixtures/SlugScenario.yaml';",
          "53:             $factory = DataHandlerFactory::fromYamlFile($scenarioFile);",
          "54:             $writer = DataHandlerWriter::withBackendUser($backendUser);",
          "55:             $writer->invokeFactory($factory);",
          "56:             static::failIfArrayIsNotEmpty($writer->getErrors());",
          "57:             $this->setUpFrontendRootPage(",
          "58:                 1000,",
          "59:                 [",
          "60:                     'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',",
          "61:                     'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',",
          "62:                 ],",
          "63:                 [",
          "64:                     'title' => 'ACME Root',",
          "65:                 ]",
          "66:             );",
          "67:             $this->setUpFrontendRootPage(",
          "68:                 3000,",
          "69:                 [",
          "70:                     'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',",
          "71:                     'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',",
          "72:                 ],",
          "73:                 [",
          "74:                     'title' => 'ACME Archive',",
          "75:                 ]",
          "76:             );",
          "77:         });",
          "78:     }",
          "80:     public static function siteWithPageIdRequestsAreCorrectlyHandledDataProvider(): \\Generator",
          "81:     {",
          "82:         yield 'valid same-site request is redirected' => ['https://website.local/?id=1000&L=0', 307];",
          "83:         yield 'valid same-site request is processed' => ['https://website.local/?id=1100&L=0', 200];",
          "84:         yield 'invalid off-site request with unknown domain is denied' => ['https://otherdomain.website.local/?id=3000&L=0', 404];",
          "85:         yield 'invalid off-site request with unknown domain and without L parameter is denied' => ['https://otherdomain.website.local/?id=3000', 404];",
          "86:         yield 'invalid cross-site request without L parameter is denied' => ['https://website.local/?id=3000', 404];",
          "87:         yield 'invalid cross-site request *not* denied' => ['https://website.local/?id=3000&L=0', 404];",
          "88:     }",
          "94:     public function siteWithPageIdRequestsAreCorrectlyHandled(string $uri, int $expectation): void",
          "95:     {",
          "96:         $this->writeSiteConfiguration(",
          "97:             'website-local',",
          "98:             $this->buildSiteConfiguration(1000, 'https://website.local/'),",
          "99:             [",
          "100:                 $this->buildDefaultLanguageConfiguration('EN', '/'),",
          "101:             ],",
          "102:             $this->buildErrorHandlingConfiguration('Fluid', [404])",
          "103:         );",
          "104:         $this->writeSiteConfiguration(",
          "105:             'archive-acme-com',",
          "106:             $this->buildSiteConfiguration(3000, 'https://archive.acme.com/'),",
          "107:             [",
          "108:                 $this->buildDefaultLanguageConfiguration('EN', '/'),",
          "109:             ],",
          "110:             $this->buildErrorHandlingConfiguration('Fluid', [404])",
          "111:         );",
          "113:         $response = $this->executeFrontendSubRequest(new InternalRequest($uri));",
          "114:         self::assertSame($expectation, $response->getStatusCode());",
          "115:     }",
          "116: }",
          "",
          "---------------"
        ],
        "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php": [
          "File: typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php -> typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: declare(strict_types=1);",
          "18: namespace TYPO3\\CMS\\Frontend\\Tests\\Functional\\SiteHandling;",
          "20: use TYPO3\\CMS\\Core\\Core\\Bootstrap;",
          "21: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerFactory;",
          "22: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerWriter;",
          "23: use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\Frontend\\InternalRequest;",
          "25: final class SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest extends AbstractTestCase",
          "26: {",
          "27:     protected array $configurationToUseInTestInstance = [",
          "28:         'SYS' => [",
          "29:             'devIPmask' => '123.123.123.123',",
          "30:             'encryptionKey' => '4408d27a916d51e624b69af3554f516dbab61037a9f7b9fd6f81b4d3bedeccb6',",
          "31:             'features' => [",
          "32:                 'security.frontend.allowInsecureSiteResolutionByQueryParameters' => true,",
          "33:             ],",
          "34:         ],",
          "35:         'FE' => [",
          "36:             'cacheHash' => [",
          "37:                 'requireCacheHashPresenceParameters' => ['value', 'testing[value]', 'tx_testing_link[value]'],",
          "38:                 'excludedParameters' => ['L', 'tx_testing_link[excludedValue]'],",
          "39:                 'enforceValidation' => true,",
          "40:             ],",
          "41:             'debug' => false,",
          "42:         ],",
          "43:     ];",
          "45:     protected function setUp(): void",
          "46:     {",
          "47:         parent::setUp();",
          "48:         $this->withDatabaseSnapshot(function () {",
          "49:             $this->importCSVDataSet(__DIR__ . '/../Fixtures/be_users.csv');",
          "50:             $backendUser = $this->setUpBackendUser(1);",
          "51:             Bootstrap::initializeLanguageObject();",
          "52:             $scenarioFile = __DIR__ . '/Fixtures/SlugScenario.yaml';",
          "53:             $factory = DataHandlerFactory::fromYamlFile($scenarioFile);",
          "54:             $writer = DataHandlerWriter::withBackendUser($backendUser);",
          "55:             $writer->invokeFactory($factory);",
          "56:             static::failIfArrayIsNotEmpty($writer->getErrors());",
          "57:             $this->setUpFrontendRootPage(",
          "58:                 1000,",
          "59:                 [",
          "60:                     'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',",
          "61:                     'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',",
          "62:                 ],",
          "63:                 [",
          "64:                     'title' => 'ACME Root',",
          "65:                 ]",
          "66:             );",
          "67:             $this->setUpFrontendRootPage(",
          "68:                 3000,",
          "69:                 [",
          "70:                     'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',",
          "71:                     'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',",
          "72:                 ],",
          "73:                 [",
          "74:                     'title' => 'ACME Archive',",
          "75:                 ]",
          "76:             );",
          "77:         });",
          "78:     }",
          "80:     public static function siteWithPageIdRequestsAreCorrectlyHandledDataProvider(): \\Generator",
          "81:     {",
          "82:         yield 'valid same-site request is redirected' => ['https://website.local/?id=1000&L=0', 307];",
          "83:         yield 'valid same-site request is processed' => ['https://website.local/?id=1100&L=0', 200];",
          "85:         yield 'invalid off-site request with unknown domain is denied' => ['https://otherdomain.website.local/?id=3000&L=0', 200];",
          "86:         yield 'invalid off-site request with unknown domain and without L parameter is denied' => ['https://otherdomain.website.local/?id=3000', 404];",
          "87:         yield 'invalid cross-site request without L parameter is denied' => ['https://website.local/?id=3000', 404];",
          "89:         yield 'invalid cross-site request *not* denied' => ['https://website.local/?id=3000&L=0', 200];",
          "90:     }",
          "96:     public function siteWithPageIdRequestsAreCorrectlyHandled(string $uri, int $expectation): void",
          "97:     {",
          "98:         $this->writeSiteConfiguration(",
          "99:             'website-local',",
          "100:             $this->buildSiteConfiguration(1000, 'https://website.local/'),",
          "101:             [",
          "102:                 $this->buildDefaultLanguageConfiguration('EN', '/'),",
          "103:             ],",
          "104:             $this->buildErrorHandlingConfiguration('Fluid', [404])",
          "105:         );",
          "106:         $this->writeSiteConfiguration(",
          "107:             'archive-acme-com',",
          "108:             $this->buildSiteConfiguration(3000, 'https://archive.acme.com/'),",
          "109:             [",
          "110:                 $this->buildDefaultLanguageConfiguration('EN', '/'),",
          "111:             ],",
          "112:             $this->buildErrorHandlingConfiguration('Fluid', [404])",
          "113:         );",
          "115:         $response = $this->executeFrontendSubRequest(new InternalRequest($uri));",
          "116:         self::assertSame($expectation, $response->getStatusCode());",
          "117:     }",
          "118: }",
          "",
          "---------------"
        ],
        "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php||typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php": [
          "File: typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php -> typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:     {",
          "274:         yield 'valid same-site request is redirected' => ['https://website.local/?id=1000&L=0', 307];",
          "275:         yield 'valid same-site request is processed' => ['https://website.local/?id=1100&L=0', 200];",
          "276:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:         yield 'invalid off-site request with unknown domain is denied' => ['https://otherdomain.website.local/?id=3000&L=0', 404];",
          "277:         yield 'invalid off-site request with unknown domain and without L parameter is denied' => ['https://otherdomain.website.local/?id=3000', 404];",
          "",
          "---------------"
        ],
        "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php||typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php": [
          "File: typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php -> typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace TYPO3\\CMS\\Frontend\\Tests\\Unit\\Middleware;",
          "20: use Psr\\Http\\Message\\ResponseInterface;",
          "21: use Psr\\Http\\Message\\ServerRequestInterface;",
          "22: use Psr\\Http\\Server\\RequestHandlerInterface;",
          "23: use TYPO3\\CMS\\Core\\Cache\\CacheManager;",
          "24: use TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration;",
          "25: use TYPO3\\CMS\\Core\\Http\\JsonResponse;",
          "26: use TYPO3\\CMS\\Core\\Http\\NullResponse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: use PHPUnit\\Framework\\MockObject\\MockObject;",
          "25: use TYPO3\\CMS\\Core\\Configuration\\Features;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:                 ],",
          "108:             ],",
          "109:         ]));",
          "110:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
          "113:         $request = new ServerRequest($incomingUrl, 'GET');",
          "114:         $response = $subject->process($request, $this->siteFoundRequestHandler);",
          "",
          "[Removed Lines]",
          "111:         $subject = new SiteResolver(new SiteMatcher($siteFinder, $requestContextFactory));",
          "",
          "[Added Lines]",
          "112:         $featuresMock = $this->createFeaturesMock();",
          "114:         $subject = new SiteResolver(new SiteMatcher($featuresMock, $siteFinder, $requestContextFactory));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:             ]),",
          "162:         );",
          "164:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
          "167:         $request = new ServerRequest($incomingUrl, 'GET');",
          "168:         $response = $subject->process($request, $this->siteFoundRequestHandler);",
          "",
          "[Removed Lines]",
          "165:         $subject = new SiteResolver(new SiteMatcher($siteFinder, $requestContextFactory));",
          "",
          "[Added Lines]",
          "167:         $featuresMock = $this->createFeaturesMock();",
          "169:         $subject = new SiteResolver(new SiteMatcher($featuresMock, $siteFinder, $requestContextFactory));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "252:             ]),",
          "253:         );",
          "255:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
          "258:         $request = new ServerRequest($incomingUrl, 'GET');",
          "259:         $response = $subject->process($request, $this->siteFoundRequestHandler);",
          "",
          "[Removed Lines]",
          "256:         $subject = new SiteResolver(new SiteMatcher($siteFinder, $requestContextFactory));",
          "",
          "[Added Lines]",
          "259:         $featuresMock = $this->createFeaturesMock();",
          "261:         $subject = new SiteResolver(new SiteMatcher($featuresMock, $siteFinder, $requestContextFactory));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "363:             ]),",
          "364:         );",
          "366:         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());",
          "369:         $request = new ServerRequest($incomingUrl, 'GET');",
          "370:         $response = $subject->process($request, $this->siteFoundRequestHandler);",
          "",
          "[Removed Lines]",
          "367:         $subject = new SiteResolver(new SiteMatcher($siteFinder, $requestContextFactory));",
          "",
          "[Added Lines]",
          "371:         $featuresMock = $this->createFeaturesMock();",
          "373:         $subject = new SiteResolver(new SiteMatcher($featuresMock, $siteFinder, $requestContextFactory));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "381:         }",
          "382:     }",
          "384:     private function createSiteFinder(Site ...$sites): SiteFinder",
          "385:     {",
          "386:         $siteConfiguration = new class ($sites) extends SiteConfiguration {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:     private function createFeaturesMock(): MockObject&Features",
          "391:     {",
          "392:         $mock = $this->getMockBuilder(Features::class)",
          "393:             ->onlyMethods(['isFeatureEnabled'])",
          "394:             ->getMock();",
          "395:         $mock->expects(self::any())",
          "396:             ->method('isFeatureEnabled')",
          "397:             ->with('security.frontend.allowInsecureSiteResolutionByQueryParameters')",
          "398:             ->willReturn(false);",
          "399:         return $mock;",
          "400:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}