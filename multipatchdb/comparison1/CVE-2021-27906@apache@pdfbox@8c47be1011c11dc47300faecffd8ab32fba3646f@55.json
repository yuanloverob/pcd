{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c9a732f3d2046d9568f65c9e374bed42e4a04765",
      "candidate_info": {
        "commit_hash": "c9a732f3d2046d9568f65c9e374bed42e4a04765",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/c9a732f3d2046d9568f65c9e374bed42e4a04765",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java"
        ],
        "message": "PDFBOX-4941: increment index when going through export values; expand test\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881150 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:                 {",
          "117:                     selectedExportValues.add(exportValues.get(idx));",
          "118:                 }",
          "119:             }",
          "120:             return selectedExportValues;",
          "121:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:                 ++idx;",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import junit.framework.TestSuite;",
          "27: import org.apache.pdfbox.cos.COSArray;",
          "28: import org.apache.pdfbox.cos.COSName;",
          "29: import org.apache.pdfbox.pdmodel.PDDocument;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.pdfbox.cos.COSDictionary;",
          "31: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;",
          "32: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary;",
          "33: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry;",
          "34: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:             options.add(\"Value02\");",
          "93:             radioButton.setExportValues(options);",
          "95:             COSArray optItem = (COSArray) radioButton.getCOSObject().getItem(COSName.OPT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:             List<PDAnnotationWidget> widgets = new ArrayList<PDAnnotationWidget>();",
          "102:             for (int i = 0; i < options.size(); i++)",
          "103:             {",
          "104:                 PDAnnotationWidget widget = new PDAnnotationWidget();",
          "105:                 COSDictionary apNDict = new COSDictionary();",
          "106:                 apNDict.setItem(COSName.Off, new PDAppearanceStream(doc));",
          "107:                 apNDict.setItem(options.get(i), new PDAppearanceStream(doc));",
          "109:                 PDAppearanceDictionary appearance = new PDAppearanceDictionary();",
          "110:                 PDAppearanceEntry appearanceNEntry = new PDAppearanceEntry(apNDict);",
          "111:                 appearance.setNormalAppearance(appearanceNEntry);",
          "112:                 widget.setAppearance(appearance);",
          "113:                 widget.setAppearanceState(\"Off\");",
          "114:                 widgets.add(widget);",
          "115:             }",
          "116:             radioButton.setWidgets(widgets);",
          "118:             radioButton.setValue(\"Value01\");",
          "119:             assertEquals(\"Value01\", radioButton.getValue());",
          "120:             assertEquals(1, radioButton.getSelectedExportValues().size());",
          "121:             assertEquals(\"Value01\", radioButton.getSelectedExportValues().get(0));",
          "122:             assertEquals(\"Value01\", widgets.get(0).getAppearanceState().getName());",
          "123:             assertEquals(\"Off\", widgets.get(1).getAppearanceState().getName());",
          "125:             radioButton.setValue(\"Value02\");",
          "126:             assertEquals(\"Value02\", radioButton.getValue());",
          "127:             assertEquals(1, radioButton.getSelectedExportValues().size());",
          "128:             assertEquals(\"Value02\", radioButton.getSelectedExportValues().get(0));",
          "129:             assertEquals(\"Off\", widgets.get(0).getAppearanceState().getName());",
          "130:             assertEquals(\"Value02\", widgets.get(1).getAppearanceState().getName());",
          "132:             radioButton.setValue(\"Off\");",
          "133:             assertEquals(\"Off\", radioButton.getValue());",
          "134:             assertEquals(0, radioButton.getSelectedExportValues().size());",
          "135:             assertEquals(\"Off\", widgets.get(0).getAppearanceState().getName());",
          "136:             assertEquals(\"Off\", widgets.get(1).getAppearanceState().getName());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b178c2882b7907400005bfa909a1885da1b26ab",
      "candidate_info": {
        "commit_hash": "9b178c2882b7907400005bfa909a1885da1b26ab",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9b178c2882b7907400005bfa909a1885da1b26ab",
        "files": [
          "xmpbox/src/main/java/org/apache/xmpbox/type/ComplexPropertyContainer.java"
        ],
        "message": "PDFBOX-4892: remove unneeded check, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887589 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "xmpbox/src/main/java/org/apache/xmpbox/type/ComplexPropertyContainer.java||xmpbox/src/main/java/org/apache/xmpbox/type/ComplexPropertyContainer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "xmpbox/src/main/java/org/apache/xmpbox/type/ComplexPropertyContainer.java||xmpbox/src/main/java/org/apache/xmpbox/type/ComplexPropertyContainer.java": [
          "File: xmpbox/src/main/java/org/apache/xmpbox/type/ComplexPropertyContainer.java -> xmpbox/src/main/java/org/apache/xmpbox/type/ComplexPropertyContainer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     public void addProperty(AbstractField obj)",
          "81:     {",
          "86:         properties.add(obj);",
          "87:     }",
          "",
          "[Removed Lines]",
          "82:         if (containsProperty(obj))",
          "83:         {",
          "84:             removeProperty(obj);",
          "85:         }",
          "",
          "[Added Lines]",
          "82:         removeProperty(obj);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:     public void removeProperty(AbstractField property)",
          "191:     {",
          "196:     }",
          "",
          "[Removed Lines]",
          "192:         if (containsProperty(property))",
          "193:         {",
          "194:             properties.remove(property);",
          "195:         }",
          "",
          "[Added Lines]",
          "189:         properties.remove(property);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2546bcbff0c364556910fc3360d8018c345168d7",
      "candidate_info": {
        "commit_hash": "2546bcbff0c364556910fc3360d8018c345168d7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/2546bcbff0c364556910fc3360d8018c345168d7",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java"
        ],
        "message": "PDFBOX-4297: use the new method to get the signature contents\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882385 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java||examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java||examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:                 for (PDSignature sig : document.getSignatureDictionaries())",
          "135:                 {",
          "136:                     COSDictionary sigDict = sig.getCOSObject();",
          "140:                     FileInputStream fis = new FileInputStream(infile);",
          "",
          "[Removed Lines]",
          "137:                     COSString contents = (COSString) sigDict.getDictionaryObject(COSName.CONTENTS);",
          "",
          "[Added Lines]",
          "137:                     byte[] contents = sig.getContents();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:                         else if (subFilter.equals(\"adbe.pkcs7.sha1\"))",
          "170:                         {",
          "173:                             CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");",
          "175:                             Collection<? extends Certificate> certs = factory.generateCertificates(certStream);",
          "176:                             System.out.println(\"certs=\" + certs);",
          "",
          "[Removed Lines]",
          "172:                             byte[] certData = contents.getBytes();",
          "174:                             ByteArrayInputStream certStream = new ByteArrayInputStream(certData);",
          "",
          "[Added Lines]",
          "173:                             ByteArrayInputStream certStream = new ByteArrayInputStream(contents);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260:                         long fileLen = infile.length();",
          "261:                         long rangeMax = byteRange[2] + (long) byteRange[3];",
          "264:                         if (fileLen != rangeMax || byteRange[0] != 0 || byteRange[1] + contentLen != byteRange[2])",
          "265:                         {",
          "",
          "[Removed Lines]",
          "263:                         int contentLen = contents.getString().length() * 2 + 2;",
          "",
          "[Added Lines]",
          "262:                         int contentLen = contents.length * 2 + 2;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "296:         }",
          "297:     }",
          "300:     {",
          "",
          "[Removed Lines]",
          "299:     private void checkContentValueWithFile(File file, int[] byteRange, COSString contents) throws IOException",
          "",
          "[Added Lines]",
          "298:     private void checkContentValueWithFile(File file, int[] byteRange, byte[] contents) throws IOException",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "310:             System.err.println(\"'<' expected at offset \" + byteRange[1] + \", but got \" + (char) c);",
          "311:         }",
          "312:         byte[] contentFromFile = raf.readFully(byteRange[2] - byteRange[1] - 2);",
          "314:         if (contentFromFile.length != contentAsHex.length)",
          "315:         {",
          "316:             System.err.println(\"Raw content length from file is \" +",
          "",
          "[Removed Lines]",
          "313:         byte[] contentAsHex = Hex.getString(contents.getBytes()).getBytes(Charsets.US_ASCII);",
          "",
          "[Added Lines]",
          "312:         byte[] contentAsHex = Hex.getString(contents).getBytes(Charsets.US_ASCII);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "348:         raf.close();",
          "349:     }",
          "352:             throws CertificateException, CMSException, IOException, OperatorCreationException,",
          "353:             TSPException, NoSuchAlgorithmException, CertificateVerificationException",
          "354:     {",
          "356:         System.out.println(\"Time stamp gen time: \" + timeStampToken.getTimeStampInfo().getGenTime());",
          "357:         System.out.println(\"Time stamp tsa name: \" + timeStampToken.getTimeStampInfo().getTsa().getName());",
          "359:         CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");",
          "361:         Collection<? extends Certificate> certs = factory.generateCertificates(certStream);",
          "362:         System.out.println(\"certs=\" + certs);",
          "",
          "[Removed Lines]",
          "351:     private void verifyETSIdotRFC3161(byte[] buf, COSString contents)",
          "355:         TimeStampToken timeStampToken = new TimeStampToken(new CMSSignedData(contents.getBytes()));",
          "360:         ByteArrayInputStream certStream = new ByteArrayInputStream(contents.getBytes());",
          "",
          "[Added Lines]",
          "350:     private void verifyETSIdotRFC3161(byte[] buf, byte[] contents)",
          "354:         TimeStampToken timeStampToken = new TimeStampToken(new CMSSignedData(contents));",
          "359:         ByteArrayInputStream certStream = new ByteArrayInputStream(contents);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "397:             throws CMSException, OperatorCreationException,",
          "398:                    IOException, GeneralSecurityException, TSPException, CertificateVerificationException",
          "399:     {",
          "",
          "[Removed Lines]",
          "396:     private void verifyPKCS7(byte[] byteArray, COSString contents, PDSignature sig)",
          "",
          "[Added Lines]",
          "395:     private void verifyPKCS7(byte[] byteArray, byte[] contents, PDSignature sig)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "403:         CMSProcessable signedContent = new CMSProcessableByteArray(byteArray);",
          "405:         @SuppressWarnings(\"unchecked\")",
          "406:         Store<X509CertificateHolder> certificatesStore = signedData.getCertificates();",
          "407:         if (certificatesStore.getMatches(null).isEmpty())",
          "",
          "[Removed Lines]",
          "404:         CMSSignedData signedData = new CMSSignedData(signedContent, contents.getBytes());",
          "",
          "[Added Lines]",
          "403:         CMSSignedData signedData = new CMSSignedData(signedContent, contents);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e5c054e750b48150bb92151036d6d9f9f41e78b",
      "candidate_info": {
        "commit_hash": "9e5c054e750b48150bb92151036d6d9f9f41e78b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9e5c054e750b48150bb92151036d6d9f9f41e78b",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java"
        ],
        "message": "PDFBOX-4847: revert insertion of getter that isn't used because it is unreliable on openjdk, but leave a comment\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881106 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:         return COSName.ICCBASED.getName();",
          "183:     }",
          "",
          "[Removed Lines]",
          "190:     public boolean issRGB()",
          "191:     {",
          "192:         return isRGB;",
          "193:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f05e0d67a540527a0de35e320a1f7d85feffe3a",
      "candidate_info": {
        "commit_hash": "6f05e0d67a540527a0de35e320a1f7d85feffe3a",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6f05e0d67a540527a0de35e320a1f7d85feffe3a",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/ui/ZoomMenu.java"
        ],
        "message": "PDFBOX-4892: simplify code, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888614 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/ui/ZoomMenu.java||debugger/src/main/java/org/apache/pdfbox/debugger/ui/ZoomMenu.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/ui/ZoomMenu.java||debugger/src/main/java/org/apache/pdfbox/debugger/ui/ZoomMenu.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/ui/ZoomMenu.java -> debugger/src/main/java/org/apache/pdfbox/debugger/ui/ZoomMenu.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     public void changeZoomSelection(float zoomValue)",
          "90:     {",
          "92:         for (Component comp : menu.getMenuComponents())",
          "93:         {",
          "96:             {",
          "97:                 menuItem.setSelected(true);",
          "98:                 return;",
          "99:             }",
          "100:         }",
          "102:     }",
          "",
          "[Removed Lines]",
          "91:         String selection = (int)(zoomValue*100) +\"%\";",
          "94:             JRadioButtonMenuItem menuItem = (JRadioButtonMenuItem) comp;",
          "95:             if (menuItem.getText().equals(selection))",
          "101:         throw new IllegalArgumentException(\"no zoom menu item found for: \" + selection);",
          "",
          "[Added Lines]",
          "91:         int selection = (int) (zoomValue * 100);",
          "94:             ZoomMenuItem menuItem = (ZoomMenuItem) comp;",
          "95:             if (menuItem.zoom == selection)",
          "101:         throw new IllegalArgumentException(\"no zoom menu item found for: \" + selection + \"%\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}