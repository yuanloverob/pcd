{
  "cve_id": "CVE-2023-32695",
  "cve_desc": "socket.io parser is a socket.io encoder and decoder written in JavaScript complying with version 5 of socket.io-protocol. A specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process. A patch has been released in version 4.2.3.\n\n",
  "repo": "socketio/socket.io-parser",
  "patch_hash": "3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3",
  "patch_info": {
    "commit_hash": "3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3",
    "repo": "socketio/socket.io-parser",
    "commit_url": "https://github.com/socketio/socket.io-parser/commit/3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3",
    "files": [
      "lib/index.ts",
      "test/parser.js"
    ],
    "message": "fix: check the format of the event name\n\nA packet like '2[{\"toString\":\"foo\"}]' was decoded as:\n\n{\n  type: EVENT,\n  data: [ { \"toString\": \"foo\" } ]\n}\n\nWhich would then throw an error when passed to the EventEmitter class:\n\n> TypeError: Cannot convert object to primitive value\n>    at Socket.emit (node:events:507:25)\n>    at .../node_modules/socket.io/lib/socket.js:531:14\n\nHistory of the isPayloadValid() method:\n\n- added in [78f9fc2](https://github.com/socketio/socket.io-parser/commit/78f9fc2999b15804b02f2c22a2b4007734a26af9) (v4.0.1, socket.io@3.0.0)\n- updated in [1c220dd](https://github.com/socketio/socket.io-parser/commit/1c220ddbf45ea4b44bc8dbf6f9ae245f672ba1b9) (v4.0.4, socket.io@3.1.0)",
    "before_after_code_files": [
      "lib/index.ts||lib/index.ts",
      "test/parser.js||test/parser.js"
    ]
  },
  "patch_diff": {
    "lib/index.ts||lib/index.ts": [
      "File: lib/index.ts -> lib/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "275:         return typeof payload === \"string\" || typeof payload === \"object\";",
      "276:       case PacketType.EVENT:",
      "277:       case PacketType.BINARY_EVENT:",
      "279:       case PacketType.ACK:",
      "280:       case PacketType.BINARY_ACK:",
      "281:         return Array.isArray(payload);",
      "",
      "[Removed Lines]",
      "278:         return Array.isArray(payload) && payload.length > 0;",
      "",
      "[Added Lines]",
      "278:         return (",
      "279:           Array.isArray(payload) &&",
      "280:           (typeof payload[0] === \"string\" || typeof payload[0] === \"number\")",
      "281:         );",
      "",
      "---------------"
    ],
    "test/parser.js||test/parser.js": [
      "File: test/parser.js -> test/parser.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:     isInvalidPayload(\"1/admin,{}\");",
      "119:     isInvalidPayload('2/admin,\"invalid');",
      "120:     isInvalidPayload(\"2/admin,{}\");",
      "122:     expect(() => new Decoder().add(\"999\")).to.throwException(",
      "123:       /^unknown packet type 9$/",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:     isInvalidPayload('2[{\"toString\":\"foo\"}]');",
      "122:     isInvalidPayload('2[true,\"foo\"]');",
      "123:     isInvalidPayload('2[null,\"bar\"]');",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee006607495eca4ec7262ad080dd3a91439a5ba4",
      "candidate_info": {
        "commit_hash": "ee006607495eca4ec7262ad080dd3a91439a5ba4",
        "repo": "socketio/socket.io-parser",
        "commit_url": "https://github.com/socketio/socket.io-parser/commit/ee006607495eca4ec7262ad080dd3a91439a5ba4",
        "files": [
          "index.js",
          "test/arraybuffer.js",
          "test/parser.js"
        ],
        "message": "fix: check the format of the event name (#125)\n\nA packet like '2[{\"toString\":\"foo\"}]' was decoded as:\n\n{\n  type: EVENT,\n  data: [ { \"toString\": \"foo\" } ]\n}\n\nWhich would then throw an error when passed to the EventEmitter class:\n\n> TypeError: Cannot convert object to primitive value\n>    at Socket.emit (node:events:507:25)\n>    at .../node_modules/socket.io/lib/socket.js:531:14\n\nBackported from https://github.com/socketio/socket.io-parser/commit/3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3",
        "before_after_code_files": [
          "index.js||index.js",
          "test/arraybuffer.js||test/arraybuffer.js",
          "test/parser.js||test/parser.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "test/parser.js||test/parser.js"
          ],
          "candidate": [
            "test/parser.js||test/parser.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:   }",
          "269: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271: function isPayloadValid(type, payload) {",
          "272:   switch (type) {",
          "273:     case 0: // CONNECT",
          "274:       return typeof payload === \"object\";",
          "275:     case 1: // DISCONNECT",
          "276:       return payload === undefined;",
          "277:     case 4: // ERROR",
          "278:       return typeof payload === \"string\" || typeof payload === \"object\";",
          "279:     case 2: // EVENT",
          "280:     case 5: // BINARY_EVENT",
          "281:       return (",
          "282:         isArray(payload) &&",
          "283:         (typeof payload[0] === \"string\" || typeof payload[0] === \"number\")",
          "284:       );",
          "285:     case 3: // ACK",
          "286:     case 6: // BINARY_ACK",
          "287:       return isArray(payload);",
          "288:   }",
          "289: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:   if (str.charAt(++i)) {",
          "331:     var payload = tryParse(str.substr(i));",
          "334:       p.data = payload;",
          "335:     } else {",
          "337:     }",
          "338:   }",
          "",
          "[Removed Lines]",
          "332:     var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));",
          "333:     if (isPayloadValid) {",
          "336:       return error('invalid payload');",
          "",
          "[Added Lines]",
          "352:     if (isPayloadValid(p.type, payload)) {",
          "355:       throw new Error(\"invalid payload\");",
          "",
          "---------------"
        ],
        "test/arraybuffer.js||test/arraybuffer.js": [
          "File: test/arraybuffer.js -> test/arraybuffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   it('cleans itself up on close', function() {",
          "51:     var packet = {",
          "52:       type: parser.BINARY_EVENT,",
          "54:       id: 0,",
          "55:       nsp: '/'",
          "56:     };",
          "",
          "[Removed Lines]",
          "53:       data: [new ArrayBuffer(2), new ArrayBuffer(3)],",
          "",
          "[Added Lines]",
          "53:       data: [\"foo\", new ArrayBuffer(2), new ArrayBuffer(3)],",
          "",
          "---------------"
        ],
        "test/parser.js||test/parser.js": [
          "File: test/parser.js -> test/parser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     }",
          "87:   });",
          "96:   });",
          "97: });",
          "",
          "[Removed Lines]",
          "89:   it('returns an error packet on parsing error', function(done){",
          "90:     var decoder = new parser.Decoder();",
          "91:     decoder.on('decoded', function(packet) {",
          "92:       expect(packet).to.eql({ type: 4, data: 'parser error: invalid payload' });",
          "93:       done();",
          "94:     });",
          "95:     decoder.add('442[\"some\",\"data\"');",
          "",
          "[Added Lines]",
          "89:   it('returns an error packet on parsing error', function(){",
          "90:     function isInvalidPayload (str) {",
          "91:       expect(function () {",
          "92:         new parser.Decoder().add(str)",
          "93:       }).to.throwException(/^invalid payload$/);",
          "94:     }",
          "96:     isInvalidPayload('442[\"some\",\"data\"');",
          "97:     isInvalidPayload('0/admin,\"invalid\"');",
          "98:     isInvalidPayload(\"1/admin,{}\");",
          "99:     isInvalidPayload('2/admin,\"invalid');",
          "100:     isInvalidPayload(\"2/admin,{}\");",
          "101:     isInvalidPayload('2[{\"toString\":\"foo\"}]');",
          "102:     isInvalidPayload('2[true,\"foo\"]');",
          "103:     isInvalidPayload('2[null,\"bar\"]');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2dc3c92622dad113b8676be06f23b1ed46b02ced",
      "candidate_info": {
        "commit_hash": "2dc3c92622dad113b8676be06f23b1ed46b02ced",
        "repo": "socketio/socket.io-parser",
        "commit_url": "https://github.com/socketio/socket.io-parser/commit/2dc3c92622dad113b8676be06f23b1ed46b02ced",
        "files": [
          "index.js",
          "test/arraybuffer.js",
          "test/parser.js"
        ],
        "message": "fix: check the format of the event name\n\nA packet like '2[{\"toString\":\"foo\"}]' was decoded as:\n\n{\n  type: EVENT,\n  data: [ { \"toString\": \"foo\" } ]\n}\n\nWhich would then throw an error when passed to the EventEmitter class:\n\n> TypeError: Cannot convert object to primitive value\n>    at Socket.emit (node:events:507:25)\n>    at .../node_modules/socket.io/lib/socket.js:531:14\n\nHistory of the isPayloadValid() method:\n\n- added in [78f9fc2](78f9fc2) (v4.0.1, socket.io@3.0.0)\n- updated in [1c220dd](1c220dd) (v4.0.4, socket.io@3.1.0)\n\nBackported from https://github.com/socketio/socket.io-parser/commit/3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3",
        "before_after_code_files": [
          "index.js||index.js",
          "test/arraybuffer.js||test/arraybuffer.js",
          "test/parser.js||test/parser.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "test/parser.js||test/parser.js"
          ],
          "candidate": [
            "test/parser.js||test/parser.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "330:   if (str.charAt(++i)) {",
          "331:     var payload = tryParse(str.substr(i));",
          "334:       p.data = payload;",
          "335:     } else {",
          "337:     }",
          "338:   }",
          "",
          "[Removed Lines]",
          "332:     var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));",
          "333:     if (isPayloadValid) {",
          "336:       return error('invalid payload');",
          "",
          "[Added Lines]",
          "332:     if (isPayloadValid(p.type, payload)) {",
          "335:       throw new Error(\"invalid payload\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:   }",
          "350: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351: function isPayloadValid(type, payload) {",
          "352:   switch (type) {",
          "353:     case 0: // CONNECT",
          "354:       return typeof payload === \"object\";",
          "355:     case 1: // DISCONNECT",
          "356:       return payload === undefined;",
          "357:     case 4: // ERROR",
          "358:       return typeof payload === \"string\" || typeof payload === \"object\";",
          "359:     case 2: // EVENT",
          "360:     case 5: // BINARY_EVENT",
          "361:       return (",
          "362:         isArray(payload) &&",
          "363:         (typeof payload[0] === \"string\" || typeof payload[0] === \"number\")",
          "364:       );",
          "365:     case 3: // ACK",
          "366:     case 6: // BINARY_ACK",
          "367:       return isArray(payload);",
          "368:   }",
          "369: }",
          "",
          "---------------"
        ],
        "test/arraybuffer.js||test/arraybuffer.js": [
          "File: test/arraybuffer.js -> test/arraybuffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   it('cleans itself up on close', function() {",
          "51:     var packet = {",
          "52:       type: parser.BINARY_EVENT,",
          "54:       id: 0,",
          "55:       nsp: '/'",
          "56:     };",
          "",
          "[Removed Lines]",
          "53:       data: [new ArrayBuffer(2), new ArrayBuffer(3)],",
          "",
          "[Added Lines]",
          "53:       data: [\"foo\", new ArrayBuffer(2), new ArrayBuffer(3)],",
          "",
          "---------------"
        ],
        "test/parser.js||test/parser.js": [
          "File: test/parser.js -> test/parser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     }",
          "87:   });",
          "96:   });",
          "97: });",
          "",
          "[Removed Lines]",
          "89:   it('returns an error packet on parsing error', function(done){",
          "90:     var decoder = new parser.Decoder();",
          "91:     decoder.on('decoded', function(packet) {",
          "92:       expect(packet).to.eql({ type: 4, data: 'parser error: invalid payload' });",
          "93:       done();",
          "94:     });",
          "95:     decoder.add('442[\"some\",\"data\"');",
          "",
          "[Added Lines]",
          "89:   it('returns an error packet on parsing error', function(){",
          "90:     function isInvalidPayload (str) {",
          "91:       expect(function () {",
          "92:         new parser.Decoder().add(str)",
          "93:       }).to.throwException(/^invalid payload$/);",
          "94:     }",
          "96:     isInvalidPayload('442[\"some\",\"data\"');",
          "97:     isInvalidPayload('0/admin,\"invalid\"');",
          "98:     isInvalidPayload(\"1/admin,{}\");",
          "99:     isInvalidPayload('2/admin,\"invalid');",
          "100:     isInvalidPayload(\"2/admin,{}\");",
          "101:     isInvalidPayload('2[{\"toString\":\"foo\"}]');",
          "102:     isInvalidPayload('2[true,\"foo\"]');",
          "103:     isInvalidPayload('2[null,\"bar\"]');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9db4737a3c8ce5f1f49ecc8d928a74f3da591f7",
      "candidate_info": {
        "commit_hash": "d9db4737a3c8ce5f1f49ecc8d928a74f3da591f7",
        "repo": "socketio/socket.io-parser",
        "commit_url": "https://github.com/socketio/socket.io-parser/commit/d9db4737a3c8ce5f1f49ecc8d928a74f3da591f7",
        "files": [
          "lib/index.ts",
          "test/parser.js"
        ],
        "message": "fix: ensure reserved events cannot be used as event names",
        "before_after_code_files": [
          "lib/index.ts||lib/index.ts",
          "test/parser.js||test/parser.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/index.ts||lib/index.ts",
            "test/parser.js||test/parser.js"
          ],
          "candidate": [
            "lib/index.ts||lib/index.ts",
            "test/parser.js||test/parser.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/index.ts||lib/index.ts": [
          "File: lib/index.ts -> lib/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: const debug = debugModule(\"socket.io-parser\"); // debug()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: const RESERVED_EVENTS = [",
          "12:   \"connect\", // used on the client side",
          "13:   \"connect_error\", // used on the client side",
          "14:   \"disconnect\", // used on both sides",
          "15:   \"disconnecting\", // used on the server side",
          "16:   \"newListener\", // used by the Node.js EventEmitter",
          "17:   \"removeListener\", // used by the Node.js EventEmitter",
          "18: ];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:       case PacketType.BINARY_EVENT:",
          "278:         return (",
          "279:           Array.isArray(payload) &&",
          "281:         );",
          "282:       case PacketType.ACK:",
          "283:       case PacketType.BINARY_ACK:",
          "",
          "[Removed Lines]",
          "280:           (typeof payload[0] === \"string\" || typeof payload[0] === \"number\")",
          "",
          "[Added Lines]",
          "292:           (typeof payload[0] === \"number\" ||",
          "293:             (typeof payload[0] === \"string\" &&",
          "294:               RESERVED_EVENTS.indexOf(payload[0]) === -1))",
          "",
          "---------------"
        ],
        "test/parser.js||test/parser.js": [
          "File: test/parser.js -> test/parser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     isInvalidPayload('2[{\"toString\":\"foo\"}]');",
          "122:     isInvalidPayload('2[true,\"foo\"]');",
          "123:     isInvalidPayload('2[null,\"bar\"]');",
          "125:     expect(() => new Decoder().add(\"999\")).to.throwException(",
          "126:       /^unknown packet type 9$/",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     isInvalidPayload('2[\"connect\"]');",
          "125:     isInvalidPayload('2[\"disconnect\",\"123\"]');",
          "",
          "---------------"
        ]
      }
    }
  ]
}