{
  "cve_id": "CVE-2021-43801",
  "cve_desc": "Mercurius is a GraphQL adapter for Fastify. Any users from Mercurius@8.10.0 to 8.11.1 are subjected to a denial of service attack by sending a malformed JSON to `/graphql` unless they are using a custom error handler. The vulnerability has been fixed in https://github.com/mercurius-js/mercurius/pull/678 and shipped as v8.11.2. As a workaround users may use a custom error handler.",
  "repo": "mercurius-js/mercurius",
  "patch_hash": "732b2f895312da8deadd7b173dcd2d141d54b223",
  "patch_info": {
    "commit_hash": "732b2f895312da8deadd7b173dcd2d141d54b223",
    "repo": "mercurius-js/mercurius",
    "commit_url": "https://github.com/mercurius-js/mercurius/commit/732b2f895312da8deadd7b173dcd2d141d54b223",
    "files": [
      "lib/routes.js",
      "test/errors.js"
    ],
    "message": "Fix regression in handling badly formed JSON",
    "before_after_code_files": [
      "lib/routes.js||lib/routes.js",
      "test/errors.js||test/errors.js"
    ]
  },
  "patch_diff": {
    "lib/routes.js||lib/routes.js": [
      "File: lib/routes.js -> lib/routes.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "135:   const errorFormatter = typeof opts.errorFormatter === 'function' ? opts.errorFormatter : defaultErrorFormatter",
      "137:   if (typeof opts.errorHandler === 'function') {",
      "139:   } else if (opts.errorHandler === true || opts.errorHandler === undefined) {",
      "140:     app.setErrorHandler((error, request, reply) => {",
      "141:       const { statusCode, response } = errorFormatter(",
      "142:         error,",
      "143:         request[kRequestContext]",
      "144:       )",
      "146:     })",
      "147:   }",
      "148:   const contextFn = opts.context",
      "",
      "[Removed Lines]",
      "138:     app.setErrorHandler(opts.errorHandler)",
      "145:       reply.code(statusCode).send(response)",
      "",
      "[Added Lines]",
      "138:     app.setErrorHandler((error, request, reply) => {",
      "139:       const errorHandler = opts.errorHandler",
      "140:       if (!request[kRequestContext]) {",
      "142:         request[kRequestContext] = { reply, app }",
      "143:       }",
      "145:       return errorHandler(error, request, reply)",
      "146:     })",
      "149:       if (!request[kRequestContext]) {",
      "151:         request[kRequestContext] = { reply, app }",
      "152:       }",
      "158:       return reply.code(statusCode).send(response)",
      "",
      "---------------"
    ],
    "test/errors.js||test/errors.js": [
      "File: test/errors.js -> test/errors.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "768:   t.equal(res.statusCode, 200)",
      "769: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "771: test('bad json', async (t) => {",
      "772:   const schema = `",
      "773:     type Query {",
      "774:       successful: String",
      "775:     }",
      "776:   `",
      "778:   const resolvers = {",
      "779:     Query: {",
      "780:       successful () {",
      "781:         t.fail('Should not be called')",
      "782:         return 'Runs OK'",
      "783:       }",
      "784:     }",
      "785:   }",
      "787:   const app = Fastify()",
      "789:   app.register(GQL, {",
      "790:     schema,",
      "791:     resolvers",
      "792:   })",
      "794:   await app.ready()",
      "796:   const res = await app.inject({",
      "797:     method: 'POST',",
      "798:     headers: {",
      "799:       'content-type': 'application/json'",
      "800:     },",
      "801:     body: 'this is not a json',",
      "802:     url: '/graphql'",
      "803:   })",
      "805:   t.equal(res.statusCode, 400)",
      "806:   t.same(res.json(),",
      "807:     { data: null, errors: [{ message: 'Unexpected token h in JSON at position 1' }] }",
      "808:   )",
      "809: })",
      "811: test('bad json with custom error handler', async (t) => {",
      "812:   t.plan(3)",
      "813:   const schema = `",
      "814:     type Query {",
      "815:       successful: String",
      "816:     }",
      "817:   `",
      "819:   const resolvers = {",
      "820:     Query: {",
      "821:       successful () {",
      "822:         t.fail('Should not be called')",
      "823:         return 'Runs OK'",
      "824:       }",
      "825:     }",
      "826:   }",
      "828:   const app = Fastify()",
      "830:   app.register(GQL, {",
      "831:     schema,",
      "832:     resolvers,",
      "833:     errorHandler: (_, request, reply) => {",
      "834:       t.pass('custom error handler called')",
      "835:       reply.code(400).send({",
      "836:         is: 'error'",
      "837:       })",
      "838:     }",
      "839:   })",
      "841:   await app.ready()",
      "843:   const res = await app.inject({",
      "844:     method: 'POST',",
      "845:     headers: {",
      "846:       'content-type': 'application/json'",
      "847:     },",
      "848:     body: 'this is not a json',",
      "849:     url: '/graphql'",
      "850:   })",
      "852:   t.equal(res.statusCode, 400)",
      "853:   t.same(res.json(), {",
      "854:     is: 'error'",
      "855:   })",
      "856: })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d34a103fd9fe3df941acdd6072c6a602d235fcbb",
      "candidate_info": {
        "commit_hash": "d34a103fd9fe3df941acdd6072c6a602d235fcbb",
        "repo": "mercurius-js/mercurius",
        "commit_url": "https://github.com/mercurius-js/mercurius/commit/d34a103fd9fe3df941acdd6072c6a602d235fcbb",
        "files": [
          "lib/routes.js",
          "test/errors.js"
        ],
        "message": "Fix regression in handling badly formed JSON (#678)",
        "before_after_code_files": [
          "lib/routes.js||lib/routes.js",
          "test/errors.js||test/errors.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mercurius-js/mercurius/pull/678"
        ],
        "olp_code_files": {
          "patch": [
            "lib/routes.js||lib/routes.js",
            "test/errors.js||test/errors.js"
          ],
          "candidate": [
            "lib/routes.js||lib/routes.js",
            "test/errors.js||test/errors.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/routes.js||lib/routes.js": [
          "File: lib/routes.js -> lib/routes.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:   const errorFormatter = typeof opts.errorFormatter === 'function' ? opts.errorFormatter : defaultErrorFormatter",
          "137:   if (typeof opts.errorHandler === 'function') {",
          "139:   } else if (opts.errorHandler === true || opts.errorHandler === undefined) {",
          "140:     app.setErrorHandler((error, request, reply) => {",
          "141:       const { statusCode, response } = errorFormatter(",
          "142:         error,",
          "143:         request[kRequestContext]",
          "144:       )",
          "146:     })",
          "147:   }",
          "148:   const contextFn = opts.context",
          "",
          "[Removed Lines]",
          "138:     app.setErrorHandler(opts.errorHandler)",
          "145:       reply.code(statusCode).send(response)",
          "",
          "[Added Lines]",
          "138:     app.setErrorHandler((error, request, reply) => {",
          "139:       const errorHandler = opts.errorHandler",
          "140:       if (!request[kRequestContext]) {",
          "142:         request[kRequestContext] = { reply, app }",
          "143:       }",
          "145:       return errorHandler(error, request, reply)",
          "146:     })",
          "149:       if (!request[kRequestContext]) {",
          "151:         request[kRequestContext] = { reply, app }",
          "152:       }",
          "158:       return reply.code(statusCode).send(response)",
          "",
          "---------------"
        ],
        "test/errors.js||test/errors.js": [
          "File: test/errors.js -> test/errors.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "768:   t.equal(res.statusCode, 200)",
          "769: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771: test('bad json', async (t) => {",
          "772:   const schema = `",
          "773:     type Query {",
          "774:       successful: String",
          "775:     }",
          "776:   `",
          "778:   const resolvers = {",
          "779:     Query: {",
          "780:       successful () {",
          "781:         t.fail('Should not be called')",
          "782:         return 'Runs OK'",
          "783:       }",
          "784:     }",
          "785:   }",
          "787:   const app = Fastify()",
          "789:   app.register(GQL, {",
          "790:     schema,",
          "791:     resolvers",
          "792:   })",
          "794:   await app.ready()",
          "796:   const res = await app.inject({",
          "797:     method: 'POST',",
          "798:     headers: {",
          "799:       'content-type': 'application/json'",
          "800:     },",
          "801:     body: 'this is not a json',",
          "802:     url: '/graphql'",
          "803:   })",
          "805:   t.equal(res.statusCode, 400)",
          "806:   t.same(res.json(),",
          "807:     { data: null, errors: [{ message: 'Unexpected token h in JSON at position 1' }] }",
          "808:   )",
          "809: })",
          "811: test('bad json with custom error handler', async (t) => {",
          "812:   t.plan(3)",
          "813:   const schema = `",
          "814:     type Query {",
          "815:       successful: String",
          "816:     }",
          "817:   `",
          "819:   const resolvers = {",
          "820:     Query: {",
          "821:       successful () {",
          "822:         t.fail('Should not be called')",
          "823:         return 'Runs OK'",
          "824:       }",
          "825:     }",
          "826:   }",
          "828:   const app = Fastify()",
          "830:   app.register(GQL, {",
          "831:     schema,",
          "832:     resolvers,",
          "833:     errorHandler: (_, request, reply) => {",
          "834:       t.pass('custom error handler called')",
          "835:       reply.code(400).send({",
          "836:         is: 'error'",
          "837:       })",
          "838:     }",
          "839:   })",
          "841:   await app.ready()",
          "843:   const res = await app.inject({",
          "844:     method: 'POST',",
          "845:     headers: {",
          "846:       'content-type': 'application/json'",
          "847:     },",
          "848:     body: 'this is not a json',",
          "849:     url: '/graphql'",
          "850:   })",
          "852:   t.equal(res.statusCode, 400)",
          "853:   t.same(res.json(), {",
          "854:     is: 'error'",
          "855:   })",
          "856: })",
          "",
          "---------------"
        ]
      }
    }
  ]
}