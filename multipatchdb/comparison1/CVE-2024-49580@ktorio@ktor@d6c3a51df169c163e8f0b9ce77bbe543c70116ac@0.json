{
  "cve_id": "CVE-2024-49580",
  "cve_desc": "In JetBrains Ktor before 2.3.13 improper caching in HttpCache Plugin could lead to response information disclosure",
  "repo": "ktorio/ktor",
  "patch_hash": "d6c3a51df169c163e8f0b9ce77bbe543c70116ac",
  "patch_info": {
    "commit_hash": "d6c3a51df169c163e8f0b9ce77bbe543c70116ac",
    "repo": "ktorio/ktor",
    "commit_url": "https://github.com/ktorio/ktor/commit/d6c3a51df169c163e8f0b9ce77bbe543c70116ac",
    "files": [
      "ktor-client/ktor-client-core/api/ktor-client-core.api",
      "ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
      "ktor-client/ktor-client-core/build.gradle.kts",
      "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
      "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt",
      "ktor-io/common/test/ByteReadChannelOperationsTest.kt"
    ],
    "message": "KTOR-7483 Avoid caching requests with Authorization header (#4337)\n\n* KTOR-7483 Avoid caching requests with Authorization header",
    "before_after_code_files": [
      "ktor-client/ktor-client-core/api/ktor-client-core.api||ktor-client/ktor-client-core/api/ktor-client-core.api",
      "ktor-client/ktor-client-core/api/ktor-client-core.klib.api||ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
      "ktor-client/ktor-client-core/build.gradle.kts||ktor-client/ktor-client-core/build.gradle.kts",
      "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
      "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt||ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt",
      "ktor-io/common/test/ByteReadChannelOperationsTest.kt||ktor-io/common/test/ByteReadChannelOperationsTest.kt"
    ]
  },
  "patch_diff": {
    "ktor-client/ktor-client-core/api/ktor-client-core.api||ktor-client/ktor-client-core/api/ktor-client-core.api": [
      "File: ktor-client/ktor-client-core/api/ktor-client-core.api -> ktor-client/ktor-client-core/api/ktor-client-core.api",
      "--- Hunk 1 ---",
      "[Context before]",
      "599: public final class io/ktor/client/plugins/cache/HttpCache {",
      "600:  public static final field Companion Lio/ktor/client/plugins/cache/HttpCache$Companion;",
      "602: }",
      "604: public final class io/ktor/client/plugins/cache/HttpCache$Companion : io/ktor/client/plugins/HttpClientPlugin {",
      "",
      "[Removed Lines]",
      "601:  public synthetic fun <init> (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;ZZLkotlin/jvm/internal/DefaultConstructorMarker;)V",
      "",
      "[Added Lines]",
      "601:  public synthetic fun <init> (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;ZZZLkotlin/jvm/internal/DefaultConstructorMarker;)V",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "613: public final class io/ktor/client/plugins/cache/HttpCache$Config {",
      "614:  public fun <init> ()V",
      "615:  public final fun getPrivateStorage ()Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;",
      "616:  public final fun getPublicStorage ()Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;",
      "617:  public final fun isShared ()Z",
      "618:  public final fun privateStorage (Lio/ktor/client/plugins/cache/storage/CacheStorage;)V",
      "619:  public final fun publicStorage (Lio/ktor/client/plugins/cache/storage/CacheStorage;)V",
      "620:  public final fun setPrivateStorage (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;)V",
      "621:  public final fun setPublicStorage (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;)V",
      "622:  public final fun setShared (Z)V",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "615:  public final fun getCacheRequestWithAuth ()Z",
      "621:  public final fun setCacheRequestWithAuth (Z)V",
      "",
      "---------------"
    ],
    "ktor-client/ktor-client-core/api/ktor-client-core.klib.api||ktor-client/ktor-client-core/api/ktor-client-core.klib.api": [
      "File: ktor-client/ktor-client-core/api/ktor-client-core.klib.api -> ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
      "--- Hunk 1 ---",
      "[Context before]",
      "333:     final class Config { // io.ktor.client.plugins.cache/HttpCache.Config|null[0]",
      "334:         constructor <init>() // io.ktor.client.plugins.cache/HttpCache.Config.<init>|<init>(){}[0]",
      "336:         final var isShared // io.ktor.client.plugins.cache/HttpCache.Config.isShared|{}isShared[0]",
      "337:             final fun <get-isShared>(): kotlin/Boolean // io.ktor.client.plugins.cache/HttpCache.Config.isShared.<get-isShared>|<get-isShared>(){}[0]",
      "338:             final fun <set-isShared>(kotlin/Boolean) // io.ktor.client.plugins.cache/HttpCache.Config.isShared.<set-isShared>|<set-isShared>(kotlin.Boolean){}[0]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336:         final var cacheRequestWithAuth // io.ktor.client.plugins.cache/HttpCache.Config.cacheRequestWithAuth|{}cacheRequestWithAuth[0]",
      "337:             final fun <get-cacheRequestWithAuth>(): kotlin/Boolean // io.ktor.client.plugins.cache/HttpCache.Config.cacheRequestWithAuth.<get-cacheRequestWithAuth>|<get-cacheRequestWithAuth>(){}[0]",
      "338:             final fun <set-cacheRequestWithAuth>(kotlin/Boolean) // io.ktor.client.plugins.cache/HttpCache.Config.cacheRequestWithAuth.<set-cacheRequestWithAuth>|<set-cacheRequestWithAuth>(kotlin.Boolean){}[0]",
      "",
      "---------------"
    ],
    "ktor-client/ktor-client-core/build.gradle.kts||ktor-client/ktor-client-core/build.gradle.kts": [
      "File: ktor-client/ktor-client-core/build.gradle.kts -> ktor-client/ktor-client-core/build.gradle.kts",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:         dependencies {",
      "41:             api(project(\":ktor-test-dispatcher\"))",
      "42:             api(project(\":ktor-client:ktor-client-mock\"))",
      "43:         }",
      "44:     }",
      "45: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43:             api(project(\":ktor-server:ktor-server-test-host\"))",
      "",
      "---------------"
    ],
    "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt": [
      "File: ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt -> ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:     private val publicStorageNew: CacheStorage,",
      "51:     private val privateStorageNew: CacheStorage,",
      "52:     private val useOldStorage: Boolean,",
      "54: ) {",
      "",
      "[Removed Lines]",
      "53:     internal val isSharedClient: Boolean",
      "",
      "[Added Lines]",
      "53:     internal val isSharedClient: Boolean,",
      "54:     internal val cacheRequestWithAuth: Boolean",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:         internal var privateStorageNew: CacheStorage = CacheStorage.Unlimited()",
      "62:         internal var useOldStorage = false",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "73:         @Deprecated(\"Changing this flag has security implication\", level = DeprecationLevel.WARNING)",
      "74:         public var cacheRequestWithAuth: Boolean = false",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "138:                     publicStorageNew = publicStorageNew,",
      "139:                     privateStorageNew = privateStorageNew,",
      "140:                     useOldStorage = useOldStorage,",
      "142:                 )",
      "143:             }",
      "144:         }",
      "",
      "[Removed Lines]",
      "141:                     isSharedClient = isShared",
      "",
      "[Added Lines]",
      "153:                     isSharedClient = isShared,",
      "154:                     cacheRequestWithAuth = cacheRequestWithAuth",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "152:                 if (content !is OutgoingContent.NoContent) return@intercept",
      "153:                 if (context.method != HttpMethod.Get || !context.url.protocol.canStore()) return@intercept",
      "155:                 if (plugin.useOldStorage) {",
      "156:                     interceptSendLegacy(plugin, content, scope)",
      "157:                     return@intercept",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "168:                 if (!plugin.cacheRequestWithAuth && context.headers.contains(HttpHeaders.Authorization)) {",
      "169:                     return@intercept",
      "170:                 }",
      "",
      "---------------"
    ],
    "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt||ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt": [
      "File: ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt -> ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: import io.ktor.client.plugins.cache.*",
      "6: import io.ktor.client.request.*",
      "7: import io.ktor.client.statement.*",
      "8: import io.ktor.http.*",
      "9: import io.ktor.server.response.*",
      "10: import io.ktor.server.routing.*",
      "11: import io.ktor.server.testing.*",
      "12: import kotlinx.coroutines.*",
      "13: import kotlin.test.*",
      "14: import kotlin.time.Duration.Companion.milliseconds",
      "16: class HttpCacheTest {",
      "18:     @Test",
      "19:     fun `should not mix ETags when Authorization header is present`() = testApplication {",
      "20:         application {",
      "21:             routing {",
      "22:                 get(\"/me\") {",
      "23:                     val user = call.request.headers[\"Authorization\"]!!",
      "24:                     if (user == \"user-a\") {",
      "26:                         delay(100.milliseconds)",
      "27:                     }",
      "28:                     val etag = \"etag-of-$user\"",
      "29:                     if (call.request.headers[\"If-None-Match\"] == etag) {",
      "30:                         call.respond(HttpStatusCode.NotModified)",
      "31:                         return@get",
      "32:                     }",
      "33:                     call.response.header(\"Cache-Control\", \"no-cache\")",
      "34:                     call.response.header(\"ETag\", etag)",
      "35:                     call.respondText(user)",
      "36:                 }",
      "37:             }",
      "38:         }",
      "40:         val client = createClient {",
      "41:             install(HttpCache) {",
      "42:                 isShared = true",
      "43:             }",
      "44:         }",
      "46:         assertEquals(",
      "47:             client.get(\"/me\") {",
      "48:                 headers[\"Authorization\"] = \"user-a\"",
      "49:             }.bodyAsText(),",
      "50:             \"user-a\"",
      "51:         )",
      "52:         withContext(Dispatchers.Default) {",
      "53:             listOf(",
      "54:                 launch {",
      "55:                     val response = client.get(\"/me\") {",
      "56:                         headers[\"Authorization\"] = \"user-a\"",
      "57:                     }.bodyAsText()",
      "59:                     assertEquals(\"user-a\", response)",
      "60:                 },",
      "61:                 launch {",
      "62:                     val response = client.get(\"/me\") {",
      "63:                         headers[\"Authorization\"] = \"user-b\"",
      "64:                     }.bodyAsText()",
      "66:                     assertEquals(\"user-b\", response)",
      "67:                 }",
      "68:             ).joinAll()",
      "69:         }",
      "70:     }",
      "72:     @Test",
      "73:     fun `should mix ETags when Authorization header is present and flag enabled`() = testApplication {",
      "74:         application {",
      "75:             routing {",
      "76:                 get(\"/me\") {",
      "77:                     val user = call.request.headers[\"Authorization\"]!!",
      "78:                     if (user == \"user-a\") {",
      "80:                         delay(100.milliseconds)",
      "81:                     }",
      "82:                     val etag = \"etag-of-$user\"",
      "83:                     if (call.request.headers[\"If-None-Match\"] == etag) {",
      "84:                         call.respond(HttpStatusCode.NotModified)",
      "85:                         return@get",
      "86:                     }",
      "87:                     call.response.header(\"Cache-Control\", \"no-cache\")",
      "88:                     call.response.header(\"ETag\", etag)",
      "89:                     call.respondText(user)",
      "90:                 }",
      "91:             }",
      "92:         }",
      "94:         val client = createClient {",
      "95:             install(HttpCache) {",
      "96:                 isShared = true",
      "97:                 @Suppress(\"DEPRECATION\")",
      "98:                 cacheRequestWithAuth = true",
      "99:             }",
      "100:         }",
      "102:         assertEquals(",
      "103:             client.get(\"/me\") {",
      "104:                 headers[\"Authorization\"] = \"user-a\"",
      "105:             }.bodyAsText(),",
      "106:             \"user-a\"",
      "107:         )",
      "108:         withContext(Dispatchers.Default) {",
      "109:             listOf(",
      "110:                 launch {",
      "111:                     val response = client.get(\"/me\") {",
      "112:                         headers[\"Authorization\"] = \"user-a\"",
      "113:                     }.bodyAsText()",
      "115:                     assertEquals(\"user-b\", response)",
      "116:                 },",
      "117:                 launch {",
      "118:                     val response = client.get(\"/me\") {",
      "119:                         headers[\"Authorization\"] = \"user-b\"",
      "120:                     }.bodyAsText()",
      "122:                     assertEquals(\"user-b\", response)",
      "123:                 }",
      "124:             ).joinAll()",
      "125:         }",
      "126:     }",
      "127: }",
      "",
      "---------------"
    ],
    "ktor-io/common/test/ByteReadChannelOperationsTest.kt||ktor-io/common/test/ByteReadChannelOperationsTest.kt": [
      "File: ktor-io/common/test/ByteReadChannelOperationsTest.kt -> ktor-io/common/test/ByteReadChannelOperationsTest.kt"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0665736fc35c8ab5525241e975f36819b67f9d3e",
      "candidate_info": {
        "commit_hash": "0665736fc35c8ab5525241e975f36819b67f9d3e",
        "repo": "ktorio/ktor",
        "commit_url": "https://github.com/ktorio/ktor/commit/0665736fc35c8ab5525241e975f36819b67f9d3e",
        "files": [
          "ktor-client/ktor-client-core/api/ktor-client-core.api",
          "ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
          "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
          "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt"
        ],
        "message": "KTOR-7483 Allow auth header when client is not shared (#4368)",
        "before_after_code_files": [
          "ktor-client/ktor-client-core/api/ktor-client-core.api||ktor-client/ktor-client-core/api/ktor-client-core.api",
          "ktor-client/ktor-client-core/api/ktor-client-core.klib.api||ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
          "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
          "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt||ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ktor-client/ktor-client-core/api/ktor-client-core.api||ktor-client/ktor-client-core/api/ktor-client-core.api",
            "ktor-client/ktor-client-core/api/ktor-client-core.klib.api||ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
            "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
            "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt||ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt"
          ],
          "candidate": [
            "ktor-client/ktor-client-core/api/ktor-client-core.api||ktor-client/ktor-client-core/api/ktor-client-core.api",
            "ktor-client/ktor-client-core/api/ktor-client-core.klib.api||ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
            "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
            "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt||ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt"
          ]
        }
      },
      "candidate_diff": {
        "ktor-client/ktor-client-core/api/ktor-client-core.api||ktor-client/ktor-client-core/api/ktor-client-core.api": [
          "File: ktor-client/ktor-client-core/api/ktor-client-core.api -> ktor-client/ktor-client-core/api/ktor-client-core.api",
          "--- Hunk 1 ---",
          "[Context before]",
          "599: public final class io/ktor/client/plugins/cache/HttpCache {",
          "600:  public static final field Companion Lio/ktor/client/plugins/cache/HttpCache$Companion;",
          "602: }",
          "604: public final class io/ktor/client/plugins/cache/HttpCache$Companion : io/ktor/client/plugins/HttpClientPlugin {",
          "",
          "[Removed Lines]",
          "601:  public synthetic fun <init> (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;ZZZLkotlin/jvm/internal/DefaultConstructorMarker;)V",
          "",
          "[Added Lines]",
          "601:  public synthetic fun <init> (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;ZZLkotlin/jvm/internal/DefaultConstructorMarker;)V",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613: public final class io/ktor/client/plugins/cache/HttpCache$Config {",
          "614:  public fun <init> ()V",
          "616:  public final fun getPrivateStorage ()Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;",
          "617:  public final fun getPublicStorage ()Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;",
          "618:  public final fun isShared ()Z",
          "619:  public final fun privateStorage (Lio/ktor/client/plugins/cache/storage/CacheStorage;)V",
          "620:  public final fun publicStorage (Lio/ktor/client/plugins/cache/storage/CacheStorage;)V",
          "622:  public final fun setPrivateStorage (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;)V",
          "623:  public final fun setPublicStorage (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;)V",
          "624:  public final fun setShared (Z)V",
          "",
          "[Removed Lines]",
          "615:  public final fun getCacheRequestWithAuth ()Z",
          "621:  public final fun setCacheRequestWithAuth (Z)V",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-core/api/ktor-client-core.klib.api||ktor-client/ktor-client-core/api/ktor-client-core.klib.api": [
          "File: ktor-client/ktor-client-core/api/ktor-client-core.klib.api -> ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:     final class Config { // io.ktor.client.plugins.cache/HttpCache.Config|null[0]",
          "334:         constructor <init>() // io.ktor.client.plugins.cache/HttpCache.Config.<init>|<init>(){}[0]",
          "339:         final var isShared // io.ktor.client.plugins.cache/HttpCache.Config.isShared|{}isShared[0]",
          "340:             final fun <get-isShared>(): kotlin/Boolean // io.ktor.client.plugins.cache/HttpCache.Config.isShared.<get-isShared>|<get-isShared>(){}[0]",
          "341:             final fun <set-isShared>(kotlin/Boolean) // io.ktor.client.plugins.cache/HttpCache.Config.isShared.<set-isShared>|<set-isShared>(kotlin.Boolean){}[0]",
          "",
          "[Removed Lines]",
          "336:         final var cacheRequestWithAuth // io.ktor.client.plugins.cache/HttpCache.Config.cacheRequestWithAuth|{}cacheRequestWithAuth[0]",
          "337:             final fun <get-cacheRequestWithAuth>(): kotlin/Boolean // io.ktor.client.plugins.cache/HttpCache.Config.cacheRequestWithAuth.<get-cacheRequestWithAuth>|<get-cacheRequestWithAuth>(){}[0]",
          "338:             final fun <set-cacheRequestWithAuth>(kotlin/Boolean) // io.ktor.client.plugins.cache/HttpCache.Config.cacheRequestWithAuth.<set-cacheRequestWithAuth>|<set-cacheRequestWithAuth>(kotlin.Boolean){}[0]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt": [
          "File: ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt -> ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: public class HttpCache private constructor(",
          "50:     private val publicStorageNew: CacheStorage,",
          "51:     private val privateStorageNew: CacheStorage,",
          "52:     private val useOldStorage: Boolean,",
          "53:     internal val isSharedClient: Boolean,",
          "55: ) {",
          "",
          "[Removed Lines]",
          "44:     @Deprecated(\"This will become internal\", level = DeprecationLevel.ERROR)",
          "45:     @Suppress(\"DEPRECATION_ERROR\")",
          "46:     internal val publicStorage: HttpCacheStorage,",
          "47:     @Deprecated(\"This will become internal\", level = DeprecationLevel.ERROR)",
          "48:     @Suppress(\"DEPRECATION_ERROR\")",
          "49:     internal val privateStorage: HttpCacheStorage,",
          "54:     internal val cacheRequestWithAuth: Boolean",
          "",
          "[Added Lines]",
          "44:     @Deprecated(",
          "45:         \"This will become internal\",",
          "46:         level = DeprecationLevel.ERROR",
          "47:     ) @Suppress(\"DEPRECATION_ERROR\") internal val publicStorage: HttpCacheStorage,",
          "48:     @Deprecated(",
          "49:         \"This will become internal\",",
          "50:         level = DeprecationLevel.ERROR",
          "51:     ) @Suppress(\"DEPRECATION_ERROR\") internal val privateStorage: HttpCacheStorage,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         internal var privateStorageNew: CacheStorage = CacheStorage.Unlimited()",
          "63:         internal var useOldStorage = false",
          "",
          "[Removed Lines]",
          "73:         @Deprecated(\"Changing this flag has security implication\", level = DeprecationLevel.WARNING)",
          "74:         public var cacheRequestWithAuth: Boolean = false",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:             val config = Config().apply(block)",
          "145:             with(config) {",
          "148:                     publicStorage = publicStorage,",
          "149:                     privateStorage = privateStorage,",
          "150:                     publicStorageNew = publicStorageNew,",
          "151:                     privateStorageNew = privateStorageNew,",
          "152:                     useOldStorage = useOldStorage,",
          "155:                 )",
          "156:             }",
          "157:         }",
          "",
          "[Removed Lines]",
          "146:                 @Suppress(\"DEPRECATION_ERROR\")",
          "147:                 return HttpCache(",
          "153:                     isSharedClient = isShared,",
          "154:                     cacheRequestWithAuth = cacheRequestWithAuth",
          "",
          "[Added Lines]",
          "136:                 @Suppress(\"DEPRECATION_ERROR\") return HttpCache(",
          "142:                     isSharedClient = isShared",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:                 if (content !is OutgoingContent.NoContent) return@intercept",
          "166:                 if (context.method != HttpMethod.Get || !context.url.protocol.canStore()) return@intercept",
          "169:                     return@intercept",
          "170:                 }",
          "",
          "[Removed Lines]",
          "168:                 if (!plugin.cacheRequestWithAuth && context.headers.contains(HttpHeaders.Authorization)) {",
          "",
          "[Added Lines]",
          "156:                 if (plugin.isSharedClient && context.headers.contains(HttpHeaders.Authorization)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "187:                 val validateStatus = shouldValidate(cache.expires, cache.headers, context)",
          "189:                 if (validateStatus == ValidateStatus.ShouldNotValidate) {",
          "193:                     proceedWithCache(scope, cachedCall)",
          "194:                     return@intercept",
          "195:                 }",
          "",
          "[Removed Lines]",
          "190:                     val cachedCall = cache",
          "191:                         .createResponse(scope, RequestForCache(context.build()), context.executionContext)",
          "192:                         .call",
          "",
          "[Added Lines]",
          "178:                     val cachedCall =",
          "179:                         cache.createResponse(scope, RequestForCache(context.build()), context.executionContext).call",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "221:                     LOGGER.trace(\"Caching response for ${response.call.request.url}\")",
          "222:                     val cachedData = plugin.cacheResponse(response)",
          "223:                     if (cachedData != null) {",
          "226:                         proceedWith(reusableResponse)",
          "227:                         return@intercept",
          "228:                     }",
          "",
          "[Removed Lines]",
          "224:                         val reusableResponse = cachedData",
          "225:                             .createResponse(scope, response.request, response.coroutineContext)",
          "",
          "[Added Lines]",
          "211:                         val reusableResponse =",
          "212:                             cachedData.createResponse(scope, response.request, response.coroutineContext)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "231:                 if (response.status == HttpStatusCode.NotModified) {",
          "232:                     LOGGER.trace(\"Not modified response for ${response.call.request.url}, replying from cache\")",
          "236:                     scope.monitor.raise(HttpResponseFromCache, responseFromCache)",
          "237:                     proceedWith(responseFromCache)",
          "",
          "[Removed Lines]",
          "233:                     val responseFromCache = plugin.findAndRefresh(response.call.request, response)",
          "234:                         ?: throw InvalidCacheStateException(response.call.request.url)",
          "",
          "[Added Lines]",
          "220:                     val responseFromCache =",
          "221:                         plugin.findAndRefresh(response.call.request, response) ?: throw InvalidCacheStateException(",
          "222:                             response.call.request.url",
          "223:                         )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "341:         else -> {",
          "342:             val requestHeaders = mergedHeadersLookup(request.content, request.headers::get, request.headers::getAll)",
          "348:         }",
          "349:     }",
          "",
          "[Removed Lines]",
          "343:             storage.findAll(url)",
          "344:                 .sortedByDescending { it.responseTime }",
          "345:                 .firstOrNull { cachedResponse ->",
          "346:                     cachedResponse.varyKeys.all { (key, value) -> requestHeaders(key) == value }",
          "347:                 }",
          "",
          "[Added Lines]",
          "332:             storage.findAll(url).sortedByDescending { it.responseTime }.firstOrNull { cachedResponse ->",
          "333:                 cachedResponse.varyKeys.all { (key, value) -> requestHeaders(key) == value }",
          "334:             }",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt||ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt": [
          "File: ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt -> ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     }",
          "72:     @Test",
          "74:         application {",
          "75:             routing {",
          "76:                 get(\"/me\") {",
          "",
          "[Removed Lines]",
          "73:     fun `should mix ETags when Authorization header is present and flag enabled`() = testApplication {",
          "",
          "[Added Lines]",
          "73:     fun `should mix ETags when Authorization header is present and client is not shared`() = testApplication {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:         }",
          "94:         val client = createClient {",
          "100:         }",
          "102:         assertEquals(",
          "",
          "[Removed Lines]",
          "95:             install(HttpCache) {",
          "96:                 isShared = true",
          "97:                 @Suppress(\"DEPRECATION\")",
          "98:                 cacheRequestWithAuth = true",
          "99:             }",
          "",
          "[Added Lines]",
          "95:             install(HttpCache)",
          "",
          "---------------"
        ]
      }
    }
  ]
}