{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e35a81faf5e6b3cdeb6d2716e53118afbcdf309f",
      "candidate_info": {
        "commit_hash": "e35a81faf5e6b3cdeb6d2716e53118afbcdf309f",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/e35a81faf5e6b3cdeb6d2716e53118afbcdf309f",
        "files": [
          "ambari-server/src/main/resources/stacks/stack_advisor.py"
        ],
        "message": "AMBARI-24300. Error in Tez Service Advisor for HDP 3.0 (amagyar) (#1771) (#1786)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/stacks/stack_advisor.py||ambari-server/src/main/resources/stacks/stack_advisor.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/stacks/stack_advisor.py||ambari-server/src/main/resources/stacks/stack_advisor.py": [
          "File: ambari-server/src/main/resources/stacks/stack_advisor.py -> ambari-server/src/main/resources/stacks/stack_advisor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1311:     self.logger.info(\"Containers per node - cluster[containers]: \" + str(cluster[\"containers\"]))",
          "1313:     if cluster[\"containers\"] * cluster[\"minContainerSize\"] > cluster[\"totalAvailableRam\"]:",
          "1315:       self.logger.info(\"Modified number of containers based on provided value for yarn.scheduler.minimum-allocation-mb\")",
          "1316:       pass",
          "",
          "[Removed Lines]",
          "1314:       cluster[\"containers\"] = ceil(cluster[\"totalAvailableRam\"] / cluster[\"minContainerSize\"])",
          "",
          "[Added Lines]",
          "1314:       cluster[\"containers\"] = int(ceil(cluster[\"totalAvailableRam\"] / cluster[\"minContainerSize\"]))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "604b682442ae58d9f5f1ed0196ff10a5c7bc4ad0",
      "candidate_info": {
        "commit_hash": "604b682442ae58d9f5f1ed0196ff10a5c7bc4ad0",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/604b682442ae58d9f5f1ed0196ff10a5c7bc4ad0",
        "files": [
          "contrib/views/files/src/main/resources/view.xml",
          "contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java",
          "contrib/views/utils/src/test/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilderTest.java",
          "contrib/views/wfmanager/src/main/resources/view.xml"
        ],
        "message": "AMBARI-24535 : File View not accessible in Ambari 2.7 after enabling 3 namenodes in HDP 3.0 (nitirajrathore) (#2351)\n\n* AMBARI-24535 : File View not accessible in Ambari 2.7 after enabling 3 namenodes in HDP 3.0 (nitirajrathore)\n\n* AMBARI-24535 : review changes and handled changes for work flow manager. File View not accessible in Ambari 2.7 after enabling 3 namenodes in HDP 3.0 (nitirajrathore)",
        "before_after_code_files": [
          "contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java||contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java",
          "contrib/views/utils/src/test/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilderTest.java||contrib/views/utils/src/test/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java||contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java": [
          "File: contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java -> contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.view.utils.hdfs;",
          "21: import org.apache.ambari.view.ViewContext;",
          "22: import org.apache.commons.lang3.StringUtils;",
          "23: import org.apache.hadoop.conf.Configuration;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import com.google.common.annotations.VisibleForTesting;",
          "22: import com.google.common.base.Strings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: import java.io.StringWriter;",
          "29: import java.net.URI;",
          "30: import java.net.URISyntaxException;",
          "31: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import java.util.ArrayList;",
          "34: import java.util.Arrays;",
          "35: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:   public static final String HA_NAMENODES_INSTANCE_PROPERTY = \"webhdfs.ha.namenodes.list\";",
          "50:   public static final String HA_NAMENODES_CLUSTER_PROPERTY = \"dfs.ha.namenodes.%s\";",
          "53:   public static final String NAMENODE_RPC_NN_CLUSTER_PROPERTY = \"dfs.namenode.rpc-address.%s.%s\";",
          "57:   public static final String NAMENODE_HTTP_NN_CLUSTER_PROPERTY = \"dfs.namenode.http-address.%s.%s\";",
          "61:   public static final String NAMENODE_HTTPS_NN_CLUSTER_PROPERTY = \"dfs.namenode.https-address.%s.%s\";",
          "63:   public static final String FAILOVER_PROXY_PROVIDER_INSTANCE_PROPERTY = \"webhdfs.client.failover.proxy.provider\";",
          "",
          "[Removed Lines]",
          "51:   public static final String NAMENODE_RPC_NN1_INSTANCE_PROPERTY = \"webhdfs.ha.namenode.rpc-address.nn1\";",
          "52:   public static final String NAMENODE_RPC_NN2_INSTANCE_PROPERTY = \"webhdfs.ha.namenode.rpc-address.nn2\";",
          "55:   public static final String NAMENODE_HTTP_NN1_INSTANCE_PROPERTY = \"webhdfs.ha.namenode.http-address.nn1\";",
          "56:   public static final String NAMENODE_HTTP_NN2_INSTANCE_PROPERTY = \"webhdfs.ha.namenode.http-address.nn2\";",
          "59:   public static final String NAMENODE_HTTPS_NN1_INSTANCE_PROPERTY = \"webhdfs.ha.namenode.https-address.nn1\";",
          "60:   public static final String NAMENODE_HTTPS_NN2_INSTANCE_PROPERTY = \"webhdfs.ha.namenode.https-address.nn2\";",
          "",
          "[Added Lines]",
          "56:   public static final String NAMENODE_RPC_NN_INSTANCE_PROPERTY = \"webhdfs.ha.namenode.rpc-address.list\";",
          "59:   public static final String NAMENODE_HTTP_NN_INSTANCE_PROPERTY = \"webhdfs.ha.namenode.http-address.list\";",
          "62:   public static final String NAMENODE_HTTPS_NN_INSTANCE_PROPERTY = \"webhdfs.ha.namenode.https-address.list\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:   public static final String DFS_NAMENODE_HTTPS_ADDERSS = \"dfs.namenode.https-address\";",
          "78:   private ViewContext context;",
          "79:   private AuthConfigurationBuilder authParamsBuilder;",
          "80:   private Map<String, String> authParams;",
          "",
          "[Removed Lines]",
          "77:   private Configuration conf = new Configuration();",
          "",
          "[Added Lines]",
          "79:   protected Configuration conf = new Configuration();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:   protected String getEncryptionKeyProviderUri() {",
          "141:     return encryptionKeyProviderUri;",
          "142:   }",
          "",
          "[Removed Lines]",
          "140:     String encryptionKeyProviderUri = context.getCluster().getConfigurationValue(\"hdfs-site\", \"dfs.encryption.key.provider.uri\");",
          "",
          "[Added Lines]",
          "142:     String encryptionKeyProviderUri = getProperty(\"hdfs-site\", \"dfs.encryption.key.provider.uri\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "182:     String value;",
          "184:     if (context.getCluster() != null) {",
          "186:     } else {",
          "188:     }",
          "189:     return value;",
          "190:   }",
          "192:   private String getProperty(String type, String key) {",
          "193:     if (context.getCluster() != null) {",
          "194:       return context.getCluster().getConfigurationValue(type, key);",
          "",
          "[Removed Lines]",
          "185:       value = context.getCluster().getConfigurationValue(type, key);",
          "187:       value = context.getProperties().get(instanceProperty);",
          "",
          "[Added Lines]",
          "187:       value = getProperty(type, key);",
          "189:       value = getViewProperty(instanceProperty);",
          "194:   private String getViewProperty(String instanceProperty) {",
          "195:     return context.getProperties().get(instanceProperty);",
          "196:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "234:     }",
          "235:   }",
          "238:     URI uri = new URI(defaultFS);",
          "239:     String nameservice = uri.getHost();",
          "",
          "[Removed Lines]",
          "237:   private void copyHAProperties(String defaultFS) throws URISyntaxException, HdfsApiException {",
          "",
          "[Added Lines]",
          "243:   @VisibleForTesting",
          "244:   void copyHAProperties(String defaultFS) throws URISyntaxException, HdfsApiException {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "243:       HA_NAMENODES_INSTANCE_PROPERTY);",
          "245:     String[] namenodes = namenodeIDs.split(\",\");",
          "248:     }",
          "265:     copyClusterProperty(String.format(FAILOVER_PROXY_PROVIDER_CLUSTER_PROPERTY, nameservice),",
          "266:       FAILOVER_PROXY_PROVIDER_INSTANCE_PROPERTY);",
          "267:   }",
          "269:   private String copyClusterProperty(String propertyName, String instancePropertyName) {",
          "270:     String value = getProperty(HDFS_SITE, propertyName, instancePropertyName);",
          "271:     if (!StringUtils.isEmpty(value)) {",
          "",
          "[Removed Lines]",
          "246:     if (namenodes.length != 2) {",
          "247:       throw new HdfsApiException(\"HDFS080 \" + HA_NAMENODES_INSTANCE_PROPERTY + \" namenodes count is not exactly 2\");",
          "250:     copyClusterProperty(String.format(NAMENODE_RPC_NN_CLUSTER_PROPERTY, nameservice, namenodes[0]),",
          "251:       NAMENODE_RPC_NN1_INSTANCE_PROPERTY);",
          "252:     copyClusterProperty(String.format(NAMENODE_HTTP_NN_CLUSTER_PROPERTY, nameservice, namenodes[0]),",
          "253:       NAMENODE_HTTP_NN1_INSTANCE_PROPERTY);",
          "254:     copyClusterProperty(String.format(NAMENODE_HTTPS_NN_CLUSTER_PROPERTY, nameservice, namenodes[0]),",
          "255:       NAMENODE_HTTPS_NN1_INSTANCE_PROPERTY);",
          "258:     copyClusterProperty(String.format(NAMENODE_RPC_NN_CLUSTER_PROPERTY, nameservice, namenodes[1]),",
          "259:       NAMENODE_RPC_NN2_INSTANCE_PROPERTY);",
          "260:     copyClusterProperty(String.format(NAMENODE_HTTP_NN_CLUSTER_PROPERTY, nameservice, namenodes[1]),",
          "261:       NAMENODE_HTTP_NN2_INSTANCE_PROPERTY);",
          "262:     copyClusterProperty(String.format(NAMENODE_HTTPS_NN_CLUSTER_PROPERTY, nameservice, namenodes[1]),",
          "263:       NAMENODE_HTTPS_NN2_INSTANCE_PROPERTY);",
          "",
          "[Added Lines]",
          "256:     List<String> rpcAddresses = new ArrayList<>(namenodes.length);",
          "257:     List<String> httpAddresses = new ArrayList<>(namenodes.length);",
          "258:     List<String> httpsAddresses = new ArrayList<>(namenodes.length);",
          "259:     for (String namenode : namenodes) {",
          "261:       String rpcAddress = getProperty(HDFS_SITE, String.format(NAMENODE_RPC_NN_CLUSTER_PROPERTY, nameservice, namenode));",
          "262:       if(!Strings.isNullOrEmpty(rpcAddress)) {",
          "263:         rpcAddresses.add(rpcAddress);",
          "264:       }",
          "266:       String httpAddress = getProperty(HDFS_SITE, String.format(NAMENODE_HTTP_NN_CLUSTER_PROPERTY, nameservice, namenode));",
          "267:       if(!Strings.isNullOrEmpty(httpAddress)) {",
          "268:         httpAddresses.add(httpAddress);",
          "269:       }",
          "271:       String httpsAddress = getProperty(HDFS_SITE, String.format(NAMENODE_HTTPS_NN_CLUSTER_PROPERTY, nameservice, namenode));",
          "272:       if(!Strings.isNullOrEmpty(httpsAddress)) {",
          "273:         httpsAddresses.add(httpsAddress);",
          "274:       }",
          "275:     }",
          "277:     addAddresses(rpcAddresses, NAMENODE_RPC_NN_INSTANCE_PROPERTY);",
          "278:     addAddresses(httpAddresses, NAMENODE_HTTP_NN_INSTANCE_PROPERTY);",
          "279:     addAddresses(httpsAddresses, NAMENODE_HTTPS_NN_INSTANCE_PROPERTY);",
          "281:     for (int i = 0 ; i < namenodes.length ; i++) {",
          "282:       conf.set( String.format(NAMENODE_RPC_NN_CLUSTER_PROPERTY, nameservice, namenodes[i]), rpcAddresses.get(i));",
          "283:       conf.set( String.format(NAMENODE_HTTP_NN_CLUSTER_PROPERTY, nameservice, namenodes[i]), httpAddresses.get(i));",
          "284:       conf.set( String.format(NAMENODE_HTTPS_NN_CLUSTER_PROPERTY, nameservice, namenodes[i]), httpsAddresses.get(i));",
          "291:   private void addAddresses(List<String> addressList, String propertyName) {",
          "292:     if(addressList.isEmpty()){",
          "294:       String addressString = getViewProperty(propertyName);",
          "295:       LOG.debug(\"value of {} in view is : {}\", propertyName, addressString);",
          "296:       if(!Strings.isNullOrEmpty(addressString)){",
          "297:         addressList.addAll(Arrays.asList(addressString.split(\",\")));",
          "298:       }",
          "299:     }",
          "300:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "327:     parseProperties();",
          "328:     setAuthParams(buildAuthenticationConfig());",
          "331:     if (umask != null && !umask.isEmpty()) conf.set(UMASK_CLUSTER_PROPERTY, umask);",
          "333:     if(null != this.customProperties){",
          "",
          "[Removed Lines]",
          "330:     String umask = context.getProperties().get(UMASK_INSTANCE_PROPERTY);",
          "",
          "[Added Lines]",
          "363:     String umask = getViewProperty(UMASK_INSTANCE_PROPERTY);",
          "",
          "---------------"
        ],
        "contrib/views/utils/src/test/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilderTest.java||contrib/views/utils/src/test/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilderTest.java": [
          "File: contrib/views/utils/src/test/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilderTest.java -> contrib/views/utils/src/test/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.view.utils.hdfs;",
          "21: import org.apache.ambari.view.ViewContext;",
          "22: import org.apache.ambari.view.cluster.Cluster;",
          "23: import org.easymock.EasyMockSupport;",
          "24: import org.junit.Test;",
          "26: import java.util.HashMap;",
          "27: import java.util.Map;",
          "29: import static org.easymock.EasyMock.expect;",
          "30: import static org.easymock.EasyMock.replay;",
          "31: import static org.junit.Assert.*;",
          "33: public class ConfigurationBuilderTest extends EasyMockSupport {",
          "34:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import com.google.common.base.Joiner;",
          "25: import org.junit.Assert;",
          "28: import java.util.Arrays;",
          "31: import java.util.Properties;",
          "33: import static org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.HA_NAMENODES_INSTANCE_PROPERTY;",
          "34: import static org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_HTTPS_NN_CLUSTER_PROPERTY;",
          "35: import static org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_HTTPS_NN_INSTANCE_PROPERTY;",
          "36: import static org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_HTTP_NN_CLUSTER_PROPERTY;",
          "37: import static org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_HTTP_NN_INSTANCE_PROPERTY;",
          "38: import static org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_RPC_NN_CLUSTER_PROPERTY;",
          "39: import static org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMENODE_RPC_NN_INSTANCE_PROPERTY;",
          "40: import static org.apache.ambari.view.utils.hdfs.ConfigurationBuilder.NAMESERVICES_INSTANCE_PROPERTY;",
          "44: import static org.mockito.Mockito.mock;",
          "45: import static org.mockito.Mockito.when;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     replay(cluster);",
          "68:     ViewContext viewContext = createNiceMock(ViewContext.class);",
          "70:     Map<String, String> instanceProperties = new HashMap<>();",
          "71:     expect(viewContext.getProperties()).andReturn(instanceProperties).anyTimes();",
          "72:     replay(viewContext);",
          "",
          "[Removed Lines]",
          "69:     expect(viewContext.getCluster()).andReturn(cluster);",
          "",
          "[Added Lines]",
          "83:     expect(viewContext.getCluster()).andReturn(cluster).anyTimes();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:     assertEquals(encryptionKeyProviderUri, keyProvider);",
          "78:   }",
          "79: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:   @Test",
          "95:   public void testCopyHAProperties() throws Exception {",
          "96:     Map<String, String> properties = new HashMap();",
          "97:     String[] nnrpc = new String[]{\"nn1rpc\", \"nn2rpc\", \"nn3rpc\"};",
          "98:     String[] nnhttp = new String[]{\"nn1http\", \"nn2http\", \"nn3http\"};",
          "99:     String[] nnhttps = new String[]{\"nn1https\", \"nn2https\", \"nn3https\"};",
          "101:     String nameservice = \"mycluster\";",
          "102:     String nameNodesString = \"nn1,nn2,nn3\";",
          "103:     String[] namenodes = nameNodesString.split(\",\");",
          "104:     properties.put(NAMESERVICES_INSTANCE_PROPERTY, nameservice);",
          "105:     properties.put(HA_NAMENODES_INSTANCE_PROPERTY, nameNodesString);",
          "106:     properties.put(NAMENODE_RPC_NN_INSTANCE_PROPERTY, Joiner.on(\",\").join(Arrays.asList(nnrpc)));",
          "107:     properties.put(NAMENODE_HTTP_NN_INSTANCE_PROPERTY, Joiner.on(\",\").join(Arrays.asList(nnhttp)));",
          "108:     properties.put(NAMENODE_HTTPS_NN_INSTANCE_PROPERTY, Joiner.on(\",\").join(Arrays.asList(nnhttps)));",
          "110:     String defaultFS = \"webhdfs://\" + nameservice;",
          "111:     Cluster cluster = mock(Cluster.class);",
          "112:     ViewContext viewContext = mock(ViewContext.class);",
          "113:     when(viewContext.getCluster()).thenReturn(null);",
          "114:     when(viewContext.getProperties()).thenReturn(properties);",
          "116:     ConfigurationBuilder configurationBuilder = new ConfigurationBuilder(viewContext);",
          "117:     configurationBuilder.copyHAProperties(defaultFS);",
          "119:     for(int i = 0 ; i < nnhttp.length; i++) {",
          "120:       Assert.assertEquals(\"name node rpc address not correct.\", nnrpc[i], configurationBuilder.conf.get(String.format(NAMENODE_RPC_NN_CLUSTER_PROPERTY, nameservice, namenodes[i])));",
          "121:       Assert.assertEquals(\"name node http address not correct.\", nnhttp[i], configurationBuilder.conf.get(String.format(NAMENODE_HTTP_NN_CLUSTER_PROPERTY, nameservice, namenodes[i])));",
          "122:       Assert.assertEquals(\"name node https address not correct.\", nnhttps[i], configurationBuilder.conf.get(String.format(NAMENODE_HTTPS_NN_CLUSTER_PROPERTY, nameservice, namenodes[i])));",
          "123:     }",
          "124:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a494c1d6814fe6d047520ebf6883039c02ded81a",
      "candidate_info": {
        "commit_hash": "a494c1d6814fe6d047520ebf6883039c02ded81a",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a494c1d6814fe6d047520ebf6883039c02ded81a",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less"
        ],
        "message": "[AMBARI-24425] [Log Search UI] Create visible time histogram selection area (#2030)\n\n(cherry picked from commit 0083d26b1c49e246904dd1201bffa57dd9198fc3)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.less||ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.less||ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.less": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.less -> ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   }",
          "44:   /deep/ rect.unselected-drag-area {",
          "47:   }",
          "48: }",
          "",
          "[Removed Lines]",
          "45:     fill: darken(@main-background-color, 10%);",
          "46:     opacity: .6;",
          "",
          "[Added Lines]",
          "45:     fill: @graph-invert-selection-background;",
          "46:     opacity: .4;",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/time-graph.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:         this.dragStartX = Math.max(0, this.getDragX(containers[0]) - this.margin.left);",
          "231:         this.dragArea = this.svg.insert('rect', ':first-child').attr('x', this.dragStartX).attr('y', 0).attr('width', 0)",
          "232:           .attr('height', this.height).attr('class', 'drag-area');",
          "233:       })",
          "234:       .on('drag', (datum: undefined, index: number, containers: d3.ContainerElement[]): void => {",
          "235:         const mousePos = this.getDragX(containers[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:         this.createInvertDragArea(this.dragStartX, this.dragStartX);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:         this.dragArea.attr('x', startX).attr('width', currentWidth);",
          "240:         const timeRange = this.getTimeRangeByXRanges(startX, startX + currentWidth);",
          "241:         this.setChartTimeGap(new Date(timeRange[0]), new Date(timeRange[1]));",
          "242:       })",
          "243:       .on('end', (): void => {",
          "244:         const dragAreaDetails = this.dragArea.node().getBBox();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:         this.setInvertDragArea(startX, startX + currentWidth);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:           const dateRange: [number, number] = this.getTimeRangeByXRanges(startX, endX);",
          "249:           this.selectArea.emit(dateRange);",
          "250:           this.dragArea.remove();",
          "251:           this.setChartTimeGap(new Date(dateRange[0]), new Date(dateRange[1]));",
          "252:         }",
          "253:       })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:           this.clearInvertDragArea();",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: @graph-padding: .5rem;",
          "82: @log-list-row-data-padding: 8px;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: @graph-invert-selection-background: @grey-color;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6d911681e87e6869c11b9f70a077934b619026a",
      "candidate_info": {
        "commit_hash": "a6d911681e87e6869c11b9f70a077934b619026a",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a6d911681e87e6869c11b9f70a077934b619026a",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java"
        ],
        "message": "AMBARI-25159. http.strict-transport-security change does not take affect in 2.7.x. (mpapirkovskyy) (#2825)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: import org.eclipse.jetty.server.HttpConfiguration;",
          "135: import org.eclipse.jetty.server.HttpConnectionFactory;",
          "136: import org.eclipse.jetty.server.NCSARequestLog;",
          "138: import org.eclipse.jetty.server.Server;",
          "139: import org.eclipse.jetty.server.ServerConnector;",
          "140: import org.eclipse.jetty.server.SessionIdManager;",
          "",
          "[Removed Lines]",
          "137: import org.eclipse.jetty.server.SecureRequestCustomizer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "636:       HttpConfiguration https_config = new HttpConfiguration();",
          "638:       https_config.setRequestHeaderSize(configs.getHttpRequestHeaderSize());",
          "639:       https_config.setResponseHeaderSize(configs.getHttpResponseHeaderSize());",
          "640:       https_config.setSendServerVersion(false);",
          "",
          "[Removed Lines]",
          "637:       https_config.addCustomizer(new SecureRequestCustomizer());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "683:       String httpsCrtPass = configsMap.get(Configuration.CLIENT_API_SSL_CRT_PASS.getKey());",
          "685:       HttpConfiguration https_config = new HttpConfiguration(http_config);",
          "687:       https_config.setSecurePort(configs.getClientSSLApiPort());",
          "689:       SslContextFactory contextFactoryApi = new SslContextFactory();",
          "",
          "[Removed Lines]",
          "686:       https_config.addCustomizer(new SecureRequestCustomizer());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4e6cd5842191c6b89e6cb0b2a006fbe19069e7b",
      "candidate_info": {
        "commit_hash": "e4e6cd5842191c6b89e6cb0b2a006fbe19069e7b",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/e4e6cd5842191c6b89e6cb0b2a006fbe19069e7b",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/services/BaseService.java",
          "ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewInstanceService.java"
        ],
        "message": "AMBARI-25204. Ambari returns stack trace in HTML doc when an error occurs retrieving details for an Ambari View resource that does not exist (#2912)\n\n* AMBARI-25204. Ambari returns stack trace in HTML doc when an error occurs retrieving details for an Ambari View resource that does not exist (dlysnichenko)\n\n* AMBARI-25204. Ambari returns stack trace in HTML doc when an error occurs retrieving details for an Ambari View resource that does not exist. Add javadocs to fix checkstyle (dlysnichenko)\n\n* AMBARI-25204. Ambari returns stack trace in HTML doc when an error occurs retrieving details for an Ambari View resource that does not exist. Add javadocs to fix checkstyle (dlysnichenko)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/services/BaseService.java||ambari-server/src/main/java/org/apache/ambari/server/api/services/BaseService.java",
          "ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewInstanceService.java||ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewInstanceService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/api/services/BaseService.java||ambari-server/src/main/java/org/apache/ambari/server/api/services/BaseService.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/api/services/BaseService.java -> ambari-server/src/main/java/org/apache/ambari/server/api/services/BaseService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   public static final String MSG_INVALID_REQUEST = \"Invalid request\";",
          "56:   public static final String MSG_CLUSTER_NOT_FOUND = \"Cluster not found\";",
          "57:   public static final String MSG_CLUSTER_OR_HOST_NOT_FOUND = \"Cluster or host not found\";",
          "58:   public static final String MSG_NOT_AUTHENTICATED = \"Not authenticated\";",
          "59:   public static final String MSG_PERMISSION_DENIED = \"Not permitted to perform the operation\";",
          "60:   public static final String MSG_SERVER_ERROR = \"Internal server error\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   public static final String MSG_VIEW_NOT_FOUND = \"View not found\";",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewInstanceService.java||ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewInstanceService.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewInstanceService.java -> ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewInstanceService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import org.apache.ambari.server.api.resources.ResourceInstance;",
          "39: import org.apache.ambari.server.api.services.BaseService;",
          "40: import org.apache.ambari.server.api.services.Request;",
          "41: import org.apache.ambari.server.controller.ViewInstanceResponse;",
          "42: import org.apache.ambari.server.controller.spi.Resource;",
          "43: import org.apache.ambari.server.orm.entities.ViewInstanceEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import org.apache.ambari.server.api.services.Result;",
          "42: import org.apache.ambari.server.api.services.ResultImpl;",
          "43: import org.apache.ambari.server.api.services.ResultStatus;",
          "44: import org.apache.ambari.server.api.services.serializers.JsonSerializer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:         ViewRegistry.getInstance().getInstanceDefinition(viewName, version, instanceName);",
          "318:     if (instanceDefinition == null) {",
          "321:     }",
          "323:     Object service = instanceDefinition.getService(resources);",
          "325:     if (service == null) {",
          "328:     }",
          "329:     return service;",
          "330:   }",
          "",
          "[Removed Lines]",
          "319:       throw new IllegalArgumentException(\"A view instance \" +",
          "320:           viewName + \"/\" + instanceName + \" can not be found.\");",
          "326:       throw new IllegalArgumentException(\"A resource type \" + resources + \" for view instance \" +",
          "327:           viewName + \"/\" + instanceName + \" can not be found.\");",
          "",
          "[Added Lines]",
          "323:       String msg = \"A view instance \" +",
          "324:           viewName + \"/\" + instanceName + \" can not be found.\";",
          "326:       return new NotFoundResponse(msg);",
          "332:       String msg = \"A resource type \" + resources + \" for view instance \" +",
          "333:           viewName + \"/\" + instanceName + \" can not be found.\";",
          "334:       return new NotFoundResponse(msg);",
          "343:   @Path(\"/\")",
          "344:   public class NotFoundResponse {",
          "346:     String msg;",
          "348:     NotFoundResponse(String msg){",
          "349:       this.msg=msg;",
          "350:     }",
          "357:     @GET",
          "358:     @Produces(MediaType.TEXT_PLAIN)",
          "359:     @ApiOperation(value = \"Handle GET resource with 404 response\")",
          "360:     public Response get() {",
          "361:       return getResponse();",
          "362:     }",
          "369:     @POST",
          "370:     @Produces(MediaType.TEXT_PLAIN)",
          "371:     @ApiOperation(value = \"Handle POST resource with 404 response\")",
          "372:     public Response post() {",
          "373:       return getResponse();",
          "374:     }",
          "381:     @PUT",
          "382:     @Produces(MediaType.TEXT_PLAIN)",
          "383:     @ApiOperation(value = \"Handle PUT resource with 404 response\")",
          "384:     public Response put() {",
          "385:       return getResponse();",
          "386:     }",
          "393:     @DELETE",
          "394:     @Produces(MediaType.TEXT_PLAIN)",
          "395:     @ApiOperation(value = \"Handle DELETE resource with 404 response\")",
          "396:     public Response delete() {",
          "397:       return getResponse();",
          "398:     }",
          "405:     @GET",
          "406:     @Path(\"{path: .*}\")",
          "407:     @Produces(MediaType.TEXT_PLAIN)",
          "408:     @ApiOperation(value = \"Handle GET sub-resource with 404 response\")",
          "409:     public Response getSub() {",
          "410:       return getResponse();",
          "411:     }",
          "418:     @POST",
          "419:     @Path(\"{path: .*}\")",
          "420:     @Produces(MediaType.TEXT_PLAIN)",
          "421:     @ApiOperation(value = \"Handle POST sub-resource with 404 response\")",
          "422:     public Response postSub() {",
          "423:       return getResponse();",
          "424:     }",
          "431:     @PUT",
          "432:     @Path(\"{path: .*}\")",
          "433:     @Produces(MediaType.TEXT_PLAIN)",
          "434:     @ApiOperation(value = \"Handle PUT sub-resource with 404 response\")",
          "435:     public Response putSub() {",
          "436:       return getResponse();",
          "437:     }",
          "444:     @DELETE",
          "445:     @Path(\"{path: .*}\")",
          "446:     @Produces(MediaType.TEXT_PLAIN)",
          "447:     @ApiOperation(value = \"Handle DELETE sub-resource with 404 response\")",
          "448:     public Response deleteSub() {",
          "449:       return getResponse();",
          "450:     }",
          "456:     public Response getResponse() {",
          "457:       Result result = new ResultImpl(new ResultStatus(ResultStatus.STATUS.NOT_FOUND, msg));",
          "458:       Response.ResponseBuilder builder = Response.status(result.getStatus().getStatusCode()).entity(new JsonSerializer().serialize(result));",
          "459:       return builder.build();",
          "460:     }",
          "462:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}