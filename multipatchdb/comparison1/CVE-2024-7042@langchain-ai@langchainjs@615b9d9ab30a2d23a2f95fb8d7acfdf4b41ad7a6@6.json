{
  "cve_id": "CVE-2024-7042",
  "cve_desc": "A vulnerability in the GraphCypherQAChain class of langchain-ai/langchainjs versions 0.2.5 and all versions with this class allows for prompt injection, leading to SQL injection. This vulnerability permits unauthorized data manipulation, data exfiltration, denial of service (DoS) by deleting all data, breaches in multi-tenant security environments, and data integrity issues. Attackers can create, update, or delete nodes and relationships without proper authorization, extract sensitive data, disrupt services, access data across different tenants, and compromise the integrity of the database.",
  "repo": "langchain-ai/langchainjs",
  "patch_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
  "patch_info": {
    "commit_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "repo": "langchain-ai/langchainjs",
    "commit_url": "https://github.com/langchain-ai/langchainjs/commit/615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "files": [
      "examples/package.json",
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/package.json",
      "libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock"
    ],
    "message": "feat(community): Remove required param from LanceDB integration (#6706)\n\nCo-authored-by: jacoblee93 <jacoblee93@gmail.com>",
    "before_after_code_files": [
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromDocs.ts -> examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import fs from \"node:fs/promises\";",
      "5: import path from \"node:path\";",
      "6: import os from \"node:os\";",
      "10: const loader = new TextLoader(\"src/document_loaders/example_data/example.txt\");",
      "11: const docs = await loader.load();",
      "13: export const run = async () => {",
      "14:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "26:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "27:   console.log(resultOne);",
      "",
      "[Removed Lines]",
      "7: import { connect } from \"vectordb\";",
      "15:   const db = await connect(dir);",
      "16:   const table = await db.createTable(\"vectors\", [",
      "17:     { vector: Array(1536), text: \"sample\", source: \"a\" },",
      "18:   ]);",
      "20:   const vectorStore = await LanceDB.fromDocuments(",
      "21:     docs,",
      "22:     new OpenAIEmbeddings(),",
      "23:     { table }",
      "24:   );",
      "",
      "[Added Lines]",
      "13:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "15:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "16:   console.log(resultOne);",
      "24: };",
      "26: export const run_with_existing_table = async () => {",
      "29:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "",
      "---------------"
    ],
    "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromTexts.ts -> examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { LanceDB } from \"@langchain/community/vectorstores/lancedb\";",
      "2: import { OpenAIEmbeddings } from \"@langchain/openai\";",
      "4: import * as fs from \"node:fs/promises\";",
      "5: import * as path from \"node:path\";",
      "6: import os from \"node:os\";",
      "8: export const run = async () => {",
      "15:   const vectorStore = await LanceDB.fromTexts(",
      "16:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "17:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "20:   );",
      "22:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "",
      "[Removed Lines]",
      "3: import { connect } from \"vectordb\";",
      "9:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "10:   const db = await connect(dir);",
      "11:   const table = await db.createTable(\"vectors\", [",
      "12:     { vector: Array(1536), text: \"sample\", id: 1 },",
      "13:   ]);",
      "18:     new OpenAIEmbeddings(),",
      "19:     { table }",
      "",
      "[Added Lines]",
      "8:   const vectorStore = await LanceDB.fromTexts(",
      "9:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "10:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "11:     new OpenAIEmbeddings()",
      "12:   );",
      "14:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "15:   console.log(resultOne);",
      "17: };",
      "19: export const run_with_existing_table = async () => {",
      "20:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "24:     new OpenAIEmbeddings()",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts": [
      "File: libs/langchain-community/src/vectorstores/lancedb.ts -> libs/langchain-community/src/vectorstores/lancedb.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import type { EmbeddingsInterface } from \"@langchain/core/embeddings\";",
      "3: import { VectorStore } from \"@langchain/core/vectorstores\";",
      "4: import { Document } from \"@langchain/core/documents\";",
      "",
      "[Removed Lines]",
      "1: import { Table } from \"vectordb\";",
      "",
      "[Added Lines]",
      "1: import { connect, Table, Connection, WriteMode } from \"vectordb\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "10: export type LanceDBArgs = {",
      "12:   textKey?: string;",
      "13: };",
      "",
      "[Removed Lines]",
      "11:   table: Table;",
      "",
      "[Added Lines]",
      "11:   table?: Table;",
      "13:   uri?: string;",
      "14:   tableName?: string;",
      "15:   mode?: WriteMode;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "20: export class LanceDB extends VectorStore {",
      "23:   private textKey: string;",
      "28:     this.embeddings = embeddings;",
      "30:   }",
      "",
      "[Removed Lines]",
      "21:   private table: Table;",
      "25:   constructor(embeddings: EmbeddingsInterface, args: LanceDBArgs) {",
      "26:     super(embeddings, args);",
      "27:     this.table = args.table;",
      "29:     this.textKey = args.textKey || \"text\";",
      "",
      "[Added Lines]",
      "24:   private table?: Table;",
      "28:   private uri: string;",
      "30:   private tableName: string;",
      "32:   private mode?: WriteMode;",
      "34:   constructor(embeddings: EmbeddingsInterface, args?: LanceDBArgs) {",
      "35:     super(embeddings, args || {});",
      "36:     this.table = args?.table;",
      "38:     this.textKey = args?.textKey || \"text\";",
      "39:     this.uri = args?.uri || \"~/lancedb\";",
      "40:     this.tableName = args?.tableName || \"langchain\";",
      "41:     this.mode = args?.mode || WriteMode.Overwrite;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "71:       });",
      "72:       data.push(record);",
      "73:     }",
      "74:     await this.table.add(data);",
      "75:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86:     if (!this.table) {",
      "87:       const db: Connection = await connect(this.uri);",
      "88:       this.table = await db.createTable(this.tableName, data, {",
      "89:         writeMode: this.mode,",
      "90:       });",
      "92:       return;",
      "93:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "85:     query: number[],",
      "86:     k: number",
      "87:   ): Promise<[Document, number][]> {",
      "88:     const results = await this.table.search(query).limit(k).execute();",
      "90:     const docsAndScore: [Document, number][] = [];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:     if (!this.table) {",
      "109:       throw new Error(",
      "110:         \"Table not found. Please add vectors to the table first.\"",
      "111:       );",
      "112:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "119:     texts: string[],",
      "120:     metadatas: object[] | object,",
      "121:     embeddings: EmbeddingsInterface,",
      "123:   ): Promise<LanceDB> {",
      "124:     const docs: Document[] = [];",
      "125:     for (let i = 0; i < texts.length; i += 1) {",
      "",
      "[Removed Lines]",
      "122:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "147:     dbConfig?: LanceDBArgs",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "143:   static async fromDocuments(",
      "144:     docs: Document[],",
      "145:     embeddings: EmbeddingsInterface,",
      "147:   ): Promise<LanceDB> {",
      "148:     const instance = new this(embeddings, dbConfig);",
      "149:     await instance.addDocuments(docs);",
      "",
      "[Removed Lines]",
      "146:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "171:     dbConfig?: LanceDBArgs",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts": [
      "File: libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts -> libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     expect(resultsTwo.length).toBe(5);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49: describe(\"LanceDB empty schema\", () => {",
      "50:   test(\"Test fromTexts + addDocuments\", async () => {",
      "51:     const embeddings = new OpenAIEmbeddings();",
      "52:     const vectorStore = await LanceDB.fromTexts(",
      "53:       [\"hello bye\", \"hello world\", \"bye bye\"],",
      "54:       [{ id: 1 }, { id: 2 }, { id: 3 }],",
      "55:       embeddings",
      "56:     );",
      "58:     const results = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "59:     expect(results.length).toBe(3);",
      "61:     await vectorStore.addDocuments([",
      "62:       new Document({",
      "63:         pageContent: \"a new world\",",
      "64:         metadata: { id: 4 },",
      "65:       }),",
      "66:     ]);",
      "68:     const resultsTwo = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "69:     expect(resultsTwo.length).toBe(4);",
      "70:   });",
      "71: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:   languageName: node",
      "252:   linkType: hard",
      "272: \"@apify/consts@npm:^2.13.0, @apify/consts@npm:^2.9.0\":",
      "273:   version: 2.13.0",
      "274:   resolution: \"@apify/consts@npm:2.13.0\"",
      "",
      "[Removed Lines]",
      "254: \"@apache-arrow/ts@npm:^12.0.0\":",
      "255:   version: 12.0.0",
      "256:   resolution: \"@apache-arrow/ts@npm:12.0.0\"",
      "257:   dependencies:",
      "258:     \"@types/command-line-args\": 5.2.0",
      "259:     \"@types/command-line-usage\": 5.0.2",
      "260:     \"@types/node\": 18.14.5",
      "261:     \"@types/pad-left\": 2.1.1",
      "262:     command-line-args: 5.2.1",
      "263:     command-line-usage: 6.1.3",
      "264:     flatbuffers: 23.3.3",
      "265:     json-bignum: ^0.0.3",
      "266:     pad-left: ^2.1.0",
      "267:     tslib: ^2.5.0",
      "268:   checksum: 67b2791e14d5377b1d160a0d8390decc386e013c517713f8b9c100737a0e478a394086d91a8c846848d4e30289070a119d8e65191998f4c2555b18a29564df50",
      "269:   languageName: node",
      "270:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11112:   languageName: node",
      "11113:   linkType: hard",
      "11115: \"@langchain/anthropic@*, @langchain/anthropic@workspace:*, @langchain/anthropic@workspace:libs/langchain-anthropic\":",
      "11116:   version: 0.0.0-use.local",
      "11117:   resolution: \"@langchain/anthropic@workspace:libs/langchain-anthropic\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11097: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\":",
      "11098:   version: 0.4.20",
      "11099:   resolution: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\"",
      "11100:   conditions: os=darwin & cpu=arm64",
      "11101:   languageName: node",
      "11102:   linkType: hard",
      "11104: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\":",
      "11105:   version: 0.4.20",
      "11106:   resolution: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\"",
      "11107:   conditions: os=darwin & cpu=x64",
      "11108:   languageName: node",
      "11109:   linkType: hard",
      "11111: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\":",
      "11112:   version: 0.4.20",
      "11113:   resolution: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\"",
      "11114:   conditions: os=linux & cpu=arm64",
      "11115:   languageName: node",
      "11116:   linkType: hard",
      "11118: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\":",
      "11119:   version: 0.4.20",
      "11120:   resolution: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\"",
      "11121:   conditions: os=linux & cpu=x64",
      "11122:   languageName: node",
      "11123:   linkType: hard",
      "11125: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\":",
      "11126:   version: 0.4.20",
      "11127:   resolution: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\"",
      "11128:   conditions: os=win32 & cpu=x64",
      "11129:   languageName: node",
      "11130:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "11577:     typesense: ^1.5.3",
      "11578:     usearch: ^1.1.1",
      "11579:     uuid: ^10.0.0",
      "11581:     voy-search: 0.6.2",
      "11582:     weaviate-ts-client: ^1.4.0",
      "11583:     web-auth-library: ^1.0.3",
      "",
      "[Removed Lines]",
      "11580:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "11597:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "13039:   languageName: node",
      "13040:   linkType: hard",
      "13042: \"@neondatabase/serverless@npm:0.6.0\":",
      "13043:   version: 0.6.0",
      "13044:   resolution: \"@neondatabase/serverless@npm:0.6.0\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13059: \"@neon-rs/load@npm:^0.0.74\":",
      "13060:   version: 0.0.74",
      "13061:   resolution: \"@neon-rs/load@npm:0.0.74\"",
      "13062:   checksum: d26ec9b08cdf1a7c5aeefe98f77112d205d11b4005a7934b21fe8fd27528847e08e4749e7e6c3fc05ae9f701175a58c11a095ae6af449634df3991a2c82e1dfa",
      "13063:   languageName: node",
      "13064:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "20774:   languageName: node",
      "20775:   linkType: hard",
      "20797: \"apache-arrow@npm:^12.0.1\":",
      "20798:   version: 12.0.1",
      "20799:   resolution: \"apache-arrow@npm:12.0.1\"",
      "",
      "[Removed Lines]",
      "20777: \"apache-arrow@npm:^12.0.0\":",
      "20778:   version: 12.0.0",
      "20779:   resolution: \"apache-arrow@npm:12.0.0\"",
      "20780:   dependencies:",
      "20781:     \"@types/command-line-args\": 5.2.0",
      "20782:     \"@types/command-line-usage\": 5.0.2",
      "20783:     \"@types/node\": 18.14.5",
      "20784:     \"@types/pad-left\": 2.1.1",
      "20785:     command-line-args: 5.2.1",
      "20786:     command-line-usage: 6.1.3",
      "20787:     flatbuffers: 23.3.3",
      "20788:     json-bignum: ^0.0.3",
      "20789:     pad-left: ^2.1.0",
      "20790:     tslib: ^2.5.0",
      "20791:   bin:",
      "20792:     arrow2csv: bin/arrow2csv.js",
      "20793:   checksum: 3285189517c2b298cda42852321ce127754918513116eade6e4914c57983f68b6ba96605cfaa2202796d3d6e14755d3b3758f76c1374492affa3d95714eaca40",
      "20794:   languageName: node",
      "20795:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "27133:     typescript: ~5.1.6",
      "27134:     typesense: ^1.5.3",
      "27135:     uuid: ^10.0.0",
      "27137:     voy-search: 0.6.2",
      "27138:     weaviate-ts-client: ^2.0.0",
      "27139:     zod: ^3.22.4",
      "",
      "[Removed Lines]",
      "27136:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "27140:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "42444:   languageName: node",
      "42445:   linkType: hard",
      "42454:   languageName: node",
      "42455:   linkType: hard",
      "",
      "[Removed Lines]",
      "42447: \"vectordb@npm:^0.1.4\":",
      "42448:   version: 0.1.4",
      "42449:   resolution: \"vectordb@npm:0.1.4\"",
      "42450:   dependencies:",
      "42451:     \"@apache-arrow/ts\": ^12.0.0",
      "42452:     apache-arrow: ^12.0.0",
      "42453:   checksum: 8a40abf4466479b0b9e61687416b5ab232458401917bf9a1d5f3d8ea8c8320ecc5691174f4d4c0cfef0bb6c16328a9088419fd90ac85fd7267dbccdd1f9e55d7",
      "",
      "[Added Lines]",
      "42451: \"vectordb@npm:^0.9.0\":",
      "42452:   version: 0.9.0",
      "42453:   resolution: \"vectordb@npm:0.9.0\"",
      "42454:   dependencies:",
      "42455:     \"@lancedb/vectordb-darwin-arm64\": 0.4.20",
      "42456:     \"@lancedb/vectordb-darwin-x64\": 0.4.20",
      "42457:     \"@lancedb/vectordb-linux-arm64-gnu\": 0.4.20",
      "42458:     \"@lancedb/vectordb-linux-x64-gnu\": 0.4.20",
      "42459:     \"@lancedb/vectordb-win32-x64-msvc\": 0.4.20",
      "42460:     \"@neon-rs/load\": ^0.0.74",
      "42461:     axios: ^1.4.0",
      "42462:   peerDependencies:",
      "42463:     \"@apache-arrow/ts\": ^14.0.2",
      "42464:     apache-arrow: ^14.0.2",
      "42465:   dependenciesMeta:",
      "42466:     \"@lancedb/vectordb-darwin-arm64\":",
      "42467:       optional: true",
      "42468:     \"@lancedb/vectordb-darwin-x64\":",
      "42469:       optional: true",
      "42470:     \"@lancedb/vectordb-linux-arm64-gnu\":",
      "42471:       optional: true",
      "42472:     \"@lancedb/vectordb-linux-x64-gnu\":",
      "42473:       optional: true",
      "42474:     \"@lancedb/vectordb-win32-x64-msvc\":",
      "42475:       optional: true",
      "42476:   conditions: (os=darwin | os=linux | os=win32) & (cpu=x64 | cpu=arm64)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7f729c9d3b0232ed4e92c3963f514458461d85e5",
      "candidate_info": {
        "commit_hash": "7f729c9d3b0232ed4e92c3963f514458461d85e5",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/7f729c9d3b0232ed4e92c3963f514458461d85e5",
        "files": [
          "libs/langchain-google-common/package.json",
          "libs/langchain-google-gauth/package.json",
          "libs/langchain-google-vertexai-web/package.json",
          "libs/langchain-google-vertexai/package.json",
          "libs/langchain-google-webauth/package.json",
          "yarn.lock"
        ],
        "message": "release(google): 0.1.6 (#7456)",
        "before_after_code_files": [
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12443:   languageName: unknown",
          "12444:   linkType: soft",
          "12447:   version: 0.0.0-use.local",
          "12448:   resolution: \"@langchain/google-common@workspace:libs/langchain-google-common\"",
          "12449:   dependencies:",
          "",
          "[Removed Lines]",
          "12446: \"@langchain/google-common@^0.1.0, @langchain/google-common@workspace:*, @langchain/google-common@workspace:libs/langchain-google-common, @langchain/google-common@~0.1.5\":",
          "",
          "[Added Lines]",
          "12446: \"@langchain/google-common@^0.1.0, @langchain/google-common@workspace:*, @langchain/google-common@workspace:libs/langchain-google-common, @langchain/google-common@~0.1.6\":",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12478:   languageName: unknown",
          "12479:   linkType: soft",
          "12482:   version: 0.0.0-use.local",
          "12483:   resolution: \"@langchain/google-gauth@workspace:libs/langchain-google-gauth\"",
          "12484:   dependencies:",
          "12485:     \"@jest/globals\": ^29.5.0",
          "12486:     \"@langchain/core\": \"workspace:*\"",
          "12488:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12489:     \"@swc/core\": ^1.3.90",
          "12490:     \"@swc/jest\": ^0.2.29",
          "",
          "[Removed Lines]",
          "12481: \"@langchain/google-gauth@workspace:libs/langchain-google-gauth, @langchain/google-gauth@~0.1.5\":",
          "12487:     \"@langchain/google-common\": ~0.1.5",
          "",
          "[Added Lines]",
          "12481: \"@langchain/google-gauth@workspace:libs/langchain-google-gauth, @langchain/google-gauth@~0.1.6\":",
          "12487:     \"@langchain/google-common\": ~0.1.6",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12557:     \"@jest/globals\": ^29.5.0",
          "12558:     \"@langchain/core\": \"workspace:*\"",
          "12559:     \"@langchain/google-common\": ^0.1.0",
          "12561:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12562:     \"@langchain/standard-tests\": 0.0.0",
          "12563:     \"@swc/core\": ^1.3.90",
          "",
          "[Removed Lines]",
          "12560:     \"@langchain/google-webauth\": ~0.1.5",
          "",
          "[Added Lines]",
          "12560:     \"@langchain/google-webauth\": ~0.1.6",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "12593:     \"@jest/globals\": ^29.5.0",
          "12594:     \"@langchain/core\": \"workspace:*\"",
          "12595:     \"@langchain/google-common\": ^0.1.0",
          "12597:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12598:     \"@langchain/standard-tests\": 0.0.0",
          "12599:     \"@swc/core\": ^1.3.90",
          "",
          "[Removed Lines]",
          "12596:     \"@langchain/google-gauth\": ~0.1.5",
          "",
          "[Added Lines]",
          "12596:     \"@langchain/google-gauth\": ~0.1.6",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "12622:   languageName: unknown",
          "12623:   linkType: soft",
          "12626:   version: 0.0.0-use.local",
          "12627:   resolution: \"@langchain/google-webauth@workspace:libs/langchain-google-webauth\"",
          "12628:   dependencies:",
          "12629:     \"@jest/globals\": ^29.5.0",
          "12630:     \"@langchain/core\": \"workspace:*\"",
          "12632:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12633:     \"@swc/core\": ^1.3.90",
          "12634:     \"@swc/jest\": ^0.2.29",
          "",
          "[Removed Lines]",
          "12625: \"@langchain/google-webauth@workspace:libs/langchain-google-webauth, @langchain/google-webauth@~0.1.5\":",
          "12631:     \"@langchain/google-common\": ~0.1.5",
          "",
          "[Added Lines]",
          "12625: \"@langchain/google-webauth@workspace:libs/langchain-google-webauth, @langchain/google-webauth@~0.1.6\":",
          "12631:     \"@langchain/google-common\": ~0.1.6",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f483c6ee8b99192b349cd752e108b338ce8d56ae",
      "candidate_info": {
        "commit_hash": "f483c6ee8b99192b349cd752e108b338ce8d56ae",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/f483c6ee8b99192b349cd752e108b338ce8d56ae",
        "files": [
          "docs/core_docs/docs/integrations/chat/cohere.ipynb",
          "docs/core_docs/docs/integrations/document_compressors/cohere_rerank.mdx",
          "docs/core_docs/docs/integrations/llms/cohere.ipynb",
          "docs/core_docs/docs/integrations/text_embedding/cohere.ipynb",
          "examples/package.json",
          "examples/src/document_compressors/cohere_rerank_custom_client.ts",
          "libs/langchain-cohere/package.json",
          "libs/langchain-cohere/src/chat_models.ts",
          "libs/langchain-cohere/src/client.ts",
          "libs/langchain-cohere/src/embeddings.ts",
          "libs/langchain-cohere/src/llms.ts",
          "libs/langchain-cohere/src/rerank.ts",
          "yarn.lock"
        ],
        "message": "feat(cohere): Cohere custom client support (#6938)\n\nCo-authored-by: Brace Sproul <braceasproul@gmail.com>\nCo-authored-by: jacoblee93 <jacoblee93@gmail.com>",
        "before_after_code_files": [
          "examples/src/document_compressors/cohere_rerank_custom_client.ts||examples/src/document_compressors/cohere_rerank_custom_client.ts",
          "libs/langchain-cohere/src/chat_models.ts||libs/langchain-cohere/src/chat_models.ts",
          "libs/langchain-cohere/src/client.ts||libs/langchain-cohere/src/client.ts",
          "libs/langchain-cohere/src/embeddings.ts||libs/langchain-cohere/src/embeddings.ts",
          "libs/langchain-cohere/src/llms.ts||libs/langchain-cohere/src/llms.ts",
          "libs/langchain-cohere/src/rerank.ts||libs/langchain-cohere/src/rerank.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "examples/src/document_compressors/cohere_rerank_custom_client.ts||examples/src/document_compressors/cohere_rerank_custom_client.ts": [
          "File: examples/src/document_compressors/cohere_rerank_custom_client.ts -> examples/src/document_compressors/cohere_rerank_custom_client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { CohereRerank } from \"@langchain/cohere\";",
          "2: import { CohereClient } from \"cohere-ai\";",
          "3: import { Document } from \"@langchain/core/documents\";",
          "5: const query = \"What is the capital of the United States?\";",
          "6: const docs = [",
          "7:   new Document({",
          "8:     pageContent:",
          "9:       \"Carson City is the capital city of the American state of Nevada. At the 2010 United States Census, Carson City had a population of 55,274.\",",
          "10:   }),",
          "11:   new Document({",
          "12:     pageContent:",
          "13:       \"The Commonwealth of the Northern Mariana Islands is a group of islands in the Pacific Ocean that are a political division controlled by the United States. Its capital is Saipan.\",",
          "14:   }),",
          "15:   new Document({",
          "16:     pageContent:",
          "17:       \"Charlotte Amalie is the capital and largest city of the United States Virgin Islands. It has about 20,000 people. The city is on the island of Saint Thomas.\",",
          "18:   }),",
          "19:   new Document({",
          "20:     pageContent:",
          "21:       \"Washington, D.C. (also known as simply Washington or D.C., and officially as the District of Columbia) is the capital of the United States. It is a federal district. The President of the USA and many major national government offices are in the territory. This makes it the political center of the United States of America.\",",
          "22:   }),",
          "23:   new Document({",
          "24:     pageContent:",
          "25:       \"Capital punishment (the death penalty) has existed in the United States since before the United States was a country. As of 2017, capital punishment is legal in 30 of the 50 states. The federal government (including the United States military) also uses capital punishment.\",",
          "26:   }),",
          "27: ];",
          "29: const client = new CohereClient({",
          "30:   token: process.env.COHERE_API_KEY,",
          "31:   environment: \"<your-cohere-deployment-url>\", // optional",
          "33: });",
          "35: const cohereRerank = new CohereRerank({",
          "36:   client, // apiKey will be ignored even if provided",
          "37:   model: \"rerank-english-v2.0\",",
          "38: });",
          "40: const rerankedDocuments = await cohereRerank.rerank(docs, query, {",
          "41:   topN: 5,",
          "42: });",
          "44: console.log(rerankedDocuments);",
          "47:   [",
          "48:     { index: 3, relevanceScore: 0.9871293 },",
          "49:     { index: 1, relevanceScore: 0.29961726 },",
          "50:     { index: 4, relevanceScore: 0.27542195 },",
          "51:     { index: 0, relevanceScore: 0.08977329 },",
          "52:     { index: 2, relevanceScore: 0.041462272 }",
          "53:   ]",
          "",
          "---------------"
        ],
        "libs/langchain-cohere/src/chat_models.ts||libs/langchain-cohere/src/chat_models.ts": [
          "File: libs/langchain-cohere/src/chat_models.ts -> libs/langchain-cohere/src/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { ToolResult } from \"cohere-ai/api/index.js\";",
          "5: import { zodToJsonSchema } from \"zod-to-json-schema\";",
          "6: import {",
          "10:   AIMessage,",
          "11:   isAIMessage,",
          "12: } from \"@langchain/core/messages\";",
          "13: import {",
          "14:   BaseLanguageModelInput,",
          "",
          "[Removed Lines]",
          "2: import { CohereClient, Cohere } from \"cohere-ai\";",
          "7:   MessageType,",
          "8:   type BaseMessage,",
          "9:   MessageContent,",
          "",
          "[Added Lines]",
          "2: import { Cohere, CohereClient } from \"cohere-ai\";",
          "8:   type BaseMessage,",
          "10:   MessageContent,",
          "11:   MessageType,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: import { isLangChainTool } from \"@langchain/core/utils/function_calling\";",
          "18: import { CallbackManagerForLLMRun } from \"@langchain/core/callbacks/manager\";",
          "19: import {",
          "21:   BaseChatModel,",
          "23:   BaseChatModelCallOptions,",
          "24:   BindToolsInput,",
          "25: } from \"@langchain/core/language_models/chat_models\";",
          "26: import {",
          "27:   ChatGeneration,",
          "",
          "[Removed Lines]",
          "20:   type BaseChatModelParams,",
          "22:   LangSmithParams,",
          "",
          "[Added Lines]",
          "22:   type BaseChatModelParams,",
          "24:   LangSmithParams,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29:   ChatResult,",
          "30: } from \"@langchain/core/outputs\";",
          "31: import { AIMessageChunk } from \"@langchain/core/messages\";",
          "33: import { NewTokenIndices } from \"@langchain/core/callbacks/base\";",
          "34: import {",
          "36:   ToolCall,",
          "37:   ToolCallChunk,",
          "38: } from \"@langchain/core/messages/tool\";",
          "39: import * as uuid from \"uuid\";",
          "40: import { Runnable } from \"@langchain/core/runnables\";",
          "42: type ChatCohereToolType = BindToolsInput | Cohere.Tool;",
          "",
          "[Removed Lines]",
          "32: import { getEnvironmentVariable } from \"@langchain/core/utils/env\";",
          "35:   ToolMessage,",
          "47: export interface ChatCohereInput extends BaseChatModelParams {",
          "",
          "[Added Lines]",
          "36:   ToolMessage,",
          "40: import { CohereClientOptions, getCohereClient } from \"./client.js\";",
          "47: export interface BaseChatCohereInput extends BaseChatModelParams {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:   streamUsage?: boolean;",
          "79: }",
          "81: interface TokenUsage {",
          "82:   completionTokens?: number;",
          "83:   promptTokens?: number;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: export type ChatCohereInput = BaseChatCohereInput & CohereClientOptions;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "732:   constructor(fields?: ChatCohereInput) {",
          "733:     super(fields ?? {});",
          "743:     this.model = fields?.model ?? this.model;",
          "744:     this.temperature = fields?.temperature ?? this.temperature;",
          "745:     this.streaming = fields?.streaming ?? this.streaming;",
          "",
          "[Removed Lines]",
          "735:     const token = fields?.apiKey ?? getEnvironmentVariable(\"COHERE_API_KEY\");",
          "736:     if (!token) {",
          "737:       throw new Error(\"No API key provided for ChatCohere.\");",
          "738:     }",
          "740:     this.client = new CohereClient({",
          "741:       token,",
          "742:     });",
          "",
          "[Added Lines]",
          "737:     this.client = getCohereClient(fields);",
          "",
          "---------------"
        ],
        "libs/langchain-cohere/src/client.ts||libs/langchain-cohere/src/client.ts": [
          "File: libs/langchain-cohere/src/client.ts -> libs/langchain-cohere/src/client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { CohereClient } from \"cohere-ai\";",
          "2: import { getEnvironmentVariable } from \"@langchain/core/utils/env\";",
          "4: export type CohereClientOptions = {",
          "9:   apiKey?: string;",
          "14:   client?: CohereClient;",
          "15: };",
          "17: export function getCohereClient(fields?: CohereClientOptions): CohereClient {",
          "18:   if (fields?.client) {",
          "19:     return fields.client;",
          "20:   }",
          "22:   const apiKey = fields?.apiKey ?? getEnvironmentVariable(\"COHERE_API_KEY\");",
          "24:   if (!apiKey) {",
          "25:     throw new Error(\"COHERE_API_KEY must be set\");",
          "26:   }",
          "27:   return new CohereClient({ token: apiKey });",
          "28: }",
          "",
          "---------------"
        ],
        "libs/langchain-cohere/src/embeddings.ts||libs/langchain-cohere/src/embeddings.ts": [
          "File: libs/langchain-cohere/src/embeddings.ts -> libs/langchain-cohere/src/embeddings.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { CohereClient } from \"cohere-ai\";",
          "4: import { Embeddings, EmbeddingsParams } from \"@langchain/core/embeddings\";",
          "5: import { chunkArray } from \"@langchain/core/utils/chunk_array\";",
          "",
          "[Removed Lines]",
          "3: import { getEnvironmentVariable } from \"@langchain/core/utils/env\";",
          "",
          "[Added Lines]",
          "5: import { CohereClientOptions, getCohereClient } from \"./client.js\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:   constructor(",
          "58:     fields?: Partial<CohereEmbeddingsParams> & {",
          "59:       verbose?: boolean;",
          "62:   ) {",
          "63:     const fieldsWithDefaults = { maxConcurrency: 2, ...fields };",
          "65:     super(fieldsWithDefaults);",
          "77:     this.model = fieldsWithDefaults?.model ?? this.model;",
          "79:     if (!this.model) {",
          "",
          "[Removed Lines]",
          "60:       apiKey?: string;",
          "61:     }",
          "67:     const apiKey =",
          "68:       fieldsWithDefaults?.apiKey || getEnvironmentVariable(\"COHERE_API_KEY\");",
          "70:     if (!apiKey) {",
          "71:       throw new Error(\"Cohere API key not found\");",
          "72:     }",
          "74:     this.client = new CohereClient({",
          "75:       token: apiKey,",
          "76:     });",
          "",
          "[Added Lines]",
          "60:     } & CohereClientOptions",
          "66:     this.client = getCohereClient(fieldsWithDefaults);",
          "",
          "---------------"
        ],
        "libs/langchain-cohere/src/llms.ts||libs/langchain-cohere/src/llms.ts": [
          "File: libs/langchain-cohere/src/llms.ts -> libs/langchain-cohere/src/llms.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { CohereClient, Cohere as CohereTypes } from \"cohere-ai\";",
          "4: import { LLM, type BaseLLMParams } from \"@langchain/core/language_models/llms\";",
          "5: import { CallbackManagerForLLMRun } from \"@langchain/core/callbacks/manager\";",
          "6: import type { BaseLanguageModelCallOptions } from \"@langchain/core/language_models/base\";",
          "13:   temperature?: number;",
          "",
          "[Removed Lines]",
          "3: import { getEnvironmentVariable } from \"@langchain/core/utils/env\";",
          "11: export interface CohereInput extends BaseLLMParams {",
          "",
          "[Added Lines]",
          "6: import { CohereClientOptions, getCohereClient } from \"./client.js\";",
          "11: export interface BaseCohereInput extends BaseLLMParams {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:   model?: string;",
          "24: }",
          "26: interface CohereCallOptions",
          "27:   extends BaseLanguageModelCallOptions,",
          "28:     Partial<Omit<CohereTypes.GenerateRequest, \"message\">> {}",
          "",
          "[Removed Lines]",
          "23:   apiKey?: string;",
          "",
          "[Added Lines]",
          "24: export type CohereInput = BaseCohereInput & CohereClientOptions;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:   constructor(fields?: CohereInput) {",
          "79:     super(fields ?? {});",
          "92:     this.maxTokens = fields?.maxTokens ?? this.maxTokens;",
          "93:     this.temperature = fields?.temperature ?? this.temperature;",
          "94:     this.model = fields?.model ?? this.model;",
          "",
          "[Removed Lines]",
          "81:     const apiKey = fields?.apiKey ?? getEnvironmentVariable(\"COHERE_API_KEY\");",
          "83:     if (!apiKey) {",
          "84:       throw new Error(",
          "85:         \"Please set the COHERE_API_KEY environment variable or pass it to the constructor as the apiKey field.\"",
          "86:       );",
          "87:     }",
          "89:     this.client = new CohereClient({",
          "90:       token: apiKey,",
          "91:     });",
          "",
          "[Added Lines]",
          "81:     this.client = getCohereClient(fields);",
          "",
          "---------------"
        ],
        "libs/langchain-cohere/src/rerank.ts||libs/langchain-cohere/src/rerank.ts": [
          "File: libs/langchain-cohere/src/rerank.ts -> libs/langchain-cohere/src/rerank.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { DocumentInterface } from \"@langchain/core/documents\";",
          "2: import { BaseDocumentCompressor } from \"@langchain/core/retrievers/document_compressors\";",
          "4: import { CohereClient } from \"cohere-ai\";",
          "",
          "[Removed Lines]",
          "3: import { getEnvironmentVariable } from \"@langchain/core/utils/env\";",
          "6: export interface CohereRerankArgs {",
          "11:   apiKey?: string;",
          "",
          "[Added Lines]",
          "4: import { CohereClientOptions, getCohereClient } from \"./client.js\";",
          "6: export interface BaseCohereRerankArgs {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:   maxChunksPerDoc?: number;",
          "26: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: type CohereRerankArgs = BaseCohereRerankArgs & CohereClientOptions;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:   constructor(fields?: CohereRerankArgs) {",
          "41:     super();",
          "50:     this.model = fields?.model ?? this.model;",
          "51:     if (!this.model) {",
          "52:       throw new Error(",
          "",
          "[Removed Lines]",
          "42:     const token = fields?.apiKey ?? getEnvironmentVariable(\"COHERE_API_KEY\");",
          "43:     if (!token) {",
          "44:       throw new Error(\"No API key provided for CohereRerank.\");",
          "45:     }",
          "47:     this.client = new CohereClient({",
          "48:       token,",
          "49:     });",
          "",
          "[Added Lines]",
          "39:     this.client = getCohereClient(fields);",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "11404:     \"@tsconfig/recommended\": ^1.0.3",
          "11405:     \"@typescript-eslint/eslint-plugin\": ^6.12.0",
          "11406:     \"@typescript-eslint/parser\": ^6.12.0",
          "11408:     dotenv: ^16.3.1",
          "11409:     dpdm: ^3.12.0",
          "11410:     eslint: ^8.33.0",
          "",
          "[Removed Lines]",
          "11407:     cohere-ai: ^7.10.5",
          "",
          "[Added Lines]",
          "11407:     cohere-ai: ^7.14.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23135:   languageName: node",
          "23136:   linkType: hard",
          "23141:   dependencies:",
          "23142:     \"@aws-sdk/client-sagemaker\": ^3.583.0",
          "23143:     \"@aws-sdk/credential-providers\": ^3.583.0",
          "23144:     \"@aws-sdk/protocol-http\": ^3.374.0",
          "23145:     \"@aws-sdk/signature-v4\": ^3.374.0",
          "23147:     form-data-encoder: ^4.0.2",
          "23148:     formdata-node: ^6.0.3",
          "23149:     js-base64: 3.7.2",
          "",
          "[Removed Lines]",
          "23138: \"cohere-ai@npm:^7.10.5\":",
          "23139:   version: 7.10.5",
          "23140:   resolution: \"cohere-ai@npm:7.10.5\"",
          "23146:     form-data: 4.0.0",
          "",
          "[Added Lines]",
          "23138: \"cohere-ai@npm:^7.14.0\":",
          "23139:   version: 7.14.0",
          "23140:   resolution: \"cohere-ai@npm:7.14.0\"",
          "23146:     form-data: ^4.0.0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "23151:     qs: 6.11.2",
          "23152:     readable-stream: ^4.5.2",
          "23153:     url-join: 4.0.1",
          "23156:   languageName: node",
          "23157:   linkType: hard",
          "",
          "[Removed Lines]",
          "23154:     web-streams-polyfill: ^4.0.0",
          "23155:   checksum: 80f87d1bd831c0115936a9d9cd1a364bde184ad96d461396acb346e2d3601ef084b6736a1344553f6e05713b7e117a8c295ff508111fca9f7b6c2a16e722e035",
          "",
          "[Added Lines]",
          "23154:   checksum: 423426458f65947259bba6616d05b456f08163ee1d07e1e7d573fec2a1ba5eac737eb20d2769149b83bdb16f37ae9a7de77348016d49a1a5db47862e79ff29d4",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "27246:     \"@zilliz/milvus2-sdk-node\": ^2.3.5",
          "27247:     axios: ^0.26.0",
          "27248:     chromadb: ^1.5.3",
          "27249:     convex: ^1.3.1",
          "27250:     date-fns: ^3.3.1",
          "27251:     dotenv: ^16.0.3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27248:     cohere-ai: ^7.14.0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dcef79f300d53a057d49675b519023012dff716c",
      "candidate_info": {
        "commit_hash": "dcef79f300d53a057d49675b519023012dff716c",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/dcef79f300d53a057d49675b519023012dff716c",
        "files": [
          "langchain-core/.gitignore",
          "langchain-core/langchain.config.js",
          "langchain-core/package.json",
          "langchain-core/src/callbacks/dispatch/index.ts",
          "langchain-core/src/context.ts",
          "langchain-core/src/singletons/index.ts",
          "langchain-core/src/tests/context.test.ts",
          "langchain-core/src/tracers/tests/langsmith_interop.test.ts",
          "yarn.lock"
        ],
        "message": "feat(core): Adds support for context variables (#6967)",
        "before_after_code_files": [
          "langchain-core/langchain.config.js||langchain-core/langchain.config.js",
          "langchain-core/src/callbacks/dispatch/index.ts||langchain-core/src/callbacks/dispatch/index.ts",
          "langchain-core/src/context.ts||langchain-core/src/context.ts",
          "langchain-core/src/singletons/index.ts||langchain-core/src/singletons/index.ts",
          "langchain-core/src/tests/context.test.ts||langchain-core/src/tests/context.test.ts",
          "langchain-core/src/tracers/tests/langsmith_interop.test.ts||langchain-core/src/tracers/tests/langsmith_interop.test.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "langchain-core/langchain.config.js||langchain-core/langchain.config.js": [
          "File: langchain-core/langchain.config.js -> langchain-core/langchain.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     \"callbacks/manager\": \"callbacks/manager\",",
          "21:     \"callbacks/promises\": \"callbacks/promises\",",
          "22:     chat_history: \"chat_history\",",
          "23:     documents: \"documents/index\",",
          "24:     \"document_loaders/base\": \"document_loaders/base\",",
          "25:     \"document_loaders/langsmith\": \"document_loaders/langsmith\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:     context: \"context\",",
          "",
          "---------------"
        ],
        "langchain-core/src/callbacks/dispatch/index.ts||langchain-core/src/callbacks/dispatch/index.ts": [
          "File: langchain-core/src/callbacks/dispatch/index.ts -> langchain-core/src/callbacks/dispatch/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { AsyncLocalStorage } from \"node:async_hooks\";",
          "2: import { dispatchCustomEvent as dispatchCustomEventWeb } from \"./web.js\";",
          "3: import { type RunnableConfig, ensureConfig } from \"../../runnables/config.js\";",
          "4: import { AsyncLocalStorageProviderSingleton } from \"../../singletons/index.js\";",
          "8: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: AsyncLocalStorageProviderSingleton.initializeGlobalInstance(",
          "9:   new AsyncLocalStorage()",
          "",
          "---------------"
        ],
        "langchain-core/src/context.ts||langchain-core/src/context.ts": [
          "File: langchain-core/src/context.ts -> langchain-core/src/context.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import { AsyncLocalStorage } from \"node:async_hooks\";",
          "3: import { RunTree } from \"langsmith\";",
          "4: import { isRunTree } from \"langsmith/run_trees\";",
          "5: import {",
          "6:   _CONTEXT_VARIABLES_KEY,",
          "7:   AsyncLocalStorageProviderSingleton,",
          "8: } from \"./singletons/index.js\";",
          "10: AsyncLocalStorageProviderSingleton.initializeGlobalInstance(",
          "11:   new AsyncLocalStorage()",
          "12: );",
          "65: export function setContextVariable(name: PropertyKey, value: any): void {",
          "66:   const runTree = AsyncLocalStorageProviderSingleton.getInstance().getStore();",
          "67:   const contextVars = { ...runTree?.[_CONTEXT_VARIABLES_KEY] };",
          "68:   contextVars[name] = value;",
          "69:   let newValue = {};",
          "70:   if (isRunTree(runTree)) {",
          "71:     newValue = new RunTree(runTree);",
          "72:   }",
          "74:   (newValue as any)[_CONTEXT_VARIABLES_KEY] = contextVars;",
          "75:   AsyncLocalStorageProviderSingleton.getInstance().enterWith(newValue);",
          "76: }",
          "128: export function getContextVariable(name: PropertyKey): any {",
          "129:   const runTree = AsyncLocalStorageProviderSingleton.getInstance().getStore();",
          "130:   return runTree?.[_CONTEXT_VARIABLES_KEY]?.[name];",
          "131: }",
          "",
          "---------------"
        ],
        "langchain-core/src/singletons/index.ts||langchain-core/src/singletons/index.ts": [
          "File: langchain-core/src/singletons/index.ts -> langchain-core/src/singletons/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   getStore: () => any | undefined;",
          "9:   run: <T>(store: any, callback: () => T) => T;",
          "10: }",
          "12: export class MockAsyncLocalStorage implements AsyncLocalStorageInterface {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:   enterWith: (store: any) => void;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   run<T>(_store: any, callback: () => T): T {",
          "18:     return callback();",
          "19:   }",
          "20: }",
          "22: const mockAsyncLocalStorage = new MockAsyncLocalStorage();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:   enterWith(_store: any) {",
          "24:     return undefined;",
          "25:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24: const TRACING_ALS_KEY = Symbol.for(\"ls:tracing_async_local_storage\");",
          "25: const LC_CHILD_KEY = Symbol.for(\"lc:child_config\");",
          "27: class AsyncLocalStorageProvider {",
          "28:   getInstance(): AsyncLocalStorageInterface {",
          "29:     return (globalThis as any)[TRACING_ALS_KEY] ?? mockAsyncLocalStorage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: export const _CONTEXT_VARIABLES_KEY = Symbol.for(\"lc:context_variables\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:       config?.metadata",
          "51:     );",
          "52:     const storage = this.getInstance();",
          "53:     const parentRunId = callbackManager?.getParentRunId();",
          "55:     const langChainTracer = callbackManager?.handlers?.find(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     const previousValue = storage.getStore();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "70:       runTree.extra = { ...runTree.extra, [LC_CHILD_KEY]: config };",
          "71:     }",
          "73:     return storage.run(runTree, callback);",
          "74:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     if (",
          "83:       previousValue !== undefined &&",
          "84:       previousValue[_CONTEXT_VARIABLES_KEY] !== undefined",
          "85:     ) {",
          "86:       (runTree as any)[_CONTEXT_VARIABLES_KEY] =",
          "87:         previousValue[_CONTEXT_VARIABLES_KEY];",
          "88:     }",
          "",
          "---------------"
        ],
        "langchain-core/src/tests/context.test.ts||langchain-core/src/tests/context.test.ts": [
          "File: langchain-core/src/tests/context.test.ts -> langchain-core/src/tests/context.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { test, expect } from \"@jest/globals\";",
          "2: import { RunnableLambda } from \"../runnables/base.js\";",
          "3: import { getContextVariable, setContextVariable } from \"../context.js\";",
          "5: test(\"Getting and setting context variables within nested runnables\", async () => {",
          "6:   const nested = RunnableLambda.from(() => {",
          "7:     expect(getContextVariable(\"foo\")).toEqual(\"bar\");",
          "8:     expect(getContextVariable(\"toplevel\")).toEqual(9);",
          "9:     setContextVariable(\"foo\", \"baz\");",
          "10:     return getContextVariable(\"foo\");",
          "11:   });",
          "12:   const runnable = RunnableLambda.from(async () => {",
          "13:     setContextVariable(\"foo\", \"bar\");",
          "14:     expect(getContextVariable(\"foo\")).toEqual(\"bar\");",
          "15:     expect(getContextVariable(\"toplevel\")).toEqual(9);",
          "16:     const res = await nested.invoke({});",
          "17:     expect(getContextVariable(\"foo\")).toEqual(\"bar\");",
          "18:     return res;",
          "19:   });",
          "20:   expect(getContextVariable(\"foo\")).toEqual(undefined);",
          "21:   setContextVariable(\"toplevel\", 9);",
          "22:   expect(getContextVariable(\"toplevel\")).toEqual(9);",
          "23:   const result = await runnable.invoke({});",
          "24:   expect(getContextVariable(\"toplevel\")).toEqual(9);",
          "25:   expect(result).toEqual(\"baz\");",
          "26: });",
          "",
          "---------------"
        ],
        "langchain-core/src/tracers/tests/langsmith_interop.test.ts||langchain-core/src/tracers/tests/langsmith_interop.test.ts": [
          "File: langchain-core/src/tracers/tests/langsmith_interop.test.ts -> langchain-core/src/tracers/tests/langsmith_interop.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   }",
          "179: );",
          "181: test.each([\"true\", \"false\"])(",
          "182:   \"streaming traceables nested within runnables with background callbacks %s\",",
          "183:   async (value) => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: test.each([\"true\", \"false\"])(",
          "182:   \"traceables nested within runnables with a context var set and with background callbacks %s\",",
          "183:   async (value) => {",
          "184:     const { setContextVariable, getContextVariable } = await import(",
          "185:       \"../../context.js\"",
          "186:     );",
          "187:     process.env.LANGCHAIN_CALLBACKS_BACKGROUND = value;",
          "189:     setContextVariable(\"foo\", \"bar\");",
          "190:     const aiGreet = traceable(",
          "191:       async (msg: BaseMessage, name = \"world\") => {",
          "192:         await new Promise((resolve) => setTimeout(resolve, 300));",
          "193:         expect(getContextVariable(\"foo\")).toEqual(\"baz\");",
          "194:         return msg.content + name;",
          "195:       },",
          "196:       { name: \"aiGreet\", tracingEnabled: true }",
          "197:     );",
          "199:     const root = RunnableLambda.from(async (messages: BaseMessage[]) => {",
          "200:       const lastMsg = messages.at(-1) as HumanMessage;",
          "201:       expect(getContextVariable(\"foo\")).toEqual(\"bar\");",
          "202:       setContextVariable(\"foo\", \"baz\");",
          "203:       const greetOne = await aiGreet(lastMsg, \"David\");",
          "205:       return [greetOne];",
          "206:     });",
          "208:     await root.invoke([new HumanMessage({ content: \"Hello!\" })]);",
          "210:     const relevantCalls = fetchMock.mock.calls.filter((call: any) => {",
          "211:       return call[0].startsWith(\"https://api.smith.langchain.com/runs\");",
          "212:     });",
          "214:     expect(relevantCalls.length).toEqual(4);",
          "215:     const firstCallParams = JSON.parse((relevantCalls[0][1] as any).body);",
          "216:     const secondCallParams = JSON.parse((relevantCalls[1][1] as any).body);",
          "217:     const thirdCallParams = JSON.parse((relevantCalls[2][1] as any).body);",
          "218:     const fourthCallParams = JSON.parse((relevantCalls[3][1] as any).body);",
          "219:     expect(firstCallParams).toMatchObject({",
          "220:       id: firstCallParams.id,",
          "221:       name: \"RunnableLambda\",",
          "222:       start_time: expect.any(Number),",
          "223:       serialized: {",
          "224:         lc: 1,",
          "225:         type: \"not_implemented\",",
          "226:         id: [\"langchain_core\", \"runnables\", \"RunnableLambda\"],",
          "227:       },",
          "228:       events: [{ name: \"start\", time: expect.any(String) }],",
          "229:       inputs: {",
          "230:         input: [",
          "231:           {",
          "232:             lc: 1,",
          "233:             type: \"constructor\",",
          "234:             id: [\"langchain_core\", \"messages\", \"HumanMessage\"],",
          "235:             kwargs: {",
          "236:               content: \"Hello!\",",
          "237:               additional_kwargs: {},",
          "238:               response_metadata: {},",
          "239:             },",
          "240:           },",
          "241:         ],",
          "242:       },",
          "243:       execution_order: 1,",
          "244:       child_execution_order: 1,",
          "245:       run_type: \"chain\",",
          "246:       extra: expect.any(Object),",
          "247:       tags: [],",
          "248:       trace_id: firstCallParams.id,",
          "249:       dotted_order: expect.any(String),",
          "250:     });",
          "251:     expect(secondCallParams).toMatchObject({",
          "252:       id: expect.any(String),",
          "253:       name: \"aiGreet\",",
          "254:       start_time: expect.any(Number),",
          "255:       run_type: \"chain\",",
          "256:       extra: expect.any(Object),",
          "257:       serialized: {},",
          "258:       inputs: {",
          "259:         args: [",
          "260:           {",
          "261:             lc: 1,",
          "262:             type: \"constructor\",",
          "263:             id: [\"langchain_core\", \"messages\", \"HumanMessage\"],",
          "264:             kwargs: {",
          "265:               content: \"Hello!\",",
          "266:               additional_kwargs: {},",
          "267:               response_metadata: {},",
          "268:             },",
          "269:           },",
          "270:           \"David\",",
          "271:         ],",
          "272:       },",
          "273:       child_runs: [],",
          "274:       parent_run_id: firstCallParams.id,",
          "275:       trace_id: firstCallParams.id,",
          "276:       dotted_order: expect.stringContaining(`${firstCallParams.dotted_order}.`),",
          "277:       tags: [],",
          "278:     });",
          "279:     expect(thirdCallParams).toMatchObject({",
          "280:       end_time: expect.any(Number),",
          "281:       inputs: {",
          "282:         args: [",
          "283:           {",
          "284:             lc: 1,",
          "285:             type: \"constructor\",",
          "286:             id: [\"langchain_core\", \"messages\", \"HumanMessage\"],",
          "287:             kwargs: {",
          "288:               content: \"Hello!\",",
          "289:               additional_kwargs: {},",
          "290:               response_metadata: {},",
          "291:             },",
          "292:           },",
          "293:           \"David\",",
          "294:         ],",
          "295:       },",
          "296:       outputs: { outputs: \"Hello!David\" },",
          "297:       parent_run_id: firstCallParams.id,",
          "298:       extra: expect.any(Object),",
          "299:       dotted_order: secondCallParams.dotted_order,",
          "300:       trace_id: firstCallParams.id,",
          "301:       tags: [],",
          "302:     });",
          "303:     expect(fourthCallParams).toMatchObject({",
          "304:       end_time: expect.any(Number),",
          "305:       outputs: { output: [\"Hello!David\"] },",
          "306:       events: [",
          "307:         { name: \"start\", time: expect.any(String) },",
          "308:         { name: \"end\", time: expect.any(String) },",
          "309:       ],",
          "310:       inputs: {",
          "311:         input: [",
          "312:           {",
          "313:             lc: 1,",
          "314:             type: \"constructor\",",
          "315:             id: [\"langchain_core\", \"messages\", \"HumanMessage\"],",
          "316:             kwargs: {",
          "317:               content: \"Hello!\",",
          "318:               additional_kwargs: {},",
          "319:               response_metadata: {},",
          "320:             },",
          "321:           },",
          "322:         ],",
          "323:       },",
          "324:       trace_id: firstCallParams.id,",
          "325:       dotted_order: firstCallParams.dotted_order,",
          "326:     });",
          "327:   }",
          "328: );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:   }",
          "458: );",
          "460: test.each([\"true\", \"false\"])(",
          "461:   \"streaming runnables nested within traceables with background callbacks %s\",",
          "462:   async (value) => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606:   }",
          "607: );",
          "609: test.each([\"true\", \"false\"])(",
          "610:   \"runnables nested within traceables and a context var set with background callbacks %s\",",
          "611:   async (value) => {",
          "612:     const { setContextVariable, getContextVariable } = await import(",
          "613:       \"../../context.js\"",
          "614:     );",
          "615:     process.env.LANGCHAIN_CALLBACKS_BACKGROUND = value;",
          "616:     setContextVariable(\"foo\", \"bar\");",
          "618:     const nested = RunnableLambda.from(async (messages: BaseMessage[]) => {",
          "619:       const lastMsg = messages.at(-1) as HumanMessage;",
          "620:       await new Promise((resolve) => setTimeout(resolve, 300));",
          "621:       expect(getContextVariable(\"foo\")).toEqual(\"bar\");",
          "622:       return [lastMsg.content];",
          "623:     });",
          "625:     const aiGreet = traceable(",
          "626:       async (msg: BaseMessage, name = \"world\") => {",
          "627:         const contents = await nested.invoke([msg]);",
          "628:         expect(getContextVariable(\"foo\")).toEqual(\"bar\");",
          "629:         return contents[0] + name;",
          "630:       },",
          "631:       { name: \"aiGreet\", tracingEnabled: true }",
          "632:     );",
          "634:     await aiGreet(new HumanMessage({ content: \"Hello!\" }), \"mitochondria\");",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12000:     jest: ^29.5.0",
          "12001:     jest-environment-node: ^29.6.4",
          "12002:     js-tiktoken: ^1.0.12",
          "12004:     ml-matrix: ^6.10.4",
          "12005:     mustache: ^4.2.0",
          "12006:     p-queue: ^6.6.2",
          "",
          "[Removed Lines]",
          "12003:     langsmith: ^0.1.56",
          "",
          "[Added Lines]",
          "12003:     langsmith: ^0.1.65",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32822:   languageName: node",
          "32823:   linkType: hard",
          "32825: \"language-subtag-registry@npm:^0.3.20, language-subtag-registry@npm:~0.3.2\":",
          "32826:   version: 0.3.22",
          "32827:   resolution: \"language-subtag-registry@npm:0.3.22\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32825: \"langsmith@npm:^0.1.65\":",
          "32826:   version: 0.1.65",
          "32827:   resolution: \"langsmith@npm:0.1.65\"",
          "32828:   dependencies:",
          "32829:     \"@types/uuid\": ^10.0.0",
          "32830:     commander: ^10.0.1",
          "32831:     p-queue: ^6.6.2",
          "32832:     p-retry: 4",
          "32833:     semver: ^7.6.3",
          "32834:     uuid: ^10.0.0",
          "32835:   peerDependencies:",
          "32836:     openai: \"*\"",
          "32837:   peerDependenciesMeta:",
          "32838:     openai:",
          "32839:       optional: true",
          "32840:   checksum: ca44f26733fbb20675b84f2586b90622b8cf1aedc82123f5574af04e88ba29348e28b2b63f410479aeb7e5c174d2fef13b4bd9eb68581d93a104950b1fafa40f",
          "32841:   languageName: node",
          "32842:   linkType: hard",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "184b34bbf7d2c77d959a2435dfc16e20e7ce5c24",
      "candidate_info": {
        "commit_hash": "184b34bbf7d2c77d959a2435dfc16e20e7ce5c24",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/184b34bbf7d2c77d959a2435dfc16e20e7ce5c24",
        "files": [
          "langchain/package.json",
          "langchain/src/chat_models/tests/universal.int.test.ts",
          "langchain/src/chat_models/universal.ts",
          "yarn.lock"
        ],
        "message": "feat(langchain): Add DeepSeek to initChatModel (#7609)",
        "before_after_code_files": [
          "langchain/src/chat_models/tests/universal.int.test.ts||langchain/src/chat_models/tests/universal.int.test.ts",
          "langchain/src/chat_models/universal.ts||langchain/src/chat_models/universal.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "langchain/src/chat_models/tests/universal.int.test.ts||langchain/src/chat_models/tests/universal.int.test.ts": [
          "File: langchain/src/chat_models/tests/universal.int.test.ts -> langchain/src/chat_models/tests/universal.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     expect(vertexAIWebResult).toBeDefined();",
          "437:     expect(vertexAIWebResult.content.length).toBeGreaterThan(0);",
          "438:   });",
          "439: });",
          "441: test(\"Is compatible with agents\", async () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440:   it(\"Can invoke deepseek\", async () => {",
          "441:     const deepSeek = await initChatModel(\"deepseek-chat\", {",
          "442:       modelProvider: \"deepseek\",",
          "443:       temperature: 0,",
          "444:     });",
          "446:     const deepSeekResult = await deepSeek.invoke(\"what's your name\");",
          "447:     expect(deepSeekResult).toBeDefined();",
          "448:     expect(deepSeekResult.content.length).toBeGreaterThan(0);",
          "449:   });",
          "",
          "---------------"
        ],
        "langchain/src/chat_models/universal.ts||langchain/src/chat_models/universal.ts": [
          "File: langchain/src/chat_models/universal.ts -> langchain/src/chat_models/universal.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   \"mistralai\",",
          "50:   \"groq\",",
          "51:   \"bedrock\",",
          "52: ] as const;",
          "54: export type ChatModelProvider = (typeof _SUPPORTED_PROVIDERS)[number];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:   \"cerebras\",",
          "53:   \"deepseek\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:         const { ChatBedrockConverse } = await import(\"@langchain/aws\");",
          "131:         return new ChatBedrockConverse({ model, ...passedParams });",
          "132:       }",
          "133:       case \"fireworks\": {",
          "134:         const { ChatFireworks } = await import(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:       case \"deepseek\": {",
          "136:         const { ChatDeepSeek } = await import(\"@langchain/deepseek\");",
          "137:         return new ChatDeepSeek({ model, ...passedParams });",
          "138:       }",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12465:   languageName: unknown",
          "12466:   linkType: soft",
          "12469:   version: 0.0.0-use.local",
          "12470:   resolution: \"@langchain/deepseek@workspace:libs/langchain-deepseek\"",
          "12471:   dependencies:",
          "",
          "[Removed Lines]",
          "12468: \"@langchain/deepseek@workspace:*, @langchain/deepseek@workspace:libs/langchain-deepseek\":",
          "",
          "[Added Lines]",
          "12468: \"@langchain/deepseek@*, @langchain/deepseek@workspace:*, @langchain/deepseek@workspace:libs/langchain-deepseek\":",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33477:     \"@langchain/cerebras\": \"*\"",
          "33478:     \"@langchain/cohere\": \"*\"",
          "33479:     \"@langchain/core\": \"workspace:*\"",
          "33480:     \"@langchain/google-genai\": \"*\"",
          "33481:     \"@langchain/google-vertexai\": \"*\"",
          "33482:     \"@langchain/google-vertexai-web\": \"*\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33480:     \"@langchain/deepseek\": \"*\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33537:     \"@langchain/cerebras\": \"*\"",
          "33538:     \"@langchain/cohere\": \"*\"",
          "33539:     \"@langchain/core\": \">=0.2.21 <0.4.0\"",
          "33540:     \"@langchain/google-genai\": \"*\"",
          "33541:     \"@langchain/google-vertexai\": \"*\"",
          "33542:     \"@langchain/google-vertexai-web\": \"*\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33541:     \"@langchain/deepseek\": \"*\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "33557:       optional: true",
          "33558:     \"@langchain/cohere\":",
          "33559:       optional: true",
          "33560:     \"@langchain/google-genai\":",
          "33561:       optional: true",
          "33562:     \"@langchain/google-vertexai\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33562:     \"@langchain/deepseek\":",
          "33563:       optional: true",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff0dc580a71268b098e5ac2ee68b7d98317727ed",
      "candidate_info": {
        "commit_hash": "ff0dc580a71268b098e5ac2ee68b7d98317727ed",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/ff0dc580a71268b098e5ac2ee68b7d98317727ed",
        "files": [
          "libs/langchain-google-common/package.json",
          "libs/langchain-google-gauth/package.json",
          "libs/langchain-google-vertexai-web/package.json",
          "libs/langchain-google-vertexai/package.json",
          "libs/langchain-google-webauth/package.json",
          "yarn.lock"
        ],
        "message": "release(google-common): 0.1.8 (#7518)",
        "before_after_code_files": [
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12499:   languageName: unknown",
          "12500:   linkType: soft",
          "12503:   version: 0.0.0-use.local",
          "12504:   resolution: \"@langchain/google-common@workspace:libs/langchain-google-common\"",
          "12505:   dependencies:",
          "",
          "[Removed Lines]",
          "12502: \"@langchain/google-common@^0.1.0, @langchain/google-common@workspace:*, @langchain/google-common@workspace:libs/langchain-google-common, @langchain/google-common@~0.1.7\":",
          "",
          "[Added Lines]",
          "12502: \"@langchain/google-common@^0.1.0, @langchain/google-common@workspace:*, @langchain/google-common@workspace:libs/langchain-google-common, @langchain/google-common@~0.1.8\":",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12534:   languageName: unknown",
          "12535:   linkType: soft",
          "12538:   version: 0.0.0-use.local",
          "12539:   resolution: \"@langchain/google-gauth@workspace:libs/langchain-google-gauth\"",
          "12540:   dependencies:",
          "12541:     \"@jest/globals\": ^29.5.0",
          "12542:     \"@langchain/core\": \"workspace:*\"",
          "12544:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12545:     \"@swc/core\": ^1.3.90",
          "12546:     \"@swc/jest\": ^0.2.29",
          "",
          "[Removed Lines]",
          "12537: \"@langchain/google-gauth@workspace:libs/langchain-google-gauth, @langchain/google-gauth@~0.1.7\":",
          "12543:     \"@langchain/google-common\": ~0.1.7",
          "",
          "[Added Lines]",
          "12537: \"@langchain/google-gauth@workspace:libs/langchain-google-gauth, @langchain/google-gauth@~0.1.8\":",
          "12543:     \"@langchain/google-common\": ~0.1.8",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12613:     \"@jest/globals\": ^29.5.0",
          "12614:     \"@langchain/core\": \"workspace:*\"",
          "12615:     \"@langchain/google-common\": ^0.1.0",
          "12617:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12618:     \"@langchain/standard-tests\": 0.0.0",
          "12619:     \"@swc/core\": ^1.3.90",
          "",
          "[Removed Lines]",
          "12616:     \"@langchain/google-webauth\": ~0.1.7",
          "",
          "[Added Lines]",
          "12616:     \"@langchain/google-webauth\": ~0.1.8",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "12649:     \"@jest/globals\": ^29.5.0",
          "12650:     \"@langchain/core\": \"workspace:*\"",
          "12651:     \"@langchain/google-common\": ^0.1.0",
          "12653:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12654:     \"@langchain/standard-tests\": 0.0.0",
          "12655:     \"@swc/core\": ^1.3.90",
          "",
          "[Removed Lines]",
          "12652:     \"@langchain/google-gauth\": ~0.1.7",
          "",
          "[Added Lines]",
          "12652:     \"@langchain/google-gauth\": ~0.1.8",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "12678:   languageName: unknown",
          "12679:   linkType: soft",
          "12682:   version: 0.0.0-use.local",
          "12683:   resolution: \"@langchain/google-webauth@workspace:libs/langchain-google-webauth\"",
          "12684:   dependencies:",
          "12685:     \"@jest/globals\": ^29.5.0",
          "12686:     \"@langchain/core\": \"workspace:*\"",
          "12688:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12689:     \"@swc/core\": ^1.3.90",
          "12690:     \"@swc/jest\": ^0.2.29",
          "",
          "[Removed Lines]",
          "12681: \"@langchain/google-webauth@workspace:libs/langchain-google-webauth, @langchain/google-webauth@~0.1.7\":",
          "12687:     \"@langchain/google-common\": ~0.1.7",
          "",
          "[Added Lines]",
          "12681: \"@langchain/google-webauth@workspace:libs/langchain-google-webauth, @langchain/google-webauth@~0.1.8\":",
          "12687:     \"@langchain/google-common\": ~0.1.8",
          "",
          "---------------"
        ]
      }
    }
  ]
}