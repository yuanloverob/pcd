{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3e1938789a511647e7e96e8aee1ef44e2f894e6",
      "candidate_info": {
        "commit_hash": "e3e1938789a511647e7e96e8aee1ef44e2f894e6",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e3e1938789a511647e7e96e8aee1ef44e2f894e6",
        "files": [
          "lib/db/services.php",
          "message/externallib.php",
          "message/tests/externallib_test.php",
          "version.php"
        ],
        "message": "MDL-65132 core_message: Added WS to delete message for all users\n\nAlso, added WS new return parameter candeletemessagesforallusers in get_conversation\nand send_instant_message and added API support. This will be used to check\nif the user can delete all messages in the conversation.",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "message/externallib.php||message/externallib.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1407:         'ajax' => true,",
          "1408:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1409:     ),",
          "1410:     'core_notes_create_notes' => array(",
          "1411:         'classname' => 'core_notes_external',",
          "1412:         'methodname' => 'create_notes',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1410:     'core_message_delete_message_for_all_users' => array(",
          "1411:         'classname' => 'core_message_external',",
          "1412:         'methodname' => 'delete_message_for_all_users',",
          "1413:         'classpath' => 'message/externallib.php',",
          "1414:         'description' => 'Deletes a message for all users.',",
          "1415:         'type' => 'write',",
          "1416:         'capabilities' => 'moodle/site:deleteanymessage',",
          "1417:         'ajax' => true,",
          "1418:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1419:     ),",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:         self::validate_context($context);",
          "160:         require_capability('moodle/site:sendmessage', $context);",
          "162:         $params = self::validate_parameters(self::send_instant_messages_parameters(), array('messages' => $messages));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:         $candeletemessagesforallusers = has_capability('moodle/site:deleteanymessage', $context);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:             if ($success) {",
          "206:                 $resultmsg['msgid'] = $success;",
          "207:                 $resultmsg['timecreated'] = time();",
          "208:                 $messageids[] = $success;",
          "209:             } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:                 $resultmsg['candeletemessagesforallusers'] = $candeletemessagesforallusers;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "257:                     'timecreated' => new external_value(PARAM_INT, 'The timecreated timestamp for the message', VALUE_OPTIONAL),",
          "258:                     'conversationid' => new external_value(PARAM_INT, 'The conversation id for this message', VALUE_OPTIONAL),",
          "259:                     'useridfrom' => new external_value(PARAM_INT, 'The user id who sent the message', VALUE_OPTIONAL),",
          "260:                 )",
          "261:             )",
          "262:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264:                     'candeletemessagesforallusers' => new external_value(PARAM_BOOL,",
          "265:                         'If the user can delete messages in the conversation for all users', VALUE_DEFAULT, false),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1260:                 'messages' => new external_multiple_structure(",
          "1261:                     self::get_conversation_message_structure()",
          "1262:                 ),",
          "1263:             )",
          "1264:         );",
          "1265:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1269:                 'candeletemessagesforallusers' => new external_value(PARAM_BOOL,",
          "1270:                     'If the user can delete messages in the conversation for all users', VALUE_DEFAULT, false),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4806:             ]",
          "4807:         );",
          "4808:     }",
          "4809: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4824:     public static function delete_message_for_all_users_parameters() {",
          "4825:         return new external_function_parameters(",
          "4826:             array(",
          "4827:                 'messageid' => new external_value(PARAM_INT, 'The message id'),",
          "4828:                 'userid' => new external_value(PARAM_INT, 'The user id of who we want to delete the message for all users')",
          "4829:             )",
          "4830:         );",
          "4831:     }",
          "4841:     public static function delete_message_for_all_users(int $messageid, int $userid) {",
          "4842:         global $CFG;",
          "4845:         if (empty($CFG->messaging)) {",
          "4846:             throw new moodle_exception('disabled', 'message');",
          "4847:         }",
          "4850:         $params = array(",
          "4851:             'messageid' => $messageid,",
          "4852:             'userid' => $userid",
          "4853:         );",
          "4854:         $params = self::validate_parameters(self::delete_message_for_all_users_parameters(), $params);",
          "4857:         $context = context_system::instance();",
          "4858:         self::validate_context($context);",
          "4860:         $user = core_user::get_user($params['userid'], '*', MUST_EXIST);",
          "4861:         core_user::require_active_user($user);",
          "4864:         if (core_message\\api::can_delete_message_for_all_users($user->id, $params['messageid'])) {",
          "4865:             \\core_message\\api::delete_message_for_all_users($params['messageid']);",
          "4866:         } else {",
          "4867:             throw new moodle_exception('You do not have permission to delete this message for everyone.');",
          "4868:         }",
          "4870:         return [];",
          "4871:     }",
          "4878:     public static function delete_message_for_all_users_returns() {",
          "4879:         return new external_warnings();",
          "4880:     }",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7102:         $this->assertEquals($expectedunreadcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF],",
          "7103:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF]);",
          "7104:     }",
          "7105: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7109:     public function test_delete_message_for_all_users() {",
          "7110:         global $DB;",
          "7112:         $this->resetAfterTest(true);",
          "7115:         list($user1, $user2, $user3, $convgroup, $convindividual) = $this->create_delete_message_test_data();",
          "7118:         $messageid1 = testhelper::send_fake_message_to_conversation($user1, $convgroup->id);",
          "7119:         $messageid2 = testhelper::send_fake_message_to_conversation($user2, $convgroup->id);",
          "7123:         $editingteacher = $DB->get_record('role', ['shortname' => 'editingteacher']);",
          "7124:         assign_capability('moodle/site:deleteanymessage', CAP_ALLOW, $editingteacher->id, context_system::instance());",
          "7126:         $this->setUser($user1);",
          "7129:         $return = core_message_external::delete_message_for_all_users($messageid1, $user1->id);",
          "7130:         $return = external_api::clean_returnvalue(core_message_external::delete_message_for_all_users_returns(), $return);",
          "7132:         $this->assertEquals(array(), $return);",
          "7135:         $muas = $DB->get_records('message_user_actions', array('messageid' => $messageid1), 'userid ASC');",
          "7136:         $this->assertCount(3, $muas);",
          "7137:         $mua1 = array_shift($muas);",
          "7138:         $mua2 = array_shift($muas);",
          "7139:         $mua3 = array_shift($muas);",
          "7141:         $this->assertEquals($user1->id, $mua1->userid);",
          "7142:         $this->assertEquals($messageid1, $mua1->messageid);",
          "7143:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua1->action);",
          "7144:         $this->assertEquals($user2->id, $mua2->userid);",
          "7145:         $this->assertEquals($messageid1, $mua2->messageid);",
          "7146:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua2->action);",
          "7147:         $this->assertEquals($user3->id, $mua3->userid);",
          "7148:         $this->assertEquals($messageid1, $mua3->messageid);",
          "7149:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua3->action);",
          "7150:     }",
          "7155:     public function test_delete_message_for_all_users_messaging_disabled() {",
          "7156:         global $CFG;",
          "7158:         $this->resetAfterTest();",
          "7161:         list($user1, $user2, $user3, $convgroup, $convindividual) = $this->create_delete_message_test_data();",
          "7164:         $messageid = testhelper::send_fake_message_to_conversation($user1, $convgroup->id);",
          "7166:         $this->setUser($user1);",
          "7169:         $CFG->messaging = 0;",
          "7172:         $this->expectException('moodle_exception');",
          "7173:         core_message_external::delete_message_for_all_users($messageid, $user1->id);",
          "7174:     }",
          "7179:     public function test_delete_message_for_all_users_no_permission() {",
          "7180:         $this->resetAfterTest();",
          "7183:         list($user1, $user2, $user3, $convgroup, $convindividual) = $this->create_delete_message_test_data();",
          "7186:         $messageid = testhelper::send_fake_message_to_conversation($user1, $convgroup->id);",
          "7188:         $this->setUser($user2);",
          "7191:         $this->expectException('moodle_exception');",
          "7192:         $this->expectExceptionMessage('You do not have permission to delete this message for everyone.');",
          "7193:         core_message_external::delete_message_for_all_users($messageid, $user2->id);",
          "7194:     }",
          "7199:     public function test_delete_message_for_all_users_private_conversation() {",
          "7200:         global $DB;",
          "7202:         $this->resetAfterTest();",
          "7205:         list($user1, $user2, $user3, $convgroup, $convindividual) = $this->create_delete_message_test_data();",
          "7208:         $messageid = testhelper::send_fake_message_to_conversation($user1, $convindividual->id);",
          "7211:         $editingteacher = $DB->get_record('role', ['shortname' => 'editingteacher']);",
          "7212:         assign_capability('moodle/site:deleteanymessage', CAP_ALLOW, $editingteacher->id, context_system::instance());",
          "7214:         $this->setUser($user1);",
          "7219:         $this->expectException('moodle_exception');",
          "7220:         $this->expectExceptionMessage('You do not have permission to delete this message for everyone.');",
          "7221:         core_message_external::delete_message_for_all_users($messageid, $user1->id);",
          "7222:     }",
          "7227:     protected function create_delete_message_test_data() {",
          "7229:         $user1 = self::getDataGenerator()->create_user();",
          "7230:         $user2 = self::getDataGenerator()->create_user();",
          "7231:         $user3 = self::getDataGenerator()->create_user();",
          "7234:         $course = $this->getDataGenerator()->create_course();",
          "7235:         $coursecontext = context_course::instance($course->id);",
          "7236:         $this->getDataGenerator()->enrol_user($user1->id, $course->id, 'editingteacher');",
          "7237:         $this->getDataGenerator()->enrol_user($user2->id, $course->id, 'student');",
          "7238:         $this->getDataGenerator()->enrol_user($user3->id, $course->id, 'student');",
          "7241:         $group1 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "7242:         groups_add_member($group1->id, $user1->id);",
          "7243:         groups_add_member($group1->id, $user2->id);",
          "7244:         groups_add_member($group1->id, $user3->id);",
          "7247:         $convgroup = \\core_message\\api::create_conversation(",
          "7248:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "7249:             [$user1->id, $user2->id, $user3->id],",
          "7250:             'Group test delete for everyone', \\core_message\\api::MESSAGE_CONVERSATION_ENABLED,",
          "7251:             'core_group',",
          "7252:             'groups',",
          "7253:             $group1->id,",
          "7254:             context_course::instance($course->id)->id",
          "7255:         );",
          "7258:         $convindividual = \\core_message\\api::create_conversation(",
          "7259:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "7260:             [$user1->id, $user2->id]",
          "7261:         );",
          "7263:         return [$user1, $user2, $user3, $convgroup, $convindividual];",
          "7264:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019050300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019050300.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ff384dbf11bd8214f76151774086cea227cc693",
      "candidate_info": {
        "commit_hash": "0ff384dbf11bd8214f76151774086cea227cc693",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0ff384dbf11bd8214f76151774086cea227cc693",
        "files": [
          "lib/db/services.php",
          "message/classes/api.php",
          "message/externallib.php",
          "message/tests/api_test.php",
          "message/tests/externallib_test.php",
          "message/upgrade.txt",
          "version.php"
        ],
        "message": "Merge branch 'MDL-63548_master' of git://github.com/markn86/moodle",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "message/classes/api.php||message/classes/api.php",
          "message/externallib.php||message/externallib.php",
          "message/tests/api_test.php||message/tests/api_test.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1059:         'classname' => 'core_message_external',",
          "1060:         'methodname' => 'mark_all_messages_as_read',",
          "1061:         'classpath' => 'message/externallib.php',",
          "1063:         'type' => 'write',",
          "1064:         'ajax' => true,",
          "1065:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "",
          "[Removed Lines]",
          "1062:         'description' => 'Mark all messages as read for a given user',",
          "",
          "[Added Lines]",
          "1062:         'description' => '** DEPRECATED ** Please do not call this function any more.",
          "1063:                           Mark all messages as read for a given user',",
          "1064:         'type' => 'write',",
          "1065:         'ajax' => true,",
          "1066:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1067:     ),",
          "1068:     'core_message_mark_all_conversation_messages_as_read' => array(",
          "1069:         'classname' => 'core_message_external',",
          "1070:         'methodname' => 'mark_all_conversation_messages_as_read',",
          "1071:         'classpath' => 'message/externallib.php',",
          "1072:         'description' => 'Mark all conversation messages as read for a given user',",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "829:         return $DB->count_records_sql($sql, [$user->id, self::MESSAGE_ACTION_READ, $user->id]);",
          "830:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "840:     public static function can_mark_all_messages_as_read(int $userid, int $conversationid) : bool {",
          "841:         global $USER;",
          "843:         $systemcontext = \\context_system::instance();",
          "845:         if (has_capability('moodle/site:readallmessages', $systemcontext)) {",
          "846:             return true;",
          "847:         }",
          "849:         if (!self::is_user_in_conversation($userid, $conversationid)) {",
          "850:             return false;",
          "851:         }",
          "853:         if ($USER->id == $userid) {",
          "854:             return true;",
          "855:         }",
          "857:         return false;",
          "858:     }",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2501:         return new external_value(PARAM_BOOL, 'True if the messages were marked read, false otherwise');",
          "2502:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2512:     public static function mark_all_messages_as_read_is_deprecated() {",
          "2513:         return true;",
          "2514:     }",
          "2522:     public static function mark_all_conversation_messages_as_read_parameters() {",
          "2523:         return new external_function_parameters(",
          "2524:             array(",
          "2525:                 'userid' => new external_value(PARAM_INT, 'The user id who who we are marking the messages as read for'),",
          "2526:                 'conversationid' =>",
          "2527:                     new external_value(PARAM_INT, 'The conversation id who who we are marking the messages as read for')",
          "2528:             )",
          "2529:         );",
          "2530:     }",
          "2539:     public static function mark_all_conversation_messages_as_read(int $userid, int $conversationid) {",
          "2540:         global $CFG;",
          "2543:         if (empty($CFG->messaging)) {",
          "2544:             throw new moodle_exception('disabled', 'message');",
          "2545:         }",
          "2547:         $params = array(",
          "2548:             'userid' => $userid,",
          "2549:             'conversationid' => $conversationid,",
          "2550:         );",
          "2551:         $params = self::validate_parameters(self::mark_all_conversation_messages_as_read_parameters(), $params);",
          "2553:         $context = context_system::instance();",
          "2554:         self::validate_context($context);",
          "2556:         $user = core_user::get_user($params['userid'], '*', MUST_EXIST);",
          "2557:         core_user::require_active_user($user);",
          "2559:         if (\\core_message\\api::can_mark_all_messages_as_read($userid, $conversationid)) {",
          "2560:             \\core_message\\api::mark_all_messages_as_read($userid, $conversationid);",
          "2561:         } else {",
          "2562:             throw new moodle_exception('accessdenied', 'admin');",
          "2563:         }",
          "2564:     }",
          "2572:     public static function mark_all_conversation_messages_as_read_returns() {",
          "2573:         return new external_warnings();",
          "2574:     }",
          "",
          "---------------"
        ],
        "message/tests/api_test.php||message/tests/api_test.php": [
          "File: message/tests/api_test.php -> message/tests/api_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1434:         $this->assertFalse($profile->iscontact);",
          "1435:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1440:     public function test_can_mark_all_messages_as_read() {",
          "1442:         $this->setAdminUser();",
          "1445:         $user1 = self::getDataGenerator()->create_user();",
          "1446:         $user2 = self::getDataGenerator()->create_user();",
          "1447:         $user3 = self::getDataGenerator()->create_user();",
          "1450:         $time = 1;",
          "1451:         $this->send_fake_message($user1, $user2, 'Yo!', 0, $time + 1);",
          "1452:         $this->send_fake_message($user2, $user1, 'Sup mang?', 0, $time + 2);",
          "1453:         $this->send_fake_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 3);",
          "1454:         $this->send_fake_message($user2, $user1, 'Word.', 0, $time + 4);",
          "1456:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "1459:         $this->assertTrue(\\core_message\\api::can_mark_all_messages_as_read($user1->id, $conversationid));",
          "1462:         $this->setUser($user1);",
          "1465:         $this->assertTrue(\\core_message\\api::can_mark_all_messages_as_read($user1->id, $conversationid));",
          "1468:         $this->assertFalse(\\core_message\\api::can_mark_all_messages_as_read($user2->id, $conversationid));",
          "1471:         $this->assertFalse(\\core_message\\api::can_mark_all_messages_as_read($user3->id, $conversationid));",
          "1472:     }",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3251:         $this->assertEquals(6, $DB->count_records('message_user_actions'));",
          "3252:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3257:     public function test_mark_all_conversation_messages_as_read_invalid_user_exception() {",
          "3258:         $this->resetAfterTest(true);",
          "3260:         $user1 = self::getDataGenerator()->create_user();",
          "3261:         $user2 = self::getDataGenerator()->create_user();",
          "3264:         $time = time();",
          "3265:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3266:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3267:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3268:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3270:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3272:         $this->expectException('moodle_exception');",
          "3273:         core_message_external::mark_all_conversation_messages_as_read(-2132131, $conversationid);",
          "3274:     }",
          "3279:     public function test_mark_all_conversation_messages_as_read_access_denied_exception() {",
          "3280:         $this->resetAfterTest(true);",
          "3282:         $user1 = self::getDataGenerator()->create_user();",
          "3283:         $user2 = self::getDataGenerator()->create_user();",
          "3284:         $user3 = self::getDataGenerator()->create_user();",
          "3287:         $time = time();",
          "3288:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3289:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3290:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3291:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3293:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3296:         $this->expectException('moodle_exception');",
          "3297:         core_message_external::mark_all_conversation_messages_as_read($user3->id, $conversationid);",
          "3298:     }",
          "3303:     public function test_mark_all_conversation_messages_as_read_wrong_user() {",
          "3304:         $this->resetAfterTest(true);",
          "3306:         $user1 = self::getDataGenerator()->create_user();",
          "3307:         $user2 = self::getDataGenerator()->create_user();",
          "3310:         $time = time();",
          "3311:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3312:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3313:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3314:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3316:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3319:         $this->setUser($user1);",
          "3320:         $this->expectException('moodle_exception');",
          "3321:         core_message_external::mark_all_conversation_messages_as_read($user2->id, $conversationid);",
          "3322:     }",
          "3327:     public function test_mark_all_conversation_messages_as_admin() {",
          "3328:         global $DB;",
          "3330:         $this->resetAfterTest(true);",
          "3332:         $user1 = self::getDataGenerator()->create_user();",
          "3333:         $user2 = self::getDataGenerator()->create_user();",
          "3336:         $time = time();",
          "3337:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3338:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3339:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3340:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3342:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3345:         $this->setAdminUser();",
          "3346:         core_message_external::mark_all_conversation_messages_as_read($user2->id, $conversationid);",
          "3347:         $this->assertEquals(2, $DB->count_records('message_user_actions'));",
          "3348:     }",
          "3353:     public function test_mark_all_conversation_messages_as_read() {",
          "3354:         global $DB;",
          "3356:         $this->resetAfterTest(true);",
          "3358:         $user1 = self::getDataGenerator()->create_user();",
          "3359:         $user2 = self::getDataGenerator()->create_user();",
          "3362:         $time = time();",
          "3363:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3364:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3365:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3366:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3368:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3371:         $this->setUser($user1);",
          "3372:         core_message_external::mark_all_conversation_messages_as_read($user1->id, $conversationid);",
          "3373:         $this->assertEquals(2, $DB->count_records('message_user_actions'));",
          "3374:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018102200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018102300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32b01d2b02fac3d9a29d6cc6e129124968d73f9a",
      "candidate_info": {
        "commit_hash": "32b01d2b02fac3d9a29d6cc6e129124968d73f9a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/32b01d2b02fac3d9a29d6cc6e129124968d73f9a",
        "files": [
          "config-dist.php",
          "lang/en/deprecated.txt",
          "lang/en/message.php",
          "lib/db/upgrade.php",
          "lib/upgrade.txt",
          "message/amd/build/message_preferences.min.js",
          "message/amd/src/message_preferences.js",
          "message/classes/api.php",
          "message/externallib.php",
          "message/lib.php",
          "message/output/popup/tests/behat/message_popover_unread.feature",
          "message/renderer.php",
          "message/templates/message_preferences.mustache",
          "message/tests/api_test.php",
          "message/tests/behat/delete_all_messages.feature",
          "message/tests/behat/delete_messages.feature",
          "message/tests/behat/reply_message.feature",
          "message/tests/behat/search_messages.feature",
          "message/tests/behat/view_messages.feature",
          "message/tests/externallib_test.php",
          "message/tests/privacy_provider_test.php",
          "message/upgrade.txt",
          "user/tests/behat/delete_users.feature",
          "version.php"
        ],
        "message": "Merge branch 'MDL-63214-master' of git://github.com/sarjona/moodle",
        "before_after_code_files": [
          "config-dist.php||config-dist.php",
          "lang/en/message.php||lang/en/message.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "message/amd/src/message_preferences.js||message/amd/src/message_preferences.js",
          "message/classes/api.php||message/classes/api.php",
          "message/externallib.php||message/externallib.php",
          "message/lib.php||message/lib.php",
          "message/output/popup/tests/behat/message_popover_unread.feature||message/output/popup/tests/behat/message_popover_unread.feature",
          "message/renderer.php||message/renderer.php",
          "message/templates/message_preferences.mustache||message/templates/message_preferences.mustache",
          "message/tests/api_test.php||message/tests/api_test.php",
          "message/tests/behat/delete_all_messages.feature||message/tests/behat/delete_all_messages.feature",
          "message/tests/behat/delete_messages.feature||message/tests/behat/delete_messages.feature",
          "message/tests/behat/reply_message.feature||message/tests/behat/reply_message.feature",
          "message/tests/behat/search_messages.feature||message/tests/behat/search_messages.feature",
          "message/tests/behat/view_messages.feature||message/tests/behat/view_messages.feature",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "message/tests/privacy_provider_test.php||message/tests/privacy_provider_test.php",
          "user/tests/behat/delete_users.feature||user/tests/behat/delete_users.feature",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "config-dist.php||config-dist.php": [
          "File: config-dist.php -> config-dist.php"
        ],
        "lang/en/message.php||lang/en/message.php": [
          "File: lang/en/message.php -> lang/en/message.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: $string['blockedusers'] = 'Blocked users';",
          "32: $string['blocknoncontacts'] = 'Prevent non-contacts from messaging me';",
          "33: $string['canceledit'] = 'Cancel editing messages';",
          "34: $string['contactblocked'] = 'Contact blocked';",
          "35: $string['contactrequests'] = 'Contact requests';",
          "36: $string['contacts'] = 'Contacts';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: $string['contactableprivacy'] = 'Accept messages from:';",
          "35: $string['contactableprivacy_onlycontacts'] = 'My contacts only';",
          "36: $string['contactableprivacy_coursemember'] = 'My contacts and anyone in my courses';",
          "37: $string['contactableprivacy_site'] = 'Anyone on the site';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181: $string['unknownuser'] = 'Unknown user';",
          "182: $string['unreadnotification'] = 'Unread notification: {$a}';",
          "183: $string['unreadnewmessage'] = 'New message from {$a}';",
          "186: $string['viewfullnotification'] = 'View full notification';",
          "187: $string['viewinganotherusersmessagearea'] = 'You are viewing another user\\'s message area.';",
          "188: $string['viewmessageswith'] = 'View messages with {$a}';",
          "",
          "[Removed Lines]",
          "184: $string['userisblockingyou'] = 'This user has blocked you from sending messages to them';",
          "185: $string['userisblockingyounoncontact'] = '{$a} only accepts messages from their contacts.';",
          "",
          "[Added Lines]",
          "188: $string['usercantbemessaged'] = 'You can\\'t message {$a} due to their message preferences. Try adding them as a contact.';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195: $string['eventmessagecontactblocked'] = 'Message contact blocked';",
          "196: $string['eventmessagecontactunblocked'] = 'Message contact unblocked';",
          "197: $string['messagingdisabled'] = 'Messaging is disabled on this site, emails will be sent instead';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201: $string['userisblockingyou'] = 'This user has blocked you from sending messages to them';",
          "202: $string['userisblockingyounoncontact'] = '{$a} only accepts messages from their contacts.';",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2337:         upgrade_main_savepoint(true, 2018091200.00);",
          "2338:     }",
          "2356:     if ($oldversion < 2018091700.01) {",
          "2358:         unset_config('messaginghidereadnotifications');",
          "",
          "[Removed Lines]",
          "2340:     if ($oldversion < 2018091400.01) {",
          "2341:         if (!isset($CFG->messagingallusers)) {",
          "2343:             if (isset($CFG->messaging)) {",
          "2344:                 set_config('messagingallusers', $CFG->messaging);",
          "2345:             } else {",
          "2348:                 set_config('messagingallusers', 1);",
          "2349:             }",
          "2350:         }",
          "2353:         upgrade_main_savepoint(true, 2018091400.01);",
          "2354:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2524:         upgrade_main_savepoint(true, 2018092800.03);",
          "2525:     }",
          "2527:     return true;",
          "2528: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2511:     if ($oldversion < 2018101700.01) {",
          "2512:         if (empty($CFG->keepmessagingallusersenabled)) {",
          "2516:             set_config('messagingallusers', false);",
          "2517:         } else {",
          "2519:             set_config('messagingallusers', true);",
          "2524:             $DB->set_field(",
          "2525:                 'user_preferences',",
          "2526:                 'value',",
          "2527:                 \\core_message\\api::MESSAGE_PRIVACY_SITE,",
          "2528:                 array('name' => 'message_blocknoncontacts', 'value' => 0)",
          "2529:             );",
          "2530:         }",
          "2533:         upgrade_main_savepoint(true, 2018101700.01);",
          "2534:     }",
          "",
          "---------------"
        ],
        "message/amd/src/message_preferences.js||message/amd/src/message_preferences.js": [
          "File: message/amd/src/message_preferences.js -> message/amd/src/message_preferences.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     var SELECTORS = {",
          "30:         PREFERENCE: '[data-state]',",
          "31:         PREFERENCES_CONTAINER: '[data-region=\"preferences-container\"]',",
          "34:     };",
          "",
          "[Removed Lines]",
          "32:         BLOCK_NON_CONTACTS: '[data-region=\"block-non-contacts-container\"] [data-block-non-contacts]',",
          "33:         BLOCK_NON_CONTACTS_CONTAINER: '[data-region=\"block-non-contacts-container\"]',",
          "",
          "[Added Lines]",
          "32:         CONTACTABLE_PRIVACY_CONTAINER: '[data-region=\"privacy-setting-container\"]',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     };",
          "70:         if (container.hasClass('loading')) {",
          "71:             return $.Deferred().resolve();",
          "",
          "[Removed Lines]",
          "65:     MessagePreferences.prototype.saveBlockNonContactsStatus = function() {",
          "66:         var checkbox = this.root.find(SELECTORS.BLOCK_NON_CONTACTS);",
          "67:         var container = this.root.find(SELECTORS.BLOCK_NON_CONTACTS_CONTAINER);",
          "68:         var ischecked = checkbox.prop('checked');",
          "",
          "[Added Lines]",
          "64:     MessagePreferences.prototype.saveContactablePrivacySetting = function() {",
          "65:         var container = this.root.find(SELECTORS.CONTACTABLE_PRIVACY_CONTAINER);",
          "66:         var value = $(\"input[type='radio']:checked\").val();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:                 userid: this.userId,",
          "80:                 preferences: [",
          "81:                     {",
          "84:                     }",
          "85:                 ]",
          "86:             }",
          "",
          "[Removed Lines]",
          "82:                         type: checkbox.attr('data-preference-key'),",
          "83:                         value: ischecked ? 1 : 0,",
          "",
          "[Added Lines]",
          "80:                         type: container.attr('data-preference-key'),",
          "81:                         value: value,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:             CustomEvents.events.activate",
          "104:         ]);",
          "110:         this.root.on('change', function(e) {",
          "120:             }",
          "121:         }.bind(this));",
          "122:     };",
          "",
          "[Removed Lines]",
          "106:         this.root.on(CustomEvents.events.activate, SELECTORS.BLOCK_NON_CONTACTS, function() {",
          "107:             this.saveBlockNonContactsStatus();",
          "108:         }.bind(this));",
          "111:             if (!this.preferencesDisabled()) {",
          "112:                 var preferencesContainer = $(e.target).closest(SELECTORS.PREFERENCES_CONTAINER);",
          "113:                 var preferenceElement = $(e.target).closest(SELECTORS.PREFERENCE);",
          "114:                 var messagePreference = new MessageNotificationPreference(preferencesContainer, this.userId);",
          "116:                 preferenceElement.addClass('loading');",
          "117:                 messagePreference.save().always(function() {",
          "118:                     preferenceElement.removeClass('loading');",
          "119:                 });",
          "",
          "[Added Lines]",
          "106:             if (e.target.name == 'message_blocknoncontacts') {",
          "107:                 this.saveContactablePrivacySetting();",
          "108:             } else {",
          "110:                 if (!this.preferencesDisabled()) {",
          "111:                     var preferencesContainer = $(e.target).closest(SELECTORS.PREFERENCES_CONTAINER);",
          "112:                     var preferenceElement = $(e.target).closest(SELECTORS.PREFERENCE);",
          "113:                     var messagePreference = new MessageNotificationPreference(preferencesContainer, this.userId);",
          "115:                     preferenceElement.addClass('loading');",
          "116:                     messagePreference.save().always(function() {",
          "117:                         preferenceElement.removeClass('loading');",
          "118:                     });",
          "119:                 }",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     const MESSAGE_ACTION_DELETED = 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     const MESSAGE_PRIVACY_COURSEMEMBER = 0;",
          "57:     const MESSAGE_PRIVACY_ONLYCONTACTS = 1;",
          "62:     const MESSAGE_PRIVACY_SITE = 2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "882:         }",
          "886:         $preferences->mailformat = $user->mailformat;",
          "887:         $preferences->mailcharset = get_user_preferences('mailcharset', '', $user->id);",
          "",
          "[Removed Lines]",
          "885:         $preferences->blocknoncontacts = get_user_preferences('message_blocknoncontacts', '', $user->id);",
          "",
          "[Added Lines]",
          "900:         $preferences->blocknoncontacts = self::get_user_privacy_messaging_preference($user->id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "952:         return true;",
          "953:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "979:     public static function get_user_privacy_messaging_preference(int $userid) : int {",
          "980:         global $CFG;",
          "984:         if (empty($CFG->messagingallusers)) {",
          "985:             $defaultprefvalue = self::MESSAGE_PRIVACY_COURSEMEMBER;",
          "986:         } else {",
          "987:             $defaultprefvalue = self::MESSAGE_PRIVACY_SITE;",
          "988:         }",
          "989:         $privacypreference = get_user_preferences('message_blocknoncontacts', $defaultprefvalue, $userid);",
          "993:         if (empty($CFG->messagingallusers) && $privacypreference == self::MESSAGE_PRIVACY_SITE) {",
          "994:             $privacypreference = self::MESSAGE_PRIVACY_COURSEMEMBER;",
          "995:         }",
          "997:         return $privacypreference;",
          "998:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "964:     public static function is_user_non_contact_blocked($recipient, $sender = null) {",
          "967:         if (is_null($sender)) {",
          "969:             $sender = $USER;",
          "970:         }",
          "982:         }",
          "984:         return false;",
          "",
          "[Removed Lines]",
          "965:         global $USER;",
          "972:         $blockednoncontacts = get_user_preferences('message_blocknoncontacts', '', $recipient->id);",
          "973:         if (!empty($blockednoncontacts)) {",
          "975:             if (self::is_contact($sender->id, $recipient->id)) {",
          "977:                 return false;",
          "978:             } else {",
          "980:                 return true;",
          "981:             }",
          "",
          "[Added Lines]",
          "1010:         global $USER, $CFG;",
          "1017:         $privacypreference = self::get_user_privacy_messaging_preference($recipient->id);",
          "1018:         switch ($privacypreference) {",
          "1019:             case self::MESSAGE_PRIVACY_SITE:",
          "1020:                 if (!empty($CFG->messagingallusers)) {",
          "1022:                     break;",
          "1023:                 }",
          "1026:             case self::MESSAGE_PRIVACY_COURSEMEMBER:",
          "1028:                 if (enrol_sharing_course($recipient, $sender)) {",
          "1030:                     return false;",
          "1031:                 }",
          "1032:             case self::MESSAGE_PRIVACY_ONLYCONTACTS:",
          "1034:                 return !self::is_contact($sender->id, $recipient->id);",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:         }",
          "93:         list($sqluserids, $sqlparams) = $DB->get_in_or_equal($receivers);",
          "94:         $tousers = $DB->get_records_select(\"user\", \"id \" . $sqluserids . \" AND deleted = 0\", $sqlparams);",
          "122:         $resultmessages = array();",
          "123:         foreach ($params['messages'] as $message) {",
          "124:             $resultmsg = array(); //the infos about the success of the operation",
          "128:             $success = true;",
          "131:             if (empty($tousers[$message['touserid']])) {",
          "132:                 $success = false;",
          "133:                 $errormessage = get_string('touserdoesntexist', 'message', $message['touserid']);",
          "134:             }",
          "138:                 $success = false;",
          "140:             }",
          "154:             if ($success) {",
          "156:                 $success = message_post_message($USER, $tousers[$message['touserid']],",
          "157:                         $message['text'], external_validate_format($message['textformat']));",
          "158:             }",
          "161:             if (isset($message['clientmsgid'])) {",
          "162:                 $resultmsg['clientmsgid'] = $message['clientmsgid'];",
          "163:             }",
          "",
          "[Removed Lines]",
          "95:         $blocklist   = array();",
          "96:         $contactlist = array();",
          "97:         $contactsqlparams = array_merge($sqlparams, [$USER->id], [$USER->id], $sqlparams);",
          "98:         $rs = $DB->get_recordset_sql(\"SELECT *",
          "99:                                         FROM {message_contacts}",
          "100:                                        WHERE (userid $sqluserids AND contactid = ?)",
          "101:                                           OR (userid = ? AND contactid $sqluserids)\", $contactsqlparams);",
          "102:         foreach ($rs as $record) {",
          "103:             $useridtouse = $record->userid;",
          "104:             if ($record->userid == $USER->id) {",
          "105:                 $useridtouse = $record->contactid;",
          "106:             }",
          "107:             $contactlist[$useridtouse] = true;",
          "108:         }",
          "109:         $rs->close();",
          "110:         $blocksqlparams = array_merge($sqlparams, [$USER->id]);",
          "111:         $rs = $DB->get_recordset_sql(\"SELECT *",
          "112:                                         FROM {message_users_blocked}",
          "113:                                        WHERE userid $sqluserids",
          "114:                                          AND blockeduserid = ?\", $blocksqlparams);",
          "115:         foreach ($rs as $record) {",
          "116:             $blocklist[$record->userid] = true;",
          "117:         }",
          "118:         $rs->close();",
          "120:         $canreadallmessages = has_capability('moodle/site:readallmessages', $context);",
          "137:             if ($success and !empty($blocklist[$message['touserid']]) and !$canreadallmessages) {",
          "139:                 $errormessage = get_string('userisblockingyou', 'message');",
          "144:             $blocknoncontacts = get_user_preferences('message_blocknoncontacts', NULL, $message['touserid']);",
          "146:             if ($success && empty($contactlist[$message['touserid']]) && !empty($blocknoncontacts)) {",
          "148:                 $success = false;",
          "149:                 $errormessage = get_string('userisblockingyounoncontact', 'message',",
          "150:                         fullname(core_user::get_user($message['touserid'])));",
          "151:             }",
          "",
          "[Added Lines]",
          "112:             if ($success && !\\core_message\\api::can_post_message($tousers[$message['touserid']], $USER)) {",
          "114:                 $errormessage = get_string('usercantbemessaged', 'message', fullname(\\core_user::get_user($message['touserid'])));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3154:         $result = array(",
          "3155:             'warnings' => array(),",
          "3156:             'preferences' => $notificationlistoutput->export_for_template($renderer),",
          "3158:         );",
          "3159:         return $result;",
          "3160:     }",
          "",
          "[Removed Lines]",
          "3157:             'blocknoncontacts' => get_user_preferences('message_blocknoncontacts', '', $user->id) ? true : false,",
          "",
          "[Added Lines]",
          "3120:             'blocknoncontacts' => \\core_message\\api::get_user_privacy_messaging_preference($user->id),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3169:         return new external_function_parameters(",
          "3170:             array(",
          "3171:                 'preferences' => self::get_preferences_structure(),",
          "3173:                 'warnings' => new external_warnings(),",
          "3174:             )",
          "3175:         );",
          "",
          "[Removed Lines]",
          "3172:                 'blocknoncontacts' => new external_value(PARAM_BOOL, 'Whether to block or not messages from non contacts'),",
          "",
          "[Added Lines]",
          "3135:                 'blocknoncontacts' => new external_value(PARAM_INT, 'Privacy messaging setting to define who can message you'),",
          "",
          "---------------"
        ],
        "message/lib.php||message/lib.php": [
          "File: message/lib.php -> message/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "718: function core_message_user_preferences() {",
          "720:     $preferences = [];",
          "723:     $preferences['/^message_provider_([\\w\\d_]*)_logged(in|off)$/'] = array('isregex' => true, 'type' => PARAM_NOTAGS,",
          "724:         'null' => NULL_NOT_ALLOWED, 'default' => 'none',",
          "725:         'permissioncallback' => function ($user, $preferencename) {",
          "",
          "[Removed Lines]",
          "721:     $preferences['message_blocknoncontacts'] = array('type' => PARAM_INT, 'null' => NULL_NOT_ALLOWED, 'default' => 0,",
          "722:         'choices' => array(0, 1));",
          "",
          "[Added Lines]",
          "720:     $preferences['message_blocknoncontacts'] = array(",
          "721:         'type' => PARAM_INT,",
          "722:         'null' => NULL_NOT_ALLOWED,",
          "723:         'default' => 0,",
          "724:         'choices' => array(",
          "725:             \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS,",
          "726:             \\core_message\\api::MESSAGE_PRIVACY_COURSEMEMBER,",
          "727:             \\core_message\\api::MESSAGE_PRIVACY_SITE",
          "728:         ),",
          "729:         'cleancallback' => function ($value) {",
          "730:             global $CFG;",
          "733:             if (empty($CFG->messagingallusers) && $value === \\core_message\\api::MESSAGE_PRIVACY_SITE) {",
          "734:                 return \\core_message\\api::MESSAGE_PRIVACY_COURSEMEMBER;",
          "735:             }",
          "736:             return $value;",
          "737:         }",
          "738:     );",
          "",
          "---------------"
        ],
        "message/output/popup/tests/behat/message_popover_unread.feature||message/output/popup/tests/behat/message_popover_unread.feature": [
          "File: message/output/popup/tests/behat/message_popover_unread.feature -> message/output/popup/tests/behat/message_popover_unread.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   Background:",
          "8:     Given the following \"users\" exist:",
          "10:       | student1 | Student | 1 | student1@example.com |",
          "11:       | student2 | Student | 2 | student2@example.com |",
          "12:     And I log in as \"student2\"",
          "13:     And I send \"Test message\" message to \"Student 1\" user",
          "14:     And I log out",
          "",
          "[Removed Lines]",
          "9:       | username | firstname | lastname | email |",
          "",
          "[Added Lines]",
          "9:       | username | firstname | lastname | email       |",
          "12:     And the following \"courses\" exist:",
          "13:       | fullname | shortname |",
          "14:       | Course 1 | C1        |",
          "15:     And the following \"course enrolments\" exist:",
          "16:       | user     | course | role           |",
          "17:       | student1 | C1     | student        |",
          "18:       | student2 | C1     | student        |",
          "",
          "---------------"
        ],
        "message/renderer.php||message/renderer.php": [
          "File: message/renderer.php -> message/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:     public function render_user_message_preferences($user) {",
          "231:         $readyprocessors = array_filter(get_message_processors(), function($processor) {",
          "232:             return $processor->enabled &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:         global $CFG;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:         $notificationlistoutput = new \\core_message\\output\\preferences\\message_notification_list($readyprocessors,",
          "244:             $providers, $preferences, $user);",
          "245:         $context = $notificationlistoutput->export_for_template($this);",
          "248:         return $this->render_from_template('message/message_preferences', $context);",
          "249:     }",
          "",
          "[Removed Lines]",
          "246:         $context['blocknoncontacts'] = get_user_preferences('message_blocknoncontacts', '', $user->id) ? true : false;",
          "",
          "[Added Lines]",
          "250:         $privacysetting = \\core_message\\api::get_user_privacy_messaging_preference($user->id);",
          "251:         $choices = array();",
          "252:         $choices[] = [",
          "253:             'value' => \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS,",
          "254:             'text' => get_string('contactableprivacy_onlycontacts', 'message'),",
          "255:             'checked' => ($privacysetting == \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS)",
          "256:         ];",
          "257:         $choices[] = [",
          "258:             'value' => \\core_message\\api::MESSAGE_PRIVACY_COURSEMEMBER,",
          "259:             'text' => get_string('contactableprivacy_coursemember', 'message'),",
          "260:             'checked' => ($privacysetting == \\core_message\\api::MESSAGE_PRIVACY_COURSEMEMBER)",
          "261:         ];",
          "262:         if (!empty($CFG->messagingallusers)) {",
          "264:             $choices[] = [",
          "265:                 'value' => \\core_message\\api::MESSAGE_PRIVACY_SITE,",
          "266:                 'text' => get_string('contactableprivacy_site', 'message'),",
          "267:                 'checked' => ($privacysetting == \\core_message\\api::MESSAGE_PRIVACY_SITE)",
          "268:             ];",
          "269:         }",
          "270:         $context['privacychoices'] = $choices;",
          "",
          "---------------"
        ],
        "message/templates/message_preferences.mustache||message/templates/message_preferences.mustache": [
          "File: message/templates/message_preferences.mustache -> message/templates/message_preferences.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:                     }",
          "66:                 ]",
          "67:             }",
          "68:         ]",
          "69:     }",
          "70: }}",
          "71: <div class=\"preferences-page-container\" data-region=\"preferences-page-container\">",
          "72:     <h2>{{#str}} messagepreferences, message {{/str}}</h2>",
          "83:     <div class=\"preferences-container {{#disableall}}disabled{{/disableall}}\"",
          "84:         data-user-id=\"{{userid}}\"",
          "85:         data-region=\"preferences-container\">",
          "",
          "[Removed Lines]",
          "73:     <div class=\"checkbox-container\" data-region=\"block-non-contacts-container\">",
          "74:         <input id=\"block-non-contacts\"",
          "75:                 type=\"checkbox\"",
          "76:                 data-user-id=\"{{userid}}\"",
          "77:                 data-block-non-contacts",
          "78:                 data-preference-key=\"message_blocknoncontacts\"",
          "79:                 {{#blocknoncontacts}}checked{{/blocknoncontacts}} />",
          "80:         <label for=\"block-non-contacts\">{{#str}} blocknoncontacts, message {{/str}}</label>",
          "81:         {{> core/loading }}",
          "82:     </div>",
          "",
          "[Added Lines]",
          "69:         ],",
          "70:         \"privacychoices\": [",
          "71:             {",
          "72:                 \"value\": 1,",
          "73:                 \"text\": \"My contacts only\",",
          "74:                 \"checked\": 0",
          "75:             },",
          "76:             {",
          "77:                 \"value\": 2,",
          "78:                 \"text\": \"Anyone within courses I am a member of\",",
          "79:                 \"checked\": 1",
          "80:             }",
          "86:     <div class=\"privacy-setting-container\"",
          "87:          data-user-id=\"{{userid}}\"",
          "88:          data-region=\"privacy-setting-container\"",
          "89:          data-preference-key=\"message_blocknoncontacts\">",
          "90:         <p>{{#str}} contactableprivacy, message {{/str}}</p>",
          "91:        {{#privacychoices}}",
          "92:         <input id=\"action-selection-option-{{value}}\"",
          "93:                type=\"radio\"",
          "94:                name=\"message_blocknoncontacts\"",
          "95:                value=\"{{value}}\"",
          "96:                {{#checked}}checked=\"checked\"{{/checked}}/>",
          "97:         <label for=\"action-selection-option-{{value}}\">{{text}}</label>",
          "98:         <br>",
          "99:        {{/privacychoices}}",
          "100:     </div><br>",
          "",
          "---------------"
        ],
        "message/tests/api_test.php||message/tests/api_test.php": [
          "File: message/tests/api_test.php -> message/tests/api_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:         $user1 = $this->getDataGenerator()->create_user();",
          "113:         $this->assertEquals(0, \\core_message\\api::count_blocked_users());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:         $user2 = $this->getDataGenerator()->create_user();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1334:         $user1 = self::getDataGenerator()->create_user();",
          "1335:         $user2 = self::getDataGenerator()->create_user();",
          "1338:         $this->setUser($user1);",
          "1341:         $this->assertTrue(\\core_message\\api::can_post_message($user2));",
          "1342:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1342:         $this->assertFalse(\\core_message\\api::can_post_message($user2));",
          "1345:         $course = $this->getDataGenerator()->create_course();",
          "1346:         $this->getDataGenerator()->enrol_user($user1->id, $course->id);",
          "1347:         $this->getDataGenerator()->enrol_user($user2->id, $course->id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1363:         $this->assertFalse(\\core_message\\api::can_post_message($user2));",
          "1364:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1377:     public function test_can_post_message_when_contact() {",
          "1379:         $user1 = self::getDataGenerator()->create_user();",
          "1380:         $user2 = self::getDataGenerator()->create_user();",
          "1383:         $this->setUser($user1);",
          "1386:         $this->assertFalse(\\core_message\\api::can_post_message($user2));",
          "1389:         \\core_message\\api::add_contact($user1->id, $user2->id);",
          "1392:         $this->assertTrue(\\core_message\\api::can_post_message($user2));",
          "1393:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1376:         $this->setUser($user1);",
          "1382:         $this->assertFalse(\\core_message\\api::can_post_message($user2));",
          "",
          "[Removed Lines]",
          "1379:         set_user_preference('message_blocknoncontacts', 1, $user2->id);",
          "",
          "[Added Lines]",
          "1408:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS, $user2->id);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1400:         $this->assertFalse(\\core_message\\api::can_post_message($user1, $user2));",
          "1401:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1436:     public function test_can_post_message_site_messaging_setting() {",
          "1438:         $user1 = self::getDataGenerator()->create_user();",
          "1439:         $user2 = self::getDataGenerator()->create_user();",
          "1442:         $this->setUser($user1);",
          "1446:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_SITE, $user2->id);",
          "1447:         $this->assertFalse(\\core_message\\api::can_post_message($user2));",
          "1450:         set_config('messagingallusers', true);",
          "1452:         $this->assertTrue(\\core_message\\api::can_post_message($user2));",
          "1453:     }",
          "1458:     public function test_get_user_privacy_messaging_preference() {",
          "1460:         $user1 = self::getDataGenerator()->create_user();",
          "1461:         $user2 = self::getDataGenerator()->create_user();",
          "1462:         $user3 = self::getDataGenerator()->create_user();",
          "1465:         set_config('messagingallusers', true);",
          "1468:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_SITE, $user1->id);",
          "1469:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS, $user2->id);",
          "1472:         $this->assertEquals(",
          "1473:             \\core_message\\api::MESSAGE_PRIVACY_SITE,",
          "1474:             \\core_message\\api::get_user_privacy_messaging_preference($user1->id)",
          "1475:         );",
          "1476:         $this->assertEquals(",
          "1477:             \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS,",
          "1478:             \\core_message\\api::get_user_privacy_messaging_preference($user2->id)",
          "1479:         );",
          "1480:         $this->assertEquals(",
          "1481:             \\core_message\\api::MESSAGE_PRIVACY_SITE,",
          "1482:             \\core_message\\api::get_user_privacy_messaging_preference($user3->id)",
          "1483:         );",
          "1486:         set_config('messagingallusers', false);",
          "1489:         $this->assertEquals(",
          "1490:             \\core_message\\api::MESSAGE_PRIVACY_COURSEMEMBER,",
          "1491:             \\core_message\\api::get_user_privacy_messaging_preference($user1->id)",
          "1492:         );",
          "1493:         $this->assertEquals(",
          "1494:             \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS,",
          "1495:             \\core_message\\api::get_user_privacy_messaging_preference($user2->id)",
          "1496:         );",
          "1497:         $this->assertEquals(",
          "1498:             \\core_message\\api::MESSAGE_PRIVACY_COURSEMEMBER,",
          "1499:             \\core_message\\api::get_user_privacy_messaging_preference($user3->id)",
          "1500:         );",
          "1501:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1413:         $this->setUser($user1);",
          "1416:         $this->assertFalse(\\core_message\\api::is_user_non_contact_blocked($user2));",
          "1422:         $this->assertTrue(\\core_message\\api::is_user_non_contact_blocked($user2));",
          "",
          "[Removed Lines]",
          "1419:         set_user_preference('message_blocknoncontacts', 1, $user2->id);",
          "",
          "[Added Lines]",
          "1516:         $this->assertTrue(\\core_message\\api::is_user_non_contact_blocked($user2));",
          "1520:         set_config('messagingallusers', true);",
          "1525:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS, $user2->id);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1428:         $this->assertFalse(\\core_message\\api::is_user_non_contact_blocked($user2));",
          "1436:     }",
          "",
          "[Removed Lines]",
          "1431:         set_user_preference('message_blocknoncontacts', 1, $user1->id);",
          "1432:         $this->setUser($user2);",
          "1435:         $this->assertFalse(\\core_message\\api::is_user_non_contact_blocked($user1));",
          "",
          "[Added Lines]",
          "1536:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_COURSEMEMBER, $user2->id);",
          "1538:         $this->assertFalse(\\core_message\\api::is_user_non_contact_blocked($user2));",
          "",
          "---------------"
        ],
        "message/tests/behat/delete_all_messages.feature||message/tests/behat/delete_all_messages.feature": [
          "File: message/tests/behat/delete_all_messages.feature -> message/tests/behat/delete_all_messages.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   Scenario: Delete all messages",
          "8:     Given the following \"users\" exist:",
          "10:       | user1    | User      | 1        | user1@example.com    |",
          "11:       | user2    | User      | 2        | user2@example.com    |",
          "12:     And I log in as \"user2\"",
          "13:     And I send \"User 2 to User 1 message 1\" message to \"User 1\" user",
          "14:     And I send \"User 2 to User 1 message 2\" message in the message area",
          "",
          "[Removed Lines]",
          "9:       | username | firstname | lastname | email            |",
          "",
          "[Added Lines]",
          "9:       | username | firstname | lastname | email                |",
          "12:     And the following \"courses\" exist:",
          "13:       | fullname | shortname |",
          "14:       | Course 1 | C1        |",
          "15:     And the following \"course enrolments\" exist:",
          "16:       | user     | course | role        |",
          "17:       | user1    | C1     | student     |",
          "18:       | user2    | C1     | student     |",
          "",
          "---------------"
        ],
        "message/tests/behat/delete_messages.feature||message/tests/behat/delete_messages.feature": [
          "File: message/tests/behat/delete_messages.feature -> message/tests/behat/delete_messages.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   Scenario: Delete messages",
          "8:     Given the following \"users\" exist:",
          "10:       | user1    | User      | 1        | user1@example.com    |",
          "11:       | user2    | User      | 2        | user2@example.com    |",
          "12:     And I log in as \"user2\"",
          "13:     And I send \"User 2 to User 1 message 1\" message to \"User 1\" user",
          "14:     And I send \"User 2 to User 1 message 2\" message in the message area",
          "",
          "[Removed Lines]",
          "9:       | username | firstname | lastname | email            |",
          "",
          "[Added Lines]",
          "9:       | username | firstname | lastname | email                |",
          "12:     And the following \"courses\" exist:",
          "13:       | fullname | shortname |",
          "14:       | Course 1 | C1        |",
          "15:     And the following \"course enrolments\" exist:",
          "16:       | user     | course | role           |",
          "17:       | user1    | C1     | student        |",
          "18:       | user2    | C1     | student        |",
          "",
          "---------------"
        ],
        "message/tests/behat/reply_message.feature||message/tests/behat/reply_message.feature": [
          "File: message/tests/behat/reply_message.feature -> message/tests/behat/reply_message.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:       | username | firstname | lastname | email            |",
          "10:       | user1    | User      | 1        | user1@example.com    |",
          "11:       | user2    | User      | 2        | user2@example.com    |",
          "12:     And I log in as \"user2\"",
          "13:     And I send \"User 2 to User 1\" message to \"User 1\" user",
          "14:     And I log out",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:     And the following \"courses\" exist:",
          "13:       | fullname | shortname |",
          "14:       | Course 1 | C1        |",
          "15:     And the following \"course enrolments\" exist:",
          "16:       | user     | course | role           |",
          "17:       | user1    | C1     | student        |",
          "18:       | user2    | C1     | student        |",
          "",
          "---------------"
        ],
        "message/tests/behat/search_messages.feature||message/tests/behat/search_messages.feature": [
          "File: message/tests/behat/search_messages.feature -> message/tests/behat/search_messages.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   Background:",
          "8:     Given the following \"users\" exist:",
          "10:       | user1    | User      | 1        | user1@example.com    |",
          "11:       | user2    | User      | 2        | user2@example.com    |",
          "12:       | user3    | User      | 3        | user3@example.com    |",
          "13:     And I log in as \"user2\"",
          "14:     And I send \"User 2 to User 1\" message to \"User 1\" user",
          "15:     And I log out",
          "",
          "[Removed Lines]",
          "9:       | username | firstname | lastname | email            |",
          "",
          "[Added Lines]",
          "9:       | username | firstname | lastname | email                |",
          "13:     And the following \"courses\" exist:",
          "14:       | fullname | shortname |",
          "15:       | Course 1 | C1        |",
          "16:     And the following \"course enrolments\" exist:",
          "17:       | user     | course | role           |",
          "18:       | user1    | C1     | student        |",
          "19:       | user2    | C1     | student        |",
          "20:       | user3    | C1     | student        |",
          "",
          "---------------"
        ],
        "message/tests/behat/view_messages.feature||message/tests/behat/view_messages.feature": [
          "File: message/tests/behat/view_messages.feature -> message/tests/behat/view_messages.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   Scenario: View messages from multiple users",
          "8:     Given the following \"users\" exist:",
          "10:       | user1    | User      | 1        | user1@example.com    |",
          "11:       | user2    | User      | 2        | user2@example.com    |",
          "12:       | user3    | User      | 3        | user3@example.com    |",
          "13:     And I log in as \"user2\"",
          "14:     And I send \"User 2 to User 1\" message to \"User 1\" user",
          "15:     And I log out",
          "",
          "[Removed Lines]",
          "9:       | username | firstname | lastname | email            |",
          "",
          "[Added Lines]",
          "9:       | username | firstname | lastname | email                |",
          "13:     And the following \"courses\" exist:",
          "14:       | fullname | shortname |",
          "15:       | Course 1 | C1        |",
          "16:     And the following \"course enrolments\" exist:",
          "17:       | user     | course | role           |",
          "18:       | user1    | C1     | student        |",
          "19:       | user2    | C1     | student        |",
          "20:       | user3    | C1     | student        |",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         $sentmessages = core_message_external::send_instant_messages($messages);",
          "117:         $sentmessages = external_api::clean_returnvalue(core_message_external::send_instant_messages_returns(), $sentmessages);",
          "119:         $sentmessage = reset($sentmessages);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:         $this->assertEquals(",
          "119:             get_string('usercantbemessaged', 'message', fullname(\\core_user::get_user($message1['touserid']))),",
          "120:             array_pop($sentmessages)['errormessage']",
          "121:         );",
          "124:         \\core_message\\api::add_contact($user1->id, $user2->id);",
          "127:         $sentmessages = core_message_external::send_instant_messages($messages);",
          "129:         $sentmessages = external_api::clean_returnvalue(core_message_external::send_instant_messages_returns(), $sentmessages);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:         $sentmessage = reset($sentmessages);",
          "170:         $this->assertEquals(0, $DB->count_records('messages'));",
          "171:     }",
          "",
          "[Removed Lines]",
          "168:         $this->assertEquals(get_string('userisblockingyou', 'message'), $sentmessage['errormessage']);",
          "",
          "[Added Lines]",
          "180:         $this->assertEquals(get_string('usercantbemessaged', 'message', fullname($user2)), $sentmessage['errormessage']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:         $this->setUser($user1);",
          "193:         $message1 = array();",
          "",
          "[Removed Lines]",
          "190:         set_user_preference('message_blocknoncontacts', 1, $user2);",
          "",
          "[Added Lines]",
          "202:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS, $user2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:         $sentmessage = reset($sentmessages);",
          "206:         $this->assertEquals(0, $DB->count_records('messages'));",
          "207:     }",
          "",
          "[Removed Lines]",
          "204:         $this->assertEquals(get_string('userisblockingyounoncontact', 'message', fullname($user2)), $sentmessage['errormessage']);",
          "",
          "[Added Lines]",
          "216:         $this->assertEquals(get_string('usercantbemessaged', 'message', fullname($user2)), $sentmessage['errormessage']);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "223:         $this->setUser($user1);",
          "228:         \\core_message\\api::add_contact($user1->id, $user2->id);",
          "",
          "[Removed Lines]",
          "226:         set_user_preference('message_blocknoncontacts', 1, $user2);",
          "",
          "[Added Lines]",
          "238:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS, $user2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3681:         $user = self::getDataGenerator()->create_user();",
          "3682:         $this->setUser($user);",
          "3685:         set_user_preference('message_provider_moodle_instantmessage_loggedin', 'email', $user);",
          "3686:         set_user_preference('message_provider_moodle_instantmessage_loggedoff', 'email', $user);",
          "3689:         $prefs = core_message_external::get_user_message_preferences();",
          "3690:         $prefs = external_api::clean_returnvalue(core_message_external::get_user_message_preferences_returns(), $prefs);",
          "",
          "[Removed Lines]",
          "3687:         set_user_preference('message_blocknoncontacts', 1, $user);",
          "",
          "[Added Lines]",
          "3697:         set_config('messagingallusers', true);",
          "3702:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_SITE, $user);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3694:         $this->assertCount(1, $prefs['preferences']['components']);",
          "3698:         $found = false;",
          "",
          "[Removed Lines]",
          "3695:         $this->assertTrue($prefs['blocknoncontacts']);",
          "",
          "[Added Lines]",
          "3710:         $this->assertEquals(\\core_message\\api::MESSAGE_PRIVACY_SITE, $prefs['blocknoncontacts']);",
          "",
          "---------------"
        ],
        "message/tests/privacy_provider_test.php||message/tests/privacy_provider_test.php": [
          "File: message/tests/privacy_provider_test.php -> message/tests/privacy_provider_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:         set_user_preference('message_provider_moodle_instantmessage_loggedin', 'airnotifier', $USER->id);",
          "162:         set_user_preference('message_provider_moodle_instantmessage_loggedoff', 'popup', $USER->id);",
          "164:         set_user_preference('message_provider_moodle_instantmessage_loggedoff', 'inbound', $user->id);",
          "",
          "[Removed Lines]",
          "163:         set_user_preference('message_blocknoncontacts', 1, $USER->id);",
          "",
          "[Added Lines]",
          "163:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS, $USER->id);",
          "",
          "---------------"
        ],
        "user/tests/behat/delete_users.feature||user/tests/behat/delete_users.feature": [
          "File: user/tests/behat/delete_users.feature -> user/tests/behat/delete_users.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   Background:",
          "8:     Given the following \"users\" exist:",
          "15:   @javascript",
          "16:   Scenario: Deleting one user at a time",
          "",
          "[Removed Lines]",
          "9:       | username | firstname | lastname | email |",
          "10:       | user1 | User | One   | one@example.com |",
          "11:       | user2 | User | Two   | two@example.com |",
          "12:       | user3 | User | Three | three@example.com |",
          "13:       | user4 | User | Four  | four@example.com |",
          "",
          "[Added Lines]",
          "9:       | username | firstname | lastname | email             |",
          "10:       | user1    | User      | One      | one@example.com   |",
          "11:       | user2    | User      | Two      | two@example.com   |",
          "12:       | user3    | User      | Three    | three@example.com |",
          "13:       | user4    | User      | Four     | four@example.com  |",
          "14:     And the following \"courses\" exist:",
          "15:       | fullname | shortname |",
          "16:       | Course 1 | C1        |",
          "17:     And the following \"course enrolments\" exist:",
          "18:       | user     | course | role           |",
          "19:       | user1    | C1     | student        |",
          "20:       | user2    | C1     | student        |",
          "21:       | user3    | C1     | student        |",
          "22:       | user4    | C1     | student        |",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018101700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018101700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8bfd9b4a9ab48b6880a09e3b3651c392d8dde3a",
      "candidate_info": {
        "commit_hash": "e8bfd9b4a9ab48b6880a09e3b3651c392d8dde3a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e8bfd9b4a9ab48b6880a09e3b3651c392d8dde3a",
        "files": [
          "badges/alignment.php",
          "badges/alignment_action.php",
          "badges/alignment_form.php",
          "badges/badge_json.php",
          "badges/classes/assertion.php",
          "badges/classes/external.php",
          "badges/classes/external/alignment_exporter.php",
          "badges/classes/external/user_badge_exporter.php",
          "badges/renderer.php",
          "badges/tests/badgeslib_test.php",
          "badges/tests/behat/add_badge.feature",
          "badges/tests/external_test.php",
          "badges/upgrade.txt",
          "lib/badgeslib.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "lib/setuplib.php",
          "version.php"
        ],
        "message": "MDL-63876 badges: Remove invalid table from badges",
        "before_after_code_files": [
          "badges/competency.php||badges/alignment.php",
          "badges/competency_action.php||badges/alignment_action.php",
          "badges/competency_form.php||badges/alignment_form.php",
          "badges/badge_json.php||badges/badge_json.php",
          "badges/classes/assertion.php||badges/classes/assertion.php",
          "badges/classes/external.php||badges/classes/external.php",
          "badges/classes/external/competency_exporter.php||badges/classes/external/alignment_exporter.php",
          "badges/classes/external/user_badge_exporter.php||badges/classes/external/user_badge_exporter.php",
          "badges/renderer.php||badges/renderer.php",
          "badges/tests/badgeslib_test.php||badges/tests/badgeslib_test.php",
          "badges/tests/behat/add_badge.feature||badges/tests/behat/add_badge.feature",
          "badges/tests/external_test.php||badges/tests/external_test.php",
          "lib/badgeslib.php||lib/badgeslib.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/setuplib.php||lib/setuplib.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "badges/competency.php||badges/alignment.php": [
          "File: badges/competency.php -> badges/alignment.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: require_once(__DIR__ . '/../config.php');",
          "26: require_once($CFG->libdir . '/badgeslib.php');",
          "29: $badgeid = required_param('id', PARAM_INT);",
          "30: $alignmentid = optional_param('alignmentid', 0, PARAM_INT);",
          "",
          "[Removed Lines]",
          "27: require_once($CFG->dirroot . '/badges/competency_form.php');",
          "",
          "[Added Lines]",
          "27: require_once($CFG->dirroot . '/badges/alignment_form.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     navigation_node::override_active_url($navurl, true);",
          "54: }",
          "57: $PAGE->set_context($context);",
          "58: $PAGE->set_url($currenturl);",
          "59: $PAGE->set_heading($badge->name);",
          "",
          "[Removed Lines]",
          "56: $currenturl = new moodle_url('/badges/competency.php', array('id' => $badge->id));",
          "",
          "[Added Lines]",
          "56: $currenturl = new moodle_url('/badges/alignment.php', array('id' => $badge->id));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: $output = $PAGE->get_renderer('core', 'badges');",
          "64: $msg = optional_param('msg', '', PARAM_TEXT);",
          "65: $emsg = optional_param('emsg', '', PARAM_TEXT);",
          "68: if ($mform->is_cancelled()) {",
          "69:     redirect($currenturl);",
          "70: } else if ($mform->is_submitted() && $mform->is_validated() && ($data = $mform->get_data())) {",
          "",
          "[Removed Lines]",
          "66: $url = new moodle_url('/badges/competency.php', array('id' => $badge->id, 'action' => $action, 'alignmentid' => $alignmentid));",
          "67: $mform = new competency_alignment_form($url, array('badge' => $badge, 'action' => $action, 'alignmentid' => $alignmentid));",
          "",
          "[Added Lines]",
          "66: $url = new moodle_url('/badges/alignment.php', array('id' => $badge->id, 'action' => $action, 'alignmentid' => $alignmentid));",
          "67: $mform = new alignment_form($url, array('badge' => $badge, 'action' => $action, 'alignmentid' => $alignmentid));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:     $mform->display();",
          "95: } else if (empty($action)) {",
          "96:     if (!$badge->is_active() && !$badge->is_locked()) {",
          "98:         echo $OUTPUT->box($OUTPUT->single_button($urlbutton, get_string('addalignment', 'badges')), 'clearfix mdl-align');",
          "99:     }",
          "103:         echo $output->render($renderrelated);",
          "104:     } else {",
          "105:         echo $output->notification(get_string('noalignment', 'badges'));",
          "",
          "[Removed Lines]",
          "97:         $urlbutton = new moodle_url('/badges/competency.php', array('id' => $badge->id, 'action' => 'add'));",
          "100:     $alignment = $badge->get_alignment();",
          "101:     if (count($alignment) > 0) {",
          "102:         $renderrelated = new badge_competencies_alignment($alignment, $badgeid);",
          "",
          "[Added Lines]",
          "97:         $urlbutton = new moodle_url('/badges/alignment.php', array('id' => $badge->id, 'action' => 'add'));",
          "100:     $alignments = $badge->get_alignments();",
          "101:     if (count($alignments) > 0) {",
          "102:         $renderrelated = new badge_alignments($alignments, $badgeid);",
          "",
          "---------------"
        ],
        "badges/competency_action.php||badges/alignment_action.php": [
          "File: badges/competency_action.php -> badges/alignment_action.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: $action = optional_param('action', 'remove', PARAM_TEXT); // Remove.",
          "32: require_login();",
          "34: $badge = new badge($badgeid);",
          "35: $context = $badge->get_context();",
          "36: require_capability('moodle/badges:configuredetails', $context);",
          "",
          "[Removed Lines]",
          "33: $return = new moodle_url('/badges/competency.php', array('id' => $badgeid));",
          "",
          "[Added Lines]",
          "33: $return = new moodle_url('/badges/alignment.php', array('id' => $badgeid));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: if ($action == 'remove') {",
          "39:     $badge->delete_alignment($alignmentid);",
          "40: }",
          "",
          "[Removed Lines]",
          "41: redirect($return);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "badges/competency_form.php||badges/alignment_form.php": [
          "File: badges/competency_form.php -> badges/alignment_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: require_once($CFG->libdir . '/badgeslib.php');",
          "",
          "[Removed Lines]",
          "36: class competency_alignment_form extends moodleform {",
          "",
          "[Added Lines]",
          "36: class alignment_form extends moodleform {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         $this->add_action_buttons();",
          "69:         if ($action == 'edit' || $alignmentid) {",
          "70:             $alignment = new stdClass();",
          "72:             $this->set_data($alignment);",
          "74:             if ($badge->is_active() || $badge->is_locked()) {",
          "",
          "[Removed Lines]",
          "71:             $alignment = $DB->get_record_select('badge_competencies', 'id = ?', array($alignmentid));",
          "",
          "[Added Lines]",
          "71:             $alignment = $DB->get_record_select('badge_alignment', 'id = ?', array($alignmentid));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:         }",
          "92:         return $errors;",
          "93:     }",
          "",
          "[Removed Lines]",
          "94: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "badges/badge_json.php||badges/badge_json.php": [
          "File: badges/badge_json.php -> badges/badge_json.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:             $json['endorsement'] = $endorsementurl->out(false);",
          "96:         }",
          "101:                 $alignment = array('targetName' => $item->targetname, 'targetUrl' => $item->targeturl);",
          "102:                 if ($item->targetdescription) {",
          "103:                     $alignment['targetDescription'] = $item->targetdescription;",
          "",
          "[Removed Lines]",
          "98:         $competencies = $badge->get_alignment();",
          "99:         if (!empty($competencies)) {",
          "100:             foreach ($competencies as $item) {",
          "",
          "[Added Lines]",
          "98:         $alignments = $badge->get_alignments();",
          "99:         if (!empty($alignments)) {",
          "100:             foreach ($alignments as $item) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:     $json['error'] = get_string('error:relatedbadgedoesntexist', 'badges');",
          "124: }",
          "125: echo $OUTPUT->header();",
          "",
          "[Removed Lines]",
          "126: echo json_encode($json);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "badges/classes/assertion.php||badges/classes/assertion.php": [
          "File: badges/classes/assertion.php -> badges/classes/assertion.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:     }",
          "231:         global $DB;",
          "232:         $badgeid = $this->_data->id;",
          "233:         $alignments = array();",
          "235:         foreach ($items as $item) {",
          "236:             $alignment = array('targetName' => $item->targetname, 'targetUrl' => $item->targeturl);",
          "237:             if ($item->targetdescription) {",
          "",
          "[Removed Lines]",
          "230:     public function get_competencies_alignment() {",
          "234:         $items = $DB->get_records_select('badge_competencies', 'badgeid = ?', array($badgeid));",
          "",
          "[Added Lines]",
          "230:     public function get_alignments() {",
          "234:         $items = $DB->get_records_select('badge_alignment', 'badgeid = ?', array($badgeid));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "301:                     $endorsementurl = new moodle_url('/badges/endorsement_json.php', array('id' => $this->_data->id));",
          "302:                     $json['endorsement'] = $endorsementurl->out(false);",
          "303:                 }",
          "306:                 }",
          "307:                 if ($this->_data->imageauthorname ||",
          "308:                         $this->_data->imageauthoremail ||",
          "",
          "[Removed Lines]",
          "304:                 if ($competencies = $this->get_competencies_alignment()) {",
          "305:                     $json['alignment'] = $competencies;",
          "",
          "[Added Lines]",
          "304:                 if ($alignments = $this->get_alignments()) {",
          "305:                     $json['alignment'] = $alignments;",
          "",
          "---------------"
        ],
        "badges/classes/external.php||badges/classes/external.php": [
          "File: badges/classes/external.php -> badges/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:             $badgeinstance = new badge($badge->id);",
          "152:             $endorsement = $badgeinstance->get_endorsement();",
          "154:             $relatedbadges = $badgeinstance->get_related_badges();",
          "156:             if (!$canconfiguredetails) {",
          "164:                     }",
          "165:                 }",
          "",
          "[Removed Lines]",
          "153:             $competencies = $badgeinstance->get_alignment();",
          "159:                 if (!empty($competencies)) {",
          "160:                     foreach ($competencies as $competency) {",
          "161:                         unset($competency->targetdescription);",
          "162:                         unset($competency->targetframework);",
          "163:                         unset($competency->targetcode);",
          "",
          "[Added Lines]",
          "153:             $alignments = $badgeinstance->get_alignments();",
          "159:                 if (!empty($alignments)) {",
          "160:                     foreach ($alignments as $alignment) {",
          "161:                         unset($alignment->targetdescription);",
          "162:                         unset($alignment->targetframework);",
          "163:                         unset($alignment->targetcode);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:             $related = array(",
          "177:                 'context' => $context,",
          "178:                 'endorsement' => $endorsement ? $endorsement : null,",
          "180:                 'relatedbadges' => $relatedbadges,",
          "181:             );",
          "",
          "[Removed Lines]",
          "179:                 'competencies' => $competencies,",
          "",
          "[Added Lines]",
          "179:                 'alignments' => $alignments,",
          "",
          "---------------"
        ],
        "badges/classes/external/competency_exporter.php||badges/classes/external/alignment_exporter.php": [
          "File: badges/classes/external/competency_exporter.php -> badges/classes/external/alignment_exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: use core\\external\\exporter;",
          "",
          "[Removed Lines]",
          "38: class competency_exporter extends exporter {",
          "",
          "[Added Lines]",
          "38: class alignment_exporter extends exporter {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:         return [",
          "47:             'id' => [",
          "48:                 'type' => PARAM_INT,",
          "50:             ],",
          "51:             'badgeid' => [",
          "52:                 'type' => PARAM_INT,",
          "",
          "[Removed Lines]",
          "49:                 'description' => 'Competency id',",
          "",
          "[Added Lines]",
          "49:                 'description' => 'Alignment id',",
          "",
          "---------------"
        ],
        "badges/classes/external/user_badge_exporter.php||badges/classes/external/user_badge_exporter.php": [
          "File: badges/classes/external/user_badge_exporter.php -> badges/classes/external/user_badge_exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: use renderer_base;",
          "31: use moodle_url;",
          "32: use core_badges\\external\\endorsement_exporter;",
          "34: use core_badges\\external\\related_info_exporter;",
          "",
          "[Removed Lines]",
          "33: use core_badges\\external\\competency_exporter;",
          "",
          "[Added Lines]",
          "33: use core_badges\\external\\alignment_exporter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:         return array(",
          "235:             'context' => 'context',",
          "236:             'endorsement' => 'stdClass?',",
          "238:             'relatedbadges' => 'stdClass[]',",
          "239:         );",
          "240:     }",
          "",
          "[Removed Lines]",
          "237:             'competencies' => 'stdClass[]',",
          "",
          "[Added Lines]",
          "237:             'alignments' => 'stdClass[]',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255:                 'description' => 'Badge endorsement',",
          "256:                 'optional' => true,",
          "257:             ],",
          "261:                 'multiple' => true,",
          "262:             ],",
          "263:             'relatedbadges' => [",
          "",
          "[Removed Lines]",
          "258:             'competencies' => [",
          "259:                 'type' => competency_exporter::read_properties_definition(),",
          "260:                 'description' => 'Badge competencies (alignment)',",
          "",
          "[Added Lines]",
          "258:             'alignments' => [",
          "259:                 'type' => alignment_exporter::read_properties_definition(),",
          "260:                 'description' => 'Badge alignments',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "277:     protected function get_other_values(renderer_base $output) {",
          "278:         $context = $this->related['context'];",
          "279:         $endorsement = $this->related['endorsement'];",
          "281:         $relatedbadges = $this->related['relatedbadges'];",
          "283:         $values = array(",
          "284:             'badgeurl' => moodle_url::make_webservice_pluginfile_url($context->id, 'badges', 'badgeimage', $this->data->id, '/',",
          "285:                 'f1')->out(false),",
          "287:             'relatedbadges' => array(),",
          "288:         );",
          "",
          "[Removed Lines]",
          "280:         $competencies = $this->related['competencies'];",
          "286:             'competencies' => array(),",
          "",
          "[Added Lines]",
          "280:         $alignments = $this->related['alignments'];",
          "286:             'alignments' => array(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "292:             $values['endorsement'] = $endorsementexporter->export($output);",
          "293:         }",
          "299:             }",
          "300:         }",
          "",
          "[Removed Lines]",
          "295:         if (!empty($competencies)) {",
          "296:             foreach ($competencies as $competency) {",
          "297:                 $competencyexporter = new competency_exporter($competency, array('context' => $context));",
          "298:                 $values['competencies'][] = $competencyexporter->export($output);",
          "",
          "[Added Lines]",
          "295:         if (!empty($alignments)) {",
          "296:             foreach ($alignments as $alignment) {",
          "297:                 $alignmentexporter = new alignment_exporter($alignment, array('context' => $context));",
          "298:                 $values['alignments'][] = $alignmentexporter->export($output);",
          "",
          "---------------"
        ],
        "badges/renderer.php||badges/renderer.php": [
          "File: badges/renderer.php -> badges/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:         $display .= self::print_badge_endorsement($badge);",
          "224:         $display .= self::print_badge_related($badge);",
          "227:         return html_writer::div($display, null, array('id' => 'badge-overview'));",
          "228:     }",
          "",
          "[Removed Lines]",
          "225:         $display .= self::print_badge_competencies($badge);",
          "",
          "[Added Lines]",
          "225:         $display .= self::print_badge_alignments($badge);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "431:             $output .= html_writer::alist($items, array(), 'ul');",
          "432:         }",
          "436:             $output .= $this->heading(get_string('alignment', 'badges'), 3);",
          "437:             $items = array();",
          "440:             }",
          "441:             $output .= html_writer::alist($items, array(), 'ul');",
          "442:         }",
          "",
          "[Removed Lines]",
          "434:         $competencies = $badge->get_alignment();",
          "435:         if (!empty($competencies)) {",
          "438:             foreach ($competencies as $competency) {",
          "439:                 $items[] = html_writer::link($competency->targeturl, $competency->targetname, array('target' => '_blank'));",
          "",
          "[Added Lines]",
          "434:         $alignments = $badge->get_alignments();",
          "435:         if (!empty($alignments)) {",
          "438:             foreach ($alignments as $alignment) {",
          "439:                 $items[] = html_writer::link($alignment->targeturl, $alignment->targetname, array('target' => '_blank'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "748:         }",
          "750:         if (has_capability('moodle/badges:configuredetails', $context)) {",
          "753:             $row[] = new tabobject('balignment',",
          "756:             );",
          "757:         }",
          "",
          "[Removed Lines]",
          "751:             $competencies = $DB->count_records_sql(\"SELECT COUNT(bc.id)",
          "752:                       FROM {badge_competencies} bc WHERE bc.badgeid = :badgeid\", array('badgeid' => $badgeid));",
          "754:                 new moodle_url('/badges/competency.php', array('id' => $badgeid)),",
          "755:                 get_string('balignment', 'badges', $competencies)",
          "",
          "[Added Lines]",
          "751:             $alignments = $DB->count_records_sql(\"SELECT COUNT(bc.id)",
          "752:                       FROM {badge_alignment} bc WHERE bc.badgeid = :badgeid\", array('badgeid' => $badgeid));",
          "754:                 new moodle_url('/badges/alignment.php', array('id' => $badgeid)),",
          "755:                 get_string('balignment', 'badges', $alignments)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1101:     }",
          "1110:         $output = '';",
          "1111:         $output .= $this->heading(get_string('alignment', 'badges'), 3);",
          "1114:             $items = array();",
          "1118:                 );",
          "1120:             }",
          "1121:             $output .= html_writer::alist($items, array(), 'ul');",
          "1122:         } else {",
          "",
          "[Removed Lines]",
          "1109:     protected function print_badge_competencies(badge $badge) {",
          "1112:         $competencies = $badge->get_alignment();",
          "1113:         if (!empty($competencies)) {",
          "1115:             foreach ($competencies as $competency) {",
          "1116:                 $urlaligment = new moodle_url('competency.php',",
          "1117:                     array('id' => $badge->id, 'alignmentid' => $competency->id)",
          "1119:                 $items[] = html_writer::link($urlaligment, $competency->targetname, array('target' => '_blank'));",
          "",
          "[Added Lines]",
          "1109:     protected function print_badge_alignments(badge $badge) {",
          "1112:         $alignments = $badge->get_alignments();",
          "1113:         if (!empty($alignments)) {",
          "1115:             foreach ($alignments as $alignment) {",
          "1116:                 $urlaligment = new moodle_url('alignment.php',",
          "1117:                     array('id' => $badge->id, 'alignmentid' => $alignment->id)",
          "1119:                 $items[] = html_writer::link($urlaligment, $alignment->targetname, array('target' => '_blank'));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1186:     }",
          "1197:         $htmlpagingbar = $this->render($paging);",
          "1198:         $table = new html_table();",
          "1199:         $table->attributes['class'] = 'generaltable boxaligncenter boxwidthwide';",
          "1200:         $table->head = array('Name', 'URL', '');",
          "1204:                 array(",
          "1205:                     'id' => $currentbadge->id,",
          "1206:                     'alignmentid' => $item->id,",
          "",
          "[Removed Lines]",
          "1194:     protected function render_badge_competencies_alignment(badge_competencies_alignment $alignment) {",
          "1195:         $currentbadge = new badge($alignment->currentbadgeid);",
          "1196:         $paging = new paging_bar($alignment->totalcount, $alignment->page, $alignment->perpage, $this->page->url, 'page');",
          "1202:         foreach ($alignment->alignments as $item) {",
          "1203:             $urlaligment = new moodle_url('competency.php',",
          "",
          "[Added Lines]",
          "1194:     protected function render_badge_alignments(badge_alignments $alignments) {",
          "1195:         $currentbadge = new badge($alignments->currentbadgeid);",
          "1196:         $paging = new paging_bar($alignments->totalcount, $alignments->page, $alignments->perpage, $this->page->url, 'page');",
          "1202:         foreach ($alignments->alignments as $item) {",
          "1203:             $urlaligment = new moodle_url('alignment.php',",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1212:             );",
          "1213:             if (!$currentbadge->is_active() && !$currentbadge->is_locked()) {",
          "1214:                 $delete = $this->output->action_icon(",
          "1216:                         array(",
          "1217:                             'id' => $currentbadge->id,",
          "1218:                             'alignmentid' => $item->id,",
          "",
          "[Removed Lines]",
          "1215:                     new moodle_url('competency_action.php',",
          "",
          "[Added Lines]",
          "1215:                     new moodle_url('alignment_action.php',",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1220:                         )",
          "1221:                     ), new pix_icon('t/delete', get_string('delete')));",
          "1222:                 $edit = $this->output->action_icon(",
          "1224:                         array(",
          "1225:                             'id' => $currentbadge->id,",
          "1226:                             'alignmentid' => $item->id,",
          "",
          "[Removed Lines]",
          "1223:                     new moodle_url('competency.php',",
          "",
          "[Added Lines]",
          "1223:                     new moodle_url('alignment.php',",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1480: }",
          "1490: {",
          "1492:     public $sort = 'name';",
          "",
          "[Removed Lines]",
          "1489: class badge_competencies_alignment implements renderable",
          "",
          "[Added Lines]",
          "1489: class badge_alignments implements renderable",
          "",
          "---------------"
        ],
        "badges/tests/badgeslib_test.php||badges/tests/badgeslib_test.php": [
          "File: badges/tests/badgeslib_test.php -> badges/tests/badgeslib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:         $relatebadge->relatedbadgeid = $clonedid;",
          "120:         $relatebadge->relatedid = $DB->insert_record('badge_related', $relatebadge, true);",
          "132:         $this->assertion = new stdClass();",
          "133:         $this->assertion->badge = '{\"uid\":\"%s\",\"recipient\":{\"identity\":\"%s\",\"type\":\"email\",\"hashed\":true,\"salt\":\"%s\"},\"badge\":\"%s\",\"verify\":{\"type\":\"hosted\",\"url\":\"%s\"},\"issuedOn\":\"%d\",\"evidence\":\"%s\"}';",
          "",
          "[Removed Lines]",
          "123:         $competency = new stdClass();",
          "124:         $competency->badgeid = $this->coursebadge;",
          "125:         $competency->targetname = 'CCSS.ELA-Literacy.RST.11-12.3';",
          "126:         $competency->targeturl = 'http://www.corestandards.org/ELA-Literacy/RST/11-12/3';",
          "127:         $competency->targetdescription = 'Test target description';",
          "128:         $competency->targetframework = 'CCSS.RST.11-12.3';",
          "129:         $competency->targetcode = 'CCSS.RST.11-12.3';",
          "130:         $DB->insert_record('badge_competencies', $competency, true);",
          "",
          "[Added Lines]",
          "123:         $alignment = new stdClass();",
          "124:         $alignment->badgeid = $this->coursebadge;",
          "125:         $alignment->targetname = 'CCSS.ELA-Literacy.RST.11-12.3';",
          "126:         $alignment->targeturl = 'http://www.corestandards.org/ELA-Literacy/RST/11-12/3';",
          "127:         $alignment->targetdescription = 'Test target description';",
          "128:         $alignment->targetframework = 'CCSS.RST.11-12.3';",
          "129:         $alignment->targetcode = 'CCSS.RST.11-12.3';",
          "130:         $DB->insert_record('badge_alignment', $alignment, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "797:     }",
          "803:         $badge = new badge($this->badgeid);",
          "836:     }",
          "837: }",
          "",
          "[Removed Lines]",
          "802:     public function test_competencies_alignment() {",
          "806:         $competency1 = new stdClass();",
          "807:         $competency1->badgeid = $this->badgeid;",
          "808:         $competency1->targetname = 'CCSS.ELA-Literacy.RST.11-12.3';",
          "809:         $competency1->targeturl = 'http://www.corestandards.org/ELA-Literacy/RST/11-12/3';",
          "810:         $competency1->targetdescription = 'Test target description';",
          "811:         $competency1->targetframework = 'CCSS.RST.11-12.3';",
          "812:         $competency1->targetcode = 'CCSS.RST.11-12.3';",
          "813:         $competency2 = clone $competency1;",
          "814:         $newid1 = $badge->save_alignment($competency1);",
          "815:         $newid2 = $badge->save_alignment($competency2);",
          "816:         $competencies1 = $badge->get_alignment();",
          "817:         $this->assertCount(2, $competencies1);",
          "819:         $this->assertEquals($competency1->badgeid, $competencies1[$newid1]->badgeid);",
          "820:         $this->assertEquals($competency1->targetname, $competencies1[$newid1]->targetname);",
          "821:         $this->assertEquals($competency1->targeturl, $competencies1[$newid1]->targeturl);",
          "822:         $this->assertEquals($competency1->targetdescription, $competencies1[$newid1]->targetdescription);",
          "823:         $this->assertEquals($competency1->targetframework, $competencies1[$newid1]->targetframework);",
          "824:         $this->assertEquals($competency1->targetcode, $competencies1[$newid1]->targetcode);",
          "827:         $competencies1[$newid1]->targetname = 'CCSS.ELA-Literacy.RST.11-12.3 update';",
          "828:         $badge->save_alignment($competencies1[$newid1], $competencies1[$newid1]->id);",
          "829:         $competencies2 = $badge->get_alignment();",
          "830:         $this->assertEquals($competencies1[$newid1]->id, $competencies2[$newid1]->id);",
          "831:         $this->assertEquals($competencies1[$newid1]->targetname, $competencies2[$newid1]->targetname);",
          "834:         $badge->delete_alignment($competencies1[$newid2]->id);",
          "835:         $this->assertCount(1, $badge->get_alignment());",
          "",
          "[Added Lines]",
          "802:     public function test_alignments() {",
          "806:         $alignment1 = new stdClass();",
          "807:         $alignment1->badgeid = $this->badgeid;",
          "808:         $alignment1->targetname = 'CCSS.ELA-Literacy.RST.11-12.3';",
          "809:         $alignment1->targeturl = 'http://www.corestandards.org/ELA-Literacy/RST/11-12/3';",
          "810:         $alignment1->targetdescription = 'Test target description';",
          "811:         $alignment1->targetframework = 'CCSS.RST.11-12.3';",
          "812:         $alignment1->targetcode = 'CCSS.RST.11-12.3';",
          "813:         $alignment2 = clone $alignment1;",
          "814:         $newid1 = $badge->save_alignment($alignment1);",
          "815:         $newid2 = $badge->save_alignment($alignment2);",
          "816:         $alignments1 = $badge->get_alignments();",
          "817:         $this->assertCount(2, $alignments1);",
          "819:         $this->assertEquals($alignment1->badgeid, $alignments1[$newid1]->badgeid);",
          "820:         $this->assertEquals($alignment1->targetname, $alignments1[$newid1]->targetname);",
          "821:         $this->assertEquals($alignment1->targeturl, $alignments1[$newid1]->targeturl);",
          "822:         $this->assertEquals($alignment1->targetdescription, $alignments1[$newid1]->targetdescription);",
          "823:         $this->assertEquals($alignment1->targetframework, $alignments1[$newid1]->targetframework);",
          "824:         $this->assertEquals($alignment1->targetcode, $alignments1[$newid1]->targetcode);",
          "827:         $alignments1[$newid1]->targetname = 'CCSS.ELA-Literacy.RST.11-12.3 update';",
          "828:         $badge->save_alignment($alignments1[$newid1], $alignments1[$newid1]->id);",
          "829:         $alignments2 = $badge->get_alignments();",
          "830:         $this->assertEquals($alignments1[$newid1]->id, $alignments2[$newid1]->id);",
          "831:         $this->assertEquals($alignments1[$newid1]->targetname, $alignments2[$newid1]->targetname);",
          "834:         $badge->delete_alignment($alignments1[$newid2]->id);",
          "835:         $this->assertCount(1, $badge->get_alignments());",
          "",
          "---------------"
        ],
        "badges/tests/behat/add_badge.feature||badges/tests/behat/add_badge.feature": [
          "File: badges/tests/behat/add_badge.feature -> badges/tests/behat/add_badge.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     And I should see \"Test badge with 'apostrophe' and other friends (&@#)\"",
          "47:     And I should see \"Endorsement\"",
          "48:     And I should see \"Related badges (0)\"",
          "50:     And I should not see \"Create badge\"",
          "51:     And I follow \"Manage badges\"",
          "52:     And I should see \"Number of badges available: 1\"",
          "",
          "[Removed Lines]",
          "49:     And I should see \"Competencies (0)\"",
          "",
          "[Added Lines]",
          "49:     And I should see \"External alignments (0)\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:     Then I should see \"Changes saved\"",
          "120:   @javascript @_file_upload",
          "122:     Given I navigate to \"Badges > Add a new badge\" in site administration",
          "123:     And I set the following fields to these values:",
          "124:       | Name | Test Badge |",
          "",
          "[Removed Lines]",
          "121:   Scenario: Competencies alignment for Badge",
          "",
          "[Added Lines]",
          "121:   Scenario: External alignments for Badge",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:     When I press \"Create badge\"",
          "134:     Then I should see \"Test Badge\"",
          "135:     And I should see \"Endorsement\"",
          "142:     And I set the following fields to these values:",
          "146:     When I press \"Save changes\"",
          "149:   @javascript @_file_upload",
          "150:   Scenario: Add a badge from Site badges section",
          "",
          "[Removed Lines]",
          "136:     And I follow \"Competencies (0)\"",
          "137:     And I should see \"This badge does not have any competencies specified.\"",
          "138:     And I press \"Add competency\"",
          "139:     And I follow \"Competency\"",
          "140:     And I wait until the page is ready",
          "141:     And I follow \"Competency\"",
          "143:       | Competency name | Test Badge Competencies |",
          "144:       | URL | https://competencies.example.com |",
          "145:       | Description | Test Badge Competencies description |",
          "147:     And I should see \"Competencies (1)\"",
          "",
          "[Added Lines]",
          "136:     And I follow \"External alignments (0)\"",
          "137:     And I should see \"This badge does not have any external alignments specified.\"",
          "138:     And I press \"Add external alignment\"",
          "140:       | External alignment name | Test Badge Alignments |",
          "141:       | URL | https://alignments.example.com |",
          "142:       | Description | Test Badge Alignments description |",
          "144:     And I should see \"External alignments (1)\"",
          "",
          "---------------"
        ],
        "badges/tests/external_test.php||badges/tests/external_test.php": [
          "File: badges/tests/external_test.php -> badges/tests/external_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:         $endorsement->dateissued = $now;",
          "111:         $badge->save_endorsement($endorsement);",
          "131:         $badge->id = null;",
          "",
          "[Removed Lines]",
          "114:         $competency = new stdClass();",
          "115:         $competency->badgeid = $badgeid;",
          "116:         $competency->targetname = 'Competency 1';",
          "117:         $competency->targeturl = 'http://c1-target-url.domain.co.nz';",
          "118:         $competency->targetdescription = 'C1 target description';",
          "119:         $competency->targetframework = 'C1 framework';",
          "120:         $competency->targetcode = 'C1 code';",
          "121:         $badge->save_alignment($competency);",
          "123:         $competency->targetname = 'Competency 2';",
          "124:         $competency->targeturl = 'http://c2-target-url.domain.co.nz';",
          "125:         $competency->targetdescription = 'C2 target description';",
          "126:         $competency->targetframework = 'C2 framework';",
          "127:         $competency->targetcode = 'C2 code';",
          "128:         $badge->save_alignment($competency);",
          "",
          "[Added Lines]",
          "114:         $alignment = new stdClass();",
          "115:         $alignment->badgeid = $badgeid;",
          "116:         $alignment->targetname = 'Alignment 1';",
          "117:         $alignment->targeturl = 'http://a1-target-url.domain.co.nz';",
          "118:         $alignment->targetdescription = 'A1 target description';",
          "119:         $alignment->targetframework = 'A1 framework';",
          "120:         $alignment->targetcode = 'A1 code';",
          "121:         $badge->save_alignment($alignment);",
          "123:         $alignment->targetname = 'Alignment 2';",
          "124:         $alignment->targeturl = 'http://a2-target-url.domain.co.nz';",
          "125:         $alignment->targetdescription = 'A2 target description';",
          "126:         $alignment->targetframework = 'A2 framework';",
          "127:         $alignment->targetcode = 'A2 code';",
          "128:         $badge->save_alignment($alignment);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:             $badge->badgeurl = moodle_url::make_webservice_pluginfile_url($context->id, 'badges', 'badgeimage', $badge->id, '/',",
          "163:                                                                             'f1')->out(false);",
          "166:             $badgeinstance = new badge($badge->id);",
          "167:             $endorsement = $badgeinstance->get_endorsement();",
          "169:             $relatedbadges = $badgeinstance->get_related_badges();",
          "171:             $badge->relatedbadges = array();",
          "173:             if ($endorsement) {",
          "174:                 $badge->endorsement = (array) $endorsement;",
          "175:             }",
          "185:                 }",
          "186:             }",
          "",
          "[Removed Lines]",
          "168:             $competencies = $badgeinstance->get_alignment();",
          "170:             $badge->competencies = array();",
          "177:             if (!empty($competencies)) {",
          "178:                 foreach ($competencies as $competency) {",
          "180:                     unset($competency->targetdescription);",
          "181:                     unset($competency->targetframework);",
          "182:                     unset($competency->targetcode);",
          "184:                     $badge->competencies[] = (array) $competency;",
          "",
          "[Added Lines]",
          "168:             $alignments = $badgeinstance->get_alignments();",
          "170:             $badge->alignments = array();",
          "177:             if (!empty($alignments)) {",
          "178:                 foreach ($alignments as $alignment) {",
          "180:                     unset($alignment->targetdescription);",
          "181:                     unset($alignment->targetframework);",
          "182:                     unset($alignment->targetcode);",
          "184:                     $badge->alignments[] = (array) $alignment;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:             if (isset($badge['type']) and $badge['type'] == BADGE_TYPE_COURSE) {",
          "232:                 $this->assertTrue(isset($badge['message']));",
          "237:                 }",
          "239:                 foreach ($badge['relatedbadges'] as $relatedbadge) {",
          "",
          "[Removed Lines]",
          "235:                 foreach ($badge['competencies'] as $competency) {",
          "236:                     $this->assertTrue(isset($competency['targetdescription']));",
          "",
          "[Added Lines]",
          "235:                 foreach ($badge['alignments'] as $alignment) {",
          "236:                     $this->assertTrue(isset($alignment['targetdescription']));",
          "",
          "---------------"
        ],
        "lib/badgeslib.php||lib/badgeslib.php": [
          "File: lib/badgeslib.php -> lib/badgeslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "722:             'relatedbadgeid' => $this->id",
          "723:         );",
          "724:         $DB->delete_records_select('badge_related', $relatedsql, $relatedparams);",
          "728:         $DB->delete_records('badge', array('id' => $this->id));",
          "",
          "[Removed Lines]",
          "725:         $DB->delete_records('badge_competencies', array('badgeid' => $this->id));",
          "",
          "[Added Lines]",
          "725:         $DB->delete_records('badge_alignment', array('badgeid' => $this->id));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "804:     }",
          "813:     public function save_alignment($alignment, $alignmentid = 0) {",
          "814:         global $DB;",
          "817:         if ($record) {",
          "818:             $alignment->id = $alignmentid;",
          "820:         } else {",
          "822:         }",
          "823:     }",
          "831:     public function delete_alignment($alignmentid) {",
          "832:         global $DB;",
          "834:     }",
          "841:     public function get_alignment() {",
          "842:         global $DB;",
          "844:     }",
          "",
          "[Removed Lines]",
          "816:         $record = $DB->record_exists('badge_competencies', array('id' => $alignmentid));",
          "819:             return $DB->update_record('badge_competencies', $alignment);",
          "821:             return $DB->insert_record('badge_competencies', $alignment, true);",
          "833:         return $DB->delete_records('badge_competencies', array('badgeid' => $this->id, 'id' => $alignmentid));",
          "843:         return $DB->get_records('badge_competencies', array('badgeid' => $this->id));",
          "",
          "[Added Lines]",
          "816:         $record = $DB->record_exists('badge_alignment', array('id' => $alignmentid));",
          "819:             return $DB->update_record('badge_alignment', $alignment);",
          "821:             return $DB->insert_record('badge_alignment', $alignment, true);",
          "833:         return $DB->delete_records('badge_alignment', array('badgeid' => $this->id, 'id' => $alignmentid));",
          "843:         return $DB->get_records('badge_alignment', array('badgeid' => $this->id));",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2923:         upgrade_main_savepoint(true, 2019032200.02);",
          "2924:     }",
          "2926:     return true;",
          "2927: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2926:     if ($oldversion < 2019032900.00) {",
          "2929:         $table = new xmldb_table('badge_competencies');",
          "2932:         if ($dbman->table_exists($table)) {",
          "2933:             $key = new xmldb_key('competenciesbadge', XMLDB_KEY_FOREIGN, ['badgeid'], 'badge', ['id']);",
          "2936:             $dbman->drop_key($table, $key);",
          "2938:             $key = new xmldb_key('alignmentsbadge', XMLDB_KEY_FOREIGN, ['badgeid'], 'badge', ['id']);",
          "2941:             $dbman->add_key($table, $key);",
          "2944:             $dbman->rename_table($table, 'badge_alignment');",
          "2945:         }",
          "2947:         upgrade_main_savepoint(true, 2019032900.00);",
          "2948:     }",
          "",
          "---------------"
        ],
        "lib/setuplib.php||lib/setuplib.php": [
          "File: lib/setuplib.php -> lib/setuplib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1408: function is_major_upgrade_required() {",
          "1409:     global $CFG;",
          "1412:     $required = empty($CFG->version);",
          "1413:     $required = $required || (float)$CFG->version < $lastmajordbchanges;",
          "",
          "[Removed Lines]",
          "1410:     $lastmajordbchanges = 2019011801.00;",
          "",
          "[Added Lines]",
          "1410:     $lastmajordbchanges = 2019032900.00;",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019032800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019032900.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bebef891741c12ccd71aadae1e689a776fb15d03",
      "candidate_info": {
        "commit_hash": "bebef891741c12ccd71aadae1e689a776fb15d03",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/bebef891741c12ccd71aadae1e689a776fb15d03",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.6dev+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '36';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018110100.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev+ (Build: 20181031)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018110300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev+ (Build: 20181103)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}