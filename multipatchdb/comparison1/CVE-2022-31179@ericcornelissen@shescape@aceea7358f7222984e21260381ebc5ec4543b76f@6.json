{
  "cve_id": "CVE-2022-31179",
  "cve_desc": "Shescape is a simple shell escape package for JavaScript. Versions prior to 1.5.8 were found to be subject to code injection on windows. This impacts users that use Shescape (any API function) to escape arguments for cmd.exe on Windows An attacker can omit all arguments following their input by including a line feed character (`'\\n'`) in the payload. This bug has been patched in [v1.5.8] which you can upgrade to now. No further changes are required. Alternatively, line feed characters (`'\\n'`) can be stripped out manually or the user input can be made the last argument (this only limits the impact).",
  "repo": "ericcornelissen/shescape",
  "patch_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
  "patch_info": {
    "commit_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
    "repo": "ericcornelissen/shescape",
    "commit_url": "https://github.com/ericcornelissen/shescape/commit/aceea7358f7222984e21260381ebc5ec4543b76f",
    "files": [
      "CHANGELOG.md",
      "src/unix.js",
      "src/win.js",
      "test/fixtures/unix.cjs",
      "test/fixtures/win.cjs",
      "test/fuzz/_common.cjs",
      "test/fuzz/corpus/036053b103374e82177446b4e083ccb6a22da06e0375582d622632775c8a938a",
      "test/fuzz/corpus/31ed7643aba69fe2d776af3aee587bb7899165af5ed3846c6f70327f2eec4713",
      "test/fuzz/corpus/7ef6c55f814adceff17a05c032ba6ec89483e37addcfd96bd13281f5de6716fa",
      "test/fuzz/corpus/dece2a606846120af17949c2d758b7df475449689d043a04a1ba63953326e5bb",
      "test/fuzz/corpus/f1d97ce94d0c9dd109dc27538786781da634bbed1df58877cac3c44e4344f3dd",
      "test/fuzz/corpus/f28febc41472c437122c2a44b66ccf7dcefdd19876fe4d9370ece44b5b2deb13",
      "test/fuzz/corpus/faf3c25ec7c017c2cc21a5af0f5584557d8a0c7340c68249076a86a2c4ce74fb",
      "test/fuzz/exec.test.cjs",
      "test/unit/_macros.js"
    ],
    "message": "Improve testing and escaping of newlines (#332)\n\n* Don't ignore newlines when fuzzing\n\nUpdate the fuzzing logic to not ignore newline characters anymore. For\nBash, Dash, PowerShell, and Zsh this is reflected by the removal of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nfrom the `exec.test.cjs` fuzz target. For CMD it is (additionally) the\nremoval of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nin the `_common.cjs` fuzz logic.\n\nThe inclusion of newlines in input arguments required some changes to\nthe `getExpectedOutput` function to account for the individual shell's\nhandling of these characters, typically removing them from the start and\nend of the input. (Note: not all changes to `getExpectedOutput` are due\nto this.)\n\n* Update the fuzz corpus\n\n- `31ed764`: contains a trailing forward slash ('\\\\') character that\n  was echod as a double quote ('\"') character by CMD due to carriage\n  return ('\\r') characters not being escaped.\n- `dece2a6`: contains a line feed ('\\n') character and a tilde where the\n  tilde should be escaped but wasn't for Bash.\n- `f28febc`: contains a carriage return ('\\r') character and a tilde\n  where the tilde should be escaped but wasn't for Bash.\n- `faf3c25`: contains a line feed ('\\n') character inside of curly\n  braces where the opening curly bracket should be escaped but wasn't\n  for bash.\n\nThe remaining new items in the fuzz corpus (`036053b`, `71ef6c5`, and\n`f1d97ce`) we're added based on fuzzing with whitespace for PowerShell.\n\n* Update macro for executing fixtures\n\nUpdate the macro for executing fixtures to properly display all the\nwhitespace characters as distinct characters. This is required because\notherwise test names will be considered duplicates.\n\nWhitespace characters with common shorthands are display using that\nshorthand (e.g. '\\n' for line feed). Other characters will be displayed\nby their unicode index (similar to the null character). This has been\nnormalized to the `\\u{hhhh}` notation for consistency where the curly\nbraces are included to improve readability of the test title (clearly\ndemarcating the end of the unicode index from any characters that might\nfollow it).\n\n* Escape newlines for PowerShell\n\nFor PowerShell only line feed ('\\n') and carriage return ('\\r')\ncharacters need to be escaped, and only when `interpolation` is `true`.\nThis is supported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that all character except\nfor line feed ('\\n'), carriage return ('\\r'), and '\\uFEFF' are converted\nto a normal space by PowerShell so it isn't necessary to escape them.\nFor '\\uFEFF', it was found that it is interpreted as is and doesn't\ncause any problems.\n\nThe test fixtures for PowerShell were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for CMD\n\nFor CMD only line feed ('\\n') and carriage return ('\\r') characters need\nto be escaped, but those need to be escaped always. This is supported by\nmanual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n')\ncharacters cause CMD to omit the remaining input;  carriage return\n('\\r') could change the interpretation of certain characters; tab ('\\t')\ncharacters are converted to normal spaces; and all other whitespace\ncharacters are interpreted as is.\n\nThe test fixtures for CMD were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for Bash, Dash, and Zsh\n\nFor the supported Unix shells only the line feed ('\\n') character needs\nto be escaped, and only when `interpolation` is `true`. This is\nsupported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n') and\ncharacters cause the whatever follows it to be interpreted as a new\ncommand; tab ('\\t') characters are converted to normal spaces; and all\nother whitespace characters are interpreted as is.\n\nThe test fixtures for Bash, Dash, and Zsh were updated to include\nexamples where whitespace characters need or need not be escaped.\n\n* Improve escaping of tilde for Bash\n\nFor Bash escape the tilde ('~') character if a line terminating\ncharacter ('\\n', '\\r', '\\u2028', or '\\u2029') appears between and\n\"opening\" equals sign ('=') and a \"closing\" colon-tilde (\":~\"). This\ncase was missed previously because the regular expression `/./` does not\nindeed match all characters, but only those that are not line\nterminating characters (even with the multiline flag). From [1]:\n\n> Note that the m multiline flag doesn't change the dot behavior. So to\n> match a pattern across multiple lines, the character class `[^]` can\n> be used - it will match any character including newlines.\n\nThe test fixtures for Bash were updated to include examples where the\ntilde character should have been escaped but wasn't.\n\n* Improve escaping of curly braces for Bash\n\nFor Bash escape the opening curly brace ('}') character if a line\nterminating character ('\\n', '\\r', '\\u2028', or '\\u2029') appears\nbetween and opening curly brace ('{') and closing curly brace ('}').\nAgain, this case was missed previously because the regular expression\n`/./` does match _all_ characters - instead `/[^]/` is used.\n\nThe test fixtures for Bash were updated to include examples where the\nopening curly brace should have been escaped but wasn't.\n\n* Update CHANGELOG\n\nInclude the fixed bugs in the CHANGELOG.\n\n---\n\n1. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide-\n   /Regular_Expressions/Character_Classes\n2. Sample of a script used for manual testing:\n\n    import { execSync } from \"node:child_process\";\n    import assert from \"node:assert\";\n    import * as shescape from \"shescape\";\n\n    const options = {\n      shell: \"powershell.exe\", // <-- set shell to test here\n      interpolation: true,     // <-- change depending on test\n      encoding: \"utf8\",\n    };\n\n    const whitespaceChars = [\n      \"\\u0009\", \"\\u000A\", \"\\u000B\", \"\\u000C\", \"\\u000D\", \" \", \"\\u0085\",\n      \"\\u00A0\", \"\\u1680\", \"\\u2000\", \"\\u2001\", \"\\u2002\", \"\\u2003\",\n      \"\\u2004\", \"\\u2005\", \"\\u2006\", \"\\u2007\", \"\\u2008\", \"\\u2009\",\n      \"\\u200A\", \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\",\n      \"\\uFEFF\",\n    ];\n\n    for (const char of whitespaceChars) {\n      const userInput = `foo${char}bar`;\n\n      const escapeOutput = execSync(\n        `node test/_echo.js ${shescape.escape(userInput, options)}`,\n        options\n      );\n      // Use this if you don't expect the escaped output to equal the\n      // quote output.\n      //assert.strictEqual(escapeOutput, \"some string\");\n\n      const quoteOutput = execSync(\n        `node test/_echo.js ${shescape.quote(userInput, options)}`,\n        options\n      );\n      assert.strictEqual(escapeOutput, quoteOutput);\n    }",
    "before_after_code_files": [
      "src/unix.js||src/unix.js",
      "src/win.js||src/win.js",
      "test/fixtures/unix.cjs||test/fixtures/unix.cjs",
      "test/fixtures/win.cjs||test/fixtures/win.cjs",
      "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
      "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs",
      "test/unit/_macros.js||test/unit/_macros.js"
    ]
  },
  "patch_diff": {
    "src/unix.js||src/unix.js": [
      "File: src/unix.js -> src/unix.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:   if (interpolation) {",
      "47:     result = result",
      "48:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "49:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "50:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "51:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "52:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "53:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "56:   } else if (quoted) {",
      "57:     result = result.replace(/'/g, `'\\\\''`);",
      "58:   }",
      "",
      "[Removed Lines]",
      "54:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\")",
      "55:       .replace(/(?<=\\=(?:.*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "[Added Lines]",
      "49:       .replace(/\\n/g, \" \")",
      "55:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\")",
      "56:       .replace(/(?<=\\=(?:[^]*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:   if (interpolation) {",
      "75:     result = result",
      "76:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "77:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "78:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "79:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "80:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "81:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "83:   } else if (quoted) {",
      "84:     result = result.replace(/'/g, `'\\\\''`);",
      "85:   }",
      "",
      "[Removed Lines]",
      "82:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\");",
      "",
      "[Added Lines]",
      "78:       .replace(/\\n/g, \" \")",
      "84:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   if (interpolation) {",
      "102:     result = result",
      "103:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "104:       .replace(/(^|\\s)(~|#|=)/g, \"$1\\\\$2\")",
      "105:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "106:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:       .replace(/\\n/g, \" \")",
      "",
      "---------------"
    ],
    "src/win.js||src/win.js": [
      "File: src/win.js -> src/win.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: function escapeArgCmd(arg, interpolation, quoted) {",
      "38:   if (interpolation) {",
      "39:     result = result",
      "",
      "[Removed Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\");",
      "",
      "[Added Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\").replace(/\\n|\\r/g, \" \");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:   if (interpolation) {",
      "66:     result = result",
      "67:       .replace(/(^|\\s)((?:\\*|[1-6])?)(>)/g, \"$1$2`$3\")",
      "68:       .replace(/(^|\\s)(<|@|#|-|\\:|\\])/g, \"$1`$2\")",
      "69:       .replace(/(,|\\;|\\&|\\|)/g, \"`$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:       .replace(/\\n|\\r/g, \" \")",
      "",
      "---------------"
    ],
    "test/fixtures/unix.cjs||test/fixtures/unix.cjs": [
      "File: test/fixtures/unix.cjs -> test/fixtures/unix.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u2000bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u2000bar\",",
      "76:           noInterpolation: \"foo\\u2000bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2001bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2001bar\",",
      "83:           noInterpolation: \"foo\\u2001bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2002bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2002bar\",",
      "90:           noInterpolation: \"foo\\u2002bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2003bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2003bar\",",
      "97:           noInterpolation: \"foo\\u2003bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2004bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2004bar\",",
      "104:           noInterpolation: \"foo\\u2004bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2005bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2005bar\",",
      "111:           noInterpolation: \"foo\\u2005bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2006bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2006bar\",",
      "118:           noInterpolation: \"foo\\u2006bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2007bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2007bar\",",
      "125:           noInterpolation: \"foo\\u2007bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2008bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2008bar\",",
      "132:           noInterpolation: \"foo\\u2008bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2009bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2009bar\",",
      "139:           noInterpolation: \"foo\\u2009bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u200Abar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u200Abar\",",
      "146:           noInterpolation: \"foo\\u200Abar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u2028bar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u2028bar\",",
      "153:           noInterpolation: \"foo\\u2028bar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2029bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2029bar\",",
      "160:           noInterpolation: \"foo\\u2029bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u202Fbar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u202Fbar\",",
      "167:           noInterpolation: \"foo\\u202Fbar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u205Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u205Fbar\",",
      "174:           noInterpolation: \"foo\\u205Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u3000bar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u3000bar\",",
      "181:           noInterpolation: \"foo\\u3000bar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\uFEFFbar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\uFEFFbar\",",
      "188:           noInterpolation: \"foo\\uFEFFbar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\n\\rbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo \\rbar\",",
      "195:           noInterpolation: \"foo\\n\\rbar\",",
      "196:         },",
      "197:       },",
      "198:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "137:         input: \"a=b:~:\",",
      "138:         expected: { interpolation: \"a=b:\\\\~:\", noInterpolation: \"a=b:~:\" },",
      "139:       },",
      "140:       {",
      "141:         input: \"a=b:~:c\",",
      "142:         expected: { interpolation: \"a=b:\\\\~:c\", noInterpolation: \"a=b:~:c\" },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306:       {",
      "307:         input: \"a=\\r:~:\",",
      "308:         expected: { interpolation: \"a=\\r:\\\\~:\", noInterpolation: \"a=\\r:~:\" },",
      "309:       },",
      "310:       {",
      "311:         input: \"a=\\u2028:~:\",",
      "312:         expected: {",
      "313:           interpolation: \"a=\\u2028:\\\\~:\",",
      "314:           noInterpolation: \"a=\\u2028:~:\",",
      "315:         },",
      "316:       },",
      "317:       {",
      "318:         input: \"a=\\u2029:~:\",",
      "319:         expected: {",
      "320:           interpolation: \"a=\\u2029:\\\\~:\",",
      "321:           noInterpolation: \"a=\\u2029:~:\",",
      "322:         },",
      "323:       },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "391:         input: \"a{0..2}b\",",
      "392:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "393:       },",
      "394:     ],",
      "395:     \"angle brackets ('<', '>')\": [",
      "396:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "578:       {",
      "579:         input: \"a{\\u000Db,c}d\",",
      "580:         expected: {",
      "581:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "582:           noInterpolation: \"a{\\u000Db,c}d\",",
      "583:         },",
      "584:       },",
      "585:       {",
      "586:         input: \"a{\\u2028b,c}d\",",
      "587:         expected: {",
      "588:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "589:           noInterpolation: \"a{\\u2028b,c}d\",",
      "590:         },",
      "591:       },",
      "592:       {",
      "593:         input: \"a{\\u2029b,c}d\",",
      "594:         expected: {",
      "595:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "596:           noInterpolation: \"a{\\u2029b,c}d\",",
      "597:         },",
      "598:       },",
      "599:       {",
      "600:         input: \"a{b,c\\u000D}d\",",
      "601:         expected: {",
      "602:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "603:           noInterpolation: \"a{b,c\\u000D}d\",",
      "604:         },",
      "605:       },",
      "606:       {",
      "607:         input: \"a{b,c\\u2028}d\",",
      "608:         expected: {",
      "609:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "610:           noInterpolation: \"a{b,c\\u2028}d\",",
      "611:         },",
      "612:       },",
      "613:       {",
      "614:         input: \"a{b,c\\u2029}d\",",
      "615:         expected: {",
      "616:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "617:           noInterpolation: \"a{b,c\\u2029}d\",",
      "618:         },",
      "619:       },",
      "620:       {",
      "621:         input: \"a{\\u000D0..2}b\",",
      "622:         expected: {",
      "623:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "624:           noInterpolation: \"a{\\u000D0..2}b\",",
      "625:         },",
      "626:       },",
      "627:       {",
      "628:         input: \"a{\\u20280..2}b\",",
      "629:         expected: {",
      "630:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "631:           noInterpolation: \"a{\\u20280..2}b\",",
      "632:         },",
      "633:       },",
      "634:       {",
      "635:         input: \"a{\\u20290..2}b\",",
      "636:         expected: {",
      "637:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "638:           noInterpolation: \"a{\\u20290..2}b\",",
      "639:         },",
      "640:       },",
      "641:       {",
      "642:         input: \"a{0..2\\u000D}b\",",
      "643:         expected: {",
      "644:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "645:           noInterpolation: \"a{0..2\\u000D}b\",",
      "646:         },",
      "647:       },",
      "648:       {",
      "649:         input: \"a{0..2\\u2028}b\",",
      "650:         expected: {",
      "651:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "652:           noInterpolation: \"a{0..2\\u2028}b\",",
      "653:         },",
      "654:       },",
      "655:       {",
      "656:         input: \"a{0..2\\u2029}b\",",
      "657:         expected: {",
      "658:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "659:           noInterpolation: \"a{0..2\\u2029}b\",",
      "660:         },",
      "661:       },",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "439:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "440:       },",
      "441:     ],",
      "442:     'single quotes (\"\\'\")': [",
      "443:       {",
      "444:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "710:     \"whitespace (\\\\s)\": [",
      "711:       {",
      "712:         input: \"foo bar\",",
      "713:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "714:       },",
      "715:       {",
      "716:         input: \"foo\\nbar\",",
      "717:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\vbar\",",
      "721:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "722:       },",
      "723:       {",
      "724:         input: \"foo\\fbar\",",
      "725:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "726:       },",
      "727:       {",
      "728:         input: \"foo\\rbar\",",
      "729:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "730:       },",
      "731:       {",
      "732:         input: \"foo bar\",",
      "733:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "734:       },",
      "735:       {",
      "736:         input: \"foo\\u0085bar\",",
      "737:         expected: {",
      "738:           interpolation: \"foo\\u0085bar\",",
      "739:           noInterpolation: \"foo\\u0085bar\",",
      "740:         },",
      "741:       },",
      "742:       {",
      "743:         input: \"foo\\u00A0bar\",",
      "744:         expected: {",
      "745:           interpolation: \"foo\\u00A0bar\",",
      "746:           noInterpolation: \"foo\\u00A0bar\",",
      "747:         },",
      "748:       },",
      "749:       {",
      "750:         input: \"foo\\u2000bar\",",
      "751:         expected: {",
      "752:           interpolation: \"foo\\u2000bar\",",
      "753:           noInterpolation: \"foo\\u2000bar\",",
      "754:         },",
      "755:       },",
      "756:       {",
      "757:         input: \"foo\\u2001bar\",",
      "758:         expected: {",
      "759:           interpolation: \"foo\\u2001bar\",",
      "760:           noInterpolation: \"foo\\u2001bar\",",
      "761:         },",
      "762:       },",
      "763:       {",
      "764:         input: \"foo\\u2002bar\",",
      "765:         expected: {",
      "766:           interpolation: \"foo\\u2002bar\",",
      "767:           noInterpolation: \"foo\\u2002bar\",",
      "768:         },",
      "769:       },",
      "770:       {",
      "771:         input: \"foo\\u2003bar\",",
      "772:         expected: {",
      "773:           interpolation: \"foo\\u2003bar\",",
      "774:           noInterpolation: \"foo\\u2003bar\",",
      "775:         },",
      "776:       },",
      "777:       {",
      "778:         input: \"foo\\u2004bar\",",
      "779:         expected: {",
      "780:           interpolation: \"foo\\u2004bar\",",
      "781:           noInterpolation: \"foo\\u2004bar\",",
      "782:         },",
      "783:       },",
      "784:       {",
      "785:         input: \"foo\\u2005bar\",",
      "786:         expected: {",
      "787:           interpolation: \"foo\\u2005bar\",",
      "788:           noInterpolation: \"foo\\u2005bar\",",
      "789:         },",
      "790:       },",
      "791:       {",
      "792:         input: \"foo\\u2006bar\",",
      "793:         expected: {",
      "794:           interpolation: \"foo\\u2006bar\",",
      "795:           noInterpolation: \"foo\\u2006bar\",",
      "796:         },",
      "797:       },",
      "798:       {",
      "799:         input: \"foo\\u2007bar\",",
      "800:         expected: {",
      "801:           interpolation: \"foo\\u2007bar\",",
      "802:           noInterpolation: \"foo\\u2007bar\",",
      "803:         },",
      "804:       },",
      "805:       {",
      "806:         input: \"foo\\u2008bar\",",
      "807:         expected: {",
      "808:           interpolation: \"foo\\u2008bar\",",
      "809:           noInterpolation: \"foo\\u2008bar\",",
      "810:         },",
      "811:       },",
      "812:       {",
      "813:         input: \"foo\\u2009bar\",",
      "814:         expected: {",
      "815:           interpolation: \"foo\\u2009bar\",",
      "816:           noInterpolation: \"foo\\u2009bar\",",
      "817:         },",
      "818:       },",
      "819:       {",
      "820:         input: \"foo\\u200Abar\",",
      "821:         expected: {",
      "822:           interpolation: \"foo\\u200Abar\",",
      "823:           noInterpolation: \"foo\\u200Abar\",",
      "824:         },",
      "825:       },",
      "826:       {",
      "827:         input: \"foo\\u2028bar\",",
      "828:         expected: {",
      "829:           interpolation: \"foo\\u2028bar\",",
      "830:           noInterpolation: \"foo\\u2028bar\",",
      "831:         },",
      "832:       },",
      "833:       {",
      "834:         input: \"foo\\u2029bar\",",
      "835:         expected: {",
      "836:           interpolation: \"foo\\u2029bar\",",
      "837:           noInterpolation: \"foo\\u2029bar\",",
      "838:         },",
      "839:       },",
      "840:       {",
      "841:         input: \"foo\\u202Fbar\",",
      "842:         expected: {",
      "843:           interpolation: \"foo\\u202Fbar\",",
      "844:           noInterpolation: \"foo\\u202Fbar\",",
      "845:         },",
      "846:       },",
      "847:       {",
      "848:         input: \"foo\\u205Fbar\",",
      "849:         expected: {",
      "850:           interpolation: \"foo\\u205Fbar\",",
      "851:           noInterpolation: \"foo\\u205Fbar\",",
      "852:         },",
      "853:       },",
      "854:       {",
      "855:         input: \"foo\\u3000bar\",",
      "856:         expected: {",
      "857:           interpolation: \"foo\\u3000bar\",",
      "858:           noInterpolation: \"foo\\u3000bar\",",
      "859:         },",
      "860:       },",
      "861:       {",
      "862:         input: \"foo\\uFEFFbar\",",
      "863:         expected: {",
      "864:           interpolation: \"foo\\uFEFFbar\",",
      "865:           noInterpolation: \"foo\\uFEFFbar\",",
      "866:         },",
      "867:       },",
      "868:       {",
      "869:         input: \"foo\\n\\rbar\",",
      "870:         expected: {",
      "871:           interpolation: \"foo \\rbar\",",
      "872:           noInterpolation: \"foo\\n\\rbar\",",
      "873:         },",
      "874:       },",
      "875:     ],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "800:         input: \"a{0..2}b\",",
      "801:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "802:       },",
      "803:     ],",
      "804:     \"angle brackets ('<', '>')\": [",
      "805:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1237:       {",
      "1238:         input: \"a{\\u000Db,c}d\",",
      "1239:         expected: {",
      "1240:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "1241:           noInterpolation: \"a{\\u000Db,c}d\",",
      "1242:         },",
      "1243:       },",
      "1244:       {",
      "1245:         input: \"a{\\u2028b,c}d\",",
      "1246:         expected: {",
      "1247:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "1248:           noInterpolation: \"a{\\u2028b,c}d\",",
      "1249:         },",
      "1250:       },",
      "1251:       {",
      "1252:         input: \"a{\\u2029b,c}d\",",
      "1253:         expected: {",
      "1254:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "1255:           noInterpolation: \"a{\\u2029b,c}d\",",
      "1256:         },",
      "1257:       },",
      "1258:       {",
      "1259:         input: \"a{b,c\\u000D}d\",",
      "1260:         expected: {",
      "1261:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "1262:           noInterpolation: \"a{b,c\\u000D}d\",",
      "1263:         },",
      "1264:       },",
      "1265:       {",
      "1266:         input: \"a{b,c\\u2028}d\",",
      "1267:         expected: {",
      "1268:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "1269:           noInterpolation: \"a{b,c\\u2028}d\",",
      "1270:         },",
      "1271:       },",
      "1272:       {",
      "1273:         input: \"a{b,c\\u2029}d\",",
      "1274:         expected: {",
      "1275:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "1276:           noInterpolation: \"a{b,c\\u2029}d\",",
      "1277:         },",
      "1278:       },",
      "1279:       {",
      "1280:         input: \"a{\\u000D0..2}b\",",
      "1281:         expected: {",
      "1282:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "1283:           noInterpolation: \"a{\\u000D0..2}b\",",
      "1284:         },",
      "1285:       },",
      "1286:       {",
      "1287:         input: \"a{\\u20280..2}b\",",
      "1288:         expected: {",
      "1289:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "1290:           noInterpolation: \"a{\\u20280..2}b\",",
      "1291:         },",
      "1292:       },",
      "1293:       {",
      "1294:         input: \"a{\\u20290..2}b\",",
      "1295:         expected: {",
      "1296:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "1297:           noInterpolation: \"a{\\u20290..2}b\",",
      "1298:         },",
      "1299:       },",
      "1300:       {",
      "1301:         input: \"a{0..2\\u000D}b\",",
      "1302:         expected: {",
      "1303:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "1304:           noInterpolation: \"a{0..2\\u000D}b\",",
      "1305:         },",
      "1306:       },",
      "1307:       {",
      "1308:         input: \"a{0..2\\u2028}b\",",
      "1309:         expected: {",
      "1310:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "1311:           noInterpolation: \"a{0..2\\u2028}b\",",
      "1312:         },",
      "1313:       },",
      "1314:       {",
      "1315:         input: \"a{0..2\\u2029}b\",",
      "1316:         expected: {",
      "1317:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "1318:           noInterpolation: \"a{0..2\\u2029}b\",",
      "1319:         },",
      "1320:       },",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "848:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "849:       },",
      "850:     ],",
      "851:     'single quotes (\"\\'\")': [",
      "852:       {",
      "853:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1369:     \"whitespace (\\\\s)\": [",
      "1370:       {",
      "1371:         input: \"foo bar\",",
      "1372:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1373:       },",
      "1374:       {",
      "1375:         input: \"foo\\nbar\",",
      "1376:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "1377:       },",
      "1378:       {",
      "1379:         input: \"foo\\vbar\",",
      "1380:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "1381:       },",
      "1382:       {",
      "1383:         input: \"foo\\fbar\",",
      "1384:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "1385:       },",
      "1386:       {",
      "1387:         input: \"foo\\rbar\",",
      "1388:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "1389:       },",
      "1390:       {",
      "1391:         input: \"foo bar\",",
      "1392:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1393:       },",
      "1394:       {",
      "1395:         input: \"foo\\u0085bar\",",
      "1396:         expected: {",
      "1397:           interpolation: \"foo\\u0085bar\",",
      "1398:           noInterpolation: \"foo\\u0085bar\",",
      "1399:         },",
      "1400:       },",
      "1401:       {",
      "1402:         input: \"foo\\u00A0bar\",",
      "1403:         expected: {",
      "1404:           interpolation: \"foo\\u00A0bar\",",
      "1405:           noInterpolation: \"foo\\u00A0bar\",",
      "1406:         },",
      "1407:       },",
      "1408:       {",
      "1409:         input: \"foo\\u2000bar\",",
      "1410:         expected: {",
      "1411:           interpolation: \"foo\\u2000bar\",",
      "1412:           noInterpolation: \"foo\\u2000bar\",",
      "1413:         },",
      "1414:       },",
      "1415:       {",
      "1416:         input: \"foo\\u2001bar\",",
      "1417:         expected: {",
      "1418:           interpolation: \"foo\\u2001bar\",",
      "1419:           noInterpolation: \"foo\\u2001bar\",",
      "1420:         },",
      "1421:       },",
      "1422:       {",
      "1423:         input: \"foo\\u2002bar\",",
      "1424:         expected: {",
      "1425:           interpolation: \"foo\\u2002bar\",",
      "1426:           noInterpolation: \"foo\\u2002bar\",",
      "1427:         },",
      "1428:       },",
      "1429:       {",
      "1430:         input: \"foo\\u2003bar\",",
      "1431:         expected: {",
      "1432:           interpolation: \"foo\\u2003bar\",",
      "1433:           noInterpolation: \"foo\\u2003bar\",",
      "1434:         },",
      "1435:       },",
      "1436:       {",
      "1437:         input: \"foo\\u2004bar\",",
      "1438:         expected: {",
      "1439:           interpolation: \"foo\\u2004bar\",",
      "1440:           noInterpolation: \"foo\\u2004bar\",",
      "1441:         },",
      "1442:       },",
      "1443:       {",
      "1444:         input: \"foo\\u2005bar\",",
      "1445:         expected: {",
      "1446:           interpolation: \"foo\\u2005bar\",",
      "1447:           noInterpolation: \"foo\\u2005bar\",",
      "1448:         },",
      "1449:       },",
      "1450:       {",
      "1451:         input: \"foo\\u2006bar\",",
      "1452:         expected: {",
      "1453:           interpolation: \"foo\\u2006bar\",",
      "1454:           noInterpolation: \"foo\\u2006bar\",",
      "1455:         },",
      "1456:       },",
      "1457:       {",
      "1458:         input: \"foo\\u2007bar\",",
      "1459:         expected: {",
      "1460:           interpolation: \"foo\\u2007bar\",",
      "1461:           noInterpolation: \"foo\\u2007bar\",",
      "1462:         },",
      "1463:       },",
      "1464:       {",
      "1465:         input: \"foo\\u2008bar\",",
      "1466:         expected: {",
      "1467:           interpolation: \"foo\\u2008bar\",",
      "1468:           noInterpolation: \"foo\\u2008bar\",",
      "1469:         },",
      "1470:       },",
      "1471:       {",
      "1472:         input: \"foo\\u2009bar\",",
      "1473:         expected: {",
      "1474:           interpolation: \"foo\\u2009bar\",",
      "1475:           noInterpolation: \"foo\\u2009bar\",",
      "1476:         },",
      "1477:       },",
      "1478:       {",
      "1479:         input: \"foo\\u200Abar\",",
      "1480:         expected: {",
      "1481:           interpolation: \"foo\\u200Abar\",",
      "1482:           noInterpolation: \"foo\\u200Abar\",",
      "1483:         },",
      "1484:       },",
      "1485:       {",
      "1486:         input: \"foo\\u2028bar\",",
      "1487:         expected: {",
      "1488:           interpolation: \"foo\\u2028bar\",",
      "1489:           noInterpolation: \"foo\\u2028bar\",",
      "1490:         },",
      "1491:       },",
      "1492:       {",
      "1493:         input: \"foo\\u2029bar\",",
      "1494:         expected: {",
      "1495:           interpolation: \"foo\\u2029bar\",",
      "1496:           noInterpolation: \"foo\\u2029bar\",",
      "1497:         },",
      "1498:       },",
      "1499:       {",
      "1500:         input: \"foo\\u202Fbar\",",
      "1501:         expected: {",
      "1502:           interpolation: \"foo\\u202Fbar\",",
      "1503:           noInterpolation: \"foo\\u202Fbar\",",
      "1504:         },",
      "1505:       },",
      "1506:       {",
      "1507:         input: \"foo\\u205Fbar\",",
      "1508:         expected: {",
      "1509:           interpolation: \"foo\\u205Fbar\",",
      "1510:           noInterpolation: \"foo\\u205Fbar\",",
      "1511:         },",
      "1512:       },",
      "1513:       {",
      "1514:         input: \"foo\\u3000bar\",",
      "1515:         expected: {",
      "1516:           interpolation: \"foo\\u3000bar\",",
      "1517:           noInterpolation: \"foo\\u3000bar\",",
      "1518:         },",
      "1519:       },",
      "1520:       {",
      "1521:         input: \"foo\\uFEFFbar\",",
      "1522:         expected: {",
      "1523:           interpolation: \"foo\\uFEFFbar\",",
      "1524:           noInterpolation: \"foo\\uFEFFbar\",",
      "1525:         },",
      "1526:       },",
      "1527:       {",
      "1528:         input: \"foo\\n\\rbar\",",
      "1529:         expected: {",
      "1530:           interpolation: \"foo \\rbar\",",
      "1531:           noInterpolation: \"foo\\n\\rbar\",",
      "1532:         },",
      "1533:       },",
      "1534:     ],",
      "",
      "---------------"
    ],
    "test/fixtures/win.cjs||test/fixtures/win.cjs": [
      "File: test/fixtures/win.cjs -> test/fixtures/win.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u1680bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u1680bar\",",
      "76:           noInterpolation: \"foo\\u1680bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2000bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2000bar\",",
      "83:           noInterpolation: \"foo\\u2000bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2001bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2001bar\",",
      "90:           noInterpolation: \"foo\\u2001bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2002bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2002bar\",",
      "97:           noInterpolation: \"foo\\u2002bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2003bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2003bar\",",
      "104:           noInterpolation: \"foo\\u2003bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2004bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2004bar\",",
      "111:           noInterpolation: \"foo\\u2004bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2005bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2005bar\",",
      "118:           noInterpolation: \"foo\\u2005bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2006bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2006bar\",",
      "125:           noInterpolation: \"foo\\u2006bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2007bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2007bar\",",
      "132:           noInterpolation: \"foo\\u2007bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2008bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2008bar\",",
      "139:           noInterpolation: \"foo\\u2008bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u2009bar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u2009bar\",",
      "146:           noInterpolation: \"foo\\u2009bar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u200Abar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u200Abar\",",
      "153:           noInterpolation: \"foo\\u200Abar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2028bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2028bar\",",
      "160:           noInterpolation: \"foo\\u2028bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u2029bar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u2029bar\",",
      "167:           noInterpolation: \"foo\\u2029bar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u202Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u202Fbar\",",
      "174:           noInterpolation: \"foo\\u202Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u205Fbar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u205Fbar\",",
      "181:           noInterpolation: \"foo\\u205Fbar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\u3000bar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\u3000bar\",",
      "188:           noInterpolation: \"foo\\u3000bar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\uFEFFbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo\\uFEFFbar\",",
      "195:           noInterpolation: \"foo\\uFEFFbar\",",
      "196:         },",
      "197:       },",
      "198:       {",
      "199:         input: \"foo\\n\\rbar\",",
      "200:         expected: {",
      "201:           interpolation: \"foo  bar\",",
      "202:           noInterpolation: \"foo  bar\",",
      "203:         },",
      "204:       },",
      "205:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "399:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "400:       },",
      "401:     ],",
      "402:     'single quotes (\"\\'\")': [",
      "403:       {",
      "404:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "575:     \"whitespace (\\\\s)\": [",
      "576:       {",
      "577:         input: \"foo bar\",",
      "578:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "579:       },",
      "580:       {",
      "581:         input: \"foo\\nbar\",",
      "582:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "583:       },",
      "584:       {",
      "585:         input: \"foo\\vbar\",",
      "586:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "587:       },",
      "588:       {",
      "589:         input: \"foo\\fbar\",",
      "590:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "591:       },",
      "592:       {",
      "593:         input: \"foo\\rbar\",",
      "594:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\rbar\" },",
      "595:       },",
      "596:       {",
      "597:         input: \"foo bar\",",
      "598:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "599:       },",
      "600:       {",
      "601:         input: \"foo\\u0085bar\",",
      "602:         expected: {",
      "603:           interpolation: \"foo\\u0085bar\",",
      "604:           noInterpolation: \"foo\\u0085bar\",",
      "605:         },",
      "606:       },",
      "607:       {",
      "608:         input: \"foo\\u00A0bar\",",
      "609:         expected: {",
      "610:           interpolation: \"foo\\u00A0bar\",",
      "611:           noInterpolation: \"foo\\u00A0bar\",",
      "612:         },",
      "613:       },",
      "614:       {",
      "615:         input: \"foo\\u1680bar\",",
      "616:         expected: {",
      "617:           interpolation: \"foo\\u1680bar\",",
      "618:           noInterpolation: \"foo\\u1680bar\",",
      "619:         },",
      "620:       },",
      "621:       {",
      "622:         input: \"foo\\u2000bar\",",
      "623:         expected: {",
      "624:           interpolation: \"foo\\u2000bar\",",
      "625:           noInterpolation: \"foo\\u2000bar\",",
      "626:         },",
      "627:       },",
      "628:       {",
      "629:         input: \"foo\\u2001bar\",",
      "630:         expected: {",
      "631:           interpolation: \"foo\\u2001bar\",",
      "632:           noInterpolation: \"foo\\u2001bar\",",
      "633:         },",
      "634:       },",
      "635:       {",
      "636:         input: \"foo\\u2002bar\",",
      "637:         expected: {",
      "638:           interpolation: \"foo\\u2002bar\",",
      "639:           noInterpolation: \"foo\\u2002bar\",",
      "640:         },",
      "641:       },",
      "642:       {",
      "643:         input: \"foo\\u2003bar\",",
      "644:         expected: {",
      "645:           interpolation: \"foo\\u2003bar\",",
      "646:           noInterpolation: \"foo\\u2003bar\",",
      "647:         },",
      "648:       },",
      "649:       {",
      "650:         input: \"foo\\u2004bar\",",
      "651:         expected: {",
      "652:           interpolation: \"foo\\u2004bar\",",
      "653:           noInterpolation: \"foo\\u2004bar\",",
      "654:         },",
      "655:       },",
      "656:       {",
      "657:         input: \"foo\\u2005bar\",",
      "658:         expected: {",
      "659:           interpolation: \"foo\\u2005bar\",",
      "660:           noInterpolation: \"foo\\u2005bar\",",
      "661:         },",
      "662:       },",
      "663:       {",
      "664:         input: \"foo\\u2006bar\",",
      "665:         expected: {",
      "666:           interpolation: \"foo\\u2006bar\",",
      "667:           noInterpolation: \"foo\\u2006bar\",",
      "668:         },",
      "669:       },",
      "670:       {",
      "671:         input: \"foo\\u2007bar\",",
      "672:         expected: {",
      "673:           interpolation: \"foo\\u2007bar\",",
      "674:           noInterpolation: \"foo\\u2007bar\",",
      "675:         },",
      "676:       },",
      "677:       {",
      "678:         input: \"foo\\u2008bar\",",
      "679:         expected: {",
      "680:           interpolation: \"foo\\u2008bar\",",
      "681:           noInterpolation: \"foo\\u2008bar\",",
      "682:         },",
      "683:       },",
      "684:       {",
      "685:         input: \"foo\\u2009bar\",",
      "686:         expected: {",
      "687:           interpolation: \"foo\\u2009bar\",",
      "688:           noInterpolation: \"foo\\u2009bar\",",
      "689:         },",
      "690:       },",
      "691:       {",
      "692:         input: \"foo\\u200Abar\",",
      "693:         expected: {",
      "694:           interpolation: \"foo\\u200Abar\",",
      "695:           noInterpolation: \"foo\\u200Abar\",",
      "696:         },",
      "697:       },",
      "698:       {",
      "699:         input: \"foo\\u2028bar\",",
      "700:         expected: {",
      "701:           interpolation: \"foo\\u2028bar\",",
      "702:           noInterpolation: \"foo\\u2028bar\",",
      "703:         },",
      "704:       },",
      "705:       {",
      "706:         input: \"foo\\u2029bar\",",
      "707:         expected: {",
      "708:           interpolation: \"foo\\u2029bar\",",
      "709:           noInterpolation: \"foo\\u2029bar\",",
      "710:         },",
      "711:       },",
      "712:       {",
      "713:         input: \"foo\\u202Fbar\",",
      "714:         expected: {",
      "715:           interpolation: \"foo\\u202Fbar\",",
      "716:           noInterpolation: \"foo\\u202Fbar\",",
      "717:         },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\u205Fbar\",",
      "721:         expected: {",
      "722:           interpolation: \"foo\\u205Fbar\",",
      "723:           noInterpolation: \"foo\\u205Fbar\",",
      "724:         },",
      "725:       },",
      "726:       {",
      "727:         input: \"foo\\u3000bar\",",
      "728:         expected: {",
      "729:           interpolation: \"foo\\u3000bar\",",
      "730:           noInterpolation: \"foo\\u3000bar\",",
      "731:         },",
      "732:       },",
      "733:       {",
      "734:         input: \"foo\\uFEFFbar\",",
      "735:         expected: {",
      "736:           interpolation: \"foo\\uFEFFbar\",",
      "737:           noInterpolation: \"foo\\uFEFFbar\",",
      "738:         },",
      "739:       },",
      "740:       {",
      "741:         input: \"foo\\n\\rbar\",",
      "742:         expected: {",
      "743:           interpolation: \"foo  bar\",",
      "744:           noInterpolation: \"foo\\n\\rbar\",",
      "745:         },",
      "746:       },",
      "747:     ],",
      "",
      "---------------"
    ],
    "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
      "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: }",
      "27: function getExpectedOutput({ arg, shell }, normalizeWhitespace) {",
      "32:   arg = arg.replace(/\\u{0}/gu, \"\"); // Remove null characters, like Shescape",
      "34:   if (normalizeWhitespace) {",
      "37:     if (isShellPowerShell(shell)) {",
      "39:     } else {",
      "41:     }",
      "44:     if (isShellPowerShell(shell)) {",
      "46:     } else {",
      "48:     }",
      "49:   }",
      "",
      "[Removed Lines]",
      "28:   if (isShellCmd(shell)) {",
      "29:     arg = arg.replace(/[\\n\\r]+/g, \"\"); // Remove newline characters, like prep",
      "30:   }",
      "38:       arg = arg.replace(/^[\\s\\u0085]+|[\\s\\u0085]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t]+|[ \\t]+$/g, \"\");",
      "45:       arg = arg.replace(/(\\s|\\u0085)+/g, \" \");",
      "47:       arg = arg.replace(/[ \\t]+/g, \" \");",
      "",
      "[Added Lines]",
      "33:       arg = arg.replace(",
      "34:         /^[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+|[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+$/g,",
      "35:         \"\"",
      "36:       );",
      "37:     } else if (isShellCmd(shell)) {",
      "38:       arg = arg.replace(/^[ \\t\\n\\r]+|[ \\t\\n\\r]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t\\n]+|[ \\t\\n]+$/g, \"\");",
      "45:       arg = arg.replace(",
      "46:         /[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+/g,",
      "47:         \" \"",
      "48:       );",
      "49:     } else if (isShellCmd(shell)) {",
      "50:       arg = arg.replace(/[ \\t\\n\\r]+/g, \" \");",
      "52:       arg = arg.replace(/[ \\t\\n]+/g, \" \");",
      "53:     }",
      "54:   } else {",
      "55:     if (isShellCmd(shell)) {",
      "56:       arg = arg.replace(/[\\n\\r]/g, \" \"); // Change newlines to spaces, like Shescape",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57: }",
      "59: function prepareArg({ arg, quoted, shell }, disableExtraWindowsPreparations) {",
      "66:   if (isWindows() && !disableExtraWindowsPreparations) {",
      "68:     if (isShellCmd(shell)) {",
      "",
      "[Removed Lines]",
      "60:   if (isShellCmd(shell)) {",
      "63:     arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "64:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs": [
      "File: test/fuzz/exec.test.cjs -> test/fuzz/exec.test.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: }",
      "45: function checkWithoutShellUsingInterpolation(arg) {",
      "48:   const argInfo = { arg, shell: undefined, quoted: false };",
      "50:   const preparedArg = common.prepareArg(argInfo);",
      "",
      "[Removed Lines]",
      "46:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60: }",
      "62: function checkWithShellUsingInterpolation(arg) {",
      "65:   const shell = common.getFuzzShell() || true;",
      "66:   const argInfo = { arg, shell, quoted: false };",
      "67:   const execOptions = { shell };",
      "",
      "[Removed Lines]",
      "63:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/unit/_macros.js||test/unit/_macros.js": [
      "File: test/unit/_macros.js -> test/unit/_macros.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:     t.is(actual, expected);",
      "29:   },",
      "30:   title(_, { input, interpolation, quoted, shellName }) {",
      "32:     interpolation = interpolation ? \"interpolation\" : \"no interpolation\";",
      "33:     quoted = quoted ? \"quoted\" : \"not quoted\";",
      "",
      "[Removed Lines]",
      "31:     input = input.replace(/\\u{0}/gu, \"\\\\x00\").replace(/\\t/g, \"\\\\t\");",
      "",
      "[Added Lines]",
      "31:     input = input",
      "32:       .replace(/\\u0000/g, \"\\\\u{0000}\")",
      "33:       .replace(/\\u0009/g, \"\\\\t\")",
      "34:       .replace(/\\u000A/g, \"\\\\n\")",
      "35:       .replace(/\\u000B/g, \"\\\\v\")",
      "36:       .replace(/\\u000C/g, \"\\\\f\")",
      "37:       .replace(/\\u000D/g, \"\\\\r\")",
      "38:       .replace(/\\u0085/g, \"\\\\u{0085}\")",
      "39:       .replace(/\\u00A0/g, \"\\\\u{00A0}\")",
      "40:       .replace(/\\u1680/g, \"\\\\u{1680}\")",
      "41:       .replace(/\\u2000/g, \"\\\\u{2000}\")",
      "42:       .replace(/\\u2001/g, \"\\\\u{2001}\")",
      "43:       .replace(/\\u2002/g, \"\\\\u{2002}\")",
      "44:       .replace(/\\u2003/g, \"\\\\u{2003}\")",
      "45:       .replace(/\\u2004/g, \"\\\\u{2004}\")",
      "46:       .replace(/\\u2005/g, \"\\\\u{2005}\")",
      "47:       .replace(/\\u2006/g, \"\\\\u{2006}\")",
      "48:       .replace(/\\u2007/g, \"\\\\u{2007}\")",
      "49:       .replace(/\\u2008/g, \"\\\\u{2008}\")",
      "50:       .replace(/\\u2009/g, \"\\\\u{2009}\")",
      "51:       .replace(/\\u200A/g, \"\\\\u{200A}\")",
      "52:       .replace(/\\u2028/g, \"\\\\u{2028}\")",
      "53:       .replace(/\\u2029/g, \"\\\\u{2029}\")",
      "54:       .replace(/\\u202F/g, \"\\\\u{202F}\")",
      "55:       .replace(/\\u205F/g, \"\\\\u{205F}\")",
      "56:       .replace(/\\u3000/g, \"\\\\u{3000}\")",
      "57:       .replace(/\\uFEFF/g, \"\\\\u{FEFF}\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "552e8eab56861720b1d4e5474fb65741643358f9",
      "candidate_info": {
        "commit_hash": "552e8eab56861720b1d4e5474fb65741643358f9",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9",
        "files": [
          "SECURITY.md",
          "src/unix.js",
          "test/fixtures/unix.js",
          "test/unit/unix/escape.test.js"
        ],
        "message": "Merge pull request from GHSA-cr84-xvw4-qx3c\n\n* Test polynomial backtracking ReDoS attack string on Bash\n\nCreate a unit test for a (new) ReDoS string on bash. This test should be\nfailing in this commit.\n\n* Fix ReDoS (as seen in ReDoS test 1) for bash\n\nUpdate bash escaping to pessimistically escape opening curly braces,\nsimilar to Zsh escaping, to fix the ReDoS due to the complex regular\nexpression for opening curly braces.\n\nUpdate tests accordingly.\n\n* Test against old ReDoS values and all shells\n\nRefactor the ReDoS test such that 1) it's tested against all (supported)\nshells, and 2) extensible to test against multiple potential ReDoS\nstrings. Regarding the latter, the scope has been updated to include\nknown ReDoS strings related to CVE-2022-36064.\n\nThe `redos` value is intentionally a function as this avoids building\nthe string unnecessarily if the file is imported but the `redos` value\nisn't used.\n\n* Update SECURITY.md\n\nAdd latest advisory and credit its finder",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "test/fixtures/unix.js||test/fixtures/unix.js",
          "test/unit/unix/escape.test.js||test/unit/unix/escape.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "49:       .replace(/\\n/gu, \" \")",
          "50:       .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")",
          "55:       .replace(/(?<=[:=])(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\");",
          "56:   } else if (quoted) {",
          "57:     result = result.replace(/'/gu, `'\\\\''`);",
          "",
          "[Removed Lines]",
          "51:       .replace(/([\"$&'()*;<>?`|])/gu, \"\\\\$1\")",
          "52:       .replace(/(?<!\\{)\\{+(?=(?:[^{][^,.]*)?[,.][^}]*\\})/gu, (curlyBraces) =>",
          "53:         curlyBraces.replace(/\\{/gu, \"\\\\{\")",
          "54:       )",
          "",
          "[Added Lines]",
          "51:       .replace(/([\"$&'()*;<>?`{|])/gu, \"\\\\$1\")",
          "",
          "---------------"
        ],
        "test/fixtures/unix.js||test/fixtures/unix.js": [
          "File: test/fixtures/unix.js -> test/fixtures/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1116:     \"curly brackets ('{', '}')\": [",
          "1117:       {",
          "1118:         input: \"a{b\",",
          "1120:       },",
          "1121:       {",
          "1122:         input: \"a}b\",",
          "",
          "[Removed Lines]",
          "1119:         expected: { interpolation: \"a{b\", noInterpolation: \"a{b\" },",
          "",
          "[Added Lines]",
          "1119:         expected: { interpolation: \"a\\\\{b\", noInterpolation: \"a{b\" },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1124:       },",
          "1125:       {",
          "1126:         input: \"a{b{c\",",
          "1128:       },",
          "1129:       {",
          "1130:         input: \"a}b}c\",",
          "",
          "[Removed Lines]",
          "1127:         expected: { interpolation: \"a{b{c\", noInterpolation: \"a{b{c\" },",
          "",
          "[Added Lines]",
          "1127:         expected: { interpolation: \"a\\\\{b\\\\{c\", noInterpolation: \"a{b{c\" },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1132:       },",
          "1133:       {",
          "1134:         input: \"a{b}c\",",
          "1136:       },",
          "1137:       {",
          "1138:         input: \"a{b,c}d\",",
          "",
          "[Removed Lines]",
          "1135:         expected: { interpolation: \"a{b}c\", noInterpolation: \"a{b}c\" },",
          "",
          "[Added Lines]",
          "1135:         expected: { interpolation: \"a\\\\{b}c\", noInterpolation: \"a{b}c\" },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3601:     ],",
          "3602:   },",
          "3603: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3605: export const redos = () => [",
          "3607:   `foo${\"{\".repeat(150_000)}bar`,",
          "3608:   `=${\":\".repeat(150_000)}foobar`,",
          "3609:   `{${\",\".repeat(150_000)}`,",
          "3612:   \"{,\".repeat(150_000),",
          "3613: ];",
          "",
          "---------------"
        ],
        "test/unit/unix/escape.test.js||test/unit/unix/escape.test.js": [
          "File: test/unit/unix/escape.test.js -> test/unit/unix/escape.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   });",
          "47: });",
          "49: test(macros.unsupportedShell, { fn: unix.getEscapeFunction });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: fixtures.redos().forEach((s, i) => {",
          "50:   test(`bash, ReDoS #${i}`, (t) => {",
          "51:     const escape = unix.getEscapeFunction(\"bash\");",
          "52:     escape(s, true, false);",
          "53:     t.pass();",
          "54:   });",
          "56:   test(`dash, ReDoS #${i}`, (t) => {",
          "57:     const escape = unix.getEscapeFunction(\"dash\");",
          "58:     escape(s, true, false);",
          "59:     t.pass();",
          "60:   });",
          "62:   test(`zsh, ReDoS #${i}`, (t) => {",
          "63:     const escape = unix.getEscapeFunction(\"zsh\");",
          "64:     escape(s, true, false);",
          "65:     t.pass();",
          "66:   });",
          "67: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60ce2260370bf67b9982da4f83677d02ad99aebf",
      "candidate_info": {
        "commit_hash": "60ce2260370bf67b9982da4f83677d02ad99aebf",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/60ce2260370bf67b9982da4f83677d02ad99aebf",
        "files": [
          "src/main.js",
          "src/unix.js",
          "src/win.js",
          "test/bench/bench.js",
          "test/unit/_macros.js",
          "test/unit/main/escape.test.js",
          "test/unit/main/quote.test.js",
          "test/unit/unix/escape.test.js"
        ],
        "message": "Refactor internal `escapeArg` function signature (#608)\n\nCombine the `interpolation` and `quoted` arguments into an `options`\nargument to make options more explicit and make adding more options more\nmaintainable by avoiding many positional boolean arguments which may be\nconfused with one-another.",
        "before_after_code_files": [
          "src/main.js||src/main.js",
          "src/unix.js||src/unix.js",
          "src/win.js||src/win.js",
          "test/bench/bench.js||test/bench/bench.js",
          "test/unit/_macros.js||test/unit/_macros.js",
          "test/unit/main/escape.test.js||test/unit/main/escape.test.js",
          "test/unit/main/quote.test.js||test/unit/main/quote.test.js",
          "test/unit/unix/escape.test.js||test/unit/unix/escape.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js",
            "test/unit/_macros.js||test/unit/_macros.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js",
            "test/unit/_macros.js||test/unit/_macros.js"
          ]
        }
      },
      "candidate_diff": {
        "src/main.js||src/main.js": [
          "File: src/main.js -> src/main.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:   const argAsString = arg.toString();",
          "110:   const escape = getEscapeFunction(shellName);",
          "112:   return escapedArg;",
          "113: }",
          "",
          "[Removed Lines]",
          "111:   const escapedArg = escape(argAsString, interpolation, quoted);",
          "",
          "[Added Lines]",
          "111:   const escapedArg = escape(argAsString, { interpolation, quoted });",
          "",
          "---------------"
        ],
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");",
          "46:   if (interpolation) {",
          "",
          "[Removed Lines]",
          "43: function escapeArgBash(arg, interpolation, quoted) {",
          "",
          "[Added Lines]",
          "44: function escapeArgBash(arg, { interpolation, quoted }) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");",
          "73:   if (interpolation) {",
          "",
          "[Removed Lines]",
          "70: function escapeArgDash(arg, interpolation, quoted) {",
          "",
          "[Added Lines]",
          "72: function escapeArgDash(arg, { interpolation, quoted }) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:   let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");",
          "99:   if (interpolation) {",
          "",
          "[Removed Lines]",
          "96: function escapeArgZsh(arg, interpolation, quoted) {",
          "",
          "[Added Lines]",
          "99: function escapeArgZsh(arg, { interpolation, quoted }) {",
          "",
          "---------------"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   let result = arg",
          "37:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "38:     .replace(/\\r?\\n|\\r/gu, \" \");",
          "",
          "[Removed Lines]",
          "35: function escapeArgCmd(arg, interpolation, quoted) {",
          "",
          "[Added Lines]",
          "36: function escapeArgCmd(arg, { interpolation, quoted }) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   let result = arg",
          "59:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "60:     .replace(/`/gu, \"``\")",
          "",
          "[Removed Lines]",
          "57: function escapeArgPowerShell(arg, interpolation, quoted) {",
          "",
          "[Added Lines]",
          "59: function escapeArgPowerShell(arg, { interpolation, quoted }) {",
          "",
          "---------------"
        ],
        "test/bench/bench.js||test/bench/bench.js": [
          "File: test/bench/bench.js -> test/bench/bench.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: suite.add(`unix, ${binBash}, ${sampleArg}`, () => {",
          "30:   const escapeShellArg = unix.getEscapeFunction(binBash);",
          "32: });",
          "34: suite.add(`unix, ${binDash}, ${sampleArg}`, () => {",
          "35:   const escapeShellArg = unix.getEscapeFunction(binDash);",
          "37: });",
          "39: suite.add(`unix, ${binZsh}, ${sampleArg}`, () => {",
          "40:   const escapeShellArg = unix.getEscapeFunction(binZsh);",
          "42: });",
          "44: suite.add(`win, ${binCmd}, ${sampleArg}`, () => {",
          "45:   const escapeShellArg = win.getEscapeFunction(binCmd);",
          "47: });",
          "49: suite.add(`win, ${binPowerShell}, ${sampleArg}`, () => {",
          "50:   const escapeShellArg = win.getEscapeFunction(binPowerShell);",
          "52: });",
          "54: suite.run();",
          "",
          "[Removed Lines]",
          "31:   escapeShellArg(sampleArg);",
          "36:   escapeShellArg(sampleArg);",
          "41:   escapeShellArg(sampleArg);",
          "46:   escapeShellArg(sampleArg);",
          "51:   escapeShellArg(sampleArg);",
          "",
          "[Added Lines]",
          "31:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "36:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "41:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "46:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "51:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "",
          "---------------"
        ],
        "test/unit/_macros.js||test/unit/_macros.js": [
          "File: test/unit/_macros.js -> test/unit/_macros.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: export const escape = test.macro({",
          "25:   exec(t, { expected, input, interpolation, platform, quoted, shellName }) {",
          "26:     const escapeFn = platform.getEscapeFunction(shellName);",
          "28:     t.is(actual, expected);",
          "29:   },",
          "30:   title(_, { input, interpolation, quoted, shellName }) {",
          "",
          "[Removed Lines]",
          "27:     const actual = escapeFn(input, interpolation, quoted);",
          "",
          "[Added Lines]",
          "27:     const actual = escapeFn(input, { interpolation, quoted });",
          "",
          "---------------"
        ],
        "test/unit/main/escape.test.js||test/unit/main/escape.test.js": [
          "File: test/unit/main/escape.test.js -> test/unit/main/escape.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     t.true(",
          "131:       t.context.deps.escapeFunction.calledWithExactly(",
          "132:         sinon.match.any,",
          "135:       )",
          "136:     );",
          "137:   }",
          "",
          "[Removed Lines]",
          "133:         false,",
          "134:         sinon.match.any",
          "",
          "[Added Lines]",
          "133:         sinon.match({ interpolation: false })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:       t.true(",
          "150:         t.context.deps.escapeFunction.calledWithExactly(",
          "151:           sinon.match.any,",
          "154:         )",
          "155:       );",
          "156:     }",
          "",
          "[Removed Lines]",
          "152:           interpolation ? true : false,",
          "153:           sinon.match.any",
          "",
          "[Added Lines]",
          "151:           sinon.match({ interpolation: interpolation ? true : false })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:       t.true(",
          "170:         t.context.deps.escapeFunction.calledWithExactly(",
          "171:           sinon.match.any,",
          "174:         )",
          "175:       );",
          "176:     }",
          "",
          "[Removed Lines]",
          "172:           sinon.match.any,",
          "173:           false",
          "",
          "[Added Lines]",
          "170:           sinon.match({ quoted: false })",
          "",
          "---------------"
        ],
        "test/unit/main/quote.test.js||test/unit/main/quote.test.js": [
          "File: test/unit/main/quote.test.js -> test/unit/main/quote.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:     t.true(",
          "154:       t.context.deps.escapeFunction.calledWithExactly(",
          "155:         sinon.match.any,",
          "158:       )",
          "159:     );",
          "160:   }",
          "",
          "[Removed Lines]",
          "156:         false,",
          "157:         sinon.match.any",
          "",
          "[Added Lines]",
          "156:         sinon.match({ interpolation: false })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     t.true(",
          "171:       t.context.deps.escapeFunction.calledWithExactly(",
          "172:         sinon.match.any,",
          "175:       )",
          "176:     );",
          "177:   }",
          "",
          "[Removed Lines]",
          "173:         sinon.match.any,",
          "174:         true",
          "",
          "[Added Lines]",
          "172:         sinon.match({ quoted: true })",
          "",
          "---------------"
        ],
        "test/unit/unix/escape.test.js||test/unit/unix/escape.test.js": [
          "File: test/unit/unix/escape.test.js -> test/unit/unix/escape.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: fixtures.redos().forEach((s, i) => {",
          "51:   test(`bash, ReDoS #${i}`, (t) => {",
          "52:     const escape = unix.getEscapeFunction(\"bash\");",
          "54:     t.pass();",
          "55:   });",
          "57:   test(`dash, ReDoS #${i}`, (t) => {",
          "58:     const escape = unix.getEscapeFunction(\"dash\");",
          "60:     t.pass();",
          "61:   });",
          "63:   test(`zsh, ReDoS #${i}`, (t) => {",
          "64:     const escape = unix.getEscapeFunction(\"zsh\");",
          "66:     t.pass();",
          "67:   });",
          "68: });",
          "",
          "[Removed Lines]",
          "53:     escape(s, true, false);",
          "59:     escape(s, true, false);",
          "65:     escape(s, true, false);",
          "",
          "[Added Lines]",
          "53:     escape(s, { interpolation: true, quoted: false });",
          "59:     escape(s, { interpolation: true, quoted: false });",
          "65:     escape(s, { interpolation: true, quoted: false });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbaa0fd36af4fd0439af87548ce710468f25cb18",
      "candidate_info": {
        "commit_hash": "dbaa0fd36af4fd0439af87548ce710468f25cb18",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/dbaa0fd36af4fd0439af87548ce710468f25cb18",
        "files": [
          ".github/workflows/fuzz-matrix.js",
          "CONTRIBUTING.md",
          "test/fuzz/_common.cjs",
          "test/fuzz/exec-file.test.cjs",
          "test/fuzz/exec.test.cjs",
          "test/fuzz/fork.test.cjs",
          "test/fuzz/spawn.test.cjs"
        ],
        "message": "Make fuzzing with default shell explicit (#615)\n\n* Make fuzzing with default shell explicit\n\nRemove the \"WithoutShell\" variants of fuzzing `check` functions in favor\nof fuzzing explicitly without a `FUZZ_SHELL` set.\n\nDoing this avoids overlap between seemingly unrelated fuzz runs, for\nexample: a fuzz error detected for the default shell will be found by\nfuzzing using any shell. This may confusing (if the stacktrace isn't\nread carefully) and leads to \"incorrectly\" failing CI jobs (e.g. fuzzing\nPowerShell fails because of an escape bug for CMD).\n\nAn explicit example of how to fuzz with the default shell has been added\nto the Contributing Guidelines, even though simply not defining\n`FUZZ_SHELL` has the same effect.\n\nThe `getFuzzShell` helper function is updated to explicitly return\n`undefined` if the specified FUZZ_SHELL is `\"\"`. This is in accordance\nwith the changes to the Contributing Guidelines.\n\nNote that `fork` does not support defining a shell explicitly so isn't\nsubject to these changes.\n\nAdditional changes:\n- Use encoding option in all fuzz targets.\n- Remove unnecessary `shell` definition in fork target.\n- Make use of `forkOptions` consistent in fork fuzz target.\n\n* Update `.github/workflows/fuzz-matrix.js`\n\nUpdate the fuzz matrix generator script to update the CI in\naccordance with the above changes.\n\nAdditionally, fuzz fork only with system shell in the CI.",
        "before_after_code_files": [
          ".github/workflows/fuzz-matrix.js||.github/workflows/fuzz-matrix.js",
          "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
          "test/fuzz/exec-file.test.cjs||test/fuzz/exec-file.test.cjs",
          "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs",
          "test/fuzz/fork.test.cjs||test/fuzz/fork.test.cjs",
          "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
            "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs"
          ],
          "candidate": [
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
            "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs"
          ]
        }
      },
      "candidate_diff": {
        ".github/workflows/fuzz-matrix.js||.github/workflows/fuzz-matrix.js": [
          "File: .github/workflows/fuzz-matrix.js -> .github/workflows/fuzz-matrix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: const unixOS = \"ubuntu-22.04\";",
          "7: const winOS = \"windows-2022\";",
          "14: export function determineMatrix({ unix, windows }) {",
          "15:   return [",
          "16:     ...(unix",
          "20:       : []),",
          "21:     ...(windows",
          "25:       : []),",
          "26:   ];",
          "27: }",
          "",
          "[Removed Lines]",
          "9: const unixShells = [\"/bin/bash\", \"/bin/dash\", \"/bin/zsh\"];",
          "10: const winShells = [\"cmd.exe\", \"powershell.exe\"];",
          "12: const targets = [\"exec\", \"exec-file\", \"fork\", \"spawn\"];",
          "17:       ? unixShells.flatMap((shell) =>",
          "18:           targets.map((target) => ({ os: unixOS, shell, target }))",
          "19:         )",
          "22:       ? winShells.flatMap((shell) =>",
          "23:           targets.map((target) => ({ os: winOS, shell, target }))",
          "24:         )",
          "",
          "[Added Lines]",
          "10: const systemShell = \"\";",
          "12: const unixShells = [systemShell, \"/bin/bash\", \"/bin/dash\", \"/bin/zsh\"];",
          "13: const winShells = [systemShell, \"cmd.exe\", \"powershell.exe\"];",
          "15: const targets = [\"exec\", \"exec-file\", \"spawn\"];",
          "20:       ? unixShells",
          "21:           .flatMap((shell) =>",
          "22:             targets.map((target) => ({ os: unixOS, shell, target }))",
          "23:           )",
          "24:           .concat([{ os: unixOS, shell: systemShell, target: \"fork\" }])",
          "27:       ? winShells",
          "28:           .flatMap((shell) =>",
          "29:             targets.map((target) => ({ os: winOS, shell, target }))",
          "30:           )",
          "31:           .concat([{ os: winOS, shell: systemShell, target: \"fork\" }])",
          "",
          "---------------"
        ],
        "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "96: function getFuzzShell() {",
          "98: }",
          "",
          "[Removed Lines]",
          "97:   return process.env.FUZZ_SHELL;",
          "",
          "[Added Lines]",
          "97:   return process.env.FUZZ_SHELL || undefined;",
          "",
          "---------------"
        ],
        "test/fuzz/exec-file.test.cjs||test/fuzz/exec-file.test.cjs": [
          "File: test/fuzz/exec-file.test.cjs -> test/fuzz/exec-file.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: const shescape = require(\"../../index.cjs\");",
          "34:   const execFileOptions = { encoding: \"utf8\", shell };",
          "38:   const stdout = execFileSync(",
          "39:     \"node\",",
          "41:     execFileOptions",
          "42:   );",
          "",
          "[Removed Lines]",
          "14: function checkWithoutShell(arg) {",
          "15:   const argInfo = { arg, shell: undefined, quoted: false };",
          "16:   const execFileOptions = { encoding: \"utf8\" };",
          "18:   const preparedArg = common.prepareArg(argInfo, true);",
          "20:   const stdout = execFileSync(",
          "21:     \"node\",",
          "22:     shescape.escapeAll([common.ECHO_SCRIPT, preparedArg]),",
          "23:     execFileOptions",
          "24:   );",
          "26:   const result = stdout;",
          "27:   const expected = common.getExpectedOutput(argInfo);",
          "28:   assert.strictEqual(result, expected);",
          "29: }",
          "31: function checkWithShell(arg) {",
          "32:   const shell = common.getFuzzShell() || true;",
          "33:   const argInfo = { arg, shell, quoted: true };",
          "36:   const preparedArg = common.prepareArg(argInfo);",
          "40:     shescape.quoteAll([common.ECHO_SCRIPT, preparedArg], execFileOptions),",
          "",
          "[Added Lines]",
          "14: function check(arg) {",
          "15:   const shell = common.getFuzzShell();",
          "16:   const argInfo = { arg, shell, quoted: Boolean(shell) };",
          "19:   const preparedArg = common.prepareArg(argInfo, !Boolean(shell));",
          "23:     execFileOptions.shell",
          "24:       ? shescape.quoteAll([common.ECHO_SCRIPT, preparedArg], execFileOptions)",
          "25:       : shescape.escapeAll([common.ECHO_SCRIPT, preparedArg], execFileOptions),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   assert.strictEqual(result, expected);",
          "47: }",
          "74:   const preparedArgs = args.map((arg) =>",
          "76:   );",
          "78:   const stdout = execFileSync(",
          "79:     \"node\",",
          "81:     execFileOptions",
          "82:   );",
          "85:   const expected = common.getExpectedOutput({",
          "86:     ...argInfo,",
          "87:     arg: (common.isShellPowerShell(shell)",
          "",
          "[Removed Lines]",
          "49: function checkWithoutShellMultipleArgs(args) {",
          "50:   const argInfo = { shell: undefined, quoted: false };",
          "52:   const preparedArgs = args.map((arg) =>",
          "53:     common.prepareArg({ ...argInfo, arg }, true)",
          "54:   );",
          "56:   const stdout = execFileSync(",
          "57:     \"node\",",
          "58:     shescape.escapeAll([common.ECHO_SCRIPT, ...preparedArgs])",
          "59:   );",
          "61:   const result = stdout.toString();",
          "62:   const expected = common.getExpectedOutput({",
          "63:     ...argInfo,",
          "64:     arg: args.join(\" \"),",
          "65:   });",
          "66:   assert.strictEqual(result, expected);",
          "67: }",
          "69: function checkWithShellMultipleArgs(args) {",
          "70:   const shell = common.getFuzzShell() || true;",
          "71:   const argInfo = { shell, quoted: true };",
          "72:   const execFileOptions = { shell };",
          "75:     common.prepareArg({ ...argInfo, arg }, false)",
          "80:     shescape.quoteAll([common.ECHO_SCRIPT, ...preparedArgs], execFileOptions),",
          "84:   const result = stdout.toString();",
          "",
          "[Added Lines]",
          "34: function checkMultipleArgs(args) {",
          "35:   const shell = common.getFuzzShell();",
          "36:   const argInfo = { shell, quoted: Boolean(shell) };",
          "37:   const execFileOptions = { encoding: \"utf8\", shell };",
          "40:     common.prepareArg({ ...argInfo, arg }, !Boolean(shell))",
          "45:     execFileOptions.shell",
          "46:       ? shescape.quoteAll(",
          "47:           [common.ECHO_SCRIPT, ...preparedArgs],",
          "48:           execFileOptions",
          "49:         )",
          "50:       : shescape.escapeAll(",
          "51:           [common.ECHO_SCRIPT, ...preparedArgs],",
          "52:           execFileOptions",
          "53:         ),",
          "57:   const result = stdout;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:   const arg = buf.toString();",
          "99:   const args = arg.split(/[\\n\\r]+/u);",
          "105: }",
          "107: module.exports = {",
          "",
          "[Removed Lines]",
          "101:   checkWithoutShell(arg);",
          "102:   checkWithoutShellMultipleArgs(args);",
          "103:   checkWithShell(arg);",
          "104:   checkWithShellMultipleArgs(args);",
          "",
          "[Added Lines]",
          "74:   check(arg);",
          "75:   checkMultipleArgs(args);",
          "",
          "---------------"
        ],
        "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs": [
          "File: test/fuzz/exec.test.cjs -> test/fuzz/exec.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: const shescape = require(\"../../index.cjs\");",
          "33:   const argInfo = { arg, shell, quoted: true };",
          "34:   const execOptions = { encoding: \"utf8\", shell };",
          "36:   const preparedArg = common.prepareArg(argInfo);",
          "39:   const stdout = execSync(",
          "40:     `node ${common.ECHO_SCRIPT} ${quotedArg}`,",
          "",
          "[Removed Lines]",
          "14: function checkWithoutShell(arg) {",
          "15:   const argInfo = { arg, shell: undefined, quoted: true };",
          "16:   const execOptions = { encoding: \"utf8\" };",
          "18:   const preparedArg = common.prepareArg(argInfo);",
          "19:   const quotedArg = shescape.quote(preparedArg);",
          "21:   const stdout = execSync(",
          "22:     `node ${common.ECHO_SCRIPT} ${quotedArg}`,",
          "23:     execOptions",
          "24:   );",
          "26:   const result = stdout;",
          "27:   const expected = common.getExpectedOutput(argInfo);",
          "28:   assert.strictEqual(result, expected);",
          "29: }",
          "31: function checkWithShell(arg) {",
          "32:   const shell = common.getFuzzShell() || true;",
          "37:   const quotedArg = shescape.quote(preparedArg, execOptions);",
          "",
          "[Added Lines]",
          "14: function check(arg) {",
          "15:   const shell = common.getFuzzShell();",
          "20:   const quotedArg = shescape.quote(preparedArg, {",
          "21:     ...execOptions,",
          "22:   });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   assert.strictEqual(result, expected);",
          "47: }",
          "70:   const argInfo = { arg, shell, quoted: false };",
          "71:   const execOptions = { encoding: \"utf8\", shell };",
          "",
          "[Removed Lines]",
          "49: function checkWithoutShellUsingInterpolation(arg) {",
          "50:   const argInfo = { arg, shell: undefined, quoted: false };",
          "51:   const execOptions = { encoding: \"utf8\" };",
          "53:   const preparedArg = common.prepareArg(argInfo);",
          "54:   const escapedArg = shescape.escape(preparedArg, {",
          "55:     interpolation: true,",
          "56:   });",
          "58:   const stdout = execSync(",
          "59:     `node ${common.ECHO_SCRIPT} ${escapedArg}`,",
          "60:     execOptions",
          "61:   );",
          "63:   const result = stdout;",
          "64:   const expected = common.getExpectedOutput(argInfo, true);",
          "65:   assert.strictEqual(result, expected);",
          "66: }",
          "68: function checkWithShellUsingInterpolation(arg) {",
          "69:   const shell = common.getFuzzShell() || true;",
          "",
          "[Added Lines]",
          "34: function checkUsingInterpolation(arg) {",
          "35:   const shell = common.getFuzzShell();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89: function fuzz(buf) {",
          "90:   const arg = buf.toString();",
          "96: }",
          "98: module.exports = {",
          "",
          "[Removed Lines]",
          "92:   checkWithoutShell(arg);",
          "93:   checkWithShell(arg);",
          "94:   checkWithoutShellUsingInterpolation(arg);",
          "95:   checkWithShellUsingInterpolation(arg);",
          "",
          "[Added Lines]",
          "58:   check(arg);",
          "59:   checkUsingInterpolation(arg);",
          "",
          "---------------"
        ],
        "test/fuzz/fork.test.cjs||test/fuzz/fork.test.cjs": [
          "File: test/fuzz/fork.test.cjs -> test/fuzz/fork.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: const shescape = require(\"../../index.cjs\");",
          "14: function check(arg) {",
          "16:   const forkOptions = { silent: true };",
          "18:   const preparedArg = common.prepareArg(argInfo, true);",
          "",
          "[Removed Lines]",
          "15:   const argInfo = { arg, shell: undefined, quoted: false };",
          "",
          "[Added Lines]",
          "15:   const argInfo = { arg, quoted: false };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: }",
          "40: function checkMultipleArgs(args) {",
          "43:   const preparedArgs = args.map((arg) =>",
          "44:     common.prepareArg({ ...argInfo, arg }, true)",
          "45:   );",
          "47:   return new Promise((resolve, reject) => {",
          "52:     echo.stdout.on(\"data\", (data) => {",
          "53:       const result = data.toString();",
          "",
          "[Removed Lines]",
          "41:   const argInfo = { shell: undefined, quoted: false };",
          "48:     const echo = fork(common.ECHO_SCRIPT, shescape.escapeAll(preparedArgs), {",
          "49:       silent: true,",
          "50:     });",
          "",
          "[Added Lines]",
          "41:   const argInfo = { quoted: false };",
          "42:   const forkOptions = { silent: true };",
          "49:     const echo = fork(",
          "50:       common.ECHO_SCRIPT,",
          "51:       shescape.escapeAll(preparedArgs),",
          "52:       forkOptions",
          "53:     );",
          "",
          "---------------"
        ],
        "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs": [
          "File: test/fuzz/spawn.test.cjs -> test/fuzz/spawn.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: const shescape = require(\"../../index.cjs\");",
          "34:   const spawnOptions = { encoding: \"utf8\", shell };",
          "38:   const child = spawnSync(",
          "39:     \"node\",",
          "41:     spawnOptions",
          "42:   );",
          "",
          "[Removed Lines]",
          "14: function checkWithoutShell(arg) {",
          "15:   const argInfo = { arg, shell: undefined, quoted: false };",
          "16:   const spawnOptions = { encoding: \"utf8\" };",
          "18:   const preparedArg = common.prepareArg(argInfo, true);",
          "20:   const child = spawnSync(",
          "21:     \"node\",",
          "22:     shescape.escapeAll([common.ECHO_SCRIPT, preparedArg]),",
          "23:     spawnOptions",
          "24:   );",
          "26:   const result = child.stdout;",
          "27:   const expected = common.getExpectedOutput(argInfo);",
          "28:   assert.strictEqual(result, expected);",
          "29: }",
          "31: function checkWithShell(arg) {",
          "32:   const shell = common.getFuzzShell() || true;",
          "33:   const argInfo = { arg, shell, quoted: true };",
          "36:   const preparedArg = common.prepareArg(argInfo);",
          "40:     shescape.quoteAll([common.ECHO_SCRIPT, preparedArg], spawnOptions),",
          "",
          "[Added Lines]",
          "14: function check(arg) {",
          "15:   const shell = common.getFuzzShell();",
          "16:   const argInfo = { arg, shell, quoted: Boolean(shell) };",
          "19:   const preparedArg = common.prepareArg(argInfo, !Boolean(shell));",
          "23:     spawnOptions.shell",
          "24:       ? shescape.quoteAll([common.ECHO_SCRIPT, preparedArg], spawnOptions)",
          "25:       : shescape.escapeAll([common.ECHO_SCRIPT, preparedArg], spawnOptions),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   assert.strictEqual(result, expected);",
          "47: }",
          "74:   const preparedArgs = args.map((arg) =>",
          "76:   );",
          "78:   const child = spawnSync(",
          "79:     \"node\",",
          "81:     spawnOptions",
          "82:   );",
          "85:   const expected = common.getExpectedOutput({",
          "86:     ...argInfo,",
          "87:     arg: (common.isShellPowerShell(shell)",
          "",
          "[Removed Lines]",
          "49: function checkWithoutShellMultipleArgs(args) {",
          "50:   const argInfo = { shell: undefined, quoted: false };",
          "52:   const preparedArgs = args.map((arg) =>",
          "53:     common.prepareArg({ ...argInfo, arg }, true)",
          "54:   );",
          "56:   const child = spawnSync(",
          "57:     \"node\",",
          "58:     shescape.escapeAll([common.ECHO_SCRIPT, ...preparedArgs])",
          "59:   );",
          "61:   const result = child.stdout.toString();",
          "62:   const expected = common.getExpectedOutput({",
          "63:     ...argInfo,",
          "64:     arg: args.join(\" \"),",
          "65:   });",
          "66:   assert.strictEqual(result, expected);",
          "67: }",
          "69: function checkWithShellMultipleArgs(args) {",
          "70:   const shell = common.getFuzzShell() || true;",
          "71:   const argInfo = { shell, quoted: true };",
          "72:   const spawnOptions = { shell };",
          "75:     common.prepareArg({ ...argInfo, arg }, false)",
          "80:     shescape.quoteAll([common.ECHO_SCRIPT, ...preparedArgs], spawnOptions),",
          "84:   const result = child.stdout.toString();",
          "",
          "[Added Lines]",
          "34: function checkMultipleArgs(args) {",
          "35:   const shell = common.getFuzzShell();",
          "36:   const argInfo = { shell, quoted: Boolean(shell) };",
          "37:   const spawnOptions = { encoding: \"utf8\", shell };",
          "40:     common.prepareArg({ ...argInfo, arg }, !Boolean(shell))",
          "45:     spawnOptions.shell",
          "46:       ? shescape.quoteAll([common.ECHO_SCRIPT, ...preparedArgs], spawnOptions)",
          "47:       : shescape.escapeAll([common.ECHO_SCRIPT, ...preparedArgs], spawnOptions),",
          "51:   const result = child.stdout;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:   const arg = buf.toString();",
          "99:   const args = arg.split(/[\\n\\r]+/u);",
          "105: }",
          "107: module.exports = {",
          "",
          "[Removed Lines]",
          "101:   checkWithoutShell(arg);",
          "102:   checkWithShell(arg);",
          "103:   checkWithoutShellMultipleArgs(args);",
          "104:   checkWithShellMultipleArgs(args);",
          "",
          "[Added Lines]",
          "68:   check(arg);",
          "69:   checkMultipleArgs(args);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3630f27b2b140216b4bf1340d5994a5ce767b42",
      "candidate_info": {
        "commit_hash": "a3630f27b2b140216b4bf1340d5994a5ce767b42",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/a3630f27b2b140216b4bf1340d5994a5ce767b42",
        "files": [
          "CHANGELOG.md",
          "src/unix.js",
          "test/fixtures/unix.js",
          "test/fuzz/corpus/23b63e8acdea56651d4dd6d93d641d86ef9987faad8879b830b5fedea7cacba1",
          "test/fuzz/corpus/c6a39e830eec6a89ee4076c71c18fbc51e50493ab2ebf10702937a0e9630c845"
        ],
        "message": "Add CI fuzzing crash for csh (#675)\n\n* Add CI fuzzing crash for csh\n\n* Update tests for arguments with exclamation marks\n\nUpdate the test fixtures for `csh` to include examples of arguments with\nthe substring `\"\\!\"` to ensure they are escaped properly. In particular,\nthe test case `\"a\\!\"` is currently not escaped correctly by Shescape, so\nthis test acts as a regression test. The other tests are included for\ncompleteness and to avoid regression against the current implementation\nwhen fixing the current bug.\n\nAdditionally, include a second new fuzz corpus entry which shows that it\nis really only trailing `\"\\!\"` substrings that aren't handled correctly.\nIt will blow up if `\"\\!\"` in the middle of an argument is over-escaped.\n\n* Correct quoting of trailing `\\!` for C shell\n\n* Update CHANGELOG.md",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "test/fixtures/unix.js||test/fixtures/unix.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:         (char) => (textEncoder.encode(char).includes(160) ? `'${char}'` : char)",
          "104:       )",
          "105:       .join(\"\");",
          "108:   }",
          "110:   result = result.replace(/!(?!$)/gu, \"\\\\!\");",
          "",
          "[Removed Lines]",
          "106:   } else if (quoted) {",
          "107:     result = result.replace(/'/gu, `'\\\\''`);",
          "",
          "[Added Lines]",
          "106:   } else {",
          "107:     result = result.replace(/\\\\!$/gu, \"\\\\\\\\!\");",
          "108:     if (quoted) {",
          "109:       result = result.replace(/'/gu, `'\\\\''`);",
          "110:     }",
          "",
          "---------------"
        ],
        "test/fixtures/unix.js||test/fixtures/unix.js": [
          "File: test/fixtures/unix.js -> test/fixtures/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2216:         input: \"a!b!c\",",
          "2217:         expected: { interpolation: \"a\\\\!b\\\\!c\", noInterpolation: \"a\\\\!b\\\\!c\" },",
          "2218:       },",
          "2219:     ],",
          "2220:     \"hashtags ('#')\": [",
          "2221:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2219:       {",
          "2220:         input: \"a\\\\!\",",
          "2221:         expected: { interpolation: \"a\\\\\\\\!\", noInterpolation: \"a\\\\\\\\!\" },",
          "2222:       },",
          "2223:       {",
          "2224:         input: \"\\\\!a\",",
          "2225:         expected: { interpolation: \"\\\\\\\\\\\\!a\", noInterpolation: \"\\\\\\\\!a\" },",
          "2226:       },",
          "2227:       {",
          "2228:         input: \"a\\\\!b\",",
          "2229:         expected: { interpolation: \"a\\\\\\\\\\\\!b\", noInterpolation: \"a\\\\\\\\!b\" },",
          "2230:       },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fb4e03c07f19fda52239521a9d0b9f0b9afec1d",
      "candidate_info": {
        "commit_hash": "6fb4e03c07f19fda52239521a9d0b9f0b9afec1d",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/6fb4e03c07f19fda52239521a9d0b9f0b9afec1d",
        "files": [
          "src/win.js"
        ],
        "message": "Simplify replacements in accordance with regexp/prefer-lookaround (#879)\n\nUpdate some of the replacement in Windows specific code to equivalent\nreplacements that preserve more of the string (replace fewer characters)\n\nThis was reported by the `regexp/prefer-lookaround` rule after some\nrefactoring of the related code on a separate branch. I haven't yet\nfigured out why this problem isn't being reported by the\nesling-plugin-regexp with the current implementation.",
        "before_after_code_files": [
          "src/win.js||src/win.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/win.js||src/win.js"
          ],
          "candidate": [
            "src/win.js||src/win.js"
          ]
        }
      },
      "candidate_diff": {
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   if (interpolation) {",
          "67:     result = result",
          "68:       .replace(/\\r?\\n/gu, \" \")",
          "71:       .replace(/([\"&'(),;{|}\u2018\u2019\u201a\u201b\u201c\u201d\u201e])/gu, \"`$1\")",
          "72:       .replace(/([\\s\\u0085])/gu, \"`$1\");",
          "73:   } else if (quoted) {",
          "",
          "[Removed Lines]",
          "69:       .replace(/(^|[\\s\\u0085])([*1-6]?)(>)/gu, \"$1$2`$3\")",
          "70:       .replace(/(^|[\\s\\u0085])([#\\-:<@\\]])/gu, \"$1`$2\")",
          "",
          "[Added Lines]",
          "69:       .replace(/(?<=^|[\\s\\u0085])([*1-6]?)(>)/gu, \"$1`$2\")",
          "70:       .replace(/(?<=^|[\\s\\u0085])([#\\-:<@\\]])/gu, \"`$1\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}