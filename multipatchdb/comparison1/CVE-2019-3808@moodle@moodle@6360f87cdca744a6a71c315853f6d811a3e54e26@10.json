{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ec819146cce71d47e6d0b5403e9889d64de1db7b",
      "candidate_info": {
        "commit_hash": "ec819146cce71d47e6d0b5403e9889d64de1db7b",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ec819146cce71d47e6d0b5403e9889d64de1db7b",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019030800.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190307)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019031500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190315)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ef9c2dcf0119702d47969e2074d86a0b268338f",
      "candidate_info": {
        "commit_hash": "3ef9c2dcf0119702d47969e2074d86a0b268338f",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/3ef9c2dcf0119702d47969e2074d86a0b268338f",
        "files": [
          "admin/settings/courses.php",
          "admin/settings/subsystems.php",
          "version.php"
        ],
        "message": "MDL-65692 backup: Default settings set on install and upgrade.\n\nAsynchronous backup settings are now filled out with the defaults\non installation and upgrade.",
        "before_after_code_files": [
          "admin/settings/courses.php||admin/settings/courses.php",
          "admin/settings/subsystems.php||admin/settings/subsystems.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/courses.php||admin/settings/courses.php": [
          "File: admin/settings/courses.php -> admin/settings/courses.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:     $ADMIN->add('backups', $temp);",
          "485: }",
          "",
          "[Removed Lines]",
          "462:     if (!empty($CFG->enableasyncbackup)) {  // Only add settings if async mode is enable at site level.",
          "463:         $temp = new admin_settingpage('asyncgeneralsettings', new lang_string('asyncgeneralsettings', 'backup'));",
          "465:         $temp->add(new admin_setting_configcheckbox(",
          "466:                 'backup/backup_async_message_users',",
          "467:                 new lang_string('asyncemailenable', 'backup'),",
          "468:                 new lang_string('asyncemailenabledetail', 'backup'), 0));",
          "470:         $temp->add(new admin_setting_configtext(",
          "471:                 'backup/backup_async_message_subject',",
          "472:                 new lang_string('asyncmessagesubject', 'backup'),",
          "473:                 new lang_string('asyncmessagesubjectdetail', 'backup'),",
          "474:                 new lang_string('asyncmessagesubjectdefault', 'backup')));",
          "476:         $temp->add(new admin_setting_confightmleditor(",
          "477:                 'backup/backup_async_message',",
          "478:                 new lang_string('asyncmessagebody', 'backup'),",
          "479:                 new lang_string('asyncmessagebodydetail', 'backup'),",
          "480:                 new lang_string('asyncmessagebodydefault', 'backup')));",
          "482:         $ADMIN->add('backups', $temp);",
          "483:     }",
          "",
          "[Added Lines]",
          "462:     $temp = new admin_settingpage('asyncgeneralsettings', new lang_string('asyncgeneralsettings', 'backup'));",
          "464:     $temp->add(new admin_setting_configcheckbox('enableasyncbackup', new lang_string('enableasyncbackup', 'backup'),",
          "465:             new lang_string('enableasyncbackup_help', 'backup'), 0, 1, 0));",
          "467:     $temp->add(new admin_setting_configcheckbox(",
          "468:             'backup/backup_async_message_users',",
          "469:             new lang_string('asyncemailenable', 'backup'),",
          "470:             new lang_string('asyncemailenabledetail', 'backup'), 0));",
          "471:     $temp->hide_if('backup/backup_async_message_users', 'enableasyncbackup');",
          "473:     $temp->add(new admin_setting_configtext(",
          "474:             'backup/backup_async_message_subject',",
          "475:             new lang_string('asyncmessagesubject', 'backup'),",
          "476:             new lang_string('asyncmessagesubjectdetail', 'backup'),",
          "477:             new lang_string('asyncmessagesubjectdefault', 'backup')));",
          "478:     $temp->hide_if('backup/backup_async_message_subject', 'backup/backup_async_message_users');",
          "480:     $temp->add(new admin_setting_confightmleditor(",
          "481:             'backup/backup_async_message',",
          "482:             new lang_string('asyncmessagebody', 'backup'),",
          "483:             new lang_string('asyncmessagebodydetail', 'backup'),",
          "484:             new lang_string('asyncmessagebodydefault', 'backup')));",
          "485:     $temp->hide_if('backup/backup_async_message', 'backup/backup_async_message_users');",
          "487:     $ADMIN->add('backups', $temp);",
          "",
          "---------------"
        ],
        "admin/settings/subsystems.php||admin/settings/subsystems.php": [
          "File: admin/settings/subsystems.php -> admin/settings/subsystems.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     $optionalsubsystems->add(new admin_setting_configcheckbox('enablecoursepublishing',",
          "53:         new lang_string('enablecoursepublishing', 'hub'), new lang_string('enablecoursepublishing_help', 'hub'), 0));",
          "57: }",
          "",
          "[Removed Lines]",
          "55:     $optionalsubsystems->add(new admin_setting_configcheckbox('enableasyncbackup', new lang_string('enableasyncbackup', 'backup'),",
          "56:         new lang_string('enableasyncbackup_help', 'backup'), 0, 1, 0));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019052000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0261d1effafde4aaa2a0b137be2f8edd139e01aa",
      "candidate_info": {
        "commit_hash": "0261d1effafde4aaa2a0b137be2f8edd139e01aa",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0261d1effafde4aaa2a0b137be2f8edd139e01aa",
        "files": [
          "admin/tool/templatelibrary/amd/build/display.min.js",
          "admin/tool/templatelibrary/amd/build/display.min.js.map",
          "admin/tool/templatelibrary/amd/src/display.js",
          "admin/tool/templatelibrary/classes/api.php",
          "admin/tool/templatelibrary/classes/external.php",
          "admin/tool/templatelibrary/version.php",
          "lib/amd/build/templates.min.js",
          "lib/amd/build/templates.min.js.map",
          "lib/amd/src/templates.js",
          "lib/classes/output/external.php",
          "lib/classes/output/mustache_template_finder.php",
          "lib/tests/mustache_template_finder_test.php",
          "lib/upgrade.txt",
          "theme/upgrade.txt",
          "version.php"
        ],
        "message": "MDL-50346 core: Allow sub-directories in template names",
        "before_after_code_files": [
          "admin/tool/templatelibrary/amd/src/display.js||admin/tool/templatelibrary/amd/src/display.js",
          "admin/tool/templatelibrary/classes/api.php||admin/tool/templatelibrary/classes/api.php",
          "admin/tool/templatelibrary/classes/external.php||admin/tool/templatelibrary/classes/external.php",
          "admin/tool/templatelibrary/version.php||admin/tool/templatelibrary/version.php",
          "lib/amd/src/templates.js||lib/amd/src/templates.js",
          "lib/classes/output/external.php||lib/classes/output/external.php",
          "lib/classes/output/mustache_template_finder.php||lib/classes/output/mustache_template_finder.php",
          "lib/tests/mustache_template_finder_test.php||lib/tests/mustache_template_finder_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/templatelibrary/amd/src/display.js||admin/tool/templatelibrary/amd/src/display.js": [
          "File: admin/tool/templatelibrary/amd/src/display.js -> admin/tool/templatelibrary/amd/src/display.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:     var loadTemplate = function(templateName) {",
          "120:         var parts = templateName.split('/');",
          "121:         var component = parts.shift();",
          "124:         var promises = ajax.call([{",
          "125:             methodname: 'core_output_load_template',",
          "",
          "[Removed Lines]",
          "122:         var name = parts.shift();",
          "",
          "[Added Lines]",
          "122:         var name = parts.join('/');",
          "",
          "---------------"
        ],
        "admin/tool/templatelibrary/classes/api.php||admin/tool/templatelibrary/classes/api.php": [
          "File: admin/tool/templatelibrary/classes/api.php -> admin/tool/templatelibrary/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         foreach ($templatedirs as $templatecomponent => $dirs) {",
          "101:             foreach ($dirs as $dir) {",
          "105:                 foreach ($files as $file) {",
          "109:                     }",
          "110:                 }",
          "111:             }",
          "",
          "[Removed Lines]",
          "103:                 $files = glob($dir . '/*.mustache');",
          "106:                     $templatename = basename($file, '.mustache');",
          "107:                     if ($search == '' || strpos($templatename, $search) !== false) {",
          "108:                         $results[$templatecomponent . '/' . $templatename] = 1;",
          "",
          "[Added Lines]",
          "102:                 if (!is_dir($dir) || !is_readable($dir)) {",
          "103:                     continue;",
          "104:                 }",
          "105:                 $dir = realpath($dir);",
          "108:                 $directory = new \\RecursiveDirectoryIterator($dir);",
          "109:                 $files = new \\RecursiveIteratorIterator($directory);",
          "112:                     if (!$file->isFile()) {",
          "113:                         continue;",
          "114:                     }",
          "115:                     $filename = substr($file->getRealpath(), strlen($dir) + 1);",
          "116:                     if (strpos($templatecomponent, 'theme_') === 0) {",
          "117:                         if (strpos($filename, '/') !== false && strpos($filename, 'local/') !== 0) {",
          "122:                             continue;",
          "123:                         }",
          "124:                     }",
          "125:                     $templatename = str_replace('.mustache', '', $filename);",
          "126:                     $componenttemplatename = \"{$templatecomponent}/{$templatename}\";",
          "128:                     if ($search == '' || strpos($componenttemplatename, $search) !== false) {",
          "129:                         $results[$componenttemplatename] = 1;",
          "",
          "---------------"
        ],
        "admin/tool/templatelibrary/classes/external.php||admin/tool/templatelibrary/classes/external.php": [
          "File: admin/tool/templatelibrary/classes/external.php -> admin/tool/templatelibrary/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     public static function load_canonical_template_parameters() {",
          "106:         return new external_function_parameters(",
          "107:                 array('component' => new external_value(PARAM_COMPONENT, 'component containing the template'),",
          "109:             );",
          "110:     }",
          "",
          "[Removed Lines]",
          "108:                       'template' => new external_value(PARAM_ALPHANUMEXT, 'name of the template'))",
          "",
          "[Added Lines]",
          "108:                       'template' => new external_value(PARAM_SAFEPATH, 'name of the template'))",
          "",
          "---------------"
        ],
        "admin/tool/templatelibrary/version.php||admin/tool/templatelibrary/version.php": [
          "File: admin/tool/templatelibrary/version.php -> admin/tool/templatelibrary/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: defined('MOODLE_INTERNAL') || die();",
          "25: $plugin->requires  = 2019051100; // Requires this Moodle version.",
          "26: $plugin->component = 'tool_templatelibrary'; // Full name of the plugin (used for diagnostics).",
          "",
          "[Removed Lines]",
          "24: $plugin->version   = 2019052000; // The current plugin version (Date: YYYYMMDDXX).",
          "",
          "[Added Lines]",
          "24: $plugin->version   = 2019052002; // The current plugin version (Date: YYYYMMDDXX).",
          "",
          "---------------"
        ],
        "lib/amd/src/templates.js||lib/amd/src/templates.js": [
          "File: lib/amd/src/templates.js -> lib/amd/src/templates.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:         var parts = templateName.split('/');",
          "306:         var component = parts.shift();",
          "308:         var deferred = $.Deferred();",
          "",
          "[Removed Lines]",
          "307:         var name = parts.shift();",
          "",
          "[Added Lines]",
          "307:         var name = parts.join('/');",
          "",
          "---------------"
        ],
        "lib/classes/output/external.php||lib/classes/output/external.php": [
          "File: lib/classes/output/external.php -> lib/classes/output/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     public static function load_template_parameters() {",
          "52:         return new external_function_parameters(",
          "53:                 array('component' => new external_value(PARAM_COMPONENT, 'component containing the template'),",
          "55:                       'themename' => new external_value(PARAM_ALPHANUMEXT, 'The current theme.'),",
          "56:                       'includecomments' => new external_value(PARAM_BOOL, 'Include comments or not', VALUE_DEFAULT, false)",
          "57:                          )",
          "",
          "[Removed Lines]",
          "54:                       'template' => new external_value(PARAM_ALPHANUMEXT, 'name of the template'),",
          "",
          "[Added Lines]",
          "54:                       'template' => new external_value(PARAM_SAFEPATH, 'name of the template'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     public static function load_template_with_dependencies_parameters() {",
          "103:         return new external_function_parameters([",
          "104:             'component' => new external_value(PARAM_COMPONENT, 'component containing the template'),",
          "106:             'themename' => new external_value(PARAM_ALPHANUMEXT, 'The current theme.'),",
          "107:             'includecomments' => new external_value(PARAM_BOOL, 'Include comments or not', VALUE_DEFAULT, false),",
          "108:             'lang' => new external_value(PARAM_LANG, 'lang', VALUE_DEFAULT, null),",
          "",
          "[Removed Lines]",
          "105:             'template' => new external_value(PARAM_ALPHANUMEXT, 'name of the template'),",
          "",
          "[Added Lines]",
          "105:             'template' => new external_value(PARAM_SAFEPATH, 'name of the template'),",
          "",
          "---------------"
        ],
        "lib/classes/output/mustache_template_finder.php||lib/classes/output/mustache_template_finder.php": [
          "File: lib/classes/output/mustache_template_finder.php -> lib/classes/output/mustache_template_finder.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:             throw new coding_exception('Templates names must be specified as \"componentname/templatename\"' .",
          "108:                                        ' (' . s($name) . ' requested) ');",
          "109:         }",
          "110:         list($component, $templatename) = explode('/', $name, 2);",
          "111:         $component = clean_param($component, PARAM_COMPONENT);",
          "116:         $dirs = self::get_template_directories_for_component($component, $themename);",
          "",
          "[Removed Lines]",
          "112:         if (strpos($templatename, '/') !== false) {",
          "113:             throw new coding_exception('Templates cannot be placed in sub directories (' . s($name) . ' requested)');",
          "114:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tests/mustache_template_finder_test.php||lib/tests/mustache_template_finder_test.php": [
          "File: lib/tests/mustache_template_finder_test.php -> lib/tests/mustache_template_finder_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: class core_output_mustache_template_finder_testcase extends advanced_testcase {",
          "37:         global $CFG;",
          "73:     }",
          "81:     }",
          "84:         global $CFG;",
          "89:     }",
          "97:     }",
          "98: }",
          "",
          "[Removed Lines]",
          "36:     public function test_get_template_directories_for_component() {",
          "40:         $dirs = mustache_template_finder::get_template_directories_for_component('mod_assign', 'classic');",
          "42:         $correct = array(",
          "43:             'theme/classic/templates/mod_assign/',",
          "44:             'theme/boost/templates/mod_assign/',",
          "45:             'mod/assign/templates/'",
          "46:         );",
          "47:         foreach ($dirs as $index => $dir) {",
          "48:             $this->assertSame($dir, $CFG->dirroot . '/' . $correct[$index]);",
          "49:         }",
          "51:         $dirs = mustache_template_finder::get_template_directories_for_component('core_user', 'classic');",
          "53:         $correct = array(",
          "54:             'theme/classic/templates/core_user/',",
          "55:             'theme/boost/templates/core_user/',",
          "56:             'user/templates/'",
          "57:         );",
          "58:         foreach ($dirs as $index => $dir) {",
          "59:             $this->assertSame($dir, $CFG->dirroot . '/' . $correct[$index]);",
          "60:         }",
          "62:         $dirs = mustache_template_finder::get_template_directories_for_component('core', 'classic');",
          "64:         $correct = array(",
          "65:             'theme/classic/templates/core/',",
          "66:             'theme/boost/templates/core/',",
          "67:             'lib/templates/'",
          "68:         );",
          "69:         foreach ($dirs as $index => $dir) {",
          "70:             $this->assertSame($dir, $CFG->dirroot . '/' . $correct[$index]);",
          "71:         }",
          "72:         return;",
          "78:     public function test_invalid_get_template_directories_for_component() {",
          "80:         $dirs = mustache_template_finder::get_template_directories_for_component('octopus', 'classic');",
          "83:     public function test_get_template_filepath() {",
          "86:         $filename = mustache_template_finder::get_template_filepath('core/pix_icon', 'classic');",
          "87:         $correct = $CFG->dirroot . '/lib/templates/pix_icon.mustache';",
          "88:         $this->assertSame($correct, $filename);",
          "94:     public function test_invalid_get_template_filepath() {",
          "96:         $dirs = mustache_template_finder::get_template_filepath('core/octopus', 'classic');",
          "",
          "[Added Lines]",
          "42:     public function valid_template_directories_provider(): array {",
          "43:         return [",
          "44:             'plugin: mod_assign' => [",
          "45:                 'component' => 'mod_assign',",
          "46:                 'theme' => '',",
          "47:                 'paths' => [",
          "48:                     'theme/boost/templates/mod_assign/',",
          "49:                     'mod/assign/templates/'",
          "50:                 ],",
          "51:             ],",
          "52:             'plugin: mod_assign with classic' => [",
          "53:                 'component' => 'mod_assign',",
          "54:                 'theme' => 'classic',",
          "55:                 'paths' => [",
          "56:                     'theme/classic/templates/mod_assign/',",
          "57:                     'theme/boost/templates/mod_assign/',",
          "58:                     'mod/assign/templates/'",
          "59:                 ],",
          "60:             ],",
          "61:             'subsystem: core_user' => [",
          "62:                 'component' => 'core_user',",
          "63:                 'theme' => 'classic',",
          "64:                 'paths' => [",
          "65:                     'theme/classic/templates/core_user/',",
          "66:                     'theme/boost/templates/core_user/',",
          "67:                     'user/templates/'",
          "68:                 ],",
          "69:             ],",
          "70:             'core' => [",
          "71:                 'component' => 'core',",
          "72:                 'theme' => 'classic',",
          "73:                 'paths' => [",
          "74:                     'theme/classic/templates/core/',",
          "75:                     'theme/boost/templates/core/',",
          "76:                     'lib/templates/'",
          "77:                 ],",
          "78:             ],",
          "79:         ];",
          "80:     }",
          "90:     public function test_get_template_directories_for_component(string $component, string $theme, array $paths): void {",
          "94:         $dirs = mustache_template_finder::get_template_directories_for_component($component, $theme, $paths);",
          "96:         $correct = array_map(function($path) use ($CFG) {",
          "97:             return implode('/', [$CFG->dirroot, $path]);",
          "98:         }, $paths);",
          "100:         $this->assertEquals($correct, $dirs);",
          "108:     public function test_invalid_component_get_template_directories_for_component() {",
          "110:         mustache_template_finder::get_template_directories_for_component('octopus', 'classic');",
          "119:     public function valid_template_filepath_provider(): array {",
          "120:         return [",
          "121:             'Standard core template' => [",
          "122:                 'template' => 'core/modal',",
          "123:                 'theme' => '',",
          "124:                 'location' => 'lib/templates/modal.mustache',",
          "125:             ],",
          "126:             'Template overridden by theme' => [",
          "127:                 'template' => 'core_form/element-float-inline',",
          "128:                 'theme' => '',",
          "129:                 'location' => 'theme/boost/templates/core_form/element-float-inline.mustache',",
          "130:             ],",
          "131:             'Template overridden by theme but child theme selected' => [",
          "132:                 'template' => 'core_form/element-float-inline',",
          "133:                 'theme' => 'classic',",
          "134:                 'location' => 'theme/boost/templates/core_form/element-float-inline.mustache',",
          "135:             ],",
          "136:             'Template overridden by child theme' => [",
          "137:                 'template' => 'core/full_header',",
          "138:                 'theme' => 'classic',",
          "139:                 'location' => 'theme/classic/templates/core/full_header.mustache',",
          "140:             ],",
          "141:             'Template overridden by child theme but tested against defualt theme' => [",
          "142:                 'template' => 'core/full_header',",
          "143:                 'theme' => '',",
          "144:                 'location' => 'lib/templates/full_header.mustache',",
          "145:             ],",
          "146:             'Standard plugin template' => [",
          "147:                 'template' => 'mod_assign/grading_panel',",
          "148:                 'theme' => '',",
          "149:                 'location' => 'mod/assign/templates/grading_panel.mustache',",
          "150:             ],",
          "151:             'Subsystem template' => [",
          "152:                 'template' => 'core_user/status_details',",
          "153:                 'theme' => '',",
          "154:                 'location' => 'user/templates/status_details.mustache',",
          "155:             ],",
          "156:             'Theme own template' => [",
          "157:                 'template' => 'theme_classic/columns',",
          "158:                 'theme' => '',",
          "159:                 'location' => 'theme/classic/templates/columns.mustache',",
          "160:             ],",
          "161:             'Theme overridden template against that theme' => [",
          "162:                 'template' => 'theme_classic/navbar',",
          "163:                 'theme' => 'classic',",
          "164:                 'location' => 'theme/classic/templates/navbar.mustache',",
          "165:             ],",
          "169:             'Theme overridden template against the default theme' => [",
          "170:                 'template' => 'theme_classic/navbar',",
          "171:                 'theme' => '',",
          "172:                 'location' => 'theme/classic/templates/navbar.mustache',",
          "173:             ],",
          "174:         ];",
          "175:     }",
          "185:     public function test_get_template_filepath(string $template, string $theme, string $location) {",
          "188:         $filename = mustache_template_finder::get_template_filepath($template, $theme);",
          "189:         $this->assertEquals(\"{$CFG->dirroot}/{$location}\", $filename);",
          "197:     public function test_invalid_component_get_template_filepath() {",
          "198:         mustache_template_finder::get_template_filepath('core/octopus', 'classic');",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019080100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019080700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d98de3fc1375def3469f465f977c23144b1fe3c",
      "candidate_info": {
        "commit_hash": "6d98de3fc1375def3469f465f977c23144b1fe3c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6d98de3fc1375def3469f465f977c23144b1fe3c",
        "files": [
          "admin/settings/courses.php",
          "course/classes/category.php",
          "course/classes/management_renderer.php",
          "course/lib.php",
          "course/pending.php",
          "course/request.php",
          "course/request_form.php",
          "course/tests/behat/course_request.feature",
          "course/tests/courselib_test.php",
          "course/tests/courserequest_test.php",
          "lang/en/admin.php",
          "lang/en/deprecated.txt",
          "lib/db/access.php",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-66740-master' of git://github.com/marinaglancy/moodle",
        "before_after_code_files": [
          "admin/settings/courses.php||admin/settings/courses.php",
          "course/classes/category.php||course/classes/category.php",
          "course/classes/management_renderer.php||course/classes/management_renderer.php",
          "course/lib.php||course/lib.php",
          "course/pending.php||course/pending.php",
          "course/request.php||course/request.php",
          "course/request_form.php||course/request_form.php",
          "course/tests/behat/course_request.feature||course/tests/behat/course_request.feature",
          "course/tests/courselib_test.php||course/tests/courselib_test.php",
          "course/tests/courserequest_test.php||course/tests/courserequest_test.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lib/db/access.php||lib/db/access.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ],
          "candidate": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/courses.php||admin/settings/courses.php": [
          "File: admin/settings/courses.php -> admin/settings/courses.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:     $temp = new admin_settingpage('courserequest', new lang_string('courserequest'));",
          "169:     $temp->add(new admin_setting_users_with_capability('courserequestnotify', new lang_string('courserequestnotify', 'admin'), new lang_string('configcourserequestnotify2', 'admin'), array(), 'moodle/site:approvecourse'));",
          "170:     $ADMIN->add('courses', $temp);",
          "",
          "[Removed Lines]",
          "166:     $temp->add(new admin_setting_configcheckbox('enablecourserequests', new lang_string('enablecourserequests', 'admin'), new lang_string('configenablecourserequests', 'admin'), 0));",
          "167:     $temp->add(new admin_settings_coursecat_select('defaultrequestcategory', new lang_string('defaultrequestcategory', 'admin'), new lang_string('configdefaultrequestcategory', 'admin'), 1));",
          "168:     $temp->add(new admin_setting_configcheckbox('requestcategoryselection', new lang_string('requestcategoryselection', 'admin'), new lang_string('configrequestcategoryselection', 'admin'), 0));",
          "",
          "[Added Lines]",
          "166:     $temp->add(new admin_setting_configcheckbox('enablecourserequests',",
          "167:         new lang_string('enablecourserequests', 'admin'),",
          "168:         new lang_string('configenablecourserequests', 'admin'), 1));",
          "169:     $temp->add(new admin_settings_coursecat_select('defaultrequestcategory',",
          "170:         new lang_string('defaultrequestcategory', 'admin'),",
          "171:         new lang_string('configdefaultrequestcategory', 'admin'), 1));",
          "172:     $temp->add(new admin_setting_configcheckbox('lockrequestcategory',",
          "173:         new lang_string('lockrequestcategory', 'admin'),",
          "174:         new lang_string('configlockrequestcategory', 'admin'), 0));",
          "",
          "---------------"
        ],
        "course/classes/category.php||course/classes/category.php": [
          "File: course/classes/category.php -> course/classes/category.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2975:     public function can_request_course() {",
          "2981:     }",
          "",
          "[Removed Lines]",
          "2976:         global $CFG;",
          "2977:         if (empty($CFG->enablecourserequests) || $this->id != $CFG->defaultrequestcategory) {",
          "2978:             return false;",
          "2979:         }",
          "2980:         return !$this->can_create_course() && has_capability('moodle/course:request', $this->get_context());",
          "",
          "[Added Lines]",
          "2976:         return course_request::can_request($this->get_context());",
          "",
          "---------------"
        ],
        "course/classes/management_renderer.php||course/classes/management_renderer.php": [
          "File: course/classes/management_renderer.php -> course/classes/management_renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:         }",
          "665:         if ($category->can_request_course()) {",
          "668:             $actions[] = html_writer::link($url, get_string('requestcourse'));",
          "669:         }",
          "670:         if ($category->can_resort_courses()) {",
          "",
          "[Removed Lines]",
          "667:             $url = new moodle_url('/course/request.php', array('return' => 'management'));",
          "",
          "[Added Lines]",
          "667:             $url = new moodle_url('/course/request.php', array('category' => $category->id, 'return' => 'management'));",
          "",
          "---------------"
        ],
        "course/lib.php||course/lib.php": [
          "File: course/lib.php -> course/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "757: function print_course_request_buttons($context) {",
          "758:     global $CFG, $DB, $OUTPUT;",
          "759:     if (empty($CFG->enablecourserequests)) {",
          "760:         return;",
          "761:     }",
          "765:     }",
          "767:     if (has_capability('moodle/site:approvecourse', $context)) {",
          "",
          "[Removed Lines]",
          "762:     if (!has_capability('moodle/course:create', $context) && has_capability('moodle/course:request', $context)) {",
          "764:         echo $OUTPUT->single_button(new moodle_url('/course/request.php'), get_string('requestcourse'), 'get');",
          "",
          "[Added Lines]",
          "762:     if (course_request::can_request($context)) {",
          "764:         $params = [];",
          "765:         if ($context instanceof context_coursecat) {",
          "766:             $params['category'] = $context->instanceid;",
          "767:         }",
          "768:         echo $OUTPUT->single_button(new moodle_url('/course/request.php', $params),",
          "769:             get_string('requestcourse'), 'get');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2833:         $data->requester = $USER->id;",
          "2837:             $data->category = $CFG->defaultrequestcategory;",
          "2838:         }",
          "",
          "[Removed Lines]",
          "2836:         if (empty($data->category) || empty($CFG->requestcategoryselection)) {",
          "",
          "[Added Lines]",
          "2841:         if (empty($data->category) || !empty($CFG->lockrequestcategory)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2972:         return $this->properties->collision;",
          "2973:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2988:     public function can_approve() {",
          "2989:         global $CFG;",
          "2990:         $category = null;",
          "2991:         if ($this->properties->category) {",
          "2992:             $category = core_course_category::get($this->properties->category, IGNORE_MISSING);",
          "2993:         } else if ($CFG->defaultrequestcategory) {",
          "2994:             $category = core_course_category::get($CFG->defaultrequestcategory, IGNORE_MISSING);",
          "2995:         }",
          "2996:         if ($category) {",
          "2997:             return has_capability('moodle/site:approvecourse', $category->get_context());",
          "2998:         }",
          "3002:         return has_all_capabilities(['moodle/site:approvecourse', 'moodle/course:changecategory'], context_system::instance());",
          "3003:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2984:     public function get_category() {",
          "2985:         global $CFG;",
          "2995:         }",
          "2997:     }",
          "",
          "[Removed Lines]",
          "2989:         if (empty($this->properties->category) || !has_capability('moodle/course:changecategory', context_system::instance()) ||",
          "2990:                 (!$category = core_course_category::get($this->properties->category, IGNORE_MISSING, true))) {",
          "2991:             $category = core_course_category::get($CFG->defaultrequestcategory, IGNORE_MISSING, true);",
          "2992:         }",
          "2993:         if (!$category) {",
          "2994:             $category = core_course_category::get_default();",
          "2996:         return $category;",
          "",
          "[Added Lines]",
          "3016:         if ($this->properties->category && ($category = core_course_category::get($this->properties->category, IGNORE_MISSING))) {",
          "3017:             return $category;",
          "3018:         } else if ($CFG->defaultrequestcategory &&",
          "3019:                 ($category = core_course_category::get($CFG->defaultrequestcategory, IGNORE_MISSING))) {",
          "3020:             return $category;",
          "3021:         } else {",
          "3022:             return core_course_category::get_default();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3119:         $eventdata->notification      = 1;",
          "3120:         message_send($eventdata);",
          "3121:     }",
          "3122: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3156:     public static function can_request(context $context) {",
          "3157:         global $CFG;",
          "3158:         if (empty($CFG->enablecourserequests)) {",
          "3159:             return false;",
          "3160:         }",
          "3161:         if (has_capability('moodle/course:create', $context)) {",
          "3162:             return false;",
          "3163:         }",
          "3165:         if ($context instanceof context_system) {",
          "3166:             $defaultcontext = context_coursecat::instance($CFG->defaultrequestcategory, IGNORE_MISSING);",
          "3167:             return $defaultcontext &&",
          "3168:                 has_capability('moodle/course:request', $defaultcontext);",
          "3169:         } else if ($context instanceof context_coursecat) {",
          "3170:             if (!$CFG->lockrequestcategory || $CFG->defaultrequestcategory == $context->instanceid) {",
          "3171:                 return has_capability('moodle/course:request', $context);",
          "3172:             }",
          "3173:         }",
          "3174:         return false;",
          "3175:     }",
          "",
          "---------------"
        ],
        "course/pending.php||course/pending.php": [
          "File: course/pending.php -> course/pending.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: $reject = optional_param('reject', 0, PARAM_INT);",
          "41: $baseurl = $CFG->wwwroot . '/course/pending.php';",
          "45: if (!empty($approve) and confirm_sesskey()) {",
          "",
          "[Removed Lines]",
          "42: admin_externalpage_setup('coursespending');",
          "",
          "[Added Lines]",
          "42: $context = context_system::instance();",
          "43: if (has_capability('moodle/site:approvecourse', $context)) {",
          "46:     admin_externalpage_setup('coursespending');",
          "47: } else {",
          "48:     require_login(null, false);",
          "49:     $categories = core_course_category::make_categories_list('moodle/site:approvecourse');",
          "50:     if (!$categories) {",
          "51:         require_capability('moodle/site:approvecourse', $context);",
          "52:     }",
          "53:     $PAGE->set_context($context);",
          "54:     $PAGE->set_url(new moodle_url('/course/pending.php'));",
          "55: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     $courseid = $course->approve();",
          "50:     if ($courseid !== false) {",
          "52:     } else {",
          "53:         print_error('courseapprovedfailed');",
          "54:     }",
          "",
          "[Removed Lines]",
          "51:         redirect(new moodle_url('/course/edit.php', ['id' => $courseid, 'returnto' => 'pending']));",
          "",
          "[Added Lines]",
          "64:         if (has_capability('moodle/course:update', context_course::instance($courseid))) {",
          "65:             redirect(new moodle_url('/course/edit.php', ['id' => $courseid, 'returnto' => 'pending']));",
          "66:         } else {",
          "67:             redirect(new moodle_url('/course/view.php', ['id' => $courseid]));",
          "68:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:         $course->check_shortname_collision();",
          "112:         $category = $course->get_category();",
          "114:         $row = array();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:         if (!$course->can_approve()) {",
          "130:             continue;",
          "131:         }",
          "",
          "---------------"
        ],
        "course/request.php||course/request.php": [
          "File: course/request.php -> course/request.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: $url = new moodle_url('/course/request.php');",
          "32: $return = optional_param('return', null, PARAM_ALPHANUMEXT);",
          "33: if ($return === 'management') {",
          "34:     $url->param('return', $return);",
          "35:     $returnurl = new moodle_url('/course/management.php', array('categoryid' => $CFG->defaultrequestcategory));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: $categoryid = optional_param('category', null, PARAM_INT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: if (empty($CFG->enablecourserequests)) {",
          "48:     print_error('courserequestdisabled', '', $returnurl);",
          "49: }",
          "51: $PAGE->set_context($context);",
          "52: require_capability('moodle/course:request', $context);",
          "56: $requestform = new course_request_form($url);",
          "57: $requestform->set_data($data);",
          "",
          "[Removed Lines]",
          "50: $context = context_system::instance();",
          "55: $data = course_request::prepare();",
          "",
          "[Added Lines]",
          "52: if ($CFG->lockrequestcategory) {",
          "54:     $categoryid = null;",
          "55: } else if (!$categoryid) {",
          "58:     $list = core_course_category::make_categories_list('moodle/course:request');",
          "59:     $categoryid = array_key_exists($CFG->defaultrequestcategory, $list) ? $CFG->defaultrequestcategory : key($list);",
          "60: }",
          "62: $context = context_coursecat::instance($categoryid ?: $CFG->defaultrequestcategory);",
          "67: $data = $categoryid ? (object)['category' => $categoryid] : null;",
          "68: $data = course_request::prepare($data);",
          "",
          "---------------"
        ],
        "course/request_form.php||course/request_form.php": [
          "File: course/request_form.php -> course/request_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         $mform->addRule('shortname', get_string('missingshortname'), 'required', null, 'client');",
          "69:         $mform->setType('shortname', PARAM_TEXT);",
          "73:             $mform->addElement('select', 'category', get_string('coursecategory'), $displaylist);",
          "74:             $mform->setDefault('category', $CFG->defaultrequestcategory);",
          "75:             $mform->addHelpButton('category', 'coursecategory');",
          "",
          "[Removed Lines]",
          "71:         if (!empty($CFG->requestcategoryselection)) {",
          "72:             $displaylist = core_course_category::make_categories_list();",
          "",
          "[Added Lines]",
          "71:         if (empty($CFG->lockrequestcategory)) {",
          "72:             $displaylist = core_course_category::make_categories_list('moodle/course:request');",
          "",
          "---------------"
        ],
        "course/tests/behat/course_request.feature||course/tests/behat/course_request.feature": [
          "File: course/tests/behat/course_request.feature -> course/tests/behat/course_request.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: @core @core_course",
          "2: Feature: Users can request and approve courses",
          "3:   As a moodle admin",
          "4:   In order to improve course creation process",
          "5:   I need to be able to enable course approval",
          "7:   Background:",
          "8:     Given the following \"users\" exist:",
          "9:       | username | firstname | lastname | email |",
          "10:       | user1 | User | 1 | user1@example.com |",
          "11:       | user2 | User | 2 | user2@example.com |",
          "12:       | user3 | User | 3 | user3@example.com |",
          "14:   Scenario: Simple course request workflow",
          "15:     Given the following \"system role assigns\" exist:",
          "16:       | user  | course | role |",
          "17:       | user2 | Acceptance test site | manager |",
          "18:     Given I log in as \"admin\"",
          "19:     And I set the following administration settings values:",
          "20:       | lockrequestcategory | 1 |",
          "21:     And I set the following system permissions of \"Authenticated user\" role:",
          "22:       | capability | permission |",
          "23:       | moodle/course:request | Allow |",
          "24:     And I log out",
          "25:     When I log in as \"user1\"",
          "26:     And I am on course index",
          "27:     And I press \"Request a course\"",
          "28:     And I set the following fields to these values:",
          "29:       | Course full name  | My new course |",
          "30:       | Course short name | Mynewcourse   |",
          "31:       | Supporting information | pretty please |",
          "32:     And I press \"Request a course\"",
          "33:     And I should see \"Your course request has been saved successfully.\"",
          "34:     And I press \"Continue\"",
          "35:     And I am on course index",
          "36:     And I should not see \"My new course\"",
          "37:     And I log out",
          "38:     And I log in as \"user2\"",
          "39:     And I am on course index",
          "40:     And I press \"Courses pending approval\"",
          "41:     And I should see \"Miscellaneous\" in the \"My new course\" \"table_row\"",
          "42:     And I click on \"Approve\" \"button\" in the \"My new course\" \"table_row\"",
          "43:     And I press \"Save and return\"",
          "44:     And I should see \"There are no courses pending approval\"",
          "45:     And I press \"Back to course listing\"",
          "46:     And I should see \"My new course\"",
          "47:     And I log out",
          "48:     And I log in as \"user1\"",
          "49:     And I am on course index",
          "50:     And I follow \"My new course\"",
          "51:     And I navigate to course participants",
          "52:     And I should see \"Teacher\" in the \"User 1\" \"table_row\"",
          "53:     And I log out",
          "55:   Scenario: Course request with category selection",
          "56:     Given the following \"categories\" exist:",
          "57:       | name             | category | idnumber |",
          "58:       | Science category | 0        | SCI |",
          "59:       | English category | 0        | ENG |",
          "60:       | Other category   | 0        | MISC |",
          "61:     Given the following \"roles\" exist:",
          "62:       | name             | shortname       | description      | archetype      |",
          "63:       | Course requestor | courserequestor | My custom role 1 |                |",
          "64:     And the following \"role assigns\" exist:",
          "65:       | user  | role            | contextlevel | reference |",
          "66:       | user1 | courserequestor | Category     | SCI       |",
          "67:       | user1 | courserequestor | Category     | ENG       |",
          "68:       | user2 | manager         | Category     | SCI       |",
          "69:       | user3 | manager         | Category     | ENG       |",
          "70:     Given I log in as \"admin\"",
          "71:     And I set the following system permissions of \"Course requestor\" role:",
          "72:       | capability            | permission |",
          "73:       | moodle/course:request | Allow      |",
          "74:     And I log out",
          "75:     And I log in as \"user1\"",
          "76:     And I am on course index",
          "77:     And I follow \"English category\"",
          "78:     And I press \"Request a course\"",
          "79:     And the field \"Course category\" matches value \"English category\"",
          "80:     And I set the following fields to these values:",
          "81:       | Course full name  | My new course |",
          "82:       | Course short name | Mynewcourse   |",
          "83:       | Supporting information | pretty please |",
          "84:     And I press \"Request a course\"",
          "85:     And I log out",
          "86:     And I log in as \"user2\"",
          "87:     And I am on course index",
          "88:     And I follow \"English category\"",
          "89:     And \"Courses pending approval\" \"button\" should not exist",
          "90:     And I am on course index",
          "91:     And I follow \"Science category\"",
          "92:     And I press \"Courses pending approval\"",
          "93:     And I should not see \"Mynewcourse\"",
          "94:     And I press \"Back to course listing\"",
          "95:     And I log out",
          "96:     And I log in as \"user3\"",
          "97:     And I am on course index",
          "98:     And I follow \"English category\"",
          "99:     And I press \"Courses pending approval\"",
          "100:     And I should see \"English category\" in the \"Mynewcourse\" \"table_row\"",
          "101:     And I click on \"Approve\" \"button\" in the \"Mynewcourse\" \"table_row\"",
          "102:     And I press \"Save and return\"",
          "103:     And I am on course index",
          "104:     And I follow \"English category\"",
          "105:     And I should see \"My new course\"",
          "106:     And I log out",
          "",
          "---------------"
        ],
        "course/tests/courselib_test.php||course/tests/courselib_test.php": [
          "File: course/tests/courselib_test.php -> course/tests/courselib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "6811:         course_delete_module($moduleinstances[$indextodelete]->cmid, true); // Try to delete the instance asynchronously.",
          "6812:         $this->assertEquals($expected, course_modules_pending_deletion($course->id, $gradable));",
          "6813:     }",
          "6814: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6818:     public function test_can_request_course() {",
          "6819:         global $CFG, $DB;",
          "6820:         $this->resetAfterTest();",
          "6822:         $user = $this->getDataGenerator()->create_user();",
          "6823:         $cat1 = $CFG->defaultrequestcategory;",
          "6824:         $cat2 = $this->getDataGenerator()->create_category()->id;",
          "6825:         $cat3 = $this->getDataGenerator()->create_category()->id;",
          "6826:         $context1 = context_coursecat::instance($cat1);",
          "6827:         $context2 = context_coursecat::instance($cat2);",
          "6828:         $context3 = context_coursecat::instance($cat3);",
          "6829:         $this->setUser($user);",
          "6832:         $this->assertFalse(course_request::can_request(context_system::instance()));",
          "6833:         $this->assertFalse(course_request::can_request($context1));",
          "6834:         $this->assertFalse(course_request::can_request($context2));",
          "6835:         $this->assertFalse(course_request::can_request($context3));",
          "6838:         $userroleid = $DB->get_field('role', 'id', ['shortname' => 'user']);",
          "6839:         assign_capability('moodle/course:request', CAP_ALLOW, $userroleid,",
          "6840:             context_system::instance()->id);",
          "6841:         accesslib_clear_all_caches_for_unit_testing();",
          "6844:         $CFG->lockrequestcategory = 1;",
          "6847:         $this->assertTrue(course_request::can_request(context_system::instance()));",
          "6848:         $this->assertTrue(course_request::can_request($context1));",
          "6849:         $this->assertFalse(course_request::can_request($context2));",
          "6850:         $this->assertFalse(course_request::can_request($context3));",
          "6853:         $CFG->lockrequestcategory = 0;",
          "6854:         $this->assertTrue(course_request::can_request(context_system::instance()));",
          "6855:         $this->assertTrue(course_request::can_request($context1));",
          "6856:         $this->assertTrue(course_request::can_request($context2));",
          "6857:         $this->assertTrue(course_request::can_request($context3));",
          "6860:         $roleid = create_role('Test role', 'testrole', 'Test role description');",
          "6861:         assign_capability('moodle/course:request', CAP_PROHIBIT, $roleid,",
          "6862:             $context2->id, true);",
          "6863:         role_assign($roleid, $user->id, $context2->id);",
          "6864:         accesslib_clear_all_caches_for_unit_testing();",
          "6866:         $this->assertTrue(course_request::can_request(context_system::instance()));",
          "6867:         $this->assertTrue(course_request::can_request($context1));",
          "6868:         $this->assertFalse(course_request::can_request($context2));",
          "6869:         $this->assertTrue(course_request::can_request($context3));",
          "6872:         $CFG->enablecourserequests = false;",
          "6873:         $this->assertFalse(course_request::can_request(context_system::instance()));",
          "6874:         $this->assertFalse(course_request::can_request($context1));",
          "6875:         $this->assertFalse(course_request::can_request($context2));",
          "6876:         $this->assertFalse(course_request::can_request($context3));",
          "6877:     }",
          "6882:     public function test_can_approve_course_request() {",
          "6883:         global $CFG;",
          "6884:         $this->resetAfterTest();",
          "6886:         $requestor = $this->getDataGenerator()->create_user();",
          "6887:         $user = $this->getDataGenerator()->create_user();",
          "6888:         $cat1 = $CFG->defaultrequestcategory;",
          "6889:         $cat2 = $this->getDataGenerator()->create_category()->id;",
          "6890:         $cat3 = $this->getDataGenerator()->create_category()->id;",
          "6893:         $CFG->enablecourserequests = true;",
          "6894:         $CFG->lockrequestcategory = 0;",
          "6895:         $this->setUser($requestor);",
          "6896:         $requestdata = ['summary_editor' => ['text' => '', 'format' => 0], 'name' => 'Req', 'reason' => 'test'];",
          "6897:         $request1 = course_request::create((object)($requestdata));",
          "6898:         $request2 = course_request::create((object)($requestdata + ['category' => $cat2]));",
          "6899:         $request3 = course_request::create((object)($requestdata + ['category' => $cat3]));",
          "6901:         $this->setUser($user);",
          "6903:         $roleid = create_role('Test role', 'testrole', 'Test role description');",
          "6904:         assign_capability('moodle/site:approvecourse', CAP_ALLOW, $roleid,",
          "6905:             context_system::instance()->id, true);",
          "6906:         role_assign($roleid, $user->id, context_coursecat::instance($cat2)->id);",
          "6907:         accesslib_clear_all_caches_for_unit_testing();",
          "6909:         $this->assertFalse($request1->can_approve());",
          "6910:         $this->assertTrue($request2->can_approve());",
          "6911:         $this->assertFalse($request3->can_approve());",
          "6914:         core_course_category::get($cat2, MUST_EXIST, true)->delete_full(false);",
          "6915:         $this->assertFalse($request2->can_approve());",
          "6917:         $this->setAdminUser();",
          "6918:         $this->assertTrue($request2->can_approve());",
          "6919:     }",
          "",
          "---------------"
        ],
        "course/tests/courserequest_test.php||course/tests/courserequest_test.php": [
          "File: course/tests/courserequest_test.php -> course/tests/courserequest_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:         $defaultcategory = $DB->get_field_select('course_categories', \"MIN(id)\", \"parent=0\");",
          "39:         set_config('enablecourserequests', 1);",
          "41:         set_config('defaultrequestcategory', $defaultcategory);",
          "",
          "[Removed Lines]",
          "40:         set_config('requestcategoryselection', 0);",
          "",
          "[Added Lines]",
          "40:         set_config('lockrequestcategory', 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:         set_config('defaultrequestcategory', $cat3->id);",
          "74:         $data->category = $cat1->id;",
          "75:         $cr = course_request::create($data);",
          "76:         $this->assertEquals($cat1->id, $cr->category);",
          "",
          "[Removed Lines]",
          "73:         set_config('requestcategoryselection', 1);",
          "",
          "[Added Lines]",
          "73:         set_config('lockrequestcategory', 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:         $defaultcategory = $DB->get_field_select('course_categories', \"MIN(id)\", \"parent=0\");",
          "85:         set_config('enablecourserequests', 1);",
          "87:         set_config('defaultrequestcategory', $defaultcategory);",
          "90:         $cat1 = $this->getDataGenerator()->create_category();",
          "91:         $cat2 = $this->getDataGenerator()->create_category();",
          "93:         $requester = $this->getDataGenerator()->create_user();",
          "95:         $data = new stdClass();",
          "96:         $data->fullname = 'H\u0259llo World!';",
          "",
          "[Removed Lines]",
          "86:         set_config('requestcategoryselection', 0);",
          "",
          "[Added Lines]",
          "86:         set_config('lockrequestcategory', 1);",
          "95:         $roleid = create_role('Course requestor role', 'courserequestor', '');",
          "96:         assign_capability('moodle/course:request', CAP_ALLOW, $roleid,",
          "97:             context_system::instance()->id);",
          "98:         role_assign($roleid, $requester->id, context_system::instance()->id);",
          "99:         accesslib_clear_all_caches_for_unit_testing();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:         $this->assertEquals($defaultcategory, $course->category);",
          "120:         set_config('defaultrequestcategory', $cat2->id);",
          "121:         $data->shortname .= ' 2nd';",
          "122:         $data->category = $cat1->id;",
          "",
          "[Removed Lines]",
          "119:         set_config('requestcategoryselection', 1);",
          "",
          "[Added Lines]",
          "125:         set_config('lockrequestcategory', 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:         $this->setAdminUser();",
          "140:         set_config('enablecourserequests', 1);",
          "142:         set_config('defaultrequestcategory', $DB->get_field_select('course_categories', \"MIN(id)\", \"parent=0\"));",
          "144:         $requester = $this->getDataGenerator()->create_user();",
          "146:         $data = new stdClass();",
          "147:         $data->fullname = 'H\u0259llo World!';",
          "",
          "[Removed Lines]",
          "141:         set_config('requestcategoryselection', 0);",
          "",
          "[Added Lines]",
          "147:         set_config('lockrequestcategory', 1);",
          "152:         $roleid = create_role('Course requestor role', 'courserequestor', '');",
          "153:         assign_capability('moodle/course:request', CAP_ALLOW, $roleid,",
          "154:             context_system::instance()->id);",
          "155:         role_assign($roleid, $requester->id, context_system::instance()->id);",
          "156:         accesslib_clear_all_caches_for_unit_testing();",
          "",
          "---------------"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "203: $string['configdebugpageinfo'] = 'Enable if you want page information printed in page footer.';",
          "204: $string['configdebugvalidators'] = 'Enable if you want to have links to external validator servers in page footer. You may need to create new user with username <em>w3cvalidator</em>, and enable guest access. These changes may allow unauthorized access to server, do not enable on production sites!';",
          "205: $string['configdefaulthomepage'] = 'This determines the first link in the navigation for logged-in users.';",
          "207: $string['configdefaultrequestedcategory'] = 'Default category to put courses that were requested into, if they\\'re approved.';",
          "208: $string['configdefaultuserroleid'] = 'All logged in users will be given the capabilities of the role you specify here, at the site level, in ADDITION to any other roles they may have been given.  The default is the Authenticated user role.  Note that this will not conflict with other roles they have unless you prohibit capabilities, it just ensures that all users have capabilities that are not assignable at the course level (eg post blog entries, manage own calendar, etc).';",
          "209: $string['configdeleteincompleteusers'] = 'After this period, any account without the first name, last name or email field filled in is deleted.';",
          "",
          "[Removed Lines]",
          "206: $string['configdefaultrequestcategory'] = 'Courses requested by users will be automatically placed in this category.';",
          "",
          "[Added Lines]",
          "206: $string['configdefaultrequestcategory'] = 'Courses requested by users will be placed in this category if the category is not specified.';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225: $string['configemailsubjectprefix'] = 'Text to be prefixed to the subject line of all outgoing mail.';",
          "226: $string['configenablecalendarexport'] = 'Enable exporting or subscribing to calendars.';",
          "227: $string['configenablecomments'] = 'Enable comments';",
          "229: $string['configenablemobilewebservice'] = 'Enable mobile service for the official Moodle app or other app requesting it. For more information, read the {$a}';",
          "230: $string['configenablerssfeeds'] = 'If enabled, RSS feeds are generated by various features across the site, such as blogs, forums, database activities and glossaries. Note that RSS feeds also need to be enabled for the particular activity modules.';",
          "231: $string['configenablerssfeedsdisabled'] = 'It is not available because RSS feeds are disabled in all the Site. To enable them, go to the Variables settings under Admin Configuration.';",
          "",
          "[Removed Lines]",
          "228: $string['configenablecourserequests'] = 'This will allow any user to request a course be created.';",
          "",
          "[Added Lines]",
          "228: $string['configenablecourserequests'] = 'Enable course request functionality. Users with capability to request courses but without capability to create courses will be able to request courses.';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "270: $string['configlangmenu'] = 'Choose whether or not you want to display the general-purpose language menu on the home page, login page etc.  This does not affect the user\\'s ability to set the preferred language in their own profile.';",
          "271: $string['configlatinexcelexport'] = 'Choose the encoding for Excel exports.';",
          "272: $string['configlocale'] = 'Choose a sitewide locale - this will override the format and language of dates for all language packs (though names of days in calendar are not affected). You need to have this locale data installed on your operating system (eg for linux en_US.UTF-8 or es_ES.UTF-8). In most cases this field should be left blank.';",
          "273: $string['configloglifetime'] = 'This specifies the length of time you want to keep logs about user activity.  Logs that are older than this age are automatically deleted.  It is best to keep logs as long as possible, in case you need them, but if you have a very busy server and are experiencing performance problems, then you may want to lower the log lifetime. Values lower than 30 are not recommended because statistics may not work properly.';",
          "274: $string['configlookahead'] = 'Days to look ahead';",
          "275: $string['configmailnewline'] = 'Newline characters used in mail messages. CRLF is required according to RFC 822bis, some mail servers do automatic conversion from LF to CRLF, other mail servers do incorrect conversion from CRLF to CRCRLF, yet others reject mails with bare LF (qmail for example). Try changing this setting if you are having problems with undelivered emails or double newlines.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273: $string['configlockrequestcategory'] = 'Only allow course requests in the default course request category. This is a legacy setting, it is better not to use it but instead assign capability to request courses in the appropriate course category context';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "317: $string['configproxyuser'] = 'Username needed to access internet through proxy if required, empty if none (PHP cURL extension required).';",
          "318: $string['configrecaptchaprivatekey'] = 'String of characters (secret key) used to communicate between your Moodle server and the recaptcha server. ReCAPTCHA keys can be obtained from <a target=\"_blank\" href=\"https://www.google.com/recaptcha\">Google reCAPTCHA</a>.';",
          "319: $string['configrecaptchapublickey'] = 'String of characters (site key) used to display the reCAPTCHA element in the signup form. ReCAPTCHA keys can be obtained from <a target=\"_blank\" href=\"https://www.google.com/recaptcha\">Google reCAPTCHA</a>.';",
          "321: $string['configrequestedstudentname'] = 'Word for student used in requested courses';",
          "322: $string['configrequestedstudentsname'] = 'Word for students used in requested courses';",
          "323: $string['configrequestedteachername'] = 'Word for teacher used in requested courses';",
          "",
          "[Removed Lines]",
          "320: $string['configrequestcategoryselection'] = 'Allow the selection of a category when requesting a course.';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "716: $string['lockoutthreshold_desc'] = 'Select number of failed login attempts that result in account lockout. This feature may be abused in denial of service attacks.';",
          "717: $string['lockoutwindow'] = 'Account lockout observation window';",
          "718: $string['lockoutwindow_desc'] = 'Observation time for lockout threshold, if there are no failed attempts the threshold counter is reset after this time.';",
          "719: $string['log'] = 'Logs';",
          "720: $string['logguests'] = 'Log guest access';",
          "721: $string['logguests_help'] = 'This setting enables logging of actions by guest account and not logged in users. High profile sites may want to disable this logging for performance reasons. It is recommended to keep this setting enabled on production sites.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719: $string['lockrequestcategory'] = 'Lock category for the course requests';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1045: $string['purgeselectedcachesfinished'] = 'The selected caches were purged.';",
          "1046: $string['purgetemplates'] = 'Templates';",
          "1047: $string['purgethemecache'] = 'Themes';",
          "1049: $string['restorecourse'] = 'Restore course';",
          "1050: $string['restorernewroleid'] = 'Restorers\\' role in courses';",
          "1051: $string['restorernewroleid_help'] = 'If the user does not already have the permission to manage the newly restored course, the user is automatically assigned this role and enrolled if necessary. Select \"None\" if you do not want restorers to be able to manage every restored course.';",
          "",
          "[Removed Lines]",
          "1048: $string['requestcategoryselection'] = 'Enable category selection';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1436: $string['registermoodleorgli1'] = 'You are added to a low-volume mailing list for important notifications such as security alerts and new releases of Moodle.';",
          "1437: $string['registermoodleorgli2'] = 'Statistics about your site will be added to the {$a} of the worldwide Moodle community.';",
          "1438: $string['registerwithmoodleorg'] = 'Register your site';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1439: $string['configrequestcategoryselection'] = 'Allow the selection of a category when requesting a course.';",
          "1440: $string['requestcategoryselection'] = 'Enable category selection';",
          "",
          "---------------"
        ],
        "lib/db/access.php||lib/db/access.php": [
          "File: lib/db/access.php -> lib/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:         'riskbitmask' => RISK_XSS,",
          "135:         'captype' => 'write',",
          "137:         'archetypes' => array(",
          "138:             'manager' => CAP_ALLOW",
          "139:         )",
          "",
          "[Removed Lines]",
          "136:         'contextlevel' => CONTEXT_SYSTEM,",
          "",
          "[Added Lines]",
          "136:         'contextlevel' => CONTEXT_COURSECAT,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "783:     'moodle/course:request' => array(",
          "784:         'captype' => 'write',",
          "789:     ),",
          "791:     'moodle/course:delete' => array(",
          "",
          "[Removed Lines]",
          "785:         'contextlevel' => CONTEXT_SYSTEM,",
          "786:         'archetypes' => array(",
          "787:             'user' => CAP_ALLOW,",
          "788:         )",
          "",
          "[Added Lines]",
          "785:         'contextlevel' => CONTEXT_COURSECAT,",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3611:         upgrade_main_savepoint(true, 2019100900.00);",
          "3612:     }",
          "3614:     return true;",
          "3615: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3614:     if ($oldversion < 2019101600.01) {",
          "3617:         set_config('lockrequestcategory', !$CFG->requestcategoryselection);",
          "3619:         upgrade_main_savepoint(true, 2019101600.01);",
          "3620:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019101600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019101600.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92adfa3cd266f4ee3a6d8dfcd8f976cb6bd93c73",
      "candidate_info": {
        "commit_hash": "92adfa3cd266f4ee3a6d8dfcd8f976cb6bd93c73",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/92adfa3cd266f4ee3a6d8dfcd8f976cb6bd93c73",
        "files": [
          "blog/classes/external.php",
          "blog/classes/external/post_exporter.php",
          "blog/index.php",
          "blog/lib.php",
          "blog/tests/external_test.php",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-60425-master' of git://github.com/jleyva/moodle",
        "before_after_code_files": [
          "blog/classes/external.php||blog/classes/external.php",
          "blog/classes/external/post_exporter.php||blog/classes/external/post_exporter.php",
          "blog/index.php||blog/index.php",
          "blog/lib.php||blog/lib.php",
          "blog/tests/external_test.php||blog/tests/external_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "blog/classes/external.php||blog/classes/external.php": [
          "File: blog/classes/external.php -> blog/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_blog;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: require_once($CFG->libdir .'/externallib.php');",
          "29: require_once($CFG->dirroot .'/blog/lib.php');",
          "30: require_once($CFG->dirroot .'/blog/locallib.php');",
          "32: use external_api;",
          "33: use external_function_parameters;",
          "34: use external_value;",
          "35: use external_single_structure;",
          "36: use external_multiple_structure;",
          "37: use external_warnings;",
          "38: use context_system;",
          "39: use context_course;",
          "40: use moodle_exception;",
          "41: use core_blog\\external\\post_exporter;",
          "49: class external extends external_api {",
          "57:     public static function get_entries_parameters() {",
          "58:         return new external_function_parameters(",
          "59:             array(",
          "60:                 'filters' => new external_multiple_structure (",
          "61:                     new external_single_structure(",
          "62:                         array(",
          "63:                             'name' => new external_value(PARAM_ALPHA,",
          "64:                                 'The expected keys (value format) are:",
          "65:                                 tag      PARAM_NOTAGS blog tag",
          "66:                                 tagid    PARAM_INT    blog tag id",
          "67:                                 userid   PARAM_INT    blog author (userid)",
          "68:                                 cmid    PARAM_INT    course module id",
          "69:                                 entryid  PARAM_INT    entry id",
          "70:                                 groupid  PARAM_INT    group id",
          "71:                                 courseid PARAM_INT    course id",
          "72:                                 search   PARAM_RAW    search term",
          "73:                                 '",
          "74:                             ),",
          "75:                             'value' => new external_value(PARAM_RAW, 'The value of the filter.')",
          "76:                         )",
          "77:                     ), 'Parameters to filter blog listings.', VALUE_DEFAULT, array()",
          "78:                 ),",
          "79:                 'page' => new external_value(PARAM_INT, 'The blog page to return.', VALUE_DEFAULT, 0),",
          "80:                 'perpage' => new external_value(PARAM_INT, 'The number of posts to return per page.', VALUE_DEFAULT, 10),",
          "81:             )",
          "82:         );",
          "83:     }",
          "94:     public static function get_entries($filters = array(), $page = 0, $perpage = 10) {",
          "95:         global $CFG, $DB, $PAGE;",
          "97:         $warnings = array();",
          "98:         $params = self::validate_parameters(self::get_entries_parameters(),",
          "99:             array('filters' => $filters, 'page' => $page, 'perpage' => $perpage));",
          "101:         if (empty($CFG->enableblogs)) {",
          "102:             throw new moodle_exception('blogdisable', 'blog');",
          "103:         }",
          "106:         $filterstype = array('courseid' => PARAM_INT, 'groupid' => PARAM_INT, 'userid' => PARAM_INT, 'tagid' => PARAM_INT,",
          "107:             'tag' => PARAM_NOTAGS, 'cmid' => PARAM_INT, 'entryid' => PARAM_INT, 'search' => PARAM_RAW);",
          "108:         $filters = array('courseid' => null, 'groupid' => null, 'userid' => null, 'tagid' => null,",
          "109:             'tag' => null, 'cmid' => null, 'entryid' => null, 'search' => null);",
          "111:         foreach ($params['filters'] as $filter) {",
          "112:             $name = trim($filter['name']);",
          "113:             if (!isset($filterstype[$name])) {",
          "114:                 throw new moodle_exception('errorinvalidparam', 'webservice', '', $name);",
          "115:             }",
          "116:             $filters[$name] = clean_param($filter['value'], $filterstype[$name]);",
          "117:         }",
          "120:         list($courseid, $userid) = blog_validate_access($filters['courseid'], $filters['cmid'], $filters['groupid'],",
          "121:             $filters['entryid'], $filters['userid']);",
          "123:         if ($courseid && $courseid != SITEID) {",
          "124:             $context = context_course::instance($courseid);",
          "125:             self::validate_context($context);",
          "126:         } else {",
          "127:             $context = context_system::instance();",
          "128:             if ($CFG->bloglevel == BLOG_GLOBAL_LEVEL) {",
          "130:                 if ($CFG->forcelogin) {",
          "131:                     self::validate_context($context);",
          "132:                 }",
          "133:             } else {",
          "134:                 self::validate_context($context);",
          "135:             }",
          "136:         }",
          "137:         $PAGE->set_context($context); // Needed by internal APIs.",
          "140:         $blogheaders = blog_get_headers($filters['courseid'], $filters['groupid'], $filters['userid'], $filters['tagid'],",
          "141:             $filters['tag'], $filters['cmid'], $filters['entryid'], $filters['search']);",
          "142:         $bloglisting = new \\blog_listing($blogheaders['filters']);",
          "144:         $page  = $params['page'];",
          "145:         $limit = empty($params['perpage']) ? get_user_preferences('blogpagesize', 10) : $params['perpage'];",
          "146:         $start = $page * $limit;",
          "147:         $entries = $bloglisting->get_entries($start, $limit);",
          "148:         $totalentries = $bloglisting->count_entries();",
          "150:         $exportedentries = array();",
          "151:         $output = $PAGE->get_renderer('core');",
          "152:         foreach ($entries as $entry) {",
          "153:             $exporter = new post_exporter($entry, array('context' => $context));",
          "154:             $exportedentries[] = $exporter->export($output);",
          "155:         }",
          "156:         return array(",
          "157:             'warnings' => $warnings,",
          "158:             'entries' => $exportedentries,",
          "159:             'totalentries' => $totalentries,",
          "160:         );",
          "161:     }",
          "169:     public static function get_entries_returns() {",
          "170:         return new external_single_structure(",
          "171:             array(",
          "172:                 'entries' => new external_multiple_structure(",
          "173:                     post_exporter::get_read_structure()",
          "174:                 ),",
          "175:                 'totalentries' => new external_value(PARAM_INT, 'The total number of entries found.'),",
          "176:                 'warnings' => new external_warnings(),",
          "177:             )",
          "178:         );",
          "179:     }",
          "180: }",
          "",
          "---------------"
        ],
        "blog/classes/external/post_exporter.php||blog/classes/external/post_exporter.php": [
          "File: blog/classes/external/post_exporter.php -> blog/classes/external/post_exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace core_blog\\external;",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: use core\\external\\exporter;",
          "28: use external_util;",
          "29: use external_files;",
          "30: use renderer_base;",
          "31: use context_system;",
          "39: class post_exporter extends exporter {",
          "46:     protected static function define_properties() {",
          "47:         return array(",
          "48:             'id' => array(",
          "49:                 'type' => PARAM_INT,",
          "50:                 'null' => NULL_ALLOWED,",
          "51:                 'description' => 'Post/entry id.',",
          "52:             ),",
          "53:             'module' => array(",
          "54:                 'type' => PARAM_ALPHANUMEXT,",
          "55:                 'null' => NULL_NOT_ALLOWED,",
          "56:                 'description' => 'Where it was published the post (blog, blog_external...).',",
          "57:             ),",
          "58:             'userid' => array(",
          "59:                 'type' => PARAM_INT,",
          "60:                 'null' => NULL_NOT_ALLOWED,",
          "61:                 'default' => 0,",
          "62:                 'description' => 'Post author.',",
          "63:             ),",
          "64:             'courseid' => array(",
          "65:                 'type' => PARAM_INT,",
          "66:                 'null' => NULL_NOT_ALLOWED,",
          "67:                 'default' => 0,",
          "68:                 'description' => 'Course where the post was created.',",
          "69:             ),",
          "70:             'groupid' => array(",
          "71:                 'type' => PARAM_INT,",
          "72:                 'null' => NULL_NOT_ALLOWED,",
          "73:                 'default' => 0,",
          "74:                 'description' => 'Group post was created for.',",
          "75:             ),",
          "76:             'moduleid' => array(",
          "77:                 'type' => PARAM_INT,",
          "78:                 'null' => NULL_NOT_ALLOWED,",
          "79:                 'default' => 0,",
          "80:                 'description' => 'Module id where the post was created (not used anymore).',",
          "81:             ),",
          "82:             'coursemoduleid' => array(",
          "83:                 'type' => PARAM_INT,",
          "84:                 'null' => NULL_NOT_ALLOWED,",
          "85:                 'default' => 0,",
          "86:                 'description' => 'Course module id where the post was created.',",
          "87:             ),",
          "88:             'subject' => array(",
          "89:                 'type' => PARAM_TEXT,",
          "90:                 'null' => NULL_NOT_ALLOWED,",
          "91:                 'description' => 'Post subject.',",
          "92:             ),",
          "93:             'summary' => array(",
          "94:                 'type' => PARAM_RAW,",
          "95:                 'null' => NULL_ALLOWED,",
          "96:                 'description' => 'Post summary.',",
          "97:             ),",
          "98:             'content' => array(",
          "99:                 'type' => PARAM_RAW,",
          "100:                 'null' => NULL_ALLOWED,",
          "101:                 'description' => 'Post content.',",
          "102:             ),",
          "103:             'uniquehash' => array(",
          "104:                 'type' => PARAM_RAW,",
          "105:                 'null' => NULL_NOT_ALLOWED,",
          "106:                 'description' => 'Post unique hash.',",
          "107:             ),",
          "108:             'rating' => array(",
          "109:                 'type' => PARAM_INT,",
          "110:                 'null' => NULL_NOT_ALLOWED,",
          "111:                 'default' => 0,",
          "112:                 'description' => 'Post rating.',",
          "113:             ),",
          "114:             'format' => array(",
          "115:                 'type' => PARAM_INT,",
          "116:                 'null' => NULL_NOT_ALLOWED,",
          "117:                 'default' => 0,",
          "118:                 'description' => 'Post content format.',",
          "119:             ),",
          "120:             'summaryformat' => array(",
          "121:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "122:                 'type' => PARAM_INT,",
          "123:                 'default' => FORMAT_MOODLE,",
          "124:                 'description' => 'Format for the summary field.',",
          "125:             ),",
          "126:             'attachment' => array(",
          "127:                 'type' => PARAM_RAW,",
          "128:                 'null' => NULL_ALLOWED,",
          "129:                 'description' => 'Post atachment.',",
          "130:             ),",
          "131:             'publishstate' => array(",
          "132:                 'type' => PARAM_ALPHA,",
          "133:                 'null' => NULL_NOT_ALLOWED,",
          "134:                 'default' => 'draft',",
          "135:                 'description' => 'Post publish state.',",
          "136:             ),",
          "137:             'lastmodified' => array(",
          "138:                 'type' => PARAM_INT,",
          "139:                 'null' => NULL_NOT_ALLOWED,",
          "140:                 'default' => 0,",
          "141:                 'description' => 'When it was last modified.',",
          "142:             ),",
          "143:             'created' => array(",
          "144:                 'type' => PARAM_INT,",
          "145:                 'null' => NULL_NOT_ALLOWED,",
          "146:                 'default' => 0,",
          "147:                 'description' => 'When it was created.',",
          "148:             ),",
          "149:             'usermodified' => array(",
          "150:                 'type' => PARAM_INT,",
          "151:                 'null' => NULL_ALLOWED,",
          "152:                 'description' => 'User that updated the post.',",
          "153:             ),",
          "154:         );",
          "155:     }",
          "157:     protected static function define_related() {",
          "158:         return array(",
          "159:             'context' => 'context'",
          "160:         );",
          "161:     }",
          "163:     protected static function define_other_properties() {",
          "164:         return array(",
          "165:             'summaryfiles' => array(",
          "166:                 'type' => external_files::get_properties_for_exporter(),",
          "167:                 'multiple' => true",
          "168:             ),",
          "169:             'attachmentfiles' => array(",
          "170:                 'type' => external_files::get_properties_for_exporter(),",
          "171:                 'multiple' => true,",
          "172:                 'optional' => true",
          "173:             ),",
          "174:         );",
          "175:     }",
          "177:     protected function get_other_values(renderer_base $output) {",
          "178:         $context = context_system::instance(); // Files always on site context.",
          "180:         $values['summaryfiles'] = external_util::get_area_files($context->id, 'blog', 'post', $this->data->id);",
          "181:         $values['attachmentfiles'] = external_util::get_area_files($context->id, 'blog', 'attachment', $this->data->id);",
          "183:         return $values;",
          "184:     }",
          "185: }",
          "",
          "---------------"
        ],
        "blog/index.php||blog/index.php": [
          "File: blog/index.php -> blog/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: }",
          "72: $PAGE->set_context($context);",
          "76: if (isset($userid) && $USER->id == $userid) {",
          "77:     $blognode = $PAGE->navigation->find('siteblog', null);",
          "78:     if ($blognode) {",
          "",
          "[Removed Lines]",
          "74: $sitecontext = context_system::instance();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     print_error('blogdisable', 'blog');",
          "109: }",
          "184:     require_login($course);",
          "195: }",
          "197: if (!empty($userid)) {",
          "225: }",
          "230: $blogheaders = blog_get_headers();",
          "232: $rsscontext = null;",
          "",
          "[Removed Lines]",
          "112: if (!empty($modid) && empty($courseid)) {",
          "113:     $courseid = $DB->get_field('course_modules', 'course', array('id' => $modid));",
          "114: }",
          "116: if (!empty($groupid) && empty($courseid)) {",
          "117:     $courseid = $DB->get_field('groups', 'courseid', array('id' => $groupid));",
          "118: }",
          "121: if (!$userid && has_capability('moodle/blog:view', $sitecontext) && $CFG->bloglevel > BLOG_USER_LEVEL) {",
          "122:     if ($entryid) {",
          "123:         if (!$entryobject = $DB->get_record('post', array('id' => $entryid))) {",
          "124:             print_error('nosuchentry', 'blog');",
          "125:         }",
          "126:         $userid = $entryobject->userid;",
          "127:     }",
          "128: } else if (!$userid) {",
          "129:     $userid = $USER->id;",
          "130: }",
          "132: if (!empty($modid)) {",
          "133:     if ($CFG->bloglevel < BLOG_SITE_LEVEL) {",
          "134:         print_error(get_string('nocourseblogs', 'blog'));",
          "135:     }",
          "136:     if (!$mod = $DB->get_record('course_modules', array('id' => $modid))) {",
          "137:         print_error(get_string('invalidmodid', 'blog'));",
          "138:     }",
          "139:     $courseid = $mod->course;",
          "140: }",
          "142: if ((empty($courseid) ? true : $courseid == SITEID) && empty($userid)) {",
          "143:     if ($CFG->bloglevel < BLOG_SITE_LEVEL) {",
          "144:         print_error('siteblogdisable', 'blog');",
          "145:     }",
          "146:     if (!has_capability('moodle/blog:view', $sitecontext)) {",
          "147:         print_error('cannotviewsiteblog', 'blog');",
          "148:     }",
          "150:     $COURSE = $DB->get_record('course', array('format' => 'site'));",
          "151:     $courseid = $COURSE->id;",
          "152: }",
          "154: if (!empty($courseid)) {",
          "155:     if (!$course = $DB->get_record('course', array('id' => $courseid))) {",
          "156:         print_error('invalidcourseid');",
          "157:     }",
          "159:     $courseid = $course->id;",
          "160:     require_login($course);",
          "162:     if (!has_capability('moodle/blog:view', $sitecontext)) {",
          "163:         print_error('cannotviewcourseblog', 'blog');",
          "164:     }",
          "165: } else {",
          "166:     $coursecontext = context_course::instance(SITEID);",
          "167: }",
          "169: if (!empty($groupid)) {",
          "170:     if ($CFG->bloglevel < BLOG_SITE_LEVEL) {",
          "171:         print_error('groupblogdisable', 'blog');",
          "172:     }",
          "174:     if (! $group = groups_get_group($groupid)) {",
          "175:         print_error(get_string('invalidgroupid', 'blog'));",
          "176:     }",
          "178:     if (!$course = $DB->get_record('course', array('id' => $group->courseid))) {",
          "179:         print_error('invalidcourseid');",
          "180:     }",
          "182:     $coursecontext = context_course::instance($course->id);",
          "183:     $courseid = $course->id;",
          "186:     if (!has_capability('moodle/blog:view', $sitecontext)) {",
          "187:         print_error(get_string('cannotviewcourseorgroupblog', 'blog'));",
          "188:     }",
          "190:     if (groups_get_course_groupmode($course) == SEPARATEGROUPS && !has_capability('moodle/site:accessallgroups', $coursecontext)) {",
          "191:         if (!groups_is_member($groupid)) {",
          "192:             print_error('notmemberofgroup');",
          "193:         }",
          "194:     }",
          "198:     if ($CFG->bloglevel < BLOG_USER_LEVEL) {",
          "199:         print_error('blogdisable', 'blog');",
          "200:     }",
          "202:     if (!$user = $DB->get_record('user', array('id' => $userid))) {",
          "203:         print_error('invaliduserid');",
          "204:     }",
          "206:     if ($user->deleted) {",
          "207:         echo $OUTPUT->header();",
          "208:         echo $OUTPUT->heading(get_string('userdeleted'));",
          "209:         echo $OUTPUT->footer();",
          "210:         die;",
          "211:     }",
          "213:     if ($USER->id == $userid) {",
          "214:         if (!has_capability('moodle/blog:create', $sitecontext)",
          "215:           && !has_capability('moodle/blog:view', $sitecontext)) {",
          "216:             print_error('donothaveblog', 'blog');",
          "217:         }",
          "218:     } else {",
          "219:         if (!has_capability('moodle/blog:view', $sitecontext) || !blog_user_can_view_user_entry($userid)) {",
          "220:             print_error('cannotviewcourseblog', 'blog');",
          "221:         }",
          "223:         $PAGE->navigation->extend_for_user($user);",
          "224:     }",
          "227: $courseid = (empty($courseid)) ? SITEID : $courseid;",
          "",
          "[Added Lines]",
          "109: list($courseid, $userid) = blog_validate_access($courseid, $modid, $groupid, $entryid, $userid);",
          "111: $courseid = (empty($courseid)) ? SITEID : $courseid;",
          "113: if ($courseid != SITEID) {",
          "114:     $course = get_course($courseid);",
          "119:     $user = core_user::get_user($userid);",
          "120:     $PAGE->navigation->extend_for_user($user);",
          "",
          "---------------"
        ],
        "blog/lib.php||blog/lib.php": [
          "File: blog/lib.php -> blog/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:     global $CFG, $PAGE, $DB, $USER;",
          "636:     $id       = optional_param('id', null, PARAM_INT);",
          "638:     $tagid    = optional_param('tagid', $tagid, PARAM_INT);",
          "639:     $userid   = optional_param('userid', $userid, PARAM_INT);",
          "642:     $groupid  = optional_param('groupid', $groupid, PARAM_INT);",
          "643:     $courseid = optional_param('courseid', $courseid, PARAM_INT);",
          "645:     $action   = optional_param('action', null, PARAM_ALPHA);",
          "646:     $confirm  = optional_param('confirm', false, PARAM_BOOL);",
          "",
          "[Removed Lines]",
          "633: function blog_get_headers($courseid=null, $groupid=null, $userid=null, $tagid=null) {",
          "637:     $tag      = optional_param('tag', null, PARAM_NOTAGS);",
          "640:     $modid    = optional_param('modid', null, PARAM_INT);",
          "641:     $entryid  = optional_param('entryid', null, PARAM_INT);",
          "644:     $search   = optional_param('search', null, PARAM_RAW);",
          "",
          "[Added Lines]",
          "641: function blog_get_headers($courseid=null, $groupid=null, $userid=null, $tagid=null, $tag=null, $modid=null, $entryid=null,",
          "642:         $search = null) {",
          "646:     $tag      = optional_param('tag', $tag, PARAM_NOTAGS);",
          "649:     $modid    = optional_param('modid', $modid, PARAM_INT);",
          "650:     $entryid  = optional_param('entryid', $entryid, PARAM_INT);",
          "653:     $search   = optional_param('search', $search, PARAM_RAW);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1166:     $rv->exclusiveurl = null;",
          "1167:     return $rv;",
          "1168: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1190: function blog_validate_access($courseid, $modid, $groupid, $entryid, $userid) {",
          "1191:     global $CFG, $DB, $USER, $COURSE;",
          "1193:     $sitecontext = context_system::instance();",
          "1196:     if (!empty($modid) && empty($courseid)) {",
          "1197:         $courseid = $DB->get_field('course_modules', 'course', array('id' => $modid));",
          "1198:     }",
          "1200:     if (!empty($groupid) && empty($courseid)) {",
          "1201:         $courseid = $DB->get_field('groups', 'courseid', array('id' => $groupid));",
          "1202:     }",
          "1204:     if (!$userid && has_capability('moodle/blog:view', $sitecontext) && $CFG->bloglevel > BLOG_USER_LEVEL) {",
          "1205:         if ($entryid) {",
          "1206:             if (!$entryobject = $DB->get_record('post', array('id' => $entryid))) {",
          "1207:                 print_error('nosuchentry', 'blog');",
          "1208:             }",
          "1209:             $userid = $entryobject->userid;",
          "1210:         }",
          "1211:     } else if (!$userid) {",
          "1212:         $userid = $USER->id;",
          "1213:     }",
          "1215:     if (!empty($modid)) {",
          "1216:         if ($CFG->bloglevel < BLOG_SITE_LEVEL) {",
          "1217:             print_error(get_string('nocourseblogs', 'blog'));",
          "1218:         }",
          "1219:         if (!$mod = $DB->get_record('course_modules', array('id' => $modid))) {",
          "1220:             print_error(get_string('invalidmodid', 'blog'));",
          "1221:         }",
          "1222:         $courseid = $mod->course;",
          "1223:     }",
          "1225:     if ((empty($courseid) ? true : $courseid == SITEID) && empty($userid)) {",
          "1226:         if ($CFG->bloglevel < BLOG_SITE_LEVEL) {",
          "1227:             print_error('siteblogdisable', 'blog');",
          "1228:         }",
          "1229:         if (!has_capability('moodle/blog:view', $sitecontext)) {",
          "1230:             print_error('cannotviewsiteblog', 'blog');",
          "1231:         }",
          "1233:         $COURSE = $DB->get_record('course', array('format' => 'site'));",
          "1234:         $courseid = $COURSE->id;",
          "1235:     }",
          "1237:     if (!empty($courseid)) {",
          "1238:         if (!$course = $DB->get_record('course', array('id' => $courseid))) {",
          "1239:             print_error('invalidcourseid');",
          "1240:         }",
          "1242:         $courseid = $course->id;",
          "1244:         if (!has_capability('moodle/blog:view', $sitecontext)) {",
          "1245:             print_error('cannotviewcourseblog', 'blog');",
          "1246:         }",
          "1247:     } else {",
          "1248:         $coursecontext = context_course::instance(SITEID);",
          "1249:     }",
          "1251:     if (!empty($groupid)) {",
          "1252:         if ($CFG->bloglevel < BLOG_SITE_LEVEL) {",
          "1253:             print_error('groupblogdisable', 'blog');",
          "1254:         }",
          "1256:         if (! $group = groups_get_group($groupid)) {",
          "1257:             print_error(get_string('invalidgroupid', 'blog'));",
          "1258:         }",
          "1260:         if (!$course = $DB->get_record('course', array('id' => $group->courseid))) {",
          "1261:             print_error('invalidcourseid');",
          "1262:         }",
          "1264:         $coursecontext = context_course::instance($course->id);",
          "1265:         $courseid = $course->id;",
          "1267:         if (!has_capability('moodle/blog:view', $sitecontext)) {",
          "1268:             print_error(get_string('cannotviewcourseorgroupblog', 'blog'));",
          "1269:         }",
          "1271:         if (groups_get_course_groupmode($course) == SEPARATEGROUPS &&",
          "1272:                 !has_capability('moodle/site:accessallgroups', $coursecontext)) {",
          "1274:             if (!groups_is_member($groupid)) {",
          "1275:                 print_error('notmemberofgroup');",
          "1276:             }",
          "1277:         }",
          "1278:     }",
          "1280:     if (!empty($userid)) {",
          "1281:         if ($CFG->bloglevel < BLOG_USER_LEVEL) {",
          "1282:             print_error('blogdisable', 'blog');",
          "1283:         }",
          "1285:         if (!$user = $DB->get_record('user', array('id' => $userid))) {",
          "1286:             print_error('invaliduserid');",
          "1287:         }",
          "1289:         if ($user->deleted) {",
          "1290:             print_error('userdeleted');",
          "1291:         }",
          "1293:         if ($USER->id == $userid) {",
          "1294:             if (!has_capability('moodle/blog:create', $sitecontext)",
          "1295:               && !has_capability('moodle/blog:view', $sitecontext)) {",
          "1296:                 print_error('donothaveblog', 'blog');",
          "1297:             }",
          "1298:         } else {",
          "1299:             if (!has_capability('moodle/blog:view', $sitecontext) || !blog_user_can_view_user_entry($userid)) {",
          "1300:                 print_error('cannotviewcourseblog', 'blog');",
          "1301:             }",
          "1302:         }",
          "1303:     }",
          "1304:     return array($courseid, $userid);",
          "1305: }",
          "",
          "---------------"
        ],
        "blog/tests/external_test.php||blog/tests/external_test.php": [
          "File: blog/tests/external_test.php -> blog/tests/external_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: global $CFG;",
          "28: require_once($CFG->dirroot . '/blog/locallib.php');",
          "29: require_once($CFG->dirroot . '/blog/lib.php');",
          "38: class core_blog_external_testcase extends advanced_testcase {",
          "40:     private $courseid;",
          "41:     private $cmid;",
          "42:     private $userid;",
          "43:     private $groupid;",
          "44:     private $tagid;",
          "45:     private $postid;",
          "47:     protected function setUp() {",
          "48:         global $DB, $CFG;",
          "49:         parent::setUp();",
          "51:         $this->resetAfterTest();",
          "54:         $course = $this->getDataGenerator()->create_course(array('category' => 1, 'shortname' => 'ANON'));",
          "55:         $this->assertNotEmpty($course);",
          "56:         $page = $this->getDataGenerator()->create_module('page', array('course' => $course->id));",
          "57:         $this->assertNotEmpty($page);",
          "60:         $user = $this->getDataGenerator()->create_user(array(",
          "61:                 'username' => 'testuser',",
          "62:                 'firstname' => 'Jimmy',",
          "63:                 'lastname' => 'Kinnon'",
          "64:         ));",
          "66:         $this->getDataGenerator()->enrol_user($user->id, $course->id);",
          "68:         $group = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "69:         $this->getDataGenerator()->create_group_member(array('groupid' => $group->id, 'userid' => $user->id));",
          "72:         $post = new stdClass();",
          "73:         $post->userid = $user->id;",
          "74:         $post->courseid = $course->id;",
          "75:         $post->groupid = $group->id;",
          "76:         $post->content = 'test post content text';",
          "77:         $post->module = 'blog';",
          "78:         $post->id = $DB->insert_record('post', $post);",
          "80:         core_tag_tag::set_item_tags('core', 'post', $post->id, context_user::instance($user->id), array('tag1'));",
          "81:         $tagid = $DB->get_field('tag', 'id', array('name' => 'tag1'));",
          "84:         $this->courseid = $course->id;",
          "85:         $this->cmid = $page->cmid;",
          "86:         $this->userid  = $user->id;",
          "87:         $this->groupid  = $group->id;",
          "88:         $this->tagid  = $tagid;",
          "89:         $this->postid = $post->id;",
          "90:         $this->publishstate = 'site';   // To be override in tests.",
          "93:         $CFG->bloglevel = BLOG_SITE_LEVEL;",
          "94:     }",
          "100:     public function test_get_public_entries_global_level_by_non_logged_users() {",
          "101:         global $CFG, $DB;",
          "103:         $CFG->bloglevel = BLOG_GLOBAL_LEVEL;",
          "104:         $CFG->forcelogin = 0;",
          "106:         $DB->set_field('post', 'publishstate', 'public', array('id' => $this->postid));",
          "108:         $result = core_blog\\external::get_entries();",
          "109:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "110:         $this->assertCount(1, $result['entries']);",
          "111:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "112:     }",
          "117:     public function test_get_public_entries_global_level_by_non_logged_users_closed_site() {",
          "118:         global $CFG, $DB;",
          "120:         $CFG->bloglevel = BLOG_GLOBAL_LEVEL;",
          "121:         $CFG->forcelogin = 1;",
          "123:         $DB->set_field('post', 'publishstate', 'public', array('id' => $this->postid));",
          "125:         $this->expectException('moodle_exception');",
          "126:         core_blog\\external::get_entries();",
          "127:     }",
          "133:     public function test_get_public_entries_global_level_by_guest_users() {",
          "134:         global $CFG, $DB;",
          "136:         $CFG->bloglevel = BLOG_GLOBAL_LEVEL;",
          "138:         $DB->set_field('post', 'publishstate', 'public', array('id' => $this->postid));",
          "140:         $this->setGuestUser();",
          "141:         $result = core_blog\\external::get_entries();",
          "142:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "143:         $this->assertCount(1, $result['entries']);",
          "144:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "145:     }",
          "151:     public function test_get_not_public_entries_global_level_by_non_logged_users() {",
          "152:         global $CFG;",
          "154:         $CFG->bloglevel = BLOG_GLOBAL_LEVEL;",
          "156:         $result = core_blog\\external::get_entries();",
          "157:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "158:         $this->assertCount(0, $result['entries']);",
          "159:     }",
          "165:     public function test_get_not_public_entries_global_level_by_guest_user() {",
          "166:         global $CFG;",
          "168:         $CFG->bloglevel = BLOG_GLOBAL_LEVEL;",
          "170:         $this->setGuestUser();",
          "171:         $result = core_blog\\external::get_entries();",
          "172:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "173:         $this->assertCount(0, $result['entries']);",
          "174:     }",
          "180:     public function test_get_not_public_entries_site_level_by_non_logged_users() {",
          "181:         $this->expectException('require_login_exception'); // In this case we get a security exception.",
          "182:         $result = core_blog\\external::get_entries();",
          "183:     }",
          "189:     public function test_get_not_public_entries_site_level_by_guest_users() {",
          "191:         $this->setGuestUser();",
          "192:         $result = core_blog\\external::get_entries();",
          "193:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "194:         $this->assertCount(0, $result['entries']);",
          "195:     }",
          "200:     public function test_get_site_entries_site_level_by_normal_users() {",
          "202:         $this->setUser($this->userid);",
          "203:         $result = core_blog\\external::get_entries();",
          "204:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "205:         $this->assertCount(1, $result['entries']);",
          "206:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "207:     }",
          "212:     public function test_get_draft_entries_site_level_by_author_users() {",
          "213:         global $DB;",
          "216:         $DB->set_field('post', 'publishstate', 'draft', array('id' => $this->postid));",
          "218:         $this->setUser($this->userid);",
          "219:         $result = core_blog\\external::get_entries();",
          "220:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "221:         $this->assertCount(1, $result['entries']);",
          "222:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "223:     }",
          "228:     public function test_get_draft_entries_site_level_by_not_author_users() {",
          "229:         global $DB;",
          "232:         $DB->set_field('post', 'publishstate', 'draft', array('id' => $this->postid));",
          "233:         $user = $this->getDataGenerator()->create_user();",
          "235:         $this->setUser($user);",
          "236:         $result = core_blog\\external::get_entries();",
          "237:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "238:         $this->assertCount(0, $result['entries']);",
          "239:     }",
          "244:     public function test_get_draft_entries_site_level_by_admin_users() {",
          "245:         global $DB;",
          "248:         $DB->set_field('post', 'publishstate', 'draft', array('id' => $this->postid));",
          "249:         $user = $this->getDataGenerator()->create_user();",
          "251:         $this->setAdminUser();",
          "252:         $result = core_blog\\external::get_entries();",
          "253:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "254:         $this->assertCount(1, $result['entries']);",
          "255:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "256:     }",
          "261:     public function test_get_draft_entries_user_level_by_author_users() {",
          "262:         global $CFG, $DB;",
          "264:         $CFG->bloglevel = BLOG_USER_LEVEL;",
          "266:         $DB->set_field('post', 'publishstate', 'draft', array('id' => $this->postid));",
          "268:         $this->setUser($this->userid);",
          "269:         $result = core_blog\\external::get_entries();",
          "270:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "271:         $this->assertCount(1, $result['entries']);",
          "272:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "273:     }",
          "278:     public function test_get_draft_entries_user_level_by_not_author_users() {",
          "279:         global $CFG, $DB;",
          "281:         $CFG->bloglevel = BLOG_USER_LEVEL;",
          "283:         $DB->set_field('post', 'publishstate', 'draft', array('id' => $this->postid));",
          "284:         $user = $this->getDataGenerator()->create_user();",
          "286:         $this->setUser($user);",
          "287:         $result = core_blog\\external::get_entries();",
          "288:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "289:         $this->assertCount(0, $result['entries']);",
          "290:     }",
          "295:     public function test_get_draft_entries_user_level_by_admin_users() {",
          "296:         global $CFG, $DB;",
          "298:         $CFG->bloglevel = BLOG_USER_LEVEL;",
          "300:         $DB->set_field('post', 'publishstate', 'draft', array('id' => $this->postid));",
          "301:         $user = $this->getDataGenerator()->create_user();",
          "303:         $this->setAdminUser();",
          "304:         $result = core_blog\\external::get_entries();",
          "305:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "306:         $this->assertCount(1, $result['entries']);",
          "307:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "308:     }",
          "313:     public function test_get_all_entries_including_pagination() {",
          "314:         global $DB, $USER;",
          "316:         $DB->set_field('post', 'publishstate', 'site', array('id' => $this->postid));",
          "319:         $this->setAdminUser();",
          "320:         $newpost = new stdClass();",
          "321:         $newpost->userid = $USER->id;",
          "322:         $newpost->content = 'test post content text';",
          "323:         $newpost->module = 'blog';",
          "324:         $newpost->publishstate = 'site';",
          "325:         $newpost->created = time() + HOURSECS;",
          "326:         $newpost->lastmodified = time() + HOURSECS;",
          "327:         $newpost->id = $DB->insert_record('post', $newpost);",
          "329:         $this->setUser($this->userid);",
          "330:         $result = core_blog\\external::get_entries();",
          "331:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "332:         $this->assertCount(2, $result['entries']);",
          "333:         $this->assertEquals(2, $result['totalentries']);",
          "335:         $result = core_blog\\external::get_entries(array(), 0, 1);",
          "336:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "337:         $this->assertCount(1, $result['entries']);",
          "338:         $this->assertEquals(2, $result['totalentries']);",
          "339:         $this->assertEquals($newpost->id, $result['entries'][0]['id']);",
          "341:         $result = core_blog\\external::get_entries(array(), 1, 1);",
          "342:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "343:         $this->assertCount(1, $result['entries']);",
          "344:         $this->assertEquals(2, $result['totalentries']);",
          "345:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "346:     }",
          "351:     public function test_get_entries_filtering_by_course() {",
          "352:         global $CFG, $DB;",
          "354:         $DB->set_field('post', 'publishstate', 'site', array('id' => $this->postid));",
          "356:         $this->setAdminUser();",
          "357:         $coursecontext = context_course::instance($this->courseid);",
          "358:         $anothercourse = $this->getDataGenerator()->create_course();",
          "361:         $blog = new blog_entry($this->postid);",
          "362:         $blog->add_association($coursecontext->id);",
          "365:         $result = core_blog\\external::get_entries(array(array('name' => 'courseid', 'value' => $this->courseid)));",
          "366:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "367:         $this->assertCount(1, $result['entries']);",
          "370:         $result = core_blog\\external::get_entries(array(array('name' => 'courseid', 'value' => $anothercourse->id)));",
          "371:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "372:         $this->assertCount(0, $result['entries']);",
          "375:         $result = core_blog\\external::get_entries(array(array('name' => 'cmid', 'value' => $this->cmid)));",
          "376:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "377:         $this->assertCount(0, $result['entries']);",
          "378:     }",
          "383:     public function test_get_entries_filtering_by_module() {",
          "384:         global $CFG, $DB;",
          "386:         $DB->set_field('post', 'publishstate', 'site', array('id' => $this->postid));",
          "388:         $this->setAdminUser();",
          "389:         $coursecontext = context_course::instance($this->courseid);",
          "390:         $contextmodule = context_module::instance($this->cmid);",
          "391:         $anothermodule = $this->getDataGenerator()->create_module('page', array('course' => $this->courseid));",
          "394:         $blog = new blog_entry($this->postid);",
          "395:         $blog->add_association($contextmodule->id);",
          "398:         $result = core_blog\\external::get_entries(array(array('name' => 'courseid', 'value' => $this->courseid)));",
          "399:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "400:         $this->assertCount(0, $result['entries']);",
          "403:         $result = core_blog\\external::get_entries(array(array('name' => 'cmid', 'value' => $this->cmid)));",
          "404:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "405:         $this->assertCount(1, $result['entries']);",
          "408:         $result = core_blog\\external::get_entries(array(array('name' => 'cmid', 'value' => $anothermodule->cmid)));",
          "409:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "410:         $this->assertCount(0, $result['entries']);",
          "411:     }",
          "416:     public function test_get_entries_filtering_by_author() {",
          "417:         $this->setAdminUser();",
          "419:         $result = core_blog\\external::get_entries(array(array('name' => 'userid', 'value' => $this->userid)));",
          "420:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "421:         $this->assertCount(1, $result['entries']);",
          "423:         $anotheruser = $this->getDataGenerator()->create_user();",
          "424:         $result = core_blog\\external::get_entries(array(array('name' => 'userid', 'value' => $anotheruser->id)));",
          "425:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "426:         $this->assertCount(0, $result['entries']);",
          "427:     }",
          "432:     public function test_get_entries_filtering_by_entry() {",
          "433:         $this->setAdminUser();",
          "435:         $result = core_blog\\external::get_entries(array(array('name' => 'entryid', 'value' => $this->postid)));",
          "436:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "437:         $this->assertCount(1, $result['entries']);",
          "439:         $this->expectException('moodle_exception');",
          "440:         $result = core_blog\\external::get_entries(array(array('name' => 'entryid', 'value' => -1)));",
          "441:     }",
          "446:     public function test_get_entries_filtering_by_search() {",
          "447:         $this->setAdminUser();",
          "449:         $result = core_blog\\external::get_entries(array(array('name' => 'search', 'value' => 'test')));",
          "450:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "451:         $this->assertCount(1, $result['entries']);",
          "453:         $result = core_blog\\external::get_entries(array(array('name' => 'search', 'value' => 'abc')));",
          "454:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "455:         $this->assertCount(0, $result['entries']);",
          "456:     }",
          "461:     public function test_get_entries_filtering_by_tag() {",
          "462:         $this->setAdminUser();",
          "464:         $result = core_blog\\external::get_entries(array(array('name' => 'tag', 'value' => 'tag1')));",
          "465:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "466:         $this->assertCount(1, $result['entries']);",
          "468:         $tag = $this->getDataGenerator()->create_tag(array('userid' => $this->userid, 'name' => 'tag2',",
          "469:             'isstandard' => 1));",
          "471:         $result = core_blog\\external::get_entries(array(array('name' => 'tag', 'value' => 'tag2')));",
          "472:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "473:         $this->assertCount(0, $result['entries']);",
          "474:     }",
          "479:     public function test_get_entries_filtering_by_tagid() {",
          "480:         $this->setAdminUser();",
          "482:         $result = core_blog\\external::get_entries(array(array('name' => 'tagid', 'value' => $this->tagid)));",
          "483:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "484:         $this->assertCount(1, $result['entries']);",
          "488:         $tag = $this->getDataGenerator()->create_tag(array('userid' => $this->userid, 'name' => 'tag2',",
          "489:             'isstandard' => 1));",
          "491:         $result = core_blog\\external::get_entries(array(array('name' => 'tagid', 'value' => $tag->id)));",
          "492:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "493:         $this->assertCount(0, $result['entries']);",
          "494:     }",
          "499:     public function test_get_entries_filtering_by_group() {",
          "500:         $this->setAdminUser();",
          "502:         $coursecontext = context_course::instance($this->courseid);",
          "503:         $blog = new blog_entry($this->postid);",
          "504:         $blog->add_association($coursecontext->id);",
          "507:         $result = core_blog\\external::get_entries(array(array('name' => 'groupid', 'value' => $this->groupid)));",
          "508:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "509:         $this->assertCount(1, $result['entries']);",
          "511:         $anotheruser = $this->getDataGenerator()->create_user();",
          "512:         $this->expectException('moodle_exception');",
          "513:         core_blog\\external::get_entries(array(array('name' => 'groupid', 'value' => -1)));",
          "514:     }",
          "519:     public function test_get_entries_multiple_filter() {",
          "520:         $this->setAdminUser();",
          "522:         $coursecontext = context_course::instance($this->courseid);",
          "523:         $blog = new blog_entry($this->postid);",
          "524:         $blog->add_association($coursecontext->id);",
          "526:         $result = core_blog\\external::get_entries(array(",
          "527:             array('name' => 'tagid', 'value' => $this->tagid),",
          "528:             array('name' => 'userid', 'value' => $this->userid),",
          "529:         ));",
          "530:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "531:         $this->assertCount(1, $result['entries']);",
          "534:         $result = core_blog\\external::get_entries(array(",
          "535:             array('name' => 'search', 'value' => 'www'),",
          "536:             array('name' => 'userid', 'value' => $this->userid),",
          "537:         ));",
          "538:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "539:         $this->assertCount(0, $result['entries']);",
          "540:     }",
          "545:     public function test_get_entries_filtering_by_invalid_filter() {",
          "546:         $this->setAdminUser();",
          "548:         $this->expectException('moodle_exception');",
          "549:         $result = core_blog\\external::get_entries(array(array('name' => 'zzZZzz', 'value' => 'wwWWww')));",
          "550:     }",
          "555:     public function test_get_entries_blog_disabled() {",
          "556:         global $CFG;",
          "558:         $this->setAdminUser();",
          "559:         $CFG->enableblogs = 0;",
          "561:         $this->expectException('moodle_exception');",
          "562:         $result = core_blog\\external::get_entries(array(array('name' => 'zzZZzz', 'value' => 'wwWWww')));",
          "563:     }",
          "564: }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         'capabilities'  => 'moodle/badges:viewotherbadges',",
          "75:         'services'      => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "76:     ),",
          "77:     'core_calendar_get_calendar_monthly_view' => array(",
          "78:         'classname' => 'core_calendar_external',",
          "79:         'methodname' => 'get_calendar_monthly_view',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     'core_blog_get_entries' => array(",
          "78:         'classname'   => 'core_blog\\external',",
          "79:         'methodname'  => 'get_entries',",
          "80:         'description' => 'Returns blog entries.',",
          "81:         'type'        => 'read',",
          "82:         'services'    => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "83:         'ajax'          => true,",
          "84:         'loginrequired' => false,",
          "85:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018100500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018100500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}