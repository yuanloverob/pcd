{
  "cve_id": "CVE-2021-41248",
  "cve_desc": "GraphiQL is the reference implementation of this monorepo, GraphQL IDE, an official project under the GraphQL Foundation. All versions of graphiql older than graphiql@1.4.7 are vulnerable to compromised HTTP schema introspection responses or schema prop values with malicious GraphQL type names, exposing a dynamic XSS attack surface that can allow code injection on operation autocomplete. In order for the attack to take place, the user must load a vulnerable schema in graphiql. There are a number of ways that can occur. By default, the schema URL is not attacker-controllable in graphiql or in its suggested implementations or examples, leaving only very complex attack vectors. If a custom implementation of graphiql's fetcher allows the schema URL to be set dynamically, such as a URL query parameter like ?endpoint= in graphql-playground, or a database provided value, then this custom graphiql implementation is vulnerable to phishing attacks, and thus much more readily available, low or no privelege level xss attacks. The URLs could look like any generic looking graphql schema URL. It should be noted that desktop clients such as Altair, Insomnia, Postwoman, do not appear to be impacted by this. This vulnerability does not impact codemirror-graphql, monaco-graphql or other dependents, as it exists in onHasCompletion.ts in graphiql. It does impact all forks of graphiql, and every released version of graphiql.",
  "repo": "graphql/graphiql",
  "patch_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
  "patch_info": {
    "commit_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
    "repo": "graphql/graphiql",
    "commit_url": "https://github.com/graphql/graphiql/commit/cb237eeeaf7333c4954c752122261db7520f7bf4",
    "files": [
      "README.md",
      "SECURITY.md",
      "docs/security/2021-introspection-schema-xss.md",
      "packages/graphiql/README.md",
      "packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/package.json",
      "packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js",
      "yarn.lock"
    ],
    "message": "Merge pull request from GHSA-x4r7-m2q9-69c8\n\nThis change fixes an XSS vulnerability that has been present since the first\ncommit of GraphiQL when used with an untrusted GraphQL server. It applies three\nstrategies to fix via defense-in-depth: HTML escaping a string in a contexts\nthat uses innerHTML; validating incoming schemas with graphql-js validateSchema;\nand updating markdown-it to the latest version.\n\nSee docs/security/2021-introspection-schema-xss.md for more details.\n\nCo-authored-by: Rikki <rikki.schulte@gmail.com>",
    "before_after_code_files": [
      "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
      "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:   it('Executes a GraphQL query over HTTP that has the expected result', () => {",
      "45:     cy.assertQueryResult({ query: testQuery }, mockSuccess);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:   it('Shows the expected error when the schema is invalid', () => {",
      "48:     cy.visit(`/?bad=true`);",
      "49:     cy.assertResult({",
      "50:       errors: [",
      "51:         {",
      "52:           message:",
      "53:             'Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"<img src=x onerror=alert(document.domain)>\" does not.',",
      "54:         },",
      "55:       ],",
      "56:     });",
      "57:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts": [
      "File: packages/graphiql/cypress/support/commands.ts -> packages/graphiql/cypress/support/commands.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:   type MockResult =",
      "20:     | { data: any }",
      "21:     | { data: any; hasNext?: boolean }",
      "23:   interface Chainable<Subject = any> {",
      "",
      "[Removed Lines]",
      "22:     | { error: any[] };",
      "",
      "[Added Lines]",
      "22:     | { error: any[] }",
      "23:     | { errors: any[] };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     visitWithOp(op: Op): Chainable<Element>;",
      "32:     clickPrettify(): Chainable<Element>;",
      "33:     assertHasValues(op: Op): Chainable<Element>;",
      "34:     assertQueryResult(",
      "35:       op: Op,",
      "36:       expectedResult: MockResult,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:     assertResult(result: MockResult): Chainable<Element>;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:     expect(value).to.deep.equal(JSON.stringify(mockSuccess, null, 2));",
      "92:   });",
      "93: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "97: Cypress.Commands.add('assertResult', (expectedResult, timeout = 200) => {",
      "98:   cy.wait(timeout);",
      "99:   cy.window().then(w => {",
      "101:     const value = w.g.resultComponent.viewer.getValue();",
      "102:     expect(value).to.deep.equal(JSON.stringify(expectedResult, null, 2));",
      "103:   });",
      "104: });",
      "",
      "---------------"
    ],
    "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js": [
      "File: packages/graphiql/resources/renderExample.js -> packages/graphiql/resources/renderExample.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:   history.replaceState(null, null, newSearch);",
      "92: }",
      "",
      "[Removed Lines]",
      "94: const isDev = window.location.hostname.match(/localhost$/);",
      "95: const api = isDev ? '/graphql' : '/.netlify/functions/schema-demo';",
      "",
      "[Added Lines]",
      "94: function getSchemaUrl() {",
      "95:   const isDev = window.location.hostname.match(/localhost$/);",
      "97:   if (isDev) {",
      "99:     if (parameters.bad && parameters.bad === 'true') {",
      "100:       return '/bad/graphql';",
      "101:     } else {",
      "102:       return '/graphql';",
      "103:     }",
      "104:   }",
      "105:   return '/.netlify/functions/schema-demo';",
      "106: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101: ReactDOM.render(",
      "102:   React.createElement(GraphiQL, {",
      "104:     query: parameters.query,",
      "105:     variables: parameters.variables,",
      "106:     headers: parameters.headers,",
      "",
      "[Removed Lines]",
      "103:     fetcher: GraphiQL.createFetcher({ url: api }),",
      "",
      "[Added Lines]",
      "114:     fetcher: GraphiQL.createFetcher({ url: getSchemaUrl() }),",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
      "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import React from 'react';",
      "10: import { FieldType } from './DocExplorer/types';",
      "12: import FieldDoc from './DocExplorer/FieldDoc';",
      "",
      "[Removed Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType } from 'graphql';",
      "",
      "[Added Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType, GraphQLError } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: type DocExplorerProps = {",
      "31:   schema?: GraphQLSchema | null;",
      "32: };",
      "34: type DocExplorerState = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:   ) {",
      "69:     return (",
      "70:       this.props.schema !== nextProps.schema ||",
      "72:     );",
      "73:   }",
      "75:   render() {",
      "77:     const navStack = this.state.navStack;",
      "78:     const navItem = navStack[navStack.length - 1];",
      "80:     let content;",
      "83:       content = (",
      "84:         <div className=\"spinner-container\">",
      "",
      "[Removed Lines]",
      "71:       this.state.navStack !== nextState.navStack",
      "76:     const { schema } = this.props;",
      "81:     if (schema === undefined) {",
      "",
      "[Added Lines]",
      "72:       this.state.navStack !== nextState.navStack ||",
      "73:       this.props.schemaErrors !== nextProps.schemaErrors",
      "78:     const { schema, schemaErrors } = this.props;",
      "83:     if (schemaErrors) {",
      "84:       content = (",
      "85:         <div className=\"error-container\">{'Error fetching schema'}</div>",
      "86:       );",
      "87:     } else if (schema === undefined) {",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
      "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:   ValidationRule,",
      "24:   FragmentDefinitionNode,",
      "25:   DocumentNode,",
      "26: } from 'graphql';",
      "27: import copyToClipboard from 'copy-to-clipboard';",
      "28: import { getFragmentDependenciesForAST } from 'graphql-language-service-utils';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26:   GraphQLError,",
      "27:   formatError as formatGraphQLError,",
      "28:   GraphQLFormattedError,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66: } from '@graphiql/toolkit';",
      "67: import HistoryStore from '../utility/HistoryStore';",
      "69: const DEFAULT_DOC_EXPLORER_WIDTH = 350;",
      "71: const majorVersion = parseInt(React.version.slice(0, 2), 10);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72: import { validateSchema } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95:   additionalContent?: React.ReactNode;",
      "96: };",
      "98: export type GraphiQLProps = {",
      "99:   fetcher: Fetcher;",
      "100:   schema?: GraphQLSchema;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103: export type GenericError =",
      "104:   | Error",
      "105:   | string",
      "106:   | readonly Error[]",
      "107:   | readonly string[]",
      "108:   | GraphQLError",
      "109:   | readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "121:   editorTheme?: string;",
      "122:   onToggleHistory?: (historyPaneOpen: boolean) => void;",
      "123:   ResultsTooltip?: typeof Component | FunctionComponent;",
      "124:   readOnly?: boolean;",
      "125:   docExplorerOpen?: boolean;",
      "126:   toolbar?: GraphiQLToolbarConfig;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "140:   dangerouslyAssumeSchemaIsValid?: boolean;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "143:   headerEditorEnabled: boolean;",
      "144:   shouldPersistHeaders: boolean;",
      "145:   historyPaneOpen: boolean;",
      "146:   docExplorerWidth: number;",
      "147:   isWaitingForResponse: boolean;",
      "148:   subscription?: Unsubscribable | null;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "152:   maxHistoryLength: number;",
      "153: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "173: const stringify = (obj: unknown): string => JSON.stringify(obj, null, 2);",
      "175: const formatSingleError = (error: Error): Error => ({",
      "176:   ...error,",
      "178:   message: error.message,",
      "179:   stack: error.stack,",
      "180: });",
      "182: type InputError = Error | GraphQLError | string;",
      "184: const handleSingleError = (",
      "185:   error: InputError,",
      "186: ): GraphQLFormattedError | Error | string => {",
      "187:   if (error instanceof GraphQLError) {",
      "188:     return formatGraphQLError(error);",
      "189:   }",
      "190:   if (error instanceof Error) {",
      "191:     return formatSingleError(error);",
      "192:   }",
      "193:   return error;",
      "194: };",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "166:     return JSON.stringify(result, null, 2);",
      "167:   }",
      "177:   _editorQueryID = 0;",
      "",
      "[Removed Lines]",
      "169:   static formatError(rawError: Error) {",
      "170:     const result = Array.isArray(rawError)",
      "171:       ? rawError.map(formatSingleError)",
      "172:       : formatSingleError(rawError);",
      "173:     return JSON.stringify(result, null, 2);",
      "174:   }",
      "",
      "[Added Lines]",
      "210:   static formatError = (error: GenericError): string => {",
      "211:     if (Array.isArray(error)) {",
      "212:       return stringify({",
      "213:         errors: error.map((e: InputError) => handleSingleError(e)),",
      "214:       });",
      "215:     }",
      "217:     return stringify({ errors: handleSingleError(error) });",
      "218:   };",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "266:     const headerEditorEnabled = props.headerEditorEnabled ?? false;",
      "267:     const shouldPersistHeaders = props.shouldPersistHeaders ?? false;",
      "270:     this.state = {",
      "272:       query,",
      "273:       variables: variables as string,",
      "274:       headers: headers as string,",
      "275:       operationName,",
      "276:       docExplorerOpen,",
      "278:       editorFlex: Number(this._storage.get('editorFlex')) || 1,",
      "279:       secondaryEditorOpen,",
      "280:       secondaryEditorHeight:",
      "",
      "[Removed Lines]",
      "271:       schema: props.schema,",
      "277:       response: props.response,",
      "",
      "[Added Lines]",
      "313:     let schema = props.schema;",
      "314:     let response = props.response;",
      "315:     let schemaErrors: readonly GraphQLError[] | undefined = undefined;",
      "316:     if (schema && !this.props.dangerouslyAssumeSchemaIsValid) {",
      "317:       const validationErrors = validateSchema(schema);",
      "318:       if (validationErrors && validationErrors.length > 0) {",
      "321:         response = GraphiQL.formatError(validationErrors);",
      "322:         schema = undefined;",
      "323:         schemaErrors = validationErrors;",
      "324:       }",
      "325:     }",
      "329:       schema,",
      "335:       schemaErrors,",
      "336:       response,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "357:         nextQuery !== this.state.query ||",
      "358:         nextOperationName !== this.state.operationName)",
      "359:     ) {",
      "360:       const updatedQueryAttributes = this._updateQueryFacts(",
      "361:         nextQuery,",
      "362:         nextOperationName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:       if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "420:         const validationErrors = validateSchema(nextSchema);",
      "421:         if (validationErrors && validationErrors.length > 0) {",
      "422:           this.handleSchemaErrors(validationErrors);",
      "423:           nextSchema = undefined;",
      "424:         }",
      "425:       }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "665:               ref={c => {",
      "666:                 this.docExplorerComponent = c;",
      "667:               }}",
      "668:               schema={this.state.schema}>",
      "669:               <button",
      "670:                 className=\"docExplorerHide\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "735:               schemaErrors={this.state.schemaErrors}",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "871:         }",
      "873:         if (typeof result !== 'string' && 'data' in result) {",
      "877:         } else {",
      "878:           const responseString =",
      "879:             typeof result === 'string' ? result : GraphiQL.formatResult(result);",
      "885:         }",
      "886:       })",
      "887:       .catch(error => {",
      "892:       });",
      "893:   }",
      "895:   private async _fetchQuery(",
      "896:     query: string,",
      "897:     variables: string,",
      "",
      "[Removed Lines]",
      "874:           const schema = buildClientSchema(result.data);",
      "875:           const queryFacts = getOperationFacts(schema, this.state.query);",
      "876:           this.safeSetState({ schema, ...queryFacts });",
      "880:           this.safeSetState({",
      "882:             schema: undefined,",
      "883:             response: responseString,",
      "884:           });",
      "888:         this.safeSetState({",
      "889:           schema: undefined,",
      "890:           response: error ? GraphiQL.formatError(error) : undefined,",
      "891:         });",
      "",
      "[Added Lines]",
      "942:           let schema: GraphQLSchema | undefined = buildClientSchema(",
      "943:             result.data,",
      "944:           );",
      "945:           if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "946:             const errors = validateSchema(schema);",
      "948:             if (errors && errors.length > 0) {",
      "949:               schema = undefined;",
      "950:               this.handleSchemaErrors(errors);",
      "951:             }",
      "952:           }",
      "953:           if (schema) {",
      "954:             const queryFacts = getOperationFacts(schema, this.state.query);",
      "955:             this.safeSetState({",
      "956:               schema,",
      "957:               ...queryFacts,",
      "958:               schemaErrors: undefined,",
      "959:             });",
      "960:           }",
      "965:           this.handleSchemaErrors([responseString]);",
      "969:         this.handleSchemaErrors([error]);",
      "973:   private handleSchemaErrors(",
      "974:     schemaErrors: readonly GraphQLError[] | readonly string[],",
      "975:   ) {",
      "976:     this.safeSetState({",
      "977:       response: schemaErrors ? GraphiQL.formatError(schemaErrors) : undefined,",
      "978:       schema: undefined,",
      "979:       schemaErrors,",
      "980:     });",
      "981:   }",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "908:       jsonVariables =",
      "909:         variables && variables.trim() !== '' ? JSON.parse(variables) : null;",
      "910:     } catch (error) {",
      "912:     }",
      "914:     if (typeof jsonVariables !== 'object') {",
      "",
      "[Removed Lines]",
      "911:       throw new Error(`Variables are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "999:       throw new Error(",
      "1000:         `Variables are invalid JSON: ${(error as Error).message}.`,",
      "1001:       );",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "919:       jsonHeaders =",
      "920:         headers && headers.trim() !== '' ? JSON.parse(headers) : null;",
      "921:     } catch (error) {",
      "923:     }",
      "925:     if (typeof jsonHeaders !== 'object') {",
      "",
      "[Removed Lines]",
      "922:       throw new Error(`Headers are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "1012:       throw new Error(`Headers are invalid JSON: ${(error as Error).message}.`);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1008:             } catch (error) {",
      "1009:               this.safeSetState({",
      "1010:                 isWaitingForResponse: false,",
      "1012:                 subscription: null,",
      "1013:               });",
      "1014:             }",
      "",
      "[Removed Lines]",
      "1011:                 response: error ? GraphiQL.formatError(error) : undefined,",
      "",
      "[Added Lines]",
      "1101:                 response: error",
      "1102:                   ? GraphiQL.formatError(error as Error)",
      "1103:                   : undefined,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1167:     } catch (error) {",
      "1168:       this.setState({",
      "1169:         isWaitingForResponse: false,",
      "1171:       });",
      "1172:     }",
      "1173:   };",
      "",
      "[Removed Lines]",
      "1170:         response: error.message,",
      "",
      "[Added Lines]",
      "1262:         response: (error as Error).message,",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1699: }",
      "1700: GraphiQLFooter.displayName = 'GraphiQLFooter';",
      "1709: const defaultQuery = `# Welcome to GraphiQL",
      "1710: #",
      "1711: # GraphiQL is an in-browser tool for writing, validating, and",
      "",
      "[Removed Lines]",
      "1702: const formatSingleError = (error: Error) => ({",
      "1703:   ...error,",
      "1705:   message: error.message,",
      "1706:   stack: error.stack,",
      "1707: });",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts": [
      "File: packages/graphiql/src/utility/onHasCompletion.ts -> packages/graphiql/src/utility/onHasCompletion.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:   GraphQLType,",
      "13:   GraphQLField,",
      "14: } from 'graphql';",
      "15: import MD from 'markdown-it';",
      "17: const md = new MD();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: import escapeHTML from 'escape-html';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:   if (type instanceof GraphQLList) {",
      "109:     return `[${renderType(type.ofType)}]`;",
      "110:   }",
      "112: }",
      "",
      "[Removed Lines]",
      "111:   return `<a class=\"typeName\">${type.name}</a>`;",
      "",
      "[Added Lines]",
      "112:   return `<a class=\"typeName\">${escapeHTML(type.name)}</a>`;",
      "",
      "---------------"
    ],
    "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js": [
      "File: packages/graphiql/test/bad-schema.js -> packages/graphiql/test/bad-schema.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: const { buildClientSchema } = require('graphql');",
      "3: module.exports.schema = {",
      "4:   __schema: {",
      "5:     queryType: {",
      "6:       name: 'Query',",
      "7:     },",
      "8:     mutationType: null,",
      "9:     subscriptionType: null,",
      "10:     types: [",
      "11:       {",
      "12:         kind: 'OBJECT',",
      "13:         name: 'Query',",
      "14:         description: null,",
      "15:         fields: [",
      "16:           {",
      "17:             name: 'user',",
      "18:             description: null,",
      "19:             args: [",
      "20:               {",
      "21:                 name: 'id',",
      "22:                 description: null,",
      "23:                 type: {",
      "24:                   kind: 'NON_NULL',",
      "25:                   name: null,",
      "26:                   ofType: {",
      "27:                     kind: 'SCALAR',",
      "28:                     name: 'ID',",
      "29:                     ofType: null,",
      "30:                   },",
      "31:                 },",
      "32:                 defaultValue: null,",
      "33:               },",
      "34:             ],",
      "35:             type: {",
      "36:               kind: 'OBJECT',",
      "37:               name: '<img src=x onerror=alert(document.domain)>',",
      "38:               ofType: null,",
      "39:             },",
      "40:             isDeprecated: false,",
      "41:             deprecationReason: null,",
      "42:           },",
      "43:         ],",
      "44:         inputFields: null,",
      "45:         interfaces: [],",
      "46:         enumValues: null,",
      "47:         possibleTypes: null,",
      "48:       },",
      "49:       {",
      "50:         kind: 'SCALAR',",
      "51:         name: 'ID',",
      "52:         description: '',",
      "53:         fields: null,",
      "54:         inputFields: null,",
      "55:         interfaces: null,",
      "56:         enumValues: null,",
      "57:         possibleTypes: null,",
      "58:       },",
      "59:       {",
      "60:         kind: 'OBJECT',",
      "61:         name: '<img src=x onerror=alert(document.domain)>',",
      "62:         description: null,",
      "63:         fields: [",
      "64:           {",
      "65:             name: 'name',",
      "66:             description: null,",
      "67:             args: [],",
      "68:             type: {",
      "69:               kind: 'NON_NULL',",
      "70:               name: null,",
      "71:               ofType: {",
      "72:                 kind: 'SCALAR',",
      "73:                 name: 'String',",
      "74:                 ofType: null,",
      "75:               },",
      "76:             },",
      "77:             isDeprecated: false,",
      "78:             deprecationReason: null,",
      "79:           },",
      "80:         ],",
      "81:         inputFields: null,",
      "82:         interfaces: [],",
      "83:         enumValues: null,",
      "84:         possibleTypes: null,",
      "85:       },",
      "86:       {",
      "87:         kind: 'SCALAR',",
      "88:         name: 'String',",
      "89:         description: '',",
      "90:         fields: null,",
      "91:         inputFields: null,",
      "92:         interfaces: null,",
      "93:         enumValues: null,",
      "94:         possibleTypes: null,",
      "95:       },",
      "96:     ],",
      "97:     directives: [],",
      "98:   },",
      "99: };",
      "",
      "---------------"
    ],
    "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js": [
      "File: packages/graphiql/test/beforeDevServer.js -> packages/graphiql/test/beforeDevServer.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: const path = require('path');",
      "10: const { graphqlHTTP } = require('express-graphql');",
      "11: const schema = require('./schema');",
      "13: module.exports = function beforeDevServer(app, _server, _compiler) {",
      "15:   app.post('/graphql', graphqlHTTP({ schema }));",
      "17:   app.get(",
      "18:     '/graphql',",
      "19:     graphqlHTTP({",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: const { schema: badSchema } = require('./bad-schema');",
      "18:   app.post('/bad/graphql', (_req, res, next) => {",
      "19:     res.json({ data: badSchema });",
      "20:     next();",
      "21:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js": [
      "File: packages/graphiql/test/e2e-server.js -> packages/graphiql/test/e2e-server.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: const path = require('path');",
      "11: const { graphqlHTTP } = require('express-graphql');",
      "12: const schema = require('./schema');",
      "14: const app = express();",
      "17: app.post('/graphql', graphqlHTTP({ schema }));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: const { schema: badSchema } = require('./bad-schema');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23:   }),",
      "24: );",
      "26: app.use(express.static(path.resolve(__dirname, '../')));",
      "28: app.listen(process.env.PORT || 0, function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: app.post('/bad/graphql', (_req, res, next) => {",
      "27:   res.json({ data: badSchema });",
      "28:   next();",
      "29: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "3288:   integrity sha512-6U71C2Wp7r5XtFtQzYrW5iKFT67OixrSxjI4MptCHzdSVlgabczzqLe0ZSgnub/5Kp4hSbpDB1tMytZY9pwxxA==",
      "3290: \"@graphiql/toolkit@file:packages/graphiql-toolkit\":",
      "3292:   dependencies:",
      "3293:     \"@n1ru4l/push-pull-async-iterable-iterator\" \"^3.0.0\"",
      "3294:     graphql-ws \"^4.9.0\"",
      "",
      "[Removed Lines]",
      "3291:   version \"0.3.0\"",
      "",
      "[Added Lines]",
      "3291:   version \"0.3.2\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4881:   dependencies:",
      "4882:     \"@types/node\" \"*\"",
      "4884: \"@types/eslint-visitor-keys@^1.0.0\":",
      "4885:   version \"1.0.0\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz#1ee30d79544ca84d68d4b3cdb0af4f205663dd2d\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4884: \"@types/escape-html@^1.0.1\":",
      "4885:   version \"1.0.1\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/escape-html/-/escape-html-1.0.1.tgz#b19b4646915f0ae2c306bf984dc0a59c5cfc97ba\"",
      "4887:   integrity sha512-4mI1FuUUZiuT95fSVqvZxp/ssQK9zsa86S43h9x3zPOSU9BBJ+BfDkXwuaU7BfsD+e7U0/cUUfJFk3iW2M4okA==",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5021:   dependencies:",
      "5022:     \"@types/linkify-it\" \"*\"",
      "5024: \"@types/mime@^1\":",
      "5025:   version \"1.3.2\"",
      "5026:   resolved \"https://registry.yarnpkg.com/@types/mime/-/mime-1.3.2.tgz#93e25bf9ee75fe0fd80b594bc4feb0e862111b5a\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029: \"@types/markdown-it@^12.2.3\":",
      "5030:   version \"12.2.3\"",
      "5031:   resolved \"https://registry.yarnpkg.com/@types/markdown-it/-/markdown-it-12.2.3.tgz#0d6f6e5e413f8daaa26522904597be3d6cd93b51\"",
      "5032:   integrity sha512-GKMHFfv3458yYy+v/N8gjufHO6MSZKCOXpZc5GXIWWy8uldwfmPn98vp81gZ5f9SVw8YYBctgfJ22a2d7AOMeQ==",
      "5033:   dependencies:",
      "5034:     \"@types/linkify-it\" \"*\"",
      "5035:     \"@types/mdurl\" \"*\"",
      "5037: \"@types/mdurl@*\":",
      "5038:   version \"1.0.2\"",
      "5039:   resolved \"https://registry.yarnpkg.com/@types/mdurl/-/mdurl-1.0.2.tgz#e2ce9d83a613bacf284c7be7d491945e39e1f8e9\"",
      "5040:   integrity sha512-eC4U9MlIcu2q0KQmXszyn5Akca/0jrQmwDRgpAMJai7qBWq4amIQhZyNau4VYGtCeALvW1/NtjzJJ567aZxfKA==",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6121:   dependencies:",
      "6122:     sprintf-js \"~1.0.2\"",
      "6124: aria-query@^3.0.0:",
      "6125:   version \"3.0.0\"",
      "6126:   resolved \"https://registry.yarnpkg.com/aria-query/-/aria-query-3.0.0.tgz#65b3fcc1ca1155a8c9ae64d6eee297f15d5133cc\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6142: argparse@^2.0.1:",
      "6143:   version \"2.0.1\"",
      "6144:   resolved \"https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38\"",
      "6145:   integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "9586:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.0.3.tgz#5c487e5742ab93c15abb5da22759b8590ec03b7f\"",
      "9587:   integrity sha512-MyoZ0jgnLvB2X3Lg5HqpFmn1kybDiIfEQmKzTb5apr51Rb+T3KdmMiqa70T+bhGnyv7bQ6WMj2QMHpGMmlrUYQ==",
      "9589: envinfo@^7.3.1:",
      "9590:   version \"7.8.1\"",
      "9591:   resolved \"https://registry.yarnpkg.com/envinfo/-/envinfo-7.8.1.tgz#06377e3e5f4d379fea7ac592d5ad8927e0c4d475\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9612: entities@~2.1.0:",
      "9613:   version \"2.1.0\"",
      "9614:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.1.0.tgz#992d3129cf7df6870b96c57858c249a120f8b8b5\"",
      "9615:   integrity sha512-hCx1oky9PFrJ611mf0ifBLBRW8lUUVRlFolb5gWRfIELabBlbp9xZvrqZLZAs+NxFnbfQoeGd8wDkygjg7U85w==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9751:   resolved \"https://registry.yarnpkg.com/escalade/-/escalade-3.1.1.tgz#d8cfdc7000965c5a0174b4a82eaa5c0552742e40\"",
      "9752:   integrity sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "9755:   version \"1.0.3\"",
      "9756:   resolved \"https://registry.yarnpkg.com/escape-html/-/escape-html-1.0.3.tgz#0258eae4d3d0c0974de1c169188ef0051d1d1988\"",
      "9757:   integrity sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=",
      "",
      "[Removed Lines]",
      "9754: escape-html@~1.0.3:",
      "",
      "[Added Lines]",
      "9782: escape-html@^1.0.3, escape-html@~1.0.3:",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "11512:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
      "11514: \"graphiql@file:packages/graphiql\":",
      "11516:   dependencies:",
      "11518:     codemirror \"^5.58.2\"",
      "11520:     copy-to-clipboard \"^3.2.0\"",
      "11521:     dset \"^3.1.0\"",
      "11522:     entities \"^2.0.0\"",
      "11526: graphql-config@^3.0.2:",
      "11527:   version \"3.0.3\"",
      "",
      "[Removed Lines]",
      "11515:   version \"1.4.3\"",
      "11517:     \"@graphiql/toolkit\" \"^0.3.0\"",
      "11519:     codemirror-graphql \"^1.0.0\"",
      "11523:     graphql-language-service \"^3.1.5\"",
      "11524:     markdown-it \"^10.0.0\"",
      "",
      "[Added Lines]",
      "11543:   version \"1.4.6\"",
      "11545:     \"@graphiql/toolkit\" \"^0.3.2\"",
      "11547:     codemirror-graphql \"^1.0.3\"",
      "11551:     escape-html \"^1.0.3\"",
      "11552:     graphql-language-service \"^3.1.6\"",
      "11553:     markdown-it \"^12.2.0\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "14280:   dependencies:",
      "14281:     uc.micro \"^1.0.1\"",
      "14283: lint-staged@^10.1.2:",
      "14284:   version \"10.1.3\"",
      "14285:   resolved \"https://registry.yarnpkg.com/lint-staged/-/lint-staged-10.1.3.tgz#da27713d3ac519da305381b4de87d5f866b1d2f1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14312: linkify-it@^3.0.1:",
      "14313:   version \"3.0.3\"",
      "14314:   resolved \"https://registry.yarnpkg.com/linkify-it/-/linkify-it-3.0.3.tgz#a98baf44ce45a550efb4d49c769d07524cc2fa2e\"",
      "14315:   integrity sha512-ynTsyrFSdE5oZ/O9GEf00kPngmOfVwazR5GKDq6EYfhlpFug3J2zybX56a2PRRpc9P+FuSoGNAwjlbDs9jJBPQ==",
      "14316:   dependencies:",
      "14317:     uc.micro \"^1.0.1\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "14711:     mdurl \"^1.0.1\"",
      "14712:     uc.micro \"^1.0.5\"",
      "14714: markdown-to-jsx@^6.11.4:",
      "14715:   version \"6.11.4\"",
      "14716:   resolved \"https://registry.yarnpkg.com/markdown-to-jsx/-/markdown-to-jsx-6.11.4.tgz#b4528b1ab668aef7fe61c1535c27e837819392c5\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14750: markdown-it@^12.2.0:",
      "14751:   version \"12.2.0\"",
      "14752:   resolved \"https://registry.yarnpkg.com/markdown-it/-/markdown-it-12.2.0.tgz#091f720fd5db206f80de7a8d1f1a7035fd0d38db\"",
      "14753:   integrity sha512-Wjws+uCrVQRqOoJvze4HCqkKl1AsSh95iFAeQDwnyfxM09divCBSXlDR1uTvyUP3Grzpn4Ru8GeCxYPM8vkCQg==",
      "14754:   dependencies:",
      "14755:     argparse \"^2.0.1\"",
      "14756:     entities \"~2.1.0\"",
      "14757:     linkify-it \"^3.0.1\"",
      "14758:     mdurl \"^1.0.1\"",
      "14759:     uc.micro \"^1.0.5\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3e5295f0fd3b5f999643ea97e6cee706554f0b50",
      "candidate_info": {
        "commit_hash": "3e5295f0fd3b5f999643ea97e6cee706554f0b50",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/3e5295f0fd3b5f999643ea97e6cee706554f0b50",
        "files": [
          ".changeset/tough-jobs-shave.md",
          ".changeset/warm-kings-rhyme.md",
          "packages/graphiql-react/src/editor/completion.ts",
          "packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/explorer.tsx",
          "packages/graphiql/package.json",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx"
        ],
        "message": "move state for doc explorer visibility to explorer context in `@graphiql/react` (#2436)\n\n* move visibility state of doc explorer to explorer context in `@graphiql/react`\n\n* inline logic for clicking references to get to the docs\n\n* inline onClick handlers for info tooltips and remove `onHintInformationRender` props",
        "before_after_code_files": [
          "packages/graphiql-react/src/editor/completion.ts||packages/graphiql-react/src/editor/completion.ts",
          "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/explorer.tsx||packages/graphiql-react/src/explorer.tsx",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/editor/completion.ts||packages/graphiql-react/src/editor/completion.ts": [
          "File: packages/graphiql-react/src/editor/completion.ts -> packages/graphiql-react/src/editor/completion.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import type { Editor, EditorChange } from 'codemirror';",
          "3: import {",
          "5:   GraphQLList,",
          "6:   GraphQLType,",
          "8: } from 'graphql';",
          "11: import { markdown } from '../markdown';",
          "",
          "[Removed Lines]",
          "4:   GraphQLNonNull,",
          "7:   GraphQLField,",
          "9: import escapeHTML from 'escape-html';",
          "10: import { importCodeMirror } from './common';",
          "",
          "[Added Lines]",
          "2: import escapeHTML from 'escape-html';",
          "5:   GraphQLNonNull,",
          "6:   GraphQLSchema,",
          "10: import { ExplorerContextType } from '../explorer';",
          "12: import { importCodeMirror } from './common';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: export function onHasCompletion(",
          "18:   _cm: Editor,",
          "19:   data: EditorChange | undefined,",
          "21: ) {",
          "22:   importCodeMirror([], { useCommonAddons: false }).then(CodeMirror => {",
          "23:     let information: HTMLDivElement | null;",
          "",
          "[Removed Lines]",
          "20:   onHintInformationRender: (el: HTMLDivElement) => void,",
          "",
          "[Added Lines]",
          "21:   schema: GraphQLSchema | null | undefined,",
          "22:   explorer: ExplorerContextType | null,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:           information = document.createElement('div');",
          "38:           information.className = 'CodeMirror-hint-information';",
          "39:           hintsUl.appendChild(information);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:           information.addEventListener('click', onClickHintInformation);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "51:             (onRemoveFn = (event: Event) => {",
          "52:               if (event.target === hintsUl) {",
          "53:                 hintsUl.removeEventListener('DOMNodeRemoved', onRemoveFn);",
          "54:                 information = null;",
          "55:                 deprecation = null;",
          "56:                 onRemoveFn = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:                 if (information) {",
          "58:                   information.removeEventListener(",
          "59:                     'click',",
          "60:                     onClickHintInformation,",
          "61:                   );",
          "62:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:         } else if (deprecation) {",
          "85:           deprecation.style.display = 'none';",
          "86:         }",
          "92:       },",
          "93:     );",
          "94:   });",
          "95: }",
          "97: function renderType(type: GraphQLType): string {",
          "",
          "[Removed Lines]",
          "89:         if (onHintInformationRender) {",
          "90:           onHintInformationRender(information);",
          "91:         }",
          "",
          "[Added Lines]",
          "100:   function onClickHintInformation(event: Event) {",
          "101:     if (",
          "102:       !schema ||",
          "103:       !explorer ||",
          "104:       !(event.currentTarget instanceof HTMLElement) ||",
          "105:       event.currentTarget.className !== 'typeName'",
          "106:     ) {",
          "107:       return;",
          "108:     }",
          "110:     const typeName = event.currentTarget.innerHTML;",
          "111:     const type = schema.getType(typeName);",
          "112:     if (type) {",
          "113:       explorer.show();",
          "114:       explorer.push({ name: type.name, def: type });",
          "115:     }",
          "116:   }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx": [
          "File: packages/graphiql-react/src/editor/header-editor.tsx -> packages/graphiql-react/src/editor/header-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import { commonKeys, importCodeMirror } from './common';",
          "5: import { EditorContext } from './context';",
          "6: import {",
          "8:   EditCallback,",
          "9:   EmptyCallback,",
          "10:   useChangeHandler,",
          "",
          "[Removed Lines]",
          "7:   CompletionCallback,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: export type UseHeaderEditorArgs = {",
          "18:   editorTheme?: string;",
          "19:   onEdit?: EditCallback;",
          "21:   onPrettifyQuery?: EmptyCallback;",
          "22:   onMergeQuery?: EmptyCallback;",
          "23:   onRunQuery?: EmptyCallback;",
          "",
          "[Removed Lines]",
          "20:   onHintInformationRender?: CompletionCallback;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29: export function useHeaderEditor({",
          "30:   editorTheme = 'graphiql',",
          "31:   onEdit,",
          "33:   onMergeQuery,",
          "34:   onPrettifyQuery,",
          "35:   onRunQuery,",
          "",
          "[Removed Lines]",
          "32:   onHintInformationRender,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:     shouldPersistHeaders ? STORAGE_KEY : null,",
          "128:   );",
          "132:   useKeyMap(headerEditor, ['Cmd-Enter', 'Ctrl-Enter'], onRunQuery);",
          "133:   useKeyMap(headerEditor, ['Shift-Ctrl-P'], onPrettifyQuery);",
          "",
          "[Removed Lines]",
          "130:   useCompletion(headerEditor, onHintInformationRender);",
          "",
          "[Added Lines]",
          "127:   useCompletion(headerEditor);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts": [
          "File: packages/graphiql-react/src/editor/hooks.ts -> packages/graphiql-react/src/editor/hooks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { EditorChange } from 'codemirror';",
          "2: import { RefObject, useContext, useEffect, useRef } from 'react';",
          "4: import { StorageContext } from '../storage';",
          "5: import debounce from '../utility/debounce';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import { ExplorerContext } from '../explorer';",
          "4: import { useSchemaWithError } from '../schema';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   }, [callback, editor, storage, storageKey]);",
          "49: }",
          "57:   useEffect(() => {",
          "67:         'hasCompletion',",
          "68:         handleCompletion,",
          "69:       );",
          "78: }",
          "80: export type EmptyCallback = () => void;",
          "",
          "[Removed Lines]",
          "51: export type CompletionCallback = (value: HTMLDivElement) => void;",
          "53: export function useCompletion(",
          "54:   editor: CodeMirrorEditor | null,",
          "55:   callback: CompletionCallback | undefined,",
          "56: ) {",
          "58:     if (editor && callback) {",
          "59:       const handleCompletion = (",
          "60:         instance: CodeMirrorEditor,",
          "61:         changeObj?: EditorChange,",
          "62:       ) => {",
          "63:         onHasCompletion(instance, changeObj, callback);",
          "64:       };",
          "65:       editor.on(",
          "70:       return () =>",
          "71:         editor.off(",
          "73:           'hasCompletion',",
          "74:           handleCompletion,",
          "75:         );",
          "76:     }",
          "77:   }, [editor, callback]);",
          "",
          "[Added Lines]",
          "53: export function useCompletion(editor: CodeMirrorEditor | null) {",
          "54:   const { schema } = useSchemaWithError('hook', 'useCompletion');",
          "55:   const explorer = useContext(ExplorerContext);",
          "57:     if (!editor) {",
          "58:       return;",
          "59:     }",
          "61:     const handleCompletion = (",
          "62:       instance: CodeMirrorEditor,",
          "63:       changeObj?: EditorChange,",
          "64:     ) => {",
          "65:       onHasCompletion(instance, changeObj, schema, explorer);",
          "66:     };",
          "67:     editor.on(",
          "69:       'hasCompletion',",
          "70:       handleCompletion,",
          "71:     );",
          "72:     return () =>",
          "73:       editor.off(",
          "78:   }, [editor, explorer, schema]);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx": [
          "File: packages/graphiql-react/src/editor/query-editor.tsx -> packages/graphiql-react/src/editor/query-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import { getOperationFacts } from 'graphql-language-service';",
          "9: import { MutableRefObject, useContext, useEffect, useRef } from 'react';",
          "11: import { markdown } from '../markdown';",
          "12: import { useSchemaWithError } from '../schema';",
          "13: import { StorageContext } from '../storage';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: import { ExplorerContext } from '../explorer';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: import { commonKeys, importCodeMirror } from './common';",
          "16: import { CodeMirrorEditorWithOperationFacts, EditorContext } from './context';",
          "17: import {",
          "19:   EditCallback,",
          "20:   EmptyCallback,",
          "21:   useCompletion,",
          "",
          "[Removed Lines]",
          "18:   CompletionCallback,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:   defaultValue?: string;",
          "33:   editorTheme?: string;",
          "34:   externalFragments?: string | FragmentDefinitionNode[];",
          "36:   onCopyQuery?: EmptyCallback;",
          "37:   onEdit?: EditCallback;",
          "38:   onEditOperationName?: EditCallback;",
          "40:   onPrettifyQuery?: EmptyCallback;",
          "41:   onMergeQuery?: EmptyCallback;",
          "42:   onRunQuery?: EmptyCallback;",
          "",
          "[Removed Lines]",
          "35:   onClickReference?: OnClickReference;",
          "39:   onHintInformationRender?: CompletionCallback;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "49:   defaultValue = DEFAULT_VALUE,",
          "50:   editorTheme = 'graphiql',",
          "51:   externalFragments,",
          "53:   onCopyQuery,",
          "54:   onEdit,",
          "55:   onEditOperationName,",
          "57:   onMergeQuery,",
          "58:   onPrettifyQuery,",
          "59:   onRunQuery,",
          "",
          "[Removed Lines]",
          "52:   onClickReference,",
          "56:   onHintInformationRender,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "64:   const { schema } = useSchemaWithError('hook', 'useQueryEditor');",
          "65:   const editorContext = useContext(EditorContext);",
          "66:   const storage = useContext(StorageContext);",
          "67:   const ref = useRef<HTMLDivElement>(null);",
          "68:   const codeMirrorRef = useRef<CodeMirrorType>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:   const explorer = useContext(ExplorerContext);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "76:   const { queryEditor, setQueryEditor, variableEditor } = editorContext;",
          "79:   useEffect(() => {",
          "83:   const initialValue = useRef(",
          "84:     value ?? storage?.get(STORAGE_KEY_QUERY) ?? defaultValue,",
          "",
          "[Removed Lines]",
          "78:   const onClickReferenceRef = useRef<OnClickReference>();",
          "80:     onClickReferenceRef.current = onClickReference;",
          "81:   }, [onClickReference]);",
          "",
          "[Added Lines]",
          "75:   const onClickReferenceRef = useRef<OnClickReference>(() => {});",
          "77:     onClickReferenceRef.current = reference => {",
          "78:       if (!explorer) {",
          "79:         return;",
          "80:       }",
          "81:       explorer.show();",
          "82:       if (reference && reference.kind === 'Type') {",
          "83:         explorer.push({ name: reference.type.name, def: reference.type });",
          "84:       } else if (reference.kind === 'Field') {",
          "85:         explorer.push({ name: reference.field.name, def: reference.field });",
          "86:       } else if (reference.kind === 'Argument' && reference.field) {",
          "87:         explorer.push({ name: reference.field.name, def: reference.field });",
          "88:       } else if (reference.kind === 'EnumValue' && reference.type) {",
          "89:         explorer.push({ name: reference.type.name, def: reference.type });",
          "90:       }",
          "91:     };",
          "92:   }, [explorer]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "139:           schema: undefined,",
          "140:           renderDescription: (text: string) => markdown.render(text),",
          "141:           onClick: (reference: SchemaReference) => {",
          "143:           },",
          "144:         },",
          "145:         jump: {",
          "146:           schema: undefined,",
          "147:           onClick: (reference: SchemaReference) => {",
          "149:           },",
          "150:         },",
          "151:         gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],",
          "",
          "[Removed Lines]",
          "142:             onClickReferenceRef.current?.(reference);",
          "148:             onClickReferenceRef.current?.(reference);",
          "",
          "[Added Lines]",
          "153:             onClickReferenceRef.current(reference);",
          "159:             onClickReferenceRef.current(reference);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "308:   useSynchronizeValue(queryEditor, value);",
          "312:   useKeyMap(queryEditor, ['Cmd-Enter', 'Ctrl-Enter'], onRunQuery);",
          "313:   useKeyMap(queryEditor, ['Shift-Ctrl-C'], onCopyQuery);",
          "",
          "[Removed Lines]",
          "310:   useCompletion(queryEditor, onHintInformationRender);",
          "",
          "[Added Lines]",
          "321:   useCompletion(queryEditor);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx": [
          "File: packages/graphiql-react/src/editor/variable-editor.tsx -> packages/graphiql-react/src/editor/variable-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import { commonKeys, importCodeMirror } from './common';",
          "5: import { EditorContext } from './context';",
          "6: import {",
          "8:   EditCallback,",
          "9:   EmptyCallback,",
          "10:   useChangeHandler,",
          "",
          "[Removed Lines]",
          "7:   CompletionCallback,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: export type UseVariableEditorArgs = {",
          "19:   editorTheme?: string;",
          "20:   onEdit?: EditCallback;",
          "22:   onPrettifyQuery?: EmptyCallback;",
          "23:   onMergeQuery?: EmptyCallback;",
          "24:   onRunQuery?: EmptyCallback;",
          "",
          "[Removed Lines]",
          "21:   onHintInformationRender?: CompletionCallback;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29: export function useVariableEditor({",
          "30:   editorTheme = 'graphiql',",
          "31:   onEdit,",
          "33:   onMergeQuery,",
          "34:   onPrettifyQuery,",
          "35:   onRunQuery,",
          "",
          "[Removed Lines]",
          "32:   onHintInformationRender,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138:   useChangeHandler(variableEditor, onEdit, STORAGE_KEY);",
          "142:   useKeyMap(variableEditor, ['Cmd-Enter', 'Ctrl-Enter'], onRunQuery);",
          "143:   useKeyMap(variableEditor, ['Shift-Ctrl-P'], onPrettifyQuery);",
          "",
          "[Removed Lines]",
          "140:   useCompletion(variableEditor, onHintInformationRender);",
          "",
          "[Added Lines]",
          "137:   useCompletion(variableEditor);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer.tsx||packages/graphiql-react/src/explorer.tsx": [
          "File: packages/graphiql-react/src/explorer.tsx -> packages/graphiql-react/src/explorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   useContext,",
          "12:   useEffect,",
          "13:   useMemo,",
          "14:   useState,",
          "15: } from 'react';",
          "16: import { useSchemaWithError } from './schema';",
          "18: export type ExplorerFieldDef =",
          "19:   | GraphQLField<{}, {}, {}>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:   useRef,",
          "18: import { StorageContext } from './storage';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: export type ExplorerContextType = {",
          "42:   explorerNavStack: ExplorerNavStack;",
          "43:   push(item: ExplorerNavStackItem): void;",
          "44:   pop(): void;",
          "45:   reset(): void;",
          "46:   showSearch(search: string): void;",
          "47: };",
          "49: export const ExplorerContext = createContext<ExplorerContextType | null>(null);",
          "52:   const { isFetching } = useSchemaWithError(",
          "53:     'component',",
          "54:     'ExplorerContextProvider',",
          "55:   );",
          "59:   const push = useCallback((item: ExplorerNavStackItem) => {",
          "61:       const lastItem = currentState[currentState.length - 1];",
          "62:       return lastItem.def === item.def",
          "63:         ? // Avoid pushing duplicate items",
          "",
          "[Removed Lines]",
          "51: export function ExplorerContextProvider(props: { children: ReactNode }) {",
          "57:   const [state, setState] = useState<ExplorerNavStack>([initialNavStackItem]);",
          "60:     setState(currentState => {",
          "",
          "[Added Lines]",
          "45:   hide(): void;",
          "46:   isVisible: boolean;",
          "50:   show(): void;",
          "56: type ExplorerContextProviderProps = {",
          "57:   children: ReactNode;",
          "58:   isVisible?: boolean;",
          "59:   onToggleVisibility?(isVisible: boolean): void;",
          "60: };",
          "62: export function ExplorerContextProvider(props: ExplorerContextProviderProps) {",
          "67:   const storage = useContext(StorageContext);",
          "69:   const [isVisible, setIsVisible] = useState(",
          "70:     props.isVisible ?? storage?.get(STORAGE_KEY) === 'true' ?? false,",
          "71:   );",
          "72:   const [navStack, setNavStack] = useState<ExplorerNavStack>([",
          "73:     initialNavStackItem,",
          "74:   ]);",
          "76:   const { onToggleVisibility } = props;",
          "78:   const isInitialRender = useRef(true);",
          "79:   useEffect(() => {",
          "80:     if (isInitialRender.current) {",
          "81:       isInitialRender.current = false;",
          "82:     } else if (props.isVisible !== undefined) {",
          "83:       setIsVisible(props.isVisible);",
          "84:     }",
          "85:   }, [props.isVisible]);",
          "87:   const hide = useCallback(() => {",
          "88:     onToggleVisibility?.(false);",
          "89:     storage?.set(STORAGE_KEY, 'false');",
          "90:     setIsVisible(false);",
          "91:   }, [onToggleVisibility, storage]);",
          "94:     setNavStack(currentState => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:   }, []);",
          "69:   const pop = useCallback(() => {",
          "71:       currentState.length > 1",
          "72:         ? (currentState.slice(0, -1) as ExplorerNavStack)",
          "73:         : currentState,",
          "",
          "[Removed Lines]",
          "70:     setState(currentState =>",
          "",
          "[Added Lines]",
          "104:     setNavStack(currentState =>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:   }, []);",
          "77:   const reset = useCallback(() => {",
          "79:       currentState.length === 1 ? currentState : [initialNavStackItem],",
          "80:     );",
          "81:   }, []);",
          "83:   const showSearch = useCallback((search: string) => {",
          "85:       const lastItem = currentState[currentState.length - 1];",
          "86:       const allButLastItem = currentState.slice(0, -1) as ExplorerNavStack;",
          "87:       return [...allButLastItem, { ...lastItem, search }] as ExplorerNavStack;",
          "",
          "[Removed Lines]",
          "78:     setState(currentState =>",
          "84:     setState(currentState => {",
          "",
          "[Added Lines]",
          "112:     setNavStack(currentState =>",
          "117:   const show = useCallback(() => {",
          "118:     onToggleVisibility?.(true);",
          "119:     storage?.set(STORAGE_KEY, 'true');",
          "120:     setIsVisible(true);",
          "121:   }, [onToggleVisibility, storage]);",
          "124:     setNavStack(currentState => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95:   }, [isFetching, reset]);",
          "97:   const value = useMemo<ExplorerContextType>(",
          "100:   );",
          "102:   return (",
          "",
          "[Removed Lines]",
          "98:     () => ({ explorerNavStack: state, push, pop, reset, showSearch }),",
          "99:     [state, push, pop, reset, showSearch],",
          "",
          "[Added Lines]",
          "138:     () => ({",
          "139:       explorerNavStack: navStack,",
          "140:       hide,",
          "141:       isVisible,",
          "142:       push,",
          "143:       pop,",
          "144:       reset,",
          "145:       show,",
          "146:       showSearch,",
          "147:     }),",
          "148:     [hide, isVisible, navStack, push, pop, reset, show, showSearch],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "109: export function useExplorerNavStack() {",
          "110:   return useContext(ExplorerContext);",
          "111: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162: const STORAGE_KEY = 'docExplorerOpen';",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   const { fetchError, isFetching, schema, validationErrors } = useSchema();",
          "35:   const explorerContext = useExplorerNavStack();",
          "36:   if (!explorerContext) {",
          "",
          "[Removed Lines]",
          "33: export function DocExplorer(props: { children?: ReactNode }) {",
          "",
          "[Added Lines]",
          "28: export function DocExplorer() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     );",
          "40:   }",
          "43:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "45:   function handleClickType(type: GraphQLNamedType) {",
          "",
          "[Removed Lines]",
          "42:   const { explorerNavStack, pop, push, showSearch } = explorerContext;",
          "",
          "[Added Lines]",
          "37:   const { explorerNavStack, hide, pop, push, showSearch } = explorerContext;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:         <div className=\"doc-explorer-title\">",
          "122:           {navItem.title || navItem.name}",
          "123:         </div>",
          "125:       </div>",
          "126:       <div className=\"doc-explorer-contents\">",
          "127:         {shouldSearchBoxAppear && (",
          "",
          "[Removed Lines]",
          "124:         <div className=\"doc-explorer-rhs\">{props.children}</div>",
          "",
          "[Added Lines]",
          "119:         <div className=\"doc-explorer-rhs\">",
          "120:           <button",
          "121:             className=\"docExplorerHide\"",
          "122:             onClick={() => {",
          "123:               hide();",
          "124:             }}",
          "125:             aria-label=\"Close Documentation Explorer\">",
          "126:             {'\\u2715'}",
          "127:           </button>",
          "128:         </div>",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   ValidationRule,",
          "20:   FragmentDefinitionNode,",
          "21:   DocumentNode,",
          "23: } from 'graphql';",
          "24: import copyToClipboard from 'copy-to-clipboard';",
          "25: import { getFragmentDependenciesForAST } from 'graphql-language-service';",
          "28: import {",
          "29:   EditorContext,",
          "",
          "[Removed Lines]",
          "22:   GraphQLNamedType,",
          "26: import { SchemaReference } from 'codemirror-graphql/src/utils/SchemaReference';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import type {",
          "41:   EditorContextType,",
          "42:   ExplorerContextType,",
          "44:   HistoryContextType,",
          "45:   ResponseTooltipType,",
          "46:   SchemaContextType,",
          "",
          "[Removed Lines]",
          "43:   ExplorerFieldDef,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315: };",
          "317: export type GraphiQLState = {",
          "319:   response?: string;",
          "320:   editorFlex: number;",
          "321:   secondaryEditorOpen: boolean;",
          "",
          "[Removed Lines]",
          "318:   docExplorerOpen: boolean;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "355: export function GraphiQL({",
          "356:   dangerouslyAssumeSchemaIsValid,",
          "357:   inputValueDeprecation,",
          "358:   introspectionQueryName,",
          "359:   schema,",
          "360:   schemaDescription,",
          "361:   ...props",
          "362: }: GraphiQLProps) {",
          "363:   return (",
          "365:       <StorageContext.Consumer>",
          "366:         {storageContext => (",
          "367:           <SchemaContextProvider",
          "",
          "[Removed Lines]",
          "364:     <StorageContextProvider storage={props.storage}>",
          "",
          "[Added Lines]",
          "353:   docExplorerOpen,",
          "356:   maxHistoryLength,",
          "357:   onToggleHistory,",
          "358:   onToggleDocs,",
          "359:   storage,",
          "365:     <StorageContextProvider storage={storage}>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "376:             introspectionQueryName={introspectionQueryName}",
          "377:             schema={schema}",
          "378:             schemaDescription={schemaDescription}>",
          "384:                   <SchemaContext.Consumer>",
          "385:                     {schemaContext => (",
          "392:                                   <GraphiQLWithContext",
          "393:                                     {...props}",
          "394:                                     editorContext={editorContext}",
          "",
          "[Removed Lines]",
          "379:             <EditorContextProvider>",
          "380:               <HistoryContextProvider",
          "381:                 maxHistoryLength={props.maxHistoryLength}",
          "382:                 onToggle={props.onToggleHistory}>",
          "383:                 <ExplorerContextProvider>",
          "386:                       <EditorContext.Consumer>",
          "387:                         {editorContext => (",
          "388:                           <HistoryContext.Consumer>",
          "389:                             {historyContext => (",
          "390:                               <ExplorerContext.Consumer>",
          "391:                                 {explorerContext => (",
          "",
          "[Added Lines]",
          "380:             <ExplorerContextProvider",
          "381:               isVisible={docExplorerOpen}",
          "382:               onToggleVisibility={onToggleDocs}>",
          "383:               <EditorContextProvider>",
          "384:                 <HistoryContextProvider",
          "385:                   maxHistoryLength={maxHistoryLength}",
          "386:                   onToggle={onToggleHistory}>",
          "389:                       <ExplorerContext.Consumer>",
          "390:                         {explorerContext => (",
          "391:                           <EditorContext.Consumer>",
          "392:                             {editorContext => (",
          "393:                               <HistoryContext.Consumer>",
          "394:                                 {historyContext => (",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "398:                                     storageContext={storageContext}",
          "399:                                   />",
          "400:                                 )}",
          "402:                             )}",
          "404:                         )}",
          "406:                     )}",
          "407:                   </SchemaContext.Consumer>",
          "411:           </SchemaContextProvider>",
          "412:         )}",
          "413:       </StorageContext.Consumer>",
          "",
          "[Removed Lines]",
          "401:                               </ExplorerContext.Consumer>",
          "403:                           </HistoryContext.Consumer>",
          "405:                       </EditorContext.Consumer>",
          "408:                 </ExplorerContextProvider>",
          "409:               </HistoryContextProvider>",
          "410:             </EditorContextProvider>",
          "",
          "[Added Lines]",
          "404:                               </HistoryContext.Consumer>",
          "406:                           </EditorContext.Consumer>",
          "408:                       </ExplorerContext.Consumer>",
          "411:                 </HistoryContextProvider>",
          "412:               </EditorContextProvider>",
          "413:             </ExplorerContextProvider>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "456: type GraphiQLWithContextProps = Omit<",
          "457:   GraphiQLProps,",
          "458:   | 'dangerouslyAssumeSchemaIsValid'",
          "459:   | 'inputValueDeprecation'",
          "460:   | 'introspectionQueryName'",
          "461:   | 'maxHistoryLength'",
          "462:   | 'onToggleHistory'",
          "463:   | 'schema'",
          "464:   | 'schemaDescription'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "462:   | 'docExplorerOpen'",
          "466:   | 'onToggleDocs'",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "513:       props.storageContext?.get('operationName') ??",
          "514:       undefined;",
          "528:     let secondaryEditorOpen;",
          "529:     if (props.defaultVariableEditorOpen !== undefined) {",
          "",
          "[Removed Lines]",
          "517:     let docExplorerOpen = props.docExplorerOpen || false;",
          "520:     const docExplorerOpenStorage = this.props.storageContext?.get(",
          "521:       'docExplorerOpen',",
          "522:     );",
          "523:     if (docExplorerOpenStorage) {",
          "524:       docExplorerOpen = docExplorerOpenStorage === 'true';",
          "525:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "607:     this.state = {",
          "608:       tabs: tabsState,",
          "609:       response: activeTab?.response,",
          "611:       editorFlex: Number(this.props.storageContext?.get('editorFlex')) || 1,",
          "612:       secondaryEditorOpen,",
          "613:       secondaryEditorHeight:",
          "",
          "[Removed Lines]",
          "610:       docExplorerOpen,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "796:               />",
          "797:               {toolbar}",
          "798:             </div>",
          "807:           </div>",
          "808:           {this.props.tabs ? (",
          "809:             <Tabs",
          "",
          "[Removed Lines]",
          "799:             {!this.state.docExplorerOpen && (",
          "800:               <button",
          "801:                 className=\"docExplorerShow\"",
          "802:                 onClick={this.handleToggleDocs}",
          "803:                 aria-label=\"Open Documentation Explorer\">",
          "804:                 Docs",
          "805:               </button>",
          "806:             )}",
          "",
          "[Added Lines]",
          "792:             {this.props.explorerContext &&",
          "793:               !this.props.explorerContext.isVisible && (",
          "794:                 <button",
          "795:                   className=\"docExplorerShow\"",
          "796:                   onClick={() => {",
          "797:                     this.props.explorerContext?.show();",
          "798:                   }}",
          "799:                   aria-label=\"Open Documentation Explorer\">",
          "800:                   Docs",
          "801:                 </button>",
          "802:               )}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "842:                 defaultValue={this.props.defaultQuery}",
          "843:                 editorTheme={this.props.editorTheme}",
          "844:                 externalFragments={this.props.externalFragments}",
          "846:                 onCopyQuery={this.handleCopyQuery}",
          "847:                 onEdit={this.handleEditQuery}",
          "848:                 onEditOperationName={this.props.onEditOperationName}",
          "850:                 onMergeQuery={this.handleMergeQuery}",
          "851:                 onPrettifyQuery={this.handlePrettifyQuery}",
          "852:                 onRunQuery={this.handleEditorRunQuery}",
          "",
          "[Removed Lines]",
          "845:                 onClickReference={this.handleClickReference}",
          "849:                 onHintInformationRender={this.handleHintInformationRender}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "894:                 <VariableEditor",
          "895:                   value={this.props.variables}",
          "896:                   onEdit={this.handleEditVariables}",
          "898:                   onPrettifyQuery={this.handlePrettifyQuery}",
          "899:                   onMergeQuery={this.handleMergeQuery}",
          "900:                   onRunQuery={this.handleEditorRunQuery}",
          "",
          "[Removed Lines]",
          "897:                   onHintInformationRender={this.handleHintInformationRender}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "907:                     active={this.state.headerEditorActive}",
          "908:                     editorTheme={this.props.editorTheme}",
          "909:                     onEdit={this.handleEditHeaders}",
          "911:                     onMergeQuery={this.handleMergeQuery}",
          "912:                     onPrettifyQuery={this.handlePrettifyQuery}",
          "913:                     onRunQuery={this.handleEditorRunQuery}",
          "",
          "[Removed Lines]",
          "910:                     onHintInformationRender={this.handleHintInformationRender}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "933:             </div>",
          "934:           </div>",
          "935:         </div>",
          "937:           <div className={docExplorerWrapClasses} style={docWrapStyle}>",
          "938:             <div",
          "939:               className=\"docExplorerResizer\"",
          "940:               onDoubleClick={this.handleDocsResetResize}",
          "941:               onMouseDown={this.handleDocsResizeStart}",
          "942:             />",
          "951:           </div>",
          "952:         )}",
          "953:       </div>",
          "",
          "[Removed Lines]",
          "936:         {this.state.docExplorerOpen && (",
          "943:             <DocExplorer>",
          "944:               <button",
          "945:                 className=\"docExplorerHide\"",
          "946:                 onClick={this.handleToggleDocs}",
          "947:                 aria-label=\"Close Documentation Explorer\">",
          "948:                 {'\\u2715'}",
          "949:               </button>",
          "950:             </DocExplorer>",
          "",
          "[Added Lines]",
          "928:         {this.props.explorerContext?.isVisible && (",
          "935:             <DocExplorer />",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1139:       });",
          "1140:   }",
          "1160:   handleRunQuery = async (selectedOperationName?: string) => {",
          "1161:     this._editorQueryID++;",
          "1162:     const queryID = this._editorQueryID;",
          "",
          "[Removed Lines]",
          "1142:   handleClickReference = (reference: SchemaReference) => {",
          "1143:     this.setState({ docExplorerOpen: true }, () => {",
          "1144:       if (reference && reference.kind === 'Type') {",
          "1145:         this.showDoc(reference.type);",
          "1146:       } else if (reference.kind === 'Field') {",
          "1147:         this.showDoc(reference.field);",
          "1148:       } else if (reference.kind === 'Argument' && reference.field) {",
          "1149:         this.showDoc(reference.field);",
          "1150:       } else if (reference.kind === 'EnumValue' && reference.type) {",
          "1151:         this.showDoc(reference.type);",
          "1152:       }",
          "1153:     });",
          "1154:     this.props.storageContext?.set(",
          "1155:       'docExplorerOpen',",
          "1156:       JSON.stringify(this.state.docExplorerOpen),",
          "1157:     );",
          "1158:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1459:     }",
          "1460:   };",
          "1475:   handleEditorRunQuery = () => {",
          "1476:     this._runQueryAtCursor();",
          "1477:   };",
          "1517:   handleSelectHistoryQuery = ({",
          "1518:     query,",
          "1519:     variables,",
          "",
          "[Removed Lines]",
          "1462:   handleHintInformationRender = (elem: HTMLDivElement) => {",
          "1463:     elem.addEventListener('click', this._onClickHintInformation);",
          "1465:     let onRemoveFn: EventListener;",
          "1466:     elem.addEventListener(",
          "1467:       'DOMNodeRemoved',",
          "1468:       (onRemoveFn = () => {",
          "1469:         elem.removeEventListener('DOMNodeRemoved', onRemoveFn);",
          "1470:         elem.removeEventListener('click', this._onClickHintInformation);",
          "1471:       }),",
          "1472:     );",
          "1473:   };",
          "1479:   private _onClickHintInformation = (",
          "1480:     event: MouseEvent | React.MouseEvent<HTMLDivElement>,",
          "1481:   ) => {",
          "1482:     if (",
          "1483:       event?.currentTarget &&",
          "1484:       'className' in event.currentTarget &&",
          "1485:       event.currentTarget.className === 'typeName'",
          "1486:     ) {",
          "1487:       const typeName = event.currentTarget.innerHTML;",
          "1488:       const schema = this.props.schemaContext.schema;",
          "1489:       if (schema) {",
          "1490:         const type = schema.getType(typeName);",
          "1491:         if (type) {",
          "1492:           this.setState({ docExplorerOpen: true }, () => {",
          "1493:             this.showDoc(type);",
          "1494:           });",
          "1495:           debounce(500, () =>",
          "1496:             this.props.storageContext?.set(",
          "1497:               'docExplorerOpen',",
          "1498:               JSON.stringify(this.state.docExplorerOpen),",
          "1499:             ),",
          "1500:           )();",
          "1501:         }",
          "1502:       }",
          "1503:     }",
          "1504:   };",
          "1506:   handleToggleDocs = () => {",
          "1507:     if (typeof this.props.onToggleDocs === 'function') {",
          "1508:       this.props.onToggleDocs(!this.state.docExplorerOpen);",
          "1509:     }",
          "1510:     this.props.storageContext?.set(",
          "1511:       'docExplorerOpen',",
          "1512:       JSON.stringify(!this.state.docExplorerOpen),",
          "1513:     );",
          "1514:     this.setState({ docExplorerOpen: !this.state.docExplorerOpen });",
          "1515:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1615:       const docsSize = app.clientWidth - cursorPos;",
          "1617:       if (docsSize < 100) {",
          "1626:       } else {",
          "1631:         debounce(500, () =>",
          "1632:           this.props.storageContext?.set(",
          "1633:             'docExplorerWidth',",
          "",
          "[Removed Lines]",
          "1618:         if (typeof this.props.onToggleDocs === 'function') {",
          "1619:           this.props.onToggleDocs(!this.state.docExplorerOpen);",
          "1620:         }",
          "1621:         this.props.storageContext?.set(",
          "1622:           'docExplorerOpen',",
          "1623:           JSON.stringify(this.state.docExplorerOpen),",
          "1624:         );",
          "1625:         this.setState({ docExplorerOpen: false });",
          "1627:         this.setState({",
          "1628:           docExplorerOpen: true,",
          "1629:           docExplorerWidth: Math.min(docsSize, 650),",
          "1630:         });",
          "",
          "[Added Lines]",
          "1534:         this.props.explorerContext?.hide();",
          "1536:         this.props.explorerContext?.show();",
          "1537:         this.setState({ docExplorerWidth: Math.min(docsSize, 650) });",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1635:           ),",
          "1636:         )();",
          "1637:       }",
          "1642:     };",
          "1644:     let onMouseUp: OnMouseUpFn = () => {",
          "1646:         this.setState({ docExplorerWidth: hadWidth });",
          "1647:         debounce(500, () =>",
          "1648:           this.props.storageContext?.set(",
          "",
          "[Removed Lines]",
          "1638:       this.props.storageContext?.set(",
          "1639:         'docExplorerOpen',",
          "1640:         JSON.stringify(this.state.docExplorerOpen),",
          "1641:       );",
          "1645:       if (!this.state.docExplorerOpen) {",
          "",
          "[Added Lines]",
          "1548:       if (this.props.explorerContext && !this.props.explorerContext.isVisible) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1755:     document.addEventListener('mousemove', onMouseMove);",
          "1756:     document.addEventListener('mouseup', onMouseUp);",
          "1757:   };",
          "1767: }",
          "",
          "[Removed Lines]",
          "1761:   private showDoc(typeOrField: GraphQLNamedType | ExplorerFieldDef) {",
          "1762:     this.props.explorerContext?.push({",
          "1763:       name: typeOrField.name,",
          "1764:       def: typeOrField,",
          "1765:     });",
          "1766:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f82bd7a931eb5fa9a33e59d417303706844c9063",
      "candidate_info": {
        "commit_hash": "f82bd7a931eb5fa9a33e59d417303706844c9063",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/f82bd7a931eb5fa9a33e59d417303706844c9063",
        "files": [
          ".changeset/cuddly-games-protect.md",
          "packages/graphql-language-service-server/README.md",
          "packages/graphql-language-service-server/package.json",
          "packages/graphql-language-service-server/src/GraphQLCache.ts",
          "packages/graphql-language-service-server/src/Logger.ts",
          "packages/graphql-language-service-server/src/MessageProcessor.ts",
          "packages/graphql-language-service-server/src/__tests__/.graphqlrc.yml",
          "packages/graphql-language-service-server/src/__tests__/Logger-test.ts",
          "yarn.lock"
        ],
        "message": "fix: a few major bugs with SDL and remote schema in the language server (#2055)",
        "before_after_code_files": [
          "packages/graphql-language-service-server/src/GraphQLCache.ts||packages/graphql-language-service-server/src/GraphQLCache.ts",
          "packages/graphql-language-service-server/src/Logger.ts||packages/graphql-language-service-server/src/Logger.ts",
          "packages/graphql-language-service-server/src/MessageProcessor.ts||packages/graphql-language-service-server/src/MessageProcessor.ts",
          "packages/graphql-language-service-server/src/__tests__/Logger-test.ts||packages/graphql-language-service-server/src/__tests__/Logger-test.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphql-language-service-server/src/GraphQLCache.ts||packages/graphql-language-service-server/src/GraphQLCache.ts": [
          "File: packages/graphql-language-service-server/src/GraphQLCache.ts -> packages/graphql-language-service-server/src/GraphQLCache.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   getGraphQLConfig = (): GraphQLConfig => this._graphQLConfig;",
          "108:   getProjectForFile = (uri: string): GraphQLProjectConfig => {",
          "110:   };",
          "112:   getFragmentDependencies = async (",
          "",
          "[Removed Lines]",
          "109:     return this._graphQLConfig.getProjectForFile(fileURLToPath(uri));",
          "",
          "[Added Lines]",
          "109:     return this._graphQLConfig.getProjectForFile(new URL(uri).pathname);",
          "",
          "---------------"
        ],
        "packages/graphql-language-service-server/src/Logger.ts||packages/graphql-language-service-server/src/Logger.ts": [
          "File: packages/graphql-language-service-server/src/Logger.ts -> packages/graphql-language-service-server/src/Logger.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     const logMessage = `${timestamp} [${severity}] (pid: ${pid}) graphql-language-service-usage-logs: ${stringMessage}\\n`;",
          "73:     fs.appendFile(this._logFilePath, logMessage, _error => {});",
          "77:   }",
          "79:   _getOutputStream(severity: DiagnosticSeverity): Socket {",
          "",
          "[Removed Lines]",
          "74:     this._getOutputStream(severity).write(logMessage, err => {",
          "75:       err && console.error(err);",
          "76:     });",
          "",
          "[Added Lines]",
          "75:     if (severityKey !== SEVERITY.Hint) {",
          "76:       this._getOutputStream(severity).write(logMessage, err => {",
          "77:         err && console.error(err);",
          "78:       });",
          "79:     }",
          "",
          "---------------"
        ],
        "packages/graphql-language-service-server/src/MessageProcessor.ts||packages/graphql-language-service-server/src/MessageProcessor.ts": [
          "File: packages/graphql-language-service-server/src/MessageProcessor.ts -> packages/graphql-language-service-server/src/MessageProcessor.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import mkdirp from 'mkdirp';",
          "11: import { readFileSync, existsSync, writeFileSync, writeFile } from 'fs';",
          "13: import * as path from 'path';",
          "14: import {",
          "15:   CachedContent,",
          "16:   Uri,",
          "",
          "[Removed Lines]",
          "12: import { fileURLToPath, pathToFileURL } from 'url';",
          "",
          "[Added Lines]",
          "12: import { pathToFileURL } from 'url';",
          "14: import glob from 'fast-glob';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:       throw new Error('GraphQL Language Server is not initialized.');",
          "192:     }",
          "195:       JSON.stringify({",
          "196:         type: 'usage',",
          "197:         messageType: 'initialize',",
          "",
          "[Removed Lines]",
          "194:     this._logger.log(",
          "",
          "[Added Lines]",
          "195:     this._logger.info(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "584:         ) {",
          "585:           const uri = change.uri;",
          "588:           const contents = this._parser(text, uri);",
          "590:           await this._updateFragmentDefinition(uri, contents);",
          "",
          "[Removed Lines]",
          "587:           const text = readFileSync(fileURLToPath(uri), { encoding: 'utf8' });",
          "",
          "[Added Lines]",
          "588:           const text = readFileSync(new URL(uri).pathname).toString();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "863:       return path.resolve(projectTmpPath);",
          "864:     }",
          "865:   }",
          "867:   async _cacheSchemaFilesForProject(project: GraphQLProjectConfig) {",
          "868:     const schema = project?.schema;",
          "869:     const config = project?.extensions?.languageService;",
          "883:       false;",
          "885:       await this._cacheConfigSchema(project);",
          "897:     }",
          "898:   }",
          "",
          "[Removed Lines]",
          "880:     const useSchemaFileDefinitions =",
          "881:       (config?.useSchemaFileDefinitions ??",
          "882:         this?._settings?.useSchemaFileDefinitions) ||",
          "884:     if (!useSchemaFileDefinitions) {",
          "886:     } else {",
          "887:       if (Array.isArray(schema)) {",
          "888:         Promise.all(",
          "889:           schema.map(async (uri: UnnormalizedTypeDefPointer) => {",
          "890:             await this._cacheSchemaFile(uri, project);",
          "891:           }),",
          "892:         );",
          "893:       } else {",
          "894:         const uri = schema.toString();",
          "895:         await this._cacheSchemaFile(uri, project);",
          "896:       }",
          "",
          "[Added Lines]",
          "874:   async _cacheSchemaPath(uri: string, project: GraphQLProjectConfig) {",
          "875:     try {",
          "876:       const files = await glob(uri);",
          "877:       if (files && files.length > 0) {",
          "878:         await Promise.all(",
          "879:           files.map(uriPath => this._cacheSchemaFile(uriPath, project)),",
          "880:         );",
          "881:       } else {",
          "882:         try {",
          "883:           this._cacheSchemaFile(uri, project);",
          "884:         } catch (err) {",
          "886:         }",
          "887:       }",
          "888:     } catch (err) {}",
          "889:   }",
          "890:   async _cacheObjectSchema(",
          "891:     pointer: { [key: string]: any },",
          "892:     project: GraphQLProjectConfig,",
          "893:   ) {",
          "894:     await Promise.all(",
          "895:       Object.keys(pointer).map(async schemaUri =>",
          "896:         this._cacheSchemaPath(schemaUri, project),",
          "897:       ),",
          "898:     );",
          "899:   }",
          "900:   async _cacheArraySchema(",
          "901:     pointers: UnnormalizedTypeDefPointer[],",
          "902:     project: GraphQLProjectConfig,",
          "903:   ) {",
          "904:     await Promise.all(",
          "905:       pointers.map(async schemaEntry => {",
          "906:         if (typeof schemaEntry === 'string') {",
          "907:           await this._cacheSchemaPath(schemaEntry, project);",
          "908:         } else if (schemaEntry) {",
          "909:           await this._cacheObjectSchema(schemaEntry, project);",
          "910:         }",
          "911:       }),",
          "912:     );",
          "913:   }",
          "932:     const cacheSchemaFileForLookup =",
          "933:       config?.cacheSchemaFileForLookup ??",
          "934:       this?._settings?.cacheSchemaFileForLookup ??",
          "936:     if (cacheSchemaFileForLookup) {",
          "938:     } else if (typeof schema === 'string') {",
          "939:       await this._cacheSchemaPath(schema, project);",
          "940:     } else if (Array.isArray(schema)) {",
          "941:       await this._cacheArraySchema(schema, project);",
          "942:     } else if (schema) {",
          "943:       await this._cacheObjectSchema(schema, project);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "995:     if (config?.projects) {",
          "996:       return Promise.all(",
          "997:         Object.keys(config.projects).map(async projectName => {",
          "999:           await this._cacheSchemaFilesForProject(project);",
          "1000:           await this._cacheDocumentFilesforProject(project);",
          "1001:         }),",
          "",
          "[Removed Lines]",
          "998:           const project = await config.getProject(projectName);",
          "",
          "[Added Lines]",
          "1045:           const project = config.getProject(projectName);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1057:           contents,",
          "1058:         });",
          "1059:       }",
          "1065:     }",
          "1067:   }",
          "1068: }",
          "",
          "[Removed Lines]",
          "1060:     } else if (textDocument?.version) {",
          "1061:       return this._textDocumentCache.set(uri, {",
          "1062:         version: textDocument.version,",
          "1063:         contents,",
          "1064:       });",
          "1066:     return null;",
          "",
          "[Added Lines]",
          "1108:     return this._textDocumentCache.set(uri, {",
          "1109:       version: textDocument.version ?? 0,",
          "1110:       contents,",
          "1111:     });",
          "",
          "---------------"
        ],
        "packages/graphql-language-service-server/src/__tests__/Logger-test.ts||packages/graphql-language-service-server/src/__tests__/Logger-test.ts": [
          "File: packages/graphql-language-service-server/src/__tests__/Logger-test.ts -> packages/graphql-language-service-server/src/__tests__/Logger-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   it('logs to stdout', () => {",
          "32:     const logger = new Logger(tmpdir());",
          "35:     expect(mockedStdoutWrite.mock.calls.length).toBe(1);",
          "36:     expect(mockedStdoutWrite.mock.calls[0][0]).toContain('log test');",
          "",
          "[Removed Lines]",
          "33:     logger.log('log test');",
          "",
          "[Added Lines]",
          "33:     logger.info('log test');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     const logger = new Logger(tmpdir(), stderrOnly);",
          "52:     logger.info('info test');",
          "53:     logger.warn('warn test');",
          "54:     logger.log('log test');",
          "55:     logger.error('error test');",
          "57:     expect(mockedStdoutWrite.mock.calls.length).toBe(0);",
          "59:     expect(mockedStderrWrite.mock.calls[0][0]).toContain('info test');",
          "60:     expect(mockedStderrWrite.mock.calls[1][0]).toContain('warn test');",
          "63:   });",
          "64: });",
          "",
          "[Removed Lines]",
          "58:     expect(mockedStderrWrite.mock.calls.length).toBe(4);",
          "61:     expect(mockedStderrWrite.mock.calls[2][0]).toContain('log test');",
          "62:     expect(mockedStderrWrite.mock.calls[3][0]).toContain('error test');",
          "",
          "[Added Lines]",
          "59:     expect(mockedStderrWrite.mock.calls.length).toBe(3);",
          "62:     expect(mockedStderrWrite.mock.calls[2][0]).toContain('error test');",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3270:     tslib \"^2\"",
          "3272: \"@graphiql/toolkit@file:packages/graphiql-toolkit\":",
          "3274:   dependencies:",
          "3275:     \"@n1ru4l/push-pull-async-iterable-iterator\" \"^3.1.0\"",
          "3276:     meros \"^1.1.4\"",
          "",
          "[Removed Lines]",
          "3273:   version \"0.4.1\"",
          "",
          "[Added Lines]",
          "3273:   version \"0.4.2\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10014:     micromatch \"^4.0.2\"",
          "10015:     picomatch \"^2.2.1\"",
          "10017: fast-json-stable-stringify@2.x, fast-json-stable-stringify@^2.0.0:",
          "10018:   version \"2.1.0\"",
          "10019:   resolved \"https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz#874bf69c6f404c2b5d99c481341399fd55892633\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10017: fast-glob@^3.2.7:",
          "10018:   version \"3.2.7\"",
          "10019:   resolved \"https://registry.yarnpkg.com/fast-glob/-/fast-glob-3.2.7.tgz#fd6cb7a2d7e9aa7a7846111e85a196d6b2f766a1\"",
          "10020:   integrity sha512-rYGMRwip6lUMvYD3BTScMwT1HtAs2d71SMv66Vrxs0IekGZEjhM0pcMfjQPnknBt2zeCwQMEupiN02ZP4DiT1Q==",
          "10021:   dependencies:",
          "10022:     \"@nodelib/fs.stat\" \"^2.0.2\"",
          "10023:     \"@nodelib/fs.walk\" \"^1.2.3\"",
          "10024:     glob-parent \"^5.1.2\"",
          "10025:     merge2 \"^1.3.0\"",
          "10026:     micromatch \"^4.0.4\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10744:   dependencies:",
          "10745:     is-glob \"^4.0.1\"",
          "10748:   version \"5.1.2\"",
          "10749:   resolved \"https://registry.yarnpkg.com/glob-parent/-/glob-parent-5.1.2.tgz#869832c58034fe68a4093c17dc15e8340d8401c4\"",
          "10750:   integrity sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
          "",
          "[Removed Lines]",
          "10747: glob-parent@^5.1.0:",
          "",
          "[Added Lines]",
          "10758: glob-parent@^5.1.0, glob-parent@^5.1.2:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10992:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
          "10994: \"graphiql@file:packages/graphiql\":",
          "10996:   dependencies:",
          "10998:     codemirror \"^5.58.2\"",
          "11000:     copy-to-clipboard \"^3.2.0\"",
          "11001:     dset \"^3.1.0\"",
          "11002:     entities \"^2.0.0\"",
          "11003:     escape-html \"^1.0.3\"",
          "11005:     markdown-it \"^12.2.0\"",
          "11007: graphql-config@^4.1.0:",
          "",
          "[Removed Lines]",
          "10995:   version \"1.5.2\"",
          "10997:     \"@graphiql/toolkit\" \"^0.4.1\"",
          "10999:     codemirror-graphql \"^1.2.0\"",
          "11004:     graphql-language-service \"^3.2.1\"",
          "",
          "[Added Lines]",
          "11006:   version \"1.5.5\"",
          "11008:     \"@graphiql/toolkit\" \"^0.4.2\"",
          "11010:     codemirror-graphql \"^1.2.3\"",
          "11015:     graphql-language-service \"^3.2.3\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a40d621cabaa3e1eae679af7c158e47a13f244b",
      "candidate_info": {
        "commit_hash": "2a40d621cabaa3e1eae679af7c158e47a13f244b",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/2a40d621cabaa3e1eae679af7c158e47a13f244b",
        "files": [
          ".changeset/five-pillows-fail.md",
          "custom-words.txt",
          "packages/graphiql-react/package.json",
          "packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts",
          "packages/graphiql-react/src/explorer/components/search.css",
          "packages/graphiql-react/src/explorer/components/search.tsx",
          "packages/graphiql-react/src/explorer/components/type-link.tsx",
          "packages/graphiql-react/src/explorer/components/utils.tsx",
          "packages/graphiql-react/src/explorer/context.tsx",
          "packages/graphiql-react/src/explorer/index.ts",
          "packages/graphiql-react/src/icons/index.tsx",
          "packages/graphiql-react/src/icons/magnifying-glass.svg",
          "packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.tsx",
          "packages/graphiql/cypress/integration/docs.spec.ts",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/DocExplorer/SearchBox.tsx",
          "packages/graphiql/src/components/DocExplorer/SearchResults.tsx",
          "yarn.lock"
        ],
        "message": "add `Search` component to `@graphiql/react` (#2586)",
        "before_after_code_files": [
          "packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts||packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts",
          "packages/graphiql-react/src/explorer/components/search.css||packages/graphiql-react/src/explorer/components/search.css",
          "packages/graphiql-react/src/explorer/components/search.tsx||packages/graphiql-react/src/explorer/components/search.tsx",
          "packages/graphiql-react/src/explorer/components/type-link.tsx||packages/graphiql-react/src/explorer/components/type-link.tsx",
          "packages/graphiql-react/src/explorer/components/utils.tsx||packages/graphiql-react/src/explorer/components/utils.tsx",
          "packages/graphiql-react/src/explorer/context.tsx||packages/graphiql-react/src/explorer/context.tsx",
          "packages/graphiql-react/src/explorer/index.ts||packages/graphiql-react/src/explorer/index.ts",
          "packages/graphiql-react/src/icons/index.tsx||packages/graphiql-react/src/icons/index.tsx",
          "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.tsx||packages/graphiql/__mocks__/@graphiql/react.tsx",
          "packages/graphiql/cypress/integration/docs.spec.ts||packages/graphiql/cypress/integration/docs.spec.ts",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/DocExplorer/SearchBox.tsx||packages/graphiql/src/components/DocExplorer/SearchBox.tsx",
          "packages/graphiql/src/components/DocExplorer/SearchResults.tsx||packages/graphiql/src/components/DocExplorer/SearchResults.tsx",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts||packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts": [
          "File: packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts -> packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     push() {},",
          "14:     reset() {},",
          "15:     show() {},",
          "17:   };",
          "18: }",
          "",
          "[Removed Lines]",
          "16:     showSearch() {},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer/components/search.css||packages/graphiql-react/src/explorer/components/search.css": [
          "File: packages/graphiql-react/src/explorer/components/search.css -> packages/graphiql-react/src/explorer/components/search.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: @import url('@reach/combobox/styles.css');",
          "3: [data-reach-combobox] {",
          "4:   color: var(--color-neutral-60);",
          "6:   &:not([data-state='idle']) {",
          "7:     border-radius: var(--border-radius-4);",
          "8:     box-shadow: var(--box-shadow);",
          "9:     color: var(--color-neutral-100);",
          "11:     & .graphiql-doc-explorer-search-input {",
          "12:       background: var(--color-neutral-0);",
          "13:       border-bottom-left-radius: 0;",
          "14:       border-bottom-right-radius: 0;",
          "15:     }",
          "16:   }",
          "17: }",
          "19: .graphiql-doc-explorer-search-input {",
          "20:   align-items: center;",
          "21:   background-color: var(--color-neutral-7);",
          "22:   border-radius: var(--border-radius-4);",
          "23:   display: flex;",
          "24:   padding: var(--px-8) var(--px-12);",
          "25: }",
          "27: [data-reach-combobox-input] {",
          "28:   border: none;",
          "29:   background-color: transparent;",
          "30:   margin-left: var(--px-4);",
          "31:   width: 100%;",
          "33:   &:focus {",
          "34:     outline: none;",
          "35:   }",
          "36: }",
          "38: [data-reach-combobox-popover] {",
          "39:   border: none;",
          "40:   border-bottom-left-radius: var(--border-radius-4);",
          "41:   border-bottom-right-radius: var(--border-radius-4);",
          "42:   border-top: 1px solid var(--color-neutral-15);",
          "43:   max-height: 400px;",
          "44:   overflow-y: auto;",
          "50:   position: relative;",
          "51: }",
          "53: [data-reach-combobox-list] {",
          "54:   font-size: var(--font-size-body);",
          "55:   padding: var(--px-4);",
          "56: }",
          "58: [data-reach-combobox-option] {",
          "59:   border-radius: var(--border-radius-4);",
          "60:   color: var(--color-neutral-60);",
          "61:   overflow-x: hidden;",
          "62:   padding: var(--px-8) var(--px-12);",
          "63:   text-overflow: ellipsis;",
          "64:   white-space: nowrap;",
          "66:   &[data-highlighted] {",
          "67:     background-color: var(--color-neutral-7);",
          "68:   }",
          "70:   &:hover {",
          "71:     background-color: var(--color-neutral-10);",
          "72:   }",
          "74:   & + & {",
          "75:     margin-top: var(--px-4);",
          "76:   }",
          "77: }",
          "79: .graphiql-doc-explorer-search-type {",
          "80:   color: var(--color-blue);",
          "81: }",
          "83: .graphiql-doc-explorer-search-field {",
          "84:   color: var(--color-orche);",
          "85: }",
          "87: .graphiql-doc-explorer-search-argument {",
          "88:   color: var(--color-purple);",
          "89: }",
          "91: .graphiql-doc-explorer-search-divider {",
          "92:   color: var(--color-neutral-60);",
          "93:   font-size: var(--font-size-hint);",
          "94:   font-weight: var(--font-weight-medium);",
          "95:   margin-top: var(--px-8);",
          "96:   padding: var(--px-8) var(--px-12);",
          "97: }",
          "99: .graphiql-doc-explorer-search-empty {",
          "100:   color: var(--color-neutral-60);",
          "101:   padding: var(--px-8) var(--px-12);",
          "102: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer/components/search.tsx||packages/graphiql-react/src/explorer/components/search.tsx": [
          "File: packages/graphiql-react/src/explorer/components/search.tsx -> packages/graphiql-react/src/explorer/components/search.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   Combobox,",
          "3:   ComboboxInput,",
          "4:   ComboboxPopover,",
          "5:   ComboboxList,",
          "6:   ComboboxOption,",
          "7: } from '@reach/combobox';",
          "8: import {",
          "9:   GraphQLArgument,",
          "10:   GraphQLField,",
          "11:   GraphQLInputField,",
          "12:   GraphQLNamedType,",
          "13:   isInputObjectType,",
          "14:   isInterfaceType,",
          "15:   isObjectType,",
          "16: } from 'graphql';",
          "17: import { useCallback, useEffect, useMemo, useRef, useState } from 'react';",
          "18: import { MagnifyingGlassIcon } from '../../icons';",
          "19: import { useSchemaContext } from '../../schema';",
          "20: import debounce from '../../utility/debounce';",
          "22: import { useExplorerContext } from '../context';",
          "24: import './search.css';",
          "25: import { renderType } from './utils';",
          "27: export function Search() {",
          "28:   const { explorerNavStack, push } = useExplorerContext({",
          "29:     nonNull: true,",
          "30:     caller: Search,",
          "31:   });",
          "33:   const inputRef = useRef<HTMLInputElement>(null);",
          "34:   const popoverRef = useRef<HTMLDivElement>(null);",
          "36:   const getSearchResults = useSearchResults();",
          "37:   const [searchValue, setSearchValue] = useState('');",
          "39:   const [results, setResults] = useState(getSearchResults(searchValue));",
          "40:   const debouncedGetSearchResults = useMemo(",
          "41:     () =>",
          "42:       debounce(200, (search: string) => {",
          "43:         setResults(getSearchResults(search));",
          "44:       }),",
          "45:     [getSearchResults],",
          "46:   );",
          "47:   useEffect(() => {",
          "48:     debouncedGetSearchResults(searchValue);",
          "49:   }, [debouncedGetSearchResults, searchValue]);",
          "51:   useEffect(() => {",
          "52:     function handleKeyDown(event: KeyboardEvent) {",
          "53:       if (event.metaKey && event.keyCode === 75 && inputRef.current) {",
          "54:         inputRef.current.focus();",
          "55:       }",
          "56:     }",
          "57:     window.addEventListener('keydown', handleKeyDown);",
          "58:     return () => window.removeEventListener('keydown', handleKeyDown);",
          "59:   }, []);",
          "61:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "63:   const shouldSearchBoxAppear =",
          "64:     explorerNavStack.length === 1 ||",
          "65:     isObjectType(navItem.def) ||",
          "66:     isInterfaceType(navItem.def) ||",
          "67:     isInputObjectType(navItem.def);",
          "69:   return shouldSearchBoxAppear ? (",
          "70:     <Combobox",
          "71:       aria-label={`Search ${navItem.name}...`}",
          "72:       onSelect={value => {",
          "73:         const def = (value as unknown) as TypeMatch | FieldMatch;",
          "74:         push(",
          "75:           'field' in def",
          "76:             ? { name: def.field.name, def: def.field }",
          "77:             : { name: def.type.name, def: def.type },",
          "78:         );",
          "79:       }}>",
          "80:       <div className=\"graphiql-doc-explorer-search-input\">",
          "81:         <MagnifyingGlassIcon />",
          "82:         <ComboboxInput",
          "83:           autocomplete={false}",
          "84:           onChange={event => {",
          "85:             setSearchValue(event.target.value);",
          "86:           }}",
          "87:           onKeyDown={event => {",
          "88:             if (!event.isDefaultPrevented()) {",
          "89:               const container = popoverRef.current;",
          "90:               if (!container) {",
          "91:                 return;",
          "92:               }",
          "94:               window.requestAnimationFrame(() => {",
          "95:                 const element = container.querySelector('[aria-selected=true]');",
          "96:                 if (!(element instanceof HTMLElement)) {",
          "97:                   return;",
          "98:                 }",
          "99:                 const top = element.offsetTop - container.scrollTop;",
          "100:                 const bottom =",
          "101:                   container.scrollTop +",
          "102:                   container.clientHeight -",
          "103:                   (element.offsetTop + element.clientHeight);",
          "104:                 if (bottom < 0) {",
          "105:                   container.scrollTop -= bottom;",
          "106:                 }",
          "107:                 if (top < 0) {",
          "108:                   container.scrollTop += top;",
          "109:                 }",
          "110:               });",
          "111:             }",
          "112:           }}",
          "113:           placeholder=\"&#x2318; K\"",
          "114:           ref={inputRef}",
          "115:           value={searchValue}",
          "116:         />",
          "117:       </div>",
          "118:       <ComboboxPopover portal={false} ref={popoverRef}>",
          "119:         <ComboboxList>",
          "120:           {/**",
          "126:           {results.within.map((result, i) => (",
          "127:             <ComboboxOption key={`within-${i}`} index={i} value={result as any}>",
          "128:               <Field field={result.field} argument={result.argument} />",
          "129:             </ComboboxOption>",
          "130:           ))}",
          "131:           {results.within.length > 0 &&",
          "132:           results.types.length + results.fields.length > 0 ? (",
          "133:             <div className=\"graphiql-doc-explorer-search-divider\">",
          "134:               Other results",
          "135:             </div>",
          "136:           ) : null}",
          "137:           {results.types.map((result, i) => (",
          "138:             <ComboboxOption",
          "139:               key={`type-${i}`}",
          "140:               index={results.within.length + i}",
          "141:               value={result as any}>",
          "142:               <Type type={result.type} />",
          "143:             </ComboboxOption>",
          "144:           ))}",
          "145:           {results.fields.map((result, i) => (",
          "146:             <ComboboxOption",
          "147:               key={`field-${i}`}",
          "148:               index={results.within.length + results.types.length + i}",
          "149:               value={result as any}>",
          "150:               <Type type={result.type} />.",
          "151:               <Field field={result.field} argument={result.argument} />",
          "152:             </ComboboxOption>",
          "153:           ))}",
          "154:           {results.within.length +",
          "155:             results.types.length +",
          "156:             results.fields.length ===",
          "157:           0 ? (",
          "158:             <div className=\"graphiql-doc-explorer-search-empty\">",
          "159:               No results found",
          "160:             </div>",
          "161:           ) : null}",
          "162:         </ComboboxList>",
          "163:       </ComboboxPopover>",
          "164:     </Combobox>",
          "165:   ) : null;",
          "166: }",
          "168: type TypeMatch = { type: GraphQLNamedType };",
          "170: type FieldMatch = {",
          "171:   type: GraphQLNamedType;",
          "172:   field: GraphQLField<unknown, unknown> | GraphQLInputField;",
          "173:   argument?: GraphQLArgument;",
          "174: };",
          "176: export function useSearchResults(caller?: Function) {",
          "177:   const { explorerNavStack } = useExplorerContext({",
          "178:     nonNull: true,",
          "179:     caller: caller || useSearchResults,",
          "180:   });",
          "181:   const { schema } = useSchemaContext({",
          "182:     nonNull: true,",
          "183:     caller: caller || useSearchResults,",
          "184:   });",
          "186:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "188:   return useCallback(",
          "189:     (searchValue: string) => {",
          "190:       const matches: {",
          "191:         within: FieldMatch[];",
          "192:         types: TypeMatch[];",
          "193:         fields: FieldMatch[];",
          "194:       } = {",
          "195:         within: [],",
          "196:         types: [],",
          "197:         fields: [],",
          "198:       };",
          "200:       if (!schema) {",
          "201:         return matches;",
          "202:       }",
          "204:       const withinType = navItem.def;",
          "206:       const typeMap = schema.getTypeMap();",
          "207:       let typeNames = Object.keys(typeMap);",
          "210:       if (withinType) {",
          "211:         typeNames = typeNames.filter(n => n !== withinType.name);",
          "212:         typeNames.unshift(withinType.name);",
          "213:       }",
          "215:       for (const typeName of typeNames) {",
          "216:         if (",
          "217:           matches.within.length +",
          "218:             matches.types.length +",
          "219:             matches.fields.length >=",
          "220:           100",
          "221:         ) {",
          "222:           break;",
          "223:         }",
          "225:         const type = typeMap[typeName];",
          "226:         if (withinType !== type && isMatch(typeName, searchValue)) {",
          "227:           matches.types.push({ type });",
          "228:         }",
          "230:         if (",
          "231:           !isObjectType(type) &&",
          "232:           !isInterfaceType(type) &&",
          "233:           !isInputObjectType(type)",
          "234:         ) {",
          "235:           continue;",
          "236:         }",
          "238:         const fields = type.getFields();",
          "239:         for (const fieldName in fields) {",
          "240:           const field = fields[fieldName];",
          "241:           let matchingArgs: GraphQLArgument[] | undefined;",
          "243:           if (!isMatch(fieldName, searchValue)) {",
          "244:             if ('args' in field) {",
          "245:               matchingArgs = field.args.filter(arg =>",
          "246:                 isMatch(arg.name, searchValue),",
          "247:               );",
          "248:               if (matchingArgs.length === 0) {",
          "249:                 continue;",
          "250:               }",
          "251:             } else {",
          "252:               continue;",
          "253:             }",
          "254:           }",
          "256:           matches[withinType === type ? 'within' : 'fields'].push(",
          "257:             ...(matchingArgs",
          "258:               ? matchingArgs.map(argument => ({ type, field, argument }))",
          "259:               : [{ type, field }]),",
          "260:           );",
          "261:         }",
          "262:       }",
          "264:       return matches;",
          "265:     },",
          "266:     [navItem.def, schema],",
          "267:   );",
          "268: }",
          "270: function isMatch(sourceText: string, searchValue: string) {",
          "271:   try {",
          "272:     const escaped = searchValue.replace(/[^_0-9A-Za-z]/g, ch => '\\\\' + ch);",
          "273:     return sourceText.search(new RegExp(escaped, 'i')) !== -1;",
          "274:   } catch (e) {",
          "275:     return sourceText.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1;",
          "276:   }",
          "277: }",
          "279: type TypeProps = { type: GraphQLNamedType };",
          "281: function Type(props: TypeProps) {",
          "282:   return (",
          "283:     <span className=\"graphiql-doc-explorer-search-type\">{props.type.name}</span>",
          "284:   );",
          "285: }",
          "287: type FieldProps = {",
          "288:   field: GraphQLField<unknown, unknown> | GraphQLInputField;",
          "289:   argument?: GraphQLArgument;",
          "290: };",
          "292: function Field(props: FieldProps) {",
          "293:   return (",
          "294:     <>",
          "295:       <span className=\"graphiql-doc-explorer-search-field\">",
          "296:         {props.field.name}",
          "297:       </span>",
          "298:       {props.argument ? (",
          "299:         <>",
          "300:           (",
          "301:           <span className=\"graphiql-doc-explorer-search-argument\">",
          "302:             {props.argument.name}",
          "303:           </span>",
          "304:           :{' '}",
          "305:           {renderType(props.argument.type, namedType => (",
          "306:             <Type type={namedType} />",
          "307:           ))}",
          "308:           )",
          "309:         </>",
          "310:       ) : null}",
          "311:     </>",
          "312:   );",
          "313: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer/components/type-link.tsx||packages/graphiql-react/src/explorer/components/type-link.tsx": [
          "File: packages/graphiql-react/src/explorer/components/type-link.tsx -> packages/graphiql-react/src/explorer/components/type-link.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { useExplorerContext } from '../context';",
          "5: import './type-link.css';",
          "",
          "[Removed Lines]",
          "1: import { GraphQLType, isListType, isNonNullType } from 'graphql';",
          "",
          "[Added Lines]",
          "1: import { GraphQLType } from 'graphql';",
          "4: import { renderType } from './utils';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:     return null;",
          "16:   }",
          "34:     <a",
          "35:       className=\"graphiql-doc-explorer-type-name\"",
          "36:       onClick={event => {",
          "37:         event.preventDefault();",
          "39:       }}",
          "40:       href=\"#\">",
          "42:     </a>",
          "44: }",
          "",
          "[Removed Lines]",
          "18:   const type = props.type;",
          "19:   if (isNonNullType(type)) {",
          "20:     return (",
          "21:       <>",
          "22:         <TypeLink type={type.ofType} />!",
          "23:       </>",
          "24:     );",
          "25:   }",
          "26:   if (isListType(type)) {",
          "27:     return (",
          "28:       <>",
          "29:         [<TypeLink type={type.ofType} />]",
          "30:       </>",
          "31:     );",
          "32:   }",
          "33:   return (",
          "38:         push({ name: type.name, def: type });",
          "41:       {type.name}",
          "43:   );",
          "",
          "[Added Lines]",
          "19:   return renderType(props.type, namedType => (",
          "24:         push({ name: namedType.name, def: namedType });",
          "27:       {namedType.name}",
          "29:   ));",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer/components/utils.tsx||packages/graphiql-react/src/explorer/components/utils.tsx": [
          "File: packages/graphiql-react/src/explorer/components/utils.tsx -> packages/graphiql-react/src/explorer/components/utils.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   GraphQLNamedType,",
          "3:   GraphQLType,",
          "4:   isListType,",
          "5:   isNonNullType,",
          "6: } from 'graphql';",
          "8: export function renderType(",
          "9:   type: GraphQLType,",
          "10:   renderNamedType: (namedType: GraphQLNamedType) => JSX.Element,",
          "11: ): JSX.Element {",
          "12:   if (isNonNullType(type)) {",
          "13:     return <>{renderType(type.ofType, renderNamedType)}!</>;",
          "14:   }",
          "15:   if (isListType(type)) {",
          "16:     return <>[{renderType(type.ofType, renderNamedType)}]</>;",
          "17:   }",
          "18:   return renderNamedType(type);",
          "19: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer/context.tsx||packages/graphiql-react/src/explorer/context.tsx": [
          "File: packages/graphiql-react/src/explorer/context.tsx -> packages/graphiql-react/src/explorer/context.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: export type ExplorerNavStackItem = {",
          "26:   name: string;",
          "27:   title?: string;",
          "29:   def?: GraphQLNamedType | ExplorerFieldDef;",
          "30: };",
          "",
          "[Removed Lines]",
          "28:   search?: string;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   pop(): void;",
          "49:   reset(): void;",
          "50:   show(): void;",
          "52: };",
          "54: export const ExplorerContext = createNullableContext<ExplorerContextType>(",
          "",
          "[Removed Lines]",
          "51:   showSearch(search: string): void;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:     setIsVisible(true);",
          "123:   }, [onToggleVisibility, storage]);",
          "133:   useEffect(() => {",
          "134:     if (isFetching) {",
          "135:       reset();",
          "",
          "[Removed Lines]",
          "125:   const showSearch = useCallback((search: string) => {",
          "126:     setNavStack(currentState => {",
          "127:       const lastItem = currentState[currentState.length - 1];",
          "128:       const allButLastItem = currentState.slice(0, -1) as ExplorerNavStack;",
          "129:       return [...allButLastItem, { ...lastItem, search }] as ExplorerNavStack;",
          "130:     });",
          "131:   }, []);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:       pop,",
          "146:       reset,",
          "147:       show,",
          "149:     }),",
          "151:   );",
          "153:   return (",
          "",
          "[Removed Lines]",
          "148:       showSearch,",
          "150:     [hide, isVisible, navStack, push, pop, reset, show, showSearch],",
          "",
          "[Added Lines]",
          "139:     [hide, isVisible, navStack, push, pop, reset, show],",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer/index.ts||packages/graphiql-react/src/explorer/index.ts": [
          "File: packages/graphiql-react/src/explorer/index.ts -> packages/graphiql-react/src/explorer/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: export { DefaultValue } from './components/default-value';",
          "3: export { Directive } from './components/directive';",
          "4: export { FieldLink } from './components/field-link';",
          "5: export { TypeLink } from './components/type-link';",
          "6: export {",
          "7:   ExplorerContext,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: export { Search } from './components/search';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/icons/index.tsx||packages/graphiql-react/src/icons/index.tsx": [
          "File: packages/graphiql-react/src/icons/index.tsx -> packages/graphiql-react/src/icons/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import _DocsIcon from './docs.svg';",
          "6: import _HistoryIcon from './history.svg';",
          "7: import _KeyboardShortcutIcon from './keyboard-shortcut.svg';",
          "8: import _MergeIcon from './merge.svg';",
          "9: import _PenIcon from './pen.svg';",
          "10: import _PlayIcon from './play.svg';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import _MagnifyingGlassIcon from './magnifying-glass.svg';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:   _KeyboardShortcutIcon,",
          "28:   'keyboard shortcut icon',",
          "29: );",
          "30: export const MergeIcon = generateIcon(_MergeIcon, 'merge icon');",
          "31: export const PenIcon = generateIcon(_PenIcon, 'pen icon');",
          "32: export const PlayIcon = generateIcon(_PlayIcon, 'play icon');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: export const MagnifyingGlassIcon = generateIcon(",
          "32:   _MagnifyingGlassIcon,",
          "33:   'magnifying glass icon',",
          "34: );",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts": [
          "File: packages/graphiql-react/src/index.ts -> packages/graphiql-react/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   ExplorerContext,",
          "30:   ExplorerContextProvider,",
          "31:   FieldLink,",
          "32:   TypeLink,",
          "33:   useExplorerContext,",
          "34: } from './explorer';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:   Search,",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.tsx||packages/graphiql/__mocks__/@graphiql/react.tsx": [
          "File: packages/graphiql/__mocks__/@graphiql/react.tsx -> packages/graphiql/__mocks__/@graphiql/react.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   PrettifyIcon,",
          "42:   SchemaContext,",
          "43:   SchemaContextProvider,",
          "44:   SettingsIcon,",
          "45:   Spinner,",
          "46:   StopIcon,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:   Search,",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/integration/docs.spec.ts||packages/graphiql/cypress/integration/docs.spec.ts": [
          "File: packages/graphiql/cypress/integration/docs.spec.ts -> packages/graphiql/cypress/integration/docs.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   });",
          "25:   it('Searches docs for values', () => {",
          "28:   });",
          "30:   it('Navigates to a docs entry on selecting a search result', () => {",
          "32:     cy.get('.doc-explorer-title').should('have.text', 'TestInput');",
          "33:   });",
          "35:   it('Allows searching fields within a type', () => {",
          "38:   });",
          "40:   it('Shows \"other results\" section', () => {",
          "46:   });",
          "49:     cy.get('.doc-explorer-back').click();",
          "50:     cy.get('.doc-explorer-title').should('have.text', 'Docs');",
          "55:   });",
          "57:   it('Type fields link to their own docs entry', () => {",
          "63:     cy.get('.doc-explorer-title').should('have.text', 'isTest');",
          "64:     cy.get('.graphiql-markdown-description').should(",
          "",
          "[Removed Lines]",
          "26:     cy.get('label.search-box input').type('test');",
          "27:     cy.get('.doc-category-item').should('have.length', 7);",
          "31:     cy.get('.doc-search-items>.doc-category-item').eq(4).children().click();",
          "36:     cy.get('label.search-box input').type('list');",
          "37:     cy.get('.doc-category-item').should('have.length', 8);",
          "41:     cy.get('.doc-category-title').should('have.text', 'other results');",
          "42:     cy.get('.doc-category .graphiql-doc-explorer-field-name').should(",
          "43:       'have.text',",
          "44:       'hasArgs',",
          "45:     );",
          "48:   it('Navigates back to search results when existing', () => {",
          "51:   });",
          "53:   it('Retains the parent search value', () => {",
          "54:     cy.get('label.search-box input').should('have.value', 'test');",
          "58:     cy.get('.doc-search-items>.doc-category-item')",
          "59:       .last()",
          "60:       .find('a:nth-child(2)')",
          "61:       .click();",
          "",
          "[Added Lines]",
          "26:     cy.get('[data-reach-combobox-input]').type('test');",
          "27:     cy.get('[data-reach-combobox-popover]').should('not.have.attr', 'hidden');",
          "28:     cy.get('[data-reach-combobox-option]').should('have.length', 7);",
          "32:     cy.get('[data-reach-combobox-option]').eq(4).children().click();",
          "37:     cy.get('[data-reach-combobox-input]').type('list');",
          "38:     cy.get('[data-reach-combobox-option]').should('have.length', 14);",
          "42:     cy.get(",
          "43:       '[data-reach-combobox-popover] .graphiql-doc-explorer-search-divider',",
          "44:     ).should('have.text', 'Other results');",
          "45:     cy.get('[data-reach-combobox-option]').contains('hasArgs');",
          "48:   it('Navigates back and closes popover', () => {",
          "51:     cy.get('[data-reach-combobox-popover]').should('have.attr', 'hidden');",
          "55:     cy.get('[data-reach-combobox-input]').type('test');",
          "56:     cy.wait(250);",
          "57:     cy.get('[data-reach-combobox-option]').last().click();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:       'Is this a test schema? Sure it is.\\n',",
          "67:     );",
          "68:   });",
          "79: });",
          "81: describe('GraphQL DocExplorer - deprecated fields', () => {",
          "",
          "[Removed Lines]",
          "70:   it('Allows clearing the search', () => {",
          "71:     cy.visit(`/`);",
          "72:     cy.get('.graphiql-sidebar button').eq(0).click();",
          "73:     cy.get('label.search-box input').type('test');",
          "74:     cy.get('.doc-category-item').should('have.length', 7);",
          "75:     cy.get('.search-box-clear').click();",
          "76:     cy.get('.doc-category-title').should('have.text', 'root types');",
          "77:     cy.get('label.search-box input').should('have.value', '');",
          "78:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { GraphQLSchema, isType } from 'graphql';",
          "10: import React, { ReactNode } from 'react';",
          "12: import FieldDoc from './DocExplorer/FieldDoc';",
          "13: import SchemaDoc from './DocExplorer/SchemaDoc';",
          "16: import TypeDoc from './DocExplorer/TypeDoc';",
          "18: type DocExplorerProps = {",
          "",
          "[Removed Lines]",
          "8: import { Spinner, useExplorerContext, useSchemaContext } from '@graphiql/react';",
          "14: import SearchBox from './DocExplorer/SearchBox';",
          "15: import SearchResults from './DocExplorer/SearchResults';",
          "",
          "[Added Lines]",
          "8: import {",
          "9:   Search,",
          "10:   Spinner,",
          "11:   useExplorerContext,",
          "12:   useSchemaContext,",
          "13: } from '@graphiql/react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     schema: schemaFromContext,",
          "41:     validationErrors,",
          "42:   } = useSchemaContext({ nonNull: true });",
          "44:     nonNull: true,",
          "45:   });",
          "",
          "[Removed Lines]",
          "43:   const { explorerNavStack, hide, pop, showSearch } = useExplorerContext({",
          "",
          "[Added Lines]",
          "46:   const { explorerNavStack, hide, pop } = useExplorerContext({",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     content = <div className=\"error-container\">No Schema Available</div>;",
          "70:   } else if (explorerNavStack.length === 1) {",
          "71:     content = <SchemaDoc />;",
          "72:   } else if (isType(navItem.def)) {",
          "",
          "[Removed Lines]",
          "68:   } else if (navItem.search) {",
          "69:     content = <SearchResults />;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:     content = <FieldDoc />;",
          "76:   }",
          "82:   let prevName;",
          "83:   if (explorerNavStack.length > 1) {",
          "84:     prevName = explorerNavStack[explorerNavStack.length - 2].name;",
          "",
          "[Removed Lines]",
          "78:   const shouldSearchBoxAppear =",
          "79:     explorerNavStack.length === 1 ||",
          "80:     (isType(navItem.def) && 'getFields' in navItem.def);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:         </div>",
          "115:       </div>",
          "116:       <div className=\"doc-explorer-contents\">",
          "124:         {content}",
          "125:       </div>",
          "126:     </section>",
          "",
          "[Removed Lines]",
          "117:         {shouldSearchBoxAppear && (",
          "118:           <SearchBox",
          "119:             value={navItem.search}",
          "120:             placeholder={`Search ${navItem.name}...`}",
          "121:             onSearch={showSearch}",
          "122:           />",
          "123:         )}",
          "",
          "[Added Lines]",
          "114:         <Search key={navItem.def?.name || '__schema'} />",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/SearchBox.tsx||packages/graphiql/src/components/DocExplorer/SearchBox.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/SearchBox.tsx -> packages/graphiql/src/components/DocExplorer/SearchBox.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/SearchResults.tsx||packages/graphiql/src/components/DocExplorer/SearchResults.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/SearchResults.tsx -> packages/graphiql/src/components/DocExplorer/SearchResults.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "4365:     \"@nodelib/fs.scandir\" \"2.1.4\"",
          "4366:     fastq \"^1.6.0\"",
          "4368: \"@rollup/pluginutils@^4.1.1\":",
          "4369:   version \"4.1.1\"",
          "4370:   resolved \"https://registry.yarnpkg.com/@rollup/pluginutils/-/pluginutils-4.1.1.tgz#1d4da86dd4eded15656a57d933fda2b9a08d47ec\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4368: \"@reach/auto-id@0.17.0\":",
          "4369:   version \"0.17.0\"",
          "4370:   resolved \"https://registry.yarnpkg.com/@reach/auto-id/-/auto-id-0.17.0.tgz#60cce65eb7a0d6de605820727f00dfe2b03b5f17\"",
          "4371:   integrity sha512-ud8iPwF52RVzEmkHq1twuqGuPA+moreumUHdtgvU3sr3/15BNhwp3KyDLrKKSz0LP1r3V4pSdyF9MbYM8BoSjA==",
          "4372:   dependencies:",
          "4373:     \"@reach/utils\" \"0.17.0\"",
          "4374:     tslib \"^2.3.0\"",
          "4376: \"@reach/combobox@^0.17.0\":",
          "4377:   version \"0.17.0\"",
          "4378:   resolved \"https://registry.yarnpkg.com/@reach/combobox/-/combobox-0.17.0.tgz#fb9d71d2d5aff3b339dce0ec5e3b73628a51b009\"",
          "4379:   integrity sha512-2mYvU5agOBCQBMdlM4cri+P1BbNwp05P1OuDyc33xJSNiBG7BMy4+ZSHJ0X4fyle6rHwSgCAOCLOeWV1XUYjoQ==",
          "4380:   dependencies:",
          "4381:     \"@reach/auto-id\" \"0.17.0\"",
          "4382:     \"@reach/descendants\" \"0.17.0\"",
          "4383:     \"@reach/popover\" \"0.17.0\"",
          "4384:     \"@reach/portal\" \"0.17.0\"",
          "4385:     \"@reach/utils\" \"0.17.0\"",
          "4386:     prop-types \"^15.7.2\"",
          "4387:     tiny-warning \"^1.0.3\"",
          "4388:     tslib \"^2.3.0\"",
          "4390: \"@reach/descendants@0.17.0\":",
          "4391:   version \"0.17.0\"",
          "4392:   resolved \"https://registry.yarnpkg.com/@reach/descendants/-/descendants-0.17.0.tgz#3fb087125a67870acd4dee1528449ed546829b67\"",
          "4393:   integrity sha512-c7lUaBfjgcmKFZiAWqhG+VnXDMEhPkI4kAav/82XKZD6NVvFjsQOTH+v3tUkskrAPV44Yuch0mFW/u5Ntifr7Q==",
          "4394:   dependencies:",
          "4395:     \"@reach/utils\" \"0.17.0\"",
          "4396:     tslib \"^2.3.0\"",
          "4398: \"@reach/observe-rect@1.2.0\":",
          "4399:   version \"1.2.0\"",
          "4400:   resolved \"https://registry.yarnpkg.com/@reach/observe-rect/-/observe-rect-1.2.0.tgz#d7a6013b8aafcc64c778a0ccb83355a11204d3b2\"",
          "4401:   integrity sha512-Ba7HmkFgfQxZqqaeIWWkNK0rEhpxVQHIoVyW1YDSkGsGIXzcaW4deC8B0pZrNSSyLTdIk7y+5olKt5+g0GmFIQ==",
          "4403: \"@reach/popover@0.17.0\":",
          "4404:   version \"0.17.0\"",
          "4405:   resolved \"https://registry.yarnpkg.com/@reach/popover/-/popover-0.17.0.tgz#feda6961f37d17b8738d2d52af6bfc5c4584464f\"",
          "4406:   integrity sha512-yYbBF4fMz4Ml4LB3agobZjcZ/oPtPsNv70ZAd7lEC2h7cvhF453pA+zOBGYTPGupKaeBvgAnrMjj7RnxDU5hoQ==",
          "4407:   dependencies:",
          "4408:     \"@reach/portal\" \"0.17.0\"",
          "4409:     \"@reach/rect\" \"0.17.0\"",
          "4410:     \"@reach/utils\" \"0.17.0\"",
          "4411:     tabbable \"^4.0.0\"",
          "4412:     tslib \"^2.3.0\"",
          "4414: \"@reach/portal@0.17.0\":",
          "4415:   version \"0.17.0\"",
          "4416:   resolved \"https://registry.yarnpkg.com/@reach/portal/-/portal-0.17.0.tgz#1dd69ffc8ffc8ba3e26dd127bf1cc4b15f0c6bdc\"",
          "4417:   integrity sha512-+IxsgVycOj+WOeNPL2NdgooUdHPSY285wCtj/iWID6akyr4FgGUK7sMhRM9aGFyrGpx2vzr+eggbUmAVZwOz+A==",
          "4418:   dependencies:",
          "4419:     \"@reach/utils\" \"0.17.0\"",
          "4420:     tiny-warning \"^1.0.3\"",
          "4421:     tslib \"^2.3.0\"",
          "4423: \"@reach/rect@0.17.0\":",
          "4424:   version \"0.17.0\"",
          "4425:   resolved \"https://registry.yarnpkg.com/@reach/rect/-/rect-0.17.0.tgz#804f0cfb211e0beb81632c64d4532ec9d1d73c48\"",
          "4426:   integrity sha512-3YB7KA5cLjbLc20bmPkJ06DIfXSK06Cb5BbD2dHgKXjUkT9WjZaLYIbYCO8dVjwcyO3GCNfOmPxy62VsPmZwYA==",
          "4427:   dependencies:",
          "4428:     \"@reach/observe-rect\" \"1.2.0\"",
          "4429:     \"@reach/utils\" \"0.17.0\"",
          "4430:     prop-types \"^15.7.2\"",
          "4431:     tiny-warning \"^1.0.3\"",
          "4432:     tslib \"^2.3.0\"",
          "4434: \"@reach/utils@0.17.0\":",
          "4435:   version \"0.17.0\"",
          "4436:   resolved \"https://registry.yarnpkg.com/@reach/utils/-/utils-0.17.0.tgz#3d1d2ec56d857f04fe092710d8faee2b2b121303\"",
          "4437:   integrity sha512-M5y8fCBbrWeIsxedgcSw6oDlAMQDkl5uv3VnMVJ7guwpf4E48Xlh1v66z/1BgN/WYe2y8mB/ilFD2nysEfdGeA==",
          "4438:   dependencies:",
          "4439:     tiny-warning \"^1.0.3\"",
          "4440:     tslib \"^2.3.0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15113:     object-assign \"^4.1.1\"",
          "15114:     react-is \"^16.8.1\"",
          "15117:   version \"15.8.1\"",
          "15118:   resolved \"https://registry.yarnpkg.com/prop-types/-/prop-types-15.8.1.tgz#67d87bf1a694f48435cf332c24af10214a3140b5\"",
          "15119:   integrity sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
          "",
          "[Removed Lines]",
          "15116: prop-types@^15.8.1:",
          "",
          "[Added Lines]",
          "15190: prop-types@^15.7.2, prop-types@^15.8.1:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "17052:     buffer \"^5.7.0\"",
          "17053:     node-fetch \"^2.6.1\"",
          "17055: tapable@^1.0.0, tapable@^1.1.3:",
          "17056:   version \"1.1.3\"",
          "17057:   resolved \"https://registry.yarnpkg.com/tapable/-/tapable-1.1.3.tgz#a1fccc06b58db61fd7a45da2da44f5f3a3e67ba2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17129: tabbable@^4.0.0:",
          "17130:   version \"4.0.0\"",
          "17131:   resolved \"https://registry.yarnpkg.com/tabbable/-/tabbable-4.0.0.tgz#5bff1d1135df1482cf0f0206434f15eadbeb9261\"",
          "17132:   integrity sha512-H1XoH1URcBOa/rZZWxLxHCtOdVUEev+9vo5YdYhC9tCY4wnybX+VQrCYuy9ubkg69fCBxCONJOSLGfw0DWMffQ==",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "17181:   resolved \"https://registry.yarnpkg.com/timsort/-/timsort-0.3.0.tgz#405411a8e7e6339fe64db9a234de11dc31e02bd4\"",
          "17182:   integrity sha1-QFQRqOfmM5/mTbmiNN4R3DHgK9Q=",
          "17184: tmp@^0.0.33:",
          "17185:   version \"0.0.33\"",
          "17186:   resolved \"https://registry.yarnpkg.com/tmp/-/tmp-0.0.33.tgz#6d34335889768d21b2bcda0aa277ced3b1bfadf9\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17263: tiny-warning@^1.0.3:",
          "17264:   version \"1.0.3\"",
          "17265:   resolved \"https://registry.yarnpkg.com/tiny-warning/-/tiny-warning-1.0.3.tgz#94a30db453df4c643d0fd566060d60a875d84754\"",
          "17266:   integrity sha512-lBN9zLN/oAf68o3zNXYrdCt1kP8WsiGW8Oo2ka41b2IM5JL/S1CTyX1rW0mb/zSuJun0ZUrDxx4sqvYS2FWzPA==",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ff0bab978d63778b8ab4ba6e79fceb36c2db87f",
      "candidate_info": {
        "commit_hash": "6ff0bab978d63778b8ab4ba6e79fceb36c2db87f",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/6ff0bab978d63778b8ab4ba6e79fceb36c2db87f",
        "files": [
          ".changeset/famous-dragons-confess.md",
          ".changeset/quick-pumas-fly.md",
          "packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/schema.tsx",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx",
          "packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx"
        ],
        "message": "remove methods from `SchemaContext` meant for internal use (#2652)\n\n* remove methods from `SchemaContext` meant for internal use\n\n* make validation errors non-nullable",
        "before_after_code_files": [
          "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/schema.tsx||packages/graphiql-react/src/schema.tsx",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx",
          "packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx||packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx": [
          "File: packages/graphiql-react/src/editor/response-editor.tsx -> packages/graphiql-react/src/editor/response-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:     if (fetchError) {",
          "129:       responseEditor?.setValue(fetchError);",
          "130:     }",
          "132:       responseEditor?.setValue(formatError(validationErrors));",
          "133:     }",
          "134:   }, [responseEditor, fetchError, validationErrors]);",
          "",
          "[Removed Lines]",
          "131:     if (validationErrors) {",
          "",
          "[Added Lines]",
          "131:     if (validationErrors.length > 0) {",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/schema.tsx||packages/graphiql-react/src/schema.tsx": [
          "File: packages/graphiql-react/src/schema.tsx -> packages/graphiql-react/src/schema.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   validateSchema,",
          "17: } from 'graphql';",
          "18: import {",
          "20:   ReactNode,",
          "22:   useCallback,",
          "23:   useEffect,",
          "24:   useMemo,",
          "",
          "[Removed Lines]",
          "19:   Dispatch,",
          "21:   SetStateAction,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   introspect(): void;",
          "45:   isFetching: boolean;",
          "46:   schema: MaybeGraphQLSchema;",
          "50: };",
          "52: export const SchemaContext =",
          "",
          "[Removed Lines]",
          "47:   setFetchError: Dispatch<SetStateAction<string | null>>;",
          "48:   setSchema: Dispatch<SetStateAction<MaybeGraphQLSchema>>;",
          "49:   validationErrors: readonly GraphQLError[] | null;",
          "",
          "[Added Lines]",
          "45:   validationErrors: readonly GraphQLError[];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:   const validationErrors = useMemo(() => {",
          "273:     if (!schema || props.dangerouslyAssumeSchemaIsValid) {",
          "275:     }",
          "278:   }, [schema, props.dangerouslyAssumeSchemaIsValid]);",
          "",
          "[Removed Lines]",
          "274:       return null;",
          "276:     const errors = validateSchema(schema);",
          "277:     return errors.length > 0 ? errors : null;",
          "",
          "[Added Lines]",
          "270:       return [];",
          "272:     return validateSchema(schema);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "286:       introspect,",
          "287:       isFetching,",
          "288:       schema,",
          "291:       validationErrors,",
          "292:     }),",
          "293:     [fetchError, introspect, isFetching, schema, validationErrors],",
          "",
          "[Removed Lines]",
          "289:       setFetchError,",
          "290:       setSchema,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   let content: ReactNode = null;",
          "53:   if (fetchError) {",
          "54:     content = <div className=\"error-container\">Error fetching schema</div>;",
          "56:     content = (",
          "57:       <div className=\"error-container\">",
          "58:         Schema is invalid: {validationErrors[0].message}",
          "",
          "[Removed Lines]",
          "55:   } else if (validationErrors) {",
          "",
          "[Added Lines]",
          "55:   } else if (validationErrors.length > 0) {",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx -> packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         introspect() {},",
          "32:         isFetching: false,",
          "33:         schema: ExampleSchema,",
          "37:       }}",
          "38:     >",
          "39:       <ExplorerContext.Provider",
          "",
          "[Removed Lines]",
          "34:         setFetchError() {},",
          "35:         setSchema() {},",
          "36:         validationErrors: null,",
          "",
          "[Added Lines]",
          "34:         validationErrors: [],",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx||packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx": [
          "File: packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx -> packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:   introspect() {},",
          "21:   isFetching: false,",
          "22:   schema: ExampleSchema,",
          "26: };",
          "28: function DocExplorerWithContext(",
          "",
          "[Removed Lines]",
          "23:   setFetchError() {},",
          "24:   setSchema() {},",
          "25:   validationErrors: null,",
          "",
          "[Added Lines]",
          "23:   validationErrors: [],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d517989996cf6f33ef7e08d18a870e2bed565cca",
      "candidate_info": {
        "commit_hash": "d517989996cf6f33ef7e08d18a870e2bed565cca",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/d517989996cf6f33ef7e08d18a870e2bed565cca",
        "files": [
          ".changeset/seven-ties-march.md",
          "packages/graphiql/src/components/GraphiQL.tsx"
        ],
        "message": "feat: onSchemaChange callback (#2190)",
        "before_after_code_files": [
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:   maxHistoryLength?: number;",
          "287: };",
          "289: export type GraphiQLState = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:   onSchemaChange?: (schema: GraphQLSchema) => void;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1120:               ...queryFacts,",
          "1121:               schemaErrors: undefined,",
          "1122:             });",
          "1123:           }",
          "1124:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1127:             this.props.onSchemaChange?.(schema);",
          "",
          "---------------"
        ]
      }
    }
  ]
}