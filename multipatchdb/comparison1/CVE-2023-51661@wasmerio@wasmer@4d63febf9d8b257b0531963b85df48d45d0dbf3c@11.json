{
  "cve_id": "CVE-2023-51661",
  "cve_desc": "Wasmer is a WebAssembly runtime that enables containers to run anywhere: from Desktop to the Cloud, Edge and even the browser. Wasm programs can access the filesystem outside of the sandbox. Service providers running untrusted Wasm code on Wasmer can unexpectedly expose the host filesystem. This vulnerability has been patched in version 4.2.4.",
  "repo": "wasmerio/wasmer",
  "patch_hash": "4d63febf9d8b257b0531963b85df48d45d0dbf3c",
  "patch_info": {
    "commit_hash": "4d63febf9d8b257b0531963b85df48d45d0dbf3c",
    "repo": "wasmerio/wasmer",
    "commit_url": "https://github.com/wasmerio/wasmer/commit/4d63febf9d8b257b0531963b85df48d45d0dbf3c",
    "files": [
      "CHANGELOG.md",
      "Cargo.lock",
      "Cargo.toml",
      "lib/api/Cargo.toml",
      "lib/api/macro-wasmer-universal-test/Cargo.toml",
      "lib/c-api/Cargo.toml",
      "lib/c-api/examples/wasmer-capi-examples-runner/Cargo.toml",
      "lib/c-api/tests/wasmer-c-api-test-runner/Cargo.toml",
      "lib/cache/Cargo.toml",
      "lib/cli-compiler/Cargo.toml",
      "lib/cli/Cargo.toml",
      "lib/compiler-cranelift/Cargo.toml",
      "lib/compiler-llvm/Cargo.toml",
      "lib/compiler-singlepass/Cargo.toml",
      "lib/compiler/Cargo.toml",
      "lib/emscripten/Cargo.toml",
      "lib/middlewares/Cargo.toml",
      "lib/object/Cargo.toml",
      "lib/registry/Cargo.toml",
      "lib/sys-utils/Cargo.toml",
      "lib/virtual-fs/Cargo.toml",
      "lib/vm/Cargo.toml",
      "lib/wai-bindgen-wasmer/Cargo.toml",
      "lib/wasi-experimental-io-devices/Cargo.toml",
      "lib/wasi-types/Cargo.toml",
      "lib/wasi-web/Cargo.lock",
      "lib/wasi-web/Cargo.toml",
      "lib/wasix/Cargo.toml",
      "scripts/update-version.py",
      "scripts/windows-installer/wasmer.iss",
      "tests/integration/cli/Cargo.toml",
      "tests/integration/ios/Cargo.toml",
      "tests/lib/wast/Cargo.toml",
      "tests/wasi-wast/Cargo.toml"
    ],
    "message": "Release 4.2.4 (#4337)",
    "before_after_code_files": [
      "Cargo.lock||Cargo.lock",
      "lib/wasi-web/Cargo.lock||lib/wasi-web/Cargo.lock",
      "scripts/update-version.py||scripts/update-version.py",
      "scripts/windows-installer/wasmer.iss||scripts/windows-installer/wasmer.iss"
    ]
  },
  "patch_diff": {
    "Cargo.lock||Cargo.lock": [
      "File: Cargo.lock -> Cargo.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "2526: [[package]]",
      "2527: name = \"macro-wasmer-universal-test\"",
      "2529: dependencies = [",
      "2530:  \"proc-macro2\",",
      "2531:  \"proc-quote\",",
      "",
      "[Removed Lines]",
      "2528: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "2528: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5140: [[package]]",
      "5141: name = \"virtual-fs\"",
      "5143: dependencies = [",
      "5144:  \"anyhow\",",
      "5145:  \"async-trait\",",
      "",
      "[Removed Lines]",
      "5142: version = \"0.9.0\"",
      "",
      "[Added Lines]",
      "5142: version = \"0.10.0\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5327: [[package]]",
      "5328: name = \"wai-bindgen-wasmer\"",
      "5330: dependencies = [",
      "5331:  \"anyhow\",",
      "5332:  \"async-trait\",",
      "",
      "[Removed Lines]",
      "5329: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "5329: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "5406: [[package]]",
      "5407: name = \"wasi-test-generator\"",
      "5409: dependencies = [",
      "5410:  \"glob\",",
      "5411:  \"gumdrop\",",
      "",
      "[Removed Lines]",
      "5408: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5408: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5597: [[package]]",
      "5598: name = \"wasmer\"",
      "5600: dependencies = [",
      "5601:  \"anyhow\",",
      "5602:  \"bytes\",",
      "",
      "[Removed Lines]",
      "5599: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5599: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "5672: [[package]]",
      "5673: name = \"wasmer-c-api\"",
      "5675: dependencies = [",
      "5676:  \"cbindgen\",",
      "5677:  \"cfg-if\",",
      "",
      "[Removed Lines]",
      "5674: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5674: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "5701: [[package]]",
      "5702: name = \"wasmer-c-api-test-runner\"",
      "5704: dependencies = [",
      "5705:  \"cc\",",
      "5706:  \"regex\",",
      "",
      "[Removed Lines]",
      "5703: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5703: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "5711: [[package]]",
      "5712: name = \"wasmer-cache\"",
      "5714: dependencies = [",
      "5715:  \"blake3\",",
      "5716:  \"criterion\",",
      "",
      "[Removed Lines]",
      "5713: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5713: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "5725: [[package]]",
      "5726: name = \"wasmer-capi-examples-runner\"",
      "5728: dependencies = [",
      "5729:  \"cc\",",
      "5730:  \"regex\",",
      "",
      "[Removed Lines]",
      "5727: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5727: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "5735: [[package]]",
      "5736: name = \"wasmer-cli\"",
      "5738: dependencies = [",
      "5739:  \"anyhow\",",
      "5740:  \"assert_cmd 2.0.12\",",
      "",
      "[Removed Lines]",
      "5737: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5737: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "5798:  \"wasmer-edge-cli\",",
      "5799:  \"wasmer-emscripten\",",
      "5800:  \"wasmer-object\",",
      "5802:  \"wasmer-toml 0.9.2\",",
      "5803:  \"wasmer-types\",",
      "5804:  \"wasmer-vm\",",
      "",
      "[Removed Lines]",
      "5801:  \"wasmer-registry 5.9.0\",",
      "",
      "[Added Lines]",
      "5801:  \"wasmer-registry 5.10.0\",",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "5811: [[package]]",
      "5812: name = \"wasmer-compiler\"",
      "5814: dependencies = [",
      "5815:  \"backtrace\",",
      "5816:  \"bytes\",",
      "",
      "[Removed Lines]",
      "5813: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5813: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "5840: [[package]]",
      "5841: name = \"wasmer-compiler-cli\"",
      "5843: dependencies = [",
      "5844:  \"anyhow\",",
      "5845:  \"bytesize\",",
      "",
      "[Removed Lines]",
      "5842: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5842: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "5861: [[package]]",
      "5862: name = \"wasmer-compiler-cranelift\"",
      "5864: dependencies = [",
      "5865:  \"cranelift-codegen\",",
      "5866:  \"cranelift-entity\",",
      "",
      "[Removed Lines]",
      "5863: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5863: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "5880: [[package]]",
      "5881: name = \"wasmer-compiler-llvm\"",
      "5883: dependencies = [",
      "5884:  \"byteorder\",",
      "5885:  \"cc\",",
      "",
      "[Removed Lines]",
      "5882: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5882: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "5902: [[package]]",
      "5903: name = \"wasmer-compiler-singlepass\"",
      "5905: dependencies = [",
      "5906:  \"byteorder\",",
      "5907:  \"dynasm\",",
      "",
      "[Removed Lines]",
      "5904: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5904: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "5921: [[package]]",
      "5922: name = \"wasmer-derive\"",
      "5924: dependencies = [",
      "5925:  \"compiletest_rs\",",
      "5926:  \"proc-macro-error\",",
      "",
      "[Removed Lines]",
      "5923: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5923: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "5965:  \"virtual-mio 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",",
      "5966:  \"virtual-net 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",",
      "5967:  \"wasmer-api\",",
      "5969:  \"wasmer-toml 0.9.2\",",
      "5970:  \"webc\",",
      "5971: ]",
      "5973: [[package]]",
      "5974: name = \"wasmer-emscripten\"",
      "5976: dependencies = [",
      "5977:  \"byteorder\",",
      "5978:  \"getrandom\",",
      "",
      "[Removed Lines]",
      "5968:  \"wasmer-registry 5.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",",
      "5975: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5968:  \"wasmer-registry 5.9.0\",",
      "5975: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "6015: [[package]]",
      "6016: name = \"wasmer-integration-tests-cli\"",
      "6018: dependencies = [",
      "6019:  \"anyhow\",",
      "6020:  \"assert_cmd 2.0.12\",",
      "",
      "[Removed Lines]",
      "6017: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6017: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "6038:  \"target-lexicon 0.12.12\",",
      "6039:  \"tempfile\",",
      "6040:  \"tokio\",",
      "6042: ]",
      "6044: [[package]]",
      "6045: name = \"wasmer-integration-tests-ios\"",
      "6048: [[package]]",
      "6049: name = \"wasmer-middlewares\"",
      "6051: dependencies = [",
      "6052:  \"wasmer\",",
      "6053:  \"wasmer-types\",",
      "",
      "[Removed Lines]",
      "6041:  \"wasmer-registry 5.9.0\",",
      "6046: version = \"4.2.3\"",
      "6050: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6041:  \"wasmer-registry 5.10.0\",",
      "6046: version = \"4.2.4\"",
      "6050: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "6057: [[package]]",
      "6058: name = \"wasmer-object\"",
      "6060: dependencies = [",
      "6061:  \"object 0.28.4\",",
      "6062:  \"thiserror\",",
      "",
      "[Removed Lines]",
      "6059: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6059: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "6066: [[package]]",
      "6067: name = \"wasmer-registry\"",
      "6068: version = \"5.9.0\"",
      "6069: dependencies = [",
      "6070:  \"anyhow\",",
      "6072:  \"console\",",
      "6074:  \"dirs\",",
      "6075:  \"filetime\",",
      "6076:  \"flate2\",",
      "",
      "[Removed Lines]",
      "6071:  \"clap\",",
      "6073:  \"dialoguer 0.11.0\",",
      "",
      "[Added Lines]",
      "6069: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
      "6070: checksum = \"0bb2ecfb16d793bfe1e2b98af07e6f344bd00ba0efea8e1b24737701d823a3ee\"",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "6083:  \"log\",",
      "6084:  \"lzma-rs\",",
      "6085:  \"minisign\",",
      "6087:  \"regex\",",
      "6088:  \"reqwest\",",
      "6089:  \"rpassword\",",
      "",
      "[Removed Lines]",
      "6086:  \"pretty_assertions\",",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "6098:  \"tldextract\",",
      "6099:  \"tokio\",",
      "6100:  \"toml 0.5.11\",",
      "6102:  \"url\",",
      "6104:  \"wasmer-wasm-interface 4.2.3\",",
      "6105:  \"wasmparser 0.51.4\",",
      "6106:  \"whoami\",",
      "",
      "[Removed Lines]",
      "6101:  \"tracing\",",
      "6103:  \"wasmer-toml 0.9.2\",",
      "",
      "[Added Lines]",
      "6101:  \"wasmer-toml 0.8.1\",",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "6109: [[package]]",
      "6110: name = \"wasmer-registry\"",
      "6114: dependencies = [",
      "6115:  \"anyhow\",",
      "6116:  \"console\",",
      "6117:  \"dirs\",",
      "6118:  \"filetime\",",
      "6119:  \"flate2\",",
      "",
      "[Removed Lines]",
      "6111: version = \"5.9.0\"",
      "6112: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
      "6113: checksum = \"0bb2ecfb16d793bfe1e2b98af07e6f344bd00ba0efea8e1b24737701d823a3ee\"",
      "",
      "[Added Lines]",
      "6109: version = \"5.10.0\"",
      "6112:  \"clap\",",
      "6114:  \"dialoguer 0.11.0\",",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "6126:  \"log\",",
      "6127:  \"lzma-rs\",",
      "6128:  \"minisign\",",
      "6129:  \"regex\",",
      "6130:  \"reqwest\",",
      "6131:  \"rpassword\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6127:  \"pretty_assertions\",",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "6140:  \"tldextract\",",
      "6141:  \"tokio\",",
      "6142:  \"toml 0.5.11\",",
      "6143:  \"url\",",
      "6146:  \"wasmparser 0.51.4\",",
      "6147:  \"whoami\",",
      "6148: ]",
      "6150: [[package]]",
      "6151: name = \"wasmer-sys-utils\"",
      "6153: dependencies = [",
      "6154:  \"libc\",",
      "6155:  \"region\",",
      "",
      "[Removed Lines]",
      "6144:  \"wasmer-toml 0.8.1\",",
      "6145:  \"wasmer-wasm-interface 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",",
      "6152: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "6142:  \"tracing\",",
      "6144:  \"wasmer-toml 0.9.2\",",
      "6145:  \"wasmer-wasm-interface 4.2.4\",",
      "6152: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "6200: [[package]]",
      "6201: name = \"wasmer-types\"",
      "6203: dependencies = [",
      "6204:  \"bytecheck\",",
      "6205:  \"enum-iterator\",",
      "",
      "[Removed Lines]",
      "6202: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6202: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "6217: [[package]]",
      "6218: name = \"wasmer-vm\"",
      "6220: dependencies = [",
      "6221:  \"backtrace\",",
      "6222:  \"cc\",",
      "",
      "[Removed Lines]",
      "6219: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6219: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "6245: [[package]]",
      "6246: name = \"wasmer-wasix\"",
      "6248: dependencies = [",
      "6249:  \"anyhow\",",
      "6250:  \"async-trait\",",
      "",
      "[Removed Lines]",
      "6247: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "6247: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "6315: [[package]]",
      "6316: name = \"wasmer-wasix-experimental-io-devices\"",
      "6318: dependencies = [",
      "6319:  \"minifb\",",
      "6320:  \"nix 0.25.1\",",
      "",
      "[Removed Lines]",
      "6317: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "6317: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "6330: [[package]]",
      "6331: name = \"wasmer-wasix-types\"",
      "6333: dependencies = [",
      "6334:  \"anyhow\",",
      "6335:  \"bitflags 1.3.2\",",
      "",
      "[Removed Lines]",
      "6332: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "6332: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "6353: [[package]]",
      "6354: name = \"wasmer-wasm-interface\"",
      "6355: version = \"4.2.3\"",
      "6356: dependencies = [",
      "6358:  \"either\",",
      "6359:  \"nom 5.1.3\",",
      "6360:  \"serde\",",
      "6361:  \"wasmparser 0.51.4\",",
      "6363: ]",
      "6365: [[package]]",
      "6366: name = \"wasmer-wasm-interface\"",
      "6370: dependencies = [",
      "6371:  \"either\",",
      "6372:  \"nom 5.1.3\",",
      "6373:  \"serde\",",
      "6374:  \"wasmparser 0.51.4\",",
      "6375: ]",
      "6377: [[package]]",
      "6378: name = \"wasmer-wast\"",
      "6380: dependencies = [",
      "6381:  \"anyhow\",",
      "6382:  \"futures\",",
      "",
      "[Removed Lines]",
      "6357:  \"bincode\",",
      "6362:  \"wat\",",
      "6367: version = \"4.2.3\"",
      "6368: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
      "6369: checksum = \"70759b128088ce07ab6f31b97d83ceb8642285c650677fc84f554d68dc534ac4\"",
      "6379: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6356: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
      "6357: checksum = \"70759b128088ce07ab6f31b97d83ceb8642285c650677fc84f554d68dc534ac4\"",
      "6367: version = \"4.2.4\"",
      "6369:  \"bincode\",",
      "6374:  \"wat\",",
      "6379: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "6393: [[package]]",
      "6394: name = \"wasmer-workspace\"",
      "6396: dependencies = [",
      "6397:  \"anyhow\",",
      "6398:  \"build-deps\",",
      "",
      "[Removed Lines]",
      "6395: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6395: version = \"4.2.4\"",
      "",
      "---------------"
    ],
    "lib/wasi-web/Cargo.lock||lib/wasi-web/Cargo.lock": [
      "File: lib/wasi-web/Cargo.lock -> lib/wasi-web/Cargo.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "2159: [[package]]",
      "2160: name = \"virtual-fs\"",
      "2162: dependencies = [",
      "2163:  \"anyhow\",",
      "2164:  \"async-trait\",",
      "",
      "[Removed Lines]",
      "2161: version = \"0.9.0\"",
      "",
      "[Added Lines]",
      "2161: version = \"0.10.0\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2279: [[package]]",
      "2280: name = \"wai-bindgen-wasmer\"",
      "2282: dependencies = [",
      "2283:  \"anyhow\",",
      "2284:  \"bitflags 1.3.2\",",
      "",
      "[Removed Lines]",
      "2281: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "2281: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2441: [[package]]",
      "2442: name = \"wasmer\"",
      "2444: dependencies = [",
      "2445:  \"bytes\",",
      "2446:  \"cfg-if\",",
      "",
      "[Removed Lines]",
      "2443: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "2443: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2468: [[package]]",
      "2469: name = \"wasmer-compiler\"",
      "2471: dependencies = [",
      "2472:  \"backtrace\",",
      "2473:  \"bytes\",",
      "",
      "[Removed Lines]",
      "2470: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "2470: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2492: [[package]]",
      "2493: name = \"wasmer-derive\"",
      "2495: dependencies = [",
      "2496:  \"proc-macro-error\",",
      "2497:  \"proc-macro2\",",
      "",
      "[Removed Lines]",
      "2494: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "2494: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2520: [[package]]",
      "2521: name = \"wasmer-types\"",
      "2523: dependencies = [",
      "2524:  \"bytecheck\",",
      "2525:  \"enum-iterator\",",
      "",
      "[Removed Lines]",
      "2522: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "2522: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2535: [[package]]",
      "2536: name = \"wasmer-vm\"",
      "2538: dependencies = [",
      "2539:  \"backtrace\",",
      "2540:  \"cc\",",
      "",
      "[Removed Lines]",
      "2537: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "2537: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2561: [[package]]",
      "2562: name = \"wasmer-wasix\"",
      "2564: dependencies = [",
      "2565:  \"anyhow\",",
      "2566:  \"async-trait\",",
      "",
      "[Removed Lines]",
      "2563: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "2563: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2618: [[package]]",
      "2619: name = \"wasmer-wasix-types\"",
      "2621: dependencies = [",
      "2622:  \"anyhow\",",
      "2623:  \"bitflags 1.3.2\",",
      "",
      "[Removed Lines]",
      "2620: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "2620: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2640: [[package]]",
      "2641: name = \"wasmer-web\"",
      "2643: dependencies = [",
      "2644:  \"anyhow\",",
      "2645:  \"async-trait\",",
      "",
      "[Removed Lines]",
      "2642: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "2642: version = \"0.17.0\"",
      "",
      "---------------"
    ],
    "scripts/update-version.py||scripts/update-version.py": [
      "File: scripts/update-version.py -> scripts/update-version.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #!/usr/bin/python",
      "6: import os",
      "7: import re",
      "",
      "[Removed Lines]",
      "3: PREVIOUS_VERSION='4.2.2'",
      "4: NEXT_VERSION='4.2.3'",
      "",
      "[Added Lines]",
      "3: PREVIOUS_VERSION='4.2.3'",
      "4: NEXT_VERSION='4.2.4'",
      "",
      "---------------"
    ],
    "scripts/windows-installer/wasmer.iss||scripts/windows-installer/wasmer.iss": [
      "File: scripts/windows-installer/wasmer.iss -> scripts/windows-installer/wasmer.iss",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: [Setup]",
      "2: AppName=Wasmer",
      "4: DefaultDirName={pf}\\Wasmer",
      "5: DefaultGroupName=Wasmer",
      "6: Compression=lzma2",
      "",
      "[Removed Lines]",
      "3: AppVersion=4.2.3",
      "",
      "[Added Lines]",
      "3: AppVersion=4.2.4",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f9959d34f1422fd8ad1d86f5873f6940b776b7f4",
      "candidate_info": {
        "commit_hash": "f9959d34f1422fd8ad1d86f5873f6940b776b7f4",
        "repo": "wasmerio/wasmer",
        "commit_url": "https://github.com/wasmerio/wasmer/commit/f9959d34f1422fd8ad1d86f5873f6940b776b7f4",
        "files": [
          "Cargo.lock",
          "Cargo.toml",
          "lib/backend-api/Cargo.toml",
          "lib/c-api/Cargo.toml",
          "lib/cli/Cargo.toml",
          "lib/compiler/Cargo.toml",
          "lib/registry/Cargo.toml",
          "lib/virtual-fs/Cargo.toml",
          "lib/virtual-io/Cargo.toml",
          "lib/virtual-net/Cargo.toml",
          "lib/wasix/Cargo.toml",
          "tests/integration/cli/Cargo.toml",
          "tests/lib/wast/Cargo.toml",
          "tests/wasmer-argus/Cargo.toml"
        ],
        "message": "deps: Upgrade some dependencies + lift to workspace root\n\nAlso ignores a WASIX test from the workspace.",
        "before_after_code_files": [
          "Cargo.lock||Cargo.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Cargo.lock||Cargo.lock"
          ],
          "candidate": [
            "Cargo.lock||Cargo.lock"
          ]
        }
      },
      "candidate_diff": {
        "Cargo.lock||Cargo.lock": [
          "File: Cargo.lock -> Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:  \"futures-core\",",
          "217:  \"memchr\",",
          "218:  \"pin-project-lite\",",
          "220: ]",
          "222: [[package]]",
          "",
          "[Removed Lines]",
          "219:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "219:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:  \"pin-project-lite\",",
          "243:  \"rustls-native-certs\",",
          "244:  \"rustls-pki-types\",",
          "246:  \"tokio-rustls 0.25.0\",",
          "247:  \"tungstenite\",",
          "248: ]",
          "",
          "[Removed Lines]",
          "245:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "245:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2310:  \"itoa\",",
          "2311:  \"pin-project-lite\",",
          "2312:  \"smallvec 1.13.2\",",
          "2314:  \"want\",",
          "2315: ]",
          "",
          "[Removed Lines]",
          "2313:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "2313:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2326:  \"hyper-util\",",
          "2327:  \"rustls 0.23.11\",",
          "2328:  \"rustls-pki-types\",",
          "2330:  \"tokio-rustls 0.26.0\",",
          "2331:  \"tower-service\",",
          "2332:  \"webpki-roots\",",
          "",
          "[Removed Lines]",
          "2329:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "2329:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2343:  \"hyper\",",
          "2344:  \"hyper-util\",",
          "2345:  \"native-tls\",",
          "2347:  \"tokio-native-tls\",",
          "2348:  \"tower-service\",",
          "2349: ]",
          "",
          "[Removed Lines]",
          "2346:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "2346:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2358:  \"hyper\",",
          "2359:  \"hyper-util\",",
          "2360:  \"pin-project-lite\",",
          "2362:  \"tokio-tungstenite\",",
          "2363:  \"tungstenite\",",
          "2364: ]",
          "",
          "[Removed Lines]",
          "2361:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "2361:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2376:  \"http-body\",",
          "2377:  \"hyper\",",
          "2378:  \"pin-project-lite\",",
          "2381:  \"tower\",",
          "2382:  \"tower-service\",",
          "2383:  \"tracing\",",
          "",
          "[Removed Lines]",
          "2379:  \"socket2 0.5.7\",",
          "2380:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "2379:  \"socket2\",",
          "2380:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3078: [[package]]",
          "3079: name = \"mio\"",
          "3081: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3083: dependencies = [",
          "3084:  \"libc\",",
          "3085:  \"log 0.4.22\",",
          "3086:  \"wasi 0.11.0+wasi-snapshot-preview1\",",
          "3088: ]",
          "3090: [[package]]",
          "",
          "[Removed Lines]",
          "3080: version = \"0.8.11\"",
          "3082: checksum = \"a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c\"",
          "3087:  \"windows-sys 0.48.0\",",
          "",
          "[Added Lines]",
          "3080: version = \"1.0.1\"",
          "3082: checksum = \"4569e456d394deccd22ce1c1913e6ea0e54519f577285001215d33557431afe4\"",
          "3084:  \"hermit-abi\",",
          "3088:  \"windows-sys 0.52.0\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3819:  \"rustc-hash\",",
          "3820:  \"rustls 0.23.11\",",
          "3821:  \"thiserror\",",
          "3823:  \"tracing\",",
          "3824: ]",
          "",
          "[Removed Lines]",
          "3822:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "3823:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3848: dependencies = [",
          "3849:  \"libc\",",
          "3850:  \"once_cell\",",
          "3852:  \"windows-sys 0.52.0\",",
          "3853: ]",
          "",
          "[Removed Lines]",
          "3851:  \"socket2 0.5.7\",",
          "",
          "[Added Lines]",
          "3852:  \"socket2\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4091:  \"serde_json\",",
          "4092:  \"serde_urlencoded\",",
          "4093:  \"sync_wrapper\",",
          "4095:  \"tokio-native-tls\",",
          "4096:  \"tokio-rustls 0.26.0\",",
          "4097:  \"tokio-socks\",",
          "",
          "[Removed Lines]",
          "4094:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "4095:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4840:  \"managed\",",
          "4841: ]",
          "4853: [[package]]",
          "4854: name = \"socket2\"",
          "4855: version = \"0.5.7\"",
          "",
          "[Removed Lines]",
          "4843: [[package]]",
          "4844: name = \"socket2\"",
          "4845: version = \"0.4.10\"",
          "4846: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "4847: checksum = \"9f7916fc008ca5542385b89a3d3ce689953c143e9304a9bf8beec1de48994c0d\"",
          "4848: dependencies = [",
          "4849:  \"libc\",",
          "4850:  \"winapi 0.3.9\",",
          "4851: ]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5227: [[package]]",
          "5228: name = \"tokio\"",
          "5230: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5232: dependencies = [",
          "5233:  \"backtrace\",",
          "5234:  \"bytes 1.6.1\",",
          "5235:  \"libc\",",
          "5238:  \"pin-project-lite\",",
          "5239:  \"signal-hook-registry\",",
          "5241:  \"tokio-macros\",",
          "5243: ]",
          "5245: [[package]]",
          "",
          "[Removed Lines]",
          "5229: version = \"1.38.1\"",
          "5231: checksum = \"eb2caba9f80616f438e09748d5acda951967e1ea58508ef53d9c6402485a46df\"",
          "5236:  \"mio 0.8.11\",",
          "5237:  \"num_cpus\",",
          "5240:  \"socket2 0.5.7\",",
          "5242:  \"windows-sys 0.48.0\",",
          "",
          "[Added Lines]",
          "5220: version = \"1.39.2\"",
          "5222: checksum = \"daa4fb1bc778bd6f04cbfc4bb2d06a7396a8f299dc33ea1900cedaa316f467b1\"",
          "5227:  \"mio 1.0.1\",",
          "5230:  \"socket2\",",
          "5232:  \"windows-sys 0.52.0\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5317: [[package]]",
          "5318: name = \"tokio-macros\"",
          "5320: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5322: dependencies = [",
          "5323:  \"proc-macro2\",",
          "5324:  \"quote\",",
          "",
          "[Removed Lines]",
          "5319: version = \"2.3.0\"",
          "5321: checksum = \"5f5ae998a069d4b5aba8ee9dad856af7d520c3699e6159b185c2acd48155d39a\"",
          "",
          "[Added Lines]",
          "5309: version = \"2.4.0\"",
          "5311: checksum = \"693d596312e88961bc67d7f1f97af8a70227d9f90c31bba5806eec004978d752\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5332: checksum = \"bbae76ab933c85776efabc971569dd6119c580d8f5d448769dec1764bf796ef2\"",
          "5333: dependencies = [",
          "5334:  \"native-tls\",",
          "5336: ]",
          "5338: [[package]]",
          "",
          "[Removed Lines]",
          "5335:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "5325:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5362: dependencies = [",
          "5363:  \"rustls 0.22.4\",",
          "5364:  \"rustls-pki-types\",",
          "5366: ]",
          "5368: [[package]]",
          "",
          "[Removed Lines]",
          "5365:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "5355:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5373: dependencies = [",
          "5374:  \"rustls 0.23.11\",",
          "5375:  \"rustls-pki-types\",",
          "5377: ]",
          "5379: [[package]]",
          "",
          "[Removed Lines]",
          "5376:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "5366:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5403:  \"either\",",
          "5404:  \"futures-util\",",
          "5405:  \"thiserror\",",
          "5407: ]",
          "5409: [[package]]",
          "",
          "[Removed Lines]",
          "5406:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "5396:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5414: dependencies = [",
          "5415:  \"futures-core\",",
          "5416:  \"pin-project-lite\",",
          "5418:  \"tokio-util\",",
          "5419: ]",
          "",
          "[Removed Lines]",
          "5417:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "5407:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5482:  \"rustls 0.22.4\",",
          "5483:  \"rustls-native-certs\",",
          "5484:  \"rustls-pki-types\",",
          "5486:  \"tokio-rustls 0.25.0\",",
          "5487:  \"tungstenite\",",
          "5488:  \"webpki-roots\",",
          "",
          "[Removed Lines]",
          "5485:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "5475:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5531:  \"futures-core\",",
          "5532:  \"futures-sink\",",
          "5533:  \"pin-project-lite\",",
          "5535: ]",
          "5537: [[package]]",
          "",
          "[Removed Lines]",
          "5534:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "5524:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5613:  \"futures-util\",",
          "5614:  \"pin-project\",",
          "5615:  \"pin-project-lite\",",
          "5617:  \"tower-layer\",",
          "5618:  \"tower-service\",",
          "5619:  \"tracing\",",
          "",
          "[Removed Lines]",
          "5616:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "5606:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6030:  \"slab\",",
          "6031:  \"tempfile\",",
          "6032:  \"thiserror\",",
          "6034:  \"tracing\",",
          "6035:  \"tracing-test\",",
          "6036:  \"typetag\",",
          "",
          "[Removed Lines]",
          "6033:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "6023:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "6045:  \"bytes 1.6.1\",",
          "6046:  \"derivative\",",
          "6047:  \"futures 0.3.30\",",
          "6049:  \"serde\",",
          "6051:  \"thiserror\",",
          "6052:  \"tracing\",",
          "6053: ]",
          "",
          "[Removed Lines]",
          "6048:  \"mio 0.8.11\",",
          "6050:  \"socket2 0.4.10\",",
          "",
          "[Added Lines]",
          "6038:  \"mio 1.0.1\",",
          "6040:  \"socket2\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "6068:  \"hyper-tungstenite\",",
          "6069:  \"hyper-util\",",
          "6070:  \"libc\",",
          "6072:  \"pin-project-lite\",",
          "6073:  \"rkyv\",",
          "6074:  \"serde\",",
          "6075:  \"serial_test\",",
          "6076:  \"smoltcp\",",
          "6078:  \"thiserror\",",
          "6080:  \"tokio-serde\",",
          "6081:  \"tokio-tungstenite\",",
          "6082:  \"tokio-util\",",
          "",
          "[Removed Lines]",
          "6071:  \"mio 0.8.11\",",
          "6077:  \"socket2 0.4.10\",",
          "6079:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "6061:  \"mio 1.0.1\",",
          "6067:  \"socket2\",",
          "6069:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "6482:  \"serde_json\",",
          "6483:  \"serde_path_to_error\",",
          "6484:  \"time 0.3.36\",",
          "6486:  \"tracing\",",
          "6487:  \"url\",",
          "6488:  \"uuid\",",
          "",
          "[Removed Lines]",
          "6485:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "6475:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "6506:  \"serde\",",
          "6507:  \"serde_json\",",
          "6508:  \"shared-buffer\",",
          "6510:  \"tracing\",",
          "6511:  \"tracing-subscriber\",",
          "6512:  \"url\",",
          "",
          "[Removed Lines]",
          "6509:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "6499:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "6544:  \"libc\",",
          "6545:  \"paste\",",
          "6546:  \"thiserror\",",
          "6548:  \"tracing\",",
          "6549:  \"tracing-subscriber\",",
          "6550:  \"typetag\",",
          "",
          "[Removed Lines]",
          "6547:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "6537:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "6641:  \"libc\",",
          "6642:  \"log 0.4.22\",",
          "6643:  \"mac_address\",",
          "6645:  \"normpath\",",
          "6646:  \"object 0.32.2\",",
          "6647:  \"once_cell\",",
          "",
          "[Removed Lines]",
          "6644:  \"mio 0.8.11\",",
          "",
          "[Added Lines]",
          "6634:  \"mio 1.0.1\",",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "6666:  \"time 0.1.45\",",
          "6667:  \"time 0.3.36\",",
          "6668:  \"tldextract\",",
          "6670:  \"tokio-tungstenite\",",
          "6671:  \"toml 0.5.11\",",
          "6672:  \"tracing\",",
          "",
          "[Removed Lines]",
          "6669:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "6659:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "6711:  \"lazy_static\",",
          "6712:  \"leb128\",",
          "6713:  \"libc\",",
          "6715:  \"more-asserts\",",
          "6716:  \"region\",",
          "6717:  \"rkyv\",",
          "",
          "[Removed Lines]",
          "6714:  \"memmap2 0.5.10\",",
          "",
          "[Added Lines]",
          "6704:  \"memmap2 0.6.2\",",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "6933:  \"tar\",",
          "6934:  \"target-lexicon 0.12.15\",",
          "6935:  \"tempfile\",",
          "6937:  \"wasmer-registry\",",
          "6938: ]",
          "",
          "[Removed Lines]",
          "6936:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "6926:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "7023:  \"thiserror\",",
          "7024:  \"time 0.3.36\",",
          "7025:  \"tldextract\",",
          "7027:  \"tokio-tungstenite\",",
          "7028:  \"toml 0.5.11\",",
          "7029:  \"tracing\",",
          "",
          "[Removed Lines]",
          "7026:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "7016:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "7151:  \"terminal_size\",",
          "7152:  \"termios\",",
          "7153:  \"thiserror\",",
          "7155:  \"tokio-stream\",",
          "7156:  \"toml 0.8.15\",",
          "7157:  \"tower\",",
          "",
          "[Removed Lines]",
          "7154:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "7144:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "7229:  \"serde\",",
          "7230:  \"tempfile\",",
          "7231:  \"thiserror\",",
          "7233:  \"virtual-fs\",",
          "7234:  \"wasmer\",",
          "7235:  \"wasmer-types\",",
          "",
          "[Removed Lines]",
          "7232:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "7222:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "7258:  \"tempfile\",",
          "7259:  \"test-generator\",",
          "7260:  \"test-log\",",
          "7262:  \"tracing\",",
          "7263:  \"tracing-subscriber\",",
          "7264:  \"ureq\",",
          "",
          "[Removed Lines]",
          "7261:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "7251:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "7381:  \"http 0.2.12\",",
          "7382:  \"schemars\",",
          "7383:  \"serde\",",
          "7385:  \"wasmparser 0.95.0\",",
          "7386:  \"wcgi 0.1.2\",",
          "7387: ]",
          "",
          "[Removed Lines]",
          "7384:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "7374:  \"tokio 1.39.2\",",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "7394: dependencies = [",
          "7395:  \"http 1.1.0\",",
          "7396:  \"serde\",",
          "7398:  \"wasmparser 0.95.0\",",
          "7399:  \"wcgi 0.2.0\",",
          "7400: ]",
          "",
          "[Removed Lines]",
          "7397:  \"tokio 1.38.1\",",
          "",
          "[Added Lines]",
          "7387:  \"tokio 1.39.2\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b60c3d734114465d281203b4b25c0f07c430f7c",
      "candidate_info": {
        "commit_hash": "7b60c3d734114465d281203b4b25c0f07c430f7c",
        "repo": "wasmerio/wasmer",
        "commit_url": "https://github.com/wasmerio/wasmer/commit/7b60c3d734114465d281203b4b25c0f07c430f7c",
        "files": [
          "Cargo.lock",
          "lib/cli/Cargo.toml"
        ],
        "message": "Upgrade Edge CLI dependency\n\nNew version has an improved \"app create\" workflow.\n\nCloses #4103",
        "before_after_code_files": [
          "Cargo.lock||Cargo.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Cargo.lock||Cargo.lock"
          ],
          "candidate": [
            "Cargo.lock||Cargo.lock"
          ]
        }
      },
      "candidate_diff": {
        "Cargo.lock||Cargo.lock": [
          "File: Cargo.lock -> Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # It is not intended for manual editing.",
          "3: version = 3",
          "5: [[package]]",
          "6: name = \"addr2line\"",
          "7: version = \"0.20.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: [[package]]",
          "6: name = \"Inflector\"",
          "7: version = \"0.11.4\"",
          "8: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "9: checksum = \"fe438c63458706e03479442743baae6c88256498e6431708f6dfc520a26515d3\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  \"memchr\",",
          "49: ]",
          "51: [[package]]",
          "52: name = \"allocator-api2\"",
          "53: version = \"0.2.16\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: [[package]]",
          "58: name = \"aliasable\"",
          "59: version = \"0.1.3\"",
          "60: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "61: checksum = \"250f629c0161ad8107cf89319e990051fae62832fd343083bea452d93e2205fd\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "647: [[package]]",
          "648: name = \"comfy-table\"",
          "650: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "652: dependencies = [",
          "653:  \"crossterm\",",
          "654:  \"strum\",",
          "",
          "[Removed Lines]",
          "649: version = \"6.2.0\"",
          "651: checksum = \"7e959d788268e3bf9d35ace83e81b124190378e4c91c9067524675e33394b8ba\"",
          "",
          "[Added Lines]",
          "661: version = \"7.0.1\"",
          "663: checksum = \"9ab77dbd8adecaf3f0db40581631b995f312a8a5ae3aa9993188bb8f23d83a5b\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1038: [[package]]",
          "1039: name = \"cynic\"",
          "1041: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1043: dependencies = [",
          "1044:  \"cynic-proc-macros\",",
          "1045:  \"reqwest\",",
          "1046:  \"serde\",",
          "1047:  \"serde_json\",",
          "",
          "[Removed Lines]",
          "1040: version = \"2.2.8\"",
          "1042: checksum = \"b1afa0591b1021e427e548a1f0f147fe6168f6c7c7f7006bace77f28856051b8\"",
          "",
          "[Added Lines]",
          "1052: version = \"3.2.2\"",
          "1054: checksum = \"bf035d785657f3621eee03fdfeefab48127d8b1643b6f9edf8b3cd66cbd86e9b\"",
          "1057:  \"ref-cast\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1052: [[package]]",
          "1053: name = \"cynic-codegen\"",
          "1055: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1057: dependencies = [",
          "1058:  \"counter\",",
          "1060:  \"graphql-parser\",",
          "1061:  \"once_cell\",",
          "1062:  \"proc-macro2\",",
          "1063:  \"quote\",",
          "1064:  \"strsim\",",
          "1065:  \"syn 1.0.109\",",
          "1066: ]",
          "1068: [[package]]",
          "1069: name = \"cynic-proc-macros\"",
          "1071: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1073: dependencies = [",
          "1074:  \"cynic-codegen\",",
          "1075:  \"syn 1.0.109\",",
          "1076: ]",
          "1088: [[package]]",
          "1089: name = \"darling\"",
          "1090: version = \"0.14.4\"",
          "",
          "[Removed Lines]",
          "1054: version = \"2.2.8\"",
          "1056: checksum = \"70a1bb05cc554f46079d0fa72abe995a2d32d0737d410a41da75b31e3f7ef768\"",
          "1059:  \"darling 0.13.4\",",
          "1070: version = \"2.2.8\"",
          "1072: checksum = \"aa595c4ed7a5374e0e58c5c34f9d93bd6b7d45062790963bd4b4c3c0bf520c4d\"",
          "1078: [[package]]",
          "1079: name = \"darling\"",
          "1080: version = \"0.13.4\"",
          "1081: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1082: checksum = \"a01d95850c592940db9b8194bc39f4bc0e89dee5c4265e4b1807c34a9aba453c\"",
          "1083: dependencies = [",
          "1084:  \"darling_core 0.13.4\",",
          "1085:  \"darling_macro 0.13.4\",",
          "1086: ]",
          "",
          "[Added Lines]",
          "1067: version = \"3.2.2\"",
          "1069: checksum = \"4e8e65b71a8bd2751712ab38326b73a5f98405b6b5f8fd4dae658e58c1576d09\"",
          "1072:  \"darling 0.14.4\",",
          "1075:  \"ouroboros\",",
          "1080:  \"thiserror\",",
          "1085: version = \"3.2.2\"",
          "1087: checksum = \"4a933ea1f357cbd48f2068c59457631696ae58d554f89290e4da272b1f69ebf1\"",
          "1090:  \"quote\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1105:  \"darling_macro 0.20.3\",",
          "1106: ]",
          "1122: [[package]]",
          "1123: name = \"darling_core\"",
          "1124: version = \"0.14.4\"",
          "",
          "[Removed Lines]",
          "1108: [[package]]",
          "1109: name = \"darling_core\"",
          "1110: version = \"0.13.4\"",
          "1111: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1112: checksum = \"859d65a907b6852c9361e3185c862aae7fafd2887876799fa55f5f99dc40d610\"",
          "1113: dependencies = [",
          "1114:  \"fnv\",",
          "1115:  \"ident_case\",",
          "1116:  \"proc-macro2\",",
          "1117:  \"quote\",",
          "1118:  \"strsim\",",
          "1119:  \"syn 1.0.109\",",
          "1120: ]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1146:  \"syn 2.0.27\",",
          "1147: ]",
          "1160: [[package]]",
          "1161: name = \"darling_macro\"",
          "1162: version = \"0.14.4\"",
          "",
          "[Removed Lines]",
          "1149: [[package]]",
          "1150: name = \"darling_macro\"",
          "1151: version = \"0.13.4\"",
          "1152: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1153: checksum = \"9c972679f83bdf9c42bd905396b6c3588a843a17f0f16dfcfa3e2c5d57441835\"",
          "1154: dependencies = [",
          "1155:  \"darling_core 0.13.4\",",
          "1156:  \"quote\",",
          "1157:  \"syn 1.0.109\",",
          "1158: ]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2887:  \"sdl2-sys\",",
          "2888: ]",
          "2890: [[package]]",
          "2891: name = \"overload\"",
          "2892: version = \"0.1.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2871: [[package]]",
          "2872: name = \"ouroboros\"",
          "2873: version = \"0.15.6\"",
          "2874: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2875: checksum = \"e1358bd1558bd2a083fed428ffeda486fbfb323e698cdda7794259d592ca72db\"",
          "2876: dependencies = [",
          "2877:  \"aliasable\",",
          "2878:  \"ouroboros_macro\",",
          "2879: ]",
          "2881: [[package]]",
          "2882: name = \"ouroboros_macro\"",
          "2883: version = \"0.15.6\"",
          "2884: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2885: checksum = \"5f7d21ccd03305a674437ee1248f3ab5d4b1db095cf1caf49f1713ddf61956b7\"",
          "2886: dependencies = [",
          "2887:  \"Inflector\",",
          "2888:  \"proc-macro-error\",",
          "2889:  \"proc-macro2\",",
          "2890:  \"quote\",",
          "2891:  \"syn 1.0.109\",",
          "2892: ]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3323:  \"thiserror\",",
          "3324: ]",
          "3326: [[package]]",
          "3327: name = \"ref_thread_local\"",
          "3328: version = \"0.1.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3330: [[package]]",
          "3331: name = \"ref-cast\"",
          "3332: version = \"1.0.19\"",
          "3333: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3334: checksum = \"61ef7e18e8841942ddb1cf845054f8008410030a3997875d9e49b7a363063df1\"",
          "3335: dependencies = [",
          "3336:  \"ref-cast-impl\",",
          "3337: ]",
          "3339: [[package]]",
          "3340: name = \"ref-cast-impl\"",
          "3341: version = \"1.0.19\"",
          "3342: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3343: checksum = \"2dfaf0c85b766276c797f3791f5bc6d5bd116b41d53049af2789666b0c0bc9fa\"",
          "3344: dependencies = [",
          "3345:  \"proc-macro2\",",
          "3346:  \"quote\",",
          "3347:  \"syn 2.0.27\",",
          "3348: ]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5437: [[package]]",
          "5438: name = \"wasmer-api\"",
          "5440: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5442: dependencies = [",
          "5443:  \"anyhow\",",
          "5444:  \"cynic\",",
          "",
          "[Removed Lines]",
          "5439: version = \"0.0.9\"",
          "5441: checksum = \"e5f22cf70f93c4690d4e82b325634ad973cd3a02d5a6b6565d442b452ea729bf\"",
          "",
          "[Added Lines]",
          "5463: version = \"0.0.12\"",
          "5465: checksum = \"ce5c528b93fa430da1d4960759ded4f905bd7a82c68857f9eb01202a62650224\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5447:  \"reqwest\",",
          "5448:  \"serde\",",
          "5449:  \"serde_json\",",
          "5450:  \"time 0.3.23\",",
          "5451:  \"tracing\",",
          "5452:  \"url\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5474:  \"serde_path_to_error\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5715: [[package]]",
          "5716: name = \"wasmer-deploy-cli\"",
          "5718: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5720: dependencies = [",
          "5721:  \"anyhow\",",
          "5722:  \"clap\",",
          "5723:  \"clap-verbosity-flag\",",
          "5724:  \"comfy-table\",",
          "5725:  \"dialoguer\",",
          "5726:  \"futures\",",
          "",
          "[Removed Lines]",
          "5717: version = \"0.1.17\"",
          "5719: checksum = \"f27185d77bc941b5e3bd84d548f5e0074ae8b560c3d862eb83af4d04fc4d9df0\"",
          "",
          "[Added Lines]",
          "5742: version = \"0.1.19\"",
          "5744: checksum = \"622926606a0ec3d5d474485e2770e661445665e8e7a9e144c3e3732ebbf2c772\"",
          "5749:  \"colored 2.0.4\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5743:  \"wasmer-api\",",
          "5744:  \"wasmer-deploy-schema\",",
          "5745:  \"wasmer-deploy-util\",",
          "5747:  \"wasmer-toml 0.6.0\",",
          "5748:  \"webc\",",
          "5749: ]",
          "5751: [[package]]",
          "5752: name = \"wasmer-deploy-schema\"",
          "5754: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5756: dependencies = [",
          "5757:  \"anyhow\",",
          "5758:  \"bytesize\",",
          "",
          "[Removed Lines]",
          "5746:  \"wasmer-registry 4.7.0\",",
          "5753: version = \"0.0.8\"",
          "5755: checksum = \"518852c619a39aebe90bf38f0a1c8669c6b9eaf78ba11b899ec240745df1166d\"",
          "",
          "[Added Lines]",
          "5772:  \"wasmer-registry 5.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",",
          "5779: version = \"0.0.10\"",
          "5781: checksum = \"9f8c1b8e8c2e49f3c1a54bce561dbb79e81ced47818deddde8b32280e33ca2a6\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5770: [[package]]",
          "5771: name = \"wasmer-deploy-util\"",
          "5773: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5775: dependencies = [",
          "5776:  \"serde\",",
          "5777:  \"wasmer-deploy-schema\",",
          "5778:  \"wasmparser 0.95.0\",",
          "",
          "[Removed Lines]",
          "5772: version = \"0.0.8\"",
          "5774: checksum = \"94cb6c1cc25b066e81a2fdd7cd1774b68fbb733f4618e92f5b2e1e182c7d6894\"",
          "",
          "[Added Lines]",
          "5798: version = \"0.0.10\"",
          "5800: checksum = \"27a1a67c2146f62b3e336f131404235f54e12fa80f0d8278b77fff56cdbe548f\"",
          "5802:  \"http\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5886: [[package]]",
          "5887: name = \"wasmer-registry\"",
          "5891: dependencies = [",
          "5892:  \"anyhow\",",
          "5893:  \"console\",",
          "5894:  \"dirs\",",
          "5895:  \"filetime\",",
          "5896:  \"flate2\",",
          "5898:  \"futures-util\",",
          "5899:  \"graphql_client\",",
          "5900:  \"hex\",",
          "",
          "[Removed Lines]",
          "5888: version = \"4.7.0\"",
          "5889: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5890: checksum = \"abc018188be9bb86e1e548ad3e5eedc33e6a0fca703172b1dd4a605d35e82086\"",
          "5897:  \"fs_extra\",",
          "",
          "[Added Lines]",
          "5915: version = \"5.3.0\"",
          "5918:  \"clap\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5904:  \"log\",",
          "5905:  \"lzma-rs\",",
          "5906:  \"minisign\",",
          "5907:  \"regex\",",
          "5908:  \"reqwest\",",
          "5909:  \"rpassword\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5932:  \"pretty_assertions\",",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5920:  \"toml 0.5.11\",",
          "5921:  \"url\",",
          "5922:  \"wasmer-toml 0.6.0\",",
          "5924:  \"wasmparser 0.51.4\",",
          "5926:  \"whoami\",",
          "5927: ]",
          "5929: [[package]]",
          "5930: name = \"wasmer-registry\"",
          "5931: version = \"5.3.0\"",
          "5932: dependencies = [",
          "5933:  \"anyhow\",",
          "5935:  \"console\",",
          "5936:  \"dirs\",",
          "5937:  \"filetime\",",
          "",
          "[Removed Lines]",
          "5923:  \"wasmer-wasm-interface 4.0.0\",",
          "5925:  \"webc\",",
          "5934:  \"clap\",",
          "",
          "[Added Lines]",
          "5949:  \"wasmer-wasm-interface 4.1.0\",",
          "5957: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5958: checksum = \"74c6b4b47cf736e1c6aaf27f2b12a4140d5399c9609e08815cdc4cb622f0c726\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5945:  \"log\",",
          "5946:  \"lzma-rs\",",
          "5947:  \"minisign\",",
          "5949:  \"regex\",",
          "5950:  \"reqwest\",",
          "5951:  \"rpassword\",",
          "",
          "[Removed Lines]",
          "5948:  \"pretty_assertions\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5962:  \"toml 0.5.11\",",
          "5963:  \"url\",",
          "5964:  \"wasmer-toml 0.6.0\",",
          "5966:  \"wasmparser 0.51.4\",",
          "5967:  \"whoami\",",
          "5968: ]",
          "",
          "[Removed Lines]",
          "5965:  \"wasmer-wasm-interface 4.1.0\",",
          "",
          "[Added Lines]",
          "5990:  \"wasmer-wasm-interface 4.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6168: [[package]]",
          "6169: name = \"wasmer-wasm-interface\"",
          "6173: dependencies = [",
          "6174:  \"either\",",
          "6175:  \"nom 5.1.3\",",
          "6176:  \"serde\",",
          "6177:  \"wasmparser 0.51.4\",",
          "6178: ]",
          "6180: [[package]]",
          "6181: name = \"wasmer-wasm-interface\"",
          "6182: version = \"4.1.0\"",
          "6183: dependencies = [",
          "6185:  \"either\",",
          "6186:  \"nom 5.1.3\",",
          "6187:  \"serde\",",
          "6188:  \"wasmparser 0.51.4\",",
          "6190: ]",
          "6192: [[package]]",
          "",
          "[Removed Lines]",
          "6170: version = \"4.0.0\"",
          "6171: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "6172: checksum = \"17603c436eb15548721c2eb78001daba77e5193eab8680c1be5fb0f37879658e\"",
          "6184:  \"bincode\",",
          "6189:  \"wat\",",
          "",
          "[Added Lines]",
          "6195: version = \"4.1.0\"",
          "6197:  \"bincode\",",
          "6202:  \"wat\",",
          "6208: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "6209: checksum = \"676a4e64975caa2cc3947fe061ac4f7fc2efaa1ed8c192120b46d79419f8419e\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4990cf8ed6b6108dd09600f86d6a86e61f26f1d4",
      "candidate_info": {
        "commit_hash": "4990cf8ed6b6108dd09600f86d6a86e61f26f1d4",
        "repo": "wasmerio/wasmer",
        "commit_url": "https://github.com/wasmerio/wasmer/commit/4990cf8ed6b6108dd09600f86d6a86e61f26f1d4",
        "files": [
          "Cargo.lock"
        ],
        "message": "Another post-release adjustment",
        "before_after_code_files": [
          "Cargo.lock||Cargo.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Cargo.lock||Cargo.lock"
          ],
          "candidate": [
            "Cargo.lock||Cargo.lock"
          ]
        }
      },
      "candidate_diff": {
        "Cargo.lock||Cargo.lock": [
          "File: Cargo.lock -> Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1143: [[package]]",
          "1144: name = \"dashmap\"",
          "1146: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1148: dependencies = [",
          "1149:  \"cfg-if\",",
          "1150:  \"hashbrown 0.14.0\",",
          "",
          "[Removed Lines]",
          "1145: version = \"5.5.0\"",
          "1147: checksum = \"6943ae99c34386c84a470c499d3414f66502a41340aa895406e0d2e4a207b91d\"",
          "",
          "[Added Lines]",
          "1145: version = \"5.5.1\"",
          "1147: checksum = \"edd72493923899c6f10c641bdbdeddc7183d6396641d99c1a0d1597f37f92e28\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1847: [[package]]",
          "1848: name = \"h2\"",
          "1850: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1852: dependencies = [",
          "1853:  \"bytes\",",
          "1854:  \"fnv\",",
          "",
          "[Removed Lines]",
          "1849: version = \"0.3.20\"",
          "1851: checksum = \"97ec8491ebaf99c8eaa73058b045fe58073cd6be7f596ac993ced0b0a0c01049\"",
          "",
          "[Added Lines]",
          "1849: version = \"0.3.21\"",
          "1851: checksum = \"91fc23aa11be92976ef4729127f1a74adf36d8436f7816b185d18df956790833\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3577: [[package]]",
          "3578: name = \"reqwest\"",
          "3580: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3582: dependencies = [",
          "3583:  \"async-compression\",",
          "3584:  \"base64\",",
          "",
          "[Removed Lines]",
          "3579: version = \"0.11.18\"",
          "3581: checksum = \"cde824a14b7c14f85caff81225f411faacc04a2013f41670f41443742b1c1c55\"",
          "",
          "[Added Lines]",
          "3579: version = \"0.11.19\"",
          "3581: checksum = \"20b9b67e2ca7dd9e9f9285b759de30ff538aab981abaaf7bc9bd90b84a0126c3\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4981: [[package]]",
          "4982: name = \"unicase\"",
          "4984: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "4986: dependencies = [",
          "4987:  \"version_check\",",
          "4988: ]",
          "",
          "[Removed Lines]",
          "4983: version = \"2.6.0\"",
          "4985: checksum = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"",
          "",
          "[Added Lines]",
          "4983: version = \"2.7.0\"",
          "4985: checksum = \"f7d2d4dafb69621809a81864c9c1b864479e1235c0dd4e199924b9742439ed89\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5586: [[package]]",
          "5587: name = \"wasm-streams\"",
          "5589: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5591: dependencies = [",
          "5592:  \"futures-util\",",
          "5593:  \"js-sys\",",
          "",
          "[Removed Lines]",
          "5588: version = \"0.2.3\"",
          "5590: checksum = \"6bbae3363c08332cadccd13b67db371814cd214c2524020932f0804b8cf7c078\"",
          "",
          "[Added Lines]",
          "5588: version = \"0.3.0\"",
          "5590: checksum = \"b4609d447824375f43e1ffbc051b50ad8f4b3ae8219680c94452ea05eb240ac7\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5948:  \"wasmer-api\",",
          "5949:  \"wasmer-deploy-schema\",",
          "5950:  \"wasmer-deploy-util\",",
          "5952:  \"wasmer-toml 0.6.0\",",
          "5953:  \"webc\",",
          "5954: ]",
          "",
          "[Removed Lines]",
          "5951:  \"wasmer-registry 5.4.0\",",
          "",
          "[Added Lines]",
          "5951:  \"wasmer-registry 5.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6096: [[package]]",
          "6097: name = \"wasmer-registry\"",
          "6101: dependencies = [",
          "6102:  \"anyhow\",",
          "6103:  \"console\",",
          "6104:  \"dirs\",",
          "6105:  \"filetime\",",
          "",
          "[Removed Lines]",
          "6098: version = \"5.4.0\"",
          "6099: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "6100: checksum = \"d843168f099071b078c39f89b34030cc31876f300889fe932c4c8baff06c14d6\"",
          "",
          "[Added Lines]",
          "6098: version = \"5.5.0\"",
          "6101:  \"clap\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6113:  \"log\",",
          "6114:  \"lzma-rs\",",
          "6115:  \"minisign\",",
          "6116:  \"regex\",",
          "6117:  \"reqwest\",",
          "6118:  \"rpassword\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6115:  \"pretty_assertions\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6129:  \"toml 0.5.11\",",
          "6130:  \"url\",",
          "6131:  \"wasmer-toml 0.6.0\",",
          "6133:  \"wasmparser 0.51.4\",",
          "6134:  \"whoami\",",
          "6135: ]",
          "",
          "[Removed Lines]",
          "6132:  \"wasmer-wasm-interface 4.1.1\",",
          "",
          "[Added Lines]",
          "6132:  \"wasmer-wasm-interface 4.1.2\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6137: [[package]]",
          "6138: name = \"wasmer-registry\"",
          "6139: version = \"5.5.0\"",
          "6140: dependencies = [",
          "6141:  \"anyhow\",",
          "6143:  \"console\",",
          "6144:  \"dirs\",",
          "6145:  \"filetime\",",
          "",
          "[Removed Lines]",
          "6142:  \"clap\",",
          "",
          "[Added Lines]",
          "6140: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "6141: checksum = \"685cfaf52f6914dc53f511190b2fe846165e88e554b95963db187a9dfe35fab2\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6153:  \"log\",",
          "6154:  \"lzma-rs\",",
          "6155:  \"minisign\",",
          "6157:  \"regex\",",
          "6158:  \"reqwest\",",
          "6159:  \"rpassword\",",
          "",
          "[Removed Lines]",
          "6156:  \"pretty_assertions\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6170:  \"toml 0.5.11\",",
          "6171:  \"url\",",
          "6172:  \"wasmer-toml 0.6.0\",",
          "6174:  \"wasmparser 0.51.4\",",
          "6175:  \"whoami\",",
          "6176: ]",
          "",
          "[Removed Lines]",
          "6173:  \"wasmer-wasm-interface 4.1.2\",",
          "",
          "[Added Lines]",
          "6173:  \"wasmer-wasm-interface 4.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6379: [[package]]",
          "6380: name = \"wasmer-wasm-interface\"",
          "6384: dependencies = [",
          "6385:  \"either\",",
          "6386:  \"nom 5.1.3\",",
          "6387:  \"serde\",",
          "6388:  \"wasmparser 0.51.4\",",
          "6389: ]",
          "6391: [[package]]",
          "6392: name = \"wasmer-wasm-interface\"",
          "6393: version = \"4.1.2\"",
          "6394: dependencies = [",
          "6396:  \"either\",",
          "6397:  \"nom 5.1.3\",",
          "6398:  \"serde\",",
          "6399:  \"wasmparser 0.51.4\",",
          "6401: ]",
          "6403: [[package]]",
          "",
          "[Removed Lines]",
          "6381: version = \"4.1.1\"",
          "6382: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "6383: checksum = \"88903f75b88a541cc4d2f38c38c9cf2786262c14fa2cf2002808c92f9f84049f\"",
          "6395:  \"bincode\",",
          "6400:  \"wat\",",
          "",
          "[Added Lines]",
          "6381: version = \"4.1.2\"",
          "6383:  \"bincode\",",
          "6388:  \"wat\",",
          "6394: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "6395: checksum = \"c015cccd0e0e958326720eb92d6f2bb580abd01ba4c05ced2673da6daac77b58\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6672:  \"wasmer-toml 0.7.0\",",
          "6673: ]",
          "6685: [[package]]",
          "6686: name = \"webpki-roots\"",
          "6688: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "6694: [[package]]",
          "6695: name = \"weezl\"",
          "",
          "[Removed Lines]",
          "6675: [[package]]",
          "6676: name = \"webpki\"",
          "6677: version = \"0.22.0\"",
          "6678: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "6679: checksum = \"f095d78192e208183081cc07bc5515ef55216397af48b873e5edcd72637fa1bd\"",
          "6680: dependencies = [",
          "6681:  \"ring\",",
          "6682:  \"untrusted\",",
          "6683: ]",
          "6687: version = \"0.22.6\"",
          "6689: checksum = \"b6c71e40d7d2c34a5106301fb632274ca37242cd0c9d3e64dbece371a40a2d87\"",
          "6690: dependencies = [",
          "6691:  \"webpki\",",
          "6692: ]",
          "",
          "[Added Lines]",
          "6677: version = \"0.25.2\"",
          "6679: checksum = \"14247bb57be4f377dfb94c72830b8ce8fc6beac03cf4bf7b9732eadd414123fc\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6934: [[package]]",
          "6935: name = \"winreg\"",
          "6937: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "6939: dependencies = [",
          "6941: ]",
          "6943: [[package]]",
          "",
          "[Removed Lines]",
          "6936: version = \"0.10.1\"",
          "6938: checksum = \"80d0f4e272c85def139476380b12f9ac60926689dd2e01d4923222f40580869d\"",
          "6940:  \"winapi\",",
          "",
          "[Added Lines]",
          "6923: version = \"0.50.0\"",
          "6925: checksum = \"524e57b2c537c0f9b1e69f1965311ec12182b4122e45035b1508cd24d2adadb1\"",
          "6927:  \"cfg-if\",",
          "6928:  \"windows-sys 0.48.0\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1c42b5f90361b709f81354f16a4268b9e3eb693",
      "candidate_info": {
        "commit_hash": "e1c42b5f90361b709f81354f16a4268b9e3eb693",
        "repo": "wasmerio/wasmer",
        "commit_url": "https://github.com/wasmerio/wasmer/commit/e1c42b5f90361b709f81354f16a4268b9e3eb693",
        "files": [
          ".gitignore",
          "Cargo.lock",
          "Cargo.toml",
          "Makefile",
          "lib/c-api/examples/assets/qjs-wasmer.toml",
          "lib/cli/Cargo.toml",
          "lib/cli/sql/migrations/0000.sql",
          "lib/cli/sql/migrations/0001.sql",
          "lib/cli/sql/migrations/0002.sql",
          "lib/cli/src/cli.rs",
          "lib/cli/src/commands.rs",
          "lib/cli/src/commands/init.rs",
          "lib/cli/src/commands/publish.rs",
          "lib/cli/src/commands/sql/get_interface.sql",
          "lib/cli/src/commands/sql/insert_interface.sql",
          "lib/cli/src/commands/sql/wasm_interface_existence_check.sql",
          "lib/cli/src/commands/whoami.rs",
          "lib/registry/Cargo.toml",
          "lib/registry/graphql/queries/get_interface_version.graphql",
          "lib/registry/graphql/queries/get_signed_url.graphql",
          "lib/registry/graphql/queries/publish_package_chunked.graphql",
          "lib/registry/src/config.rs",
          "lib/registry/src/graphql.rs",
          "lib/registry/src/interface.rs",
          "lib/registry/src/lib.rs",
          "lib/registry/src/package.rs",
          "lib/registry/src/publish.rs",
          "lib/wasm-interface/Cargo.toml",
          "lib/wasm-interface/README.md",
          "lib/wasm-interface/src/interface.rs",
          "lib/wasm-interface/src/interface_matcher.rs",
          "lib/wasm-interface/src/lib.rs",
          "lib/wasm-interface/src/parser.rs",
          "lib/wasm-interface/src/validate.rs",
          "tests/integration/cli/Cargo.toml",
          "tests/integration/cli/tests/fixtures/init1.toml",
          "tests/integration/cli/tests/fixtures/init2.toml",
          "tests/integration/cli/tests/fixtures/init3.toml",
          "tests/integration/cli/tests/fixtures/init4.toml",
          "tests/integration/cli/tests/fixtures/init5.toml",
          "tests/integration/cli/tests/fixtures/init6.toml",
          "tests/integration/cli/tests/init.rs",
          "tests/integration/cli/tests/publish.rs",
          "tests/integration/cli/tests/run.rs"
        ],
        "message": "Revert \"Revert \"Implement wasmer init and wasmer publish\"\"\n\nThis reverts commit 250ebff4e8ce250e40c61d273e5627adf3c0f90d.",
        "before_after_code_files": [
          "Cargo.lock||Cargo.lock",
          "lib/cli/sql/migrations/0000.sql||lib/cli/sql/migrations/0000.sql",
          "lib/cli/sql/migrations/0001.sql||lib/cli/sql/migrations/0001.sql",
          "lib/cli/sql/migrations/0002.sql||lib/cli/sql/migrations/0002.sql",
          "lib/cli/src/cli.rs||lib/cli/src/cli.rs",
          "lib/cli/src/commands.rs||lib/cli/src/commands.rs",
          "lib/cli/src/commands/init.rs||lib/cli/src/commands/init.rs",
          "lib/cli/src/commands/publish.rs||lib/cli/src/commands/publish.rs",
          "lib/cli/src/commands/sql/get_interface.sql||lib/cli/src/commands/sql/get_interface.sql",
          "lib/cli/src/commands/sql/insert_interface.sql||lib/cli/src/commands/sql/insert_interface.sql",
          "lib/cli/src/commands/sql/wasm_interface_existence_check.sql||lib/cli/src/commands/sql/wasm_interface_existence_check.sql",
          "lib/cli/src/commands/whoami.rs||lib/cli/src/commands/whoami.rs",
          "lib/registry/graphql/queries/get_interface_version.graphql||lib/registry/graphql/queries/get_interface_version.graphql",
          "lib/registry/graphql/queries/get_signed_url.graphql||lib/registry/graphql/queries/get_signed_url.graphql",
          "lib/registry/graphql/queries/publish_package_chunked.graphql||lib/registry/graphql/queries/publish_package_chunked.graphql",
          "lib/registry/src/config.rs||lib/registry/src/config.rs",
          "lib/registry/src/graphql.rs||lib/registry/src/graphql.rs",
          "lib/registry/src/interface.rs||lib/registry/src/interface.rs",
          "lib/registry/src/lib.rs||lib/registry/src/lib.rs",
          "lib/registry/src/package.rs||lib/registry/src/package.rs",
          "lib/registry/src/publish.rs||lib/registry/src/publish.rs",
          "lib/wasm-interface/src/interface.rs||lib/wasm-interface/src/interface.rs",
          "lib/wasm-interface/src/interface_matcher.rs||lib/wasm-interface/src/interface_matcher.rs",
          "lib/wasm-interface/src/lib.rs||lib/wasm-interface/src/lib.rs",
          "lib/wasm-interface/src/parser.rs||lib/wasm-interface/src/parser.rs",
          "lib/wasm-interface/src/validate.rs||lib/wasm-interface/src/validate.rs",
          "tests/integration/cli/tests/init.rs||tests/integration/cli/tests/init.rs",
          "tests/integration/cli/tests/publish.rs||tests/integration/cli/tests/publish.rs",
          "tests/integration/cli/tests/run.rs||tests/integration/cli/tests/run.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Cargo.lock||Cargo.lock"
          ],
          "candidate": [
            "Cargo.lock||Cargo.lock"
          ]
        }
      },
      "candidate_diff": {
        "Cargo.lock||Cargo.lock": [
          "File: Cargo.lock -> Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "74: checksum = \"a4c527152e37cf757a3f78aae5a06fbeefdb07ccc535c980a3208ee3060dd544\"",
          "76: [[package]]",
          "77: name = \"arrayvec\"",
          "78: version = \"0.7.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: [[package]]",
          "77: name = \"arrayvec\"",
          "78: version = \"0.5.2\"",
          "79: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "80: checksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176: checksum = \"42ae2468a89544a466886840aa467a25b766499f4f04bf7d9fcd10ecee9fccef\"",
          "177: dependencies = [",
          "178:  \"arrayref\",",
          "180:  \"cc\",",
          "181:  \"cfg-if 1.0.0\",",
          "182:  \"constant_time_eq\",",
          "",
          "[Removed Lines]",
          "179:  \"arrayvec\",",
          "",
          "[Added Lines]",
          "185:  \"arrayvec 0.7.2\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "264: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "265: checksum = \"6c58ec36aac5066d5ca17df51b3e70279f5670a72102f5752cb7e7c856adfc70\"",
          "267: [[package]]",
          "268: name = \"cast\"",
          "269: version = \"0.3.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273: [[package]]",
          "274: name = \"camino\"",
          "275: version = \"1.1.1\"",
          "276: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "277: checksum = \"88ad0e1e3e88dd237a156ab9f571021b8a158caa0ae44b1968a241efb5144c1e\"",
          "278: dependencies = [",
          "279:  \"serde\",",
          "280: ]",
          "282: [[package]]",
          "283: name = \"cargo-platform\"",
          "284: version = \"0.1.2\"",
          "285: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "286: checksum = \"cbdb825da8a5df079a43676dbe042702f1707b1109f713a01420fbb4cc71fa27\"",
          "287: dependencies = [",
          "288:  \"serde\",",
          "289: ]",
          "291: [[package]]",
          "292: name = \"cargo_metadata\"",
          "293: version = \"0.15.2\"",
          "294: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "295: checksum = \"982a0cf6a99c350d7246035613882e376d58cebe571785abc5da4f648d53ac0a\"",
          "296: dependencies = [",
          "297:  \"camino\",",
          "298:  \"cargo-platform\",",
          "299:  \"semver 1.0.14\",",
          "300:  \"serde\",",
          "301:  \"serde_json\",",
          "302:  \"thiserror\",",
          "303: ]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324:  \"winapi\",",
          "325: ]",
          "327: [[package]]",
          "328: name = \"clap\"",
          "329: version = \"2.34.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: [[package]]",
          "366: name = \"cipher\"",
          "367: version = \"0.4.3\"",
          "368: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "369: checksum = \"d1873270f8f7942c191139cb8a40fd228da6c3fd2fc376d7e92d47aa14aeb59e\"",
          "370: dependencies = [",
          "371:  \"crypto-common\",",
          "372:  \"inout\",",
          "373: ]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1055: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1056: checksum = \"4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7\"",
          "1058: [[package]]",
          "1059: name = \"fastrand\"",
          "1060: version = \"1.8.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1106: [[package]]",
          "1107: name = \"fallible-streaming-iterator\"",
          "1108: version = \"0.1.9\"",
          "1109: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1110: checksum = \"7360491ce676a36bf9bb3c56c1aa791658183a54d2744120f27285738d90465a\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1431:  \"ahash\",",
          "1432: ]",
          "1434: [[package]]",
          "1435: name = \"heck\"",
          "1436: version = \"0.3.3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1488: [[package]]",
          "1489: name = \"hashlink\"",
          "1490: version = \"0.8.1\"",
          "1491: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1492: checksum = \"69fe1fcf8b4278d860ad0548329f892a3631fb63f82574df68275f34cdbe0ffa\"",
          "1493: dependencies = [",
          "1494:  \"hashbrown 0.12.3\",",
          "1495: ]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1461: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1462: checksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"",
          "1464: [[package]]",
          "1465: name = \"http\"",
          "1466: version = \"0.2.8\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1527: [[package]]",
          "1528: name = \"hmac\"",
          "1529: version = \"0.12.1\"",
          "1530: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1531: checksum = \"6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e\"",
          "1532: dependencies = [",
          "1533:  \"digest\",",
          "1534: ]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1612:  \"serde\",",
          "1613: ]",
          "1615: [[package]]",
          "1616: name = \"inkwell\"",
          "1617: version = \"0.1.0-beta.4\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1687: [[package]]",
          "1688: name = \"indicatif\"",
          "1689: version = \"0.17.2\"",
          "1690: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1691: checksum = \"4295cbb7573c16d310e99e713cf9e75101eb190ab31fccd35f2d2691b4352b19\"",
          "1692: dependencies = [",
          "1693:  \"console\",",
          "1694:  \"number_prefix\",",
          "1695:  \"portable-atomic\",",
          "1696:  \"unicode-width\",",
          "1697: ]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1666:  \"rustc_version 0.3.3\",",
          "1667: ]",
          "1669: [[package]]",
          "1670: name = \"instant\"",
          "1671: version = \"0.1.12\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1753: [[package]]",
          "1754: name = \"inout\"",
          "1755: version = \"0.1.3\"",
          "1756: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1757: checksum = \"a0c10553d664a4d0bcff9f4215d0aac67a639cc68ef660840afe309b807bc9f5\"",
          "1758: dependencies = [",
          "1759:  \"generic-array\",",
          "1760: ]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1757: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1758: checksum = \"884e2677b40cc8c339eaefcb701c32ef1fd2493d71118dc0ca4b6a736c93bd67\"",
          "1760: [[package]]",
          "1761: name = \"lexical-sort\"",
          "1762: version = \"0.3.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1853: [[package]]",
          "1854: name = \"lexical-core\"",
          "1855: version = \"0.7.6\"",
          "1856: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1857: checksum = \"6607c62aa161d23d17a9072cc5da0be67cdfc89d3afb1e8d9c842bebc2525ffe\"",
          "1858: dependencies = [",
          "1859:  \"arrayvec 0.5.2\",",
          "1860:  \"bitflags\",",
          "1861:  \"cfg-if 1.0.0\",",
          "1862:  \"ryu\",",
          "1863:  \"static_assertions\",",
          "1864: ]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1794: ]",
          "1796: [[package]]",
          "1799: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1801: dependencies = [",
          "1802:  \"cc\",",
          "1803: ]",
          "1805: [[package]]",
          "1808: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1811: [[package]]",
          "1812: name = \"llvm-sys\"",
          "",
          "[Removed Lines]",
          "1797: name = \"link-cplusplus\"",
          "1798: version = \"1.0.7\"",
          "1800: checksum = \"9272ab7b96c9046fbc5bc56c06c117cb639fe2d509df0c421cad82d2915cf369\"",
          "1806: name = \"linked-hash-map\"",
          "1807: version = \"0.5.6\"",
          "1809: checksum = \"0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f\"",
          "",
          "[Added Lines]",
          "1903: name = \"libsqlite3-sys\"",
          "1904: version = \"0.25.2\"",
          "1906: checksum = \"29f835d03d717946d28b1d1ed632eb6f0e24a299388ee623d0c23118d3e8a7fa\"",
          "1909:  \"pkg-config\",",
          "1910:  \"vcpkg\",",
          "1914: name = \"link-cplusplus\"",
          "1915: version = \"1.0.7\"",
          "1917: checksum = \"9272ab7b96c9046fbc5bc56c06c117cb639fe2d509df0c421cad82d2915cf369\"",
          "1918: dependencies = [",
          "1919:  \"cc\",",
          "1920: ]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1971: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1972: checksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"",
          "1974: [[package]]",
          "1975: name = \"miniz_oxide\"",
          "1976: version = \"0.5.4\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2085: [[package]]",
          "2086: name = \"minisign\"",
          "2087: version = \"0.7.2\"",
          "2088: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2089: checksum = \"ce49953dd06a44e1034590bb619bfe8900c29500053c0c0f83e9260a34466aa5\"",
          "2090: dependencies = [",
          "2091:  \"getrandom\",",
          "2092:  \"rpassword\",",
          "2093:  \"scrypt\",",
          "2094: ]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2042:  \"pin-utils\",",
          "2043: ]",
          "2045: [[package]]",
          "2046: name = \"nom\"",
          "2047: version = \"7.1.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2167: [[package]]",
          "2168: name = \"nom\"",
          "2169: version = \"5.1.2\"",
          "2170: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2171: checksum = \"ffb4262d26ed83a1c0a33a38fe2bb15797329c85770da05e6b828ddb782627af\"",
          "2172: dependencies = [",
          "2173:  \"lexical-core\",",
          "2174:  \"memchr\",",
          "2175:  \"version_check\",",
          "2176: ]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2093:  \"libc\",",
          "2094: ]",
          "2096: [[package]]",
          "2097: name = \"object\"",
          "2098: version = \"0.28.4\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2229: [[package]]",
          "2230: name = \"number_prefix\"",
          "2231: version = \"0.4.0\"",
          "2232: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2233: checksum = \"830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2194: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2195: checksum = \"ecba01bf2678719532c5e3059e0b5f0811273d94b397088b82e3bd0a78c78fdd\"",
          "2197: [[package]]",
          "2198: name = \"percent-encoding\"",
          "2199: version = \"2.2.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2336: [[package]]",
          "2337: name = \"pbkdf2\"",
          "2338: version = \"0.11.0\"",
          "2339: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2340: checksum = \"83a0692ec44e4cf1ef28ca317f14f8f07da2d95ec3fa01f86e4467b725e60917\"",
          "2341: dependencies = [",
          "2342:  \"digest\",",
          "2343: ]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2256:  \"plotters-backend\",",
          "2257: ]",
          "2259: [[package]]",
          "2260: name = \"ppv-lite86\"",
          "2261: version = \"0.2.17\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2407: [[package]]",
          "2408: name = \"portable-atomic\"",
          "2409: version = \"0.3.16\"",
          "2410: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2411: checksum = \"ac662b3a6490de378b0ee15cf2dfff7127aebfe0b19acc65e7fbca3d299c3788\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2711:  \"syn\",",
          "2712: ]",
          "2714: [[package]]",
          "2715: name = \"rustc-demangle\"",
          "2716: version = \"0.1.21\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2868: [[package]]",
          "2869: name = \"rpassword\"",
          "2870: version = \"7.2.0\"",
          "2871: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2872: checksum = \"6678cf63ab3491898c0d021b493c94c9b221d91295294a2a5746eacbe5928322\"",
          "2873: dependencies = [",
          "2874:  \"libc\",",
          "2875:  \"rtoolbox\",",
          "2876:  \"winapi\",",
          "2877: ]",
          "2879: [[package]]",
          "2880: name = \"rtoolbox\"",
          "2881: version = \"0.0.1\"",
          "2882: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2883: checksum = \"034e22c514f5c0cb8a10ff341b9b048b5ceb21591f31c8f44c43b960f9b3524a\"",
          "2884: dependencies = [",
          "2885:  \"libc\",",
          "2886:  \"winapi\",",
          "2887: ]",
          "2889: [[package]]",
          "2890: name = \"rusqlite\"",
          "2891: version = \"0.28.0\"",
          "2892: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2893: checksum = \"01e213bc3ecb39ac32e81e51ebe31fd888a940515173e3a18a35f8c6e896422a\"",
          "2894: dependencies = [",
          "2895:  \"bitflags\",",
          "2896:  \"fallible-iterator\",",
          "2897:  \"fallible-streaming-iterator\",",
          "2898:  \"hashlink\",",
          "2899:  \"libsqlite3-sys\",",
          "2900:  \"smallvec\",",
          "2901: ]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2802: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2803: checksum = \"4501abdff3ae82a1c1b477a17252eb69cee9e66eb915c1abaa4f44d873df9f09\"",
          "2805: [[package]]",
          "2806: name = \"same-file\"",
          "2807: version = \"1.0.6\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2994: [[package]]",
          "2995: name = \"salsa20\"",
          "2996: version = \"0.10.2\"",
          "2997: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2998: checksum = \"97a22f5af31f73a954c10289c93e8a50cc23d971e80ee446f1f6f7137a088213\"",
          "2999: dependencies = [",
          "3000:  \"cipher\",",
          "3001: ]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2829: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2830: checksum = \"9c8132065adcfd6e02db789d9285a0deb2f3fcb04002865ab67d5fb103533898\"",
          "2832: [[package]]",
          "2833: name = \"sct\"",
          "2834: version = \"0.6.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3030: [[package]]",
          "3031: name = \"scrypt\"",
          "3032: version = \"0.10.0\"",
          "3033: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3034: checksum = \"9f9e24d2b632954ded8ab2ef9fea0a0c769ea56ea98bddbafbad22caeeadf45d\"",
          "3035: dependencies = [",
          "3036:  \"hmac\",",
          "3037:  \"pbkdf2\",",
          "3038:  \"salsa20\",",
          "3039:  \"sha2\",",
          "3040: ]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2998: [[package]]",
          "2999: name = \"serde_yaml\"",
          "3001: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3003: dependencies = [",
          "3004:  \"indexmap\",",
          "3005:  \"ryu\",",
          "3006:  \"serde\",",
          "3008: ]",
          "3010: [[package]]",
          "",
          "[Removed Lines]",
          "3000: version = \"0.8.26\"",
          "3002: checksum = \"578a7433b776b56a35785ed5ce9a7e777ac0598aac5a6dd1b4b18a307c7fc71b\"",
          "3007:  \"yaml-rust\",",
          "",
          "[Added Lines]",
          "3210: version = \"0.9.14\"",
          "3212: checksum = \"6d232d893b10de3eb7258ff01974d6ee20663d8e833263c99409d4b13a0209da\"",
          "3215:  \"itoa 1.0.4\",",
          "3218:  \"unsafe-libyaml\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3128:  \"version_check\",",
          "3129: ]",
          "3131: [[package]]",
          "3132: name = \"stdweb\"",
          "3133: version = \"0.4.20\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3342: [[package]]",
          "3343: name = \"static_assertions\"",
          "3344: version = \"1.1.0\"",
          "3345: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3346: checksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3391:  \"libc\",",
          "3392:  \"standback\",",
          "3393:  \"stdweb\",",
          "3395:  \"version_check\",",
          "3396:  \"winapi\",",
          "3397: ]",
          "3399: [[package]]",
          "3400: name = \"time-macros\"",
          "3401: version = \"0.1.1\"",
          "",
          "[Removed Lines]",
          "3394:  \"time-macros\",",
          "",
          "[Added Lines]",
          "3611:  \"time-macros 0.1.1\",",
          "3616: [[package]]",
          "3617: name = \"time\"",
          "3618: version = \"0.3.17\"",
          "3619: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3620: checksum = \"a561bf4617eebd33bca6434b988f39ed798e527f51a1e797d0ee4f61c0a38376\"",
          "3621: dependencies = [",
          "3622:  \"itoa 1.0.4\",",
          "3623:  \"serde\",",
          "3624:  \"time-core\",",
          "3625:  \"time-macros 0.2.6\",",
          "3626: ]",
          "3628: [[package]]",
          "3629: name = \"time-core\"",
          "3630: version = \"0.1.0\"",
          "3631: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3632: checksum = \"2e153e1f1acaef8acc537e68b44906d2db6436e2b35ac2c6b42640fff91f00fd\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3406:  \"time-macros-impl\",",
          "3407: ]",
          "3409: [[package]]",
          "3410: name = \"time-macros-impl\"",
          "3411: version = \"0.1.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3644: [[package]]",
          "3645: name = \"time-macros\"",
          "3646: version = \"0.2.6\"",
          "3647: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3648: checksum = \"d967f99f534ca7e495c575c62638eebc2898a8c84c119b89e250477bc4ba16b2\"",
          "3649: dependencies = [",
          "3650:  \"time-core\",",
          "3651: ]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3694:  \"void\",",
          "3695: ]",
          "3697: [[package]]",
          "3698: name = \"untrusted\"",
          "3699: version = \"0.7.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3941: [[package]]",
          "3942: name = \"unsafe-libyaml\"",
          "3943: version = \"0.2.4\"",
          "3944: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3945: checksum = \"c1e5fa573d8ac5f1a856f8d7be41d390ee973daf97c806b2c1a465e4e1406e68\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3712:  \"serde\",",
          "3713: ]",
          "3715: [[package]]",
          "3716: name = \"version-compare\"",
          "3717: version = \"0.1.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3965: [[package]]",
          "3966: name = \"vcpkg\"",
          "3967: version = \"0.2.15\"",
          "3968: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3969: checksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3763: [[package]]",
          "3764: name = \"wapm-toml\"",
          "3766: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3768: dependencies = [",
          "3769:  \"anyhow\",",
          "3770:  \"semver 1.0.14\",",
          "3771:  \"serde\",",
          "3772:  \"serde_cbor\",",
          "3774:  \"serde_json\",",
          "3775:  \"serde_yaml\",",
          "3776:  \"thiserror\",",
          "",
          "[Removed Lines]",
          "3765: version = \"0.2.2\"",
          "3767: checksum = \"a61b6d3b6a2fc171198e6378b3a9b38650e114298775a9e63401613abb6a10b3\"",
          "3773:  \"serde_derive\",",
          "",
          "[Added Lines]",
          "4021: version = \"0.4.0\"",
          "4023: checksum = \"994ef26447f3158955d2e3fca96021d1f1c47b830e2053569177673dca1447a9\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4056:  \"anyhow\",",
          "4057:  \"atty\",",
          "4058:  \"bytesize\",",
          "4059:  \"cfg-if 1.0.0\",",
          "4060:  \"chrono\",",
          "4061:  \"clap 3.2.23\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4314:  \"cargo_metadata\",",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4064:  \"dirs\",",
          "4065:  \"distance\",",
          "4066:  \"fern\",",
          "4067:  \"hex\",",
          "4068:  \"http_req\",",
          "4069:  \"isatty\",",
          "4070:  \"libc\",",
          "4071:  \"log\",",
          "4072:  \"nuke-dir\",",
          "4073:  \"prettytable-rs\",",
          "4074:  \"regex\",",
          "4075:  \"reqwest\",",
          "4076:  \"serde\",",
          "4077:  \"serde_json\",",
          "4078:  \"spinoff\",",
          "4079:  \"target-lexicon 0.12.5\",",
          "4080:  \"tempdir\",",
          "4081:  \"tempfile\",",
          "4082:  \"tldextract\",",
          "4083:  \"toml\",",
          "4084:  \"unix_mode\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4323:  \"flate2\",",
          "4329:  \"minisign\",",
          "4334:  \"rpassword\",",
          "4335:  \"rusqlite\",",
          "4336:  \"semver 1.0.14\",",
          "4340:  \"tar\",",
          "4344:  \"thiserror\",",
          "4345:  \"time 0.3.17\",",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4099:  \"wasmer-vm\",",
          "4100:  \"wasmer-wasi\",",
          "4101:  \"wasmer-wasi-experimental-io-devices\",",
          "4102:  \"wasmer-wast\",",
          "4103:  \"webc\",",
          "4104: ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4366:  \"wasmer-wasm-interface\",",
          "4368:  \"wasmparser 0.51.4\",",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4232:  \"lazy_static\",",
          "4233:  \"libc\",",
          "4234:  \"log\",",
          "4236:  \"wasmer\",",
          "4237:  \"wasmer-types\",",
          "4238: ]",
          "",
          "[Removed Lines]",
          "4235:  \"time\",",
          "",
          "[Added Lines]",
          "4501:  \"time 0.2.27\",",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4271: dependencies = [",
          "4272:  \"anyhow\",",
          "4273:  \"flate2\",",
          "4274:  \"rand 0.8.5\",",
          "4275:  \"tar\",",
          "4276:  \"target-lexicon 0.12.5\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4540:  \"pretty_assertions\",",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4304: version = \"3.1.0\"",
          "4305: dependencies = [",
          "4306:  \"anyhow\",",
          "4307:  \"dirs\",",
          "4308:  \"filetime\",",
          "4309:  \"flate2\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4574:  \"console\",",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4311:  \"futures-util\",",
          "4312:  \"graphql_client\",",
          "4313:  \"hex\",",
          "4314:  \"log\",",
          "4315:  \"lzma-rs\",",
          "4316:  \"rand 0.8.5\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4582:  \"indicatif\",",
          "4583:  \"lazy_static\",",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4463:  \"byteorder\",",
          "4464:  \"pretty_assertions\",",
          "4465:  \"serde\",",
          "4467:  \"wasmer\",",
          "4468:  \"wasmer-derive\",",
          "4469:  \"wasmer-types\",",
          "",
          "[Removed Lines]",
          "4466:  \"time\",",
          "",
          "[Added Lines]",
          "4736:  \"time 0.2.27\",",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4473:  \"wasmer-wit-parser\",",
          "4474: ]",
          "4476: [[package]]",
          "4477: name = \"wasmer-wast\"",
          "4478: version = \"3.1.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4746: [[package]]",
          "4747: name = \"wasmer-wasm-interface\"",
          "4748: version = \"3.1.0\"",
          "4749: dependencies = [",
          "4750:  \"bincode\",",
          "4751:  \"either\",",
          "4752:  \"nom 5.1.2\",",
          "4753:  \"serde\",",
          "4754:  \"wasmparser 0.51.4\",",
          "4755:  \"wat\",",
          "4756: ]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "4586:  \"wasmer-wast\",",
          "4587: ]",
          "4589: [[package]]",
          "4590: name = \"wasmparser\"",
          "4591: version = \"0.83.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4871: [[package]]",
          "4872: name = \"wasmparser\"",
          "4873: version = \"0.51.4\"",
          "4874: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "4875: checksum = \"aeb1956b19469d1c5e63e459d29e7b5aa0f558d9f16fcef09736f8a265e6c10a\"",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "4972: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "4973: checksum = \"463705a63313cd4301184381c5e8042f0a7e9b4bb63653f216311d4ae74690b7\"",
          "4974: dependencies = [",
          "4976: ]",
          "4978: [[package]]",
          "",
          "[Removed Lines]",
          "4975:  \"nom\",",
          "",
          "[Added Lines]",
          "5263:  \"nom 7.1.1\",",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "4981: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "4982: checksum = \"d2d7d3948613f75c98fd9328cfdcc45acc4d360655289d0a7d4ec931392200a3\"",
          "4993: [[package]]",
          "4994: name = \"yansi\"",
          "4995: version = \"0.5.1\"",
          "",
          "[Removed Lines]",
          "4984: [[package]]",
          "4985: name = \"yaml-rust\"",
          "4986: version = \"0.4.5\"",
          "4987: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "4988: checksum = \"56c1936c4cc7a1c9ab21a1ebb602eb942ba868cbd44a99cb7cdc5892335e1c85\"",
          "4989: dependencies = [",
          "4990:  \"linked-hash-map\",",
          "4991: ]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cli/sql/migrations/0000.sql||lib/cli/sql/migrations/0000.sql": [
          "File: lib/cli/sql/migrations/0000.sql -> lib/cli/sql/migrations/0000.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: CREATE TABLE personal_keys",
          "2: (",
          "3:   id integer primary key,",
          "4:   active integer not null,",
          "5:   public_key_id text not null UNIQUE,",
          "6:   public_key_value text not null UNIQUE,",
          "7:   private_key_location text UNIQUE,",
          "8:   key_type_identifier text not null,",
          "9:   date_added text not null",
          "10: );",
          "12: CREATE TABLE wapm_users",
          "13: (",
          "14:   id integer primary key,",
          "15:   name text not null UNIQUE",
          "16: );",
          "18: CREATE TABLE wapm_public_keys",
          "19: (",
          "20:   id integer primary key,",
          "21:   public_key_id text not null UNIQUE,",
          "22:   user_key integer not null,",
          "23:   public_key_value text not null UNIQUE,",
          "24:   key_type_identifier text not null,",
          "25:   date_added text not null,",
          "26:   FOREIGN KEY(user_key) REFERENCES wapm_users(id)",
          "27: );",
          "",
          "---------------"
        ],
        "lib/cli/sql/migrations/0001.sql||lib/cli/sql/migrations/0001.sql": [
          "File: lib/cli/sql/migrations/0001.sql -> lib/cli/sql/migrations/0001.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: CREATE TABLE wasm_contracts",
          "2: (",
          "3:   id integer primary key,",
          "4:   contract_name text not null,",
          "5:   version text not null,",
          "6:   date_added text not null,",
          "7:   content text not null,",
          "8:   CONSTRAINT name_version_unique UNIQUE (contract_name, version)",
          "9: );",
          "",
          "---------------"
        ],
        "lib/cli/sql/migrations/0002.sql||lib/cli/sql/migrations/0002.sql": [
          "File: lib/cli/sql/migrations/0002.sql -> lib/cli/sql/migrations/0002.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: PRAGMA foreign_keys=off;",
          "3: CREATE TABLE wasm_interfaces",
          "4: (",
          "5:   id integer primary key,",
          "6:   interface_name text not null,",
          "7:   version text not null,",
          "8:   date_added text not null,",
          "9:   content text not null,",
          "10:   CONSTRAINT name_version_unique UNIQUE (interface_name, version)",
          "11: );",
          "13: INSERT INTO wasm_interfaces",
          "14: (",
          "15:   id,",
          "16:   interface_name,",
          "17:   version,",
          "18:   date_added,",
          "19:   content",
          "20: )",
          "21:   SELECT id, contract_name, version, date_added, content",
          "22:   FROM wasm_contracts;",
          "24: DROP TABLE wasm_contracts;",
          "26: PRAGMA foreign_keys=on;",
          "",
          "---------------"
        ],
        "lib/cli/src/cli.rs||lib/cli/src/cli.rs": [
          "File: lib/cli/src/cli.rs -> lib/cli/src/cli.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #[cfg(feature = \"wast\")]",
          "12: use crate::commands::Wast;",
          "13: use crate::commands::{",
          "15: };",
          "16: use crate::error::PrettyError;",
          "17: use clap::{CommandFactory, ErrorKind, Parser};",
          "",
          "[Removed Lines]",
          "14:     Add, Cache, Config, Inspect, List, Login, Run, SelfUpdate, Validate, Whoami,",
          "",
          "[Added Lines]",
          "14:     Add, Cache, Config, Init, Inspect, List, Login, Publish, Run, SelfUpdate, Validate, Whoami,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     Login(Login),",
          "50:     #[clap(subcommand)]",
          "51:     Cache(Cache),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     #[clap(name = \"publish\")]",
          "51:     Publish(Publish),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:     Inspect(Inspect),",
          "139:     #[cfg(feature = \"wast\")]",
          "140:     Wast(Wast),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:     #[clap(name = \"init\")]",
          "144:     Init(Init),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:             Self::CreateObj(create_obj) => create_obj.execute(),",
          "166:             Self::Config(config) => config.execute(),",
          "167:             Self::Inspect(inspect) => inspect.execute(),",
          "168:             Self::List(list) => list.execute(),",
          "169:             Self::Login(login) => login.execute(),",
          "170:             #[cfg(feature = \"wast\")]",
          "171:             Self::Wast(wast) => wast.execute(),",
          "172:             #[cfg(target_os = \"linux\")]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:             Self::Init(init) => init.execute(),",
          "179:             Self::Publish(publish) => publish.execute(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "224:         WasmerCLIOptions::Run(Run::from_binfmt_args())",
          "225:     } else {",
          "226:         match command.unwrap_or(&\"\".to_string()).as_ref() {",
          "231:             _ => {",
          "232:                 WasmerCLIOptions::try_parse_from(args.iter()).unwrap_or_else(|e| {",
          "233:                     match e.kind() {",
          "",
          "[Removed Lines]",
          "227:             \"add\" | \"cache\" | \"compile\" | \"config\" | \"create-exe\" | \"help\" | \"inspect\" | \"run\"",
          "228:             | \"self-update\" | \"validate\" | \"wast\" | \"binfmt\" | \"list\" | \"login\" => {",
          "229:                 WasmerCLIOptions::parse()",
          "230:             }",
          "",
          "[Added Lines]",
          "237:             \"add\" | \"cache\" | \"compile\" | \"config\" | \"create-exe\" | \"help\" | \"inspect\" | \"init\"",
          "238:             | \"run\" | \"self-update\" | \"validate\" | \"wast\" | \"binfmt\" | \"list\" | \"login\"",
          "239:             | \"publish\" => WasmerCLIOptions::parse(),",
          "",
          "---------------"
        ],
        "lib/cli/src/commands.rs||lib/cli/src/commands.rs": [
          "File: lib/cli/src/commands.rs -> lib/cli/src/commands.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: mod create_exe;",
          "11: #[cfg(feature = \"static-artifact-create\")]",
          "12: mod create_obj;",
          "13: mod inspect;",
          "14: mod list;",
          "15: mod login;",
          "16: mod run;",
          "17: mod self_update;",
          "18: mod validate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: mod init;",
          "17: mod publish;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: #[cfg(feature = \"wast\")]",
          "32: pub use wast::*;",
          "33: pub use {",
          "36: };",
          "",
          "[Removed Lines]",
          "34:     add::*, cache::*, config::*, inspect::*, list::*, login::*, run::*, self_update::*,",
          "35:     validate::*, whoami::*,",
          "",
          "[Added Lines]",
          "36:     add::*, cache::*, config::*, init::*, inspect::*, list::*, login::*, publish::*, run::*,",
          "37:     self_update::*, validate::*, whoami::*,",
          "",
          "---------------"
        ],
        "lib/cli/src/commands/init.rs||lib/cli/src/commands/init.rs": [
          "File: lib/cli/src/commands/init.rs -> lib/cli/src/commands/init.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use anyhow::Context;",
          "2: use cargo_metadata::{CargoOpt, MetadataCommand};",
          "3: use clap::Parser;",
          "4: use std::collections::HashMap;",
          "5: use std::path::Path;",
          "6: use std::path::PathBuf;",
          "8: static NOTE: &str =",
          "9:     \"# See more keys and definitions at https://docs.wasmer.io/ecosystem/wapm/manifest\";",
          "11: const NEWLINE: &str = if cfg!(windows) { \"\\r\\n\" } else { \"\\n\" };",
          "14: #[derive(Debug, Parser)]",
          "15: pub struct Init {",
          "17:     #[clap(long, group = \"crate-type\")]",
          "18:     pub lib: bool,",
          "20:     #[clap(long, group = \"crate-type\")]",
          "21:     pub bin: bool,",
          "23:     #[clap(long, group = \"crate-type\")]",
          "24:     pub empty: bool,",
          "26:     #[clap(long)]",
          "27:     pub overwrite: bool,",
          "29:     #[clap(long)]",
          "30:     pub quiet: bool,",
          "32:     #[clap(long)]",
          "33:     pub namespace: Option<String>,",
          "35:     #[clap(long)]",
          "36:     pub package_name: Option<String>,",
          "38:     #[clap(long)]",
          "39:     pub version: Option<semver::Version>,",
          "41:     #[clap(long)]",
          "42:     pub manifest_path: Option<PathBuf>,",
          "44:     #[clap(long, value_enum)]",
          "45:     pub template: Option<Template>,",
          "47:     #[clap(long)]",
          "48:     pub include: Vec<String>,",
          "51:     #[clap(name = \"PACKAGE_PATH\")]",
          "52:     pub out: Option<PathBuf>,",
          "53: }",
          "56: #[derive(Debug, PartialEq, Eq, Copy, Clone, clap::ValueEnum)]",
          "57: pub enum Template {",
          "59:     Python,",
          "61:     Js,",
          "62: }",
          "64: #[derive(Debug, PartialEq, Copy, Clone)]",
          "65: enum BinOrLib {",
          "66:     Bin,",
          "67:     Lib,",
          "68:     Empty,",
          "69: }",
          "72: #[derive(Debug, Clone)]",
          "73: struct MiniCargoTomlPackage {",
          "74:     name: String,",
          "75:     version: semver::Version,",
          "76:     description: Option<String>,",
          "77:     homepage: Option<String>,",
          "78:     repository: Option<String>,",
          "79:     license: Option<String>,",
          "80:     readme: Option<PathBuf>,",
          "81:     license_file: Option<PathBuf>,",
          "82:     #[allow(dead_code)]",
          "83:     workspace_root: PathBuf,",
          "84:     #[allow(dead_code)]",
          "85:     build_dir: PathBuf,",
          "86: }",
          "88: static WASMER_TOML_NAME: &str = \"wasmer.toml\";",
          "90: impl Init {",
          "92:     pub fn execute(&self) -> Result<(), anyhow::Error> {",
          "93:         let bin_or_lib = self.get_bin_or_lib()?;",
          "96:         let manifest_path = match self.manifest_path.as_ref() {",
          "97:             Some(s) => s.clone(),",
          "98:             None => {",
          "99:                 let cargo_toml_path = self",
          "100:                     .out",
          "101:                     .clone()",
          "102:                     .unwrap_or_else(|| std::env::current_dir().unwrap())",
          "103:                     .join(\"Cargo.toml\");",
          "104:                 cargo_toml_path",
          "105:                     .canonicalize()",
          "106:                     .unwrap_or_else(|_| cargo_toml_path.clone())",
          "107:             }",
          "108:         };",
          "110:         let cargo_toml = if manifest_path.exists() {",
          "111:             Some(parse_cargo_toml(&manifest_path)?)",
          "112:         } else {",
          "113:             None",
          "114:         };",
          "116:         let (fallback_package_name, target_file) = self.target_file()?;",
          "118:         if target_file.exists() && !self.overwrite {",
          "119:             anyhow::bail!(",
          "120:                 \"wasmer project already initialized in {}\",",
          "121:                 target_file.display(),",
          "122:             );",
          "123:         }",
          "125:         let constructed_manifest = construct_manifest(",
          "126:             cargo_toml.as_ref(),",
          "127:             &fallback_package_name,",
          "128:             self.package_name.as_deref(),",
          "129:             &target_file,",
          "130:             &manifest_path,",
          "131:             bin_or_lib,",
          "132:             self.namespace.clone(),",
          "133:             self.version.clone(),",
          "134:             self.template.as_ref(),",
          "135:             self.include.as_slice(),",
          "136:             self.quiet,",
          "137:         );",
          "139:         if let Some(parent) = target_file.parent() {",
          "140:             let _ = std::fs::create_dir_all(parent);",
          "141:         }",
          "144:         Self::write_wasmer_toml(&target_file, &constructed_manifest)",
          "145:     }",
          "148:     fn write_wasmer_toml(path: &PathBuf, toml: &wapm_toml::Manifest) -> Result<(), anyhow::Error> {",
          "149:         let toml_string = toml::to_string_pretty(&toml)?",
          "150:             .replace(",
          "151:                 \"[dependencies]\",",
          "152:                 &format!(\"{NOTE}{NEWLINE}{NEWLINE}[dependencies]\"),",
          "153:             )",
          "154:             .lines()",
          "155:             .collect::<Vec<_>>()",
          "156:             .join(NEWLINE);",
          "158:         std::fs::write(&path, &toml_string)",
          "159:             .with_context(|| format!(\"Unable to write to \\\"{}\\\"\", path.display()))?;",
          "161:         Ok(())",
          "162:     }",
          "164:     fn target_file(&self) -> Result<(String, PathBuf), anyhow::Error> {",
          "165:         match self.out.as_ref() {",
          "166:             None => {",
          "167:                 let current_dir = std::env::current_dir()?;",
          "168:                 let package_name = self",
          "169:                     .package_name",
          "170:                     .clone()",
          "171:                     .or_else(|| {",
          "172:                         current_dir",
          "173:                             .canonicalize()",
          "174:                             .ok()?",
          "175:                             .file_stem()",
          "176:                             .and_then(|s| s.to_str())",
          "177:                             .map(|s| s.to_string())",
          "178:                     })",
          "179:                     .ok_or_else(|| anyhow::anyhow!(\"no current dir name\"))?;",
          "180:                 Ok((package_name, current_dir.join(WASMER_TOML_NAME)))",
          "181:             }",
          "182:             Some(s) => {",
          "183:                 let _ = std::fs::create_dir_all(s);",
          "184:                 let package_name = self",
          "185:                     .package_name",
          "186:                     .clone()",
          "187:                     .or_else(|| {",
          "188:                         s.canonicalize()",
          "189:                             .ok()?",
          "190:                             .file_stem()",
          "191:                             .and_then(|s| s.to_str())",
          "192:                             .map(|s| s.to_string())",
          "193:                     })",
          "194:                     .ok_or_else(|| anyhow::anyhow!(\"no dir name\"))?;",
          "195:                 Ok((package_name, s.join(WASMER_TOML_NAME)))",
          "196:             }",
          "197:         }",
          "198:     }",
          "200:     fn get_filesystem_mapping(include: &[String]) -> Option<HashMap<String, PathBuf>> {",
          "201:         if include.is_empty() {",
          "202:             return None;",
          "203:         }",
          "205:         Some(",
          "206:             include",
          "207:                 .iter()",
          "208:                 .map(|path| {",
          "209:                     if path == \".\" || path == \"/\" {",
          "210:                         return (\"/\".to_string(), Path::new(\"/\").to_path_buf());",
          "211:                     }",
          "213:                     let key = format!(\"./{path}\");",
          "214:                     let value = Path::new(&format!(\"/{path}\")).to_path_buf();",
          "216:                     (key, value)",
          "217:                 })",
          "218:                 .collect(),",
          "219:         )",
          "220:     }",
          "222:     fn get_command(",
          "223:         modules: &[wapm_toml::Module],",
          "224:         bin_or_lib: BinOrLib,",
          "225:     ) -> Option<Vec<wapm_toml::Command>> {",
          "226:         match bin_or_lib {",
          "227:             BinOrLib::Bin => Some(",
          "228:                 modules",
          "229:                     .iter()",
          "230:                     .map(|m| {",
          "231:                         wapm_toml::Command::V1(wapm_toml::CommandV1 {",
          "232:                             name: m.name.clone(),",
          "233:                             module: m.name.clone(),",
          "234:                             main_args: None,",
          "235:                             package: None,",
          "236:                         })",
          "237:                     })",
          "238:                     .collect(),",
          "239:             ),",
          "240:             BinOrLib::Lib | BinOrLib::Empty => None,",
          "241:         }",
          "242:     }",
          "245:     fn get_dependencies(template: Option<&Template>) -> HashMap<String, String> {",
          "246:         let mut map = HashMap::default();",
          "248:         match template {",
          "249:             Some(Template::Js) => {",
          "250:                 map.insert(\"quickjs\".to_string(), \"quickjs/quickjs@latest\".to_string());",
          "251:             }",
          "252:             Some(Template::Python) => {",
          "253:                 map.insert(\"python\".to_string(), \"python/python@latest\".to_string());",
          "254:             }",
          "255:             _ => {}",
          "256:         }",
          "258:         map",
          "259:     }",
          "262:     fn get_bin_or_lib(&self) -> Result<BinOrLib, anyhow::Error> {",
          "263:         match (self.empty, self.bin, self.lib) {",
          "264:             (true, true, _) | (true, _, true) => Err(anyhow::anyhow!(",
          "265:                 \"cannot combine --empty with --bin or --lib\"",
          "266:             )),",
          "267:             (true, false, false) => Ok(BinOrLib::Empty),",
          "268:             (_, true, true) => Err(anyhow::anyhow!(",
          "269:                 \"cannot initialize a wapm manifest with both --bin and --lib, pick one\"",
          "270:             )),",
          "271:             (false, true, _) => Ok(BinOrLib::Bin),",
          "272:             (false, _, true) => Ok(BinOrLib::Lib),",
          "273:             _ => Ok(BinOrLib::Bin),",
          "274:         }",
          "275:     }",
          "279:     fn get_bindings(target_file: &Path, bin_or_lib: BinOrLib) -> Option<GetBindingsResult> {",
          "280:         match bin_or_lib {",
          "281:             BinOrLib::Bin | BinOrLib::Empty => None,",
          "282:             BinOrLib::Lib => target_file.parent().and_then(|parent| {",
          "283:                 let all_bindings = walkdir::WalkDir::new(parent)",
          "284:                     .min_depth(1)",
          "285:                     .max_depth(3)",
          "286:                     .follow_links(false)",
          "287:                     .into_iter()",
          "288:                     .filter_map(|e| e.ok())",
          "289:                     .filter_map(|e| {",
          "290:                         let is_wit = e.path().extension().and_then(|s| s.to_str()) == Some(\".wit\");",
          "291:                         let is_wai = e.path().extension().and_then(|s| s.to_str()) == Some(\".wai\");",
          "292:                         if is_wit {",
          "293:                             Some(wapm_toml::Bindings::Wit(wapm_toml::WitBindings {",
          "294:                                 wit_exports: e.path().to_path_buf(),",
          "295:                                 wit_bindgen: semver::Version::parse(\"0.1.0\").unwrap(),",
          "296:                             }))",
          "297:                         } else if is_wai {",
          "298:                             Some(wapm_toml::Bindings::Wai(wapm_toml::WaiBindings {",
          "299:                                 exports: None,",
          "300:                                 imports: vec![e.path().to_path_buf()],",
          "301:                                 wai_version: semver::Version::parse(\"0.2.0\").unwrap(),",
          "302:                             }))",
          "303:                         } else {",
          "304:                             None",
          "305:                         }",
          "306:                     })",
          "307:                     .collect::<Vec<_>>();",
          "309:                 if all_bindings.is_empty() {",
          "310:                     None",
          "311:                 } else if all_bindings.len() == 1 {",
          "312:                     Some(GetBindingsResult::OneBinding(all_bindings[0].clone()))",
          "313:                 } else {",
          "314:                     Some(GetBindingsResult::MultiBindings(all_bindings))",
          "315:                 }",
          "316:             }),",
          "317:         }",
          "318:     }",
          "319: }",
          "321: enum GetBindingsResult {",
          "322:     OneBinding(wapm_toml::Bindings),",
          "323:     MultiBindings(Vec<wapm_toml::Bindings>),",
          "324: }",
          "326: impl GetBindingsResult {",
          "327:     fn first_binding(&self) -> Option<wapm_toml::Bindings> {",
          "328:         match self {",
          "329:             Self::OneBinding(s) => Some(s.clone()),",
          "330:             Self::MultiBindings(s) => s.get(0).cloned(),",
          "331:         }",
          "332:     }",
          "333: }",
          "335: #[allow(clippy::too_many_arguments)]",
          "336: fn construct_manifest(",
          "337:     cargo_toml: Option<&MiniCargoTomlPackage>,",
          "338:     fallback_package_name: &String,",
          "339:     package_name: Option<&str>,",
          "340:     target_file: &Path,",
          "341:     manifest_path: &Path,",
          "342:     bin_or_lib: BinOrLib,",
          "343:     namespace: Option<String>,",
          "344:     version: Option<semver::Version>,",
          "345:     template: Option<&Template>,",
          "346:     include_fs: &[String],",
          "347:     quiet: bool,",
          "348: ) -> wapm_toml::Manifest {",
          "349:     let package_name = package_name.unwrap_or_else(|| {",
          "350:         cargo_toml",
          "351:             .as_ref()",
          "352:             .map(|p| &p.name)",
          "353:             .unwrap_or(fallback_package_name)",
          "354:     });",
          "355:     let namespace = namespace.or_else(|| wasmer_registry::whoami(None, None).ok().map(|o| o.1));",
          "356:     let version = version.unwrap_or_else(|| {",
          "357:         cargo_toml",
          "358:             .as_ref()",
          "359:             .map(|t| t.version.clone())",
          "360:             .unwrap_or_else(|| semver::Version::parse(\"0.1.0\").unwrap())",
          "361:     });",
          "362:     let license = cargo_toml.as_ref().and_then(|t| t.license.clone());",
          "363:     let license_file = cargo_toml.as_ref().and_then(|t| t.license_file.clone());",
          "364:     let readme = cargo_toml.as_ref().and_then(|t| t.readme.clone());",
          "365:     let repository = cargo_toml.as_ref().and_then(|t| t.repository.clone());",
          "366:     let homepage = cargo_toml.as_ref().and_then(|t| t.homepage.clone());",
          "367:     let description = cargo_toml",
          "368:         .as_ref()",
          "369:         .and_then(|t| t.description.clone())",
          "370:         .unwrap_or_else(|| format!(\"Description for package {package_name}\"));",
          "372:     let default_abi = wapm_toml::Abi::Wasi;",
          "373:     let bindings = Init::get_bindings(target_file, bin_or_lib);",
          "375:     if let Some(GetBindingsResult::MultiBindings(m)) = bindings.as_ref() {",
          "376:         let found = m",
          "377:             .iter()",
          "378:             .map(|m| match m {",
          "379:                 wapm_toml::Bindings::Wit(wb) => {",
          "380:                     format!(\"found: {}\", serde_json::to_string(wb).unwrap_or_default())",
          "381:                 }",
          "382:                 wapm_toml::Bindings::Wai(wb) => {",
          "383:                     format!(\"found: {}\", serde_json::to_string(wb).unwrap_or_default())",
          "384:                 }",
          "385:             })",
          "386:             .collect::<Vec<_>>()",
          "387:             .join(\"\\r\\n\");",
          "389:         let msg = vec![",
          "390:             String::new(),",
          "391:             \"    It looks like your project contains multiple *.wai files.\".to_string(),",
          "392:             \"    Make sure you update the [[module.bindings]] appropriately\".to_string(),",
          "393:             String::new(),",
          "394:             found,",
          "395:         ];",
          "396:         let msg = msg.join(\"\\r\\n\");",
          "397:         if !quiet {",
          "398:             println!(\"{msg}\");",
          "399:         }",
          "400:         log::warn!(\"{msg}\");",
          "401:     }",
          "403:     let modules = vec![wapm_toml::Module {",
          "404:         name: package_name.to_string(),",
          "405:         source: cargo_toml",
          "406:             .as_ref()",
          "407:             .map(|p| {",
          "409:                 let outpath = p",
          "410:                     .build_dir",
          "411:                     .join(\"release\")",
          "412:                     .join(&format!(\"{package_name}.wasm\"));",
          "413:                 let canonicalized_outpath = outpath.canonicalize().unwrap_or(outpath);",
          "414:                 let outpath_str = format!(\"{}\", canonicalized_outpath.display());",
          "415:                 let manifest_canonicalized = manifest_path",
          "416:                     .parent()",
          "417:                     .and_then(|p| p.canonicalize().ok())",
          "418:                     .unwrap_or_else(|| manifest_path.to_path_buf());",
          "419:                 let manifest_str = format!(\"{}/\", manifest_canonicalized.display());",
          "420:                 let relative_str = outpath_str.replacen(&manifest_str, \"\", 1);",
          "421:                 Path::new(&relative_str).to_path_buf()",
          "422:             })",
          "423:             .unwrap_or_else(|| Path::new(&format!(\"{package_name}.wasm\")).to_path_buf()),",
          "424:         kind: None,",
          "425:         abi: default_abi,",
          "426:         bindings: bindings.as_ref().and_then(|b| b.first_binding()),",
          "427:         interfaces: Some({",
          "428:             let mut map = HashMap::new();",
          "429:             map.insert(\"wasi\".to_string(), \"0.1.0-unstable\".to_string());",
          "430:             map",
          "431:         }),",
          "432:     }];",
          "434:     wapm_toml::Manifest {",
          "435:         package: wapm_toml::Package {",
          "436:             name: if wasmer_registry::Package::validate_package_name(package_name) {",
          "437:                 package_name.to_string()",
          "438:             } else if let Some(s) = namespace {",
          "439:                 format!(\"{s}/{package_name}\")",
          "440:             } else {",
          "441:                 package_name.to_string()",
          "442:             },",
          "443:             version,",
          "444:             description,",
          "445:             license,",
          "446:             license_file,",
          "447:             readme,",
          "448:             repository,",
          "449:             homepage,",
          "450:             wasmer_extra_flags: None,",
          "451:             disable_command_rename: false,",
          "452:             rename_commands_to_raw_command_name: false,",
          "453:         },",
          "454:         dependencies: Some(Init::get_dependencies(template)),",
          "455:         command: Init::get_command(&modules, bin_or_lib),",
          "456:         module: match bin_or_lib {",
          "457:             BinOrLib::Empty => None,",
          "458:             _ => Some(modules),",
          "459:         },",
          "460:         fs: Init::get_filesystem_mapping(include_fs),",
          "461:         base_directory_path: target_file",
          "462:             .parent()",
          "463:             .map(|o| o.to_path_buf())",
          "464:             .unwrap_or_else(|| target_file.to_path_buf()),",
          "465:     }",
          "466: }",
          "467: fn parse_cargo_toml(manifest_path: &PathBuf) -> Result<MiniCargoTomlPackage, anyhow::Error> {",
          "468:     let mut metadata = MetadataCommand::new();",
          "469:     metadata.manifest_path(&manifest_path);",
          "470:     metadata.no_deps();",
          "471:     metadata.features(CargoOpt::AllFeatures);",
          "473:     let metadata = metadata.exec();",
          "475:     let metadata = match metadata {",
          "476:         Ok(o) => o,",
          "477:         Err(e) => {",
          "478:             return Err(anyhow::anyhow!(\"failed to load metadata: {e}\")",
          "479:                 .context(anyhow::anyhow!(\"{}\", manifest_path.display())));",
          "480:         }",
          "481:     };",
          "483:     let package = metadata",
          "484:         .root_package()",
          "485:         .ok_or_else(|| anyhow::anyhow!(\"no root package found in cargo metadata\"))",
          "486:         .context(anyhow::anyhow!(\"{}\", manifest_path.display()))?;",
          "488:     Ok(MiniCargoTomlPackage {",
          "489:         name: package.name.clone(),",
          "490:         version: package.version.clone(),",
          "491:         description: package.description.clone(),",
          "492:         homepage: package.homepage.clone(),",
          "493:         repository: package.repository.clone(),",
          "494:         license: package.license.clone(),",
          "495:         readme: package.readme.clone().map(|s| s.into_std_path_buf()),",
          "496:         license_file: package.license_file.clone().map(|f| f.into_std_path_buf()),",
          "497:         workspace_root: metadata.workspace_root.into_std_path_buf(),",
          "498:         build_dir: metadata",
          "499:             .target_directory",
          "500:             .into_std_path_buf()",
          "501:             .join(\"wasm32-wasi\"),",
          "502:     })",
          "503: }",
          "",
          "---------------"
        ],
        "lib/cli/src/commands/publish.rs||lib/cli/src/commands/publish.rs": [
          "File: lib/cli/src/commands/publish.rs -> lib/cli/src/commands/publish.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use anyhow::Context;",
          "2: use clap::Parser;",
          "3: use flate2::{write::GzEncoder, Compression};",
          "4: use rusqlite::{params, Connection, OpenFlags, TransactionBehavior};",
          "5: use std::fs;",
          "6: use std::io::{self, Write};",
          "7: use std::path::{Path, PathBuf};",
          "8: use tar::Builder;",
          "9: use thiserror::Error;",
          "10: use time::{self, OffsetDateTime};",
          "11: use wasmer_registry::publish::SignArchiveResult;",
          "12: use wasmer_registry::Package;",
          "13: use wasmer_registry::PartialWapmConfig;",
          "15: const CURRENT_DATA_VERSION: i32 = 3;",
          "18: #[derive(Debug, Parser)]",
          "19: pub struct Publish {",
          "21:     #[clap(long)]",
          "22:     pub registry: Option<String>,",
          "24:     #[clap(long, name = \"dry-run\")]",
          "25:     pub dry_run: bool,",
          "27:     #[clap(long)]",
          "28:     pub quiet: bool,",
          "30:     #[clap(long)]",
          "31:     pub package_name: Option<String>,",
          "33:     #[clap(long)]",
          "34:     pub version: Option<semver::Version>,",
          "36:     #[clap(long)]",
          "37:     pub token: Option<String>,",
          "39:     #[clap(long)]",
          "40:     pub no_validate: bool,",
          "42:     #[clap(name = \"PACKAGE_PATH\")]",
          "43:     pub package_path: Option<String>,",
          "44: }",
          "46: #[derive(Debug, Error)]",
          "47: enum PublishError {",
          "48:     #[error(\"Cannot publish without a module.\")]",
          "49:     NoModule,",
          "50:     #[error(\"Unable to publish the \\\"{module}\\\" module because \\\"{}\\\" is not a file\", path.display())]",
          "51:     SourceMustBeFile { module: String, path: PathBuf },",
          "52:     #[error(\"Unable to load the bindings for \\\"{module}\\\" because \\\"{}\\\" doesn't exist\", path.display())]",
          "53:     MissingBindings { module: String, path: PathBuf },",
          "54:     #[error(\"Error building package when parsing module \\\"{0}\\\": {1}.\")]",
          "55:     ErrorBuildingPackage(String, io::Error),",
          "56:     #[error(",
          "57:         \"Path \\\"{0}\\\", specified in the manifest as part of the package file system does not exist.\",",
          "58:     )]",
          "59:     MissingManifestFsPath(String),",
          "60:     #[error(\"When processing the package filesystem, found path \\\"{0}\\\" which is not a directory\")]",
          "61:     PackageFileSystemEntryMustBeDirectory(String),",
          "62: }",
          "64: impl Publish {",
          "66:     pub fn execute(&self) -> Result<(), anyhow::Error> {",
          "67:         let mut builder = Builder::new(Vec::new());",
          "69:         let cwd = match self.package_path.as_ref() {",
          "70:             Some(s) => std::env::current_dir()?.join(s),",
          "71:             None => std::env::current_dir()?,",
          "72:         };",
          "74:         let manifest_path_buf = cwd.join(\"wasmer.toml\");",
          "75:         let manifest = std::fs::read_to_string(&manifest_path_buf)",
          "76:             .map_err(|e| anyhow::anyhow!(\"could not find manifest: {e}\"))",
          "77:             .with_context(|| anyhow::anyhow!(\"{}\", manifest_path_buf.display()))?;",
          "78:         let mut manifest = wapm_toml::Manifest::parse(&manifest)?;",
          "79:         manifest.base_directory_path = cwd.clone();",
          "81:         if let Some(package_name) = self.package_name.as_ref() {",
          "82:             manifest.package.name = package_name.to_string();",
          "83:         }",
          "85:         if let Some(version) = self.version.as_ref() {",
          "86:             manifest.package.version = version.clone();",
          "87:         }",
          "90:         let (registry, username) =",
          "91:             wasmer_registry::whoami(self.registry.as_deref(), self.token.as_deref()).with_context(",
          "92:                 || {",
          "93:                     anyhow::anyhow!(",
          "94:                         \"could not find username / registry for registry = {:?}, token = {}\",",
          "95:                         self.registry,",
          "96:                         self.token.as_deref().unwrap_or_default()",
          "97:                     )",
          "98:                 },",
          "99:             )?;",
          "101:         let registry_present =",
          "102:             wasmer_registry::test_if_registry_present(&registry).unwrap_or(false);",
          "104:         if !registry_present {",
          "105:             return Err(anyhow::anyhow!(",
          "106:                 \"registry {} is currently unavailable\",",
          "107:                 registry",
          "108:             ));",
          "109:         }",
          "112:         if !Package::validate_package_name(&manifest.package.name) {",
          "113:             manifest.package.name = format!(\"{username}/{}\", manifest.package.name);",
          "114:         }",
          "117:         if !Package::validate_package_name(&manifest.package.name) {",
          "118:             return Err(anyhow::anyhow!(",
          "119:                 \"Invalid package name {:?}\",",
          "120:                 manifest.package.name",
          "121:             ));",
          "122:         }",
          "124:         if !self.no_validate {",
          "125:             validate::validate_directory(&manifest, &registry, cwd.clone())?;",
          "126:         }",
          "128:         builder.append_path_with_name(&manifest_path_buf, \"wapm.toml\")?;",
          "130:         let manifest_string = toml::to_string(&manifest)?;",
          "132:         let (readme, license) = construct_tar_gz(&mut builder, &manifest, &cwd)?;",
          "134:         builder.finish().ok();",
          "135:         let tar_archive_data = builder.into_inner().map_err(|_| PublishError::NoModule)?;",
          "136:         let archive_name = \"package.tar.gz\".to_string();",
          "137:         let archive_dir = tempfile::TempDir::new()?;",
          "138:         let archive_dir_path: &std::path::Path = archive_dir.as_ref();",
          "139:         fs::create_dir(archive_dir_path.join(\"wapm_package\"))?;",
          "140:         let archive_path = archive_dir_path.join(\"wapm_package\").join(&archive_name);",
          "141:         let mut compressed_archive = fs::File::create(&archive_path).unwrap();",
          "142:         let mut gz_enc = GzEncoder::new(&mut compressed_archive, Compression::best());",
          "144:         gz_enc.write_all(&tar_archive_data).unwrap();",
          "145:         let _compressed_archive = gz_enc.finish().unwrap();",
          "146:         let mut compressed_archive_reader = fs::File::open(&archive_path)?;",
          "148:         let maybe_signature_data = sign_compressed_archive(&mut compressed_archive_reader)?;",
          "149:         let archived_data_size = archive_path.metadata()?.len();",
          "151:         assert!(archive_path.exists());",
          "152:         assert!(archive_path.is_file());",
          "154:         if self.dry_run {",
          "157:             println!(",
          "158:                 \"Successfully published package `{}@{}`\",",
          "159:                 manifest.package.name, manifest.package.version",
          "160:             );",
          "162:             log::info!(",
          "163:                 \"Publish succeeded, but package was not published because it was run in dry-run mode\"",
          "164:             );",
          "166:             return Ok(());",
          "167:         }",
          "169:         wasmer_registry::publish::try_chunked_uploading(",
          "170:             self.registry.clone(),",
          "171:             self.token.clone(),",
          "172:             &manifest.package,",
          "173:             &manifest_string,",
          "174:             &license,",
          "175:             &readme,",
          "176:             &archive_name,",
          "177:             &archive_path,",
          "178:             &maybe_signature_data,",
          "179:             archived_data_size,",
          "180:             self.quiet,",
          "181:         )",
          "182:         .map_err(on_error)",
          "183:     }",
          "184: }",
          "186: fn construct_tar_gz(",
          "187:     builder: &mut tar::Builder<Vec<u8>>,",
          "188:     manifest: &wapm_toml::Manifest,",
          "189:     cwd: &Path,",
          "190: ) -> Result<(Option<String>, Option<String>), anyhow::Error> {",
          "191:     let package = &manifest.package;",
          "192:     let modules = manifest.module.as_ref().ok_or(PublishError::NoModule)?;",
          "194:     let readme = match package.readme.as_ref() {",
          "195:         None => None,",
          "196:         Some(s) => {",
          "197:             let path = append_path_to_tar_gz(builder, &manifest.base_directory_path, s).map_err(",
          "198:                 |(p, e)| PublishError::ErrorBuildingPackage(format!(\"{}\", p.display()), e),",
          "199:             )?;",
          "200:             fs::read_to_string(path).ok()",
          "201:         }",
          "202:     };",
          "204:     let license_file = match package.license_file.as_ref() {",
          "205:         None => None,",
          "206:         Some(s) => {",
          "207:             let path = append_path_to_tar_gz(builder, &manifest.base_directory_path, s).map_err(",
          "208:                 |(p, e)| PublishError::ErrorBuildingPackage(format!(\"{}\", p.display()), e),",
          "209:             )?;",
          "210:             fs::read_to_string(path).ok()",
          "211:         }",
          "212:     };",
          "214:     for module in modules {",
          "215:         append_path_to_tar_gz(builder, &manifest.base_directory_path, &module.source).map_err(",
          "216:             |(normalized_path, _)| PublishError::SourceMustBeFile {",
          "217:                 module: module.name.clone(),",
          "218:                 path: normalized_path,",
          "219:             },",
          "220:         )?;",
          "222:         if let Some(bindings) = &module.bindings {",
          "223:             for path in bindings.referenced_files(&manifest.base_directory_path)? {",
          "224:                 append_path_to_tar_gz(builder, &manifest.base_directory_path, &path).map_err(",
          "225:                     |(normalized_path, _)| PublishError::MissingBindings {",
          "226:                         module: module.name.clone(),",
          "227:                         path: normalized_path,",
          "228:                     },",
          "229:                 )?;",
          "230:             }",
          "231:         }",
          "232:     }",
          "235:     let default = std::collections::HashMap::default();",
          "236:     for (_alias, path) in manifest.fs.as_ref().unwrap_or(&default).iter() {",
          "237:         let normalized_path = normalize_path(cwd, path);",
          "238:         let path_metadata = normalized_path.metadata().map_err(|_| {",
          "239:             PublishError::MissingManifestFsPath(normalized_path.to_string_lossy().to_string())",
          "240:         })?;",
          "241:         if path_metadata.is_dir() {",
          "242:             builder.append_dir_all(path, &normalized_path)",
          "243:         } else {",
          "244:             return Err(PublishError::PackageFileSystemEntryMustBeDirectory(",
          "245:                 path.to_string_lossy().to_string(),",
          "246:             )",
          "247:             .into());",
          "248:         }",
          "249:         .map_err(|_| {",
          "250:             PublishError::MissingManifestFsPath(normalized_path.to_string_lossy().to_string())",
          "251:         })?;",
          "252:     }",
          "254:     Ok((readme, license_file))",
          "255: }",
          "257: fn append_path_to_tar_gz(",
          "258:     builder: &mut tar::Builder<Vec<u8>>,",
          "259:     base_path: &Path,",
          "260:     target_path: &Path,",
          "261: ) -> Result<PathBuf, (PathBuf, io::Error)> {",
          "262:     let normalized_path = normalize_path(base_path, target_path);",
          "263:     normalized_path",
          "264:         .metadata()",
          "265:         .map_err(|e| (normalized_path.clone(), e))?;",
          "266:     builder",
          "267:         .append_path_with_name(&normalized_path, &target_path)",
          "268:         .map_err(|e| (normalized_path.clone(), e))?;",
          "269:     Ok(normalized_path)",
          "270: }",
          "272: fn on_error(e: anyhow::Error) -> anyhow::Error {",
          "273:     #[cfg(feature = \"telemetry\")]",
          "274:     sentry::integrations::anyhow::capture_anyhow(&e);",
          "276:     e",
          "277: }",
          "279: fn normalize_path(cwd: &Path, path: &Path) -> PathBuf {",
          "280:     let mut out = PathBuf::from(cwd);",
          "281:     let mut components = path.components();",
          "282:     if path.is_absolute() {",
          "283:         log::warn!(",
          "284:             \"Interpreting absolute path {} as a relative path\",",
          "285:             path.to_string_lossy()",
          "286:         );",
          "287:         components.next();",
          "288:     }",
          "289:     for comp in components {",
          "290:         out.push(comp);",
          "291:     }",
          "292:     out",
          "293: }",
          "297: pub fn sign_compressed_archive(",
          "298:     compressed_archive: &mut fs::File,",
          "299: ) -> anyhow::Result<SignArchiveResult> {",
          "300:     let key_db = open_db()?;",
          "301:     let personal_key = if let Ok(v) = get_active_personal_key(&key_db) {",
          "302:         v",
          "303:     } else {",
          "304:         return Ok(SignArchiveResult::NoKeyRegistered);",
          "305:     };",
          "306:     let password = rpassword::prompt_password(format!(",
          "307:         \"Please enter your password for the key pair {}:\",",
          "308:         &personal_key.public_key_id",
          "309:     ))",
          "310:     .ok();",
          "311:     let private_key = if let Some(priv_key_location) = personal_key.private_key_location {",
          "312:         match minisign::SecretKey::from_file(&priv_key_location, password) {",
          "313:             Ok(priv_key_data) => priv_key_data,",
          "314:             Err(e) => {",
          "315:                 log::error!(",
          "316:                     \"Could not read private key from location {}: {}\",",
          "317:                     priv_key_location,",
          "318:                     e",
          "319:                 );",
          "320:                 return Err(e.into());",
          "321:             }",
          "322:         }",
          "323:     } else {",
          "325:         log::warn!(\"Active key does not have a private key location registered with it!\");",
          "326:         return Err(anyhow!(\"Cannot sign package, no private key\"));",
          "327:     };",
          "328:     Ok(SignArchiveResult::Ok {",
          "329:         public_key_id: personal_key.public_key_id,",
          "330:         signature: (minisign::sign(",
          "331:             Some(&minisign::PublicKey::from_base64(",
          "332:                 &personal_key.public_key_value,",
          "333:             )?),",
          "334:             &private_key,",
          "335:             compressed_archive,",
          "336:             None,",
          "337:             None,",
          "338:         )?",
          "339:         .to_string()),",
          "340:     })",
          "341: }",
          "344: pub fn open_db() -> anyhow::Result<Connection> {",
          "345:     let db_path =",
          "346:         PartialWapmConfig::get_database_file_path().map_err(|e| anyhow::anyhow!(\"{e}\"))?;",
          "347:     let mut conn = Connection::open_with_flags(",
          "348:         db_path,",
          "349:         OpenFlags::SQLITE_OPEN_CREATE",
          "350:             | OpenFlags::SQLITE_OPEN_READ_WRITE",
          "351:             | OpenFlags::SQLITE_OPEN_FULL_MUTEX,",
          "352:     )?;",
          "354:     apply_migrations(&mut conn)?;",
          "355:     Ok(conn)",
          "356: }",
          "359: pub fn apply_migrations(conn: &mut Connection) -> anyhow::Result<()> {",
          "360:     let user_version = conn.pragma_query_value(None, \"user_version\", |val| val.get(0))?;",
          "361:     for data_version in user_version..CURRENT_DATA_VERSION {",
          "362:         log::debug!(\"Applying migration {}\", data_version);",
          "363:         apply_migration(conn, data_version)?;",
          "364:     }",
          "365:     Ok(())",
          "366: }",
          "368: #[derive(Debug, Error)]",
          "369: enum MigrationError {",
          "370:     #[error(",
          "371:         \"Critical internal error: the data version {0} is not handleded; current data version: {1}\"",
          "372:     )]",
          "373:     MigrationNumberDoesNotExist(i32, i32),",
          "374:     #[error(\"Critical internal error: failed to commit trasaction migrating to data version {0}\")]",
          "375:     CommitFailed(i32),",
          "376:     #[error(\"Critical internal error: transaction failed on migration number {0}: {1}\")]",
          "377:     TransactionFailed(i32, String),",
          "378: }",
          "382: fn apply_migration(conn: &mut Connection, migration_number: i32) -> Result<(), MigrationError> {",
          "383:     let tx = conn",
          "384:         .transaction_with_behavior(TransactionBehavior::Immediate)",
          "385:         .map_err(|e| MigrationError::TransactionFailed(migration_number, format!(\"{}\", e)))?;",
          "387:     let migrations = &[",
          "388:         (0, include_str!(\"../../sql/migrations/0000.sql\")),",
          "389:         (1, include_str!(\"../../sql/migrations/0001.sql\")),",
          "390:         (2, include_str!(\"../../sql/migrations/0002.sql\")),",
          "391:     ];",
          "393:     let migration_to_apply = migrations",
          "394:         .iter()",
          "395:         .find_map(|(number, sql)| {",
          "396:             if *number == migration_number {",
          "397:                 Some(sql)",
          "398:             } else {",
          "399:                 None",
          "400:             }",
          "401:         })",
          "402:         .ok_or({",
          "403:             MigrationError::MigrationNumberDoesNotExist(migration_number, CURRENT_DATA_VERSION)",
          "404:         })?;",
          "406:     tx.execute_batch(migration_to_apply)",
          "407:         .map_err(|e| MigrationError::TransactionFailed(migration_number, format!(\"{}\", e)))?;",
          "409:     tx.pragma_update(None, \"user_version\", &(migration_number + 1))",
          "410:         .map_err(|e| MigrationError::TransactionFailed(migration_number, format!(\"{}\", e)))?;",
          "411:     tx.commit()",
          "412:         .map_err(|_| MigrationError::CommitFailed(migration_number))",
          "413: }",
          "416: #[derive(Debug)]",
          "417: pub struct PersonalKey {",
          "419:     pub active: bool,",
          "421:     pub public_key_id: String,",
          "423:     pub public_key_value: String,",
          "425:     pub private_key_location: Option<String>,",
          "427:     pub key_type_identifier: String,",
          "429:     pub date_created: OffsetDateTime,",
          "430: }",
          "432: fn get_active_personal_key(conn: &Connection) -> anyhow::Result<PersonalKey> {",
          "433:     let mut stmt = conn.prepare(",
          "434:         \"SELECT active, public_key_value, private_key_location, date_added, key_type_identifier, public_key_id FROM personal_keys",
          "435:          where active = 1\",",
          "436:     )?;",
          "438:     let result = stmt",
          "439:         .query_map(params![], |row| {",
          "440:             Ok(PersonalKey {",
          "441:                 active: row.get(0)?,",
          "442:                 public_key_value: row.get(1)?,",
          "443:                 private_key_location: row.get(2)?,",
          "444:                 date_created: {",
          "445:                     use time::format_description::well_known::Rfc3339;",
          "446:                     let time_str: String = row.get(3)?;",
          "447:                     OffsetDateTime::parse(&time_str, &Rfc3339)",
          "448:                         .unwrap_or_else(|_| panic!(\"Failed to parse time string {}\", &time_str))",
          "449:                 },",
          "450:                 key_type_identifier: row.get(4)?,",
          "451:                 public_key_id: row.get(5)?,",
          "452:             })",
          "453:         })?",
          "454:         .next();",
          "456:     if let Some(res) = result {",
          "457:         Ok(res?)",
          "458:     } else {",
          "459:         Err(anyhow!(\"No active key found\"))",
          "460:     }",
          "461: }",
          "463: mod interfaces {",
          "465:     use rusqlite::{params, Connection, TransactionBehavior};",
          "467:     pub const WASM_INTERFACE_EXISTENCE_CHECK: &str =",
          "468:         include_str!(\"./sql/wasm_interface_existence_check.sql\");",
          "469:     pub const INSERT_WASM_INTERFACE: &str = include_str!(\"./sql/insert_interface.sql\");",
          "470:     pub const GET_WASM_INTERFACE: &str = include_str!(\"./sql/get_interface.sql\");",
          "472:     pub fn interface_exists(",
          "473:         conn: &mut Connection,",
          "474:         interface_name: &str,",
          "475:         version: &str,",
          "476:     ) -> anyhow::Result<bool> {",
          "477:         let mut stmt = conn.prepare(WASM_INTERFACE_EXISTENCE_CHECK)?;",
          "478:         Ok(stmt.exists(params![interface_name, version])?)",
          "479:     }",
          "481:     pub fn load_interface_from_db(",
          "482:         conn: &mut Connection,",
          "483:         interface_name: &str,",
          "484:         version: &str,",
          "485:     ) -> anyhow::Result<wasmer_wasm_interface::Interface> {",
          "486:         let mut stmt = conn.prepare(GET_WASM_INTERFACE)?;",
          "487:         let interface_string: String =",
          "488:             stmt.query_row(params![interface_name, version], |row| row.get(0))?;",
          "490:         wasmer_wasm_interface::parser::parse_interface(&interface_string).map_err(|e| {",
          "491:             anyhow!(",
          "492:                 \"Failed to parse interface {} version {} in database: {}\",",
          "493:                 interface_name,",
          "494:                 version,",
          "495:                 e",
          "496:             )",
          "497:         })",
          "498:     }",
          "500:     pub fn import_interface(",
          "501:         conn: &mut Connection,",
          "502:         interface_name: &str,",
          "503:         version: &str,",
          "504:         content: &str,",
          "505:     ) -> anyhow::Result<()> {",
          "507:         {",
          "508:             let mut key_check = conn.prepare(WASM_INTERFACE_EXISTENCE_CHECK)?;",
          "509:             let result = key_check.exists(params![interface_name, version])?;",
          "511:             if result {",
          "512:                 return Err(anyhow!(",
          "513:                     \"Interface {}, version {} already exists\",",
          "514:                     interface_name,",
          "515:                     version",
          "516:                 ));",
          "517:             }",
          "518:         }",
          "520:         let tx = conn.transaction_with_behavior(TransactionBehavior::Immediate)?;",
          "521:         let time_string = get_current_time_in_format().expect(\"Could not get current time\");",
          "523:         log::debug!(\"Adding interface {:?} {:?}\", interface_name, version);",
          "524:         tx.execute(",
          "525:             INSERT_WASM_INTERFACE,",
          "526:             params![interface_name, version, time_string, content],",
          "527:         )?;",
          "529:         tx.commit()?;",
          "530:         Ok(())",
          "531:     }",
          "534:     pub fn get_current_time_in_format() -> Option<String> {",
          "535:         use time::format_description::well_known::Rfc3339;",
          "536:         let cur_time = time::OffsetDateTime::now_utc();",
          "537:         cur_time.format(&Rfc3339).ok()",
          "538:     }",
          "539: }",
          "541: mod validate {",
          "542:     use super::interfaces;",
          "543:     use std::{",
          "544:         fs,",
          "545:         io::Read,",
          "546:         path::{Path, PathBuf},",
          "547:     };",
          "548:     use thiserror::Error;",
          "549:     use wasmer_registry::interface::InterfaceFromServer;",
          "550:     use wasmer_wasm_interface::{validate, Interface};",
          "552:     pub fn validate_directory(",
          "553:         manifest: &wapm_toml::Manifest,",
          "554:         registry: &str,",
          "555:         pkg_path: PathBuf,",
          "556:     ) -> anyhow::Result<()> {",
          "558:         if let Some(modules) = manifest.module.as_ref() {",
          "559:             for module in modules.iter() {",
          "560:                 let source_path = if module.source.is_relative() {",
          "561:                     manifest.base_directory_path.join(&module.source)",
          "562:                 } else {",
          "563:                     module.source.clone()",
          "564:                 };",
          "565:                 let source_path_string = source_path.to_string_lossy().to_string();",
          "566:                 let mut wasm_file =",
          "567:                     fs::File::open(&source_path).map_err(|_| ValidationError::MissingFile {",
          "568:                         file: source_path_string.clone(),",
          "569:                     })?;",
          "570:                 let mut wasm_buffer = Vec::new();",
          "571:                 wasm_file.read_to_end(&mut wasm_buffer).map_err(|err| {",
          "572:                     ValidationError::MiscCannotRead {",
          "573:                         file: source_path_string.clone(),",
          "574:                         error: format!(\"{}\", err),",
          "575:                     }",
          "576:                 })?;",
          "578:                 if let Some(bindings) = &module.bindings {",
          "579:                     validate_bindings(bindings, &manifest.base_directory_path)?;",
          "580:                 }",
          "583:                 if module.interfaces.is_none() {",
          "584:                     return validate_wasm_and_report_errors_old(",
          "585:                         &wasm_buffer[..],",
          "586:                         source_path_string,",
          "587:                     );",
          "588:                 }",
          "590:                 let mut conn = super::open_db()?;",
          "591:                 let mut interface: Interface = Default::default();",
          "592:                 for (interface_name, interface_version) in",
          "593:                     module.interfaces.clone().unwrap_or_default().into_iter()",
          "594:                 {",
          "595:                     if !interfaces::interface_exists(",
          "596:                         &mut conn,",
          "597:                         &interface_name,",
          "598:                         &interface_version,",
          "599:                     )? {",
          "601:                         let interface_data_from_server = InterfaceFromServer::get(",
          "602:                             registry,",
          "603:                             interface_name.clone(),",
          "604:                             interface_version.clone(),",
          "605:                         )?;",
          "606:                         interfaces::import_interface(",
          "607:                             &mut conn,",
          "608:                             &interface_name,",
          "609:                             &interface_version,",
          "610:                             &interface_data_from_server.content,",
          "611:                         )?;",
          "612:                     }",
          "613:                     let sub_interface = interfaces::load_interface_from_db(",
          "614:                         &mut conn,",
          "615:                         &interface_name,",
          "616:                         &interface_version,",
          "617:                     )?;",
          "618:                     interface = interface.merge(sub_interface).map_err(|e| {",
          "619:                         anyhow!(\"Failed to merge interface {}: {}\", &interface_name, e)",
          "620:                     })?;",
          "621:                 }",
          "622:                 validate::validate_wasm_and_report_errors(&wasm_buffer, &interface).map_err(",
          "623:                     |e| ValidationError::InvalidWasm {",
          "624:                         file: source_path_string,",
          "625:                         error: format!(\"{:?}\", e),",
          "626:                     },",
          "627:                 )?;",
          "628:             }",
          "629:         }",
          "630:         log::debug!(\"package at path {:#?} validated\", &pkg_path);",
          "632:         Ok(())",
          "633:     }",
          "635:     fn validate_bindings(",
          "636:         bindings: &wapm_toml::Bindings,",
          "637:         base_directory_path: &Path,",
          "638:     ) -> Result<(), ValidationError> {",
          "640:         let _ = bindings.referenced_files(base_directory_path)?;",
          "642:         Ok(())",
          "643:     }",
          "645:     #[derive(Debug, Error)]",
          "646:     pub enum ValidationError {",
          "647:         #[error(\"WASM file \\\"{file}\\\" detected as invalid because {error}\")]",
          "648:         InvalidWasm { file: String, error: String },",
          "649:         #[error(\"Could not find file {file}\")]",
          "650:         MissingFile { file: String },",
          "651:         #[error(\"Failed to read file {file}; {error}\")]",
          "652:         MiscCannotRead { file: String, error: String },",
          "653:         #[error(transparent)]",
          "654:         Imports(#[from] wapm_toml::ImportsError),",
          "655:     }",
          "658:     pub fn validate_wasm_and_report_errors_old(",
          "659:         wasm: &[u8],",
          "660:         file_name: String,",
          "661:     ) -> anyhow::Result<()> {",
          "662:         use wasmparser::WasmDecoder;",
          "663:         let mut parser = wasmparser::ValidatingParser::new(wasm, None);",
          "664:         loop {",
          "665:             let state = parser.read();",
          "666:             match state {",
          "667:                 wasmparser::ParserState::EndWasm => return Ok(()),",
          "668:                 wasmparser::ParserState::Error(e) => {",
          "669:                     return Err(ValidationError::InvalidWasm {",
          "670:                         file: file_name,",
          "671:                         error: format!(\"{}\", e),",
          "672:                     }",
          "673:                     .into());",
          "674:                 }",
          "675:                 _ => {}",
          "676:             }",
          "677:         }",
          "678:     }",
          "679: }",
          "",
          "---------------"
        ],
        "lib/cli/src/commands/sql/get_interface.sql||lib/cli/src/commands/sql/get_interface.sql": [
          "File: lib/cli/src/commands/sql/get_interface.sql -> lib/cli/src/commands/sql/get_interface.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: SELECT content",
          "2: FROM wasm_interfaces",
          "3: WHERE interface_name = (?1)",
          "4:   AND version = (?2)",
          "",
          "---------------"
        ],
        "lib/cli/src/commands/sql/insert_interface.sql||lib/cli/src/commands/sql/insert_interface.sql": [
          "File: lib/cli/src/commands/sql/insert_interface.sql -> lib/cli/src/commands/sql/insert_interface.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: INSERT INTO wasm_interfaces",
          "2: (interface_name, version, date_added, content)",
          "3: VALUES (?1, ?2, ?3, ?4)",
          "",
          "---------------"
        ],
        "lib/cli/src/commands/sql/wasm_interface_existence_check.sql||lib/cli/src/commands/sql/wasm_interface_existence_check.sql": [
          "File: lib/cli/src/commands/sql/wasm_interface_existence_check.sql -> lib/cli/src/commands/sql/wasm_interface_existence_check.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: SELECT 1",
          "2: FROM wasm_interfaces",
          "3: WHERE interface_name = (?1)",
          "4:    AND version = (?2)",
          "5: LIMIT 1",
          "",
          "---------------"
        ],
        "lib/cli/src/commands/whoami.rs||lib/cli/src/commands/whoami.rs": [
          "File: lib/cli/src/commands/whoami.rs -> lib/cli/src/commands/whoami.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: impl Whoami {",
          "13:     pub fn execute(&self) -> Result<(), anyhow::Error> {",
          "15:         println!(\"logged into registry {registry:?} as user {username:?}\");",
          "16:         Ok(())",
          "17:     }",
          "",
          "[Removed Lines]",
          "14:         let (registry, username) = wasmer_registry::whoami(self.registry.as_deref())?;",
          "",
          "[Added Lines]",
          "14:         let (registry, username) = wasmer_registry::whoami(self.registry.as_deref(), None)?;",
          "",
          "---------------"
        ],
        "lib/registry/graphql/queries/get_interface_version.graphql||lib/registry/graphql/queries/get_interface_version.graphql": [
          "File: lib/registry/graphql/queries/get_interface_version.graphql -> lib/registry/graphql/queries/get_interface_version.graphql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: query GetInterfaceVersionQuery ($name: String!, $version: String!) {",
          "2:   interface: getInterfaceVersion(name: $name, version: $version) {",
          "3:     version,",
          "4:     content,",
          "5:     interface {",
          "6:       name,",
          "7:     }",
          "8:   }",
          "9: }",
          "",
          "---------------"
        ],
        "lib/registry/graphql/queries/get_signed_url.graphql||lib/registry/graphql/queries/get_signed_url.graphql": [
          "File: lib/registry/graphql/queries/get_signed_url.graphql -> lib/registry/graphql/queries/get_signed_url.graphql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: query GetSignedUrl ($name:String!, $version:String!,$expiresAfterSeconds:Int) {",
          "2:     url: getSignedUrlForPackageUpload(name:$name, version:$version,expiresAfterSeconds:$expiresAfterSeconds) {",
          "3:         url",
          "4:     }",
          "5: }",
          "",
          "---------------"
        ],
        "lib/registry/graphql/queries/publish_package_chunked.graphql||lib/registry/graphql/queries/publish_package_chunked.graphql": [
          "File: lib/registry/graphql/queries/publish_package_chunked.graphql -> lib/registry/graphql/queries/publish_package_chunked.graphql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: mutation PublishPackageMutationChunked($name: String!, $version: String!, $description: String!, $manifest: String!, $license: String, $licenseFile: String, $readme: String, $fileName:String, $repository:String, $homepage:String, $signature: InputSignature, $signedUrl:String) {",
          "2:   publishPackage(input: {",
          "3:     name: $name,",
          "4:     version: $version,",
          "5:     description: $description,",
          "6:     manifest: $manifest,",
          "7:     license: $license,",
          "8:     licenseFile: $licenseFile,",
          "9:     readme: $readme,",
          "10:     file: $fileName,",
          "11:     signedUrl: $signedUrl,",
          "12:     repository: $repository,",
          "13:     homepage: $homepage,",
          "14:     signature: $signature,",
          "15:     clientMutationId: \"\"",
          "16:   }) {",
          "17:     success",
          "18:     packageVersion {",
          "19:       version",
          "20:     }",
          "21:   }",
          "22: }",
          "",
          "---------------"
        ],
        "lib/registry/src/config.rs||lib/registry/src/config.rs": [
          "File: lib/registry/src/config.rs -> lib/registry/src/config.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use std::collections::BTreeMap;",
          "5: use std::path::{Path, PathBuf};",
          "7: #[derive(Deserialize, Default, Serialize, Debug, PartialEq, Eq)]",
          "8: pub struct PartialWapmConfig {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: pub static GLOBAL_CONFIG_DATABASE_FILE_NAME: &str = \"wapm.sqlite\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:     pub fn get_file_location() -> Result<PathBuf, String> {",
          "304:         Ok(Self::get_folder()?.join(crate::GLOBAL_CONFIG_FILE_NAME))",
          "305:     }",
          "306: }",
          "308: #[derive(GraphQLQuery)]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:     pub fn get_database_file_path(#[cfg(test)] test_name: &str) -> Result<PathBuf, String> {",
          "310:         #[cfg(test)]",
          "311:         let f = Self::get_folder(test_name);",
          "312:         #[cfg(not(test))]",
          "313:         let f = Self::get_folder();",
          "315:         f.map(|config_folder| config_folder.join(GLOBAL_CONFIG_DATABASE_FILE_NAME))",
          "316:     }",
          "",
          "---------------"
        ],
        "lib/registry/src/graphql.rs||lib/registry/src/graphql.rs": [
          "File: lib/registry/src/graphql.rs -> lib/registry/src/graphql.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     }",
          "100: }",
          "102: pub fn whoami_distro() -> String {",
          "103:     whoami::distro().to_lowercase()",
          "104: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: #[derive(GraphQLQuery)]",
          "103: #[graphql(",
          "104:     schema_path = \"graphql/schema.graphql\",",
          "105:     query_path = \"graphql/queries/get_package_version.graphql\",",
          "106:     response_derives = \"Debug\"",
          "107: )]",
          "108: pub(crate) struct GetPackageVersionQuery;",
          "110: #[derive(GraphQLQuery)]",
          "111: #[graphql(",
          "112:     schema_path = \"graphql/schema.graphql\",",
          "113:     query_path = \"graphql/queries/get_package_by_command.graphql\",",
          "114:     response_derives = \"Debug\"",
          "115: )]",
          "116: pub(crate) struct GetPackageByCommandQuery;",
          "118: #[derive(GraphQLQuery)]",
          "119: #[graphql(",
          "120:     schema_path = \"graphql/schema.graphql\",",
          "121:     query_path = \"graphql/queries/test_if_registry_present.graphql\",",
          "122:     response_derives = \"Debug\"",
          "123: )]",
          "124: pub(crate) struct TestIfRegistryPresent;",
          "126: #[derive(GraphQLQuery)]",
          "127: #[graphql(",
          "128:     schema_path = \"graphql/schema.graphql\",",
          "129:     query_path = \"graphql/queries/get_bindings.graphql\",",
          "130:     response_derives = \"Debug,Clone,PartialEq,Eq\"",
          "131: )]",
          "132: pub(crate) struct GetBindingsQuery;",
          "134: #[derive(GraphQLQuery)]",
          "135: #[graphql(",
          "136:     schema_path = \"graphql/schema.graphql\",",
          "137:     query_path = \"graphql/queries/publish_package_chunked.graphql\",",
          "138:     response_derives = \"Debug\"",
          "139: )]",
          "140: pub(crate) struct PublishPackageMutationChunked;",
          "142: #[derive(GraphQLQuery)]",
          "143: #[graphql(",
          "144:     schema_path = \"graphql/schema.graphql\",",
          "145:     query_path = \"graphql/queries/get_signed_url.graphql\",",
          "146:     response_derives = \"Debug, Clone\"",
          "147: )]",
          "148: pub(crate) struct GetSignedUrl;",
          "150: #[cfg(target_os = \"wasi\")]",
          "151: pub fn whoami_distro() -> String {",
          "152:     whoami::os().to_lowercase()",
          "153: }",
          "155: #[cfg(not(target_os = \"wasi\"))]",
          "",
          "---------------"
        ],
        "lib/registry/src/interface.rs||lib/registry/src/interface.rs": [
          "File: lib/registry/src/interface.rs -> lib/registry/src/interface.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #![cfg_attr(",
          "2:     not(feature = \"full\"),",
          "3:     allow(dead_code, unused_imports, unused_variables)",
          "4: )]",
          "5: use crate::graphql::execute_query;",
          "6: use graphql_client::*;",
          "8: #[derive(GraphQLQuery)]",
          "9: #[graphql(",
          "10:     schema_path = \"graphql/schema.graphql\",",
          "11:     query_path = \"graphql/queries/get_interface_version.graphql\",",
          "12:     response_derives = \"Debug\"",
          "13: )]",
          "14: struct GetInterfaceVersionQuery;",
          "16: #[derive(Debug)]",
          "17: pub struct InterfaceFromServer {",
          "18:     pub name: String,",
          "19:     pub version: String,",
          "20:     pub content: String,",
          "21: }",
          "23: impl InterfaceFromServer {",
          "24:     fn get_response(",
          "25:         registry: &str,",
          "26:         name: String,",
          "27:         version: String,",
          "28:     ) -> anyhow::Result<get_interface_version_query::ResponseData> {",
          "29:         let q = GetInterfaceVersionQuery::build_query(get_interface_version_query::Variables {",
          "30:             name,",
          "31:             version,",
          "32:         });",
          "33:         execute_query(registry, \"\", &q)",
          "34:     }",
          "36:     pub fn get(registry: &str, name: String, version: String) -> anyhow::Result<Self> {",
          "37:         let response = Self::get_response(registry, name, version)?;",
          "38:         let response_val = response",
          "39:             .interface",
          "40:             .ok_or_else(|| anyhow::anyhow!(\"Error downloading Interface from the server\"))?;",
          "41:         Ok(Self {",
          "42:             name: response_val.interface.name,",
          "43:             version: response_val.version,",
          "44:             content: response_val.content,",
          "45:         })",
          "46:     }",
          "47: }",
          "",
          "---------------"
        ],
        "lib/registry/src/lib.rs||lib/registry/src/lib.rs": [
          "File: lib/registry/src/lib.rs -> lib/registry/src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: pub mod config;",
          "22: pub mod graphql;",
          "23: pub mod login;",
          "24: pub mod package;",
          "25: pub mod queries;",
          "26: pub mod utils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: pub mod interface;",
          "26: pub mod publish;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:         let path = self.get_path()?;",
          "95:         #[cfg(test)]",
          "96:         let path = self.get_path(test_name)?;",
          "98:         let toml = std::fs::read_to_string(&toml_path)",
          "99:             .map_err(|e| format!(\"error reading {}: {e}\", toml_path.display()))?;",
          "100:         let toml_parsed = toml::from_str::<wapm_toml::Manifest>(&toml)",
          "",
          "[Removed Lines]",
          "97:         let toml_path = path.join(\"wapm.toml\");",
          "",
          "[Added Lines]",
          "99:         let toml_path = path.join(GLOBAL_CONFIG_FILE_NAME);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:     package_dir: &PathBuf,",
          "114:     command: Option<&str>,",
          "115: ) -> Result<(wapm_toml::Manifest, PathBuf), anyhow::Error> {",
          "119:     let wapm_toml = toml::from_str::<wapm_toml::Manifest>(&wapm_toml)",
          "120:         .map_err(|e| anyhow::anyhow!(\"Could not parse toml for {package_dir:?}: {e}\"))?;",
          "",
          "[Removed Lines]",
          "116:     let wapm_toml = std::fs::read_to_string(package_dir.join(\"wapm.toml\"))",
          "117:         .map_err(|_| anyhow::anyhow!(\"Package {package_dir:?} has no wapm.toml\"))?;",
          "",
          "[Added Lines]",
          "118:     let wapm_toml = std::fs::read_to_string(package_dir.join(GLOBAL_CONFIG_FILE_NAME))",
          "119:         .or_else(|_| std::fs::read_to_string(package_dir.join(\"wasmer.toml\")))",
          "120:         .map_err(|_| anyhow::anyhow!(\"Package {package_dir:?} has no {GLOBAL_CONFIG_FILE_NAME}\"))?;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:         .find(|m| m.name == module_name)",
          "151:         .ok_or_else(|| {",
          "152:             anyhow::anyhow!(",
          "154:             )",
          "155:         })?;",
          "",
          "[Removed Lines]",
          "153:                 \"Cannot run {name}@{version}: module {module_name} not found in wapm.toml\"",
          "",
          "[Added Lines]",
          "156:                 \"Cannot run {name}@{version}: module {module_name} not found in {GLOBAL_CONFIG_FILE_NAME}\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "602: pub fn whoami(",
          "603:     #[cfg(test)] test_name: &str,",
          "604:     registry: Option<&str>,",
          "605: ) -> Result<(String, String), anyhow::Error> {",
          "606:     use crate::queries::{who_am_i_query, WhoAmIQuery};",
          "607:     use graphql_client::GraphQLQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "608:     token: Option<&str>,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "620:         None => config.registry.get_current_registry(),",
          "621:     };",
          "626:         .ok_or_else(|| anyhow::anyhow!(\"not logged into registry {:?}\", registry))?;",
          "628:     let q = WhoAmIQuery::build_query(who_am_i_query::Variables {});",
          "",
          "[Removed Lines]",
          "623:     let login_token = config",
          "624:         .registry",
          "625:         .get_login_token_for_registry(&registry)",
          "",
          "[Added Lines]",
          "627:     let login_token = token",
          "628:         .map(|s| s.to_string())",
          "629:         .or_else(|| config.registry.get_login_token_for_registry(&registry))",
          "",
          "---------------"
        ],
        "lib/registry/src/package.rs||lib/registry/src/package.rs": [
          "File: lib/registry/src/package.rs -> lib/registry/src/package.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use crate::PartialWapmConfig;",
          "2: use std::path::PathBuf;",
          "3: use std::{fmt, str::FromStr};",
          "4: use url::Url;",
          "6: #[derive(Debug, Default, Clone, PartialEq, Eq, PartialOrd, Ord)]",
          "7: pub struct Package {",
          "8:     pub namespace: String,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: use regex::Regex;",
          "7: const REGEX_FULL: &str = r#\"^([a-zA-Z0-9\\-_]+)/([a-zA-Z0-9\\-_]+)(@([a-zA-Z0-9\\.\\-_]+*))?$\"#;",
          "8: const REGEX_PACKAGE: &str = r#\"^([a-zA-Z0-9\\-_]+)/([a-zA-Z0-9\\-_]+)$\"#;",
          "10: lazy_static::lazy_static! {",
          "11:     static ref FULL_REGEX: Regex = regex::Regex::new(REGEX_FULL).unwrap();",
          "12:     static ref PACKAGE_REGEX: Regex = regex::Regex::new(REGEX_PACKAGE).unwrap();",
          "13: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:             None => Ok(checkouts_dir.join(&hash)),",
          "167:         }",
          "168:     }",
          "169: }",
          "171: impl FromStr for Package {",
          "172:     type Err = anyhow::Error;",
          "174:     fn from_str(s: &str) -> Result<Self, Self::Err> {",
          "180:             .captures(s.trim())",
          "181:             .map(|c| {",
          "182:                 c.iter()",
          "",
          "[Removed Lines]",
          "175:         let regex =",
          "176:             regex::Regex::new(r#\"^([a-zA-Z0-9\\-_]+)/([a-zA-Z0-9\\-_]+)(@([a-zA-Z0-9\\.\\-_]+*))?$\"#)",
          "177:                 .unwrap();",
          "179:         let captures = regex",
          "",
          "[Added Lines]",
          "179:     pub fn validate_package_name(s: &str) -> bool {",
          "180:         PACKAGE_REGEX.is_match(s)",
          "181:     }",
          "188:         let captures = FULL_REGEX",
          "",
          "---------------"
        ],
        "lib/registry/src/publish.rs||lib/registry/src/publish.rs": [
          "File: lib/registry/src/publish.rs -> lib/registry/src/publish.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use crate::graphql::{execute_query_modifier_inner, get_signed_url, GetSignedUrl};",
          "2: use crate::graphql::{publish_package_mutation_chunked, PublishPackageMutationChunked};",
          "3: use crate::{format_graphql, PartialWapmConfig};",
          "4: use console::{style, Emoji};",
          "5: use graphql_client::GraphQLQuery;",
          "6: use indicatif::{ProgressBar, ProgressState, ProgressStyle};",
          "8: use std::collections::BTreeMap;",
          "9: use std::fmt::Write;",
          "10: use std::io::BufRead;",
          "11: use std::path::PathBuf;",
          "13: static UPLOAD: Emoji<'_, '_> = Emoji(\"\u2b06\ufe0f  \", \"\");",
          "14: static PACKAGE: Emoji<'_, '_> = Emoji(\"\ud83d\udce6  \", \"\");",
          "16: #[derive(Debug, Clone)]",
          "17: pub enum SignArchiveResult {",
          "18:     Ok {",
          "19:         public_key_id: String,",
          "20:         signature: String,",
          "21:     },",
          "22:     NoKeyRegistered,",
          "23: }",
          "25: #[allow(clippy::too_many_arguments)]",
          "26: pub fn try_chunked_uploading(",
          "27:     registry: Option<String>,",
          "28:     token: Option<String>,",
          "29:     package: &wapm_toml::Package,",
          "30:     manifest_string: &String,",
          "31:     license_file: &Option<String>,",
          "32:     readme: &Option<String>,",
          "33:     archive_name: &String,",
          "34:     archive_path: &PathBuf,",
          "35:     maybe_signature_data: &SignArchiveResult,",
          "36:     archived_data_size: u64,",
          "37:     quiet: bool,",
          "38: ) -> Result<(), anyhow::Error> {",
          "39:     let registry = match registry.as_ref() {",
          "40:         Some(s) => format_graphql(s),",
          "41:         None => {",
          "42:             #[cfg(not(test))]",
          "43:             let config = PartialWapmConfig::from_file();",
          "44:             #[cfg(test)]",
          "45:             let config = PartialWapmConfig::from_file(\"publish\");",
          "47:             config",
          "48:                 .map_err(|e| anyhow::anyhow!(\"{e}\"))?",
          "49:                 .registry",
          "50:                 .get_current_registry()",
          "51:         }",
          "52:     };",
          "54:     let token = match token.as_ref() {",
          "55:         Some(s) => s.to_string(),",
          "56:         None => {",
          "57:             #[cfg(not(test))]",
          "58:             let config = PartialWapmConfig::from_file();",
          "59:             #[cfg(test)]",
          "60:             let config = PartialWapmConfig::from_file(\"publish\");",
          "62:             config",
          "63:                 .map_err(|e| anyhow::anyhow!(\"{e}\"))?",
          "64:                 .registry",
          "65:                 .get_login_token_for_registry(&registry)",
          "66:                 .ok_or_else(|| {",
          "67:                     anyhow::anyhow!(\"cannot publish package: not logged into registry {registry:?}\")",
          "68:                 })?",
          "69:         }",
          "70:     };",
          "72:     let maybe_signature_data = match maybe_signature_data {",
          "73:         SignArchiveResult::Ok {",
          "74:             public_key_id,",
          "75:             signature,",
          "76:         } => {",
          "77:             log::info!(",
          "78:                 \"Package successfully signed with public key: \\\"{}\\\"!\",",
          "79:                 &public_key_id",
          "80:             );",
          "81:             Some(publish_package_mutation_chunked::InputSignature {",
          "82:                 public_key_key_id: public_key_id.to_string(),",
          "83:                 data: signature.to_string(),",
          "84:             })",
          "85:         }",
          "86:         SignArchiveResult::NoKeyRegistered => {",
          "89:             None",
          "90:         }",
          "91:     };",
          "93:     if !quiet {",
          "94:         println!(\"{} {} Uploading...\", style(\"[1/2]\").bold().dim(), UPLOAD);",
          "95:     }",
          "97:     let get_google_signed_url = GetSignedUrl::build_query(get_signed_url::Variables {",
          "98:         name: package.name.to_string(),",
          "99:         version: package.version.to_string(),",
          "100:         expires_after_seconds: Some(60 * 30),",
          "101:     });",
          "103:     let _response: get_signed_url::ResponseData =",
          "104:         execute_query_modifier_inner(&registry, &token, &get_google_signed_url, None, |f| f)?;",
          "106:     let url = _response.url.ok_or_else(|| {",
          "107:         anyhow::anyhow!(",
          "108:             \"could not get signed url for package {}@{}\",",
          "109:             package.name,",
          "110:             package.version",
          "111:         )",
          "112:     })?;",
          "114:     let signed_url = url.url;",
          "115:     let url = url::Url::parse(&signed_url).unwrap();",
          "116:     let client = reqwest::blocking::Client::builder()",
          "117:         .default_headers(reqwest::header::HeaderMap::default())",
          "118:         .build()",
          "119:         .unwrap();",
          "121:     let res = client",
          "122:         .post(url)",
          "123:         .header(reqwest::header::CONTENT_LENGTH, \"0\")",
          "124:         .header(reqwest::header::CONTENT_TYPE, \"application/octet-stream\")",
          "125:         .header(\"x-goog-resumable\", \"start\");",
          "127:     let result = res.send().unwrap();",
          "129:     if result.status() != reqwest::StatusCode::from_u16(201).unwrap() {",
          "130:         return Err(anyhow::anyhow!(",
          "131:             \"Uploading package failed: got HTTP {:?} when uploading\",",
          "132:             result.status()",
          "133:         ));",
          "134:     }",
          "136:     let headers = result",
          "137:         .headers()",
          "138:         .into_iter()",
          "139:         .filter_map(|(k, v)| {",
          "140:             let k = k.to_string();",
          "141:             let v = v.to_str().ok()?.to_string();",
          "142:             Some((k.to_lowercase(), v))",
          "143:         })",
          "144:         .collect::<BTreeMap<_, _>>();",
          "146:     let session_uri = headers.get(\"location\").unwrap().clone();",
          "148:     let total = archived_data_size;",
          "151:     let mut file = std::fs::OpenOptions::new()",
          "152:         .read(true)",
          "153:         .open(archive_path)",
          "154:         .map_err(|e| anyhow::anyhow!(\"cannot open archive {}: {e}\", archive_path.display()))?;",
          "156:     let pb = ProgressBar::new(archived_data_size);",
          "157:     pb.set_style(ProgressStyle::with_template(\"{spinner:.green} [{elapsed_precise}] [{wide_bar:.cyan/blue}] {bytes}/{total_bytes} ({eta})\")",
          "158:     .unwrap()",
          "159:     .with_key(\"eta\", |state: &ProgressState, w: &mut dyn Write| {",
          "160:         write!(w, \"{:.1}s\", state.eta().as_secs_f64()).unwrap()",
          "161:     })",
          "162:     .progress_chars(\"#>-\"));",
          "164:     let chunk_size = 1_048_576; // 1MB - 315s / 100MB",
          "165:     let mut file_pointer = 0;",
          "167:     let mut reader = std::io::BufReader::with_capacity(chunk_size, &mut file);",
          "169:     let client = reqwest::blocking::Client::builder()",
          "170:         .default_headers(reqwest::header::HeaderMap::default())",
          "171:         .build()",
          "172:         .unwrap();",
          "174:     while let Some(chunk) = reader.fill_buf().ok().map(|s| s.to_vec()) {",
          "175:         let n = chunk.len();",
          "177:         if chunk.is_empty() {",
          "178:             break;",
          "179:         }",
          "181:         let start = file_pointer;",
          "182:         let end = file_pointer + chunk.len().saturating_sub(1);",
          "183:         let content_range = format!(\"bytes {start}-{end}/{total}\");",
          "185:         let res = client",
          "186:             .put(&session_uri)",
          "187:             .header(reqwest::header::CONTENT_TYPE, \"application/octet-stream\")",
          "188:             .header(reqwest::header::CONTENT_LENGTH, format!(\"{}\", chunk.len()))",
          "189:             .header(\"Content-Range\".to_string(), content_range)",
          "190:             .body(chunk.to_vec());",
          "192:         pb.set_position(file_pointer as u64);",
          "194:         res.send()",
          "195:             .map(|response| response.error_for_status())",
          "196:             .map_err(|e| {",
          "197:                 anyhow::anyhow!(",
          "198:                     \"cannot send request to {session_uri} (chunk {}..{}): {e}\",",
          "199:                     file_pointer,",
          "200:                     file_pointer + chunk_size",
          "201:                 )",
          "202:             })??;",
          "204:         if n < chunk_size {",
          "205:             break;",
          "206:         }",
          "208:         reader.consume(n);",
          "209:         file_pointer += n;",
          "210:     }",
          "212:     pb.finish_and_clear();",
          "214:     if !quiet {",
          "215:         println!(\"{} {}Publishing...\", style(\"[2/2]\").bold().dim(), PACKAGE);",
          "216:     }",
          "218:     let q =",
          "219:         PublishPackageMutationChunked::build_query(publish_package_mutation_chunked::Variables {",
          "220:             name: package.name.to_string(),",
          "221:             version: package.version.to_string(),",
          "222:             description: package.description.clone(),",
          "223:             manifest: manifest_string.to_string(),",
          "224:             license: package.license.clone(),",
          "225:             license_file: license_file.to_owned(),",
          "226:             readme: readme.to_owned(),",
          "227:             repository: package.repository.clone(),",
          "228:             homepage: package.homepage.clone(),",
          "229:             file_name: Some(archive_name.to_string()),",
          "230:             signature: maybe_signature_data,",
          "231:             signed_url: Some(signed_url),",
          "232:         });",
          "234:     let _response: publish_package_mutation_chunked::ResponseData =",
          "235:         crate::graphql::execute_query(&registry, &token, &q)?;",
          "237:     println!(",
          "238:         \"Successfully published package `{}@{}`\",",
          "239:         package.name, package.version",
          "240:     );",
          "242:     Ok(())",
          "243: }",
          "",
          "---------------"
        ],
        "lib/wasm-interface/src/interface.rs||lib/wasm-interface/src/interface.rs": [
          "File: lib/wasm-interface/src/interface.rs -> lib/wasm-interface/src/interface.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: use crate::interface_matcher::InterfaceMatcher;",
          "4: use serde::{Deserialize, Serialize};",
          "5: use std::collections::{hash_map::Entry, HashMap, HashSet};",
          "7: #[derive(Debug, Clone, PartialEq, Eq, Default, Serialize, Deserialize)]",
          "8: pub struct Interface {",
          "10:     pub name: Option<String>,",
          "12:     pub imports: HashMap<(String, String), Import>,",
          "14:     pub exports: HashMap<String, Export>,",
          "15: }",
          "17: impl Interface {",
          "18:     pub fn merge(&self, other: Interface) -> Result<Interface, String> {",
          "19:         let mut base = self.clone();",
          "21:         for (key, val) in other.imports {",
          "22:             match base.imports.entry(key) {",
          "23:                 Entry::Occupied(e) if *e.get() != val => {",
          "24:                     let (namespace, name) = e.key();",
          "25:                     let original_value = e.get();",
          "26:                     return Err(format!(\"Conflict detected: the import \\\"{namespace}\\\" \\\"{name}\\\" was found but the definitions were different: {original_value:?} {val:?}\"));",
          "27:                 }",
          "28:                 Entry::Occupied(_) => {",
          "30:                 }",
          "31:                 Entry::Vacant(e) => {",
          "32:                     e.insert(val);",
          "33:                 }",
          "34:             };",
          "35:         }",
          "37:         for (key, val) in other.exports {",
          "38:             match base.exports.entry(key) {",
          "39:                 Entry::Occupied(e) if *e.get() != val => {",
          "40:                     let name = e.key();",
          "41:                     let original_value = e.get();",
          "42:                     return Err(format!(\"Conflict detected: the key \\\"{name}\\\" was found in exports but the definitions were different: {original_value:?} {val:?}\"));",
          "43:                 }",
          "44:                 Entry::Occupied(_) => {",
          "46:                 }",
          "47:                 Entry::Vacant(e) => {",
          "48:                     e.insert(val);",
          "49:                 }",
          "50:             };",
          "51:         }",
          "53:         Ok(base)",
          "54:     }",
          "56:     pub fn create_interface_matcher(&self) -> InterfaceMatcher {",
          "57:         let mut namespaces = HashSet::new();",
          "58:         let mut namespace_imports: HashMap<String, HashSet<Import>> =",
          "59:             HashMap::with_capacity(self.imports.len());",
          "60:         let mut exports = HashSet::with_capacity(self.exports.len());",
          "62:         for (_, import) in self.imports.iter() {",
          "63:             match import {",
          "64:                 Import::Func { namespace, .. } | Import::Global { namespace, .. } => {",
          "65:                     if !namespaces.contains(namespace) {",
          "66:                         namespaces.insert(namespace.clone());",
          "67:                     }",
          "68:                     let ni = namespace_imports.entry(namespace.clone()).or_default();",
          "69:                     ni.insert(import.clone());",
          "70:                 }",
          "71:             }",
          "72:         }",
          "73:         for (_, export) in self.exports.iter() {",
          "74:             exports.insert(export.clone());",
          "75:         }",
          "76:         InterfaceMatcher {",
          "77:             namespaces,",
          "78:             namespace_imports,",
          "79:             exports,",
          "80:         }",
          "81:     }",
          "82: }",
          "84: #[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]",
          "85: pub enum Import {",
          "86:     Func {",
          "87:         namespace: String,",
          "88:         name: String,",
          "89:         params: Vec<WasmType>,",
          "90:         result: Vec<WasmType>,",
          "91:     },",
          "92:     Global {",
          "93:         namespace: String,",
          "94:         name: String,",
          "95:         var_type: WasmType,",
          "96:     },",
          "97: }",
          "99: impl Import {",
          "100:     pub fn format_key(ns: &str, name: &str) -> (String, String) {",
          "101:         (ns.to_string(), name.to_string())",
          "102:     }",
          "105:     pub fn get_key(&self) -> (String, String) {",
          "106:         match self {",
          "107:             Import::Func {",
          "108:                 namespace, name, ..",
          "109:             }",
          "110:             | Import::Global {",
          "111:                 namespace, name, ..",
          "112:             } => Self::format_key(namespace, name),",
          "113:         }",
          "114:     }",
          "115: }",
          "117: #[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]",
          "118: pub enum Export {",
          "119:     Func {",
          "120:         name: String,",
          "121:         params: Vec<WasmType>,",
          "122:         result: Vec<WasmType>,",
          "123:     },",
          "124:     Global {",
          "125:         name: String,",
          "126:         var_type: WasmType,",
          "127:     },",
          "128: }",
          "130: impl Export {",
          "131:     pub fn format_key(name: &str) -> String {",
          "132:         name.to_string()",
          "133:     }",
          "136:     pub fn get_key(&self) -> String {",
          "137:         match self {",
          "138:             Export::Func { name, .. } | Export::Global { name, .. } => Self::format_key(name),",
          "139:         }",
          "140:     }",
          "141: }",
          "144: #[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]",
          "145: pub enum WasmType {",
          "146:     I32,",
          "147:     I64,",
          "148:     F32,",
          "149:     F64,",
          "150: }",
          "152: impl std::fmt::Display for WasmType {",
          "153:     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "154:         write!(",
          "155:             f,",
          "156:             \"{}\",",
          "157:             match self {",
          "158:                 WasmType::I32 => \"i32\",",
          "159:                 WasmType::I64 => \"i64\",",
          "160:                 WasmType::F32 => \"f32\",",
          "161:                 WasmType::F64 => \"f64\",",
          "162:             }",
          "163:         )",
          "164:     }",
          "165: }",
          "167: #[cfg(test)]",
          "168: mod test {",
          "169:     use crate::parser;",
          "171:     #[test]",
          "172:     fn merging_works() {",
          "173:         let interface1_src =",
          "174:             r#\"(interface (func (import \"env\" \"plus_one\") (param i32) (result i32)))\"#;",
          "175:         let interface2_src =",
          "176:             r#\"(interface (func (import \"env\" \"plus_one\") (param i64) (result i64)))\"#;",
          "177:         let interface3_src =",
          "178:             r#\"(interface (func (import \"env\" \"times_two\") (param i64) (result i64)))\"#;",
          "179:         let interface4_src =",
          "180:             r#\"(interface (func (import \"env\" \"times_two\") (param i64 i64) (result i64)))\"#;",
          "181:         let interface5_src = r#\"(interface (func (export \"empty_bank_account\") (param) (result)))\"#;",
          "182:         let interface6_src =",
          "183:             r#\"(interface (func (export \"empty_bank_account\") (param) (result i64)))\"#;",
          "185:         let interface1 = parser::parse_interface(interface1_src).unwrap();",
          "186:         let interface2 = parser::parse_interface(interface2_src).unwrap();",
          "187:         let interface3 = parser::parse_interface(interface3_src).unwrap();",
          "188:         let interface4 = parser::parse_interface(interface4_src).unwrap();",
          "189:         let interface5 = parser::parse_interface(interface5_src).unwrap();",
          "190:         let interface6 = parser::parse_interface(interface6_src).unwrap();",
          "192:         assert!(interface1.merge(interface2.clone()).is_err());",
          "193:         assert!(interface2.merge(interface1.clone()).is_err());",
          "194:         assert!(interface1.merge(interface3.clone()).is_ok());",
          "195:         assert!(interface2.merge(interface3.clone()).is_ok());",
          "196:         assert!(interface3.merge(interface2).is_ok());",
          "197:         assert!(",
          "198:             interface1.merge(interface1.clone()).is_ok(),",
          "199:             \"exact matches are accepted\"",
          "200:         );",
          "201:         assert!(interface3.merge(interface4).is_err());",
          "202:         assert!(interface5.merge(interface5.clone()).is_ok());",
          "203:         assert!(interface5.merge(interface6).is_err());",
          "204:     }",
          "205: }",
          "",
          "---------------"
        ],
        "lib/wasm-interface/src/interface_matcher.rs||lib/wasm-interface/src/interface_matcher.rs": [
          "File: lib/wasm-interface/src/interface_matcher.rs -> lib/wasm-interface/src/interface_matcher.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use serde::{Deserialize, Serialize};",
          "2: use std::collections::{HashMap, HashSet};",
          "4: use crate::interface::{Export, Import};",
          "11: #[derive(Debug, Clone, PartialEq, Eq, Default, Serialize, Deserialize)]",
          "12: pub struct InterfaceMatcher {",
          "13:     pub namespaces: HashSet<String>,",
          "14:     pub namespace_imports: HashMap<String, HashSet<Import>>,",
          "15:     pub exports: HashSet<Export>,",
          "16: }",
          "18: #[cfg(feature = \"binary_encode\")]",
          "19: impl InterfaceMatcher {",
          "21:     fn into_bytes(&self) -> Vec<u8> {",
          "22:         bincode::serialize(self).expect(\"Could not serialize InterfaceMatcher\")",
          "23:     }",
          "26:     fn from_bytes(bytes: &[u8]) -> Option<Self> {",
          "27:         bincode::deserialize(bytes).ok()",
          "28:     }",
          "29: }",
          "",
          "---------------"
        ],
        "lib/wasm-interface/src/lib.rs||lib/wasm-interface/src/lib.rs": [
          "File: lib/wasm-interface/src/lib.rs -> lib/wasm-interface/src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #![type_length_limit = \"5795522\"]",
          "7: pub mod interface;",
          "8: pub mod interface_matcher;",
          "9: pub mod parser;",
          "10: #[cfg(feature = \"validation\")]",
          "11: pub mod validate;",
          "13: pub use interface::*;",
          "",
          "---------------"
        ],
        "lib/wasm-interface/src/parser.rs||lib/wasm-interface/src/parser.rs": [
          "File: lib/wasm-interface/src/parser.rs -> lib/wasm-interface/src/parser.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: use either::Either;",
          "36: use nom::{",
          "37:     branch::*,",
          "38:     bytes::complete::{escaped, is_not, tag},",
          "39:     character::complete::{char, multispace0, multispace1, one_of},",
          "40:     combinator::*,",
          "41:     error::context,",
          "42:     multi::many0,",
          "43:     sequence::{delimited, preceded, tuple},",
          "44:     IResult,",
          "45: };",
          "47: use crate::interface::*;",
          "54: pub fn parse_interface(mut input: &str) -> Result<Interface, String> {",
          "55:     let mut interface = Interface::default();",
          "56:     let interface_inner = preceded(",
          "57:         tag(\"interface\"),",
          "58:         tuple((",
          "59:             opt(preceded(space_comments, identifier)),",
          "60:             many0(parse_func_or_global),",
          "61:         )),",
          "62:     );",
          "63:     let interface_parser = preceded(space_comments, s_exp(interface_inner));",
          "65:     if let Result::Ok((inp, (sig_id, out))) = interface_parser(input) {",
          "66:         interface.name = sig_id.map(|s_id| s_id.to_string());",
          "68:         for entry in out.into_iter() {",
          "69:             match entry {",
          "70:                 Either::Left(import) => {",
          "71:                     if let Some(dup) = interface.imports.insert(import.get_key(), import) {",
          "72:                         return Err(format!(\"Duplicate import found {:?}\", dup));",
          "73:                     }",
          "74:                 }",
          "75:                 Either::Right(export) => {",
          "76:                     if let Some(dup) = interface.exports.insert(export.get_key(), export) {",
          "77:                         return Err(format!(\"Duplicate export found {:?}\", dup));",
          "78:                     }",
          "79:                 }",
          "80:             }",
          "81:         }",
          "82:         input = inp;",
          "83:     }",
          "85:     if let Ok((inp, _)) = space_comments(input) {",
          "86:         input = inp;",
          "87:     }",
          "88:     if !input.is_empty() {",
          "89:         Err(format!(\"Could not parse remaining input: {}\", input))",
          "90:     } else {",
          "91:         Ok(interface)",
          "92:     }",
          "93: }",
          "95: fn parse_comment(input: &str) -> IResult<&str, ()> {",
          "96:     map(",
          "97:         preceded(multispace0, preceded(char(';'), many0(is_not(\"\\n\")))),",
          "98:         |_| (),",
          "99:     )(input)",
          "100: }",
          "104: fn space_comments<'a>(mut input: &'a str) -> IResult<&'a str, ()> {",
          "105:     let mut space_found = true;",
          "106:     let mut comment_found = true;",
          "107:     while space_found || comment_found {",
          "108:         let space: IResult<&'a str, _> = multispace1(input);",
          "109:         space_found = if let Result::Ok((inp, _)) = space {",
          "110:             input = inp;",
          "111:             true",
          "112:         } else {",
          "113:             false",
          "114:         };",
          "115:         comment_found = if let Result::Ok((inp, _)) = parse_comment(input) {",
          "116:             input = inp;",
          "117:             true",
          "118:         } else {",
          "119:             false",
          "120:         };",
          "121:     }",
          "122:     Ok((input, ()))",
          "123: }",
          "126: fn identifier(input: &str) -> IResult<&str, &str> {",
          "127:     let name_inner = escaped(is_not(\"\\\"\\\\\"), '\\\\', one_of(\"\\\"n\\\\\"));",
          "128:     context(\"identifier\", delimited(char('\"'), name_inner, char('\"')))(input)",
          "129: }",
          "132: fn wasm_type(input: &str) -> IResult<&str, WasmType> {",
          "133:     let i32_tag = map(tag(\"i32\"), |_| WasmType::I32);",
          "134:     let i64_tag = map(tag(\"i64\"), |_| WasmType::I64);",
          "135:     let f32_tag = map(tag(\"f32\"), |_| WasmType::F32);",
          "136:     let f64_tag = map(tag(\"f64\"), |_| WasmType::F64);",
          "138:     alt((i32_tag, i64_tag, f32_tag, f64_tag))(input)",
          "139: }",
          "142: fn s_exp<'a, O1, F>(inner: F) -> impl Fn(&'a str) -> IResult<&'a str, O1>",
          "143: where",
          "144:     F: Fn(&'a str) -> IResult<&'a str, O1>,",
          "145: {",
          "146:     delimited(",
          "147:         char('('),",
          "148:         preceded(space_comments, inner),",
          "149:         preceded(space_comments, char(')')),",
          "150:     )",
          "151: }",
          "153: fn parse_func_or_global(input: &str) -> IResult<&str, Either<Import, Export>> {",
          "154:     preceded(space_comments, alt((func, global)))(input)",
          "155: }",
          "159: fn func(input: &str) -> IResult<&str, Either<Import, Export>> {",
          "160:     let param_list_inner = preceded(tag(\"param\"), many0(preceded(space_comments, wasm_type)));",
          "161:     let param_list = opt(s_exp(param_list_inner));",
          "162:     let result_list_inner = preceded(tag(\"result\"), many0(preceded(space_comments, wasm_type)));",
          "163:     let result_list = opt(s_exp(result_list_inner));",
          "164:     let import_id_inner = preceded(",
          "165:         tag(\"import\"),",
          "166:         tuple((",
          "167:             preceded(space_comments, identifier),",
          "168:             preceded(space_comments, identifier),",
          "169:         )),",
          "170:     );",
          "171:     let export_id_inner = preceded(tag(\"export\"), preceded(space_comments, identifier));",
          "172:     let func_id_inner = alt((",
          "173:         map(import_id_inner, |(ns, name)| {",
          "174:             Either::Left((ns.to_string(), name.to_string()))",
          "175:         }),",
          "176:         map(export_id_inner, |name| Either::Right(name.to_string())),",
          "177:     ));",
          "178:     let func_id = s_exp(func_id_inner);",
          "179:     let func_import_inner = context(",
          "180:         \"func import inner\",",
          "181:         preceded(",
          "182:             tag(\"func\"),",
          "183:             map(",
          "184:                 tuple((",
          "185:                     preceded(space_comments, func_id),",
          "186:                     preceded(space_comments, param_list),",
          "187:                     preceded(space_comments, result_list),",
          "188:                 )),",
          "189:                 |(func_id, pl, rl)| match func_id {",
          "190:                     Either::Left((ns, name)) => Either::Left(Import::Func {",
          "191:                         namespace: ns,",
          "192:                         name,",
          "193:                         params: pl.unwrap_or_default(),",
          "194:                         result: rl.unwrap_or_default(),",
          "195:                     }),",
          "196:                     Either::Right(name) => Either::Right(Export::Func {",
          "197:                         name,",
          "198:                         params: pl.unwrap_or_default(),",
          "199:                         result: rl.unwrap_or_default(),",
          "200:                     }),",
          "201:                 },",
          "202:             ),",
          "203:         ),",
          "204:     );",
          "205:     s_exp(func_import_inner)(input)",
          "206: }",
          "210: fn global(input: &str) -> IResult<&str, Either<Import, Export>> {",
          "211:     let global_type_inner = preceded(tag(\"type\"), preceded(space_comments, wasm_type));",
          "212:     let type_s_exp = s_exp(global_type_inner);",
          "213:     let export_inner = preceded(tag(\"export\"), preceded(space_comments, identifier));",
          "214:     let import_inner = preceded(",
          "215:         tag(\"import\"),",
          "216:         tuple((",
          "217:             preceded(space_comments, identifier),",
          "218:             preceded(space_comments, identifier),",
          "219:         )),",
          "220:     );",
          "221:     let global_id_inner = alt((",
          "222:         map(import_inner, |(ns, name)| {",
          "223:             Either::Left(Import::Global {",
          "224:                 namespace: ns.to_string(),",
          "225:                 name: name.to_string(),",
          "227:                 var_type: WasmType::I32,",
          "228:             })",
          "229:         }),",
          "230:         map(export_inner, |name| {",
          "231:             Either::Right(Export::Global {",
          "232:                 name: name.to_string(),",
          "234:                 var_type: WasmType::I32,",
          "235:             })",
          "236:         }),",
          "237:     ));",
          "238:     let global_id = s_exp(global_id_inner);",
          "239:     let global_inner = context(",
          "240:         \"global inner\",",
          "241:         preceded(",
          "242:             tag(\"global\"),",
          "243:             map(",
          "244:                 tuple((",
          "245:                     preceded(space_comments, global_id),",
          "246:                     preceded(space_comments, type_s_exp),",
          "247:                 )),",
          "248:                 |(import_or_export, var_type)| match import_or_export {",
          "249:                     Either::Left(Import::Global {",
          "250:                         namespace, name, ..",
          "251:                     }) => Either::Left(Import::Global {",
          "252:                         namespace,",
          "253:                         name,",
          "254:                         var_type,",
          "255:                     }),",
          "256:                     Either::Right(Export::Global { name, .. }) => {",
          "257:                         Either::Right(Export::Global { name, var_type })",
          "258:                     }",
          "259:                     _ => unreachable!(\"Invalid value interonally in parse global function\"),",
          "260:                 },",
          "261:             ),",
          "262:         ),",
          "263:     );",
          "264:     s_exp(global_inner)(input)",
          "265: }",
          "267: #[cfg(test)]",
          "268: mod test {",
          "269:     use super::*;",
          "270:     use std::collections::HashMap;",
          "272:     #[test]",
          "273:     fn parse_wasm_type() {",
          "274:         let i32_res = wasm_type(\"i32\").unwrap();",
          "275:         assert_eq!(i32_res, (\"\", WasmType::I32));",
          "276:         let i64_res = wasm_type(\"i64\").unwrap();",
          "277:         assert_eq!(i64_res, (\"\", WasmType::I64));",
          "278:         let f32_res = wasm_type(\"f32\").unwrap();",
          "279:         assert_eq!(f32_res, (\"\", WasmType::F32));",
          "280:         let f64_res = wasm_type(\"f64\").unwrap();",
          "281:         assert_eq!(f64_res, (\"\", WasmType::F64));",
          "283:         assert!(wasm_type(\"i128\").is_err());",
          "284:     }",
          "286:     #[test]",
          "287:     fn parse_identifier() {",
          "288:         let inner_str = \"\u67f4\u306f\u53ef\u611b\u3059\u304e\u308b\u3060\u3068\u601d\u3044\u307e\u3059\";",
          "289:         let input = format!(\"\\\"{}\\\"\", &inner_str);",
          "290:         let parse_res = identifier(&input).unwrap();",
          "291:         assert_eq!(parse_res, (\"\", inner_str))",
          "292:     }",
          "294:     #[test]",
          "295:     fn parse_global_import() {",
          "296:         let parse_res = global(r#\"(global (import \"env\" \"length\") (type i32))\"#)",
          "297:             .ok()",
          "298:             .and_then(|(a, b)| Some((a, b.left()?)))",
          "299:             .unwrap();",
          "300:         assert_eq!(",
          "301:             parse_res,",
          "302:             (",
          "303:                 \"\",",
          "304:                 Import::Global {",
          "305:                     namespace: \"env\".to_string(),",
          "306:                     name: \"length\".to_string(),",
          "307:                     var_type: WasmType::I32,",
          "308:                 }",
          "309:             )",
          "310:         );",
          "311:     }",
          "313:     #[test]",
          "314:     fn parse_global_export() {",
          "315:         let parse_res = global(r#\"(global (export \"length\") (type i32))\"#)",
          "316:             .ok()",
          "317:             .and_then(|(a, b)| Some((a, b.right()?)))",
          "318:             .unwrap();",
          "319:         assert_eq!(",
          "320:             parse_res,",
          "321:             (",
          "322:                 \"\",",
          "323:                 Export::Global {",
          "324:                     name: \"length\".to_string(),",
          "325:                     var_type: WasmType::I32,",
          "326:                 }",
          "327:             )",
          "328:         );",
          "329:     }",
          "331:     #[test]",
          "332:     fn parse_func_import() {",
          "333:         let parse_res = func(r#\"(func (import \"ns\" \"name\") (param f64 i32) (result f64 i32))\"#)",
          "334:             .ok()",
          "335:             .and_then(|(a, b)| Some((a, b.left()?)))",
          "336:             .unwrap();",
          "337:         assert_eq!(",
          "338:             parse_res,",
          "339:             (",
          "340:                 \"\",",
          "341:                 Import::Func {",
          "342:                     namespace: \"ns\".to_string(),",
          "343:                     name: \"name\".to_string(),",
          "344:                     params: vec![WasmType::F64, WasmType::I32],",
          "345:                     result: vec![WasmType::F64, WasmType::I32],",
          "346:                 }",
          "347:             )",
          "348:         );",
          "349:     }",
          "351:     #[test]",
          "352:     fn parse_func_export() {",
          "353:         let parse_res = func(r#\"(func (export \"name\") (param f64 i32) (result f64 i32))\"#)",
          "354:             .ok()",
          "355:             .and_then(|(a, b)| Some((a, b.right()?)))",
          "356:             .unwrap();",
          "357:         assert_eq!(",
          "358:             parse_res,",
          "359:             (",
          "360:                 \"\",",
          "361:                 Export::Func {",
          "362:                     name: \"name\".to_string(),",
          "363:                     params: vec![WasmType::F64, WasmType::I32],",
          "364:                     result: vec![WasmType::F64, WasmType::I32],",
          "365:                 }",
          "366:             )",
          "367:         );",
          "369:         let parse_res = func(r#\"(func (export \"name\"))\"#)",
          "370:             .ok()",
          "371:             .and_then(|(a, b)| Some((a, b.right()?)))",
          "372:             .unwrap();",
          "373:         assert_eq!(",
          "374:             parse_res,",
          "375:             (",
          "376:                 \"\",",
          "377:                 Export::Func {",
          "378:                     name: \"name\".to_string(),",
          "379:                     params: vec![],",
          "380:                     result: vec![],",
          "381:                 }",
          "382:             )",
          "383:         )",
          "384:     }",
          "386:     #[test]",
          "387:     fn parse_imports_test() {",
          "388:         let parse_imports = |in_str| {",
          "389:             many0(parse_func_or_global)(in_str)",
          "390:                 .map(|(a, b)| {",
          "391:                     (",
          "392:                         a,",
          "393:                         b.into_iter().filter_map(|x| x.left()).collect::<Vec<_>>(),",
          "394:                     )",
          "395:                 })",
          "396:                 .unwrap()",
          "397:         };",
          "398:         let parse_res =",
          "399:             parse_imports(r#\"(func (import \"ns\" \"name\") (param f64 i32) (result f64 i32))\"#);",
          "400:         assert_eq!(",
          "401:             parse_res,",
          "402:             (",
          "403:                 \"\",",
          "404:                 vec![Import::Func {",
          "405:                     namespace: \"ns\".to_string(),",
          "406:                     name: \"name\".to_string(),",
          "407:                     params: vec![WasmType::F64, WasmType::I32],",
          "408:                     result: vec![WasmType::F64, WasmType::I32],",
          "409:                 }]",
          "410:             )",
          "411:         );",
          "413:         let parse_res = parse_imports(",
          "414:             r#\"(func (import \"ns\" \"name\")",
          "415:                                                    (param f64 i32) (result f64 i32))",
          "416:         ( global ( import \"env\" \"length\" ) ( type",
          "417:     ;; i32 is the best type",
          "418:     i32 )",
          "419:     )",
          "420:                                               (func (import \"ns\" \"name2\") (param f32",
          "421:                                                                           i64)",
          "422:                                    ;; The return value comes next",
          "423:                                                                     (",
          "424:                                                                      result",
          "425:                                                                      f64",
          "426:                                                                      i32",
          "427:                                                                      )",
          "428:                                               )\"#,",
          "429:         );",
          "430:         assert_eq!(",
          "431:             parse_res,",
          "432:             (",
          "433:                 \"\",",
          "434:                 vec![",
          "435:                     Import::Func {",
          "436:                         namespace: \"ns\".to_string(),",
          "437:                         name: \"name\".to_string(),",
          "438:                         params: vec![WasmType::F64, WasmType::I32],",
          "439:                         result: vec![WasmType::F64, WasmType::I32],",
          "440:                     },",
          "441:                     Import::Global {",
          "442:                         namespace: \"env\".to_string(),",
          "443:                         name: \"length\".to_string(),",
          "444:                         var_type: WasmType::I32,",
          "445:                     },",
          "446:                     Import::Func {",
          "447:                         namespace: \"ns\".to_string(),",
          "448:                         name: \"name2\".to_string(),",
          "449:                         params: vec![WasmType::F32, WasmType::I64],",
          "450:                         result: vec![WasmType::F64, WasmType::I32],",
          "451:                     },",
          "452:                 ]",
          "453:             )",
          "454:         );",
          "455:     }",
          "457:     #[test]",
          "458:     fn top_level_test() {",
          "459:         let parse_res = parse_interface(",
          "460:             r#\" (interface",
          "461:  (func (import \"ns\" \"name\") (param f64 i32) (result f64 i32))",
          "462:  (func (export \"name2\") (param) (result i32))",
          "463:  (global (import \"env\" \"length\") (type f64)))\"#,",
          "464:         )",
          "465:         .unwrap();",
          "467:         let imports = vec![",
          "468:             Import::Func {",
          "469:                 namespace: \"ns\".to_string(),",
          "470:                 name: \"name\".to_string(),",
          "471:                 params: vec![WasmType::F64, WasmType::I32],",
          "472:                 result: vec![WasmType::F64, WasmType::I32],",
          "473:             },",
          "474:             Import::Global {",
          "475:                 namespace: \"env\".to_string(),",
          "476:                 name: \"length\".to_string(),",
          "477:                 var_type: WasmType::F64,",
          "478:             },",
          "479:         ];",
          "480:         let exports = vec![Export::Func {",
          "481:             name: \"name2\".to_string(),",
          "482:             params: vec![],",
          "483:             result: vec![WasmType::I32],",
          "484:         }];",
          "485:         let import_map = imports",
          "486:             .into_iter()",
          "487:             .map(|entry| (entry.get_key(), entry))",
          "488:             .collect::<HashMap<(String, String), Import>>();",
          "489:         let export_map = exports",
          "490:             .into_iter()",
          "491:             .map(|entry| (entry.get_key(), entry))",
          "492:             .collect::<HashMap<String, Export>>();",
          "493:         assert_eq!(",
          "494:             parse_res,",
          "495:             Interface {",
          "496:                 name: None,",
          "497:                 imports: import_map,",
          "498:                 exports: export_map,",
          "499:             }",
          "500:         );",
          "501:     }",
          "503:     #[test]",
          "504:     fn duplicates_not_allowed() {",
          "505:         let parse_res = parse_interface(",
          "506:             r#\" (interface \"sig_name\" (func (import \"ns\" \"name\") (param f64 i32) (result f64 i32))",
          "507: ; test comment",
          "508:   ;; hello",
          "509:  (func (import \"ns\" \"name\") (param) (result i32))",
          "510:  (global (export \"length\") (type f64)))",
          "512: \"#,",
          "513:         );",
          "515:         assert!(parse_res.is_err());",
          "516:     }",
          "518:     #[test]",
          "519:     fn test_comment_space_parsing() {",
          "520:         let parse_res = space_comments(\" \").unwrap();",
          "521:         assert_eq!(parse_res, (\"\", ()));",
          "522:         let parse_res = space_comments(\"\").unwrap();",
          "523:         assert_eq!(parse_res, (\"\", ()));",
          "524:         let parse_res = space_comments(\"; hello\\n\").unwrap();",
          "525:         assert_eq!(parse_res, (\"\", ()));",
          "526:         let parse_res = space_comments(\"abc\").unwrap();",
          "527:         assert_eq!(parse_res, (\"abc\", ()));",
          "528:         let parse_res = space_comments(\"\\n ; hello\\n \").unwrap();",
          "529:         assert_eq!(parse_res, (\"\", ()));",
          "530:         let parse_res = space_comments(\"\\n ; hello\\n ; abc\\n\\n ; hello\\n\").unwrap();",
          "531:         assert_eq!(parse_res, (\"\", ()));",
          "532:     }",
          "534:     #[test]",
          "535:     fn test_param_elision() {",
          "536:         let parse_res = parse_interface(",
          "537:             r#\" (interface \"interface_name\" (func (import \"ns\" \"name\") (result f64 i32))",
          "538: (func (export \"name\")))",
          "539: \"#,",
          "540:         )",
          "541:         .unwrap();",
          "543:         let imports = vec![Import::Func {",
          "544:             namespace: \"ns\".to_string(),",
          "545:             name: \"name\".to_string(),",
          "546:             params: vec![],",
          "547:             result: vec![WasmType::F64, WasmType::I32],",
          "548:         }];",
          "549:         let exports = vec![Export::Func {",
          "550:             name: \"name\".to_string(),",
          "551:             params: vec![],",
          "552:             result: vec![],",
          "553:         }];",
          "554:         let import_map = imports",
          "555:             .into_iter()",
          "556:             .map(|entry| (entry.get_key(), entry))",
          "557:             .collect::<HashMap<(String, String), Import>>();",
          "558:         let export_map = exports",
          "559:             .into_iter()",
          "560:             .map(|entry| (entry.get_key(), entry))",
          "561:             .collect::<HashMap<String, Export>>();",
          "562:         assert_eq!(",
          "563:             parse_res,",
          "564:             Interface {",
          "565:                 name: Some(\"interface_name\".to_string()),",
          "566:                 imports: import_map,",
          "567:                 exports: export_map,",
          "568:             }",
          "569:         );",
          "570:     }",
          "572:     #[test]",
          "573:     fn typo_gets_caught() {",
          "574:         let interface_src = r#\"",
          "575: (interface \"interface_id\"",
          "576: (func (import \"env\" \"do_panic\") (params i32 i64))",
          "577: (global (import \"length\") (type i32)))\"#;",
          "578:         let result = parse_interface(interface_src);",
          "579:         assert!(result.is_err());",
          "580:     }",
          "582:     #[test]",
          "583:     fn parse_trailing_spaces_on_interface() {",
          "584:         let parse_res = parse_interface(",
          "585:             r#\" (interface \"really_good_interface\" (func (import \"ns\" \"name\") (param f64 i32) (result f64 i32))",
          "586: ; test comment",
          "587:   ;; hello",
          "588:  (global (import \"ns\" \"length\") (type f64))",
          "589: )",
          "591: \"#,",
          "592:         );",
          "594:         assert!(parse_res.is_ok());",
          "595:     }",
          "596: }",
          "",
          "---------------"
        ],
        "lib/wasm-interface/src/validate.rs||lib/wasm-interface/src/validate.rs": [
          "File: lib/wasm-interface/src/validate.rs -> lib/wasm-interface/src/validate.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: use crate::{Export, Import, Interface, WasmType};",
          "8: use std::collections::HashMap;",
          "9: use wasmparser::{ExternalKind, FuncType, GlobalType, ImportSectionEntryType};",
          "11: pub fn validate_wasm_and_report_errors(",
          "12:     wasm: &[u8],",
          "13:     interface: &Interface,",
          "14: ) -> Result<(), WasmValidationError> {",
          "15:     use wasmparser::WasmDecoder;",
          "17:     let mut errors: Vec<String> = vec![];",
          "18:     let mut import_fns: HashMap<(String, String), u32> = HashMap::new();",
          "19:     let mut export_fns: HashMap<String, u32> = HashMap::new();",
          "20:     let mut export_globals: HashMap<String, u32> = HashMap::new();",
          "21:     let mut type_defs: Vec<FuncType> = vec![];",
          "22:     let mut global_types: Vec<GlobalType> = vec![];",
          "23:     let mut fn_sigs: Vec<u32> = vec![];",
          "25:     let mut parser = wasmparser::ValidatingParser::new(wasm, None);",
          "26:     loop {",
          "27:         let state = parser.read();",
          "28:         match state {",
          "29:             wasmparser::ParserState::EndWasm => break,",
          "30:             wasmparser::ParserState::Error(e) => {",
          "31:                 return Err(WasmValidationError::InvalidWasm {",
          "32:                     error: format!(\"{}\", e),",
          "33:                 });",
          "34:             }",
          "35:             wasmparser::ParserState::ImportSectionEntry {",
          "36:                 module,",
          "37:                 field,",
          "38:                 ref ty,",
          "39:             } => match ty {",
          "40:                 ImportSectionEntryType::Function(idx) => {",
          "41:                     import_fns.insert(Import::format_key(module, field), *idx);",
          "42:                     fn_sigs.push(*idx);",
          "43:                 }",
          "44:                 ImportSectionEntryType::Global(GlobalType { content_type, .. }) => {",
          "45:                     let global_type =",
          "46:                         wasmparser_type_into_wasm_type(*content_type).map_err(|err| {",
          "47:                             WasmValidationError::UnsupportedType {",
          "48:                                 error: format!(",
          "49:                                     \"Invalid type found in import \\\"{}\\\" \\\"{}\\\": {}\",",
          "50:                                     module, field, err",
          "51:                                 ),",
          "52:                             }",
          "53:                         })?;",
          "54:                     if let Some(val) = interface.imports.get(&Import::format_key(module, field)) {",
          "55:                         if let Import::Global { var_type, .. } = val {",
          "56:                             if *var_type != global_type {",
          "57:                                 errors.push(format!(",
          "58:                                     \"Invalid type on Global \\\"{}\\\". Expected {} found {}\",",
          "59:                                     field, var_type, global_type",
          "60:                                 ));",
          "61:                             }",
          "62:                         } else {",
          "63:                             errors.push(format!(",
          "64:                                 \"Invalid import type. Expected Global, found {:?}\",",
          "65:                                 val",
          "66:                             ));",
          "67:                         }",
          "68:                     } else {",
          "69:                         errors.push(format!(",
          "70:                             \"Global import \\\"{}\\\" not found in the specified interface\",",
          "71:                             field",
          "72:                         ));",
          "73:                     }",
          "74:                 }",
          "75:                 _ => (),",
          "76:             },",
          "77:             wasmparser::ParserState::ExportSectionEntry {",
          "78:                 field,",
          "79:                 index,",
          "80:                 ref kind,",
          "81:             } => match kind {",
          "82:                 ExternalKind::Function => {",
          "83:                     export_fns.insert(Export::format_key(field), *index);",
          "84:                 }",
          "85:                 ExternalKind::Global => {",
          "86:                     export_globals.insert(Export::format_key(field), *index);",
          "87:                 }",
          "88:                 _ => (),",
          "89:             },",
          "90:             wasmparser::ParserState::BeginGlobalSectionEntry(gt) => {",
          "91:                 global_types.push(*gt);",
          "92:             }",
          "93:             wasmparser::ParserState::TypeSectionEntry(ft) => {",
          "94:                 type_defs.push(ft.clone());",
          "95:             }",
          "96:             wasmparser::ParserState::FunctionSectionEntry(n) => {",
          "97:                 fn_sigs.push(*n);",
          "98:             }",
          "99:             _ => {}",
          "100:         }",
          "101:     }",
          "103:     validate_imports(&import_fns, &type_defs, interface, &mut errors);",
          "104:     validate_export_fns(&export_fns, &type_defs, &fn_sigs, interface, &mut errors);",
          "105:     validate_export_globals(&export_globals, &global_types, interface, &mut errors);",
          "107:     if errors.is_empty() {",
          "108:         Ok(())",
          "109:     } else {",
          "110:         Err(WasmValidationError::InterfaceViolated { errors })",
          "111:     }",
          "112: }",
          "116: fn validate_imports(",
          "117:     import_fns: &HashMap<(String, String), u32>,",
          "118:     type_defs: &[FuncType],",
          "119:     interface: &Interface,",
          "120:     errors: &mut Vec<String>,",
          "121: ) {",
          "122:     for (key, val) in import_fns.iter() {",
          "123:         if let Some(interface_def) = interface.imports.get(key) {",
          "124:             let type_sig = if let Some(v) = type_defs.get(*val as usize) {",
          "125:                 v",
          "126:             } else {",
          "127:                 errors.push(format!(",
          "128:                     \"Use of undeclared function reference \\\"{}\\\" in import function \\\"{}\\\" \\\"{}\\\"\",",
          "129:                     val, key.0, key.1",
          "130:                 ));",
          "131:                 continue;",
          "132:             };",
          "133:             if let Import::Func { params, result, .. } = interface_def {",
          "134:                 debug_assert!(type_sig.form == wasmparser::Type::Func);",
          "135:                 for (i, param) in type_sig",
          "136:                     .params",
          "137:                     .iter()",
          "138:                     .cloned()",
          "139:                     .map(wasmparser_type_into_wasm_type)",
          "140:                     .enumerate()",
          "141:                 {",
          "142:                     match param {",
          "143:                         Ok(t) => {",
          "144:                             if params.get(i).is_none() {",
          "145:                                 errors.push(format!(\"Found {} args but the interface only expects {} for imported function \\\"{}\\\" \\\"{}\\\"\", i, params.len(), &key.0, &key.1));",
          "146:                                 continue;",
          "147:                             }",
          "148:                             if t != params[i] {",
          "149:                                 errors.push(format!(",
          "150:                                     \"Type mismatch in params in imported func \\\"{}\\\" \\\"{}\\\": argument {}, expected {} found {}\",",
          "151:                                     &key.0, &key.1, i + 1, params[i], t",
          "152:                                 ));",
          "153:                             }",
          "154:                         }",
          "155:                         Err(e) => errors.push(format!(",
          "156:                             \"Invalid type in func \\\"{}\\\" \\\"{}\\\": {}\",",
          "157:                             &key.0, &key.1, e",
          "158:                         )),",
          "159:                     }",
          "160:                 }",
          "161:                 for (i, ret) in type_sig",
          "162:                     .returns",
          "163:                     .iter()",
          "164:                     .cloned()",
          "165:                     .map(wasmparser_type_into_wasm_type)",
          "166:                     .enumerate()",
          "167:                 {",
          "168:                     match ret {",
          "169:                         Ok(t) => {",
          "170:                             if result.get(i).is_none() {",
          "171:                                 errors.push(format!(\"Found {} returns but the interface only expects {} for imported function \\\"{}\\\" \\\"{}\\\"\", i, params.len(), &key.0, &key.1));",
          "172:                                 continue;",
          "173:                             }",
          "175:                             if t != result[i] {",
          "176:                                 errors.push(format!(",
          "177:                                     \"Type mismatch in returns in func \\\"{}\\\" \\\"{}\\\", return {}, expected {} found {}\",",
          "178:                                     &key.0, &key.1, i + 1, params[i], t",
          "179:                                 ));",
          "180:                             }",
          "181:                         }",
          "182:                         Err(e) => errors.push(format!(",
          "183:                             \"Invalid type in func \\\"{}\\\" \\\"{}\\\": {}\",",
          "184:                             &key.0, &key.1, e",
          "185:                         )),",
          "186:                     }",
          "187:                 }",
          "188:             }",
          "189:         } else {",
          "192:             errors.push(format!(\"Missing import \\\"{}\\\" \\\"{}\\\"\", key.0, key.1));",
          "193:         }",
          "194:     }",
          "195: }",
          "199: fn validate_export_fns(",
          "200:     export_fns: &HashMap<String, u32>,",
          "201:     type_defs: &[FuncType],",
          "202:     fn_sigs: &Vec<u32>,",
          "203:     interface: &Interface,",
          "204:     errors: &mut Vec<String>,",
          "205: ) {",
          "206:     'export_loop: for (key, val) in export_fns.iter() {",
          "207:         if let Some(interface_def) = interface.exports.get(key) {",
          "208:             let type_sig = if let Some(type_idx) = fn_sigs.get(*val as usize) {",
          "209:                 if let Some(v) = type_defs.get(*type_idx as usize) {",
          "210:                     v",
          "211:                 } else {",
          "212:                     errors.push(format!(",
          "213:                         \"Export \\\"{}\\\" refers to type \\\"{}\\\" but only {} types were found\",",
          "214:                         &key,",
          "215:                         type_idx,",
          "216:                         fn_sigs.len()",
          "217:                     ));",
          "218:                     continue;",
          "219:                 }",
          "220:             } else {",
          "221:                 errors.push(format!(",
          "222:                     \"Use of undeclared function reference \\\"{}\\\" in export \\\"{}\\\"\",",
          "223:                     val, &key",
          "224:                 ));",
          "225:                 continue;",
          "226:             };",
          "227:             if let Export::Func { params, result, .. } = interface_def {",
          "228:                 debug_assert!(type_sig.form == wasmparser::Type::Func);",
          "229:                 for (i, param) in type_sig",
          "230:                     .params",
          "231:                     .iter()",
          "232:                     .cloned()",
          "233:                     .map(wasmparser_type_into_wasm_type)",
          "234:                     .enumerate()",
          "235:                 {",
          "236:                     match param {",
          "237:                         Ok(t) => {",
          "238:                             if params.get(i).is_none() {",
          "239:                                 errors.push(format!(\"Found {} args but the interface only expects {} for exported function \\\"{}\\\"\", type_sig.params.len(), params.len(), &key));",
          "240:                                 continue 'export_loop;",
          "241:                             }",
          "242:                             if t != params[i] {",
          "243:                                 errors.push(format!(",
          "244:                                     \"Type mismatch in params in exported func \\\"{}\\\": in argument {}, expected {} found {}\",",
          "245:                                     &key, i + 1, params[i], t",
          "246:                                 ));",
          "247:                             }",
          "248:                         }",
          "249:                         Err(e) => errors",
          "250:                             .push(format!(\"Invalid type in exported func \\\"{}\\\": {}\", &key, e)),",
          "251:                     }",
          "252:                 }",
          "253:                 for (i, ret) in type_sig",
          "254:                     .returns",
          "255:                     .iter()",
          "256:                     .cloned()",
          "257:                     .map(wasmparser_type_into_wasm_type)",
          "258:                     .enumerate()",
          "259:                 {",
          "260:                     match ret {",
          "261:                         Ok(t) => {",
          "262:                             if result.get(i).is_none() {",
          "263:                                 errors.push(format!(\"Found {} returns but the interface only expects {} for exported function \\\"{}\\\"\", i, params.len(), &key));",
          "264:                                 continue 'export_loop;",
          "265:                             }",
          "267:                             if t != result[i] {",
          "268:                                 errors.push(format!(",
          "269:                                     \"Type mismatch in returns in exported func \\\"{}\\\": in return {}, expected {} found {}\",",
          "270:                                     &key, i + 1, result[i], t",
          "271:                                 ));",
          "272:                             }",
          "273:                         }",
          "274:                         Err(e) => errors",
          "275:                             .push(format!(\"Invalid type in exported func \\\"{}\\\": {}\", &key, e)),",
          "276:                     }",
          "277:                 }",
          "278:             }",
          "279:         }",
          "280:     }",
          "281: }",
          "285: fn validate_export_globals(",
          "286:     export_globals: &HashMap<String, u32>,",
          "287:     global_types: &Vec<GlobalType>,",
          "288:     interface: &Interface,",
          "289:     errors: &mut Vec<String>,",
          "290: ) {",
          "291:     for (key, val) in export_globals.iter() {",
          "292:         if let Some(Export::Global { var_type, .. }) = interface.exports.get(key) {",
          "293:             if global_types.get(*val as usize).is_none() {",
          "294:                 errors.push(format!(",
          "295:                     \"Invalid wasm, expected {} global types, found {}\",",
          "296:                     val,",
          "297:                     global_types.len()",
          "298:                 ));",
          "299:             }",
          "300:             match wasmparser_type_into_wasm_type(global_types[*val as usize].content_type) {",
          "301:                 Ok(t) => {",
          "302:                     if *var_type != t {",
          "303:                         errors.push(format!(",
          "304:                             \"Type mismatch in global export {}: expected {} found {}\",",
          "305:                             &key, var_type, t",
          "306:                         ));",
          "307:                     }",
          "308:                 }",
          "309:                 Err(e) => errors.push(format!(\"In global export {}: {}\", &key, e)),",
          "310:             }",
          "311:         }",
          "312:     }",
          "313: }",
          "320: fn wasmparser_type_into_wasm_type(ty: wasmparser::Type) -> Result<WasmType, String> {",
          "321:     use wasmparser::Type;",
          "322:     Ok(match ty {",
          "323:         Type::I32 => WasmType::I32,",
          "324:         Type::I64 => WasmType::I64,",
          "325:         Type::F32 => WasmType::F32,",
          "326:         Type::F64 => WasmType::F64,",
          "327:         e => {",
          "328:             return Err(format!(\"Invalid type found: {:?}\", e));",
          "329:         }",
          "330:     })",
          "331: }",
          "333: #[cfg(test)]",
          "334: mod validation_tests {",
          "335:     use super::*;",
          "336:     use crate::parser;",
          "338:     #[test]",
          "339:     fn global_imports() {",
          "340:         const WAT: &str = r#\"(module",
          "341: (type $t0 (func (param i32 i64)))",
          "342: (global $length (import \"env\" \"length\") i32)",
          "343: (import \"env\" \"do_panic\" (func $do_panic (type $t0)))",
          "344: )\"#;",
          "345:         let wasm = wat::parse_str(WAT).unwrap();",
          "347:         let interface_src = r#\"",
          "348: (interface",
          "349: (func (import \"env\" \"do_panic\") (param i32 i64))",
          "350: (global (import \"env\" \"length\") (type i32)))\"#;",
          "351:         let interface = parser::parse_interface(interface_src).unwrap();",
          "353:         let result = validate_wasm_and_report_errors(&wasm[..], &interface);",
          "355:         assert!(result.is_ok());",
          "358:         let interface_src = r#\"",
          "359: (interface",
          "360: (func (import \"env\" \"do_panic\") (param i32 i64))",
          "361: (global (import \"env\" \"length\") (type i64)))\"#;",
          "362:         let interface = parser::parse_interface(interface_src).unwrap();",
          "364:         let result = validate_wasm_and_report_errors(&wasm[..], &interface);",
          "366:         assert!(",
          "367:             result.is_err(),",
          "368:             \"global import type mismatch causes an error\"",
          "369:         );",
          "372:         let interface_src = r#\"",
          "373: (interface",
          "374: (func (import \"env\" \"do_panic\") (param i64))",
          "375: (global (import \"env\" \"length\") (type i32)))\"#;",
          "376:         let interface = parser::parse_interface(interface_src).unwrap();",
          "378:         let result = validate_wasm_and_report_errors(&wasm[..], &interface);",
          "380:         assert!(",
          "381:             result.is_err(),",
          "382:             \"function import type mismatch causes an error\"",
          "383:         );",
          "386:         let interface_src = r#\"",
          "387: (interface",
          "388: (func (import \"env\" \"do_panic\") (param i64))",
          "389: (global (import \"env\" \"length_plus_plus\") (type i32)))\"#;",
          "390:         let interface = parser::parse_interface(interface_src).unwrap();",
          "392:         let result = validate_wasm_and_report_errors(&wasm[..], &interface);",
          "394:         assert!(",
          "395:             result.is_err(),",
          "396:             \"all imports must be covered by the interface\"",
          "397:         );",
          "398:     }",
          "400:     #[test]",
          "401:     fn global_exports() {",
          "402:         const WAT: &str = r#\"(module",
          "403: (func (export \"as-set_local-first\") (param i32) (result i32)",
          "404:   (nop) (i32.const 2) (set_local 0) (get_local 0))",
          "405: (global (export \"num_tries\") i64 (i64.const 0))",
          "406: )\"#;",
          "407:         let wasm = wat::parse_str(WAT).unwrap();",
          "409:         let interface_src = r#\"",
          "410: (interface",
          "411: (func (export \"as-set_local-first\") (param i32) (result i32))",
          "412: (global (export \"num_tries\") (type i64)))\"#;",
          "413:         let interface = parser::parse_interface(interface_src).unwrap();",
          "415:         let result = validate_wasm_and_report_errors(&wasm[..], &interface);",
          "417:         assert!(result.is_ok());",
          "420:         let interface_src = r#\"",
          "421: (interface",
          "422: (func (export \"as-set_local-first\") (param i32) (result i32))",
          "423: (global (export \"num_tries\") (type f32)))\"#;",
          "424:         let interface = parser::parse_interface(interface_src).unwrap();",
          "426:         let result = validate_wasm_and_report_errors(&wasm[..], &interface);",
          "428:         assert!(",
          "429:             result.is_err(),",
          "430:             \"global export type mismatch causes an error\"",
          "431:         );",
          "434:         let interface_src = r#\"",
          "435: (interface",
          "436: (func (export \"as-set_local-first\") (param i64) (result i64))",
          "437: (global (export \"num_tries\") (type i64)))\"#;",
          "438:         let interface = parser::parse_interface(interface_src).unwrap();",
          "440:         let result = validate_wasm_and_report_errors(&wasm[..], &interface);",
          "442:         assert!(",
          "443:             result.is_err(),",
          "444:             \"function export type mismatch causes an error\"",
          "445:         );",
          "448:         let interface_src = r#\"",
          "449: (interface",
          "450: (func (export \"as-set_local-first\") (param i64) (result i64))",
          "451: (global (export \"numb_trees\") (type i64)))\"#;",
          "452:         let interface = parser::parse_interface(interface_src).unwrap();",
          "454:         let result = validate_wasm_and_report_errors(&wasm[..], &interface);",
          "456:         assert!(result.is_err(), \"missing a required export is an error\");",
          "457:     }",
          "458: }",
          "460: #[derive(Debug)]",
          "461: pub enum WasmValidationError {",
          "462:     InvalidWasm { error: String },",
          "463:     InterfaceViolated { errors: Vec<String> },",
          "464:     UnsupportedType { error: String },",
          "465: }",
          "",
          "---------------"
        ],
        "tests/integration/cli/tests/init.rs||tests/integration/cli/tests/init.rs": [
          "File: tests/integration/cli/tests/init.rs -> tests/integration/cli/tests/init.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use anyhow::bail;",
          "2: use std::path::PathBuf;",
          "3: use std::process::{Command, Stdio};",
          "4: use wasmer_integration_tests_cli::{get_repo_root_path, get_wasmer_path, ASSET_PATH, C_ASSET_PATH};",
          "6: macro_rules! check_output {",
          "7:     ($output:expr) => {",
          "8:         let stdout_output = std::str::from_utf8(&$output.stdout).unwrap();",
          "9:         let stderr_output = std::str::from_utf8(&$output.stdout).unwrap();",
          "10:         if !$output.status.success() {",
          "11:             bail!(\"wasmer init failed with: stdout: {stdout_output}\\n\\nstderr: {stderr_output}\");",
          "12:         }",
          "13:     };",
          "14: }",
          "17: #[test]",
          "18: fn wasmer_init_works_1() -> anyhow::Result<()> {",
          "19:     let tempdir = tempfile::tempdir()?;",
          "20:     let path = tempdir.path();",
          "21:     let path = path.join(\"testfirstproject\");",
          "22:     std::fs::create_dir_all(&path)?;",
          "24:     if std::env::var(\"GITHUB_TOKEN\").is_err() {",
          "25:         return Ok(());",
          "26:     }",
          "28:     let wapm_dev_token = std::env::var(\"WAPM_DEV_TOKEN\").ok();",
          "29:     println!(\"wapm dev token ok...\");",
          "31:     if let Some(token) = wapm_dev_token {",
          "32:         let output = Command::new(get_wasmer_path())",
          "33:             .arg(\"login\")",
          "34:             .arg(\"--registry\")",
          "35:             .arg(\"wapm.dev\")",
          "36:             .arg(token)",
          "37:             .stdout(Stdio::inherit())",
          "38:             .stderr(Stdio::inherit())",
          "39:             .stdin(Stdio::null())",
          "40:             .output()?;",
          "41:         check_output!(output);",
          "42:     }",
          "44:     println!(\"wasmer login ok!\");",
          "46:     let output = Command::new(get_wasmer_path())",
          "47:         .arg(\"init\")",
          "48:         .current_dir(&path)",
          "49:         .output()?;",
          "50:     check_output!(output);",
          "52:     let read = std::fs::read_to_string(path.join(\"wasmer.toml\"))",
          "53:         .unwrap()",
          "54:         .lines()",
          "55:         .collect::<Vec<_>>()",
          "56:         .join(\"\\n\");",
          "57:     let target = include_str!(\"./fixtures/init1.toml\")",
          "58:         .lines()",
          "59:         .collect::<Vec<_>>()",
          "60:         .join(\"\\n\");",
          "61:     pretty_assertions::assert_eq!(read.trim(), target.trim());",
          "62:     Ok(())",
          "63: }",
          "65: #[test]",
          "66: fn wasmer_init_works_2() -> anyhow::Result<()> {",
          "67:     let tempdir = tempfile::tempdir()?;",
          "68:     let path = tempdir.path();",
          "69:     let path = path.join(\"testfirstproject\");",
          "70:     std::fs::create_dir_all(&path)?;",
          "71:     std::fs::write(",
          "72:         path.join(\"Cargo.toml\"),",
          "73:         include_bytes!(\"./fixtures/init2.toml\"),",
          "74:     )?;",
          "75:     std::fs::create_dir_all(path.join(\"src\"))?;",
          "76:     std::fs::write(path.join(\"src\").join(\"main.rs\"), b\"fn main() { }\")?;",
          "78:     if std::env::var(\"GITHUB_TOKEN\").is_err() {",
          "79:         return Ok(());",
          "80:     }",
          "82:     let wapm_dev_token = std::env::var(\"WAPM_DEV_TOKEN\").ok();",
          "83:     println!(\"wapm dev token ok...\");",
          "85:     if let Some(token) = wapm_dev_token.as_ref() {",
          "86:         let mut cmd = Command::new(get_wasmer_path());",
          "87:         cmd.arg(\"login\");",
          "88:         cmd.arg(\"--registry\");",
          "89:         cmd.arg(\"wapm.dev\");",
          "90:         cmd.arg(token);",
          "91:         cmd.stdout(Stdio::inherit());",
          "92:         cmd.stderr(Stdio::inherit());",
          "93:         cmd.stdin(Stdio::null());",
          "94:         let output = cmd.output()?;",
          "95:         check_output!(output);",
          "96:     }",
          "98:     println!(\"wasmer login ok!\");",
          "100:     let output = Command::new(get_wasmer_path())",
          "101:         .arg(\"init\")",
          "102:         .stdout(Stdio::inherit())",
          "103:         .stderr(Stdio::inherit())",
          "104:         .current_dir(&path)",
          "105:         .output()?;",
          "106:     check_output!(output);",
          "108:     pretty_assertions::assert_eq!(",
          "109:         std::fs::read_to_string(path.join(\"Cargo.toml\")).unwrap(),",
          "110:         include_str!(\"./fixtures/init2.toml\")",
          "111:     );",
          "113:     println!(\"ok 1\");",
          "115:     let read = std::fs::read_to_string(path.join(\"wasmer.toml\"))",
          "116:         .unwrap()",
          "117:         .lines()",
          "118:         .collect::<Vec<_>>()",
          "119:         .join(\"\\n\");",
          "120:     let target = include_str!(\"./fixtures/init4.toml\")",
          "121:         .lines()",
          "122:         .collect::<Vec<_>>()",
          "123:         .join(\"\\n\");",
          "124:     pretty_assertions::assert_eq!(read.trim(), target.trim());",
          "126:     Ok(())",
          "127: }",
          "",
          "---------------"
        ],
        "tests/integration/cli/tests/publish.rs||tests/integration/cli/tests/publish.rs": [
          "File: tests/integration/cli/tests/publish.rs -> tests/integration/cli/tests/publish.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use anyhow::bail;",
          "2: use std::path::PathBuf;",
          "3: use std::process::{Command, Stdio};",
          "4: use wasmer_integration_tests_cli::{get_repo_root_path, get_wasmer_path, ASSET_PATH, C_ASSET_PATH};",
          "6: fn create_exe_test_wasm_path() -> String {",
          "7:     format!(\"{}/{}\", C_ASSET_PATH, \"qjs.wasm\")",
          "8: }",
          "10: #[test]",
          "11: fn wasmer_publish() -> anyhow::Result<()> {",
          "13:     if std::env::var(\"GITHUB_TOKEN\").is_err() {",
          "14:         return Ok(());",
          "15:     }",
          "17:     let wapm_dev_token = std::env::var(\"WAPM_DEV_TOKEN\").ok();",
          "18:     let tempdir = tempfile::tempdir()?;",
          "19:     let path = tempdir.path();",
          "20:     let username = \"ciuser\";",
          "22:     let random1 = format!(\"{}\", rand::random::<u32>());",
          "23:     let random2 = format!(\"{}\", rand::random::<u32>());",
          "24:     let random3 = format!(\"{}\", rand::random::<u32>());",
          "26:     std::fs::copy(create_exe_test_wasm_path(), path.join(\"largewasmfile.wasm\")).unwrap();",
          "27:     std::fs::write(",
          "28:         path.join(\"wasmer.toml\"),",
          "29:         include_str!(\"./fixtures/init6.toml\")",
          "30:             .replace(\"WAPMUSERNAME\", username) // <-- TODO!",
          "31:             .replace(\"RANDOMVERSION1\", &random1)",
          "32:             .replace(\"RANDOMVERSION2\", &random2)",
          "33:             .replace(\"RANDOMVERSION3\", &random3),",
          "34:     )?;",
          "36:     let mut cmd = std::process::Command::new(get_wasmer_path());",
          "37:     cmd.arg(\"publish\");",
          "38:     cmd.arg(\"--quiet\");",
          "39:     cmd.arg(\"--registry\");",
          "40:     cmd.arg(\"wapm.dev\");",
          "41:     cmd.arg(path);",
          "43:     if let Some(token) = wapm_dev_token {",
          "44:         cmd.arg(\"--token\");",
          "45:         cmd.arg(token);",
          "46:     }",
          "48:     let output = cmd.stdin(Stdio::null()).output().unwrap();",
          "50:     let stdout = String::from_utf8_lossy(&output.stdout);",
          "51:     let stderr = String::from_utf8_lossy(&output.stderr);",
          "53:     assert_eq!(stdout, format!(\"Successfully published package `{username}/largewasmfile@{random1}.{random2}.{random3}`\\n\"), \"failed to publish: {cmd:?}: {stderr}\");",
          "55:     println!(\"wasmer publish ok! test done.\");",
          "57:     Ok(())",
          "58: }",
          "62: #[test]",
          "63: fn wasmer_init_publish() -> anyhow::Result<()> {",
          "65:     if std::env::var(\"GITHUB_TOKEN\").is_err() {",
          "66:         return Ok(());",
          "67:     }",
          "69:     let wapm_dev_token = std::env::var(\"WAPM_DEV_TOKEN\").ok();",
          "70:     let tempdir = tempfile::tempdir()?;",
          "71:     let path = tempdir.path();",
          "72:     let username = \"ciuser\";",
          "74:     let random1 = format!(\"{}\", rand::random::<u32>());",
          "75:     let random2 = format!(\"{}\", rand::random::<u32>());",
          "76:     let random3 = format!(\"{}\", rand::random::<u32>());",
          "78:     let mut cmd = std::process::Command::new(\"cargo\");",
          "79:     cmd.arg(\"init\");",
          "80:     cmd.arg(\"--bin\");",
          "81:     cmd.arg(path.join(\"randomversion\"));",
          "83:     let _ = cmd",
          "84:         .stdin(Stdio::null())",
          "85:         .stdout(Stdio::inherit())",
          "86:         .stderr(Stdio::inherit())",
          "87:         .output()",
          "88:         .unwrap();",
          "90:     let mut cmd = std::process::Command::new(\"cargo\");",
          "91:     cmd.arg(\"build\");",
          "92:     cmd.arg(\"--release\");",
          "93:     cmd.arg(\"--target\");",
          "94:     cmd.arg(\"wasm32-wasi\");",
          "95:     cmd.arg(\"--manifest-path\");",
          "96:     cmd.arg(path.join(\"randomversion\").join(\"Cargo.toml\"));",
          "98:     let _ = cmd",
          "99:         .stdin(Stdio::null())",
          "100:         .stdout(Stdio::inherit())",
          "101:         .stderr(Stdio::inherit())",
          "102:         .output()",
          "103:         .unwrap();",
          "106:     let mut cmd = std::process::Command::new(get_wasmer_path());",
          "107:     cmd.arg(\"init\");",
          "108:     cmd.arg(\"--namespace\");",
          "109:     cmd.arg(username);",
          "110:     cmd.arg(\"--version\");",
          "111:     cmd.arg(format!(\"{random1}.{random2}.{random3}\"));",
          "112:     cmd.arg(path.join(\"randomversion\"));",
          "114:     let _ = cmd",
          "115:         .stdin(Stdio::null())",
          "116:         .stdout(Stdio::inherit())",
          "117:         .stderr(Stdio::inherit())",
          "118:         .output()",
          "119:         .unwrap();",
          "121:     let s = std::fs::read_to_string(path.join(\"randomversion\").join(\"wasmer.toml\")).unwrap();",
          "123:     println!(\"{s}\");",
          "126:     let mut cmd = std::process::Command::new(get_wasmer_path());",
          "127:     cmd.arg(\"publish\");",
          "128:     cmd.arg(\"--quiet\");",
          "129:     cmd.arg(\"--registry\");",
          "130:     cmd.arg(\"wapm.dev\");",
          "131:     cmd.arg(path.join(\"randomversion\"));",
          "133:     if let Some(token) = wapm_dev_token {",
          "134:         cmd.arg(\"--token\");",
          "135:         cmd.arg(token);",
          "136:     }",
          "138:     let output = cmd.stdin(Stdio::null()).output().unwrap();",
          "140:     let stdout = String::from_utf8_lossy(&output.stdout);",
          "141:     let stderr = String::from_utf8_lossy(&output.stderr);",
          "143:     assert_eq!(stdout, format!(\"Successfully published package `{username}/randomversion@{random1}.{random2}.{random3}`\\n\"), \"failed to publish: {cmd:?}: {stderr}\");",
          "145:     println!(\"wasmer init publish ok! test done.\");",
          "147:     Ok(())",
          "148: }",
          "",
          "---------------"
        ],
        "tests/integration/cli/tests/run.rs||tests/integration/cli/tests/run.rs": [
          "File: tests/integration/cli/tests/run.rs -> tests/integration/cli/tests/run.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "353:     std::fs::copy(wasi_test_wasm_path(), &qjs_path)?;",
          "354:     std::fs::copy(",
          "357:     )?;",
          "359:     assert!(temp_dir.path().exists());",
          "361:     assert!(temp_dir.path().join(\"qjs.wasm\").exists());",
          "",
          "[Removed Lines]",
          "355:         format!(\"{}/{}\", C_ASSET_PATH, \"qjs-wapm.toml\"),",
          "356:         temp_dir.path().join(\"wapm.toml\"),",
          "360:     assert!(temp_dir.path().join(\"wapm.toml\").exists());",
          "",
          "[Added Lines]",
          "355:         format!(\"{}/{}\", C_ASSET_PATH, \"qjs-wasmer.toml\"),",
          "356:         temp_dir.path().join(\"wasmer.toml\"),",
          "360:     assert!(temp_dir.path().join(\"wasmer.toml\").exists());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d8f728c17ea7c12eaa3d79cbf4323a421773db4",
      "candidate_info": {
        "commit_hash": "1d8f728c17ea7c12eaa3d79cbf4323a421773db4",
        "repo": "wasmerio/wasmer",
        "commit_url": "https://github.com/wasmerio/wasmer/commit/1d8f728c17ea7c12eaa3d79cbf4323a421773db4",
        "files": [
          "Cargo.lock",
          "lib/cli/Cargo.toml"
        ],
        "message": "deps: Upgrade wasmer-deploy-cli (#3984)",
        "before_after_code_files": [
          "Cargo.lock||Cargo.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Cargo.lock||Cargo.lock"
          ],
          "candidate": [
            "Cargo.lock||Cargo.lock"
          ]
        }
      },
      "candidate_diff": {
        "Cargo.lock||Cargo.lock": [
          "File: Cargo.lock -> Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "5526: [[package]]",
          "5527: name = \"wasmer-api\"",
          "5529: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5531: dependencies = [",
          "5532:  \"anyhow\",",
          "5533:  \"cynic\",",
          "",
          "[Removed Lines]",
          "5528: version = \"0.0.4\"",
          "5530: checksum = \"e473dc92e8deb9591c39ded19eeee073a430d57e5d400d4dd41547741637c697\"",
          "",
          "[Added Lines]",
          "5528: version = \"0.0.6\"",
          "5530: checksum = \"8e81498f7d0b81315e1e3fa8a1cd9c47afc49a3ef95b8649cf3f00cf9acf8492\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5799: [[package]]",
          "5800: name = \"wasmer-deploy-cli\"",
          "5802: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5804: dependencies = [",
          "5805:  \"anyhow\",",
          "5806:  \"clap 4.3.2\",",
          "",
          "[Removed Lines]",
          "5801: version = \"0.1.11\"",
          "5803: checksum = \"c2df6291d23380a00c8ee10a00c9e8d776c682d0a92011ac5f41fe9b7e2ad559\"",
          "",
          "[Added Lines]",
          "5801: version = \"0.1.13\"",
          "5803: checksum = \"27db0a74b90036f09c42d2240db4e5963bd5eace4b07fc0554346c85cef13dd9\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5835: [[package]]",
          "5836: name = \"wasmer-deploy-schema\"",
          "5838: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5840: dependencies = [",
          "5841:  \"anyhow\",",
          "5842:  \"bytesize\",",
          "",
          "[Removed Lines]",
          "5837: version = \"0.0.5\"",
          "5839: checksum = \"fa5f33abb644e7f4667c037b1f7183a25c6c88d748309ec480bdb6ee10b2da66\"",
          "",
          "[Added Lines]",
          "5837: version = \"0.0.6\"",
          "5839: checksum = \"3360b79a61ecaea4b852a8d9d25b2919e928ff50d878d273978ad7a9a601743c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5854: [[package]]",
          "5855: name = \"wasmer-deploy-util\"",
          "5857: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "5859: dependencies = [",
          "5860:  \"serde\",",
          "5861:  \"wasmer-deploy-schema\",",
          "",
          "[Removed Lines]",
          "5856: version = \"0.0.4\"",
          "5858: checksum = \"461a745d751ef47b1cb243c6e83e2bc4b180ca705b3b48328f8970415467a46e\"",
          "",
          "[Added Lines]",
          "5856: version = \"0.0.6\"",
          "5858: checksum = \"6240780022356b01ae81eafa5cf76d406af21d643395aac6fcf9525b0d0d6884\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}