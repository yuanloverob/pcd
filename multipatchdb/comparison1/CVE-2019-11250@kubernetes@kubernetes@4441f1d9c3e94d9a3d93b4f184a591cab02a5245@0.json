{
  "cve_id": "CVE-2019-11250",
  "cve_desc": "The Kubernetes client-go library logs request headers at verbosity levels of 7 or higher. This can disclose credentials to unauthorized users via logs or command output. Kubernetes components (such as kube-apiserver) prior to v1.16.0, which make use of basic or bearer token authentication, and run at high verbosity levels, are affected.",
  "repo": "kubernetes/kubernetes",
  "patch_hash": "4441f1d9c3e94d9a3d93b4f184a591cab02a5245",
  "patch_info": {
    "commit_hash": "4441f1d9c3e94d9a3d93b4f184a591cab02a5245",
    "repo": "kubernetes/kubernetes",
    "commit_url": "https://github.com/kubernetes/kubernetes/commit/4441f1d9c3e94d9a3d93b4f184a591cab02a5245",
    "files": [
      "staging/src/k8s.io/client-go/transport/round_trippers.go",
      "staging/src/k8s.io/client-go/transport/round_trippers_test.go",
      "test/e2e/kubectl/kubectl.go"
    ],
    "message": "Merge pull request #81330 from tedyu/hide-auth-hdr\n\nHide bearer token in logs",
    "before_after_code_files": [
      "staging/src/k8s.io/client-go/transport/round_trippers.go||staging/src/k8s.io/client-go/transport/round_trippers.go",
      "staging/src/k8s.io/client-go/transport/round_trippers_test.go||staging/src/k8s.io/client-go/transport/round_trippers_test.go",
      "test/e2e/kubectl/kubectl.go||test/e2e/kubectl/kubectl.go"
    ]
  },
  "patch_diff": {
    "staging/src/k8s.io/client-go/transport/round_trippers.go||staging/src/k8s.io/client-go/transport/round_trippers.go": [
      "File: staging/src/k8s.io/client-go/transport/round_trippers.go -> staging/src/k8s.io/client-go/transport/round_trippers.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "409:  }",
      "410: }",
      "412: func (rt *debuggingRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {",
      "413:  reqInfo := newRequestInfo(req)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "412: var knownAuthTypes = map[string]bool{",
      "413:  \"bearer\":    true,",
      "414:  \"basic\":     true,",
      "415:  \"negotiate\": true,",
      "416: }",
      "420: func maskValue(key string, value string) string {",
      "421:  if !strings.EqualFold(key, \"Authorization\") {",
      "422:   return value",
      "423:  }",
      "424:  if len(value) == 0 {",
      "425:   return \"\"",
      "426:  }",
      "427:  var authType string",
      "428:  if i := strings.Index(value, \" \"); i > 0 {",
      "429:   authType = value[0:i]",
      "430:  } else {",
      "431:   authType = value",
      "432:  }",
      "433:  if !knownAuthTypes[strings.ToLower(authType)] {",
      "434:   return \"<masked>\"",
      "435:  }",
      "436:  if len(value) > len(authType)+1 {",
      "437:   value = authType + \" <masked>\"",
      "438:  } else {",
      "439:   value = authType",
      "440:  }",
      "441:  return value",
      "442: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "423:   klog.Infof(\"Request Headers:\")",
      "424:   for key, values := range reqInfo.RequestHeaders {",
      "425:    for _, value := range values {",
      "426:     klog.Infof(\"    %s: %s\", key, value)",
      "427:    }",
      "428:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "458:     value = maskValue(key, value)",
      "",
      "---------------"
    ],
    "staging/src/k8s.io/client-go/transport/round_trippers_test.go||staging/src/k8s.io/client-go/transport/round_trippers_test.go": [
      "File: staging/src/k8s.io/client-go/transport/round_trippers_test.go -> staging/src/k8s.io/client-go/transport/round_trippers_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:  return rt.Response, rt.Err",
      "36: }",
      "38: func TestBearerAuthRoundTripper(t *testing.T) {",
      "39:  rt := &testRoundTripper{}",
      "40:  req := &http.Request{}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: func TestMaskValue(t *testing.T) {",
      "39:  tcs := []struct {",
      "40:   key      string",
      "41:   value    string",
      "42:   expected string",
      "43:  }{",
      "44:   {",
      "45:    key:      \"Authorization\",",
      "46:    value:    \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\",",
      "47:    expected: \"Basic <masked>\",",
      "48:   },",
      "49:   {",
      "50:    key:      \"Authorization\",",
      "51:    value:    \"basic\",",
      "52:    expected: \"basic\",",
      "53:   },",
      "54:   {",
      "55:    key:      \"Authorization\",",
      "56:    value:    \"Basic\",",
      "57:    expected: \"Basic\",",
      "58:   },",
      "59:   {",
      "60:    key:      \"Authorization\",",
      "61:    value:    \"Bearer cn389ncoiwuencr\",",
      "62:    expected: \"Bearer <masked>\",",
      "63:   },",
      "64:   {",
      "65:    key:      \"Authorization\",",
      "66:    value:    \"Bearer\",",
      "67:    expected: \"Bearer\",",
      "68:   },",
      "69:   {",
      "70:    key:      \"Authorization\",",
      "71:    value:    \"bearer\",",
      "72:    expected: \"bearer\",",
      "73:   },",
      "74:   {",
      "75:    key:      \"Authorization\",",
      "76:    value:    \"bearer \",",
      "77:    expected: \"bearer\",",
      "78:   },",
      "79:   {",
      "80:    key:      \"Authorization\",",
      "81:    value:    \"Negotiate cn389ncoiwuencr\",",
      "82:    expected: \"Negotiate <masked>\",",
      "83:   },",
      "84:   {",
      "85:    key:      \"ABC\",",
      "86:    value:    \"Negotiate cn389ncoiwuencr\",",
      "87:    expected: \"Negotiate cn389ncoiwuencr\",",
      "88:   },",
      "89:   {",
      "90:    key:      \"Authorization\",",
      "91:    value:    \"Negotiate\",",
      "92:    expected: \"Negotiate\",",
      "93:   },",
      "94:   {",
      "95:    key:      \"Authorization\",",
      "96:    value:    \"Negotiate \",",
      "97:    expected: \"Negotiate\",",
      "98:   },",
      "99:   {",
      "100:    key:      \"Authorization\",",
      "101:    value:    \"negotiate\",",
      "102:    expected: \"negotiate\",",
      "103:   },",
      "104:   {",
      "105:    key:      \"Authorization\",",
      "106:    value:    \"abc cn389ncoiwuencr\",",
      "107:    expected: \"<masked>\",",
      "108:   },",
      "109:   {",
      "110:    key:      \"Authorization\",",
      "111:    value:    \"\",",
      "112:    expected: \"\",",
      "113:   },",
      "114:  }",
      "115:  for _, tc := range tcs {",
      "116:   maskedValue := maskValue(tc.key, tc.value)",
      "117:   if tc.expected != maskedValue {",
      "118:    t.Errorf(\"unexpected value %s, given %s.\", maskedValue, tc.value)",
      "119:   }",
      "120:  }",
      "121: }",
      "",
      "---------------"
    ],
    "test/e2e/kubectl/kubectl.go||test/e2e/kubectl/kubectl.go": [
      "File: test/e2e/kubectl/kubectl.go -> test/e2e/kubectl/kubectl.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "722:    framework.ExpectError(err)",
      "723:    gomega.Expect(err).To(gomega.ContainSubstring(\"Using in-cluster namespace\"))",
      "724:    gomega.Expect(err).To(gomega.ContainSubstring(\"Using in-cluster configuration\"))",
      "726:    gomega.Expect(err).To(gomega.ContainSubstring(\"Response Status: 401 Unauthorized\"))",
      "728:    ginkgo.By(\"trying to use kubectl with invalid server\")",
      "",
      "[Removed Lines]",
      "725:    gomega.Expect(err).To(gomega.ContainSubstring(\"Authorization: Bearer invalid\"))",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "010d8382642119c73cb2405286b347c08d704287",
      "candidate_info": {
        "commit_hash": "010d8382642119c73cb2405286b347c08d704287",
        "repo": "kubernetes/kubernetes",
        "commit_url": "https://github.com/kubernetes/kubernetes/commit/010d8382642119c73cb2405286b347c08d704287",
        "files": [
          "staging/src/k8s.io/client-go/transport/round_trippers.go",
          "staging/src/k8s.io/client-go/transport/round_trippers_test.go",
          "test/e2e/kubectl/kubectl.go"
        ],
        "message": "Hide bearer token in logs",
        "before_after_code_files": [
          "staging/src/k8s.io/client-go/transport/round_trippers.go||staging/src/k8s.io/client-go/transport/round_trippers.go",
          "staging/src/k8s.io/client-go/transport/round_trippers_test.go||staging/src/k8s.io/client-go/transport/round_trippers_test.go",
          "test/e2e/kubectl/kubectl.go||test/e2e/kubectl/kubectl.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/kubernetes/kubernetes/pull/81330"
        ],
        "olp_code_files": {
          "patch": [
            "staging/src/k8s.io/client-go/transport/round_trippers.go||staging/src/k8s.io/client-go/transport/round_trippers.go",
            "staging/src/k8s.io/client-go/transport/round_trippers_test.go||staging/src/k8s.io/client-go/transport/round_trippers_test.go",
            "test/e2e/kubectl/kubectl.go||test/e2e/kubectl/kubectl.go"
          ],
          "candidate": [
            "staging/src/k8s.io/client-go/transport/round_trippers.go||staging/src/k8s.io/client-go/transport/round_trippers.go",
            "staging/src/k8s.io/client-go/transport/round_trippers_test.go||staging/src/k8s.io/client-go/transport/round_trippers_test.go",
            "test/e2e/kubectl/kubectl.go||test/e2e/kubectl/kubectl.go"
          ]
        }
      },
      "candidate_diff": {
        "staging/src/k8s.io/client-go/transport/round_trippers.go||staging/src/k8s.io/client-go/transport/round_trippers.go": [
          "File: staging/src/k8s.io/client-go/transport/round_trippers.go -> staging/src/k8s.io/client-go/transport/round_trippers.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:  }",
          "410: }",
          "412: func (rt *debuggingRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {",
          "413:  reqInfo := newRequestInfo(req)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412: var knownAuthTypes = map[string]bool{",
          "413:  \"bearer\":    true,",
          "414:  \"basic\":     true,",
          "415:  \"negotiate\": true,",
          "416: }",
          "420: func maskValue(key string, value string) string {",
          "421:  if !strings.EqualFold(key, \"Authorization\") {",
          "422:   return value",
          "423:  }",
          "424:  if len(value) == 0 {",
          "425:   return \"\"",
          "426:  }",
          "427:  var authType string",
          "428:  if i := strings.Index(value, \" \"); i > 0 {",
          "429:   authType = value[0:i]",
          "430:  } else {",
          "431:   authType = value",
          "432:  }",
          "433:  if !knownAuthTypes[strings.ToLower(authType)] {",
          "434:   return \"<masked>\"",
          "435:  }",
          "436:  if len(value) > len(authType)+1 {",
          "437:   value = authType + \" <masked>\"",
          "438:  } else {",
          "439:   value = authType",
          "440:  }",
          "441:  return value",
          "442: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:   klog.Infof(\"Request Headers:\")",
          "424:   for key, values := range reqInfo.RequestHeaders {",
          "425:    for _, value := range values {",
          "426:     klog.Infof(\"    %s: %s\", key, value)",
          "427:    }",
          "428:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:     value = maskValue(key, value)",
          "",
          "---------------"
        ],
        "staging/src/k8s.io/client-go/transport/round_trippers_test.go||staging/src/k8s.io/client-go/transport/round_trippers_test.go": [
          "File: staging/src/k8s.io/client-go/transport/round_trippers_test.go -> staging/src/k8s.io/client-go/transport/round_trippers_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  return rt.Response, rt.Err",
          "36: }",
          "38: func TestBearerAuthRoundTripper(t *testing.T) {",
          "39:  rt := &testRoundTripper{}",
          "40:  req := &http.Request{}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: func TestMaskValue(t *testing.T) {",
          "39:  tcs := []struct {",
          "40:   key      string",
          "41:   value    string",
          "42:   expected string",
          "43:  }{",
          "44:   {",
          "45:    key:      \"Authorization\",",
          "46:    value:    \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\",",
          "47:    expected: \"Basic <masked>\",",
          "48:   },",
          "49:   {",
          "50:    key:      \"Authorization\",",
          "51:    value:    \"basic\",",
          "52:    expected: \"basic\",",
          "53:   },",
          "54:   {",
          "55:    key:      \"Authorization\",",
          "56:    value:    \"Basic\",",
          "57:    expected: \"Basic\",",
          "58:   },",
          "59:   {",
          "60:    key:      \"Authorization\",",
          "61:    value:    \"Bearer cn389ncoiwuencr\",",
          "62:    expected: \"Bearer <masked>\",",
          "63:   },",
          "64:   {",
          "65:    key:      \"Authorization\",",
          "66:    value:    \"Bearer\",",
          "67:    expected: \"Bearer\",",
          "68:   },",
          "69:   {",
          "70:    key:      \"Authorization\",",
          "71:    value:    \"bearer\",",
          "72:    expected: \"bearer\",",
          "73:   },",
          "74:   {",
          "75:    key:      \"Authorization\",",
          "76:    value:    \"bearer \",",
          "77:    expected: \"bearer\",",
          "78:   },",
          "79:   {",
          "80:    key:      \"Authorization\",",
          "81:    value:    \"Negotiate cn389ncoiwuencr\",",
          "82:    expected: \"Negotiate <masked>\",",
          "83:   },",
          "84:   {",
          "85:    key:      \"ABC\",",
          "86:    value:    \"Negotiate cn389ncoiwuencr\",",
          "87:    expected: \"Negotiate cn389ncoiwuencr\",",
          "88:   },",
          "89:   {",
          "90:    key:      \"Authorization\",",
          "91:    value:    \"Negotiate\",",
          "92:    expected: \"Negotiate\",",
          "93:   },",
          "94:   {",
          "95:    key:      \"Authorization\",",
          "96:    value:    \"Negotiate \",",
          "97:    expected: \"Negotiate\",",
          "98:   },",
          "99:   {",
          "100:    key:      \"Authorization\",",
          "101:    value:    \"negotiate\",",
          "102:    expected: \"negotiate\",",
          "103:   },",
          "104:   {",
          "105:    key:      \"Authorization\",",
          "106:    value:    \"abc cn389ncoiwuencr\",",
          "107:    expected: \"<masked>\",",
          "108:   },",
          "109:   {",
          "110:    key:      \"Authorization\",",
          "111:    value:    \"\",",
          "112:    expected: \"\",",
          "113:   },",
          "114:  }",
          "115:  for _, tc := range tcs {",
          "116:   maskedValue := maskValue(tc.key, tc.value)",
          "117:   if tc.expected != maskedValue {",
          "118:    t.Errorf(\"unexpected value %s, given %s.\", maskedValue, tc.value)",
          "119:   }",
          "120:  }",
          "121: }",
          "",
          "---------------"
        ],
        "test/e2e/kubectl/kubectl.go||test/e2e/kubectl/kubectl.go": [
          "File: test/e2e/kubectl/kubectl.go -> test/e2e/kubectl/kubectl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "722:    framework.ExpectError(err)",
          "723:    gomega.Expect(err).To(gomega.ContainSubstring(\"Using in-cluster namespace\"))",
          "724:    gomega.Expect(err).To(gomega.ContainSubstring(\"Using in-cluster configuration\"))",
          "726:    gomega.Expect(err).To(gomega.ContainSubstring(\"Response Status: 401 Unauthorized\"))",
          "728:    ginkgo.By(\"trying to use kubectl with invalid server\")",
          "",
          "[Removed Lines]",
          "725:    gomega.Expect(err).To(gomega.ContainSubstring(\"Authorization: Bearer invalid\"))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33367206f8f0d13218fef9cc4a2f584e1f856943",
      "candidate_info": {
        "commit_hash": "33367206f8f0d13218fef9cc4a2f584e1f856943",
        "repo": "kubernetes/kubernetes",
        "commit_url": "https://github.com/kubernetes/kubernetes/commit/33367206f8f0d13218fef9cc4a2f584e1f856943",
        "files": [
          "test/e2e/kubectl/kubectl.go"
        ],
        "message": "Fix kubectl e2e test\n\nRemove check for the token in logs",
        "before_after_code_files": [
          "test/e2e/kubectl/kubectl.go||test/e2e/kubectl/kubectl.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "test/e2e/kubectl/kubectl.go||test/e2e/kubectl/kubectl.go"
          ],
          "candidate": [
            "test/e2e/kubectl/kubectl.go||test/e2e/kubectl/kubectl.go"
          ]
        }
      },
      "candidate_diff": {
        "test/e2e/kubectl/kubectl.go||test/e2e/kubectl/kubectl.go": [
          "File: test/e2e/kubectl/kubectl.go -> test/e2e/kubectl/kubectl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "718:    framework.ExpectError(err)",
          "719:    gomega.Expect(err).To(gomega.ContainSubstring(\"Using in-cluster namespace\"))",
          "720:    gomega.Expect(err).To(gomega.ContainSubstring(\"Using in-cluster configuration\"))",
          "722:    gomega.Expect(err).To(gomega.ContainSubstring(\"Response Status: 401 Unauthorized\"))",
          "724:    ginkgo.By(\"trying to use kubectl with invalid server\")",
          "",
          "[Removed Lines]",
          "721:    gomega.Expect(err).To(gomega.ContainSubstring(\"Authorization: Bearer invalid\"))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}