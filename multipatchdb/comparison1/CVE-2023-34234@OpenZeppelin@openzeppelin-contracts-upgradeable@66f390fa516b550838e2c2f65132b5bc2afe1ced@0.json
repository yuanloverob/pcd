{
  "cve_id": "CVE-2023-34234",
  "cve_desc": " OpenZeppelin Contracts is a library for smart contract development. By frontrunning the creation of a proposal, an attacker can become the proposer and gain the ability to cancel it. The attacker can do this repeatedly to try to prevent a proposal from being proposed at all. This impacts the `Governor` contract in v4.9.0 only, and the `GovernorCompatibilityBravo` contract since v4.3.0. This problem has been patched in 4.9.1 by introducing opt-in frontrunning protection. Users are advised to upgrade. Users unable to upgrade may submit the proposal creation transaction to an endpoint with frontrunning protection as a workaround.",
  "repo": "OpenZeppelin/openzeppelin-contracts-upgradeable",
  "patch_hash": "66f390fa516b550838e2c2f65132b5bc2afe1ced",
  "patch_info": {
    "commit_hash": "66f390fa516b550838e2c2f65132b5bc2afe1ced",
    "repo": "OpenZeppelin/openzeppelin-contracts-upgradeable",
    "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/66f390fa516b550838e2c2f65132b5bc2afe1ced",
    "files": [
      ".changeset/swift-bags-divide.md",
      "contracts/governance/GovernorUpgradeable.sol",
      "test/governance/Governor.t.sol",
      "test/governance/Governor.test.js"
    ],
    "message": "Transpile 33ff9b08",
    "before_after_code_files": [
      "contracts/governance/GovernorUpgradeable.sol||contracts/governance/GovernorUpgradeable.sol",
      "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
      "test/governance/Governor.test.js||test/governance/Governor.test.js"
    ]
  },
  "patch_diff": {
    "contracts/governance/GovernorUpgradeable.sol||contracts/governance/GovernorUpgradeable.sol": [
      "File: contracts/governance/GovernorUpgradeable.sol -> contracts/governance/GovernorUpgradeable.sol",
      "--- Hunk 1 ---",
      "[Context before]",
      "278:         string memory description",
      "279:     ) public virtual override returns (uint256) {",
      "280:         address proposer = _msgSender();",
      "283:         require(",
      "284:             getVotes(proposer, currentTimepoint - 1) >= proposalThreshold(),",
      "285:             \"Governor: proposer votes below proposal threshold\"",
      "",
      "[Removed Lines]",
      "281:         uint256 currentTimepoint = clock();",
      "",
      "[Added Lines]",
      "281:         require(_isValidDescriptionForProposer(proposer, description), \"Governor: proposer restricted\");",
      "283:         uint256 currentTimepoint = clock();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "641:         return this.onERC1155BatchReceived.selector;",
      "642:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "662:     function _isValidDescriptionForProposer(",
      "663:         address proposer,",
      "664:         string memory description",
      "665:     ) internal view virtual returns (bool) {",
      "666:         uint256 len = bytes(description).length;",
      "669:         if (len < 52) {",
      "670:             return true;",
      "671:         }",
      "674:         bytes12 marker;",
      "675:         assembly {",
      "682:             marker := mload(add(description, sub(len, 20)))",
      "683:         }",
      "686:         if (marker != bytes12(\"#proposer=0x\")) {",
      "687:             return true;",
      "688:         }",
      "691:         uint160 recovered = 0;",
      "692:         for (uint256 i = len - 40; i < len; ++i) {",
      "693:             (bool isHex, uint8 value) = _tryHexToUint(bytes(description)[i]);",
      "695:             if (!isHex) {",
      "696:                 return true;",
      "697:             }",
      "698:             recovered = (recovered << 4) | value;",
      "699:         }",
      "701:         return recovered == uint160(proposer);",
      "702:     }",
      "708:     function _tryHexToUint(bytes1 char) private pure returns (bool, uint8) {",
      "709:         uint8 c = uint8(char);",
      "710:         unchecked {",
      "712:             if (47 < c && c < 58) {",
      "713:                 return (true, c - 48);",
      "714:             }",
      "716:             else if (64 < c && c < 71) {",
      "717:                 return (true, c - 55);",
      "718:             }",
      "720:             else if (96 < c && c < 103) {",
      "721:                 return (true, c - 87);",
      "722:             }",
      "724:             else {",
      "725:                 return (false, 0);",
      "726:             }",
      "727:         }",
      "728:     }",
      "",
      "---------------"
    ],
    "test/governance/Governor.t.sol||test/governance/Governor.t.sol": [
      "File: test/governance/Governor.t.sol -> test/governance/Governor.t.sol",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: pragma solidity ^0.8.19;",
      "5: import \"forge-std/Test.sol\";",
      "6: import \"../../contracts/utils/Strings.sol\";",
      "7: import \"../../contracts/governance/Governor.sol\";",
      "9: contract GovernorInternalTest is Test, Governor {",
      "10:     constructor() Governor(\"\") {}",
      "12:     function testValidDescriptionForProposer(string memory description, address proposer, bool includeProposer) public {",
      "13:         if (includeProposer) {",
      "14:             description = string.concat(description, \"#proposer=\", Strings.toHexString(proposer));",
      "15:         }",
      "16:         assertTrue(_isValidDescriptionForProposer(proposer, description));",
      "17:     }",
      "19:     function testInvalidDescriptionForProposer(",
      "20:         string memory description,",
      "21:         address commitProposer,",
      "22:         address actualProposer",
      "23:     ) public {",
      "24:         vm.assume(commitProposer != actualProposer);",
      "25:         description = string.concat(description, \"#proposer=\", Strings.toHexString(commitProposer));",
      "26:         assertFalse(_isValidDescriptionForProposer(actualProposer, description));",
      "27:     }",
      "32:     function clock() public pure override returns (uint48) {}",
      "35:     function CLOCK_MODE() public pure override returns (string memory) {}",
      "38:     function COUNTING_MODE() public pure virtual override returns (string memory) {}",
      "40:     function votingDelay() public pure virtual override returns (uint256) {}",
      "42:     function votingPeriod() public pure virtual override returns (uint256) {}",
      "44:     function quorum(uint256) public pure virtual override returns (uint256) {}",
      "46:     function hasVoted(uint256, address) public pure virtual override returns (bool) {}",
      "48:     function _quorumReached(uint256) internal pure virtual override returns (bool) {}",
      "50:     function _voteSucceeded(uint256) internal pure virtual override returns (bool) {}",
      "52:     function _getVotes(address, uint256, bytes memory) internal pure virtual override returns (uint256) {}",
      "54:     function _countVote(uint256, address, uint8, uint256, bytes memory) internal virtual override {}",
      "55: }",
      "",
      "---------------"
    ],
    "test/governance/Governor.test.js||test/governance/Governor.test.js": [
      "File: test/governance/Governor.test.js -> test/governance/Governor.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "544:         });",
      "545:       });",
      "547:       describe('onlyGovernance updates', function () {",
      "548:         it('setVotingDelay is protected', async function () {",
      "549:           await expectRevert(this.mock.setVotingDelay('0'), 'Governor: onlyGovernance');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "547:       describe('frontrun protection using description suffix', function () {",
      "548:         describe('without protection', function () {",
      "549:           describe('without suffix', function () {",
      "550:             it('proposer can propose', async function () {",
      "551:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
      "552:             });",
      "554:             it('someone else can propose', async function () {",
      "555:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
      "556:             });",
      "557:           });",
      "559:           describe('with different suffix', function () {",
      "560:             beforeEach(async function () {",
      "561:               this.proposal = this.helper.setProposal(",
      "562:                 [",
      "563:                   {",
      "564:                     target: this.receiver.address,",
      "565:                     data: this.receiver.contract.methods.mockFunction().encodeABI(),",
      "566:                     value,",
      "567:                   },",
      "568:                 ],",
      "569:                 `<proposal description>#wrong-suffix=${proposer}`,",
      "570:               );",
      "571:             });",
      "573:             it('proposer can propose', async function () {",
      "574:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
      "575:             });",
      "577:             it('someone else can propose', async function () {",
      "578:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
      "579:             });",
      "580:           });",
      "582:           describe('with proposer suffix but bad address part', function () {",
      "583:             beforeEach(async function () {",
      "584:               this.proposal = this.helper.setProposal(",
      "585:                 [",
      "586:                   {",
      "587:                     target: this.receiver.address,",
      "588:                     data: this.receiver.contract.methods.mockFunction().encodeABI(),",
      "589:                     value,",
      "590:                   },",
      "591:                 ],",
      "592:                 `<proposal description>#proposer=0x3C44CdDdB6a900fa2b585dd299e03d12FA429XYZ`, // XYZ are not a valid hex char",
      "593:               );",
      "594:             });",
      "596:             it('propose can propose', async function () {",
      "597:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
      "598:             });",
      "600:             it('someone else can propose', async function () {",
      "601:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
      "602:             });",
      "603:           });",
      "604:         });",
      "606:         describe('with protection via proposer suffix', function () {",
      "607:           beforeEach(async function () {",
      "608:             this.proposal = this.helper.setProposal(",
      "609:               [",
      "610:                 {",
      "611:                   target: this.receiver.address,",
      "612:                   data: this.receiver.contract.methods.mockFunction().encodeABI(),",
      "613:                   value,",
      "614:                 },",
      "615:               ],",
      "616:               `<proposal description>#proposer=${proposer}`,",
      "617:             );",
      "618:           });",
      "620:           it('proposer can propose', async function () {",
      "621:             expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
      "622:           });",
      "624:           it('someone else cannot propose', async function () {",
      "625:             await expectRevert(this.helper.propose({ from: voter1 }), 'Governor: proposer restricted');",
      "626:           });",
      "627:         });",
      "628:       });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e29e42a529dafcdb5d792cfef97ce71ea0388045",
      "candidate_info": {
        "commit_hash": "e29e42a529dafcdb5d792cfef97ce71ea0388045",
        "repo": "OpenZeppelin/openzeppelin-contracts-upgradeable",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/e29e42a529dafcdb5d792cfef97ce71ea0388045",
        "files": [
          ".changeset/swift-bags-divide.md",
          "contracts/governance/GovernorUpgradeable.sol",
          "test/governance/Governor.t.sol",
          "test/governance/Governor.test.js"
        ],
        "message": "Transpile d9474327",
        "before_after_code_files": [
          "contracts/governance/GovernorUpgradeable.sol||contracts/governance/GovernorUpgradeable.sol",
          "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
          "test/governance/Governor.test.js||test/governance/Governor.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "contracts/governance/GovernorUpgradeable.sol||contracts/governance/GovernorUpgradeable.sol",
            "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
            "test/governance/Governor.test.js||test/governance/Governor.test.js"
          ],
          "candidate": [
            "contracts/governance/GovernorUpgradeable.sol||contracts/governance/GovernorUpgradeable.sol",
            "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
            "test/governance/Governor.test.js||test/governance/Governor.test.js"
          ]
        }
      },
      "candidate_diff": {
        "contracts/governance/GovernorUpgradeable.sol||contracts/governance/GovernorUpgradeable.sol": [
          "File: contracts/governance/GovernorUpgradeable.sol -> contracts/governance/GovernorUpgradeable.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:         string memory description",
          "279:     ) public virtual override returns (uint256) {",
          "280:         address proposer = _msgSender();",
          "283:         require(",
          "284:             getVotes(proposer, currentTimepoint - 1) >= proposalThreshold(),",
          "285:             \"Governor: proposer votes below proposal threshold\"",
          "",
          "[Removed Lines]",
          "281:         uint256 currentTimepoint = clock();",
          "",
          "[Added Lines]",
          "281:         require(_isValidDescriptionForProposer(proposer, description), \"Governor: proposer restricted\");",
          "283:         uint256 currentTimepoint = clock();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "635:         return this.onERC1155BatchReceived.selector;",
          "636:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656:     function _isValidDescriptionForProposer(",
          "657:         address proposer,",
          "658:         string memory description",
          "659:     ) internal view virtual returns (bool) {",
          "660:         uint256 len = bytes(description).length;",
          "663:         if (len < 52) {",
          "664:             return true;",
          "665:         }",
          "668:         bytes12 marker;",
          "669:         assembly {",
          "676:             marker := mload(add(description, sub(len, 20)))",
          "677:         }",
          "680:         if (marker != bytes12(\"#proposer=0x\")) {",
          "681:             return true;",
          "682:         }",
          "685:         uint160 recovered = 0;",
          "686:         for (uint256 i = len - 40; i < len; ++i) {",
          "687:             (bool isHex, uint8 value) = _tryHexToUint(bytes(description)[i]);",
          "689:             if (!isHex) {",
          "690:                 return true;",
          "691:             }",
          "692:             recovered = (recovered << 4) | value;",
          "693:         }",
          "695:         return recovered == uint160(proposer);",
          "696:     }",
          "702:     function _tryHexToUint(bytes1 char) private pure returns (bool, uint8) {",
          "703:         uint8 c = uint8(char);",
          "704:         unchecked {",
          "706:             if (47 < c && c < 58) {",
          "707:                 return (true, c - 48);",
          "708:             }",
          "710:             else if (64 < c && c < 71) {",
          "711:                 return (true, c - 55);",
          "712:             }",
          "714:             else if (96 < c && c < 103) {",
          "715:                 return (true, c - 87);",
          "716:             }",
          "718:             else {",
          "719:                 return (false, 0);",
          "720:             }",
          "721:         }",
          "722:     }",
          "",
          "---------------"
        ],
        "test/governance/Governor.t.sol||test/governance/Governor.t.sol": [
          "File: test/governance/Governor.t.sol -> test/governance/Governor.t.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: pragma solidity ^0.8.19;",
          "5: import \"forge-std/Test.sol\";",
          "6: import \"../../contracts/utils/Strings.sol\";",
          "7: import \"../../contracts/governance/Governor.sol\";",
          "9: contract GovernorInternalTest is Test, Governor {",
          "10:     constructor() Governor(\"\") {}",
          "12:     function testValidDescriptionForProposer(string memory description, address proposer, bool includeProposer) public {",
          "13:         if (includeProposer) {",
          "14:             description = string.concat(description, \"#proposer=\", Strings.toHexString(proposer));",
          "15:         }",
          "16:         assertTrue(_isValidDescriptionForProposer(proposer, description));",
          "17:     }",
          "19:     function testInvalidDescriptionForProposer(",
          "20:         string memory description,",
          "21:         address commitProposer,",
          "22:         address actualProposer",
          "23:     ) public {",
          "24:         vm.assume(commitProposer != actualProposer);",
          "25:         description = string.concat(description, \"#proposer=\", Strings.toHexString(commitProposer));",
          "26:         assertFalse(_isValidDescriptionForProposer(actualProposer, description));",
          "27:     }",
          "32:     function clock() public pure override returns (uint48) {}",
          "35:     function CLOCK_MODE() public pure override returns (string memory) {}",
          "38:     function COUNTING_MODE() public pure virtual override returns (string memory) {}",
          "40:     function votingDelay() public pure virtual override returns (uint256) {}",
          "42:     function votingPeriod() public pure virtual override returns (uint256) {}",
          "44:     function quorum(uint256) public pure virtual override returns (uint256) {}",
          "46:     function hasVoted(uint256, address) public pure virtual override returns (bool) {}",
          "48:     function _quorumReached(uint256) internal pure virtual override returns (bool) {}",
          "50:     function _voteSucceeded(uint256) internal pure virtual override returns (bool) {}",
          "52:     function _getVotes(address, uint256, bytes memory) internal pure virtual override returns (uint256) {}",
          "54:     function _countVote(uint256, address, uint8, uint256, bytes memory) internal virtual override {}",
          "55: }",
          "",
          "---------------"
        ],
        "test/governance/Governor.test.js||test/governance/Governor.test.js": [
          "File: test/governance/Governor.test.js -> test/governance/Governor.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "551:         });",
          "552:       });",
          "554:       describe('onlyGovernance updates', function () {",
          "555:         it('setVotingDelay is protected', async function () {",
          "556:           await expectRevert(this.mock.setVotingDelay('0'), 'Governor: onlyGovernance');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "554:       describe('frontrun protection using description suffix', function () {",
          "555:         describe('without protection', function () {",
          "556:           describe('without suffix', function () {",
          "557:             it('proposer can propose', async function () {",
          "558:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
          "559:             });",
          "561:             it('someone else can propose', async function () {",
          "562:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
          "563:             });",
          "564:           });",
          "566:           describe('with different suffix', function () {",
          "567:             beforeEach(async function () {",
          "568:               this.proposal = this.helper.setProposal(",
          "569:                 [",
          "570:                   {",
          "571:                     target: this.receiver.address,",
          "572:                     data: this.receiver.contract.methods.mockFunction().encodeABI(),",
          "573:                     value,",
          "574:                   },",
          "575:                 ],",
          "576:                 `<proposal description>#wrong-suffix=${proposer}`,",
          "577:               );",
          "578:             });",
          "580:             it('proposer can propose', async function () {",
          "581:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
          "582:             });",
          "584:             it('someone else can propose', async function () {",
          "585:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
          "586:             });",
          "587:           });",
          "589:           describe('with proposer suffix but bad address part', function () {",
          "590:             beforeEach(async function () {",
          "591:               this.proposal = this.helper.setProposal(",
          "592:                 [",
          "593:                   {",
          "594:                     target: this.receiver.address,",
          "595:                     data: this.receiver.contract.methods.mockFunction().encodeABI(),",
          "596:                     value,",
          "597:                   },",
          "598:                 ],",
          "599:                 `<proposal description>#proposer=0x3C44CdDdB6a900fa2b585dd299e03d12FA429XYZ`, // XYZ are not a valid hex char",
          "600:               );",
          "601:             });",
          "603:             it('propose can propose', async function () {",
          "604:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
          "605:             });",
          "607:             it('someone else can propose', async function () {",
          "608:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
          "609:             });",
          "610:           });",
          "611:         });",
          "613:         describe('with protection via proposer suffix', function () {",
          "614:           beforeEach(async function () {",
          "615:             this.proposal = this.helper.setProposal(",
          "616:               [",
          "617:                 {",
          "618:                   target: this.receiver.address,",
          "619:                   data: this.receiver.contract.methods.mockFunction().encodeABI(),",
          "620:                   value,",
          "621:                 },",
          "622:               ],",
          "623:               `<proposal description>#proposer=${proposer}`,",
          "624:             );",
          "625:           });",
          "627:           it('proposer can propose', async function () {",
          "628:             expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
          "629:           });",
          "631:           it('someone else cannot propose', async function () {",
          "632:             await expectRevert(this.helper.propose({ from: voter1 }), 'Governor: proposer restricted');",
          "633:           });",
          "634:         });",
          "635:       });",
          "",
          "---------------"
        ]
      }
    }
  ]
}