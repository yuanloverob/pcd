{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ebae9cc5684a01d1dc7e15771bb46489042a999d",
      "candidate_info": {
        "commit_hash": "ebae9cc5684a01d1dc7e15771bb46489042a999d",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/ebae9cc5684a01d1dc7e15771bb46489042a999d",
        "files": [
          ".changelog/24963.txt",
          ".go-version",
          "contributing/README.md",
          "scripts/linux-priv-go.sh",
          "scripts/release/mac-remote-build"
        ],
        "message": "build: update to go 1.23.5 (#24967)\n\nbackport of commit 7a450f54992c115dd9e9036642fe5932cb942967\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "scripts/linux-priv-go.sh||scripts/linux-priv-go.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scripts/linux-priv-go.sh||scripts/linux-priv-go.sh": [
          "File: scripts/linux-priv-go.sh -> scripts/linux-priv-go.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: esac",
          "23: function install_go() {",
          "25:  local download=\"https://storage.googleapis.com/golang/go${go_version}.linux-${ARCH}.tar.gz\"",
          "27:  if go version 2>&1 | grep -q \"${go_version}\"; then",
          "",
          "[Removed Lines]",
          "24:  local go_version=\"1.23.3\"",
          "",
          "[Added Lines]",
          "24:  local go_version=\"1.23.5\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64c0981ff2be4bd647bac4fcd0554db1cd328cd1",
      "candidate_info": {
        "commit_hash": "64c0981ff2be4bd647bac4fcd0554db1cd328cd1",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/64c0981ff2be4bd647bac4fcd0554db1cd328cd1",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "chore(deps): bump github.com/hashicorp/go-kms-wrapping/wrappers/azurekeyvault/v2 (#25068)\n\nBumps [github.com/hashicorp/go-kms-wrapping/wrappers/azurekeyvault/v2](https://github.com/hashicorp/go-kms-wrapping) from 2.0.11 to 2.0.13.\n- [Commits](https://github.com/hashicorp/go-kms-wrapping/compare/v2.0.11...v2.0.13)\n\n---\nupdated-dependencies:\n- dependency-name: github.com/hashicorp/go-kms-wrapping/wrappers/azurekeyvault/v2\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  github.com/hashicorp/go-getter v1.7.8",
          "63:  github.com/hashicorp/go-hclog v1.6.3",
          "64:  github.com/hashicorp/go-immutable-radix/v2 v2.1.0",
          "66:  github.com/hashicorp/go-kms-wrapping/wrappers/awskms/v2 v2.0.10",
          "68:  github.com/hashicorp/go-kms-wrapping/wrappers/gcpckms/v2 v2.0.12",
          "69:  github.com/hashicorp/go-kms-wrapping/wrappers/transit/v2 v2.0.12",
          "70:  github.com/hashicorp/go-memdb v1.3.4",
          "",
          "[Removed Lines]",
          "65:  github.com/hashicorp/go-kms-wrapping/v2 v2.0.16",
          "67:  github.com/hashicorp/go-kms-wrapping/wrappers/azurekeyvault/v2 v2.0.11",
          "",
          "[Added Lines]",
          "65:  github.com/hashicorp/go-kms-wrapping/v2 v2.0.17",
          "67:  github.com/hashicorp/go-kms-wrapping/wrappers/azurekeyvault/v2 v2.0.13",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:  cloud.google.com/go/storage v1.50.0 // indirect",
          "157:  dario.cat/mergo v1.0.1 // indirect",
          "158:  github.com/Azure/azure-sdk-for-go v68.0.0+incompatible // indirect",
          "162:  github.com/Azure/azure-sdk-for-go/sdk/keyvault/azkeys v0.10.0 // indirect",
          "163:  github.com/Azure/azure-sdk-for-go/sdk/keyvault/internal v0.7.1 // indirect",
          "164:  github.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 // indirect",
          "",
          "[Removed Lines]",
          "159:  github.com/Azure/azure-sdk-for-go/sdk/azcore v1.11.1 // indirect",
          "160:  github.com/Azure/azure-sdk-for-go/sdk/azidentity v1.7.0 // indirect",
          "161:  github.com/Azure/azure-sdk-for-go/sdk/internal v1.8.0 // indirect",
          "",
          "[Added Lines]",
          "159:  github.com/Azure/azure-sdk-for-go/sdk/azcore v1.17.0 // indirect",
          "160:  github.com/Azure/azure-sdk-for-go/sdk/azidentity v1.8.1 // indirect",
          "161:  github.com/Azure/azure-sdk-for-go/sdk/internal v1.10.0 // indirect",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:  github.com/Azure/go-autorest/autorest/validation v0.3.0 // indirect",
          "173:  github.com/Azure/go-autorest/logger v0.2.1 // indirect",
          "174:  github.com/Azure/go-autorest/tracing v0.6.0 // indirect",
          "176:  github.com/BurntSushi/toml v1.3.2 // indirect",
          "177:  github.com/DataDog/datadog-go v3.2.0+incompatible // indirect",
          "178:  github.com/GoogleCloudPlatform/opentelemetry-operations-go/detectors/gcp v1.25.0 // indirect",
          "",
          "[Removed Lines]",
          "175:  github.com/AzureAD/microsoft-authentication-library-for-go v1.2.2 // indirect",
          "",
          "[Added Lines]",
          "175:  github.com/AzureAD/microsoft-authentication-library-for-go v1.3.3 // indirect",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "251:  github.com/hashicorp/go-rootcerts v1.0.2 // indirect",
          "252:  github.com/hashicorp/go-safetemp v1.0.0 // indirect",
          "253:  github.com/hashicorp/go-secure-stdlib/awsutil v0.1.6 // indirect",
          "255:  github.com/hashicorp/go-secure-stdlib/reloadutil v0.1.1 // indirect",
          "256:  github.com/hashicorp/go-secure-stdlib/tlsutil v0.1.3 // indirect",
          "257:  github.com/hashicorp/go-set/v2 v2.1.0 // indirect",
          "",
          "[Removed Lines]",
          "254:  github.com/hashicorp/go-secure-stdlib/parseutil v0.1.8 // indirect",
          "",
          "[Added Lines]",
          "254:  github.com/hashicorp/go-secure-stdlib/parseutil v0.1.9 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "624: github.com/Azure/azure-sdk-for-go v44.0.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=",
          "625: github.com/Azure/azure-sdk-for-go v68.0.0+incompatible h1:fcYLmCpyNYRnvJbPerq7U0hS+6+I79yEDJBqVNcqUzU=",
          "626: github.com/Azure/azure-sdk-for-go v68.0.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=",
          "633: github.com/Azure/azure-sdk-for-go/sdk/keyvault/azkeys v0.10.0 h1:m/sWOGCREuSBqg2htVQTBY8nOZpyajYztF0vUvSZTuM=",
          "634: github.com/Azure/azure-sdk-for-go/sdk/keyvault/azkeys v0.10.0/go.mod h1:Pu5Zksi2KrU7LPbZbNINx6fuVrUp/ffvpxdDj+i8LeE=",
          "635: github.com/Azure/azure-sdk-for-go/sdk/keyvault/internal v0.7.1 h1:FbH3BbSb4bvGluTesZZ+ttN/MDsnMmQP36OSnDuSXqw=",
          "",
          "[Removed Lines]",
          "627: github.com/Azure/azure-sdk-for-go/sdk/azcore v1.11.1 h1:E+OJmp2tPvt1W+amx48v1eqbjDYsgN+RzP4q16yV5eM=",
          "628: github.com/Azure/azure-sdk-for-go/sdk/azcore v1.11.1/go.mod h1:a6xsAQUZg+VsS3TJ05SRp524Hs4pZ/AeFSr5ENf0Yjo=",
          "629: github.com/Azure/azure-sdk-for-go/sdk/azidentity v1.7.0 h1:tfLQ34V6F7tVSwoTf/4lH5sE0o6eCJuNDTmH09nDpbc=",
          "630: github.com/Azure/azure-sdk-for-go/sdk/azidentity v1.7.0/go.mod h1:9kIvujWAA58nmPmWB1m23fyWic1kYZMxD9CxaWn4Qpg=",
          "631: github.com/Azure/azure-sdk-for-go/sdk/internal v1.8.0 h1:jBQA3cKT4L2rWMpgE7Yt3Hwh2aUj8KXjIGLxjHeYNNo=",
          "632: github.com/Azure/azure-sdk-for-go/sdk/internal v1.8.0/go.mod h1:4OG6tQ9EOP/MT0NMjDlRzWoVFxfu9rN9B2X+tlSVktg=",
          "",
          "[Added Lines]",
          "627: github.com/Azure/azure-sdk-for-go/sdk/azcore v1.17.0 h1:g0EZJwz7xkXQiZAI5xi9f3WWFYBlX1CPTrR+NDToRkQ=",
          "628: github.com/Azure/azure-sdk-for-go/sdk/azcore v1.17.0/go.mod h1:XCW7KnZet0Opnr7HccfUw1PLc4CjHqpcaxW8DHklNkQ=",
          "629: github.com/Azure/azure-sdk-for-go/sdk/azidentity v1.8.1 h1:1mvYtZfWQAnwNah/C+Z+Jb9rQH95LPE2vlmMuWAHJk8=",
          "630: github.com/Azure/azure-sdk-for-go/sdk/azidentity v1.8.1/go.mod h1:75I/mXtme1JyWFtz8GocPHVFyH421IBoZErnO16dd0k=",
          "631: github.com/Azure/azure-sdk-for-go/sdk/azidentity/cache v0.3.1 h1:Bk5uOhSAenHyR5P61D/NzeQCv+4fEVV8mOkJ82NqpWw=",
          "632: github.com/Azure/azure-sdk-for-go/sdk/azidentity/cache v0.3.1/go.mod h1:QZ4pw3or1WPmRBxf0cHd1tknzrT54WPBOQoGutCPvSU=",
          "633: github.com/Azure/azure-sdk-for-go/sdk/internal v1.10.0 h1:ywEEhmNahHBihViHepv3xPBn1663uRv2t2q/ESv9seY=",
          "634: github.com/Azure/azure-sdk-for-go/sdk/internal v1.10.0/go.mod h1:iZDifYGJTIgIIkYRNWPENUnqx6bJ2xnSDFI2tjwZNuY=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "674: github.com/Azure/go-autorest/tracing v0.5.0/go.mod h1:r/s2XiOKccPW3HrqB+W0TQzfbtp2fGCgRFtBroKn4Dk=",
          "675: github.com/Azure/go-autorest/tracing v0.6.0 h1:TYi4+3m5t6K48TGI9AUdb+IzbnSxvnvUMfuitfgcfuo=",
          "676: github.com/Azure/go-autorest/tracing v0.6.0/go.mod h1:+vhtPC754Xsa23ID7GlGsrdKBpUA79WCAKPPZVC2DeU=",
          "679: github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=",
          "680: github.com/BurntSushi/toml v1.3.2 h1:o7IhLm0Msx3BaB+n3Ag7L8EVlByGnpq14C4YWiu/gL8=",
          "681: github.com/BurntSushi/toml v1.3.2/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=",
          "",
          "[Removed Lines]",
          "677: github.com/AzureAD/microsoft-authentication-library-for-go v1.2.2 h1:XHOnouVk1mxXfQidrMEnLlPk9UMeRtyBTnEFtxkV0kU=",
          "678: github.com/AzureAD/microsoft-authentication-library-for-go v1.2.2/go.mod h1:wP83P5OoQ5p6ip3ScPr0BAq0BvuPAvacpEuSzyouqAI=",
          "",
          "[Added Lines]",
          "679: github.com/AzureAD/microsoft-authentication-extensions-for-go/cache v0.1.1 h1:WJTmL004Abzc5wDB5VtZG2PJk5ndYDgVacGqfirKxjM=",
          "680: github.com/AzureAD/microsoft-authentication-extensions-for-go/cache v0.1.1/go.mod h1:tCcJZ0uHAmvjsVYzEFivsRTN00oz5BEsRgQHu5JZ9WE=",
          "681: github.com/AzureAD/microsoft-authentication-library-for-go v1.3.3 h1:H5xDQaE3XowWfhZRUpnfC+rGZMEVoSiji+b+/HFAPU4=",
          "682: github.com/AzureAD/microsoft-authentication-library-for-go v1.3.3/go.mod h1:wP83P5OoQ5p6ip3ScPr0BAq0BvuPAvacpEuSzyouqAI=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "861: github.com/denverdino/aliyungo v0.0.0-20190125010748-a747050bb1ba h1:p6poVbjHDkKa+wtC8frBMwQtT3BmqGYBjzMwJ63tuR4=",
          "862: github.com/denverdino/aliyungo v0.0.0-20190125010748-a747050bb1ba/go.mod h1:dV8lFg6daOBZbT6/BDGIz6Y3WFGn8juu6G+CQ6LHtl0=",
          "863: github.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=",
          "864: github.com/digitalocean/godo v1.7.5/go.mod h1:h6faOIcZ8lWIwNQ+DN7b3CgX4Kwby5T+nbpNqkUIozU=",
          "865: github.com/digitalocean/godo v1.10.0 h1:uW1/FcvZE/hoixnJcnlmIUvTVNdZCLjRLzmDtRi1xXY=",
          "866: github.com/digitalocean/godo v1.10.0/go.mod h1:h6faOIcZ8lWIwNQ+DN7b3CgX4Kwby5T+nbpNqkUIozU=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "868: github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f h1:lO4WD4F/rVNCu3HqELle0jiPLLBs70cWOduZpkS1E78=",
          "869: github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f/go.mod h1:cuUVRXasLTGF7a8hSLbxyZXjz+1KgoB3wDUb6vlszIc=",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1197: github.com/hashicorp/go-immutable-radix v1.3.1/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=",
          "1198: github.com/hashicorp/go-immutable-radix/v2 v2.1.0 h1:CUW5RYIcysz+D3B+l1mDeXrQ7fUvGGCwJfdASSzbrfo=",
          "1199: github.com/hashicorp/go-immutable-radix/v2 v2.1.0/go.mod h1:hgdqLXA4f6NIjRVisM1TJ9aOJVNRqKZj+xDGF6m7PBw=",
          "1202: github.com/hashicorp/go-kms-wrapping/wrappers/awskms/v2 v2.0.10 h1:YOSmJpqZt2X3KL0JUlKdih3WjpDlS9jQPyr6Etdh1GE=",
          "1203: github.com/hashicorp/go-kms-wrapping/wrappers/awskms/v2 v2.0.10/go.mod h1:eX4b0InOUfJ3NjfNWlJruBDT3rHXxOVw+7qNFmtjNbo=",
          "1206: github.com/hashicorp/go-kms-wrapping/wrappers/gcpckms/v2 v2.0.12 h1:PCqWzT/Hii0KL07JsBZ3lJbv/wx02IAHYlhWQq8rxRY=",
          "1207: github.com/hashicorp/go-kms-wrapping/wrappers/gcpckms/v2 v2.0.12/go.mod h1:HSaOaX/lv3ShCdilUYbOTPnSvmoZ9xtQhgw+8hYcZkg=",
          "1208: github.com/hashicorp/go-kms-wrapping/wrappers/transit/v2 v2.0.12 h1:E8pzzF7i44OZCYDol+U7VbTBmHe65/6dx1nYxS0P1k0=",
          "",
          "[Removed Lines]",
          "1200: github.com/hashicorp/go-kms-wrapping/v2 v2.0.16 h1:WZeXfD26QMWYC35at25KgE021SF9L3u9UMHK8fJAdV0=",
          "1201: github.com/hashicorp/go-kms-wrapping/v2 v2.0.16/go.mod h1:ZiKZctjRTLEppuRwrttWkp71VYMbTTCkazK4xT7U/NQ=",
          "1204: github.com/hashicorp/go-kms-wrapping/wrappers/azurekeyvault/v2 v2.0.11 h1:/7SKkYIhA8cr3l8m1EKT6Q90bPoSVqqVBuQ6HgoMIkw=",
          "1205: github.com/hashicorp/go-kms-wrapping/wrappers/azurekeyvault/v2 v2.0.11/go.mod h1:LepS5s6ESGE0qQMpYaui5lX+mQYeiYiy06VzwWRioO8=",
          "",
          "[Added Lines]",
          "1206: github.com/hashicorp/go-kms-wrapping/v2 v2.0.17 h1:UjjwDABbv2Usc+ESZTC4DXimCRIyWUDBJe/LOUFxe/M=",
          "1207: github.com/hashicorp/go-kms-wrapping/v2 v2.0.17/go.mod h1:M79wTAvbhiVLo1WmglCPBgI5CEETtZWh18B3eXipmFc=",
          "1210: github.com/hashicorp/go-kms-wrapping/wrappers/azurekeyvault/v2 v2.0.13 h1:Vh/i9Q0/2dpbK5FUPnpZJSIE6iPLe471Yvmi+CPnpS0=",
          "1211: github.com/hashicorp/go-kms-wrapping/wrappers/azurekeyvault/v2 v2.0.13/go.mod h1:fWxrv9YkAMqtsISde5mcutoMvuiH4kyg1AlDzzmqRh8=",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1236: github.com/hashicorp/go-secure-stdlib/listenerutil v0.1.9 h1:0S0ctJ7Ra8O7ap+/3fZUnzJ3VzJyirWS/WnNCuOYtZY=",
          "1237: github.com/hashicorp/go-secure-stdlib/listenerutil v0.1.9/go.mod h1:TNNdgtjLgVDbrgFcyCKrlAicIl3dZF94swJltyGUX2M=",
          "1238: github.com/hashicorp/go-secure-stdlib/parseutil v0.1.6/go.mod h1:QmrqtbKuxxSWTN3ETMPuB+VtEiBJ/A9XhoYGv8E1uD8=",
          "1241: github.com/hashicorp/go-secure-stdlib/reloadutil v0.1.1 h1:SMGUnbpAcat8rIKHkBPjfv81yC46a8eCNZ2hsR2l1EI=",
          "1242: github.com/hashicorp/go-secure-stdlib/reloadutil v0.1.1/go.mod h1:Ch/bf00Qnx77MZd49JRgHYqHQjtEmTgGU2faufpVZb0=",
          "1243: github.com/hashicorp/go-secure-stdlib/strutil v0.1.1/go.mod h1:gKOamz3EwoIoJq7mlMIRBpVTAUn8qPCrEclOKKWhD3U=",
          "",
          "[Removed Lines]",
          "1239: github.com/hashicorp/go-secure-stdlib/parseutil v0.1.8 h1:iBt4Ew4XEGLfh6/bPk4rSYmuZJGizr6/x/AEizP0CQc=",
          "1240: github.com/hashicorp/go-secure-stdlib/parseutil v0.1.8/go.mod h1:aiJI+PIApBRQG7FZTEBx5GiiX+HbOHilUdNxUZi4eV0=",
          "",
          "[Added Lines]",
          "1245: github.com/hashicorp/go-secure-stdlib/parseutil v0.1.9 h1:FW0YttEnUNDJ2WL9XcrrfteS1xW8u+sh4ggM8pN5isQ=",
          "1246: github.com/hashicorp/go-secure-stdlib/parseutil v0.1.9/go.mod h1:Ll013mhdmsVDuoIXVfBtvgGJsXDYkTw1kooNcoCXuE0=",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1349: github.com/jung-kurt/gofpdf v1.0.0/go.mod h1:7Id9E/uU8ce6rXgefFLlgrJj/GYY22cpxn+r32jIOes=",
          "1350: github.com/jung-kurt/gofpdf v1.0.3-0.20190309125859-24315acbbda5/go.mod h1:7Id9E/uU8ce6rXgefFLlgrJj/GYY22cpxn+r32jIOes=",
          "1351: github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51/go.mod h1:CzGEWj7cYgsdH8dAjBGEr58BoE7ScuLd+fwFZ44+/x8=",
          "1352: github.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=",
          "1353: github.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=",
          "1354: github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1358: github.com/keybase/go-keychain v0.0.0-20231219164618-57a3676c3af6 h1:IsMZxCuZqKuao2vNdfD82fjjgPLfyHLpR41Z88viRWs=",
          "1359: github.com/keybase/go-keychain v0.0.0-20231219164618-57a3676c3af6/go.mod h1:3VeWNIJaW+O5xpRQbPp0Ybqu1vJd/pm7s2F473HRrkw=",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1559: github.com/prometheus/procfs v0.6.0/go.mod h1:cz+aTbrPOrUb4q7XlbU9ygM+/jj0fzG6c1xBZuNvfVA=",
          "1560: github.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=",
          "1561: github.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=",
          "1562: github.com/remyoudompheng/bigfft v0.0.0-20200410134404-eec4a21b6bb0/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=",
          "1563: github.com/renier/xmlrpc v0.0.0-20170708154548-ce4a1a486c03 h1:Wdi9nwnhFNAlseAOekn6B5G/+GMtks9UKbvRU/CMM/o=",
          "1564: github.com/renier/xmlrpc v0.0.0-20170708154548-ce4a1a486c03/go.mod h1:gRAiPF5C5Nd0eyyRdqIu9qTiFSoZzpTq727b5B8fkkU=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1570: github.com/redis/go-redis/v9 v9.7.0 h1:HhLSs+B6O021gwzl+locl0zEDnyNkxMtf/Z3NNBMa9E=",
          "1571: github.com/redis/go-redis/v9 v9.7.0/go.mod h1:f6zhXITC7JUJIlPEiBOTXxJgPLdZcA93GewI7inzyWw=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6302273118fb8e35ea7196b1fd140ccfce6108b1",
      "candidate_info": {
        "commit_hash": "6302273118fb8e35ea7196b1fd140ccfce6108b1",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/6302273118fb8e35ea7196b1fd140ccfce6108b1",
        "files": [
          "drivers/docker/coordinator.go",
          "drivers/docker/driver.go",
          "drivers/docker/driver_test.go",
          "drivers/docker/network.go",
          "drivers/docker/utils.go",
          "drivers/docker/utils_test.go"
        ],
        "message": "backport of commit 5605f9630dd47dd8adf43d183684ca676c8020e7 (#25282)\n\nCo-authored-by: Juana De La Cuesta <juanita.delacuestamorales@hashicorp.com>",
        "before_after_code_files": [
          "drivers/docker/coordinator.go||drivers/docker/coordinator.go",
          "drivers/docker/driver.go||drivers/docker/driver.go",
          "drivers/docker/driver_test.go||drivers/docker/driver_test.go",
          "drivers/docker/network.go||drivers/docker/network.go",
          "drivers/docker/utils.go||drivers/docker/utils.go",
          "drivers/docker/utils_test.go||drivers/docker/utils_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/docker/coordinator.go||drivers/docker/coordinator.go": [
          "File: drivers/docker/coordinator.go -> drivers/docker/coordinator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:  pullTimeout, pullActivityTimeout time.Duration) (string, string, error) {",
          "190:  defer d.clearPullLogger(imageID)",
          "194:  pullCtx, cancel := context.WithTimeout(d.ctx, pullTimeout)",
          "197:  pm := newImageProgressManager(imageID, cancel, pullActivityTimeout, d.handlePullInactivity,",
          "198:   d.handlePullProgressReport, d.handleSlowPullProgressReport)",
          "199:  defer pm.stop()",
          "",
          "[Removed Lines]",
          "192:  repo, tag := parseDockerImage(imageID)",
          "195:  defer cancel()",
          "",
          "[Added Lines]",
          "192:  repo, tag, err := parseDockerImage(imageID)",
          "193:  if err != nil {",
          "194:   return \"\", \"\", fmt.Errorf(\"unable to pull docker image %q: %w\", imageID, err)",
          "195:  }",
          "",
          "---------------"
        ],
        "drivers/docker/driver.go||drivers/docker/driver.go": [
          "File: drivers/docker/driver.go -> drivers/docker/driver.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "613: func (d *Driver) createImage(task *drivers.TaskConfig, driverConfig *TaskConfig, client *client.Client) (string, string, error) {",
          "614:  image := driverConfig.Image",
          "",
          "[Removed Lines]",
          "615:  repo, tag := parseDockerImage(image)",
          "",
          "[Added Lines]",
          "615:  repo, tag, err := parseDockerImage(image)",
          "616:  if err != nil {",
          "617:   return \"\", \"\", fmt.Errorf(\"unable to create local docker image %q: %w\", image, err)",
          "618:  }",
          "",
          "---------------"
        ],
        "drivers/docker/driver_test.go||drivers/docker/driver_test.go": [
          "File: drivers/docker/driver_test.go -> drivers/docker/driver_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2852:  }",
          "2853: }",
          "2879: func TestDockerImageRef(t *testing.T) {",
          "2880:  ci.Parallel(t)",
          "2881:  tests := []struct {",
          "",
          "[Removed Lines]",
          "2855: func TestParseDockerImage(t *testing.T) {",
          "2856:  ci.Parallel(t)",
          "2858:  tests := []struct {",
          "2859:   Image string",
          "2860:   Repo  string",
          "2861:   Tag   string",
          "2862:  }{",
          "2863:   {\"host:5000/library/hello-world\", \"host:5000/library/hello-world\", \"latest\"},",
          "2864:   {\"host:5000/library/hello-world:1.0\", \"host:5000/library/hello-world\", \"1.0\"},",
          "2865:   {\"library/hello-world:1.0\", \"library/hello-world\", \"1.0\"},",
          "2866:   {\"library/hello-world\", \"library/hello-world\", \"latest\"},",
          "2867:   {\"library/hello-world:latest\", \"library/hello-world\", \"latest\"},",
          "2868:   {\"library/hello-world@sha256:f5233545e43561214ca4891fd1157e1c3c563316ed8e237750d59bde73361e77\", \"library/hello-world@sha256:f5233545e43561214ca4891fd1157e1c3c563316ed8e237750d59bde73361e77\", \"\"},",
          "2869:  }",
          "2870:  for _, test := range tests {",
          "2871:   t.Run(test.Image, func(t *testing.T) {",
          "2872:    repo, tag := parseDockerImage(test.Image)",
          "2873:    must.Eq(t, test.Repo, repo)",
          "2874:    must.Eq(t, test.Tag, tag)",
          "2875:   })",
          "2876:  }",
          "2877: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "drivers/docker/network.go||drivers/docker/network.go": [
          "File: drivers/docker/network.go -> drivers/docker/network.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: func (d *Driver) pullInfraImage(allocID string) error {",
          "189:  dockerClient, err := d.getDockerClient()",
          "190:  if err != nil {",
          "",
          "[Removed Lines]",
          "187:  repo, tag := parseDockerImage(d.config.InfraImage)",
          "",
          "[Added Lines]",
          "187:  repo, tag, err := parseDockerImage(d.config.InfraImage)",
          "188:  if err != nil {",
          "189:   return fmt.Errorf(\"unable to pull infra docker image %q: %w\", d.config.InfraImage, err)",
          "190:  }",
          "",
          "---------------"
        ],
        "drivers/docker/utils.go||drivers/docker/utils.go": [
          "File: drivers/docker/utils.go -> drivers/docker/utils.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"encoding/base64\"",
          "8:  \"encoding/json\"",
          "9:  \"fmt\"",
          "10:  \"os\"",
          "11:  \"os/exec\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:  \"github.com/docker/docker/registry\"",
          "22: )",
          "41:  }",
          "48:  }",
          "50: }",
          "52: func dockerImageRef(repo string, tag string) string {",
          "",
          "[Removed Lines]",
          "24: func parseDockerImage(image string) (repo, tag string) {",
          "26:  splitted := strings.SplitN(image, \"@\", 2)",
          "27:  repoTag := splitted[0]",
          "28:  idx := strings.LastIndex(repoTag, \":\")",
          "29:  if idx < 0 {",
          "30:   repo = repoTag",
          "31:  } else if t := repoTag[idx+1:]; !strings.Contains(t, \"/\") {",
          "32:   repo = repoTag[:idx]",
          "33:   tag = t",
          "34:  } else if t := repoTag[idx+1:]; strings.Contains(t, \"/\") {",
          "35:   repo = image",
          "36:   tag = \"latest\"",
          "37:  }",
          "39:  if tag != \"\" {",
          "40:   return repo, tag",
          "42:  if i := strings.IndexRune(image, '@'); i > -1 { // Has digest (@sha256:...)",
          "45:   repo = image",
          "46:  } else {",
          "47:   tag = \"latest\"",
          "49:  return repo, tag",
          "",
          "[Added Lines]",
          "25: var (",
          "26:  NoPathInImageErr = errors.New(\"does not match registry specification\")",
          "27: )",
          "29: func parseDockerImage(image string) (string, string, error) {",
          "30:  matches := reference.ReferenceRegexp.FindStringSubmatch(image)",
          "31:  if matches == nil {",
          "32:   return \"\", \"\", NoPathInImageErr",
          "35:  repo := matches[1]",
          "36:  tag := matches[2]",
          "37:  digest := matches[3]",
          "39:  if digest == \"\" {",
          "40:   if tag == \"\" {",
          "41:    tag = \"latest\"",
          "42:   }",
          "43:  } else {",
          "44:   repo = fmt.Sprintf(\"%s@%s\", repo, digest)",
          "47:   tag = \"\"",
          "50:  return repo, tag, nil",
          "",
          "---------------"
        ],
        "drivers/docker/utils_test.go||drivers/docker/utils_test.go": [
          "File: drivers/docker/utils_test.go -> drivers/docker/utils_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"testing\"",
          "9:  \"github.com/hashicorp/nomad/ci\"",
          "10:  \"github.com/stretchr/testify/require\"",
          "11: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  \"github.com/shoenig/test/must\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   })",
          "83:  }",
          "84: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: func TestParseDockerImage(t *testing.T) {",
          "88:  ci.Parallel(t)",
          "90:  tests := []struct {",
          "91:   Image  string",
          "92:   Repo   string",
          "93:   Tag    string",
          "94:   ExpErr error",
          "95:  }{",
          "96:   {\"host:5000/library/hello-world\", \"host:5000/library/hello-world\", \"latest\", nil},",
          "97:   {\"host:5000/library/hello-world:1.0\", \"host:5000/library/hello-world\", \"1.0\", nil},",
          "98:   {\"library/hello-world:1.0\", \"library/hello-world\", \"1.0\", nil},",
          "99:   {\"library/hello-world\", \"library/hello-world\", \"latest\", nil},",
          "100:   {\"library/hello-world:latest\", \"library/hello-world\", \"latest\", nil},",
          "101:   {\"library/hello-world@sha256:f5233545e43561214ca4891fd1157e1c3c563316ed8e237750d59bde73361e77\", \"library/hello-world@sha256:f5233545e43561214ca4891fd1157e1c3c563316ed8e237750d59bde73361e77\", \"\", nil},",
          "102:   {\"my-registry:9090/hello-world@sha256:c7e3309ebb8805855bc1ccc24d24588748710e43925b39e563bd5541cbcbad91\", \"my-registry:9090/hello-world@sha256:c7e3309ebb8805855bc1ccc24d24588748710e43925b39e563bd5541cbcbad91\", \"\", nil},",
          "103:   {\"my-registry:9090/hello-world:my-tag@sha256:c7e3309ebb8805855bc1ccc24d24588748710e43925b39e563bd5541cbcbad91\", \"my-registry:9090/hello-world@sha256:c7e3309ebb8805855bc1ccc24d24588748710e43925b39e563bd5541cbcbad91\", \"\", nil},",
          "104:   {\"wrong-docker-image:\", \"\", \"\", NoPathInImageErr},",
          "105:   {\"\", \"\", \"\", NoPathInImageErr},",
          "106:  }",
          "107:  for _, test := range tests {",
          "108:   t.Run(test.Image, func(t *testing.T) {",
          "109:    repo, tag, err := parseDockerImage(test.Image)",
          "110:    print(\"repo\", repo)",
          "111:    must.Eq(t, test.Repo, repo)",
          "112:    must.Eq(t, test.Tag, tag)",
          "113:    must.Eq(t, test.ExpErr, err)",
          "114:   })",
          "115:  }",
          "116: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f73255a8c1b588a04722201797925dc87f445de",
      "candidate_info": {
        "commit_hash": "8f73255a8c1b588a04722201797925dc87f445de",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/8f73255a8c1b588a04722201797925dc87f445de",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "backport of commit b7b18d1c50c237982a3288b15ab6ca8d83326407 (#25136)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:  github.com/stretchr/testify v1.10.0",
          "129:  github.com/zclconf/go-cty v1.16.0",
          "130:  github.com/zclconf/go-cty-yaml v1.1.0",
          "132:  go.uber.org/goleak v1.2.1",
          "133:  golang.org/x/crypto v0.32.0",
          "134:  golang.org/x/mod v0.22.0",
          "",
          "[Removed Lines]",
          "131:  go.etcd.io/bbolt v1.3.11",
          "",
          "[Added Lines]",
          "131:  go.etcd.io/bbolt v1.4.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "1688: github.com/zclconf/go-cty-yaml v1.1.0/go.mod h1:9YLUH4g7lOhVWqUbctnVlZ5KLpg7JAprQNgxSZ1Gyxs=",
          "1689: github.com/zeebo/assert v1.3.0/go.mod h1:Pq9JiuJQpG8JLJdtkwrJESF0Foym2/D9XMU5ciN/wJ0=",
          "1690: github.com/zeebo/xxh3 v1.0.2/go.mod h1:5NWz9Sef7zIDm2JHfFlcQvNekmcEl9ekUZQQKCYaDcA=",
          "1693: go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=",
          "1694: go.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=",
          "1695: go.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=",
          "",
          "[Removed Lines]",
          "1691: go.etcd.io/bbolt v1.3.11 h1:yGEzV1wPz2yVCLsD8ZAiGHhHVlczyC9d1rP43/VCRJ0=",
          "1692: go.etcd.io/bbolt v1.3.11/go.mod h1:dksAq7YMXoljX0xu6VF5DMZGbhYYoLUalEiSySYAS4I=",
          "",
          "[Added Lines]",
          "1691: go.etcd.io/bbolt v1.4.0 h1:TU77id3TnN/zKr7CO/uk+fBCwF2jGcMuw2B/FMAzYIk=",
          "1692: go.etcd.io/bbolt v1.4.0/go.mod h1:AsD+OCi/qPN1giOX1aiLAha3o1U8rAz65bvN4j0sRuk=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f27c521c76afb58b46cbe1987c58bf04f773bb09",
      "candidate_info": {
        "commit_hash": "f27c521c76afb58b46cbe1987c58bf04f773bb09",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/f27c521c76afb58b46cbe1987c58bf04f773bb09",
        "files": [
          ".changelog/24658.txt",
          "client/allocrunner/network_hook.go",
          "client/allocrunner/network_hook_test.go",
          "client/allocrunner/networking.go",
          "client/allocrunner/networking_bridge_linux.go",
          "client/allocrunner/networking_cni.go",
          "client/allocrunner/networking_cni_mock_test.go",
          "client/allocrunner/networking_cni_test.go",
          "website/content/docs/upgrade/upgrade-specific.mdx",
          "website/content/partials/install/install-cni-plugins.mdx"
        ],
        "message": "Backport of CNI: use check command when restoring from restart into release/1.9.x (#24796)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "client/allocrunner/network_hook.go||client/allocrunner/network_hook.go",
          "client/allocrunner/network_hook_test.go||client/allocrunner/network_hook_test.go",
          "client/allocrunner/networking.go||client/allocrunner/networking.go",
          "client/allocrunner/networking_bridge_linux.go||client/allocrunner/networking_bridge_linux.go",
          "client/allocrunner/networking_cni.go||client/allocrunner/networking_cni.go",
          "client/allocrunner/networking_cni_mock_test.go||client/allocrunner/networking_cni_mock_test.go",
          "client/allocrunner/networking_cni_test.go||client/allocrunner/networking_cni_test.go",
          "website/content/partials/install/install-cni-plugins.mdx||website/content/partials/install/install-cni-plugins.mdx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/allocrunner/network_hook.go||client/allocrunner/network_hook.go": [
          "File: client/allocrunner/network_hook.go -> client/allocrunner/network_hook.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"context\"",
          "8:  \"fmt\"",
          "10:  hclog \"github.com/hashicorp/go-hclog\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  dockerNetSpecHostnameKey = \"docker_sandbox_hostname\"",
          "29: )",
          "31: type networkIsolationSetter interface {",
          "32:  SetNetworkIsolation(*drivers.NetworkIsolationSpec)",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: var ErrCNICheckFailed = errors.New(\"network namespace already exists but was misconfigured\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:   Hostname: interpolatedNetworks[0].Hostname,",
          "133:  }",
          "135:  spec, created, err := h.manager.CreateNetwork(h.alloc.ID, &networkCreateReq)",
          "136:  if err != nil {",
          "137:   return fmt.Errorf(\"failed to create network for alloc: %v\", err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:  var checkedOnce bool",
          "140: CREATE:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:   h.isolationSetter.SetNetworkIsolation(spec)",
          "143:  }",
          "147:   if err != nil {",
          "148:    return fmt.Errorf(\"failed to configure networking for alloc: %v\", err)",
          "149:   }",
          "",
          "[Removed Lines]",
          "145:  if created {",
          "146:   status, err := h.networkConfigurator.Setup(context.TODO(), h.alloc, spec)",
          "",
          "[Added Lines]",
          "151:  if spec != nil {",
          "152:   status, err := h.networkConfigurator.Setup(context.TODO(), h.alloc, spec, created)",
          "157:    if errors.Is(err, ErrCNICheckFailed) && !checkedOnce {",
          "158:     checkedOnce = true",
          "159:     destroyErr := h.manager.DestroyNetwork(h.alloc.ID, spec)",
          "160:     if destroyErr != nil {",
          "161:      return fmt.Errorf(\"%w: destroying network to retry failed: %v\", err, destroyErr)",
          "162:     }",
          "163:     goto CREATE",
          "164:    }",
          "168:   if status == nil {",
          "169:    return nil // netns already existed and was correctly configured",
          "170:   }",
          "",
          "---------------"
        ],
        "client/allocrunner/network_hook_test.go||client/allocrunner/network_hook_test.go": [
          "File: client/allocrunner/network_hook_test.go -> client/allocrunner/network_hook_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: package allocrunner",
          "6: import (",
          "7:  \"testing\"",
          "9:  \"github.com/hashicorp/nomad/ci\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"fmt\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "15:  \"github.com/hashicorp/nomad/plugins/drivers\"",
          "16:  \"github.com/hashicorp/nomad/plugins/drivers/testutils\"",
          "17:  \"github.com/shoenig/test\"",
          "18:  \"github.com/shoenig/test/must\"",
          "19: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  \"github.com/hashicorp/nomad/testutil\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:   MockNetworkManager: testutils.MockNetworkManager{",
          "66:    CreateNetworkF: func(allocID string, req *drivers.NetworkCreateRequest) (*drivers.NetworkIsolationSpec, bool, error) {",
          "67:     test.Eq(t, alloc.ID, allocID)",
          "69:    },",
          "71:    DestroyNetworkF: func(allocID string, netSpec *drivers.NetworkIsolationSpec) error {",
          "",
          "[Removed Lines]",
          "68:     return spec, false, nil",
          "",
          "[Added Lines]",
          "70:     return spec, true, nil",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137:  must.NoError(t, hook.Postrun())",
          "138:  must.True(t, destroyCalled)",
          "139: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146: func TestNetworkHook_Prerun_Postrun_ExistingNetNS(t *testing.T) {",
          "147:  ci.Parallel(t)",
          "149:  alloc := mock.Alloc()",
          "150:  alloc.Job.TaskGroups[0].Networks = []*structs.NetworkResource{",
          "151:   {Mode: \"bridge\"},",
          "152:  }",
          "154:  spec := &drivers.NetworkIsolationSpec{",
          "155:   Mode:   drivers.NetIsolationModeGroup,",
          "156:   Path:   \"test\",",
          "157:   Labels: map[string]string{\"abc\": \"123\"},",
          "158:  }",
          "159:  isolationSetter := &mockNetworkIsolationSetter{t: t, expectedSpec: spec}",
          "160:  statusSetter := &mockNetworkStatusSetter{t: t, expectedStatus: nil}",
          "162:  callCounts := testutil.NewCallCounter()",
          "164:  nm := &testutils.MockDriver{",
          "165:   MockNetworkManager: testutils.MockNetworkManager{",
          "166:    CreateNetworkF: func(allocID string, req *drivers.NetworkCreateRequest) (*drivers.NetworkIsolationSpec, bool, error) {",
          "167:     test.Eq(t, alloc.ID, allocID)",
          "168:     callCounts.Inc(\"CreateNetwork\")",
          "169:     return spec, false, nil",
          "170:    },",
          "172:    DestroyNetworkF: func(allocID string, netSpec *drivers.NetworkIsolationSpec) error {",
          "173:     test.Eq(t, alloc.ID, allocID)",
          "174:     test.Eq(t, spec, netSpec)",
          "175:     callCounts.Inc(\"DestroyNetwork\")",
          "176:     return nil",
          "177:    },",
          "178:   },",
          "179:  }",
          "181:  fakePlugin := newMockCNIPlugin()",
          "183:  configurator := &cniNetworkConfigurator{",
          "184:   nodeAttrs: map[string]string{",
          "185:    \"plugins.cni.version.bridge\": \"1.6.1\",",
          "186:   },",
          "187:   nodeMeta: map[string]string{},",
          "188:   logger:   testlog.HCLogger(t),",
          "189:   cni:      fakePlugin,",
          "190:   nsOpts:   &nsOpts{},",
          "191:  }",
          "193:  envBuilder := taskenv.NewBuilder(mock.Node(), alloc, nil, alloc.Job.Region)",
          "195:  testCases := []struct {",
          "196:   name                             string",
          "197:   cniVersion                       string",
          "198:   checkErrs                        []error",
          "199:   setupErrs                        []string",
          "200:   expectPrerunCreateNetworkCalls   int",
          "201:   expectPrerunDestroyNetworkCalls  int",
          "202:   expectCheckCalls                 int",
          "203:   expectSetupCalls                 int",
          "204:   expectPostrunDestroyNetworkCalls int",
          "205:   expectPrerunError                string",
          "206:  }{",
          "207:   {",
          "208:    name:                             \"good check\",",
          "209:    cniVersion:                       \"1.6.1\",",
          "210:    expectPrerunCreateNetworkCalls:   1,",
          "211:    expectPrerunDestroyNetworkCalls:  0,",
          "212:    expectCheckCalls:                 1,",
          "213:    expectSetupCalls:                 0,",
          "214:    expectPostrunDestroyNetworkCalls: 1,",
          "215:   },",
          "216:   {",
          "217:    name:                             \"initial check fails\",",
          "218:    cniVersion:                       \"1.6.1\",",
          "219:    checkErrs:                        []error{fmt.Errorf(\"whatever\")},",
          "220:    expectPrerunCreateNetworkCalls:   2,",
          "221:    expectPrerunDestroyNetworkCalls:  1,",
          "222:    expectCheckCalls:                 2,",
          "223:    expectSetupCalls:                 0,",
          "224:    expectPostrunDestroyNetworkCalls: 2,",
          "225:   },",
          "226:   {",
          "227:    name:       \"check fails twice\",",
          "228:    cniVersion: \"1.6.1\",",
          "229:    checkErrs: []error{",
          "230:     fmt.Errorf(\"whatever\"),",
          "231:     fmt.Errorf(\"whatever\"),",
          "232:    },",
          "233:    expectPrerunCreateNetworkCalls:   2,",
          "234:    expectPrerunDestroyNetworkCalls:  1,",
          "235:    expectCheckCalls:                 2,",
          "236:    expectSetupCalls:                 0,",
          "237:    expectPostrunDestroyNetworkCalls: 2,",
          "238:    expectPrerunError:                \"failed to configure networking for alloc: network namespace already exists but was misconfigured: whatever\",",
          "239:   },",
          "240:   {",
          "241:    name:                             \"old CNI version skips check\",",
          "242:    cniVersion:                       \"1.2.0\",",
          "243:    expectPrerunCreateNetworkCalls:   1,",
          "244:    expectPrerunDestroyNetworkCalls:  0,",
          "245:    expectCheckCalls:                 0,",
          "246:    expectSetupCalls:                 0,",
          "247:    expectPostrunDestroyNetworkCalls: 1,",
          "248:   },",
          "249:  }",
          "251:  for _, tc := range testCases {",
          "253:   t.Run(tc.name, func(t *testing.T) {",
          "254:    callCounts.Reset()",
          "255:    fakePlugin.counter.Reset()",
          "256:    fakePlugin.checkErrors = tc.checkErrs",
          "257:    configurator.nodeAttrs[\"plugins.cni.version.bridge\"] = tc.cniVersion",
          "258:    hook := newNetworkHook(testlog.HCLogger(t), isolationSetter,",
          "259:     alloc, nm, configurator, statusSetter, envBuilder.Build())",
          "261:    err := hook.Prerun()",
          "262:    if tc.expectPrerunError == \"\" {",
          "263:     must.NoError(t, err)",
          "264:    } else {",
          "265:     must.EqError(t, err, tc.expectPrerunError)",
          "266:    }",
          "268:    test.Eq(t, tc.expectPrerunDestroyNetworkCalls,",
          "269:     callCounts.Get()[\"DestroyNetwork\"], test.Sprint(\"DestroyNetwork calls after prerun\"))",
          "270:    test.Eq(t, tc.expectPrerunCreateNetworkCalls,",
          "271:     callCounts.Get()[\"CreateNetwork\"], test.Sprint(\"CreateNetwork calls after prerun\"))",
          "273:    test.Eq(t, tc.expectCheckCalls, fakePlugin.counter.Get()[\"Check\"], test.Sprint(\"Check calls\"))",
          "274:    test.Eq(t, tc.expectSetupCalls, fakePlugin.counter.Get()[\"Setup\"], test.Sprint(\"Setup calls\"))",
          "276:    must.NoError(t, hook.Postrun())",
          "277:    test.Eq(t, tc.expectPostrunDestroyNetworkCalls,",
          "278:     callCounts.Get()[\"DestroyNetwork\"], test.Sprint(\"DestroyNetwork calls after postrun\"))",
          "280:   })",
          "282:  }",
          "283: }",
          "",
          "---------------"
        ],
        "client/allocrunner/networking.go||client/allocrunner/networking.go": [
          "File: client/allocrunner/networking.go -> client/allocrunner/networking.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: type NetworkConfigurator interface {",
          "18:  Teardown(context.Context, *structs.Allocation, *drivers.NetworkIsolationSpec) error",
          "19: }",
          "",
          "[Removed Lines]",
          "17:  Setup(context.Context, *structs.Allocation, *drivers.NetworkIsolationSpec) (*structs.AllocNetworkStatus, error)",
          "",
          "[Added Lines]",
          "17:  Setup(context.Context, *structs.Allocation, *drivers.NetworkIsolationSpec, bool) (*structs.AllocNetworkStatus, error)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: type hostNetworkConfigurator struct{}",
          "27:  return nil, nil",
          "28: }",
          "29: func (h *hostNetworkConfigurator) Teardown(context.Context, *structs.Allocation, *drivers.NetworkIsolationSpec) error {",
          "",
          "[Removed Lines]",
          "26: func (h *hostNetworkConfigurator) Setup(context.Context, *structs.Allocation, *drivers.NetworkIsolationSpec) (*structs.AllocNetworkStatus, error) {",
          "",
          "[Added Lines]",
          "26: func (h *hostNetworkConfigurator) Setup(context.Context, *structs.Allocation, *drivers.NetworkIsolationSpec, bool) (*structs.AllocNetworkStatus, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:  nc NetworkConfigurator",
          "42: }",
          "45:  networkingGlobalMutex.Lock()",
          "46:  defer networkingGlobalMutex.Unlock()",
          "48: }",
          "50: func (s *synchronizedNetworkConfigurator) Teardown(ctx context.Context, allocation *structs.Allocation, spec *drivers.NetworkIsolationSpec) error {",
          "",
          "[Removed Lines]",
          "44: func (s *synchronizedNetworkConfigurator) Setup(ctx context.Context, allocation *structs.Allocation, spec *drivers.NetworkIsolationSpec) (*structs.AllocNetworkStatus, error) {",
          "47:  return s.nc.Setup(ctx, allocation, spec)",
          "",
          "[Added Lines]",
          "44: func (s *synchronizedNetworkConfigurator) Setup(ctx context.Context, allocation *structs.Allocation, spec *drivers.NetworkIsolationSpec, created bool) (*structs.AllocNetworkStatus, error) {",
          "47:  return s.nc.Setup(ctx, allocation, spec, created)",
          "",
          "---------------"
        ],
        "client/allocrunner/networking_bridge_linux.go||client/allocrunner/networking_bridge_linux.go": [
          "File: client/allocrunner/networking_bridge_linux.go -> client/allocrunner/networking_bridge_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: }",
          "124:  if err := b.ensureForwardingRules(); err != nil {",
          "125:   return nil, fmt.Errorf(\"failed to initialize table forwarding rules: %v\", err)",
          "126:  }",
          "129: }",
          "",
          "[Removed Lines]",
          "123: func (b *bridgeNetworkConfigurator) Setup(ctx context.Context, alloc *structs.Allocation, spec *drivers.NetworkIsolationSpec) (*structs.AllocNetworkStatus, error) {",
          "128:  return b.cni.Setup(ctx, alloc, spec)",
          "",
          "[Added Lines]",
          "123: func (b *bridgeNetworkConfigurator) Setup(ctx context.Context, alloc *structs.Allocation, spec *drivers.NetworkIsolationSpec, created bool) (*structs.AllocNetworkStatus, error) {",
          "128:  return b.cni.Setup(ctx, alloc, spec, created)",
          "",
          "---------------"
        ],
        "client/allocrunner/networking_cni.go||client/allocrunner/networking_cni.go": [
          "File: client/allocrunner/networking_cni.go -> client/allocrunner/networking_cni.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  consulIPTables \"github.com/hashicorp/consul/sdk/iptables\"",
          "29:  log \"github.com/hashicorp/go-hclog\"",
          "30:  \"github.com/hashicorp/go-set/v3\"",
          "31:  \"github.com/hashicorp/nomad/client/taskenv\"",
          "32:  \"github.com/hashicorp/nomad/helper\"",
          "33:  \"github.com/hashicorp/nomad/helper/envoy\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:  \"github.com/hashicorp/go-version\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:  }",
          "139: }",
          "143:  if err := c.ensureCNIInitialized(); err != nil {",
          "144:   return nil, fmt.Errorf(\"cni not initialized: %w\", err)",
          "145:  }",
          "",
          "[Removed Lines]",
          "142: func (c *cniNetworkConfigurator) Setup(ctx context.Context, alloc *structs.Allocation, spec *drivers.NetworkIsolationSpec) (*structs.AllocNetworkStatus, error) {",
          "",
          "[Added Lines]",
          "142: var supportsCNICheck = mustCNICheckConstraint()",
          "144: func mustCNICheckConstraint() version.Constraints {",
          "145:  v, err := version.NewConstraint(\">= 1.3.0\")",
          "146:  if err != nil {",
          "147:   panic(err)",
          "148:  }",
          "149:  return v",
          "150: }",
          "153: func (c *cniNetworkConfigurator) Setup(ctx context.Context, alloc *structs.Allocation, spec *drivers.NetworkIsolationSpec, created bool) (*structs.AllocNetworkStatus, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:   cniArgs[ConsulIPTablesConfigEnvVar] = string(iptablesCfg)",
          "172:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:  if !created {",
          "194:   cniVersion, err := version.NewSemver(c.nodeAttrs[\"plugins.cni.version.bridge\"])",
          "195:   if err == nil && supportsCNICheck.Check(cniVersion) {",
          "196:    err := c.cni.Check(ctx, alloc.ID, spec.Path,",
          "197:     c.nsOpts.withCapabilityPortMap(portMaps.ports),",
          "198:     c.nsOpts.withArgs(cniArgs),",
          "199:    )",
          "200:    if err != nil {",
          "201:     return nil, fmt.Errorf(\"%w: %w\", ErrCNICheckFailed, err)",
          "202:    }",
          "203:   } else {",
          "204:    c.logger.Debug(\"network namespace exists but could not check if networking is valid because bridge plugin version was <1.3.0: continuing anyways\")",
          "205:    return nil, nil",
          "206:   }",
          "207:   c.logger.Trace(\"network namespace exists and passed check: skipping setup\")",
          "208:   return nil, nil",
          "209:  }",
          "",
          "---------------"
        ],
        "client/allocrunner/networking_cni_mock_test.go||client/allocrunner/networking_cni_mock_test.go": [
          "File: client/allocrunner/networking_cni_mock_test.go -> client/allocrunner/networking_cni_mock_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: type mockCNIPlugin struct {",
          "19:  counter     *testutil.CallCounter",
          "20:  setupErrors []string",
          "21: }",
          "23: func newMockCNIPlugin() *mockCNIPlugin {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  checkErrors []error",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  callCounts := testutil.NewCallCounter()",
          "26:  callCounts.Reset()",
          "27:  return &mockCNIPlugin{",
          "29:  }",
          "30: }",
          "",
          "[Removed Lines]",
          "28:   counter: callCounts,",
          "",
          "[Added Lines]",
          "29:   counter:     callCounts,",
          "30:   setupErrors: []string{},",
          "31:   checkErrors: []error{},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65: }",
          "67: func (f *mockCNIPlugin) Check(ctx context.Context, id, path string, opts ...cni.NamespaceOpts) error {",
          "68:  return nil",
          "69: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:  if f.counter != nil {",
          "72:   f.counter.Inc(\"Check\")",
          "73:  }",
          "74:  numOfCalls := f.counter.Get()[\"Check\"]",
          "75:  if numOfCalls <= len(f.checkErrors) {",
          "76:   return f.checkErrors[numOfCalls-1]",
          "77:  }",
          "",
          "---------------"
        ],
        "client/allocrunner/networking_cni_test.go||client/allocrunner/networking_cni_test.go": [
          "File: client/allocrunner/networking_cni_test.go -> client/allocrunner/networking_cni_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:    }",
          "300:    if tc.expectErr == \"\" {",
          "301:     must.NoError(t, err)",
          "302:     must.Eq(t, tc.expectResult, result)",
          "",
          "[Removed Lines]",
          "299:    result, err := c.Setup(context.Background(), alloc, spec)",
          "",
          "[Added Lines]",
          "299:    result, err := c.Setup(context.Background(), alloc, spec, true)",
          "",
          "---------------"
        ],
        "website/content/partials/install/install-cni-plugins.mdx||website/content/partials/install/install-cni-plugins.mdx": [
          "File: website/content/partials/install/install-cni-plugins.mdx -> website/content/partials/install/install-cni-plugins.mdx",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: guide](https://www.cni.dev/plugins/current/) for details on individual plugins.",
          "6: The following series of commands determines your operating system architecture,",
          "9: and then extracts the CNI plugin binaries into the `/opt/cni/bin` directory.",
          "10: Update the `CNI_PLUGIN_VERSION` value to use a different release version.",
          "12: ```shell-session",
          "13: $ export ARCH_CNI=$( [ $(uname -m) = aarch64 ] && echo arm64 || echo amd64)",
          "15: $ curl -L -o cni-plugins.tgz \"https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGIN_VERSION}/cni-plugins-linux-${ARCH_CNI}-${CNI_PLUGIN_VERSION}\".tgz && \\",
          "16:   sudo mkdir -p /opt/cni/bin && \\",
          "17:   sudo tar -C /opt/cni/bin -xzf cni-plugins.tgz",
          "18: ```",
          "20: Nomad looks for CNI plugin binaries by default in the `/opt/cni/bin` directory.",
          "21: However, you may install in the binaries in a different directory and then",
          "22: configure using the [`cni_path`](/nomad/docs/configuration/client#cni_path)",
          "",
          "[Removed Lines]",
          "7: downloads the [CNI 1.5.1",
          "8: release](https://github.com/containernetworking/plugins/releases/tag/v1.5.1),",
          "14: $ export CNI_PLUGIN_VERSION=v1.5.1",
          "",
          "[Added Lines]",
          "7: downloads the [CNI 1.6.1",
          "8: release](https://github.com/containernetworking/plugins/releases/tag/v1.6.1),",
          "14: $ export CNI_PLUGIN_VERSION=v1.6.1",
          "20: Your Linux distribution's package manager may provide the CNI reference plugins",
          "21: but we recommend installing the most recent stable version to ensure you have",
          "22: fixes for known bugs shipping in those versions.",
          "",
          "---------------"
        ]
      }
    }
  ]
}