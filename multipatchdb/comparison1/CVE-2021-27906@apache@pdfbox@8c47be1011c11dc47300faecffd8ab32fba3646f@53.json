{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c1621fe25d793ff4d81843f6c943cbd4bda1aa24",
      "candidate_info": {
        "commit_hash": "c1621fe25d793ff4d81843f6c943cbd4bda1aa24",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/c1621fe25d793ff4d81843f6c943cbd4bda1aa24",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java"
        ],
        "message": "PDFBOX-5192: don't render glyphs with bad flags\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889889 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java||fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java||fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java -> fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:             if ((flags[index] & REPEAT) != 0)",
          "217:             {",
          "218:                 int repeats = bais.readUnsignedByte();",
          "220:                 {",
          "221:                     flags[index + i] = flags[index];",
          "222:                 }",
          "223:                 index += repeats;",
          "",
          "[Removed Lines]",
          "219:                 for (int i = 1; i <= repeats && index + i < flags.length; i++)",
          "",
          "[Added Lines]",
          "219:                 for (int i = 1; i <= repeats; i++)",
          "221:                     if (index + i >= flags.length)",
          "222:                     {",
          "223:                         throw new IOException(",
          "224:                                 \"repeat count (\" + repeats + \") higher than remaining space\");",
          "225:                     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5a1df3840a22f9919a59c83771fd7eeb3259c72",
      "candidate_info": {
        "commit_hash": "b5a1df3840a22f9919a59c83771fd7eeb3259c72",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/b5a1df3840a22f9919a59c83771fd7eeb3259c72",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java",
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ],
        "message": "PDFBOX-5258: lazy clipping, by Stephan Schwiebert; closes #127\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892337 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java",
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.awt.Composite;",
          "21: import java.awt.geom.Area;",
          "22: import java.awt.geom.GeneralPath;",
          "23: import org.apache.pdfbox.cos.COSBase;",
          "25: import org.apache.pdfbox.pdmodel.common.PDRectangle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.awt.geom.Path2D;",
          "24: import java.util.ArrayList;",
          "25: import java.util.IdentityHashMap;",
          "26: import java.util.List;",
          "27: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: public class PDGraphicsState implements Cloneable",
          "40: {",
          "41:     private boolean isClippingPathDirty;",
          "43:     private Matrix currentTransformationMatrix = new Matrix();",
          "44:     private PDColor strokingColor = PDDeviceGray.INSTANCE.getInitialColor();",
          "45:     private PDColor nonStrokingColor = PDDeviceGray.INSTANCE.getInitialColor();",
          "",
          "[Removed Lines]",
          "42:     private Area clippingPath;",
          "",
          "[Added Lines]",
          "48:     private List<Path2D.Double> clippingPaths = new ArrayList<Path2D.Double>();",
          "49:     private Map<Path2D.Double, Area> clippingCache = new IdentityHashMap<Path2D.Double, Area>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:     public PDGraphicsState(PDRectangle page)",
          "78:     {",
          "80:     }",
          "",
          "[Removed Lines]",
          "79:         clippingPath = new Area(page.toGeneralPath());",
          "",
          "[Added Lines]",
          "86:         clippingPaths.add(new Path2D.Double(page.toGeneralPath()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "497:             clone.strokingColor = strokingColor; // immutable",
          "498:             clone.nonStrokingColor = nonStrokingColor; // immutable",
          "499:             clone.lineDashPattern = lineDashPattern; // immutable",
          "501:             clone.isClippingPathDirty = false;",
          "502:             return clone;",
          "503:         }",
          "",
          "[Removed Lines]",
          "500:             clone.clippingPath = clippingPath; // not cloned, see intersectClippingPath",
          "",
          "[Added Lines]",
          "507:             clone.clippingPaths = clippingPaths; // not cloned, see intersectClippingPath",
          "508:             clone.clippingCache = clippingCache;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "595:     public void intersectClippingPath(GeneralPath path)",
          "596:     {",
          "598:     }",
          "605:     {",
          "607:         if (!isClippingPathDirty)",
          "608:         {",
          "614:             isClippingPathDirty = true;",
          "615:         }",
          "619:     }",
          "",
          "[Removed Lines]",
          "597:         intersectClippingPath(new Area(path));",
          "604:     public void intersectClippingPath(Area area)",
          "610:             Area cloned = new Area();",
          "611:             cloned.add(clippingPath);",
          "612:             clippingPath = cloned;",
          "618:         clippingPath.intersect(area);",
          "",
          "[Added Lines]",
          "605:         intersectClippingPath(new Path2D.Double(path), true);",
          "608:     private void intersectClippingPath(Path2D.Double path, boolean clonePath)",
          "614:             clippingPaths = new ArrayList<Path2D.Double>(clippingPaths);",
          "620:         clippingPaths.add(clonePath ? (Path2D.Double) path.clone() : path);",
          "621:     }",
          "628:     public void intersectClippingPath(Area area)",
          "629:     {",
          "630:         intersectClippingPath(new Path2D.Double(area), false);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "626:     public Area getCurrentClippingPath()",
          "627:     {",
          "629:     }",
          "631:     public Composite getStrokingJavaComposite()",
          "",
          "[Removed Lines]",
          "628:         return clippingPath;",
          "",
          "[Added Lines]",
          "640:         if (clippingPaths.size() == 1)",
          "641:         {",
          "643:             Path2D.Double path = clippingPaths.get(0);",
          "644:             Area area = clippingCache.get(path);",
          "645:             if (area == null)",
          "646:             {",
          "647:                 area = new Area(path);",
          "648:                 clippingCache.put(path, area);",
          "649:             }",
          "650:             return area;",
          "651:         }",
          "653:         Area clippingArea = new Area();",
          "654:         clippingArea.add(new Area(clippingPaths.get(0)));",
          "655:         for (int i = 1; i < clippingPaths.size(); i++)",
          "656:         {",
          "657:             clippingArea.intersect(new Area(clippingPaths.get(i)));",
          "658:         }",
          "660:         Path2D.Double newPath = new Path2D.Double(clippingArea);",
          "661:         clippingPaths = new ArrayList<Path2D.Double>();",
          "662:         clippingPaths.add(newPath);",
          "663:         clippingCache.put(newPath, clippingArea);",
          "664:         return clippingArea;",
          "665:     }",
          "673:     public List<Path2D.Double> getCurrentClippingPaths()",
          "674:     {",
          "675:         return clippingPaths;",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:     private GeneralPath linePath = new GeneralPath();",
          "151:     private Shape initialClip;",
          "",
          "[Removed Lines]",
          "148:     private Area lastClip;",
          "",
          "[Added Lines]",
          "148:     private List<Path2D.Double> lastClips;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305:         int savedClipWindingRule = clipWindingRule;",
          "306:         clipWindingRule = -1;",
          "310:         Shape savedInitialClip = initialClip;",
          "311:         initialClip = null;",
          "",
          "[Removed Lines]",
          "308:         Area savedLastClip = lastClip;",
          "309:         lastClip = null;",
          "",
          "[Added Lines]",
          "308:         List<Path2D.Double> savedLastClips = lastClips;",
          "309:         lastClips = null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "319:         flipTG = savedFlipTG;",
          "320:         graphics = savedGraphics;",
          "321:         linePath = savedLinePath;",
          "323:         initialClip = savedInitialClip;",
          "324:         clipWindingRule = savedClipWindingRule;",
          "325:     }",
          "",
          "[Removed Lines]",
          "322:         lastClip = savedLastClip;",
          "",
          "[Added Lines]",
          "322:         lastClips = savedLastClips;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "395:     protected final void setClip()",
          "396:     {",
          "399:         {",
          "410:             if (initialClip != null)",
          "411:             {",
          "414:             }",
          "416:         }",
          "417:     }",
          "",
          "[Removed Lines]",
          "397:         Area clippingPath = getGraphicsState().getCurrentClippingPath();",
          "398:         if (clippingPath != lastClip)",
          "400:             if (clippingPath.getPathIterator(null).isDone())",
          "401:             {",
          "404:                 graphics.setClip(new Rectangle());",
          "405:             }",
          "406:             else",
          "407:             {",
          "408:                 graphics.setClip(clippingPath);",
          "409:             }",
          "415:             lastClip = clippingPath;",
          "",
          "[Added Lines]",
          "397:         List<Path2D.Double> clippingPaths = getGraphicsState().getCurrentClippingPaths();",
          "398:         if (clippingPaths != lastClips)",
          "400:             transferClip(getGraphicsState(), graphics);",
          "406:             lastClips = clippingPaths;",
          "407:         }",
          "408:     }",
          "419:     protected void transferClip(PDGraphicsState graphicsState, Graphics2D graphics)",
          "420:     {",
          "421:         Area clippingPath = graphicsState.getCurrentClippingPath();",
          "422:         if (clippingPath.getPathIterator(null).isDone())",
          "423:         {",
          "426:             graphics.setClip(new Rectangle());",
          "427:         }",
          "428:         else",
          "429:         {",
          "430:             graphics.setClip(clippingPath);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "465:         }",
          "466:     }",
          "",
          "[Removed Lines]",
          "464:             lastClip = null;",
          "",
          "[Added Lines]",
          "479:             lastClips = null;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1076:             clipWindingRule = -1;",
          "1077:         }",
          "",
          "[Removed Lines]",
          "1074:             lastClip = null;",
          "",
          "[Added Lines]",
          "1089:             lastClips = null;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1442:         graphics.setComposite(getGraphicsState().getNonStrokingJavaComposite());",
          "1443:         graphics.setPaint(paint);",
          "1444:         graphics.setClip(null);",
          "",
          "[Removed Lines]",
          "1445:         lastClip = null;",
          "",
          "[Added Lines]",
          "1460:         lastClips = null;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1479:     @Override",
          "1480:     public void showAnnotation(PDAnnotation annotation) throws IOException",
          "1481:     {",
          "1483:         int deviceType = -1;",
          "1484:         GraphicsConfiguration graphicsConfiguration = graphics.getDeviceConfiguration();",
          "1485:         if (graphicsConfiguration != null)",
          "",
          "[Removed Lines]",
          "1482:         lastClip = null;",
          "",
          "[Added Lines]",
          "1497:         lastClips = null;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1669:                 PDColor backdropColor) throws IOException",
          "1670:         {",
          "1671:             Graphics2D savedGraphics = graphics;",
          "1673:             Shape savedInitialClip = initialClip;",
          "",
          "[Removed Lines]",
          "1672:             Area savedLastClip = lastClip;",
          "",
          "[Added Lines]",
          "1687:             List<Path2D.Double> savedLastClips = lastClips;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1817:             finally",
          "1818:             {",
          "1819:                 flipTG = savedFlipTG;",
          "1821:                 graphics.dispose();",
          "1822:                 graphics = savedGraphics;",
          "1823:                 initialClip = savedInitialClip;",
          "",
          "[Removed Lines]",
          "1820:                 lastClip = savedLastClip;",
          "",
          "[Added Lines]",
          "1835:                 lastClips = savedLastClips;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "736b4216a5974571fe9b371b7a2994057b5e6544",
      "candidate_info": {
        "commit_hash": "736b4216a5974571fe9b371b7a2994057b5e6544",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/736b4216a5974571fe9b371b7a2994057b5e6544",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripperByArea.java"
        ],
        "message": "PDFBOX-4892: remove unused variable, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887898 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripperByArea.java||pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripperByArea.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripperByArea.java||pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripperByArea.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripperByArea.java -> pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripperByArea.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     public void extractRegions( PDPage page ) throws IOException",
          "114:     {",
          "116:         {",
          "117:             setStartPage(getCurrentPageNo());",
          "118:             setEndPage(getCurrentPageNo());",
          "122:             ArrayList<List<TextPosition>> regionCharactersByArticle = new ArrayList<List<TextPosition>>();",
          "123:             regionCharactersByArticle.add( new ArrayList<TextPosition>() );",
          "124:             regionCharacterList.put( regionName, regionCharactersByArticle );",
          "",
          "[Removed Lines]",
          "115:         for (String region : regions)",
          "121:             String regionName = region;",
          "",
          "[Added Lines]",
          "115:         for (String regionName : regions)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3071db4af66ee8addc4299cf12a527a22bbb6c32",
      "candidate_info": {
        "commit_hash": "3071db4af66ee8addc4299cf12a527a22bbb6c32",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3071db4af66ee8addc4299cf12a527a22bbb6c32",
        "files": [
          "tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java"
        ],
        "message": "PDFBOX-4892: fix typo, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891625 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java||tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java||tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java": [
          "File: tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java -> tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java"
        ]
      }
    },
    {
      "candidate_hash": "f81a0a9ee66c9bf5cf0f2434aee3722c3674b385",
      "candidate_info": {
        "commit_hash": "f81a0a9ee66c9bf5cf0f2434aee3722c3674b385",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f81a0a9ee66c9bf5cf0f2434aee3722c3674b385",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/CFFFont.java"
        ],
        "message": "PDFBOX-4892: improve comments, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889439 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/CFFFont.java||fontbox/src/main/java/org/apache/fontbox/cff/CFFFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cff/CFFFont.java||fontbox/src/main/java/org/apache/fontbox/cff/CFFFont.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cff/CFFFont.java -> fontbox/src/main/java/org/apache/fontbox/cff/CFFFont.java"
        ]
      }
    }
  ]
}