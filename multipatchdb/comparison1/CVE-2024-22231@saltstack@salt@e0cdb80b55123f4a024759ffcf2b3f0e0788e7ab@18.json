{
  "cve_id": "CVE-2024-22231",
  "cve_desc": "Syndic cache directory creation is vulnerable to a directory traversal attack in salt project which can lead\u00a0a malicious attacker to create an arbitrary directory on a Salt master.",
  "repo": "saltstack/salt",
  "patch_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
  "patch_info": {
    "commit_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "files": [
      "salt/fileserver/__init__.py",
      "salt/fileserver/roots.py",
      "salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py"
    ],
    "message": "CVE fix",
    "before_after_code_files": [
      "salt/fileserver/__init__.py||salt/fileserver/__init__.py",
      "salt/fileserver/roots.py||salt/fileserver/roots.py",
      "salt/master.py||salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py"
    ]
  },
  "patch_diff": {
    "salt/fileserver/__init__.py||salt/fileserver/__init__.py": [
      "File: salt/fileserver/__init__.py -> salt/fileserver/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "568:         saltenv = salt.utils.stringutils.to_unicode(saltenv)",
      "569:         back = self.backends(back)",
      "570:         kwargs = {}",
      "576:         if salt.utils.url.is_escaped(path):",
      "577:             # don't attempt to find URL query arguments in the path",
      "578:             path = salt.utils.url.unescape(path)",
      "",
      "[Removed Lines]",
      "571:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "572:         if os.path.isabs(path):",
      "573:             return fnd",
      "574:         if \"../\" in path:",
      "575:             return fnd",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "588:                     args = comp.split(\"=\", 1)",
      "589:                     kwargs[args[0]] = args[1]",
      "591:         if \"env\" in kwargs:",
      "592:             # \"env\" is not supported; Use \"saltenv\".",
      "593:             kwargs.pop(\"env\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "587:         if os.path.isabs(path) or \"../\" in path:",
      "588:             return fnd",
      "",
      "---------------"
    ],
    "salt/fileserver/roots.py||salt/fileserver/roots.py": [
      "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import salt.utils.path",
      "28: import salt.utils.platform",
      "29: import salt.utils.stringutils",
      "30: import salt.utils.versions",
      "32: log = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import salt.utils.verify",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:         if saltenv == \"__env__\":",
      "99:             root = root.replace(\"__env__\", actual_saltenv)",
      "100:         full = os.path.join(root, path)",
      "101:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
      "102:             fnd[\"path\"] = full",
      "103:             fnd[\"rel\"] = path",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:         # Refuse to serve file that is not under the root.",
      "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
      "105:             continue",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:     ret[\"dest\"] = fnd[\"rel\"]",
      "129:     gzip = load.get(\"gzip\", None)",
      "130:     fpath = os.path.normpath(fnd[\"path\"])",
      "131:     with salt.utils.files.fopen(fpath, \"rb\") as fp_:",
      "132:         fp_.seek(load[\"loc\"])",
      "133:         data = fp_.read(__opts__[\"file_buffer_size\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:     actual_saltenv = saltenv = load[\"saltenv\"]",
      "139:     if saltenv not in __opts__[\"file_roots\"]:",
      "140:         if \"__env__\" in __opts__[\"file_roots\"]:",
      "141:             log.debug(",
      "142:                 \"salt environment '%s' maps to __env__ file_roots directory\", saltenv",
      "143:             )",
      "144:             saltenv = \"__env__\"",
      "145:         else:",
      "146:             return fnd",
      "147:     file_in_root = False",
      "148:     for root in __opts__[\"file_roots\"][saltenv]:",
      "149:         if saltenv == \"__env__\":",
      "150:             root = root.replace(\"__env__\", actual_saltenv)",
      "151:         # Refuse to serve file that is not under the root.",
      "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
      "153:             file_in_root = True",
      "154:     if not file_in_root:",
      "155:         return ret",
      "",
      "---------------"
    ],
    "salt/master.py||salt/master.py": [
      "File: salt/master.py -> salt/master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:         \"\"\"",
      "1037:         key = payload[\"enc\"]",
      "1038:         load = payload[\"load\"]",
      "1040:         raise salt.ext.tornado.gen.Return(ret)",
      "1042:     def _post_stats(self, start, cmd):",
      "",
      "[Removed Lines]",
      "1039:         ret = {\"aes\": self._handle_aes, \"clear\": self._handle_clear}[key](load)",
      "",
      "[Added Lines]",
      "1039:         if key == \"aes\":",
      "1040:             ret = self.handle_aes(load)",
      "1041:         else:",
      "1042:             ret = self.handle_clear(load)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1738:                 self.mminion.returners[fstr](load[\"jid\"], load[\"load\"])",
      "1740:             # Register the syndic",
      "1741:             syndic_cache_path = os.path.join(",
      "1742:                 self.opts[\"cachedir\"], \"syndics\", load[\"id\"]",
      "1743:             )",
      "1745:                 path_name = os.path.split(syndic_cache_path)[0]",
      "1746:                 if not os.path.exists(path_name):",
      "1747:                     os.makedirs(path_name)",
      "",
      "[Removed Lines]",
      "1744:             if not os.path.exists(syndic_cache_path):",
      "",
      "[Added Lines]",
      "1745:             # We are creating a path using user suplied input. Use the",
      "1746:             # clean_path to prevent a directory traversal.",
      "1747:             root = os.path.join(self.opts[\"cachedir\"], \"syndics\")",
      "1751:             if salt.utils.verify.clean_path(",
      "1752:                 root, syndic_cache_path",
      "1753:             ) and not os.path.exists(syndic_cache_path):",
      "",
      "---------------"
    ],
    "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
      "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     return dirname",
      "56: @pytest.fixture",
      "57: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
      "58:     opts = temp_salt_master.config.copy()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: @pytest.fixture(autouse=True)",
      "57: def testfilepath(tmp_state_tree, testfile):",
      "58:     return tmp_state_tree / testfile.name",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     assert full_path_to_file == ret[\"path\"]",
      "79:     with patch.dict(roots.__opts__, {\"file_buffer_size\": 262144}):",
      "80:         load = {",
      "81:             \"saltenv\": \"base\",",
      "83:             \"loc\": 0,",
      "84:         }",
      "86:         ret = roots.serve_file(load, fnd)",
      "89:             data = fp_.read()",
      "91:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
      "",
      "[Removed Lines]",
      "78: def test_serve_file(testfile):",
      "82:             \"path\": str(testfile),",
      "85:         fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
      "88:         with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
      "",
      "[Added Lines]",
      "83: def test_serve_file(testfilepath):",
      "87:             \"path\": str(testfilepath),",
      "90:         fnd = {\"path\": str(testfilepath), \"rel\": \"testfile\"}",
      "93:         with salt.utils.files.fopen(str(testfilepath), \"rb\") as fp_:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:     # between Python releases.",
      "237:     lines_written = sorted(mtime_map_mock.write_calls())",
      "238:     expected = sorted(",
      "240:         for key, val in new_mtime_map.items()",
      "241:     )",
      "242:     assert lines_written == expected, lines_written",
      "",
      "[Removed Lines]",
      "239:         salt.utils.stringutils.to_bytes(\"{key}:{val}\\n\".format(key=key, val=val))",
      "",
      "[Added Lines]",
      "244:         salt.utils.stringutils.to_bytes(f\"{key}:{val}\\n\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "277:         },",
      "278:         \"backend\": \"roots\",",
      "279:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287: def test_find_file_not_in_root(tmp_state_tree):",
      "288:     \"\"\"",
      "289:     Fileroots should never 'find' a file that is outside of it's root.",
      "290:     \"\"\"",
      "291:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "292:     badfile.write_text(\"Bad file\")",
      "293:     badpath = f\"../bar\"",
      "294:     ret = roots.find_file(badpath)",
      "295:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "296:     badpath = f\"{tmp_state_tree / '..' / 'bar'}\"",
      "297:     ret = roots.find_file(badpath)",
      "298:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "301: def test_serve_file_not_in_root(tmp_state_tree):",
      "302:     \"\"\"",
      "303:     Fileroots should never 'serve' a file that is outside of it's root.",
      "304:     \"\"\"",
      "305:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "306:     badfile.write_text(\"Bad file\")",
      "307:     badpath = f\"../bar\"",
      "308:     load = {\"path\": \"salt://|..\\\\bar\", \"saltenv\": \"base\", \"loc\": 0}",
      "309:     fnd = {",
      "310:         \"path\": f\"{tmp_state_tree / '..' / 'bar'}\",",
      "311:         \"rel\": f\"{pathlib.Path('..') / 'bar'}\",",
      "312:     }",
      "313:     ret = roots.serve_file(load, fnd)",
      "314:     assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
      "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: \"\"\"",
      "5: import datetime",
      "6: import os",
      "7: import time",
      "9: import salt.fileserver",
      "10: import salt.utils.files",
      "13: def test_diff_with_diffent_keys():",
      "14:     \"\"\"",
      "15:     Test that different maps are indeed reported different",
      "16:     \"\"\"",
      "17:     map1 = {\"file1\": 1234}",
      "18:     map2 = {\"file2\": 1234}",
      "19:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "22: def test_diff_with_diffent_values():",
      "23:     \"\"\"",
      "24:     Test that different maps are indeed reported different",
      "25:     \"\"\"",
      "26:     map1 = {\"file1\": 12345}",
      "27:     map2 = {\"file1\": 1234}",
      "28:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "31: def test_whitelist():",
      "32:     opts = {",
      "33:         \"fileserver_backend\": [\"roots\", \"git\", \"s3fs\", \"hgfs\", \"svn\"],",
      "34:         \"extension_modules\": \"\",",
      "35:     }",
      "36:     fs = salt.fileserver.Fileserver(opts)",
      "37:     assert sorted(fs.servers.whitelist) == sorted(",
      "38:         [\"git\", \"gitfs\", \"hg\", \"hgfs\", \"svn\", \"svnfs\", \"roots\", \"s3fs\"]",
      "39:     ), fs.servers.whitelist",
      "42: def test_future_file_list_cache_file_ignored(tmp_path):",
      "43:     opts = {",
      "44:         \"fileserver_backend\": [\"roots\"],",
      "45:         \"cachedir\": tmp_path,",
      "46:         \"extension_modules\": \"\",",
      "47:     }",
      "49:     back_cachedir = os.path.join(tmp_path, \"file_lists/roots\")",
      "50:     os.makedirs(os.path.join(back_cachedir))",
      "52:     # Touch a couple files",
      "53:     for filename in (\"base.p\", \"foo.txt\"):",
      "54:         with salt.utils.files.fopen(os.path.join(back_cachedir, filename), \"wb\") as _f:",
      "55:             if filename == \"base.p\":",
      "56:                 _f.write(b\"\\x80\")",
      "58:     # Set modification time to file list cache file to 1 year in the future",
      "59:     now = datetime.datetime.utcnow()",
      "60:     future = now + datetime.timedelta(days=365)",
      "61:     mod_time = time.mktime(future.timetuple())",
      "62:     os.utime(os.path.join(back_cachedir, \"base.p\"), (mod_time, mod_time))",
      "64:     list_cache = os.path.join(back_cachedir, \"base.p\")",
      "65:     w_lock = os.path.join(back_cachedir, \".base.w\")",
      "66:     ret = salt.fileserver.check_file_list_cache(opts, \"files\", list_cache, w_lock)",
      "67:     assert (",
      "68:         ret[1] is True",
      "69:     ), \"Cache file list cache file is not refreshed when future modification time\"",
      "72: def test_file_server_url_escape(tmp_path):",
      "73:     (tmp_path / \"srv\").mkdir()",
      "74:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "75:     (tmp_path / \"foo\").mkdir()",
      "76:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "77:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "78:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "79:     opts = {",
      "80:         \"fileserver_backend\": [\"roots\"],",
      "81:         \"extension_modules\": \"\",",
      "82:         \"optimization_order\": [",
      "83:             0,",
      "84:         ],",
      "85:         \"file_roots\": {",
      "86:             \"base\": [fileroot],",
      "87:         },",
      "88:         \"file_ignore_regex\": \"\",",
      "89:         \"file_ignore_glob\": \"\",",
      "90:     }",
      "91:     fs = salt.fileserver.Fileserver(opts)",
      "92:     ret = fs.find_file(",
      "93:         \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "94:         \"base\",",
      "95:     )",
      "96:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "99: def test_file_server_serve_url_escape(tmp_path):",
      "100:     (tmp_path / \"srv\").mkdir()",
      "101:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "102:     (tmp_path / \"foo\").mkdir()",
      "103:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "104:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "105:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "106:     opts = {",
      "107:         \"fileserver_backend\": [\"roots\"],",
      "108:         \"extension_modules\": \"\",",
      "109:         \"optimization_order\": [",
      "110:             0,",
      "111:         ],",
      "112:         \"file_roots\": {",
      "113:             \"base\": [fileroot],",
      "114:         },",
      "115:         \"file_ignore_regex\": \"\",",
      "116:         \"file_ignore_glob\": \"\",",
      "117:         \"file_buffer_size\": 2048,",
      "118:     }",
      "119:     fs = salt.fileserver.Fileserver(opts)",
      "120:     ret = fs.serve_file(",
      "121:         {",
      "122:             \"path\": \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "123:             \"saltenv\": \"base\",",
      "124:             \"loc\": 0,",
      "125:         }",
      "126:     )",
      "127:     assert ret == {\"data\": \"\", \"dest\": \"\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py": [
      "File: tests/pytests/unit/test_master.py -> tests/pytests/unit/test_master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import time",
      "3: import pytest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pathlib",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     with patch.object(encrypted_requests, \"_return\", autospec=True) as fake_return:",
      "161:         encrypted_requests._syndic_return(payload)",
      "162:         fake_return.assert_called_with(expected_return)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166: def test_syndic_return_cache_dir_creation(encrypted_requests):",
      "167:     \"\"\"master's cachedir for a syndic will be created by AESFuncs._syndic_return method\"\"\"",
      "168:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "169:     assert not (cachedir / \"syndics\").exists()",
      "170:     encrypted_requests._syndic_return(",
      "171:         {",
      "172:             \"id\": \"mamajama\",",
      "173:             \"jid\": \"\",",
      "174:             \"return\": {},",
      "175:         }",
      "176:     )",
      "177:     assert (cachedir / \"syndics\").exists()",
      "178:     assert (cachedir / \"syndics\" / \"mamajama\").exists()",
      "181: def test_syndic_return_cache_dir_creation_traversal(encrypted_requests):",
      "182:     \"\"\"",
      "183:     master's  AESFuncs._syndic_return method cachdir creation is not vulnerable to a directory traversal",
      "184:     \"\"\"",
      "185:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "186:     assert not (cachedir / \"syndics\").exists()",
      "187:     encrypted_requests._syndic_return(",
      "188:         {",
      "189:             \"id\": \"../mamajama\",",
      "190:             \"jid\": \"\",",
      "191:             \"return\": {},",
      "192:         }",
      "193:     )",
      "194:     assert not (cachedir / \"syndics\").exists()",
      "195:     assert not (cachedir / \"mamajama\").exists()",
      "",
      "---------------"
    ],
    "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py": [
      "File: tests/unit/test_fileserver.py -> tests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f7530f68d3c60566b5ee87d701f341f3d036ee6e",
      "candidate_info": {
        "commit_hash": "f7530f68d3c60566b5ee87d701f341f3d036ee6e",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/f7530f68d3c60566b5ee87d701f341f3d036ee6e",
        "files": [
          "salt/master.py"
        ],
        "message": "Fix wart in patch",
        "before_after_code_files": [
          "salt/master.py||salt/master.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/master.py||salt/master.py"
          ],
          "candidate": [
            "salt/master.py||salt/master.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/master.py||salt/master.py": [
          "File: salt/master.py -> salt/master.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1037:         key = payload[\"enc\"]",
          "1038:         load = payload[\"load\"]",
          "1039:         if key == \"aes\":",
          "1041:         else:",
          "1043:         raise salt.ext.tornado.gen.Return(ret)",
          "1045:     def _post_stats(self, start, cmd):",
          "",
          "[Removed Lines]",
          "1040:             ret = self.handle_aes(load)",
          "1042:             ret = self.handle_clear(load)",
          "",
          "[Added Lines]",
          "1040:             ret = self._handle_aes(load)",
          "1042:             ret = self._handle_clear(load)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1109ee516f9592768ec95d26a73db6af6fd08067",
      "candidate_info": {
        "commit_hash": "1109ee516f9592768ec95d26a73db6af6fd08067",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/1109ee516f9592768ec95d26a73db6af6fd08067",
        "files": [
          "tests/pytests/unit/fileserver/test_roots.py"
        ],
        "message": "Clean up test fixtures",
        "before_after_code_files": [
          "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
          ],
          "candidate": [
            "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
          "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     return \"\u0441\u043e\u043b\u044c\"",
          "32: def testfile(tmp_path):",
          "33:     fp = tmp_path / \"testfile\"",
          "34:     fp.write_text(\"This is a testfile\")",
          "35:     return fp",
          "39: def tmp_state_tree(tmp_path, testfile, unicode_filename, unicode_dirname):",
          "40:     dirname = tmp_path / \"roots_tmp_state_tree\"",
          "41:     dirname.mkdir(parents=True, exist_ok=True)",
          "",
          "[Removed Lines]",
          "31: @pytest.fixture(autouse=True)",
          "38: @pytest.fixture(autouse=True)",
          "",
          "[Added Lines]",
          "31: @pytest.fixture",
          "38: @pytest.fixture",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     return dirname",
          "57: def testfilepath(tmp_state_tree, testfile):",
          "58:     return tmp_state_tree / testfile.name",
          "61: @pytest.fixture",
          "64:     overrides = {\"file_roots\": {\"base\": [str(tmp_state_tree)]}}",
          "69: def test_file_list(unicode_filename):",
          "",
          "[Removed Lines]",
          "56: @pytest.fixture(autouse=True)",
          "62: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
          "63:     opts = temp_salt_master.config.copy()",
          "65:     opts.update(overrides)",
          "66:     return {roots: {\"__opts__\": opts}}",
          "",
          "[Added Lines]",
          "56: @pytest.fixture",
          "62: def configure_loader_modules(tmp_state_tree, master_config):",
          "64:     master_config.update(overrides)",
          "65:     return {roots: {\"__opts__\": master_config}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5369d5843caad6b418bb656e7f26f55ea0d8d93c",
      "candidate_info": {
        "commit_hash": "5369d5843caad6b418bb656e7f26f55ea0d8d93c",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/5369d5843caad6b418bb656e7f26f55ea0d8d93c",
        "files": [
          "tests/pytests/unit/fileserver/__init__.py",
          "tests/pytests/unit/fileserver/gitfs/__init__.py",
          "tests/pytests/unit/fileserver/gitfs/test_gitfs.py",
          "tests/pytests/unit/fileserver/gitfs/test_gitfs_config.py",
          "tests/pytests/unit/fileserver/test_roots.py",
          "tests/pytests/unit/fileserver/test_s3fs.py",
          "tests/pytests/unit/fileserver/test_svnfs.py",
          "tests/unit/fileserver/test_gitfs.py",
          "tests/unit/fileserver/test_roots.py",
          "tests/unit/fileserver/test_s3fs.py",
          "tests/unit/fileserver/test_svnfs.py"
        ],
        "message": "migrate fileserver unit tests to pytest",
        "before_after_code_files": [
          "tests/pytests/unit/fileserver/gitfs/test_gitfs.py||tests/pytests/unit/fileserver/gitfs/test_gitfs.py",
          "tests/pytests/unit/fileserver/gitfs/test_gitfs_config.py||tests/pytests/unit/fileserver/gitfs/test_gitfs_config.py",
          "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py",
          "tests/pytests/unit/fileserver/test_s3fs.py||tests/pytests/unit/fileserver/test_s3fs.py",
          "tests/pytests/unit/fileserver/test_svnfs.py||tests/pytests/unit/fileserver/test_svnfs.py",
          "tests/unit/fileserver/test_gitfs.py||tests/unit/fileserver/test_gitfs.py",
          "tests/unit/fileserver/test_roots.py||tests/unit/fileserver/test_roots.py",
          "tests/unit/fileserver/test_s3fs.py||tests/unit/fileserver/test_s3fs.py",
          "tests/unit/fileserver/test_svnfs.py||tests/unit/fileserver/test_svnfs.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
          ],
          "candidate": [
            "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/fileserver/gitfs/test_gitfs.py||tests/pytests/unit/fileserver/gitfs/test_gitfs.py": [
          "File: tests/pytests/unit/fileserver/gitfs/test_gitfs.py -> tests/pytests/unit/fileserver/gitfs/test_gitfs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: These are where the tests go, so that they can be run using both GitPython",
          "3: and pygit2.",
          "5: NOTE: The gitfs.update() has to happen AFTER the setUp is called. This is",
          "6: because running it inside the setUp will spawn a new singleton, which means",
          "7: that tests which need to mock the __opts__ will be too late; the setUp will",
          "8: have created a new singleton that will bypass our mocking. To ensure that",
          "9: our tests are reliable and correct, we want to make sure that each test",
          "10: uses a new gitfs object, allowing different manipulations of the opts to be",
          "11: tested.",
          "13: Therefore, keep the following in mind:",
          "15: 1. Each test needs to call gitfs.update() *after* any patching, and",
          "17: 2. Do *NOT* move the gitfs.update() into the setUp.",
          "19:     :codeauthor: Erik Johnson <erik@saltstack.com>",
          "20: \"\"\"",
          "22: import logging",
          "23: import os",
          "24: import pathlib",
          "26: import pytest",
          "28: import salt.ext.tornado.ioloop",
          "29: import salt.fileserver.gitfs as gitfs",
          "30: import salt.utils.files",
          "31: import salt.utils.gitfs",
          "32: import salt.utils.platform",
          "33: import salt.utils.win_functions",
          "34: import salt.utils.yaml",
          "35: from salt.utils.gitfs import (",
          "36:     GITPYTHON_MINVER,",
          "37:     GITPYTHON_VERSION,",
          "38:     LIBGIT2_MINVER,",
          "39:     LIBGIT2_VERSION,",
          "40:     PYGIT2_MINVER,",
          "41:     PYGIT2_VERSION,",
          "42: )",
          "43: from tests.support.helpers import patched_environ",
          "44: from tests.support.mock import patch",
          "46: try:",
          "47:     import pwd  # pylint: disable=unused-import",
          "48: except ImportError:",
          "49:     pass",
          "52: try:",
          "53:     import git",
          "55:     # We still need to use GitPython here for temp repo setup, so we do need to",
          "56:     # actually import it. But we don't need import pygit2 in this module, we",
          "57:     # can just use the LooseVersion instances imported along with",
          "58:     # salt.utils.gitfs to check if we have a compatible version.",
          "59:     HAS_GITPYTHON = GITPYTHON_VERSION >= GITPYTHON_MINVER",
          "60: except (ImportError, AttributeError):",
          "61:     HAS_GITPYTHON = False",
          "63: try:",
          "64:     HAS_PYGIT2 = PYGIT2_VERSION >= PYGIT2_MINVER and LIBGIT2_VERSION >= LIBGIT2_MINVER",
          "65: except AttributeError:",
          "66:     HAS_PYGIT2 = False",
          "68: log = logging.getLogger(__name__)",
          "71: @pytest.fixture(scope=\"module\", params=[\"gitpython\", \"pygit2\"], autouse=True)",
          "72: def provider(request):",
          "73:     if not HAS_GITPYTHON:",
          "74:         pytest.skip(",
          "75:             \"GitPython >= {} required for temp repo setup\".format(GITPYTHON_MINVER)",
          "76:         )",
          "77:     if request.param == \"pygit2\":",
          "78:         if not HAS_PYGIT2:",
          "79:             pytest.skip(",
          "80:                 \"pygit2 >= {} and libgit2 >= {} required\".format(",
          "81:                     PYGIT2_MINVER, LIBGIT2_MINVER",
          "82:                 )",
          "83:             )",
          "84:         if salt.utils.platform.is_windows():",
          "85:             pytest.skip(\"Skip Pygit2 on windows, due to pygit2 access error on windows\")",
          "87:     return request.param",
          "90: @pytest.fixture",
          "91: def sock_dir(tmp_path):",
          "92:     dirname = tmp_path / \"sock_dir\"",
          "93:     dirname.mkdir(parents=True, exist_ok=True)",
          "94:     return dirname",
          "97: @pytest.fixture(scope=\"module\")",
          "98: def unicode_filename():",
          "99:     return \"\u043f\u0438\u0442\u043e\u043d.txt\"",
          "102: @pytest.fixture(scope=\"module\")",
          "103: def tag_name():",
          "104:     return \"mytag\"",
          "107: @pytest.fixture(scope=\"module\")",
          "108: def unicode_dirname():",
          "109:     return \"\u0441\u043e\u043b\u044c\"",
          "112: @pytest.fixture(scope=\"module\")",
          "113: def load():",
          "114:     return {\"saltenv\": \"base\"}",
          "117: @pytest.fixture(autouse=True)",
          "118: def testfile(tmp_path):",
          "119:     fp = tmp_path / \"testfile\"",
          "120:     fp.write_text(\"This is a testfile\")",
          "121:     return fp",
          "124: @pytest.fixture",
          "125: def repo_dir(tmp_path, unicode_dirname, tag_name, unicode_filename):",
          "126:     try:",
          "127:         del salt.utils.gitfs.GitFS.instance_map[",
          "128:             salt.ext.tornado.ioloop.IOLoop.current()",
          "129:         ]",
          "130:     except KeyError:",
          "131:         pass",
          "133:     dirname = str(tmp_path / \"repo_dir\")",
          "134:     if salt.utils.platform.is_windows():",
          "135:         dirname = dirname.replace(\"\\\\\", \"/\")",
          "137:     # Populate repo",
          "138:     root = pathlib.Path(dirname)",
          "139:     grail_dir = root / \"grail\"",
          "140:     grail_dir.mkdir(parents=True, exist_ok=True)",
          "141:     (grail_dir / \"random_file\").touch()",
          "142:     testfile = root / \"testfile\"",
          "143:     testfile.write_text(\"this is a testfile in a git repo\\n\")",
          "144:     unicode_file = root / unicode_filename",
          "145:     unicode_file.write_text(\"\\nThis is a file with a unicode name\\n\")",
          "146:     unicode_dir = root / unicode_dirname",
          "147:     unicode_dir.mkdir(parents=True, exist_ok=True)",
          "148:     (unicode_dir / \"foo.txt\").touch()",
          "150:     # Generate git data",
          "151:     repo = git.Repo.init(dirname)",
          "152:     try:",
          "153:         if salt.utils.platform.is_windows():",
          "154:             username = salt.utils.win_functions.get_current_user()",
          "155:         else:",
          "156:             username = pwd.getpwuid(os.geteuid()).pw_name",
          "157:     except AttributeError:",
          "158:         log.error(\"Unable to get effective username, falling back to 'root'.\")",
          "159:         username = \"root\"",
          "161:     with patched_environ(USERNAME=username):",
          "162:         repo.index.add([x for x in os.listdir(dirname) if x != \".git\"])",
          "163:         repo.index.commit(\"Test\")",
          "165:         # Add another branch with unicode characters in the name",
          "166:         repo.create_head(unicode_dirname, \"HEAD\")",
          "168:         # Add a tag",
          "169:         repo.create_tag(tag_name, \"HEAD\")",
          "170:         # Older GitPython versions do not have a close method.",
          "171:         if hasattr(repo, \"close\"):",
          "172:             repo.close()",
          "174:     return dirname",
          "177: @pytest.fixture",
          "178: def cache_dir(tmp_path):",
          "179:     dirname = tmp_path / \"cache_dir\"",
          "180:     dirname.mkdir(parents=True, exist_ok=True)",
          "181:     return dirname",
          "184: @pytest.fixture",
          "185: def configure_loader_modules(provider, sock_dir, repo_dir, cache_dir):",
          "186:     opts = {",
          "187:         \"sock_dir\": str(sock_dir),",
          "188:         \"gitfs_remotes\": [\"file://\" + str(repo_dir)],",
          "189:         \"cachedir\": str(cache_dir),",
          "190:         \"gitfs_root\": \"\",",
          "191:         \"fileserver_backend\": [\"gitfs\"],",
          "192:         \"gitfs_base\": \"master\",",
          "193:         \"gitfs_fallback\": \"\",",
          "194:         \"fileserver_events\": True,",
          "195:         \"transport\": \"zeromq\",",
          "196:         \"gitfs_mountpoint\": \"\",",
          "197:         \"gitfs_saltenv\": [],",
          "198:         \"gitfs_saltenv_whitelist\": [],",
          "199:         \"gitfs_saltenv_blacklist\": [],",
          "200:         \"gitfs_user\": \"\",",
          "201:         \"gitfs_password\": \"\",",
          "202:         \"gitfs_insecure_auth\": False,",
          "203:         \"gitfs_privkey\": \"\",",
          "204:         \"gitfs_pubkey\": \"\",",
          "205:         \"gitfs_passphrase\": \"\",",
          "206:         \"gitfs_refspecs\": [",
          "207:             \"+refs/heads/*:refs/remotes/origin/*\",",
          "208:             \"+refs/tags/*:refs/tags/*\",",
          "209:         ],",
          "210:         \"gitfs_ssl_verify\": True,",
          "211:         \"gitfs_disable_saltenv_mapping\": False,",
          "212:         \"gitfs_ref_types\": [\"branch\", \"tag\", \"sha\"],",
          "213:         \"gitfs_update_interval\": 60,",
          "214:         \"__role\": \"master\",",
          "215:         \"gitfs_provider\": provider,",
          "216:     }",
          "218:     return {gitfs: {\"__opts__\": opts}}",
          "221: @pytest.fixture(autouse=True)",
          "222: def skip_on_no_virtual(configure_loader_modules):",
          "223:     if not gitfs.__virtual__():",
          "224:         pytest.skip(\"GitFS could not be loaded. Skipping GitFS tests!\")",
          "227: @pytest.mark.slow_test",
          "228: def test_file_list(load, unicode_filename, unicode_dirname):",
          "229:     gitfs.update()",
          "230:     ret = gitfs.file_list(load)",
          "231:     assert \"testfile\" in ret",
          "232:     assert unicode_filename in ret",
          "233:     # This function does not use os.sep, the Salt fileserver uses the",
          "234:     # forward slash, hence it being explicitly used to join here.",
          "235:     assert \"/\".join((unicode_dirname, \"foo.txt\")) in ret",
          "238: @pytest.mark.slow_test",
          "239: def test_dir_list(load, unicode_dirname):",
          "240:     gitfs.update()",
          "241:     ret = gitfs.dir_list(load)",
          "242:     assert \"grail\" in ret",
          "243:     assert unicode_dirname in ret",
          "246: def test_find_and_serve_file(repo_dir):",
          "247:     with patch.dict(gitfs.__opts__, {\"file_buffer_size\": 262144}):",
          "248:         gitfs.update()",
          "250:         # find_file",
          "251:         ret = gitfs.find_file(\"testfile\")",
          "252:         assert \"testfile\" == ret[\"rel\"]",
          "254:         full_path_to_file = salt.utils.path.join(",
          "255:             gitfs.__opts__[\"cachedir\"], \"gitfs\", \"refs\", \"base\", \"testfile\"",
          "256:         )",
          "257:         assert full_path_to_file == ret[\"path\"]",
          "259:         # serve_file",
          "260:         load = {\"saltenv\": \"base\", \"path\": full_path_to_file, \"loc\": 0}",
          "261:         fnd = {\"path\": full_path_to_file, \"rel\": \"testfile\"}",
          "262:         ret = gitfs.serve_file(load, fnd)",
          "264:         with salt.utils.files.fopen(",
          "265:             os.path.join(repo_dir, \"testfile\"), \"r\"",
          "266:         ) as fp_:  # NB: Why not 'rb'?",
          "267:             data = fp_.read()",
          "269:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
          "272: def test_file_list_fallback(unicode_filename, unicode_dirname):",
          "273:     with patch.dict(gitfs.__opts__, {\"gitfs_fallback\": \"master\"}):",
          "274:         gitfs.update()",
          "275:         ret = gitfs.file_list({\"saltenv\": \"notexisting\"})",
          "276:         assert \"testfile\" in ret",
          "277:         assert unicode_filename in ret",
          "278:         # This function does not use os.sep, the Salt fileserver uses the",
          "279:         # forward slash, hence it being explicitly used to join here.",
          "280:         assert \"/\".join((unicode_dirname, \"foo.txt\")) in ret",
          "283: def test_dir_list_fallback(unicode_dirname):",
          "284:     with patch.dict(gitfs.__opts__, {\"gitfs_fallback\": \"master\"}):",
          "285:         gitfs.update()",
          "286:         ret = gitfs.dir_list({\"saltenv\": \"notexisting\"})",
          "287:         assert \"grail\" in ret",
          "288:         assert unicode_dirname in ret",
          "291: def test_find_and_serve_file_fallback(repo_dir):",
          "292:     with patch.dict(",
          "293:         gitfs.__opts__, {\"file_buffer_size\": 262144, \"gitfs_fallback\": \"master\"}",
          "294:     ):",
          "295:         gitfs.update()",
          "297:         # find_file",
          "298:         ret = gitfs.find_file(\"testfile\", tgt_env=\"notexisting\")",
          "299:         assert \"testfile\" == ret[\"rel\"]",
          "301:         full_path_to_file = salt.utils.path.join(",
          "302:             gitfs.__opts__[\"cachedir\"], \"gitfs\", \"refs\", \"notexisting\", \"testfile\"",
          "303:         )",
          "304:         assert full_path_to_file == ret[\"path\"]",
          "306:         # serve_file",
          "307:         load = {\"saltenv\": \"notexisting\", \"path\": full_path_to_file, \"loc\": 0}",
          "308:         fnd = {\"path\": full_path_to_file, \"rel\": \"testfile\"}",
          "309:         ret = gitfs.serve_file(load, fnd)",
          "311:         with salt.utils.files.fopen(",
          "312:             os.path.join(repo_dir, \"testfile\"), \"r\"",
          "313:         ) as fp_:  # NB: Why not 'rb'?",
          "314:             data = fp_.read()",
          "316:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
          "319: @pytest.mark.slow_test",
          "320: def test_envs(unicode_dirname, tag_name):",
          "321:     gitfs.update()",
          "322:     ret = gitfs.envs(ignore_cache=True)",
          "323:     assert \"base\" in ret",
          "324:     assert unicode_dirname in ret",
          "325:     assert tag_name in ret",
          "328: @pytest.mark.slow_test",
          "329: def test_ref_types_global(unicode_dirname, tag_name):",
          "330:     \"\"\"",
          "331:     Test the global gitfs_ref_types config option",
          "332:     \"\"\"",
          "333:     with patch.dict(gitfs.__opts__, {\"gitfs_ref_types\": [\"branch\"]}):",
          "334:         gitfs.update()",
          "335:         ret = gitfs.envs(ignore_cache=True)",
          "336:         # Since we are restricting to branches only, the tag should not",
          "337:         # appear in the envs list.",
          "338:         assert \"base\" in ret",
          "339:         assert unicode_dirname in ret",
          "340:         assert tag_name not in ret",
          "343: @pytest.mark.slow_test",
          "344: def test_ref_types_per_remote(repo_dir, unicode_dirname, tag_name):",
          "345:     \"\"\"",
          "346:     Test the per_remote ref_types config option, using a different",
          "347:     ref_types setting than the global test.",
          "348:     \"\"\"",
          "349:     remotes = [{\"file://\" + repo_dir: [{\"ref_types\": [\"tag\"]}]}]",
          "350:     with patch.dict(gitfs.__opts__, {\"gitfs_remotes\": remotes}):",
          "351:         gitfs.update()",
          "352:         ret = gitfs.envs(ignore_cache=True)",
          "353:         # Since we are restricting to tags only, the tag should appear in",
          "354:         # the envs list, but the branches should not.",
          "355:         assert \"base\" not in ret",
          "356:         assert unicode_dirname not in ret",
          "357:         assert tag_name in ret",
          "360: @pytest.mark.slow_test",
          "361: def test_disable_saltenv_mapping_global_with_mapping_defined_globally():",
          "362:     \"\"\"",
          "363:     Test the global gitfs_disable_saltenv_mapping config option, combined",
          "364:     with the per-saltenv mapping being defined in the global gitfs_saltenv",
          "365:     option.",
          "366:     \"\"\"",
          "367:     opts = {",
          "368:         \"gitfs_disable_saltenv_mapping\": True,",
          "369:         \"gitfs_saltenv\": [{\"foo\": [{\"ref\": \"somebranch\"}]}],",
          "370:     }",
          "371:     with patch.dict(gitfs.__opts__, opts):",
          "372:         gitfs.update()",
          "373:         ret = gitfs.envs(ignore_cache=True)",
          "374:         # Since we are restricting to tags only, the tag should appear in",
          "375:         # the envs list, but the branches should not.",
          "376:         assert ret == [\"base\", \"foo\"]",
          "379: @pytest.mark.slow_test",
          "380: def test_saltenv_blacklist(unicode_dirname):",
          "381:     \"\"\"",
          "382:     test saltenv_blacklist",
          "383:     \"\"\"",
          "384:     opts = {\"gitfs_saltenv_blacklist\": \"base\"}",
          "385:     with patch.dict(gitfs.__opts__, opts):",
          "386:         gitfs.update()",
          "387:         ret = gitfs.envs(ignore_cache=True)",
          "388:         assert \"base\" not in ret",
          "389:         assert unicode_dirname in ret",
          "390:         assert \"mytag\" in ret",
          "393: @pytest.mark.slow_test",
          "394: def test_saltenv_whitelist(unicode_dirname):",
          "395:     \"\"\"",
          "396:     test saltenv_whitelist",
          "397:     \"\"\"",
          "398:     opts = {\"gitfs_saltenv_whitelist\": \"base\"}",
          "399:     with patch.dict(gitfs.__opts__, opts):",
          "400:         gitfs.update()",
          "401:         ret = gitfs.envs(ignore_cache=True)",
          "402:         assert \"base\" in ret",
          "403:         assert unicode_dirname not in ret",
          "404:         assert \"mytag\" not in ret",
          "407: @pytest.mark.slow_test",
          "408: def test_env_deprecated_opts(unicode_dirname):",
          "409:     \"\"\"",
          "410:     ensure deprecated options gitfs_env_whitelist",
          "411:     and gitfs_env_blacklist do not cause gitfs to",
          "412:     not load.",
          "413:     \"\"\"",
          "414:     opts = {",
          "415:         \"gitfs_env_whitelist\": \"base\",",
          "416:         \"gitfs_env_blacklist\": \"\",",
          "417:     }",
          "418:     with patch.dict(gitfs.__opts__, opts):",
          "419:         gitfs.update()",
          "420:         ret = gitfs.envs(ignore_cache=True)",
          "421:         assert \"base\" in ret",
          "422:         assert unicode_dirname in ret",
          "423:         assert \"mytag\" in ret",
          "426: @pytest.mark.slow_test",
          "427: def test_disable_saltenv_mapping_global_with_mapping_defined_per_remote(repo_dir):",
          "428:     \"\"\"",
          "429:     Test the global gitfs_disable_saltenv_mapping config option, combined",
          "430:     with the per-saltenv mapping being defined in the remote itself via the",
          "431:     \"saltenv\" per-remote option.",
          "432:     \"\"\"",
          "433:     opts = {",
          "434:         \"gitfs_disable_saltenv_mapping\": True,",
          "435:         \"gitfs_remotes\": [",
          "436:             {repo_dir: [{\"saltenv\": [{\"bar\": [{\"ref\": \"somebranch\"}]}]}]}",
          "437:         ],",
          "438:     }",
          "439:     with patch.dict(gitfs.__opts__, opts):",
          "440:         gitfs.update()",
          "441:         ret = gitfs.envs(ignore_cache=True)",
          "442:         # Since we are restricting to tags only, the tag should appear in",
          "443:         # the envs list, but the branches should not.",
          "444:         assert ret == [\"bar\", \"base\"]",
          "447: @pytest.mark.slow_test",
          "448: def test_disable_saltenv_mapping_per_remote_with_mapping_defined_globally(repo_dir):",
          "449:     \"\"\"",
          "450:     Test the per-remote disable_saltenv_mapping config option, combined",
          "451:     with the per-saltenv mapping being defined in the global gitfs_saltenv",
          "452:     option.",
          "453:     \"\"\"",
          "454:     opts = {",
          "455:         \"gitfs_remotes\": [{repo_dir: [{\"disable_saltenv_mapping\": True}]}],",
          "456:         \"gitfs_saltenv\": [{\"hello\": [{\"ref\": \"somebranch\"}]}],",
          "457:     }",
          "459:     with patch.dict(gitfs.__opts__, opts):",
          "460:         gitfs.update()",
          "461:         ret = gitfs.envs(ignore_cache=True)",
          "462:         # Since we are restricting to tags only, the tag should appear in",
          "463:         # the envs list, but the branches should not.",
          "464:         assert ret == [\"base\", \"hello\"]",
          "467: @pytest.mark.slow_test",
          "468: def test_disable_saltenv_mapping_per_remote_with_mapping_defined_per_remote(repo_dir):",
          "469:     \"\"\"",
          "470:     Test the per-remote disable_saltenv_mapping config option, combined",
          "471:     with the per-saltenv mapping being defined in the remote itself via the",
          "472:     \"saltenv\" per-remote option.",
          "473:     \"\"\"",
          "474:     opts = {",
          "475:         \"gitfs_remotes\": [",
          "476:             {",
          "477:                 repo_dir: [",
          "478:                     {\"disable_saltenv_mapping\": True},",
          "479:                     {\"saltenv\": [{\"world\": [{\"ref\": \"somebranch\"}]}]},",
          "480:                 ]",
          "481:             }",
          "482:         ]",
          "483:     }",
          "484:     with patch.dict(gitfs.__opts__, opts):",
          "485:         gitfs.update()",
          "486:         ret = gitfs.envs(ignore_cache=True)",
          "487:         # Since we are restricting to tags only, the tag should appear in",
          "488:         # the envs list, but the branches should not.",
          "489:         assert ret == [\"base\", \"world\"]",
          "",
          "---------------"
        ],
        "tests/pytests/unit/fileserver/gitfs/test_gitfs_config.py||tests/pytests/unit/fileserver/gitfs/test_gitfs_config.py": [
          "File: tests/pytests/unit/fileserver/gitfs/test_gitfs_config.py -> tests/pytests/unit/fileserver/gitfs/test_gitfs_config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import textwrap",
          "3: import pytest",
          "5: import salt.ext.tornado.ioloop",
          "6: import salt.fileserver.gitfs as gitfs",
          "7: import salt.utils.files",
          "8: import salt.utils.gitfs",
          "9: import salt.utils.platform",
          "10: import salt.utils.win_functions",
          "11: import salt.utils.yaml",
          "12: from salt.utils.gitfs import GITPYTHON_MINVER, GITPYTHON_VERSION",
          "13: from tests.support.mock import patch",
          "15: try:",
          "16:     # pylint: disable=unused-import",
          "17:     import git",
          "19:     # We still need to use GitPython here for temp repo setup, so we do need to",
          "20:     # actually import it. But we don't need import pygit2 in this module, we",
          "21:     # can just use the LooseVersion instances imported along with",
          "22:     # salt.utils.gitfs to check if we have a compatible version.",
          "23:     HAS_GITPYTHON = GITPYTHON_VERSION >= GITPYTHON_MINVER",
          "24: except (ImportError, AttributeError):",
          "25:     HAS_GITPYTHON = False",
          "28: pytestmark = [",
          "29:     pytest.mark.skipif(",
          "30:         not HAS_GITPYTHON, reason=\"GitPython >= {} required\".format(GITPYTHON_MINVER)",
          "31:     )",
          "32: ]",
          "35: @pytest.fixture",
          "36: def configure_loader_modules(tmp_path):",
          "37:     opts = {",
          "38:         \"sock_dir\": str(tmp_path / \"sock_dir\"),",
          "39:         \"gitfs_remotes\": [\"file://\" + str(tmp_path / \"repo_dir\")],",
          "40:         \"cachedir\": str(tmp_path / \"cache_dir\"),",
          "41:         \"gitfs_root\": \"\",",
          "42:         \"fileserver_backend\": [\"gitfs\"],",
          "43:         \"gitfs_base\": \"master\",",
          "44:         \"gitfs_fallback\": \"\",",
          "45:         \"fileserver_events\": True,",
          "46:         \"transport\": \"zeromq\",",
          "47:         \"gitfs_mountpoint\": \"\",",
          "48:         \"gitfs_saltenv\": [],",
          "49:         \"gitfs_saltenv_whitelist\": [],",
          "50:         \"gitfs_saltenv_blacklist\": [],",
          "51:         \"gitfs_user\": \"\",",
          "52:         \"gitfs_password\": \"\",",
          "53:         \"gitfs_insecure_auth\": False,",
          "54:         \"gitfs_privkey\": \"\",",
          "55:         \"gitfs_pubkey\": \"\",",
          "56:         \"gitfs_passphrase\": \"\",",
          "57:         \"gitfs_refspecs\": [",
          "58:             \"+refs/heads/*:refs/remotes/origin/*\",",
          "59:             \"+refs/tags/*:refs/tags/*\",",
          "60:         ],",
          "61:         \"gitfs_ssl_verify\": True,",
          "62:         \"gitfs_disable_saltenv_mapping\": False,",
          "63:         \"gitfs_ref_types\": [\"branch\", \"tag\", \"sha\"],",
          "64:         \"gitfs_update_interval\": 60,",
          "65:         \"__role\": \"master\",",
          "66:     }",
          "67:     if salt.utils.platform.is_windows():",
          "68:         opts[\"gitfs_remotes\"] = opts[\"gitfs_remotes\"].replace(\"\\\\\", \"/\")",
          "70:     return {gitfs: {\"__opts__\": opts}}",
          "73: @pytest.fixture(scope=\"module\", autouse=True)",
          "74: def clear_instance_map():",
          "75:     try:",
          "76:         del salt.utils.gitfs.GitFS.instance_map[",
          "77:             salt.ext.tornado.ioloop.IOLoop.current()",
          "78:         ]",
          "79:     except KeyError:",
          "80:         pass",
          "83: def test_per_saltenv_config():",
          "84:     opts_override = textwrap.dedent(",
          "85:         \"\"\"",
          "86:         gitfs_root: salt",
          "88:         gitfs_saltenv:",
          "89:           - baz:",
          "90:             # when loaded, the \"salt://\" prefix will be removed",
          "91:             - mountpoint: salt://baz_mountpoint",
          "92:             - ref: baz_branch",
          "93:             - root: baz_root",
          "95:         gitfs_remotes:",
          "97:           - file://{0}tmp/repo1:",
          "98:             - saltenv:",
          "99:               - foo:",
          "100:                 - ref: foo_branch",
          "101:                 - root: foo_root",
          "103:           - file://{0}tmp/repo2:",
          "104:             - mountpoint: repo2",
          "105:             - saltenv:",
          "106:               - baz:",
          "107:                 - mountpoint: abc",
          "108:     \"\"\".format(",
          "109:             \"/\" if salt.utils.platform.is_windows() else \"\"",
          "110:         )",
          "111:     )",
          "112:     with patch.dict(gitfs.__opts__, salt.utils.yaml.safe_load(opts_override)):",
          "113:         git_fs = salt.utils.gitfs.GitFS(",
          "114:             gitfs.__opts__,",
          "115:             gitfs.__opts__[\"gitfs_remotes\"],",
          "116:             per_remote_overrides=gitfs.PER_REMOTE_OVERRIDES,",
          "117:             per_remote_only=gitfs.PER_REMOTE_ONLY,",
          "118:         )",
          "120:     # repo1 (branch: foo)",
          "121:     # The mountpoint should take the default (from gitfs_mountpoint), while",
          "122:     # ref and root should take the per-saltenv params.",
          "123:     assert git_fs.remotes[0].mountpoint(\"foo\") == \"\"",
          "124:     assert git_fs.remotes[0].ref(\"foo\") == \"foo_branch\"",
          "125:     assert git_fs.remotes[0].root(\"foo\") == \"foo_root\"",
          "127:     # repo1 (branch: bar)",
          "128:     # The 'bar' branch does not have a per-saltenv configuration set, so",
          "129:     # each of the below values should fall back to global values.",
          "130:     assert git_fs.remotes[0].mountpoint(\"bar\") == \"\"",
          "131:     assert git_fs.remotes[0].ref(\"bar\") == \"bar\"",
          "132:     assert git_fs.remotes[0].root(\"bar\") == \"salt\"",
          "134:     # repo1 (branch: baz)",
          "135:     # The 'baz' branch does not have a per-saltenv configuration set, but",
          "136:     # it is defined in the gitfs_saltenv parameter, so the values",
          "137:     # from that parameter should be returned.",
          "138:     assert git_fs.remotes[0].mountpoint(\"baz\") == \"baz_mountpoint\"",
          "139:     assert git_fs.remotes[0].ref(\"baz\") == \"baz_branch\"",
          "140:     assert git_fs.remotes[0].root(\"baz\") == \"baz_root\"",
          "142:     # repo2 (branch: foo)",
          "143:     # The mountpoint should take the per-remote mountpoint value of",
          "144:     # 'repo2', while ref and root should fall back to global values.",
          "145:     assert git_fs.remotes[1].mountpoint(\"foo\") == \"repo2\"",
          "146:     assert git_fs.remotes[1].ref(\"foo\") == \"foo\"",
          "147:     assert git_fs.remotes[1].root(\"foo\") == \"salt\"",
          "149:     # repo2 (branch: bar)",
          "150:     # The 'bar' branch does not have a per-saltenv configuration set, so",
          "151:     # the mountpoint should take the per-remote mountpoint value of",
          "152:     # 'repo2', while ref and root should fall back to global values.",
          "153:     assert git_fs.remotes[1].mountpoint(\"bar\") == \"repo2\"",
          "154:     assert git_fs.remotes[1].ref(\"bar\") == \"bar\"",
          "155:     assert git_fs.remotes[1].root(\"bar\") == \"salt\"",
          "157:     # repo2 (branch: baz)",
          "158:     # The 'baz' branch has the mountpoint configured as a per-saltenv",
          "159:     # parameter. The other two should take the values defined in",
          "160:     # gitfs_saltenv.",
          "161:     assert git_fs.remotes[1].mountpoint(\"baz\") == \"abc\"",
          "162:     assert git_fs.remotes[1].ref(\"baz\") == \"baz_branch\"",
          "163:     assert git_fs.remotes[1].root(\"baz\") == \"baz_root\"",
          "",
          "---------------"
        ],
        "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
          "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2:     :codeauthor: Mike Place <mp@saltstack.com>",
          "3: \"\"\"",
          "5: import copy",
          "6: import pathlib",
          "7: import shutil",
          "8: import textwrap",
          "10: import pytest",
          "12: import salt.fileclient",
          "13: import salt.fileserver.roots as roots",
          "14: import salt.utils.files",
          "15: import salt.utils.hashutils",
          "16: import salt.utils.platform",
          "17: import salt.utils.stringutils",
          "18: from tests.support.mock import MagicMock, mock_open, patch",
          "21: @pytest.fixture(scope=\"module\")",
          "22: def unicode_filename():",
          "23:     return \"\u043f\u0438\u0442\u043e\u043d.txt\"",
          "26: @pytest.fixture(scope=\"module\")",
          "27: def unicode_dirname():",
          "28:     return \"\u0441\u043e\u043b\u044c\"",
          "31: @pytest.fixture(autouse=True)",
          "32: def testfile(tmp_path):",
          "33:     fp = tmp_path / \"testfile\"",
          "34:     fp.write_text(\"This is a testfile\")",
          "35:     return fp",
          "38: @pytest.fixture(autouse=True)",
          "39: def tmp_state_tree(tmp_path, testfile, unicode_filename, unicode_dirname):",
          "40:     dirname = tmp_path / \"roots_tmp_state_tree\"",
          "41:     dirname.mkdir(parents=True, exist_ok=True)",
          "42:     shutil.copyfile(str(testfile), str(dirname / testfile.name))",
          "43:     unicode_dir = dirname / unicode_dirname",
          "44:     unicode_dir.mkdir(parents=True, exist_ok=True)",
          "45:     (dirname / unicode_filename).write_text(\"this is a unicode file\")",
          "46:     (unicode_dir / unicode_filename).write_text(",
          "47:         \"this is a unicode file in a unicode env\"",
          "48:     )",
          "49:     (unicode_dir / \"notunicode\").write_text(",
          "50:         \"this is NOT a unicode file in a unicode env\"",
          "51:     )",
          "53:     return dirname",
          "56: @pytest.fixture",
          "57: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
          "58:     opts = temp_salt_master.config.copy()",
          "59:     overrides = {\"file_roots\": {\"base\": [str(tmp_state_tree)]}}",
          "60:     opts.update(overrides)",
          "61:     return {roots: {\"__opts__\": opts}}",
          "64: def test_file_list(unicode_filename):",
          "65:     ret = roots.file_list({\"saltenv\": \"base\"})",
          "66:     assert \"testfile\" in ret",
          "67:     assert unicode_filename in ret",
          "70: def test_find_file(tmp_state_tree):",
          "71:     ret = roots.find_file(\"testfile\")",
          "72:     assert \"testfile\" == ret[\"rel\"]",
          "74:     full_path_to_file = str(tmp_state_tree / \"testfile\")",
          "75:     assert full_path_to_file == ret[\"path\"]",
          "78: def test_serve_file(testfile):",
          "79:     with patch.dict(roots.__opts__, {\"file_buffer_size\": 262144}):",
          "80:         load = {",
          "81:             \"saltenv\": \"base\",",
          "82:             \"path\": str(testfile),",
          "83:             \"loc\": 0,",
          "84:         }",
          "85:         fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
          "86:         ret = roots.serve_file(load, fnd)",
          "88:         with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
          "89:             data = fp_.read()",
          "91:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
          "94: def test_envs(unicode_dirname):",
          "95:     opts = {\"file_roots\": copy.copy(roots.__opts__[\"file_roots\"])}",
          "96:     opts[\"file_roots\"][unicode_dirname] = opts[\"file_roots\"][\"base\"]",
          "97:     with patch.dict(roots.__opts__, opts):",
          "98:         ret = roots.envs()",
          "99:     assert \"base\" in ret",
          "100:     assert unicode_dirname in ret",
          "103: def test_file_hash(testfile):",
          "104:     load = {",
          "105:         \"saltenv\": \"base\",",
          "106:         \"path\": str(testfile),",
          "107:     }",
          "108:     fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
          "109:     ret = roots.file_hash(load, fnd)",
          "111:     # Hashes are different in Windows. May be how git translates line",
          "112:     # endings",
          "113:     with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
          "114:         hsum = salt.utils.hashutils.sha256_digest(fp_.read())",
          "116:     assert ret == {\"hsum\": hsum, \"hash_type\": \"sha256\"}",
          "119: def test_file_list_emptydirs(tmp_state_tree):",
          "120:     empty_dir = tmp_state_tree / \"empty_dir\"",
          "121:     empty_dir.mkdir(parents=True, exist_ok=True)",
          "122:     ret = roots.file_list_emptydirs({\"saltenv\": \"base\"})",
          "123:     assert \"empty_dir\" in ret",
          "126: def test_file_list_with_slash(unicode_filename):",
          "127:     opts = {\"file_roots\": copy.copy(roots.__opts__[\"file_roots\"])}",
          "128:     opts[\"file_roots\"][\"foo/bar\"] = opts[\"file_roots\"][\"base\"]",
          "129:     load = {",
          "130:         \"saltenv\": \"foo/bar\",",
          "131:     }",
          "132:     with patch.dict(roots.__opts__, opts):",
          "133:         ret = roots.file_list(load)",
          "134:     assert \"testfile\" in ret",
          "135:     assert unicode_filename in ret",
          "138: def test_dir_list(tmp_state_tree, unicode_dirname):",
          "139:     empty_dir = tmp_state_tree / \"empty_dir\"",
          "140:     empty_dir.mkdir(parents=True, exist_ok=True)",
          "141:     ret = roots.dir_list({\"saltenv\": \"base\"})",
          "142:     assert \"empty_dir\" in ret",
          "143:     assert unicode_dirname in ret",
          "146: def test_symlink_list(tmp_state_tree):",
          "147:     source_sym = tmp_state_tree / \"source_sym\"",
          "148:     source_sym.write_text(\"\")",
          "149:     dest_sym = tmp_state_tree / \"dest_sym\"",
          "150:     dest_sym.symlink_to(str(source_sym))",
          "151:     ret = roots.symlink_list({\"saltenv\": \"base\"})",
          "152:     assert ret == {\"dest_sym\": str(source_sym)}",
          "155: def test_dynamic_file_roots(tmp_path):",
          "156:     dyn_root_dir = tmp_path / \"dyn_root_dir\"",
          "157:     dyn_root_dir.mkdir(parents=True, exist_ok=True)",
          "158:     top_sls = dyn_root_dir / \"top.sls\"",
          "159:     with salt.utils.files.fopen(str(top_sls), \"w\") as fp_:",
          "160:         fp_.write(\"{{saltenv}}:\\n  '*':\\n    - dynamo\\n\")",
          "161:     dynamo_sls = dyn_root_dir / \"dynamo.sls\"",
          "162:     with salt.utils.files.fopen(str(dynamo_sls), \"w\") as fp_:",
          "163:         fp_.write(\"foo:\\n  test.nop\\n\")",
          "164:     opts = {\"file_roots\": copy.copy(roots.__opts__[\"file_roots\"])}",
          "165:     opts[\"file_roots\"][\"__env__\"] = [str(dyn_root_dir)]",
          "166:     with patch.dict(roots.__opts__, opts):",
          "167:         ret1 = roots.find_file(\"dynamo.sls\", \"dyn\")",
          "168:         ret2 = roots.file_list({\"saltenv\": \"dyn\"})",
          "169:     assert \"dynamo.sls\" == ret1[\"rel\"]",
          "170:     assert \"top.sls\" in ret2",
          "171:     assert \"dynamo.sls\" in ret2",
          "174: pytest.mark.skipif(",
          "175:     salt.utils.platform.is_windows(),",
          "176:     reason=\"Windows does not support this master function\",",
          "177: )",
          "180: def test_update_no_change():",
          "181:     # process all changes that have happen",
          "182:     # changes will always take place the first time during testing",
          "183:     ret = roots.update()",
          "184:     assert ret[\"changed\"] is True",
          "186:     # check if no changes took place",
          "187:     ret = roots.update()",
          "188:     assert ret[\"changed\"] is False",
          "189:     assert ret[\"files\"][\"changed\"] == []",
          "190:     assert ret[\"files\"][\"removed\"] == []",
          "191:     assert ret[\"files\"][\"added\"] == []",
          "194: def test_update_mtime_map():",
          "195:     \"\"\"",
          "196:     Test that files with colons in the filename are properly handled in the",
          "197:     mtime_map, and that they are properly identified as having changed.",
          "198:     \"\"\"",
          "199:     mtime_map_path = pathlib.Path(roots.__opts__[\"cachedir\"], \"roots\", \"mtime_map\")",
          "200:     mtime_map_mock = mock_open(",
          "201:         read_data={",
          "202:             str(mtime_map_path): textwrap.dedent(",
          "203:                 \"\"\"\\",
          "204:                 /srv/salt/kleine_Datei.txt:1594263154.0469685",
          "205:                 /srv/salt/gro\u00dfe:Datei.txt:1594263160.9336357",
          "206:                 \"\"\"",
          "207:             ),",
          "208:         }",
          "209:     )",
          "210:     new_mtime_map = {",
          "211:         \"/srv/salt/kleine_Datei.txt\": 1594263154.0469685,",
          "212:         \"/srv/salt/gro\u00dfe:Datei.txt\": 1594263261.0616212,",
          "213:     }",
          "215:     with patch(",
          "216:         \"salt.fileserver.reap_fileserver_cache_dir\", MagicMock(return_value=True)",
          "217:     ), patch(",
          "218:         \"salt.fileserver.generate_mtime_map\", MagicMock(return_value=new_mtime_map)",
          "219:     ), patch.dict(",
          "220:         roots.__opts__, {\"fileserver_events\": False}",
          "221:     ), patch(",
          "222:         \"salt.utils.files.fopen\", mtime_map_mock",
          "223:     ):",
          "224:         ret = roots.update()",
          "226:     # Confirm the expected return from the function",
          "227:     assert ret == {",
          "228:         \"changed\": True,",
          "229:         \"files\": {",
          "230:             \"changed\": [\"/srv/salt/gro\u00dfe:Datei.txt\"],",
          "231:             \"removed\": [],",
          "232:             \"added\": [],",
          "233:         },",
          "234:         \"backend\": \"roots\",",
          "235:     }, ret",
          "237:     # Confirm that the new values were written to the mtime_map. Sort both",
          "238:     # lists of lines to account for variances in dictionary iteration order",
          "239:     # between Python releases.",
          "240:     lines_written = sorted(mtime_map_mock.write_calls())",
          "241:     expected = sorted(",
          "242:         salt.utils.stringutils.to_bytes(\"{key}:{val}\\n\".format(key=key, val=val))",
          "243:         for key, val in new_mtime_map.items()",
          "244:     )",
          "245:     assert lines_written == expected, lines_written",
          "248: def test_update_mtime_map_unicode_error(tmp_path):",
          "249:     \"\"\"",
          "250:     Test that a malformed mtime_map (which causes an UnicodeDecodeError",
          "251:     exception) is handled properly.",
          "252:     \"\"\"",
          "253:     new_mtime_map = {",
          "254:         \"/srv/salt/gro\u00dfe:Datei.txt\": 1594263261.0616212,",
          "255:     }",
          "256:     tmpdirname = tmp_path / \"unicode_error\"",
          "257:     mtime_map_path = tmpdirname / \"roots\" / \"mtime_map\"",
          "258:     mtime_map_path.parent.mkdir(parents=True, exist_ok=True)",
          "259:     with salt.utils.files.fopen(str(mtime_map_path), \"wb\") as fp:",
          "260:         fp.write(b\"\\x9c\")",
          "262:     with patch(",
          "263:         \"salt.fileserver.reap_fileserver_cache_dir\",",
          "264:         MagicMock(return_value=True),",
          "265:     ), patch(",
          "266:         \"salt.fileserver.generate_mtime_map\",",
          "267:         MagicMock(return_value=new_mtime_map),",
          "268:     ), patch.dict(",
          "269:         roots.__opts__,",
          "270:         {\"fileserver_events\": False, \"cachedir\": str(tmpdirname)},",
          "271:     ):",
          "272:         ret = roots.update()",
          "274:     assert ret == {",
          "275:         \"changed\": True,",
          "276:         \"files\": {",
          "277:             \"changed\": [],",
          "278:             \"removed\": [],",
          "279:             \"added\": [\"/srv/salt/gro\u00dfe:Datei.txt\"],",
          "280:         },",
          "281:         \"backend\": \"roots\",",
          "282:     }",
          "",
          "---------------"
        ],
        "tests/pytests/unit/fileserver/test_s3fs.py||tests/pytests/unit/fileserver/test_s3fs.py": [
          "File: tests/pytests/unit/fileserver/test_s3fs.py -> tests/pytests/unit/fileserver/test_s3fs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import pytest",
          "3: import salt.fileserver.s3fs as s3fs",
          "6: @pytest.fixture",
          "7: def configure_loader_modules(tmp_path):",
          "8:     opts = {",
          "9:         \"cachedir\": tmp_path,",
          "10:     }",
          "11:     return {s3fs: {\"__opts__\": opts}}",
          "14: def test_cache_round_trip():",
          "15:     metadata = {\"foo\": \"bar\"}",
          "16:     cache_file = s3fs._get_cached_file_name(\"base\", \"fake_bucket\", \"some_file\")",
          "18:     s3fs._write_buckets_cache_file(metadata, cache_file)",
          "19:     assert s3fs._read_buckets_cache_file(cache_file) == metadata",
          "22: def test_ignore_pickle_load_exceptions():",
          "23:     #  TODO: parameterized test with patched pickle.load that raises the",
          "24:     #  various allowable exception from _read_buckets_cache_file",
          "25:     pass",
          "",
          "---------------"
        ],
        "tests/pytests/unit/fileserver/test_svnfs.py||tests/pytests/unit/fileserver/test_svnfs.py": [
          "File: tests/pytests/unit/fileserver/test_svnfs.py -> tests/pytests/unit/fileserver/test_svnfs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import pytest",
          "3: import salt.fileserver.svnfs as svnfs",
          "4: from tests.support.mock import patch",
          "7: @pytest.fixture",
          "8: def configure_loader_modules():",
          "9:     return {svnfs: {}}",
          "12: def test_env_is_exposed():",
          "13:     \"\"\"",
          "14:     test _env_is_exposed method when",
          "15:     base is in whitelist",
          "16:     \"\"\"",
          "17:     with patch.dict(",
          "18:         svnfs.__opts__,",
          "19:         {\"svnfs_saltenv_whitelist\": \"base\", \"svnfs_saltenv_blacklist\": \"\"},",
          "20:     ):",
          "21:         assert svnfs._env_is_exposed(\"base\")",
          "24: def test_env_is_exposed_blacklist():",
          "25:     \"\"\"",
          "26:     test _env_is_exposed method when",
          "27:     base is in blacklist",
          "28:     \"\"\"",
          "29:     with patch.dict(",
          "30:         svnfs.__opts__,",
          "31:         {\"svnfs_saltenv_whitelist\": \"\", \"svnfs_saltenv_blacklist\": \"base\"},",
          "32:     ):",
          "33:         assert not svnfs._env_is_exposed(\"base\")",
          "",
          "---------------"
        ],
        "tests/unit/fileserver/test_gitfs.py||tests/unit/fileserver/test_gitfs.py": [
          "File: tests/unit/fileserver/test_gitfs.py -> tests/unit/fileserver/test_gitfs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/unit/fileserver/test_roots.py||tests/unit/fileserver/test_roots.py": [
          "File: tests/unit/fileserver/test_roots.py -> tests/unit/fileserver/test_roots.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/unit/fileserver/test_s3fs.py||tests/unit/fileserver/test_s3fs.py": [
          "File: tests/unit/fileserver/test_s3fs.py -> tests/unit/fileserver/test_s3fs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/unit/fileserver/test_svnfs.py||tests/unit/fileserver/test_svnfs.py": [
          "File: tests/unit/fileserver/test_svnfs.py -> tests/unit/fileserver/test_svnfs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1694f8464383f85fed696bc0d80849e7cd94eb10",
      "candidate_info": {
        "commit_hash": "1694f8464383f85fed696bc0d80849e7cd94eb10",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/1694f8464383f85fed696bc0d80849e7cd94eb10",
        "files": [
          "salt/fileserver/roots.py",
          "tests/pytests/unit/fileserver/test_roots.py"
        ],
        "message": "roots fileserver fix path verification for symlinks with destination outside of root",
        "before_after_code_files": [
          "salt/fileserver/roots.py||salt/fileserver/roots.py",
          "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/fileserver/roots.py||salt/fileserver/roots.py",
            "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
          ],
          "candidate": [
            "salt/fileserver/roots.py||salt/fileserver/roots.py",
            "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/fileserver/roots.py||salt/fileserver/roots.py": [
          "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:         full = os.path.join(root, path)",
          "103:         # Refuse to serve file that is not under the root.",
          "105:             continue",
          "107:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
          "",
          "[Removed Lines]",
          "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
          "",
          "[Added Lines]",
          "104:         if not salt.utils.verify.clean_path(",
          "105:             root, full, subdir=True, realpath=not __opts__[\"fileserver_followsymlinks\"]",
          "106:         ):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:         if saltenv == \"__env__\":",
          "150:             root = root.replace(\"__env__\", actual_saltenv)",
          "151:         # Refuse to serve file that is not under the root.",
          "153:             file_in_root = True",
          "154:     if not file_in_root:",
          "155:         return ret",
          "",
          "[Removed Lines]",
          "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
          "",
          "[Added Lines]",
          "154:         if salt.utils.verify.clean_path(",
          "155:             root, fpath, subdir=True, realpath=not __opts__[\"fileserver_followsymlinks\"]",
          "156:         ):",
          "",
          "---------------"
        ],
        "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
          "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:         assert ret == {\"data\": \"\", \"dest\": \"..\\\\bar\"}",
          "316:     else:",
          "317:         assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320: def test_find_file_symlink_destination_not_in_root(tmp_state_tree):",
          "321:     dirname = pathlib.Path(tmp_state_tree).parent / \"foo\"",
          "322:     dirname.mkdir(parents=True, exist_ok=True)",
          "323:     testfile = dirname / \"testfile\"",
          "324:     testfile.write_text(\"testfile\")",
          "325:     symlink = tmp_state_tree / \"bar\"",
          "326:     symlink.symlink_to(str(dirname))",
          "327:     ret = roots.find_file(\"bar/testfile\")",
          "328:     assert ret[\"path\"] == str(symlink / \"testfile\")",
          "329:     assert ret[\"rel\"] == \"bar/testfile\"",
          "332: def test_serve_file_symlink_destination_not_in_root(tmp_state_tree):",
          "333:     dirname = pathlib.Path(tmp_state_tree).parent / \"foo\"",
          "334:     dirname.mkdir(parents=True, exist_ok=True)",
          "335:     testfile = dirname / \"testfile\"",
          "336:     testfile.write_text(\"testfile\")",
          "337:     symlink = tmp_state_tree / \"bar\"",
          "338:     symlink.symlink_to(str(dirname))",
          "339:     load = {\"path\": \"bar/testfile\", \"saltenv\": \"base\", \"loc\": 0}",
          "340:     fnd = {\"path\": str(symlink / \"testfile\"), \"rel\": \"bar/testfile\"}",
          "341:     ret = roots.serve_file(load, fnd)",
          "342:     assert ret == {\"data\": b\"testfile\", \"dest\": \"bar/testfile\"}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34439f7750746e128235c37d20ca4408c5b4cb1a",
      "candidate_info": {
        "commit_hash": "34439f7750746e128235c37d20ca4408c5b4cb1a",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/34439f7750746e128235c37d20ca4408c5b4cb1a",
        "files": [
          "salt/fileserver/roots.py",
          "tests/pytests/unit/fileserver/test_roots.py"
        ],
        "message": "roots fileserver fix path verification for symlinks with destination outside of root",
        "before_after_code_files": [
          "salt/fileserver/roots.py||salt/fileserver/roots.py",
          "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/fileserver/roots.py||salt/fileserver/roots.py",
            "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
          ],
          "candidate": [
            "salt/fileserver/roots.py||salt/fileserver/roots.py",
            "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/fileserver/roots.py||salt/fileserver/roots.py": [
          "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:         full = os.path.join(root, path)",
          "103:         # Refuse to serve file that is not under the root.",
          "105:             continue",
          "107:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
          "",
          "[Removed Lines]",
          "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
          "",
          "[Added Lines]",
          "104:         if not salt.utils.verify.clean_path(",
          "105:             root, full, subdir=True, realpath=not __opts__[\"fileserver_followsymlinks\"]",
          "106:         ):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:         if saltenv == \"__env__\":",
          "150:             root = root.replace(\"__env__\", actual_saltenv)",
          "151:         # Refuse to serve file that is not under the root.",
          "153:             file_in_root = True",
          "154:     if not file_in_root:",
          "155:         return ret",
          "",
          "[Removed Lines]",
          "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
          "",
          "[Added Lines]",
          "154:         if salt.utils.verify.clean_path(",
          "155:             root, fpath, subdir=True, realpath=not __opts__[\"fileserver_followsymlinks\"]",
          "156:         ):",
          "",
          "---------------"
        ],
        "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
          "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:         assert ret == {\"data\": \"\", \"dest\": \"..\\\\bar\"}",
          "316:     else:",
          "317:         assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320: def test_find_file_symlink_destination_not_in_root(tmp_state_tree):",
          "321:     dirname = pathlib.Path(tmp_state_tree).parent / \"foo\"",
          "322:     dirname.mkdir(parents=True, exist_ok=True)",
          "323:     testfile = dirname / \"testfile\"",
          "324:     testfile.write_text(\"testfile\")",
          "325:     symlink = tmp_state_tree / \"bar\"",
          "326:     symlink.symlink_to(str(dirname))",
          "327:     ret = roots.find_file(\"bar/testfile\")",
          "328:     assert ret[\"path\"] == str(symlink / \"testfile\")",
          "329:     assert ret[\"rel\"] == \"bar/testfile\"",
          "332: def test_serve_file_symlink_destination_not_in_root(tmp_state_tree):",
          "333:     dirname = pathlib.Path(tmp_state_tree).parent / \"foo\"",
          "334:     dirname.mkdir(parents=True, exist_ok=True)",
          "335:     testfile = dirname / \"testfile\"",
          "336:     testfile.write_text(\"testfile\")",
          "337:     symlink = tmp_state_tree / \"bar\"",
          "338:     symlink.symlink_to(str(dirname))",
          "339:     load = {\"path\": \"bar/testfile\", \"saltenv\": \"base\", \"loc\": 0}",
          "340:     fnd = {\"path\": str(symlink / \"testfile\"), \"rel\": \"bar/testfile\"}",
          "341:     ret = roots.serve_file(load, fnd)",
          "342:     assert ret == {\"data\": b\"testfile\", \"dest\": \"bar/testfile\"}",
          "",
          "---------------"
        ]
      }
    }
  ]
}