{
  "cve_id": "CVE-2023-38688",
  "cve_desc": "twitch-tui provides Twitch chat in a terminal. Prior to version 2.4.1, the connection is not using TLS for communication. In the configuration of the irc connection, the software disables TLS, which makes all communication to Twitch IRC servers unencrypted. As a result, communication, including auth tokens, can be sniffed. Version 2.4.1 has a patch for this issue.",
  "repo": "Xithrius/twitch-tui",
  "patch_hash": "74d13ddca35f8f0816f4933c229da1fd95c0350a",
  "patch_info": {
    "commit_hash": "74d13ddca35f8f0816f4933c229da1fd95c0350a",
    "repo": "Xithrius/twitch-tui",
    "commit_url": "https://github.com/Xithrius/twitch-tui/commit/74d13ddca35f8f0816f4933c229da1fd95c0350a",
    "files": [
      "src/twitch/connection.rs"
    ],
    "message": "Enable SSL for the Twitch IRC connection.",
    "before_after_code_files": [
      "src/twitch/connection.rs||src/twitch/connection.rs"
    ]
  },
  "patch_diff": {
    "src/twitch/connection.rs||src/twitch/connection.rs": [
      "File: src/twitch/connection.rs -> src/twitch/connection.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:         server: Some(config.twitch.server.clone()),",
      "20:         channels: vec![format!(\"#{}\", config.twitch.channel)],",
      "21:         password: config.twitch.token.clone(),",
      "24:         ping_timeout: Some(10),",
      "25:         ping_time: Some(10),",
      "26:         ..Default::default()",
      "",
      "[Removed Lines]",
      "22:         port: Some(6667),",
      "23:         use_tls: Some(false),",
      "",
      "[Added Lines]",
      "22:         port: Some(6697),",
      "23:         use_tls: Some(true),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f42e4bc77eed76cb59d44c958f5abffe90648423",
      "candidate_info": {
        "commit_hash": "f42e4bc77eed76cb59d44c958f5abffe90648423",
        "repo": "Xithrius/twitch-tui",
        "commit_url": "https://github.com/Xithrius/twitch-tui/commit/f42e4bc77eed76cb59d44c958f5abffe90648423",
        "files": [
          "src/twitch/oauth.rs"
        ],
        "message": "Fix issue when follower list is less than one page.",
        "before_after_code_files": [
          "src/twitch/oauth.rs||src/twitch/oauth.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/Xithrius/twitch-tui/pull/423"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/twitch/oauth.rs||src/twitch/oauth.rs": [
          "File: src/twitch/oauth.rs -> src/twitch/oauth.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: #[derive(Deserialize, Debug, Clone, Default)]",
          "90: #[allow(dead_code)]",
          "91: struct Pagination {",
          "93: }",
          "95: #[derive(Deserialize, Debug, Clone, Default)]",
          "",
          "[Removed Lines]",
          "92:     cursor: String,",
          "",
          "[Added Lines]",
          "92:     cursor: Option<String>,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf54ab74172d19e7c9f8aa06578acd26edd22689",
      "candidate_info": {
        "commit_hash": "cf54ab74172d19e7c9f8aa06578acd26edd22689",
        "repo": "Xithrius/twitch-tui",
        "commit_url": "https://github.com/Xithrius/twitch-tui/commit/cf54ab74172d19e7c9f8aa06578acd26edd22689",
        "files": [
          "src/handlers/event.rs",
          "src/handlers/mod.rs",
          "src/handlers/user_input/events.rs",
          "src/handlers/user_input/input.rs",
          "src/handlers/user_input/mod.rs",
          "src/input.rs",
          "src/main.rs",
          "src/terminal.rs",
          "src/twitch.rs",
          "src/twitch/badges.rs",
          "src/twitch/connection.rs",
          "src/twitch/mod.rs",
          "src/ui/mod.rs"
        ],
        "message": "Modularized `twitch.rs`, `input.rs`.",
        "before_after_code_files": [
          "src/handlers/mod.rs||src/handlers/mod.rs",
          "src/handlers/user_input/input.rs||src/handlers/user_input/input.rs",
          "src/handlers/user_input/mod.rs||src/handlers/user_input/mod.rs",
          "src/input.rs||src/input.rs",
          "src/main.rs||src/main.rs",
          "src/terminal.rs||src/terminal.rs",
          "src/twitch.rs||src/twitch.rs",
          "src/twitch/badges.rs||src/twitch/badges.rs",
          "src/twitch/connection.rs||src/twitch/connection.rs",
          "src/twitch/mod.rs||src/twitch/mod.rs",
          "src/ui/mod.rs||src/ui/mod.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/twitch/connection.rs||src/twitch/connection.rs"
          ],
          "candidate": [
            "src/twitch/connection.rs||src/twitch/connection.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/handlers/mod.rs||src/handlers/mod.rs": [
          "File: src/handlers/mod.rs -> src/handlers/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: pub mod args;",
          "3: pub mod config;",
          "4: pub mod data;",
          "6: pub mod filters;",
          "7: pub mod storage;",
          "",
          "[Removed Lines]",
          "5: pub mod event;",
          "",
          "[Added Lines]",
          "7: pub mod user_input;",
          "",
          "---------------"
        ],
        "src/handlers/user_input/input.rs||src/handlers/user_input/input.rs": [
          "File: src/handlers/user_input/input.rs -> src/handlers/user_input/input.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use regex::Regex;",
          "2: use rustyline::{At, Word};",
          "3: use tokio::sync::mpsc::Sender;",
          "5: use crate::{",
          "6:     handlers::{",
          "7:         app::{App, BufferName, State},",
          "8:         config::CompleteConfig,",
          "9:         data::DataBuilder,",
          "10:         user_input::events::{Event, Events, Key},",
          "11:     },",
          "12:     twitch::TwitchAction,",
          "13:     ui::statics::{CHANNEL_NAME_REGEX, TWITCH_MESSAGE_LIMIT},",
          "14: };",
          "16: pub enum TerminalAction {",
          "17:     Quitting,",
          "18: }",
          "20: struct UserActionAttributes<'a, 'b> {",
          "21:     app: &'a mut App,",
          "22:     config: &'b mut CompleteConfig,",
          "23:     tx: Sender<TwitchAction>,",
          "24:     key: Key,",
          "25: }",
          "27: impl<'a, 'b> UserActionAttributes<'a, 'b> {",
          "28:     fn new(",
          "29:         app: &'a mut App,",
          "30:         config: &'b mut CompleteConfig,",
          "31:         tx: Sender<TwitchAction>,",
          "32:         key: Key,",
          "33:     ) -> Self {",
          "34:         Self {",
          "35:             app,",
          "36:             config,",
          "37:             tx,",
          "38:             key,",
          "39:         }",
          "40:     }",
          "41: }",
          "43: async fn handle_insert_enter_key(action: &mut UserActionAttributes<'_, '_>) {",
          "44:     let UserActionAttributes {",
          "45:         app,",
          "46:         config,",
          "47:         key: _,",
          "48:         tx,",
          "49:     } = action;",
          "51:     match app.selected_buffer {",
          "52:         BufferName::Chat => {",
          "53:             let input_message = app.input_buffers.get_mut(&app.selected_buffer).unwrap();",
          "55:             if input_message.is_empty()",
          "56:                 || app.filters.contaminated(input_message)",
          "57:                 || input_message.len() > *TWITCH_MESSAGE_LIMIT",
          "58:             {",
          "59:                 return;",
          "60:             }",
          "62:             app.messages.push_front(DataBuilder::user(",
          "63:                 config.twitch.username.to_string(),",
          "64:                 input_message.to_string(),",
          "65:             ));",
          "67:             tx.send(TwitchAction::Privmsg(input_message.to_string()))",
          "68:                 .await",
          "69:                 .unwrap();",
          "71:             if let Some(msg) = input_message.strip_prefix('@') {",
          "72:                 app.storage.add(\"mentions\", msg.to_string());",
          "73:             }",
          "75:             input_message.update(\"\", 0);",
          "76:         }",
          "77:         BufferName::Channel => {",
          "78:             let input_message = app.input_buffers.get_mut(&app.selected_buffer).unwrap();",
          "80:             if input_message.is_empty()",
          "81:                 || !Regex::new(*CHANNEL_NAME_REGEX)",
          "82:                     .unwrap()",
          "83:                     .is_match(input_message)",
          "84:             {",
          "85:                 return;",
          "86:             }",
          "88:             app.messages.clear();",
          "90:             tx.send(TwitchAction::Join(input_message.to_string()))",
          "91:                 .await",
          "92:                 .unwrap();",
          "94:             config.twitch.channel = input_message.to_string();",
          "96:             app.storage.add(\"channels\", input_message.to_string());",
          "98:             input_message.update(\"\", 0);",
          "100:             app.selected_buffer = BufferName::Chat;",
          "101:             app.state = State::Normal;",
          "102:         }",
          "103:         BufferName::MessageHighlighter => {}",
          "104:     }",
          "105: }",
          "107: async fn handle_insert_type_movements(action: &mut UserActionAttributes<'_, '_>) {",
          "108:     let UserActionAttributes {",
          "109:         app,",
          "110:         config: _,",
          "111:         key,",
          "112:         tx: _,",
          "113:     } = action;",
          "115:     let input_buffer = app.current_buffer_mut();",
          "117:     match key {",
          "118:         Key::Up => {",
          "119:             if app.state == State::Insert {",
          "120:                 app.state = State::Normal;",
          "121:             }",
          "122:         }",
          "123:         Key::Ctrl('f') | Key::Right => {",
          "124:             input_buffer.move_forward(1);",
          "125:         }",
          "126:         Key::Ctrl('b') | Key::Left => {",
          "127:             input_buffer.move_backward(1);",
          "128:         }",
          "129:         Key::Ctrl('a') | Key::Home => {",
          "130:             input_buffer.move_home();",
          "131:         }",
          "132:         Key::Ctrl('e') | Key::End => {",
          "133:             input_buffer.move_end();",
          "134:         }",
          "135:         Key::Alt('f') => {",
          "136:             input_buffer.move_to_next_word(At::AfterEnd, Word::Emacs, 1);",
          "137:         }",
          "138:         Key::Alt('b') => {",
          "139:             input_buffer.move_to_prev_word(Word::Emacs, 1);",
          "140:         }",
          "141:         Key::Ctrl('t') => {",
          "142:             input_buffer.transpose_chars();",
          "143:         }",
          "144:         Key::Alt('t') => {",
          "145:             input_buffer.transpose_words(1);",
          "146:         }",
          "147:         Key::Ctrl('u') => {",
          "148:             input_buffer.discard_line();",
          "149:         }",
          "150:         Key::Ctrl('k') => {",
          "151:             input_buffer.kill_line();",
          "152:         }",
          "153:         Key::Ctrl('w') => {",
          "154:             input_buffer.delete_prev_word(Word::Emacs, 1);",
          "155:         }",
          "156:         Key::Ctrl('d') => {",
          "157:             input_buffer.delete(1);",
          "158:         }",
          "159:         Key::Backspace | Key::Delete => {",
          "160:             input_buffer.backspace(1);",
          "161:         }",
          "162:         Key::Tab => {",
          "163:             let suggestion = app.buffer_suggestion.clone();",
          "165:             if let Some(suggestion_buffer) = suggestion {",
          "166:                 app.input_buffers",
          "167:                     .get_mut(&app.selected_buffer)",
          "168:                     .unwrap()",
          "169:                     .update(suggestion_buffer.as_str(), suggestion_buffer.len());",
          "170:             }",
          "171:         }",
          "172:         Key::Enter => handle_insert_enter_key(action).await,",
          "173:         Key::Char(c) => {",
          "174:             input_buffer.insert(*c, 1);",
          "175:         }",
          "176:         Key::Esc => {",
          "177:             input_buffer.update(\"\", 0);",
          "178:             app.state = State::Normal;",
          "179:         }",
          "180:         _ => {}",
          "181:     }",
          "182: }",
          "184: fn handle_user_scroll(app: &mut App, key: Key) {",
          "185:     match app.state {",
          "186:         State::Insert | State::MessageSearch | State::Normal => match key {",
          "187:             Key::ScrollUp => {",
          "188:                 if app.scroll_offset < app.messages.len() {",
          "189:                     app.scroll_offset += 1;",
          "190:                 }",
          "191:             }",
          "192:             Key::ScrollDown => {",
          "193:                 if app.scroll_offset > 0 {",
          "194:                     app.scroll_offset -= 1;",
          "195:                 }",
          "196:             }",
          "197:             _ => {}",
          "198:         },",
          "199:         _ => {}",
          "200:     }",
          "201: }",
          "203: pub async fn handle_stateful_user_input(",
          "204:     events: &mut Events,",
          "205:     app: &mut App,",
          "206:     config: &mut CompleteConfig,",
          "207:     tx: Sender<TwitchAction>,",
          "208: ) -> Option<TerminalAction> {",
          "209:     if let Some(Event::Input(key)) = events.next().await {",
          "210:         handle_user_scroll(app, key);",
          "212:         match app.state {",
          "213:             State::Insert | State::ChannelSwitch | State::MessageSearch => {",
          "214:                 let mut action = UserActionAttributes::new(app, config, tx, key);",
          "216:                 handle_insert_type_movements(&mut action).await;",
          "217:             }",
          "218:             _ => match key {",
          "219:                 Key::Char('c') => {",
          "220:                     app.state = State::Normal;",
          "221:                     app.selected_buffer = BufferName::Chat;",
          "222:                 }",
          "223:                 Key::Char('s') => {",
          "224:                     app.state = State::ChannelSwitch;",
          "225:                     app.selected_buffer = BufferName::Channel;",
          "226:                 }",
          "227:                 Key::Ctrl('f') => {",
          "228:                     app.state = State::MessageSearch;",
          "229:                     app.selected_buffer = BufferName::MessageHighlighter;",
          "230:                 }",
          "231:                 Key::Ctrl('t') => {",
          "232:                     app.filters.toggle();",
          "233:                 }",
          "234:                 Key::Ctrl('r') => {",
          "235:                     app.filters.reverse();",
          "236:                 }",
          "237:                 Key::Char('i') | Key::Insert => {",
          "238:                     app.state = State::Insert;",
          "239:                     app.selected_buffer = BufferName::Chat;",
          "240:                 }",
          "241:                 Key::Ctrl('p') => {",
          "242:                     panic!(\"Manual panic triggered by user.\");",
          "243:                 }",
          "244:                 Key::Char('?') => app.state = State::Help,",
          "245:                 Key::Char('q') => {",
          "246:                     if app.state == State::Normal {",
          "247:                         return Some(TerminalAction::Quitting);",
          "248:                     }",
          "249:                 }",
          "250:                 Key::Esc => {",
          "251:                     app.scroll_offset = 0;",
          "252:                     app.state = State::Normal;",
          "253:                     app.selected_buffer = BufferName::Chat;",
          "254:                 }",
          "255:                 _ => {}",
          "256:             },",
          "257:         }",
          "258:     }",
          "260:     None",
          "261: }",
          "",
          "---------------"
        ],
        "src/handlers/user_input/mod.rs||src/handlers/user_input/mod.rs": [
          "File: src/handlers/user_input/mod.rs -> src/handlers/user_input/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: pub mod events;",
          "2: pub mod input;",
          "",
          "---------------"
        ],
        "src/input.rs||src/input.rs": [
          "File: src/input.rs -> src/input.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.rs||src/main.rs": [
          "File: src/main.rs -> src/main.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     clippy::struct_excessive_bools,",
          "8:     clippy::unused_self,",
          "9:     clippy::future_not_send,",
          "12: )]",
          "14: use clap::Parser;",
          "",
          "[Removed Lines]",
          "10:     clippy::needless_pass_by_value,",
          "11:     clippy::too_many_lines",
          "",
          "[Added Lines]",
          "10:     clippy::needless_pass_by_value",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: use crate::handlers::{app::App, args::Cli, config::CompleteConfig};",
          "21: mod handlers;",
          "23: mod terminal;",
          "24: mod twitch;",
          "25: mod ui;",
          "",
          "[Removed Lines]",
          "22: mod input;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/terminal.rs||src/terminal.rs": [
          "File: src/terminal.rs -> src/terminal.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:         app::{App, BufferName, State},",
          "19:         config::CompleteConfig,",
          "20:         data::{Data, DataBuilder, PayLoad},",
          "22:     },",
          "24:     twitch::TwitchAction,",
          "25:     ui::draw_ui,",
          "26:     utils::text::align_text,",
          "",
          "[Removed Lines]",
          "21:         event::{Config, Events, Key},",
          "23:     input::{handle_user_input, TerminalAction},",
          "",
          "[Added Lines]",
          "21:         user_input::{",
          "22:             events::{Config, Events, Key},",
          "23:             input::{handle_stateful_user_input, TerminalAction},",
          "24:         },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:             .unwrap();",
          "142:         if let Some(TerminalAction::Quitting) =",
          "144:         {",
          "145:             quit_terminal(terminal);",
          "",
          "[Removed Lines]",
          "143:             handle_user_input(&mut events, &mut app, &mut config.clone(), tx.clone()).await",
          "",
          "[Added Lines]",
          "145:             handle_stateful_user_input(&mut events, &mut app, &mut config.clone(), tx.clone()).await",
          "",
          "---------------"
        ],
        "src/twitch.rs||src/twitch.rs": [
          "File: src/twitch.rs -> src/twitch.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/twitch/badges.rs||src/twitch/badges.rs": [
          "File: src/twitch/badges.rs -> src/twitch/badges.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use irc::proto::Message;",
          "3: const VIP_BADGE: char = '\\u{1F48E}';",
          "4: const MODERATOR_BADGE: char = '\\u{1F528}';",
          "5: const SUBSCRIBER_BADGE: char = '\\u{2B50}';",
          "6: const PRIME_GAMING_BADGE: char = '\\u{1F451}';",
          "8: pub fn retrieve_user_badges(name: &mut String, message: Message) {",
          "9:     let mut badges = String::new();",
          "11:     if let Some(ref tags) = message.tags {",
          "12:         let mut vip_badge = None;",
          "13:         let mut moderator_badge = None;",
          "14:         let mut subscriber_badge = None;",
          "15:         let mut prime_badge = None;",
          "16:         let mut display_name = None;",
          "18:         for tag in tags {",
          "19:             if tag.0 == *\"display-name\" {",
          "20:                 if let Some(ref value) = tag.1 {",
          "21:                     display_name = Some(value.to_string());",
          "22:                 }",
          "23:             }",
          "25:             if tag.0 == *\"badges\" {",
          "26:                 if let Some(ref value) = tag.1 {",
          "27:                     if !value.is_empty() && value.contains(\"vip\") {",
          "28:                         vip_badge = Some(VIP_BADGE);",
          "29:                     }",
          "30:                     if !value.is_empty() && value.contains(\"moderator\") {",
          "31:                         moderator_badge = Some(MODERATOR_BADGE);",
          "32:                     }",
          "33:                     if !value.is_empty() && value.contains(\"subscriber\") {",
          "34:                         subscriber_badge = Some(SUBSCRIBER_BADGE);",
          "35:                     }",
          "36:                     if !value.is_empty() && value.contains(\"premium\") {",
          "37:                         prime_badge = Some(PRIME_GAMING_BADGE);",
          "38:                     }",
          "39:                 }",
          "40:             }",
          "41:         }",
          "43:         if let Some(display_name) = display_name {",
          "45:         }",
          "47:         if let Some(badge) = vip_badge {",
          "48:             badges.push(badge);",
          "49:         }",
          "51:         if let Some(badge) = moderator_badge {",
          "52:             badges.push(badge);",
          "53:         }",
          "55:         if let Some(badge) = subscriber_badge {",
          "56:             badges.push(badge);",
          "57:         }",
          "59:         if let Some(badge) = prime_badge {",
          "60:             badges.push(badge);",
          "61:         }",
          "63:         if !badges.is_empty() {",
          "65:         }",
          "66:     }",
          "67: }",
          "",
          "---------------"
        ],
        "src/twitch/connection.rs||src/twitch/connection.rs": [
          "File: src/twitch/connection.rs -> src/twitch/connection.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use std::time::Duration;",
          "3: use irc::{",
          "4:     client::{prelude::Config, Client, ClientStream},",
          "5:     error::Error::{self, PingTimeout},",
          "6: };",
          "7: use tokio::{sync::mpsc::Sender, time::sleep};",
          "9: use crate::handlers::{",
          "10:     config::CompleteConfig,",
          "11:     data::{Data, DataBuilder},",
          "12: };",
          "14: pub async fn create_client_stream(config: CompleteConfig) -> (Client, ClientStream) {",
          "15:     let irc_config = Config {",
          "16:         nickname: Some(config.twitch.username.clone()),",
          "17:         server: Some(config.twitch.server.clone()),",
          "18:         channels: vec![format!(\"#{}\", config.twitch.channel)],",
          "19:         password: Some(config.twitch.token.clone()),",
          "20:         port: Some(6667),",
          "21:         use_tls: Some(false),",
          "22:         ping_timeout: Some(10),",
          "23:         ping_time: Some(10),",
          "24:         ..Default::default()",
          "25:     };",
          "27:     let mut client = Client::from_config(irc_config.clone()).await.unwrap();",
          "29:     client.identify().unwrap();",
          "31:     let stream = client.stream().unwrap();",
          "33:     (client, stream)",
          "34: }",
          "36: pub async fn client_stream_reconnect(",
          "37:     err: Error,",
          "38:     tx: Sender<Data>,",
          "39:     data_builder: DataBuilder<'_>,",
          "40:     client: &mut Client,",
          "41:     stream: &mut ClientStream,",
          "42:     config: &CompleteConfig,",
          "43: ) {",
          "44:     match err {",
          "45:         PingTimeout => {",
          "46:             tx.send(",
          "47:                 data_builder",
          "48:                     .system(\"Attempting to reconnect due to Twitch ping timeout.\".to_string()),",
          "49:             )",
          "50:             .await",
          "51:             .unwrap();",
          "52:         }",
          "53:         _ => {",
          "54:             tx.send(data_builder.system(",
          "55:                 format!(\"Attempting to reconnect due to fatal error: {:?}\", err).to_string(),",
          "56:             ))",
          "57:             .await",
          "58:             .unwrap();",
          "59:         }",
          "60:     }",
          "62:     (*client, *stream) = create_client_stream(config.clone()).await;",
          "64:     sleep(Duration::from_millis(1000)).await;",
          "65: }",
          "",
          "---------------"
        ],
        "src/twitch/mod.rs||src/twitch/mod.rs": [
          "File: src/twitch/mod.rs -> src/twitch/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: mod badges;",
          "2: mod connection;",
          "4: use std::collections::HashMap;",
          "6: use futures::StreamExt;",
          "7: use irc::{",
          "8:     client::prelude::Capability,",
          "9:     proto::{Command, Message},",
          "10: };",
          "11: use log::{debug, info};",
          "12: use tokio::sync::mpsc::{Receiver, Sender};",
          "14: use crate::{",
          "15:     handlers::{",
          "16:         config::CompleteConfig,",
          "17:         data::{Data, DataBuilder},",
          "18:     },",
          "19:     twitch::{",
          "20:         badges::retrieve_user_badges,",
          "21:         connection::{client_stream_reconnect, create_client_stream},",
          "22:     },",
          "23: };",
          "25: #[derive(Debug)]",
          "26: pub enum TwitchAction {",
          "27:     Privmsg(String),",
          "28:     Join(String),",
          "29: }",
          "31: pub async fn twitch_irc(",
          "32:     mut config: CompleteConfig,",
          "33:     tx: Sender<Data>,",
          "34:     mut rx: Receiver<TwitchAction>,",
          "35: ) {",
          "36:     info!(\"Spawned Twitch IRC thread.\");",
          "38:     let data_builder = DataBuilder::new(&config.frontend.date_format);",
          "39:     let mut room_state_startup = false;",
          "41:     let (mut client, mut stream) = create_client_stream(config.clone()).await;",
          "43:     let sender = client.sender();",
          "46:     if client",
          "47:         .send_cap_req(&[",
          "48:             Capability::Custom(\"twitch.tv/commands\"),",
          "49:             Capability::Custom(\"twitch.tv/tags\"),",
          "50:         ])",
          "51:         .is_err()",
          "52:     {",
          "53:         tx.send(",
          "54:             data_builder.system(",
          "55:                 \"Unable to request commands/tags capability, certain features may be affected.\"",
          "56:                     .to_string(),",
          "57:             ),",
          "58:         )",
          "59:         .await",
          "60:         .unwrap();",
          "61:     }",
          "63:     loop {",
          "64:         tokio::select! {",
          "65:             biased;",
          "67:             Some(action) = rx.recv() => {",
          "68:                 let current_channel = format!(\"#{}\", config.twitch.channel);",
          "70:                 match action {",
          "71:                     TwitchAction::Privmsg(message) => {",
          "72:                         debug!(\"Sending message to Twitch: {}\", message);",
          "74:                         client",
          "75:                             .send_privmsg(current_channel, message)",
          "76:                             .unwrap();",
          "77:                     }",
          "78:                     TwitchAction::Join(channel) => {",
          "79:                         debug!(\"Switching to channel {}\", channel);",
          "81:                         let channel_list = format!(\"#{}\", channel);",
          "84:                         if let Err(err) = sender.send_part(current_channel) {",
          "85:                             tx.send(data_builder.twitch(err.to_string())).await.unwrap();",
          "86:                         } else {",
          "87:                             tx.send(data_builder.twitch(format!(\"Joined {}\", channel_list))).await.unwrap();",
          "88:                         }",
          "91:                         if let Err(err) = sender.send_join(&channel_list) {",
          "92:                             tx.send(data_builder.twitch(err.to_string())).await.unwrap();",
          "93:                         }",
          "96:                         config.twitch.channel = channel;",
          "97:                     }",
          "98:                 }",
          "99:             }",
          "100:             Some(message) = stream.next() => {",
          "101:                 match message {",
          "102:                     Ok(message) => {",
          "103:                         if let Some(b) = handle_message_command(message, tx.clone(), data_builder, config.frontend.badges, room_state_startup).await {",
          "104:                             room_state_startup = b;",
          "105:                         }",
          "106:                     }",
          "107:                     Err(err) => {",
          "108:                         debug!(\"Twitch connection error encountered: {}, attempting to reconnect.\", err);",
          "110:                         client_stream_reconnect(err, tx.clone(), data_builder, &mut client, &mut stream, &config).await;",
          "111:                     }",
          "112:                 }",
          "113:             }",
          "114:             else => {}",
          "115:         };",
          "116:     }",
          "117: }",
          "119: async fn handle_message_command(",
          "120:     message: Message,",
          "121:     tx: Sender<Data>,",
          "122:     data_builder: DataBuilder<'_>,",
          "123:     badges: bool,",
          "124:     room_state_startup: bool,",
          "125: ) -> Option<bool> {",
          "126:     let mut tags: HashMap<&str, &str> = HashMap::new();",
          "128:     if let Some(ref ref_tags) = message.tags {",
          "129:         for tag in ref_tags {",
          "130:             if let Some(ref tag_value) = tag.1 {",
          "131:                 tags.insert(&tag.0, tag_value);",
          "132:             }",
          "133:         }",
          "134:     }",
          "136:     match message.command {",
          "137:         Command::PRIVMSG(ref _target, ref msg) => {",
          "139:             let mut name = message.source_nickname().unwrap().to_string();",
          "141:             if badges {",
          "142:                 retrieve_user_badges(&mut name, message.clone());",
          "143:             }",
          "145:             tx.send(DataBuilder::user(name.to_string(), msg.to_string()))",
          "146:                 .await",
          "147:                 .unwrap();",
          "149:             debug!(\"Message received from twitch: {} - {}\", name, msg);",
          "150:         }",
          "151:         Command::NOTICE(ref _target, ref msg) => {",
          "152:             tx.send(data_builder.twitch(msg.to_string())).await.unwrap();",
          "153:         }",
          "154:         Command::Raw(ref cmd, ref _items) => {",
          "155:             match cmd.as_ref() {",
          "156:                 \"ROOMSTATE\" => {",
          "159:                     if !room_state_startup {",
          "160:                         handle_roomstate(&tx, &tags).await;",
          "161:                     }",
          "163:                     return Some(true);",
          "164:                 }",
          "165:                 \"USERNOTICE\" => {",
          "166:                     if let Some(value) = tags.get(\"system-msg\") {",
          "167:                         tx.send(data_builder.twitch((*value).to_string()))",
          "168:                             .await",
          "169:                             .unwrap();",
          "170:                     }",
          "171:                 }",
          "172:                 _ => (),",
          "173:             }",
          "174:         }",
          "175:         _ => (),",
          "176:     }",
          "178:     None",
          "179: }",
          "181: pub async fn handle_roomstate(tx: &Sender<Data>, tags: &HashMap<&str, &str>) {",
          "182:     let mut room_state = String::new();",
          "184:     for (name, value) in tags.iter() {",
          "185:         match *name {",
          "186:             \"emote-only\" if *value == \"1\" => {",
          "187:                 room_state.push_str(\"The channel is emote-only.\\n\");",
          "188:             }",
          "189:             \"followers-only\" if *value != \"-1\" => {",
          "190:                 room_state.push_str(\"The channel is followers-only.\\n\");",
          "191:             }",
          "192:             \"subs-only\" if *value == \"1\" => {",
          "193:                 room_state.push_str(\"The channel is subscribers-only.\\n\");",
          "194:             }",
          "195:             \"slow\" if *value != \"0\" => {",
          "196:                 room_state.push_str(\"The channel has a \");",
          "197:                 room_state.push_str(value);",
          "198:                 room_state.push_str(\"s slowmode.\\n\");",
          "199:             }",
          "200:             _ => (),",
          "201:         }",
          "202:     }",
          "205:     room_state.pop();",
          "207:     if room_state.is_empty() {",
          "208:         return;",
          "209:     }",
          "211:     tx.send(DataBuilder::user(String::from(\"Info\"), room_state))",
          "212:         .await",
          "213:         .unwrap();",
          "214: }",
          "",
          "---------------"
        ],
        "src/ui/mod.rs||src/ui/mod.rs": [
          "File: src/ui/mod.rs -> src/ui/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use std::{collections::VecDeque, vec};",
          "3: use chrono::offset::Local;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #![allow(clippy::too_many_lines)]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b26c051256e8b5630f248ad1aa2c23ee54e4e97",
      "candidate_info": {
        "commit_hash": "6b26c051256e8b5630f248ad1aa2c23ee54e4e97",
        "repo": "Xithrius/twitch-tui",
        "commit_url": "https://github.com/Xithrius/twitch-tui/commit/6b26c051256e8b5630f248ad1aa2c23ee54e4e97",
        "files": [
          "src/twitch/connection.rs"
        ],
        "message": "Enable SSL for the Twitch IRC connection.",
        "before_after_code_files": [
          "src/twitch/connection.rs||src/twitch/connection.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/twitch/connection.rs||src/twitch/connection.rs"
          ],
          "candidate": [
            "src/twitch/connection.rs||src/twitch/connection.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/twitch/connection.rs||src/twitch/connection.rs": [
          "File: src/twitch/connection.rs -> src/twitch/connection.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         server: Some(config.twitch.server.clone()),",
          "20:         channels: vec![format!(\"#{}\", config.twitch.channel)],",
          "21:         password: config.twitch.token.clone(),",
          "24:         ping_timeout: Some(10),",
          "25:         ping_time: Some(10),",
          "26:         ..Default::default()",
          "",
          "[Removed Lines]",
          "22:         port: Some(6667),",
          "23:         use_tls: Some(false),",
          "",
          "[Added Lines]",
          "22:         port: Some(6697),",
          "23:         use_tls: Some(true),",
          "",
          "---------------"
        ]
      }
    }
  ]
}