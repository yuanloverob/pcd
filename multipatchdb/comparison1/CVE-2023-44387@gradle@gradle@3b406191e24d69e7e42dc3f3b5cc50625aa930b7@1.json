{
  "cve_id": "CVE-2023-44387",
  "cve_desc": "Gradle is a build tool with a focus on build automation and support for multi-language development. When copying or archiving symlinked files, Gradle resolves them but applies the permissions of the symlink itself instead of the permissions of the linked file to the resulting file. This leads to files having too much permissions given that symlinks usually are world readable and writeable. While it is unlikely this results in a direct vulnerability for the impacted build, it may open up attack vectors depending on where build artifacts end up being copied to or un-archived. In versions 7.6.3, 8.4 and above, Gradle will now properly use the permissions of the file pointed at by the symlink to set permissions of the copied or archived file.",
  "repo": "gradle/gradle",
  "patch_hash": "3b406191e24d69e7e42dc3f3b5cc50625aa930b7",
  "patch_info": {
    "commit_hash": "3b406191e24d69e7e42dc3f3b5cc50625aa930b7",
    "repo": "gradle/gradle",
    "commit_url": "https://github.com/gradle/gradle/commit/3b406191e24d69e7e42dc3f3b5cc50625aa930b7",
    "files": [
      "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java",
      "subprojects/core/src/main/java/org/gradle/execution/plan/Node.java",
      "subprojects/core/src/main/java/org/gradle/execution/plan/TaskNode.java",
      "subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy",
      "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java",
      "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/DefaultOsMemoryInfo.java",
      "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfo.java",
      "subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/CGroupMemoryInfoTest.groovy",
      "subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfoTest.groovy"
    ],
    "message": "Merge pull request #26584 Backport of fixes to 7.6.3\n\nFixes\n* #25802\n* #25781\n\nCo-authored-by: Louis Jacomet <louis@gradle.com>",
    "before_after_code_files": [
      "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java",
      "subprojects/core/src/main/java/org/gradle/execution/plan/Node.java||subprojects/core/src/main/java/org/gradle/execution/plan/Node.java",
      "subprojects/core/src/main/java/org/gradle/execution/plan/TaskNode.java||subprojects/core/src/main/java/org/gradle/execution/plan/TaskNode.java",
      "subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy||subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy",
      "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java||subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java",
      "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/DefaultOsMemoryInfo.java||subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/DefaultOsMemoryInfo.java",
      "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfo.java||subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfo.java",
      "subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/CGroupMemoryInfoTest.groovy||subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/CGroupMemoryInfoTest.groovy",
      "subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfoTest.groovy||subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfoTest.groovy"
    ]
  },
  "patch_diff": {
    "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java": [
      "File: subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java -> subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import com.google.common.collect.SetMultimap;",
      "24: import javax.annotation.Nullable;",
      "25: import java.util.ArrayList;",
      "26: import java.util.Collections;",
      "27: import java.util.HashSet;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: import java.util.ArrayDeque;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43:     @Nullable",
      "44:     private ElementSuccessors successors;",
      "45:     private boolean finalizedNodeHasStarted;",
      "47:     public FinalizerGroup(TaskNode node, NodeGroup delegate) {",
      "48:         this.ordinal = delegate.asOrdinal();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:     private boolean hasBeenScheduled;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "159:     }",
      "161:     public void scheduleMembers(SetMultimap<FinalizerGroup, FinalizerGroup> reachableGroups) {",
      "162:         Set<Node> finalizedNodesToBlockOn = findFinalizedNodesThatDoNotIntroduceACycle(reachableGroups);",
      "163:         WaitForNodesToComplete waitForFinalizers = new WaitForNodesToComplete(finalizedNodesToBlockOn);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "164:         if (hasBeenScheduled) {",
      "165:             return;",
      "166:         } else {",
      "167:             hasBeenScheduled = true;",
      "168:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "178:         ImmutableMap.Builder<Node, MemberSuccessors> blockingNodesBuilder = ImmutableMap.builder();",
      "179:         for (Node member : members) {",
      "180:             if (isFinalizerNode(member) || memberCanStartAtAnyTime(member)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "189:         Set<Node> dependenciesThatAreMembers = getDependenciesThatAreMembers(blockedFinalizedMembers);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "190:                     blockingNodesBuilder.put(member, new WaitForFinalizedNodesToBecomeActive(Collections.singleton(member)));",
      "191:                 }",
      "192:             } else {",
      "202:                     blockingNodesBuilder.put(member, waitForFinalizers);",
      "204:                 }",
      "209:             }",
      "210:         }",
      "211:         ImmutableMap<Node, MemberSuccessors> blockingNodes = blockingNodesBuilder.build();",
      "",
      "[Removed Lines]",
      "194:                 boolean requiredByBlockedFinalizedMember = false;",
      "195:                 for (Node finalizedMember : blockedFinalizedMembers) {",
      "196:                     if (dependsOn(finalizedMember, member)) {",
      "197:                         requiredByBlockedFinalizedMember = true;",
      "198:                         break;",
      "199:                     }",
      "200:                 }",
      "201:                 if (requiredByBlockedFinalizedMember) {",
      "203:                     continue;",
      "206:                 Set<Node> blockOn = new LinkedHashSet<>(finalizedNodesToBlockOn);",
      "207:                 blockOn.addAll(blockedFinalizedMembers);",
      "208:                 blockingNodesBuilder.put(member, new WaitForNodesToComplete(blockOn));",
      "",
      "[Added Lines]",
      "205:                 if (dependenciesThatAreMembers.contains(member)) {",
      "208:                 } else {",
      "210:                     Set<Node> blockOn = new LinkedHashSet<>(finalizedNodesToBlockOn);",
      "211:                     blockOn.addAll(blockedFinalizedMembers);",
      "212:                     blockingNodesBuilder.put(member, new WaitForNodesToComplete(blockOn));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "260:         return successors.getNodesThatBlock(node);",
      "261:     }",
      "274:             }",
      "276:         }",
      "278:     }",
      "280:     private boolean hasACycle(Node finalized, SetMultimap<FinalizerGroup, FinalizerGroup> reachableGroups) {",
      "",
      "[Removed Lines]",
      "263:     private boolean dependsOn(Node fromNode, Node toNode) {",
      "264:         Set<Node> seen = new HashSet<>();",
      "265:         List<Node> queue = new ArrayList<>();",
      "266:         Iterables.addAll(queue, fromNode.getHardSuccessors());",
      "267:         while (!queue.isEmpty()) {",
      "268:             Node node = queue.remove(0);",
      "269:             if (node == toNode) {",
      "270:                 return true;",
      "271:             }",
      "272:             if (!seen.add(node)) {",
      "273:                 continue;",
      "275:             Iterables.addAll(queue, node.getHardSuccessors());",
      "277:         return false;",
      "",
      "[Added Lines]",
      "268:     private Set<Node> getDependenciesThatAreMembers(Set<Node> blockedFinalizedMembers) {",
      "269:         Set<Node> dependenciesThatAreMembers = new HashSet<>(members.size());",
      "270:         Set<Node> seen = new HashSet<>(1024);",
      "272:         ArrayDeque<Node> queue = new ArrayDeque<>(1024);",
      "273:         for (Node fromNode : blockedFinalizedMembers) {",
      "274:             queue.add(fromNode);",
      "275:             while (!queue.isEmpty()) {",
      "276:                 Node toNode = queue.removeFirst();",
      "277:                 if (members.contains(toNode) && !blockedFinalizedMembers.contains(toNode)) {",
      "278:                     dependenciesThatAreMembers.add(toNode);",
      "279:                 }",
      "280:                 toNode.visitHardSuccessors(node -> {",
      "281:                     if (seen.add(node)) {",
      "282:                         queue.add(node);",
      "283:                     }",
      "284:                 });",
      "287:         return dependenciesThatAreMembers;",
      "",
      "---------------"
    ],
    "subprojects/core/src/main/java/org/gradle/execution/plan/Node.java||subprojects/core/src/main/java/org/gradle/execution/plan/Node.java": [
      "File: subprojects/core/src/main/java/org/gradle/execution/plan/Node.java -> subprojects/core/src/main/java/org/gradle/execution/plan/Node.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "535:         return dependencyNodes.getDependencySuccessors();",
      "536:     }",
      "538:     public SortedSet<Node> getFinalizers() {",
      "539:         return dependentNodes.getFinalizers();",
      "540:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "543:     @OverridingMethodsMustInvokeSuper",
      "544:     public void visitHardSuccessors(Consumer<? super Node> visitor) {",
      "545:         dependencyNodes.getDependencySuccessors().forEach(visitor);",
      "546:     }",
      "",
      "---------------"
    ],
    "subprojects/core/src/main/java/org/gradle/execution/plan/TaskNode.java||subprojects/core/src/main/java/org/gradle/execution/plan/TaskNode.java": [
      "File: subprojects/core/src/main/java/org/gradle/execution/plan/TaskNode.java -> subprojects/core/src/main/java/org/gradle/execution/plan/TaskNode.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: import java.util.NavigableSet;",
      "24: import java.util.Set;",
      "26: import static org.gradle.execution.plan.NodeSets.newSortedNodeSet;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: import java.util.function.Consumer;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "92:         );",
      "93:     }",
      "95:     public abstract TaskInternal getTask();",
      "97:     protected void deprecateLifecycleHookReferencingNonLocalTask(String hookName, Node taskNode) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96:     @Override",
      "97:     public void visitHardSuccessors(Consumer<? super Node> visitor) {",
      "98:         finalizingSuccessors.forEach(visitor);",
      "99:         getMustSuccessors().forEach(visitor);",
      "100:         super.visitHardSuccessors(visitor);",
      "101:     }",
      "",
      "---------------"
    ],
    "subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy||subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy": [
      "File: subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy -> subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "457:         orderingRule << ['dependsOn', 'mustRunAfter', 'shouldRunAfter']",
      "458:     }",
      "461:         given:",
      "462:         TaskInternal finalizerA = createTask(\"finalizerA\")",
      "463:         TaskInternal finalizerB = createTask(\"finalizerB\")",
      "",
      "[Removed Lines]",
      "460:     def \"finalizer groups that finalize each other form a cycle\"() {",
      "",
      "[Added Lines]",
      "460:     def \"finalizer groups that finalize each other do not form a cycle\"() {",
      "",
      "---------------"
    ],
    "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java||subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java": [
      "File: subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java -> subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.gradle.process.internal.health.memory;",
      "19: import com.google.common.annotations.VisibleForTesting;",
      "20: import com.google.common.io.Files;",
      "22: import java.io.File;",
      "23: import java.io.IOException;",
      "24: import java.nio.charset.Charset;",
      "26: public class CGroupMemoryInfo implements OsMemoryInfo {",
      "27:     private static final String CGROUP_MEM_USAGE_FILE = \"/sys/fs/cgroup/memory/memory.usage_in_bytes\";",
      "28:     private static final String CGROUP_MEM_TOTAL_FILE = \"/sys/fs/cgroup/memory/memory.limit_in_bytes\";",
      "30:     @Override",
      "31:     public OsMemoryStatus getOsSnapshot() {",
      "32:         String memUsageString = readStringFromFile(new File(CGROUP_MEM_USAGE_FILE));",
      "33:         String memTotalString = readStringFromFile(new File(CGROUP_MEM_TOTAL_FILE));",
      "35:         return getOsSnapshotFromCgroup(memUsageString, memTotalString);",
      "36:     }",
      "38:     private String readStringFromFile(File file) {",
      "39:         try {",
      "40:             return Files.asCharSource(file, Charset.defaultCharset()).readFirstLine();",
      "41:         } catch (IOException e) {",
      "42:             throw new UnsupportedOperationException(\"Unable to read system memory from \" + file.getAbsoluteFile(), e);",
      "43:         }",
      "44:     }",
      "46:     @VisibleForTesting",
      "47:     OsMemoryStatusSnapshot getOsSnapshotFromCgroup(String memUsageString, String memTotalString) {",
      "48:         long memUsage;",
      "49:         long memTotal;",
      "50:         long memAvailable;",
      "52:         try {",
      "53:             memUsage = Long.parseLong(memUsageString);",
      "54:             memTotal = Long.parseLong(memTotalString);",
      "55:             memAvailable = Math.max(0, memTotal - memUsage);",
      "56:         } catch (NumberFormatException e) {",
      "57:             throw new UnsupportedOperationException(\"Unable to read system memory\", e);",
      "58:         }",
      "60:         return new OsMemoryStatusSnapshot(memTotal, memAvailable);",
      "61:     }",
      "62: }",
      "",
      "---------------"
    ],
    "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/DefaultOsMemoryInfo.java||subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/DefaultOsMemoryInfo.java": [
      "File: subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/DefaultOsMemoryInfo.java -> subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/DefaultOsMemoryInfo.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:         if (operatingSystem.isMacOsX()) {",
      "27:             delegate = new NativeOsMemoryInfo();",
      "28:         } else if (operatingSystem.isLinux()) {",
      "30:         } else {",
      "31:             delegate = new MBeanOsMemoryInfo();",
      "32:         }",
      "33:     }",
      "35:     @Override",
      "36:     public OsMemoryStatus getOsSnapshot() {",
      "37:         return delegate.getOsSnapshot();",
      "",
      "[Removed Lines]",
      "29:             delegate = new MemInfoOsMemoryInfo();",
      "",
      "[Added Lines]",
      "29:             delegate = getLinuxDelegate();",
      "35:     private OsMemoryInfo getLinuxDelegate() {",
      "36:         OsMemoryInfo cGroupDelegate = new CGroupMemoryInfo();",
      "37:         OsMemoryInfo memInfoDelegate = new MemInfoOsMemoryInfo();",
      "39:         OsMemoryStatus cGroupSnapshot;",
      "40:         OsMemoryStatus memInfoSnapshot;",
      "42:         try {",
      "43:             cGroupSnapshot = cGroupDelegate.getOsSnapshot();",
      "44:         } catch (UnsupportedOperationException e) {",
      "45:             return memInfoDelegate;",
      "46:         }",
      "48:         try {",
      "49:             memInfoSnapshot = memInfoDelegate.getOsSnapshot();",
      "50:         } catch (UnsupportedOperationException e) {",
      "51:             return cGroupDelegate;",
      "52:         }",
      "54:         long cGroupFreeMemory = cGroupSnapshot.getFreePhysicalMemory();",
      "55:         long memInfoFreeMemory = memInfoSnapshot.getFreePhysicalMemory();",
      "57:         return cGroupFreeMemory > memInfoFreeMemory ? memInfoDelegate : cGroupDelegate;",
      "58:     }",
      "",
      "---------------"
    ],
    "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfo.java||subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfo.java": [
      "File: subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfo.java -> subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfo.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "47:         } catch (IOException e) {",
      "48:             throw new UnsupportedOperationException(\"Unable to read system memory from \" + MEMINFO_FILE_PATH, e);",
      "49:         }",
      "55:     }",
      "",
      "[Removed Lines]",
      "50:         OsMemoryStatusSnapshot memInfo = getOsSnapshotFromMemInfo(meminfoOutputLines);",
      "51:         if (memInfo.getFreePhysicalMemory() < 0 || memInfo.getTotalPhysicalMemory() < 0) {",
      "52:             throw new UnsupportedOperationException(\"Unable to read system memory from \" + MEMINFO_FILE_PATH);",
      "53:         }",
      "54:         return memInfo;",
      "",
      "[Added Lines]",
      "51:         return getOsSnapshotFromMemInfo(meminfoOutputLines);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:             }",
      "81:         }",
      "83:         return new OsMemoryStatusSnapshot(meminfo.getTotal(), meminfo.getAvailable());",
      "84:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80:         if (meminfo.getAvailable() < 0 || meminfo.getTotal() < 0) {",
      "81:             throw new UnsupportedOperationException(\"Unable to read system memory from \" + MEMINFO_FILE_PATH);",
      "82:         }",
      "",
      "---------------"
    ],
    "subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/CGroupMemoryInfoTest.groovy||subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/CGroupMemoryInfoTest.groovy": [
      "File: subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/CGroupMemoryInfoTest.groovy -> subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/CGroupMemoryInfoTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.gradle.process.internal.health.memory",
      "19: import spock.lang.Specification",
      "21: class CGroupMemoryInfoTest extends Specification {",
      "22:     private static final long MB_IN_BYTES = 1024 * 1024 * 1024",
      "24:     def \"parses memory from cgroup values\"() {",
      "25:         def snapshot = new CGroupMemoryInfo().getOsSnapshotFromCgroup(mbsToBytesAsString(800), mbsToBytesAsString(1024))",
      "27:         expect:",
      "28:         snapshot.totalPhysicalMemory == mbsToBytes(1024)",
      "29:         snapshot.freePhysicalMemory == mbsToBytes(224)",
      "30:     }",
      "32:     def \"negative free memory returns zero\"() {",
      "33:         def snapshot = new CGroupMemoryInfo().getOsSnapshotFromCgroup(mbsToBytesAsString(1024), mbsToBytesAsString(512))",
      "35:         expect:",
      "36:         snapshot.totalPhysicalMemory == mbsToBytes(512)",
      "37:         snapshot.freePhysicalMemory == 0",
      "38:     }",
      "40:     def \"throws unsupported operation exception when non-numeric values are provided\"() {",
      "41:         when:",
      "42:         new CGroupMemoryInfo().getOsSnapshotFromCgroup(\"foo\", \"bar\")",
      "44:         then:",
      "45:         thrown(UnsupportedOperationException)",
      "46:     }",
      "48:     long mbsToBytes(int mbs) {",
      "49:         return mbs * MB_IN_BYTES",
      "50:     }",
      "52:     String mbsToBytesAsString(int mbs) {",
      "53:         return mbsToBytes(mbs) as String",
      "54:     }",
      "55: }",
      "",
      "---------------"
    ],
    "subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfoTest.groovy||subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfoTest.groovy": [
      "File: subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfoTest.groovy -> subprojects/process-services/src/test/groovy/org/gradle/process/internal/health/memory/MemInfoOsMemoryInfoTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:         snapshot.totalPhysicalMemory == 33_594_605_568L",
      "38:     }",
      "46:     }",
      "48:     private static List<String> meminfoLinux3() {",
      "",
      "[Removed Lines]",
      "40:     def \"returns -1 given unparsable file\"() {",
      "41:         given:",
      "42:         def snapshot = new MemInfoOsMemoryInfo().getOsSnapshotFromMemInfo([\"bogustown\"])",
      "43:         expect:",
      "44:         snapshot.freePhysicalMemory == -1L",
      "45:         snapshot.totalPhysicalMemory == -1L",
      "",
      "[Added Lines]",
      "40:     def \"throws unsupported operation exception when non-numeric values are provided\"() {",
      "41:         when:",
      "42:         new MemInfoOsMemoryInfo().getOsSnapshotFromMemInfo(meminfo)",
      "44:         then:",
      "45:         thrown(UnsupportedOperationException)",
      "47:         where:",
      "48:         meminfo << [[\"bogustown\"], bogusMeminfoLinux3(), bogusMeminfoLinux4()]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "138: DirectMap4k:      197056 kB",
      "139: DirectMap2M:     5953536 kB",
      "140: DirectMap1G:    28311552 kB",
      "141: \"\"\".split(/\\n/)",
      "142:     }",
      "143: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "141: DirectMap4k:      197056 kB",
      "142: DirectMap2M:     5953536 kB",
      "143: DirectMap1G:    28311552 kB",
      "144: \"\"\".split(/\\n/)",
      "145:     }",
      "147:     private static List<String> bogusMeminfoLinux3() {",
      "148:         \"\"\"MemTotal:       foo",
      "149: MemFree:        bar",
      "150: Buffers:          baz",
      "151: Cached:         14152476 kB",
      "152: SwapCached:            0 kB",
      "153: Active:         17791108 kB",
      "154: Inactive:       13818288 kB",
      "155: Active(anon):   17189920 kB",
      "156: Inactive(anon):      460 kB",
      "157: Active(file):     601188 kB",
      "158: Inactive(file): 13817828 kB",
      "159: Unevictable:           0 kB",
      "160: Mlocked:               0 kB",
      "161: SwapTotal:             0 kB",
      "162: SwapFree:              0 kB",
      "163: Dirty:                20 kB",
      "164: Writeback:             0 kB",
      "165: AnonPages:      17189100 kB",
      "166: Mapped:            24008 kB",
      "167: Shmem:              1312 kB",
      "168: Slab:            1291916 kB",
      "169: SReclaimable:    1236196 kB",
      "170: SUnreclaim:        55720 kB",
      "171: KernelStack:        2888 kB",
      "172: PageTables:        41200 kB",
      "173: NFS_Unstable:          0 kB",
      "174: Bounce:                0 kB",
      "175: WritebackTmp:          0 kB",
      "176: CommitLimit:    24731588 kB",
      "177: Committed_AS:   22081020 kB",
      "178: VmallocTotal:   34359738367 kB",
      "179: VmallocUsed:      173104 kB",
      "180: VmallocChunk:   34359438128 kB",
      "181: HardwareCorrupted:     0 kB",
      "182: AnonHugePages:  17104896 kB",
      "183: HugePages_Total:       0",
      "184: HugePages_Free:        0",
      "185: HugePages_Rsvd:        0",
      "186: HugePages_Surp:        0",
      "187: Hugepagesize:       2048 kB",
      "188: DirectMap4k:      107840 kB",
      "189: DirectMap2M:    50223104 kB",
      "190: \"\"\".split(/\\n/)",
      "191:     }",
      "193:     private static List<String> bogusMeminfoLinux4() {",
      "194:         \"\"\"MemTotal:       foo",
      "195: MemFree:          315332 kB",
      "196: MemAvailable:    bar",
      "197: Buffers:          452252 kB",
      "198: Cached:          1425068 kB",
      "199: SwapCached:        80148 kB",
      "200: Active:          1587152 kB",
      "201: Inactive:        1029860 kB",
      "202: Active(anon):     213704 kB",
      "203: Inactive(anon):   526268 kB",
      "204: Active(file):    1373448 kB",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0bd2371e5ac64a0f6bf8b929f8eb86c74da246f2",
      "candidate_info": {
        "commit_hash": "0bd2371e5ac64a0f6bf8b929f8eb86c74da246f2",
        "repo": "gradle/gradle",
        "commit_url": "https://github.com/gradle/gradle/commit/0bd2371e5ac64a0f6bf8b929f8eb86c74da246f2",
        "files": [
          "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java"
        ],
        "message": "Fix import\n\nUse java.util.ArrayDeque",
        "before_after_code_files": [
          "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/gradle/gradle/pull/26584"
        ],
        "olp_code_files": {
          "patch": [
            "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java"
          ],
          "candidate": [
            "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java"
          ]
        }
      },
      "candidate_diff": {
        "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java": [
          "File: subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java -> subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import com.google.common.collect.ImmutableSet;",
          "21: import com.google.common.collect.Iterables;",
          "22: import com.google.common.collect.SetMultimap;",
          "25: import javax.annotation.Nullable;",
          "26: import java.util.ArrayList;",
          "27: import java.util.Collections;",
          "28: import java.util.HashSet;",
          "",
          "[Removed Lines]",
          "23: import kotlin.collections.ArrayDeque;",
          "",
          "[Added Lines]",
          "25: import java.util.ArrayDeque;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d329345553c69067c44138edd2b8102fe4da805b",
      "candidate_info": {
        "commit_hash": "d329345553c69067c44138edd2b8102fe4da805b",
        "repo": "gradle/gradle",
        "commit_url": "https://github.com/gradle/gradle/commit/d329345553c69067c44138edd2b8102fe4da805b",
        "files": [
          "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java"
        ],
        "message": "make memAvailable guaranteed non negative Signed-off-by: chinrank <thrillpool1@gmail.com>",
        "before_after_code_files": [
          "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java||subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/gradle/gradle/pull/26584"
        ],
        "olp_code_files": {
          "patch": [
            "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java||subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java"
          ],
          "candidate": [
            "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java||subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java"
          ]
        }
      },
      "candidate_diff": {
        "subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java||subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java": [
          "File: subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java -> subprojects/process-services/src/main/java/org/gradle/process/internal/health/memory/CGroupMemoryInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:             String memTotalString = Files.asCharSource(new File(CGROUP_MEM_TOTAL_FILE), Charset.defaultCharset()).readFirstLine();",
          "38:             memUsage = Long.parseLong(memUsageString);",
          "39:             memTotal = Long.parseLong(memTotalString);",
          "41:         } catch (IOException e) {",
          "42:             throw new UnsupportedOperationException(\"Unable to read system memory\", e);",
          "43:         } catch (NumberFormatException e) {",
          "",
          "[Removed Lines]",
          "40:             memAvailable = memTotal - memUsage;",
          "",
          "[Added Lines]",
          "40:             memAvailable = Math.max(0, memTotal - memUsage);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c8e608909f699975040ca1107f467972e7481918",
      "candidate_info": {
        "commit_hash": "c8e608909f699975040ca1107f467972e7481918",
        "repo": "gradle/gradle",
        "commit_url": "https://github.com/gradle/gradle/commit/c8e608909f699975040ca1107f467972e7481918",
        "files": [
          ".teamcity/performance-test-durations.json",
          ".teamcity/performance-tests-ci.json",
          "gradle.properties",
          "subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy"
        ],
        "message": "Remove added performance test\n\nIt has little value on a backport branch and is actually causing some\nintegration issues.",
        "before_after_code_files": [
          "gradle.properties||gradle.properties",
          "subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy||subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/gradle/gradle/pull/26584"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "gradle.properties||gradle.properties": [
          "File: gradle.properties -> gradle.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: systemProp.org.gradle.kotlin.dsl.precompiled.accessors.strict=true",
          "28: # Default performance baseline",
          "",
          "[Removed Lines]",
          "29: defaultPerformanceBaselines=7.6-commit-ecd4e6bff53",
          "",
          "[Added Lines]",
          "29: defaultPerformanceBaselines=7.6-commit-c6141aed",
          "",
          "---------------"
        ],
        "subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy||subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy": [
          "File: subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy -> subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.gradle.performance.annotations.Scenario",
          "25: import org.gradle.performance.fixture.AndroidTestProject",
          "26: import org.gradle.profiler.BuildMutator",
          "28: import org.gradle.profiler.ScenarioContext",
          "29: import org.gradle.profiler.mutations.AbstractCleanupMutator",
          "30: import org.gradle.profiler.mutations.ClearArtifactTransformCacheMutator",
          "33: import static org.gradle.performance.annotations.ScenarioType.PER_COMMIT",
          "34: import static org.gradle.performance.annotations.ScenarioType.PER_DAY",
          "",
          "[Removed Lines]",
          "27: import org.gradle.profiler.InvocationSettings",
          "31: import spock.lang.Issue",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:         tasks << ['assembleDebug', 'phthalic:assembleDebug']",
          "115:     }",
          "163:     private void configureForLargeAndroidBuild2() {",
          "164:         def buildJavaHome = AvailableJavaHomes.getAvailableJdks { it.languageVersion == JavaVersion.VERSION_11 }.first().javaHome",
          "165:         runner.addBuildMutator { invocation ->",
          "",
          "[Removed Lines]",
          "117:     @Issue(\"https://github.com/gradle/gradle/issues/25361\")",
          "118:     @RunFor([",
          "119:         @Scenario(type = PER_COMMIT, operatingSystems = LINUX, testProjects = \"largeAndroidBuild\"),",
          "120:     ])",
          "121:     def \"calculate task graph with test finalizer\"() {",
          "122:         given:",
          "123:         AndroidTestProject testProject = androidTestProject",
          "124:         testProject.configure(runner)",
          "125:         runner.addBuildMutator {invocation -> new TestFinalizerMutator(invocation) }",
          "126:         runner.tasksToRun = [':phthalic:test', '--dry-run']",
          "127:         runner.args.add('-Dorg.gradle.parallel=true')",
          "128:         runner.warmUpRuns = 2",
          "129:         runner.runs = 8",
          "130:         applyEnterprisePlugin()",
          "132:         when:",
          "133:         def result = runner.run()",
          "135:         then:",
          "136:         result.assertCurrentVersionHasNotRegressed()",
          "137:     }",
          "139:     private class TestFinalizerMutator implements BuildMutator {",
          "140:         private final InvocationSettings invocation",
          "142:         TestFinalizerMutator(InvocationSettings invocation) {",
          "143:             this.invocation = invocation",
          "144:         }",
          "146:         @Override",
          "147:         void beforeScenario(ScenarioContext context) {",
          "148:             def buildFile = new File(invocation.projectDir, \"build.gradle\")",
          "149:             buildFile << \"\"\"",
          "150:                 def finalizerTask = tasks.register(\"testFinalizer\")",
          "151:                 subprojects {",
          "152:                     tasks.withType(com.android.build.gradle.tasks.factory.AndroidUnitTest) { testTask ->",
          "153:                         testTask.finalizedBy(finalizerTask)",
          "154:                         finalizerTask.configure {",
          "155:                             dependsOn testTask",
          "156:                         }",
          "157:                     }",
          "158:                 }",
          "159:             \"\"\".stripIndent()",
          "160:         }",
          "161:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52d9e4bcc054ba3dbccbdccee92d09c513805929",
      "candidate_info": {
        "commit_hash": "52d9e4bcc054ba3dbccbdccee92d09c513805929",
        "repo": "gradle/gradle",
        "commit_url": "https://github.com/gradle/gradle/commit/52d9e4bcc054ba3dbccbdccee92d09c513805929",
        "files": [
          "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java"
        ],
        "message": "Reduce queue growth as much as possible",
        "before_after_code_files": [
          "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/gradle/gradle/pull/26584"
        ],
        "olp_code_files": {
          "patch": [
            "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java"
          ],
          "candidate": [
            "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java"
          ]
        }
      },
      "candidate_diff": {
        "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java": [
          "File: subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java -> subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:                 if (members.contains(toNode) && !blockedFinalizedMembers.contains(toNode)) {",
          "273:                     dependenciesThatAreMembers.add(toNode);",
          "274:                 }",
          "276:             }",
          "277:         }",
          "278:         return dependenciesThatAreMembers;",
          "",
          "[Removed Lines]",
          "275:                 toNode.visitHardSuccessors(queue::add);",
          "",
          "[Added Lines]",
          "275:                 toNode.visitHardSuccessors(node -> {",
          "276:                     if (!seen.contains(node)) {",
          "277:                         queue.add(node);",
          "278:                     }",
          "279:                 });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf8e2244c67143d6c2b99abaecf7945101f5bb4f",
      "candidate_info": {
        "commit_hash": "bf8e2244c67143d6c2b99abaecf7945101f5bb4f",
        "repo": "gradle/gradle",
        "commit_url": "https://github.com/gradle/gradle/commit/bf8e2244c67143d6c2b99abaecf7945101f5bb4f",
        "files": [
          ".teamcity/performance-tests-ci.json",
          "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java",
          "subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy",
          "subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy"
        ],
        "message": "Resolve poor performance when running a subset of finalized tasks\n\nWhen a finalizer finalizes multiple tasks, and also has dependencies, performance\nfor calculating the task graph can be exceedingly poor for large task graphs.  This\naddresses the problem in two ways:\n\n- Only schedule the members of a finalizer group once.\n- Instead of iterating over every member and deciding if it is a dependency of a finalized node, iterate over the finalized nodes and calculate its dependencies that are also members.\n\nThis dramatically reduces the time to calculate the task graph in large builds that exhibit this behavior.\n\nFixes #25361",
        "before_after_code_files": [
          "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java",
          "subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy||subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy",
          "subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy||subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/gradle/gradle/pull/26584"
        ],
        "olp_code_files": {
          "patch": [
            "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java",
            "subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy||subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy"
          ],
          "candidate": [
            "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java",
            "subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy||subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java||subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java": [
          "File: subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java -> subprojects/core/src/main/java/org/gradle/execution/plan/FinalizerGroup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:         ImmutableMap.Builder<Node, MemberSuccessors> blockingNodesBuilder = ImmutableMap.builder();",
          "179:         for (Node member : members) {",
          "180:             if (isFinalizerNode(member) || memberCanStartAtAnyTime(member)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:         Set<Node> dependenciesThatAreMembers = getDependenciesThatAreMembers(blockedFinalizedMembers);",
          "182:         dependenciesThatAreMembers.stream()",
          "183:                 .filter(member -> !blockedFinalizedMembers.contains(member))",
          "184:                 .forEach(member -> blockingNodesBuilder.put(member, waitForFinalizers));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:                     blockingNodesBuilder.put(member, new WaitForFinalizedNodesToBecomeActive(Collections.singleton(member)));",
          "191:                 }",
          "192:             } else {",
          "204:                 }",
          "209:             }",
          "210:         }",
          "211:         ImmutableMap<Node, MemberSuccessors> blockingNodes = blockingNodesBuilder.build();",
          "",
          "[Removed Lines]",
          "194:                 boolean requiredByBlockedFinalizedMember = false;",
          "195:                 for (Node finalizedMember : blockedFinalizedMembers) {",
          "196:                     if (dependsOn(finalizedMember, member)) {",
          "197:                         requiredByBlockedFinalizedMember = true;",
          "198:                         break;",
          "199:                     }",
          "200:                 }",
          "201:                 if (requiredByBlockedFinalizedMember) {",
          "202:                     blockingNodesBuilder.put(member, waitForFinalizers);",
          "203:                     continue;",
          "206:                 Set<Node> blockOn = new LinkedHashSet<>(finalizedNodesToBlockOn);",
          "207:                 blockOn.addAll(blockedFinalizedMembers);",
          "208:                 blockingNodesBuilder.put(member, new WaitForNodesToComplete(blockOn));",
          "",
          "[Added Lines]",
          "200:                 if (!dependenciesThatAreMembers.contains(member)) {",
          "202:                     Set<Node> blockOn = new LinkedHashSet<>(finalizedNodesToBlockOn);",
          "203:                     blockOn.addAll(blockedFinalizedMembers);",
          "204:                     blockingNodesBuilder.put(member, new WaitForNodesToComplete(blockOn));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260:         return successors.getNodesThatBlock(node);",
          "261:     }",
          "264:         Set<Node> seen = new HashSet<>();",
          "274:             }",
          "276:         }",
          "277:         return false;",
          "278:     }",
          "",
          "[Removed Lines]",
          "263:     private boolean dependsOn(Node fromNode, Node toNode) {",
          "265:         List<Node> queue = new ArrayList<>();",
          "266:         Iterables.addAll(queue, fromNode.getHardSuccessors());",
          "267:         while (!queue.isEmpty()) {",
          "268:             Node node = queue.remove(0);",
          "269:             if (node == toNode) {",
          "270:                 return true;",
          "271:             }",
          "272:             if (!seen.add(node)) {",
          "273:                 continue;",
          "275:             Iterables.addAll(queue, node.getHardSuccessors());",
          "",
          "[Added Lines]",
          "260:     private Set<Node> getDependenciesThatAreMembers(Set<Node> fromNodes) {",
          "261:         Set<Node> dependenciesThatAreMembers = new HashSet<>();",
          "264:         for (Node fromNode : fromNodes) {",
          "265:             List<Node> queue = new ArrayList<>();",
          "266:             Iterables.addAll(queue, fromNode.getHardSuccessors());",
          "267:             while (!queue.isEmpty()) {",
          "268:                 Node toNode = queue.remove(0);",
          "269:                 if (members.contains(toNode)) {",
          "270:                     dependenciesThatAreMembers.add(toNode);",
          "271:                 }",
          "272:                 if (!seen.add(toNode)) {",
          "273:                     continue;",
          "274:                 }",
          "275:                 Iterables.addAll(queue, toNode.getHardSuccessors());",
          "278:         return dependenciesThatAreMembers;",
          "279:     }",
          "281:     private boolean dependsOn(Node fromNode, Node toNode) {",
          "",
          "---------------"
        ],
        "subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy||subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy": [
          "File: subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy -> subprojects/core/src/test/groovy/org/gradle/execution/plan/DefaultExecutionPlanTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "457:         orderingRule << ['dependsOn', 'mustRunAfter', 'shouldRunAfter']",
          "458:     }",
          "461:         given:",
          "462:         TaskInternal finalizerA = createTask(\"finalizerA\")",
          "463:         TaskInternal finalizerB = createTask(\"finalizerB\")",
          "",
          "[Removed Lines]",
          "460:     def \"finalizer groups that finalize each other form a cycle\"() {",
          "",
          "[Added Lines]",
          "460:     def \"finalizer groups that finalize each other do not form a cycle\"() {",
          "",
          "---------------"
        ],
        "subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy||subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy": [
          "File: subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy -> subprojects/performance/src/performanceTest/groovy/org/gradle/performance/regression/android/RealLifeAndroidBuildPerformanceTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.gradle.performance.annotations.Scenario",
          "25: import org.gradle.performance.fixture.AndroidTestProject",
          "26: import org.gradle.profiler.BuildMutator",
          "27: import org.gradle.profiler.ScenarioContext",
          "28: import org.gradle.profiler.mutations.AbstractCleanupMutator",
          "29: import org.gradle.profiler.mutations.ClearArtifactTransformCacheMutator",
          "31: import static org.gradle.performance.annotations.ScenarioType.PER_COMMIT",
          "32: import static org.gradle.performance.annotations.ScenarioType.PER_DAY",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.gradle.profiler.InvocationSettings",
          "31: import spock.lang.Issue",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:         tasks << ['assembleDebug', 'phthalic:assembleDebug']",
          "113:     }",
          "115:     private void configureForLargeAndroidBuild2() {",
          "116:         def buildJavaHome = AvailableJavaHomes.getAvailableJdks { it.languageVersion == JavaVersion.VERSION_11 }.first().javaHome",
          "117:         runner.addBuildMutator { invocation ->",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:     @Issue(\"https://github.com/gradle/gradle/issues/25361\")",
          "118:     @RunFor([",
          "119:         @Scenario(type = PER_COMMIT, operatingSystems = LINUX, testProjects = \"largeAndroidBuild\"),",
          "120:     ])",
          "121:     def \"calculate task graph with test finalizer\"() {",
          "122:         given:",
          "123:         AndroidTestProject testProject = androidTestProject",
          "124:         testProject.configure(runner)",
          "125:         runner.addBuildMutator {invocation -> new TestFinalizerMutator(invocation) }",
          "126:         runner.tasksToRun = [':phthalic:test', '--dry-run']",
          "127:         runner.args.add('-Dorg.gradle.parallel=true')",
          "128:         runner.warmUpRuns = 2",
          "129:         runner.runs = 8",
          "130:         applyEnterprisePlugin()",
          "132:         when:",
          "133:         def result = runner.run()",
          "135:         then:",
          "136:         result.assertCurrentVersionHasNotRegressed()",
          "137:     }",
          "139:     private class TestFinalizerMutator implements BuildMutator {",
          "140:         private final InvocationSettings invocation",
          "142:         TestFinalizerMutator(InvocationSettings invocation) {",
          "143:             this.invocation = invocation",
          "144:         }",
          "146:         @Override",
          "147:         void beforeScenario(ScenarioContext context) {",
          "148:             def buildFile = new File(invocation.projectDir, \"build.gradle\")",
          "149:             buildFile << \"\"\"",
          "150:                 def finalizerTask = tasks.register(\"testFinalizer\")",
          "151:                 subprojects {",
          "152:                     tasks.withType(com.android.build.gradle.tasks.factory.AndroidUnitTest) { testTask ->",
          "153:                         testTask.finalizedBy(finalizerTask)",
          "154:                         finalizerTask.configure {",
          "155:                             dependsOn testTask",
          "156:                         }",
          "157:                     }",
          "158:                 }",
          "159:             \"\"\".stripIndent()",
          "160:         }",
          "161:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}