{
  "cve_id": "CVE-2021-3127",
  "cve_desc": "NATS Server 2.x before 2.2.0 and JWT library before 2.0.1 have Incorrect Access Control because Import Token bindings are mishandled.",
  "repo": "nats-io/jwt",
  "patch_hash": "6c72fdd73e82fa9ebb151d84773baf4e9164c4ab",
  "patch_info": {
    "commit_hash": "6c72fdd73e82fa9ebb151d84773baf4e9164c4ab",
    "repo": "nats-io/jwt",
    "commit_url": "https://github.com/nats-io/jwt/commit/6c72fdd73e82fa9ebb151d84773baf4e9164c4ab",
    "files": [
      "activation_claims.go",
      "imports.go",
      "imports_test.go",
      "v2/account_claims_test.go",
      "v2/imports.go",
      "v2/imports_test.go"
    ],
    "message": "Merge pull request #149 from nats-io/cve\n\n[FIXED] validation to return error when token are in the wrong context",
    "before_after_code_files": [
      "activation_claims.go||activation_claims.go",
      "imports.go||imports.go",
      "imports_test.go||imports_test.go",
      "v2/account_claims_test.go||v2/account_claims_test.go",
      "v2/imports.go||v2/imports.go",
      "v2/imports_test.go||v2/imports_test.go"
    ]
  },
  "patch_diff": {
    "activation_claims.go||activation_claims.go": [
      "File: activation_claims.go -> activation_claims.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "104: func (a *ActivationClaims) Validate(vr *ValidationResults) {",
      "106:  a.Activation.Validate(vr)",
      "107:  if a.IssuerAccount != \"\" && !nkeys.IsValidPublicAccountKey(a.IssuerAccount) {",
      "108:   vr.AddError(\"account_id is not an account public key\")",
      "",
      "[Removed Lines]",
      "105:  a.ClaimsData.Validate(vr)",
      "",
      "[Added Lines]",
      "105:  a.validateWithTimeChecks(vr, true)",
      "106: }",
      "109: func (a *ActivationClaims) validateWithTimeChecks(vr *ValidationResults, timeChecks bool) {",
      "110:  if timeChecks {",
      "111:   a.ClaimsData.Validate(vr)",
      "112:  }",
      "",
      "---------------"
    ],
    "imports.go||imports.go": [
      "File: imports.go -> imports.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:  }",
      "64:  if i.Account == \"\" {",
      "66:  }",
      "68:  i.Subject.Validate(vr)",
      "",
      "[Removed Lines]",
      "65:   vr.AddWarning(\"account to import from is not specified\")",
      "",
      "[Added Lines]",
      "65:   vr.AddError(\"account to import from is not specified\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79:  if i.Token != \"\" {",
      "82:    c := &http.Client{Timeout: 5 * time.Second}",
      "84:    if err != nil {",
      "86:    }",
      "88:    if resp != nil {",
      "89:     defer resp.Body.Close()",
      "90:     body, err := ioutil.ReadAll(resp.Body)",
      "91:     if err != nil {",
      "93:     } else {",
      "94:      act, err = DecodeActivationClaims(string(body))",
      "95:      if err != nil {",
      "97:      }",
      "98:     }",
      "99:    }",
      "",
      "[Removed Lines]",
      "81:   if url, err := url.Parse(i.Token); err == nil && url.Scheme != \"\" {",
      "83:    resp, err := c.Get(url.String())",
      "85:     vr.AddWarning(\"import %s contains an unreachable token URL %q\", i.Subject, i.Token)",
      "92:      vr.AddWarning(\"import %s contains an unreadable token URL %q\", i.Subject, i.Token)",
      "96:       vr.AddWarning(\"import %s contains a url %q with an invalid activation token\", i.Subject, i.Token)",
      "",
      "[Added Lines]",
      "81:   if u, err := url.Parse(i.Token); err == nil && u.Scheme != \"\" {",
      "83:    resp, err := c.Get(u.String())",
      "85:     vr.AddError(\"import %s contains an unreachable token URL %q\", i.Subject, i.Token)",
      "92:      vr.AddError(\"import %s contains an unreadable token URL %q\", i.Subject, i.Token)",
      "96:       vr.AddError(\"import %s contains a URL %q with an invalid activation token\", i.Subject, i.Token)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:    var err error",
      "102:    act, err = DecodeActivationClaims(i.Token)",
      "103:    if err != nil {",
      "105:    }",
      "106:   }",
      "107:  }",
      "109:  if act != nil {",
      "112:   }",
      "114:   if act.ClaimsData.Subject != actPubKey {",
      "116:   }",
      "119:  }",
      "121: }",
      "",
      "[Removed Lines]",
      "104:     vr.AddWarning(\"import %q contains an invalid activation token\", i.Subject)",
      "110:   if act.Issuer != i.Account {",
      "111:    vr.AddWarning(\"activation token doesn't match account for import %q\", i.Subject)",
      "115:    vr.AddWarning(\"activation token doesn't match account it is being included in, %q\", i.Subject)",
      "117:  } else {",
      "118:   vr.AddWarning(\"no activation provided for import %s\", i.Subject)",
      "",
      "[Added Lines]",
      "104:     vr.AddError(\"import %q contains an invalid activation token\", i.Subject)",
      "110:   if !(act.Issuer == i.Account || act.IssuerAccount == i.Account) {",
      "111:    vr.AddError(\"activation token doesn't match account for import %q\", i.Subject)",
      "114:    vr.AddError(\"activation token doesn't match account it is being included in, %q\", i.Subject)",
      "115:   }",
      "116:   if act.ImportType != i.Type {",
      "117:    vr.AddError(\"mismatch between token import type %s and type of import %s\", act.ImportType, i.Type)",
      "118:   }",
      "119:   act.validateWithTimeChecks(vr, false)",
      "120:   subj := i.Subject",
      "121:   if i.IsService() && i.To != \"\" {",
      "122:    subj = i.To",
      "123:   }",
      "124:   if !subj.IsContainedIn(act.ImportSubject) {",
      "125:    vr.AddError(\"activation token import subject %q doesn't match import %q\", act.ImportSubject, i.Subject)",
      "",
      "---------------"
    ],
    "imports_test.go||imports_test.go": [
      "File: imports_test.go -> imports_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:  vr := CreateValidationResults()",
      "35:  i.Validate(\"\", vr)",
      "43:  }",
      "46:  vr = CreateValidationResults()",
      "47:  i.Validate(\"\", vr)",
      "55:  }",
      "57:  activation := NewActivationClaims(akp)",
      "61:  activation.ImportSubject = \"test\"",
      "62:  activation.ImportType = Stream",
      "",
      "[Removed Lines]",
      "37:  if vr.IsEmpty() {",
      "38:   t.Errorf(\"imports without token or url should warn the caller\")",
      "39:  }",
      "41:  if vr.IsBlocking(true) {",
      "42:   t.Errorf(\"imports without token or url should not be blocking\")",
      "45:  i.Type = Service",
      "49:  if vr.IsEmpty() {",
      "50:   t.Errorf(\"imports without token or url should warn the caller\")",
      "51:  }",
      "53:  if vr.IsBlocking(true) {",
      "54:   t.Errorf(\"imports without token or url should not be blocking\")",
      "58:  activation.Max = 1024 * 1024",
      "59:  activation.Expires = time.Now().Add(time.Duration(time.Hour)).UTC().Unix()",
      "",
      "[Added Lines]",
      "37:  if !vr.IsEmpty() {",
      "38:   t.Errorf(\"imports should not generate an issue\")",
      "44:  if !vr.IsEmpty() {",
      "45:   t.Errorf(\"imports should not generate an issue\")",
      "49:  activation.Expires = time.Now().Add(time.Hour).UTC().Unix()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96:  vr := CreateValidationResults()",
      "97:  i.Validate(\"\", vr)",
      "105:  }",
      "106: }",
      "108: func TestInvalidImportURL(t *testing.T) {",
      "109:  ak := createAccountNKey(t)",
      "110:  akp := publicKey(ak, t)",
      "113:  vr := CreateValidationResults()",
      "114:  i.Validate(\"\", vr)",
      "",
      "[Removed Lines]",
      "99:  if vr.IsEmpty() {",
      "100:   t.Errorf(\"imports with a bad token or url should warn the caller\")",
      "101:  }",
      "103:  if vr.IsBlocking(true) {",
      "104:   t.Errorf(\"invalid type shouldnt be blocking\")",
      "111:  i := &Import{Subject: \"foo\", Account: akp, Token: \"foo://bad token url\", To: \"bar\", Type: Stream}",
      "",
      "[Added Lines]",
      "89:  if !vr.IsBlocking(true) {",
      "90:   t.Errorf(\"bad token should be blocking\")",
      "97:  i := &Import{Subject: \"foo\", Account: akp, Token: \"foo://bad-token-url\", To: \"bar\", Type: Stream}",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "117:   t.Errorf(\"imports with a bad token or url should warn the caller\")",
      "118:  }",
      "122:  }",
      "123: }",
      "",
      "[Removed Lines]",
      "120:  if vr.IsBlocking(true) {",
      "121:   t.Errorf(\"invalid type shouldnt be blocking\")",
      "",
      "[Added Lines]",
      "106:  if !vr.IsBlocking(true) {",
      "107:   t.Errorf(\"invalid type should be blocking\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "127:  ak2 := createAccountNKey(t)",
      "128:  akp := publicKey(ak, t)",
      "129:  akp2 := publicKey(ak2, t)",
      "132:  vr := CreateValidationResults()",
      "133:  i.Validate(\"\", vr)",
      "139:  if vr.IsBlocking(true) {",
      "140:   t.Errorf(\"imports without token or url should not be blocking\")",
      "141:  }",
      "",
      "[Removed Lines]",
      "130:  i := &Import{Subject: \"test\", Account: akp2, To: \"bar\", Type: Stream}",
      "135:  if vr.IsEmpty() {",
      "136:   t.Errorf(\"imports without token or url should warn the caller\")",
      "137:  }",
      "",
      "[Added Lines]",
      "116:  i := &Import{Subject: \"bar\", Account: akp2, To: \"test\", Type: Service}",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "144:  vr = CreateValidationResults()",
      "145:  i.Validate(\"\", vr)",
      "151:  if vr.IsBlocking(true) {",
      "152:   t.Errorf(\"imports without token or url should not be blocking\")",
      "153:  }",
      "",
      "[Removed Lines]",
      "147:  if vr.IsEmpty() {",
      "148:   t.Errorf(\"imports without token or url should warn the caller\")",
      "149:  }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "157:  activation.Expires = time.Now().Add(time.Duration(time.Hour)).UTC().Unix()",
      "159:  activation.ImportSubject = \"test\"",
      "161:  actJWT := encode(activation, ak2, t)",
      "163:  i.Token = actJWT",
      "",
      "[Removed Lines]",
      "160:  activation.ImportType = Stream",
      "",
      "[Added Lines]",
      "138:  activation.ImportType = Service",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "187:   t.Errorf(\"imports with wrong issuer\")",
      "188:  }",
      "189: }",
      "190: func TestMissingAccountInImport(t *testing.T) {",
      "191:  i := &Import{Subject: \"foo\", To: \"bar\", Type: Stream}",
      "193:  vr := CreateValidationResults()",
      "194:  i.Validate(\"\", vr)",
      "198:  }",
      "202:  }",
      "203: }",
      "",
      "[Removed Lines]",
      "196:  if len(vr.Issues) != 2 {",
      "197:   t.Errorf(\"imports without token or url should warn the caller, as should missing account\")",
      "200:  if vr.IsBlocking(true) {",
      "201:   t.Errorf(\"Missing Account is not blocking, must import failures are warnings\")",
      "",
      "[Added Lines]",
      "175:  if len(vr.Issues) != 1 {",
      "176:   t.Errorf(\"expected only one issue\")",
      "179:  if !vr.IsBlocking(true) {",
      "180:   t.Errorf(\"Missing Account is blocking\")",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "210:  vr := CreateValidationResults()",
      "211:  i.Validate(\"\", vr)",
      "217:  if !vr.IsBlocking(true) {",
      "218:   t.Errorf(\"expected service import with a wildcard subject to be a blocking error\")",
      "219:  }",
      "",
      "[Removed Lines]",
      "213:  if len(vr.Issues) != 2 {",
      "214:   t.Errorf(\"imports without token or url should warn the caller, as should wildcard service\")",
      "215:  }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "225:  vr := CreateValidationResults()",
      "226:  i.Validate(\"\", vr)",
      "230:  }",
      "232:  if !vr.IsBlocking(true) {",
      "",
      "[Removed Lines]",
      "228:  if len(vr.Issues) != 3 {",
      "229:   t.Errorf(\"should have registered 3 issues with this import, got %d\", len(vr.Issues))",
      "",
      "[Added Lines]",
      "203:  if len(vr.Issues) != 2 {",
      "204:   t.Errorf(\"should have registered 2 issues with this import, got %d\", len(vr.Issues))",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "246:  vr := CreateValidationResults()",
      "247:  imports.Validate(\"\", vr)",
      "251:  }",
      "253:  if !vr.IsBlocking(true) {",
      "",
      "[Removed Lines]",
      "249:  if len(vr.Issues) != 3 {",
      "250:   t.Errorf(\"imports without token or url should warn the caller x2, wildcard service as well\")",
      "",
      "[Added Lines]",
      "224:  if len(vr.Issues) != 1 {",
      "225:   t.Errorf(\"warn about wildcard service\")",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "349:  vr = CreateValidationResults()",
      "350:  i.Validate(akp, vr)",
      "353:   t.Errorf(\"imports with non-contains subject should be not valid\")",
      "354:  }",
      "",
      "[Removed Lines]",
      "352:  if !vr.IsEmpty() {",
      "",
      "[Added Lines]",
      "327:  if vr.IsEmpty() {",
      "",
      "---------------"
    ],
    "v2/account_claims_test.go||v2/account_claims_test.go": [
      "File: v2/account_claims_test.go -> v2/account_claims_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:  account.InfoURL = \"http://localhost/my-account/doc\"",
      "55:  account.Description = \"my account\"",
      "56:  account.Imports = Imports{}",
      "59:  vr := CreateValidationResults()",
      "60:  account.Validate(vr)",
      "",
      "[Removed Lines]",
      "57:  account.Imports.Add(&Import{Subject: \"test\", Name: \"test import\", Account: apk2, Token: actJWT, To: \"my\", Type: Stream})",
      "",
      "[Added Lines]",
      "57:  account.Imports.Add(&Import{Subject: \"test\", Name: \"test import\", Account: apk2, Token: actJWT, LocalSubject: \"my\", Type: Stream})",
      "",
      "---------------"
    ],
    "v2/imports.go||v2/imports.go": [
      "File: v2/imports.go -> v2/imports.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:  }",
      "70:  if i.Account == \"\" {",
      "72:  }",
      "74:  i.Subject.Validate(vr)",
      "",
      "[Removed Lines]",
      "71:   vr.AddWarning(\"account to import from is not specified\")",
      "",
      "[Added Lines]",
      "71:   vr.AddError(\"account to import from is not specified\")",
      "72:  }",
      "74:  if i.GetTo() != \"\" {",
      "75:   vr.AddWarning(\"the field to has been deprecated (use LocalSubject instead)\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "88:   var err error",
      "89:   act, err = DecodeActivationClaims(i.Token)",
      "90:   if err != nil {",
      "92:   }",
      "93:  }",
      "",
      "[Removed Lines]",
      "91:    vr.AddWarning(\"import %q contains an invalid activation token\", i.Subject)",
      "",
      "[Added Lines]",
      "95:    vr.AddError(\"import %q contains an invalid activation token\", i.Subject)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:   if !(act.Issuer == i.Account || act.IssuerAccount == i.Account) {",
      "97:    vr.AddError(\"activation token doesn't match account for import %q\", i.Subject)",
      "98:   }",
      "100:   if act.ClaimsData.Subject != actPubKey {",
      "101:    vr.AddError(\"activation token doesn't match account it is being included in, %q\", i.Subject)",
      "102:   }",
      "103:   act.validateWithTimeChecks(vr, false)",
      "104:  }",
      "105: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:   if act.ImportType != i.Type {",
      "107:    vr.AddError(\"mismatch between token import type %s and type of import %s\", act.ImportType, i.Type)",
      "108:   }",
      "110:   subj := i.Subject",
      "111:   if i.IsService() && i.To != \"\" {",
      "112:    subj = i.To",
      "113:   }",
      "114:   if !subj.IsContainedIn(act.ImportSubject) {",
      "115:    vr.AddError(\"activation token import subject %q doesn't match import %q\", act.ImportSubject, i.Subject)",
      "116:   }",
      "",
      "---------------"
    ],
    "v2/imports_test.go||v2/imports_test.go": [
      "File: v2/imports_test.go -> v2/imports_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "27:  ak2 := createAccountNKey(t)",
      "28:  akp := publicKey(ak, t)",
      "29:  akp2 := publicKey(ak2, t)",
      "32:  vr := CreateValidationResults()",
      "33:  i.Validate(\"\", vr)",
      "",
      "[Removed Lines]",
      "30:  i := &Import{Subject: \"test\", Account: akp2, To: \"bar\", Type: Stream}",
      "",
      "[Added Lines]",
      "30:  i := &Import{Subject: \"test\", Account: akp2, LocalSubject: \"bar\", Type: Stream}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36:   t.Errorf(\"imports should not generate an issue\")",
      "37:  }",
      "40:  vr = CreateValidationResults()",
      "41:  i.Validate(\"\", vr)",
      "",
      "[Removed Lines]",
      "39:  i.Type = Service",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "65:  ak2 := createAccountNKey(t)",
      "66:  akp := publicKey(ak, t)",
      "67:  akp2 := publicKey(ak2, t)",
      "70:  activation := NewActivationClaims(akp)",
      "71:  activation.Expires = time.Now().Add(-time.Hour).UTC().Unix()",
      "",
      "[Removed Lines]",
      "68:  i := &Import{Subject: \"test\", Account: akp2, To: \"bar\", Type: Stream}",
      "",
      "[Added Lines]",
      "67:  i := &Import{Subject: \"test\", Account: akp2, LocalSubject: \"bar\", Type: Stream}",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "117:  ak2Sk := createAccountNKey(t)",
      "118:  akp := publicKey(ak, t)",
      "119:  akp2 := publicKey(ak2, t)",
      "122:  activation := NewActivationClaims(akp)",
      "123:  activation.Expires = time.Now().Add(time.Hour).UTC().Unix()",
      "",
      "[Removed Lines]",
      "120:  i := &Import{Subject: \"test\", Account: akp2, To: \"bar\", Type: Stream}",
      "",
      "[Added Lines]",
      "119:  i := &Import{Subject: \"test\", Account: akp2, LocalSubject: \"bar\", Type: Stream}",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "158:  i.Validate(\"\", vr)",
      "160:  if vr.IsEmpty() {",
      "162:  }",
      "166:  }",
      "167: }",
      "169: func TestInvalidImportURL(t *testing.T) {",
      "170:  ak := createAccountNKey(t)",
      "171:  akp := publicKey(ak, t)",
      "174:  vr := CreateValidationResults()",
      "175:  i.Validate(\"\", vr)",
      "",
      "[Removed Lines]",
      "161:   t.Errorf(\"imports with a bad token or url should warn the caller\")",
      "164:  if vr.IsBlocking(true) {",
      "165:   t.Errorf(\"invalid type shouldnt be blocking\")",
      "172:  i := &Import{Subject: \"foo\", Account: akp, Token: \"foo://bad token url\", To: \"bar\", Type: Stream}",
      "",
      "[Added Lines]",
      "160:   t.Errorf(\"imports with a bad token or url should cause an error\")",
      "163:  if !vr.IsBlocking(false) {",
      "164:   t.Errorf(\"invalid type should be blocking\")",
      "171:  i := &Import{Subject: \"foo\", Account: akp, Token: \"foo://bad-token-url\", To: \"bar\", Type: Stream}",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "178:   t.Errorf(\"imports with a bad token or url should warn the caller\")",
      "179:  }",
      "183:  }",
      "184: }",
      "",
      "[Removed Lines]",
      "181:  if vr.IsBlocking(true) {",
      "182:   t.Errorf(\"invalid type shouldnt be blocking\")",
      "",
      "[Added Lines]",
      "180:  if !vr.IsBlocking(true) {",
      "181:   t.Errorf(\"invalid type should be blocking\")",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "188:  ak2 := createAccountNKey(t)",
      "189:  akp := publicKey(ak, t)",
      "190:  akp2 := publicKey(ak2, t)",
      "193:  vr := CreateValidationResults()",
      "194:  i.Validate(\"\", vr)",
      "",
      "[Removed Lines]",
      "191:  i := &Import{Subject: \"test\", Account: akp2, To: \"bar\", Type: Stream}",
      "",
      "[Added Lines]",
      "190:  i := &Import{Subject: \"test\", Account: akp2, LocalSubject: \"bar\", Type: Service}",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "209:  activation.Expires = time.Now().Add(time.Hour).UTC().Unix()",
      "211:  activation.ImportSubject = \"test\"",
      "213:  actJWT := encode(activation, ak2, t)",
      "215:  i.Token = actJWT",
      "",
      "[Removed Lines]",
      "212:  activation.ImportType = Stream",
      "",
      "[Added Lines]",
      "211:  activation.ImportType = Service",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "240:  }",
      "241: }",
      "242: func TestMissingAccountInImport(t *testing.T) {",
      "245:  vr := CreateValidationResults()",
      "246:  i.Validate(\"\", vr)",
      "",
      "[Removed Lines]",
      "243:  i := &Import{Subject: \"foo\", To: \"bar\", Type: Stream}",
      "",
      "[Added Lines]",
      "242:  i := &Import{Subject: \"foo\", LocalSubject: \"bar\", Type: Stream}",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "249:   t.Errorf(\"expected only one issue\")",
      "250:  }",
      "254:  }",
      "255: }",
      "257: func TestServiceImportWithWildcard(t *testing.T) {",
      "260:  vr := CreateValidationResults()",
      "261:  i.Validate(\"\", vr)",
      "",
      "[Removed Lines]",
      "252:  if vr.IsBlocking(true) {",
      "253:   t.Errorf(\"Missing Account is not blocking, must import failures are warnings\")",
      "258:  i := &Import{Subject: \"foo.*\", Account: publicKey(createAccountNKey(t), t), To: \"bar\", Type: Service}",
      "",
      "[Added Lines]",
      "251:  if !vr.IsBlocking(true) {",
      "252:   t.Errorf(\"Missing Account is blocking\")",
      "257:  i := &Import{Subject: \"foo.>\", Account: publicKey(createAccountNKey(t), t), LocalSubject: \"bar.>\", Type: Service}",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "274: }",
      "276: func TestStreamImportWithWildcardPrefix(t *testing.T) {",
      "279:  vr := CreateValidationResults()",
      "280:  i.Validate(\"\", vr)",
      "",
      "[Removed Lines]",
      "277:  i := &Import{Subject: \"foo\", Account: publicKey(createAccountNKey(t), t), To: \"bar.*\", Type: Stream}",
      "",
      "[Added Lines]",
      "276:  i := &Import{Subject: \"foo.>\", Account: publicKey(createAccountNKey(t), t), LocalSubject: \"bar.>\", Type: Stream}",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "319: func TestImportsValidation(t *testing.T) {",
      "320:  ak := createAccountNKey(t)",
      "321:  akp := publicKey(ak, t)",
      "325:  imports := &Imports{}",
      "326:  imports.Add(i, i2)",
      "",
      "[Removed Lines]",
      "322:  i := &Import{Subject: \"foo\", Account: akp, To: \"bar\", Type: Stream}",
      "323:  i2 := &Import{Subject: \"foo.*\", Account: akp, To: \"bar\", Type: Service}",
      "",
      "[Added Lines]",
      "321:  i := &Import{Subject: \"foo\", Account: akp, LocalSubject: \"bar\", Type: Stream}",
      "322:  i2 := &Import{Subject: \"foo.*\", Account: akp, LocalSubject: \"bar.*\", Type: Service}",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "392:  ak2 := createAccountNKey(t)",
      "393:  akp2 := publicKey(ak2, t)",
      "398:  vr := CreateValidationResults()",
      "399:  i.Validate(akp, vr)",
      "",
      "[Removed Lines]",
      "394:  i := &Import{Subject: \"one.two\", Account: akp2, To: \"bar\", Type: Stream}",
      "396:  actJWT := encode(activation, ak2, t)",
      "397:  i.Token = actJWT",
      "",
      "[Added Lines]",
      "393:  i := &Import{Subject: \"one.two\", Account: akp2, LocalSubject: \"bar\", Type: Stream}",
      "395:  i.Token = encode(activation, ak2, t)",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "406:  activation.ImportSubject = \"two\"",
      "407:  activation.ImportType = Stream",
      "410:  vr = CreateValidationResults()",
      "411:  i.Validate(akp, vr)",
      "414:   t.Errorf(\"imports with non-contains subject should be not valid\")",
      "415:  }",
      "417:  activation.ImportSubject = \">\"",
      "418:  activation.ImportType = Stream",
      "421:  vr = CreateValidationResults()",
      "422:  i.Validate(akp, vr)",
      "",
      "[Removed Lines]",
      "408:  actJWT = encode(activation, ak2, t)",
      "409:  i.Token = actJWT",
      "413:  if !vr.IsEmpty() {",
      "419:  actJWT = encode(activation, ak2, t)",
      "420:  i.Token = actJWT",
      "",
      "[Added Lines]",
      "406:  i.Token = encode(activation, ak2, t)",
      "410:  if vr.IsEmpty() {",
      "416:  i.Token = encode(activation, ak2, t)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a826c77dc9d2671c961b75ceefdb439c41029866",
      "candidate_info": {
        "commit_hash": "a826c77dc9d2671c961b75ceefdb439c41029866",
        "repo": "nats-io/jwt",
        "commit_url": "https://github.com/nats-io/jwt/commit/a826c77dc9d2671c961b75ceefdb439c41029866",
        "files": [
          "activation_claims.go",
          "imports.go",
          "imports_test.go",
          "v2/account_claims_test.go",
          "v2/imports.go",
          "v2/imports_test.go"
        ],
        "message": "[fixed] validation to return error when token are in the wrong context\n\nSigned-off-by: Matthias Hanel <mh@synadia.com>",
        "before_after_code_files": [
          "activation_claims.go||activation_claims.go",
          "imports.go||imports.go",
          "imports_test.go||imports_test.go",
          "v2/account_claims_test.go||v2/account_claims_test.go",
          "v2/imports.go||v2/imports.go",
          "v2/imports_test.go||v2/imports_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/nats-io/jwt/pull/149"
        ],
        "olp_code_files": {
          "patch": [
            "activation_claims.go||activation_claims.go",
            "imports.go||imports.go",
            "imports_test.go||imports_test.go",
            "v2/account_claims_test.go||v2/account_claims_test.go",
            "v2/imports.go||v2/imports.go",
            "v2/imports_test.go||v2/imports_test.go"
          ],
          "candidate": [
            "activation_claims.go||activation_claims.go",
            "imports.go||imports.go",
            "imports_test.go||imports_test.go",
            "v2/account_claims_test.go||v2/account_claims_test.go",
            "v2/imports.go||v2/imports.go",
            "v2/imports_test.go||v2/imports_test.go"
          ]
        }
      },
      "candidate_diff": {
        "activation_claims.go||activation_claims.go": [
          "File: activation_claims.go -> activation_claims.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: func (a *ActivationClaims) Validate(vr *ValidationResults) {",
          "106:  a.Activation.Validate(vr)",
          "107:  if a.IssuerAccount != \"\" && !nkeys.IsValidPublicAccountKey(a.IssuerAccount) {",
          "108:   vr.AddError(\"account_id is not an account public key\")",
          "",
          "[Removed Lines]",
          "105:  a.ClaimsData.Validate(vr)",
          "",
          "[Added Lines]",
          "105:  a.validateWithTimeChecks(vr, true)",
          "106: }",
          "109: func (a *ActivationClaims) validateWithTimeChecks(vr *ValidationResults, timeChecks bool) {",
          "110:  if timeChecks {",
          "111:   a.ClaimsData.Validate(vr)",
          "112:  }",
          "",
          "---------------"
        ],
        "imports.go||imports.go": [
          "File: imports.go -> imports.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  }",
          "64:  if i.Account == \"\" {",
          "66:  }",
          "68:  i.Subject.Validate(vr)",
          "",
          "[Removed Lines]",
          "65:   vr.AddWarning(\"account to import from is not specified\")",
          "",
          "[Added Lines]",
          "65:   vr.AddError(\"account to import from is not specified\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:  if i.Token != \"\" {",
          "82:    c := &http.Client{Timeout: 5 * time.Second}",
          "84:    if err != nil {",
          "86:    }",
          "88:    if resp != nil {",
          "89:     defer resp.Body.Close()",
          "90:     body, err := ioutil.ReadAll(resp.Body)",
          "91:     if err != nil {",
          "93:     } else {",
          "94:      act, err = DecodeActivationClaims(string(body))",
          "95:      if err != nil {",
          "97:      }",
          "98:     }",
          "99:    }",
          "",
          "[Removed Lines]",
          "81:   if url, err := url.Parse(i.Token); err == nil && url.Scheme != \"\" {",
          "83:    resp, err := c.Get(url.String())",
          "85:     vr.AddWarning(\"import %s contains an unreachable token URL %q\", i.Subject, i.Token)",
          "92:      vr.AddWarning(\"import %s contains an unreadable token URL %q\", i.Subject, i.Token)",
          "96:       vr.AddWarning(\"import %s contains a url %q with an invalid activation token\", i.Subject, i.Token)",
          "",
          "[Added Lines]",
          "81:   if u, err := url.Parse(i.Token); err == nil && u.Scheme != \"\" {",
          "83:    resp, err := c.Get(u.String())",
          "85:     vr.AddError(\"import %s contains an unreachable token URL %q\", i.Subject, i.Token)",
          "92:      vr.AddError(\"import %s contains an unreadable token URL %q\", i.Subject, i.Token)",
          "96:       vr.AddError(\"import %s contains a URL %q with an invalid activation token\", i.Subject, i.Token)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:    var err error",
          "102:    act, err = DecodeActivationClaims(i.Token)",
          "103:    if err != nil {",
          "105:    }",
          "106:   }",
          "107:  }",
          "109:  if act != nil {",
          "112:   }",
          "114:   if act.ClaimsData.Subject != actPubKey {",
          "116:   }",
          "119:  }",
          "121: }",
          "",
          "[Removed Lines]",
          "104:     vr.AddWarning(\"import %q contains an invalid activation token\", i.Subject)",
          "110:   if act.Issuer != i.Account {",
          "111:    vr.AddWarning(\"activation token doesn't match account for import %q\", i.Subject)",
          "115:    vr.AddWarning(\"activation token doesn't match account it is being included in, %q\", i.Subject)",
          "117:  } else {",
          "118:   vr.AddWarning(\"no activation provided for import %s\", i.Subject)",
          "",
          "[Added Lines]",
          "104:     vr.AddError(\"import %q contains an invalid activation token\", i.Subject)",
          "110:   if !(act.Issuer == i.Account || act.IssuerAccount == i.Account) {",
          "111:    vr.AddError(\"activation token doesn't match account for import %q\", i.Subject)",
          "114:    vr.AddError(\"activation token doesn't match account it is being included in, %q\", i.Subject)",
          "115:   }",
          "116:   if act.ImportType != i.Type {",
          "117:    vr.AddError(\"mismatch between token import type %s and type of import %s\", act.ImportType, i.Type)",
          "118:   }",
          "119:   act.validateWithTimeChecks(vr, false)",
          "120:   subj := i.Subject",
          "121:   if i.IsService() && i.To != \"\" {",
          "122:    subj = i.To",
          "123:   }",
          "124:   if !subj.IsContainedIn(act.ImportSubject) {",
          "125:    vr.AddError(\"activation token import subject %q doesn't match import %q\", act.ImportSubject, i.Subject)",
          "",
          "---------------"
        ],
        "imports_test.go||imports_test.go": [
          "File: imports_test.go -> imports_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:  vr := CreateValidationResults()",
          "35:  i.Validate(\"\", vr)",
          "43:  }",
          "46:  vr = CreateValidationResults()",
          "47:  i.Validate(\"\", vr)",
          "55:  }",
          "57:  activation := NewActivationClaims(akp)",
          "61:  activation.ImportSubject = \"test\"",
          "62:  activation.ImportType = Stream",
          "",
          "[Removed Lines]",
          "37:  if vr.IsEmpty() {",
          "38:   t.Errorf(\"imports without token or url should warn the caller\")",
          "39:  }",
          "41:  if vr.IsBlocking(true) {",
          "42:   t.Errorf(\"imports without token or url should not be blocking\")",
          "45:  i.Type = Service",
          "49:  if vr.IsEmpty() {",
          "50:   t.Errorf(\"imports without token or url should warn the caller\")",
          "51:  }",
          "53:  if vr.IsBlocking(true) {",
          "54:   t.Errorf(\"imports without token or url should not be blocking\")",
          "58:  activation.Max = 1024 * 1024",
          "59:  activation.Expires = time.Now().Add(time.Duration(time.Hour)).UTC().Unix()",
          "",
          "[Added Lines]",
          "37:  if !vr.IsEmpty() {",
          "38:   t.Errorf(\"imports should not generate an issue\")",
          "44:  if !vr.IsEmpty() {",
          "45:   t.Errorf(\"imports should not generate an issue\")",
          "49:  activation.Expires = time.Now().Add(time.Hour).UTC().Unix()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:  vr := CreateValidationResults()",
          "97:  i.Validate(\"\", vr)",
          "105:  }",
          "106: }",
          "108: func TestInvalidImportURL(t *testing.T) {",
          "109:  ak := createAccountNKey(t)",
          "110:  akp := publicKey(ak, t)",
          "113:  vr := CreateValidationResults()",
          "114:  i.Validate(\"\", vr)",
          "",
          "[Removed Lines]",
          "99:  if vr.IsEmpty() {",
          "100:   t.Errorf(\"imports with a bad token or url should warn the caller\")",
          "101:  }",
          "103:  if vr.IsBlocking(true) {",
          "104:   t.Errorf(\"invalid type shouldnt be blocking\")",
          "111:  i := &Import{Subject: \"foo\", Account: akp, Token: \"foo://bad token url\", To: \"bar\", Type: Stream}",
          "",
          "[Added Lines]",
          "89:  if !vr.IsBlocking(true) {",
          "90:   t.Errorf(\"bad token should be blocking\")",
          "97:  i := &Import{Subject: \"foo\", Account: akp, Token: \"foo://bad-token-url\", To: \"bar\", Type: Stream}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:   t.Errorf(\"imports with a bad token or url should warn the caller\")",
          "118:  }",
          "122:  }",
          "123: }",
          "",
          "[Removed Lines]",
          "120:  if vr.IsBlocking(true) {",
          "121:   t.Errorf(\"invalid type shouldnt be blocking\")",
          "",
          "[Added Lines]",
          "106:  if !vr.IsBlocking(true) {",
          "107:   t.Errorf(\"invalid type should be blocking\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:  ak2 := createAccountNKey(t)",
          "128:  akp := publicKey(ak, t)",
          "129:  akp2 := publicKey(ak2, t)",
          "132:  vr := CreateValidationResults()",
          "133:  i.Validate(\"\", vr)",
          "139:  if vr.IsBlocking(true) {",
          "140:   t.Errorf(\"imports without token or url should not be blocking\")",
          "141:  }",
          "",
          "[Removed Lines]",
          "130:  i := &Import{Subject: \"test\", Account: akp2, To: \"bar\", Type: Stream}",
          "135:  if vr.IsEmpty() {",
          "136:   t.Errorf(\"imports without token or url should warn the caller\")",
          "137:  }",
          "",
          "[Added Lines]",
          "116:  i := &Import{Subject: \"bar\", Account: akp2, To: \"test\", Type: Service}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "144:  vr = CreateValidationResults()",
          "145:  i.Validate(\"\", vr)",
          "151:  if vr.IsBlocking(true) {",
          "152:   t.Errorf(\"imports without token or url should not be blocking\")",
          "153:  }",
          "",
          "[Removed Lines]",
          "147:  if vr.IsEmpty() {",
          "148:   t.Errorf(\"imports without token or url should warn the caller\")",
          "149:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "157:  activation.Expires = time.Now().Add(time.Duration(time.Hour)).UTC().Unix()",
          "159:  activation.ImportSubject = \"test\"",
          "161:  actJWT := encode(activation, ak2, t)",
          "163:  i.Token = actJWT",
          "",
          "[Removed Lines]",
          "160:  activation.ImportType = Stream",
          "",
          "[Added Lines]",
          "138:  activation.ImportType = Service",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "187:   t.Errorf(\"imports with wrong issuer\")",
          "188:  }",
          "189: }",
          "190: func TestMissingAccountInImport(t *testing.T) {",
          "191:  i := &Import{Subject: \"foo\", To: \"bar\", Type: Stream}",
          "193:  vr := CreateValidationResults()",
          "194:  i.Validate(\"\", vr)",
          "198:  }",
          "202:  }",
          "203: }",
          "",
          "[Removed Lines]",
          "196:  if len(vr.Issues) != 2 {",
          "197:   t.Errorf(\"imports without token or url should warn the caller, as should missing account\")",
          "200:  if vr.IsBlocking(true) {",
          "201:   t.Errorf(\"Missing Account is not blocking, must import failures are warnings\")",
          "",
          "[Added Lines]",
          "175:  if len(vr.Issues) != 1 {",
          "176:   t.Errorf(\"expected only one issue\")",
          "179:  if !vr.IsBlocking(true) {",
          "180:   t.Errorf(\"Missing Account is blocking\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "210:  vr := CreateValidationResults()",
          "211:  i.Validate(\"\", vr)",
          "217:  if !vr.IsBlocking(true) {",
          "218:   t.Errorf(\"expected service import with a wildcard subject to be a blocking error\")",
          "219:  }",
          "",
          "[Removed Lines]",
          "213:  if len(vr.Issues) != 2 {",
          "214:   t.Errorf(\"imports without token or url should warn the caller, as should wildcard service\")",
          "215:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "225:  vr := CreateValidationResults()",
          "226:  i.Validate(\"\", vr)",
          "230:  }",
          "232:  if !vr.IsBlocking(true) {",
          "",
          "[Removed Lines]",
          "228:  if len(vr.Issues) != 3 {",
          "229:   t.Errorf(\"should have registered 3 issues with this import, got %d\", len(vr.Issues))",
          "",
          "[Added Lines]",
          "203:  if len(vr.Issues) != 2 {",
          "204:   t.Errorf(\"should have registered 2 issues with this import, got %d\", len(vr.Issues))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "246:  vr := CreateValidationResults()",
          "247:  imports.Validate(\"\", vr)",
          "251:  }",
          "253:  if !vr.IsBlocking(true) {",
          "",
          "[Removed Lines]",
          "249:  if len(vr.Issues) != 3 {",
          "250:   t.Errorf(\"imports without token or url should warn the caller x2, wildcard service as well\")",
          "",
          "[Added Lines]",
          "224:  if len(vr.Issues) != 1 {",
          "225:   t.Errorf(\"warn about wildcard service\")",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "349:  vr = CreateValidationResults()",
          "350:  i.Validate(akp, vr)",
          "353:   t.Errorf(\"imports with non-contains subject should be not valid\")",
          "354:  }",
          "",
          "[Removed Lines]",
          "352:  if !vr.IsEmpty() {",
          "",
          "[Added Lines]",
          "327:  if vr.IsEmpty() {",
          "",
          "---------------"
        ],
        "v2/account_claims_test.go||v2/account_claims_test.go": [
          "File: v2/account_claims_test.go -> v2/account_claims_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:  account.InfoURL = \"http://localhost/my-account/doc\"",
          "55:  account.Description = \"my account\"",
          "56:  account.Imports = Imports{}",
          "59:  vr := CreateValidationResults()",
          "60:  account.Validate(vr)",
          "",
          "[Removed Lines]",
          "57:  account.Imports.Add(&Import{Subject: \"test\", Name: \"test import\", Account: apk2, Token: actJWT, To: \"my\", Type: Stream})",
          "",
          "[Added Lines]",
          "57:  account.Imports.Add(&Import{Subject: \"test\", Name: \"test import\", Account: apk2, Token: actJWT, LocalSubject: \"my\", Type: Stream})",
          "",
          "---------------"
        ],
        "v2/imports.go||v2/imports.go": [
          "File: v2/imports.go -> v2/imports.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  }",
          "70:  if i.Account == \"\" {",
          "72:  }",
          "74:  i.Subject.Validate(vr)",
          "",
          "[Removed Lines]",
          "71:   vr.AddWarning(\"account to import from is not specified\")",
          "",
          "[Added Lines]",
          "71:   vr.AddError(\"account to import from is not specified\")",
          "72:  }",
          "74:  if i.GetTo() != \"\" {",
          "75:   vr.AddWarning(\"the field to has been deprecated (use LocalSubject instead)\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:   var err error",
          "89:   act, err = DecodeActivationClaims(i.Token)",
          "90:   if err != nil {",
          "92:   }",
          "93:  }",
          "",
          "[Removed Lines]",
          "91:    vr.AddWarning(\"import %q contains an invalid activation token\", i.Subject)",
          "",
          "[Added Lines]",
          "95:    vr.AddError(\"import %q contains an invalid activation token\", i.Subject)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:   if !(act.Issuer == i.Account || act.IssuerAccount == i.Account) {",
          "97:    vr.AddError(\"activation token doesn't match account for import %q\", i.Subject)",
          "98:   }",
          "100:   if act.ClaimsData.Subject != actPubKey {",
          "101:    vr.AddError(\"activation token doesn't match account it is being included in, %q\", i.Subject)",
          "102:   }",
          "103:   act.validateWithTimeChecks(vr, false)",
          "104:  }",
          "105: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:   if act.ImportType != i.Type {",
          "107:    vr.AddError(\"mismatch between token import type %s and type of import %s\", act.ImportType, i.Type)",
          "108:   }",
          "110:   subj := i.Subject",
          "111:   if i.IsService() && i.To != \"\" {",
          "112:    subj = i.To",
          "113:   }",
          "114:   if !subj.IsContainedIn(act.ImportSubject) {",
          "115:    vr.AddError(\"activation token import subject %q doesn't match import %q\", act.ImportSubject, i.Subject)",
          "116:   }",
          "",
          "---------------"
        ],
        "v2/imports_test.go||v2/imports_test.go": [
          "File: v2/imports_test.go -> v2/imports_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  ak2 := createAccountNKey(t)",
          "28:  akp := publicKey(ak, t)",
          "29:  akp2 := publicKey(ak2, t)",
          "32:  vr := CreateValidationResults()",
          "33:  i.Validate(\"\", vr)",
          "",
          "[Removed Lines]",
          "30:  i := &Import{Subject: \"test\", Account: akp2, To: \"bar\", Type: Stream}",
          "",
          "[Added Lines]",
          "30:  i := &Import{Subject: \"test\", Account: akp2, LocalSubject: \"bar\", Type: Stream}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:   t.Errorf(\"imports should not generate an issue\")",
          "37:  }",
          "40:  vr = CreateValidationResults()",
          "41:  i.Validate(\"\", vr)",
          "",
          "[Removed Lines]",
          "39:  i.Type = Service",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:  ak2 := createAccountNKey(t)",
          "66:  akp := publicKey(ak, t)",
          "67:  akp2 := publicKey(ak2, t)",
          "70:  activation := NewActivationClaims(akp)",
          "71:  activation.Expires = time.Now().Add(-time.Hour).UTC().Unix()",
          "",
          "[Removed Lines]",
          "68:  i := &Import{Subject: \"test\", Account: akp2, To: \"bar\", Type: Stream}",
          "",
          "[Added Lines]",
          "67:  i := &Import{Subject: \"test\", Account: akp2, LocalSubject: \"bar\", Type: Stream}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:  ak2Sk := createAccountNKey(t)",
          "118:  akp := publicKey(ak, t)",
          "119:  akp2 := publicKey(ak2, t)",
          "122:  activation := NewActivationClaims(akp)",
          "123:  activation.Expires = time.Now().Add(time.Hour).UTC().Unix()",
          "",
          "[Removed Lines]",
          "120:  i := &Import{Subject: \"test\", Account: akp2, To: \"bar\", Type: Stream}",
          "",
          "[Added Lines]",
          "119:  i := &Import{Subject: \"test\", Account: akp2, LocalSubject: \"bar\", Type: Stream}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:  i.Validate(\"\", vr)",
          "160:  if vr.IsEmpty() {",
          "162:  }",
          "166:  }",
          "167: }",
          "169: func TestInvalidImportURL(t *testing.T) {",
          "170:  ak := createAccountNKey(t)",
          "171:  akp := publicKey(ak, t)",
          "174:  vr := CreateValidationResults()",
          "175:  i.Validate(\"\", vr)",
          "",
          "[Removed Lines]",
          "161:   t.Errorf(\"imports with a bad token or url should warn the caller\")",
          "164:  if vr.IsBlocking(true) {",
          "165:   t.Errorf(\"invalid type shouldnt be blocking\")",
          "172:  i := &Import{Subject: \"foo\", Account: akp, Token: \"foo://bad token url\", To: \"bar\", Type: Stream}",
          "",
          "[Added Lines]",
          "160:   t.Errorf(\"imports with a bad token or url should cause an error\")",
          "163:  if !vr.IsBlocking(false) {",
          "164:   t.Errorf(\"invalid type should be blocking\")",
          "171:  i := &Import{Subject: \"foo\", Account: akp, Token: \"foo://bad-token-url\", To: \"bar\", Type: Stream}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178:   t.Errorf(\"imports with a bad token or url should warn the caller\")",
          "179:  }",
          "183:  }",
          "184: }",
          "",
          "[Removed Lines]",
          "181:  if vr.IsBlocking(true) {",
          "182:   t.Errorf(\"invalid type shouldnt be blocking\")",
          "",
          "[Added Lines]",
          "180:  if !vr.IsBlocking(true) {",
          "181:   t.Errorf(\"invalid type should be blocking\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "188:  ak2 := createAccountNKey(t)",
          "189:  akp := publicKey(ak, t)",
          "190:  akp2 := publicKey(ak2, t)",
          "193:  vr := CreateValidationResults()",
          "194:  i.Validate(\"\", vr)",
          "",
          "[Removed Lines]",
          "191:  i := &Import{Subject: \"test\", Account: akp2, To: \"bar\", Type: Stream}",
          "",
          "[Added Lines]",
          "190:  i := &Import{Subject: \"test\", Account: akp2, LocalSubject: \"bar\", Type: Service}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "209:  activation.Expires = time.Now().Add(time.Hour).UTC().Unix()",
          "211:  activation.ImportSubject = \"test\"",
          "213:  actJWT := encode(activation, ak2, t)",
          "215:  i.Token = actJWT",
          "",
          "[Removed Lines]",
          "212:  activation.ImportType = Stream",
          "",
          "[Added Lines]",
          "211:  activation.ImportType = Service",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "240:  }",
          "241: }",
          "242: func TestMissingAccountInImport(t *testing.T) {",
          "245:  vr := CreateValidationResults()",
          "246:  i.Validate(\"\", vr)",
          "",
          "[Removed Lines]",
          "243:  i := &Import{Subject: \"foo\", To: \"bar\", Type: Stream}",
          "",
          "[Added Lines]",
          "242:  i := &Import{Subject: \"foo\", LocalSubject: \"bar\", Type: Stream}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "249:   t.Errorf(\"expected only one issue\")",
          "250:  }",
          "254:  }",
          "255: }",
          "257: func TestServiceImportWithWildcard(t *testing.T) {",
          "260:  vr := CreateValidationResults()",
          "261:  i.Validate(\"\", vr)",
          "",
          "[Removed Lines]",
          "252:  if vr.IsBlocking(true) {",
          "253:   t.Errorf(\"Missing Account is not blocking, must import failures are warnings\")",
          "258:  i := &Import{Subject: \"foo.*\", Account: publicKey(createAccountNKey(t), t), To: \"bar\", Type: Service}",
          "",
          "[Added Lines]",
          "251:  if !vr.IsBlocking(true) {",
          "252:   t.Errorf(\"Missing Account is blocking\")",
          "257:  i := &Import{Subject: \"foo.>\", Account: publicKey(createAccountNKey(t), t), LocalSubject: \"bar.>\", Type: Service}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "274: }",
          "276: func TestStreamImportWithWildcardPrefix(t *testing.T) {",
          "279:  vr := CreateValidationResults()",
          "280:  i.Validate(\"\", vr)",
          "",
          "[Removed Lines]",
          "277:  i := &Import{Subject: \"foo\", Account: publicKey(createAccountNKey(t), t), To: \"bar.*\", Type: Stream}",
          "",
          "[Added Lines]",
          "276:  i := &Import{Subject: \"foo.>\", Account: publicKey(createAccountNKey(t), t), LocalSubject: \"bar.>\", Type: Stream}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "319: func TestImportsValidation(t *testing.T) {",
          "320:  ak := createAccountNKey(t)",
          "321:  akp := publicKey(ak, t)",
          "325:  imports := &Imports{}",
          "326:  imports.Add(i, i2)",
          "",
          "[Removed Lines]",
          "322:  i := &Import{Subject: \"foo\", Account: akp, To: \"bar\", Type: Stream}",
          "323:  i2 := &Import{Subject: \"foo.*\", Account: akp, To: \"bar\", Type: Service}",
          "",
          "[Added Lines]",
          "321:  i := &Import{Subject: \"foo\", Account: akp, LocalSubject: \"bar\", Type: Stream}",
          "322:  i2 := &Import{Subject: \"foo.*\", Account: akp, LocalSubject: \"bar.*\", Type: Service}",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "392:  ak2 := createAccountNKey(t)",
          "393:  akp2 := publicKey(ak2, t)",
          "398:  vr := CreateValidationResults()",
          "399:  i.Validate(akp, vr)",
          "",
          "[Removed Lines]",
          "394:  i := &Import{Subject: \"one.two\", Account: akp2, To: \"bar\", Type: Stream}",
          "396:  actJWT := encode(activation, ak2, t)",
          "397:  i.Token = actJWT",
          "",
          "[Added Lines]",
          "393:  i := &Import{Subject: \"one.two\", Account: akp2, LocalSubject: \"bar\", Type: Stream}",
          "395:  i.Token = encode(activation, ak2, t)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "406:  activation.ImportSubject = \"two\"",
          "407:  activation.ImportType = Stream",
          "410:  vr = CreateValidationResults()",
          "411:  i.Validate(akp, vr)",
          "414:   t.Errorf(\"imports with non-contains subject should be not valid\")",
          "415:  }",
          "417:  activation.ImportSubject = \">\"",
          "418:  activation.ImportType = Stream",
          "421:  vr = CreateValidationResults()",
          "422:  i.Validate(akp, vr)",
          "",
          "[Removed Lines]",
          "408:  actJWT = encode(activation, ak2, t)",
          "409:  i.Token = actJWT",
          "413:  if !vr.IsEmpty() {",
          "419:  actJWT = encode(activation, ak2, t)",
          "420:  i.Token = actJWT",
          "",
          "[Added Lines]",
          "406:  i.Token = encode(activation, ak2, t)",
          "410:  if vr.IsEmpty() {",
          "416:  i.Token = encode(activation, ak2, t)",
          "",
          "---------------"
        ]
      }
    }
  ]
}