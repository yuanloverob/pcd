{
  "cve_id": "CVE-2024-45409",
  "cve_desc": "The Ruby SAML library is for implementing the client side of a SAML authorization. Ruby-SAML in <= 12.2 and 1.13.0 <= 1.16.0 does not properly verify the signature of the SAML Response. An unauthenticated attacker with access to any signed saml document (by the IdP) can thus forge a SAML Response/Assertion with arbitrary contents. This would allow the attacker to log in as arbitrary user within the vulnerable system. This vulnerability is fixed in 1.17.0 and 1.12.3.",
  "repo": "SAML-Toolkits/ruby-saml",
  "patch_hash": "1ec5392bc506fe43a02dbb66b68741051c5ffeae",
  "patch_info": {
    "commit_hash": "1ec5392bc506fe43a02dbb66b68741051c5ffeae",
    "repo": "SAML-Toolkits/ruby-saml",
    "commit_url": "https://github.com/SAML-Toolkits/ruby-saml/commit/1ec5392bc506fe43a02dbb66b68741051c5ffeae",
    "files": [
      "changelog.md",
      "lib/onelogin/ruby-saml/version.rb",
      "lib/xml_security.rb"
    ],
    "message": "Release 1.12.3 to include critical vulnerability CVE-2024-45409 fix",
    "before_after_code_files": [
      "lib/onelogin/ruby-saml/version.rb||lib/onelogin/ruby-saml/version.rb",
      "lib/xml_security.rb||lib/xml_security.rb"
    ]
  },
  "patch_diff": {
    "lib/onelogin/ruby-saml/version.rb||lib/onelogin/ruby-saml/version.rb": [
      "File: lib/onelogin/ruby-saml/version.rb -> lib/onelogin/ruby-saml/version.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: module OneLogin",
      "2:   module RubySaml",
      "4:   end",
      "5: end",
      "",
      "[Removed Lines]",
      "3:     VERSION = '1.12.2'",
      "",
      "[Added Lines]",
      "3:     VERSION = '1.12.3'",
      "",
      "---------------"
    ],
    "lib/xml_security.rb||lib/xml_security.rb": [
      "File: lib/xml_security.rb -> lib/xml_security.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "312:       canon_string = noko_signed_info_element.canonicalize(canon_algorithm)",
      "313:       noko_sig_element.remove",
      "315:       # get inclusive namespaces",
      "316:       inclusive_namespaces = extract_inclusive_namespaces",
      "318:       # check digests",
      "323:       canon_algorithm = canon_algorithm REXML::XPath.first(",
      "326:         { \"ds\" => DSIG }",
      "327:       )",
      "",
      "[Removed Lines]",
      "319:       ref = REXML::XPath.first(sig_element, \"//ds:Reference\", {\"ds\"=>DSIG})",
      "321:       hashed_element = document.at_xpath(\"//*[@ID=$id]\", nil, { 'id' => extract_signed_element_id })",
      "324:         ref,",
      "325:         '//ds:CanonicalizationMethod',",
      "",
      "[Added Lines]",
      "315:       # get signed info",
      "316:       signed_info_element = REXML::XPath.first(",
      "317:         sig_element,",
      "318:         \"./ds:SignedInfo\",",
      "319:         { \"ds\" => DSIG }",
      "320:       )",
      "326:       ref = REXML::XPath.first(signed_info_element, \"./ds:Reference\", {\"ds\"=>DSIG})",
      "328:       reference_nodes = document.xpath(\"//*[@ID=$id]\", nil, { 'id' => extract_signed_element_id })",
      "330:       if reference_nodes.length > 1 # ensures no elements with same ID to prevent signature wrapping attack.",
      "331:         return append_error(\"Duplicated IDs found\", soft)",
      "332:       end",
      "334:       hashed_element = reference_nodes[0]",
      "337:         signed_info_element,",
      "338:         './ds:CanonicalizationMethod',",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "333:       digest_algorithm = algorithm(REXML::XPath.first(",
      "334:         ref,",
      "336:         { \"ds\" => DSIG }",
      "337:       ))",
      "338:       hash = digest_algorithm.digest(canon_hashed_element)",
      "339:       encoded_digest_value = REXML::XPath.first(",
      "340:         ref,",
      "342:         { \"ds\" => DSIG }",
      "343:       )",
      "344:       digest_value = Base64.decode64(OneLogin::RubySaml::Utils.element_text(encoded_digest_value))",
      "",
      "[Removed Lines]",
      "335:         \"//ds:DigestMethod\",",
      "341:         \"//ds:DigestValue\",",
      "",
      "[Added Lines]",
      "348:         \"./ds:DigestMethod\",",
      "354:         \"./ds:DigestValue\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "364:     def process_transforms(ref, canon_algorithm)",
      "365:       transforms = REXML::XPath.match(",
      "366:         ref,",
      "368:         { \"ds\" => DSIG }",
      "369:       )",
      "",
      "[Removed Lines]",
      "367:         \"//ds:Transforms/ds:Transform\",",
      "",
      "[Added Lines]",
      "380:         \"./ds:Transforms/ds:Transform\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e2da4c6dae7dc01a4d9cd221395140a67e2b3eb1",
      "candidate_info": {
        "commit_hash": "e2da4c6dae7dc01a4d9cd221395140a67e2b3eb1",
        "repo": "SAML-Toolkits/ruby-saml",
        "commit_url": "https://github.com/SAML-Toolkits/ruby-saml/commit/e2da4c6dae7dc01a4d9cd221395140a67e2b3eb1",
        "files": [
          "lib/onelogin/ruby-saml/saml_message.rb"
        ],
        "message": "Fix vulnerability: CVE-2025-25293: Potential DOS abusing of compressed messages.",
        "before_after_code_files": [
          "lib/onelogin/ruby-saml/saml_message.rb||lib/onelogin/ruby-saml/saml_message.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/SAML-Toolkits/ruby-saml/pull/749"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/onelogin/ruby-saml/saml_message.rb||lib/onelogin/ruby-saml/saml_message.rb": [
          "File: lib/onelogin/ruby-saml/saml_message.rb -> lib/onelogin/ruby-saml/saml_message.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:         decoded = decode(saml)",
          "99:         begin",
          "101:         rescue",
          "103:         end",
          "104:       end",
          "106:       # Deflate, base64 encode and url-encode a SAML Message (To be used in the HTTP-redirect binding)",
          "",
          "[Removed Lines]",
          "100:           inflate(decoded)",
          "102:           decoded",
          "",
          "[Added Lines]",
          "100:             message = inflate(decoded)",
          "102:             message = decoded",
          "105:         if message.bytesize > MAX_BYTE_SIZE",
          "106:           raise ValidationError.new(\"Encoded SAML Message exceeds \" + MAX_BYTE_SIZE.to_s + \" bytes, so was rejected\")",
          "107:         end",
          "109:         message",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8858c7a9ebb3aa0678f79b912625ee24f116c07d",
      "candidate_info": {
        "commit_hash": "8858c7a9ebb3aa0678f79b912625ee24f116c07d",
        "repo": "SAML-Toolkits/ruby-saml",
        "commit_url": "https://github.com/SAML-Toolkits/ruby-saml/commit/8858c7a9ebb3aa0678f79b912625ee24f116c07d",
        "files": [
          "ruby-saml.gemspec"
        ],
        "message": "Set mime-types version due failing CI tests",
        "before_after_code_files": [
          "ruby-saml.gemspec||ruby-saml.gemspec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/SAML-Toolkits/ruby-saml/pull/749"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ruby-saml.gemspec||ruby-saml.gemspec": [
          "File: ruby-saml.gemspec -> ruby-saml.gemspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   if RUBY_VERSION < '2.4.1'",
          "52:     s.add_development_dependency('simplecov-lcov', '<0.8.0')",
          "53:     s.add_development_dependency('term-ansicolor', '1.2.2')",
          "54:   else",
          "55:     s.add_development_dependency('simplecov-lcov', '>0.7.0')",
          "56:   end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     s.add_development_dependency('mime-types', '<3.6.0')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6755e98298934be0af5f12a2b89e2dfc2d936a50",
      "candidate_info": {
        "commit_hash": "6755e98298934be0af5f12a2b89e2dfc2d936a50",
        "repo": "SAML-Toolkits/ruby-saml",
        "commit_url": "https://github.com/SAML-Toolkits/ruby-saml/commit/6755e98298934be0af5f12a2b89e2dfc2d936a50",
        "files": [
          "ruby-saml.gemspec"
        ],
        "message": "Fixing some CI tests due coverall dependency error",
        "before_after_code_files": [
          "ruby-saml.gemspec||ruby-saml.gemspec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/SAML-Toolkits/ruby-saml/pull/749"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ruby-saml.gemspec||ruby-saml.gemspec": [
          "File: ruby-saml.gemspec -> ruby-saml.gemspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     s.add_runtime_dependency('rexml')",
          "48:   end",
          "50:   s.add_development_dependency('coveralls')",
          "51:   s.add_development_dependency('minitest', '~> 5.5')",
          "52:   s.add_development_dependency('mocha',    '~> 0.14')",
          "53:   s.add_development_dependency('rake',     '~> 10')",
          "54:   s.add_development_dependency('shoulda',  '~> 2.11')",
          "56:   s.add_development_dependency('systemu',  '~> 2')",
          "57:   s.add_development_dependency('timecop',  '<= 0.6.0')",
          "",
          "[Removed Lines]",
          "55:   s.add_development_dependency('simplecov')",
          "",
          "[Added Lines]",
          "50:   s.add_development_dependency('simplecov', '<0.22.0')",
          "51:   if RUBY_VERSION < '2.4.1'",
          "52:     s.add_development_dependency('simplecov-lcov', '<0.8.0')",
          "53:   else",
          "54:     s.add_development_dependency('simplecov-lcov', '>0.7.0')",
          "55:   end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3727d05315f5a1e31da8c1dd253ee0154f1c7c83",
      "candidate_info": {
        "commit_hash": "3727d05315f5a1e31da8c1dd253ee0154f1c7c83",
        "repo": "SAML-Toolkits/ruby-saml",
        "commit_url": "https://github.com/SAML-Toolkits/ruby-saml/commit/3727d05315f5a1e31da8c1dd253ee0154f1c7c83",
        "files": [
          "ruby-saml.gemspec"
        ],
        "message": "Set term-ansicolor version due failing CI tests",
        "before_after_code_files": [
          "ruby-saml.gemspec||ruby-saml.gemspec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/SAML-Toolkits/ruby-saml/pull/749"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ruby-saml.gemspec||ruby-saml.gemspec": [
          "File: ruby-saml.gemspec -> ruby-saml.gemspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   s.add_development_dependency('simplecov', '<0.22.0')",
          "51:   if RUBY_VERSION < '2.4.1'",
          "52:     s.add_development_dependency('simplecov-lcov', '<0.8.0')",
          "53:   else",
          "54:     s.add_development_dependency('simplecov-lcov', '>0.7.0')",
          "55:   end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     s.add_development_dependency('term-ansicolor', '1.2.2')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e76c5b36bac40aedbf1ba7ffaaf495be63328cd9",
      "candidate_info": {
        "commit_hash": "e76c5b36bac40aedbf1ba7ffaaf495be63328cd9",
        "repo": "SAML-Toolkits/ruby-saml",
        "commit_url": "https://github.com/SAML-Toolkits/ruby-saml/commit/e76c5b36bac40aedbf1ba7ffaaf495be63328cd9",
        "files": [
          "lib/onelogin/ruby-saml/logoutresponse.rb",
          "lib/onelogin/ruby-saml/response.rb",
          "lib/onelogin/ruby-saml/saml_message.rb",
          "lib/onelogin/ruby-saml/settings.rb",
          "lib/onelogin/ruby-saml/slo_logoutrequest.rb",
          "lib/xml_security.rb"
        ],
        "message": "Fix vulnerabilities: CVE-2025-25291, CVE-2025-25292: SAML authentication bypass via Signature Wrapping attack allowed due parser differential",
        "before_after_code_files": [
          "lib/onelogin/ruby-saml/logoutresponse.rb||lib/onelogin/ruby-saml/logoutresponse.rb",
          "lib/onelogin/ruby-saml/response.rb||lib/onelogin/ruby-saml/response.rb",
          "lib/onelogin/ruby-saml/saml_message.rb||lib/onelogin/ruby-saml/saml_message.rb",
          "lib/onelogin/ruby-saml/settings.rb||lib/onelogin/ruby-saml/settings.rb",
          "lib/onelogin/ruby-saml/slo_logoutrequest.rb||lib/onelogin/ruby-saml/slo_logoutrequest.rb",
          "lib/xml_security.rb||lib/xml_security.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/SAML-Toolkits/ruby-saml/pull/749"
        ],
        "olp_code_files": {
          "patch": [
            "lib/xml_security.rb||lib/xml_security.rb"
          ],
          "candidate": [
            "lib/xml_security.rb||lib/xml_security.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/onelogin/ruby-saml/logoutresponse.rb||lib/onelogin/ruby-saml/logoutresponse.rb": [
          "File: lib/onelogin/ruby-saml/logoutresponse.rb -> lib/onelogin/ruby-saml/logoutresponse.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:       # @raise [ValidationError] if soft == false and validation fails",
          "151:       #",
          "152:       def validate_structure",
          "154:           return append_error(\"Invalid SAML Logout Response. Not match the saml-schema-protocol-2.0.xsd\")",
          "155:         end",
          "",
          "[Removed Lines]",
          "153:         unless valid_saml?(document, soft)",
          "",
          "[Added Lines]",
          "153:         check_malformed_doc = check_malformed_doc?(settings)",
          "154:         unless valid_saml?(document, soft, check_malformed_doc)",
          "",
          "---------------"
        ],
        "lib/onelogin/ruby-saml/response.rb||lib/onelogin/ruby-saml/response.rb": [
          "File: lib/onelogin/ruby-saml/response.rb -> lib/onelogin/ruby-saml/response.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:       #",
          "426:       def validate_structure",
          "427:         structure_error_msg = \"Invalid SAML Response. Not match the saml-schema-protocol-2.0.xsd\"",
          "429:           return append_error(structure_error_msg)",
          "430:         end",
          "432:         unless decrypted_document.nil?",
          "434:             return append_error(structure_error_msg)",
          "435:           end",
          "436:         end",
          "",
          "[Removed Lines]",
          "428:         unless valid_saml?(document, soft)",
          "433:           unless valid_saml?(decrypted_document, soft)",
          "",
          "[Added Lines]",
          "428:         check_malformed_doc = check_malformed_doc_enabled?",
          "429:         unless valid_saml?(document, soft, check_malformed_doc)",
          "434:           unless valid_saml?(decrypted_document, soft, check_malformed_doc)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "865:           fingerprint = settings.get_fingerprint",
          "866:           opts[:cert] = idp_cert",
          "868:           if fingerprint && doc.validate_document(fingerprint, @soft, opts)",
          "869:             if settings.security[:check_idp_cert_expiration]",
          "870:               if OneLogin::RubySaml::Utils.is_cert_expired(idp_cert)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "869:           check_malformed_doc = check_malformed_doc_enabled?",
          "870:           opts[:check_malformed_doc] = check_malformed_doc",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "879:           valid = false",
          "880:           expired = false",
          "881:           idp_certs[:signing].each do |idp_cert|",
          "883:             if valid",
          "884:               if settings.security[:check_idp_cert_expiration]",
          "885:                 if OneLogin::RubySaml::Utils.is_cert_expired(idp_cert)",
          "",
          "[Removed Lines]",
          "882:             valid = doc.validate_document_with_cert(idp_cert, true)",
          "",
          "[Added Lines]",
          "885:             valid = doc.validate_document_with_cert(idp_cert, true, check_malformed_doc)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1063:           Time.parse(node.attributes[attribute])",
          "1064:         end",
          "1065:       end",
          "1066:     end",
          "1067:   end",
          "1068: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1070:       def check_malformed_doc_enabled?",
          "1071:         check_malformed_doc?(settings)",
          "1072:       end",
          "",
          "---------------"
        ],
        "lib/onelogin/ruby-saml/saml_message.rb||lib/onelogin/ruby-saml/saml_message.rb": [
          "File: lib/onelogin/ruby-saml/saml_message.rb -> lib/onelogin/ruby-saml/saml_message.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:       # Validates the SAML Message against the specified schema.",
          "64:       # @param document [REXML::Document] The message that will be validated",
          "65:       # @param soft [Boolean] soft Enable or Disable the soft mode (In order to raise exceptions when the message is invalid or not)",
          "66:       # @return [Boolean] True if the XML is valid, otherwise False, if soft=True",
          "67:       # @raise [ValidationError] if soft == false and validation fails",
          "68:       #",
          "70:         begin",
          "74:         rescue Exception => error",
          "75:           return false if soft",
          "76:           raise ValidationError.new(\"XML load failed: #{error.message}\")",
          "",
          "[Removed Lines]",
          "69:       def valid_saml?(document, soft = true)",
          "71:           xml = Nokogiri::XML(document.to_s) do |config|",
          "72:             config.options = XMLSecurity::BaseDocument::NOKOGIRI_OPTIONS",
          "73:           end",
          "",
          "[Added Lines]",
          "66:       # @param check_malformed_doc [Boolean] check_malformed_doc Enable or Disable the check for malformed XML",
          "70:       def valid_saml?(document, soft = true, check_malformed_doc = true)",
          "72:           xml = XMLSecurity::BaseDocument.safe_load_xml(document, check_malformed_doc)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:       def deflate(inflated)",
          "164:         Zlib::Deflate.deflate(inflated, 9)[2..-5]",
          "165:       end",
          "166:     end",
          "167:   end",
          "168: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:       def check_malformed_doc?(settings)",
          "167:         default_value = OneLogin::RubySaml::Settings::DEFAULTS[:check_malformed_doc]",
          "169:         settings.nil? ? default_value : settings.check_malformed_doc",
          "170:       end",
          "",
          "---------------"
        ],
        "lib/onelogin/ruby-saml/settings.rb||lib/onelogin/ruby-saml/settings.rb": [
          "File: lib/onelogin/ruby-saml/settings.rb -> lib/onelogin/ruby-saml/settings.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:       attr_accessor :compress_request",
          "54:       attr_accessor :compress_response",
          "55:       attr_accessor :double_quote_xml_attribute_values",
          "56:       attr_accessor :passive",
          "57:       attr_accessor :protocol_binding",
          "58:       attr_accessor :attributes_index",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:       attr_accessor :check_malformed_doc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:         :compress_request                          => true,",
          "260:         :compress_response                         => true,",
          "261:         :soft                                      => true,",
          "262:         :double_quote_xml_attribute_values         => false,",
          "263:         :security                                  => {",
          "264:           :authn_requests_signed      => false,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:         :check_malformed_doc                       => true,",
          "",
          "---------------"
        ],
        "lib/onelogin/ruby-saml/slo_logoutrequest.rb||lib/onelogin/ruby-saml/slo_logoutrequest.rb": [
          "File: lib/onelogin/ruby-saml/slo_logoutrequest.rb -> lib/onelogin/ruby-saml/slo_logoutrequest.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:       # @raise [ValidationError] if soft == false and validation fails",
          "200:       #",
          "201:       def validate_structure",
          "203:           return append_error(\"Invalid SAML Logout Request. Not match the saml-schema-protocol-2.0.xsd\")",
          "204:         end",
          "",
          "[Removed Lines]",
          "202:         unless valid_saml?(document, soft)",
          "",
          "[Added Lines]",
          "202:         check_malformed_doc = check_malformed_doc?(settings)",
          "203:         unless valid_saml?(document, soft, check_malformed_doc)",
          "",
          "---------------"
        ],
        "lib/xml_security.rb||lib/xml_security.rb": [
          "File: lib/xml_security.rb -> lib/xml_security.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     NOKOGIRI_OPTIONS = Nokogiri::XML::ParseOptions::STRICT |",
          "43:                        Nokogiri::XML::ParseOptions::NONET",
          "45:     def canon_algorithm(element)",
          "46:       algorithm = element",
          "47:       if algorithm.is_a?(REXML::Element)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     # Safety load the SAML Message XML",
          "46:     # @param document [REXML::Document] The message to be loaded",
          "47:     # @param check_malformed_doc [Boolean] check_malformed_doc Enable or Disable the check for malformed XML",
          "48:     # @return [Nokogiri::XML] The nokogiri document",
          "49:     # @raise [ValidationError] If there was a problem loading the SAML Message XML",
          "50:     def self.safe_load_xml(document, check_malformed_doc = true)",
          "51:       doc_str = document.to_s",
          "52:       if doc_str.include?(\"<!DOCTYPE\")",
          "53:        raise StandardError.new(\"Dangerous XML detected. No Doctype nodes allowed\")",
          "54:       end",
          "56:       begin",
          "57:         xml = Nokogiri::XML(doc_str) do |config|",
          "58:           config.options = self::NOKOGIRI_OPTIONS",
          "59:         end",
          "60:       rescue StandardError => error",
          "61:         raise StandardError.new(error.message)",
          "62:       end",
          "64:       if xml.internal_subset",
          "65:         raise StandardError.new(\"Dangerous XML detected. No Doctype nodes allowed\")",
          "66:       end",
          "68:       unless xml.errors.empty?",
          "69:         raise StandardError.new(\"There were XML errors when parsing: #{xml.errors}\") if check_malformed_doc",
          "70:       end",
          "72:       xml",
          "73:     end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:       #<KeyInfo />",
          "115:       #<Object />",
          "116:     #</Signature>",
          "122:       signature_element = REXML::Element.new(\"ds:Signature\").add_namespace('ds', DSIG)",
          "123:       signed_info_element = signature_element.add_element(\"ds:SignedInfo\")",
          "",
          "[Removed Lines]",
          "117:     def sign_document(private_key, certificate, signature_method = RSA_SHA1, digest_method = SHA1)",
          "118:       noko = Nokogiri::XML(self.to_s) do |config|",
          "119:         config.options = XMLSecurity::BaseDocument::NOKOGIRI_OPTIONS",
          "120:       end",
          "",
          "[Added Lines]",
          "147:     def sign_document(private_key, certificate, signature_method = RSA_SHA1, digest_method = SHA1, check_malformed_doc = true)",
          "148:       noko = XMLSecurity::BaseDocument.safe_load_xml(self.to_s, check_malformed_doc)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:       reference_element.add_element(\"ds:DigestValue\").text = compute_digest(canon_doc, algorithm(digest_method_element))",
          "141:       # add SignatureValue",
          "146:       noko_signed_info_element = noko_sig_element.at_xpath('//ds:Signature/ds:SignedInfo', 'ds' => DSIG)",
          "147:       canon_string = noko_signed_info_element.canonicalize(canon_algorithm(C14N))",
          "",
          "[Removed Lines]",
          "142:       noko_sig_element = Nokogiri::XML(signature_element.to_s) do |config|",
          "143:         config.options = XMLSecurity::BaseDocument::NOKOGIRI_OPTIONS",
          "144:       end",
          "",
          "[Added Lines]",
          "170:       noko_sig_element = XMLSecurity::BaseDocument.safe_load_xml(signature_element.to_s, check_malformed_doc)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "237:           end",
          "238:         end",
          "239:       end",
          "241:     end",
          "244:       # get cert from response",
          "245:       cert_element = REXML::XPath.first(",
          "246:         self,",
          "",
          "[Removed Lines]",
          "240:       validate_signature(base64_cert, soft)",
          "243:     def validate_document_with_cert(idp_cert, soft = true)",
          "",
          "[Added Lines]",
          "266:       check_malformed_doc = true",
          "267:       check_malformed_doc = options[:check_malformed_doc] if options.key?(:check_malformed_doc)",
          "268:       validate_signature(base64_cert, soft, check_malformed_doc)",
          "271:     def validate_document_with_cert(idp_cert, soft = true, check_malformed_doc = true)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "264:       else",
          "265:         base64_cert = Base64.encode64(idp_cert.to_pem)",
          "266:       end",
          "268:     end",
          "274:       end",
          "276:       # create a rexml document",
          "",
          "[Removed Lines]",
          "267:       validate_signature(base64_cert, true)",
          "270:     def validate_signature(base64_cert, soft = true)",
          "272:       document = Nokogiri::XML(self.to_s) do |config|",
          "273:         config.options = XMLSecurity::BaseDocument::NOKOGIRI_OPTIONS",
          "",
          "[Added Lines]",
          "295:       validate_signature(base64_cert, true, check_malformed_doc)",
          "298:     def validate_signature(base64_cert, soft = true, check_malformed_doc = true)",
          "300:       begin",
          "301:         document = XMLSecurity::BaseDocument.safe_load_xml(self, check_malformed_doc)",
          "302:       rescue StandardError => error",
          "303:         @errors << error.message",
          "304:         return false if soft",
          "305:         raise ValidationError.new(\"XML load failed: #{error.message}\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}