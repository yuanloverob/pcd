{
  "cve_id": "CVE-2020-4053",
  "cve_desc": "In Helm greater than or equal to 3.0.0 and less than 3.2.4, a path traversal attack is possible when installing Helm plugins from a tar archive over HTTP. It is possible for a malicious plugin author to inject a relative path into a plugin archive, and copy a file outside of the intended directory. This has been fixed in 3.2.4.",
  "repo": "helm/helm",
  "patch_hash": "0ad800ef43d3b826f31a5ad8dfbb4fe05d143688",
  "patch_info": {
    "commit_hash": "0ad800ef43d3b826f31a5ad8dfbb4fe05d143688",
    "repo": "helm/helm",
    "commit_url": "https://github.com/helm/helm/commit/0ad800ef43d3b826f31a5ad8dfbb4fe05d143688",
    "files": [
      "pkg/plugin/installer/http_installer.go",
      "pkg/plugin/installer/http_installer_test.go"
    ],
    "message": "Improve the extractor and add tests (#8317)\n\nSigned-off-by: Matt Butcher <matt.butcher@microsoft.com>\n(cherry picked from commit b6bbe4f08bbb98eadd6c9cd726b08a5c639908b3)",
    "before_after_code_files": [
      "pkg/plugin/installer/http_installer.go||pkg/plugin/installer/http_installer.go",
      "pkg/plugin/installer/http_installer_test.go||pkg/plugin/installer/http_installer_test.go"
    ]
  },
  "patch_diff": {
    "pkg/plugin/installer/http_installer.go||pkg/plugin/installer/http_installer.go": [
      "File: pkg/plugin/installer/http_installer.go -> pkg/plugin/installer/http_installer.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "21:  \"compress/gzip\"",
      "22:  \"io\"",
      "23:  \"os\"",
      "24:  \"path/filepath\"",
      "25:  \"regexp\"",
      "26:  \"strings\"",
      "28:  \"github.com/pkg/errors\"",
      "30:  \"helm.sh/helm/v3/internal/third_party/dep/fs\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:  \"path\"",
      "29:  securejoin \"github.com/cyphar/filepath-securejoin\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118:  }",
      "120:  if err := i.extractor.Extract(pluginData, i.CacheDir); err != nil {",
      "122:  }",
      "124:  if !isPlugin(i.CacheDir) {",
      "",
      "[Removed Lines]",
      "121:   return err",
      "",
      "[Added Lines]",
      "123:   return errors.Wrap(err, \"extracting files from archive\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "148:  return helmpath.DataPath(\"plugins\", i.PluginName)",
      "149: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "171: func cleanJoin(root, dest string) (string, error) {",
      "175:  if strings.Contains(dest, \":\") {",
      "176:   return \"\", errors.New(\"path contains ':', which is illegal\")",
      "177:  }",
      "181:  dest = strings.ReplaceAll(dest, \"\\\\\", \"/\")",
      "185:  for _, part := range strings.Split(dest, \"/\") {",
      "186:   if part == \"..\" {",
      "187:    return \"\", errors.New(\"path contains '..', which is illegal\")",
      "188:   }",
      "189:  }",
      "192:  if path.IsAbs(dest) {",
      "193:   return \"\", errors.New(\"path is absolute, which is illegal\")",
      "194:  }",
      "197:  newpath, err := securejoin.SecureJoin(root, dest)",
      "198:  if err != nil {",
      "199:   return \"\", err",
      "200:  }",
      "202:  return filepath.ToSlash(newpath), nil",
      "203: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "171:    return err",
      "172:   }",
      "176:   switch header.Typeflag {",
      "177:   case tar.TypeDir:",
      "",
      "[Removed Lines]",
      "174:   path := filepath.Join(targetDir, header.Name)",
      "",
      "[Added Lines]",
      "228:   path, err := cleanJoin(targetDir, header.Name)",
      "229:   if err != nil {",
      "230:    return err",
      "231:   }",
      "",
      "---------------"
    ],
    "pkg/plugin/installer/http_installer_test.go||pkg/plugin/installer/http_installer_test.go": [
      "File: pkg/plugin/installer/http_installer_test.go -> pkg/plugin/installer/http_installer_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "277:  }",
      "279: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "281: func TestCleanJoin(t *testing.T) {",
      "282:  for i, fixture := range []struct {",
      "283:   path        string",
      "284:   expect      string",
      "285:   expectError bool",
      "286:  }{",
      "287:   {\"foo/bar.txt\", \"/tmp/foo/bar.txt\", false},",
      "288:   {\"/foo/bar.txt\", \"\", true},",
      "289:   {\"./foo/bar.txt\", \"/tmp/foo/bar.txt\", false},",
      "290:   {\"./././././foo/bar.txt\", \"/tmp/foo/bar.txt\", false},",
      "291:   {\"../../../../foo/bar.txt\", \"\", true},",
      "292:   {\"foo/../../../../bar.txt\", \"\", true},",
      "293:   {\"c:/foo/bar.txt\", \"/tmp/c:/foo/bar.txt\", true},",
      "294:   {\"foo\\\\bar.txt\", \"/tmp/foo/bar.txt\", false},",
      "295:   {\"c:\\\\foo\\\\bar.txt\", \"\", true},",
      "296:  } {",
      "297:   out, err := cleanJoin(\"/tmp\", fixture.path)",
      "298:   if err != nil {",
      "299:    if !fixture.expectError {",
      "300:     t.Errorf(\"Test %d: Path was not cleaned: %s\", i, err)",
      "301:    }",
      "302:    continue",
      "303:   }",
      "304:   if fixture.expect != out {",
      "305:    t.Errorf(\"Test %d: Expected %q but got %q\", i, fixture.expect, out)",
      "306:   }",
      "307:  }",
      "309: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6bbe4f08bbb98eadd6c9cd726b08a5c639908b3",
      "candidate_info": {
        "commit_hash": "b6bbe4f08bbb98eadd6c9cd726b08a5c639908b3",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/b6bbe4f08bbb98eadd6c9cd726b08a5c639908b3",
        "files": [
          "pkg/plugin/installer/http_installer.go",
          "pkg/plugin/installer/http_installer_test.go"
        ],
        "message": "Improve the extractor and add tests (#8317)\n\nSigned-off-by: Matt Butcher <matt.butcher@microsoft.com>",
        "before_after_code_files": [
          "pkg/plugin/installer/http_installer.go||pkg/plugin/installer/http_installer.go",
          "pkg/plugin/installer/http_installer_test.go||pkg/plugin/installer/http_installer_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pkg/plugin/installer/http_installer.go||pkg/plugin/installer/http_installer.go",
            "pkg/plugin/installer/http_installer_test.go||pkg/plugin/installer/http_installer_test.go"
          ],
          "candidate": [
            "pkg/plugin/installer/http_installer.go||pkg/plugin/installer/http_installer.go",
            "pkg/plugin/installer/http_installer_test.go||pkg/plugin/installer/http_installer_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/plugin/installer/http_installer.go||pkg/plugin/installer/http_installer.go": [
          "File: pkg/plugin/installer/http_installer.go -> pkg/plugin/installer/http_installer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  \"compress/gzip\"",
          "22:  \"io\"",
          "23:  \"os\"",
          "24:  \"path/filepath\"",
          "25:  \"regexp\"",
          "26:  \"strings\"",
          "28:  \"github.com/pkg/errors\"",
          "30:  \"helm.sh/helm/v3/internal/third_party/dep/fs\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:  \"path\"",
          "29:  securejoin \"github.com/cyphar/filepath-securejoin\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:  }",
          "120:  if err := i.extractor.Extract(pluginData, i.CacheDir); err != nil {",
          "122:  }",
          "124:  if !isPlugin(i.CacheDir) {",
          "",
          "[Removed Lines]",
          "121:   return err",
          "",
          "[Added Lines]",
          "123:   return errors.Wrap(err, \"extracting files from archive\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148:  return helmpath.DataPath(\"plugins\", i.PluginName)",
          "149: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: func cleanJoin(root, dest string) (string, error) {",
          "175:  if strings.Contains(dest, \":\") {",
          "176:   return \"\", errors.New(\"path contains ':', which is illegal\")",
          "177:  }",
          "181:  dest = strings.ReplaceAll(dest, \"\\\\\", \"/\")",
          "185:  for _, part := range strings.Split(dest, \"/\") {",
          "186:   if part == \"..\" {",
          "187:    return \"\", errors.New(\"path contains '..', which is illegal\")",
          "188:   }",
          "189:  }",
          "192:  if path.IsAbs(dest) {",
          "193:   return \"\", errors.New(\"path is absolute, which is illegal\")",
          "194:  }",
          "197:  newpath, err := securejoin.SecureJoin(root, dest)",
          "198:  if err != nil {",
          "199:   return \"\", err",
          "200:  }",
          "202:  return filepath.ToSlash(newpath), nil",
          "203: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "171:    return err",
          "172:   }",
          "176:   switch header.Typeflag {",
          "177:   case tar.TypeDir:",
          "",
          "[Removed Lines]",
          "174:   path := filepath.Join(targetDir, header.Name)",
          "",
          "[Added Lines]",
          "228:   path, err := cleanJoin(targetDir, header.Name)",
          "229:   if err != nil {",
          "230:    return err",
          "231:   }",
          "",
          "---------------"
        ],
        "pkg/plugin/installer/http_installer_test.go||pkg/plugin/installer/http_installer_test.go": [
          "File: pkg/plugin/installer/http_installer_test.go -> pkg/plugin/installer/http_installer_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:  }",
          "279: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281: func TestCleanJoin(t *testing.T) {",
          "282:  for i, fixture := range []struct {",
          "283:   path        string",
          "284:   expect      string",
          "285:   expectError bool",
          "286:  }{",
          "287:   {\"foo/bar.txt\", \"/tmp/foo/bar.txt\", false},",
          "288:   {\"/foo/bar.txt\", \"\", true},",
          "289:   {\"./foo/bar.txt\", \"/tmp/foo/bar.txt\", false},",
          "290:   {\"./././././foo/bar.txt\", \"/tmp/foo/bar.txt\", false},",
          "291:   {\"../../../../foo/bar.txt\", \"\", true},",
          "292:   {\"foo/../../../../bar.txt\", \"\", true},",
          "293:   {\"c:/foo/bar.txt\", \"/tmp/c:/foo/bar.txt\", true},",
          "294:   {\"foo\\\\bar.txt\", \"/tmp/foo/bar.txt\", false},",
          "295:   {\"c:\\\\foo\\\\bar.txt\", \"\", true},",
          "296:  } {",
          "297:   out, err := cleanJoin(\"/tmp\", fixture.path)",
          "298:   if err != nil {",
          "299:    if !fixture.expectError {",
          "300:     t.Errorf(\"Test %d: Path was not cleaned: %s\", i, err)",
          "301:    }",
          "302:    continue",
          "303:   }",
          "304:   if fixture.expect != out {",
          "305:    t.Errorf(\"Test %d: Expected %q but got %q\", i, fixture.expect, out)",
          "306:   }",
          "307:  }",
          "309: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}