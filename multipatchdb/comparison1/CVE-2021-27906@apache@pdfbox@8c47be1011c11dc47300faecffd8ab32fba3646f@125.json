{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "76ebf561a5ae588bf27b92d15e09f0946be8d23d",
      "candidate_info": {
        "commit_hash": "76ebf561a5ae588bf27b92d15e09f0946be8d23d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/76ebf561a5ae588bf27b92d15e09f0946be8d23d",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java"
        ],
        "message": "PDFBOX-4985: adjust Javadoc to match new acroFormFixup parameter\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1883177 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java"
        ]
      }
    },
    {
      "candidate_hash": "3cbb845e515918b3928555082191cb5385019639",
      "candidate_info": {
        "commit_hash": "3cbb845e515918b3928555082191cb5385019639",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3cbb845e515918b3928555082191cb5385019639",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java"
        ],
        "message": "PDFBOX-4892: avoid IllegalArgumentException in Arrays.copyOfRange()\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884403 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:                     byte[] bytes = fontFile.toByteArray();",
          "237:                     length1 = repairLength1(bytes, length1);",
          "238:                     length2 = repairLength2(bytes, length1, length2);",
          "240:                     if (bytes.length > 0 && (bytes[0] & 0xff) == PFB_START_MARKER)",
          "241:                     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:                     if (bytes.length == 0)",
          "238:                     {",
          "239:                         throw new IOException(\"Font data unavailable\");",
          "240:                     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:                     else",
          "246:                     {",
          "248:                         byte[] segment1 = Arrays.copyOfRange(bytes, 0, length1);",
          "249:                         byte[] segment2 = Arrays.copyOfRange(bytes, length1, length1 + length2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:                         if (length1 < 0 || length1 > length1 + length2)",
          "253:                         {",
          "254:                             throw new IOException(\"Invalid length data, actual length: \" +",
          "255:                                     bytes.length + \", /Length1: \" + length1 + \", /Length2: \" + length2);",
          "256:                         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d39fc49fb5c616454978937f224df7a5ba26574",
      "candidate_info": {
        "commit_hash": "5d39fc49fb5c616454978937f224df7a5ba26574",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5d39fc49fb5c616454978937f224df7a5ba26574",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java"
        ],
        "message": "PDFBOX-5192: partial revert because IOException isn't caught in 2.0, but show log message\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890332 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java||fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java||fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java -> fontbox/src/main/java/org/apache/fontbox/ttf/GlyfSimpleDescript.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:                 {",
          "221:                     if (index + i >= flags.length)",
          "222:                     {",
          "225:                     }",
          "226:                     flags[index + i] = flags[index];",
          "227:                 }",
          "",
          "[Removed Lines]",
          "223:                         throw new IOException(",
          "224:                                 \"repeat count (\" + repeats + \") higher than remaining space\");",
          "",
          "[Added Lines]",
          "223:                         LOG.error(\"repeat count (\" + repeats + \") higher than remaining space\");",
          "224:                         return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d26106c6cbe022ec54b8dbed61a68ca9de99f3f",
      "candidate_info": {
        "commit_hash": "7d26106c6cbe022ec54b8dbed61a68ca9de99f3f",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/7d26106c6cbe022ec54b8dbed61a68ca9de99f3f",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java"
        ],
        "message": "PDFBOX-5194: use AFM only\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890008 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java -> examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:         }",
          "156:         else",
          "157:         {",
          "165:             {",
          "172:                 {",
          "180:                 }",
          "181:             }",
          "182:             if (bounds.isEmpty())",
          "",
          "[Removed Lines]",
          "161:             String name = PDType1Font.ZAPF_DINGBATS.codeToName(normalCaption.codePointAt(0));",
          "162:             String unicode = PDType1Font.ZAPF_DINGBATS.getGlyphList().toUnicode(name);",
          "163:             Rectangle2D bounds = PDType1Font.ZAPF_DINGBATS.getPath(name).getBounds2D();",
          "164:             if (bounds.isEmpty())",
          "168:                 AFMParser parser = new AFMParser(PDType1Font.class.getResourceAsStream(",
          "169:                         \"/org/apache/pdfbox/resources/afm/ZapfDingbats.afm\"));",
          "170:                 FontMetrics metric = parser.parse();",
          "171:                 for (CharMetric cm : metric.getCharMetrics())",
          "173:                     if (normalCaption.codePointAt(0) == cm.getCharacterCode())",
          "174:                     {",
          "175:                         BoundingBox bb = cm.getBoundingBox();",
          "176:                         bounds = new Rectangle2D.Float(bb.getLowerLeftX(), bb.getLowerLeftY(),",
          "177:                                                        bb.getWidth(), bb.getHeight());",
          "178:                         unicode = PDType1Font.ZAPF_DINGBATS.getGlyphList().toUnicode(cm.getName());",
          "179:                     }",
          "",
          "[Added Lines]",
          "158:             Rectangle2D bounds = new Rectangle2D.Float();",
          "159:             String unicode = null;",
          "162:             AFMParser parser = new AFMParser(PDType1Font.class.getResourceAsStream(",
          "163:                     \"/org/apache/pdfbox/resources/afm/ZapfDingbats.afm\"));",
          "164:             FontMetrics metric = parser.parse();",
          "165:             for (CharMetric cm : metric.getCharMetrics())",
          "169:                 if (normalCaption.codePointAt(0) == cm.getCharacterCode())",
          "171:                     BoundingBox bb = cm.getBoundingBox();",
          "172:                     bounds = new Rectangle2D.Float(bb.getLowerLeftX(), bb.getLowerLeftY(),",
          "173:                                                    bb.getWidth(), bb.getHeight());",
          "174:                     unicode = PDType1Font.ZAPF_DINGBATS.getGlyphList().toUnicode(cm.getName());",
          "175:                     break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4e14cdf4188e6a4784295243d570c9de90112b5",
      "candidate_info": {
        "commit_hash": "a4e14cdf4188e6a4784295243d570c9de90112b5",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a4e14cdf4188e6a4784295243d570c9de90112b5",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDResources.java"
        ],
        "message": "PDFBOX-4892: don't cache null keys, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889828 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDResources.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDResources.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDResources.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDResources.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDResources.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDResources.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:         }",
          "208:         {",
          "209:             cache.put(indirect, colorSpace);",
          "210:         }",
          "",
          "[Removed Lines]",
          "207:         if (cache != null && !(colorSpace instanceof PDPattern))",
          "",
          "[Added Lines]",
          "207:         if (cache != null && indirect != null && !(colorSpace instanceof PDPattern))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250:             extGState = new PDExtendedGraphicsState((COSDictionary) base);",
          "251:         }",
          "254:         {",
          "255:             cache.put(indirect, extGState);",
          "256:         }",
          "",
          "[Removed Lines]",
          "253:         if (cache != null)",
          "",
          "[Added Lines]",
          "253:         if (cache != null && indirect != null)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "286:             shading = PDShading.create((COSDictionary) base);",
          "287:         }",
          "290:         {",
          "291:             cache.put(indirect, shading);",
          "292:         }",
          "",
          "[Removed Lines]",
          "289:         if (cache != null)",
          "",
          "[Added Lines]",
          "289:         if (cache != null && indirect != null)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "322:             pattern = PDAbstractPattern.create((COSDictionary) base, getResourceCache());",
          "323:         }",
          "326:         {",
          "327:             cache.put(indirect, pattern);",
          "328:         }",
          "",
          "[Removed Lines]",
          "325:         if (cache != null)",
          "",
          "[Added Lines]",
          "325:         if (cache != null && indirect != null)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "356:             propertyList = PDPropertyList.create((COSDictionary) base);",
          "357:         }",
          "360:         {",
          "361:             cache.put(indirect, propertyList);",
          "362:         }",
          "",
          "[Removed Lines]",
          "359:         if (cache != null)",
          "",
          "[Added Lines]",
          "359:         if (cache != null && indirect != null)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "425:         {",
          "426:             xobject = PDXObject.createXObject(value, this);",
          "427:         }",
          "429:         {",
          "430:             cache.put(indirect, xobject);",
          "431:         }",
          "",
          "[Removed Lines]",
          "428:         if (cache != null && isAllowedCache(xobject))",
          "",
          "[Added Lines]",
          "428:         if (cache != null && indirect != null && isAllowedCache(xobject))",
          "",
          "---------------"
        ]
      }
    }
  ]
}