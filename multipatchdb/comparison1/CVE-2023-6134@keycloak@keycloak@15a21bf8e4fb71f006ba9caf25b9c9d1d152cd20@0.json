{
  "cve_id": "CVE-2023-6134",
  "cve_desc": "A flaw was found in Keycloak that prevents certain schemes in redirects, but permits them if a wildcard is appended to the token. This issue could allow an attacker to submit a specially crafted request leading to cross-site scripting (XSS) or further attacks. This flaw is the result of an incomplete fix for CVE-2020-10748.",
  "repo": "keycloak/keycloak",
  "patch_hash": "15a21bf8e4fb71f006ba9caf25b9c9d1d152cd20",
  "patch_info": {
    "commit_hash": "15a21bf8e4fb71f006ba9caf25b9c9d1d152cd20",
    "repo": "keycloak/keycloak",
    "commit_url": "https://github.com/keycloak/keycloak/commit/15a21bf8e4fb71f006ba9caf25b9c9d1d152cd20",
    "files": [
      "docs/documentation/upgrading/topics/keycloak/changes-22_0_7.adoc",
      "docs/documentation/upgrading/topics/keycloak/changes.adoc",
      "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
      "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
      "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
    ],
    "message": "CVE-2023-6291 keycloak: redirect_uri validation logic that allows for a bypass of otherwise explicitly allowed hosts (#57)\n\n* Remove lowercase for the hostname as recommended/advised by OAuth spec\nCloses https://github.com/keycloak/keycloak/issues/25001\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>\n\n* Strip off user-info from redirect URI when validating using wildcard\nCloses https://issues.redhat.com/browse/RHBK-679\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>\n\n---------\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
    "before_after_code_files": [
      "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
      "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
      "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
    ]
  },
  "patch_diff": {
    "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java": [
      "File: services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:             if (validRedirect.startsWith(\"/\")) {",
      "73:                 validRedirect = relativeToAbsoluteURI(session, rootUrl, validRedirect);",
      "74:                 logger.debugv(\"replacing relative valid redirect with: {0}\", validRedirect);",
      "78:             }",
      "79:         }",
      "80:         return resolveValidRedirects;",
      "81:     }",
      "",
      "[Removed Lines]",
      "75:                 resolveValidRedirects.add(validRedirect);",
      "76:             } else {",
      "77:                 resolveValidRedirects.add(validRedirect);",
      "",
      "[Added Lines]",
      "76:             resolveValidRedirects.add(validRedirect);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "148:                 valid = matchesRedirects(resolveValidRedirects, redirectUri, false);",
      "149:             }",
      "152:                 redirectUri = relativeToAbsoluteURI(session, rootUrl, redirectUri);",
      "153:             }",
      "",
      "[Removed Lines]",
      "151:             if (valid != null && redirectUri.startsWith(\"/\")) {",
      "",
      "[Added Lines]",
      "149:             if (valid != null && !originalRedirect.isAbsolute()) {",
      "151:                 if (!redirectUri.startsWith(\"/\")) {",
      "152:                     redirectUri = \"/\" + redirectUri;",
      "153:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "174:     private static URI toUri(String redirectUri) {",
      "175:         URI uri = null;",
      "176:         if (redirectUri != null) {",
      "178:                 uri = URI.create(redirectUri);",
      "179:             } catch (IllegalArgumentException cause) {",
      "180:                 logger.debug(\"Invalid redirect uri\", cause);",
      "",
      "[Removed Lines]",
      "177:         try {",
      "",
      "[Added Lines]",
      "179:             try {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "189:         String redirectUri = null;",
      "190:         if (uri != null) {",
      "191:             redirectUri = uri.normalize().toString();",
      "193:         }",
      "194:         return redirectUri;",
      "195:     }",
      "",
      "[Removed Lines]",
      "192:             redirectUri = lowerCaseHostname(redirectUri);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "204:             KeycloakUriBuilder uriBuilder = KeycloakUriBuilder.fromUri(redirectUri, false).preserveDefaultPort();",
      "205:             String origQuery = uriBuilder.getQuery();",
      "206:             String origFragment = uriBuilder.getFragment();",
      "207:             String encodedRedirectUri = uriBuilder",
      "208:                     .replaceQuery(null)",
      "209:                     .fragment(null)",
      "210:                     .buildAsString();",
      "211:             String decodedRedirectUri = null;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "208:             String origUserInfo = uriBuilder.getUserInfo();",
      "212:                     .userInfo(null)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "217:                     return KeycloakUriBuilder.fromUri(decodedRedirectUri, false).preserveDefaultPort()",
      "218:                             .replaceQuery(origQuery)",
      "219:                             .fragment(origFragment)",
      "220:                             .buildAsString();",
      "221:                 } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:                             .userInfo(origUserInfo)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "230:         return null;",
      "231:     }",
      "242:     private static String relativeToAbsoluteURI(KeycloakSession session, String rootUrl, String relative) {",
      "243:         if (rootUrl != null) {",
      "244:             rootUrl = ResolveRelative.resolveRootUrl(session, rootUrl);",
      "",
      "[Removed Lines]",
      "233:     private static String lowerCaseHostname(String redirectUri) {",
      "234:         int n = redirectUri.indexOf('/', 7);",
      "235:         if (n == -1) {",
      "236:             return redirectUri.toLowerCase();",
      "237:         } else {",
      "238:             return redirectUri.substring(0, n).toLowerCase() + redirectUri.substring(n);",
      "239:         }",
      "240:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "253:         return sb.toString();",
      "254:     }",
      "257:     private static String matchesRedirects(Set<String> validRedirects, String redirect, boolean allowWildcards) {",
      "258:         logger.tracef(\"matchesRedirects: redirect URL to check: %s, allow wildcards: %b, Configured valid redirect URLs: %s\", redirect, allowWildcards, validRedirects);",
      "259:         for (String validRedirect : validRedirects) {",
      "260:             if (validRedirect.endsWith(\"*\") && !validRedirect.contains(\"?\") && allowWildcards) {",
      "264:                 int length = validRedirect.length() - 1;",
      "265:                 validRedirect = validRedirect.substring(0, length);",
      "",
      "[Removed Lines]",
      "262:                 String r = redirect.contains(\"?\") ? redirect.substring(0, redirect.indexOf(\"?\")) : redirect;",
      "",
      "[Added Lines]",
      "253:     private static String stripOffRedirectForWildcard(String redirect) {",
      "254:         return KeycloakUriBuilder.fromUri(redirect, false)",
      "255:                 .preserveDefaultPort()",
      "256:                 .userInfo(null)",
      "257:                 .replaceQuery(null)",
      "258:                 .fragment(null)",
      "259:                 .buildAsString();",
      "260:     }",
      "268:                 String r = stripOffRedirectForWildcard(redirect);",
      "",
      "---------------"
    ],
    "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java": [
      "File: services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java -> services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "142:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/path<less/\", set, false));",
      "143:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/path/index.jsp?param=v1 v2\", set, false));",
      "144:     }",
      "145: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "146:     @Test",
      "149:     public void testverifyCaseIsSensitive() {",
      "150:         Set<String> set = Stream.of(",
      "151:                 \"https://keycloak.org/*\",",
      "152:                 \"http://KeyCloak.org/*\",",
      "153:                 \"no.host.Name.App:/Test\"",
      "154:         ).collect(Collectors.toSet());",
      "156:         Assert.assertEquals(\"https://keycloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/index.html\", set, false));",
      "157:         Assert.assertEquals(\"http://KeyCloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"http://KeyCloak.org/index.html\", set, false));",
      "158:         Assert.assertEquals(\"no.host.Name.App:/Test\", RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.App:/Test\", set, false));",
      "160:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://KeyCloak.org/index.html\", set, false));",
      "161:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"http://keycloak.org/index.html\", set, false));",
      "162:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"HTTPS://keycloak.org/index.html\", set, false));",
      "163:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.app:/Test\", set, false));",
      "164:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.App:/test\", set, false));",
      "165:     }",
      "167:     @Test",
      "168:     public void testRelativeRedirectUri() {",
      "169:         Set<String> set = Stream.of(",
      "170:                 \"*\"",
      "171:         ).collect(Collectors.toSet());",
      "173:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"/path\", set, false));",
      "174:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"path\", set, false));",
      "175:     }",
      "177:     @Test",
      "178:     public void testUserInfo() {",
      "179:         Set<String> set = Stream.of(",
      "180:                 \"https://keycloak.org/*\",",
      "181:                 \"https://test*\",",
      "182:                 \"https://something@keycloak.com/exact\"",
      "183:         ).collect(Collectors.toSet());",
      "185:         Assert.assertEquals(\"https://keycloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/index.html\", set, false));",
      "186:         Assert.assertEquals(\"https://test.com/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://test.com/index.html\", set, false));",
      "187:         Assert.assertEquals(\"https://something@keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, null, \"https://something@keycloak.org/path\", set, false));",
      "188:         Assert.assertEquals(\"https://some%20thing@test.com/path\", RedirectUtils.verifyRedirectUri(session, null, \"https://some%20thing@test.com/path\", set, false));",
      "189:         Assert.assertEquals(\"https://something@keycloak.com/exact\", RedirectUtils.verifyRedirectUri(session, null, \"https://something@keycloak.com/exact\", set, false));",
      "191:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://something@other.com/\", set, false));",
      "192:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org@other.com\", set, false));",
      "193:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org%2F@other.com\", set, false));",
      "194:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://test@other.com\", set, false));",
      "195:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://test.com@other.com\", set, false));",
      "196:     }",
      "",
      "---------------"
    ],
    "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java": [
      "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "382:         oauth.clientId(\"test-dash\");",
      "384:         checkRedirectUri(\"http://with-dash.example.local\", true);",
      "386:         checkRedirectUri(\"http://with-dash.example.local/foo\", true);",
      "388:         checkRedirectUri(\"http://with-dash.example.local/foo\", true);",
      "390:         checkRedirectUri(\"http://wiTh-dAsh.example.local/Foo\", false);",
      "391:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foO\", false);",
      "392:     }",
      "",
      "[Removed Lines]",
      "385:         checkRedirectUri(\"http://wiTh-dAsh.example.local\", true);",
      "387:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", true);",
      "389:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", true);",
      "",
      "[Added Lines]",
      "385:         checkRedirectUri(\"http://wiTh-dAsh.example.local\", false);",
      "387:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", false);",
      "389:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", false);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "395:     public void testDifferentCaseInScheme() throws IOException {",
      "396:         oauth.clientId(\"test-dash\");",
      "400:     }",
      "402:     @Test",
      "",
      "[Removed Lines]",
      "398:         checkRedirectUri(\"HTTP://with-dash.example.local\", true);",
      "399:         checkRedirectUri(\"Http://wiTh-dAsh.example.local\", true);",
      "",
      "[Added Lines]",
      "398:         checkRedirectUri(\"http://with-dash.example.local\", true);",
      "399:         checkRedirectUri(\"HTTP://with-dash.example.local\", false);",
      "400:         checkRedirectUri(\"Http://wiTh-dAsh.example.local\", false);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4525849e72054e2bfa443811888317be890ce2d1",
      "candidate_info": {
        "commit_hash": "4525849e72054e2bfa443811888317be890ce2d1",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/4525849e72054e2bfa443811888317be890ce2d1",
        "files": [
          "common/src/main/java/org/keycloak/common/util/HttpPostRedirect.java",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java"
        ],
        "message": "Escape action in the form_post.jwt and only decode path in RedirectUtils (#94)\n\nCloses #90\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
        "before_after_code_files": [
          "common/src/main/java/org/keycloak/common/util/HttpPostRedirect.java||common/src/main/java/org/keycloak/common/util/HttpPostRedirect.java",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java||services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
          ]
        }
      },
      "candidate_diff": {
        "common/src/main/java/org/keycloak/common/util/HttpPostRedirect.java||common/src/main/java/org/keycloak/common/util/HttpPostRedirect.java": [
          "File: common/src/main/java/org/keycloak/common/util/HttpPostRedirect.java -> common/src/main/java/org/keycloak/common/util/HttpPostRedirect.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:         builder.append(\"</HEAD>\")",
          "73:                 .append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\")",
          "76:         for (Map.Entry<String, String> param : params.entrySet()) {",
          "78:         }",
          "",
          "[Removed Lines]",
          "75:                 .append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\").append(actionUrl).append(\"\\\">\");",
          "77:             builder.append(\"<INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"\").append(param.getKey()).append(\"\\\"\").append(\" VALUE=\\\"\").append(param.getValue()).append(\"\\\"/>\");",
          "",
          "[Added Lines]",
          "75:                 .append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
          "76:                 .append(HtmlUtils.escapeAttribute(actionUrl))",
          "77:                 .append(\"\\\">\");",
          "79:             builder.append(\"<INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"\").append(param.getKey()).append(\"\\\"\").append(\" VALUE=\\\"\")",
          "80:                     .append(HtmlUtils.escapeAttribute(param.getValue())).append(\"\\\"/>\");",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java||services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:             builder.append(\"  </HEAD>\");",
          "264:             builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");",
          "268:             builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"response\\\" VALUE=\\\"\")",
          "269:                     .append(HtmlUtils.escapeAttribute(session.tokens().encodeAndEncrypt(responseJWT)))",
          "",
          "[Removed Lines]",
          "266:             builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + redirectUri.toString() + \"\\\">\");",
          "",
          "[Added Lines]",
          "266:             builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
          "267:                     .append(HtmlUtils.escapeAttribute(redirectUri.toString()))",
          "268:                     .append(\"\\\">\");",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:         try {",
          "205:             KeycloakUriBuilder uriBuilder = KeycloakUriBuilder.fromUri(redirectUri, false).preserveDefaultPort();",
          "216:             for (int i = 0; i < MAX_DECODING_COUNT; i++) {",
          "225:                 } else {",
          "228:                 }",
          "229:             }",
          "230:         } catch (IllegalArgumentException iae) {",
          "",
          "[Removed Lines]",
          "206:             String origQuery = uriBuilder.getQuery();",
          "207:             String origFragment = uriBuilder.getFragment();",
          "208:             String origUserInfo = uriBuilder.getUserInfo();",
          "209:             String encodedRedirectUri = uriBuilder",
          "210:                     .replaceQuery(null)",
          "211:                     .fragment(null)",
          "212:                     .userInfo(null)",
          "213:                     .buildAsString();",
          "214:             String decodedRedirectUri = null;",
          "217:                 decodedRedirectUri = Encode.decode(encodedRedirectUri);",
          "218:                 if (decodedRedirectUri.equals(encodedRedirectUri)) {",
          "220:                     return KeycloakUriBuilder.fromUri(decodedRedirectUri, false).preserveDefaultPort()",
          "221:                             .replaceQuery(origQuery)",
          "222:                             .fragment(origFragment)",
          "223:                             .userInfo(origUserInfo)",
          "224:                             .buildAsString();",
          "227:                     encodedRedirectUri = decodedRedirectUri;",
          "",
          "[Added Lines]",
          "206:             if (uriBuilder.getPath() == null) {",
          "207:                 return redirectUri;",
          "208:             }",
          "209:             String encodedPath = uriBuilder.getPath();",
          "210:             String decodedPath;",
          "213:                 decodedPath = Encode.decode(encodedPath);",
          "214:                 if (decodedPath.equals(encodedPath)) {",
          "216:                     return uriBuilder.replacePath(decodedPath, false).buildAsString();",
          "219:                     encodedPath = decodedPath;",
          "",
          "---------------"
        ],
        "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java": [
          "File: services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java -> services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://test@other.com\", set, false));",
          "195:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://test.com@other.com\", set, false));",
          "196:     }",
          "197: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:     @Test",
          "199:     public void testEncodedRedirectUri() {",
          "200:         Set<String> set = Stream.of(",
          "201:                 \"https://keycloak.org/test/*\"",
          "202:         ).collect(Collectors.toSet());",
          "204:         Assert.assertEquals(\"https://keycloak.org/test/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/index.html\", set, false));",
          "205:         Assert.assertEquals(\"https://keycloak.org/test?encodeTest=a%3Cb\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test?encodeTest=a%3Cb\", set, false));",
          "206:         Assert.assertEquals(\"https://keycloak.org/test?encodeTest=a%3Cb#encode2=a%3Cb\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test?encodeTest=a%3Cb#encode2=a%3Cb\", set, false));",
          "207:         Assert.assertEquals(\"https://keycloak.org/test/#encode2=a%3Cb\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/#encode2=a%3Cb\", set, false));",
          "209:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/../\", set, false));  // direct",
          "210:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%2E%2E/\", set, false));  // encoded",
          "211:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test%2F%2E%2E%2F\", set, false)); // encoded",
          "212:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%252E%252E/\", set, false)); // double-encoded",
          "213:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%252E%252E/?some_query_param=some_value\", set, false)); // double-encoded",
          "214:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%252E%252E/#encodeTest=a%3Cb\", set, false)); // double-encoded",
          "215:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%25252E%25252E/\", set, false)); // triple-encoded",
          "216:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%2525252525252E%2525252525252E/\", set, false)); // seventh-encoded",
          "218:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak%2Eorg/test/\", set, false));",
          "219:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org%2Ftest%2F%40sample.com\", set, false));",
          "220:     }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.keycloak.testsuite.oauth;",
          "21: import org.jboss.arquillian.graphene.page.Page;",
          "22: import org.junit.Assert;",
          "23: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "19: import org.hamcrest.MatcherAssert;",
          "20: import org.hamcrest.Matchers;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.keycloak.events.Errors;",
          "30: import org.keycloak.events.EventType;",
          "31: import org.keycloak.models.Constants;",
          "32: import org.keycloak.protocol.oidc.utils.OIDCResponseMode;",
          "33: import org.keycloak.representations.idm.RealmRepresentation;",
          "34: import org.keycloak.testsuite.AbstractKeycloakTest;",
          "35: import org.keycloak.testsuite.AssertEvents;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import org.keycloak.models.utils.KeycloakModelUtils;",
          "31: import org.keycloak.protocol.oidc.OIDCLoginProtocol;",
          "33: import org.keycloak.representations.AuthorizationResponseToken;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "257:                 .update()) {",
          "258:             oauth.responseMode(OIDCResponseMode.FORM_POST.value());",
          "259:             oauth.responseType(OAuth2Constants.CODE);",
          "261:             oauth.doLogin(\"test-user@localhost\", \"password\");",
          "263:             WaitUtils.waitForPageToLoad();",
          "267:             events.expect(EventType.LOGIN)",
          "268:                     .user(AssertEvents.isUUID())",
          "269:                     .session(AssertEvents.isUUID())",
          "270:                     .detail(Details.USERNAME, \"test-user@localhost\")",
          "271:                     .assertEvent();",
          "272:         }",
          "273:     }",
          "",
          "[Removed Lines]",
          "260:             oauth.redirectUri(\"/test?p=&gt;\"); // set HTML entity &gt;",
          "265:             MatcherAssert.assertThat(\"Redirect page was not encoded\", oauth.getDriver().getCurrentUrl(), Matchers.endsWith(\"/test?p=&gt;\"));",
          "",
          "[Added Lines]",
          "261:             final String redirectUri = oauth.getRedirectUri() + \"?p=&gt;\"; // set HTML entity &gt;",
          "262:             oauth.redirectUri(redirectUri);",
          "263:             oauth.stateParamHardcoded(KeycloakModelUtils.generateId());",
          "268:             Assert.assertEquals(\"Redirect page was not encoded\", redirectUri, oauth.getDriver().getCurrentUrl());",
          "269:             String state = driver.findElement(By.id(\"state\")).getText();",
          "270:             Assert.assertEquals(oauth.getState(), state);",
          "271:             Assert.assertNotNull(driver.findElement(By.id(\"code\")).getText());",
          "277:                     .detail(OIDCLoginProtocol.RESPONSE_MODE_PARAM, OIDCResponseMode.FORM_POST.name().toLowerCase())",
          "278:                     .detail(OAuth2Constants.REDIRECT_URI, redirectUri)",
          "279:                     .assertEvent();",
          "280:         }",
          "281:     }",
          "283:     @Test",
          "284:     public void authorizationRequestFormPostJwtResponseModeHTMLEntitiesRedirectUri() throws IOException {",
          "285:         try (var c = ClientAttributeUpdater.forClient(adminClient, \"test\", \"test-app\")",
          "286:                 .setRedirectUris(Collections.singletonList(\"*\"))",
          "287:                 .update()) {",
          "288:             oauth.responseMode(OIDCResponseMode.FORM_POST_JWT.value());",
          "289:             oauth.responseType(OAuth2Constants.CODE);",
          "290:             final String redirectUri = oauth.getRedirectUri() + \"?p=&gt;\"; // set HTML entity &gt;",
          "291:             oauth.redirectUri(redirectUri);",
          "292:             oauth.stateParamHardcoded(KeycloakModelUtils.generateId());",
          "293:             oauth.doLogin(\"test-user@localhost\", \"password\");",
          "295:             WaitUtils.waitForPageToLoad();",
          "297:             Assert.assertEquals(\"Redirect page was not encoded\", redirectUri, oauth.getDriver().getCurrentUrl());",
          "298:             String responseTokenEncoded = driver.findElement(By.id(\"response\")).getText();",
          "299:             AuthorizationResponseToken responseToken = oauth.verifyAuthorizationResponseToken(responseTokenEncoded);",
          "300:             assertEquals(\"test-app\", responseToken.getAudience()[0]);",
          "301:             Assert.assertNotNull(responseToken.getOtherClaims().get(\"code\"));",
          "302:             Assert.assertNull(responseToken.getOtherClaims().get(\"error\"));",
          "303:             Assert.assertEquals(oauth.getState(), responseToken.getOtherClaims().get(\"state\"));",
          "304:             Assert.assertNotNull(responseToken.getOtherClaims().get(\"code\"));",
          "306:             events.expect(EventType.LOGIN)",
          "307:                     .user(AssertEvents.isUUID())",
          "308:                     .session((String) responseToken.getOtherClaims().get(\"session_state\"))",
          "309:                     .detail(Details.USERNAME, \"test-user@localhost\")",
          "310:                     .detail(OIDCLoginProtocol.RESPONSE_MODE_PARAM, OIDCResponseMode.FORM_POST_JWT.name().toLowerCase())",
          "311:                     .detail(OAuth2Constants.REDIRECT_URI, redirectUri)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1973d0f0d4ce43506c50455fb872c899638d4ff6",
      "candidate_info": {
        "commit_hash": "1973d0f0d4ce43506c50455fb872c899638d4ff6",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/1973d0f0d4ce43506c50455fb872c899638d4ff6",
        "files": [
          "docs/documentation/release_notes/index.adoc",
          "docs/documentation/release_notes/topics/21_1_2.adoc",
          "docs/documentation/server_admin/topics/threat/open-redirect.adoc",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/ResteasyTestProvider.java",
          "services/src/test/resources/META-INF/services/org.keycloak.common.util.ResteasyProvider",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/BasicSamlTest.java"
        ],
        "message": "Check the redirect URI is http(s) when used for a form Post (#22)\n\nCloses https://github.com/keycloak/security/issues/22\n\nCo-authored-by: Stian Thorgersen <stianst@gmail.com>\nSigned-off-by: Peter Skopek <pskopek@redhat.com>",
        "before_after_code_files": [
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/ResteasyTestProvider.java||services/src/test/java/org/keycloak/protocol/oidc/utils/ResteasyTestProvider.java",
          "services/src/test/resources/META-INF/services/org.keycloak.common.util.ResteasyProvider||services/src/test/resources/META-INF/services/org.keycloak.common.util.ResteasyProvider",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/BasicSamlTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/BasicSamlTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
          ]
        }
      },
      "candidate_diff": {
        "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import java.net.URI;",
          "34: import java.util.Collection;",
          "36: import java.util.Set;",
          "37: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "35: import java.util.HashSet;",
          "",
          "[Added Lines]",
          "36: import java.util.TreeSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     public static Set<String> resolveValidRedirects(KeycloakSession session, String rootUrl, Set<String> validRedirects) {",
          "70:         for (String validRedirect : validRedirects) {",
          "71:             if (validRedirect.startsWith(\"/\")) {",
          "72:                 validRedirect = relativeToAbsoluteURI(session, rootUrl, validRedirect);",
          "",
          "[Removed Lines]",
          "69:         Set<String> resolveValidRedirects = new HashSet<>();",
          "",
          "[Added Lines]",
          "70:         Set<String> resolveValidRedirects = new TreeSet<>((String s1, String s2) -> s1.length() == s2.length()? s1.compareTo(s2) : s1.length() < s2.length()? 1 : -1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:         } else {",
          "110:             String decodedRedirectUri = decodeRedirectUri(redirectUri);",
          "112:             if (decodedRedirectUri == null) return null;",
          "114:             String r = decodedRedirectUri;",
          "115:             Set<String> resolveValidRedirects = resolveValidRedirects(session, rootUrl, validRedirects);",
          "120:                 int i = r.indexOf(':', Constants.INSTALLED_APP_URL.length());",
          "122:                 StringBuilder sb = new StringBuilder();",
          "",
          "[Removed Lines]",
          "111:             decodedRedirectUri = getNormalizedRedirectUri(decodedRedirectUri);",
          "117:             boolean valid = matchesRedirects(resolveValidRedirects, r, true);",
          "119:             if (!valid && (r.startsWith(Constants.INSTALLED_APP_URL) || r.startsWith(Constants.INSTALLED_APP_LOOPBACK)) && r.indexOf(':', Constants.INSTALLED_APP_URL.length()) >= 0) {",
          "",
          "[Added Lines]",
          "112:             URI decodedRedirect = toUri(decodedRedirectUri);",
          "113:             decodedRedirectUri = getNormalizedRedirectUri(decodedRedirect);",
          "119:             String valid = matchesRedirects(resolveValidRedirects, r, true);",
          "121:             if (valid == null && (r.startsWith(Constants.INSTALLED_APP_URL) || r.startsWith(Constants.INSTALLED_APP_LOOPBACK)) && r.indexOf(':', Constants.INSTALLED_APP_URL.length()) >= 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:             }",
          "140:                 valid = matchesRedirects(resolveValidRedirects, redirectUri, false);",
          "141:             }",
          "144:                 redirectUri = relativeToAbsoluteURI(session, rootUrl, redirectUri);",
          "145:             }",
          "147:         }",
          "149:         if (Constants.INSTALLED_APP_URN.equals(redirectUri)) {",
          "",
          "[Removed Lines]",
          "136:             redirectUri = getNormalizedRedirectUri(redirectUri);",
          "139:             if (!valid) {",
          "143:             if (valid && redirectUri.startsWith(\"/\")) {",
          "146:             redirectUri = valid ? redirectUri : null;",
          "",
          "[Added Lines]",
          "138:             URI redirect = toUri(redirectUri);",
          "139:             redirectUri = getNormalizedRedirectUri(redirect);",
          "142:             if (valid == null) {",
          "146:             if (valid != null && redirectUri.startsWith(\"/\")) {",
          "150:             String scheme = decodedRedirect.getScheme();",
          "151:             if (valid != null && scheme != null) {",
          "153:                 if (!valid.startsWith(scheme + \":\") && !\"http\".equalsIgnoreCase(scheme) && !\"https\".equalsIgnoreCase(scheme)) {",
          "154:                     logger.debugf(\"Invalid URI because scheme is not allowed: %s\", redirectUri);",
          "155:                     valid = null;",
          "156:                 }",
          "157:             }",
          "159:             redirectUri = valid != null ? redirectUri : null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:         }",
          "154:     }",
          "157:         if (redirectUri != null) {",
          "161:             } catch (IllegalArgumentException cause) {",
          "162:                 logger.debug(\"Invalid redirect uri\", cause);",
          "164:             } catch (Exception cause) {",
          "165:                 logger.debug(\"Unexpected error when parsing redirect uri\", cause);",
          "167:             }",
          "168:             redirectUri = lowerCaseHostname(redirectUri);",
          "169:         }",
          "170:         return redirectUri;",
          "",
          "[Removed Lines]",
          "156:     private static String getNormalizedRedirectUri(String redirectUri) {",
          "158:             try {",
          "159:                 URI uri = URI.create(redirectUri);",
          "160:                 redirectUri = uri.normalize().toString();",
          "163:                 return null;",
          "166:                 return null;",
          "",
          "[Added Lines]",
          "169:     private static URI toUri(String redirectUri) {",
          "170:         URI uri = null;",
          "172:         try {",
          "173:                 uri = URI.create(redirectUri);",
          "179:         }",
          "180:         return uri;",
          "181:     }",
          "183:     private static String getNormalizedRedirectUri(URI uri) {",
          "184:         String redirectUri = null;",
          "185:         if (uri != null) {",
          "186:             redirectUri = uri.normalize().toString();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "229:         return sb.toString();",
          "230:     }",
          "233:         logger.tracef(\"matchesRedirects: redirect URL to check: %s, allow wildcards: %b, Configured valid redirect URLs: %s\", redirect, allowWildcards, validRedirects);",
          "234:         for (String validRedirect : validRedirects) {",
          "235:             if (validRedirect.endsWith(\"*\") && !validRedirect.contains(\"?\") && allowWildcards) {",
          "",
          "[Removed Lines]",
          "232:     private static boolean matchesRedirects(Set<String> validRedirects, String redirect, boolean allowWildcards) {",
          "",
          "[Added Lines]",
          "252:     private static String matchesRedirects(Set<String> validRedirects, String redirect, boolean allowWildcards) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "239:                 int length = validRedirect.length() - 1;",
          "240:                 validRedirect = validRedirect.substring(0, length);",
          "243:                 if (length - 1 > 0 && validRedirect.charAt(length - 1) == '/') length--;",
          "244:                 validRedirect = validRedirect.substring(0, length);",
          "247:         }",
          "249:     }",
          "251:     private static String getSingleValidRedirectUri(Collection<String> validRedirects) {",
          "",
          "[Removed Lines]",
          "241:                 if (r.startsWith(validRedirect)) return true;",
          "245:                 if (validRedirect.equals(r)) return true;",
          "246:             } else if (validRedirect.equals(redirect)) return true;",
          "248:         return false;",
          "",
          "[Added Lines]",
          "261:                 if (r.startsWith(validRedirect)) return validRedirect;",
          "265:                 if (validRedirect.equals(r)) return validRedirect;",
          "266:             } else if (validRedirect.equals(redirect)) return validRedirect;",
          "268:         return null;",
          "",
          "---------------"
        ],
        "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java": [
          "File: services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java -> services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.keycloak.protocol.oidc.utils;",
          "19: import java.net.URI;",
          "20: import java.util.Set;",
          "21: import java.util.stream.Collectors;",
          "22: import java.util.stream.Stream;",
          "23: import org.jboss.resteasy.core.ResteasyContext;",
          "24: import org.jboss.resteasy.mock.MockHttpRequest;",
          "25: import org.junit.Assert;",
          "26: import org.junit.BeforeClass;",
          "27: import org.junit.Test;",
          "28: import org.keycloak.common.Profile;",
          "29: import org.keycloak.common.crypto.CryptoIntegration;",
          "30: import org.keycloak.common.crypto.CryptoProvider;",
          "31: import org.keycloak.http.HttpRequest;",
          "32: import org.keycloak.models.KeycloakSession;",
          "33: import org.keycloak.services.DefaultKeycloakSession;",
          "34: import org.keycloak.services.DefaultKeycloakSessionFactory;",
          "35: import org.keycloak.services.HttpRequestImpl;",
          "42: public class RedirectUtilsTest {",
          "44:     private static KeycloakSession session;",
          "46:     @BeforeClass",
          "47:     public static void beforeClass() {",
          "48:         HttpRequest httpRequest = new HttpRequestImpl(MockHttpRequest.create(\"GET\", URI.create(\"https://keycloak.org/\"), URI.create(\"https://keycloak.org\")));",
          "49:         ResteasyContext.getContextDataMap().put(HttpRequest.class, httpRequest);",
          "50:         Profile.defaults();",
          "51:         CryptoIntegration.init(CryptoProvider.class.getClassLoader());",
          "52:         DefaultKeycloakSessionFactory sessionFactory = new DefaultKeycloakSessionFactory();",
          "53:         sessionFactory.init();",
          "54:         session = new DefaultKeycloakSession(sessionFactory);",
          "55:     }",
          "57:     @Test",
          "58:     public void testverifyRedirectUriHttps() {",
          "59:         Set<String> set = Stream.of(",
          "60:                 \"https://keycloak.org/test1\",",
          "61:                 \"https://keycloak.org/test2\",",
          "62:                 \"https://keycloak.org/parent/*\"",
          "63:         ).collect(Collectors.toSet());",
          "65:         Assert.assertEquals(\"https://keycloak.org/test1\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test1\", set, false));",
          "66:         Assert.assertEquals(\"https://keycloak.org/test2\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test2\", set, false));",
          "67:         Assert.assertEquals(\"https://keycloak.org/parent\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/parent\", set, false));",
          "68:         Assert.assertEquals(\"https://keycloak.org/parent/child\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/parent/child\", set, false));",
          "70:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test\", set, false));",
          "71:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test1/child\", set, false));",
          "72:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.com/test\", set, false));",
          "73:     }",
          "75:     @Test",
          "76:     public void testverifyRedirectUriMixedSchemes() {",
          "77:         Set<String> set = Stream.of(",
          "78:                 \"https://keycloak.org/*\",",
          "79:                 \"custom1:/test1\",",
          "80:                 \"custom1:/test2\",",
          "81:                 \"custom1:/parent/*\",",
          "82:                 \"custom2:*\"",
          "83:         ).collect(Collectors.toSet());",
          "85:         Assert.assertEquals(\"custom1:/test1\", RedirectUtils.verifyRedirectUri(session, null, \"custom1:/test1\", set, false));",
          "86:         Assert.assertEquals(\"custom1:/test2\", RedirectUtils.verifyRedirectUri(session, null, \"custom1:/test2\", set, false));",
          "87:         Assert.assertEquals(\"custom1:/parent/child\", RedirectUtils.verifyRedirectUri(session, null, \"custom1:/parent/child\", set, false));",
          "88:         Assert.assertEquals(\"custom2:/something\", RedirectUtils.verifyRedirectUri(session, null, \"custom2:/something\", set, false));",
          "89:         Assert.assertEquals(\"https://keycloak.org/test\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test\", set, false));",
          "91:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"custom1:/test\", set, false));",
          "92:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"custom1:/test1/test\", set, false));",
          "93:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"custom3:/test\", set, false));",
          "94:     }",
          "96:     @Test",
          "97:     public void testverifyRedirectUriInvalidScheme() {",
          "98:         Set<String> set = Stream.of(",
          "99:                 \"custom1:/test1\",",
          "100:                 \"custom1:/test2\",",
          "101:                 \"custom1:/parent/*\",",
          "102:                 \"custom2:*\",",
          "103:                 \"*\"",
          "104:         ).collect(Collectors.toSet());",
          "106:         Assert.assertEquals(\"custom1:/test1\", RedirectUtils.verifyRedirectUri(session, null, \"custom1:/test1\", set, false));",
          "107:         Assert.assertEquals(\"custom1:/test2\", RedirectUtils.verifyRedirectUri(session, null, \"custom1:/test2\", set, false));",
          "108:         Assert.assertEquals(\"custom1:/parent/child\", RedirectUtils.verifyRedirectUri(session, null, \"custom1:/parent/child\", set, false));",
          "109:         Assert.assertEquals(\"custom2:/something\", RedirectUtils.verifyRedirectUri(session, null, \"custom2:/something\", set, false));",
          "110:         Assert.assertEquals(\"https://keycloak.org/test\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test\", set, false));",
          "111:         Assert.assertEquals(\"http://keycloak.org/test\", RedirectUtils.verifyRedirectUri(session, null, \"http://keycloak.org/test\", set, false));",
          "112:         Assert.assertEquals(\"https://keycloak.org/test\", RedirectUtils.verifyRedirectUri(session, null, \"/test\", set, false));",
          "113:         Assert.assertEquals(\"https://keycloak.com/test\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.com\", \"/test\", set, false));",
          "115:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"custom3:/test\", set, false));",
          "116:     }",
          "117: }",
          "",
          "---------------"
        ],
        "services/src/test/java/org/keycloak/protocol/oidc/utils/ResteasyTestProvider.java||services/src/test/java/org/keycloak/protocol/oidc/utils/ResteasyTestProvider.java": [
          "File: services/src/test/java/org/keycloak/protocol/oidc/utils/ResteasyTestProvider.java -> services/src/test/java/org/keycloak/protocol/oidc/utils/ResteasyTestProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.keycloak.protocol.oidc.utils;",
          "20: import org.jboss.resteasy.core.ResteasyContext;",
          "21: import org.keycloak.common.util.ResteasyProvider;",
          "27: public class ResteasyTestProvider implements ResteasyProvider {",
          "29:     @Override",
          "30:     public <R> R getContextData(Class<R> type) {",
          "31:         return ResteasyContext.getContextData(type);",
          "32:     }",
          "34:     @Override",
          "35:     public void pushDefaultContextObject(Class type, Object instance) {",
          "36:     }",
          "38:     @Override",
          "39:     public void pushContext(Class type, Object instance) {",
          "40:     }",
          "42:     @Override",
          "43:     public void clearContextData() {",
          "44:     }",
          "45: }",
          "",
          "---------------"
        ],
        "services/src/test/resources/META-INF/services/org.keycloak.common.util.ResteasyProvider||services/src/test/resources/META-INF/services/org.keycloak.common.util.ResteasyProvider": [
          "File: services/src/test/resources/META-INF/services/org.keycloak.common.util.ResteasyProvider -> services/src/test/resources/META-INF/services/org.keycloak.common.util.ResteasyProvider",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #",
          "2: # Copyright 2023 Red Hat, Inc. and/or its affiliates",
          "3: # and other contributors as indicated by the @author tags.",
          "4: #",
          "5: # Licensed under the Apache License, Version 2.0 (the \"License\");",
          "6: # you may not use this file except in compliance with the License.",
          "7: # You may obtain a copy of the License at",
          "8: #",
          "9: # http://www.apache.org/licenses/LICENSE-2.0",
          "10: #",
          "11: # Unless required by applicable law or agreed to in writing, software",
          "12: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "13: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "14: # See the License for the specific language governing permissions and",
          "15: # limitations under the License.",
          "17: org.keycloak.protocol.oidc.utils.ResteasyTestProvider",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AuthorizationCodeTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.keycloak.testsuite.AssertEvents;",
          "33: import org.keycloak.testsuite.pages.ErrorPage;",
          "34: import org.keycloak.testsuite.pages.InstalledAppRedirectPage;",
          "35: import org.keycloak.testsuite.util.ClientManager;",
          "36: import org.keycloak.testsuite.util.OAuthClient;",
          "37: import org.openqa.selenium.By;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import org.keycloak.testsuite.updaters.ClientAttributeUpdater;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import jakarta.ws.rs.core.UriBuilder;",
          "40: import java.io.IOException;",
          "41: import java.net.URI;",
          "42: import java.util.HashMap;",
          "43: import java.util.List;",
          "44: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:         String codeId = events.expectLogin().assertEvent().getDetails().get(Details.CODE_ID);",
          "228:     }",
          "231:     @Test",
          "232:     public void authorizationRequestFormPostResponseModeWithCustomState() throws IOException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:     @Test",
          "233:     public void authorizationRequestFormPostResponseModeInvalidRedirectUri() throws IOException {",
          "234:         try (var c = ClientAttributeUpdater.forClient(adminClient, \"test\", \"test-app\")",
          "235:                 .setRedirectUris(Collections.singletonList(\"*\"))",
          "236:                 .update()) {",
          "237:             oauth.responseMode(OIDCResponseMode.FORM_POST.value());",
          "238:             oauth.responseType(OAuth2Constants.CODE);",
          "239:             oauth.redirectUri(\"javascript:alert('XSS')\");",
          "240:             oauth.openLoginForm();",
          "242:             errorPage.assertCurrent();",
          "243:             assertEquals(\"Invalid parameter: redirect_uri\", errorPage.getError());",
          "245:             events.expectLogin().error(Errors.INVALID_REDIRECT_URI).user((String) null).session((String) null).clearDetails().assertEvent();",
          "246:         }",
          "247:     }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/BasicSamlTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/BasicSamlTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/BasicSamlTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/BasicSamlTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.io.IOException;",
          "27: import java.net.URI;",
          "28: import java.security.Signature;",
          "29: import java.util.List;",
          "30: import java.util.Objects;",
          "31: import java.util.logging.Level;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327:             assertThat(signature, matchesRegex(\"^[A-Za-z0-9+/ ]+[= ]*$\"));",
          "328:         }",
          "329:     }",
          "330: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:     @Test",
          "333:     public void testInvalidAssertionConsumerServiceURL() throws IOException {",
          "334:         try (var c = ClientAttributeUpdater.forClient(adminClient, REALM_NAME, SAML_CLIENT_ID_SALES_POST)",
          "335:                 .setRedirectUris(Collections.singletonList(\"*\"))",
          "336:                 .update()) {",
          "338:             String page = new SamlClientBuilder()",
          "339:                     .authnRequest(getAuthServerSamlEndpoint(REALM_NAME), SAML_CLIENT_ID_SALES_POST, \"javascript:alert('XSS')\", Binding.POST)",
          "340:                     .build()",
          "341:                     .executeAndTransform(response -> {",
          "342:                         assertThat(response, statusCodeIsHC(Status.BAD_REQUEST));",
          "343:                         return EntityUtils.toString(response.getEntity(), \"UTF-8\");",
          "344:                     });",
          "345:             assertThat(page, containsString(\"Invalid redirect uri\"));",
          "346:         }",
          "347:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e310604cf61561a81d53529c8b59e4177d81c736",
      "candidate_info": {
        "commit_hash": "e310604cf61561a81d53529c8b59e4177d81c736",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/e310604cf61561a81d53529c8b59e4177d81c736",
        "files": [
          "common/src/main/java/org/keycloak/common/util/Encode.java",
          "common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java",
          "common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java",
          "docs/documentation/server_admin/topics/clients/oidc/con-basic-settings.adoc",
          "docs/documentation/upgrading/topics/keycloak/changes-22_0_10.adoc",
          "docs/documentation/upgrading/topics/keycloak/changes.adoc",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java",
          "themes/src/main/resources/theme/keycloak.v2/account/src/app/util/RedirectUri.ts"
        ],
        "message": "Perform exact string match if redirect URI contains userinfo, encoded slashes or parent access (#114)\n\nCloses keycloak/keycloak-private#113\nCloses keycloak/keycloak-private#134\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
        "before_after_code_files": [
          "common/src/main/java/org/keycloak/common/util/Encode.java||common/src/main/java/org/keycloak/common/util/Encode.java",
          "common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java||common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java",
          "common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java||common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java",
          "themes/src/main/resources/theme/keycloak.v2/account/src/app/util/RedirectUri.ts||themes/src/main/resources/theme/keycloak.v2/account/src/app/util/RedirectUri.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
          ]
        }
      },
      "candidate_diff": {
        "common/src/main/java/org/keycloak/common/util/Encode.java||common/src/main/java/org/keycloak/common/util/Encode.java": [
          "File: common/src/main/java/org/keycloak/common/util/Encode.java -> common/src/main/java/org/keycloak/common/util/Encode.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:    private static final String[] matrixParameterEncoding = new String[128];",
          "47:    private static final String[] queryNameValueEncoding = new String[128];",
          "48:    private static final String[] queryStringEncoding = new String[128];",
          "50:    static",
          "51:    {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:    private static final String[] userInfoStringEncoding = new String[128];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:          }",
          "159:          queryStringEncoding[i] = URLEncoder.encode(String.valueOf((char) i));",
          "160:       }",
          "161:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:       for (int i = 0; i < 128; i++)",
          "171:       {",
          "172:          if (i >= 'a' && i <= 'z') continue;",
          "173:          if (i >= 'A' && i <= 'Z') continue;",
          "174:          if (i >= '0' && i <= '9') continue;",
          "175:          switch ((char) i)",
          "176:          {",
          "177:             case '-':",
          "178:             case '.':",
          "179:             case '_':",
          "180:             case '~':",
          "181:             case '!':",
          "182:             case '$':",
          "183:             case '&':",
          "184:             case '\\'':",
          "185:             case '(':",
          "186:             case ')':",
          "187:             case '*':",
          "188:             case '+':",
          "189:             case ',':",
          "190:             case ';':",
          "191:             case '=':",
          "192:             case ':':",
          "193:                continue;",
          "194:             case ' ':",
          "195:                userInfoStringEncoding[i] = \"%20\";",
          "196:                continue;",
          "197:          }",
          "198:          userInfoStringEncoding[i] = URLEncoder.encode(String.valueOf((char) i));",
          "199:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:       return encodeNonCodes(encodeFromArray(value, queryStringEncoding, false));",
          "178:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:    public static String encodeUserInfo(String value) {",
          "225:       return encodeValue(value, userInfoStringEncoding);",
          "226:    }",
          "233:    public static String encodeUserInfoNotTemplateParameters(String value) {",
          "234:       return encodeNonCodes(encodeFromArray(value, userInfoStringEncoding, false));",
          "235:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "424:       return result;",
          "425:    }",
          "427:    public static String encodeFragmentAsIs(String nameOrValue)",
          "428:    {",
          "429:       return encodeFromArray(nameOrValue, queryNameValueEncoding, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:    public static String encodeUserInfoAsIs(String nameOrValue)",
          "491:    {",
          "492:       return encodeFromArray(nameOrValue, userInfoStringEncoding, true);",
          "493:    }",
          "501:    public static String encodeUserInfoSaveEncodings(String segment)",
          "502:    {",
          "503:       String result = encodeFromArray(segment, userInfoStringEncoding, false);",
          "504:       result = encodeNonCodes(result);",
          "505:       return result;",
          "506:    }",
          "",
          "---------------"
        ],
        "common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java||common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java": [
          "File: common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java -> common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:             if (at > -1) {",
          "151:                 String user = host.substring(0, at);",
          "152:                 host = host.substring(at + 1);",
          "154:             }",
          "155:             Matcher hostPortMatch = hostPortPattern.matcher(host);",
          "156:             if (hostPortMatch.matches()) {",
          "",
          "[Removed Lines]",
          "153:                 this.userInfo = user;",
          "",
          "[Added Lines]",
          "153:                 replaceUserInfo(user, template);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459:         } else if (userInfo != null || host != null || port != -1) {",
          "460:             buffer.append(\"//\");",
          "461:             if (userInfo != null)",
          "463:             if (host != null) {",
          "464:                 if (\"\".equals(host)) throw new RuntimeException(\"empty host name\");",
          "465:                 replaceParameter(paramMap, fromEncodedMap, isTemplate, host, buffer, encodeSlash);",
          "",
          "[Removed Lines]",
          "462:                 replaceParameter(paramMap, fromEncodedMap, isTemplate, userInfo, buffer, encodeSlash).append(\"@\");",
          "",
          "[Added Lines]",
          "462:                 replaceUserInfoParameter(paramMap, fromEncodedMap, isTemplate, userInfo, buffer).append(\"@\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "571:         return buffer;",
          "572:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:     protected StringBuffer replaceUserInfoParameter(Map<String, ?> paramMap, boolean fromEncodedMap, boolean isTemplate, String string, StringBuffer buffer) {",
          "575:         Matcher matcher = createUriParamMatcher(string);",
          "576:         while (matcher.find()) {",
          "577:             String param = matcher.group(1);",
          "578:             Object valObj = paramMap.get(param);",
          "579:             if (valObj == null && !isTemplate) {",
          "580:                 throw new IllegalArgumentException(\"NULL value for template parameter: \" + param);",
          "581:             } else if (valObj == null && isTemplate) {",
          "582:                 matcher.appendReplacement(buffer, matcher.group());",
          "583:                 continue;",
          "584:             }",
          "585:             String value = valObj.toString();",
          "586:             if (value != null) {",
          "587:                 if (!fromEncodedMap) {",
          "588:                     value = Encode.encodeUserInfoAsIs(value);",
          "589:                 } else {",
          "590:                     value = Encode.encodeUserInfoSaveEncodings(value);",
          "591:                 }",
          "592:                 matcher.appendReplacement(buffer, value);",
          "593:             } else {",
          "594:                 throw new IllegalArgumentException(\"path param \" + param + \" has not been provided by the parameter map\");",
          "595:             }",
          "596:         }",
          "597:         matcher.appendTail(buffer);",
          "598:         return buffer;",
          "599:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "742:         return this;",
          "743:     }",
          "745:     public URI build(Object[] values, boolean encodeSlashInPath) throws IllegalArgumentException {",
          "746:         if (values == null) throw new IllegalArgumentException(\"values param is null\");",
          "747:         return buildFromValues(encodeSlashInPath, false, values);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "772:     public KeycloakUriBuilder replaceUserInfo(String userInfo, boolean template) {",
          "773:         if (userInfo == null) {",
          "774:             this.userInfo = null;",
          "775:             return this;",
          "776:         }",
          "777:         this.userInfo = template? Encode.encodeUserInfo(userInfo) : Encode.encodeUserInfoNotTemplateParameters(userInfo);",
          "778:         return this;",
          "779:     }",
          "",
          "---------------"
        ],
        "common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java||common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java": [
          "File: common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java -> common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         Assert.assertEquals(\"https://localhost:8443/%7Bpath%7D?key=%7Bquery%7D#%7Bfragment%7D\", KeycloakUriBuilder.fromUri(",
          "81:                 \"https://localhost:8443/{path}?key={query}#{fragment}\", false).buildAsString());",
          "82:     }",
          "83: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     @Test",
          "85:     public void testUserInfo() {",
          "86:         Assert.assertEquals(\"https://user-info@localhost:8443/path?key=query#fragment\", KeycloakUriBuilder.fromUri(",
          "87:                 \"https://{userinfo}@localhost:8443/{path}?key={query}#{fragment}\").buildAsString(\"user-info\", \"path\", \"query\", \"fragment\"));",
          "88:         Assert.assertEquals(\"https://user%20info%40%2F@localhost:8443/path?key=query#fragment\", KeycloakUriBuilder.fromUri(",
          "89:                 \"https://{userinfo}@localhost:8443/{path}?key={query}#{fragment}\").buildAsString(\"user info@/\", \"path\", \"query\", \"fragment\"));",
          "90:         Assert.assertEquals(\"https://user-info%E2%82%AC@localhost:8443\", KeycloakUriBuilder.fromUri(",
          "91:                 \"https://user-info%E2%82%AC@localhost:8443\", false).buildAsString());",
          "92:         Assert.assertEquals(\"https://user-info%E2%82%AC@localhost:8443\", KeycloakUriBuilder.fromUri(",
          "93:                 \"https://user-info\u20ac@localhost:8443\", false).buildAsString());",
          "94:     }",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.protocol.oidc.utils;",
          "20: import org.jboss.logging.Logger;",
          "23: import org.keycloak.common.util.UriUtils;",
          "24: import org.keycloak.models.ClientModel;",
          "25: import org.keycloak.models.Constants;",
          "",
          "[Removed Lines]",
          "21: import org.keycloak.common.util.Encode;",
          "22: import org.keycloak.common.util.KeycloakUriBuilder;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import java.util.Collection;",
          "35: import java.util.Set;",
          "36: import java.util.TreeSet;",
          "37: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:                 return null;",
          "112:             }",
          "121:             Set<String> resolveValidRedirects = resolveValidRedirects(session, rootUrl, validRedirects);",
          "125:             if (valid == null && (r.startsWith(Constants.INSTALLED_APP_URL) || r.startsWith(Constants.INSTALLED_APP_LOOPBACK)) && r.indexOf(':', Constants.INSTALLED_APP_URL.length()) >= 0) {",
          "126:                 int i = r.indexOf(':', Constants.INSTALLED_APP_URL.length());",
          "",
          "[Removed Lines]",
          "115:             String decodedRedirectUri = decodeRedirectUri(redirectUri);",
          "116:             URI decodedRedirect = toUri(decodedRedirectUri);",
          "117:             decodedRedirectUri = getNormalizedRedirectUri(decodedRedirect);",
          "118:             if (decodedRedirectUri == null) return null;",
          "120:             String r = decodedRedirectUri;",
          "123:             String valid = matchesRedirects(resolveValidRedirects, r, true);",
          "",
          "[Added Lines]",
          "114:             boolean allowWildcards = areWildcardsAllowed(originalRedirect);",
          "116:             String r = redirectUri;",
          "119:             String valid = matchesRedirects(resolveValidRedirects, r, allowWildcards);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:                 r = sb.toString();",
          "147:             }",
          "149:             if (valid != null && !originalRedirect.isAbsolute()) {",
          "",
          "[Removed Lines]",
          "138:                 valid = matchesRedirects(resolveValidRedirects, r, true);",
          "139:             }",
          "142:             redirectUri = getNormalizedRedirectUri(originalRedirect);",
          "145:             if (valid == null) {",
          "146:                 valid = matchesRedirects(resolveValidRedirects, redirectUri, false);",
          "",
          "[Added Lines]",
          "134:                 valid = matchesRedirects(resolveValidRedirects, r, allowWildcards);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154:                 redirectUri = relativeToAbsoluteURI(session, rootUrl, redirectUri);",
          "155:             }",
          "158:             if (valid != null && scheme != null) {",
          "160:                 if (!valid.startsWith(scheme + \":\") && !\"http\".equalsIgnoreCase(scheme) && !\"https\".equalsIgnoreCase(scheme)) {",
          "",
          "[Removed Lines]",
          "157:             String scheme = decodedRedirect.getScheme();",
          "",
          "[Added Lines]",
          "145:             String scheme = originalRedirect.getScheme();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "179:             try {",
          "180:                 uri = URI.create(redirectUri);",
          "181:             } catch (IllegalArgumentException cause) {",
          "183:             } catch (Exception cause) {",
          "185:             }",
          "186:         }",
          "187:         return uri;",
          "188:     }",
          "227:     }",
          "229:     private static String relativeToAbsoluteURI(KeycloakSession session, String rootUrl, String relative) {",
          "",
          "[Removed Lines]",
          "182:                 logger.debug(\"Invalid redirect uri\", cause);",
          "184:                 logger.debug(\"Unexpected error when parsing redirect uri\", cause);",
          "190:     private static String getNormalizedRedirectUri(URI uri) {",
          "191:         String redirectUri = null;",
          "192:         if (uri != null) {",
          "193:             redirectUri = uri.normalize().toString();",
          "194:         }",
          "195:         return redirectUri;",
          "196:     }",
          "200:     private static String decodeRedirectUri(String redirectUri) {",
          "201:         if (redirectUri == null) return null;",
          "202:         int MAX_DECODING_COUNT = 5; // Max count of attempts for decoding URL (in case it was encoded multiple times)",
          "204:         try {",
          "205:             KeycloakUriBuilder uriBuilder = KeycloakUriBuilder.fromUri(redirectUri, false).preserveDefaultPort();",
          "206:             if (uriBuilder.getPath() == null) {",
          "207:                 return redirectUri;",
          "208:             }",
          "209:             String encodedPath = uriBuilder.getPath();",
          "210:             String decodedPath;",
          "212:             for (int i = 0; i < MAX_DECODING_COUNT; i++) {",
          "213:                 decodedPath = Encode.decode(encodedPath);",
          "214:                 if (decodedPath.equals(encodedPath)) {",
          "216:                     return uriBuilder.replacePath(decodedPath, false).buildAsString();",
          "217:                 } else {",
          "219:                     encodedPath = decodedPath;",
          "220:                 }",
          "221:             }",
          "222:         } catch (IllegalArgumentException iae) {",
          "223:             logger.debugf(\"Illegal redirect URI used: %s, Details: %s\", redirectUri, iae.getMessage());",
          "224:         }",
          "225:         logger.debugf(\"Was not able to decode redirect URI: %s\", redirectUri);",
          "226:         return null;",
          "",
          "[Added Lines]",
          "170:                 logger.debugf(cause, \"Invalid redirect uri %s\", redirectUri);",
          "172:                 logger.debugf(cause, \"Unexpected error when parsing redirect uri %s\", redirectUri);",
          "179:     private final static Pattern UNSAFE_PATH_PATTERN = Pattern.compile(",
          "180:             \"(/|%2[fF]|%5[cC]|\\\\\\\\)(%2[eE]|\\\\.){2}(/|%2[fF]|%5[cC]|\\\\\\\\)|(/|%2[fF]|%5[cC]|\\\\\\\\)(%2[eE]|\\\\.){2}$\");",
          "182:     private static boolean areWildcardsAllowed(URI redirectUri) {",
          "184:         return redirectUri.getRawUserInfo() == null",
          "185:                 && (redirectUri.getRawPath() == null || !UNSAFE_PATH_PATTERN.matcher(redirectUri.getRawPath()).find());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "240:         return sb.toString();",
          "241:     }",
          "255:     private static String matchesRedirects(Set<String> validRedirects, String redirect, boolean allowWildcards) {",
          "256:         logger.tracef(\"matchesRedirects: redirect URL to check: %s, allow wildcards: %b, Configured valid redirect URLs: %s\", redirect, allowWildcards, validRedirects);",
          "257:         for (String validRedirect : validRedirects) {",
          "262:                 int length = validRedirect.length() - 1;",
          "263:                 validRedirect = validRedirect.substring(0, length);",
          "",
          "[Removed Lines]",
          "245:     private static String stripOffRedirectForWildcard(String redirect) {",
          "246:         return KeycloakUriBuilder.fromUri(redirect, false)",
          "247:                 .preserveDefaultPort()",
          "248:                 .userInfo(null)",
          "249:                 .replaceQuery(null)",
          "250:                 .fragment(null)",
          "251:                 .buildAsString();",
          "252:     }",
          "258:             if (validRedirect.endsWith(\"*\") && !validRedirect.contains(\"?\") && allowWildcards) {",
          "260:                 String r = stripOffRedirectForWildcard(redirect);",
          "",
          "[Added Lines]",
          "206:             if (\"*\".equals(validRedirect)) {",
          "208:                 return validRedirect;",
          "209:             } else if (validRedirect.endsWith(\"*\") && !validRedirect.contains(\"?\") && allowWildcards) {",
          "211:                 int idx = redirect.indexOf('?');",
          "212:                 if (idx == -1) {",
          "213:                     idx = redirect.indexOf('#');",
          "214:                 }",
          "215:                 String r = idx == -1 ? redirect : redirect.substring(0, idx);",
          "",
          "---------------"
        ],
        "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java": [
          "File: services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java -> services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         Assert.assertEquals(\"custom1:/parent/child\", RedirectUtils.verifyRedirectUri(session, null, \"custom1:/parent/child\", set, false));",
          "88:         Assert.assertEquals(\"custom2:/something\", RedirectUtils.verifyRedirectUri(session, null, \"custom2:/something\", set, false));",
          "89:         Assert.assertEquals(\"https://keycloak.org/test\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test\", set, false));",
          "91:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"custom1:/test\", set, false));",
          "92:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"custom1:/test1/test\", set, false));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:         Assert.assertEquals(\"https://keycloak.org/\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/\", set, false));",
          "91:         Assert.assertEquals(\"https://keycloak.org\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org\", set, false));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"/path\", set, false));",
          "174:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"path\", set, false));",
          "175:     }",
          "177:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:         Assert.assertEquals(\"https://keycloak.org/test/../other\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/../other\", set, false));",
          "178:         Assert.assertEquals(\"http://keycloak.org/test%2Fother\", RedirectUtils.verifyRedirectUri(session, null, \"http://keycloak.org/test%2Fother\", set, false));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:         Assert.assertEquals(\"https://keycloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/index.html\", set, false));",
          "186:         Assert.assertEquals(\"https://test.com/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://test.com/index.html\", set, false));",
          "189:         Assert.assertEquals(\"https://something@keycloak.com/exact\", RedirectUtils.verifyRedirectUri(session, null, \"https://something@keycloak.com/exact\", set, false));",
          "191:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://something@other.com/\", set, false));",
          "",
          "[Removed Lines]",
          "187:         Assert.assertEquals(\"https://something@keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, null, \"https://something@keycloak.org/path\", set, false));",
          "188:         Assert.assertEquals(\"https://some%20thing@test.com/path\", RedirectUtils.verifyRedirectUri(session, null, \"https://some%20thing@test.com/path\", set, false));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org%2F@other.com\", set, false));",
          "194:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://test@other.com\", set, false));",
          "195:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://test.com@other.com\", set, false));",
          "196:     }",
          "198:     @Test",
          "199:     public void testEncodedRedirectUri() {",
          "200:         Set<String> set = Stream.of(",
          "202:         ).collect(Collectors.toSet());",
          "204:         Assert.assertEquals(\"https://keycloak.org/test/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/index.html\", set, false));",
          "",
          "[Removed Lines]",
          "201:                 \"https://keycloak.org/test/*\"",
          "",
          "[Added Lines]",
          "198:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://something@keycloak.org/path\", set, false));",
          "199:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://some%20thing@test.com/path\", set, false));",
          "205:                 \"https://keycloak.org/test/*\",",
          "206:                 \"https://keycloak.org/exact/%5C%2F/..\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "206:         Assert.assertEquals(\"https://keycloak.org/test?encodeTest=a%3Cb#encode2=a%3Cb\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test?encodeTest=a%3Cb#encode2=a%3Cb\", set, false));",
          "207:         Assert.assertEquals(\"https://keycloak.org/test/#encode2=a%3Cb\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/#encode2=a%3Cb\", set, false));",
          "218:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak%2Eorg/test/\", set, false));",
          "219:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org%2Ftest%2F%40sample.com\", set, false));",
          "220:     }",
          "221: }",
          "",
          "[Removed Lines]",
          "209:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/../\", set, false));  // direct",
          "210:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%2E%2E/\", set, false));  // encoded",
          "211:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test%2F%2E%2E%2F\", set, false)); // encoded",
          "212:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%252E%252E/\", set, false)); // double-encoded",
          "213:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%252E%252E/?some_query_param=some_value\", set, false)); // double-encoded",
          "214:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%252E%252E/#encodeTest=a%3Cb\", set, false)); // double-encoded",
          "215:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%25252E%25252E/\", set, false)); // triple-encoded",
          "216:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%2525252525252E%2525252525252E/\", set, false)); // seventh-encoded",
          "",
          "[Added Lines]",
          "214:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/../\", set, false));",
          "215:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test\\\\..\\\\\", set, false));",
          "216:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%2E%2E/\", set, false));",
          "217:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%2e%2e/\", set, false));",
          "218:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%2E./\", set, false));",
          "219:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%2E.\", set, false));",
          "220:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test\\\\%2E.\", set, false));",
          "221:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test%2f%2E%2e%2F\", set, false));",
          "222:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test%5C%2E.%5c\", set, false));",
          "223:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test%5C..\", set, false));",
          "224:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%2F%2E%2E%2Fdocumentation\", set, false));",
          "225:         Assert.assertEquals(\"https://keycloak.org/test/.../\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/.../\", set, false));",
          "226:         Assert.assertEquals(\"https://keycloak.org/test/%2E../\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%2E../\", set, false));  // encoded",
          "227:         Assert.assertEquals(\"https://keycloak.org/test/some%2Fthing/\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/some%2Fthing/\", set, false));  // encoded",
          "228:         Assert.assertEquals(\"https://keycloak.org/test/./\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/./\", set, false));",
          "229:         Assert.assertEquals(\"https://keycloak.org/test/%252E%252E/\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%252E%252E/\", set, false)); // double-encoded",
          "230:         Assert.assertEquals(\"https://keycloak.org/test/%252E%252E/#encodeTest=a%3Cb\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%252E%252E/#encodeTest=a%3Cb\", set, false)); // double-encoded",
          "231:         Assert.assertEquals(\"https://keycloak.org/test/%25252E%25252E/\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test/%25252E%25252E/\", set, false)); // triple-encoded",
          "232:         Assert.assertEquals(\"https://keycloak.org/exact/%5C%2F/..\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/exact/%5C%2F/..\", set, false));",
          "237:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test%2Fanother/../any/path/\", set, false));",
          "238:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/test%2Fanother/%2E%2E/any/path/\", set, false));",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:         checkRedirectUri(\"http://example.com/foo/../\", false);",
          "352:         checkRedirectUri(\"http://example.com/foo/%2E%2E/\", false); // url-encoded \"http://example.com/foobar/../\"",
          "353:         checkRedirectUri(\"http://example.com/foo%2F%2E%2E%2F\", false); // url-encoded \"http://example.com/foobar/../\"",
          "361:         checkRedirectUri(\"http://example.com/foo?encodeTest=a%3Cb\", true);",
          "362:         checkRedirectUri(\"http://example.com/foo?encodeTest=a%3Cb#encode2=a%3Cb\", true);",
          "",
          "[Removed Lines]",
          "354:         checkRedirectUri(\"http://example.com/foo/%252E%252E/\", false); // double-encoded \"http://example.com/foobar/../\"",
          "355:         checkRedirectUri(\"http://example.com/foo/%252E%252E/?some_query_param=some_value\", false); // double-encoded \"http://example.com/foobar/../?some_query_param=some_value\"",
          "356:         checkRedirectUri(\"http://example.com/foo/%252E%252E/?encodeTest=a%3Cb\", false); // double-encoded \"http://example.com/foobar/../?encodeTest=a<b\"",
          "357:         checkRedirectUri(\"http://example.com/foo/%252E%252E/#encodeTest=a%3Cb\", false); // double-encoded \"http://example.com/foobar/../?encodeTest=a<b\"",
          "358:         checkRedirectUri(\"http://example.com/foo/%25252E%25252E/\", false); // triple-encoded \"http://example.com/foobar/../\"",
          "359:         checkRedirectUri(\"http://example.com/foo/%2525252525252E%2525252525252E/\", false); // seventh-encoded \"http://example.com/foobar/../\"",
          "",
          "[Added Lines]",
          "354:         checkRedirectUri(\"http://example.com/foo/%252E%252E/\", true); // double-encoded \"http://example.com/foobar/../\"",
          "355:         checkRedirectUri(\"http://example.com/foo/%252E%252E/?some_query_param=some_value\", true); // double-encoded \"http://example.com/foobar/../?some_query_param=some_value\"",
          "356:         checkRedirectUri(\"http://example.com/foo/%252E%252E/?encodeTest=a%3Cb\", true); // double-encoded \"http://example.com/foobar/../?encodeTest=a<b\"",
          "357:         checkRedirectUri(\"http://example.com/foo/%252E%252E/#encodeTest=a%3Cb\", true); // double-encoded \"http://example.com/foobar/../?encodeTest=a<b\"",
          "358:         checkRedirectUri(\"http://example.com/foo/%25252E%25252E/\", true); // triple-encoded \"http://example.com/foobar/../\"",
          "359:         checkRedirectUri(\"http://example.com/foo/%2525252525252E%2525252525252E/\", true); // seventh-encoded \"http://example.com/foobar/../\"",
          "",
          "---------------"
        ],
        "themes/src/main/resources/theme/keycloak.v2/account/src/app/util/RedirectUri.ts||themes/src/main/resources/theme/keycloak.v2/account/src/app/util/RedirectUri.ts": [
          "File: themes/src/main/resources/theme/keycloak.v2/account/src/app/util/RedirectUri.ts -> themes/src/main/resources/theme/keycloak.v2/account/src/app/util/RedirectUri.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:         redirectUri += \"?referrer=\" + referrer + \"&referrer_uri=\" + referrerUri.replace('#', '_hash_');",
          "39:     }",
          "",
          "[Removed Lines]",
          "41:     return encodeURIComponent(redirectUri) + encodeURIComponent(\"/#\" + currentLocation);",
          "42: }",
          "",
          "[Added Lines]",
          "42: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "709c6b5a473000635f4cbe4db1b0ae120a1cf87d",
      "candidate_info": {
        "commit_hash": "709c6b5a473000635f4cbe4db1b0ae120a1cf87d",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/709c6b5a473000635f4cbe4db1b0ae120a1cf87d",
        "files": [
          "common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java",
          "common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java",
          "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
        ],
        "message": "Regressions in redirect URL verification when redirect_uri has encoded path or default port closes #16851 closes #16587",
        "before_after_code_files": [
          "common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java||common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java",
          "common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java||common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java",
          "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
          ]
        }
      },
      "candidate_diff": {
        "common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java||common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java": [
          "File: common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java -> common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     private String scheme;",
          "38:     private int port = -1;",
          "40:     private String userInfo;",
          "41:     private String path;",
          "42:     private String query;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:     private boolean preserveDefaultPort = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "290:         return this;",
          "291:     }",
          "293:     protected static String paths(boolean encode, String basePath, String... segments) {",
          "294:         String path = basePath;",
          "295:         if (path == null) path = \"\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:     public KeycloakUriBuilder preserveDefaultPort() {",
          "304:         this.preserveDefaultPort = true;",
          "305:         return this;",
          "306:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429:                 if (\"\".equals(host)) throw new RuntimeException(\"empty host name\");",
          "430:                 replaceParameter(paramMap, fromEncodedMap, isTemplate, host, buffer, encodeSlash);",
          "431:             }",
          "433:                 buffer.append(\":\").append(Integer.toString(port));",
          "434:             }",
          "435:         } else if (authority != null) {",
          "",
          "[Removed Lines]",
          "432:             if (port != -1 && !((\"http\".equals(scheme) && port == 80) || (\"https\".equals(scheme) && port == 443))) {",
          "",
          "[Added Lines]",
          "447:             if (port != -1 && (preserveDefaultPort || !((\"http\".equals(scheme) && port == 80) || (\"https\".equals(scheme) && port == 443)))) {",
          "",
          "---------------"
        ],
        "common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java||common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java": [
          "File: common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java -> common/src/test/java/org/keycloak/common/util/KeycloakUriBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:                 KeycloakUriBuilder.fromUri(\"https://localhost:8443/path?attr1={value}\")",
          "52:                         .buildFromMap(Collections.singletonMap(\"value\", \"value1\")).toString());",
          "53:     }",
          "54: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     @Test",
          "56:     public void testPort() {",
          "57:         Assert.assertEquals(\"https://localhost:8443/path\", KeycloakUriBuilder.fromUri(\"https://localhost:8443/path\").buildAsString());",
          "58:         Assert.assertEquals(\"https://localhost:8443/path\", KeycloakUriBuilder.fromUri(\"https://localhost:8443/path\").preserveDefaultPort().buildAsString());",
          "60:         Assert.assertEquals(\"https://localhost/path\", KeycloakUriBuilder.fromUri(\"https://localhost:443/path\").buildAsString());",
          "61:         Assert.assertEquals(\"https://localhost:443/path\", KeycloakUriBuilder.fromUri(\"https://localhost:443/path\").preserveDefaultPort().buildAsString());",
          "63:         Assert.assertEquals(\"http://localhost/path\", KeycloakUriBuilder.fromUri(\"http://localhost:80/path\").buildAsString());",
          "64:         Assert.assertEquals(\"http://localhost:80/path\", KeycloakUriBuilder.fromUri(\"http://localhost:80/path\").preserveDefaultPort().buildAsString());",
          "67:         Assert.assertEquals(\"https://localhost:80/path\", KeycloakUriBuilder.fromUri(\"https://localhost:80/path\").buildAsString());",
          "70:         Assert.assertEquals(\"http://localhost/path\", KeycloakUriBuilder.fromUri(\"http://localhost/path\").buildAsString());",
          "71:         Assert.assertEquals(\"http://localhost/path\", KeycloakUriBuilder.fromUri(\"http://localhost/path\").preserveDefaultPort().buildAsString());",
          "72:         Assert.assertEquals(\"https://localhost/path\", KeycloakUriBuilder.fromUri(\"https://localhost/path\").buildAsString());",
          "73:         Assert.assertEquals(\"https://localhost/path\", KeycloakUriBuilder.fromUri(\"https://localhost/path\").preserveDefaultPort().buildAsString());",
          "74:     }",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java -> services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:         if (redirectUri != null && !redirectUri.equals(redirectUriParam)) {",
          "388:             event.error(Errors.INVALID_CODE);",
          "389:             throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_GRANT, \"Incorrect redirect_uri\", Response.Status.BAD_REQUEST);",
          "390:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:             logger.tracef(\"Parameter 'redirect_uri' did not match originally saved redirect URI used in initial OIDC request. Saved redirectUri: %s, redirectUri parameter: %s\", redirectUri, redirectUriParam);",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:         KeycloakUriInfo uriInfo = session.getContext().getUri();",
          "94:         RealmModel realm = session.getContext().getRealm();",
          "110:         if (redirectUri == null) {",
          "111:             if (!requireRedirectUri) {",
          "112:                 redirectUri = getSingleValidRedirectUri(validRedirects);",
          "",
          "[Removed Lines]",
          "96:         redirectUri = decodeRedirectUri(redirectUri);",
          "97:         if (redirectUri != null) {",
          "98:             try {",
          "99:                 URI uri = URI.create(redirectUri);",
          "100:                 redirectUri = uri.normalize().toString();",
          "101:             } catch (IllegalArgumentException cause) {",
          "102:                 logger.debug(\"Invalid redirect uri\", cause);",
          "103:                 return null;",
          "104:             } catch (Exception cause) {",
          "105:                 logger.debug(\"Unexpected error when parsing redirect uri\", cause);",
          "106:                 return null;",
          "107:             }",
          "108:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:             logger.debug(\"No Redirect URIs supplied\");",
          "121:             redirectUri = null;",
          "122:         } else {",
          "126:             Set<String> resolveValidRedirects = resolveValidRedirects(session, rootUrl, validRedirects);",
          "130:             if (!valid && (r.startsWith(Constants.INSTALLED_APP_URL) || r.startsWith(Constants.INSTALLED_APP_LOOPBACK)) && r.indexOf(':', Constants.INSTALLED_APP_URL.length()) >= 0) {",
          "131:                 int i = r.indexOf(':', Constants.INSTALLED_APP_URL.length());",
          "",
          "[Removed Lines]",
          "123:             redirectUri = lowerCaseHostname(redirectUri);",
          "125:             String r = redirectUri;",
          "128:             boolean valid = matchesRedirects(resolveValidRedirects, r);",
          "",
          "[Added Lines]",
          "110:             String decodedRedirectUri = decodeRedirectUri(redirectUri);",
          "111:             decodedRedirectUri = getNormalizedRedirectUri(decodedRedirectUri);",
          "112:             if (decodedRedirectUri == null) return null;",
          "114:             String r = decodedRedirectUri;",
          "117:             boolean valid = matchesRedirects(resolveValidRedirects, r, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:                 r = sb.toString();",
          "144:             }",
          "145:             if (valid && redirectUri.startsWith(\"/\")) {",
          "146:                 redirectUri = relativeToAbsoluteURI(session, rootUrl, redirectUri);",
          "147:             }",
          "",
          "[Removed Lines]",
          "143:                 valid = matchesRedirects(resolveValidRedirects, r);",
          "",
          "[Added Lines]",
          "132:                 valid = matchesRedirects(resolveValidRedirects, r, true);",
          "133:             }",
          "136:             redirectUri = getNormalizedRedirectUri(redirectUri);",
          "139:             if (!valid) {",
          "140:                 valid = matchesRedirects(resolveValidRedirects, redirectUri, false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:         }",
          "156:     }",
          "160:     private static String decodeRedirectUri(String redirectUri) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:     private static String getNormalizedRedirectUri(String redirectUri) {",
          "157:         if (redirectUri != null) {",
          "158:             try {",
          "159:                 URI uri = URI.create(redirectUri);",
          "160:                 redirectUri = uri.normalize().toString();",
          "161:             } catch (IllegalArgumentException cause) {",
          "162:                 logger.debug(\"Invalid redirect uri\", cause);",
          "163:                 return null;",
          "164:             } catch (Exception cause) {",
          "165:                 logger.debug(\"Unexpected error when parsing redirect uri\", cause);",
          "166:                 return null;",
          "167:             }",
          "168:             redirectUri = lowerCaseHostname(redirectUri);",
          "169:         }",
          "170:         return redirectUri;",
          "171:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:         int MAX_DECODING_COUNT = 5; // Max count of attempts for decoding URL (in case it was encoded multiple times)",
          "164:         try {",
          "166:             String origQuery = uriBuilder.getQuery();",
          "167:             String origFragment = uriBuilder.getFragment();",
          "168:             String encodedRedirectUri = uriBuilder",
          "",
          "[Removed Lines]",
          "165:             KeycloakUriBuilder uriBuilder = KeycloakUriBuilder.fromUri(redirectUri);",
          "",
          "[Added Lines]",
          "180:             KeycloakUriBuilder uriBuilder = KeycloakUriBuilder.fromUri(redirectUri).preserveDefaultPort();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "175:                 decodedRedirectUri = Encode.decode(encodedRedirectUri);",
          "176:                 if (decodedRedirectUri.equals(encodedRedirectUri)) {",
          "179:                             .replaceQuery(origQuery)",
          "180:                             .fragment(origFragment)",
          "181:                             .buildAsString();",
          "",
          "[Removed Lines]",
          "178:                     return KeycloakUriBuilder.fromUri(decodedRedirectUri)",
          "",
          "[Added Lines]",
          "193:                     return KeycloakUriBuilder.fromUri(decodedRedirectUri).preserveDefaultPort()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214:         return sb.toString();",
          "215:     }",
          "218:         for (String validRedirect : validRedirects) {",
          "221:                 String r = redirect.contains(\"?\") ? redirect.substring(0, redirect.indexOf(\"?\")) : redirect;",
          "",
          "[Removed Lines]",
          "217:     private static boolean matchesRedirects(Set<String> validRedirects, String redirect) {",
          "219:             if (validRedirect.endsWith(\"*\") && !validRedirect.contains(\"?\")) {",
          "",
          "[Added Lines]",
          "232:     private static boolean matchesRedirects(Set<String> validRedirects, String redirect, boolean allowWildcards) {",
          "233:         logger.tracef(\"matchesRedirects: redirect URL to check: %s, allow wildcards: %b, Configured valid redirect URLs: %s\", redirect, allowWildcards, validRedirects);",
          "235:             if (validRedirect.endsWith(\"*\") && !validRedirect.contains(\"?\") && allowWildcards) {",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import org.junit.Test;",
          "34: import org.keycloak.OAuth2Constants;",
          "35: import org.keycloak.broker.provider.util.SimpleHttp;",
          "36: import org.keycloak.models.Constants;",
          "37: import org.keycloak.representations.idm.RealmRepresentation;",
          "38: import org.keycloak.testsuite.AbstractKeycloakTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import org.keycloak.common.util.Encode;",
          "37: import org.keycloak.common.util.KeycloakUriBuilder;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:         realm.client(installedApp2);",
          "115:         ClientBuilder installedApp3 = ClientBuilder.create().clientId(\"test-wildcard\").name(\"test-wildcard\")",
          "117:                 .secret(\"password\");",
          "118:         realm.client(installedApp3);",
          "",
          "[Removed Lines]",
          "116:                 .redirectUris(\"http://example.com/foo/*\", \"http://with-dash.example.local/foo/*\", \"http://localhost:8280/foo/*\")",
          "",
          "[Added Lines]",
          "118:                 .redirectUris(\"http://example.com/foo/*\", \"http://with-dash.example.local/foo/*\", \"http://localhost:8280/foo/*\", \"http://something.com:80/*\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:                 .secret(\"password\");",
          "145:         realm.client(installedApp8);",
          "147:         ClientBuilder installedAppCustomScheme = ClientBuilder.create().clientId(\"custom-scheme\").name(\"custom-scheme\")",
          "148:                 .redirectUris(\"android-app://org.keycloak.examples.cordova/https/keycloak-cordova-example.github.io/login\")",
          "149:                 .secret(\"password\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:         ClientBuilder installedApp9 = ClientBuilder.create().clientId(\"test-encoded-path\").name(\"test-encoded-path\")",
          "150:                 .redirectUris(\"http://localhost:8280/foo/bar%20bar%2092%2F72/3\", \"http://localhost:8280/foo/bar%20bar%2092%2F72/44\")",
          "151:                 .secret(\"password\");",
          "152:         realm.client(installedApp9);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "338:         checkRedirectUri(\"http://example.com/foobar\", false);",
          "339:         checkRedirectUri(\"http://localhost:8280/foobar\", false, true);",
          "341:         checkRedirectUri(\"http://example.com/foo/../\", false);",
          "342:         checkRedirectUri(\"http://example.com/foo/%2E%2E/\", false); // url-encoded \"http://example.com/foobar/../\"",
          "343:         checkRedirectUri(\"http://example.com/foo%2F%2E%2E%2F\", false); // url-encoded \"http://example.com/foobar/../\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:         checkRedirectUri(\"http://something.com:80/some\", true);",
          "349:         checkRedirectUri(\"http://localhost:8280/foo/bar%20bar%2092%2F72/3\", true, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "353:         checkRedirectUri(\"http://example.com/foo/#encode2=a%3Cb\", true);",
          "354:     }",
          "356:     @Test",
          "357:     public void testDash() throws IOException {",
          "358:         oauth.clientId(\"test-dash\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:     @Test",
          "368:     public void testRedirectUriWithEncodedPath() throws IOException {",
          "369:         oauth.clientId(\"test-encoded-path\");",
          "370:         checkRedirectUri(\"http://localhost:8280/foo/bar%20bar%2092%2F72/3\", true, true);",
          "371:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "459:     }",
          "461:     private void checkRedirectUri(String redirectUri, boolean expectValid, boolean checkCodeToToken) throws IOException {",
          "464:         if (!expectValid) {",
          "465:             oauth.openLoginForm();",
          "",
          "[Removed Lines]",
          "462:         oauth.redirectUri(redirectUri);",
          "",
          "[Added Lines]",
          "481:         String encodedRedirectUri = Encode.urlEncode(redirectUri);",
          "482:         oauth.redirectUri(encodedRedirectUri);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "476:                 String code = oauth.getCurrentQuery().get(OAuth2Constants.CODE);",
          "477:                 Assert.assertNotNull(code);",
          "479:                 OAuthClient.AccessTokenResponse tokenResponse = oauth.doAccessTokenRequest(code, \"password\");",
          "481:                 Assert.assertEquals(\"Expected success, but got error: \" + tokenResponse.getError(), 200, tokenResponse.getStatusCode());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500:                 String browserUrlAfterRedirectFromKeycloak = KeycloakUriBuilder.fromUri(driver.getCurrentUrl())",
          "501:                         .replaceQueryParam(OAuth2Constants.CODE, null)",
          "502:                         .replaceQueryParam(OAuth2Constants.STATE, null)",
          "503:                         .replaceQueryParam(OAuth2Constants.SESSION_STATE, null)",
          "504:                         .build().toString();",
          "505:                 if (browserUrlAfterRedirectFromKeycloak.endsWith(\"/\")) browserUrlAfterRedirectFromKeycloak = browserUrlAfterRedirectFromKeycloak.substring(0, browserUrlAfterRedirectFromKeycloak.length() - 1);",
          "506:                 if (Constants.INSTALLED_APP_URN.equals(redirectUri)) {",
          "507:                     Assert.assertThat(browserUrlAfterRedirectFromKeycloak, Matchers.endsWith(\"oauth/oob\"));",
          "508:                 } else {",
          "509:                     Assert.assertEquals(redirectUri, browserUrlAfterRedirectFromKeycloak);",
          "510:                 }",
          "512:                 oauth.redirectUri(redirectUri);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f2ca3bfddeeeece06cae4cbd1f7122adb261eed",
      "candidate_info": {
        "commit_hash": "0f2ca3bfddeeeece06cae4cbd1f7122adb261eed",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/0f2ca3bfddeeeece06cae4cbd1f7122adb261eed",
        "files": [
          "services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/main/java/org/keycloak/services/managers/AuthenticationSessionManager.java",
          "services/src/main/java/org/keycloak/services/managers/UserSessionCrossDCManager.java",
          "services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RPInitiatedLogoutTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java"
        ],
        "message": "fixes from release/20 (#15982)\n\n* Avoid path traversal vis double-url encoding of redirect URI (#8)\n\n(cherry picked from commit a2128fb9e940d96c2f9a64edcd4fbcc768eedb4f)\n\n* Do not resolve user session if corresponding auth session does not exist (#7)\n\n* Stabilizing the ConcurrentLoginTest when running with JPA map storage by locking user sessions (#9)\n\nCo-authored-by: Marek Posolda <mposolda@gmail.com>\nCo-authored-by: Pedro Igor <pigor.craveiro@gmail.com>\nCo-authored-by: Alexander Schwartz <alexander.schwartz@gmx.net>",
        "before_after_code_files": [
          "services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/main/java/org/keycloak/services/managers/AuthenticationSessionManager.java||services/src/main/java/org/keycloak/services/managers/AuthenticationSessionManager.java",
          "services/src/main/java/org/keycloak/services/managers/UserSessionCrossDCManager.java||services/src/main/java/org/keycloak/services/managers/UserSessionCrossDCManager.java",
          "services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java||services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RPInitiatedLogoutTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RPInitiatedLogoutTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
          ]
        }
      },
      "candidate_diff": {
        "services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java -> services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:                 session.getProvider(LoginFormsProvider.class).setAttribute(Constants.SKIP_LINK, true);",
          "371:             }",
          "373:             return ErrorPage.error(session, logoutSession, Response.Status.BAD_REQUEST, Messages.FAILED_LOGOUT);",
          "374:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:             event.error(Errors.SESSION_EXPIRED);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "406:             AuthenticationManager.AuthResult authResult = AuthenticationManager.authenticateIdentityCookie(session, realm, false);",
          "407:             if (authResult != null) {",
          "408:                 return ErrorPage.error(session, logoutSession, Response.Status.BAD_REQUEST, Messages.FAILED_LOGOUT);",
          "409:             } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:                 event.error(Errors.LOGOUT_FAILED);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "431:             try {",
          "432:                 userSession = lockUserSessionsForModification(session, () -> session.sessions().getUserSession(realm, userSessionIdFromIdToken));",
          "435:                     Integer idTokenIssuedAt = Integer.parseInt(idTokenIssuedAtStr);",
          "436:                     checkTokenIssuedAt(idTokenIssuedAt, userSession);",
          "437:                 }",
          "",
          "[Removed Lines]",
          "434:                 if (userSession != null) {",
          "",
          "[Added Lines]",
          "437:                 if (userSession == null) {",
          "438:                     event.event(EventType.LOGOUT);",
          "439:                     event.error(Errors.SESSION_EXPIRED);",
          "440:                 } else {",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.protocol.oidc.utils;",
          "20: import org.jboss.logging.Logger;",
          "21: import org.keycloak.common.util.UriUtils;",
          "22: import org.keycloak.models.ClientModel;",
          "23: import org.keycloak.models.Constants;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import org.keycloak.common.util.Encode;",
          "22: import org.keycloak.common.util.KeycloakUriBuilder;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:         KeycloakUriInfo uriInfo = session.getContext().getUri();",
          "92:         RealmModel realm = session.getContext().getRealm();",
          "94:         if (redirectUri != null) {",
          "95:             try {",
          "96:                 URI uri = URI.create(redirectUri);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:         redirectUri = decodeRedirectUri(redirectUri);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152:         }",
          "153:     }",
          "155:     private static String lowerCaseHostname(String redirectUri) {",
          "156:         int n = redirectUri.indexOf('/', 7);",
          "157:         if (n == -1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:     private static String decodeRedirectUri(String redirectUri) {",
          "161:         if (redirectUri == null) return null;",
          "162:         int MAX_DECODING_COUNT = 5; // Max count of attempts for decoding URL (in case it was encoded multiple times)",
          "164:         try {",
          "165:             KeycloakUriBuilder uriBuilder = KeycloakUriBuilder.fromUri(redirectUri);",
          "166:             String origQuery = uriBuilder.getQuery();",
          "167:             String origFragment = uriBuilder.getFragment();",
          "168:             String encodedRedirectUri = uriBuilder",
          "169:                     .replaceQuery(null)",
          "170:                     .fragment(null)",
          "171:                     .buildAsString();",
          "172:             String decodedRedirectUri = null;",
          "174:             for (int i = 0; i < MAX_DECODING_COUNT; i++) {",
          "175:                 decodedRedirectUri = Encode.decode(encodedRedirectUri);",
          "176:                 if (decodedRedirectUri.equals(encodedRedirectUri)) {",
          "178:                     return KeycloakUriBuilder.fromUri(decodedRedirectUri)",
          "179:                             .replaceQuery(origQuery)",
          "180:                             .fragment(origFragment)",
          "181:                             .buildAsString();",
          "182:                 } else {",
          "184:                     encodedRedirectUri = decodedRedirectUri;",
          "185:                 }",
          "186:             }",
          "187:         } catch (IllegalArgumentException iae) {",
          "188:             logger.debugf(\"Illegal redirect URI used: %s, Details: %s\", redirectUri, iae.getMessage());",
          "189:         }",
          "190:         logger.debugf(\"Was not able to decode redirect URI: %s\", redirectUri);",
          "191:         return null;",
          "192:     }",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/services/managers/AuthenticationSessionManager.java||services/src/main/java/org/keycloak/services/managers/AuthenticationSessionManager.java": [
          "File: services/src/main/java/org/keycloak/services/managers/AuthenticationSessionManager.java -> services/src/main/java/org/keycloak/services/managers/AuthenticationSessionManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import java.util.List;",
          "35: import java.util.Objects;",
          "36: import java.util.Set;",
          "37: import java.util.stream.Collectors;",
          "39: import static org.keycloak.utils.LockObjectsForModification.lockUserSessionsForModification;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import java.util.function.Predicate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:             log.debugf(\"Not found AUTH_SESSION_ID cookie\");",
          "197:         }",
          "200:     }",
          "",
          "[Removed Lines]",
          "199:         return authSessionIds;",
          "",
          "[Added Lines]",
          "200:         return authSessionIds.stream().filter(new Predicate<String>() {",
          "201:             @Override",
          "202:             public boolean test(String id) {",
          "203:                 StickySessionEncoderProvider encoder = session.getProvider(StickySessionEncoderProvider.class);",
          "205:                 String decodedId = encoder.decodeSessionId(cookiesVal.iterator().next());",
          "209:                 return session.authenticationSessions().getRootAuthenticationSession(realm, decodedId) != null;",
          "210:             }",
          "211:         }).collect(Collectors.toList());",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/services/managers/UserSessionCrossDCManager.java||services/src/main/java/org/keycloak/services/managers/UserSessionCrossDCManager.java": [
          "File: services/src/main/java/org/keycloak/services/managers/UserSessionCrossDCManager.java -> services/src/main/java/org/keycloak/services/managers/UserSessionCrossDCManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.services.managers;",
          "20: import java.util.List;",
          "21: import java.util.Objects;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: import org.keycloak.models.RealmModel;",
          "27: import org.keycloak.models.UserSessionModel;",
          "29: import static org.keycloak.utils.LockObjectsForModification.lockUserSessionsForModification;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import static org.keycloak.services.managers.AuthenticationManager.authenticateIdentityCookie;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:     public UserSessionModel getUserSessionIfExistsRemotely(AuthenticationSessionManager asm, RealmModel realm) {",
          "66:         List<String> sessionCookies = asm.getAuthSessionCookies(realm);",
          "68:         return sessionCookies.stream().map(oldEncodedId -> {",
          "69:             AuthSessionId authSessionId = asm.decodeAuthSessionId(oldEncodedId);",
          "70:             String sessionId = authSessionId.getDecodedId();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:         if (sessionCookies.isEmpty()) {",
          "75:             AuthenticationManager.AuthResult authResult = lockUserSessionsForModification(kcSession, () -> authenticateIdentityCookie(kcSession, realm, true));",
          "77:             if (authResult != null && authResult.getSession() != null) {",
          "78:                 sessionCookies = Collections.singletonList(authResult.getSession().getId());",
          "79:             }",
          "80:         }",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java||services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java": [
          "File: services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java -> services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.services.resources;",
          "20: import java.net.URI;",
          "22: import javax.ws.rs.core.Cookie;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import static org.keycloak.services.managers.AuthenticationManager.KEYCLOAK_IDENTITY_COOKIE;",
          "21: import static org.keycloak.services.managers.AuthenticationManager.authenticateIdentityCookie;",
          "22: import static org.keycloak.utils.LockObjectsForModification.lockUserSessionsForModification;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import org.keycloak.protocol.RestartLoginCookie;",
          "43: import org.keycloak.services.ErrorPage;",
          "44: import org.keycloak.services.ServicesLogger;",
          "45: import org.keycloak.services.managers.AuthenticationSessionManager;",
          "46: import org.keycloak.services.managers.ClientSessionCode;",
          "47: import org.keycloak.services.messages.Messages;",
          "48: import org.keycloak.services.util.BrowserHistoryHelper;",
          "49: import org.keycloak.services.util.AuthenticationFlowURLHelper;",
          "50: import org.keycloak.sessions.AuthenticationSessionModel;",
          "51: import org.keycloak.sessions.RootAuthenticationSessionModel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import org.keycloak.services.managers.AuthenticationManager;",
          "55: import org.keycloak.services.util.CookieHelper;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:         UserSessionModel userSession = authSessionManager.getUserSessionFromAuthCookie(realm);",
          "181:         if (userSession != null) {",
          "182:             LoginFormsProvider loginForm = session.getProvider(LoginFormsProvider.class).setAuthenticationSession(authSession)",
          "183:                     .setSuccess(Messages.ALREADY_LOGGED_IN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:         if (userSession == null) {",
          "189:             AuthenticationManager.AuthResult authResult = lockUserSessionsForModification(session, () -> authenticateIdentityCookie(session, realm, false));",
          "191:             if (authResult != null) {",
          "192:                 userSession = authResult.getSession();",
          "193:             }",
          "194:         }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:         checkRedirectUri(\"http://localhost:8280/foo/bar\", true, true);",
          "338:         checkRedirectUri(\"http://example.com/foobar\", false);",
          "339:         checkRedirectUri(\"http://localhost:8280/foobar\", false, true);",
          "340:     }",
          "342:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:         checkRedirectUri(\"http://example.com/foo/../\", false);",
          "342:         checkRedirectUri(\"http://example.com/foo/%2E%2E/\", false); // url-encoded \"http://example.com/foobar/../\"",
          "343:         checkRedirectUri(\"http://example.com/foo%2F%2E%2E%2F\", false); // url-encoded \"http://example.com/foobar/../\"",
          "344:         checkRedirectUri(\"http://example.com/foo/%252E%252E/\", false); // double-encoded \"http://example.com/foobar/../\"",
          "345:         checkRedirectUri(\"http://example.com/foo/%252E%252E/?some_query_param=some_value\", false); // double-encoded \"http://example.com/foobar/../?some_query_param=some_value\"",
          "346:         checkRedirectUri(\"http://example.com/foo/%252E%252E/?encodeTest=a%3Cb\", false); // double-encoded \"http://example.com/foobar/../?encodeTest=a<b\"",
          "347:         checkRedirectUri(\"http://example.com/foo/%252E%252E/#encodeTest=a%3Cb\", false); // double-encoded \"http://example.com/foobar/../?encodeTest=a<b\"",
          "348:         checkRedirectUri(\"http://example.com/foo/%25252E%25252E/\", false); // triple-encoded \"http://example.com/foobar/../\"",
          "349:         checkRedirectUri(\"http://example.com/foo/%2525252525252E%2525252525252E/\", false); // seventh-encoded \"http://example.com/foobar/../\"",
          "351:         checkRedirectUri(\"http://example.com/foo?encodeTest=a%3Cb\", true);",
          "352:         checkRedirectUri(\"http://example.com/foo?encodeTest=a%3Cb#encode2=a%3Cb\", true);",
          "353:         checkRedirectUri(\"http://example.com/foo/#encode2=a%3Cb\", true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:         oauth.clientId(\"test-relative-url\");",
          "383:         checkRedirectUri(\"http://with-dash.example.local/foo\", false);",
          "385:     }",
          "387:     @Test",
          "",
          "[Removed Lines]",
          "384:         checkRedirectUri(\"http://localhost:8180/auth\", true);",
          "",
          "[Added Lines]",
          "398:         checkRedirectUri(OAuthClient.AUTH_SERVER_ROOT, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455:             if (!checkCodeToToken) {",
          "456:                 oauth.openLoginForm();",
          "457:                 Assert.assertTrue(loginPage.isCurrent());",
          "458:             } else {",
          "459:                 oauth.doLogin(\"test-user@localhost\", \"password\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:                 Assert.assertFalse(errorPage.isCurrent());",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RPInitiatedLogoutTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RPInitiatedLogoutTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RPInitiatedLogoutTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RPInitiatedLogoutTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:         driver.navigate().to(logoutUrl);",
          "239:         logoutConfirmPage.assertCurrent();",
          "240:         logoutConfirmPage.confirmLogout();",
          "242:         MatcherAssert.assertThat(false, is(isSessionActive(sessionId2)));",
          "243:         assertCurrentUrlEquals(redirectUri + \"&state=something\");",
          "244:     }",
          "",
          "[Removed Lines]",
          "241:         events.expectLogout(sessionId2).detail(Details.REDIRECT_URI, redirectUri).assertEvent();",
          "",
          "[Added Lines]",
          "241:         events.expectLogoutError(Errors.SESSION_EXPIRED);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:             appPage.assertCurrent();",
          "265:             MatcherAssert.assertThat(false, is(isSessionActive(tokenResponse.getSessionState())));",
          "",
          "[Removed Lines]",
          "264:             events.assertEmpty();",
          "",
          "[Added Lines]",
          "264:             events.expectLogoutError(Errors.SESSION_EXPIRED);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "319:         String logoutUrl = oauth.getLogoutUrl().postLogoutRedirectUri(APP_REDIRECT_URI).idTokenHint(idTokenString).build();",
          "320:         driver.navigate().to(logoutUrl);",
          "322:         assertCurrentUrlEquals(APP_REDIRECT_URI);",
          "",
          "[Removed Lines]",
          "321:         events.assertEmpty();",
          "",
          "[Added Lines]",
          "321:         events.expectLogoutError(Errors.SESSION_EXPIRED);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378:             assertThat(response, Matchers.statusCodeIsHC(Response.Status.FOUND));",
          "379:             assertThat(response.getFirstHeader(HttpHeaders.LOCATION).getValue(), is(APP_REDIRECT_URI));",
          "380:         }",
          "383:         MatcherAssert.assertThat(false, is(isSessionActive(tokenResponse.getSessionState())));",
          "384:     }",
          "",
          "[Removed Lines]",
          "381:         events.assertEmpty();",
          "",
          "[Added Lines]",
          "381:         events.expectLogoutError(Errors.SESSION_EXPIRED);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "401:             assertThat(response, Matchers.statusCodeIsHC(Response.Status.FOUND));",
          "402:             assertThat(response.getFirstHeader(HttpHeaders.LOCATION).getValue(), is(APP_REDIRECT_URI));",
          "403:         }",
          "406:         MatcherAssert.assertThat(false, is(isSessionActive(tokenResponse.getSessionState())));",
          "407:     }",
          "",
          "[Removed Lines]",
          "404:         events.assertEmpty();",
          "",
          "[Added Lines]",
          "404:         events.expectLogoutError(Errors.SESSION_EXPIRED);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "932:         errorPage.assertCurrent();",
          "933:         Assert.assertEquals(\"Logout failed\", errorPage.getError());",
          "936:     }",
          "",
          "[Removed Lines]",
          "935:         events.expectLogoutError(Errors.SESSION_EXPIRED).assertEvent();",
          "",
          "[Added Lines]",
          "935:         events.expectLogoutError(Errors.LOGOUT_FAILED).assertEvent();",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.keycloak.testsuite.oauth;",
          "19: import com.fasterxml.jackson.databind.JsonNode;",
          "20: import org.hamcrest.CoreMatchers;",
          "21: import org.jboss.arquillian.graphene.page.Page;",
          "22: import org.junit.Assert;",
          "23: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import com.gargoylesoftware.htmlunit.WebClient;",
          "22: import org.jboss.arquillian.drone.webdriver.htmlunit.DroneHtmlUnitDriver;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.keycloak.OAuthErrorException;",
          "28: import org.keycloak.admin.client.resource.ClientResource;",
          "29: import org.keycloak.admin.client.resource.RealmResource;",
          "30: import org.keycloak.admin.client.resource.UserResource;",
          "31: import org.keycloak.common.enums.SslRequired;",
          "32: import org.keycloak.crypto.Algorithm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.keycloak.admin.client.resource.RealmsResource;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36: import org.keycloak.jose.jws.JWSInput;",
          "37: import org.keycloak.models.RealmModel;",
          "38: import org.keycloak.models.UserModel;",
          "39: import org.keycloak.models.utils.SessionTimeoutHelper;",
          "40: import org.keycloak.protocol.oidc.OIDCConfigAttributes;",
          "41: import org.keycloak.protocol.oidc.OIDCLoginProtocol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import org.keycloak.models.utils.KeycloakModelUtils;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "47: import org.keycloak.representations.idm.EventRepresentation;",
          "48: import org.keycloak.representations.idm.RealmRepresentation;",
          "49: import org.keycloak.representations.idm.UserSessionRepresentation;",
          "50: import org.keycloak.testsuite.AbstractKeycloakTest;",
          "51: import org.keycloak.testsuite.AssertEvents;",
          "52: import org.keycloak.testsuite.admin.ApiUtil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: import org.keycloak.services.managers.AuthenticationSessionManager;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "59: import org.keycloak.testsuite.util.RealmBuilder;",
          "60: import org.keycloak.testsuite.util.RealmManager;",
          "61: import org.keycloak.testsuite.util.TokenSignatureUtil;",
          "62: import org.keycloak.testsuite.util.UserInfoClientUtil;",
          "63: import org.keycloak.testsuite.util.UserManager;",
          "64: import org.keycloak.testsuite.util.WaitUtils;",
          "65: import org.keycloak.util.BasicAuthHelper;",
          "66: import org.keycloak.util.JsonSerialization;",
          "68: import javax.ws.rs.client.Client;",
          "69: import javax.ws.rs.client.Entity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: import org.keycloak.testsuite.util.UserBuilder;",
          "73: import org.openqa.selenium.Cookie;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "74: import javax.ws.rs.core.UriBuilder;",
          "75: import java.net.URI;",
          "76: import java.util.List;",
          "78: import static org.hamcrest.Matchers.allOf;",
          "79: import static org.hamcrest.Matchers.greaterThan;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: import java.util.concurrent.TimeUnit;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "83: import static org.hamcrest.MatcherAssert.assertThat;",
          "84: import static org.junit.Assert.assertEquals;",
          "85: import static org.junit.Assert.assertFalse;",
          "86: import static org.junit.Assert.assertNotNull;",
          "87: import static org.junit.Assert.assertNull;",
          "88: import static org.junit.Assert.assertTrue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: import static org.junit.Assert.assertNotEquals;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "283:         Assert.assertNotEquals(200, response.getStatusCode());",
          "284:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:     @Test",
          "296:     public void testDoNotResolveOfflineUserSessionIfAuthenticationSessionIsInvalidated() {",
          "297:         oauth.scope(\"offline_access\");",
          "298:         testDoNotResolveUserSessionIfAuthenticationSessionIsInvalidated();",
          "299:     }",
          "301:     @Test",
          "302:     public void testDoNotResolveUserSessionIfAuthenticationSessionIsInvalidated() {",
          "303:         String realmName = KeycloakModelUtils.generateId();",
          "304:         RealmsResource realmsResource = realmsResouce();",
          "305:         realmsResource.create(RealmBuilder.create().name(realmName).build());",
          "306:         RealmResource realmResource = realmsResource.realm(realmName);",
          "307:         RealmRepresentation realm = realmResource.toRepresentation();",
          "309:         try {",
          "310:             realm.setSsoSessionMaxLifespan((int) TimeUnit.MINUTES.toSeconds(2));",
          "311:             realm.setSsoSessionIdleTimeout((int) TimeUnit.MINUTES.toSeconds(2));",
          "312:             realm.setAccessTokenLifespan((int) TimeUnit.MINUTES.toSeconds(1));",
          "313:             realmResource.update(realm);",
          "315:             realmResource.clients().create(org.keycloak.testsuite.util.ClientBuilder.create()",
          "316:                     .clientId(\"public-client\")",
          "317:                     .redirectUris(\"*\")",
          "318:                     .publicClient()",
          "319:                     .build());",
          "321:             realmResource.users()",
          "322:                     .create(UserBuilder.create().username(\"alice\").password(\"alice\").addRoles(\"offline_access\").build());",
          "323:             realmResource.users()",
          "324:                     .create(UserBuilder.create().username(\"bob\").password(\"bob\").addRoles(\"offline_access\").build());",
          "326:             oauth.realm(realmName);",
          "327:             oauth.clientId(\"public-client\");",
          "329:             oauth.doLogin(\"alice\", \"alice\");",
          "330:             String aliceCode = oauth.getCurrentQuery().get(OAuth2Constants.CODE);",
          "331:             OAuthClient.AccessTokenResponse tokenResponse = oauth.doAccessTokenRequest(aliceCode, \"password\");",
          "332:             AccessToken aliceAt = oauth.verifyToken(tokenResponse.getAccessToken());",
          "334:             setTimeOffset((int) TimeUnit.MINUTES.toSeconds(2));",
          "336:             oauth.doLogin(\"bob\", \"bob\");",
          "337:             String bobCode = oauth.getCurrentQuery().get(OAuth2Constants.CODE);",
          "339:             assertNotEquals(aliceCode, bobCode);",
          "341:             tokenResponse = oauth.doAccessTokenRequest(bobCode, \"password\");",
          "342:             String refreshToken = tokenResponse.getRefreshToken();",
          "343:             tokenResponse = oauth.doRefreshTokenRequest(refreshToken, null);",
          "344:             AccessToken bobAt = oauth.verifyToken(tokenResponse.getAccessToken());",
          "346:             assertNotEquals(aliceAt.getSessionId(), bobAt.getSessionId());",
          "347:             assertEquals(\"bob\", bobAt.getPreferredUsername());",
          "348:         } finally {",
          "349:             setTimeOffset(0);",
          "351:             realm.setSsoSessionMaxLifespan(null);",
          "352:             realm.setSsoSessionIdleTimeout(null);",
          "353:             realm.setAccessTokenLifespan(null);",
          "354:             realmResource.update(realm);",
          "355:         }",
          "356:     }",
          "358:     @Test",
          "359:     public void testTimeoutWhenReUsingPreviousAuthenticationSession() {",
          "360:         String realmName = KeycloakModelUtils.generateId();",
          "361:         RealmsResource realmsResource = realmsResouce();",
          "362:         realmsResource.create(RealmBuilder.create().name(realmName).build());",
          "363:         RealmResource realmResource = realmsResource.realm(realmName);",
          "364:         RealmRepresentation realm = realmResource.toRepresentation();",
          "366:         try {",
          "367:             realm.setSsoSessionMaxLifespan((int) TimeUnit.MINUTES.toSeconds(2));",
          "368:             realm.setSsoSessionIdleTimeout((int) TimeUnit.MINUTES.toSeconds(2));",
          "369:             realm.setAccessTokenLifespan((int) TimeUnit.MINUTES.toSeconds(1));",
          "370:             realmResource.update(realm);",
          "372:             realmResource.clients().create(org.keycloak.testsuite.util.ClientBuilder.create()",
          "373:                     .clientId(\"public-client\")",
          "374:                     .redirectUris(\"*\")",
          "375:                     .publicClient()",
          "376:                     .build());",
          "378:             realmResource.users()",
          "379:                     .create(UserBuilder.create().username(\"alice\").password(\"alice\").addRoles(\"offline_access\").build());",
          "380:             realmResource.users()",
          "381:                     .create(UserBuilder.create().username(\"bob\").password(\"bob\").addRoles(\"offline_access\").build());",
          "383:             oauth.realm(realmName);",
          "384:             oauth.clientId(\"public-client\");",
          "386:             oauth.openLoginForm();",
          "388:             Cookie authSessionCookie = driver.manage().getCookieNamed(AuthenticationSessionManager.AUTH_SESSION_ID);",
          "390:             oauth.fillLoginForm(\"alice\", \"alice\");",
          "392:             String aliceCode = oauth.getCurrentQuery().get(OAuth2Constants.CODE);",
          "393:             WebClient webClient = DroneHtmlUnitDriver.class.cast(driver).getWebClient();",
          "394:             webClient.getCookieManager().clearCookies();",
          "395:             oauth.openLoginForm();",
          "396:             driver.manage().addCookie(authSessionCookie);",
          "397:             oauth.fillLoginForm(\"bob\", \"bob\");",
          "398:             assertEquals(\"Your login attempt timed out. Login will start from the beginning.\", loginPage.getError());",
          "399:         } finally {",
          "400:             setTimeOffset(0);",
          "402:             realm.setSsoSessionMaxLifespan(null);",
          "403:             realm.setSsoSessionIdleTimeout(null);",
          "404:             realm.setAccessTokenLifespan(null);",
          "405:             realmResource.update(realm);",
          "406:         }",
          "407:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}