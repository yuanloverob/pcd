{
  "cve_id": "CVE-2022-22976",
  "cve_desc": "Spring Security versions 5.5.x prior to 5.5.7, 5.6.x prior to 5.6.4, and earlier unsupported versions contain an integer overflow vulnerability. When using the BCrypt class with the maximum work factor (31), the encoder does not perform any salt rounds, due to an integer overflow error. The default settings are not affected by this CVE.",
  "repo": "spring-projects/spring-security",
  "patch_hash": "388a7b62b906bd56deadb7ca45248fa1a63bdf12",
  "patch_info": {
    "commit_hash": "388a7b62b906bd56deadb7ca45248fa1a63bdf12",
    "repo": "spring-projects/spring-security",
    "commit_url": "https://github.com/spring-projects/spring-security/commit/388a7b62b906bd56deadb7ca45248fa1a63bdf12",
    "files": [
      "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
      "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.java",
      "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
      "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
    ],
    "message": "Add BCrypt Revision Support\n\nFixes: gh-3320",
    "before_after_code_files": [
      "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
      "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.java",
      "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
      "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
    ]
  },
  "patch_diff": {
    "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java": [
      "File: crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java -> crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: package org.springframework.security.crypto.bcrypt;",
      "17: import java.io.UnsupportedEncodingException;",
      "19: import java.security.SecureRandom;",
      "60: public class BCrypt {",
      "63:  private static final int GENSALT_DEFAULT_LOG2_ROUNDS = 10;",
      "64:  private static final int BCRYPT_SALT_LEN = 16;",
      "66:  private static final int BLOWFISH_NUM_ROUNDS = 16;",
      "260:  static final int MIN_LOG_ROUNDS = 4;",
      "261:  static final int MAX_LOG_ROUNDS = 31;",
      "263:  private int P[];",
      "264:  private int S[];",
      "",
      "[Removed Lines]",
      "16: import java.io.ByteArrayOutputStream;",
      "68:  private static final int P_orig[] = { 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,",
      "69:    0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377,",
      "70:    0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,",
      "71:    0x9216d5d9, 0x8979fb1b };",
      "72:  private static final int S_orig[] = { 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7,",
      "73:    0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7,",
      "74:    0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e,",
      "75:    0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5,",
      "76:    0x9c30d539, 0x2af26013, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef,",
      "77:    0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27,",
      "78:    0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,",
      "79:    0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993,",
      "80:    0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e,",
      "81:    0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af,",
      "82:    0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032,",
      "83:    0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5,",
      "84:    0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e,",
      "85:    0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68,",
      "86:    0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98,",
      "87:    0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4,",
      "88:    0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,",
      "89:    0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248,",
      "90:    0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7,",
      "91:    0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4,",
      "92:    0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f,",
      "93:    0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd,",
      "94:    0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb,",
      "95:    0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc,",
      "96:    0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab,",
      "97:    0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0,",
      "98:    0x1a87562e, 0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,",
      "99:    0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8,",
      "100:    0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790,",
      "101:    0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01,",
      "102:    0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0,",
      "103:    0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64,",
      "104:    0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad,",
      "105:    0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8,",
      "106:    0x18acf3d6, 0xce89e299, 0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9,",
      "107:    0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86,",
      "108:    0xc75442f5, 0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,",
      "109:    0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e,",
      "110:    0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5,",
      "111:    0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a,",
      "112:    0x1b510052, 0x9a532915, 0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400,",
      "113:    0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6,",
      "114:    0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a,",
      "115:    0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d,",
      "116:    0x9cee60b8, 0x8fedb266, 0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,",
      "117:    0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65,",
      "118:    0x6b8fe4d6, 0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,",
      "119:    0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9,",
      "120:    0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,",
      "121:    0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d,",
      "122:    0xf01c1f04, 0x0200b3ff, 0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,",
      "123:    0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc,",
      "124:    0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,",
      "125:    0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908,",
      "126:    0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,",
      "127:    0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124,",
      "128:    0x501adde6, 0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,",
      "129:    0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908,",
      "130:    0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,",
      "131:    0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b,",
      "132:    0x3c11183b, 0x5924a509, 0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,",
      "133:    0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa,",
      "134:    0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,",
      "135:    0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d,",
      "136:    0x1939260f, 0x19c27960, 0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,",
      "137:    0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5,",
      "138:    0x65582185, 0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,",
      "139:    0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96,",
      "140:    0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,",
      "141:    0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca,",
      "142:    0xa02369b9, 0x655abb50, 0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,",
      "143:    0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77,",
      "144:    0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,",
      "145:    0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054,",
      "146:    0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,",
      "147:    0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea,",
      "148:    0xdb6c4f15, 0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,",
      "149:    0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646,",
      "150:    0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,",
      "151:    0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea,",
      "152:    0x1dadf43e, 0x233f7061, 0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,",
      "153:    0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e,",
      "154:    0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,",
      "155:    0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd,",
      "156:    0x675fda79, 0xe3674340, 0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,",
      "157:    0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7,",
      "158:    0xf64c261c, 0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,",
      "159:    0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e, 0x97244546,",
      "160:    0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45,",
      "161:    0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504, 0x96eb27b3, 0x55fd3941,",
      "162:    0xda2547e6, 0xabca0a9a, 0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb,",
      "163:    0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c,",
      "164:    0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42,",
      "165:    0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b, 0x1dc9faf7, 0x4b6d1856,",
      "166:    0x26a36631, 0xeae397b2, 0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb,",
      "167:    0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87,",
      "168:    0xfe6ba9b7, 0xd096954b, 0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,",
      "169:    0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802, 0x04272f70,",
      "170:    0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc,",
      "171:    0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17, 0x325f51eb, 0xd59bc0d1,",
      "172:    0xf2bcc18f, 0x41113564, 0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b,",
      "173:    0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1,",
      "174:    0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728,",
      "175:    0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0, 0x5449a36f, 0x877d48fa,",
      "176:    0xc39dfd27, 0xf33e8d1e, 0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37,",
      "177:    0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37,",
      "178:    0x2765d43b, 0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,",
      "179:    0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88, 0x515bad24,",
      "180:    0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d,",
      "181:    0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c, 0x6a124237, 0xb79251e7,",
      "182:    0x06a1bbe6, 0x4bfb6350, 0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9,",
      "183:    0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f,",
      "184:    0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d,",
      "185:    0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc, 0x83426b33, 0xf01eab71,",
      "186:    0xb0804187, 0x3c005e5f, 0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61,",
      "187:    0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74,",
      "188:    0xb475f255, 0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,",
      "189:    0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1, 0xbb8205d0,",
      "190:    0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633,",
      "191:    0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df,",
      "192:    0xa186f20f, 0x2868f169, 0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52,",
      "193:    0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641,",
      "194:    0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62,",
      "195:    0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634, 0xbbcbee56, 0x90bcb6de,",
      "196:    0xebfc7da1, 0xce591d76, 0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24,",
      "197:    0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5,",
      "198:    0xd83d7cd3, 0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,",
      "199:    0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234, 0x92638212,",
      "200:    0x670efa8e, 0x406000e0, 0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b,",
      "201:    0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315,",
      "202:    0xd62d1c7e, 0xc700c47b, 0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4,",
      "203:    0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d,",
      "204:    0xd5730a1d, 0x4cd04dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304,",
      "205:    0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6,",
      "206:    0xa51e03aa, 0x9cf2d0a4, 0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6,",
      "207:    0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da,",
      "208:    0x3f046f69, 0x77fa0a59, 0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,",
      "209:    0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d,",
      "210:    0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c,",
      "211:    0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc,",
      "212:    0xf8d56629, 0x79132e28, 0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c,",
      "213:    0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2,",
      "214:    0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319,",
      "215:    0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8,",
      "216:    0xabcc5167, 0xccad925f, 0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991,",
      "217:    0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46,",
      "218:    0x48de5369, 0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,",
      "219:    0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40,",
      "220:    0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5,",
      "221:    0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e,",
      "222:    0xaec2771b, 0xf64e6370, 0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d,",
      "223:    0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d,",
      "224:    0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8,",
      "225:    0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b,",
      "226:    0x2f32c9b7, 0xa01fbac9, 0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7,",
      "227:    0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667,",
      "228:    0x8df9317c, 0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,",
      "229:    0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb,",
      "230:    0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442,",
      "231:    0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df,",
      "232:    0xd3a0342b, 0x8971f21e, 0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8,",
      "233:    0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891,",
      "234:    0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299,",
      "235:    0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5,",
      "236:    0x6e163697, 0x88d273cc, 0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614,",
      "237:    0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00,",
      "238:    0xbb25bfe2, 0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,",
      "239:    0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76,",
      "240:    0x77afa1c5, 0x20756060, 0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e,",
      "241:    0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0,",
      "242:    0x3f09252d, 0xc208e69f, 0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6 };",
      "244:  static private final int bf_crypt_ciphertext[] = { 0x4f727068, 0x65616e42,",
      "245:    0x65686f6c, 0x64657253, 0x63727944, 0x6f756274 };",
      "247:  static private final char base64_code[] = { '.', '/', 'A', 'B', 'C', 'D', 'E', 'F',",
      "248:    'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',",
      "249:    'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',",
      "250:    'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',",
      "251:    'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };",
      "253:  static private final byte index_64[] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
      "254:    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
      "255:    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 54, 55,",
      "256:    56, 57, 58, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 6, 7,",
      "257:    8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,",
      "258:    -1, -1, -1, -1, -1, -1, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,",
      "259:    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1 };",
      "",
      "[Added Lines]",
      "17: import java.util.Arrays;",
      "72:  private static final int P_orig[] = {",
      "73:    0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,",
      "74:    0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,",
      "75:    0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,",
      "76:    0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,",
      "77:    0x9216d5d9, 0x8979fb1b",
      "78:  };",
      "79:  private static final int S_orig[] = {",
      "80:    0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7,",
      "81:    0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99,",
      "82:    0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,",
      "83:    0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e,",
      "84:    0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,",
      "85:    0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,",
      "86:    0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef,",
      "87:    0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e,",
      "88:    0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,",
      "89:    0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,",
      "90:    0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce,",
      "91:    0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,",
      "92:    0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e,",
      "93:    0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677,",
      "94:    0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,",
      "95:    0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032,",
      "96:    0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88,",
      "97:    0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,",
      "98:    0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e,",
      "99:    0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,",
      "100:    0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,",
      "101:    0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98,",
      "102:    0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88,",
      "103:    0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,",
      "104:    0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,",
      "105:    0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d,",
      "106:    0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,",
      "107:    0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7,",
      "108:    0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba,",
      "109:    0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,",
      "110:    0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f,",
      "111:    0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09,",
      "112:    0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,",
      "113:    0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb,",
      "114:    0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,",
      "115:    0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,",
      "116:    0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab,",
      "117:    0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82,",
      "118:    0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,",
      "119:    0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,",
      "120:    0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0,",
      "121:    0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,",
      "122:    0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790,",
      "123:    0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8,",
      "124:    0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,",
      "125:    0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0,",
      "126:    0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7,",
      "127:    0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,",
      "128:    0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad,",
      "129:    0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,",
      "130:    0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,",
      "131:    0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9,",
      "132:    0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477,",
      "133:    0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,",
      "134:    0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,",
      "135:    0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af,",
      "136:    0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,",
      "137:    0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5,",
      "138:    0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41,",
      "139:    0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,",
      "140:    0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400,",
      "141:    0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915,",
      "142:    0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,",
      "143:    0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a,",
      "144:    0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,",
      "145:    0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,",
      "146:    0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,",
      "147:    0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e,",
      "148:    0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,",
      "149:    0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,",
      "150:    0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e,",
      "151:    0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,",
      "152:    0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,",
      "153:    0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8,",
      "154:    0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,",
      "155:    0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,",
      "156:    0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701,",
      "157:    0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,",
      "158:    0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,",
      "159:    0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,",
      "160:    0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,",
      "161:    0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,",
      "162:    0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e,",
      "163:    0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,",
      "164:    0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,",
      "165:    0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2,",
      "166:    0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,",
      "167:    0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,",
      "168:    0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b,",
      "169:    0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,",
      "170:    0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,",
      "171:    0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3,",
      "172:    0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,",
      "173:    0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,",
      "174:    0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,",
      "175:    0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,",
      "176:    0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,",
      "177:    0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28,",
      "178:    0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,",
      "179:    0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,",
      "180:    0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510,",
      "181:    0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,",
      "182:    0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,",
      "183:    0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e,",
      "184:    0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,",
      "185:    0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,",
      "186:    0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8,",
      "187:    0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,",
      "188:    0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,",
      "189:    0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,",
      "190:    0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,",
      "191:    0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,",
      "192:    0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0,",
      "193:    0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,",
      "194:    0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,",
      "195:    0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250,",
      "196:    0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,",
      "197:    0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,",
      "198:    0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00,",
      "199:    0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,",
      "200:    0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,",
      "201:    0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e,",
      "202:    0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,",
      "203:    0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,",
      "204:    0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,",
      "205:    0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,",
      "206:    0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,",
      "207:    0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7,",
      "208:    0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,",
      "209:    0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,",
      "210:    0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,",
      "211:    0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,",
      "212:    0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45,",
      "213:    0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,",
      "214:    0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,",
      "215:    0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb,",
      "216:    0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,",
      "217:    0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,",
      "218:    0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42,",
      "219:    0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,",
      "220:    0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,",
      "221:    0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb,",
      "222:    0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,",
      "223:    0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,",
      "224:    0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,",
      "225:    0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,",
      "226:    0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,",
      "227:    0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc,",
      "228:    0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,",
      "229:    0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,",
      "230:    0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b,",
      "231:    0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,",
      "232:    0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,",
      "233:    0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728,",
      "234:    0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,",
      "235:    0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,",
      "236:    0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37,",
      "237:    0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,",
      "238:    0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,",
      "239:    0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,",
      "240:    0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,",
      "241:    0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,",
      "242:    0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d,",
      "243:    0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,",
      "244:    0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,",
      "245:    0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9,",
      "246:    0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,",
      "247:    0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,",
      "248:    0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d,",
      "249:    0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,",
      "250:    0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,",
      "251:    0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61,",
      "252:    0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,",
      "253:    0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,",
      "254:    0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,",
      "255:    0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,",
      "256:    0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,",
      "257:    0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633,",
      "258:    0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,",
      "259:    0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,",
      "260:    0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52,",
      "261:    0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,",
      "262:    0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,",
      "263:    0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62,",
      "264:    0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,",
      "265:    0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,",
      "266:    0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24,",
      "267:    0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,",
      "268:    0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,",
      "269:    0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,",
      "270:    0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,",
      "271:    0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0,",
      "272:    0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b,",
      "273:    0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe,",
      "274:    0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,",
      "275:    0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4,",
      "276:    0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8,",
      "277:    0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,",
      "278:    0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304,",
      "279:    0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,",
      "280:    0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,",
      "281:    0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6,",
      "282:    0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9,",
      "283:    0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,",
      "284:    0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,",
      "285:    0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51,",
      "286:    0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,",
      "287:    0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c,",
      "288:    0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b,",
      "289:    0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,",
      "290:    0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c,",
      "291:    0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd,",
      "292:    0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,",
      "293:    0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319,",
      "294:    0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,",
      "295:    0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,",
      "296:    0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991,",
      "297:    0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32,",
      "298:    0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,",
      "299:    0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,",
      "300:    0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae,",
      "301:    0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,",
      "302:    0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5,",
      "303:    0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47,",
      "304:    0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,",
      "305:    0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d,",
      "306:    0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84,",
      "307:    0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,",
      "308:    0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8,",
      "309:    0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,",
      "310:    0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,",
      "311:    0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7,",
      "312:    0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38,",
      "313:    0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,",
      "314:    0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,",
      "315:    0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525,",
      "316:    0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,",
      "317:    0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442,",
      "318:    0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964,",
      "319:    0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,",
      "320:    0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8,",
      "321:    0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d,",
      "322:    0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,",
      "323:    0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299,",
      "324:    0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,",
      "325:    0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,",
      "326:    0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614,",
      "327:    0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a,",
      "328:    0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,",
      "329:    0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,",
      "330:    0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0,",
      "331:    0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,",
      "332:    0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e,",
      "333:    0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9,",
      "334:    0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,",
      "335:    0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6",
      "336:  };",
      "339:  static private final int bf_crypt_ciphertext[] = {",
      "340:    0x4f727068, 0x65616e42, 0x65686f6c,",
      "341:    0x64657253, 0x63727944, 0x6f756274",
      "342:  };",
      "345:  static private final char base64_code[] = {",
      "346:    '.', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',",
      "347:    'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',",
      "348:    'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',",
      "349:    'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',",
      "350:    'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5',",
      "351:    '6', '7', '8', '9'",
      "352:  };",
      "355:  static private final byte index_64[] = {",
      "356:    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
      "357:    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
      "358:    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
      "359:    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
      "360:    -1, -1, -1, -1, -1, -1, 0, 1, 54, 55,",
      "361:    56, 57, 58, 59, 60, 61, 62, 63, -1, -1,",
      "362:    -1, -1, -1, -1, -1, 2, 3, 4, 5, 6,",
      "363:    7, 8, 9, 10, 11, 12, 13, 14, 15, 16,",
      "364:    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,",
      "365:    -1, -1, -1, -1, -1, -1, 28, 29, 30,",
      "366:    31, 32, 33, 34, 35, 36, 37, 38, 39, 40,",
      "367:    41, 42, 43, 44, 45, 46, 47, 48, 49, 50,",
      "368:    51, 52, 53, -1, -1, -1, -1, -1",
      "369:  };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "306:  }",
      "314:  private static byte char64(char x) {",
      "316:    return -1;",
      "319:  }",
      "331:   int off = 0, slen = s.length(), olen = 0;",
      "332:   byte c1, c2, c3, c4, o;",
      "338:   while (off < slen - 1 && olen < maxolen) {",
      "339:    c1 = char64(s.charAt(off++));",
      "340:    c2 = char64(s.charAt(off++));",
      "342:     break;",
      "344:    o = (byte) (c1 << 2);",
      "345:    o |= (c2 & 0x30) >> 4;",
      "348:     break;",
      "350:    c3 = char64(s.charAt(off++));",
      "352:     break;",
      "354:    o = (byte) ((c2 & 0x0f) << 4);",
      "355:    o |= (c3 & 0x3c) >> 2;",
      "358:     break;",
      "360:    c4 = char64(s.charAt(off++));",
      "361:    o = (byte) ((c3 & 0x03) << 6);",
      "362:    o |= c4;",
      "364:    ++olen;",
      "365:   }",
      "368:  }",
      "375:  private final void encipher(int lr[], int off) {",
      "376:   int i, n, l = lr[off], r = lr[off + 1];",
      "",
      "[Removed Lines]",
      "315:   if (x > index_64.length) {",
      "317:   }",
      "318:   return index_64[x];",
      "329:  static byte[] decode_base64(String s, int maxolen) throws IllegalArgumentException {",
      "330:   ByteArrayOutputStream out = new ByteArrayOutputStream(maxolen);",
      "334:   if (maxolen <= 0) {",
      "335:    throw new IllegalArgumentException(\"Invalid maxolen\");",
      "336:   }",
      "341:    if (c1 == -1 || c2 == -1) {",
      "343:    }",
      "346:    out.write(o);",
      "347:    if (++olen >= maxolen || off >= slen) {",
      "349:    }",
      "351:    if (c3 == -1) {",
      "353:    }",
      "356:    out.write(o);",
      "357:    if (++olen >= maxolen || off >= slen) {",
      "359:    }",
      "363:    out.write(o);",
      "367:   return out.toByteArray();",
      "",
      "[Added Lines]",
      "426:   if ((int) x < 0 || (int) x >= index_64.length)",
      "428:   return index_64[(int) x];",
      "440:  static byte[] decode_base64(String s, int maxolen)",
      "441:    throws IllegalArgumentException {",
      "442:   StringBuilder rs = new StringBuilder();",
      "444:   byte ret[];",
      "447:   if (maxolen <= 0)",
      "448:    throw new IllegalArgumentException (\"Invalid maxolen\");",
      "453:    if (c1 == -1 || c2 == -1)",
      "457:    rs.append((char) o);",
      "458:    if (++olen >= maxolen || off >= slen)",
      "461:    if (c3 == -1)",
      "465:    rs.append((char) o);",
      "466:    if (++olen >= maxolen || off >= slen)",
      "471:    rs.append((char) o);",
      "475:   ret = new byte[olen];",
      "476:   for (off = 0; off < olen; off++)",
      "477:    ret[off] = (byte) rs.charAt(off);",
      "478:   return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "405:   int i;",
      "407:   int off = offp[0];",
      "409:   for (i = 0; i < 4; i++) {",
      "411:    off = (off + 1) % data.length;",
      "412:   }",
      "414:   offp[0] = off;",
      "416:  }",
      "421:  private void init_key() {",
      "424:  }",
      "431:   int i;",
      "432:   int koffp[] = { 0 };",
      "433:   int lr[] = { 0, 0 };",
      "434:   int plen = P.length, slen = S.length;",
      "440:   for (i = 0; i < plen; i += 2) {",
      "441:    encipher(lr, 0);",
      "",
      "[Removed Lines]",
      "404:  private static int streamtoword(byte data[], int offp[]) {",
      "406:   int word = 0;",
      "410:    word = (word << 8) | (data[off] & 0xff);",
      "415:   return word;",
      "422:   P = (int[]) P_orig.clone();",
      "423:   S = (int[]) S_orig.clone();",
      "430:  private void key(byte key[]) {",
      "436:   for (i = 0; i < plen; i++) {",
      "437:    P[i] = P[i] ^ streamtoword(key, koffp);",
      "438:   }",
      "",
      "[Added Lines]",
      "519:  private static int[] streamtowords(byte data[], int offp[], int signp[]) {",
      "521:   int words[] = { 0, 0 };",
      "523:   int sign = signp[0];",
      "526:    words[0] = (words[0] << 8) | (data[off] & 0xff);",
      "527:    words[1] = (words[1] << 8) | (int) data[off]; // sign extension bug",
      "528:    if (i > 0) sign |= words[1] & 0x80;",
      "533:   signp[0] = sign;",
      "534:   return words;",
      "535:  }",
      "544:  private static int streamtoword(byte data[], int offp[]) {",
      "545:   int signp[] = { 0 };",
      "546:   return streamtowords(data, offp, signp)[0];",
      "547:  }",
      "556:  private static int streamtoword_bug(byte data[], int offp[]) {",
      "557:   int signp[] = { 0 };",
      "558:   return streamtowords(data, offp, signp)[1];",
      "565:   P = P_orig.clone();",
      "566:   S = S_orig.clone();",
      "575:  private void key(byte key[], boolean sign_ext_bug, int safety) {",
      "581:   for (i = 0; i < plen; i++)",
      "582:    if (!sign_ext_bug)",
      "583:     P[i] = P[i] ^ streamtoword(key, koffp);",
      "584:    else",
      "585:     P[i] = P[i] ^ streamtoword_bug(key, koffp);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "451:  }",
      "460:   int i;",
      "461:   int koffp[] = { 0 }, doffp[] = { 0 };",
      "462:   int lr[] = { 0, 0 };",
      "463:   int plen = P.length, slen = S.length;",
      "465:   for (i = 0; i < plen; i++) {",
      "469:   for (i = 0; i < plen; i += 2) {",
      "470:    lr[0] ^= streamtoword(data, doffp);",
      "",
      "[Removed Lines]",
      "459:  private void ekskey(byte data[], byte key[]) {",
      "466:    P[i] = P[i] ^ streamtoword(key, koffp);",
      "467:   }",
      "",
      "[Added Lines]",
      "609:  private void ekskey(byte data[], byte key[],",
      "610:       boolean sign_ext_bug, int safety) {",
      "615:   int signp[] = { 0 }; // non-benign sign-extension flag",
      "616:   int diff = 0;        // zero iff correct and buggy are same",
      "619:    int words[] = streamtowords(key, koffp, signp);",
      "620:    diff |= words[0] ^ words[1];",
      "621:    P[i] = P[i] ^ words[sign_ext_bug ? 1 : 0];",
      "622:   }",
      "624:   int sign = signp[0];",
      "652:   P[0] ^= sign;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "491:  }",
      "502:   int clen = cdata.length;",
      "503:   byte ret[];",
      "507:   init_key();",
      "512:   }",
      "516:     encipher(cdata, j << 1);",
      "518:   }",
      "520:   ret = new byte[clen * 4];",
      "522:    ret[j++] = (byte) ((cdata[i] >> 24) & 0xff);",
      "523:    ret[j++] = (byte) ((cdata[i] >> 16) & 0xff);",
      "524:    ret[j++] = (byte) ((cdata[i] >> 8) & 0xff);",
      "",
      "[Removed Lines]",
      "500:  private byte[] crypt_raw(byte password[], byte salt[], int log_rounds) {",
      "501:   int cdata[] = (int[]) bf_crypt_ciphertext.clone();",
      "505:   long rounds = roundsForLogRounds(log_rounds);",
      "508:   ekskey(salt, password);",
      "509:   for (long i = 0; i < rounds; i++) {",
      "510:    key(password);",
      "511:    key(salt);",
      "514:   for (int i = 0; i < 64; i++) {",
      "515:    for (int j = 0; j < (clen >> 1); j++) {",
      "517:    }",
      "521:   for (int i = 0, j = 0; i < clen; i++) {",
      "",
      "[Added Lines]",
      "689:  private byte[] crypt_raw(byte password[], byte salt[], int log_rounds,",
      "690:         boolean sign_ext_bug, int safety) {",
      "691:   int rounds, i, j;",
      "692:   int cdata[] =  bf_crypt_ciphertext.clone();",
      "696:   if (log_rounds < 4 || log_rounds > 31)",
      "697:    throw new IllegalArgumentException (\"Bad number of rounds\");",
      "698:   rounds = 1 << log_rounds;",
      "699:   if (salt.length != BCRYPT_SALT_LEN)",
      "700:    throw new IllegalArgumentException (\"Bad salt length\");",
      "703:   ekskey(salt, password, sign_ext_bug, safety);",
      "704:   for (i = 0; i < rounds; i++) {",
      "705:    key(password, sign_ext_bug, safety);",
      "706:    key(salt, false, safety);",
      "709:   for (i = 0; i < 64; i++) {",
      "710:    for (j = 0; j < (clen >> 1); j++)",
      "715:   for (i = 0, j = 0; i < clen; i++) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "538:   BCrypt B;",
      "539:   String real_salt;",
      "541:   char minor = (char) 0;",
      "543:   StringBuilder rs = new StringBuilder();",
      "545:   if (salt == null) {",
      "",
      "[Removed Lines]",
      "537:  public static String hashpw(String password, String salt) throws IllegalArgumentException {",
      "540:   byte passwordb[], saltb[], hashed[];",
      "542:   int rounds, off = 0;",
      "",
      "[Added Lines]",
      "731:  public static String hashpw(String password, String salt) {",
      "732:   byte passwordb[];",
      "734:   try {",
      "735:    passwordb = password.getBytes(\"UTF-8\");",
      "736:   } catch (UnsupportedEncodingException uee) {",
      "737:    throw new AssertionError(\"UTF-8 is not supported\");",
      "738:   }",
      "740:   return hashpw(passwordb, salt);",
      "741:  }",
      "750:  public static String hashpw(byte passwordb[], String salt) {",
      "753:   byte saltb[], hashed[];",
      "755:   int rounds, off;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "552:    throw new IllegalArgumentException(\"Invalid salt\");",
      "553:   }",
      "559:    off = 3;",
      "561:   else {",
      "562:    minor = salt.charAt(2);",
      "566:    off = 4;",
      "567:   }",
      "577:   rounds = Integer.parseInt(salt.substring(off, off + 2));",
      "579:   real_salt = salt.substring(off + 3, off + 25);",
      "587:   saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);",
      "589:   B = new BCrypt();",
      "592:   rs.append(\"$2\");",
      "594:    rs.append(minor);",
      "596:   rs.append(\"$\");",
      "598:    rs.append(\"0\");",
      "600:   rs.append(rounds);",
      "601:   rs.append(\"$\");",
      "602:   encode_base64(saltb, saltb.length, rs);",
      "",
      "[Removed Lines]",
      "555:   if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {",
      "556:    throw new IllegalArgumentException(\"Invalid salt version\");",
      "557:   }",
      "558:   if (salt.charAt(2) == '$') {",
      "560:   }",
      "563:    if (minor != 'a' || salt.charAt(3) != '$') {",
      "564:     throw new IllegalArgumentException(\"Invalid salt revision\");",
      "565:    }",
      "569:   if (saltLength - off < 25) {",
      "570:    throw new IllegalArgumentException(\"Invalid salt\");",
      "571:   }",
      "574:   if (salt.charAt(off + 2) > '$') {",
      "575:    throw new IllegalArgumentException(\"Missing salt rounds\");",
      "576:   }",
      "580:   try {",
      "581:    passwordb = (password + (minor >= 'a' ? \"\\000\" : \"\")).getBytes(\"UTF-8\");",
      "582:   }",
      "583:   catch (UnsupportedEncodingException uee) {",
      "584:    throw new AssertionError(\"UTF-8 is not supported\");",
      "585:   }",
      "590:   hashed = B.crypt_raw(passwordb, saltb, rounds);",
      "593:   if (minor >= 'a') {",
      "595:   }",
      "597:   if (rounds < 10) {",
      "599:   }",
      "",
      "[Added Lines]",
      "768:   if (salt.charAt(0) != '$' || salt.charAt(1) != '2')",
      "769:    throw new IllegalArgumentException (\"Invalid salt version\");",
      "770:   if (salt.charAt(2) == '$')",
      "774:    if ((minor != 'a' && minor != 'x' && minor != 'y' && minor != 'b')",
      "775:      || salt.charAt(3) != '$')",
      "776:     throw new IllegalArgumentException (\"Invalid salt revision\");",
      "781:   if (salt.charAt(off + 2) > '$')",
      "782:    throw new IllegalArgumentException (\"Missing salt rounds\");",
      "788:   if (minor >= 'a') // add null terminator",
      "789:    passwordb = Arrays.copyOf(passwordb, passwordb.length + 1);",
      "792:   hashed = B.crypt_raw(passwordb, saltb, rounds, minor == 'x', minor == 'a' ? 0x10000 : 0);",
      "795:   if (minor >= 'a')",
      "798:   if (rounds < 10)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "618:   StringBuilder rs = new StringBuilder();",
      "619:   byte rnd[] = new byte[BCRYPT_SALT_LEN];",
      "621:   random.nextBytes(rnd);",
      "625:    rs.append(\"0\");",
      "627:   rs.append(log_rounds);",
      "628:   rs.append(\"$\");",
      "629:   encode_base64(rnd, rnd.length, rs);",
      "",
      "[Removed Lines]",
      "614:  public static String gensalt(int log_rounds, SecureRandom random) {",
      "615:   if (log_rounds < MIN_LOG_ROUNDS || log_rounds > MAX_LOG_ROUNDS) {",
      "616:    throw new IllegalArgumentException(\"Bad number of rounds\");",
      "617:   }",
      "623:   rs.append(\"$2a$\");",
      "624:   if (log_rounds < 10) {",
      "626:   }",
      "",
      "[Added Lines]",
      "817:  public static String gensalt(String prefix, int log_rounds, SecureRandom random)",
      "818:    throws IllegalArgumentException {",
      "822:   if (!prefix.startsWith(\"$2\") ||",
      "823:     (prefix.charAt(2) != 'a' && prefix.charAt(2) != 'y' &&",
      "824:       prefix.charAt(2) != 'b')) {",
      "825:    throw new IllegalArgumentException (\"Invalid prefix\");",
      "826:   }",
      "827:   if (log_rounds < 4 || log_rounds > 31) {",
      "828:    throw new IllegalArgumentException (\"Invalid log_rounds\");",
      "829:   }",
      "833:   rs.append(\"$2\");",
      "834:   rs.append(prefix.charAt(2));",
      "835:   rs.append(\"$\");",
      "836:   if (log_rounds < 10)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "640:   return gensalt(log_rounds, new SecureRandom());",
      "641:  }",
      "648:  public static String gensalt() {",
      "649:   return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);",
      "650:  }",
      "658:  public static boolean checkpw(String plaintext, String hashed) {",
      "659:   return equalsNoEarlyReturn(hashed, hashpw(plaintext, hashed));",
      "",
      "[Removed Lines]",
      "639:  public static String gensalt(int log_rounds) {",
      "",
      "[Added Lines]",
      "853:  public static String gensalt(String prefix, int log_rounds)",
      "854:    throws IllegalArgumentException {",
      "855:   return gensalt(prefix, log_rounds, new SecureRandom());",
      "856:  }",
      "867:  public static String gensalt(int log_rounds, SecureRandom random)",
      "868:    throws IllegalArgumentException {",
      "869:   return gensalt(\"$2a\", log_rounds, random);",
      "870:  }",
      "880:  public static String gensalt(int log_rounds)",
      "881:    throws IllegalArgumentException {",
      "885:  public static String gensalt(String prefix) {",
      "886:   return gensalt(prefix, GENSALT_DEFAULT_LOG2_ROUNDS);",
      "887:  }",
      "",
      "---------------"
    ],
    "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.java": [
      "File: crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.java -> crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: public class BCryptPasswordEncoder implements PasswordEncoder {",
      "35:  private Pattern BCRYPT_PATTERN = Pattern",
      "37:  private final Log logger = LogFactory.getLog(getClass());",
      "39:  private final int strength;",
      "41:  private final SecureRandom random;",
      "43:  public BCryptPasswordEncoder() {",
      "44:   this(-1);",
      "45:  }",
      "",
      "[Removed Lines]",
      "36:    .compile(\"\\\\A\\\\$2a?\\\\$\\\\d\\\\d\\\\$[./0-9A-Za-z]{53}\");",
      "",
      "[Added Lines]",
      "35:    .compile(\"\\\\A\\\\$2(a|y|b)?\\\\$\\\\d\\\\d\\\\$[./0-9A-Za-z]{53}\");",
      "39:  private final BCryptVersion version;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "51:   this(strength, null);",
      "52:  }",
      "59:  public BCryptPasswordEncoder(int strength, SecureRandom random) {",
      "60:   if (strength != -1 && (strength < BCrypt.MIN_LOG_ROUNDS || strength > BCrypt.MAX_LOG_ROUNDS)) {",
      "61:    throw new IllegalArgumentException(\"Bad strength\");",
      "62:   }",
      "63:   this.strength = strength;",
      "64:   this.random = random;",
      "65:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58:  public BCryptPasswordEncoder(BCryptVersion version) {",
      "59:   this(version, null);",
      "60:  }",
      "66:  public BCryptPasswordEncoder(BCryptVersion version, SecureRandom random) {",
      "67:   this(version, -1, random);",
      "68:  }",
      "75:   this(BCryptVersion.$2A, strength, random);",
      "76:  }",
      "82:  public BCryptPasswordEncoder(BCryptVersion version, int strength) {",
      "83:   this(version, strength, null);",
      "84:  }",
      "91:  public BCryptPasswordEncoder(BCryptVersion version, int strength, SecureRandom random) {",
      "95:   this.version = version;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:   String salt;",
      "69:   if (strength > 0) {",
      "70:    if (random != null) {",
      "72:    }",
      "79:   }",
      "80:   return BCrypt.hashpw(rawPassword.toString(), salt);",
      "81:  }",
      "",
      "[Removed Lines]",
      "71:     salt = BCrypt.gensalt(strength, random);",
      "73:    else {",
      "74:     salt = BCrypt.gensalt(strength);",
      "75:    }",
      "76:   }",
      "77:   else {",
      "78:    salt = BCrypt.gensalt();",
      "",
      "[Added Lines]",
      "104:     salt = BCrypt.gensalt(version.getVersion(), strength, random);",
      "105:    } else {",
      "106:     salt = BCrypt.gensalt(version.getVersion(), strength);",
      "108:   } else {",
      "109:    salt = BCrypt.gensalt(version.getVersion());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "94:   return BCrypt.checkpw(rawPassword.toString(), encodedPassword);",
      "95:  }",
      "96: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:  public enum BCryptVersion {",
      "134:   $2A(\"$2a\"),",
      "135:   $2Y(\"$2y\"),",
      "136:   $2B(\"$2b\");",
      "138:   private final String version;",
      "140:   BCryptVersion(String version) {",
      "141:    this.version = version;",
      "142:   }",
      "144:   public String getVersion() {",
      "145:    return this.version;",
      "146:   }",
      "147:  }",
      "",
      "---------------"
    ],
    "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java": [
      "File: crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java -> crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: public class BCryptPasswordEncoderTests {",
      "30:  @Test",
      "32:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();",
      "33:   String result = encoder.encode(\"password\");",
      "34:   assertThat(result.equals(\"password\")).isFalse();",
      "",
      "[Removed Lines]",
      "31:  public void matches() {",
      "",
      "[Added Lines]",
      "31:  public void $2yMatches() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36:  }",
      "38:  @Test",
      "40:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();",
      "41:   String result = encoder.encode(\"passw\\u9292rd\");",
      "42:   assertThat(encoder.matches(\"pass\\u9292\\u9292rd\", result)).isFalse();",
      "",
      "[Removed Lines]",
      "39:  public void unicode() {",
      "",
      "[Added Lines]",
      "40:  public void $2aMatches() {",
      "41:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(BCryptPasswordEncoder.BCryptVersion.$2A);",
      "42:   String result = encoder.encode(\"password\");",
      "43:   assertThat(result.equals(\"password\")).isFalse();",
      "44:   assertThat(encoder.matches(\"password\", result)).isTrue();",
      "45:  }",
      "47:  @Test",
      "48:  public void $2bMatches() {",
      "49:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(BCryptPasswordEncoder.BCryptVersion.$2B);",
      "50:   String result = encoder.encode(\"password\");",
      "51:   assertThat(result.equals(\"password\")).isFalse();",
      "52:   assertThat(encoder.matches(\"password\", result)).isTrue();",
      "53:  }",
      "55:  @Test",
      "56:  public void $2yUnicode() {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "44:  }",
      "46:  @Test",
      "48:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();",
      "49:   String result = encoder.encode(\"password\");",
      "50:   assertThat(encoder.matches(\"bogus\", result)).isFalse();",
      "51:  }",
      "53:  @Test",
      "55:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(8);",
      "56:   String result = encoder.encode(\"password\");",
      "57:   assertThat(encoder.matches(\"password\", result)).isTrue();",
      "58:  }",
      "60:  @Test(expected = IllegalArgumentException.class)",
      "",
      "[Removed Lines]",
      "47:  public void notMatches() {",
      "54:  public void customStrength() {",
      "",
      "[Added Lines]",
      "65:  public void $2aUnicode() {",
      "66:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(BCryptPasswordEncoder.BCryptVersion.$2A);",
      "67:   String result = encoder.encode(\"passw\\u9292rd\");",
      "68:   assertThat(encoder.matches(\"pass\\u9292\\u9292rd\", result)).isFalse();",
      "69:   assertThat(encoder.matches(\"passw\\u9292rd\", result)).isTrue();",
      "70:  }",
      "72:  @Test",
      "73:  public void $2bUnicode() {",
      "74:   BCryptPasswordEncoder encoder =",
      "75:     new BCryptPasswordEncoder(BCryptPasswordEncoder.BCryptVersion.$2B);",
      "76:   String result = encoder.encode(\"passw\\u9292rd\");",
      "77:   assertThat(encoder.matches(\"pass\\u9292\\u9292rd\", result)).isFalse();",
      "78:   assertThat(encoder.matches(\"passw\\u9292rd\", result)).isTrue();",
      "79:  }",
      "81:  @Test",
      "82:  public void $2yNotMatches() {",
      "90:  public void $2aNotMatches() {",
      "91:   BCryptPasswordEncoder encoder =",
      "92:     new BCryptPasswordEncoder(BCryptPasswordEncoder.BCryptVersion.$2A);",
      "93:   String result = encoder.encode(\"password\");",
      "94:   assertThat(encoder.matches(\"bogus\", result)).isFalse();",
      "95:  }",
      "97:  @Test",
      "98:  public void $2bNotMatches() {",
      "99:   BCryptPasswordEncoder encoder =",
      "100:     new BCryptPasswordEncoder(BCryptPasswordEncoder.BCryptVersion.$2B);",
      "101:   String result = encoder.encode(\"password\");",
      "102:   assertThat(encoder.matches(\"bogus\", result)).isFalse();",
      "103:  }",
      "105:  @Test",
      "106:  public void $2yCustomStrength() {",
      "111:  }",
      "113:  @Test",
      "114:  public void $2aCustomStrength() {",
      "115:   BCryptPasswordEncoder encoder =",
      "116:     new BCryptPasswordEncoder(BCryptPasswordEncoder.BCryptVersion.$2A, 8);",
      "117:   String result = encoder.encode(\"password\");",
      "118:   assertThat(encoder.matches(\"password\", result)).isTrue();",
      "119:  }",
      "121:  @Test",
      "122:  public void $2bCustomStrength() {",
      "123:   BCryptPasswordEncoder encoder =",
      "124:     new BCryptPasswordEncoder(BCryptPasswordEncoder.BCryptVersion.$2B, 8);",
      "125:   String result = encoder.encode(\"password\");",
      "126:   assertThat(encoder.matches(\"password\", result)).isTrue();",
      "",
      "---------------"
    ],
    "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java": [
      "File: crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java -> crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "43:      \"$2a$10$k1wbIrmNyFAPwPVPSVa/zecw2BCEnBwVS2GbrmgzxFUOqW9dk4TCW\" },",
      "44:    { \"\", \"$2a$12$k42ZFHFWqBp3vWli.nIn8u\",",
      "45:      \"$2a$12$k42ZFHFWqBp3vWli.nIn8uYyIkbvYRvodzbfbK18SSsY.CsIQPlxO\" },",
      "46:    { \"a\", \"$2a$06$m0CrhHm10qJ3lXRY.5zDGO\",",
      "47:      \"$2a$06$m0CrhHm10qJ3lXRY.5zDGO3rS2KdeeWLuGmsfGlMfOxih58VYVfxe\" },",
      "48:    { \"a\", \"$2a$08$cfcvVd2aQ8CMvoMpP2EBfe\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:    { \"\", \"$2b$06$8eVN9RiU8Yki430X.wBvN.\",",
      "47:      \"$2b$06$8eVN9RiU8Yki430X.wBvN.LWaqh2962emLVSVXVZIXJvDYLsV0oFu\" },",
      "48:    { \"\", \"$2b$06$NlgfNgpIc6GlHciCkMEW8u\",",
      "49:      \"$2b$06$NlgfNgpIc6GlHciCkMEW8uKOBsyvAp7QwlHpysOlKdtyEw50WQua2\" },",
      "50:    { \"\", \"$2y$06$mFDtkz6UN7B3GZ2qi2hhaO\",",
      "51:      \"$2y$06$mFDtkz6UN7B3GZ2qi2hhaO3OFWzNEdcY84ELw6iHCPruuQfSAXBLK\" },",
      "52:    { \"\", \"$2y$06$88kSqVttBx.e9iXTPCLa5u\",",
      "53:      \"$2y$06$88kSqVttBx.e9iXTPCLa5uFPrVFjfLH4D.KcO6pBiAmvUkvdg0EYy\" },",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "51:      \"$2a$10$k87L/MF28Q673VKh8/cPi.SUl7MU/rWuSiIDDFayrKk/1tBsSQu4u\" },",
      "52:    { \"a\", \"$2a$12$8NJH3LsPrANStV6XtBakCe\",",
      "53:      \"$2a$12$8NJH3LsPrANStV6XtBakCez0cKHXVxmvxIlcz785vxAIZrihHZpeS\" },",
      "54:    { \"abc\", \"$2a$06$If6bvum7DFjUnE9p2uDeDu\",",
      "55:      \"$2a$06$If6bvum7DFjUnE9p2uDeDu0YHzrHM6tf.iqN8.yx.jNN1ILEf7h0i\" },",
      "56:    { \"abc\", \"$2a$08$Ro0CUfOqk6cXEKf3dyaM7O\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:    { \"a\", \"$2b$06$ehKGYiS4wt2HAr7KQXS5z.\",",
      "63:      \"$2b$06$ehKGYiS4wt2HAr7KQXS5z.OaRjB4jHO7rBHJKlGXbqEH3QVJfO7iO\" },",
      "64:    { \"a\", \"$2b$06$PWxFFHA3HiCD46TNOZh30e\",",
      "65:      \"$2b$06$PWxFFHA3HiCD46TNOZh30eNto1hg5uM9tHBlI4q/b03SW/gGKUYk6\" },",
      "66:    { \"a\", \"$2y$06$LUdD6/aD0e/UbnxVAVbvGu\",",
      "67:      \"$2y$06$LUdD6/aD0e/UbnxVAVbvGuUmIoJ3l/OK94ThhadpMWwKC34LrGEey\" },",
      "68:    { \"a\", \"$2y$06$eqgY.T2yloESMZxgp76deO\",",
      "69:      \"$2y$06$eqgY.T2yloESMZxgp76deOROa7nzXDxbO0k.PJvuClTa.Vu1AuemG\" },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "59:      \"$2a$10$WvvTPHKwdBJ3uk0Z37EMR.hLA2W6N9AEBhEgrAOljy2Ae5MtaSIUi\" },",
      "60:    { \"abc\", \"$2a$12$EXRkfkdmXn2gzds2SSitu.\",",
      "61:      \"$2a$12$EXRkfkdmXn2gzds2SSitu.MW9.gAVqa9eLS1//RYtYCmB1eLHg.9q\" },",
      "62:    { \"abcdefghijklmnopqrstuvwxyz\", \"$2a$06$.rCVZVOThsIa97pEDOxvGu\",",
      "63:      \"$2a$06$.rCVZVOThsIa97pEDOxvGuRRgzG64bvtJ0938xuqzv18d3ZpQhstC\" },",
      "64:    { \"abcdefghijklmnopqrstuvwxyz\", \"$2a$08$aTsUwsyowQuzRrDqFflhge\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:    { \"abc\", \"$2b$06$5FyQoicpbox1xSHFfhhdXu\",",
      "79:      \"$2b$06$5FyQoicpbox1xSHFfhhdXuR2oxLpO1rYsQh5RTkI/9.RIjtoF0/ta\" },",
      "80:    { \"abc\", \"$2b$06$1kJyuho8MCVP3HHsjnRMkO\",",
      "81:      \"$2b$06$1kJyuho8MCVP3HHsjnRMkO1nvCOaKTqLnjG2TX1lyMFbXH/aOkgc.\" },",
      "82:    { \"abc\", \"$2y$06$ACfku9dT6.H8VjdKb8nhlu\",",
      "83:      \"$2y$06$ACfku9dT6.H8VjdKb8nhluaoBmhJyK7GfoNScEfOfrJffUxoUeCjK\" },",
      "84:    { \"abc\", \"$2y$06$9JujYcoWPmifvFA3RUP90e\",",
      "85:      \"$2y$06$9JujYcoWPmifvFA3RUP90e5rSEHAb5Ye6iv3.G9ikiHNv5cxjNEse\" },",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "67:      \"$2a$10$fVH8e28OQRj9tqiDXs1e1uxpsjN0c7II7YPKXua2NAKYvM6iQk7dq\" },",
      "68:    { \"abcdefghijklmnopqrstuvwxyz\", \"$2a$12$D4G5f18o7aMMfwasBL7Gpu\",",
      "69:      \"$2a$12$D4G5f18o7aMMfwasBL7GpuQWuP3pkrZrOAnqP.bmezbMng.QwJ/pG\" },",
      "70:    { \"~!@#$%^&*()      ~!@#$%^&*()PNBFRD\", \"$2a$06$fPIsBO8qRqkjj273rfaOI.\",",
      "71:      \"$2a$06$fPIsBO8qRqkjj273rfaOI.HtSV9jLDpTbZn782DC6/t7qT67P6FfO\" },",
      "72:    { \"~!@#$%^&*()      ~!@#$%^&*()PNBFRD\", \"$2a$08$Eq2r4G/76Wv39MzSX262hu\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "94:    { \"abcdefghijklmnopqrstuvwxyz\", \"$2b$06$O8E89AQPj1zJQA05YvIAU.\",",
      "95:      \"$2b$06$O8E89AQPj1zJQA05YvIAU.hMpj25BXri1bupl/Q7CJMlpLwZDNBoO\" },",
      "96:    { \"abcdefghijklmnopqrstuvwxyz\", \"$2b$06$PDqIWr./o/P3EE/P.Q0A/u\",",
      "97:      \"$2b$06$PDqIWr./o/P3EE/P.Q0A/uFg86WL/PXTbaW267TDALEwDylqk00Z.\" },",
      "98:    { \"abcdefghijklmnopqrstuvwxyz\", \"$2y$06$34MG90ZLah8/ZNr3ltlHCu\",",
      "99:      \"$2y$06$34MG90ZLah8/ZNr3ltlHCuz6bachF8/3S5jTuzF1h2qg2cUk11sFW\" },",
      "100:    { \"abcdefghijklmnopqrstuvwxyz\", \"$2y$06$AK.hSLfMyw706iEW24i68u\",",
      "101:      \"$2y$06$AK.hSLfMyw706iEW24i68uKAc2yorPTrB0cimvjJHEBUrPkOq7VvG\" },",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "74:    { \"~!@#$%^&*()      ~!@#$%^&*()PNBFRD\", \"$2a$10$LgfYWkbzEvQ4JakH7rOvHe\",",
      "75:      \"$2a$10$LgfYWkbzEvQ4JakH7rOvHe0y8pHKF9OaFgwUZ2q7W2FFZmZzJYlfS\" },",
      "76:    { \"~!@#$%^&*()      ~!@#$%^&*()PNBFRD\", \"$2a$12$WApznUOJfkEGSmYRfnkrPO\",",
      "",
      "[Removed Lines]",
      "77:      \"$2a$12$WApznUOJfkEGSmYRfnkrPOr466oFDCaj4b6HY3EXGvfxm43seyhgC\" } };",
      "",
      "[Added Lines]",
      "109:      \"$2a$12$WApznUOJfkEGSmYRfnkrPOr466oFDCaj4b6HY3EXGvfxm43seyhgC\" },",
      "110:    { \"~!@#$%^&*()      ~!@#$%^&*()PNBFRD\", \"$2b$06$FGWA8OlY6RtQhXBXuCJ8Wu\",",
      "111:      \"$2b$06$FGWA8OlY6RtQhXBXuCJ8WusVipRI15cWOgJK8MYpBHEkktMfbHRIG\" },",
      "112:    { \"~!@#$%^&*()      ~!@#$%^&*()PNBFRD\", \"$2b$06$G6aYU7UhUEUDJBdTgq3CRe\",",
      "113:      \"$2b$06$G6aYU7UhUEUDJBdTgq3CRekiopCN4O4sNitFXrf5NUscsVZj3a2r6\" },",
      "114:    { \"~!@#$%^&*()      ~!@#$%^&*()PNBFRD\", \"$2y$06$sYDFHqOcXTjBgOsqC0WCKe\",",
      "115:      \"$2y$06$sYDFHqOcXTjBgOsqC0WCKeMd3T1UhHuWQSxncLGtXDLMrcE6vFDti\" },",
      "116:    { \"~!@#$%^&*()      ~!@#$%^&*()PNBFRD\", \"$2y$06$6Xm0gCw4g7ZNDCEp4yTise\",",
      "117:      \"$2y$06$6Xm0gCw4g7ZNDCEp4yTisez0kSdpXEl66MvdxGidnmChIe8dFmMnq\" } };",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "152:  public void testCheckpw_failure() {",
      "153:   print(\"BCrypt.checkpw w/ bad passwords: \");",
      "154:   for (int i = 0; i < test_vectors.length; i++) {",
      "156:    String plain = test_vectors[i][0];",
      "157:    String expected = test_vectors[broken_index][2];",
      "158:    assertThat(BCrypt.checkpw(plain, expected)).isFalse();",
      "",
      "[Removed Lines]",
      "155:    int broken_index = (i + 4) % test_vectors.length;",
      "",
      "[Added Lines]",
      "195:    int broken_index = (i + 8) % test_vectors.length;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a40f73521c0dd88b879ff6165d280e78bdf8154f",
      "candidate_info": {
        "commit_hash": "a40f73521c0dd88b879ff6165d280e78bdf8154f",
        "repo": "spring-projects/spring-security",
        "commit_url": "https://github.com/spring-projects/spring-security/commit/a40f73521c0dd88b879ff6165d280e78bdf8154f",
        "files": [
          "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
          "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
          "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
        ],
        "message": "Improve Upgrading",
        "before_after_code_files": [
          "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
          "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
          "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
            "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
            "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
          ],
          "candidate": [
            "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
            "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
            "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
          ]
        }
      },
      "candidate_diff": {
        "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java": [
          "File: crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java -> crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:   int cdata[] = bf_crypt_ciphertext.clone();",
          "532:   int clen = cdata.length;",
          "535:   if (log_rounds < 4 || log_rounds > 31) {",
          "537:   }",
          "539:   if (salt.length != BCRYPT_SALT_LEN) {",
          "540:    throw new IllegalArgumentException(\"Bad salt length\");",
          "541:   }",
          "543:   init_key();",
          "544:   ekskey(salt, password, sign_ext_bug, safety);",
          "546:    key(password, sign_ext_bug, safety);",
          "547:    key(salt, false, safety);",
          "548:   }",
          "552:     encipher(cdata, j << 1);",
          "553:    }",
          "554:   }",
          "558:    ret[j++] = (byte) ((cdata[i] >> 24) & 0xff);",
          "559:    ret[j++] = (byte) ((cdata[i] >> 16) & 0xff);",
          "560:    ret[j++] = (byte) ((cdata[i] >> 8) & 0xff);",
          "",
          "[Removed Lines]",
          "529:  private byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety) {",
          "530:   int rounds, i, j;",
          "533:   byte ret[];",
          "536:    throw new IllegalArgumentException(\"Bad number of rounds\");",
          "538:   rounds = 1 << log_rounds;",
          "545:   for (i = 0; i < rounds; i++) {",
          "550:   for (i = 0; i < 64; i++) {",
          "551:    for (j = 0; j < (clen >> 1); j++) {",
          "556:   ret = new byte[clen * 4];",
          "557:   for (i = 0, j = 0; i < clen; i++) {",
          "",
          "[Added Lines]",
          "529:  private byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety,",
          "530:    boolean for_check) {",
          "534:   long rounds;",
          "536:    if (!for_check) {",
          "537:     throw new IllegalArgumentException(\"Bad number of rounds\");",
          "538:    }",
          "539:    if (log_rounds != 0) {",
          "540:     throw new IllegalArgumentException(\"Bad number of rounds\");",
          "541:    }",
          "542:    rounds = 0;",
          "543:   }",
          "544:   else {",
          "545:    rounds = roundsForLogRounds(log_rounds);",
          "546:    if (rounds < 16 || rounds > Integer.MAX_VALUE) {",
          "547:     throw new IllegalArgumentException(\"Bad number of rounds\");",
          "548:    }",
          "557:   for (int i = 0; i < rounds; i++) {",
          "562:   for (int i = 0; i < 64; i++) {",
          "563:    for (int j = 0; j < (clen >> 1); j++) {",
          "568:   byte[] ret = new byte[clen * 4];",
          "569:   for (int i = 0, j = 0; i < clen; i++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:   return ret;",
          "564:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:  private static String hashpwforcheck(byte[] passwordb, String salt) {",
          "579:   return hashpw(passwordb, salt, true);",
          "580:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "586:  public static String hashpw(byte passwordb[], String salt) {",
          "587:   BCrypt B;",
          "588:   String real_salt;",
          "589:   byte saltb[], hashed[];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603:   return hashpw(passwordb, salt, false);",
          "604:  }",
          "606:  private static String hashpw(byte passwordb[], String salt, boolean for_check) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "633:   }",
          "635:   B = new BCrypt();",
          "638:   rs.append(\"$2\");",
          "639:   if (minor >= 'a') {",
          "",
          "[Removed Lines]",
          "636:   hashed = B.crypt_raw(passwordb, saltb, rounds, minor == 'x', minor == 'a' ? 0x10000 : 0);",
          "",
          "[Added Lines]",
          "656:   hashed = B.crypt_raw(passwordb, saltb, rounds, minor == 'x', minor == 'a' ? 0x10000 : 0, for_check);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "742:  public static boolean checkpw(String plaintext, String hashed) {",
          "744:  }",
          "",
          "[Removed Lines]",
          "743:   return equalsNoEarlyReturn(hashed, hashpw(plaintext, hashed));",
          "",
          "[Added Lines]",
          "763:   byte[] passwordb = plaintext.getBytes(StandardCharsets.UTF_8);",
          "764:   return equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "753:  public static boolean checkpw(byte[] passwordb, String hashed) {",
          "755:  }",
          "757:  static boolean equalsNoEarlyReturn(String a, String b) {",
          "",
          "[Removed Lines]",
          "754:   return equalsNoEarlyReturn(hashed, hashpw(passwordb, hashed));",
          "",
          "[Added Lines]",
          "775:   return equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));",
          "",
          "---------------"
        ],
        "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java": [
          "File: crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java -> crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:   assertThatIllegalArgumentException().isThrownBy(() -> encoder.matches(null, \"does-not-matter\"));",
          "209:  }",
          "211: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:  @Test",
          "212:  public void upgradeWhenNoRoundsThenTrue() {",
          "213:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();",
          "214:   assertThat(encoder.upgradeEncoding(\"$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue\")).isTrue();",
          "215:  }",
          "217:  @Test",
          "218:  public void checkWhenNoRoundsThenTrue() {",
          "219:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();",
          "220:   assertThat(encoder.matches(\"password\", \"$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue\"))",
          "221:     .isTrue();",
          "222:   assertThat(encoder.matches(\"wrong\", \"$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue\")).isFalse();",
          "223:  }",
          "",
          "---------------"
        ],
        "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java": [
          "File: crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java -> crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:   assertThat(BCrypt.equalsNoEarlyReturn(\"test\", \"pass\")).isFalse();",
          "457:  }",
          "459: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:  @Test",
          "460:  public void checkpwWhenZeroRoundsThenMatches() {",
          "461:   String password = \"$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue\";",
          "462:   assertThat(BCrypt.checkpw(\"password\", password)).isTrue();",
          "463:   assertThat(BCrypt.checkpw(\"wrong\", password)).isFalse();",
          "464:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f56f55dc8eeb2abfc6005325b98f676943a1e1d9",
      "candidate_info": {
        "commit_hash": "f56f55dc8eeb2abfc6005325b98f676943a1e1d9",
        "repo": "spring-projects/spring-security",
        "commit_url": "https://github.com/spring-projects/spring-security/commit/f56f55dc8eeb2abfc6005325b98f676943a1e1d9",
        "files": [
          "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java"
        ],
        "message": "Fix BCrypt Checkstyle\n\nIssue: gh-3320",
        "before_after_code_files": [
          "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java"
          ],
          "candidate": [
            "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java"
          ]
        }
      },
      "candidate_diff": {
        "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java": [
          "File: crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java -> crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "689:  private byte[] crypt_raw(byte password[], byte salt[], int log_rounds,",
          "691:   int rounds, i, j;",
          "692:   int cdata[] =  bf_crypt_ciphertext.clone();",
          "693:   int clen = cdata.length;",
          "",
          "[Removed Lines]",
          "690:         boolean sign_ext_bug, int safety) {",
          "",
          "[Added Lines]",
          "690:        boolean sign_ext_bug, int safety) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37d856dca464f119a30bc5a8c7fa8533c5352a4c",
      "candidate_info": {
        "commit_hash": "37d856dca464f119a30bc5a8c7fa8533c5352a4c",
        "repo": "spring-projects/spring-security",
        "commit_url": "https://github.com/spring-projects/spring-security/commit/37d856dca464f119a30bc5a8c7fa8533c5352a4c",
        "files": [
          "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java"
        ],
        "message": "Correct input validation for 31 rounds\n\nCloses gh-11470",
        "before_after_code_files": [
          "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java"
          ],
          "candidate": [
            "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java"
          ]
        }
      },
      "candidate_diff": {
        "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java": [
          "File: crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java -> crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:   }",
          "544:   else {",
          "545:    rounds = roundsForLogRounds(log_rounds);",
          "547:     throw new IllegalArgumentException(\"Bad number of rounds\");",
          "548:    }",
          "549:   }",
          "",
          "[Removed Lines]",
          "546:    if (rounds < 16 || rounds > Integer.MAX_VALUE) {",
          "",
          "[Added Lines]",
          "546:    if (rounds < 16 || rounds > 2147483648L) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6297d3bf7daa215bf551dd67fc0ce7c28d5134a",
      "candidate_info": {
        "commit_hash": "e6297d3bf7daa215bf551dd67fc0ce7c28d5134a",
        "repo": "spring-projects/spring-security",
        "commit_url": "https://github.com/spring-projects/spring-security/commit/e6297d3bf7daa215bf551dd67fc0ce7c28d5134a",
        "files": [
          "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
          "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
          "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
        ],
        "message": "Improve Upgrading\n\nCloses gh-11259",
        "before_after_code_files": [
          "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
          "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
          "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
            "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
            "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
          ],
          "candidate": [
            "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
            "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
            "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
          ]
        }
      },
      "candidate_diff": {
        "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java": [
          "File: crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java -> crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:   int cdata[] = bf_crypt_ciphertext.clone();",
          "532:   int clen = cdata.length;",
          "535:   if (log_rounds < 4 || log_rounds > 31) {",
          "537:   }",
          "539:   if (salt.length != BCRYPT_SALT_LEN) {",
          "540:    throw new IllegalArgumentException(\"Bad salt length\");",
          "541:   }",
          "543:   init_key();",
          "544:   ekskey(salt, password, sign_ext_bug, safety);",
          "546:    key(password, sign_ext_bug, safety);",
          "547:    key(salt, false, safety);",
          "548:   }",
          "552:     encipher(cdata, j << 1);",
          "553:    }",
          "554:   }",
          "558:    ret[j++] = (byte) ((cdata[i] >> 24) & 0xff);",
          "559:    ret[j++] = (byte) ((cdata[i] >> 16) & 0xff);",
          "560:    ret[j++] = (byte) ((cdata[i] >> 8) & 0xff);",
          "",
          "[Removed Lines]",
          "529:  private byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety) {",
          "530:   int rounds, i, j;",
          "533:   byte ret[];",
          "536:    throw new IllegalArgumentException(\"Bad number of rounds\");",
          "538:   rounds = 1 << log_rounds;",
          "545:   for (i = 0; i < rounds; i++) {",
          "550:   for (i = 0; i < 64; i++) {",
          "551:    for (j = 0; j < (clen >> 1); j++) {",
          "556:   ret = new byte[clen * 4];",
          "557:   for (i = 0, j = 0; i < clen; i++) {",
          "",
          "[Added Lines]",
          "529:  private byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety,",
          "530:    boolean for_check) {",
          "534:   long rounds;",
          "536:    if (!for_check) {",
          "537:     throw new IllegalArgumentException(\"Bad number of rounds\");",
          "538:    }",
          "539:    if (log_rounds != 0) {",
          "540:     throw new IllegalArgumentException(\"Bad number of rounds\");",
          "541:    }",
          "542:    rounds = 0;",
          "543:   }",
          "544:   else {",
          "545:    rounds = roundsForLogRounds(log_rounds);",
          "546:    if (rounds < 16 || rounds > Integer.MAX_VALUE) {",
          "547:     throw new IllegalArgumentException(\"Bad number of rounds\");",
          "548:    }",
          "557:   for (int i = 0; i < rounds; i++) {",
          "562:   for (int i = 0; i < 64; i++) {",
          "563:    for (int j = 0; j < (clen >> 1); j++) {",
          "568:   byte[] ret = new byte[clen * 4];",
          "569:   for (int i = 0, j = 0; i < clen; i++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:   return ret;",
          "564:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:  private static String hashpwforcheck(byte[] passwordb, String salt) {",
          "579:   return hashpw(passwordb, salt, true);",
          "580:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "586:  public static String hashpw(byte passwordb[], String salt) {",
          "587:   BCrypt B;",
          "588:   String real_salt;",
          "589:   byte saltb[], hashed[];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603:   return hashpw(passwordb, salt, false);",
          "604:  }",
          "606:  private static String hashpw(byte passwordb[], String salt, boolean for_check) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "633:   }",
          "635:   B = new BCrypt();",
          "638:   rs.append(\"$2\");",
          "639:   if (minor >= 'a') {",
          "",
          "[Removed Lines]",
          "636:   hashed = B.crypt_raw(passwordb, saltb, rounds, minor == 'x', minor == 'a' ? 0x10000 : 0);",
          "",
          "[Added Lines]",
          "656:   hashed = B.crypt_raw(passwordb, saltb, rounds, minor == 'x', minor == 'a' ? 0x10000 : 0, for_check);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "742:  public static boolean checkpw(String plaintext, String hashed) {",
          "744:  }",
          "",
          "[Removed Lines]",
          "743:   return equalsNoEarlyReturn(hashed, hashpw(plaintext, hashed));",
          "",
          "[Added Lines]",
          "763:   byte[] passwordb = plaintext.getBytes(StandardCharsets.UTF_8);",
          "764:   return equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "753:  public static boolean checkpw(byte[] passwordb, String hashed) {",
          "755:  }",
          "757:  static boolean equalsNoEarlyReturn(String a, String b) {",
          "",
          "[Removed Lines]",
          "754:   return equalsNoEarlyReturn(hashed, hashpw(passwordb, hashed));",
          "",
          "[Added Lines]",
          "775:   return equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));",
          "",
          "---------------"
        ],
        "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java": [
          "File: crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java -> crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:   assertThatIllegalArgumentException().isThrownBy(() -> encoder.matches(null, \"does-not-matter\"));",
          "209:  }",
          "211: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:  @Test",
          "212:  public void upgradeWhenNoRoundsThenTrue() {",
          "213:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();",
          "214:   assertThat(encoder.upgradeEncoding(\"$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue\")).isTrue();",
          "215:  }",
          "217:  @Test",
          "218:  public void checkWhenNoRoundsThenTrue() {",
          "219:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();",
          "220:   assertThat(encoder.matches(\"password\", \"$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue\"))",
          "221:     .isTrue();",
          "222:   assertThat(encoder.matches(\"wrong\", \"$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue\")).isFalse();",
          "223:  }",
          "",
          "---------------"
        ],
        "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java": [
          "File: crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java -> crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:   assertThat(BCrypt.equalsNoEarlyReturn(\"test\", \"pass\")).isFalse();",
          "457:  }",
          "459: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:  @Test",
          "460:  public void checkpwWhenZeroRoundsThenMatches() {",
          "461:   String password = \"$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue\";",
          "462:   assertThat(BCrypt.checkpw(\"password\", password)).isTrue();",
          "463:   assertThat(BCrypt.checkpw(\"wrong\", password)).isFalse();",
          "464:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f13fa0285d1304d31b5963c134ed3fb4a8b49ba",
      "candidate_info": {
        "commit_hash": "3f13fa0285d1304d31b5963c134ed3fb4a8b49ba",
        "repo": "spring-projects/spring-security",
        "commit_url": "https://github.com/spring-projects/spring-security/commit/3f13fa0285d1304d31b5963c134ed3fb4a8b49ba",
        "files": [
          "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
          "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
          "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
        ],
        "message": "Improve Upgrading\n\nCloses gh-11259",
        "before_after_code_files": [
          "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
          "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
          "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
            "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
            "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
          ],
          "candidate": [
            "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
            "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
            "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java"
          ]
        }
      },
      "candidate_diff": {
        "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java||crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java": [
          "File: crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java -> crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:   int cdata[] = bf_crypt_ciphertext.clone();",
          "532:   int clen = cdata.length;",
          "535:   if (log_rounds < 4 || log_rounds > 31) {",
          "537:   }",
          "539:   if (salt.length != BCRYPT_SALT_LEN) {",
          "540:    throw new IllegalArgumentException(\"Bad salt length\");",
          "541:   }",
          "543:   init_key();",
          "544:   ekskey(salt, password, sign_ext_bug, safety);",
          "546:    key(password, sign_ext_bug, safety);",
          "547:    key(salt, false, safety);",
          "548:   }",
          "552:     encipher(cdata, j << 1);",
          "553:    }",
          "554:   }",
          "558:    ret[j++] = (byte) ((cdata[i] >> 24) & 0xff);",
          "559:    ret[j++] = (byte) ((cdata[i] >> 16) & 0xff);",
          "560:    ret[j++] = (byte) ((cdata[i] >> 8) & 0xff);",
          "",
          "[Removed Lines]",
          "529:  private byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety) {",
          "530:   int rounds, i, j;",
          "533:   byte ret[];",
          "536:    throw new IllegalArgumentException(\"Bad number of rounds\");",
          "538:   rounds = 1 << log_rounds;",
          "545:   for (i = 0; i < rounds; i++) {",
          "550:   for (i = 0; i < 64; i++) {",
          "551:    for (j = 0; j < (clen >> 1); j++) {",
          "556:   ret = new byte[clen * 4];",
          "557:   for (i = 0, j = 0; i < clen; i++) {",
          "",
          "[Added Lines]",
          "529:  private byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety,",
          "530:    boolean for_check) {",
          "534:   long rounds;",
          "536:    if (!for_check) {",
          "537:     throw new IllegalArgumentException(\"Bad number of rounds\");",
          "538:    }",
          "539:    if (log_rounds != 0) {",
          "540:     throw new IllegalArgumentException(\"Bad number of rounds\");",
          "541:    }",
          "542:    rounds = 0;",
          "543:   }",
          "544:   else {",
          "545:    rounds = roundsForLogRounds(log_rounds);",
          "546:    if (rounds < 16 || rounds > Integer.MAX_VALUE) {",
          "547:     throw new IllegalArgumentException(\"Bad number of rounds\");",
          "548:    }",
          "557:   for (int i = 0; i < rounds; i++) {",
          "562:   for (int i = 0; i < 64; i++) {",
          "563:    for (int j = 0; j < (clen >> 1); j++) {",
          "568:   byte[] ret = new byte[clen * 4];",
          "569:   for (int i = 0, j = 0; i < clen; i++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:   return ret;",
          "564:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:  private static String hashpwforcheck(byte[] passwordb, String salt) {",
          "579:   return hashpw(passwordb, salt, true);",
          "580:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "586:  public static String hashpw(byte passwordb[], String salt) {",
          "587:   BCrypt B;",
          "588:   String real_salt;",
          "589:   byte saltb[], hashed[];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603:   return hashpw(passwordb, salt, false);",
          "604:  }",
          "606:  private static String hashpw(byte passwordb[], String salt, boolean for_check) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "633:   }",
          "635:   B = new BCrypt();",
          "638:   rs.append(\"$2\");",
          "639:   if (minor >= 'a') {",
          "",
          "[Removed Lines]",
          "636:   hashed = B.crypt_raw(passwordb, saltb, rounds, minor == 'x', minor == 'a' ? 0x10000 : 0);",
          "",
          "[Added Lines]",
          "656:   hashed = B.crypt_raw(passwordb, saltb, rounds, minor == 'x', minor == 'a' ? 0x10000 : 0, for_check);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "742:  public static boolean checkpw(String plaintext, String hashed) {",
          "744:  }",
          "",
          "[Removed Lines]",
          "743:   return equalsNoEarlyReturn(hashed, hashpw(plaintext, hashed));",
          "",
          "[Added Lines]",
          "763:   byte[] passwordb = plaintext.getBytes(StandardCharsets.UTF_8);",
          "764:   return equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "753:  public static boolean checkpw(byte[] passwordb, String hashed) {",
          "755:  }",
          "757:  static boolean equalsNoEarlyReturn(String a, String b) {",
          "",
          "[Removed Lines]",
          "754:   return equalsNoEarlyReturn(hashed, hashpw(passwordb, hashed));",
          "",
          "[Added Lines]",
          "775:   return equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));",
          "",
          "---------------"
        ],
        "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java": [
          "File: crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java -> crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoderTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:   assertThatIllegalArgumentException().isThrownBy(() -> encoder.matches(null, \"does-not-matter\"));",
          "209:  }",
          "211: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:  @Test",
          "212:  public void upgradeWhenNoRoundsThenTrue() {",
          "213:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();",
          "214:   assertThat(encoder.upgradeEncoding(\"$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue\")).isTrue();",
          "215:  }",
          "217:  @Test",
          "218:  public void checkWhenNoRoundsThenTrue() {",
          "219:   BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();",
          "220:   assertThat(encoder.matches(\"password\", \"$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue\"))",
          "221:     .isTrue();",
          "222:   assertThat(encoder.matches(\"wrong\", \"$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue\")).isFalse();",
          "223:  }",
          "",
          "---------------"
        ],
        "crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java||crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java": [
          "File: crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java -> crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:   assertThat(BCrypt.equalsNoEarlyReturn(\"test\", \"pass\")).isFalse();",
          "457:  }",
          "459: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:  @Test",
          "460:  public void checkpwWhenZeroRoundsThenMatches() {",
          "461:   String password = \"$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue\";",
          "462:   assertThat(BCrypt.checkpw(\"password\", password)).isTrue();",
          "463:   assertThat(BCrypt.checkpw(\"wrong\", password)).isFalse();",
          "464:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}