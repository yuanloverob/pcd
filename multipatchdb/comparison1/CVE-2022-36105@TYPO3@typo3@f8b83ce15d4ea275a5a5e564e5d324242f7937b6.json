{
  "cve_id": "CVE-2022-36105",
  "cve_desc": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that observing response time during user authentication (backend and frontend) can be used to distinguish between existing and non-existing user accounts. Extension authors of 3rd party TYPO3 extensions providing a custom authentication service should check if the extension is affected by the described problem. Affected extensions must implement new `MimicServiceInterface::mimicAuthUser`, which simulates corresponding times regular processing would usually take. Update to TYPO3 version 7.6.58 ELTS, 8.7.48 ELTS, 9.5.37 ELTS, 10.4.32 or 11.5.16 that fix this problem. There are no known workarounds for this issue.",
  "repo": "TYPO3/typo3",
  "patch_hash": "f8b83ce15d4ea275a5a5e564e5d324242f7937b6",
  "patch_info": {
    "commit_hash": "f8b83ce15d4ea275a5a5e564e5d324242f7937b6",
    "repo": "TYPO3/typo3",
    "commit_url": "https://github.com/TYPO3/typo3/commit/f8b83ce15d4ea275a5a5e564e5d324242f7937b6",
    "files": [
      "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
      "typo3/sysext/core/Classes/Authentication/AuthenticationService.php",
      "typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php"
    ],
    "message": "[SECURITY] Mitigate timing discrepancies during user authentication\n\nObserving response time during user authentication can be used to\ndistinguish between existing and non-existing user accounts. This\nchange introduces `MimicServiceInterface::mimicAuthUser` -  to be\nimplemented by 3rd party authentication services - which simulates\ncorresponding times regular processing would usually take.\n\nResolves: #98217\nReleases: main, 11.5, 10.4\nChange-Id: I143ae0d3877dffe6f2decbb3f0cf8c9d9cb6ca0b\nSecurity-Bulletin: TYPO3-CORE-SA-2022-007\nSecurity-References: CVE-2022-36105\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/75716\nTested-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>",
    "before_after_code_files": [
      "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
      "typo3/sysext/core/Classes/Authentication/AuthenticationService.php||typo3/sysext/core/Classes/Authentication/AuthenticationService.php",
      "typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php||typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php"
    ]
  },
  "patch_diff": {
    "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php": [
      "File: typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php -> typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "579:                     break;",
      "580:                 }",
      "581:             }",
      "582:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "584:         } elseif ($activeLogin) {",
      "585:             $subType = 'authUser' . $this->loginType;",
      "586:             foreach ($this->getAuthServices($subType, $loginData, $authInfo) as $serviceObj) {",
      "587:                 if ($serviceObj instanceof MimicServiceInterface && $serviceObj->mimicAuthUser() === false) {",
      "588:                     break;",
      "589:                 }",
      "590:             }",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Classes/Authentication/AuthenticationService.php||typo3/sysext/core/Classes/Authentication/AuthenticationService.php": [
      "File: typo3/sysext/core/Classes/Authentication/AuthenticationService.php -> typo3/sysext/core/Classes/Authentication/AuthenticationService.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: {",
      "",
      "[Removed Lines]",
      "31: class AuthenticationService extends AbstractAuthenticationService",
      "",
      "[Added Lines]",
      "31: class AuthenticationService extends AbstractAuthenticationService implements MimicServiceInterface",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "174:         return 200;",
      "175:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "181:     public function mimicAuthUser(): bool",
      "182:     {",
      "183:         try {",
      "184:             $hashFactory = GeneralUtility::makeInstance(PasswordHashFactory::class);",
      "185:             $defaultHashInstance = $hashFactory->getDefaultHashInstance($this->pObj->loginType);",
      "186:             $defaultHashInstance->getHashedPassword(random_bytes(10));",
      "187:         } catch (\\Exception) {",
      "189:         }",
      "190:         return false;",
      "191:     }",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php||typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php": [
      "File: typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php -> typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: declare(strict_types=1);",
      "18: namespace TYPO3\\CMS\\Core\\Authentication;",
      "20: interface MimicServiceInterface",
      "21: {",
      "34:     public function mimicAuthUser(): bool;",
      "35: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0308595bc544e9ceab05106b248a04ab3cef0d48",
      "candidate_info": {
        "commit_hash": "0308595bc544e9ceab05106b248a04ab3cef0d48",
        "repo": "TYPO3/typo3",
        "commit_url": "https://github.com/TYPO3/typo3/commit/0308595bc544e9ceab05106b248a04ab3cef0d48",
        "files": [
          "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
          "typo3/sysext/core/Documentation/Changelog/12.3/Feature-100116-MakePSR-7RequestAccessibleForAuthenticationServices.rst",
          "typo3/sysext/core/Tests/Functional/Authentication/AbstractUserAuthenticationTest.php",
          "typo3/sysext/install/Classes/Controller/BackendModuleController.php"
        ],
        "message": "[FEATURE] Make PSR-7 request accessible for authentication services\n\nCustom TYPO3 authentication services can now directly\naccess the PSR-7 Request object via the $authInfo array,\nhanded over to the initAuth() method of those services.\nThis therefore allows to further reduce usages of PHP\nsuper globals and `GeneralUtility::getIndpEnv()`.\n\nResolves: #100116\nReleases: main\nSigned-off-by: Torben Hansen <derhansen@gmail.com>\nChange-Id: I12a3484b49862886e7013dc2106a0705ef39c91f\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/78077\nTested-by: Benni Mack <benni@typo3.org>\nReviewed-by: Benni Mack <benni@typo3.org>\nTested-by: core-ci <typo3@b13.com>\nTested-by: Oliver Bartsch <bo@cedev.de>\nReviewed-by: Oliver Bartsch <bo@cedev.de>",
        "before_after_code_files": [
          "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
          "typo3/sysext/core/Tests/Functional/Authentication/AbstractUserAuthenticationTest.php||typo3/sysext/core/Tests/Functional/Authentication/AbstractUserAuthenticationTest.php",
          "typo3/sysext/install/Classes/Controller/BackendModuleController.php||typo3/sysext/install/Classes/Controller/BackendModuleController.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php"
          ],
          "candidate": [
            "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php"
          ]
        }
      },
      "candidate_diff": {
        "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php": [
          "File: typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php -> typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "502:         }",
          "508:         if (empty($possibleUsers) && $isExistingSession && !$anonymousSession) {",
          "",
          "[Removed Lines]",
          "505:         $possibleUsers = $this->fetchPossibleUsers($loginData, $activeLogin, $isExistingSession, $authenticatedUserFromSession);",
          "",
          "[Added Lines]",
          "506:         $possibleUsers = $this->fetchPossibleUsers($loginData, $activeLogin, $isExistingSession, $authenticatedUserFromSession, $request);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "534:                 $subType = 'authUser' . $this->loginType;",
          "538:                     if (($ret = (int)$serviceObj->authUser($userRecordCandidate)) > 0) {",
          "540:                         if ($ret >= 200) {",
          "",
          "[Removed Lines]",
          "537:                 foreach ($this->getAuthServices($subType, $loginData, $authenticatedUserFromSession) as $serviceObj) {",
          "",
          "[Added Lines]",
          "538:                 foreach ($this->getAuthServices($subType, $loginData, $authenticatedUserFromSession, $request) as $serviceObj) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "562:         } elseif ($activeLogin) {",
          "563:             $subType = 'authUser' . $this->loginType;",
          "565:                 if ($serviceObj instanceof MimicServiceInterface && $serviceObj->mimicAuthUser() === false) {",
          "566:                     break;",
          "567:                 }",
          "",
          "[Removed Lines]",
          "564:             foreach ($this->getAuthServices($subType, $loginData, $authenticatedUserFromSession) as $serviceObj) {",
          "",
          "[Added Lines]",
          "565:             foreach ($this->getAuthServices($subType, $loginData, $authenticatedUserFromSession, $request) as $serviceObj) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "651:     {",
          "652:         $possibleUsers = [];",
          "653:         $authConfiguration = $this->getAuthServiceConfiguration();",
          "",
          "[Removed Lines]",
          "650:     protected function fetchPossibleUsers(array $loginData, bool $activeLogin, bool $isExistingSession, ?array $authenticatedUserFromSession): array",
          "",
          "[Added Lines]",
          "651:     protected function fetchPossibleUsers(array $loginData, bool $activeLogin, bool $isExistingSession, ?array $authenticatedUserFromSession, ServerRequestInterface $request): array",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "663:             $subType = 'getUser' . $this->loginType;",
          "666:                 $row = $serviceObj->getUser();",
          "667:                 if (is_array($row)) {",
          "668:                     $possibleUsers[] = $row;",
          "",
          "[Removed Lines]",
          "665:             foreach ($this->getAuthServices($subType, $loginData, $authenticatedUserFromSession) as $serviceObj) {",
          "",
          "[Added Lines]",
          "666:             foreach ($this->getAuthServices($subType, $loginData, $authenticatedUserFromSession, $request) as $serviceObj) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "746:     {",
          "747:         $serviceChain = [];",
          "750:         if ($authenticatedUserFromSession !== null) {",
          "751:             $authInfo['user'] = $authenticatedUserFromSession;",
          "752:         }",
          "",
          "[Removed Lines]",
          "745:     protected function getAuthServices(string $subType, array $loginData, ?array $authenticatedUserFromSession): \\Traversable",
          "749:         $authInfo = $this->getAuthInfoArray();",
          "",
          "[Added Lines]",
          "746:     protected function getAuthServices(string $subType, array $loginData, ?array $authenticatedUserFromSession, ServerRequestInterface $request): \\Traversable",
          "750:         $authInfo = $this->getAuthInfoArray($request);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1118:         ];",
          "1120:         if ($loginData['status'] === LoginType::LOGIN) {",
          "1122:         }",
          "1123:         return $loginData;",
          "1124:     }",
          "",
          "[Removed Lines]",
          "1121:             $loginData = $this->processLoginData($loginData);",
          "",
          "[Added Lines]",
          "1122:             $loginData = $this->processLoginData($loginData, $request);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1140:     {",
          "1141:         $this->logger->debug('Login data before processing', $this->removeSensitiveLoginDataForLoggingInfo($loginData));",
          "1142:         $subType = 'processLoginData' . $this->loginType;",
          "1143:         $isLoginDataProcessed = false;",
          "1144:         $processedLoginData = $loginData;",
          "1147:             $serviceResult = $serviceObject->processLoginData($processedLoginData, 'normal');",
          "1148:             if (!empty($serviceResult)) {",
          "1149:                 $isLoginDataProcessed = true;",
          "",
          "[Removed Lines]",
          "1139:     public function processLoginData($loginData)",
          "1146:         foreach ($this->getAuthServices($subType, $loginData, null) as $serviceObject) {",
          "",
          "[Added Lines]",
          "1140:     public function processLoginData(array $loginData, ServerRequestInterface $request): array",
          "1147:         foreach ($this->getAuthServices($subType, $loginData, null, $request) as $serviceObject) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1198:     {",
          "1199:         $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable($this->user_table);",
          "1200:         $expressionBuilder = $queryBuilder->expr();",
          "1201:         $authInfo = [];",
          "1202:         $authInfo['loginType'] = $this->loginType;",
          "1203:         $authInfo['refInfo'] = parse_url(GeneralUtility::getIndpEnv('HTTP_REFERER'));",
          "1204:         $authInfo['HTTP_HOST'] = GeneralUtility::getIndpEnv('HTTP_HOST');",
          "1205:         $authInfo['REMOTE_ADDR'] = GeneralUtility::getIndpEnv('REMOTE_ADDR');",
          "",
          "[Removed Lines]",
          "1197:     public function getAuthInfoArray()",
          "",
          "[Added Lines]",
          "1198:     public function getAuthInfoArray(ServerRequestInterface $request)",
          "1204:         $authInfo['request'] = $request;",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Tests/Functional/Authentication/AbstractUserAuthenticationTest.php||typo3/sysext/core/Tests/Functional/Authentication/AbstractUserAuthenticationTest.php": [
          "File: typo3/sysext/core/Tests/Functional/Authentication/AbstractUserAuthenticationTest.php -> typo3/sysext/core/Tests/Functional/Authentication/AbstractUserAuthenticationTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace TYPO3\\CMS\\Core\\Tests\\Functional\\Authentication;",
          "20: use TYPO3\\CMS\\Core\\Database\\Query\\Expression\\CompositeExpression;",
          "21: use TYPO3\\CMS\\Core\\Session\\UserSession;",
          "22: use TYPO3\\CMS\\Core\\Tests\\Functional\\Authentication\\Fixtures\\AnyUserAuthentication;",
          "23: use TYPO3\\TestingFramework\\Core\\Functional\\FunctionalTestCase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: use TYPO3\\CMS\\Core\\Http\\ServerRequest;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:         $this->subject->user_table = 'be_users';",
          "81:         $this->subject->checkPid_value = null;",
          "85:         $enableClause = $authInfoArray['db_user']['enable_clause'];",
          "86:         self::assertInstanceOf(CompositeExpression::class, $enableClause);",
          "",
          "[Removed Lines]",
          "83:         $authInfoArray = $this->subject->getAuthInfoArray();",
          "",
          "[Added Lines]",
          "84:         $authInfoArray = $this->subject->getAuthInfoArray(new ServerRequest('https://example.com'));",
          "",
          "---------------"
        ],
        "typo3/sysext/install/Classes/Controller/BackendModuleController.php||typo3/sysext/install/Classes/Controller/BackendModuleController.php": [
          "File: typo3/sysext/install/Classes/Controller/BackendModuleController.php -> typo3/sysext/install/Classes/Controller/BackendModuleController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:         ];",
          "232:         $authenticated = false;",
          "",
          "[Removed Lines]",
          "229:         $loginData = $backendUser->processLoginData($loginData);",
          "230:         $authInfo = $backendUser->getAuthInfoArray();",
          "",
          "[Added Lines]",
          "229:         $loginData = $backendUser->processLoginData($loginData, $request);",
          "230:         $authInfo = $backendUser->getAuthInfoArray($request);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "163e27ff4798d59523e4833fcd58064b70601bc9",
      "candidate_info": {
        "commit_hash": "163e27ff4798d59523e4833fcd58064b70601bc9",
        "repo": "TYPO3/typo3",
        "commit_url": "https://github.com/TYPO3/typo3/commit/163e27ff4798d59523e4833fcd58064b70601bc9",
        "files": [
          "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
          "typo3/sysext/frontend/Tests/Unit/Authentication/FrontendUserAuthenticationTest.php"
        ],
        "message": "[TASK] Clean up AbstractUserAuthentication\n\nThis change renames variables and splits up\nsome logic in AbstractUserAuthentication in order\nto allow further changes.\n\nVarious variable names are changed in order\nto understand the logic in the main monster\n\"checkAuthentication\" method better.\n\nIn addition, the ->getAuthInfoArray() method\nis now moved to a separate call so it is obvious\nwhat is needed, making some unit tests a bit nicer.\n\nResolves: #98385\nReleases: main\nChange-Id: I447b742b88520e5ec8d5c27628fea715dde40110\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/75797\nTested-by: core-ci <typo3@b13.com>\nTested-by: Oliver Hader <oliver.hader@typo3.org>\nTested-by: Christian Kuhn <lolli@schwarzbu.ch>\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Christian Kuhn <lolli@schwarzbu.ch>",
        "before_after_code_files": [
          "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
          "typo3/sysext/frontend/Tests/Unit/Authentication/FrontendUserAuthenticationTest.php||typo3/sysext/frontend/Tests/Unit/Authentication/FrontendUserAuthenticationTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php"
          ],
          "candidate": [
            "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php"
          ]
        }
      },
      "candidate_diff": {
        "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php": [
          "File: typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php -> typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:         if (!empty($authConfiguration)) {",
          "428:             $this->logger->debug('Authentication Service Configuration found.', ['auth_configuration' => $authConfiguration]);",
          "429:         }",
          "434:         $authenticated = false;",
          "436:         $activeLogin = false;",
          "437:         $this->logger->debug('Login type: {type}', ['type' => $this->loginType]);",
          "441:         $loginData = $this->getLoginFormData($request);",
          "442:         $this->logger->debug('Login data', $this->removeSensitiveLoginDataForLoggingInfo($loginData));",
          "",
          "[Removed Lines]",
          "431:         $tempuserArr = [];",
          "432:         $tempuser = false;",
          "439:         $authInfo = $this->getAuthInfoArray();",
          "",
          "[Added Lines]",
          "430:         $userRecordCandidate = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:         $skipSessionUpdate = (bool)($request->getQueryParams()['skipSessionUpdate'] ?? false);",
          "456:         $anonymousSession = false;",
          "457:         if (!$this->userSession->isNew()) {",
          "460:             if ($this->userSession->getUserId() > 0) {",
          "462:             }",
          "465:         }",
          "475:             }",
          "480:             }",
          "481:         }",
          "489:             $this->logger->debug('User found in session', [",
          "492:             ]);",
          "493:         } else {",
          "494:             $this->logger->debug('No user session found');",
          "495:         }",
          "538:                 $authenticated = true;",
          "539:                 $this->logger->debug('User session used', [",
          "542:                 ]);",
          "543:             }",
          "544:         }",
          "546:         if (!empty($authConfiguration[$this->loginType . '_alwaysAuthUser'])) {",
          "547:             $authenticated = false;",
          "548:             $this->logger->debug('alwaysAuthUser option is enabled');",
          "549:         }",
          "557:                 $subType = 'authUser' . $this->loginType;",
          "564:                             $authenticated = true;",
          "565:                             break;",
          "566:                         }",
          "569:                             $authenticated = true;",
          "570:                         }",
          "571:                     } else {",
          "572:                         $authenticated = false;",
          "573:                         break;",
          "574:                     }",
          "",
          "[Removed Lines]",
          "455:         $haveSession = false;",
          "461:                 $authInfo['user'] = $this->fetchValidUserFromSessionOrDestroySession($skipSessionUpdate);",
          "463:             $haveSession = !$this->userSession->isNew();",
          "464:             $anonymousSession = $haveSession && $this->userSession->isAnonymous();",
          "468:         if (!$haveSession && $loginData['status'] === LoginType::LOGIN) {",
          "469:             $activeLogin = true;",
          "470:             $this->logger->debug('Active login (eg. with login form)');",
          "472:             if ($this->formfield_status && $loginData['uident'] && $loginData['uname']) {",
          "474:                 $this->logoff();",
          "478:             if (stripos($loginData['uname'], '_CLI_') === 0 && !Environment::isCli()) {",
          "479:                 throw new \\RuntimeException('TYPO3 Fatal Error: You have tried to login using a CLI user. Access prohibited!', 1270853931);",
          "484:         if ($anonymousSession && $loginData['status'] === LoginType::LOGIN) {",
          "485:             $activeLogin = true;",
          "486:         }",
          "488:         if ($haveSession) {",
          "490:                 $this->userid_column => $authInfo['user'][$this->userid_column] ?? null,",
          "491:                 $this->username_column => $authInfo['user'][$this->username_column] ?? null,",
          "498:         if (",
          "499:             $activeLogin || !empty($authConfiguration[$this->loginType . '_alwaysFetchUser'])",
          "500:             || !$haveSession && !empty($authConfiguration[$this->loginType . '_fetchUserIfNoSession'])",
          "501:         ) {",
          "504:             $subType = 'getUser' . $this->loginType;",
          "506:             foreach ($this->getAuthServices($subType, $loginData, $authInfo) as $serviceObj) {",
          "507:                 $row = $serviceObj->getUser();",
          "508:                 if (is_array($row)) {",
          "509:                     $tempuserArr[] = $row;",
          "510:                     $this->logger->debug('User found', [",
          "511:                         $this->userid_column => $row[$this->userid_column],",
          "512:                         $this->username_column => $row[$this->username_column],",
          "513:                     ]);",
          "515:                     if (empty($authConfiguration[$this->loginType . '_fetchAllUsers'])) {",
          "516:                         break;",
          "517:                     }",
          "518:                 }",
          "519:             }",
          "521:             if (!empty($authConfiguration[$this->loginType . '_alwaysFetchUser'])) {",
          "522:                 $this->logger->debug($this->loginType . '_alwaysFetchUser option is enabled');",
          "523:             }",
          "524:             if (empty($tempuserArr)) {",
          "525:                 $this->logger->debug('No user found by services');",
          "526:             } else {",
          "527:                 $this->logger->debug('{count} user records found by services', ['count' => count($tempuserArr)]);",
          "528:             }",
          "529:         }",
          "532:         if (empty($tempuserArr) && $haveSession && !$anonymousSession) {",
          "534:             if (is_array($authInfo['user'] ?? null)) {",
          "535:                 $tempuserArr[] = $authInfo['user'];",
          "536:                 $tempuser = $authInfo['user'];",
          "540:                     $this->userid_column => $authInfo['user'][$this->userid_column] ?? '',",
          "541:                     $this->username_column => $authInfo['user'][$this->username_column] ?? '',",
          "551:         if (!empty($tempuserArr) && !$authenticated) {",
          "552:             foreach ($tempuserArr as $tempuser) {",
          "556:                 $this->logger->debug('Auth user', $this->removeSensitiveLoginDataForLoggingInfo($tempuser, true));",
          "560:                 foreach ($this->getAuthServices($subType, $loginData, $authInfo) as $serviceObj) {",
          "561:                     if (($ret = $serviceObj->authUser($tempuser)) > 0) {",
          "563:                         if ((int)$ret >= 200) {",
          "567:                         if ((int)$ret >= 100) {",
          "568:                         } else {",
          "",
          "[Added Lines]",
          "451:         $isExistingSession = false;",
          "453:         $authenticatedUserFromSession = null;",
          "458:                 $authenticatedUserFromSession = $this->fetchValidUserFromSessionOrDestroySession($skipSessionUpdate);",
          "460:             $isExistingSession = !$this->userSession->isNew();",
          "461:             $anonymousSession = $isExistingSession && $this->userSession->isAnonymous();",
          "465:         if ($loginData['status'] === LoginType::LOGIN) {",
          "466:             if (!$isExistingSession) {",
          "467:                 $activeLogin = true;",
          "468:                 $this->logger->debug('Active login (eg. with login form)');",
          "470:                 if ($this->formfield_status && $loginData['uident'] && $loginData['uname']) {",
          "472:                     $this->logoff();",
          "473:                 }",
          "476:                 if (stripos($loginData['uname'], '_CLI_') === 0 && !Environment::isCli()) {",
          "477:                     throw new \\RuntimeException('TYPO3 Fatal Error: You have tried to login using a CLI user. Access prohibited!', 1270853931);",
          "478:                 }",
          "483:             if ($anonymousSession) {",
          "484:                 $activeLogin = true;",
          "488:         if ($isExistingSession && $authenticatedUserFromSession !== null) {",
          "490:                 $this->userid_column => $authenticatedUserFromSession[$this->userid_column] ?? null,",
          "491:                 $this->username_column => $authenticatedUserFromSession[$this->username_column] ?? null,",
          "498:         $possibleUsers = $this->fetchPossibleUsers($loginData, $activeLogin, $isExistingSession, $authenticatedUserFromSession);",
          "501:         if (empty($possibleUsers) && $isExistingSession && !$anonymousSession) {",
          "503:             if (is_array($authenticatedUserFromSession)) {",
          "504:                 $possibleUsers[] = $authenticatedUserFromSession;",
          "505:                 $userRecordCandidate = $authenticatedUserFromSession;",
          "509:                     $this->userid_column => $authenticatedUserFromSession[$this->userid_column] ?? '',",
          "510:                     $this->username_column => $authenticatedUserFromSession[$this->username_column] ?? '',",
          "521:         if (!empty($possibleUsers) && !$authenticated) {",
          "522:             foreach ($possibleUsers as $userRecordCandidate) {",
          "526:                 $this->logger->debug('Auth user', $this->removeSensitiveLoginDataForLoggingInfo($userRecordCandidate, true));",
          "530:                 foreach ($this->getAuthServices($subType, $loginData, $authenticatedUserFromSession) as $serviceObj) {",
          "531:                     if (($ret = (int)$serviceObj->authUser($userRecordCandidate)) > 0) {",
          "533:                         if ($ret >= 200) {",
          "537:                         if ($ret < 100) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "584:         } elseif ($activeLogin) {",
          "585:             $subType = 'authUser' . $this->loginType;",
          "587:                 if ($serviceObj instanceof MimicServiceInterface && $serviceObj->mimicAuthUser() === false) {",
          "588:                     break;",
          "589:                 }",
          "590:             }",
          "591:         }",
          "594:         if ($authenticated) {",
          "597:                 || $anonymousSession",
          "599:             ) {",
          "600:                 $sessionData = $this->userSession->getData();",
          "606:                     $this->userSession->overrideData($sessionData);",
          "607:                 }",
          "612:                 $this->loginSessionStarted = true;",
          "619:             } else {",
          "622:             }",
          "624:             if ($activeLogin && !$this->userSession->isNew()) {",
          "",
          "[Removed Lines]",
          "586:             foreach ($this->getAuthServices($subType, $loginData, $authInfo) as $serviceObj) {",
          "596:             if (!$haveSession",
          "598:                 || (int)($tempuser['uid'] ?? 0) !== $this->userSession->getUserId()",
          "602:                 $this->userSession = $this->createUserSession($tempuser);",
          "605:                 if ($anonymousSession || $haveSession) {",
          "609:                 $this->user = array_merge($tempuser, $this->user ?? []);",
          "613:                 if (is_array($this->user)) {",
          "614:                     $this->logger->debug('User session finally read', [",
          "615:                         $this->userid_column => $this->user[$this->userid_column],",
          "616:                         $this->username_column => $this->user[$this->username_column],",
          "617:                     ]);",
          "618:                 }",
          "621:                 $this->user = $authInfo['user'];",
          "",
          "[Added Lines]",
          "557:             foreach ($this->getAuthServices($subType, $loginData, $authenticatedUserFromSession) as $serviceObj) {",
          "567:             if (!$isExistingSession",
          "569:                 || (int)($userRecordCandidate[$this->userid_column] ?? 0) !== $this->userSession->getUserId()",
          "573:                 $this->userSession = $this->createUserSession($userRecordCandidate);",
          "576:                 if ($anonymousSession || $isExistingSession) {",
          "580:                 $this->user = array_merge($userRecordCandidate, $this->user ?? []);",
          "584:                 $this->logger->debug('User session finally read', [",
          "585:                     $this->userid_column => $this->user[$this->userid_column],",
          "586:                     $this->username_column => $this->user[$this->username_column],",
          "587:                 ]);",
          "590:                 $this->user = $authenticatedUserFromSession;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "635:             if ($activeLogin) {",
          "637:                 if ($this->writeStdLog) {",
          "639:                 }",
          "640:                 $this->logger->info('User {username} logged in from {ip}', [",
          "642:                     'ip' => GeneralUtility::getIndpEnv('REMOTE_ADDR'),",
          "643:                 ]);",
          "644:             } else {",
          "645:                 $this->logger->debug('User {username} authenticated from {ip}', [",
          "647:                     'ip' => GeneralUtility::getIndpEnv('REMOTE_ADDR'),",
          "648:                 ]);",
          "649:             }",
          "650:         } else {",
          "653:                 $this->logger->debug('Login failed', [",
          "654:                     'loginData' => $this->removeSensitiveLoginDataForLoggingInfo($loginData),",
          "655:                 ]);",
          "657:                 $this->logger->debug('Login failed', [",
          "660:                 ]);",
          "661:             }",
          "",
          "[Removed Lines]",
          "638:                     $this->writelog(SystemLogType::LOGIN, SystemLogLoginAction::LOGIN, SystemLogErrorClassification::MESSAGE, 1, 'User %s logged in from ###IP###', [$tempuser[$this->username_column]], '', '', '');",
          "641:                     'username' => $tempuser[$this->username_column],",
          "646:                     'username' => $tempuser[$this->username_column],",
          "652:             if (empty($tempuserArr) && $activeLogin) {",
          "656:             } elseif (!empty($tempuserArr)) {",
          "658:                     $this->userid_column => $tempuser[$this->userid_column],",
          "659:                     $this->username_column => $tempuser[$this->username_column],",
          "",
          "[Added Lines]",
          "607:                     $this->writelog(SystemLogType::LOGIN, SystemLogLoginAction::LOGIN, SystemLogErrorClassification::MESSAGE, 1, 'User %s logged in from ###IP###', [$userRecordCandidate[$this->username_column]], '', '', '');",
          "610:                     'username' => $userRecordCandidate[$this->username_column],",
          "615:                     'username' => $userRecordCandidate[$this->username_column],",
          "621:             if (empty($possibleUsers) && $activeLogin) {",
          "625:             } elseif (!empty($possibleUsers)) {",
          "627:                     $this->userid_column => $userRecordCandidate[$this->userid_column],",
          "628:                     $this->username_column => $userRecordCandidate[$this->username_column],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "667:         }",
          "668:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "648:     protected function fetchPossibleUsers(array $loginData, bool $activeLogin, bool $isExistingSession, ?array $authenticatedUserFromSession): array",
          "649:     {",
          "650:         $possibleUsers = [];",
          "651:         $authConfiguration = $this->getAuthServiceConfiguration();",
          "652:         $alwaysFetchUsers = !empty($authConfiguration[$this->loginType . '_alwaysFetchUser']);",
          "653:         $fetchUsersIfNoSessionIsGiven = !empty($authConfiguration[$this->loginType . '_fetchUserIfNoSession']);",
          "654:         if (",
          "655:             $activeLogin",
          "656:             || $alwaysFetchUsers",
          "657:             || (!$isExistingSession && $fetchUsersIfNoSessionIsGiven)",
          "658:         ) {",
          "661:             $subType = 'getUser' . $this->loginType;",
          "663:             foreach ($this->getAuthServices($subType, $loginData, $authenticatedUserFromSession) as $serviceObj) {",
          "664:                 $row = $serviceObj->getUser();",
          "665:                 if (is_array($row)) {",
          "666:                     $possibleUsers[] = $row;",
          "667:                     $this->logger->debug('User found', [",
          "668:                         $this->userid_column => $row[$this->userid_column],",
          "669:                         $this->username_column => $row[$this->username_column],",
          "670:                     ]);",
          "672:                     if (empty($authConfiguration[$this->loginType . '_fetchAllUsers'])) {",
          "673:                         break;",
          "674:                     }",
          "675:                 }",
          "676:             }",
          "678:             if ($alwaysFetchUsers) {",
          "679:                 $this->logger->debug($this->loginType . '_alwaysFetchUser option is enabled');",
          "680:             }",
          "681:             if (empty($possibleUsers)) {",
          "682:                 $this->logger->debug('No user found by services');",
          "683:             } else {",
          "684:                 $this->logger->debug('{count} user records found by services', ['count' => count($possibleUsers)]);",
          "685:             }",
          "686:         }",
          "687:         return $possibleUsers;",
          "688:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "726:     {",
          "727:         $serviceChain = [];",
          "728:         while (is_object($serviceObj = GeneralUtility::makeInstanceService('auth', $subType, $serviceChain))) {",
          "729:             $serviceChain[] = $serviceObj->getServiceKey();",
          "730:             $serviceObj->initAuth($subType, $loginData, $authInfo, $this);",
          "",
          "[Removed Lines]",
          "725:     protected function getAuthServices(string $subType, array $loginData, array $authInfo): \\Traversable",
          "",
          "[Added Lines]",
          "745:     protected function getAuthServices(string $subType, array $loginData, ?array $authenticatedUserFromSession): \\Traversable",
          "749:         $authInfo = $this->getAuthInfoArray();",
          "750:         if ($authenticatedUserFromSession !== null) {",
          "751:             $authInfo['user'] = $authenticatedUserFromSession;",
          "752:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "764:     {",
          "766:         if (!isset($this->userSessionManager)) {",
          "767:             $this->initializeUserSessionManager();",
          "768:         }",
          "773:         return $session;",
          "774:     }",
          "",
          "[Removed Lines]",
          "763:     public function createUserSession(array $tempuser): UserSession",
          "769:         $tempUserId = (int)($tempuser[$this->userid_column] ?? 0);",
          "770:         $session = $this->userSessionManager->elevateToFixatedUserSession($this->userSession, $tempUserId);",
          "772:         $this->updateLoginTimestamp($tempUserId);",
          "",
          "[Added Lines]",
          "788:     public function createUserSession(array $userRecordCandidate): UserSession",
          "794:         $userRecordCandidateId = (int)($userRecordCandidate[$this->userid_column] ?? 0);",
          "795:         $session = $this->userSessionManager->elevateToFixatedUserSession($this->userSession, $userRecordCandidateId);",
          "797:         $this->updateLoginTimestamp($userRecordCandidateId);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1109:     {",
          "1110:         $this->logger->debug('Login data before processing', $this->removeSensitiveLoginDataForLoggingInfo($loginData));",
          "1111:         $subType = 'processLoginData' . $this->loginType;",
          "1113:         $isLoginDataProcessed = false;",
          "1114:         $processedLoginData = $loginData;",
          "1117:             $serviceResult = $serviceObject->processLoginData($processedLoginData, 'normal');",
          "1118:             if (!empty($serviceResult)) {",
          "1119:                 $isLoginDataProcessed = true;",
          "",
          "[Removed Lines]",
          "1112:         $authInfo = $this->getAuthInfoArray();",
          "1116:         foreach ($this->getAuthServices($subType, $loginData, $authInfo) as $serviceObject) {",
          "",
          "[Added Lines]",
          "1140:         foreach ($this->getAuthServices($subType, $loginData, null) as $serviceObject) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1254:         $query->setRestrictions($this->userConstraints());",
          "1255:         $query->select('*')",
          "1256:             ->from($this->user_table)",
          "1259:         return $query->executeQuery()->fetchAssociative();",
          "1260:     }",
          "",
          "[Removed Lines]",
          "1257:             ->where($query->expr()->eq('uid', $query->createNamedParameter($uid, \\PDO::PARAM_INT)));",
          "",
          "[Added Lines]",
          "1281:             ->where($query->expr()->eq($this->userid_column, $query->createNamedParameter($uid, \\PDO::PARAM_INT)));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1273:         $query->setRestrictions($this->userConstraints());",
          "1274:         $query->select('*')",
          "1275:             ->from($this->user_table)",
          "1278:         return $query->executeQuery()->fetchAssociative();",
          "1279:     }",
          "",
          "[Removed Lines]",
          "1276:             ->where($query->expr()->eq('username', $query->createNamedParameter($name, \\PDO::PARAM_STR)));",
          "",
          "[Added Lines]",
          "1300:             ->where($query->expr()->eq($this->username_column, $query->createNamedParameter($name, \\PDO::PARAM_STR)));",
          "",
          "---------------"
        ],
        "typo3/sysext/frontend/Tests/Unit/Authentication/FrontendUserAuthenticationTest.php||typo3/sysext/frontend/Tests/Unit/Authentication/FrontendUserAuthenticationTest.php": [
          "File: typo3/sysext/frontend/Tests/Unit/Authentication/FrontendUserAuthenticationTest.php -> typo3/sysext/frontend/Tests/Unit/Authentication/FrontendUserAuthenticationTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: use TYPO3\\CMS\\Core\\Authentication\\AuthenticationService;",
          "26: use TYPO3\\CMS\\Core\\Authentication\\IpLocker;",
          "27: use TYPO3\\CMS\\Core\\Database\\ConnectionPool;",
          "29: use TYPO3\\CMS\\Core\\Database\\Query\\Expression\\ExpressionBuilder;",
          "30: use TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder;",
          "31: use TYPO3\\CMS\\Core\\Http\\Request;",
          "32: use TYPO3\\CMS\\Core\\Session\\Backend\\SessionBackendInterface;",
          "33: use TYPO3\\CMS\\Core\\Session\\UserSession;",
          "34: use TYPO3\\CMS\\Core\\Session\\UserSessionManager;",
          "",
          "[Removed Lines]",
          "28: use TYPO3\\CMS\\Core\\Database\\Query\\Expression\\CompositeExpression;",
          "",
          "[Added Lines]",
          "31: use TYPO3\\CMS\\Core\\Http\\ServerRequest;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:         $uniqueSessionId = StringUtility::getUniqueId('test');",
          "80:         $sessionBackendProphecy = $this->prophesize(SessionBackendInterface::class);",
          "",
          "[Removed Lines]",
          "63:         $request = $this->prophesize(ServerRequestInterface::class);",
          "64:         $request->getCookieParams()->willReturn(['fe_typo_user' => $uniqueSessionId]);",
          "65:         $request->getParsedBody()->willReturn([]);",
          "66:         $request->getQueryParams()->willReturn([]);",
          "69:         $queryBuilderProphecy = $this->prophesize(QueryBuilder::class);",
          "70:         $connectionPoolProphecy = $this->prophesize(ConnectionPool::class);",
          "71:         $connectionPoolProphecy->getQueryBuilderForTable('fe_users')->willReturn($queryBuilderProphecy->reveal());",
          "72:         GeneralUtility::addInstance(ConnectionPool::class, $connectionPoolProphecy->reveal());",
          "73:         $expressionBuilderProphecy = $this->prophesize(ExpressionBuilder::class);",
          "74:         $queryBuilderProphecy->expr()->willReturn($expressionBuilderProphecy->reveal());",
          "75:         $compositeExpressionProphecy = $this->prophesize(CompositeExpression::class);",
          "76:         $expressionBuilderProphecy->and(Argument::cetera())->willReturn($compositeExpressionProphecy->reveal());",
          "77:         $expressionBuilderProphecy->in(Argument::cetera())->willReturn('');",
          "",
          "[Added Lines]",
          "63:         $request = new ServerRequest('http://example.com/', 'GET', null, [], []);",
          "64:         $request = $request->withCookieParams(['fe_typo_user' => $uniqueSessionId]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         $subject = new FrontendUserAuthentication();",
          "96:         $subject->setLogger(new NullLogger());",
          "97:         $subject->initializeUserSessionManager($userSessionManager);",
          "100:         self::assertIsNotArray($subject->user);",
          "101:         self::assertEquals('bar', $subject->getSessionData('foo'));",
          "",
          "[Removed Lines]",
          "98:         $subject->start($request->reveal());",
          "",
          "[Added Lines]",
          "85:         $subject->start($request);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:     public function storeSessionDataOnAnonymousUserWithNoData(): void",
          "109:     {",
          "121:         $userSessionManager = $this->prophesize(UserSessionManager::class);",
          "122:         $userSessionManager->createFromRequestOrAnonymous(Argument::cetera())->willReturn(UserSession::createNonFixated('newSessionId'));",
          "",
          "[Removed Lines]",
          "111:         $queryBuilderProphecy = $this->prophesize(QueryBuilder::class);",
          "112:         $connectionPoolProphecy = $this->prophesize(ConnectionPool::class);",
          "113:         $connectionPoolProphecy->getQueryBuilderForTable('fe_users')->willReturn($queryBuilderProphecy->reveal());",
          "114:         GeneralUtility::addInstance(ConnectionPool::class, $connectionPoolProphecy->reveal());",
          "115:         $expressionBuilderProphecy = $this->prophesize(ExpressionBuilder::class);",
          "116:         $queryBuilderProphecy->expr()->willReturn($expressionBuilderProphecy->reveal());",
          "117:         $compositeExpressionProphecy = $this->prophesize(CompositeExpression::class);",
          "118:         $expressionBuilderProphecy->and(Argument::cetera())->willReturn($compositeExpressionProphecy->reveal());",
          "119:         $expressionBuilderProphecy->in(Argument::cetera())->willReturn('');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:     {",
          "144:         $uniqueSessionId = StringUtility::getUniqueId('test');",
          "157:         $sessionRecord = [",
          "158:             'ses_id' => $uniqueSessionId . self::NOT_CHECKED_INDICATOR,",
          "159:             'ses_data' => serialize(['foo' => 'bar']),",
          "",
          "[Removed Lines]",
          "147:         $queryBuilderProphecy = $this->prophesize(QueryBuilder::class);",
          "148:         $connectionPoolProphecy = $this->prophesize(ConnectionPool::class);",
          "149:         $connectionPoolProphecy->getQueryBuilderForTable('fe_users')->willReturn($queryBuilderProphecy->reveal());",
          "150:         GeneralUtility::addInstance(ConnectionPool::class, $connectionPoolProphecy->reveal());",
          "151:         $expressionBuilderProphecy = $this->prophesize(ExpressionBuilder::class);",
          "152:         $queryBuilderProphecy->expr()->willReturn($expressionBuilderProphecy->reveal());",
          "153:         $compositeExpressionProphecy = $this->prophesize(CompositeExpression::class);",
          "154:         $expressionBuilderProphecy->and(Argument::cetera())->willReturn($compositeExpressionProphecy->reveal());",
          "155:         $expressionBuilderProphecy->in(Argument::cetera())->willReturn('');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195:         $uniqueSessionId = StringUtility::getUniqueId('test');",
          "196:         $currentTime = $GLOBALS['EXEC_TIME'];",
          "210:         $userSession = UserSession::createNonFixated($uniqueSessionId);",
          "211:         $userSessionManager = $this->prophesize(UserSessionManager::class);",
          "",
          "[Removed Lines]",
          "199:         $queryBuilderProphecy = $this->prophesize(QueryBuilder::class);",
          "200:         $connectionPoolProphecy = $this->prophesize(ConnectionPool::class);",
          "201:         $connectionPoolProphecy->getQueryBuilderForTable('fe_users')->willReturn($queryBuilderProphecy->reveal());",
          "202:         GeneralUtility::addInstance(ConnectionPool::class, $connectionPoolProphecy->reveal());",
          "203:         $expressionBuilderProphecy = $this->prophesize(ExpressionBuilder::class);",
          "204:         $queryBuilderProphecy->expr()->willReturn($expressionBuilderProphecy->reveal());",
          "205:         $compositeExpressionProphecy = $this->prophesize(CompositeExpression::class);",
          "206:         $expressionBuilderProphecy->and(Argument::cetera())->willReturn($compositeExpressionProphecy->reveal());",
          "207:         $expressionBuilderProphecy->in(Argument::cetera())->willReturn('');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "260:         $_COOKIE['fe_typo_user'] = $uniqueSessionId;",
          "261:         $currentTime = $GLOBALS['EXEC_TIME'];",
          "275:         $sessionRecord = [",
          "276:             'ses_id' => $uniqueSessionId . self::NOT_CHECKED_INDICATOR,",
          "",
          "[Removed Lines]",
          "264:         $queryBuilderProphecy = $this->prophesize(QueryBuilder::class);",
          "265:         $connectionPoolProphecy = $this->prophesize(ConnectionPool::class);",
          "266:         $connectionPoolProphecy->getQueryBuilderForTable('fe_users')->willReturn($queryBuilderProphecy->reveal());",
          "267:         GeneralUtility::addInstance(ConnectionPool::class, $connectionPoolProphecy->reveal());",
          "268:         $expressionBuilderProphecy = $this->prophesize(ExpressionBuilder::class);",
          "269:         $queryBuilderProphecy->expr()->willReturn($expressionBuilderProphecy->reveal());",
          "270:         $compositeExpressionProphecy = $this->prophesize(CompositeExpression::class);",
          "271:         $expressionBuilderProphecy->and(Argument::cetera())->willReturn($compositeExpressionProphecy->reveal());",
          "272:         $expressionBuilderProphecy->in(Argument::cetera())->willReturn('');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "328:     public function canLogUserInWithoutAnonymousSession(): void",
          "329:     {",
          "330:         $GLOBALS['BE_USER'] = [];",
          "343:         $userSession = UserSession::createNonFixated('newSessionId');",
          "",
          "[Removed Lines]",
          "332:         $queryBuilderProphecy = $this->prophesize(QueryBuilder::class);",
          "333:         $connectionPoolProphecy = $this->prophesize(ConnectionPool::class);",
          "334:         $connectionPoolProphecy->getQueryBuilderForTable('fe_users')->willReturn($queryBuilderProphecy->reveal());",
          "335:         GeneralUtility::addInstance(ConnectionPool::class, $connectionPoolProphecy->reveal());",
          "336:         $expressionBuilderProphecy = $this->prophesize(ExpressionBuilder::class);",
          "337:         $queryBuilderProphecy->expr()->willReturn($expressionBuilderProphecy->reveal());",
          "338:         $compositeExpressionProphecy = $this->prophesize(CompositeExpression::class);",
          "339:         $expressionBuilderProphecy->and(Argument::cetera())->willReturn($compositeExpressionProphecy->reveal());",
          "340:         $expressionBuilderProphecy->in(Argument::cetera())->willReturn('');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84285835413fdbe035509c9a064ae7affa81b3e8",
      "candidate_info": {
        "commit_hash": "84285835413fdbe035509c9a064ae7affa81b3e8",
        "repo": "TYPO3/typo3",
        "commit_url": "https://github.com/TYPO3/typo3/commit/84285835413fdbe035509c9a064ae7affa81b3e8",
        "files": [
          "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
          "typo3/sysext/core/Classes/Authentication/AuthenticationService.php",
          "typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php"
        ],
        "message": "[SECURITY] Mitigate timing discrepancies during user authentication\n\nObserving response time during user authentication can be used to\ndistinguish between existing and non-existing user accounts. This\nchange introduces `MimicServiceInterface::mimicAuthUser` -  to be\nimplemented by 3rd party authentication services - which simulates\ncorresponding times regular processing would usually take.\n\nResolves: #98217\nReleases: main, 11.5, 10.4\nChange-Id: I143ae0d3877dffe6f2decbb3f0cf8c9d9cb6ca0b\nSecurity-Bulletin: TYPO3-CORE-SA-2022-007\nSecurity-References: CVE-2022-36105\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/75704\nTested-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>",
        "before_after_code_files": [
          "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
          "typo3/sysext/core/Classes/Authentication/AuthenticationService.php||typo3/sysext/core/Classes/Authentication/AuthenticationService.php",
          "typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php||typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
            "typo3/sysext/core/Classes/Authentication/AuthenticationService.php||typo3/sysext/core/Classes/Authentication/AuthenticationService.php",
            "typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php||typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php"
          ],
          "candidate": [
            "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
            "typo3/sysext/core/Classes/Authentication/AuthenticationService.php||typo3/sysext/core/Classes/Authentication/AuthenticationService.php",
            "typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php||typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php"
          ]
        }
      },
      "candidate_diff": {
        "typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php||typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php": [
          "File: typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php -> typo3/sysext/core/Classes/Authentication/AbstractUserAuthentication.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "711:                     break;",
          "712:                 }",
          "713:             }",
          "714:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "716:         } elseif ($activeLogin) {",
          "717:             $subType = 'authUser' . $this->loginType;",
          "718:             foreach ($this->getAuthServices($subType, $loginData, $authInfo) as $serviceObj) {",
          "719:                 if ($serviceObj instanceof MimicServiceInterface && $serviceObj->mimicAuthUser() === false) {",
          "720:                     break;",
          "721:                 }",
          "722:             }",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Classes/Authentication/AuthenticationService.php||typo3/sysext/core/Classes/Authentication/AuthenticationService.php": [
          "File: typo3/sysext/core/Classes/Authentication/AuthenticationService.php -> typo3/sysext/core/Classes/Authentication/AuthenticationService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: {",
          "",
          "[Removed Lines]",
          "32: class AuthenticationService extends AbstractAuthenticationService",
          "",
          "[Added Lines]",
          "32: class AuthenticationService extends AbstractAuthenticationService implements MimicServiceInterface",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:         return 200;",
          "194:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:     public function mimicAuthUser(): bool",
          "201:     {",
          "202:         try {",
          "203:             $hashFactory = GeneralUtility::makeInstance(PasswordHashFactory::class);",
          "204:             $defaultHashInstance = $hashFactory->getDefaultHashInstance($this->pObj->loginType);",
          "205:             $defaultHashInstance->getHashedPassword(random_bytes(10));",
          "206:         } catch (\\Exception $exception) {",
          "208:         }",
          "209:         return false;",
          "210:     }",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php||typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php": [
          "File: typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php -> typo3/sysext/core/Classes/Authentication/MimicServiceInterface.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: declare(strict_types=1);",
          "18: namespace TYPO3\\CMS\\Core\\Authentication;",
          "20: interface MimicServiceInterface",
          "21: {",
          "34:     public function mimicAuthUser(): bool;",
          "35: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}