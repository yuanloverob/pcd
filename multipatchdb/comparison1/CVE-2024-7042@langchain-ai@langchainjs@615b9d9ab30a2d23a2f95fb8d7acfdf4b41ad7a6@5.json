{
  "cve_id": "CVE-2024-7042",
  "cve_desc": "A vulnerability in the GraphCypherQAChain class of langchain-ai/langchainjs versions 0.2.5 and all versions with this class allows for prompt injection, leading to SQL injection. This vulnerability permits unauthorized data manipulation, data exfiltration, denial of service (DoS) by deleting all data, breaches in multi-tenant security environments, and data integrity issues. Attackers can create, update, or delete nodes and relationships without proper authorization, extract sensitive data, disrupt services, access data across different tenants, and compromise the integrity of the database.",
  "repo": "langchain-ai/langchainjs",
  "patch_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
  "patch_info": {
    "commit_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "repo": "langchain-ai/langchainjs",
    "commit_url": "https://github.com/langchain-ai/langchainjs/commit/615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "files": [
      "examples/package.json",
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/package.json",
      "libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock"
    ],
    "message": "feat(community): Remove required param from LanceDB integration (#6706)\n\nCo-authored-by: jacoblee93 <jacoblee93@gmail.com>",
    "before_after_code_files": [
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromDocs.ts -> examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import fs from \"node:fs/promises\";",
      "5: import path from \"node:path\";",
      "6: import os from \"node:os\";",
      "10: const loader = new TextLoader(\"src/document_loaders/example_data/example.txt\");",
      "11: const docs = await loader.load();",
      "13: export const run = async () => {",
      "14:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "26:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "27:   console.log(resultOne);",
      "",
      "[Removed Lines]",
      "7: import { connect } from \"vectordb\";",
      "15:   const db = await connect(dir);",
      "16:   const table = await db.createTable(\"vectors\", [",
      "17:     { vector: Array(1536), text: \"sample\", source: \"a\" },",
      "18:   ]);",
      "20:   const vectorStore = await LanceDB.fromDocuments(",
      "21:     docs,",
      "22:     new OpenAIEmbeddings(),",
      "23:     { table }",
      "24:   );",
      "",
      "[Added Lines]",
      "13:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "15:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "16:   console.log(resultOne);",
      "24: };",
      "26: export const run_with_existing_table = async () => {",
      "29:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "",
      "---------------"
    ],
    "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromTexts.ts -> examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { LanceDB } from \"@langchain/community/vectorstores/lancedb\";",
      "2: import { OpenAIEmbeddings } from \"@langchain/openai\";",
      "4: import * as fs from \"node:fs/promises\";",
      "5: import * as path from \"node:path\";",
      "6: import os from \"node:os\";",
      "8: export const run = async () => {",
      "15:   const vectorStore = await LanceDB.fromTexts(",
      "16:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "17:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "20:   );",
      "22:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "",
      "[Removed Lines]",
      "3: import { connect } from \"vectordb\";",
      "9:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "10:   const db = await connect(dir);",
      "11:   const table = await db.createTable(\"vectors\", [",
      "12:     { vector: Array(1536), text: \"sample\", id: 1 },",
      "13:   ]);",
      "18:     new OpenAIEmbeddings(),",
      "19:     { table }",
      "",
      "[Added Lines]",
      "8:   const vectorStore = await LanceDB.fromTexts(",
      "9:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "10:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "11:     new OpenAIEmbeddings()",
      "12:   );",
      "14:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "15:   console.log(resultOne);",
      "17: };",
      "19: export const run_with_existing_table = async () => {",
      "20:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "24:     new OpenAIEmbeddings()",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts": [
      "File: libs/langchain-community/src/vectorstores/lancedb.ts -> libs/langchain-community/src/vectorstores/lancedb.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import type { EmbeddingsInterface } from \"@langchain/core/embeddings\";",
      "3: import { VectorStore } from \"@langchain/core/vectorstores\";",
      "4: import { Document } from \"@langchain/core/documents\";",
      "",
      "[Removed Lines]",
      "1: import { Table } from \"vectordb\";",
      "",
      "[Added Lines]",
      "1: import { connect, Table, Connection, WriteMode } from \"vectordb\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "10: export type LanceDBArgs = {",
      "12:   textKey?: string;",
      "13: };",
      "",
      "[Removed Lines]",
      "11:   table: Table;",
      "",
      "[Added Lines]",
      "11:   table?: Table;",
      "13:   uri?: string;",
      "14:   tableName?: string;",
      "15:   mode?: WriteMode;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "20: export class LanceDB extends VectorStore {",
      "23:   private textKey: string;",
      "28:     this.embeddings = embeddings;",
      "30:   }",
      "",
      "[Removed Lines]",
      "21:   private table: Table;",
      "25:   constructor(embeddings: EmbeddingsInterface, args: LanceDBArgs) {",
      "26:     super(embeddings, args);",
      "27:     this.table = args.table;",
      "29:     this.textKey = args.textKey || \"text\";",
      "",
      "[Added Lines]",
      "24:   private table?: Table;",
      "28:   private uri: string;",
      "30:   private tableName: string;",
      "32:   private mode?: WriteMode;",
      "34:   constructor(embeddings: EmbeddingsInterface, args?: LanceDBArgs) {",
      "35:     super(embeddings, args || {});",
      "36:     this.table = args?.table;",
      "38:     this.textKey = args?.textKey || \"text\";",
      "39:     this.uri = args?.uri || \"~/lancedb\";",
      "40:     this.tableName = args?.tableName || \"langchain\";",
      "41:     this.mode = args?.mode || WriteMode.Overwrite;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "71:       });",
      "72:       data.push(record);",
      "73:     }",
      "74:     await this.table.add(data);",
      "75:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86:     if (!this.table) {",
      "87:       const db: Connection = await connect(this.uri);",
      "88:       this.table = await db.createTable(this.tableName, data, {",
      "89:         writeMode: this.mode,",
      "90:       });",
      "92:       return;",
      "93:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "85:     query: number[],",
      "86:     k: number",
      "87:   ): Promise<[Document, number][]> {",
      "88:     const results = await this.table.search(query).limit(k).execute();",
      "90:     const docsAndScore: [Document, number][] = [];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:     if (!this.table) {",
      "109:       throw new Error(",
      "110:         \"Table not found. Please add vectors to the table first.\"",
      "111:       );",
      "112:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "119:     texts: string[],",
      "120:     metadatas: object[] | object,",
      "121:     embeddings: EmbeddingsInterface,",
      "123:   ): Promise<LanceDB> {",
      "124:     const docs: Document[] = [];",
      "125:     for (let i = 0; i < texts.length; i += 1) {",
      "",
      "[Removed Lines]",
      "122:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "147:     dbConfig?: LanceDBArgs",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "143:   static async fromDocuments(",
      "144:     docs: Document[],",
      "145:     embeddings: EmbeddingsInterface,",
      "147:   ): Promise<LanceDB> {",
      "148:     const instance = new this(embeddings, dbConfig);",
      "149:     await instance.addDocuments(docs);",
      "",
      "[Removed Lines]",
      "146:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "171:     dbConfig?: LanceDBArgs",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts": [
      "File: libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts -> libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     expect(resultsTwo.length).toBe(5);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49: describe(\"LanceDB empty schema\", () => {",
      "50:   test(\"Test fromTexts + addDocuments\", async () => {",
      "51:     const embeddings = new OpenAIEmbeddings();",
      "52:     const vectorStore = await LanceDB.fromTexts(",
      "53:       [\"hello bye\", \"hello world\", \"bye bye\"],",
      "54:       [{ id: 1 }, { id: 2 }, { id: 3 }],",
      "55:       embeddings",
      "56:     );",
      "58:     const results = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "59:     expect(results.length).toBe(3);",
      "61:     await vectorStore.addDocuments([",
      "62:       new Document({",
      "63:         pageContent: \"a new world\",",
      "64:         metadata: { id: 4 },",
      "65:       }),",
      "66:     ]);",
      "68:     const resultsTwo = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "69:     expect(resultsTwo.length).toBe(4);",
      "70:   });",
      "71: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:   languageName: node",
      "252:   linkType: hard",
      "272: \"@apify/consts@npm:^2.13.0, @apify/consts@npm:^2.9.0\":",
      "273:   version: 2.13.0",
      "274:   resolution: \"@apify/consts@npm:2.13.0\"",
      "",
      "[Removed Lines]",
      "254: \"@apache-arrow/ts@npm:^12.0.0\":",
      "255:   version: 12.0.0",
      "256:   resolution: \"@apache-arrow/ts@npm:12.0.0\"",
      "257:   dependencies:",
      "258:     \"@types/command-line-args\": 5.2.0",
      "259:     \"@types/command-line-usage\": 5.0.2",
      "260:     \"@types/node\": 18.14.5",
      "261:     \"@types/pad-left\": 2.1.1",
      "262:     command-line-args: 5.2.1",
      "263:     command-line-usage: 6.1.3",
      "264:     flatbuffers: 23.3.3",
      "265:     json-bignum: ^0.0.3",
      "266:     pad-left: ^2.1.0",
      "267:     tslib: ^2.5.0",
      "268:   checksum: 67b2791e14d5377b1d160a0d8390decc386e013c517713f8b9c100737a0e478a394086d91a8c846848d4e30289070a119d8e65191998f4c2555b18a29564df50",
      "269:   languageName: node",
      "270:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11112:   languageName: node",
      "11113:   linkType: hard",
      "11115: \"@langchain/anthropic@*, @langchain/anthropic@workspace:*, @langchain/anthropic@workspace:libs/langchain-anthropic\":",
      "11116:   version: 0.0.0-use.local",
      "11117:   resolution: \"@langchain/anthropic@workspace:libs/langchain-anthropic\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11097: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\":",
      "11098:   version: 0.4.20",
      "11099:   resolution: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\"",
      "11100:   conditions: os=darwin & cpu=arm64",
      "11101:   languageName: node",
      "11102:   linkType: hard",
      "11104: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\":",
      "11105:   version: 0.4.20",
      "11106:   resolution: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\"",
      "11107:   conditions: os=darwin & cpu=x64",
      "11108:   languageName: node",
      "11109:   linkType: hard",
      "11111: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\":",
      "11112:   version: 0.4.20",
      "11113:   resolution: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\"",
      "11114:   conditions: os=linux & cpu=arm64",
      "11115:   languageName: node",
      "11116:   linkType: hard",
      "11118: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\":",
      "11119:   version: 0.4.20",
      "11120:   resolution: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\"",
      "11121:   conditions: os=linux & cpu=x64",
      "11122:   languageName: node",
      "11123:   linkType: hard",
      "11125: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\":",
      "11126:   version: 0.4.20",
      "11127:   resolution: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\"",
      "11128:   conditions: os=win32 & cpu=x64",
      "11129:   languageName: node",
      "11130:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "11577:     typesense: ^1.5.3",
      "11578:     usearch: ^1.1.1",
      "11579:     uuid: ^10.0.0",
      "11581:     voy-search: 0.6.2",
      "11582:     weaviate-ts-client: ^1.4.0",
      "11583:     web-auth-library: ^1.0.3",
      "",
      "[Removed Lines]",
      "11580:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "11597:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "13039:   languageName: node",
      "13040:   linkType: hard",
      "13042: \"@neondatabase/serverless@npm:0.6.0\":",
      "13043:   version: 0.6.0",
      "13044:   resolution: \"@neondatabase/serverless@npm:0.6.0\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13059: \"@neon-rs/load@npm:^0.0.74\":",
      "13060:   version: 0.0.74",
      "13061:   resolution: \"@neon-rs/load@npm:0.0.74\"",
      "13062:   checksum: d26ec9b08cdf1a7c5aeefe98f77112d205d11b4005a7934b21fe8fd27528847e08e4749e7e6c3fc05ae9f701175a58c11a095ae6af449634df3991a2c82e1dfa",
      "13063:   languageName: node",
      "13064:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "20774:   languageName: node",
      "20775:   linkType: hard",
      "20797: \"apache-arrow@npm:^12.0.1\":",
      "20798:   version: 12.0.1",
      "20799:   resolution: \"apache-arrow@npm:12.0.1\"",
      "",
      "[Removed Lines]",
      "20777: \"apache-arrow@npm:^12.0.0\":",
      "20778:   version: 12.0.0",
      "20779:   resolution: \"apache-arrow@npm:12.0.0\"",
      "20780:   dependencies:",
      "20781:     \"@types/command-line-args\": 5.2.0",
      "20782:     \"@types/command-line-usage\": 5.0.2",
      "20783:     \"@types/node\": 18.14.5",
      "20784:     \"@types/pad-left\": 2.1.1",
      "20785:     command-line-args: 5.2.1",
      "20786:     command-line-usage: 6.1.3",
      "20787:     flatbuffers: 23.3.3",
      "20788:     json-bignum: ^0.0.3",
      "20789:     pad-left: ^2.1.0",
      "20790:     tslib: ^2.5.0",
      "20791:   bin:",
      "20792:     arrow2csv: bin/arrow2csv.js",
      "20793:   checksum: 3285189517c2b298cda42852321ce127754918513116eade6e4914c57983f68b6ba96605cfaa2202796d3d6e14755d3b3758f76c1374492affa3d95714eaca40",
      "20794:   languageName: node",
      "20795:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "27133:     typescript: ~5.1.6",
      "27134:     typesense: ^1.5.3",
      "27135:     uuid: ^10.0.0",
      "27137:     voy-search: 0.6.2",
      "27138:     weaviate-ts-client: ^2.0.0",
      "27139:     zod: ^3.22.4",
      "",
      "[Removed Lines]",
      "27136:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "27140:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "42444:   languageName: node",
      "42445:   linkType: hard",
      "42454:   languageName: node",
      "42455:   linkType: hard",
      "",
      "[Removed Lines]",
      "42447: \"vectordb@npm:^0.1.4\":",
      "42448:   version: 0.1.4",
      "42449:   resolution: \"vectordb@npm:0.1.4\"",
      "42450:   dependencies:",
      "42451:     \"@apache-arrow/ts\": ^12.0.0",
      "42452:     apache-arrow: ^12.0.0",
      "42453:   checksum: 8a40abf4466479b0b9e61687416b5ab232458401917bf9a1d5f3d8ea8c8320ecc5691174f4d4c0cfef0bb6c16328a9088419fd90ac85fd7267dbccdd1f9e55d7",
      "",
      "[Added Lines]",
      "42451: \"vectordb@npm:^0.9.0\":",
      "42452:   version: 0.9.0",
      "42453:   resolution: \"vectordb@npm:0.9.0\"",
      "42454:   dependencies:",
      "42455:     \"@lancedb/vectordb-darwin-arm64\": 0.4.20",
      "42456:     \"@lancedb/vectordb-darwin-x64\": 0.4.20",
      "42457:     \"@lancedb/vectordb-linux-arm64-gnu\": 0.4.20",
      "42458:     \"@lancedb/vectordb-linux-x64-gnu\": 0.4.20",
      "42459:     \"@lancedb/vectordb-win32-x64-msvc\": 0.4.20",
      "42460:     \"@neon-rs/load\": ^0.0.74",
      "42461:     axios: ^1.4.0",
      "42462:   peerDependencies:",
      "42463:     \"@apache-arrow/ts\": ^14.0.2",
      "42464:     apache-arrow: ^14.0.2",
      "42465:   dependenciesMeta:",
      "42466:     \"@lancedb/vectordb-darwin-arm64\":",
      "42467:       optional: true",
      "42468:     \"@lancedb/vectordb-darwin-x64\":",
      "42469:       optional: true",
      "42470:     \"@lancedb/vectordb-linux-arm64-gnu\":",
      "42471:       optional: true",
      "42472:     \"@lancedb/vectordb-linux-x64-gnu\":",
      "42473:       optional: true",
      "42474:     \"@lancedb/vectordb-win32-x64-msvc\":",
      "42475:       optional: true",
      "42476:   conditions: (os=darwin | os=linux | os=win32) & (cpu=x64 | cpu=arm64)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ec9b6a57ac8a09fee9e6943dcd1611e114d276fa",
      "candidate_info": {
        "commit_hash": "ec9b6a57ac8a09fee9e6943dcd1611e114d276fa",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/ec9b6a57ac8a09fee9e6943dcd1611e114d276fa",
        "files": [
          "libs/langchain-azure-cosmosdb/src/chat_histories/mongodb.ts",
          "libs/langchain-azure-cosmosdb/src/chat_histories/nosql.ts",
          "libs/langchain-azure-cosmosdb/src/index.ts",
          "libs/langchain-azure-cosmosdb/src/tests/chat_histories/mongodb.int.test.ts",
          "libs/langchain-azure-cosmosdb/src/tests/chat_histories/nosql.int.test.ts",
          "yarn.lock"
        ],
        "message": "feat(azure-cosmosdb): add AzureCosmosDBMongoChatMessageHistory (#7305)\n\nCo-authored-by: root <root@CPC-yangq-FRSGK>",
        "before_after_code_files": [
          "libs/langchain-azure-cosmosdb/src/chat_histories/mongodb.ts||libs/langchain-azure-cosmosdb/src/chat_histories/mongodb.ts",
          "libs/langchain-azure-cosmosdb/src/index.ts||libs/langchain-azure-cosmosdb/src/index.ts",
          "libs/langchain-azure-cosmosdb/src/tests/chat_histories/mongodb.int.test.ts||libs/langchain-azure-cosmosdb/src/tests/chat_histories/mongodb.int.test.ts",
          "libs/langchain-azure-cosmosdb/src/tests/chat_histories.int.test.ts||libs/langchain-azure-cosmosdb/src/tests/chat_histories/nosql.int.test.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-azure-cosmosdb/src/chat_histories/mongodb.ts||libs/langchain-azure-cosmosdb/src/chat_histories/mongodb.ts": [
          "File: libs/langchain-azure-cosmosdb/src/chat_histories/mongodb.ts -> libs/langchain-azure-cosmosdb/src/chat_histories/mongodb.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   Collection,",
          "3:   Document as AzureCosmosMongoDBDocument,",
          "4:   PushOperator,",
          "5:   Db,",
          "6:   MongoClient,",
          "7: } from \"mongodb\";",
          "8: import { BaseListChatMessageHistory } from \"@langchain/core/chat_history\";",
          "9: import {",
          "10:   BaseMessage,",
          "11:   mapChatMessagesToStoredMessages,",
          "12:   mapStoredMessagesToChatMessages,",
          "13: } from \"@langchain/core/messages\";",
          "14: import { getEnvironmentVariable } from \"@langchain/core/utils/env\";",
          "16: export interface AzureCosmosDBMongoChatHistoryDBConfig {",
          "17:   readonly client?: MongoClient;",
          "18:   readonly connectionString?: string;",
          "19:   readonly databaseName?: string;",
          "20:   readonly collectionName?: string;",
          "21: }",
          "23: const ID_KEY = \"sessionId\";",
          "25: export class AzureCosmosDBMongoChatMessageHistory extends BaseListChatMessageHistory {",
          "26:   lc_namespace = [\"langchain\", \"stores\", \"message\", \"azurecosmosdb\"];",
          "28:   get lc_secrets(): { [key: string]: string } {",
          "29:     return {",
          "30:       connectionString: \"AZURE_COSMOSDB_MONGODB_CONNECTION_STRING\",",
          "31:     };",
          "32:   }",
          "34:   private initPromise?: Promise<void>;",
          "36:   private readonly client: MongoClient | undefined;",
          "38:   private database: Db;",
          "40:   private collection: Collection<AzureCosmosMongoDBDocument>;",
          "42:   private sessionId: string;",
          "44:   initialize: () => Promise<void>;",
          "46:   constructor(",
          "47:     dbConfig: AzureCosmosDBMongoChatHistoryDBConfig,",
          "48:     sessionId: string",
          "49:   ) {",
          "50:     super();",
          "52:     const connectionString =",
          "53:       dbConfig.connectionString ??",
          "54:       getEnvironmentVariable(\"AZURE_COSMOSDB_MONGODB_CONNECTION_STRING\");",
          "56:     if (!dbConfig.client && !connectionString) {",
          "57:       throw new Error(\"Mongo client or connection string must be set.\");",
          "58:     }",
          "60:     if (!dbConfig.client) {",
          "62:       this.client = new MongoClient(connectionString!, {",
          "63:         appName: \"langchainjs\",",
          "64:       });",
          "65:     }",
          "68:     const client = dbConfig.client || this.client!;",
          "69:     const databaseName = dbConfig.databaseName ?? \"chatHistoryDB\";",
          "70:     const collectionName = dbConfig.collectionName ?? \"chatHistory\";",
          "72:     this.sessionId = sessionId;",
          "75:     this.initialize = () => {",
          "76:       if (this.initPromise === undefined) {",
          "77:         this.initPromise = this.init(",
          "78:           client,",
          "79:           databaseName,",
          "80:           collectionName",
          "81:         ).catch((error) => {",
          "82:           console.error(",
          "83:             \"Error during AzureCosmosDBMongoChatMessageHistory initialization: \",",
          "84:             error",
          "85:           );",
          "86:         });",
          "87:       }",
          "89:       return this.initPromise;",
          "90:     };",
          "91:   }",
          "100:   private async init(",
          "101:     client: MongoClient,",
          "102:     databaseName: string,",
          "103:     collectionName: string",
          "104:   ): Promise<void> {",
          "105:     this.initPromise = (async () => {",
          "106:       await client.connect();",
          "107:       this.database = client.db(databaseName);",
          "108:       this.collection = this.database.collection(collectionName);",
          "109:     })();",
          "111:     return this.initPromise;",
          "112:   }",
          "118:   async getMessages(): Promise<BaseMessage[]> {",
          "119:     await this.initialize();",
          "121:     const document = await this.collection.findOne({",
          "122:       [ID_KEY]: this.sessionId,",
          "123:     });",
          "124:     const messages = document?.messages || [];",
          "125:     return mapStoredMessagesToChatMessages(messages);",
          "126:   }",
          "133:   async addMessage(message: BaseMessage): Promise<void> {",
          "134:     await this.initialize();",
          "136:     const messages = mapChatMessagesToStoredMessages([message]);",
          "137:     await this.collection.updateOne(",
          "138:       { [ID_KEY]: this.sessionId },",
          "139:       {",
          "140:         $push: { messages: { $each: messages } } as PushOperator<Document>,",
          "141:       },",
          "142:       { upsert: true }",
          "143:     );",
          "144:   }",
          "150:   async clear(): Promise<void> {",
          "151:     await this.initialize();",
          "153:     await this.collection.deleteOne({ [ID_KEY]: this.sessionId });",
          "154:   }",
          "155: }",
          "",
          "---------------"
        ],
        "libs/langchain-azure-cosmosdb/src/index.ts||libs/langchain-azure-cosmosdb/src/index.ts": [
          "File: libs/langchain-azure-cosmosdb/src/index.ts -> libs/langchain-azure-cosmosdb/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export * from \"./azure_cosmosdb_mongodb.js\";",
          "2: export * from \"./azure_cosmosdb_nosql.js\";",
          "3: export * from \"./caches.js\";",
          "",
          "[Removed Lines]",
          "4: export * from \"./chat_histories.js\";",
          "",
          "[Added Lines]",
          "4: export * from \"./chat_histories/nosql.js\";",
          "5: export * from \"./chat_histories/mongodb.js\";",
          "",
          "---------------"
        ],
        "libs/langchain-azure-cosmosdb/src/tests/chat_histories/mongodb.int.test.ts||libs/langchain-azure-cosmosdb/src/tests/chat_histories/mongodb.int.test.ts": [
          "File: libs/langchain-azure-cosmosdb/src/tests/chat_histories/mongodb.int.test.ts -> libs/langchain-azure-cosmosdb/src/tests/chat_histories/mongodb.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import { MongoClient, ObjectId } from \"mongodb\";",
          "4: import { AIMessage, HumanMessage } from \"@langchain/core/messages\";",
          "5: import {",
          "6:   AzureCosmosDBMongoChatMessageHistory,",
          "7:   AzureCosmosDBMongoChatHistoryDBConfig,",
          "8: } from \"../../chat_histories/mongodb.js\";",
          "10: afterAll(async () => {",
          "12:   const client = new MongoClient(",
          "13:     process.env.AZURE_COSMOSDB_MONGODB_CONNECTION_STRING!",
          "14:   );",
          "15:   await client.connect();",
          "16:   await client.db(\"langchain\").dropDatabase();",
          "17:   await client.close();",
          "18: });",
          "20: test(\"Test Azure Cosmos MongoDB history store\", async () => {",
          "21:   expect(process.env.AZURE_COSMOSDB_MONGODB_CONNECTION_STRING).toBeDefined();",
          "24:   const mongoClient = new MongoClient(",
          "25:     process.env.AZURE_COSMOSDB_MONGODB_CONNECTION_STRING!",
          "26:   );",
          "27:   const dbcfg: AzureCosmosDBMongoChatHistoryDBConfig = {",
          "28:     client: mongoClient,",
          "29:     connectionString: process.env.AZURE_COSMOSDB_MONGODB_CONNECTION_STRING,",
          "30:     databaseName: \"langchain\",",
          "31:     collectionName: \"chathistory\",",
          "32:   };",
          "34:   const sessionId = new ObjectId().toString();",
          "35:   const chatHistory = new AzureCosmosDBMongoChatMessageHistory(",
          "36:     dbcfg,",
          "37:     sessionId",
          "38:   );",
          "40:   const blankResult = await chatHistory.getMessages();",
          "41:   expect(blankResult).toStrictEqual([]);",
          "43:   await chatHistory.addUserMessage(\"Who is the best vocalist?\");",
          "44:   await chatHistory.addAIChatMessage(\"Ozzy Osbourne\");",
          "46:   const expectedMessages = [",
          "47:     new HumanMessage(\"Who is the best vocalist?\"),",
          "48:     new AIMessage(\"Ozzy Osbourne\"),",
          "49:   ];",
          "51:   const resultWithHistory = await chatHistory.getMessages();",
          "52:   console.log(resultWithHistory);",
          "53:   expect(resultWithHistory).toEqual(expectedMessages);",
          "55:   await mongoClient.close();",
          "56: });",
          "58: test(\"Test clear Azure Cosmos MongoDB history store\", async () => {",
          "59:   expect(process.env.AZURE_COSMOSDB_MONGODB_CONNECTION_STRING).toBeDefined();",
          "62:   const mongoClient = new MongoClient(",
          "63:     process.env.AZURE_COSMOSDB_MONGODB_CONNECTION_STRING!",
          "64:   );",
          "65:   const dbcfg: AzureCosmosDBMongoChatHistoryDBConfig = {",
          "66:     client: mongoClient,",
          "67:     connectionString: process.env.AZURE_COSMOSDB_MONGODB_CONNECTION_STRING,",
          "68:     databaseName: \"langchain\",",
          "69:     collectionName: \"chathistory\",",
          "70:   };",
          "72:   const sessionId = new ObjectId().toString();",
          "73:   const chatHistory = new AzureCosmosDBMongoChatMessageHistory(",
          "74:     dbcfg,",
          "75:     sessionId",
          "76:   );",
          "78:   await chatHistory.addUserMessage(\"Who is the best vocalist?\");",
          "79:   await chatHistory.addAIChatMessage(\"Ozzy Osbourne\");",
          "81:   const expectedMessages = [",
          "82:     new HumanMessage(\"Who is the best vocalist?\"),",
          "83:     new AIMessage(\"Ozzy Osbourne\"),",
          "84:   ];",
          "86:   const resultWithHistory = await chatHistory.getMessages();",
          "87:   expect(resultWithHistory).toEqual(expectedMessages);",
          "89:   await chatHistory.clear();",
          "91:   const blankResult = await chatHistory.getMessages();",
          "92:   expect(blankResult).toStrictEqual([]);",
          "94:   await mongoClient.close();",
          "95: });",
          "",
          "---------------"
        ],
        "libs/langchain-azure-cosmosdb/src/tests/chat_histories.int.test.ts||libs/langchain-azure-cosmosdb/src/tests/chat_histories/nosql.int.test.ts": [
          "File: libs/langchain-azure-cosmosdb/src/tests/chat_histories.int.test.ts -> libs/langchain-azure-cosmosdb/src/tests/chat_histories/nosql.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import { CosmosClient } from \"@azure/cosmos\";",
          "7: import { DefaultAzureCredential } from \"@azure/identity\";",
          "8: import { ObjectId } from \"mongodb\";",
          "11: const DATABASE_NAME = \"langchainTestDB\";",
          "12: const CONTAINER_NAME = \"testContainer\";",
          "",
          "[Removed Lines]",
          "9: import { AzureCosmsosDBNoSQLChatMessageHistory } from \"../chat_histories.js\";",
          "",
          "[Added Lines]",
          "9: import { AzureCosmsosDBNoSQLChatMessageHistory } from \"../../chat_histories/nosql.js\";",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "13499:   languageName: node",
          "13500:   linkType: hard",
          "13505:   dependencies:",
          "13506:     sparse-bitfield: ^3.0.3",
          "13508:   languageName: node",
          "13509:   linkType: hard",
          "",
          "[Removed Lines]",
          "13502: \"@mongodb-js/saslprep@npm:^1.1.5\":",
          "13503:   version: 1.1.8",
          "13504:   resolution: \"@mongodb-js/saslprep@npm:1.1.8\"",
          "13507:   checksum: 259fda7ec913b5e63f102ae18840ef0d811c4a50919bbc437bd0452980806d640cd06c36076ed1655f1581ef24cd7316be0671f4b7429e7c97c7066524d2dbee",
          "",
          "[Added Lines]",
          "13502: \"@mongodb-js/saslprep@npm:^1.1.9\":",
          "13503:   version: 1.1.9",
          "13504:   resolution: \"@mongodb-js/saslprep@npm:1.1.9\"",
          "13507:   checksum: 6f13983e41c9fbd5273eeae9135e47e5b7a19125a63287bea69e33a618f8e034cfcf2258c77d0f5d6dcf386dfe2bb520bc01613afd1528c52f82c71172629242",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22626:   languageName: node",
          "22627:   linkType: hard",
          "22629: \"bson@npm:^6.2.0\":",
          "22630:   version: 6.2.0",
          "22631:   resolution: \"bson@npm:6.2.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22629: \"bson@npm:^6.10.0\":",
          "22630:   version: 6.10.1",
          "22631:   resolution: \"bson@npm:6.10.1\"",
          "22632:   checksum: 7c85c8df309bbfd4d42fae54aa37112ee048a89457be908a0e53a01d077d548c94a5a6870dd725ef48130da935286edc8b9ce04830869446db22b8c13a370c42",
          "22633:   languageName: node",
          "22634:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "22633:   languageName: node",
          "22634:   linkType: hard",
          "22643: \"buffer-alloc-unsafe@npm:^1.1.0\":",
          "22644:   version: 1.1.0",
          "22645:   resolution: \"buffer-alloc-unsafe@npm:1.1.0\"",
          "",
          "[Removed Lines]",
          "22636: \"bson@npm:^6.7.0\":",
          "22637:   version: 6.8.0",
          "22638:   resolution: \"bson@npm:6.8.0\"",
          "22639:   checksum: 66076b04d7d54e7773d601a19b7c224bc5cff6b008efe102463fbc058879f2c84c0ed793b5b6ed12cc7616bbbe5e670db81cf7352e0ea947918119f8af704ba5",
          "22640:   languageName: node",
          "22641:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "34956:   linkType: hard",
          "34958: \"mongodb@npm:^6.10.0\":",
          "34961:   dependencies:",
          "34964:     mongodb-connection-string-url: ^3.0.0",
          "34965:   peerDependencies:",
          "34966:     \"@aws-sdk/credential-providers\": ^3.188.0",
          "",
          "[Removed Lines]",
          "34959:   version: 6.10.0",
          "34960:   resolution: \"mongodb@npm:6.10.0\"",
          "34962:     \"@mongodb-js/saslprep\": ^1.1.5",
          "34963:     bson: ^6.7.0",
          "",
          "[Added Lines]",
          "34959:   version: 6.11.0",
          "34960:   resolution: \"mongodb@npm:6.11.0\"",
          "34962:     \"@mongodb-js/saslprep\": ^1.1.9",
          "34963:     bson: ^6.10.0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "34985:       optional: true",
          "34986:     socks:",
          "34987:       optional: true",
          "34989:   languageName: node",
          "34990:   linkType: hard",
          "",
          "[Removed Lines]",
          "34988:   checksum: b8e7ab9fb84181cb020b5fef5fedd90a5fc12140e688fa12ba588d523a958bb9f8790bfaceeca9f594171794eda0f56be855d7d0588705db82b3de7bf5e2352c",
          "",
          "[Added Lines]",
          "34988:   checksum: cb677bdee565eb9e7cbc27e538d5fafe61312e8ccfc97d4e04fdbf282f03e566537d659394f3236b6f958392707924a7ecae86fcb038a2f8f47b8edafa6edf4d",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f755f8478b9aa8fec15b7d6cbc33803c67929fd2",
      "candidate_info": {
        "commit_hash": "f755f8478b9aa8fec15b7d6cbc33803c67929fd2",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/f755f8478b9aa8fec15b7d6cbc33803c67929fd2",
        "files": [
          "libs/langchain-xai/package.json",
          "libs/langchain-xai/src/chat_models.ts",
          "libs/langchain-xai/src/tests/chat_models.int.test.ts",
          "libs/langchain-xai/src/tests/chat_models_structured_output.int.test.ts",
          "yarn.lock"
        ],
        "message": "feat(xai): xAI polish (#7722)",
        "before_after_code_files": [
          "libs/langchain-xai/src/chat_models.ts||libs/langchain-xai/src/chat_models.ts",
          "libs/langchain-xai/src/tests/chat_models.int.test.ts||libs/langchain-xai/src/tests/chat_models.int.test.ts",
          "libs/langchain-xai/src/tests/chat_models_structured_output.int.test.ts||libs/langchain-xai/src/tests/chat_models_structured_output.int.test.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-xai/src/chat_models.ts||libs/langchain-xai/src/chat_models.ts": [
          "File: libs/langchain-xai/src/chat_models.ts -> libs/langchain-xai/src/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {",
          "2:   BaseChatModelCallOptions,",
          "3:   BindToolsInput,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { BaseLanguageModelInput } from \"@langchain/core/language_models/base\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5:   type BaseChatModelParams,",
          "6: } from \"@langchain/core/language_models/chat_models\";",
          "7: import { Serialized } from \"@langchain/core/load/serializable\";",
          "8: import { getEnvironmentVariable } from \"@langchain/core/utils/env\";",
          "9: import {",
          "10:   type OpenAICoreRequestOptions,",
          "11:   type OpenAIClient,",
          "12:   ChatOpenAI,",
          "13:   OpenAIToolChoice,",
          "14: } from \"@langchain/openai\";",
          "16: type ChatXAIToolType = BindToolsInput | OpenAIClient.ChatCompletionTool;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import { AIMessageChunk, BaseMessage } from \"@langchain/core/messages\";",
          "10: import { Runnable } from \"@langchain/core/runnables\";",
          "17:   ChatOpenAIStructuredOutputMethodOptions,",
          "19: import { z } from \"zod\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:     return super.completionWithRetry(newRequest, options);",
          "496:   }",
          "497: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:   protected override _convertOpenAIDeltaToBaseMessageChunk(",
          "505:     delta: Record<string, any>,",
          "506:     rawResponse: OpenAIClient.ChatCompletionChunk,",
          "507:     defaultRole?:",
          "508:       | \"function\"",
          "509:       | \"user\"",
          "510:       | \"system\"",
          "511:       | \"developer\"",
          "512:       | \"assistant\"",
          "513:       | \"tool\"",
          "514:   ) {",
          "515:     const messageChunk: AIMessageChunk =",
          "516:       super._convertOpenAIDeltaToBaseMessageChunk(",
          "517:         delta,",
          "518:         rawResponse,",
          "519:         defaultRole",
          "520:       );",
          "522:     if (!rawResponse.choices[0]?.finish_reason) {",
          "523:       delete messageChunk.response_metadata.usage;",
          "524:       delete messageChunk.usage_metadata;",
          "525:     } else {",
          "526:       messageChunk.usage_metadata = messageChunk.response_metadata.usage;",
          "527:     }",
          "528:     return messageChunk;",
          "529:   }",
          "531:   protected override _convertOpenAIChatCompletionMessageToBaseMessage(",
          "532:     message: OpenAIClient.ChatCompletionMessage,",
          "533:     rawResponse: OpenAIClient.ChatCompletion",
          "534:   ) {",
          "535:     const langChainMessage =",
          "536:       super._convertOpenAIChatCompletionMessageToBaseMessage(",
          "537:         message,",
          "538:         rawResponse",
          "539:       );",
          "540:     langChainMessage.additional_kwargs.reasoning_content =",
          "542:       (message as any).reasoning_content;",
          "543:     return langChainMessage;",
          "544:   }",
          "546:   override withStructuredOutput<",
          "548:     RunOutput extends Record<string, any> = Record<string, any>",
          "549:   >(",
          "550:     outputSchema:",
          "551:       | z.ZodType<RunOutput>",
          "553:       | Record<string, any>,",
          "554:     config?: ChatOpenAIStructuredOutputMethodOptions<false>",
          "555:   ): Runnable<BaseLanguageModelInput, RunOutput>;",
          "557:   override withStructuredOutput<",
          "559:     RunOutput extends Record<string, any> = Record<string, any>",
          "560:   >(",
          "561:     outputSchema:",
          "562:       | z.ZodType<RunOutput>",
          "564:       | Record<string, any>,",
          "565:     config?: ChatOpenAIStructuredOutputMethodOptions<true>",
          "566:   ): Runnable<BaseLanguageModelInput, { raw: BaseMessage; parsed: RunOutput }>;",
          "568:   override withStructuredOutput<",
          "570:     RunOutput extends Record<string, any> = Record<string, any>",
          "571:   >(",
          "572:     outputSchema:",
          "573:       | z.ZodType<RunOutput>",
          "575:       | Record<string, any>,",
          "576:     config?: ChatOpenAIStructuredOutputMethodOptions<boolean>",
          "577:   ):",
          "578:     | Runnable<BaseLanguageModelInput, RunOutput>",
          "579:     | Runnable<BaseLanguageModelInput, { raw: BaseMessage; parsed: RunOutput }>;",
          "581:   override withStructuredOutput<",
          "583:     RunOutput extends Record<string, any> = Record<string, any>",
          "584:   >(",
          "585:     outputSchema:",
          "586:       | z.ZodType<RunOutput>",
          "588:       | Record<string, any>,",
          "589:     config?: ChatOpenAIStructuredOutputMethodOptions<boolean>",
          "590:   ):",
          "591:     | Runnable<BaseLanguageModelInput, RunOutput>",
          "592:     | Runnable<",
          "593:         BaseLanguageModelInput,",
          "594:         { raw: BaseMessage; parsed: RunOutput }",
          "595:       > {",
          "596:     const ensuredConfig = { ...config };",
          "597:     if (ensuredConfig?.method === undefined) {",
          "598:       ensuredConfig.method = \"functionCalling\";",
          "599:     }",
          "600:     return super.withStructuredOutput<RunOutput>(outputSchema, ensuredConfig);",
          "601:   }",
          "",
          "---------------"
        ],
        "libs/langchain-xai/src/tests/chat_models.int.test.ts||libs/langchain-xai/src/tests/chat_models.int.test.ts": [
          "File: libs/langchain-xai/src/tests/chat_models.int.test.ts -> libs/langchain-xai/src/tests/chat_models.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: test(\"invoke with bound tools\", async () => {",
          "69:   const chat = new ChatXAI({",
          "70:     maxRetries: 0,",
          "72:   });",
          "73:   const message = new HumanMessage(\"What is the current weather in Hawaii?\");",
          "74:   const res = await chat",
          "",
          "[Removed Lines]",
          "71:     model: \"grok-beta\",",
          "",
          "[Added Lines]",
          "71:     model: \"grok-2-1212\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145: test(\"Few shotting with tool calls\", async () => {",
          "146:   const chat = new ChatXAI({",
          "148:     temperature: 0,",
          "149:   }).bind({",
          "150:     tools: [",
          "",
          "[Removed Lines]",
          "147:     model: \"grok-beta\",",
          "",
          "[Added Lines]",
          "147:     model: \"grok-2-1212\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:   expect(res.content).toContain(\"24\");",
          "195: });",
          "198:   const model = new ChatXAI({",
          "200:     temperature: 0,",
          "201:   });",
          "",
          "[Removed Lines]",
          "197: test(\"Groq can stream tool calls\", async () => {",
          "199:     model: \"grok-beta\",",
          "",
          "[Added Lines]",
          "197: test(\"xAI can stream tool calls\", async () => {",
          "199:     model: \"grok-2-1212\",",
          "",
          "---------------"
        ],
        "libs/langchain-xai/src/tests/chat_models_structured_output.int.test.ts||libs/langchain-xai/src/tests/chat_models_structured_output.int.test.ts": [
          "File: libs/langchain-xai/src/tests/chat_models_structured_output.int.test.ts -> libs/langchain-xai/src/tests/chat_models_structured_output.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: test(\"withStructuredOutput zod schema function calling\", async () => {",
          "8:   const model = new ChatXAI({",
          "9:     temperature: 0,",
          "11:   });",
          "13:   const calculatorSchema = z.object({",
          "",
          "[Removed Lines]",
          "10:     model: \"grok-beta\",",
          "",
          "[Added Lines]",
          "10:     model: \"grok-2-1212\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: test(\"withStructuredOutput zod schema JSON mode\", async () => {",
          "38:   const model = new ChatXAI({",
          "39:     temperature: 0,",
          "41:   });",
          "43:   const calculatorSchema = z.object({",
          "",
          "[Removed Lines]",
          "40:     model: \"grok-beta\",",
          "",
          "[Added Lines]",
          "40:     model: \"grok-2-1212\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: test(\"withStructuredOutput JSON schema function calling\", async () => {",
          "77:   const model = new ChatXAI({",
          "78:     temperature: 0,",
          "80:   });",
          "82:   const calculatorSchema = z.object({",
          "",
          "[Removed Lines]",
          "79:     model: \"grok-beta\",",
          "",
          "[Added Lines]",
          "79:     model: \"grok-2-1212\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106: test(\"withStructuredOutput OpenAI function definition function calling\", async () => {",
          "107:   const model = new ChatXAI({",
          "108:     temperature: 0,",
          "110:   });",
          "112:   const calculatorSchema = z.object({",
          "",
          "[Removed Lines]",
          "109:     model: \"grok-beta\",",
          "",
          "[Added Lines]",
          "109:     model: \"grok-2-1212\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:   });",
          "122:   const prompt = ChatPromptTemplate.fromMessages([",
          "127:   ]);",
          "128:   const chain = prompt.pipe(modelWithStructuredOutput);",
          "129:   const result = await chain.invoke({});",
          "131:   expect(\"operation\" in result).toBe(true);",
          "132:   expect(\"number1\" in result).toBe(true);",
          "133:   expect(\"number2\" in result).toBe(true);",
          "",
          "[Removed Lines]",
          "123:     \"system\",",
          "124:     `You are VERY bad at math and must always use a calculator.`,",
          "125:     \"human\",",
          "126:     \"Please help me!! What is 2 + 2?\",",
          "",
          "[Added Lines]",
          "123:     [\"system\", `You are VERY bad at math and must always use a calculator.`],",
          "124:     [\"human\", \"Please help me!! What is 2 + 2?\"],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "136: test(\"withStructuredOutput JSON schema JSON mode\", async () => {",
          "137:   const model = new ChatXAI({",
          "138:     temperature: 0,",
          "140:   });",
          "142:   const calculatorSchema = z.object({",
          "",
          "[Removed Lines]",
          "139:     model: \"grok-beta\",",
          "",
          "[Added Lines]",
          "137:     model: \"grok-2-1212\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "175: test(\"withStructuredOutput JSON schema\", async () => {",
          "176:   const model = new ChatXAI({",
          "177:     temperature: 0,",
          "179:   });",
          "181:   const jsonSchema = {",
          "",
          "[Removed Lines]",
          "178:     model: \"grok-beta\",",
          "",
          "[Added Lines]",
          "176:     model: \"grok-2-1212\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "216: test(\"withStructuredOutput includeRaw true\", async () => {",
          "217:   const model = new ChatXAI({",
          "218:     temperature: 0,",
          "220:   });",
          "222:   const calculatorSchema = z.object({",
          "",
          "[Removed Lines]",
          "219:     model: \"grok-beta\",",
          "",
          "[Added Lines]",
          "217:     model: \"grok-2-1212\",",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "13335:     rollup: ^4.5.2",
          "13336:     ts-jest: ^29.1.0",
          "13337:     typescript: <5.2.0",
          "13339:     zod-to-json-schema: ^3.23.1",
          "13340:   peerDependencies:",
          "13341:     \"@langchain/core\": \">=0.2.21 <0.4.0\"",
          "",
          "[Removed Lines]",
          "13338:     zod: ^3.22.4",
          "",
          "[Added Lines]",
          "13338:     zod: ^3.24.2",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16ffbea91a7026ca63fb4dfe740cf3f740a55eb7",
      "candidate_info": {
        "commit_hash": "16ffbea91a7026ca63fb4dfe740cf3f740a55eb7",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/16ffbea91a7026ca63fb4dfe740cf3f740a55eb7",
        "files": [
          "langchain-core/package.json",
          "langchain-core/src/output_parsers/transform.ts",
          "langchain-core/src/utils/@cfworker/json-schema/LICENSE.md",
          "langchain-core/src/utils/@cfworker/json-schema/README.md",
          "langchain-core/src/utils/@cfworker/json-schema/index.ts",
          "langchain-core/src/utils/@cfworker/json-schema/package.json",
          "langchain-core/src/utils/@cfworker/json-schema/src/deep-compare-strict.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/dereference.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/format.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/index.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/pointer.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/types.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/ucs2-length.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/validate.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/validator.ts",
          "langchain-core/src/utils/json_schema.ts",
          "yarn.lock"
        ],
        "message": "chore(core): externalize @cfworker/json-schema dependency (#7298)",
        "before_after_code_files": [
          "langchain-core/src/output_parsers/transform.ts||langchain-core/src/output_parsers/transform.ts",
          "langchain-core/src/utils/@cfworker/json-schema/index.ts||langchain-core/src/utils/@cfworker/json-schema/index.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/deep-compare-strict.ts||langchain-core/src/utils/@cfworker/json-schema/src/deep-compare-strict.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/dereference.ts||langchain-core/src/utils/@cfworker/json-schema/src/dereference.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/format.ts||langchain-core/src/utils/@cfworker/json-schema/src/format.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/index.ts||langchain-core/src/utils/@cfworker/json-schema/src/index.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/pointer.ts||langchain-core/src/utils/@cfworker/json-schema/src/pointer.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/types.ts||langchain-core/src/utils/@cfworker/json-schema/src/types.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/ucs2-length.ts||langchain-core/src/utils/@cfworker/json-schema/src/ucs2-length.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/validate.ts||langchain-core/src/utils/@cfworker/json-schema/src/validate.ts",
          "langchain-core/src/utils/@cfworker/json-schema/src/validator.ts||langchain-core/src/utils/@cfworker/json-schema/src/validator.ts",
          "langchain-core/src/utils/json_schema.ts||langchain-core/src/utils/json_schema.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "langchain-core/src/output_parsers/transform.ts||langchain-core/src/output_parsers/transform.ts": [
          "File: langchain-core/src/output_parsers/transform.ts -> langchain-core/src/output_parsers/transform.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { BaseOutputParser } from \"./base.js\";",
          "2: import {",
          "3:   type BaseMessage,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { deepCompareStrict } from \"@cfworker/json-schema\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:   GenerationChunk,",
          "13:   ChatGenerationChunk,",
          "14: } from \"../outputs.js\";",
          "",
          "[Removed Lines]",
          "15: import { deepCompareStrict } from \"../utils/@cfworker/json-schema/index.js\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "langchain-core/src/utils/@cfworker/json-schema/index.ts||langchain-core/src/utils/@cfworker/json-schema/index.ts": [
          "File: langchain-core/src/utils/@cfworker/json-schema/index.ts -> langchain-core/src/utils/@cfworker/json-schema/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "langchain-core/src/utils/@cfworker/json-schema/src/deep-compare-strict.ts||langchain-core/src/utils/@cfworker/json-schema/src/deep-compare-strict.ts": [
          "File: langchain-core/src/utils/@cfworker/json-schema/src/deep-compare-strict.ts -> langchain-core/src/utils/@cfworker/json-schema/src/deep-compare-strict.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "langchain-core/src/utils/@cfworker/json-schema/src/dereference.ts||langchain-core/src/utils/@cfworker/json-schema/src/dereference.ts": [
          "File: langchain-core/src/utils/@cfworker/json-schema/src/dereference.ts -> langchain-core/src/utils/@cfworker/json-schema/src/dereference.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "langchain-core/src/utils/@cfworker/json-schema/src/format.ts||langchain-core/src/utils/@cfworker/json-schema/src/format.ts": [
          "File: langchain-core/src/utils/@cfworker/json-schema/src/format.ts -> langchain-core/src/utils/@cfworker/json-schema/src/format.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "langchain-core/src/utils/@cfworker/json-schema/src/index.ts||langchain-core/src/utils/@cfworker/json-schema/src/index.ts": [
          "File: langchain-core/src/utils/@cfworker/json-schema/src/index.ts -> langchain-core/src/utils/@cfworker/json-schema/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "langchain-core/src/utils/@cfworker/json-schema/src/pointer.ts||langchain-core/src/utils/@cfworker/json-schema/src/pointer.ts": [
          "File: langchain-core/src/utils/@cfworker/json-schema/src/pointer.ts -> langchain-core/src/utils/@cfworker/json-schema/src/pointer.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "langchain-core/src/utils/@cfworker/json-schema/src/types.ts||langchain-core/src/utils/@cfworker/json-schema/src/types.ts": [
          "File: langchain-core/src/utils/@cfworker/json-schema/src/types.ts -> langchain-core/src/utils/@cfworker/json-schema/src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "langchain-core/src/utils/@cfworker/json-schema/src/ucs2-length.ts||langchain-core/src/utils/@cfworker/json-schema/src/ucs2-length.ts": [
          "File: langchain-core/src/utils/@cfworker/json-schema/src/ucs2-length.ts -> langchain-core/src/utils/@cfworker/json-schema/src/ucs2-length.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "langchain-core/src/utils/@cfworker/json-schema/src/validate.ts||langchain-core/src/utils/@cfworker/json-schema/src/validate.ts": [
          "File: langchain-core/src/utils/@cfworker/json-schema/src/validate.ts -> langchain-core/src/utils/@cfworker/json-schema/src/validate.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "langchain-core/src/utils/@cfworker/json-schema/src/validator.ts||langchain-core/src/utils/@cfworker/json-schema/src/validator.ts": [
          "File: langchain-core/src/utils/@cfworker/json-schema/src/validator.ts -> langchain-core/src/utils/@cfworker/json-schema/src/validator.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "langchain-core/src/utils/json_schema.ts||langchain-core/src/utils/json_schema.ts": [
          "File: langchain-core/src/utils/json_schema.ts -> langchain-core/src/utils/json_schema.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: export { deepCompareStrict, Validator } from \"./@cfworker/json-schema/index.js\";",
          "",
          "[Added Lines]",
          "1: export { deepCompareStrict, Validator } from \"@cfworker/json-schema\";",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "8676:   languageName: node",
          "8677:   linkType: hard",
          "8679: \"@chainsafe/is-ip@npm:^2.0.1\":",
          "8680:   version: 2.0.2",
          "8681:   resolution: \"@chainsafe/is-ip@npm:2.0.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8679: \"@cfworker/json-schema@npm:^4.0.2\":",
          "8680:   version: 4.0.2",
          "8681:   resolution: \"@cfworker/json-schema@npm:4.0.2\"",
          "8682:   checksum: afde096ef9858fba7861c59017432a1842a243dcd50af1bc5d326ea47eb96c38f60792badbadb51595b16557e8d2f4a730b9012f568c79006248bcd454164e5b",
          "8683:   languageName: node",
          "8684:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12319:   version: 0.0.0-use.local",
          "12320:   resolution: \"@langchain/core@workspace:langchain-core\"",
          "12321:   dependencies:",
          "12322:     \"@jest/globals\": ^29.5.0",
          "12323:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12324:     \"@swc/core\": ^1.3.90",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12329:     \"@cfworker/json-schema\": ^4.0.2",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7671f00ec077ca36bcc1ca0a3980ae92ac9ae7fb",
      "candidate_info": {
        "commit_hash": "7671f00ec077ca36bcc1ca0a3980ae92ac9ae7fb",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/7671f00ec077ca36bcc1ca0a3980ae92ac9ae7fb",
        "files": [
          "docs/core_docs/docs/integrations/chat/openai.ipynb",
          "libs/langchain-openai/audio.json",
          "libs/langchain-openai/package.json",
          "libs/langchain-openai/src/chat_models.ts",
          "libs/langchain-openai/src/tests/chat_models.int.test.ts",
          "libs/langchain-openai/src/types.ts",
          "yarn.lock"
        ],
        "message": "fix(openai): Include audio messages in request (#7015)",
        "before_after_code_files": [
          "libs/langchain-openai/src/chat_models.ts||libs/langchain-openai/src/chat_models.ts",
          "libs/langchain-openai/src/tests/chat_models.int.test.ts||libs/langchain-openai/src/tests/chat_models.int.test.ts",
          "libs/langchain-openai/src/types.ts||libs/langchain-openai/src/types.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-openai/src/chat_models.ts||libs/langchain-openai/src/chat_models.ts": [
          "File: libs/langchain-openai/src/chat_models.ts -> libs/langchain-openai/src/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:           system_fingerprint: rawResponse.system_fingerprint,",
          "175:         };",
          "176:       }",
          "177:       return new AIMessage({",
          "178:         content: message.content || \"\",",
          "179:         tool_calls: toolCalls,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:       if (message.audio) {",
          "179:         additional_kwargs.audio = message.audio;",
          "180:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:   if (includeRawResponse) {",
          "213:     additional_kwargs.__raw_response = rawResponse;",
          "214:   }",
          "215:   const response_metadata = { usage: { ...rawResponse.usage } };",
          "216:   if (role === \"user\") {",
          "217:     return new HumanMessageChunk({ content, response_metadata });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:   if (delta.audio) {",
          "222:     additional_kwargs.audio = {",
          "223:       ...delta.audio,",
          "224:       index: rawResponse.choices[0].index,",
          "225:     };",
          "226:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "257: }",
          "264:     const completionParam: Record<string, any> = {",
          "265:       role: messageToOpenAIRole(message),",
          "",
          "[Removed Lines]",
          "260: export function _convertMessagesToOpenAIParams(messages: BaseMessage[]) {",
          "262:   return messages.map((message) => {",
          "",
          "[Added Lines]",
          "273: export function _convertMessagesToOpenAIParams(",
          "274:   messages: BaseMessage[]",
          "275: ): OpenAICompletionParam[] {",
          "277:   return messages.flatMap((message) => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "285:         completionParam.tool_call_id = (message as ToolMessage).tool_call_id;",
          "286:       }",
          "287:     }",
          "288:     return completionParam as OpenAICompletionParam;",
          "289:   });",
          "290: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:     if (",
          "305:       message.additional_kwargs.audio &&",
          "306:       typeof message.additional_kwargs.audio === \"object\" &&",
          "307:       \"id\" in message.additional_kwargs.audio",
          "308:     ) {",
          "309:       const audioMessage = {",
          "310:         role: \"assistant\",",
          "311:         audio: {",
          "312:           id: message.additional_kwargs.audio.id,",
          "313:         },",
          "314:       };",
          "315:       return [completionParam, audioMessage] as OpenAICompletionParam[];",
          "316:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "374:   strict?: boolean;",
          "375: }",
          "377: export interface ChatOpenAIFields",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:   modalities?: Array<OpenAIClient.Chat.ChatCompletionModality>;",
          "425:   audio?: OpenAIClient.Chat.ChatCompletionAudioParam;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "959:   supportsStrictToolCalling?: boolean;",
          "961:   constructor(",
          "962:     fields?: ChatOpenAIFields,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1086:   audio?: OpenAIClient.Chat.ChatCompletionAudioParam;",
          "1088:   modalities?: Array<OpenAIClient.Chat.ChatCompletionModality>;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1026:     this.stopSequences = this?.stop;",
          "1027:     this.user = fields?.user;",
          "1028:     this.__includeRawResponse = fields?.__includeRawResponse;",
          "1030:     if (this.azureOpenAIApiKey || this.azureADTokenProvider) {",
          "1031:       if (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1158:     this.audio = fields?.audio;",
          "1159:     this.modalities = fields?.modalities;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1190:       seed: options?.seed,",
          "1191:       ...streamOptionsConfig,",
          "1192:       parallel_tool_calls: options?.parallel_tool_calls,",
          "1193:       ...this.modelKwargs,",
          "1194:     };",
          "1195:     return params;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1324:       ...(this.audio || options?.audio",
          "1325:         ? { audio: this.audio || options?.audio }",
          "1326:         : {}),",
          "1327:       ...(this.modalities || options?.modalities",
          "1328:         ? { modalities: this.modalities || options?.modalities }",
          "1329:         : {}),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1241:     const streamIterable = await this.completionWithRetry(params, options);",
          "1242:     let usage: OpenAIClient.Completions.CompletionUsage | undefined;",
          "1243:     for await (const data of streamIterable) {",
          "1245:       if (data.usage) {",
          "1246:         usage = data.usage;",
          "1247:       }",
          "",
          "[Removed Lines]",
          "1244:       const choice = data?.choices[0];",
          "",
          "[Added Lines]",
          "1381:       const choice = data?.choices?.[0];",
          "",
          "---------------"
        ],
        "libs/langchain-openai/src/tests/chat_models.int.test.ts||libs/langchain-openai/src/tests/chat_models.int.test.ts": [
          "File: libs/langchain-openai/src/tests/chat_models.int.test.ts -> libs/langchain-openai/src/tests/chat_models.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import { CallbackManager } from \"@langchain/core/callbacks/manager\";",
          "20: import { NewTokenIndices } from \"@langchain/core/callbacks/base\";",
          "21: import { InMemoryCache } from \"@langchain/core/caches\";",
          "22: import { ChatOpenAI } from \"../chat_models.js\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import { concat } from \"@langchain/core/utils/stream\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "986:   }",
          "987:   expect(chunks.length).toEqual(1);",
          "988: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "991: describe(\"Audio output\", () => {",
          "992:   test(\"Audio output\", async () => {",
          "993:     const model = new ChatOpenAI({",
          "994:       maxRetries: 0,",
          "995:       model: \"gpt-4o-audio-preview\",",
          "996:       temperature: 0,",
          "997:       modalities: [\"text\", \"audio\"],",
          "998:       audio: {",
          "999:         voice: \"alloy\",",
          "1000:         format: \"wav\",",
          "1001:       },",
          "1002:     });",
          "1004:     const response = await model.invoke(\"Make me an audio clip of you yelling\");",
          "1005:     expect(response.additional_kwargs.audio).toBeTruthy();",
          "1006:     if (!response.additional_kwargs.audio) {",
          "1007:       throw new Error(\"Not in additional kwargs\");",
          "1008:     }",
          "1013:     expect(Object.keys(response.additional_kwargs.audio).sort()).toEqual([",
          "1014:       \"data\",",
          "1015:       \"expires_at\",",
          "1016:       \"id\",",
          "1017:       \"transcript\",",
          "1018:     ]);",
          "1019:   });",
          "1021:   test(\"Audio output can stream\", async () => {",
          "1022:     const model = new ChatOpenAI({",
          "1023:       maxRetries: 0,",
          "1024:       model: \"gpt-4o-audio-preview\",",
          "1025:       temperature: 0,",
          "1026:       modalities: [\"text\", \"audio\"],",
          "1027:       audio: {",
          "1028:         voice: \"alloy\",",
          "1029:         format: \"pcm16\",",
          "1030:       },",
          "1031:     });",
          "1033:     const stream = await model.stream(\"Make me an audio clip of you yelling\");",
          "1034:     let finalMsg: AIMessageChunk | undefined;",
          "1035:     for await (const chunk of stream) {",
          "1036:       finalMsg = finalMsg ? concat(finalMsg, chunk) : chunk;",
          "1037:     }",
          "1038:     if (!finalMsg) {",
          "1039:       throw new Error(\"No final message found\");",
          "1040:     }",
          "1042:     expect(finalMsg.additional_kwargs.audio).toBeTruthy();",
          "1043:     if (!finalMsg.additional_kwargs.audio) {",
          "1044:       throw new Error(\"Not in additional kwargs\");",
          "1045:     }",
          "1050:     expect(Object.keys(finalMsg.additional_kwargs.audio).sort()).toEqual([",
          "1051:       \"data\",",
          "1052:       \"expires_at\",",
          "1053:       \"id\",",
          "1054:       \"index\",",
          "1055:       \"transcript\",",
          "1056:     ]);",
          "1057:   });",
          "1059:   test(\"Can bind audio output args\", async () => {",
          "1060:     const model = new ChatOpenAI({",
          "1061:       maxRetries: 0,",
          "1062:       model: \"gpt-4o-audio-preview\",",
          "1063:       temperature: 0,",
          "1064:     }).bind({",
          "1065:       modalities: [\"text\", \"audio\"],",
          "1066:       audio: {",
          "1067:         voice: \"alloy\",",
          "1068:         format: \"wav\",",
          "1069:       },",
          "1070:     });",
          "1072:     const response = await model.invoke(\"Make me an audio clip of you yelling\");",
          "1073:     expect(response.additional_kwargs.audio).toBeTruthy();",
          "1074:     if (!response.additional_kwargs.audio) {",
          "1075:       throw new Error(\"Not in additional kwargs\");",
          "1076:     }",
          "1077:     expect(Object.keys(response.additional_kwargs.audio).sort()).toEqual([",
          "1078:       \"data\",",
          "1079:       \"expires_at\",",
          "1080:       \"id\",",
          "1081:       \"transcript\",",
          "1082:     ]);",
          "1083:   });",
          "1085:   test(\"Audio output in chat history\", async () => {",
          "1086:     const model = new ChatOpenAI({",
          "1087:       model: \"gpt-4o-audio-preview\",",
          "1088:       temperature: 0,",
          "1089:       modalities: [\"text\", \"audio\"],",
          "1090:       audio: {",
          "1091:         voice: \"alloy\",",
          "1092:         format: \"wav\",",
          "1093:       },",
          "1094:       maxRetries: 0,",
          "1095:     });",
          "1097:     const input = [",
          "1098:       {",
          "1099:         role: \"user\",",
          "1100:         content: \"Make me an audio clip of you yelling\",",
          "1101:       },",
          "1102:     ];",
          "1104:     const response = await model.invoke(input);",
          "1105:     expect(response.additional_kwargs.audio).toBeTruthy();",
          "1106:     expect(",
          "1107:       (response.additional_kwargs.audio as Record<string, any>).transcript",
          "1108:         .length",
          "1109:     ).toBeGreaterThan(1);",
          "1111:     const response2 = await model.invoke([",
          "1112:       ...input,",
          "1113:       response,",
          "1114:       {",
          "1115:         role: \"user\",",
          "1116:         content: \"What did you just say?\",",
          "1117:       },",
          "1118:     ]);",
          "1120:     expect(response2.additional_kwargs.audio).toBeTruthy();",
          "1121:     expect(",
          "1122:       (response2.additional_kwargs.audio as Record<string, any>).transcript",
          "1123:         .length",
          "1124:     ).toBeGreaterThan(1);",
          "1125:   });",
          "1127:   test(\"Users can pass audio as inputs\", async () => {",
          "1128:     const model = new ChatOpenAI({",
          "1129:       maxRetries: 0,",
          "1130:       model: \"gpt-4o-audio-preview\",",
          "1131:       temperature: 0,",
          "1132:       modalities: [\"text\", \"audio\"],",
          "1133:       audio: {",
          "1134:         voice: \"alloy\",",
          "1135:         format: \"wav\",",
          "1136:       },",
          "1137:     });",
          "1139:     const response = await model.invoke(\"Make me an audio clip of you yelling\");",
          "1141:     expect(response.additional_kwargs.audio).toBeTruthy();",
          "1142:     expect(",
          "1143:       (response.additional_kwargs.audio as Record<string, any>).transcript",
          "1144:         .length",
          "1145:     ).toBeGreaterThan(1);",
          "1147:     const userInput = {",
          "1148:       type: \"input_audio\",",
          "1149:       input_audio: {",
          "1150:         data: (response.additional_kwargs.audio as any).data,",
          "1151:         format: \"wav\",",
          "1152:       },",
          "1153:     };",
          "1155:     const userInputRes = await model.invoke([",
          "1156:       new HumanMessage({",
          "1157:         content: [userInput],",
          "1158:       }),",
          "1159:     ]);",
          "1162:     expect(userInputRes.additional_kwargs.audio).toBeTruthy();",
          "1163:     expect(",
          "1164:       (userInputRes.additional_kwargs.audio as Record<string, any>).transcript",
          "1165:         .length",
          "1166:     ).toBeGreaterThan(1);",
          "1167:   });",
          "1168: });",
          "",
          "---------------"
        ],
        "libs/langchain-openai/src/types.ts||libs/langchain-openai/src/types.ts": [
          "File: libs/langchain-openai/src/types.ts -> libs/langchain-openai/src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   supportsStrictToolCalling?: boolean;",
          "170: }",
          "172: export declare interface AzureOpenAIInput {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:   modalities?: Array<OpenAIClient.Chat.ChatCompletionModality>;",
          "190:   audio?: OpenAIClient.Chat.ChatCompletionAudioParam;",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12530:     jest: ^29.5.0",
          "12531:     jest-environment-node: ^29.6.4",
          "12532:     js-tiktoken: ^1.0.12",
          "12534:     prettier: ^2.8.3",
          "12535:     release-it: ^17.6.0",
          "12536:     rimraf: ^5.0.1",
          "",
          "[Removed Lines]",
          "12533:     openai: ^4.67.2",
          "",
          "[Added Lines]",
          "12533:     openai: ^4.68.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35510:   languageName: node",
          "35511:   linkType: hard",
          "35516:   dependencies:",
          "35517:     \"@types/node\": ^18.11.18",
          "35518:     \"@types/node-fetch\": ^2.6.4",
          "",
          "[Removed Lines]",
          "35513: \"openai@npm:^4.67.2\":",
          "35514:   version: 4.67.2",
          "35515:   resolution: \"openai@npm:4.67.2\"",
          "",
          "[Added Lines]",
          "35513: \"openai@npm:^4.68.0\":",
          "35514:   version: 4.68.0",
          "35515:   resolution: \"openai@npm:4.68.0\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35528:       optional: true",
          "35529:   bin:",
          "35530:     openai: bin/cli",
          "35532:   languageName: node",
          "35533:   linkType: hard",
          "",
          "[Removed Lines]",
          "35531:   checksum: 8c83e2632f2c51fea0f9b059026239a46ad171feaedd1456019481136defd468e828b0b091c53da3ebb65da37c4bb76455142c64ea9bc664124c1a341f7f2b78",
          "",
          "[Added Lines]",
          "35531:   checksum: 2866e54ac1b34e074055dde7cc809bcc33d1172f0ab289dacd54ced04a62ab3c2b9f584fdb84ece981edc5c30939497af4e91fe33646f71d5c6ced5d7106a797",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb3633f5f58be0202d7c168ef4bbc0d4bb6ac040",
      "candidate_info": {
        "commit_hash": "fb3633f5f58be0202d7c168ef4bbc0d4bb6ac040",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/fb3633f5f58be0202d7c168ef4bbc0d4bb6ac040",
        "files": [
          "docs/core_docs/docs/integrations/document_loaders/web_loaders/firecrawl.ipynb",
          "libs/langchain-community/package.json",
          "libs/langchain-community/src/document_loaders/web/firecrawl.ts",
          "yarn.lock"
        ],
        "message": "chore(community): Updated Firecrawl Document Loaders to v1 (#6818)\n\nCo-authored-by: jacoblee93 <jacoblee93@gmail.com>",
        "before_after_code_files": [
          "libs/langchain-community/src/document_loaders/web/firecrawl.ts||libs/langchain-community/src/document_loaders/web/firecrawl.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-community/src/document_loaders/web/firecrawl.ts||libs/langchain-community/src/document_loaders/web/firecrawl.ts": [
          "File: libs/langchain-community/src/document_loaders/web/firecrawl.ts -> libs/langchain-community/src/document_loaders/web/firecrawl.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   apiUrl?: string;",
          "29:   params?: Record<string, unknown>;",
          "30: }",
          "32: interface FirecrawlDocument {",
          "35: }",
          "",
          "[Removed Lines]",
          "28:   mode?: \"crawl\" | \"scrape\";",
          "33:   markdown: string;",
          "34:   metadata: Record<string, unknown>;",
          "",
          "[Added Lines]",
          "28:   mode?: \"crawl\" | \"scrape\" | \"map\";",
          "33:   markdown?: string;",
          "34:   html?: string;",
          "35:   rawHtml?: string;",
          "36:   metadata?: Record<string, unknown>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   private url: string;",
          "59:   private params?: Record<string, unknown>;",
          "",
          "[Removed Lines]",
          "57:   private mode: \"crawl\" | \"scrape\";",
          "",
          "[Added Lines]",
          "59:   private mode: \"crawl\" | \"scrape\" | \"map\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:     let firecrawlDocs: FirecrawlDocument[];",
          "98:     if (this.mode === \"scrape\") {",
          "100:       if (!response.success) {",
          "101:         throw new Error(",
          "102:           `Firecrawl: Failed to scrape URL. Error: ${response.error}`",
          "103:         );",
          "104:       }",
          "106:     } else if (this.mode === \"crawl\") {",
          "109:     } else {",
          "110:       throw new Error(",
          "111:         `Unrecognized mode '${this.mode}'. Expected one of 'crawl', 'scrape'.`",
          "",
          "[Removed Lines]",
          "99:       const response = await app.scrapeUrl(this.url, this.params);",
          "105:       firecrawlDocs = [response.data as FirecrawlDocument];",
          "107:       const response = await app.crawlUrl(this.url, this.params, true);",
          "108:       firecrawlDocs = response as FirecrawlDocument[];",
          "",
          "[Added Lines]",
          "102:       const response = await app.scrapeUrl(this.url, this.params as any);",
          "108:       firecrawlDocs = [response] as FirecrawlDocument[];",
          "110:       const response = await app.crawlUrl(this.url, this.params);",
          "111:       if (!response.success) {",
          "112:         throw new Error(",
          "113:           `Firecrawl: Failed to crawl URL. Error: ${response.error}`",
          "114:         );",
          "115:       }",
          "116:       firecrawlDocs = response.data as FirecrawlDocument[];",
          "117:     } else if (this.mode === \"map\") {",
          "118:       const response = await app.mapUrl(this.url, this.params);",
          "119:       if (!response.success) {",
          "120:         throw new Error(",
          "121:           `Firecrawl: Failed to map URL. Error: ${response.error}`",
          "122:         );",
          "123:       }",
          "124:       firecrawlDocs = response.links as FirecrawlDocument[];",
          "126:       return firecrawlDocs.map(",
          "127:         (doc) =>",
          "128:           new Document({",
          "129:             pageContent: JSON.stringify(doc),",
          "130:           })",
          "131:       );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:     return firecrawlDocs.map(",
          "116:       (doc) =>",
          "117:         new Document({",
          "119:           metadata: doc.metadata || {},",
          "120:         })",
          "121:     );",
          "",
          "[Removed Lines]",
          "118:           pageContent: doc.markdown || \"\",",
          "",
          "[Added Lines]",
          "141:           pageContent: doc.markdown || doc.html || doc.rawHtml || \"\",",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "11482:     \"@langchain/standard-tests\": 0.0.0",
          "11483:     \"@layerup/layerup-security\": ^1.5.12",
          "11484:     \"@libsql/client\": ^0.14.0",
          "11486:     \"@mlc-ai/web-llm\": \">=0.2.62 <0.3.0\"",
          "11487:     \"@mozilla/readability\": ^0.4.4",
          "11488:     \"@neondatabase/serverless\": ^0.9.1",
          "",
          "[Removed Lines]",
          "11485:     \"@mendable/firecrawl-js\": ^0.0.36",
          "",
          "[Added Lines]",
          "11485:     \"@mendable/firecrawl-js\": ^1.4.3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11655:     \"@langchain/core\": \">=0.2.21 <0.4.0\"",
          "11656:     \"@layerup/layerup-security\": ^1.5.12",
          "11657:     \"@libsql/client\": ^0.14.0",
          "11659:     \"@mlc-ai/web-llm\": \"*\"",
          "11660:     \"@mozilla/readability\": \"*\"",
          "11661:     \"@neondatabase/serverless\": \"*\"",
          "",
          "[Removed Lines]",
          "11658:     \"@mendable/firecrawl-js\": ^0.0.13",
          "",
          "[Added Lines]",
          "11658:     \"@mendable/firecrawl-js\": ^1.4.3",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "13069:   languageName: node",
          "13070:   linkType: hard",
          "13075:   dependencies:",
          "13076:     axios: ^1.6.8",
          "13079:     zod: ^3.23.8",
          "13080:     zod-to-json-schema: ^3.23.0",
          "13082:   languageName: node",
          "13083:   linkType: hard",
          "",
          "[Removed Lines]",
          "13072: \"@mendable/firecrawl-js@npm:^0.0.36\":",
          "13073:   version: 0.0.36",
          "13074:   resolution: \"@mendable/firecrawl-js@npm:0.0.36\"",
          "13077:     dotenv: ^16.4.5",
          "13078:     uuid: ^9.0.1",
          "13081:   checksum: 93ac8a7d9d25c04d4f618e282c136af06cf7712ec3402922531094c3cdab0e59d6f484a7f583022032eb58f914a0494193f2fd22986edd0f6712a29545edf95a",
          "",
          "[Added Lines]",
          "13072: \"@mendable/firecrawl-js@npm:^1.4.3\":",
          "13073:   version: 1.4.3",
          "13074:   resolution: \"@mendable/firecrawl-js@npm:1.4.3\"",
          "13077:     isows: ^1.0.4",
          "13078:     typescript-event-target: ^1.1.1",
          "13081:   checksum: ee36a4ceaca326d1ae86a714500dd0698060a63e84e0d5c83fb14967ac36755cd4b0b42a260c5e7b63914551a94ead2f4c712a76b9e58a6580dd5ca8628e851a",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "31332:   languageName: node",
          "31333:   linkType: hard",
          "31335: \"isstream@npm:0.1.2\":",
          "31336:   version: 0.1.2",
          "31337:   resolution: \"isstream@npm:0.1.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31335: \"isows@npm:^1.0.4\":",
          "31336:   version: 1.0.4",
          "31337:   resolution: \"isows@npm:1.0.4\"",
          "31338:   peerDependencies:",
          "31339:     ws: \"*\"",
          "31340:   checksum: a3ee62e3d6216abb3adeeb2a551fe2e7835eac87b05a6ecc3e7739259bf5f8e83290501f49e26137390c8093f207fc3378d4a7653aab76ad7bbab4b2dba9c5b9",
          "31341:   languageName: node",
          "31342:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "41933:   languageName: node",
          "41934:   linkType: hard",
          "41936: \"typescript@npm:<5.2.0, typescript@npm:~5.1.6\":",
          "41937:   version: 5.1.6",
          "41938:   resolution: \"typescript@npm:5.1.6\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41945: \"typescript-event-target@npm:^1.1.1\":",
          "41946:   version: 1.1.1",
          "41947:   resolution: \"typescript-event-target@npm:1.1.1\"",
          "41948:   checksum: ad9eaf0f3c161c4062c33d80ac5235e7c32c5b6f79eabcf23f9c39c7617b9337a4d9d4a2249340a84626fa68abeed38f5973dff547fecd71164f96d0b11af516",
          "41949:   languageName: node",
          "41950:   linkType: hard",
          "",
          "---------------"
        ]
      }
    }
  ]
}