{
  "cve_id": "CVE-2022-40754",
  "cve_desc": "In Apache Airflow 2.3.0 through 2.3.4, there was an open redirect in the webserver's `/confirm` endpoint.",
  "repo": "apache/airflow",
  "patch_hash": "3871f00230b7064e6234aa65b8a00ee2b6d33e4c",
  "patch_info": {
    "commit_hash": "3871f00230b7064e6234aa65b8a00ee2b6d33e4c",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/3871f00230b7064e6234aa65b8a00ee2b6d33e4c",
    "files": [
      "airflow/www/views.py"
    ],
    "message": "Fix UI redirect (#26409)\n\nCo-authored-by: Konstantin Weddige <konstantin.weddige@lutrasecurity.com>\n(cherry picked from commit 56e7555c42f013f789a4b718676ff09b4a9d5135)",
    "before_after_code_files": [
      "airflow/www/views.py||airflow/www/views.py"
    ]
  },
  "patch_diff": {
    "airflow/www/views.py||airflow/www/views.py": [
      "File: airflow/www/views.py -> airflow/www/views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2329:         task_id = args.get('task_id')",
      "2330:         dag_run_id = args.get('dag_run_id')",
      "2331:         state = args.get('state')",
      "2334:         if 'map_index' not in args:",
      "2335:             map_indexes: list[int] | None = None",
      "",
      "[Removed Lines]",
      "2332:         origin = args.get('origin')",
      "",
      "[Added Lines]",
      "2332:         origin = get_safe_url(args.get('origin'))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "047f9d9349dd70ea5df398a89c56dd8cf31437da",
      "candidate_info": {
        "commit_hash": "047f9d9349dd70ea5df398a89c56dd8cf31437da",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/047f9d9349dd70ea5df398a89c56dd8cf31437da",
        "files": [
          "scripts/in_container/run_prepare_airflow_packages.sh"
        ],
        "message": "Skip overriding version from parameter with the one from tag (#26244)\n\nSince we are not always updating the version suffix in code\n(rc1/rc2/b1/b2), the tag specified via --tag-build prefix should\noverride the one in code rathe than the other way round.\n\nSo what's left now - we will just print warning if the suffix does\nnot match.\n\n(cherry picked from commit 9cf6f6a63d923e01fc7a3a634a0fa75f43c4c198)",
        "before_after_code_files": [
          "scripts/in_container/run_prepare_airflow_packages.sh||scripts/in_container/run_prepare_airflow_packages.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/26371"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scripts/in_container/run_prepare_airflow_packages.sh||scripts/in_container/run_prepare_airflow_packages.sh": [
          "File: scripts/in_container/run_prepare_airflow_packages.sh -> scripts/in_container/run_prepare_airflow_packages.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:             tag_build=('egg_info' '--tag-build' \"${VERSION_SUFFIX_FOR_PYPI}\")",
          "55:         else",
          "56:             if [[ ${AIRFLOW_VERSION} != *${VERSION_SUFFIX_FOR_PYPI} ]]; then",
          "69:             fi",
          "70:         fi",
          "71:     fi",
          "",
          "[Removed Lines]",
          "57:                 if [[ $AIRFLOW_VERSION =~ ^[0-9\\.]+([a-z0-9]*)$ ]]; then",
          "58:                     echo",
          "59:                     echo \"${COLOR_YELLOW}The requested PyPI suffix ${VERSION_SUFFIX_FOR_PYPI} does not match the one in ${AIRFLOW_VERSION}. Overriding it with one from ${AIRFLOW_VERSION}.${COLOR_RESET}\"",
          "60:                     echo",
          "61:                     VERSION_SUFFIX_FOR_PYPI=\"${BASH_REMATCH[1]}\"",
          "62:                     export VERSION_SUFFIX_FOR_PYPI",
          "63:                 else",
          "64:                     echo",
          "65:                     echo \"${COLOR_RED}The ${AIRFLOW_VERSION} does not follow the right version pattern 'X.Y.Zsuffix'. Quitting.${COLOR_RESET}\"",
          "66:                     echo",
          "67:                     exit 1",
          "68:                 fi",
          "",
          "[Added Lines]",
          "57:                 echo",
          "58:                 echo \"${COLOR_YELLOW}The requested PyPI suffix ${VERSION_SUFFIX_FOR_PYPI} does not match the one in ${AIRFLOW_VERSION}. Overriding it with one from ${VERSION_SUFFIX_FOR_PYPI}.${COLOR_RESET}\"",
          "59:                 echo",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e60d2b5b88c6a45bddc1e671c8495ae04e32ecfe",
      "candidate_info": {
        "commit_hash": "e60d2b5b88c6a45bddc1e671c8495ae04e32ecfe",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/e60d2b5b88c6a45bddc1e671c8495ae04e32ecfe",
        "files": [
          "Dockerfile",
          "Dockerfile.ci"
        ],
        "message": "Limit eager upgrade of protobuf library to < 4.21.0 (#26243)\n\n* Limit eager upgrade of protobuf library to < 4.21.0\n\nUntil all the Google client libraries get upgraded to >= 2.0.0, we need to\nlimit the protobuf version.\n\n(cherry picked from commit c6053f52908d6f1605b5e9a0566a653e90cc2d0e)",
        "before_after_code_files": [
          "Dockerfile.ci||Dockerfile.ci"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/26371"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Dockerfile.ci||Dockerfile.ci": [
          "File: Dockerfile.ci -> Dockerfile.ci",
          "--- Hunk 1 ---",
          "[Context before]",
          "1133: # * dill<0.3.3 required by apache-beam",
          "1134: # * pyarrow>=6.0.0 is because pip resolver decides for Python 3.10 to downgrade pyarrow to 5 even if it is OK",
          "1135: #   for python 3.10 and other dependencies adding the limit helps resolver to make better decisions",
          "1137: ARG UPGRADE_TO_NEWER_DEPENDENCIES=\"false\"",
          "1138: ENV EAGER_UPGRADE_ADDITIONAL_REQUIREMENTS=${EAGER_UPGRADE_ADDITIONAL_REQUIREMENTS} \\",
          "1139:     UPGRADE_TO_NEWER_DEPENDENCIES=${UPGRADE_TO_NEWER_DEPENDENCIES}",
          "",
          "[Removed Lines]",
          "1136: ARG EAGER_UPGRADE_ADDITIONAL_REQUIREMENTS=\"dill<0.3.3 pyarrow>=6.0.0\"",
          "",
          "[Added Lines]",
          "1136: # We need to limit the protobuf library to < 4.21.0 because not all google libraries we use",
          "1137: # are compatible with the new protobuf version. All the google python client libraries need",
          "1138: # to be upgraded to >= 2.0.0 in order to able to lift that limitation",
          "1139: # https://developers.google.com/protocol-buffers/docs/news/2022-05-06#python-updates",
          "1140: ARG EAGER_UPGRADE_ADDITIONAL_REQUIREMENTS=\"dill<0.3.3 pyarrow>=6.0.0 protobuf<4.21.0\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df31902533e94b428e1fa19e5014047f0bae6fcc",
      "candidate_info": {
        "commit_hash": "df31902533e94b428e1fa19e5014047f0bae6fcc",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/df31902533e94b428e1fa19e5014047f0bae6fcc",
        "files": [
          "airflow/www/templates/airflow/dag.html",
          "airflow/www/templates/airflow/dags.html",
          "airflow/www/views.py"
        ],
        "message": "Removed 'request.referrer' from views.py  (#21751)",
        "before_after_code_files": [
          "airflow/www/templates/airflow/dag.html||airflow/www/templates/airflow/dag.html",
          "airflow/www/templates/airflow/dags.html||airflow/www/templates/airflow/dags.html",
          "airflow/www/views.py||airflow/www/views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/www/views.py||airflow/www/views.py"
          ],
          "candidate": [
            "airflow/www/views.py||airflow/www/views.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/www/templates/airflow/dag.html||airflow/www/templates/airflow/dag.html": [
          "File: airflow/www/templates/airflow/dag.html -> airflow/www/templates/airflow/dag.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:               <li><a href=\"{{ url_for('Airflow.trigger', dag_id=dag.dag_id, origin=url_for(request.endpoint, dag_id=dag.dag_id)) }}\">Trigger DAG w/ config</a></li>",
          "164:             </ul>",
          "165:           </div>",
          "167:             onclick=\"return confirmDeleteDag(this, '{{ dag.safe_dag_id }}')\" aria-label=\"Delete DAG\">",
          "168:             <span class=\"material-icons text-danger\" aria-hidden=\"true\">delete_outline</span>",
          "169:           </a>",
          "",
          "[Removed Lines]",
          "166:           <a href=\"{{ url_for('Airflow.delete', dag_id=dag.dag_id) }}\" title=\"Delete&nbsp;DAG\" class=\"btn btn-default btn-icon-only{{ ' disabled' if not dag.can_delete }}\"",
          "",
          "[Added Lines]",
          "166:           <a href=\"{{ url_for('Airflow.delete', dag_id=dag.dag_id, redirect_url=url_for(request.endpoint, dag_id=dag.dag_id)) }}\" title=\"Delete&nbsp;DAG\" class=\"btn btn-default btn-icon-only{{ ' disabled' if not dag.can_delete }}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412:             </span>",
          "413:           </div>",
          "414:           <hr style=\"margin-bottom: 8px;\">",
          "416:             DAG Run details",
          "417:           </a>",
          "418:         </div>",
          "",
          "[Removed Lines]",
          "415:           <a id=\"btn_dagrun_details\" class=\"btn\" data-base-url=\"{{ url_for('Airflow.dagrun_details') }}\">",
          "",
          "[Added Lines]",
          "415:           <a id=\"btn_dagrun_details\" class=\"btn\" data-base-url=\"{{ url_for('Airflow.dagrun_details', redirect_url=request.base_url) }}\">",
          "",
          "---------------"
        ],
        "airflow/www/templates/airflow/dags.html||airflow/www/templates/airflow/dags.html": [
          "File: airflow/www/templates/airflow/dags.html -> airflow/www/templates/airflow/dags.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:                     </div>",
          "253:                     {% endif %}",
          "254:                     {# Use dag_id instead of dag.dag_id, because the DAG might not exist in the webserver's DagBag #}",
          "256:                       <span class=\"material-icons text-danger\" aria-hidden=\"true\">delete_outline</span>",
          "257:                     </a>",
          "258:                   </div>",
          "",
          "[Removed Lines]",
          "255:                     <a href=\"{{ url_for('Airflow.delete', dag_id=dag.dag_id) }}\" onclick=\"return confirmDeleteDag(this, '{{ dag.dag_id }}')\" title=\"Delete&nbsp;DAG\" aria-label=\"Delete DAG\" class=\"btn btn-sm btn-default btn-icon-only {{ ' disabled' if not dag.can_delete }}\">",
          "",
          "[Added Lines]",
          "255:                     <a href=\"{{ url_for('Airflow.delete', dag_id=dag.dag_id, redirect_url=url_for(request.endpoint)) }}\" onclick=\"return confirmDeleteDag(this, '{{ dag.dag_id }}')\" title=\"Delete&nbsp;DAG\" aria-label=\"Delete DAG\" class=\"btn btn-sm btn-default btn-icon-only {{ ' disabled' if not dag.can_delete }}\">",
          "",
          "---------------"
        ],
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1753:         dag_id = request.values.get('dag_id')",
          "1754:         origin = get_safe_url(request.values.get('origin'))",
          "1756:         try:",
          "1757:             delete_dag.delete_dag(dag_id)",
          "1758:         except DagNotFound:",
          "1759:             flash(f\"DAG with id {dag_id} not found. Cannot delete\", 'error')",
          "1761:         except AirflowException:",
          "1762:             flash(",
          "1763:                 f\"Cannot delete DAG with id {dag_id} because some task instances of the DAG \"",
          "",
          "[Removed Lines]",
          "1760:             return redirect(request.referrer)",
          "",
          "[Added Lines]",
          "1755:         redirect_url = get_safe_url(request.values.get('redirect_url'))",
          "1761:             return redirect(redirect_url)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1765:                 \"failed/succeeded before deleting the DAG\",",
          "1766:                 \"error\",",
          "1767:             )",
          "1770:         flash(f\"Deleting DAG with id {dag_id}. May take a couple minutes to fully disappear.\")",
          "",
          "[Removed Lines]",
          "1768:             return redirect(request.referrer)",
          "",
          "[Added Lines]",
          "1769:             return redirect(redirect_url)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2159:         dag_run: Optional[DagRun] = (",
          "2160:             session.query(DagRun).filter(DagRun.dag_id == dag_id, DagRun.run_id == run_id).one_or_none()",
          "2161:         )",
          "2163:         if dag_run is None:",
          "2164:             flash(f\"No DAG run found for DAG id {dag_id} and run id {run_id}\", \"error\")",
          "2166:         else:",
          "2167:             try:",
          "2168:                 duration = dag_run.end_date - dag_run.start_date",
          "",
          "[Removed Lines]",
          "2165:             return redirect(request.referrer or url_for('Airflow.index'))",
          "",
          "[Added Lines]",
          "2163:         redirect_url = get_safe_url(request.values.get('redirect_url'))",
          "2167:             return redirect(redirect_url or url_for('Airflow.index'))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2238:         task_id = args.get('task_id')",
          "2239:         dag_run_id = args.get('dag_run_id')",
          "2240:         state = args.get('state')",
          "2242:         upstream = to_boolean(args.get('upstream'))",
          "2243:         downstream = to_boolean(args.get('downstream'))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2243:         origin = args.get('origin')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2247:         dag = current_app.dag_bag.get_dag(dag_id)",
          "2248:         if not dag:",
          "2249:             flash(f'DAG {dag_id} not found', \"error\")",
          "2252:         try:",
          "2253:             task = dag.get_task(task_id)",
          "2254:         except airflow.exceptions.TaskNotFound:",
          "2255:             flash(f\"Task {task_id} not found\", \"error\")",
          "2258:         task.dag = dag",
          "",
          "[Removed Lines]",
          "2250:             return redirect(request.referrer or url_for('Airflow.index'))",
          "2256:             return redirect(request.referrer or url_for('Airflow.index'))",
          "",
          "[Added Lines]",
          "2253:             return redirect(origin or url_for('Airflow.index'))",
          "2259:             return redirect(origin or url_for('Airflow.index'))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2262:             'failed',",
          "2263:         ):",
          "2264:             flash(f\"Invalid state {state}, must be either 'success' or 'failed'\", \"error\")",
          "2267:         latest_execution_date = dag.get_latest_execution_date()",
          "2268:         if not latest_execution_date:",
          "2269:             flash(f\"Cannot mark tasks as {state}, seem that dag {dag_id} has never run\", \"error\")",
          "2272:         from airflow.api.common.mark_tasks import set_state",
          "",
          "[Removed Lines]",
          "2265:             return redirect(request.referrer or url_for('Airflow.index'))",
          "2270:             return redirect(request.referrer or url_for('Airflow.index'))",
          "",
          "[Added Lines]",
          "2268:             return redirect(origin or url_for('Airflow.index'))",
          "2273:             return redirect(origin or url_for('Airflow.index'))",
          "",
          "---------------"
        ]
      }
    }
  ]
}