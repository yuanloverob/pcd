{
  "cve_id": "CVE-2023-39441",
  "cve_desc": "Apache Airflow SMTP Provider before 1.3.0, Apache Airflow IMAP Provider before 3.3.0, and\u00a0Apache Airflow before 2.7.0 are affected by the\u00a0Validation of OpenSSL Certificate vulnerability.\n\nThe default SSL context with SSL library did not check a server's X.509\u00a0certificate.\u00a0 Instead, the code accepted any certificate, which could\u00a0result in the disclosure of mail server credentials or mail contents\u00a0when the client connects to an attacker in a MITM position.\n\nUsers are strongly advised to upgrade to Apache Airflow version 2.7.0 or newer, Apache Airflow IMAP Provider version 3.3.0 or newer, and Apache Airflow SMTP Provider version 1.3.0 or newer to mitigate the risk associated with this vulnerability",
  "repo": "apache/airflow",
  "patch_hash": "3bd8f020e8b7bdeb7f618bdbdfb3557f117b29d3",
  "patch_info": {
    "commit_hash": "3bd8f020e8b7bdeb7f618bdbdfb3557f117b29d3",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/3bd8f020e8b7bdeb7f618bdbdfb3557f117b29d3",
    "files": [
      "airflow/config_templates/config.yml",
      "airflow/utils/email.py",
      "newsfragments/33070.significant.rst",
      "tests/utils/test_email.py"
    ],
    "message": "Allows to choose SSL context for SMTP connection (#33070)\n\nThis change add two options to choose from when SSL SMTP connection\nis created:\n\n* default - for balance between compatibility and security\n* none - in case compatibility with existing infrastructure is\n  preferred\n\n(cherry picked from commit 120efc186556b1e9498f90ad436c74e5f4e138e9)",
    "before_after_code_files": [
      "airflow/utils/email.py||airflow/utils/email.py",
      "tests/utils/test_email.py||tests/utils/test_email.py"
    ]
  },
  "patch_diff": {
    "airflow/utils/email.py||airflow/utils/email.py": [
      "File: airflow/utils/email.py -> airflow/utils/email.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import logging",
      "22: import os",
      "23: import smtplib",
      "24: import warnings",
      "25: from email.mime.application import MIMEApplication",
      "26: from email.mime.multipart import MIMEMultipart",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import ssl",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "312:     :param with_ssl: Whether to use SSL encryption for the connection.",
      "313:     :return: An SMTP connection to the specified host and port.",
      "314:     \"\"\"",
      "322: def _get_email_list_from_str(addresses: str) -> list[str]:",
      "",
      "[Removed Lines]",
      "315:     return (",
      "316:         smtplib.SMTP_SSL(host=host, port=port, timeout=timeout)",
      "317:         if with_ssl",
      "318:         else smtplib.SMTP(host=host, port=port, timeout=timeout)",
      "319:     )",
      "",
      "[Added Lines]",
      "316:     if not with_ssl:",
      "317:         return smtplib.SMTP(host=host, port=port, timeout=timeout)",
      "318:     else:",
      "319:         ssl_context_string = conf.get(\"email\", \"SSL_CONTEXT\")",
      "320:         if ssl_context_string == \"default\":",
      "321:             ssl_context = ssl.create_default_context()",
      "322:         elif ssl_context_string == \"none\":",
      "323:             ssl_context = None",
      "324:         else:",
      "325:             raise RuntimeError(",
      "326:                 f\"The email.ssl_context configuration variable must \"",
      "327:                 f\"be set to 'default' or 'none' and is '{ssl_context_string}.\"",
      "328:             )",
      "329:         return smtplib.SMTP_SSL(host=host, port=port, timeout=timeout, context=ssl_context)",
      "",
      "---------------"
    ],
    "tests/utils/test_email.py||tests/utils/test_email.py": [
      "File: tests/utils/test_email.py -> tests/utils/test_email.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "241:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "242:     @mock.patch(\"smtplib.SMTP\")",
      "244:         mock_smtp_ssl.return_value = mock.Mock()",
      "245:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\"}):",
      "246:             email.send_mime_email(\"from\", \"to\", MIMEMultipart(), dryrun=False)",
      "247:         assert not mock_smtp.called",
      "248:         mock_smtp_ssl.assert_called_once_with(",
      "249:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
      "250:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
      "251:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
      "252:         )",
      "254:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "",
      "[Removed Lines]",
      "243:     def test_send_mime_ssl(self, mock_smtp, mock_smtp_ssl):",
      "",
      "[Added Lines]",
      "243:     def test_send_mime_ssl_none_context(self, mock_smtp, mock_smtp_ssl):",
      "244:         mock_smtp_ssl.return_value = mock.Mock()",
      "245:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\", (\"email\", \"ssl_context\"): \"none\"}):",
      "246:             email.send_mime_email(\"from\", \"to\", MIMEMultipart(), dryrun=False)",
      "247:         assert not mock_smtp.called",
      "248:         mock_smtp_ssl.assert_called_once_with(",
      "249:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
      "250:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
      "251:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
      "252:             context=None,",
      "253:         )",
      "255:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "256:     @mock.patch(\"smtplib.SMTP\")",
      "257:     @mock.patch(\"ssl.create_default_context\")",
      "258:     def test_send_mime_ssl_default_context_if_not_set(self, create_default_context, mock_smtp, mock_smtp_ssl):",
      "263:         assert create_default_context.called",
      "268:             context=create_default_context.return_value,",
      "269:         )",
      "271:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "272:     @mock.patch(\"smtplib.SMTP\")",
      "273:     @mock.patch(\"ssl.create_default_context\")",
      "274:     def test_send_mime_ssl_default_context_with_value_set_to_default(",
      "275:         self, create_default_context, mock_smtp, mock_smtp_ssl",
      "276:     ):",
      "277:         mock_smtp_ssl.return_value = mock.Mock()",
      "278:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\", (\"email\", \"ssl_context\"): \"default\"}):",
      "279:             email.send_mime_email(\"from\", \"to\", MIMEMultipart(), dryrun=False)",
      "280:         assert not mock_smtp.called",
      "281:         assert create_default_context.called",
      "282:         mock_smtp_ssl.assert_called_once_with(",
      "283:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
      "284:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
      "285:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
      "286:             context=create_default_context.return_value,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "300:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "301:     @mock.patch(\"smtplib.SMTP\")",
      "303:         mock_smtp_ssl.side_effect = SMTPServerDisconnected()",
      "304:         msg = MIMEMultipart()",
      "305:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\"}):",
      "",
      "[Removed Lines]",
      "302:     def test_send_mime_ssl_complete_failure(self, mock_smtp, mock_smtp_ssl):",
      "",
      "[Added Lines]",
      "336:     @mock.patch(\"ssl.create_default_context\")",
      "337:     def test_send_mime_ssl_complete_failure(self, create_default_context, mock_smtp, mock_smtp_ssl):",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "310:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
      "311:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
      "312:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
      "313:         )",
      "314:         assert mock_smtp_ssl.call_count == conf.getint(\"smtp\", \"SMTP_RETRY_LIMIT\")",
      "315:         assert not mock_smtp.called",
      "316:         assert not mock_smtp_ssl.return_value.starttls.called",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "348:             context=create_default_context.return_value,",
      "350:         assert create_default_context.called",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6794b8e07837c4a84446fc27599dfe104febd352",
      "candidate_info": {
        "commit_hash": "6794b8e07837c4a84446fc27599dfe104febd352",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/6794b8e07837c4a84446fc27599dfe104febd352",
        "files": [
          "airflow/www/static/js/dag/details/graph/Node.tsx",
          "airflow/www/static/js/types/index.ts",
          "airflow/www/static/js/utils/graph.ts"
        ],
        "message": "Update graph nodes with operator style attributes. (#32822)\n\n* Update graph nodes with task style attributes.\n\n* Change operator text to a tag w/ colors\n\n---------\n\nCo-authored-by: Brent Bovenzi <brent.bovenzi@gmail.com>\n(cherry picked from commit 3bb63f1087176b24e9dc8f4cc51cf44ce9986d34)",
        "before_after_code_files": [
          "airflow/www/static/js/dag/details/graph/Node.tsx||airflow/www/static/js/dag/details/graph/Node.tsx",
          "airflow/www/static/js/types/index.ts||airflow/www/static/js/types/index.ts",
          "airflow/www/static/js/utils/graph.ts||airflow/www/static/js/utils/graph.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/static/js/dag/details/graph/Node.tsx||airflow/www/static/js/dag/details/graph/Node.tsx": [
          "File: airflow/www/static/js/dag/details/graph/Node.tsx -> airflow/www/static/js/dag/details/graph/Node.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   isActive?: boolean;",
          "49:   setupTeardownType?: \"setup\" | \"teardown\";",
          "50:   fullParentNode?: string;",
          "51: }",
          "53: export const BaseNode = ({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   labelStyle?: string;",
          "52:   style?: string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:     isOpen,",
          "66:     isActive,",
          "67:     setupTeardownType,",
          "68:   },",
          "69: }: NodeProps<CustomNodeProps>) => {",
          "70:   const { colors } = useTheme();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     labelStyle,",
          "71:     style,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:   if (!task) return null;",
          "76:   const { isMapped } = task;",
          "77:   const mappedStates = instance?.mappedStates;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   const bg = isOpen ? \"blackAlpha.50\" : \"white\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:     ? `${label} [${instance ? totalTasks : \" \"}]`",
          "83:     : label;",
          "87:   return (",
          "88:     <Tooltip",
          "",
          "[Removed Lines]",
          "85:   const bg = isOpen ? \"blackAlpha.50\" : \"white\";",
          "",
          "[Added Lines]",
          "90:   let operatorTextColor = \"\";",
          "91:   let operatorBG = \"\";",
          "92:   if (style) {",
          "93:     [, operatorBG] = style.split(\":\");",
          "94:   }",
          "96:   if (labelStyle) {",
          "97:     [, operatorTextColor] = labelStyle.split(\":\");",
          "98:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141:             {!!instance && instance.state && (",
          "142:               <Flex alignItems=\"center\">",
          "143:                 <SimpleStatus state={instance.state} />",
          "145:                   {instance.state}",
          "146:                 </Text>",
          "147:               </Flex>",
          "148:             )}",
          "149:             {task?.operator && (",
          "151:                 {task.operator}",
          "152:               </Text>",
          "153:             )}",
          "",
          "[Removed Lines]",
          "144:                 <Text ml={2} color=\"gray.500\" fontSize=\"sm\">",
          "150:               <Text color=\"gray.500\" fontWeight={400} fontSize=\"md\">",
          "",
          "[Added Lines]",
          "157:                 <Text ml={2} color=\"gray.500\" fontSize=\"md\">",
          "163:               <Text",
          "164:                 fontWeight={400}",
          "165:                 fontSize=\"md\"",
          "166:                 width=\"fit-content\"",
          "167:                 borderRadius={5}",
          "168:                 bg={operatorBG}",
          "169:                 color={operatorTextColor || \"gray.500\"}",
          "170:                 px={1}",
          "171:               >",
          "",
          "---------------"
        ],
        "airflow/www/static/js/types/index.ts||airflow/www/static/js/types/index.ts": [
          "File: airflow/www/static/js/types/index.ts -> airflow/www/static/js/types/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     isOpen?: boolean;",
          "121:     isJoinNode?: boolean;",
          "122:     childCount?: number;",
          "123:     setupTeardownType?: \"setup\" | \"teardown\";",
          "124:   };",
          "125:   children?: DepNode[];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:     labelStyle: string;",
          "124:     style: string;",
          "",
          "---------------"
        ],
        "airflow/www/static/js/utils/graph.ts||airflow/www/static/js/utils/graph.ts": [
          "File: airflow/www/static/js/utils/graph.ts -> airflow/www/static/js/utils/graph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:         childCount,",
          "148:       },",
          "149:       width: isJoinNode ? 10 : 200,",
          "151:     };",
          "152:   };",
          "",
          "[Removed Lines]",
          "150:       height: isJoinNode ? 10 : 60,",
          "",
          "[Added Lines]",
          "150:       height: isJoinNode ? 10 : 70,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d4848dce7529662567dae0fac65aeb45bedbdf8",
      "candidate_info": {
        "commit_hash": "9d4848dce7529662567dae0fac65aeb45bedbdf8",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/9d4848dce7529662567dae0fac65aeb45bedbdf8",
        "files": [
          "airflow/www/static/js/dag/details/taskInstance/taskActions/ClearInstance.tsx",
          "airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx"
        ],
        "message": "Only load task action modal if user can edit (#32992)\n\n(cherry picked from commit 943b97850a1e82e4da22e8489c4ede958a42213d)",
        "before_after_code_files": [
          "airflow/www/static/js/dag/details/taskInstance/taskActions/ClearInstance.tsx||airflow/www/static/js/dag/details/taskInstance/taskActions/ClearInstance.tsx",
          "airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx||airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/static/js/dag/details/taskInstance/taskActions/ClearInstance.tsx||airflow/www/static/js/dag/details/taskInstance/taskActions/ClearInstance.tsx": [
          "File: airflow/www/static/js/dag/details/taskInstance/taskActions/ClearInstance.tsx -> airflow/www/static/js/dag/details/taskInstance/taskActions/ClearInstance.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: const canEdit = getMetaValue(\"can_edit\") === \"True\";",
          "42: const dagId = getMetaValue(\"dag_id\");",
          "45:   runId: string;",
          "46:   taskId: string;",
          "47:   executionDate: string;",
          "",
          "[Removed Lines]",
          "44: interface Props extends ButtonProps {",
          "",
          "[Added Lines]",
          "44: interface Props {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   mapIndex?: number;",
          "51: }",
          "54:   runId,",
          "55:   taskId,",
          "56:   mapIndex,",
          "57:   executionDate,",
          "58:   isGroup,",
          "59:   isMapped,",
          "64:   const [past, setPast] = useState(false);",
          "65:   const onTogglePast = () => setPast(!past);",
          "",
          "[Removed Lines]",
          "53: const ClearInstance = ({",
          "60:   ...otherProps",
          "61: }: Props) => {",
          "62:   const { onOpen, onClose, isOpen } = useDisclosure();",
          "",
          "[Added Lines]",
          "53: interface ClearModalProps extends Props {",
          "54:   isOpen: boolean;",
          "55:   onClose: () => void;",
          "56: }",
          "58: const ClearModal = ({",
          "65:   isOpen,",
          "66:   onClose,",
          "67: }: ClearModalProps) => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:   const initialClearButtonFocusRef = useRef<HTMLButtonElement>(null);",
          "86:   const mapIndexes =",
          "87:     mapIndex !== undefined && mapIndex !== -1 ? [mapIndex] : undefined;",
          "",
          "[Removed Lines]",
          "84:   useKeysPress(keyboardShortcutIdentifier.taskRunClear, onOpen);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:     resetModal();",
          "135:   };",
          "137:   const clearLabel = \"Clear and retry task.\";",
          "139:   return (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:   return (",
          "140:     <ActionModal",
          "141:       isOpen={isOpen}",
          "142:       onClose={resetModal}",
          "143:       header=\"Clear and Retry\"",
          "144:       subheader={",
          "145:         <>",
          "146:           <Text>",
          "147:             <Text as=\"strong\" mr={1}>",
          "148:               Task:",
          "149:             </Text>",
          "150:             {taskId}",
          "151:           </Text>",
          "152:           <Text>",
          "153:             <Text as=\"strong\" mr={1}>",
          "154:               Run:",
          "155:             </Text>",
          "156:             {runId}",
          "157:           </Text>",
          "158:           {isMapped && (",
          "159:             <Text>",
          "160:               <Text as=\"strong\" mr={1}>",
          "161:                 Map Index:",
          "162:               </Text>",
          "163:               {mapIndex !== undefined ? mapIndex : `All mapped tasks`}",
          "164:             </Text>",
          "165:           )}",
          "166:         </>",
          "167:       }",
          "168:       affectedTasks={affectedTasks}",
          "169:       submitButton={",
          "170:         <Button",
          "171:           ref={initialClearButtonFocusRef}",
          "172:           colorScheme=\"blue\"",
          "173:           isLoading={isLoading || isLoadingDryRun}",
          "174:           isDisabled={!affectedTasks?.length}",
          "175:           onClick={onClear}",
          "176:         >",
          "177:           Clear",
          "178:         </Button>",
          "179:       }",
          "180:       initialFocusRef={initialClearButtonFocusRef}",
          "181:     >",
          "182:       <Box>",
          "183:         <Text>Include: </Text>",
          "184:         <ButtonGroup isAttached variant=\"outline\" isDisabled={!canEdit}>",
          "185:           <ActionButton",
          "186:             bg={past ? \"gray.100\" : undefined}",
          "187:             onClick={onTogglePast}",
          "188:             name=\"Past\"",
          "189:           />",
          "190:           <ActionButton",
          "191:             bg={future ? \"gray.100\" : undefined}",
          "192:             onClick={onToggleFuture}",
          "193:             name=\"Future\"",
          "194:           />",
          "195:           <ActionButton",
          "196:             bg={upstream ? \"gray.100\" : undefined}",
          "197:             onClick={onToggleUpstream}",
          "198:             name=\"Upstream\"",
          "199:           />",
          "200:           <ActionButton",
          "201:             bg={downstream ? \"gray.100\" : undefined}",
          "202:             onClick={onToggleDownstream}",
          "203:             name=\"Downstream\"",
          "204:           />",
          "205:           <ActionButton",
          "206:             bg={recursive ? \"gray.100\" : undefined}",
          "207:             onClick={onToggleRecursive}",
          "208:             name=\"Recursive\"",
          "209:           />",
          "210:           <ActionButton",
          "211:             bg={failed ? \"gray.100\" : undefined}",
          "212:             onClick={onToggleFailed}",
          "213:             name=\"Failed\"",
          "214:           />",
          "215:         </ButtonGroup>",
          "216:       </Box>",
          "217:       {isGroup && (past || future) && (",
          "218:         <Alert status=\"warning\" my={3}>",
          "219:           <AlertIcon />",
          "220:           Clearing a TaskGroup in the future and/or past will affect all the",
          "221:           tasks of this group across multiple dag runs.",
          "222:           <br />",
          "223:           This can take a while to complete.",
          "224:         </Alert>",
          "225:       )}",
          "226:     </ActionModal>",
          "227:   );",
          "228: };",
          "230: const ClearInstance = ({",
          "231:   runId,",
          "232:   taskId,",
          "233:   mapIndex,",
          "234:   executionDate,",
          "235:   isGroup,",
          "236:   isMapped,",
          "237:   ...otherProps",
          "238: }: Props & ButtonProps) => {",
          "239:   const { onOpen, onClose, isOpen } = useDisclosure();",
          "241:   useKeysPress(keyboardShortcutIdentifier.taskRunClear, onOpen);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:       >",
          "149:         Clear task",
          "150:       </Button>",
          "238:     </>",
          "239:   );",
          "240: };",
          "",
          "[Removed Lines]",
          "151:       <ActionModal",
          "152:         isOpen={isOpen}",
          "153:         onClose={resetModal}",
          "154:         header=\"Clear and Retry\"",
          "155:         subheader={",
          "156:           <>",
          "157:             <Text>",
          "158:               <Text as=\"strong\" mr={1}>",
          "159:                 Task:",
          "160:               </Text>",
          "161:               {taskId}",
          "162:             </Text>",
          "163:             <Text>",
          "164:               <Text as=\"strong\" mr={1}>",
          "165:                 Run:",
          "166:               </Text>",
          "167:               {runId}",
          "168:             </Text>",
          "169:             {isMapped && (",
          "170:               <Text>",
          "171:                 <Text as=\"strong\" mr={1}>",
          "172:                   Map Index:",
          "173:                 </Text>",
          "174:                 {mapIndex !== undefined ? mapIndex : `All mapped tasks`}",
          "175:               </Text>",
          "176:             )}",
          "177:           </>",
          "178:         }",
          "179:         affectedTasks={affectedTasks}",
          "180:         submitButton={",
          "181:           <Button",
          "182:             ref={initialClearButtonFocusRef}",
          "183:             colorScheme=\"blue\"",
          "184:             isLoading={isLoading || isLoadingDryRun}",
          "185:             isDisabled={!affectedTasks?.length}",
          "186:             onClick={onClear}",
          "187:           >",
          "188:             Clear",
          "189:           </Button>",
          "190:         }",
          "191:         initialFocusRef={initialClearButtonFocusRef}",
          "192:       >",
          "193:         <Box>",
          "194:           <Text>Include: </Text>",
          "195:           <ButtonGroup isAttached variant=\"outline\" isDisabled={!canEdit}>",
          "196:             <ActionButton",
          "197:               bg={past ? \"gray.100\" : undefined}",
          "198:               onClick={onTogglePast}",
          "199:               name=\"Past\"",
          "200:             />",
          "201:             <ActionButton",
          "202:               bg={future ? \"gray.100\" : undefined}",
          "203:               onClick={onToggleFuture}",
          "204:               name=\"Future\"",
          "205:             />",
          "206:             <ActionButton",
          "207:               bg={upstream ? \"gray.100\" : undefined}",
          "208:               onClick={onToggleUpstream}",
          "209:               name=\"Upstream\"",
          "210:             />",
          "211:             <ActionButton",
          "212:               bg={downstream ? \"gray.100\" : undefined}",
          "213:               onClick={onToggleDownstream}",
          "214:               name=\"Downstream\"",
          "215:             />",
          "216:             <ActionButton",
          "217:               bg={recursive ? \"gray.100\" : undefined}",
          "218:               onClick={onToggleRecursive}",
          "219:               name=\"Recursive\"",
          "220:             />",
          "221:             <ActionButton",
          "222:               bg={failed ? \"gray.100\" : undefined}",
          "223:               onClick={onToggleFailed}",
          "224:               name=\"Failed\"",
          "225:             />",
          "226:           </ButtonGroup>",
          "227:         </Box>",
          "228:         {isGroup && (past || future) && (",
          "229:           <Alert status=\"warning\" my={3}>",
          "230:             <AlertIcon />",
          "231:             Clearing a TaskGroup in the future and/or past will affect all the",
          "232:             tasks of this group across multiple dag runs.",
          "233:             <br />",
          "234:             This can take a while to complete.",
          "235:           </Alert>",
          "236:         )}",
          "237:       </ActionModal>",
          "",
          "[Added Lines]",
          "257:       {/* Only mount modal if user can edit */}",
          "258:       {canEdit && (",
          "259:         <ClearModal",
          "260:           runId={runId}",
          "261:           taskId={taskId}",
          "262:           mapIndex={mapIndex}",
          "263:           executionDate={executionDate}",
          "264:           isGroup={isGroup}",
          "265:           isMapped={isMapped}",
          "266:           isOpen={isOpen}",
          "267:           onClose={onClose}",
          "268:         />",
          "269:       )}",
          "",
          "---------------"
        ],
        "airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx||airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx": [
          "File: airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx -> airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: const canEdit = getMetaValue(\"can_edit\") === \"True\";",
          "54: const dagId = getMetaValue(\"dag_id\");",
          "57:   runId: string;",
          "58:   taskId: string;",
          "59:   state?: TaskState;",
          "",
          "[Removed Lines]",
          "56: interface Props extends MenuButtonProps {",
          "",
          "[Added Lines]",
          "56: interface Props {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   isMapped?: boolean;",
          "63: }",
          "66:   runId,",
          "67:   taskId,",
          "68:   isGroup,",
          "69:   mapIndex,",
          "70:   isMapped,",
          "78:   const [past, setPast] = useState(false);",
          "79:   const onTogglePast = () => setPast(!past);",
          "",
          "[Removed Lines]",
          "65: const MarkInstanceAs = ({",
          "71:   state: currentState,",
          "72:   ...otherProps",
          "73: }: Props) => {",
          "74:   const { onOpen, onClose, isOpen } = useDisclosure();",
          "76:   const [newState, setNewState] = useState<\"failed\" | \"success\">(\"success\");",
          "",
          "[Added Lines]",
          "65: interface ModalProps extends Props {",
          "66:   isOpen: boolean;",
          "67:   onClose: () => void;",
          "68:   state: TaskState;",
          "69: }",
          "71: const MarkAsModal = ({",
          "77:   state,",
          "78:   isOpen,",
          "79:   onClose,",
          "80: }: ModalProps) => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:   const initialMarkAsButtonFocusRef = useRef<HTMLButtonElement>(null);",
          "102:   const mapIndexes =",
          "103:     mapIndex !== undefined && mapIndex !== -1 ? [mapIndex] : undefined;",
          "",
          "[Removed Lines]",
          "92:   const markAsFailed = () => {",
          "93:     setNewState(\"failed\");",
          "94:     onOpen();",
          "95:   };",
          "97:   const markAsSuccess = () => {",
          "98:     setNewState(\"success\");",
          "99:     onOpen();",
          "100:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:       dagId,",
          "108:       runId,",
          "109:       taskId,",
          "111:       isGroup: !!isGroup,",
          "112:       past,",
          "113:       future,",
          "",
          "[Removed Lines]",
          "110:       state: newState,",
          "",
          "[Added Lines]",
          "103:       state,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142:   };",
          "144:   const onMarkState = () => {",
          "146:       markSuccessMutation({",
          "147:         past,",
          "148:         future,",
          "",
          "[Removed Lines]",
          "145:     if (newState === \"success\") {",
          "",
          "[Added Lines]",
          "138:     if (state === \"success\") {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "150:         downstream,",
          "151:         mapIndexes,",
          "152:       });",
          "154:       markFailedMutation({",
          "155:         past,",
          "156:         future,",
          "",
          "[Removed Lines]",
          "153:     } else if (newState === \"failed\") {",
          "",
          "[Added Lines]",
          "146:     } else if (state === \"failed\") {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:     resetModal();",
          "163:   };",
          "165:   const markLabel = \"Manually set task instance state\";",
          "166:   const isMappedSummary = isMapped && mapIndex === undefined;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:   return (",
          "159:     <ActionModal",
          "160:       isOpen={isOpen}",
          "161:       onClose={resetModal}",
          "162:       header={`Mark as ${capitalize(state || \"\")}`}",
          "163:       subheader={",
          "164:         <>",
          "165:           <Text>",
          "166:             <Text as=\"strong\" mr={1}>",
          "167:               Task:",
          "168:             </Text>",
          "169:             {taskId}",
          "170:           </Text>",
          "171:           <Text>",
          "172:             <Text as=\"strong\" mr={1}>",
          "173:               Run:",
          "174:             </Text>",
          "175:             {runId}",
          "176:           </Text>",
          "177:           {isMapped && (",
          "178:             <Text>",
          "179:               <Text as=\"strong\" mr={1}>",
          "180:                 Map Index:",
          "181:               </Text>",
          "182:               {mapIndex !== undefined ? mapIndex : `All mapped tasks`}",
          "183:             </Text>",
          "184:           )}",
          "185:         </>",
          "186:       }",
          "187:       affectedTasks={affectedTasks}",
          "188:       submitButton={",
          "189:         <Button",
          "190:           ref={initialMarkAsButtonFocusRef}",
          "191:           colorScheme={",
          "192:             (state === \"success\" && \"green\") ||",
          "193:             (state === \"failed\" && \"red\") ||",
          "194:             \"grey\"",
          "195:           }",
          "196:           isLoading={",
          "197:             isLoadingDryRun || isMarkSuccessLoading || isMarkFailedLoading",
          "198:           }",
          "199:           isDisabled={!affectedTasks?.length || !state}",
          "200:           onClick={onMarkState}",
          "201:         >",
          "202:           Mark as {state}",
          "203:         </Button>",
          "204:       }",
          "205:       initialFocusRef={initialMarkAsButtonFocusRef}",
          "206:     >",
          "207:       <Box>",
          "208:         <Text>Include: </Text>",
          "209:         <ButtonGroup isAttached variant=\"outline\" isDisabled={!canEdit}>",
          "210:           <ActionButton",
          "211:             bg={past ? \"gray.100\" : undefined}",
          "212:             onClick={onTogglePast}",
          "213:             name=\"Past\"",
          "214:           />",
          "215:           <ActionButton",
          "216:             bg={future ? \"gray.100\" : undefined}",
          "217:             onClick={onToggleFuture}",
          "218:             name=\"Future\"",
          "219:           />",
          "220:           <ActionButton",
          "221:             bg={upstream ? \"gray.100\" : undefined}",
          "222:             onClick={onToggleUpstream}",
          "223:             name=\"Upstream\"",
          "224:           />",
          "225:           <ActionButton",
          "226:             bg={downstream ? \"gray.100\" : undefined}",
          "227:             onClick={onToggleDownstream}",
          "228:             name=\"Downstream\"",
          "229:           />",
          "230:         </ButtonGroup>",
          "231:       </Box>",
          "232:       {isGroup && (past || future) && (",
          "233:         <Alert status=\"warning\" my={3}>",
          "234:           <AlertIcon />",
          "235:           Marking a TaskGroup as {capitalize(state || \"\")} in the future and/or",
          "236:           past will affect all the tasks of this group across multiple dag runs.",
          "237:           <br />",
          "238:           This can take a while to complete.",
          "239:         </Alert>",
          "240:       )}",
          "241:     </ActionModal>",
          "242:   );",
          "243: };",
          "245: const MarkInstanceAs = ({",
          "246:   runId,",
          "247:   taskId,",
          "248:   isGroup,",
          "249:   mapIndex,",
          "250:   isMapped,",
          "251:   state: currentState,",
          "252:   ...otherProps",
          "253: }: Props & MenuButtonProps) => {",
          "254:   const { onOpen, onClose, isOpen } = useDisclosure();",
          "256:   const [newState, setNewState] = useState<\"failed\" | \"success\">(\"success\");",
          "258:   const markAsFailed = () => {",
          "259:     setNewState(\"failed\");",
          "260:     onOpen();",
          "261:   };",
          "263:   const markAsSuccess = () => {",
          "264:     setNewState(\"success\");",
          "265:     onOpen();",
          "266:   };",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "209:           </MenuItem>",
          "210:         </MenuList>",
          "211:       </Menu>",
          "296:     </>",
          "297:   );",
          "298: };",
          "",
          "[Removed Lines]",
          "212:       <ActionModal",
          "213:         isOpen={isOpen}",
          "214:         onClose={resetModal}",
          "215:         header={`Mark as ${capitalize(newState)}`}",
          "216:         subheader={",
          "217:           <>",
          "218:             <Text>",
          "219:               <Text as=\"strong\" mr={1}>",
          "220:                 Task:",
          "221:               </Text>",
          "222:               {taskId}",
          "223:             </Text>",
          "224:             <Text>",
          "225:               <Text as=\"strong\" mr={1}>",
          "226:                 Run:",
          "227:               </Text>",
          "228:               {runId}",
          "229:             </Text>",
          "230:             {isMapped && (",
          "231:               <Text>",
          "232:                 <Text as=\"strong\" mr={1}>",
          "233:                   Map Index:",
          "234:                 </Text>",
          "235:                 {mapIndex !== undefined ? mapIndex : `All mapped tasks`}",
          "236:               </Text>",
          "237:             )}",
          "238:           </>",
          "239:         }",
          "240:         affectedTasks={affectedTasks}",
          "241:         submitButton={",
          "242:           <Button",
          "243:             ref={initialMarkAsButtonFocusRef}",
          "244:             colorScheme={",
          "245:               (newState === \"success\" && \"green\") ||",
          "246:               (newState === \"failed\" && \"red\") ||",
          "247:               \"grey\"",
          "248:             }",
          "249:             isLoading={",
          "250:               isLoadingDryRun || isMarkSuccessLoading || isMarkFailedLoading",
          "251:             }",
          "252:             isDisabled={!affectedTasks?.length || !newState}",
          "253:             onClick={onMarkState}",
          "254:           >",
          "255:             Mark as {newState}",
          "256:           </Button>",
          "257:         }",
          "258:         initialFocusRef={initialMarkAsButtonFocusRef}",
          "259:       >",
          "260:         <Box>",
          "261:           <Text>Include: </Text>",
          "262:           <ButtonGroup isAttached variant=\"outline\" isDisabled={!canEdit}>",
          "263:             <ActionButton",
          "264:               bg={past ? \"gray.100\" : undefined}",
          "265:               onClick={onTogglePast}",
          "266:               name=\"Past\"",
          "267:             />",
          "268:             <ActionButton",
          "269:               bg={future ? \"gray.100\" : undefined}",
          "270:               onClick={onToggleFuture}",
          "271:               name=\"Future\"",
          "272:             />",
          "273:             <ActionButton",
          "274:               bg={upstream ? \"gray.100\" : undefined}",
          "275:               onClick={onToggleUpstream}",
          "276:               name=\"Upstream\"",
          "277:             />",
          "278:             <ActionButton",
          "279:               bg={downstream ? \"gray.100\" : undefined}",
          "280:               onClick={onToggleDownstream}",
          "281:               name=\"Downstream\"",
          "282:             />",
          "283:           </ButtonGroup>",
          "284:         </Box>",
          "285:         {isGroup && (past || future) && (",
          "286:           <Alert status=\"warning\" my={3}>",
          "287:             <AlertIcon />",
          "288:             Marking a TaskGroup as {capitalize(newState)} in the future and/or",
          "289:             past will affect all the tasks of this group across multiple dag",
          "290:             runs.",
          "291:             <br />",
          "292:             This can take a while to complete.",
          "293:           </Alert>",
          "294:         )}",
          "295:       </ActionModal>",
          "",
          "[Added Lines]",
          "315:       {/* Only load modal is user can edit */}",
          "316:       {canEdit && (",
          "317:         <MarkAsModal",
          "318:           runId={runId}",
          "319:           taskId={taskId}",
          "320:           isGroup={isGroup}",
          "321:           mapIndex={mapIndex}",
          "322:           isMapped={isMapped}",
          "323:           state={newState}",
          "324:           isOpen={isOpen}",
          "325:           onClose={onClose}",
          "326:         />",
          "327:       )}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be31ac27526166ea1bf0c39b23686f4bca01efa4",
      "candidate_info": {
        "commit_hash": "be31ac27526166ea1bf0c39b23686f4bca01efa4",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/be31ac27526166ea1bf0c39b23686f4bca01efa4",
        "files": [
          "airflow/example_dags/example_python_operator.py",
          "airflow/models/taskinstance.py",
          "airflow/providers/celery/executors/celery_executor.py",
          "airflow/providers/celery/executors/celery_executor_utils.py",
          "airflow/providers/common/sql/operators/sql.py",
          "airflow/providers/docker/operators/docker.py",
          "airflow/providers/google/cloud/hooks/bigquery.py",
          "airflow/providers/google/cloud/hooks/gcs.py",
          "airflow/www/views.py",
          "dev/breeze/src/airflow_breeze/utils/parallel.py",
          "dev/stats/get_important_pr_candidates.py",
          "tests/test_utils/perf/perf_kit/repeat_and_time.py"
        ],
        "message": "Get rid of Python2 numeric relics (#33050)\n\n(cherry picked from commit e3d82c6be0e0e1468ade053c37690aa1e0e4882d)",
        "before_after_code_files": [
          "airflow/example_dags/example_python_operator.py||airflow/example_dags/example_python_operator.py",
          "airflow/models/taskinstance.py||airflow/models/taskinstance.py",
          "airflow/providers/celery/executors/celery_executor.py||airflow/providers/celery/executors/celery_executor.py",
          "airflow/providers/celery/executors/celery_executor_utils.py||airflow/providers/celery/executors/celery_executor_utils.py",
          "airflow/providers/common/sql/operators/sql.py||airflow/providers/common/sql/operators/sql.py",
          "airflow/providers/docker/operators/docker.py||airflow/providers/docker/operators/docker.py",
          "airflow/providers/google/cloud/hooks/bigquery.py||airflow/providers/google/cloud/hooks/bigquery.py",
          "airflow/providers/google/cloud/hooks/gcs.py||airflow/providers/google/cloud/hooks/gcs.py",
          "airflow/www/views.py||airflow/www/views.py",
          "dev/breeze/src/airflow_breeze/utils/parallel.py||dev/breeze/src/airflow_breeze/utils/parallel.py",
          "dev/stats/get_important_pr_candidates.py||dev/stats/get_important_pr_candidates.py",
          "tests/test_utils/perf/perf_kit/repeat_and_time.py||tests/test_utils/perf/perf_kit/repeat_and_time.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/example_dags/example_python_operator.py||airflow/example_dags/example_python_operator.py": [
          "File: airflow/example_dags/example_python_operator.py -> airflow/example_dags/example_python_operator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:             \"\"\"This is a function that will run within the DAG execution\"\"\"",
          "82:             time.sleep(random_base)",
          "86:         run_this >> log_the_sql >> sleeping_task",
          "87:     # [END howto_operator_python_kwargs]",
          "",
          "[Removed Lines]",
          "84:         sleeping_task = my_sleeping_function(random_base=float(i) / 10)",
          "",
          "[Added Lines]",
          "84:         sleeping_task = my_sleeping_function(random_base=i / 10)",
          "",
          "---------------"
        ],
        "airflow/models/taskinstance.py||airflow/models/taskinstance.py": [
          "File: airflow/models/taskinstance.py -> airflow/models/taskinstance.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1195:             # If the min_backoff calculation is below 1, it will be converted to 0 via int. Thus,",
          "1196:             # we must round up prior to converting to an int, otherwise a divide by zero error",
          "1197:             # will occur in the modded_hash calculation.",
          "1200:             # In the case when delay.total_seconds() is 0, min_backoff will not be rounded up to 1.",
          "1201:             # To address this, we impose a lower bound of 1 on min_backoff. This effectively makes",
          "",
          "[Removed Lines]",
          "1198:             min_backoff = int(math.ceil(delay.total_seconds() * (2 ** (self.try_number - 2))))",
          "",
          "[Added Lines]",
          "1198:             min_backoff = math.ceil(delay.total_seconds() * (2 ** (self.try_number - 2)))",
          "",
          "---------------"
        ],
        "airflow/providers/celery/executors/celery_executor.py||airflow/providers/celery/executors/celery_executor.py": [
          "File: airflow/providers/celery/executors/celery_executor.py -> airflow/providers/celery/executors/celery_executor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:         :return: Number of tasks that should be sent per process",
          "266:         \"\"\"",
          "269:     def _process_tasks(self, task_tuples: list[TaskTuple]) -> None:",
          "270:         from airflow.providers.celery.executors.celery_executor_utils import execute_command",
          "",
          "[Removed Lines]",
          "267:         return max(1, int(math.ceil(1.0 * to_send_count / self._sync_parallelism)))",
          "",
          "[Added Lines]",
          "267:         return max(1, math.ceil(to_send_count / self._sync_parallelism))",
          "",
          "---------------"
        ],
        "airflow/providers/celery/executors/celery_executor_utils.py||airflow/providers/celery/executors/celery_executor_utils.py": [
          "File: airflow/providers/celery/executors/celery_executor_utils.py -> airflow/providers/celery/executors/celery_executor_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:         num_process = min(len(async_results), self._sync_parallelism)",
          "300:         with ProcessPoolExecutor(max_workers=num_process) as sync_pool:",
          "303:             task_id_to_states_and_info = list(",
          "304:                 sync_pool.map(fetch_celery_task_state, async_results, chunksize=chunksize)",
          "",
          "[Removed Lines]",
          "301:             chunksize = max(1, math.floor(math.ceil(1.0 * len(async_results) / self._sync_parallelism)))",
          "",
          "[Added Lines]",
          "301:             chunksize = max(1, math.ceil(len(async_results) / self._sync_parallelism))",
          "",
          "---------------"
        ],
        "airflow/providers/common/sql/operators/sql.py||airflow/providers/common/sql/operators/sql.py": [
          "File: airflow/providers/common/sql/operators/sql.py -> airflow/providers/common/sql/operators/sql.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "903:     ui_color = \"#fff7e6\"",
          "905:     ratio_formulas = {",
          "908:     }",
          "910:     def __init__(",
          "",
          "[Removed Lines]",
          "906:         \"max_over_min\": lambda cur, ref: float(max(cur, ref)) / min(cur, ref),",
          "907:         \"relative_diff\": lambda cur, ref: float(abs(cur - ref)) / ref,",
          "",
          "[Added Lines]",
          "906:         \"max_over_min\": lambda cur, ref: max(cur, ref) / min(cur, ref),",
          "907:         \"relative_diff\": lambda cur, ref: abs(cur - ref) / ref,",
          "",
          "---------------"
        ],
        "airflow/providers/docker/operators/docker.py||airflow/providers/docker/operators/docker.py": [
          "File: airflow/providers/docker/operators/docker.py -> airflow/providers/docker/operators/docker.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "374:                 shm_size=self.shm_size,",
          "375:                 dns=self.dns,",
          "376:                 dns_search=self.dns_search,",
          "378:                 port_bindings=self.port_bindings,",
          "379:                 mem_limit=self.mem_limit,",
          "380:                 cap_add=self.cap_add,",
          "",
          "[Removed Lines]",
          "377:                 cpu_shares=int(round(self.cpus * 1024)),",
          "",
          "[Added Lines]",
          "377:                 cpu_shares=round(self.cpus * 1024),",
          "",
          "---------------"
        ],
        "airflow/providers/google/cloud/hooks/bigquery.py||airflow/providers/google/cloud/hooks/bigquery.py": [
          "File: airflow/providers/google/cloud/hooks/bigquery.py -> airflow/providers/google/cloud/hooks/bigquery.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3261:             raise AirflowException(\"The first SQL query returned None\")",
          "3263:         ratio_formulas = {",
          "3266:         }",
          "3268:         metrics_sorted = sorted(metrics_thresholds.keys())",
          "",
          "[Removed Lines]",
          "3264:             \"max_over_min\": lambda cur, ref: float(max(cur, ref)) / min(cur, ref),",
          "3265:             \"relative_diff\": lambda cur, ref: float(abs(cur - ref)) / ref,",
          "",
          "[Added Lines]",
          "3264:             \"max_over_min\": lambda cur, ref: max(cur, ref) / min(cur, ref),",
          "3265:             \"relative_diff\": lambda cur, ref: abs(cur - ref) / ref,",
          "",
          "---------------"
        ],
        "airflow/providers/google/cloud/hooks/gcs.py||airflow/providers/google/cloud/hooks/gcs.py": [
          "File: airflow/providers/google/cloud/hooks/gcs.py -> airflow/providers/google/cloud/hooks/gcs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:                     raise",
          "358:                 # Wait with exponential backoff scheme before retrying.",
          "360:                 time.sleep(timeout_seconds)",
          "361:                 continue",
          "",
          "[Removed Lines]",
          "359:                 timeout_seconds = 1.0 * 2 ** (num_file_attempts - 1)",
          "",
          "[Added Lines]",
          "359:                 timeout_seconds = 2 ** (num_file_attempts - 1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524:                         raise e",
          "526:                     # Wait with exponential backoff scheme before retrying.",
          "528:                     time.sleep(timeout_seconds)",
          "529:                     continue",
          "",
          "[Removed Lines]",
          "527:                     timeout_seconds = 1.0 * 2 ** (num_file_attempts - 1)",
          "",
          "[Added Lines]",
          "527:                     timeout_seconds = 2 ** (num_file_attempts - 1)",
          "",
          "---------------"
        ],
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "939:                 \"error\",",
          "940:             )",
          "944:         state_color_mapping = State.state_color.copy()",
          "945:         state_color_mapping[\"null\"] = state_color_mapping.pop(None)",
          "",
          "[Removed Lines]",
          "942:         num_of_pages = int(math.ceil(num_of_all_dags / float(dags_per_page)))",
          "",
          "[Added Lines]",
          "942:         num_of_pages = math.ceil(num_of_all_dags / dags_per_page)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4004:         logs_per_page = PAGE_SIZE",
          "4005:         audit_logs_count = get_query_count(query, session=session)",
          "4008:         start = current_page * logs_per_page",
          "4009:         end = start + logs_per_page",
          "",
          "[Removed Lines]",
          "4006:         num_of_pages = int(math.ceil(audit_logs_count / float(logs_per_page)))",
          "",
          "[Added Lines]",
          "4006:         num_of_pages = math.ceil(audit_logs_count / logs_per_page)",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/utils/parallel.py||dev/breeze/src/airflow_breeze/utils/parallel.py": [
          "File: dev/breeze/src/airflow_breeze/utils/parallel.py -> dev/breeze/src/airflow_breeze/utils/parallel.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:         prefix[s] = 1 << (i + 1) * 10",
          "210:     for s in reversed(symbols):",
          "211:         if n >= prefix[s]:",
          "213:             return f\"{value:.1f}{s}\"",
          "214:     return f\"{n}B\"",
          "",
          "[Removed Lines]",
          "212:             value = float(n) / prefix[s]",
          "",
          "[Added Lines]",
          "212:             value = n / prefix[s]",
          "",
          "---------------"
        ],
        "dev/stats/get_important_pr_candidates.py||dev/stats/get_important_pr_candidates.py": [
          "File: dev/stats/get_important_pr_candidates.py -> dev/stats/get_important_pr_candidates.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:         self.adjust_interaction_score()",
          "245:         return round(",
          "252:             3,",
          "253:         )",
          "",
          "[Removed Lines]",
          "246:             1.0",
          "251:             / (math.log10(self.num_changed_files) if self.num_changed_files > 20 else 1.0),",
          "",
          "[Added Lines]",
          "246:             self.interaction_score",
          "250:             / (math.log10(self.num_changed_files) if self.num_changed_files > 20 else 1),",
          "",
          "---------------"
        ],
        "tests/test_utils/perf/perf_kit/repeat_and_time.py||tests/test_utils/perf/perf_kit/repeat_and_time.py": [
          "File: tests/test_utils/perf/perf_kit/repeat_and_time.py -> tests/test_utils/perf/perf_kit/repeat_and_time.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:         for _ in range(0, total):",
          "121:             x_val = random.random() ** 2",
          "122:             y_val = random.random() ** 2",
          "124:                 inside += 1",
          "128:     # Example 1:s",
          "129:     with timeout(1):",
          "",
          "[Removed Lines]",
          "123:             if math.sqrt(x_val + y_val) < 1.0:",
          "126:         return (float(inside) / total) * 4",
          "",
          "[Added Lines]",
          "123:             if math.sqrt(x_val + y_val) < 1:",
          "126:         return (inside / total) * 4",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "faf9de4342d8084800c2feddba0990b7e6b4a652",
      "candidate_info": {
        "commit_hash": "faf9de4342d8084800c2feddba0990b7e6b4a652",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/faf9de4342d8084800c2feddba0990b7e6b4a652",
        "files": [
          "airflow/models/mappedoperator.py",
          "airflow/serialization/serialized_objects.py",
          "tests/serialization/test_serialized_objects.py"
        ],
        "message": "Ensure DAG-level references are filled on unmap (#33083)\n\nCo-authored-by: Jed Cunningham <66968678+jedcunningham@users.noreply.github.com>\n(cherry picked from commit bcfadcf6e4b2de587959594f54a9e8fef96c4a2b)",
        "before_after_code_files": [
          "airflow/models/mappedoperator.py||airflow/models/mappedoperator.py",
          "airflow/serialization/serialized_objects.py||airflow/serialization/serialized_objects.py",
          "tests/serialization/test_serialized_objects.py||tests/serialization/test_serialized_objects.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/models/mappedoperator.py||airflow/models/mappedoperator.py": [
          "File: airflow/models/mappedoperator.py -> airflow/models/mappedoperator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "660:         op = SerializedBaseOperator(task_id=self.task_id, params=self.params, _airflow_from_mapped=True)",
          "661:         SerializedBaseOperator.populate_operator(op, self.operator_class)",
          "662:         return op",
          "664:     def _get_specified_expand_input(self) -> ExpandInput:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:         if self.dag is not None:  # For Mypy; we only serialize tasks in a DAG so the check always satisfies.",
          "663:             SerializedBaseOperator.set_task_dag_references(op, self.dag)",
          "",
          "---------------"
        ],
        "airflow/serialization/serialized_objects.py||airflow/serialization/serialized_objects.py": [
          "File: airflow/serialization/serialized_objects.py -> airflow/serialization/serialized_objects.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "736:     All operators are casted to SerializedBaseOperator after deserialization.",
          "737:     Class specific attributes used by UI are move to object attributes.",
          "738:     \"\"\"",
          "740:     _decorated_fields = {\"executor_config\"}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:     Creating a SerializedBaseOperator is a three-step process:",
          "741:     1. Instantiate a :class:`SerializedBaseOperator` object.",
          "742:     2. Populate attributes with :func:`SerializedBaseOperator.populated_operator`.",
          "743:     3. When the task's containing DAG is available, fix references to the DAG",
          "744:        with :func:`SerializedBaseOperator.set_task_dag_references`.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "876:     @classmethod",
          "877:     def populate_operator(cls, op: Operator, encoded_op: dict[str, Any]) -> None:",
          "878:         if \"label\" not in encoded_op:",
          "879:             # Handle deserialization of old data before the introduction of TaskGroup",
          "880:             encoded_op[\"label\"] = encoded_op[\"task_id\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885:         \"\"\"Populate operator attributes with serialized values.",
          "887:         This covers simple attributes that don't reference other things in the",
          "888:         DAG. Setting references (such as ``op.dag`` and task dependencies) is",
          "889:         done in ``set_task_dag_references`` instead, which is called after the",
          "890:         DAG is hydrated.",
          "891:         \"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "982:         # Used to determine if an Operator is inherited from EmptyOperator",
          "983:         setattr(op, \"_is_empty\", bool(encoded_op.get(\"_is_empty\", False)))",
          "985:     @classmethod",
          "986:     def deserialize_operator(cls, encoded_op: dict[str, Any]) -> Operator:",
          "987:         \"\"\"Deserializes an operator from a JSON object.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "999:     @staticmethod",
          "1000:     def set_task_dag_references(task: Operator, dag: DAG) -> None:",
          "1001:         \"\"\"Handle DAG references on an operator.",
          "1003:         The operator should have been mostly populated earlier by calling",
          "1004:         ``populate_operator``. This function further fixes object references",
          "1005:         that were not possible before the task's containing DAG is hydrated.",
          "1006:         \"\"\"",
          "1007:         task.dag = dag",
          "1009:         for date_attr in (\"start_date\", \"end_date\"):",
          "1010:             if getattr(task, date_attr, None) is None:",
          "1011:                 setattr(task, date_attr, getattr(dag, date_attr, None))",
          "1013:         if task.subdag is not None:",
          "1014:             task.subdag.parent_dag = dag",
          "1016:         # Dereference expand_input and op_kwargs_expand_input.",
          "1017:         for k in (\"expand_input\", \"op_kwargs_expand_input\"):",
          "1018:             if isinstance(kwargs_ref := getattr(task, k, None), _ExpandInputRef):",
          "1019:                 setattr(task, k, kwargs_ref.deref(dag))",
          "1021:         for task_id in task.downstream_task_ids:",
          "1022:             # Bypass set_upstream etc here - it does more than we want",
          "1023:             dag.task_dict[task_id].upstream_task_ids.add(task.task_id)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1328:             setattr(dag, k, None)",
          "1330:         for task in dag.task_dict.values():",
          "1350:         return dag",
          "",
          "[Removed Lines]",
          "1331:             task.dag = dag",
          "1333:             for date_attr in [\"start_date\", \"end_date\"]:",
          "1334:                 if getattr(task, date_attr) is None:",
          "1335:                     setattr(task, date_attr, getattr(dag, date_attr))",
          "1337:             if task.subdag is not None:",
          "1338:                 setattr(task.subdag, \"parent_dag\", dag)",
          "1340:             # Dereference expand_input and op_kwargs_expand_input.",
          "1341:             for k in (\"expand_input\", \"op_kwargs_expand_input\"):",
          "1342:                 kwargs_ref = getattr(task, k, None)",
          "1343:                 if isinstance(kwargs_ref, _ExpandInputRef):",
          "1344:                     setattr(task, k, kwargs_ref.deref(dag))",
          "1346:             for task_id in task.downstream_task_ids:",
          "1347:                 # Bypass set_upstream etc here - it does more than we want",
          "1348:                 dag.task_dict[task_id].upstream_task_ids.add(task.task_id)",
          "",
          "[Added Lines]",
          "1371:             SerializedBaseOperator.set_task_dag_references(task, dag)",
          "",
          "---------------"
        ],
        "tests/serialization/test_serialized_objects.py||tests/serialization/test_serialized_objects.py": [
          "File: tests/serialization/test_serialized_objects.py -> tests/serialization/test_serialized_objects.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     deserialized = BaseSerialization.deserialize(serialized, use_pydantic_models=True)  # does not raise",
          "98:     assert isinstance(deserialized[0][0], TaskInstancePydantic)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: def test_serialized_mapped_operator_unmap(dag_maker):",
          "102:     from airflow.serialization.serialized_objects import SerializedDAG",
          "103:     from tests.test_utils.mock_operators import MockOperator",
          "105:     with dag_maker(dag_id=\"dag\") as dag:",
          "106:         MockOperator(task_id=\"task1\", arg1=\"x\")",
          "107:         MockOperator.partial(task_id=\"task2\").expand(arg1=[\"a\", \"b\"])",
          "109:     serialized_dag = SerializedDAG.from_dict(SerializedDAG.to_dict(dag))",
          "110:     assert serialized_dag.dag_id == \"dag\"",
          "112:     serialized_task1 = serialized_dag.get_task(\"task1\")",
          "113:     assert serialized_task1.dag is serialized_dag",
          "115:     serialized_task2 = serialized_dag.get_task(\"task2\")",
          "116:     assert serialized_task2.dag is serialized_dag",
          "118:     serialized_unmapped_task = serialized_task2.unmap(None)",
          "119:     assert serialized_unmapped_task.dag is serialized_dag",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8351ae5fac46b3c864e0947720f292eb3b8e3a8a",
      "candidate_info": {
        "commit_hash": "8351ae5fac46b3c864e0947720f292eb3b8e3a8a",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/8351ae5fac46b3c864e0947720f292eb3b8e3a8a",
        "files": [
          "airflow/example_dags/plugins/event_listener.py",
          "tests/providers/openlineage/plugins/test_openlineage_adapter.py"
        ],
        "message": "openlineage: remove eager test for auth headers, fix example dag (#33087)\n\nSigned-off-by: Maciej Obuchowski <obuchowski.maciej@gmail.com>\n(cherry picked from commit 1c7472df70e12f89ee18ef62b84da74386d50f90)",
        "before_after_code_files": [
          "airflow/example_dags/plugins/event_listener.py||airflow/example_dags/plugins/event_listener.py",
          "tests/providers/openlineage/plugins/test_openlineage_adapter.py||tests/providers/openlineage/plugins/test_openlineage_adapter.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/example_dags/plugins/event_listener.py||airflow/example_dags/plugins/event_listener.py": [
          "File: airflow/example_dags/plugins/event_listener.py -> airflow/example_dags/plugins/event_listener.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: # [START howto_listen_dagrun_success_task]",
          "113: @hookimpl",
          "115:     \"\"\"",
          "116:     This method is called when dag run state changes to SUCCESS.",
          "117:     \"\"\"",
          "",
          "[Removed Lines]",
          "114: def on_dag_run_success(dag_run: DagRun, message: str):",
          "",
          "[Added Lines]",
          "114: def on_dag_run_success(dag_run: DagRun, msg: str):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127: # [START howto_listen_dagrun_failure_task]",
          "128: @hookimpl",
          "130:     \"\"\"",
          "131:     This method is called when dag run state changes to FAILED.",
          "132:     \"\"\"",
          "",
          "[Removed Lines]",
          "129: def on_dag_run_failed(dag_run: DagRun, message: str):",
          "",
          "[Added Lines]",
          "129: def on_dag_run_failed(dag_run: DagRun, msg: str):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143: # [START howto_listen_dagrun_running_task]",
          "144: @hookimpl",
          "146:     \"\"\"",
          "147:     This method is called when dag run state changes to RUNNING.",
          "148:     \"\"\"",
          "",
          "[Removed Lines]",
          "145: def on_dag_run_running(dag_run: DagRun, message: str):",
          "",
          "[Added Lines]",
          "145: def on_dag_run_running(dag_run: DagRun, msg: str):",
          "",
          "---------------"
        ],
        "tests/providers/openlineage/plugins/test_openlineage_adapter.py||tests/providers/openlineage/plugins/test_openlineage_adapter.py": [
          "File: tests/providers/openlineage/plugins/test_openlineage_adapter.py -> tests/providers/openlineage/plugins/test_openlineage_adapter.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     assert client.transport.url == \"http://ol-api:5000\"",
          "45:     assert \"Authorization\" in client.transport.session.headers",
          "49: @conf_vars(",
          "",
          "[Removed Lines]",
          "46:     assert client.transport.session.headers[\"Authorization\"] == \"Bearer api-key\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     assert client.transport.kind == \"http\"",
          "59:     assert client.transport.url == \"http://ol-api:5000\"",
          "64: @conf_vars(",
          "",
          "[Removed Lines]",
          "60:     assert \"Authorization\" in client.transport.session.headers",
          "61:     assert client.transport.session.headers[\"Authorization\"] == \"Bearer api-key\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}