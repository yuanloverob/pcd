{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2d4010953f6c9c57ecbdccf9a3d5d20879986003",
      "candidate_info": {
        "commit_hash": "2d4010953f6c9c57ecbdccf9a3d5d20879986003",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/2d4010953f6c9c57ecbdccf9a3d5d20879986003",
        "files": [
          "server-base/src/main/java/org/apache/kylin/rest/security/SAMLUserDetailsService.java",
          "server-base/src/main/java/org/apache/kylin/rest/security/saml/SAMLSimpleUserDetailsService.java"
        ],
        "message": "KYLIN-4481 Project-level ACL lookups not working for non-admin SAML-federated users\n\n(cherry picked from commit dca6b8055a31ba1f31d188efc2fd57cf710da5e7)",
        "before_after_code_files": [
          "server-base/src/main/java/org/apache/kylin/rest/security/SAMLUserDetailsService.java||server-base/src/main/java/org/apache/kylin/rest/security/SAMLUserDetailsService.java",
          "server-base/src/main/java/org/apache/kylin/rest/security/saml/SAMLSimpleUserDetailsService.java||server-base/src/main/java/org/apache/kylin/rest/security/saml/SAMLSimpleUserDetailsService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server-base/src/main/java/org/apache/kylin/rest/security/SAMLUserDetailsService.java||server-base/src/main/java/org/apache/kylin/rest/security/SAMLUserDetailsService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/security/SAMLUserDetailsService.java -> server-base/src/main/java/org/apache/kylin/rest/security/SAMLUserDetailsService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.slf4j.LoggerFactory;",
          "23: import org.springframework.security.core.userdetails.UserDetails;",
          "24: import org.springframework.security.core.userdetails.UsernameNotFoundException;",
          "25: import org.springframework.security.ldap.userdetails.LdapUserDetailsService;",
          "26: import org.springframework.security.saml.SAMLCredential;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.springframework.security.ldap.userdetails.LdapUserDetailsImpl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:         UserDetails userDetails = null;",
          "47:         try {",
          "48:             userDetails = ldapUserDetailsService.loadUserByUsername(userName);",
          "49:         } catch (org.springframework.security.core.userdetails.UsernameNotFoundException e) {",
          "50:             logger.error(\"User not found in LDAP, check whether he/she has been added to the groups.\", e);",
          "51:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:             if (userDetails instanceof LdapUserDetailsImpl) {",
          "51:                 LdapUserDetailsImpl.Essence essence = new LdapUserDetailsImpl.Essence();",
          "52:                 essence.setDn(((LdapUserDetailsImpl) userDetails).getDn());",
          "53:                 essence.setUsername(userEmail);",
          "54:                 essence.setPassword(userDetails.getPassword());",
          "55:                 essence.setAuthorities(userDetails.getAuthorities());",
          "56:                 essence.setTimeBeforeExpiration(((LdapUserDetailsImpl) userDetails).getTimeBeforeExpiration());",
          "57:                 essence.setGraceLoginsRemaining(((LdapUserDetailsImpl) userDetails).getGraceLoginsRemaining());",
          "58:                 userDetails = essence.createUserDetails();",
          "59:             }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/security/saml/SAMLSimpleUserDetailsService.java||server-base/src/main/java/org/apache/kylin/rest/security/saml/SAMLSimpleUserDetailsService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/security/saml/SAMLSimpleUserDetailsService.java -> server-base/src/main/java/org/apache/kylin/rest/security/saml/SAMLSimpleUserDetailsService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     public Object loadUserBySAML(SAMLCredential samlCredential) throws UsernameNotFoundException {",
          "51:         final String userEmail = samlCredential.getAttributeAsString(\"email\");",
          "52:         logger.debug(\"samlCredential.email:\" + userEmail);",
          "55:         KylinUserManager userManager = KylinUserManager.getInstance(KylinConfig.getInstanceFromEnv());",
          "58:         if (existUser == null) {",
          "60:             userManager.update(user);",
          "61:         }",
          "63:     }",
          "64: }",
          "",
          "[Removed Lines]",
          "53:         final String userName = userEmail.substring(0, userEmail.indexOf(\"@\"));",
          "56:         ManagedUser existUser = userManager.get(userName);",
          "59:             ManagedUser user = new ManagedUser(userName, NO_EXISTENCE_PASSWORD, true, defaultAuthorities);",
          "62:         return userManager.get(userName);",
          "",
          "[Added Lines]",
          "54:         ManagedUser existUser = userManager.get(userEmail);",
          "57:             ManagedUser user = new ManagedUser(userEmail, NO_EXISTENCE_PASSWORD, true, defaultAuthorities);",
          "60:         return userManager.get(userEmail);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23d908208b0fa3ca8fe30ecdf9579ba83aed0abd",
      "candidate_info": {
        "commit_hash": "23d908208b0fa3ca8fe30ecdf9579ba83aed0abd",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/23d908208b0fa3ca8fe30ecdf9579ba83aed0abd",
        "files": [
          "server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java",
          "server-base/src/main/java/org/apache/kylin/rest/job/StorageCleanupJob.java",
          "server-base/src/test/java/org/apache/kylin/rest/job/MetadataCleanupJobTest.java",
          "server-base/src/test/java/org/apache/kylin/rest/job/StorageCleanupJobTest.java"
        ],
        "message": "KYLIN-4897 Add table snapshot and global dictionary cleaning in StorageCleanupJob",
        "before_after_code_files": [
          "server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java||server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java",
          "server-base/src/main/java/org/apache/kylin/rest/job/StorageCleanupJob.java||server-base/src/main/java/org/apache/kylin/rest/job/StorageCleanupJob.java",
          "server-base/src/test/java/org/apache/kylin/rest/job/MetadataCleanupJobTest.java||server-base/src/test/java/org/apache/kylin/rest/job/MetadataCleanupJobTest.java",
          "server-base/src/test/java/org/apache/kylin/rest/job/StorageCleanupJobTest.java||server-base/src/test/java/org/apache/kylin/rest/job/StorageCleanupJobTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java||server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java -> server-base/src/main/java/org/apache/kylin/rest/job/MetadataCleanupJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.rest.job;",
          "22: import java.io.IOException;",
          "23: import java.util.List;",
          "24: import java.util.Map;",
          "30: import org.apache.commons.lang3.StringUtils;",
          "32: import org.apache.hadoop.fs.FileSystem;",
          "33: import org.apache.hadoop.fs.Path;",
          "34: import org.apache.kylin.common.KylinConfig;",
          "35: import org.apache.kylin.common.persistence.ResourceStore;",
          "36: import org.apache.kylin.common.util.HadoopUtil;",
          "42: import org.apache.kylin.engine.mr.CubingJob;",
          "43: import org.apache.kylin.job.dao.ExecutableDao;",
          "44: import org.apache.kylin.job.dao.ExecutableOutputPO;",
          "",
          "[Removed Lines]",
          "21: import java.io.FileNotFoundException;",
          "25: import java.util.NavigableSet;",
          "26: import java.util.Set;",
          "27: import java.util.TreeSet;",
          "29: import org.apache.commons.lang3.ArrayUtils;",
          "31: import org.apache.hadoop.fs.FileStatus;",
          "37: import org.apache.kylin.cube.CubeInstance;",
          "38: import org.apache.kylin.cube.CubeManager;",
          "39: import org.apache.kylin.cube.CubeSegment;",
          "40: import org.apache.kylin.dict.DictionaryInfo;",
          "41: import org.apache.kylin.dict.DictionaryInfoSerializer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: import org.slf4j.LoggerFactory;",
          "53: import org.apache.kylin.shaded.com.google.common.collect.Maps;",
          "56: public class MetadataCleanupJob {",
          "58:     private static final Logger logger = LoggerFactory.getLogger(MetadataCleanupJob.class);",
          "64:     final KylinConfig config;",
          "",
          "[Removed Lines]",
          "54: import org.apache.kylin.shaded.com.google.common.collect.Sets;",
          "60:     private static final long NEW_RESOURCE_THREADSHOLD_MS = 12 * 3600 * 1000L; // 12 hour",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:     public Map<String, Long> cleanup(boolean delete, int jobOutdatedDays) throws Exception {",
          "88:         Map<String, Long> toDeleteCandidates = Maps.newHashMap();",
          "166:         long outdatedJobTimeCut = System.currentTimeMillis() - jobOutdatedDays * 24 * 3600 * 1000L;",
          "167:         ExecutableDao executableDao = ExecutableDao.getInstance(config);",
          "",
          "[Removed Lines]",
          "84:         CubeManager cubeManager = CubeManager.getInstance(config);",
          "85:         long newResourceTimeCut = System.currentTimeMillis() - NEW_RESOURCE_THREADSHOLD_MS;",
          "86:         FileSystem fs = HadoopUtil.getWorkingFileSystem(HadoopUtil.getCurrentConfiguration());",
          "91:         for (String resourceRoot : new String[] { ResourceStore.SNAPSHOT_RESOURCE_ROOT,",
          "92:                 ResourceStore.CUBE_STATISTICS_ROOT, ResourceStore.EXT_SNAPSHOT_RESOURCE_ROOT }) {",
          "93:             for (String dir : noNull(store.listResources(resourceRoot))) {",
          "94:                 for (String res : noNull(store.listResources(dir))) {",
          "95:                     long timestamp = getTimestamp(res);",
          "96:                     if (timestamp < newResourceTimeCut)",
          "97:                         toDeleteCandidates.put(res, timestamp);",
          "98:                 }",
          "99:             }",
          "100:         }",
          "103:         try {",
          "104:             FileStatus[] fStatus = new FileStatus[0];",
          "105:             fStatus = ArrayUtils.addAll(fStatus, fs.listStatus(new Path(",
          "106:                     KylinConfig.getInstanceFromEnv().getHdfsWorkingDirectory() + \"resources/GlobalDict/dict\")));",
          "107:             fStatus = ArrayUtils.addAll(fStatus, fs.listStatus(new Path(",
          "108:                     KylinConfig.getInstanceFromEnv().getHdfsWorkingDirectory() + \"resources/SegmentDict/dict\")));",
          "109:             for (FileStatus status : fStatus) {",
          "110:                 String path = status.getPath().toString();",
          "111:                 FileStatus[] globalDicts = fs.listStatus(new Path(path));",
          "112:                 for (FileStatus globalDict : globalDicts) {",
          "113:                     String globalDictPath = globalDict.getPath().toString();",
          "114:                     long timestamp = getTimestamp(globalDict);",
          "115:                     if (timestamp < newResourceTimeCut)",
          "116:                         toDeleteCandidates.put(globalDictPath, timestamp);",
          "117:                 }",
          "118:             }",
          "119:         } catch (FileNotFoundException e) {",
          "120:             logger.info(\"Working Directory does not exist on HDFS. \");",
          "121:         }",
          "124:         for (String resourceRoot : new String[] { ResourceStore.DICT_RESOURCE_ROOT }) {",
          "125:             for (String dir : noNull(store.listResources(resourceRoot))) {",
          "126:                 for (String dir2 : noNull(store.listResources(dir))) {",
          "127:                     for (String res : noNull(store.listResources(dir2))) {",
          "128:                         long timestamp = getTimestamp(res);",
          "129:                         if (timestamp < newResourceTimeCut)",
          "130:                             toDeleteCandidates.put(res, timestamp);",
          "131:                     }",
          "132:                 }",
          "133:             }",
          "134:         }",
          "137:         Set<String> activeResources = Sets.newHashSet();",
          "138:         for (CubeInstance cube : cubeManager.reloadAndListAllCubes()) {",
          "139:             activeResources.addAll(cube.getSnapshots().values());",
          "140:             for (CubeSegment segment : cube.getSegments()) {",
          "141:                 activeResources.addAll(segment.getSnapshotPaths());",
          "142:                 activeResources.addAll(segment.getDictionaryPaths());",
          "143:                 activeResources.add(segment.getStatisticsResourcePath());",
          "144:                 for (String dictPath : segment.getDictionaryPaths()) {",
          "145:                     DictionaryInfo dictInfo = store.getResource(dictPath, DictionaryInfoSerializer.FULL_SERIALIZER);",
          "146:                     if (\"org.apache.kylin.dict.AppendTrieDictionary\"",
          "147:                             .equals(dictInfo != null ? dictInfo.getDictionaryClass() : null)) {",
          "148:                         String dictObj = dictInfo.getDictionaryObject().toString();",
          "149:                         String basedir = dictObj.substring(dictObj.indexOf(\"(\") + 1, dictObj.indexOf(\")\") - 1);",
          "150:                         if (basedir.startsWith(",
          "151:                                 KylinConfig.getInstanceFromEnv().getHdfsWorkingDirectory() + \"/resources/GlobalDict\")) {",
          "152:                             activeResources.add(KylinConfig.getInstanceFromEnv().getHdfsWorkingDirectory()",
          "153:                                     + \"resources/GlobalDict\" + dictInfo.getResourceDir());",
          "154:                         } else if (basedir.startsWith(KylinConfig.getInstanceFromEnv().getHdfsWorkingDirectory()",
          "155:                                 + \"/resources/SegmentDict\")) {",
          "156:                             activeResources.add(KylinConfig.getInstanceFromEnv().getHdfsWorkingDirectory()",
          "157:                                     + \"resources/SegmentDict\" + dictInfo.getResourceDir());",
          "158:                         }",
          "159:                     }",
          "160:                 }",
          "161:             }",
          "162:         }",
          "163:         toDeleteCandidates.keySet().removeAll(activeResources);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "251:         return toDeleteResources;",
          "252:     }",
          "258:     private long getTimestamp(String resPath) {",
          "259:         long timestamp = Long.MAX_VALUE;",
          "260:         try {",
          "",
          "[Removed Lines]",
          "254:     private NavigableSet<String> noNull(NavigableSet<String> list) {",
          "255:         return (list == null) ? new TreeSet<>() : list;",
          "256:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "264:         }",
          "265:         return timestamp;",
          "266:     }",
          "271: }",
          "",
          "[Removed Lines]",
          "268:     private long getTimestamp(FileStatus filestatus) {",
          "269:         return filestatus.getModificationTime();",
          "270:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/job/StorageCleanupJob.java||server-base/src/main/java/org/apache/kylin/rest/job/StorageCleanupJob.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/job/StorageCleanupJob.java -> server-base/src/main/java/org/apache/kylin/rest/job/StorageCleanupJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import org.apache.kylin.common.util.OptionsHelper;",
          "32: import org.apache.kylin.cube.CubeInstance;",
          "33: import org.apache.kylin.cube.CubeManager;",
          "34: import org.apache.kylin.job.execution.ExecutableManager;",
          "35: import org.apache.kylin.metadata.project.ProjectInstance;",
          "36: import org.apache.kylin.metadata.project.ProjectManager;",
          "37: import org.slf4j.Logger;",
          "38: import org.slf4j.LoggerFactory;",
          "40: import java.io.IOException;",
          "41: import java.util.Arrays;",
          "42: import java.util.List;",
          "43: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.apache.kylin.cube.CubeSegment;",
          "35: import org.apache.kylin.cube.model.DictionaryDesc;",
          "42: import java.io.File;",
          "44: import java.util.ArrayList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     @SuppressWarnings(\"static-access\")",
          "50:     protected static final Option OPTION_DELETE = OptionBuilder.withArgName(\"delete\").hasArg().isRequired(false)",
          "51:             .withDescription(\"Delete the unused storage\").create(\"delete\");",
          "53:     final protected KylinConfig config;",
          "54:     final protected FileSystem fs;",
          "55:     final protected ExecutableManager executableManager;",
          "57:     protected boolean delete = false;",
          "59:     protected static final List<String> protectedDir = Arrays.asList(\"cube_statistics\", \"resources-jdbc\");",
          "60:     protected static PathFilter pathFilter = status -> !protectedDir.contains(status.getName());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:     @SuppressWarnings(\"static-access\")",
          "57:     protected static final Option OPTION_CLEANUP_TABLE_SNAPSHOT = OptionBuilder.withArgName(\"cleanupTableSnapshot\")",
          "58:             .hasArg().isRequired(false).withDescription(\"Delete the unused storage\").create(\"cleanupTableSnapshot\");",
          "59:     @SuppressWarnings(\"static-access\")",
          "60:     protected static final Option OPTION_CLEANUP_GLOBAL_DICT = OptionBuilder.withArgName(\"cleanupGlobalDict\").hasArg()",
          "61:             .isRequired(false).withDescription(\"Delete the unused storage\").create(\"cleanupGlobalDict\");",
          "62:     @SuppressWarnings(\"static-access\")",
          "63:     protected static final Option OPTION_CLEANUP_THRESHOLD_HOUR = OptionBuilder.withArgName(\"cleanupThreshold\").hasArg()",
          "64:             .isRequired(false).withDescription(\"Delete unused storage that have not been modified in how many hours\")",
          "65:             .create(\"cleanupThreshold\");",
          "67:     private static final String GLOBAL_DICT_PREFIX = \"/dict/global_dict/\";",
          "68:     private static final String TABLE_SNAPSHOT_PREFIX = \"/table_snapshot/\";",
          "70:     private static final String TABLE_SNAPSHOT = \"table snapshot\";",
          "71:     private static final String GLOBAL_DICTIONARY = \"global dictionary\";",
          "72:     private static final String SEGMENT_PARQUET_FILE = \"segment parquet file\";",
          "79:     protected boolean cleanupTableSnapshot = true;",
          "80:     protected boolean cleanupGlobalDict = true;",
          "81:     protected int cleanupThreshold = 12; // 12 hour",
          "83:     protected long storageTimeCut;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:     protected Options getOptions() {",
          "74:         Options options = new Options();",
          "75:         options.addOption(OPTION_DELETE);",
          "76:         return options;",
          "77:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:         options.addOption(OPTION_CLEANUP_GLOBAL_DICT);",
          "103:         options.addOption(OPTION_CLEANUP_TABLE_SNAPSHOT);",
          "104:         options.addOption(OPTION_CLEANUP_THRESHOLD_HOUR);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:     protected void execute(OptionsHelper optionsHelper) throws Exception {",
          "81:         logger.info(\"options: '\" + optionsHelper.getOptionsAsString() + \"'\");",
          "82:         logger.info(\"delete option value: '\" + optionsHelper.getOptionValue(OPTION_DELETE) + \"'\");",
          "83:         delete = Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_DELETE));",
          "84:         cleanup();",
          "85:     }",
          "87:     public void cleanup() throws Exception {",
          "88:         ProjectManager projectManager = ProjectManager.getInstance(config);",
          "89:         CubeManager cubeManager = CubeManager.getInstance(config);",
          "90:         List<String> projects = projectManager.listAllProjects().stream().map(ProjectInstance::getName)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:         logger.info(\"cleanup table snapshot option value: '\"",
          "113:                 + optionsHelper.getOptionValue(OPTION_CLEANUP_TABLE_SNAPSHOT) + \"'\");",
          "114:         logger.info(",
          "115:                 \"delete global dict option value: '\" + optionsHelper.getOptionValue(OPTION_CLEANUP_GLOBAL_DICT) + \"'\");",
          "116:         logger.info(\"delete unused storage that have not been modified in how many hours option value: '\"",
          "117:                 + optionsHelper.getOptionValue(OPTION_CLEANUP_THRESHOLD_HOUR) + \"'\");",
          "119:         if (optionsHelper.hasOption(OPTION_CLEANUP_TABLE_SNAPSHOT)) {",
          "120:             cleanupTableSnapshot = Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_CLEANUP_TABLE_SNAPSHOT));",
          "121:         }",
          "122:         if (optionsHelper.hasOption(OPTION_CLEANUP_GLOBAL_DICT)) {",
          "123:             cleanupGlobalDict = Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_CLEANUP_GLOBAL_DICT));",
          "124:         }",
          "125:         if (optionsHelper.hasOption(OPTION_CLEANUP_THRESHOLD_HOUR)) {",
          "126:             cleanupThreshold = Integer.parseInt(optionsHelper.getOptionValue(OPTION_CLEANUP_THRESHOLD_HOUR));",
          "127:         }",
          "129:         storageTimeCut = System.currentTimeMillis() - cleanupThreshold * 3600 * 1000L;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "97:             FileStatus[] projectStatus = fs.listStatus(metadataPath, pathFilter);",
          "98:             if (projectStatus != null) {",
          "99:                 for (FileStatus status : projectStatus) {",
          "105:                         } else {",
          "107:                         }",
          "111:                     }",
          "112:                 }",
          "113:             }",
          "",
          "[Removed Lines]",
          "100:                     String projectName = status.getPath().getName();",
          "101:                     if (!projects.contains(projectName)) {",
          "102:                         if (delete) {",
          "103:                             logger.info(\"Deleting HDFS path \" + status.getPath());",
          "104:                             fs.delete(status.getPath(), true);",
          "106:                             logger.info(\"Dry run, pending delete HDFS path \" + status.getPath());",
          "108:                     } else {",
          "109:                         cleanupDeletedCubes(projectName,",
          "110:                                 cubes.stream().map(CubeInstance::getName).collect(Collectors.toList()));",
          "",
          "[Added Lines]",
          "148:                     if (eligibleStorage(status)) {",
          "149:                         String projectName = status.getPath().getName();",
          "150:                         if (!projects.contains(projectName)) {",
          "151:                             cleanupStorage(status.getPath(), SEGMENT_PARQUET_FILE);",
          "153:                             cleanupGlobalDict(projectName,",
          "154:                                     cubes.stream().filter(cube -> projectName.equals(cube.getProject()))",
          "155:                                             .collect(Collectors.toList()));",
          "156:                             cleanupTableSnapshot(projectName,",
          "157:                                     cubes.stream().filter(cube -> projectName.equals(cube.getProject()))",
          "158:                                             .collect(Collectors.toList()));",
          "159:                             cleanupDeletedCubes(projectName,",
          "160:                                     cubes.stream().map(CubeInstance::getName).collect(Collectors.toList()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "126:                 FileStatus[] segmentStatus = fs.listStatus(cubePath);",
          "127:                 if (segmentStatus != null) {",
          "128:                     for (FileStatus status : segmentStatus) {",
          "136:                             }",
          "137:                         }",
          "138:                     }",
          "",
          "[Removed Lines]",
          "129:                         String segment = status.getPath().getName();",
          "130:                         if (!segments.contains(segment)) {",
          "131:                             if (delete) {",
          "132:                                 logger.info(\"Deleting HDFS path \" + status.getPath());",
          "133:                                 fs.delete(status.getPath(), true);",
          "134:                             } else {",
          "135:                                 logger.info(\"Dry run, pending delete HDFS path \" + status.getPath());",
          "",
          "[Added Lines]",
          "180:                         if (eligibleStorage(status)) {",
          "181:                             String segment = status.getPath().getName();",
          "182:                             if (!segments.contains(segment)) {",
          "183:                                 cleanupStorage(status.getPath(), SEGMENT_PARQUET_FILE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "150:             FileStatus[] cubeStatus = fs.listStatus(parquetPath);",
          "151:             if (cubeStatus != null) {",
          "152:                 for (FileStatus status : cubeStatus) {",
          "154:                         String cubeName = status.getPath().getName();",
          "155:                         if (!cubes.contains(cubeName)) {",
          "162:                         }",
          "163:                     }",
          "164:                 }",
          "165:             }",
          "166:         }",
          "167:     }",
          "168: }",
          "",
          "[Removed Lines]",
          "153:                     if (status.getPath() != null) {",
          "156:                             if (delete) {",
          "157:                                 logger.info(\"Deleting HDFS path \" + status.getPath());",
          "158:                                 fs.delete(status.getPath(), true);",
          "159:                             } else {",
          "160:                                 logger.info(\"Dry run, pending delete HDFS path \" + status.getPath());",
          "161:                             }",
          "",
          "[Added Lines]",
          "201:                     if (eligibleStorage(status)) {",
          "204:                             cleanupStorage(status.getPath(), SEGMENT_PARQUET_FILE);",
          "213:     private void cleanupTableSnapshot(String project, List<CubeInstance> cubes) throws IOException {",
          "214:         if (!cleanupTableSnapshot) {",
          "215:             return;",
          "216:         }",
          "217:         Path tableSnapshotPath = new Path(config.getHdfsWorkingDirectory(project) + TABLE_SNAPSHOT_PREFIX);",
          "218:         List<Path> toDeleteSnapshot = new ArrayList<>();",
          "220:         if (fs.exists(tableSnapshotPath)) {",
          "221:             for (FileStatus status : fs.listStatus(tableSnapshotPath)) {",
          "222:                 for (FileStatus tableSnapshot : fs.listStatus(status.getPath())) {",
          "223:                     if (eligibleStorage(tableSnapshot)) {",
          "224:                         toDeleteSnapshot.add(tableSnapshot.getPath());",
          "225:                     }",
          "226:                 }",
          "227:             }",
          "228:         }",
          "230:         for (CubeInstance cube : cubes) {",
          "231:             for (CubeSegment segment : cube.getSegments()) {",
          "232:                 for (String snapshotPath : segment.getSnapshotPaths()) {",
          "233:                     Path path = new Path(config.getHdfsWorkingDirectory() + File.separator + snapshotPath);",
          "234:                     toDeleteSnapshot.remove(path);",
          "235:                 }",
          "236:             }",
          "237:         }",
          "239:         for (Path path : toDeleteSnapshot) {",
          "240:             cleanupStorage(path, TABLE_SNAPSHOT);",
          "241:         }",
          "242:     }",
          "245:     private void cleanupGlobalDict(String project, List<CubeInstance> cubes) throws IOException {",
          "246:         if (!cleanupGlobalDict) {",
          "247:             return;",
          "248:         }",
          "250:         Path dictPath = new Path(config.getHdfsWorkingDirectory(project) + GLOBAL_DICT_PREFIX);",
          "251:         List<Path> toDeleteDict = new ArrayList<>();",
          "253:         if (fs.exists(dictPath)) {",
          "254:             for (FileStatus tables : fs.listStatus(dictPath)) {",
          "255:                 for (FileStatus columns : fs.listStatus(tables.getPath()))",
          "256:                     if (eligibleStorage(columns)) {",
          "257:                         toDeleteDict.add(columns.getPath());",
          "258:                     }",
          "259:             }",
          "260:         }",
          "262:         for (CubeInstance cube : cubes) {",
          "263:             if (cube.getDescriptor().getDictionaries() != null) {",
          "264:                 for (DictionaryDesc dictionaryDesc : cube.getDescriptor().getDictionaries()) {",
          "265:                     String[] columnInfo = dictionaryDesc.getColumnRef().getColumnWithTable().split(\"\\\\.\");",
          "266:                     Path globalDictPath;",
          "267:                     if (columnInfo.length == 3) {",
          "268:                         globalDictPath = new Path(",
          "269:                                 dictPath + File.separator + columnInfo[1] + File.separator + columnInfo[2]);",
          "270:                     } else {",
          "271:                         globalDictPath = new Path(",
          "272:                                 dictPath + File.separator + columnInfo[0] + File.separator + columnInfo[1]);",
          "273:                     }",
          "274:                     if (globalDictPath != null) {",
          "275:                         toDeleteDict.remove(globalDictPath);",
          "276:                     }",
          "277:                 }",
          "278:             }",
          "279:         }",
          "281:         for (Path path : toDeleteDict) {",
          "282:             cleanupStorage(path, GLOBAL_DICTIONARY);",
          "283:         }",
          "284:     }",
          "286:     private void cleanupStorage(Path path, String storageType) throws IOException {",
          "287:         if (delete) {",
          "288:             logger.info(\"Deleting unused {}, {}\", storageType, path);",
          "289:             fs.delete(path, true);",
          "290:         } else {",
          "291:             logger.info(\"Dry run, pending delete unused {}, {}\", storageType, path);",
          "292:         }",
          "293:     }",
          "295:     private boolean eligibleStorage(FileStatus status) {",
          "296:         return status != null && status.getModificationTime() < storageTimeCut;",
          "297:     }",
          "",
          "---------------"
        ],
        "server-base/src/test/java/org/apache/kylin/rest/job/MetadataCleanupJobTest.java||server-base/src/test/java/org/apache/kylin/rest/job/MetadataCleanupJobTest.java": [
          "File: server-base/src/test/java/org/apache/kylin/rest/job/MetadataCleanupJobTest.java -> server-base/src/test/java/org/apache/kylin/rest/job/MetadataCleanupJobTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:         staticCreateTestMetadata(false, new ResetTimeHook(2000, \"src/test/resources/test_meta\"));",
          "47:         MetadataCleanupJob metadataCleanupJob = new MetadataCleanupJob();",
          "48:         Map<String, Long> cleanupMap = metadataCleanupJob.cleanup(false, 30);",
          "50:         for (long timestamp : cleanupMap.values()) {",
          "51:             Assert.assertEquals(2000, timestamp);",
          "52:         }",
          "",
          "[Removed Lines]",
          "49:         Assert.assertEquals(7, cleanupMap.size());",
          "",
          "[Added Lines]",
          "49:         Assert.assertEquals(4, cleanupMap.size());",
          "",
          "---------------"
        ],
        "server-base/src/test/java/org/apache/kylin/rest/job/StorageCleanupJobTest.java||server-base/src/test/java/org/apache/kylin/rest/job/StorageCleanupJobTest.java": [
          "File: server-base/src/test/java/org/apache/kylin/rest/job/StorageCleanupJobTest.java -> server-base/src/test/java/org/apache/kylin/rest/job/StorageCleanupJobTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         job.execute(new String[] { \"--delete\", \"true\" });",
          "69:         ArgumentCaptor<Path> pathCaptor = ArgumentCaptor.forClass(Path.class);",
          "71:         ArrayList<Path> expected = Lists.newArrayList(",
          "76:                 new Path(basePath + \"/default/parquet/dropped_cube\"),",
          "79:                 new Path(basePath + \"/deleted_project\"),",
          "",
          "[Removed Lines]",
          "70:         verify(mockFs, times(4)).delete(pathCaptor.capture(), eq(true));",
          "",
          "[Added Lines]",
          "70:         verify(mockFs, times(6)).delete(pathCaptor.capture(), eq(true));",
          "75:                 new Path(basePath + \"/default/dict/global_dict/TEST_KYLIN_FACT/BUYER_ID\"),",
          "78:                 new Path(basePath + \"/default/table_snapshot/DEFAULT.TEST_COUNTRY/1f2fd967-af50-41c1-a990-8554206b5513\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         FileStatus project1 = mock(FileStatus.class);",
          "101:         FileStatus project2 = mock(FileStatus.class);",
          "103:         FileStatus[] protectedStatuses = new FileStatus[2];",
          "104:         FileStatus cubeStatistics = mock(FileStatus.class);",
          "105:         FileStatus resourcesJdbc = mock(FileStatus.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:         FileStatus[] dictTableStatuses = new FileStatus[1];",
          "109:         FileStatus dictTable1 = mock(FileStatus.class);",
          "111:         FileStatus[] dictCloumnStatuses = new FileStatus[3];",
          "112:         FileStatus dictCloumnStatuses1 = mock(FileStatus.class);",
          "113:         FileStatus dictCloumnStatuses2 = mock(FileStatus.class);",
          "114:         FileStatus dictCloumnStatuses3 = mock(FileStatus.class);",
          "116:         FileStatus[] snapshotTableStatuses = new FileStatus[1];",
          "117:         FileStatus snapshotTableStatuses1 = mock(FileStatus.class);",
          "119:         FileStatus[] snapshotStatuses = new FileStatus[3];",
          "120:         FileStatus snapshotStatuses1 = mock(FileStatus.class);",
          "121:         FileStatus snapshotStatuses2 = mock(FileStatus.class);",
          "122:         FileStatus snapshotStatuses3 = mock(FileStatus.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:         projectStatuses[0] = project1;",
          "137:         projectStatuses[1] = project2;",
          "139:         Path cubeStatisticsPath = new Path(basePath + \"/default/parquet\");",
          "140:         Path resourcesJdbcPath = new Path(basePath + \"/deleted_project/parquet\");",
          "141:         when(cubeStatistics.getPath()).thenReturn(cubeStatisticsPath);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:         Path dictTablePath = new Path(basePath + \"/default/dict/global_dict/TEST_KYLIN_FACT\");",
          "161:         when(dictTable1.getPath()).thenReturn(dictTablePath);",
          "162:         dictTableStatuses[0] = dictTable1;",
          "163:         when(mockFs.delete(dictTablePath, true)).thenReturn(true);",
          "165:         Path dictCloumnPath1 = new Path(basePath + \"/default/dict/global_dict/TEST_KYLIN_FACT/TEST_COUNT_DISTINCT_BITMAP\");",
          "166:         Path dictCloumnPath2 = new Path(basePath + \"/default/dict/global_dict/TEST_KYLIN_FACT/BUYER_ID\");",
          "167:         Path dictCloumnPath3 = new Path(basePath + \"/default/dict/global_dict/TEST_KYLIN_FACT/SELLER_ID\");",
          "168:         when(dictCloumnStatuses1.getPath()).thenReturn(dictCloumnPath1);",
          "169:         when(dictCloumnStatuses2.getPath()).thenReturn(dictCloumnPath2);",
          "170:         when(dictCloumnStatuses3.getPath()).thenReturn(dictCloumnPath3);",
          "172:         when(dictCloumnStatuses1.getModificationTime()).thenReturn(System.currentTimeMillis() - 13 * 3600 * 1000L);",
          "174:         when(dictCloumnStatuses2.getModificationTime()).thenReturn(System.currentTimeMillis() - 13 * 3600 * 1000L);",
          "176:         when(dictCloumnStatuses3.getModificationTime()).thenReturn(System.currentTimeMillis() - 11 * 3600 * 1000L);",
          "177:         when(mockFs.delete(dictCloumnPath1, true)).thenReturn(true);",
          "178:         when(mockFs.delete(dictCloumnPath2, true)).thenReturn(true);",
          "179:         when(mockFs.delete(dictCloumnPath3, true)).thenReturn(true);",
          "180:         dictCloumnStatuses[0] = dictCloumnStatuses1;",
          "181:         dictCloumnStatuses[1] = dictCloumnStatuses2;",
          "182:         dictCloumnStatuses[2] = dictCloumnStatuses3;",
          "184:         Path snapshotTablePath = new Path(basePath + \"/default/table_snapshot/DEFAULT.TEST_COUNTRY\");",
          "185:         when(snapshotTableStatuses1.getPath()).thenReturn(snapshotTablePath);",
          "186:         snapshotTableStatuses[0] = snapshotTableStatuses1;",
          "187:         when(mockFs.delete(snapshotTablePath, true)).thenReturn(true);",
          "189:         Path snapshotPath1 = new Path(basePath + \"/default/table_snapshot/DEFAULT.TEST_COUNTRY/1cb74ab4-0637-407c-8fa9-dbf68eaf9e57\");",
          "190:         Path snapshotPath2 = new Path(basePath + \"/default/table_snapshot/DEFAULT.TEST_COUNTRY/1f2fd967-af50-41c1-a990-8554206b5513\");",
          "191:         Path snapshotPath3 = new Path(basePath + \"/default/table_snapshot/DEFAULT.TEST_COUNTRY/e137d29b-9231-4305-8c9d-71fcf54bc836\");",
          "192:         when(snapshotStatuses1.getPath()).thenReturn(snapshotPath1);",
          "193:         when(snapshotStatuses2.getPath()).thenReturn(snapshotPath2);",
          "194:         when(snapshotStatuses3.getPath()).thenReturn(snapshotPath3);",
          "196:         when(snapshotStatuses1.getModificationTime()).thenReturn(System.currentTimeMillis() - 11 * 3600 * 1000L);",
          "198:         when(snapshotStatuses2.getModificationTime()).thenReturn(System.currentTimeMillis() - 13 * 3600 * 1000L);",
          "200:         when(snapshotStatuses3.getModificationTime()).thenReturn(System.currentTimeMillis() - 13 * 3600 * 1000L);",
          "201:         snapshotStatuses[0] = snapshotStatuses1;",
          "202:         snapshotStatuses[1] = snapshotStatuses2;",
          "203:         snapshotStatuses[2] = snapshotStatuses3;",
          "204:         when(mockFs.delete(snapshotPath1, true)).thenReturn(true);",
          "205:         when(mockFs.delete(snapshotPath2, true)).thenReturn(true);",
          "206:         when(mockFs.delete(snapshotPath3, true)).thenReturn(true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160:         when(mockFs.listStatus(defaultProjectParquetPath)).thenReturn(cubeStatuses);",
          "161:         when(mockFs.listStatus(basePath)).thenReturn(allStatuses);",
          "162:         when(mockFs.listStatus(basePath, StorageCleanupJob.pathFilter)).thenReturn(projectStatuses);",
          "163:     }",
          "164: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:         Path dictPath = new Path(basePath + \"/default/dict/global_dict\");",
          "233:         when(mockFs.exists(dictPath)).thenReturn(true);",
          "234:         when(mockFs.listStatus(dictPath)).thenReturn(dictTableStatuses);",
          "235:         when(mockFs.listStatus(new Path(dictPath + \"/TEST_KYLIN_FACT\"))).thenReturn(dictCloumnStatuses);",
          "236:         Path snapshotPath = new Path(basePath + \"/default/table_snapshot\");",
          "237:         when(mockFs.exists(snapshotPath)).thenReturn(true);",
          "238:         when(mockFs.listStatus(snapshotPath)).thenReturn(snapshotTableStatuses);",
          "239:         when(mockFs.listStatus(new Path(snapshotPath + \"/DEFAULT.TEST_COUNTRY\"))).thenReturn(snapshotStatuses);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f07fd133027bd7f02b710baa766fb5f6116a88e",
      "candidate_info": {
        "commit_hash": "2f07fd133027bd7f02b710baa766fb5f6116a88e",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/2f07fd133027bd7f02b710baa766fb5f6116a88e",
        "files": [
          "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
          "server-base/src/main/java/org/apache/kylin/rest/msg/Message.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java"
        ],
        "message": "[KYLIN-4938] remove segment by UUID\n\n(cherry picked from commit 715aa6ecf1b523df2890f864b6148d4a6df48b08)",
        "before_after_code_files": [
          "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java||server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
          "server-base/src/main/java/org/apache/kylin/rest/msg/Message.java||server-base/src/main/java/org/apache/kylin/rest/msg/Message.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java||server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java||server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:         }",
          "349:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:     @RequestMapping(value = \"/{cubeName}/segs2/{segmentID}\", method = { RequestMethod.DELETE }, produces = {",
          "357:             \"application/json\" })",
          "358:     @ResponseBody",
          "359:     public CubeInstance deleteSegmentByUUID(@PathVariable String cubeName, @PathVariable String segmentID) {",
          "360:         checkCubeExists(cubeName);",
          "361:         CubeInstance cube = cubeService.getCubeManager().getCube(cubeName);",
          "363:         CubeSegment segment = cube.getSegmentById(segmentID);",
          "364:         if (segment == null) {",
          "365:             throw new NotFoundException(\"Cannot find segment by UUID '\" + segmentID + \"'\");",
          "366:         }",
          "368:         try {",
          "369:             return cubeService.deleteSegmentById(cube, segmentID);",
          "370:         } catch (Exception e) {",
          "371:             logger.error(e.getLocalizedMessage(), e);",
          "372:             throw new InternalErrorException(e.getLocalizedMessage(), e);",
          "373:         }",
          "374:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/msg/Message.java||server-base/src/main/java/org/apache/kylin/rest/msg/Message.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/msg/Message.java -> server-base/src/main/java/org/apache/kylin/rest/msg/Message.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         return \"Cannot delete segment '%s' as its status is not READY. Discard the on-going job for it.\";",
          "66:     }",
          "68:     public String getDELETE_SEG_FROM_READY_CUBE() {",
          "69:         return \"Cannot delete segment '%s' from ready cube '%s'. Please disable the cube first.\";",
          "70:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     public String getDELETE_READY_SEG_BY_UUID() {",
          "69:         return \"Cannot delete segment by UUID '%s' as its status is READY or its Cube is READY.\";",
          "70:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java||server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java -> server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:         return cube;",
          "608:     }",
          "610:     public CubeInstance deleteSegment(CubeInstance cube, String segmentName) throws IOException {",
          "611:         aclEvaluate.checkProjectOperationPermission(cube);",
          "612:         Message msg = MsgPicker.getMsg();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:     public CubeInstance deleteSegmentById(CubeInstance cube, String uuid) throws IOException {",
          "611:         aclEvaluate.checkProjectWritePermission(cube);",
          "612:         Message msg = MsgPicker.getMsg();",
          "614:         CubeSegment toDelete = null;",
          "616:         toDelete = cube.getSegmentById(uuid);",
          "618:         if (toDelete == null) {",
          "619:             throw new BadRequestException(String.format(Locale.ROOT, msg.getSEG_NOT_FOUND(), uuid));",
          "620:         }",
          "622:         if (cube.getStatus() == RealizationStatusEnum.DISABLED || isOrphonSegment(cube, uuid)) {",
          "624:             CubeInstance cubeInstance = CubeManager.getInstance(getConfig()).updateCubeDropSegments(cube, toDelete);",
          "626:             cleanSegmentStorage(Collections.singletonList(toDelete));",
          "628:             return cubeInstance;",
          "629:         } else {",
          "630:             throw new BadRequestException(",
          "631:                     String.format(Locale.ROOT, msg.getDELETE_READY_SEG_BY_UUID(), uuid, cube.getName()));",
          "632:         }",
          "633:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "586fb9c74e87c5bfafa9b397bb11dc506ef4aba9",
      "candidate_info": {
        "commit_hash": "586fb9c74e87c5bfafa9b397bb11dc506ef4aba9",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/586fb9c74e87c5bfafa9b397bb11dc506ef4aba9",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
        ],
        "message": "update kylin.metric.subject-suffix to kylin.metrics.subject-suffix\n\n(cherry picked from commit 47f8e54558d885f384f5d98c419cc1fa532bca7b)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2361:     }",
          "2363:     public String getKylinMetricsSubjectSuffix() {",
          "2365:     }",
          "2367:     public String getKylinMetricsSubjectJob() {",
          "",
          "[Removed Lines]",
          "2364:         return getOptional(\"kylin.metric.subject-suffix\", getDeployEnv());",
          "",
          "[Added Lines]",
          "2364:         return getOptional(\"kylin.metrics.subject-suffix\", getDeployEnv());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b07d714f61ff641fe64d33622d341bf0eb2a356",
      "candidate_info": {
        "commit_hash": "7b07d714f61ff641fe64d33622d341bf0eb2a356",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/7b07d714f61ff641fe64d33622d341bf0eb2a356",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/util/MailService.java"
        ],
        "message": "KYLIN-4515 fix error with sending mail on ssl (#1214)\n\nHere is context of this problem\uff1ahttps://www.mail-archive.com/user@kylin.apache.org/msg04009.html\n\nWhen we set `starttlsEnabled` to true, specify a ssl port as 465,  emails could not be sent by this ssl port, It still use 25 default port.\n\nThe root cause is, with such config above, HTMLEmail client doesn't enable ssl connection, so we need to enable ssl connection by `setSSLOnConnect` as well when using ssl port.\n\n(cherry picked from commit d8060b658e7835fa3281ab1094bb5b14e622e133)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/util/MailService.java||core-common/src/main/java/org/apache/kylin/common/util/MailService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/util/MailService.java||core-common/src/main/java/org/apache/kylin/common/util/MailService.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/util/MailService.java -> core-common/src/main/java/org/apache/kylin/common/util/MailService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:         Email email = new HtmlEmail();",
          "90:         email.setHostName(host);",
          "91:         email.setStartTLSEnabled(starttlsEnabled);",
          "92:         if (starttlsEnabled) {",
          "93:             email.setSslSmtpPort(port);",
          "94:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:         email.setSSLOnConnect(starttlsEnabled);",
          "",
          "---------------"
        ]
      }
    }
  ]
}