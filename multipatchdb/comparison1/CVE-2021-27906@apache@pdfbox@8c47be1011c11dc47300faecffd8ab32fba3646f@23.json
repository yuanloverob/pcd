{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d75dcd5418785b49fa85d0be56e495397f1ff07b",
      "candidate_info": {
        "commit_hash": "d75dcd5418785b49fa85d0be56e495397f1ff07b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d75dcd5418785b49fa85d0be56e495397f1ff07b",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPageable.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890504 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPageable.java||pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPageable.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPageable.java||pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPageable.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPageable.java -> pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPageable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: public final class PDFPageable extends Book",
          "35: {",
          "36:     private final PDDocument document;",
          "37:     private final boolean showPageBorder;",
          "38:     private final float dpi;",
          "39:     private final Orientation orientation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     private final int numberOfPages;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         this.orientation = orientation;",
          "91:         this.showPageBorder = showPageBorder;",
          "92:         this.dpi = dpi;",
          "93:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:         numberOfPages = document.getNumberOfPages();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:     @Override",
          "146:     public int getNumberOfPages()",
          "147:     {",
          "149:     }",
          "",
          "[Removed Lines]",
          "148:         return document.getNumberOfPages();",
          "",
          "[Added Lines]",
          "150:         return numberOfPages;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:     @Override",
          "212:     public Printable getPrintable(int i)",
          "213:     {",
          "215:         {",
          "217:         }",
          "218:         PDFPrintable printable = new PDFPrintable(document, Scaling.ACTUAL_SIZE, showPageBorder, dpi);",
          "219:         printable.setSubsamplingAllowed(subsamplingAllowed);",
          "",
          "[Removed Lines]",
          "214:         if (i >= getNumberOfPages())",
          "216:             throw new IndexOutOfBoundsException(i + \" >= \" + getNumberOfPages());",
          "",
          "[Added Lines]",
          "216:         if (i >= numberOfPages)",
          "218:             throw new IndexOutOfBoundsException(i + \" >= \" + numberOfPages);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d573703b980e0421c13bedc017ccd78d7d90982c",
      "candidate_info": {
        "commit_hash": "d573703b980e0421c13bedc017ccd78d7d90982c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d573703b980e0421c13bedc017ccd78d7d90982c",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreateGradientShadingPDF.java",
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateGradientShadingPDF.java"
        ],
        "message": "PDFBOX-5186: add test for shading creation\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889495 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreateGradientShadingPDF.java||examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreateGradientShadingPDF.java",
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateGradientShadingPDF.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateGradientShadingPDF.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreateGradientShadingPDF.java||examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreateGradientShadingPDF.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreateGradientShadingPDF.java -> examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreateGradientShadingPDF.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package org.apache.pdfbox.examples.pdmodel;",
          "20: import java.io.IOException;",
          "21: import java.io.OutputStream;",
          "23: import javax.imageio.stream.MemoryCacheImageOutputStream;",
          "24: import org.apache.pdfbox.cos.COSArray;",
          "25: import org.apache.pdfbox.cos.COSDictionary;",
          "26: import org.apache.pdfbox.cos.COSInteger;",
          "",
          "[Removed Lines]",
          "18: import java.awt.image.BufferedImage;",
          "19: import java.io.File;",
          "22: import javax.imageio.ImageIO;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: import org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2;",
          "38: import org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType3;",
          "39: import org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4;",
          "",
          "[Removed Lines]",
          "40: import org.apache.pdfbox.rendering.PDFRenderer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:             document.save(file);",
          "196:             document.close();",
          "203:         }",
          "204:         finally",
          "205:         {",
          "",
          "[Removed Lines]",
          "199:             document = PDDocument.load(new File(file));",
          "200:             BufferedImage bim = new PDFRenderer(document).renderImageWithDPI(0, 100);",
          "201:             ImageIO.write(bim, \"png\", new File(file + \".png\"));",
          "202:             document.close();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateGradientShadingPDF.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateGradientShadingPDF.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateGradientShadingPDF.java -> examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateGradientShadingPDF.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.examples.pdmodel;",
          "19: import java.awt.Color;",
          "20: import java.awt.image.BufferedImage;",
          "21: import java.io.File;",
          "22: import java.io.IOException;",
          "23: import java.util.HashSet;",
          "24: import java.util.Set;",
          "25: import org.apache.pdfbox.pdmodel.PDDocument;",
          "26: import org.apache.pdfbox.rendering.PDFRenderer;",
          "27: import org.junit.Assert;",
          "28: import org.junit.Test;",
          "34: public class TestCreateGradientShadingPDF",
          "35: {",
          "36:     @Test",
          "37:     public void testCreateGradientShading() throws IOException",
          "38:     {",
          "39:         String filename = \"target/GradientShading.pdf\";",
          "41:         CreateGradientShadingPDF creator = new CreateGradientShadingPDF();",
          "42:         creator.create(filename);",
          "44:         PDDocument document = PDDocument.load(new File(filename));",
          "45:         Set<Color> set = new HashSet<Color>();",
          "46:         BufferedImage bim = new PDFRenderer(document).renderImage(0);",
          "47:         for (int x = 0; x < bim.getWidth(); ++x)",
          "48:         {",
          "49:             for (int y = 0; y < bim.getHeight(); ++y)",
          "50:             {",
          "51:                 set.add(new Color(bim.getRGB(x, y)));",
          "52:             }",
          "53:         }",
          "54:         Assert.assertTrue(set.size() > 10000); // 10258 different colors on windows 10",
          "55:         document.close();",
          "56:     }",
          "57: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "819174107b781d64663ad36595b9787c8c9caf0c",
      "candidate_info": {
        "commit_hash": "819174107b781d64663ad36595b9787c8c9caf0c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/819174107b781d64663ad36595b9787c8c9caf0c",
        "files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/font/util/FontMetaDataValidation.java"
        ],
        "message": "PDFBOX-4892: simplify code, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891658 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/font/util/FontMetaDataValidation.java||preflight/src/main/java/org/apache/pdfbox/preflight/font/util/FontMetaDataValidation.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "preflight/src/main/java/org/apache/pdfbox/preflight/font/util/FontMetaDataValidation.java||preflight/src/main/java/org/apache/pdfbox/preflight/font/util/FontMetaDataValidation.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/font/util/FontMetaDataValidation.java -> preflight/src/main/java/org/apache/pdfbox/preflight/font/util/FontMetaDataValidation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:             {",
          "83:                 if (!defaultTitle.equals(fontName) && (noSubSetName != null && !defaultTitle.equals(noSubSetName)))",
          "84:                 {",
          "89:                     return false;",
          "90:                 }",
          "",
          "[Removed Lines]",
          "85:                     StringBuilder sb = new StringBuilder(80);",
          "86:                     sb.append(\"FontName\")",
          "87:                             .append(\" present in the FontDescriptor dictionary doesn't match with XMP information dc:title of the Font File Stream.\");",
          "88:                     ve.add(new ValidationError(PreflightConstants.ERROR_METADATA_MISMATCH, sb.toString()));",
          "",
          "[Added Lines]",
          "85:                     ve.add(new ValidationError(PreflightConstants.ERROR_METADATA_MISMATCH,",
          "86:                             \"FontName present in the FontDescriptor dictionary doesn't match with \"",
          "87:                                     + \"XMP information dc:title of the Font File Stream.\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:                 }",
          "117:                 if (empty)",
          "118:                 {",
          "121:                 }",
          "122:                 else",
          "123:                 {",
          "126:                 }",
          "127:                 return false;",
          "128:             }",
          "",
          "[Removed Lines]",
          "115:                 StringBuilder sb = new StringBuilder(80);",
          "116:                 sb.append(\"FontName\");",
          "119:                     sb.append(\" present in the FontDescriptor dictionary can't be found in XMP information the Font File Stream.\");",
          "120:                     ve.add(new ValidationError(PreflightConstants.ERROR_METADATA_PROPERTY_MISSING, sb.toString()));",
          "124:                     sb.append(\" present in the FontDescriptor dictionary doesn't match with XMP information dc:title of the Font File Stream.\");",
          "125:                     ve.add(new ValidationError(PreflightConstants.ERROR_METADATA_MISMATCH, sb.toString()));",
          "",
          "[Added Lines]",
          "116:                     ve.add(new ValidationError(PreflightConstants.ERROR_METADATA_PROPERTY_MISSING,",
          "117:                             \"FontName present in the FontDescriptor dictionary can't be found in \"",
          "118:                             + \"XMP information the Font File Stream.\"));",
          "122:                     ve.add(new ValidationError(PreflightConstants.ERROR_METADATA_MISMATCH,",
          "123:                             \"FontName present in the FontDescriptor dictionary doesn't match with XMP \"",
          "124:                             + \"information dc:title of the Font File Stream.\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b29e59c80850ad5bb1780dd6006c7d190b711b20",
      "candidate_info": {
        "commit_hash": "b29e59c80850ad5bb1780dd6006c7d190b711b20",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/b29e59c80850ad5bb1780dd6006c7d190b711b20",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDCheckBox.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889691 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDCheckBox.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDCheckBox.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDCheckBox.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDCheckBox.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDCheckBox.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDCheckBox.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     {",
          "102:         PDAnnotationWidget widget = this.getWidgets().get(0);",
          "103:         PDAppearanceDictionary apDictionary = widget.getAppearance();",
          "106:         if (apDictionary != null)",
          "107:         {",
          "108:             PDAppearanceEntry normalAppearance = apDictionary.getNormalAppearance();",
          "",
          "[Removed Lines]",
          "105:         String onValue = \"\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:                 {",
          "114:                     if (COSName.Off.compareTo(entry) != 0)",
          "115:                     {",
          "117:                     }",
          "118:                 }",
          "119:             }",
          "120:         }",
          "122:     }",
          "123: }",
          "",
          "[Removed Lines]",
          "116:                         onValue = entry.getName();",
          "121:         return onValue;",
          "",
          "[Added Lines]",
          "115:                         return entry.getName();",
          "120:         return \"\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "389e78119a4704281f5bb34e180cd0d8921bb865",
      "candidate_info": {
        "commit_hash": "389e78119a4704281f5bb34e180cd0d8921bb865",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/389e78119a4704281f5bb34e180cd0d8921bb865",
        "files": [
          "xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java"
        ],
        "message": "PDFBOX-4892: avoid NPE, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891935 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java||xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java||xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java": [
          "File: xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java -> xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:         if (DomHelper.isParseTypeResource(property))",
          "374:         {",
          "375:             AbstractStructuredType ast = parseLiDescription(xmp, DomHelper.getQName(property), property);",
          "376:             ast.setPrefix(prefix);",
          "377:             container.addProperty(ast);",
          "378:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:             if (ast == null)",
          "377:             {",
          "378:                 throw new XmpParsingException(ErrorType.Format, \"property should contain child elements : \"",
          "379:                         + property);",
          "380:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:                         + property);",
          "386:             }",
          "387:             AbstractStructuredType ast = parseLiDescription(xmp, DomHelper.getQName(property), inner);",
          "388:             ast.setPrefix(prefix);",
          "389:             container.addProperty(ast);",
          "390:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393:             if (ast == null)",
          "394:             {",
          "395:                 throw new XmpParsingException(ErrorType.Format, \"inner element should contain child elements : \"",
          "396:                         + inner);",
          "397:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "409:             {",
          "410:                 nsFinder.push(inner);",
          "411:                 AbstractStructuredType ast = parseLiDescription(xmp, DomHelper.getQName(property), inner);",
          "412:                 ast.setPrefix(prefix);",
          "413:                 container.addProperty(ast);",
          "414:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "422:                 if (ast == null)",
          "423:                 {",
          "424:                     throw new XmpParsingException(ErrorType.Format, \"inner element should contain child elements : \"",
          "425:                             + inner);",
          "426:                 }",
          "",
          "---------------"
        ]
      }
    }
  ]
}