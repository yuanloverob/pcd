{
  "cve_id": "CVE-2022-31179",
  "cve_desc": "Shescape is a simple shell escape package for JavaScript. Versions prior to 1.5.8 were found to be subject to code injection on windows. This impacts users that use Shescape (any API function) to escape arguments for cmd.exe on Windows An attacker can omit all arguments following their input by including a line feed character (`'\\n'`) in the payload. This bug has been patched in [v1.5.8] which you can upgrade to now. No further changes are required. Alternatively, line feed characters (`'\\n'`) can be stripped out manually or the user input can be made the last argument (this only limits the impact).",
  "repo": "ericcornelissen/shescape",
  "patch_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
  "patch_info": {
    "commit_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
    "repo": "ericcornelissen/shescape",
    "commit_url": "https://github.com/ericcornelissen/shescape/commit/aceea7358f7222984e21260381ebc5ec4543b76f",
    "files": [
      "CHANGELOG.md",
      "src/unix.js",
      "src/win.js",
      "test/fixtures/unix.cjs",
      "test/fixtures/win.cjs",
      "test/fuzz/_common.cjs",
      "test/fuzz/corpus/036053b103374e82177446b4e083ccb6a22da06e0375582d622632775c8a938a",
      "test/fuzz/corpus/31ed7643aba69fe2d776af3aee587bb7899165af5ed3846c6f70327f2eec4713",
      "test/fuzz/corpus/7ef6c55f814adceff17a05c032ba6ec89483e37addcfd96bd13281f5de6716fa",
      "test/fuzz/corpus/dece2a606846120af17949c2d758b7df475449689d043a04a1ba63953326e5bb",
      "test/fuzz/corpus/f1d97ce94d0c9dd109dc27538786781da634bbed1df58877cac3c44e4344f3dd",
      "test/fuzz/corpus/f28febc41472c437122c2a44b66ccf7dcefdd19876fe4d9370ece44b5b2deb13",
      "test/fuzz/corpus/faf3c25ec7c017c2cc21a5af0f5584557d8a0c7340c68249076a86a2c4ce74fb",
      "test/fuzz/exec.test.cjs",
      "test/unit/_macros.js"
    ],
    "message": "Improve testing and escaping of newlines (#332)\n\n* Don't ignore newlines when fuzzing\n\nUpdate the fuzzing logic to not ignore newline characters anymore. For\nBash, Dash, PowerShell, and Zsh this is reflected by the removal of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nfrom the `exec.test.cjs` fuzz target. For CMD it is (additionally) the\nremoval of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nin the `_common.cjs` fuzz logic.\n\nThe inclusion of newlines in input arguments required some changes to\nthe `getExpectedOutput` function to account for the individual shell's\nhandling of these characters, typically removing them from the start and\nend of the input. (Note: not all changes to `getExpectedOutput` are due\nto this.)\n\n* Update the fuzz corpus\n\n- `31ed764`: contains a trailing forward slash ('\\\\') character that\n  was echod as a double quote ('\"') character by CMD due to carriage\n  return ('\\r') characters not being escaped.\n- `dece2a6`: contains a line feed ('\\n') character and a tilde where the\n  tilde should be escaped but wasn't for Bash.\n- `f28febc`: contains a carriage return ('\\r') character and a tilde\n  where the tilde should be escaped but wasn't for Bash.\n- `faf3c25`: contains a line feed ('\\n') character inside of curly\n  braces where the opening curly bracket should be escaped but wasn't\n  for bash.\n\nThe remaining new items in the fuzz corpus (`036053b`, `71ef6c5`, and\n`f1d97ce`) we're added based on fuzzing with whitespace for PowerShell.\n\n* Update macro for executing fixtures\n\nUpdate the macro for executing fixtures to properly display all the\nwhitespace characters as distinct characters. This is required because\notherwise test names will be considered duplicates.\n\nWhitespace characters with common shorthands are display using that\nshorthand (e.g. '\\n' for line feed). Other characters will be displayed\nby their unicode index (similar to the null character). This has been\nnormalized to the `\\u{hhhh}` notation for consistency where the curly\nbraces are included to improve readability of the test title (clearly\ndemarcating the end of the unicode index from any characters that might\nfollow it).\n\n* Escape newlines for PowerShell\n\nFor PowerShell only line feed ('\\n') and carriage return ('\\r')\ncharacters need to be escaped, and only when `interpolation` is `true`.\nThis is supported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that all character except\nfor line feed ('\\n'), carriage return ('\\r'), and '\\uFEFF' are converted\nto a normal space by PowerShell so it isn't necessary to escape them.\nFor '\\uFEFF', it was found that it is interpreted as is and doesn't\ncause any problems.\n\nThe test fixtures for PowerShell were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for CMD\n\nFor CMD only line feed ('\\n') and carriage return ('\\r') characters need\nto be escaped, but those need to be escaped always. This is supported by\nmanual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n')\ncharacters cause CMD to omit the remaining input;  carriage return\n('\\r') could change the interpretation of certain characters; tab ('\\t')\ncharacters are converted to normal spaces; and all other whitespace\ncharacters are interpreted as is.\n\nThe test fixtures for CMD were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for Bash, Dash, and Zsh\n\nFor the supported Unix shells only the line feed ('\\n') character needs\nto be escaped, and only when `interpolation` is `true`. This is\nsupported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n') and\ncharacters cause the whatever follows it to be interpreted as a new\ncommand; tab ('\\t') characters are converted to normal spaces; and all\nother whitespace characters are interpreted as is.\n\nThe test fixtures for Bash, Dash, and Zsh were updated to include\nexamples where whitespace characters need or need not be escaped.\n\n* Improve escaping of tilde for Bash\n\nFor Bash escape the tilde ('~') character if a line terminating\ncharacter ('\\n', '\\r', '\\u2028', or '\\u2029') appears between and\n\"opening\" equals sign ('=') and a \"closing\" colon-tilde (\":~\"). This\ncase was missed previously because the regular expression `/./` does not\nindeed match all characters, but only those that are not line\nterminating characters (even with the multiline flag). From [1]:\n\n> Note that the m multiline flag doesn't change the dot behavior. So to\n> match a pattern across multiple lines, the character class `[^]` can\n> be used - it will match any character including newlines.\n\nThe test fixtures for Bash were updated to include examples where the\ntilde character should have been escaped but wasn't.\n\n* Improve escaping of curly braces for Bash\n\nFor Bash escape the opening curly brace ('}') character if a line\nterminating character ('\\n', '\\r', '\\u2028', or '\\u2029') appears\nbetween and opening curly brace ('{') and closing curly brace ('}').\nAgain, this case was missed previously because the regular expression\n`/./` does match _all_ characters - instead `/[^]/` is used.\n\nThe test fixtures for Bash were updated to include examples where the\nopening curly brace should have been escaped but wasn't.\n\n* Update CHANGELOG\n\nInclude the fixed bugs in the CHANGELOG.\n\n---\n\n1. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide-\n   /Regular_Expressions/Character_Classes\n2. Sample of a script used for manual testing:\n\n    import { execSync } from \"node:child_process\";\n    import assert from \"node:assert\";\n    import * as shescape from \"shescape\";\n\n    const options = {\n      shell: \"powershell.exe\", // <-- set shell to test here\n      interpolation: true,     // <-- change depending on test\n      encoding: \"utf8\",\n    };\n\n    const whitespaceChars = [\n      \"\\u0009\", \"\\u000A\", \"\\u000B\", \"\\u000C\", \"\\u000D\", \" \", \"\\u0085\",\n      \"\\u00A0\", \"\\u1680\", \"\\u2000\", \"\\u2001\", \"\\u2002\", \"\\u2003\",\n      \"\\u2004\", \"\\u2005\", \"\\u2006\", \"\\u2007\", \"\\u2008\", \"\\u2009\",\n      \"\\u200A\", \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\",\n      \"\\uFEFF\",\n    ];\n\n    for (const char of whitespaceChars) {\n      const userInput = `foo${char}bar`;\n\n      const escapeOutput = execSync(\n        `node test/_echo.js ${shescape.escape(userInput, options)}`,\n        options\n      );\n      // Use this if you don't expect the escaped output to equal the\n      // quote output.\n      //assert.strictEqual(escapeOutput, \"some string\");\n\n      const quoteOutput = execSync(\n        `node test/_echo.js ${shescape.quote(userInput, options)}`,\n        options\n      );\n      assert.strictEqual(escapeOutput, quoteOutput);\n    }",
    "before_after_code_files": [
      "src/unix.js||src/unix.js",
      "src/win.js||src/win.js",
      "test/fixtures/unix.cjs||test/fixtures/unix.cjs",
      "test/fixtures/win.cjs||test/fixtures/win.cjs",
      "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
      "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs",
      "test/unit/_macros.js||test/unit/_macros.js"
    ]
  },
  "patch_diff": {
    "src/unix.js||src/unix.js": [
      "File: src/unix.js -> src/unix.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:   if (interpolation) {",
      "47:     result = result",
      "48:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "49:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "50:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "51:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "52:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "53:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "56:   } else if (quoted) {",
      "57:     result = result.replace(/'/g, `'\\\\''`);",
      "58:   }",
      "",
      "[Removed Lines]",
      "54:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\")",
      "55:       .replace(/(?<=\\=(?:.*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "[Added Lines]",
      "49:       .replace(/\\n/g, \" \")",
      "55:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\")",
      "56:       .replace(/(?<=\\=(?:[^]*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:   if (interpolation) {",
      "75:     result = result",
      "76:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "77:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "78:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "79:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "80:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "81:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "83:   } else if (quoted) {",
      "84:     result = result.replace(/'/g, `'\\\\''`);",
      "85:   }",
      "",
      "[Removed Lines]",
      "82:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\");",
      "",
      "[Added Lines]",
      "78:       .replace(/\\n/g, \" \")",
      "84:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   if (interpolation) {",
      "102:     result = result",
      "103:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "104:       .replace(/(^|\\s)(~|#|=)/g, \"$1\\\\$2\")",
      "105:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "106:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:       .replace(/\\n/g, \" \")",
      "",
      "---------------"
    ],
    "src/win.js||src/win.js": [
      "File: src/win.js -> src/win.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: function escapeArgCmd(arg, interpolation, quoted) {",
      "38:   if (interpolation) {",
      "39:     result = result",
      "",
      "[Removed Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\");",
      "",
      "[Added Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\").replace(/\\n|\\r/g, \" \");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:   if (interpolation) {",
      "66:     result = result",
      "67:       .replace(/(^|\\s)((?:\\*|[1-6])?)(>)/g, \"$1$2`$3\")",
      "68:       .replace(/(^|\\s)(<|@|#|-|\\:|\\])/g, \"$1`$2\")",
      "69:       .replace(/(,|\\;|\\&|\\|)/g, \"`$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:       .replace(/\\n|\\r/g, \" \")",
      "",
      "---------------"
    ],
    "test/fixtures/unix.cjs||test/fixtures/unix.cjs": [
      "File: test/fixtures/unix.cjs -> test/fixtures/unix.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u2000bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u2000bar\",",
      "76:           noInterpolation: \"foo\\u2000bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2001bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2001bar\",",
      "83:           noInterpolation: \"foo\\u2001bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2002bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2002bar\",",
      "90:           noInterpolation: \"foo\\u2002bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2003bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2003bar\",",
      "97:           noInterpolation: \"foo\\u2003bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2004bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2004bar\",",
      "104:           noInterpolation: \"foo\\u2004bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2005bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2005bar\",",
      "111:           noInterpolation: \"foo\\u2005bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2006bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2006bar\",",
      "118:           noInterpolation: \"foo\\u2006bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2007bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2007bar\",",
      "125:           noInterpolation: \"foo\\u2007bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2008bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2008bar\",",
      "132:           noInterpolation: \"foo\\u2008bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2009bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2009bar\",",
      "139:           noInterpolation: \"foo\\u2009bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u200Abar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u200Abar\",",
      "146:           noInterpolation: \"foo\\u200Abar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u2028bar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u2028bar\",",
      "153:           noInterpolation: \"foo\\u2028bar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2029bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2029bar\",",
      "160:           noInterpolation: \"foo\\u2029bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u202Fbar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u202Fbar\",",
      "167:           noInterpolation: \"foo\\u202Fbar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u205Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u205Fbar\",",
      "174:           noInterpolation: \"foo\\u205Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u3000bar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u3000bar\",",
      "181:           noInterpolation: \"foo\\u3000bar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\uFEFFbar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\uFEFFbar\",",
      "188:           noInterpolation: \"foo\\uFEFFbar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\n\\rbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo \\rbar\",",
      "195:           noInterpolation: \"foo\\n\\rbar\",",
      "196:         },",
      "197:       },",
      "198:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "137:         input: \"a=b:~:\",",
      "138:         expected: { interpolation: \"a=b:\\\\~:\", noInterpolation: \"a=b:~:\" },",
      "139:       },",
      "140:       {",
      "141:         input: \"a=b:~:c\",",
      "142:         expected: { interpolation: \"a=b:\\\\~:c\", noInterpolation: \"a=b:~:c\" },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306:       {",
      "307:         input: \"a=\\r:~:\",",
      "308:         expected: { interpolation: \"a=\\r:\\\\~:\", noInterpolation: \"a=\\r:~:\" },",
      "309:       },",
      "310:       {",
      "311:         input: \"a=\\u2028:~:\",",
      "312:         expected: {",
      "313:           interpolation: \"a=\\u2028:\\\\~:\",",
      "314:           noInterpolation: \"a=\\u2028:~:\",",
      "315:         },",
      "316:       },",
      "317:       {",
      "318:         input: \"a=\\u2029:~:\",",
      "319:         expected: {",
      "320:           interpolation: \"a=\\u2029:\\\\~:\",",
      "321:           noInterpolation: \"a=\\u2029:~:\",",
      "322:         },",
      "323:       },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "391:         input: \"a{0..2}b\",",
      "392:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "393:       },",
      "394:     ],",
      "395:     \"angle brackets ('<', '>')\": [",
      "396:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "578:       {",
      "579:         input: \"a{\\u000Db,c}d\",",
      "580:         expected: {",
      "581:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "582:           noInterpolation: \"a{\\u000Db,c}d\",",
      "583:         },",
      "584:       },",
      "585:       {",
      "586:         input: \"a{\\u2028b,c}d\",",
      "587:         expected: {",
      "588:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "589:           noInterpolation: \"a{\\u2028b,c}d\",",
      "590:         },",
      "591:       },",
      "592:       {",
      "593:         input: \"a{\\u2029b,c}d\",",
      "594:         expected: {",
      "595:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "596:           noInterpolation: \"a{\\u2029b,c}d\",",
      "597:         },",
      "598:       },",
      "599:       {",
      "600:         input: \"a{b,c\\u000D}d\",",
      "601:         expected: {",
      "602:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "603:           noInterpolation: \"a{b,c\\u000D}d\",",
      "604:         },",
      "605:       },",
      "606:       {",
      "607:         input: \"a{b,c\\u2028}d\",",
      "608:         expected: {",
      "609:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "610:           noInterpolation: \"a{b,c\\u2028}d\",",
      "611:         },",
      "612:       },",
      "613:       {",
      "614:         input: \"a{b,c\\u2029}d\",",
      "615:         expected: {",
      "616:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "617:           noInterpolation: \"a{b,c\\u2029}d\",",
      "618:         },",
      "619:       },",
      "620:       {",
      "621:         input: \"a{\\u000D0..2}b\",",
      "622:         expected: {",
      "623:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "624:           noInterpolation: \"a{\\u000D0..2}b\",",
      "625:         },",
      "626:       },",
      "627:       {",
      "628:         input: \"a{\\u20280..2}b\",",
      "629:         expected: {",
      "630:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "631:           noInterpolation: \"a{\\u20280..2}b\",",
      "632:         },",
      "633:       },",
      "634:       {",
      "635:         input: \"a{\\u20290..2}b\",",
      "636:         expected: {",
      "637:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "638:           noInterpolation: \"a{\\u20290..2}b\",",
      "639:         },",
      "640:       },",
      "641:       {",
      "642:         input: \"a{0..2\\u000D}b\",",
      "643:         expected: {",
      "644:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "645:           noInterpolation: \"a{0..2\\u000D}b\",",
      "646:         },",
      "647:       },",
      "648:       {",
      "649:         input: \"a{0..2\\u2028}b\",",
      "650:         expected: {",
      "651:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "652:           noInterpolation: \"a{0..2\\u2028}b\",",
      "653:         },",
      "654:       },",
      "655:       {",
      "656:         input: \"a{0..2\\u2029}b\",",
      "657:         expected: {",
      "658:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "659:           noInterpolation: \"a{0..2\\u2029}b\",",
      "660:         },",
      "661:       },",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "439:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "440:       },",
      "441:     ],",
      "442:     'single quotes (\"\\'\")': [",
      "443:       {",
      "444:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "710:     \"whitespace (\\\\s)\": [",
      "711:       {",
      "712:         input: \"foo bar\",",
      "713:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "714:       },",
      "715:       {",
      "716:         input: \"foo\\nbar\",",
      "717:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\vbar\",",
      "721:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "722:       },",
      "723:       {",
      "724:         input: \"foo\\fbar\",",
      "725:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "726:       },",
      "727:       {",
      "728:         input: \"foo\\rbar\",",
      "729:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "730:       },",
      "731:       {",
      "732:         input: \"foo bar\",",
      "733:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "734:       },",
      "735:       {",
      "736:         input: \"foo\\u0085bar\",",
      "737:         expected: {",
      "738:           interpolation: \"foo\\u0085bar\",",
      "739:           noInterpolation: \"foo\\u0085bar\",",
      "740:         },",
      "741:       },",
      "742:       {",
      "743:         input: \"foo\\u00A0bar\",",
      "744:         expected: {",
      "745:           interpolation: \"foo\\u00A0bar\",",
      "746:           noInterpolation: \"foo\\u00A0bar\",",
      "747:         },",
      "748:       },",
      "749:       {",
      "750:         input: \"foo\\u2000bar\",",
      "751:         expected: {",
      "752:           interpolation: \"foo\\u2000bar\",",
      "753:           noInterpolation: \"foo\\u2000bar\",",
      "754:         },",
      "755:       },",
      "756:       {",
      "757:         input: \"foo\\u2001bar\",",
      "758:         expected: {",
      "759:           interpolation: \"foo\\u2001bar\",",
      "760:           noInterpolation: \"foo\\u2001bar\",",
      "761:         },",
      "762:       },",
      "763:       {",
      "764:         input: \"foo\\u2002bar\",",
      "765:         expected: {",
      "766:           interpolation: \"foo\\u2002bar\",",
      "767:           noInterpolation: \"foo\\u2002bar\",",
      "768:         },",
      "769:       },",
      "770:       {",
      "771:         input: \"foo\\u2003bar\",",
      "772:         expected: {",
      "773:           interpolation: \"foo\\u2003bar\",",
      "774:           noInterpolation: \"foo\\u2003bar\",",
      "775:         },",
      "776:       },",
      "777:       {",
      "778:         input: \"foo\\u2004bar\",",
      "779:         expected: {",
      "780:           interpolation: \"foo\\u2004bar\",",
      "781:           noInterpolation: \"foo\\u2004bar\",",
      "782:         },",
      "783:       },",
      "784:       {",
      "785:         input: \"foo\\u2005bar\",",
      "786:         expected: {",
      "787:           interpolation: \"foo\\u2005bar\",",
      "788:           noInterpolation: \"foo\\u2005bar\",",
      "789:         },",
      "790:       },",
      "791:       {",
      "792:         input: \"foo\\u2006bar\",",
      "793:         expected: {",
      "794:           interpolation: \"foo\\u2006bar\",",
      "795:           noInterpolation: \"foo\\u2006bar\",",
      "796:         },",
      "797:       },",
      "798:       {",
      "799:         input: \"foo\\u2007bar\",",
      "800:         expected: {",
      "801:           interpolation: \"foo\\u2007bar\",",
      "802:           noInterpolation: \"foo\\u2007bar\",",
      "803:         },",
      "804:       },",
      "805:       {",
      "806:         input: \"foo\\u2008bar\",",
      "807:         expected: {",
      "808:           interpolation: \"foo\\u2008bar\",",
      "809:           noInterpolation: \"foo\\u2008bar\",",
      "810:         },",
      "811:       },",
      "812:       {",
      "813:         input: \"foo\\u2009bar\",",
      "814:         expected: {",
      "815:           interpolation: \"foo\\u2009bar\",",
      "816:           noInterpolation: \"foo\\u2009bar\",",
      "817:         },",
      "818:       },",
      "819:       {",
      "820:         input: \"foo\\u200Abar\",",
      "821:         expected: {",
      "822:           interpolation: \"foo\\u200Abar\",",
      "823:           noInterpolation: \"foo\\u200Abar\",",
      "824:         },",
      "825:       },",
      "826:       {",
      "827:         input: \"foo\\u2028bar\",",
      "828:         expected: {",
      "829:           interpolation: \"foo\\u2028bar\",",
      "830:           noInterpolation: \"foo\\u2028bar\",",
      "831:         },",
      "832:       },",
      "833:       {",
      "834:         input: \"foo\\u2029bar\",",
      "835:         expected: {",
      "836:           interpolation: \"foo\\u2029bar\",",
      "837:           noInterpolation: \"foo\\u2029bar\",",
      "838:         },",
      "839:       },",
      "840:       {",
      "841:         input: \"foo\\u202Fbar\",",
      "842:         expected: {",
      "843:           interpolation: \"foo\\u202Fbar\",",
      "844:           noInterpolation: \"foo\\u202Fbar\",",
      "845:         },",
      "846:       },",
      "847:       {",
      "848:         input: \"foo\\u205Fbar\",",
      "849:         expected: {",
      "850:           interpolation: \"foo\\u205Fbar\",",
      "851:           noInterpolation: \"foo\\u205Fbar\",",
      "852:         },",
      "853:       },",
      "854:       {",
      "855:         input: \"foo\\u3000bar\",",
      "856:         expected: {",
      "857:           interpolation: \"foo\\u3000bar\",",
      "858:           noInterpolation: \"foo\\u3000bar\",",
      "859:         },",
      "860:       },",
      "861:       {",
      "862:         input: \"foo\\uFEFFbar\",",
      "863:         expected: {",
      "864:           interpolation: \"foo\\uFEFFbar\",",
      "865:           noInterpolation: \"foo\\uFEFFbar\",",
      "866:         },",
      "867:       },",
      "868:       {",
      "869:         input: \"foo\\n\\rbar\",",
      "870:         expected: {",
      "871:           interpolation: \"foo \\rbar\",",
      "872:           noInterpolation: \"foo\\n\\rbar\",",
      "873:         },",
      "874:       },",
      "875:     ],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "800:         input: \"a{0..2}b\",",
      "801:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "802:       },",
      "803:     ],",
      "804:     \"angle brackets ('<', '>')\": [",
      "805:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1237:       {",
      "1238:         input: \"a{\\u000Db,c}d\",",
      "1239:         expected: {",
      "1240:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "1241:           noInterpolation: \"a{\\u000Db,c}d\",",
      "1242:         },",
      "1243:       },",
      "1244:       {",
      "1245:         input: \"a{\\u2028b,c}d\",",
      "1246:         expected: {",
      "1247:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "1248:           noInterpolation: \"a{\\u2028b,c}d\",",
      "1249:         },",
      "1250:       },",
      "1251:       {",
      "1252:         input: \"a{\\u2029b,c}d\",",
      "1253:         expected: {",
      "1254:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "1255:           noInterpolation: \"a{\\u2029b,c}d\",",
      "1256:         },",
      "1257:       },",
      "1258:       {",
      "1259:         input: \"a{b,c\\u000D}d\",",
      "1260:         expected: {",
      "1261:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "1262:           noInterpolation: \"a{b,c\\u000D}d\",",
      "1263:         },",
      "1264:       },",
      "1265:       {",
      "1266:         input: \"a{b,c\\u2028}d\",",
      "1267:         expected: {",
      "1268:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "1269:           noInterpolation: \"a{b,c\\u2028}d\",",
      "1270:         },",
      "1271:       },",
      "1272:       {",
      "1273:         input: \"a{b,c\\u2029}d\",",
      "1274:         expected: {",
      "1275:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "1276:           noInterpolation: \"a{b,c\\u2029}d\",",
      "1277:         },",
      "1278:       },",
      "1279:       {",
      "1280:         input: \"a{\\u000D0..2}b\",",
      "1281:         expected: {",
      "1282:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "1283:           noInterpolation: \"a{\\u000D0..2}b\",",
      "1284:         },",
      "1285:       },",
      "1286:       {",
      "1287:         input: \"a{\\u20280..2}b\",",
      "1288:         expected: {",
      "1289:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "1290:           noInterpolation: \"a{\\u20280..2}b\",",
      "1291:         },",
      "1292:       },",
      "1293:       {",
      "1294:         input: \"a{\\u20290..2}b\",",
      "1295:         expected: {",
      "1296:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "1297:           noInterpolation: \"a{\\u20290..2}b\",",
      "1298:         },",
      "1299:       },",
      "1300:       {",
      "1301:         input: \"a{0..2\\u000D}b\",",
      "1302:         expected: {",
      "1303:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "1304:           noInterpolation: \"a{0..2\\u000D}b\",",
      "1305:         },",
      "1306:       },",
      "1307:       {",
      "1308:         input: \"a{0..2\\u2028}b\",",
      "1309:         expected: {",
      "1310:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "1311:           noInterpolation: \"a{0..2\\u2028}b\",",
      "1312:         },",
      "1313:       },",
      "1314:       {",
      "1315:         input: \"a{0..2\\u2029}b\",",
      "1316:         expected: {",
      "1317:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "1318:           noInterpolation: \"a{0..2\\u2029}b\",",
      "1319:         },",
      "1320:       },",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "848:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "849:       },",
      "850:     ],",
      "851:     'single quotes (\"\\'\")': [",
      "852:       {",
      "853:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1369:     \"whitespace (\\\\s)\": [",
      "1370:       {",
      "1371:         input: \"foo bar\",",
      "1372:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1373:       },",
      "1374:       {",
      "1375:         input: \"foo\\nbar\",",
      "1376:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "1377:       },",
      "1378:       {",
      "1379:         input: \"foo\\vbar\",",
      "1380:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "1381:       },",
      "1382:       {",
      "1383:         input: \"foo\\fbar\",",
      "1384:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "1385:       },",
      "1386:       {",
      "1387:         input: \"foo\\rbar\",",
      "1388:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "1389:       },",
      "1390:       {",
      "1391:         input: \"foo bar\",",
      "1392:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1393:       },",
      "1394:       {",
      "1395:         input: \"foo\\u0085bar\",",
      "1396:         expected: {",
      "1397:           interpolation: \"foo\\u0085bar\",",
      "1398:           noInterpolation: \"foo\\u0085bar\",",
      "1399:         },",
      "1400:       },",
      "1401:       {",
      "1402:         input: \"foo\\u00A0bar\",",
      "1403:         expected: {",
      "1404:           interpolation: \"foo\\u00A0bar\",",
      "1405:           noInterpolation: \"foo\\u00A0bar\",",
      "1406:         },",
      "1407:       },",
      "1408:       {",
      "1409:         input: \"foo\\u2000bar\",",
      "1410:         expected: {",
      "1411:           interpolation: \"foo\\u2000bar\",",
      "1412:           noInterpolation: \"foo\\u2000bar\",",
      "1413:         },",
      "1414:       },",
      "1415:       {",
      "1416:         input: \"foo\\u2001bar\",",
      "1417:         expected: {",
      "1418:           interpolation: \"foo\\u2001bar\",",
      "1419:           noInterpolation: \"foo\\u2001bar\",",
      "1420:         },",
      "1421:       },",
      "1422:       {",
      "1423:         input: \"foo\\u2002bar\",",
      "1424:         expected: {",
      "1425:           interpolation: \"foo\\u2002bar\",",
      "1426:           noInterpolation: \"foo\\u2002bar\",",
      "1427:         },",
      "1428:       },",
      "1429:       {",
      "1430:         input: \"foo\\u2003bar\",",
      "1431:         expected: {",
      "1432:           interpolation: \"foo\\u2003bar\",",
      "1433:           noInterpolation: \"foo\\u2003bar\",",
      "1434:         },",
      "1435:       },",
      "1436:       {",
      "1437:         input: \"foo\\u2004bar\",",
      "1438:         expected: {",
      "1439:           interpolation: \"foo\\u2004bar\",",
      "1440:           noInterpolation: \"foo\\u2004bar\",",
      "1441:         },",
      "1442:       },",
      "1443:       {",
      "1444:         input: \"foo\\u2005bar\",",
      "1445:         expected: {",
      "1446:           interpolation: \"foo\\u2005bar\",",
      "1447:           noInterpolation: \"foo\\u2005bar\",",
      "1448:         },",
      "1449:       },",
      "1450:       {",
      "1451:         input: \"foo\\u2006bar\",",
      "1452:         expected: {",
      "1453:           interpolation: \"foo\\u2006bar\",",
      "1454:           noInterpolation: \"foo\\u2006bar\",",
      "1455:         },",
      "1456:       },",
      "1457:       {",
      "1458:         input: \"foo\\u2007bar\",",
      "1459:         expected: {",
      "1460:           interpolation: \"foo\\u2007bar\",",
      "1461:           noInterpolation: \"foo\\u2007bar\",",
      "1462:         },",
      "1463:       },",
      "1464:       {",
      "1465:         input: \"foo\\u2008bar\",",
      "1466:         expected: {",
      "1467:           interpolation: \"foo\\u2008bar\",",
      "1468:           noInterpolation: \"foo\\u2008bar\",",
      "1469:         },",
      "1470:       },",
      "1471:       {",
      "1472:         input: \"foo\\u2009bar\",",
      "1473:         expected: {",
      "1474:           interpolation: \"foo\\u2009bar\",",
      "1475:           noInterpolation: \"foo\\u2009bar\",",
      "1476:         },",
      "1477:       },",
      "1478:       {",
      "1479:         input: \"foo\\u200Abar\",",
      "1480:         expected: {",
      "1481:           interpolation: \"foo\\u200Abar\",",
      "1482:           noInterpolation: \"foo\\u200Abar\",",
      "1483:         },",
      "1484:       },",
      "1485:       {",
      "1486:         input: \"foo\\u2028bar\",",
      "1487:         expected: {",
      "1488:           interpolation: \"foo\\u2028bar\",",
      "1489:           noInterpolation: \"foo\\u2028bar\",",
      "1490:         },",
      "1491:       },",
      "1492:       {",
      "1493:         input: \"foo\\u2029bar\",",
      "1494:         expected: {",
      "1495:           interpolation: \"foo\\u2029bar\",",
      "1496:           noInterpolation: \"foo\\u2029bar\",",
      "1497:         },",
      "1498:       },",
      "1499:       {",
      "1500:         input: \"foo\\u202Fbar\",",
      "1501:         expected: {",
      "1502:           interpolation: \"foo\\u202Fbar\",",
      "1503:           noInterpolation: \"foo\\u202Fbar\",",
      "1504:         },",
      "1505:       },",
      "1506:       {",
      "1507:         input: \"foo\\u205Fbar\",",
      "1508:         expected: {",
      "1509:           interpolation: \"foo\\u205Fbar\",",
      "1510:           noInterpolation: \"foo\\u205Fbar\",",
      "1511:         },",
      "1512:       },",
      "1513:       {",
      "1514:         input: \"foo\\u3000bar\",",
      "1515:         expected: {",
      "1516:           interpolation: \"foo\\u3000bar\",",
      "1517:           noInterpolation: \"foo\\u3000bar\",",
      "1518:         },",
      "1519:       },",
      "1520:       {",
      "1521:         input: \"foo\\uFEFFbar\",",
      "1522:         expected: {",
      "1523:           interpolation: \"foo\\uFEFFbar\",",
      "1524:           noInterpolation: \"foo\\uFEFFbar\",",
      "1525:         },",
      "1526:       },",
      "1527:       {",
      "1528:         input: \"foo\\n\\rbar\",",
      "1529:         expected: {",
      "1530:           interpolation: \"foo \\rbar\",",
      "1531:           noInterpolation: \"foo\\n\\rbar\",",
      "1532:         },",
      "1533:       },",
      "1534:     ],",
      "",
      "---------------"
    ],
    "test/fixtures/win.cjs||test/fixtures/win.cjs": [
      "File: test/fixtures/win.cjs -> test/fixtures/win.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u1680bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u1680bar\",",
      "76:           noInterpolation: \"foo\\u1680bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2000bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2000bar\",",
      "83:           noInterpolation: \"foo\\u2000bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2001bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2001bar\",",
      "90:           noInterpolation: \"foo\\u2001bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2002bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2002bar\",",
      "97:           noInterpolation: \"foo\\u2002bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2003bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2003bar\",",
      "104:           noInterpolation: \"foo\\u2003bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2004bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2004bar\",",
      "111:           noInterpolation: \"foo\\u2004bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2005bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2005bar\",",
      "118:           noInterpolation: \"foo\\u2005bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2006bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2006bar\",",
      "125:           noInterpolation: \"foo\\u2006bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2007bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2007bar\",",
      "132:           noInterpolation: \"foo\\u2007bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2008bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2008bar\",",
      "139:           noInterpolation: \"foo\\u2008bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u2009bar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u2009bar\",",
      "146:           noInterpolation: \"foo\\u2009bar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u200Abar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u200Abar\",",
      "153:           noInterpolation: \"foo\\u200Abar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2028bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2028bar\",",
      "160:           noInterpolation: \"foo\\u2028bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u2029bar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u2029bar\",",
      "167:           noInterpolation: \"foo\\u2029bar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u202Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u202Fbar\",",
      "174:           noInterpolation: \"foo\\u202Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u205Fbar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u205Fbar\",",
      "181:           noInterpolation: \"foo\\u205Fbar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\u3000bar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\u3000bar\",",
      "188:           noInterpolation: \"foo\\u3000bar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\uFEFFbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo\\uFEFFbar\",",
      "195:           noInterpolation: \"foo\\uFEFFbar\",",
      "196:         },",
      "197:       },",
      "198:       {",
      "199:         input: \"foo\\n\\rbar\",",
      "200:         expected: {",
      "201:           interpolation: \"foo  bar\",",
      "202:           noInterpolation: \"foo  bar\",",
      "203:         },",
      "204:       },",
      "205:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "399:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "400:       },",
      "401:     ],",
      "402:     'single quotes (\"\\'\")': [",
      "403:       {",
      "404:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "575:     \"whitespace (\\\\s)\": [",
      "576:       {",
      "577:         input: \"foo bar\",",
      "578:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "579:       },",
      "580:       {",
      "581:         input: \"foo\\nbar\",",
      "582:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "583:       },",
      "584:       {",
      "585:         input: \"foo\\vbar\",",
      "586:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "587:       },",
      "588:       {",
      "589:         input: \"foo\\fbar\",",
      "590:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "591:       },",
      "592:       {",
      "593:         input: \"foo\\rbar\",",
      "594:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\rbar\" },",
      "595:       },",
      "596:       {",
      "597:         input: \"foo bar\",",
      "598:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "599:       },",
      "600:       {",
      "601:         input: \"foo\\u0085bar\",",
      "602:         expected: {",
      "603:           interpolation: \"foo\\u0085bar\",",
      "604:           noInterpolation: \"foo\\u0085bar\",",
      "605:         },",
      "606:       },",
      "607:       {",
      "608:         input: \"foo\\u00A0bar\",",
      "609:         expected: {",
      "610:           interpolation: \"foo\\u00A0bar\",",
      "611:           noInterpolation: \"foo\\u00A0bar\",",
      "612:         },",
      "613:       },",
      "614:       {",
      "615:         input: \"foo\\u1680bar\",",
      "616:         expected: {",
      "617:           interpolation: \"foo\\u1680bar\",",
      "618:           noInterpolation: \"foo\\u1680bar\",",
      "619:         },",
      "620:       },",
      "621:       {",
      "622:         input: \"foo\\u2000bar\",",
      "623:         expected: {",
      "624:           interpolation: \"foo\\u2000bar\",",
      "625:           noInterpolation: \"foo\\u2000bar\",",
      "626:         },",
      "627:       },",
      "628:       {",
      "629:         input: \"foo\\u2001bar\",",
      "630:         expected: {",
      "631:           interpolation: \"foo\\u2001bar\",",
      "632:           noInterpolation: \"foo\\u2001bar\",",
      "633:         },",
      "634:       },",
      "635:       {",
      "636:         input: \"foo\\u2002bar\",",
      "637:         expected: {",
      "638:           interpolation: \"foo\\u2002bar\",",
      "639:           noInterpolation: \"foo\\u2002bar\",",
      "640:         },",
      "641:       },",
      "642:       {",
      "643:         input: \"foo\\u2003bar\",",
      "644:         expected: {",
      "645:           interpolation: \"foo\\u2003bar\",",
      "646:           noInterpolation: \"foo\\u2003bar\",",
      "647:         },",
      "648:       },",
      "649:       {",
      "650:         input: \"foo\\u2004bar\",",
      "651:         expected: {",
      "652:           interpolation: \"foo\\u2004bar\",",
      "653:           noInterpolation: \"foo\\u2004bar\",",
      "654:         },",
      "655:       },",
      "656:       {",
      "657:         input: \"foo\\u2005bar\",",
      "658:         expected: {",
      "659:           interpolation: \"foo\\u2005bar\",",
      "660:           noInterpolation: \"foo\\u2005bar\",",
      "661:         },",
      "662:       },",
      "663:       {",
      "664:         input: \"foo\\u2006bar\",",
      "665:         expected: {",
      "666:           interpolation: \"foo\\u2006bar\",",
      "667:           noInterpolation: \"foo\\u2006bar\",",
      "668:         },",
      "669:       },",
      "670:       {",
      "671:         input: \"foo\\u2007bar\",",
      "672:         expected: {",
      "673:           interpolation: \"foo\\u2007bar\",",
      "674:           noInterpolation: \"foo\\u2007bar\",",
      "675:         },",
      "676:       },",
      "677:       {",
      "678:         input: \"foo\\u2008bar\",",
      "679:         expected: {",
      "680:           interpolation: \"foo\\u2008bar\",",
      "681:           noInterpolation: \"foo\\u2008bar\",",
      "682:         },",
      "683:       },",
      "684:       {",
      "685:         input: \"foo\\u2009bar\",",
      "686:         expected: {",
      "687:           interpolation: \"foo\\u2009bar\",",
      "688:           noInterpolation: \"foo\\u2009bar\",",
      "689:         },",
      "690:       },",
      "691:       {",
      "692:         input: \"foo\\u200Abar\",",
      "693:         expected: {",
      "694:           interpolation: \"foo\\u200Abar\",",
      "695:           noInterpolation: \"foo\\u200Abar\",",
      "696:         },",
      "697:       },",
      "698:       {",
      "699:         input: \"foo\\u2028bar\",",
      "700:         expected: {",
      "701:           interpolation: \"foo\\u2028bar\",",
      "702:           noInterpolation: \"foo\\u2028bar\",",
      "703:         },",
      "704:       },",
      "705:       {",
      "706:         input: \"foo\\u2029bar\",",
      "707:         expected: {",
      "708:           interpolation: \"foo\\u2029bar\",",
      "709:           noInterpolation: \"foo\\u2029bar\",",
      "710:         },",
      "711:       },",
      "712:       {",
      "713:         input: \"foo\\u202Fbar\",",
      "714:         expected: {",
      "715:           interpolation: \"foo\\u202Fbar\",",
      "716:           noInterpolation: \"foo\\u202Fbar\",",
      "717:         },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\u205Fbar\",",
      "721:         expected: {",
      "722:           interpolation: \"foo\\u205Fbar\",",
      "723:           noInterpolation: \"foo\\u205Fbar\",",
      "724:         },",
      "725:       },",
      "726:       {",
      "727:         input: \"foo\\u3000bar\",",
      "728:         expected: {",
      "729:           interpolation: \"foo\\u3000bar\",",
      "730:           noInterpolation: \"foo\\u3000bar\",",
      "731:         },",
      "732:       },",
      "733:       {",
      "734:         input: \"foo\\uFEFFbar\",",
      "735:         expected: {",
      "736:           interpolation: \"foo\\uFEFFbar\",",
      "737:           noInterpolation: \"foo\\uFEFFbar\",",
      "738:         },",
      "739:       },",
      "740:       {",
      "741:         input: \"foo\\n\\rbar\",",
      "742:         expected: {",
      "743:           interpolation: \"foo  bar\",",
      "744:           noInterpolation: \"foo\\n\\rbar\",",
      "745:         },",
      "746:       },",
      "747:     ],",
      "",
      "---------------"
    ],
    "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
      "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: }",
      "27: function getExpectedOutput({ arg, shell }, normalizeWhitespace) {",
      "32:   arg = arg.replace(/\\u{0}/gu, \"\"); // Remove null characters, like Shescape",
      "34:   if (normalizeWhitespace) {",
      "37:     if (isShellPowerShell(shell)) {",
      "39:     } else {",
      "41:     }",
      "44:     if (isShellPowerShell(shell)) {",
      "46:     } else {",
      "48:     }",
      "49:   }",
      "",
      "[Removed Lines]",
      "28:   if (isShellCmd(shell)) {",
      "29:     arg = arg.replace(/[\\n\\r]+/g, \"\"); // Remove newline characters, like prep",
      "30:   }",
      "38:       arg = arg.replace(/^[\\s\\u0085]+|[\\s\\u0085]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t]+|[ \\t]+$/g, \"\");",
      "45:       arg = arg.replace(/(\\s|\\u0085)+/g, \" \");",
      "47:       arg = arg.replace(/[ \\t]+/g, \" \");",
      "",
      "[Added Lines]",
      "33:       arg = arg.replace(",
      "34:         /^[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+|[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+$/g,",
      "35:         \"\"",
      "36:       );",
      "37:     } else if (isShellCmd(shell)) {",
      "38:       arg = arg.replace(/^[ \\t\\n\\r]+|[ \\t\\n\\r]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t\\n]+|[ \\t\\n]+$/g, \"\");",
      "45:       arg = arg.replace(",
      "46:         /[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+/g,",
      "47:         \" \"",
      "48:       );",
      "49:     } else if (isShellCmd(shell)) {",
      "50:       arg = arg.replace(/[ \\t\\n\\r]+/g, \" \");",
      "52:       arg = arg.replace(/[ \\t\\n]+/g, \" \");",
      "53:     }",
      "54:   } else {",
      "55:     if (isShellCmd(shell)) {",
      "56:       arg = arg.replace(/[\\n\\r]/g, \" \"); // Change newlines to spaces, like Shescape",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57: }",
      "59: function prepareArg({ arg, quoted, shell }, disableExtraWindowsPreparations) {",
      "66:   if (isWindows() && !disableExtraWindowsPreparations) {",
      "68:     if (isShellCmd(shell)) {",
      "",
      "[Removed Lines]",
      "60:   if (isShellCmd(shell)) {",
      "63:     arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "64:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs": [
      "File: test/fuzz/exec.test.cjs -> test/fuzz/exec.test.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: }",
      "45: function checkWithoutShellUsingInterpolation(arg) {",
      "48:   const argInfo = { arg, shell: undefined, quoted: false };",
      "50:   const preparedArg = common.prepareArg(argInfo);",
      "",
      "[Removed Lines]",
      "46:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60: }",
      "62: function checkWithShellUsingInterpolation(arg) {",
      "65:   const shell = common.getFuzzShell() || true;",
      "66:   const argInfo = { arg, shell, quoted: false };",
      "67:   const execOptions = { shell };",
      "",
      "[Removed Lines]",
      "63:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/unit/_macros.js||test/unit/_macros.js": [
      "File: test/unit/_macros.js -> test/unit/_macros.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:     t.is(actual, expected);",
      "29:   },",
      "30:   title(_, { input, interpolation, quoted, shellName }) {",
      "32:     interpolation = interpolation ? \"interpolation\" : \"no interpolation\";",
      "33:     quoted = quoted ? \"quoted\" : \"not quoted\";",
      "",
      "[Removed Lines]",
      "31:     input = input.replace(/\\u{0}/gu, \"\\\\x00\").replace(/\\t/g, \"\\\\t\");",
      "",
      "[Added Lines]",
      "31:     input = input",
      "32:       .replace(/\\u0000/g, \"\\\\u{0000}\")",
      "33:       .replace(/\\u0009/g, \"\\\\t\")",
      "34:       .replace(/\\u000A/g, \"\\\\n\")",
      "35:       .replace(/\\u000B/g, \"\\\\v\")",
      "36:       .replace(/\\u000C/g, \"\\\\f\")",
      "37:       .replace(/\\u000D/g, \"\\\\r\")",
      "38:       .replace(/\\u0085/g, \"\\\\u{0085}\")",
      "39:       .replace(/\\u00A0/g, \"\\\\u{00A0}\")",
      "40:       .replace(/\\u1680/g, \"\\\\u{1680}\")",
      "41:       .replace(/\\u2000/g, \"\\\\u{2000}\")",
      "42:       .replace(/\\u2001/g, \"\\\\u{2001}\")",
      "43:       .replace(/\\u2002/g, \"\\\\u{2002}\")",
      "44:       .replace(/\\u2003/g, \"\\\\u{2003}\")",
      "45:       .replace(/\\u2004/g, \"\\\\u{2004}\")",
      "46:       .replace(/\\u2005/g, \"\\\\u{2005}\")",
      "47:       .replace(/\\u2006/g, \"\\\\u{2006}\")",
      "48:       .replace(/\\u2007/g, \"\\\\u{2007}\")",
      "49:       .replace(/\\u2008/g, \"\\\\u{2008}\")",
      "50:       .replace(/\\u2009/g, \"\\\\u{2009}\")",
      "51:       .replace(/\\u200A/g, \"\\\\u{200A}\")",
      "52:       .replace(/\\u2028/g, \"\\\\u{2028}\")",
      "53:       .replace(/\\u2029/g, \"\\\\u{2029}\")",
      "54:       .replace(/\\u202F/g, \"\\\\u{202F}\")",
      "55:       .replace(/\\u205F/g, \"\\\\u{205F}\")",
      "56:       .replace(/\\u3000/g, \"\\\\u{3000}\")",
      "57:       .replace(/\\uFEFF/g, \"\\\\u{FEFF}\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9b80120085660a062acf2d1e2b74b7a3d6304003",
      "candidate_info": {
        "commit_hash": "9b80120085660a062acf2d1e2b74b7a3d6304003",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/9b80120085660a062acf2d1e2b74b7a3d6304003",
        "files": [
          "CHANGELOG.md",
          "src/unix.js",
          "test/fixtures/unix.cjs"
        ],
        "message": "Removely curly brace escaping for Dash (#336)",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "test/fixtures/unix.cjs||test/fixtures/unix.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "test/fixtures/unix.cjs||test/fixtures/unix.cjs"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "test/fixtures/unix.cjs||test/fixtures/unix.cjs"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
          "81:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
          "82:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
          "85:   } else if (quoted) {",
          "86:     result = result.replace(/'/g, `'\\\\''`);",
          "87:   }",
          "",
          "[Removed Lines]",
          "83:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
          "84:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\");",
          "",
          "[Added Lines]",
          "83:       .replace(/(\"|'|`)/g, \"\\\\$1\");",
          "",
          "---------------"
        ],
        "test/fixtures/unix.cjs||test/fixtures/unix.cjs": [
          "File: test/fixtures/unix.cjs -> test/fixtures/unix.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1206:       },",
          "1207:       {",
          "1208:         input: \"a{b,c}d\",",
          "1210:       },",
          "1211:       {",
          "1212:         input: \"a{,b}c\",",
          "1214:       },",
          "1215:       {",
          "1216:         input: \"a{b,}c\",",
          "1218:       },",
          "1219:       {",
          "1220:         input: \"a{bc,de}f\",",
          "1221:         expected: {",
          "1223:           noInterpolation: \"a{bc,de}f\",",
          "1224:         },",
          "1225:       },",
          "1226:       {",
          "1227:         input: \"a{b,{c,d},e}f\",",
          "1228:         expected: {",
          "1230:           noInterpolation: \"a{b,{c,d},e}f\",",
          "1231:         },",
          "1232:       },",
          "1233:       {",
          "1234:         input: \"a{0..2}b\",",
          "1236:       },",
          "1237:       {",
          "1238:         input: \"a{\\u000Db,c}d\",",
          "1239:         expected: {",
          "1241:           noInterpolation: \"a{\\u000Db,c}d\",",
          "1242:         },",
          "1243:       },",
          "1244:       {",
          "1245:         input: \"a{\\u2028b,c}d\",",
          "1246:         expected: {",
          "1248:           noInterpolation: \"a{\\u2028b,c}d\",",
          "1249:         },",
          "1250:       },",
          "1251:       {",
          "1252:         input: \"a{\\u2029b,c}d\",",
          "1253:         expected: {",
          "1255:           noInterpolation: \"a{\\u2029b,c}d\",",
          "1256:         },",
          "1257:       },",
          "1258:       {",
          "1259:         input: \"a{b,c\\u000D}d\",",
          "1260:         expected: {",
          "1262:           noInterpolation: \"a{b,c\\u000D}d\",",
          "1263:         },",
          "1264:       },",
          "1265:       {",
          "1266:         input: \"a{b,c\\u2028}d\",",
          "1267:         expected: {",
          "1269:           noInterpolation: \"a{b,c\\u2028}d\",",
          "1270:         },",
          "1271:       },",
          "1272:       {",
          "1273:         input: \"a{b,c\\u2029}d\",",
          "1274:         expected: {",
          "1276:           noInterpolation: \"a{b,c\\u2029}d\",",
          "1277:         },",
          "1278:       },",
          "1279:       {",
          "1280:         input: \"a{\\u000D0..2}b\",",
          "1281:         expected: {",
          "1283:           noInterpolation: \"a{\\u000D0..2}b\",",
          "1284:         },",
          "1285:       },",
          "1286:       {",
          "1287:         input: \"a{\\u20280..2}b\",",
          "1288:         expected: {",
          "1290:           noInterpolation: \"a{\\u20280..2}b\",",
          "1291:         },",
          "1292:       },",
          "1293:       {",
          "1294:         input: \"a{\\u20290..2}b\",",
          "1295:         expected: {",
          "1297:           noInterpolation: \"a{\\u20290..2}b\",",
          "1298:         },",
          "1299:       },",
          "1300:       {",
          "1301:         input: \"a{0..2\\u000D}b\",",
          "1302:         expected: {",
          "1304:           noInterpolation: \"a{0..2\\u000D}b\",",
          "1305:         },",
          "1306:       },",
          "1307:       {",
          "1308:         input: \"a{0..2\\u2028}b\",",
          "1309:         expected: {",
          "1311:           noInterpolation: \"a{0..2\\u2028}b\",",
          "1312:         },",
          "1313:       },",
          "1314:       {",
          "1315:         input: \"a{0..2\\u2029}b\",",
          "1316:         expected: {",
          "1318:           noInterpolation: \"a{0..2\\u2029}b\",",
          "1319:         },",
          "1320:       },",
          "",
          "[Removed Lines]",
          "1209:         expected: { interpolation: \"a\\\\{b,c}d\", noInterpolation: \"a{b,c}d\" },",
          "1213:         expected: { interpolation: \"a\\\\{,b}c\", noInterpolation: \"a{,b}c\" },",
          "1217:         expected: { interpolation: \"a\\\\{b,}c\", noInterpolation: \"a{b,}c\" },",
          "1222:           interpolation: \"a\\\\{bc,de}f\",",
          "1229:           interpolation: \"a\\\\{b,\\\\{c,d},e}f\",",
          "1235:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
          "1240:           interpolation: \"a\\\\{\\u000Db,c}d\",",
          "1247:           interpolation: \"a\\\\{\\u2028b,c}d\",",
          "1254:           interpolation: \"a\\\\{\\u2029b,c}d\",",
          "1261:           interpolation: \"a\\\\{b,c\\u000D}d\",",
          "1268:           interpolation: \"a\\\\{b,c\\u2028}d\",",
          "1275:           interpolation: \"a\\\\{b,c\\u2029}d\",",
          "1282:           interpolation: \"a\\\\{\\u000D0..2}b\",",
          "1289:           interpolation: \"a\\\\{\\u20280..2}b\",",
          "1296:           interpolation: \"a\\\\{\\u20290..2}b\",",
          "1303:           interpolation: \"a\\\\{0..2\\u000D}b\",",
          "1310:           interpolation: \"a\\\\{0..2\\u2028}b\",",
          "1317:           interpolation: \"a\\\\{0..2\\u2029}b\",",
          "",
          "[Added Lines]",
          "1209:         expected: { interpolation: \"a{b,c}d\", noInterpolation: \"a{b,c}d\" },",
          "1213:         expected: { interpolation: \"a{,b}c\", noInterpolation: \"a{,b}c\" },",
          "1217:         expected: { interpolation: \"a{b,}c\", noInterpolation: \"a{b,}c\" },",
          "1222:           interpolation: \"a{bc,de}f\",",
          "1229:           interpolation: \"a{b,{c,d},e}f\",",
          "1235:         expected: { interpolation: \"a{0..2}b\", noInterpolation: \"a{0..2}b\" },",
          "1240:           interpolation: \"a{\\u000Db,c}d\",",
          "1247:           interpolation: \"a{\\u2028b,c}d\",",
          "1254:           interpolation: \"a{\\u2029b,c}d\",",
          "1261:           interpolation: \"a{b,c\\u000D}d\",",
          "1268:           interpolation: \"a{b,c\\u2028}d\",",
          "1275:           interpolation: \"a{b,c\\u2029}d\",",
          "1282:           interpolation: \"a{\\u000D0..2}b\",",
          "1289:           interpolation: \"a{\\u20280..2}b\",",
          "1296:           interpolation: \"a{\\u20290..2}b\",",
          "1303:           interpolation: \"a{0..2\\u000D}b\",",
          "1310:           interpolation: \"a{0..2\\u2028}b\",",
          "1317:           interpolation: \"a{0..2\\u2029}b\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae07b8c8b01b4d5ed6f6d69a338d04af959899a9",
      "candidate_info": {
        "commit_hash": "ae07b8c8b01b4d5ed6f6d69a338d04af959899a9",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/ae07b8c8b01b4d5ed6f6d69a338d04af959899a9",
        "files": [
          ".gitignore",
          "CHANGELOG.md",
          "docs/index.md",
          "index.js",
          "package.json",
          "src/constants.js",
          "src/main.js",
          "src/win.js",
          "test/constants.test.js",
          "test/fuzz/corpus/c90864c9b1e57cf7d27c92267c330335b3aa62566a4004868b6be8538312be50",
          "test/index.fuzz.cjs",
          "test/win.test.js"
        ],
        "message": "Support escaping `$` for PowerShell on Windows (#94)\n\n* Create test suite for PowerShell with test cases for `$`\n\n* Add support for escaping `$` on Windows for PowerShell\n\n* Add shell as optional input to the Shescape API\n\nWrapping the shell input in an object at the API level was chosen for 1)\nextensibility and 2) to match the `child_process` API.\n\n* Add `$`-based test case to fuzz corpus\n\n* Update the fuzz target to provide the shell being fuzzed as an\nargument to Shescape\n\n* Include `options` parameter in documentation\n\n* Update CHANGELOG",
        "before_after_code_files": [
          "index.js||index.js",
          "src/constants.js||src/constants.js",
          "src/main.js||src/main.js",
          "src/win.js||src/win.js",
          "test/constants.test.js||test/constants.test.js",
          "test/index.fuzz.cjs||test/index.fuzz.cjs",
          "test/win.test.js||test/win.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/win.js||src/win.js"
          ],
          "candidate": [
            "src/win.js||src/win.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   const platform = os.platform();",
          "33: }",
          "",
          "[Removed Lines]",
          "30: export function escape(arg) {",
          "32:   return main.escapeShellArgByPlatform(arg, platform);",
          "",
          "[Added Lines]",
          "32: export function escape(arg, options = {}) {",
          "33:   const shell = options.shell;",
          "35:   return main.escapeShellArgByPlatform(arg, platform, shell);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   if (!Array.isArray(args)) args = [args];",
          "50:   const platform = os.platform();",
          "51:   const result = [];",
          "52:   for (const arg of args) {",
          "54:     result.push(safeArg);",
          "55:   }",
          "",
          "[Removed Lines]",
          "47: export function escapeAll(args) {",
          "53:     const safeArg = main.escapeShellArgByPlatform(arg, platform);",
          "",
          "[Added Lines]",
          "52: export function escapeAll(args, options = {}) {",
          "55:   const shell = options.shell;",
          "59:     const safeArg = main.escapeShellArgByPlatform(arg, platform, shell);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:   const platform = os.platform();",
          "74: }",
          "",
          "[Removed Lines]",
          "71: export function quote(arg) {",
          "73:   return main.quoteShellArgByPlatform(arg, platform);",
          "",
          "[Added Lines]",
          "79: export function quote(arg, options = {}) {",
          "80:   const shell = options.shell;",
          "82:   return main.quoteShellArgByPlatform(arg, platform, shell);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89:   if (!Array.isArray(args)) args = [args];",
          "91:   const platform = os.platform();",
          "92:   const result = [];",
          "93:   for (const arg of args) {",
          "95:     result.push(safeArg);",
          "96:   }",
          "",
          "[Removed Lines]",
          "88: export function quoteAll(args) {",
          "94:     const safeArg = main.quoteShellArgByPlatform(arg, platform);",
          "",
          "[Added Lines]",
          "99: export function quoteAll(args, options = {}) {",
          "102:   const shell = options.shell;",
          "106:     const safeArg = main.quoteShellArgByPlatform(arg, platform, shell);",
          "",
          "---------------"
        ],
        "src/constants.js||src/constants.js": [
          "File: src/constants.js -> src/constants.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: export const regexpPowerShell = /powershell.exe$/;",
          "",
          "---------------"
        ],
        "src/main.js||src/main.js": [
          "File: src/main.js -> src/main.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   if (!isStringable(arg)) {",
          "38:     throw new TypeError(typeError);",
          "39:   }",
          "",
          "[Removed Lines]",
          "36: export function escapeShellArgByPlatform(arg, platform) {",
          "",
          "[Added Lines]",
          "37: export function escapeShellArgByPlatform(arg, platform, shell) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:   const argAsString = arg.toString();",
          "42:   switch (platform) {",
          "43:     case win32:",
          "45:     default:",
          "46:       return unix.escapeShellArg(argAsString);",
          "47:   }",
          "",
          "[Removed Lines]",
          "44:       return win.escapeShellArg(argAsString);",
          "",
          "[Added Lines]",
          "45:       return win.escapeShellArg(argAsString, shell);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:   switch (platform) {",
          "64:     case win32:",
          "65:       return `\"${safeArg}\"`;",
          "",
          "[Removed Lines]",
          "61: export function quoteShellArgByPlatform(arg, platform) {",
          "62:   const safeArg = escapeShellArgByPlatform(arg, platform);",
          "",
          "[Added Lines]",
          "63: export function quoteShellArgByPlatform(arg, platform, shell) {",
          "64:   const safeArg = escapeShellArgByPlatform(arg, platform, shell);",
          "",
          "---------------"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:   return arg.replace(/\\u{0}/gu, \"\").replace(/\"/g, `\"\"`);",
          "15: }",
          "",
          "[Removed Lines]",
          "13: export function escapeShellArg(arg) {",
          "",
          "[Added Lines]",
          "7: import { regexpPowerShell } from \"./constants.js\";",
          "15: function escapeShellArgsForCmd(arg) {",
          "25: function escapeShellArgsForPowerShell(arg) {",
          "26:   return arg.replace(/\\u{0}/gu, \"\").replace(/\"/g, `\"\"`).replace(/\\$/g, \"`$\");",
          "27: }",
          "36: export function escapeShellArg(arg, shell) {",
          "37:   if (regexpPowerShell.test(shell)) {",
          "38:     return escapeShellArgsForPowerShell(arg);",
          "39:   } else {",
          "40:     return escapeShellArgsForCmd(arg);",
          "41:   }",
          "42: }",
          "",
          "---------------"
        ],
        "test/constants.test.js||test/constants.test.js": [
          "File: test/constants.test.js -> test/constants.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import assert from \"assert\";",
          "9: import { regexpPowerShell, typeError, win32 } from \"../src/constants.js\";",
          "11: describe(\"constants.js\", function () {",
          "12:   describe(\"::regexpPowerShell\", function () {",
          "13:     const powerShellExe = \"powershell.exe\";",
          "15:     it(`matches '${powerShellExe}'`, function () {",
          "16:       assert.match(powerShellExe, regexpPowerShell);",
          "17:     });",
          "19:     it(`matches a string ending in '${powerShellExe}'`, function () {",
          "20:       assert.match(`C:\\\\windows\\\\${powerShellExe}`, regexpPowerShell);",
          "21:     });",
          "23:     it(`doesn't match a string not containing '${powerShellExe}'`, function () {",
          "24:       assert.doesNotMatch(\"cmd.exe\", regexpPowerShell);",
          "25:     });",
          "27:     it(`doesn't match a string containing '${powerShellExe}'`, function () {",
          "28:       assert.doesNotMatch(`${powerShellExe} is a file`, regexpPowerShell);",
          "29:     });",
          "30:   });",
          "32:   describe(\"::typeError\", function () {",
          "33:     it(\"contains a reference to Shescape\", function () {",
          "34:       const result = typeError.includes(\"Shescape\");",
          "35:       assert.ok(result);",
          "36:     });",
          "38:     it(\"contains a reference to `toString`\", function () {",
          "39:       const result = typeError.includes(\"toString\");",
          "40:       assert.ok(result);",
          "41:     });",
          "42:   });",
          "44:   describe(\"::win32\", function () {",
          "45:     it(\"equals 'win32'\", function () {",
          "46:       assert.strictEqual(win32, \"win32\");",
          "47:     });",
          "48:   });",
          "49: });",
          "",
          "---------------"
        ],
        "test/index.fuzz.cjs||test/index.fuzz.cjs": [
          "File: test/index.fuzz.cjs -> test/index.fuzz.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: }",
          "59: function checkQuotesAndEscapesCorrectly(arg) {",
          "64:   const options = {",
          "65:     shell: process.env.FUZZ_SHELL,",
          "66:   };",
          "68:   const result = cp.execSync(cmd, options).toString();",
          "69:   const expected = getExpectedOutput(arg);",
          "70:   if (expected !== result) {",
          "",
          "[Removed Lines]",
          "60:   const preparedArg = prepareArg(arg);",
          "61:   const quotedArg = shescape.quote(preparedArg);",
          "63:   const cmd = `node test/fuzz/echo.js ${quotedArg}`;",
          "",
          "[Added Lines]",
          "64:   const preparedArg = prepareArg(arg);",
          "65:   const quotedArg = shescape.quote(preparedArg, options);",
          "66:   const cmd = `node test/fuzz/echo.js ${quotedArg}`;",
          "",
          "---------------"
        ],
        "test/win.test.js||test/win.test.js": [
          "File: test/win.test.js -> test/win.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:     assert.strictEqual(output, input);",
          "16:   });",
          "23:     });",
          "29:     });",
          "30:   });",
          "39:     });",
          "45:     });",
          "46:   });",
          "47: });",
          "",
          "[Removed Lines]",
          "18:   describe(\"escape double quotes\", function () {",
          "19:     it(\"escapes one single quote\", function () {",
          "20:       const input = `\" & ls -al`;",
          "21:       const output = escapeShellArg(input);",
          "22:       assert.strictEqual(output, `\"\" & ls -al`);",
          "25:     it(\"escapes two single quotes\", function () {",
          "26:       const input = `\" & echo \"Hello world!`;",
          "27:       const output = escapeShellArg(input);",
          "28:       assert.strictEqual(output, `\"\" & echo \"\"Hello world!`);",
          "32:   describe(\"null characters\", function () {",
          "33:     const nullChar = String.fromCharCode(0);",
          "35:     it(\"removes one null character\", function () {",
          "36:       const input = `foo\" && ls${nullChar} -al ; echo \"bar`;",
          "37:       const output = escapeShellArg(input);",
          "38:       assert.strictEqual(output, `foo\"\" && ls -al ; echo \"\"bar`);",
          "41:     it(\"removes multiple null character\", function () {",
          "42:       const input = `foo\"${nullChar}&&ls -al${nullChar};echo \"bar`;",
          "43:       const output = escapeShellArg(input);",
          "44:       assert.strictEqual(output, `foo\"\"&&ls -al;echo \"\"bar`);",
          "",
          "[Added Lines]",
          "18:   describe(\"default shell\", function () {",
          "19:     describe(\"double quotes\", function () {",
          "20:       it(\"escapes one double quote\", function () {",
          "21:         const input = `\" & ls -al`;",
          "22:         const output = escapeShellArg(input);",
          "23:         assert.strictEqual(output, `\"\" & ls -al`);",
          "24:       });",
          "26:       it(\"escapes multiple double quotes\", function () {",
          "27:         const input = `\" & echo \"Hello world!`;",
          "28:         const output = escapeShellArg(input);",
          "29:         assert.strictEqual(output, `\"\" & echo \"\"Hello world!`);",
          "30:       });",
          "31:     });",
          "33:     describe(\"null characters\", function () {",
          "34:       const nullChar = String.fromCharCode(0);",
          "36:       it(\"removes one null character\", function () {",
          "37:         const input = `foo\" && ls${nullChar} -al ; echo \"bar`;",
          "38:         const output = escapeShellArg(input);",
          "39:         assert.strictEqual(output, `foo\"\" && ls -al ; echo \"\"bar`);",
          "40:       });",
          "42:       it(\"removes multiple null characters\", function () {",
          "43:         const input = `foo\"${nullChar}&&ls -al${nullChar};echo \"bar`;",
          "44:         const output = escapeShellArg(input);",
          "45:         assert.strictEqual(output, `foo\"\"&&ls -al;echo \"\"bar`);",
          "46:       });",
          "47:     });",
          "49:     describe(\"dollar signs\", function () {",
          "50:       it(\"does nothing to one dollar sign\", function () {",
          "51:         const input = \"foo$bar\";",
          "52:         const output = escapeShellArg(input);",
          "53:         assert.strictEqual(output, \"foo$bar\");",
          "54:       });",
          "56:       it(\"does nothing to multiple dollar signs\", function () {",
          "57:         const input = \"Praise$the$sun\";",
          "58:         const output = escapeShellArg(input);",
          "59:         assert.strictEqual(output, \"Praise$the$sun\");",
          "60:       });",
          "61:     });",
          "62:   });",
          "64:   describe(\"cmd.exe\", function () {",
          "65:     const shell = \"cmd.exe\";",
          "67:     describe(\"double quotes\", function () {",
          "68:       it(\"escapes one double quote\", function () {",
          "69:         const input = `\" & ls -al`;",
          "70:         const output = escapeShellArg(input, shell);",
          "71:         assert.strictEqual(output, `\"\" & ls -al`);",
          "72:       });",
          "74:       it(\"escapes multiple double quotes\", function () {",
          "75:         const input = `\" & echo \"Hello world!`;",
          "76:         const output = escapeShellArg(input, shell);",
          "77:         assert.strictEqual(output, `\"\" & echo \"\"Hello world!`);",
          "78:       });",
          "79:     });",
          "81:     describe(\"null characters\", function () {",
          "82:       const nullChar = String.fromCharCode(0);",
          "84:       it(\"removes one null character\", function () {",
          "85:         const input = `foo\" && ls${nullChar} -al ; echo \"bar`;",
          "86:         const output = escapeShellArg(input, shell);",
          "87:         assert.strictEqual(output, `foo\"\" && ls -al ; echo \"\"bar`);",
          "88:       });",
          "90:       it(\"removes multiple null characters\", function () {",
          "91:         const input = `foo\"${nullChar}&&ls -al${nullChar};echo \"bar`;",
          "92:         const output = escapeShellArg(input, shell);",
          "93:         assert.strictEqual(output, `foo\"\"&&ls -al;echo \"\"bar`);",
          "94:       });",
          "97:     describe(\"dollar signs\", function () {",
          "98:       it(\"does nothing to one dollar sign\", function () {",
          "99:         const input = \"foo$bar\";",
          "100:         const output = escapeShellArg(input, shell);",
          "101:         assert.strictEqual(output, \"foo$bar\");",
          "102:       });",
          "104:       it(\"does nothing to multiple dollar signs\", function () {",
          "105:         const input = \"Praise$the$sun\";",
          "106:         const output = escapeShellArg(input, shell);",
          "107:         assert.strictEqual(output, \"Praise$the$sun\");",
          "108:       });",
          "112:   describe(\"powershell.exe\", function () {",
          "113:     const shell = \"powershell.exe\";",
          "115:     describe(\"double quotes\", function () {",
          "116:       it(\"escapes one double quote\", function () {",
          "117:         const input = `\" & ls -al`;",
          "118:         const output = escapeShellArg(input, shell);",
          "119:         assert.strictEqual(output, `\"\" & ls -al`);",
          "120:       });",
          "122:       it(\"escapes multiple double quotes\", function () {",
          "123:         const input = `\" & echo \"Hello world!`;",
          "124:         const output = escapeShellArg(input, shell);",
          "125:         assert.strictEqual(output, `\"\" & echo \"\"Hello world!`);",
          "126:       });",
          "127:     });",
          "129:     describe(\"null characters\", function () {",
          "130:       const nullChar = String.fromCharCode(0);",
          "132:       it(\"removes one null character\", function () {",
          "133:         const input = `foo\" && ls${nullChar} -al ; echo \"bar`;",
          "134:         const output = escapeShellArg(input, shell);",
          "135:         assert.strictEqual(output, `foo\"\" && ls -al ; echo \"\"bar`);",
          "136:       });",
          "138:       it(\"removes multiple null characters\", function () {",
          "139:         const input = `foo\"${nullChar}&&ls -al${nullChar};echo \"bar`;",
          "140:         const output = escapeShellArg(input, shell);",
          "141:         assert.strictEqual(output, `foo\"\"&&ls -al;echo \"\"bar`);",
          "142:       });",
          "145:     describe(\"dollar signs\", function () {",
          "146:       it(\"escapes one dollar sign\", function () {",
          "147:         const input = \"foo$bar\";",
          "148:         const output = escapeShellArg(input, shell);",
          "149:         assert.strictEqual(output, \"foo`$bar\");",
          "150:       });",
          "152:       it(\"escapes multiple dollar signs\", function () {",
          "153:         const input = \"Praise$the$sun\";",
          "154:         const output = escapeShellArg(input, shell);",
          "155:         assert.strictEqual(output, \"Praise`$the`$sun\");",
          "156:       });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1da37087dcbce06b4a2c7f6d2345b50b3b5b380a",
      "candidate_info": {
        "commit_hash": "1da37087dcbce06b4a2c7f6d2345b50b3b5b380a",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/1da37087dcbce06b4a2c7f6d2345b50b3b5b380a",
        "files": [
          ".eslintrc.yml",
          "CHANGELOG.md",
          "src/unix.js",
          "src/win.js",
          "test/fixtures/unix.js",
          "test/fixtures/win.js",
          "test/fuzz/_common.cjs",
          "test/fuzz/exec-file.test.cjs",
          "test/fuzz/spawn.test.cjs",
          "test/unit/_macros.js"
        ],
        "message": "Escape control characters (#456)\n\n* Update test fixtures\n\nUpdate the Unix and Windows test fixtures to include samples of strings\nwith the control characters:\n\n- `<backspace> ('\\\\b')`\n- `<carriage return> ('\\\\r')`\n- `<escape> ('\\\\u001B')`\n- `<control sequence introducer> ('\\\\u009B')`\n\nand how these should be escaped for each supported Unix shell. The tests\nfor `<end of line> ('\\\\n')` were also updated due to its relates to the\ncarriage return tests. Also, other test cases that include the carriage\nreturn character were update according to how it should be escaped.\n\nIn most cases, these characters should be escaped because they could\nallow for controller input outside the range of the input. The most\nprominent example of this is the carriage return, which resets the\ncursor to the start of the line.\n\nThe only exception to this is the exact sequence \"\\r\\n\" (newline\nrepresentation on Windows), which will be preserved as it's known safe\n(even if it can be considered unnecessary on Unix).\n\n* Escape abusable escape characters\n\nUpdate escaping for all Unix and all Windows shells to escape the\ncharacters listed above in all situations with the soul exception of the\ncarriage return character when it appears in exactly as `\\r\\n` for Bash,\nDash, PowerShell, and Zsh (the carriage return character is already\nalways stripped for CMD).\n\n* Update eslint-plugin-regex configuration\n\nDisable the `regexp/no-control-character` rule because this project\noccasionally requires matching control characters for the purposes of\nescaping or removal.\n\n* Update argument normalization for fuzzing\n\nUpdate the fuzz normalization for all shells in alignment with the\nchanges to the escaping of control characters in the source code.\n\n* Update test macro `escape` for unit tests\n\nUpdate the macro title for the test that runs fixutures to account for\nthe newly introduced control characters.\n\n* Update CHANGELOG",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "src/win.js||src/win.js",
          "test/fixtures/unix.js||test/fixtures/unix.js",
          "test/fixtures/win.js||test/fixtures/win.js",
          "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
          "test/fuzz/exec-file.test.cjs||test/fuzz/exec-file.test.cjs",
          "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs",
          "test/unit/_macros.js||test/unit/_macros.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
            "test/unit/_macros.js||test/unit/_macros.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
            "test/unit/_macros.js||test/unit/_macros.js"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: function escapeArgBash(arg, interpolation, quoted) {",
          "46:   if (interpolation) {",
          "47:     result = result",
          "",
          "[Removed Lines]",
          "44:   let result = arg.replace(/\\0/gu, \"\");",
          "",
          "[Added Lines]",
          "44:   let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     result = result.replace(/'/gu, `'\\\\''`);",
          "58:   }",
          "60:   return result;",
          "61: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:   result = result.replace(/\\r(?!\\n)/gu, \"\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71: function escapeArgDash(arg, interpolation, quoted) {",
          "74:   if (interpolation) {",
          "75:     result = result",
          "",
          "[Removed Lines]",
          "72:   let result = arg.replace(/\\0/gu, \"\");",
          "",
          "[Added Lines]",
          "74:   let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "81:     result = result.replace(/'/gu, `'\\\\''`);",
          "82:   }",
          "84:   return result;",
          "85: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   result = result.replace(/\\r(?!\\n)/gu, \"\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95: function escapeArgZsh(arg, interpolation, quoted) {",
          "98:   if (interpolation) {",
          "99:     result = result",
          "",
          "[Removed Lines]",
          "96:   let result = arg.replace(/\\0/gu, \"\");",
          "",
          "[Added Lines]",
          "100:   let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "105:     result = result.replace(/'/gu, `'\\\\''`);",
          "106:   }",
          "108:   return result;",
          "109: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:   result = result.replace(/\\r(?!\\n)/gu, \"\");",
          "",
          "---------------"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: function escapeArgCmd(arg, interpolation, quoted) {",
          "38:   if (interpolation) {",
          "39:     result = result.replace(/\\^/gu, \"^^\").replace(/([\"&<>|])/gu, \"^$1\");",
          "",
          "[Removed Lines]",
          "36:   let result = arg.replace(/\\0/gu, \"\").replace(/\\r?\\n|\\r/gu, \" \");",
          "",
          "[Added Lines]",
          "36:   let result = arg",
          "37:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "38:     .replace(/\\r?\\n|\\r/gu, \" \");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: function escapeArgPowerShell(arg, interpolation, quoted) {",
          "56:   let result = arg",
          "58:     .replace(/`/gu, \"``\")",
          "61:   if (interpolation) {",
          "62:     result = result",
          "",
          "[Removed Lines]",
          "57:     .replace(/\\0/gu, \"\")",
          "59:     .replace(/\\$/gu, \"`$$\");",
          "",
          "[Added Lines]",
          "59:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "61:     .replace(/\\$/gu, \"`$$\")",
          "62:     .replace(/\\r(?!\\n)/gu, \"\");",
          "",
          "---------------"
        ],
        "test/fixtures/unix.js||test/fixtures/unix.js": [
          "File: test/fixtures/unix.js -> test/fixtures/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         input: \"foo bar\",",
          "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
          "37:       },",
          "42:       {",
          "43:         input: \"foo\\vbar\",",
          "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
          "",
          "[Removed Lines]",
          "38:       {",
          "39:         input: \"foo\\nbar\",",
          "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
          "41:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         input: \"foo\\fbar\",",
          "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
          "49:       },",
          "54:       {",
          "55:         input: \"foo bar\",",
          "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
          "",
          "[Removed Lines]",
          "50:       {",
          "51:         input: \"foo\\rbar\",",
          "52:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
          "53:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:           noInterpolation: \"foo\\uFEFFbar\",",
          "189:         },",
          "190:       },",
          "191:       {",
          "197:       },",
          "198:     ],",
          "199:     'single quotes (\"\\'\")': [",
          "",
          "[Removed Lines]",
          "192:         input: \"foo\\r\\nbar\",",
          "193:         expected: {",
          "194:           interpolation: \"foo\\r bar\",",
          "195:           noInterpolation: \"foo\\r\\nbar\",",
          "196:         },",
          "",
          "[Added Lines]",
          "183:     ],",
          "184:     \"<backspace> ('\\\\b')\": [",
          "186:         input: \"a\\bb\",",
          "187:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "188:       },",
          "189:       {",
          "190:         input: \"a\\bb\\bc\",",
          "191:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "192:       },",
          "193:       {",
          "194:         input: \"\\ba\",",
          "195:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "196:       },",
          "197:       {",
          "198:         input: \"a\\b\",",
          "199:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "200:       },",
          "201:     ],",
          "202:     \"<end of line> ('\\\\n')\": [",
          "203:       {",
          "204:         input: \"a\\nb\",",
          "205:         expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },",
          "206:       },",
          "207:       {",
          "208:         input: \"a\\nb\\nc\",",
          "209:         expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },",
          "210:       },",
          "211:       {",
          "212:         input: \"a\\n\",",
          "213:         expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },",
          "214:       },",
          "215:       {",
          "216:         input: \"\\na\",",
          "217:         expected: { interpolation: \" a\", noInterpolation: \"\\na\" },",
          "218:       },",
          "219:     ],",
          "220:     \"<carriage return> ('\\\\r')\": [",
          "221:       {",
          "222:         input: \"a\\rb\",",
          "223:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "224:       },",
          "225:       {",
          "226:         input: \"a\\rb\\rc\",",
          "227:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "228:       },",
          "229:       {",
          "230:         input: \"\\ra\",",
          "231:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "232:       },",
          "233:       {",
          "234:         input: \"a\\r\",",
          "235:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "236:       },",
          "237:       {",
          "238:         input: \"a\\r\\nb\",",
          "239:         expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },",
          "240:       },",
          "241:     ],",
          "242:     \"<escape> ('\\\\u001B')\": [",
          "243:       {",
          "244:         input: \"a\\u001Bb\",",
          "245:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "246:       },",
          "247:       {",
          "248:         input: \"a\\u001Bb\\u001Bc\",",
          "249:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "250:       },",
          "251:       {",
          "252:         input: \"\\u001Ba\",",
          "253:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "254:       },",
          "255:       {",
          "256:         input: \"a\\u001B\",",
          "257:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "258:       },",
          "259:     ],",
          "260:     \"<control sequence introducer> ('\\\\u009B')\": [",
          "261:       {",
          "262:         input: \"a\\u009Bb\",",
          "263:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "264:       },",
          "265:       {",
          "266:         input: \"a\\u009Bb\\u009Bc\",",
          "267:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "268:       },",
          "269:       {",
          "270:         input: \"\\u009Ba\",",
          "271:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "272:       },",
          "273:       {",
          "274:         input: \"a\\u009B\",",
          "275:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "316:       },",
          "317:       {",
          "318:         input: \"a=\\r:~:\",",
          "320:       },",
          "321:       {",
          "322:         input: \"a=\\u2028:~:\",",
          "",
          "[Removed Lines]",
          "319:         expected: { interpolation: \"a=\\r:\\\\~:\", noInterpolation: \"a=\\r:~:\" },",
          "",
          "[Added Lines]",
          "398:         expected: { interpolation: \"a=:\\\\~:\", noInterpolation: \"a=:~:\" },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "589:       {",
          "590:         input: \"a{\\u000Db,c}d\",",
          "591:         expected: {",
          "594:         },",
          "595:       },",
          "596:       {",
          "",
          "[Removed Lines]",
          "592:           interpolation: \"a\\\\{\\u000Db,c}d\",",
          "593:           noInterpolation: \"a{\\u000Db,c}d\",",
          "",
          "[Added Lines]",
          "671:           interpolation: \"a\\\\{b,c}d\",",
          "672:           noInterpolation: \"a{b,c}d\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "610:       {",
          "611:         input: \"a{b,c\\u000D}d\",",
          "612:         expected: {",
          "615:         },",
          "616:       },",
          "617:       {",
          "",
          "[Removed Lines]",
          "613:           interpolation: \"a\\\\{b,c\\u000D}d\",",
          "614:           noInterpolation: \"a{b,c\\u000D}d\",",
          "",
          "[Added Lines]",
          "692:           interpolation: \"a\\\\{b,c}d\",",
          "693:           noInterpolation: \"a{b,c}d\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "631:       {",
          "632:         input: \"a{\\u000D0..2}b\",",
          "633:         expected: {",
          "636:         },",
          "637:       },",
          "638:       {",
          "",
          "[Removed Lines]",
          "634:           interpolation: \"a\\\\{\\u000D0..2}b\",",
          "635:           noInterpolation: \"a{\\u000D0..2}b\",",
          "",
          "[Added Lines]",
          "713:           interpolation: \"a\\\\{0..2}b\",",
          "714:           noInterpolation: \"a{0..2}b\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "652:       {",
          "653:         input: \"a{0..2\\u000D}b\",",
          "654:         expected: {",
          "657:         },",
          "658:       },",
          "659:       {",
          "",
          "[Removed Lines]",
          "655:           interpolation: \"a\\\\{0..2\\u000D}b\",",
          "656:           noInterpolation: \"a{0..2\\u000D}b\",",
          "",
          "[Added Lines]",
          "734:           interpolation: \"a\\\\{0..2}b\",",
          "735:           noInterpolation: \"a{0..2}b\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "734:         input: \"foo bar\",",
          "735:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
          "736:       },",
          "741:       {",
          "742:         input: \"foo\\vbar\",",
          "743:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
          "",
          "[Removed Lines]",
          "737:       {",
          "738:         input: \"foo\\nbar\",",
          "739:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
          "740:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "746:         input: \"foo\\fbar\",",
          "747:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
          "748:       },",
          "753:       {",
          "754:         input: \"foo bar\",",
          "755:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
          "",
          "[Removed Lines]",
          "749:       {",
          "750:         input: \"foo\\rbar\",",
          "751:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
          "752:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "887:           noInterpolation: \"foo\\uFEFFbar\",",
          "888:         },",
          "889:       },",
          "890:       {",
          "896:       },",
          "897:     ],",
          "898:     'single quotes (\"\\'\")': [",
          "",
          "[Removed Lines]",
          "891:         input: \"foo\\r\\nbar\",",
          "892:         expected: {",
          "893:           interpolation: \"foo\\r bar\",",
          "894:           noInterpolation: \"foo\\r\\nbar\",",
          "895:         },",
          "",
          "[Added Lines]",
          "961:     ],",
          "962:     \"<backspace> ('\\\\b')\": [",
          "964:         input: \"a\\bb\",",
          "965:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "966:       },",
          "967:       {",
          "968:         input: \"a\\bb\\bc\",",
          "969:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "970:       },",
          "971:       {",
          "972:         input: \"\\ba\",",
          "973:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "974:       },",
          "975:       {",
          "976:         input: \"a\\b\",",
          "977:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "978:       },",
          "979:     ],",
          "980:     \"<end of line> ('\\\\n')\": [",
          "981:       {",
          "982:         input: \"a\\nb\",",
          "983:         expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },",
          "984:       },",
          "985:       {",
          "986:         input: \"a\\nb\\nc\",",
          "987:         expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },",
          "988:       },",
          "989:       {",
          "990:         input: \"a\\n\",",
          "991:         expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },",
          "992:       },",
          "993:       {",
          "994:         input: \"\\na\",",
          "995:         expected: { interpolation: \" a\", noInterpolation: \"\\na\" },",
          "996:       },",
          "997:     ],",
          "998:     \"<carriage return> ('\\\\r')\": [",
          "999:       {",
          "1000:         input: \"a\\rb\",",
          "1001:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "1002:       },",
          "1003:       {",
          "1004:         input: \"a\\rb\\rc\",",
          "1005:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "1006:       },",
          "1007:       {",
          "1008:         input: \"\\ra\",",
          "1009:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1010:       },",
          "1011:       {",
          "1012:         input: \"a\\r\",",
          "1013:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1014:       },",
          "1015:       {",
          "1016:         input: \"a\\r\\nb\",",
          "1017:         expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },",
          "1018:       },",
          "1019:     ],",
          "1020:     \"<escape> ('\\\\u001B')\": [",
          "1021:       {",
          "1022:         input: \"a\\u001Bb\",",
          "1023:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "1024:       },",
          "1025:       {",
          "1026:         input: \"a\\u001Bb\\u001Bc\",",
          "1027:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "1028:       },",
          "1029:       {",
          "1030:         input: \"\\u001Ba\",",
          "1031:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1032:       },",
          "1033:       {",
          "1034:         input: \"a\\u001B\",",
          "1035:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1036:       },",
          "1037:     ],",
          "1038:     \"<control sequence introducer> ('\\\\u009B')\": [",
          "1039:       {",
          "1040:         input: \"a\\u009Bb\",",
          "1041:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "1042:       },",
          "1043:       {",
          "1044:         input: \"a\\u009Bb\\u009Bc\",",
          "1045:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "1046:       },",
          "1047:       {",
          "1048:         input: \"\\u009Ba\",",
          "1049:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1050:       },",
          "1051:       {",
          "1052:         input: \"a\\u009B\",",
          "1053:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1259:       {",
          "1260:         input: \"a{\\u000Db,c}d\",",
          "1261:         expected: {",
          "1264:         },",
          "1265:       },",
          "1266:       {",
          "",
          "[Removed Lines]",
          "1262:           interpolation: \"a{\\u000Db,c}d\",",
          "1263:           noInterpolation: \"a{\\u000Db,c}d\",",
          "",
          "[Added Lines]",
          "1420:           interpolation: \"a{b,c}d\",",
          "1421:           noInterpolation: \"a{b,c}d\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1280:       {",
          "1281:         input: \"a{b,c\\u000D}d\",",
          "1282:         expected: {",
          "1285:         },",
          "1286:       },",
          "1287:       {",
          "",
          "[Removed Lines]",
          "1283:           interpolation: \"a{b,c\\u000D}d\",",
          "1284:           noInterpolation: \"a{b,c\\u000D}d\",",
          "",
          "[Added Lines]",
          "1441:           interpolation: \"a{b,c}d\",",
          "1442:           noInterpolation: \"a{b,c}d\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1301:       {",
          "1302:         input: \"a{\\u000D0..2}b\",",
          "1303:         expected: {",
          "1306:         },",
          "1307:       },",
          "1308:       {",
          "",
          "[Removed Lines]",
          "1304:           interpolation: \"a{\\u000D0..2}b\",",
          "1305:           noInterpolation: \"a{\\u000D0..2}b\",",
          "",
          "[Added Lines]",
          "1462:           interpolation: \"a{0..2}b\",",
          "1463:           noInterpolation: \"a{0..2}b\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1322:       {",
          "1323:         input: \"a{0..2\\u000D}b\",",
          "1324:         expected: {",
          "1327:         },",
          "1328:       },",
          "1329:       {",
          "",
          "[Removed Lines]",
          "1325:           interpolation: \"a{0..2\\u000D}b\",",
          "1326:           noInterpolation: \"a{0..2\\u000D}b\",",
          "",
          "[Added Lines]",
          "1483:           interpolation: \"a{0..2}b\",",
          "1484:           noInterpolation: \"a{0..2}b\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1393:         input: \"foo bar\",",
          "1394:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
          "1395:       },",
          "1400:       {",
          "1401:         input: \"foo\\vbar\",",
          "1402:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
          "",
          "[Removed Lines]",
          "1396:       {",
          "1397:         input: \"foo\\nbar\",",
          "1398:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
          "1399:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1405:         input: \"foo\\fbar\",",
          "1406:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
          "1407:       },",
          "1412:       {",
          "1413:         input: \"foo bar\",",
          "1414:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
          "",
          "[Removed Lines]",
          "1408:       {",
          "1409:         input: \"foo\\rbar\",",
          "1410:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
          "1411:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1546:           noInterpolation: \"foo\\uFEFFbar\",",
          "1547:         },",
          "1548:       },",
          "1549:       {",
          "1555:       },",
          "1556:     ],",
          "1557:     'single quotes (\"\\'\")': [",
          "",
          "[Removed Lines]",
          "1550:         input: \"foo\\r\\nbar\",",
          "1551:         expected: {",
          "1552:           interpolation: \"foo\\r bar\",",
          "1553:           noInterpolation: \"foo\\r\\nbar\",",
          "1554:         },",
          "",
          "[Added Lines]",
          "1699:     ],",
          "1700:     \"<backspace> ('\\\\b')\": [",
          "1702:         input: \"a\\bb\",",
          "1703:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "1704:       },",
          "1705:       {",
          "1706:         input: \"a\\bb\\bc\",",
          "1707:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "1708:       },",
          "1709:       {",
          "1710:         input: \"\\ba\",",
          "1711:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1712:       },",
          "1713:       {",
          "1714:         input: \"a\\b\",",
          "1715:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1716:       },",
          "1717:     ],",
          "1718:     \"<end of line> ('\\\\n')\": [",
          "1719:       {",
          "1720:         input: \"a\\nb\",",
          "1721:         expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },",
          "1722:       },",
          "1723:       {",
          "1724:         input: \"a\\nb\\nc\",",
          "1725:         expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },",
          "1726:       },",
          "1727:       {",
          "1728:         input: \"a\\n\",",
          "1729:         expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },",
          "1730:       },",
          "1731:       {",
          "1732:         input: \"\\na\",",
          "1733:         expected: { interpolation: \" a\", noInterpolation: \"\\na\" },",
          "1734:       },",
          "1735:     ],",
          "1736:     \"<carriage return> ('\\\\r')\": [",
          "1737:       {",
          "1738:         input: \"a\\rb\",",
          "1739:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "1740:       },",
          "1741:       {",
          "1742:         input: \"a\\rb\\rc\",",
          "1743:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "1744:       },",
          "1745:       {",
          "1746:         input: \"\\ra\",",
          "1747:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1748:       },",
          "1749:       {",
          "1750:         input: \"a\\r\",",
          "1751:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1752:       },",
          "1753:       {",
          "1754:         input: \"a\\r\\nb\",",
          "1755:         expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },",
          "1756:       },",
          "1757:     ],",
          "1758:     \"<escape> ('\\\\u001B')\": [",
          "1759:       {",
          "1760:         input: \"a\\u001Bb\",",
          "1761:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "1762:       },",
          "1763:       {",
          "1764:         input: \"a\\u001Bb\\u001Bc\",",
          "1765:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "1766:       },",
          "1767:       {",
          "1768:         input: \"\\u001Ba\",",
          "1769:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1770:       },",
          "1771:       {",
          "1772:         input: \"a\\u001B\",",
          "1773:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1774:       },",
          "1775:     ],",
          "1776:     \"<control sequence introducer> ('\\\\u009B')\": [",
          "1777:       {",
          "1778:         input: \"a\\u009Bb\",",
          "1779:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "1780:       },",
          "1781:       {",
          "1782:         input: \"a\\u009Bb\\u009Bc\",",
          "1783:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "1784:       },",
          "1785:       {",
          "1786:         input: \"\\u009Ba\",",
          "1787:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1788:       },",
          "1789:       {",
          "1790:         input: \"a\\u009B\",",
          "1791:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "",
          "---------------"
        ],
        "test/fixtures/win.js||test/fixtures/win.js": [
          "File: test/fixtures/win.js -> test/fixtures/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         input: \"foo bar\",",
          "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
          "37:       },",
          "42:       {",
          "43:         input: \"foo\\vbar\",",
          "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
          "",
          "[Removed Lines]",
          "38:       {",
          "39:         input: \"foo\\nbar\",",
          "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
          "41:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         input: \"foo\\fbar\",",
          "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
          "49:       },",
          "54:       {",
          "55:         input: \"foo bar\",",
          "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
          "",
          "[Removed Lines]",
          "50:       {",
          "51:         input: \"foo\\rbar\",",
          "52:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
          "53:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:           noInterpolation: \"foo\\uFEFFbar\",",
          "196:         },",
          "197:       },",
          "198:       {",
          "204:       },",
          "205:     ],",
          "206:     'single quotes (\"\\'\")': [",
          "",
          "[Removed Lines]",
          "199:         input: \"foo\\r\\nbar\",",
          "200:         expected: {",
          "201:           interpolation: \"foo bar\",",
          "202:           noInterpolation: \"foo bar\",",
          "203:         },",
          "",
          "[Added Lines]",
          "190:     ],",
          "191:     \"<backspace> ('\\\\b')\": [",
          "193:         input: \"a\\bb\",",
          "194:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "195:       },",
          "196:       {",
          "197:         input: \"a\\bb\\bc\",",
          "198:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "199:       },",
          "200:       {",
          "201:         input: \"\\ba\",",
          "202:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "203:       },",
          "204:       {",
          "205:         input: \"a\\b\",",
          "206:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "207:       },",
          "208:     ],",
          "209:     \"<end of line> ('\\\\n')\": [",
          "210:       {",
          "211:         input: \"a\\nb\",",
          "212:         expected: { interpolation: \"a b\", noInterpolation: \"a b\" },",
          "213:       },",
          "214:       {",
          "215:         input: \"a\\nb\\nc\",",
          "216:         expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },",
          "217:       },",
          "218:       {",
          "219:         input: \"a\\n\",",
          "220:         expected: { interpolation: \"a \", noInterpolation: \"a \" },",
          "221:       },",
          "222:       {",
          "223:         input: \"\\na\",",
          "224:         expected: { interpolation: \" a\", noInterpolation: \" a\" },",
          "225:       },",
          "226:     ],",
          "227:     \"<carriage return> ('\\\\r')\": [",
          "228:       {",
          "229:         input: \"a\\rb\",",
          "230:         expected: { interpolation: \"a b\", noInterpolation: \"a b\" },",
          "231:       },",
          "232:       {",
          "233:         input: \"a\\rb\\rc\",",
          "234:         expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },",
          "235:       },",
          "236:       {",
          "237:         input: \"\\ra\",",
          "238:         expected: { interpolation: \" a\", noInterpolation: \" a\" },",
          "239:       },",
          "240:       {",
          "241:         input: \"a\\r\",",
          "242:         expected: { interpolation: \"a \", noInterpolation: \"a \" },",
          "243:       },",
          "244:       {",
          "245:         input: \"a\\r\\nb\",",
          "246:         expected: { interpolation: \"a b\", noInterpolation: \"a b\" },",
          "247:       },",
          "248:     ],",
          "249:     \"<escape> ('\\\\u001B')\": [",
          "250:       {",
          "251:         input: \"a\\u001Bb\",",
          "252:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "253:       },",
          "254:       {",
          "255:         input: \"a\\u001Bb\\u001Bc\",",
          "256:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "257:       },",
          "258:       {",
          "259:         input: \"\\u001Ba\",",
          "260:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "261:       },",
          "262:       {",
          "263:         input: \"a\\u001B\",",
          "264:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "265:       },",
          "266:     ],",
          "267:     \"<control sequence introducer> ('\\\\u009B')\": [",
          "268:       {",
          "269:         input: \"a\\u009Bb\",",
          "270:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "271:       },",
          "272:       {",
          "273:         input: \"a\\u009Bb\\u009Bc\",",
          "274:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "275:       },",
          "276:       {",
          "277:         input: \"\\u009Ba\",",
          "278:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "279:       },",
          "280:       {",
          "281:         input: \"a\\u009B\",",
          "282:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "577:         input: \"foo bar\",",
          "578:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
          "579:       },",
          "584:       {",
          "585:         input: \"foo\\vbar\",",
          "586:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
          "",
          "[Removed Lines]",
          "580:       {",
          "581:         input: \"foo\\nbar\",",
          "582:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
          "583:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "589:         input: \"foo\\fbar\",",
          "590:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
          "591:       },",
          "596:       {",
          "597:         input: \"foo bar\",",
          "598:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
          "",
          "[Removed Lines]",
          "592:       {",
          "593:         input: \"foo\\rbar\",",
          "594:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\rbar\" },",
          "595:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "737:           noInterpolation: \"foo\\uFEFFbar\",",
          "738:         },",
          "739:       },",
          "740:       {",
          "746:       },",
          "747:     ],",
          "748:     'single quotes (\"\\'\")': [",
          "",
          "[Removed Lines]",
          "741:         input: \"foo\\r\\nbar\",",
          "742:         expected: {",
          "743:           interpolation: \"foo bar\",",
          "744:           noInterpolation: \"foo\\r\\nbar\",",
          "745:         },",
          "",
          "[Added Lines]",
          "811:     ],",
          "812:     \"<backspace> ('\\\\b')\": [",
          "814:         input: \"a\\bb\",",
          "815:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "816:       },",
          "817:       {",
          "818:         input: \"a\\bb\\bc\",",
          "819:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "820:       },",
          "821:       {",
          "822:         input: \"\\ba\",",
          "823:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "824:       },",
          "825:       {",
          "826:         input: \"a\\b\",",
          "827:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "828:       },",
          "829:     ],",
          "830:     \"<end of line> ('\\\\n')\": [",
          "831:       {",
          "832:         input: \"a\\nb\",",
          "833:         expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },",
          "834:       },",
          "835:       {",
          "836:         input: \"a\\nb\\nc\",",
          "837:         expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },",
          "838:       },",
          "839:       {",
          "840:         input: \"a\\n\",",
          "841:         expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },",
          "842:       },",
          "843:       {",
          "844:         input: \"\\na\",",
          "845:         expected: { interpolation: \" a\", noInterpolation: \"\\na\" },",
          "846:       },",
          "847:     ],",
          "848:     \"<carriage return> ('\\\\r')\": [",
          "849:       {",
          "850:         input: \"a\\rb\",",
          "851:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "852:       },",
          "853:       {",
          "854:         input: \"a\\rb\\rc\",",
          "855:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "856:       },",
          "857:       {",
          "858:         input: \"\\ra\",",
          "859:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "860:       },",
          "861:       {",
          "862:         input: \"a\\r\",",
          "863:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "864:       },",
          "865:       {",
          "866:         input: \"a\\r\\nb\",",
          "867:         expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },",
          "868:       },",
          "869:     ],",
          "870:     \"<escape> ('\\\\u001B')\": [",
          "871:       {",
          "872:         input: \"a\\u001Bb\",",
          "873:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "874:       },",
          "875:       {",
          "876:         input: \"a\\u001Bb\\u001Bc\",",
          "877:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "878:       },",
          "879:       {",
          "880:         input: \"\\u001Ba\",",
          "881:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "882:       },",
          "883:       {",
          "884:         input: \"a\\u001B\",",
          "885:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "886:       },",
          "887:     ],",
          "888:     \"<control sequence introducer> ('\\\\u009B')\": [",
          "889:       {",
          "890:         input: \"a\\u009Bb\",",
          "891:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "892:       },",
          "893:       {",
          "894:         input: \"a\\u009Bb\\u009Bc\",",
          "895:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "896:       },",
          "897:       {",
          "898:         input: \"\\u009Ba\",",
          "899:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "900:       },",
          "901:       {",
          "902:         input: \"a\\u009B\",",
          "903:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "",
          "---------------"
        ],
        "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: function getExpectedOutput({ arg, shell }, normalizeWhitespace) {",
          "56:   if (normalizeWhitespace) {",
          "58:     if (isShellPowerShell(shell)) {",
          "60:     } else if (isShellCmd(shell)) {",
          "62:     } else {",
          "64:     }",
          "67:     if (isShellPowerShell(shell)) {",
          "69:     } else if (isShellCmd(shell)) {",
          "71:     } else {",
          "73:     }",
          "74:   } else {",
          "75:     if (isShellCmd(shell)) {",
          "77:     }",
          "78:   }",
          "",
          "[Removed Lines]",
          "54:   arg = arg.replace(/\\0/gu, \"\"); // Remove null characters, like Shescape",
          "59:       arg = arg.replace(/^[\\s\\u0085]+|(?<![\\s\\u0085])[\\s\\u0085]+$/gu, \"\");",
          "61:       arg = arg.replace(/^[\\t\\n\\r ]+|(?<![\\t\\n\\r ])[\\t\\n\\r ]+$/gu, \"\");",
          "63:       arg = arg.replace(/^[\\t\\n ]+|(?<![\\t\\n ])[\\t\\n ]+$/gu, \"\");",
          "68:       arg = arg.replace(/[\\s\\u0085]+/gu, \" \");",
          "70:       arg = arg.replace(/[\\t\\n\\r ]+/gu, \" \");",
          "72:       arg = arg.replace(/[\\t\\n ]+/gu, \" \");",
          "76:       arg = arg.replace(/\\r?\\n|\\r/gu, \" \"); // Change newlines to spaces, like Shescape",
          "",
          "[Added Lines]",
          "55:   arg = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");",
          "60:       arg = arg.replace(/\\r(?!\\n)/gu, \"\").replace(/[\\s\\u0085]+/gu, \" \");",
          "62:       arg = arg.replace(/[\\t\\n\\r ]+/gu, \" \");",
          "64:       arg = arg.replace(/[\\t\\n ]+/gu, \" \").replace(/\\r(?!\\n)/gu, \"\");",
          "69:       arg = arg.replace(/^[\\s\\u0085]+|(?<![\\s\\u0085])[\\s\\u0085]+$/gu, \"\");",
          "71:       arg = arg.replace(/^[\\t\\n\\r ]+|(?<![\\t\\n\\r ])[\\t\\n\\r ]+$/gu, \"\");",
          "73:       arg = arg.replace(/^[\\t\\n ]+|(?<![\\t\\n ])[\\t\\n ]+$/gu, \"\");",
          "78:       arg = arg.replace(/\\r?\\n|\\r/gu, \" \");",
          "79:     } else {",
          "80:       arg = arg.replace(/\\r(?!\\n)/gu, \"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:     } else if (isShellPowerShell(shell)) {",
          "125:         arg = arg.replace(/\"/gu, `\"\"`);",
          "",
          "[Removed Lines]",
          "122:       if (/[\\s\\u0085]/u.test(arg) && quoted) {",
          "",
          "[Added Lines]",
          "126:       if (",
          "127:         /[\\t\\n\\v\\f \\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/u.test(",
          "128:           arg",
          "129:         ) &&",
          "130:         quoted",
          "131:       ) {",
          "",
          "---------------"
        ],
        "test/fuzz/exec-file.test.cjs||test/fuzz/exec-file.test.cjs": [
          "File: test/fuzz/exec-file.test.cjs -> test/fuzz/exec-file.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   const expected = common.getExpectedOutput({",
          "86:     ...argInfo,",
          "87:     arg: (common.isShellPowerShell(shell)",
          "89:       : args",
          "90:     ).join(\" \"),",
          "91:   });",
          "",
          "[Removed Lines]",
          "88:       ? args.filter((arg) => arg.replace(/\\0/gu, \"\").length !== 0)",
          "",
          "[Added Lines]",
          "88:       ? args.filter(",
          "89:           (arg) => arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\").length !== 0",
          "90:         )",
          "",
          "---------------"
        ],
        "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs": [
          "File: test/fuzz/spawn.test.cjs -> test/fuzz/spawn.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   const expected = common.getExpectedOutput({",
          "86:     ...argInfo,",
          "87:     arg: (common.isShellPowerShell(shell)",
          "89:       : args",
          "90:     ).join(\" \"),",
          "91:   });",
          "",
          "[Removed Lines]",
          "88:       ? args.filter((arg) => arg.replace(/\\0/gu, \"\").length !== 0)",
          "",
          "[Added Lines]",
          "88:       ? args.filter(",
          "89:           (arg) => arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\").length !== 0",
          "90:         )",
          "",
          "---------------"
        ],
        "test/unit/_macros.js||test/unit/_macros.js": [
          "File: test/unit/_macros.js -> test/unit/_macros.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:       .replace(/\\v/gu, \"\\\\v\")",
          "36:       .replace(/\\f/gu, \"\\\\f\")",
          "37:       .replace(/\\r/gu, \"\\\\r\")",
          "38:       .replace(/\\u0085/gu, \"\\\\u{0085}\")",
          "39:       .replace(/\\u00A0/gu, \"\\\\u{00A0}\")",
          "40:       .replace(/\\u1680/gu, \"\\\\u{1680}\")",
          "41:       .replace(/\\u2000/gu, \"\\\\u{2000}\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:       .replace(/\\u0008/gu, \"\\\\u{0008}\")",
          "39:       .replace(/\\u001B/gu, \"\\\\u{001B}\")",
          "41:       .replace(/\\u009B/gu, \"\\\\u{009B}\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "abaf4be0d8bc6d01875fb7008e030e469979bc7e",
      "candidate_info": {
        "commit_hash": "abaf4be0d8bc6d01875fb7008e030e469979bc7e",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/abaf4be0d8bc6d01875fb7008e030e469979bc7e",
        "files": [
          "bench/bench.js",
          "bench/unix.js",
          "bench/win.js",
          "src/main.js",
          "src/unix/bash.js",
          "src/unix/csh.js",
          "src/unix/dash.js",
          "src/unix/index.js",
          "src/unix/zsh.js",
          "src/win/cmd.js",
          "src/win/index.js",
          "src/win/powershell.js",
          "test/fixtures/unix.js",
          "test/fixtures/win.js",
          "test/integration/_macros.js",
          "test/unit/_macros.js",
          "test/unit/main/escape.test.js",
          "test/unit/main/quote.test.js",
          "test/unit/unix/csh.test.js",
          "test/unit/unix/facade.test.js",
          "test/unit/unix/index.test.js",
          "test/unit/unix/shells.test.js",
          "test/unit/win/facade.test.js",
          "test/unit/win/index.test.js",
          "test/unit/win/shells.test.js"
        ],
        "message": "Lift `options.quoted` out of the internal `options` object (#911)\n\nRefactor the internals of quoting and escaping to simplify the start to\nfinish process of the `quote` and `quoteAll` API functions. In\nparticular, this moves away from having the `quoted` option internally\nfor escaping and towards using the internal quoting logic to do the\nescaping as well.\n\nAll supporting code, including tests and benchmarks, are updated\naccordingly.",
        "before_after_code_files": [
          "bench/bench.js||bench/bench.js",
          "bench/unix.js||bench/unix.js",
          "bench/win.js||bench/win.js",
          "src/main.js||src/main.js",
          "src/unix/bash.js||src/unix/bash.js",
          "src/unix/csh.js||src/unix/csh.js",
          "src/unix/dash.js||src/unix/dash.js",
          "src/unix/index.js||src/unix/index.js",
          "src/unix/zsh.js||src/unix/zsh.js",
          "src/win/cmd.js||src/win/cmd.js",
          "src/win/index.js||src/win/index.js",
          "src/win/powershell.js||src/win/powershell.js",
          "test/fixtures/unix.js||test/fixtures/unix.js",
          "test/fixtures/win.js||test/fixtures/win.js",
          "test/integration/_macros.js||test/integration/_macros.js",
          "test/unit/_macros.js||test/unit/_macros.js",
          "test/unit/main/escape.test.js||test/unit/main/escape.test.js",
          "test/unit/main/quote.test.js||test/unit/main/quote.test.js",
          "test/unit/unix/csh.test.js||test/unit/unix/csh.test.js",
          "test/unit/unix/facade.test.js||test/unit/unix/facade.test.js",
          "test/unit/unix/index.test.js||test/unit/unix/index.test.js",
          "test/unit/unix/shells.test.js||test/unit/unix/shells.test.js",
          "test/unit/win/facade.test.js||test/unit/win/facade.test.js",
          "test/unit/win/index.test.js||test/unit/win/index.test.js",
          "test/unit/win/shells.test.js||test/unit/win/shells.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/unit/_macros.js||test/unit/_macros.js"
          ],
          "candidate": [
            "test/unit/_macros.js||test/unit/_macros.js"
          ]
        }
      },
      "candidate_diff": {
        "bench/bench.js||bench/bench.js": [
          "File: bench/bench.js -> bench/bench.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: suite.add(`unix, ${binBash}, ${sampleArg}`, () => {",
          "32:   const escapeShellArg = unix.getEscapeFunction(binBash);",
          "34: });",
          "36: const escapeShellArgBashNew = unixNew.getEscapeFunction(binBash, {",
          "37:   interpolation: false,",
          "39: });",
          "40: suite.add(`unix (new), ${binBash}, ${sampleArg}`, () => {",
          "41:   escapeShellArgBashNew(sampleArg);",
          "",
          "[Removed Lines]",
          "33:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "38:   quoted: false,",
          "",
          "[Added Lines]",
          "33:   escapeShellArg(sampleArg, { interpolation: false });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: suite.add(`unix, ${binCsh}, ${sampleArg}`, () => {",
          "45:   const escapeShellArg = unix.getEscapeFunction(binCsh);",
          "47: });",
          "49: const escapeShellArgCshNew = unixNew.getEscapeFunction(binCsh, {",
          "50:   interpolation: false,",
          "52: });",
          "53: suite.add(`unix (new), ${binCsh}, ${sampleArg}`, () => {",
          "54:   escapeShellArgCshNew(sampleArg);",
          "",
          "[Removed Lines]",
          "46:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "51:   quoted: false,",
          "",
          "[Added Lines]",
          "45:   escapeShellArg(sampleArg, { interpolation: false });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57: suite.add(`unix, ${binDash}, ${sampleArg}`, () => {",
          "58:   const escapeShellArg = unix.getEscapeFunction(binDash);",
          "60: });",
          "62: const escapeShellArgDashNew = unixNew.getEscapeFunction(binDash, {",
          "63:   interpolation: false,",
          "65: });",
          "66: suite.add(`unix (new), ${binDash}, ${sampleArg}`, () => {",
          "67:   escapeShellArgDashNew(sampleArg);",
          "",
          "[Removed Lines]",
          "59:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "64:   quoted: false,",
          "",
          "[Added Lines]",
          "57:   escapeShellArg(sampleArg, { interpolation: false });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70: suite.add(`unix, ${binZsh}, ${sampleArg}`, () => {",
          "71:   const escapeShellArg = unix.getEscapeFunction(binZsh);",
          "73: });",
          "75: const escapeShellArgZshNew = unixNew.getEscapeFunction(binZsh, {",
          "76:   interpolation: false,",
          "78: });",
          "79: suite.add(`unix (new), ${binZsh}, ${sampleArg}`, () => {",
          "80:   escapeShellArgZshNew(sampleArg);",
          "",
          "[Removed Lines]",
          "72:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "77:   quoted: false,",
          "",
          "[Added Lines]",
          "69:   escapeShellArg(sampleArg, { interpolation: false });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "83: suite.add(`win, ${binCmd}, ${sampleArg}`, () => {",
          "84:   const escapeShellArg = win.getEscapeFunction(binCmd);",
          "86: });",
          "88: suite.add(`win, ${binPowerShell}, ${sampleArg}`, () => {",
          "89:   const escapeShellArg = win.getEscapeFunction(binPowerShell);",
          "91: });",
          "93: suite.run();",
          "",
          "[Removed Lines]",
          "85:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "90:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "",
          "[Added Lines]",
          "81:   escapeShellArg(sampleArg, { interpolation: false });",
          "86:   escapeShellArg(sampleArg, { interpolation: false });",
          "",
          "---------------"
        ],
        "bench/unix.js||bench/unix.js": [
          "File: bench/unix.js -> bench/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: const targetArg = \"foobar\";",
          "14: const targetShell = binZsh;",
          "20: const suite = new Benchmark.Suite();",
          "",
          "[Removed Lines]",
          "15: const targetOptions = {",
          "16:   interpolation: false,",
          "17:   quoted: false,",
          "18: };",
          "",
          "[Added Lines]",
          "15: const targetOptions = { interpolation: false };",
          "",
          "---------------"
        ],
        "bench/win.js||bench/win.js": [
          "File: bench/win.js -> bench/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: const targetArg = \"foobar\";",
          "14: const targetShell = binCmd;",
          "20: const suite = new Benchmark.Suite();",
          "",
          "[Removed Lines]",
          "15: const targetOptions = {",
          "16:   interpolation: false,",
          "17:   quoted: false,",
          "18: };",
          "",
          "[Added Lines]",
          "15: const targetOptions = { interpolation: false };",
          "",
          "---------------"
        ],
        "src/main.js||src/main.js": [
          "File: src/main.js -> src/main.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: const typeError =",
          "17:   \"Shescape requires strings or values that can be converted into a string using .toString()\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: function checkedToString(value) {",
          "27:   if (!isStringable(value)) {",
          "28:     throw new TypeError(typeError);",
          "29:   }",
          "31:   const valueAsString = value.toString();",
          "32:   return valueAsString;",
          "33: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   const escape = getEscapeFunction(shellName);",
          "68:   return escapedArg;",
          "69: }",
          "",
          "[Removed Lines]",
          "57: function escape(",
          "58:   { arg, interpolation, quoted, shellName },",
          "59:   { getEscapeFunction }",
          "60: ) {",
          "61:   if (!isStringable(arg)) {",
          "62:     throw new TypeError(typeError);",
          "63:   }",
          "65:   const argAsString = arg.toString();",
          "67:   const escapedArg = escape(argAsString, { interpolation, quoted });",
          "",
          "[Added Lines]",
          "72: function escape({ arg, interpolation, shellName }, { getEscapeFunction }) {",
          "73:   const argAsString = checkedToString(arg);",
          "75:   const escapedArg = escape(argAsString, { interpolation });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:   const quote = getQuoteFunction(shellName);",
          "90:   return escapedAndQuotedArg;",
          "91: }",
          "",
          "[Removed Lines]",
          "83: function quote({ arg, shellName }, { getEscapeFunction, getQuoteFunction }) {",
          "84:   const escapedArg = escape(",
          "85:     { arg, interpolation: false, quoted: true, shellName },",
          "86:     { getEscapeFunction }",
          "87:   );",
          "89:   const escapedAndQuotedArg = quote(escapedArg);",
          "",
          "[Added Lines]",
          "90: function quote({ arg, shellName }, { getQuoteFunction }) {",
          "91:   const argAsString = checkedToString(arg);",
          "93:   const escapedAndQuotedArg = quote(argAsString);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:     {",
          "119:       arg,",
          "120:       interpolation: options.interpolation,",
          "122:       shellName: options.shellName,",
          "123:     },",
          "124:     { getEscapeFunction }",
          "",
          "[Removed Lines]",
          "121:       quoted: false,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "144: export function quoteShellArg(",
          "145:   { arg, options: { shell }, process: { env } },",
          "147: ) {",
          "148:   const options = parseOptions(",
          "149:     { options: { shell }, process: { env } },",
          "150:     { getDefaultShell, getShellName }",
          "151:   );",
          "156: }",
          "",
          "[Removed Lines]",
          "146:   { getDefaultShell, getEscapeFunction, getQuoteFunction, getShellName }",
          "152:   return quote(",
          "153:     { arg, shellName: options.shellName },",
          "154:     { getEscapeFunction, getQuoteFunction }",
          "155:   );",
          "",
          "[Added Lines]",
          "148:   { getDefaultShell, getQuoteFunction, getShellName }",
          "154:   return quote({ arg, shellName: options.shellName }, { getQuoteFunction });",
          "",
          "---------------"
        ],
        "src/unix/bash.js||src/unix/bash.js": [
          "File: src/unix/bash.js -> src/unix/bash.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     .replace(/([\\t ])/gu, \"\\\\$1\");",
          "22: }",
          "",
          "[Removed Lines]",
          "30: function escapeForQuoted(arg) {",
          "31:   return arg",
          "32:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "33:     .replace(/\\r(?!\\n)/gu, \"\")",
          "34:     .replace(/'/gu, `'\\\\''`);",
          "35: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: export function getEscapeFunction(options) {",
          "58:   if (options.interpolation) {",
          "59:     return escapeForInterpolation;",
          "62:   } else {",
          "63:     return escapeForUnquoted;",
          "64:   }",
          "",
          "[Removed Lines]",
          "60:   } else if (options.quoted) {",
          "61:     return escapeForQuoted;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73: function quoteArg(arg) {",
          "75: }",
          "",
          "[Removed Lines]",
          "74:   return `'${arg}'`;",
          "",
          "[Added Lines]",
          "58:   const escapedArg = arg",
          "59:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "60:     .replace(/\\r(?!\\n)/gu, \"\")",
          "61:     .replace(/'/gu, `'\\\\''`);",
          "62:   return `'${escapedArg}'`;",
          "",
          "---------------"
        ],
        "src/unix/csh.js||src/unix/csh.js": [
          "File: src/unix/csh.js -> src/unix/csh.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     .replace(/!(?!$)/gu, \"\\\\!\");",
          "32: }",
          "",
          "[Removed Lines]",
          "40: function escapeForQuoted(arg) {",
          "41:   return arg",
          "42:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "43:     .replace(/\\r?\\n|\\r/gu, \" \")",
          "44:     .replace(/\\\\!$/gu, \"\\\\\\\\!\")",
          "45:     .replace(/'/gu, `'\\\\''`)",
          "46:     .replace(/!(?!$)/gu, \"\\\\!\");",
          "47: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: export function getEscapeFunction(options) {",
          "73:   if (options.interpolation) {",
          "74:     return escapeForInterpolation;",
          "77:   } else {",
          "78:     return escapeForUnquoted;",
          "79:   }",
          "",
          "[Removed Lines]",
          "75:   } else if (options.quoted) {",
          "76:     return escapeForQuoted;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88: function quoteArg(arg) {",
          "90: }",
          "",
          "[Removed Lines]",
          "89:   return `'${arg}'`;",
          "",
          "[Added Lines]",
          "71:   const escapedArg = arg",
          "72:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "73:     .replace(/\\r?\\n|\\r/gu, \" \")",
          "74:     .replace(/\\\\!$/gu, \"\\\\\\\\!\")",
          "75:     .replace(/'/gu, `'\\\\''`)",
          "76:     .replace(/!(?!$)/gu, \"\\\\!\");",
          "77:   return `'${escapedArg}'`;",
          "",
          "---------------"
        ],
        "src/unix/dash.js||src/unix/dash.js": [
          "File: src/unix/dash.js -> src/unix/dash.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     .replace(/([\\t\\n ])/gu, \"\\\\$1\");",
          "21: }",
          "",
          "[Removed Lines]",
          "29: function escapeForQuoted(arg) {",
          "30:   return arg",
          "31:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "32:     .replace(/\\r(?!\\n)/gu, \"\")",
          "33:     .replace(/'/gu, `'\\\\''`);",
          "34: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: export function getEscapeFunction(options) {",
          "57:   if (options.interpolation) {",
          "58:     return escapeForInterpolation;",
          "61:   } else {",
          "62:     return escapeForUnquoted;",
          "63:   }",
          "",
          "[Removed Lines]",
          "59:   } else if (options.quoted) {",
          "60:     return escapeForQuoted;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72: function quoteArg(arg) {",
          "74: }",
          "",
          "[Removed Lines]",
          "73:   return `'${arg}'`;",
          "",
          "[Added Lines]",
          "57:   const escapedArg = arg",
          "58:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "59:     .replace(/\\r(?!\\n)/gu, \"\")",
          "60:     .replace(/'/gu, `'\\\\''`);",
          "61:   return `'${escapedArg}'`;",
          "",
          "---------------"
        ],
        "src/unix/index.js||src/unix/index.js": [
          "File: src/unix/index.js -> src/unix/index.js"
        ],
        "src/unix/zsh.js||src/unix/zsh.js": [
          "File: src/unix/zsh.js -> src/unix/zsh.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     .replace(/([\\t ])/gu, \"\\\\$1\");",
          "21: }",
          "",
          "[Removed Lines]",
          "29: function escapeForQuoted(arg) {",
          "30:   return arg",
          "31:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "32:     .replace(/\\r(?!\\n)/gu, \"\")",
          "33:     .replace(/'/gu, `'\\\\''`);",
          "34: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: export function getEscapeFunction(options) {",
          "56:   if (options.interpolation) {",
          "57:     return escapeForInterpolation;",
          "60:   } else {",
          "61:     return escapeForUnquoted;",
          "62:   }",
          "",
          "[Removed Lines]",
          "58:   } else if (options.quoted) {",
          "59:     return escapeForQuoted;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71: function quoteArg(arg) {",
          "73: }",
          "",
          "[Removed Lines]",
          "72:   return `'${arg}'`;",
          "",
          "[Added Lines]",
          "56:   const escapedArg = arg",
          "57:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "58:     .replace(/\\r(?!\\n)/gu, \"\")",
          "59:     .replace(/'/gu, `'\\\\''`);",
          "60:   return `'${escapedArg}'`;",
          "",
          "---------------"
        ],
        "src/win/cmd.js||src/win/cmd.js": [
          "File: src/win/cmd.js -> src/win/cmd.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     .replace(/([\"&<>|])/gu, \"^$1\");",
          "18: }",
          "",
          "[Removed Lines]",
          "26: function escapeForQuoted(arg) {",
          "27:   return arg",
          "28:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "29:     .replace(/\\r?\\n|\\r/gu, \" \")",
          "30:     .replace(/\"/gu, `\"\"`);",
          "31: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: export function getEscapeFunction(options) {",
          "53:   if (options.interpolation) {",
          "54:     return escapeForInterpolation;",
          "57:   } else {",
          "58:     return escapeForUnquoted;",
          "59:   }",
          "",
          "[Removed Lines]",
          "55:   } else if (options.quoted) {",
          "56:     return escapeForQuoted;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68: function quoteArg(arg) {",
          "70: }",
          "",
          "[Removed Lines]",
          "69:   return `\"${arg}\"`;",
          "",
          "[Added Lines]",
          "53:   const escapedArg = arg",
          "54:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "55:     .replace(/\\r?\\n|\\r/gu, \" \")",
          "56:     .replace(/\"/gu, `\"\"`);",
          "57:   return `\"${escapedArg}\"`;",
          "",
          "---------------"
        ],
        "src/win/index.js||src/win/index.js": [
          "File: src/win/index.js -> src/win/index.js"
        ],
        "src/win/powershell.js||src/win/powershell.js": [
          "File: src/win/powershell.js -> src/win/powershell.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     .replace(/([\\s\\u0085])/gu, \"`$1\");",
          "23: }",
          "",
          "[Removed Lines]",
          "31: function escapeForQuoted(arg) {",
          "32:   return arg",
          "33:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "34:     .replace(/`/gu, \"``\")",
          "35:     .replace(/\\$/gu, \"`$$\")",
          "36:     .replace(/\\r(?!\\n)/gu, \"\")",
          "37:     .replace(/([\"\u201c\u201d\u201e])/gu, \"$1$1\");",
          "38: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: export function getEscapeFunction(options) {",
          "65:   if (options.interpolation) {",
          "66:     return escapeForInterpolation;",
          "69:   } else {",
          "70:     return escapeForUnquoted;",
          "71:   }",
          "",
          "[Removed Lines]",
          "67:   } else if (options.quoted) {",
          "68:     return escapeForQuoted;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80: function quoteArg(arg) {",
          "82: }",
          "",
          "[Removed Lines]",
          "81:   return `\"${arg}\"`;",
          "",
          "[Added Lines]",
          "63:   const escapedArg = arg",
          "64:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "65:     .replace(/`/gu, \"``\")",
          "66:     .replace(/\\$/gu, \"`$$\")",
          "67:     .replace(/\\r(?!\\n)/gu, \"\")",
          "68:     .replace(/([\"\u201c\u201d\u201e])/gu, \"$1$1\");",
          "69:   return `\"${escapedArg}\"`;",
          "",
          "---------------"
        ],
        "test/fixtures/unix.js||test/fixtures/unix.js": [
          "File: test/fixtures/unix.js -> test/fixtures/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:         expected: {",
          "774:           interpolation: \"a\\\\'b\",",
          "775:           noInterpolation: \"a'b\",",
          "777:         },",
          "778:       },",
          "779:       {",
          "",
          "[Removed Lines]",
          "776:           quoted: \"a'\\\\''b\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:         expected: {",
          "782:           interpolation: \"a\\\\'b\\\\'c\",",
          "783:           noInterpolation: \"a'b'c\",",
          "785:         },",
          "786:       },",
          "787:     ],",
          "",
          "[Removed Lines]",
          "784:           quoted: \"a'\\\\''b'\\\\''c\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2057:         expected: {",
          "2058:           interpolation: \"a\\\\'b\",",
          "2059:           noInterpolation: \"a'b\",",
          "2061:         },",
          "2062:       },",
          "2063:       {",
          "",
          "[Removed Lines]",
          "2060:           quoted: \"a'\\\\''b\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2065:         expected: {",
          "2066:           interpolation: \"a\\\\'b\\\\'c\",",
          "2067:           noInterpolation: \"a'b'c\",",
          "2069:         },",
          "2070:       },",
          "2071:     ],",
          "",
          "[Removed Lines]",
          "2068:           quoted: \"a'\\\\''b'\\\\''c\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3324:         expected: {",
          "3325:           interpolation: \"a\\\\'b\",",
          "3326:           noInterpolation: \"a'b\",",
          "3328:         },",
          "3329:       },",
          "3330:       {",
          "",
          "[Removed Lines]",
          "3327:           quoted: \"a'\\\\''b\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3332:         expected: {",
          "3333:           interpolation: \"a\\\\'b\\\\'c\",",
          "3334:           noInterpolation: \"a'b'c\",",
          "3336:         },",
          "3337:       },",
          "3338:     ],",
          "",
          "[Removed Lines]",
          "3335:           quoted: \"a'\\\\''b'\\\\''c\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4560:         expected: {",
          "4561:           interpolation: \"a\\\\'b\",",
          "4562:           noInterpolation: \"a'b\",",
          "4564:         },",
          "4565:       },",
          "4566:       {",
          "",
          "[Removed Lines]",
          "4563:           quoted: \"a'\\\\''b\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4568:         expected: {",
          "4569:           interpolation: \"a\\\\'b\\\\'c\",",
          "4570:           noInterpolation: \"a'b'c\",",
          "4572:         },",
          "4573:       },",
          "4574:     ],",
          "",
          "[Removed Lines]",
          "4571:           quoted: \"a'\\\\''b'\\\\''c\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4876:     \"sample strings\": [",
          "4877:       {",
          "4878:         input: \"a\",",
          "4880:       },",
          "4881:     ],",
          "4882:   },",
          "",
          "[Removed Lines]",
          "4879:         expected: { escaped: \"'a'\", notEscaped: \"'a'\" },",
          "",
          "[Added Lines]",
          "4871:         expected: \"'a'\",",
          "4872:       },",
          "4873:     ],",
          "4874:     \"<null> (\\\\0)\": [",
          "4875:       {",
          "4876:         input: \"a\\x00b\",",
          "4877:         expected: \"'ab'\",",
          "4878:       },",
          "4879:       {",
          "4880:         input: \"a\\x00b\\x00c\",",
          "4881:         expected: \"'abc'\",",
          "4882:       },",
          "4883:       {",
          "4884:         input: \"a\\x00\",",
          "4885:         expected: \"'a'\",",
          "4886:       },",
          "4887:       {",
          "4888:         input: \"\\x00a\",",
          "4889:         expected: \"'a'\",",
          "4890:       },",
          "4891:     ],",
          "4892:     \"<backspace> (\\\\b)\": [",
          "4893:       {",
          "4894:         input: \"a\\bb\",",
          "4895:         expected: \"'ab'\",",
          "4896:       },",
          "4897:       {",
          "4898:         input: \"a\\bb\\bc\",",
          "4899:         expected: \"'abc'\",",
          "4900:       },",
          "4901:       {",
          "4902:         input: \"a\\b\",",
          "4903:         expected: \"'a'\",",
          "4904:       },",
          "4905:       {",
          "4906:         input: \"\\ba\",",
          "4907:         expected: \"'a'\",",
          "4908:       },",
          "4909:     ],",
          "4910:     \"<end of line> ('\\\\n')\": [",
          "4911:       {",
          "4912:         input: \"a\\nb\",",
          "4913:         expected: \"'a\\nb'\",",
          "4914:       },",
          "4915:       {",
          "4916:         input: \"a\\nb\\nc\",",
          "4917:         expected: \"'a\\nb\\nc'\",",
          "4918:       },",
          "4919:       {",
          "4920:         input: \"a\\n\",",
          "4921:         expected: \"'a\\n'\",",
          "4922:       },",
          "4923:       {",
          "4924:         input: \"\\na\",",
          "4925:         expected: \"'\\na'\",",
          "4926:       },",
          "4927:     ],",
          "4928:     \"<carriage return> ('\\\\r')\": [",
          "4929:       {",
          "4930:         input: \"a\\rb\",",
          "4931:         expected: \"'ab'\",",
          "4932:       },",
          "4933:       {",
          "4934:         input: \"a\\rb\\rc\",",
          "4935:         expected: \"'abc'\",",
          "4936:       },",
          "4937:       {",
          "4938:         input: \"\\ra\",",
          "4939:         expected: \"'a'\",",
          "4940:       },",
          "4941:       {",
          "4942:         input: \"a\\r\",",
          "4943:         expected: \"'a'\",",
          "4944:       },",
          "4945:       {",
          "4946:         input: \"a\\r\\nb\",",
          "4947:         expected: \"'a\\r\\nb'\",",
          "4948:       },",
          "4949:     ],",
          "4950:     \"<escape> ('\\\\u001B')\": [",
          "4951:       {",
          "4952:         input: \"a\\u001Bb\",",
          "4953:         expected: \"'ab'\",",
          "4954:       },",
          "4955:       {",
          "4956:         input: \"a\\u001Bb\\u001Bc\",",
          "4957:         expected: \"'abc'\",",
          "4958:       },",
          "4959:       {",
          "4960:         input: \"a\\u001B\",",
          "4961:         expected: \"'a'\",",
          "4962:       },",
          "4963:       {",
          "4964:         input: \"\\u001Ba\",",
          "4965:         expected: \"'a'\",",
          "4966:       },",
          "4967:     ],",
          "4968:     \"<control sequence introducer> ('\\\\u009B')\": [",
          "4969:       {",
          "4970:         input: \"a\\u009Bb\",",
          "4971:         expected: \"'ab'\",",
          "4972:       },",
          "4973:       {",
          "4974:         input: \"a\\u009Bb\\u009Bc\",",
          "4975:         expected: \"'abc'\",",
          "4976:       },",
          "4977:       {",
          "4978:         input: \"a\\u009B\",",
          "4979:         expected: \"'a'\",",
          "4980:       },",
          "4981:       {",
          "4982:         input: \"\\u009Ba\",",
          "4983:         expected: \"'a'\",",
          "4984:       },",
          "4985:     ],",
          "4986:     'single quotes (\"\\'\")': [",
          "4987:       {",
          "4988:         input: \"a'b\",",
          "4989:         expected: \"'a'\\\\''b'\",",
          "4990:       },",
          "4991:       {",
          "4992:         input: \"a'b'c\",",
          "4993:         expected: \"'a'\\\\''b'\\\\''c'\",",
          "4994:       },",
          "4995:     ],",
          "4996:     \"exclamation marks ('!')\": [",
          "4997:       {",
          "4998:         input: \"a!b\",",
          "4999:         expected: \"'a!b'\",",
          "5000:       },",
          "5001:       {",
          "5002:         input: \"a!b!c\",",
          "5003:         expected: \"'a!b!c'\",",
          "5004:       },",
          "5005:       {",
          "5006:         input: \"a!\",",
          "5007:         expected: \"'a!'\",",
          "5008:       },",
          "5009:       {",
          "5010:         input: \"!a\",",
          "5011:         expected: \"'!a'\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4884:     \"sample strings\": [",
          "4885:       {",
          "4886:         input: \"a\",",
          "4888:       },",
          "4889:     ],",
          "4890:   },",
          "",
          "[Removed Lines]",
          "4887:         expected: { escaped: \"'a'\", notEscaped: \"'a'\" },",
          "",
          "[Added Lines]",
          "5019:         expected: \"'a'\",",
          "5020:       },",
          "5021:     ],",
          "5022:     \"<null> (\\\\0)\": [",
          "5023:       {",
          "5024:         input: \"a\\x00b\",",
          "5025:         expected: \"'ab'\",",
          "5026:       },",
          "5027:       {",
          "5028:         input: \"a\\x00b\\x00c\",",
          "5029:         expected: \"'abc'\",",
          "5030:       },",
          "5031:       {",
          "5032:         input: \"a\\x00\",",
          "5033:         expected: \"'a'\",",
          "5034:       },",
          "5035:       {",
          "5036:         input: \"\\x00a\",",
          "5037:         expected: \"'a'\",",
          "5038:       },",
          "5039:     ],",
          "5040:     \"<backspace> (\\\\b)\": [",
          "5041:       {",
          "5042:         input: \"a\\bb\",",
          "5043:         expected: \"'ab'\",",
          "5044:       },",
          "5045:       {",
          "5046:         input: \"a\\bb\\bc\",",
          "5047:         expected: \"'abc'\",",
          "5048:       },",
          "5049:       {",
          "5050:         input: \"a\\b\",",
          "5051:         expected: \"'a'\",",
          "5052:       },",
          "5053:       {",
          "5054:         input: \"\\ba\",",
          "5055:         expected: \"'a'\",",
          "5056:       },",
          "5057:     ],",
          "5058:     \"<end of line> ('\\\\n')\": [",
          "5059:       {",
          "5060:         input: \"a\\nb\",",
          "5061:         expected: \"'a b'\",",
          "5062:       },",
          "5063:       {",
          "5064:         input: \"a\\nb\\nc\",",
          "5065:         expected: \"'a b c'\",",
          "5066:       },",
          "5067:       {",
          "5068:         input: \"a\\n\",",
          "5069:         expected: \"'a '\",",
          "5070:       },",
          "5071:       {",
          "5072:         input: \"\\na\",",
          "5073:         expected: \"' a'\",",
          "5074:       },",
          "5075:     ],",
          "5076:     \"<carriage return> ('\\\\r')\": [",
          "5077:       {",
          "5078:         input: \"a\\rb\",",
          "5079:         expected: \"'a b'\",",
          "5080:       },",
          "5081:       {",
          "5082:         input: \"a\\rb\\rc\",",
          "5083:         expected: \"'a b c'\",",
          "5084:       },",
          "5085:       {",
          "5086:         input: \"\\ra\",",
          "5087:         expected: \"' a'\",",
          "5088:       },",
          "5089:       {",
          "5090:         input: \"a\\r\",",
          "5091:         expected: \"'a '\",",
          "5092:       },",
          "5093:       {",
          "5094:         input: \"a\\r\\nb\",",
          "5095:         expected: \"'a b'\",",
          "5096:       },",
          "5097:     ],",
          "5098:     \"<escape> ('\\\\u001B')\": [",
          "5099:       {",
          "5100:         input: \"a\\u001Bb\",",
          "5101:         expected: \"'ab'\",",
          "5102:       },",
          "5103:       {",
          "5104:         input: \"a\\u001Bb\\u001Bc\",",
          "5105:         expected: \"'abc'\",",
          "5106:       },",
          "5107:       {",
          "5108:         input: \"a\\u001B\",",
          "5109:         expected: \"'a'\",",
          "5110:       },",
          "5111:       {",
          "5112:         input: \"\\u001Ba\",",
          "5113:         expected: \"'a'\",",
          "5114:       },",
          "5115:     ],",
          "5116:     \"<control sequence introducer> ('\\\\u009B')\": [",
          "5117:       {",
          "5118:         input: \"a\\u009Bb\",",
          "5119:         expected: \"'ab'\",",
          "5120:       },",
          "5121:       {",
          "5122:         input: \"a\\u009Bb\\u009Bc\",",
          "5123:         expected: \"'abc'\",",
          "5124:       },",
          "5125:       {",
          "5126:         input: \"a\\u009B\",",
          "5127:         expected: \"'a'\",",
          "5128:       },",
          "5129:       {",
          "5130:         input: \"\\u009Ba\",",
          "5131:         expected: \"'a'\",",
          "5132:       },",
          "5133:     ],",
          "5134:     'single quotes (\"\\'\")': [",
          "5135:       {",
          "5136:         input: \"a'b\",",
          "5137:         expected: \"'a'\\\\''b'\",",
          "5138:       },",
          "5139:       {",
          "5140:         input: \"a'b'c\",",
          "5141:         expected: \"'a'\\\\''b'\\\\''c'\",",
          "5142:       },",
          "5143:     ],",
          "5144:     \"exclamation marks ('!')\": [",
          "5145:       {",
          "5146:         input: \"a!\",",
          "5147:         expected: \"'a!'\",",
          "5148:       },",
          "5149:       {",
          "5150:         input: \"!a!\",",
          "5151:         expected: \"'\\\\!a!'\",",
          "5152:       },",
          "5153:       {",
          "5154:         input: \"a!b\",",
          "5155:         expected: \"'a\\\\!b'\",",
          "5156:       },",
          "5157:       {",
          "5158:         input: \"a!b!\",",
          "5159:         expected: \"'a\\\\!b!'\",",
          "5160:       },",
          "5161:       {",
          "5162:         input: \"a!b!c\",",
          "5163:         expected: \"'a\\\\!b\\\\!c'\",",
          "5164:       },",
          "5165:       {",
          "5166:         input: \"a\\\\!\",",
          "5167:         expected: \"'a\\\\\\\\!'\",",
          "5168:       },",
          "5169:       {",
          "5170:         input: \"\\\\!a\",",
          "5171:         expected: \"'\\\\\\\\!a'\",",
          "5172:       },",
          "5173:       {",
          "5174:         input: \"a\\\\!b\",",
          "5175:         expected: \"'a\\\\\\\\!b'\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4892:     \"sample strings\": [",
          "4893:       {",
          "4894:         input: \"a\",",
          "4896:       },",
          "4897:     ],",
          "4898:   },",
          "",
          "[Removed Lines]",
          "4895:         expected: { escaped: \"'a'\", notEscaped: \"'a'\" },",
          "",
          "[Added Lines]",
          "5183:         expected: \"'a'\",",
          "5184:       },",
          "5185:     ],",
          "5186:     \"<null> (\\\\0)\": [",
          "5187:       {",
          "5188:         input: \"a\\x00b\",",
          "5189:         expected: \"'ab'\",",
          "5190:       },",
          "5191:       {",
          "5192:         input: \"a\\x00b\\x00c\",",
          "5193:         expected: \"'abc'\",",
          "5194:       },",
          "5195:       {",
          "5196:         input: \"a\\x00\",",
          "5197:         expected: \"'a'\",",
          "5198:       },",
          "5199:       {",
          "5200:         input: \"\\x00a\",",
          "5201:         expected: \"'a'\",",
          "5202:       },",
          "5203:     ],",
          "5204:     \"<backspace> (\\\\b)\": [",
          "5205:       {",
          "5206:         input: \"a\\bb\",",
          "5207:         expected: \"'ab'\",",
          "5208:       },",
          "5209:       {",
          "5210:         input: \"a\\bb\\bc\",",
          "5211:         expected: \"'abc'\",",
          "5212:       },",
          "5213:       {",
          "5214:         input: \"a\\b\",",
          "5215:         expected: \"'a'\",",
          "5216:       },",
          "5217:       {",
          "5218:         input: \"\\ba\",",
          "5219:         expected: \"'a'\",",
          "5220:       },",
          "5221:     ],",
          "5222:     \"<end of line> ('\\\\n')\": [",
          "5223:       {",
          "5224:         input: \"a\\nb\",",
          "5225:         expected: \"'a\\nb'\",",
          "5226:       },",
          "5227:       {",
          "5228:         input: \"a\\nb\\nc\",",
          "5229:         expected: \"'a\\nb\\nc'\",",
          "5230:       },",
          "5231:       {",
          "5232:         input: \"a\\n\",",
          "5233:         expected: \"'a\\n'\",",
          "5234:       },",
          "5235:       {",
          "5236:         input: \"\\na\",",
          "5237:         expected: \"'\\na'\",",
          "5238:       },",
          "5239:     ],",
          "5240:     \"<carriage return> ('\\\\r')\": [",
          "5241:       {",
          "5242:         input: \"a\\rb\",",
          "5243:         expected: \"'ab'\",",
          "5244:       },",
          "5245:       {",
          "5246:         input: \"a\\rb\\rc\",",
          "5247:         expected: \"'abc'\",",
          "5248:       },",
          "5249:       {",
          "5250:         input: \"\\ra\",",
          "5251:         expected: \"'a'\",",
          "5252:       },",
          "5253:       {",
          "5254:         input: \"a\\r\",",
          "5255:         expected: \"'a'\",",
          "5256:       },",
          "5257:       {",
          "5258:         input: \"a\\r\\nb\",",
          "5259:         expected: \"'a\\r\\nb'\",",
          "5260:       },",
          "5261:     ],",
          "5262:     \"<escape> ('\\\\u001B')\": [",
          "5263:       {",
          "5264:         input: \"a\\u001Bb\",",
          "5265:         expected: \"'ab'\",",
          "5266:       },",
          "5267:       {",
          "5268:         input: \"a\\u001Bb\\u001Bc\",",
          "5269:         expected: \"'abc'\",",
          "5270:       },",
          "5271:       {",
          "5272:         input: \"a\\u001B\",",
          "5273:         expected: \"'a'\",",
          "5274:       },",
          "5275:       {",
          "5276:         input: \"\\u001Ba\",",
          "5277:         expected: \"'a'\",",
          "5278:       },",
          "5279:     ],",
          "5280:     \"<control sequence introducer> ('\\\\u009B')\": [",
          "5281:       {",
          "5282:         input: \"a\\u009Bb\",",
          "5283:         expected: \"'ab'\",",
          "5284:       },",
          "5285:       {",
          "5286:         input: \"a\\u009Bb\\u009Bc\",",
          "5287:         expected: \"'abc'\",",
          "5288:       },",
          "5289:       {",
          "5290:         input: \"a\\u009B\",",
          "5291:         expected: \"'a'\",",
          "5292:       },",
          "5293:       {",
          "5294:         input: \"\\u009Ba\",",
          "5295:         expected: \"'a'\",",
          "5296:       },",
          "5297:     ],",
          "5298:     'single quotes (\"\\'\")': [",
          "5299:       {",
          "5300:         input: \"a'b\",",
          "5301:         expected: \"'a'\\\\''b'\",",
          "5302:       },",
          "5303:       {",
          "5304:         input: \"a'b'c\",",
          "5305:         expected: \"'a'\\\\''b'\\\\''c'\",",
          "5306:       },",
          "5307:     ],",
          "5308:     \"exclamation marks ('!')\": [",
          "5309:       {",
          "5310:         input: \"a!b\",",
          "5311:         expected: \"'a!b'\",",
          "5312:       },",
          "5313:       {",
          "5314:         input: \"a!b!c\",",
          "5315:         expected: \"'a!b!c'\",",
          "5316:       },",
          "5317:       {",
          "5318:         input: \"a!\",",
          "5319:         expected: \"'a!'\",",
          "5320:       },",
          "5321:       {",
          "5322:         input: \"!a\",",
          "5323:         expected: \"'!a'\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4900:     \"sample strings\": [",
          "4901:       {",
          "4902:         input: \"a\",",
          "4904:       },",
          "4905:     ],",
          "4906:   },",
          "",
          "[Removed Lines]",
          "4903:         expected: { escaped: \"'a'\", notEscaped: \"'a'\" },",
          "",
          "[Added Lines]",
          "5331:         expected: \"'a'\",",
          "5332:       },",
          "5333:     ],",
          "5334:     \"<null> (\\\\0)\": [",
          "5335:       {",
          "5336:         input: \"a\\x00b\",",
          "5337:         expected: \"'ab'\",",
          "5338:       },",
          "5339:       {",
          "5340:         input: \"a\\x00b\\x00c\",",
          "5341:         expected: \"'abc'\",",
          "5342:       },",
          "5343:       {",
          "5344:         input: \"a\\x00\",",
          "5345:         expected: \"'a'\",",
          "5346:       },",
          "5347:       {",
          "5348:         input: \"\\x00a\",",
          "5349:         expected: \"'a'\",",
          "5350:       },",
          "5351:     ],",
          "5352:     \"<backspace> (\\\\b)\": [",
          "5353:       {",
          "5354:         input: \"a\\bb\",",
          "5355:         expected: \"'ab'\",",
          "5356:       },",
          "5357:       {",
          "5358:         input: \"a\\bb\\bc\",",
          "5359:         expected: \"'abc'\",",
          "5360:       },",
          "5361:       {",
          "5362:         input: \"a\\b\",",
          "5363:         expected: \"'a'\",",
          "5364:       },",
          "5365:       {",
          "5366:         input: \"\\ba\",",
          "5367:         expected: \"'a'\",",
          "5368:       },",
          "5369:     ],",
          "5370:     \"<end of line> ('\\\\n')\": [",
          "5371:       {",
          "5372:         input: \"a\\nb\",",
          "5373:         expected: \"'a\\nb'\",",
          "5374:       },",
          "5375:       {",
          "5376:         input: \"a\\nb\\nc\",",
          "5377:         expected: \"'a\\nb\\nc'\",",
          "5378:       },",
          "5379:       {",
          "5380:         input: \"a\\n\",",
          "5381:         expected: \"'a\\n'\",",
          "5382:       },",
          "5383:       {",
          "5384:         input: \"\\na\",",
          "5385:         expected: \"'\\na'\",",
          "5386:       },",
          "5387:     ],",
          "5388:     \"<carriage return> ('\\\\r')\": [",
          "5389:       {",
          "5390:         input: \"a\\rb\",",
          "5391:         expected: \"'ab'\",",
          "5392:       },",
          "5393:       {",
          "5394:         input: \"a\\rb\\rc\",",
          "5395:         expected: \"'abc'\",",
          "5396:       },",
          "5397:       {",
          "5398:         input: \"\\ra\",",
          "5399:         expected: \"'a'\",",
          "5400:       },",
          "5401:       {",
          "5402:         input: \"a\\r\",",
          "5403:         expected: \"'a'\",",
          "5404:       },",
          "5405:       {",
          "5406:         input: \"a\\r\\nb\",",
          "5407:         expected: \"'a\\r\\nb'\",",
          "5408:       },",
          "5409:     ],",
          "5410:     \"<escape> ('\\\\u001B')\": [",
          "5411:       {",
          "5412:         input: \"a\\u001Bb\",",
          "5413:         expected: \"'ab'\",",
          "5414:       },",
          "5415:       {",
          "5416:         input: \"a\\u001Bb\\u001Bc\",",
          "5417:         expected: \"'abc'\",",
          "5418:       },",
          "5419:       {",
          "5420:         input: \"a\\u001B\",",
          "5421:         expected: \"'a'\",",
          "5422:       },",
          "5423:       {",
          "5424:         input: \"\\u001Ba\",",
          "5425:         expected: \"'a'\",",
          "5426:       },",
          "5427:     ],",
          "5428:     \"<control sequence introducer> ('\\\\u009B')\": [",
          "5429:       {",
          "5430:         input: \"a\\u009Bb\",",
          "5431:         expected: \"'ab'\",",
          "5432:       },",
          "5433:       {",
          "5434:         input: \"a\\u009Bb\\u009Bc\",",
          "5435:         expected: \"'abc'\",",
          "5436:       },",
          "5437:       {",
          "5438:         input: \"a\\u009B\",",
          "5439:         expected: \"'a'\",",
          "5440:       },",
          "5441:       {",
          "5442:         input: \"\\u009Ba\",",
          "5443:         expected: \"'a'\",",
          "5444:       },",
          "5445:     ],",
          "5446:     'single quotes (\"\\'\")': [",
          "5447:       {",
          "5448:         input: \"a'b\",",
          "5449:         expected: \"'a'\\\\''b'\",",
          "5450:       },",
          "5451:       {",
          "5452:         input: \"a'b'c\",",
          "5453:         expected: \"'a'\\\\''b'\\\\''c'\",",
          "5454:       },",
          "5455:     ],",
          "5456:     \"exclamation marks ('!')\": [",
          "5457:       {",
          "5458:         input: \"a!b\",",
          "5459:         expected: \"'a!b'\",",
          "5460:       },",
          "5461:       {",
          "5462:         input: \"a!b!c\",",
          "5463:         expected: \"'a!b!c'\",",
          "5464:       },",
          "5465:       {",
          "5466:         input: \"a!\",",
          "5467:         expected: \"'a!'\",",
          "5468:       },",
          "5469:       {",
          "5470:         input: \"!a\",",
          "5471:         expected: \"'!a'\",",
          "",
          "---------------"
        ],
        "test/fixtures/win.js||test/fixtures/win.js": [
          "File: test/fixtures/win.js -> test/fixtures/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:         expected: {",
          "779:           interpolation: 'a^\"b',",
          "780:           noInterpolation: 'a\"b',",
          "782:         },",
          "783:       },",
          "784:       {",
          "",
          "[Removed Lines]",
          "781:           quoted: 'a\"\"b',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "786:         expected: {",
          "787:           interpolation: 'a^\"b^\"c',",
          "788:           noInterpolation: 'a\"b\"c',",
          "790:         },",
          "791:       },",
          "792:     ],",
          "",
          "[Removed Lines]",
          "789:           quoted: 'a\"\"b\"\"c',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1906:         expected: {",
          "1907:           interpolation: 'a`\"b',",
          "1908:           noInterpolation: 'a\"b',",
          "1910:         },",
          "1911:       },",
          "1912:       {",
          "",
          "[Removed Lines]",
          "1909:           quoted: 'a\"\"b',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1914:         expected: {",
          "1915:           interpolation: 'a`\"b`\"c',",
          "1916:           noInterpolation: 'a\"b\"c',",
          "1918:         },",
          "1919:       },",
          "1920:     ],",
          "",
          "[Removed Lines]",
          "1917:           quoted: 'a\"\"b\"\"c',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2435:         expected: {",
          "2436:           interpolation: \"a`\u201cb\",",
          "2437:           noInterpolation: \"a\u201cb\",",
          "2439:         },",
          "2440:       },",
          "2441:       {",
          "",
          "[Removed Lines]",
          "2438:           quoted: \"a\u201c\u201cb\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2443:         expected: {",
          "2444:           interpolation: \"a`\u201cb`\u201cc\",",
          "2445:           noInterpolation: \"a\u201cb\u201cc\",",
          "2447:         },",
          "2448:       },",
          "2449:     ],",
          "",
          "[Removed Lines]",
          "2446:           quoted: \"a\u201c\u201cb\u201c\u201cc\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2453:         expected: {",
          "2454:           interpolation: \"a`\u201db\",",
          "2455:           noInterpolation: \"a\u201db\",",
          "2457:         },",
          "2458:       },",
          "2459:       {",
          "",
          "[Removed Lines]",
          "2456:           quoted: \"a\u201d\u201db\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2461:         expected: {",
          "2462:           interpolation: \"a`\u201db`\u201dc\",",
          "2463:           noInterpolation: \"a\u201db\u201dc\",",
          "2465:         },",
          "2466:       },",
          "2467:     ],",
          "",
          "[Removed Lines]",
          "2464:           quoted: \"a\u201d\u201db\u201d\u201dc\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2471:         expected: {",
          "2472:           interpolation: \"a`\u201eb\",",
          "2473:           noInterpolation: \"a\u201eb\",",
          "2475:         },",
          "2476:       },",
          "2477:       {",
          "",
          "[Removed Lines]",
          "2474:           quoted: \"a\u201e\u201eb\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2479:         expected: {",
          "2480:           interpolation: \"a`\u201eb`\u201ec\",",
          "2481:           noInterpolation: \"a\u201eb\u201ec\",",
          "2483:         },",
          "2484:       },",
          "2485:     ],",
          "",
          "[Removed Lines]",
          "2482:           quoted: \"a\u201e\u201eb\u201e\u201ec\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2543:     \"sample strings\": [",
          "2544:       {",
          "2545:         input: \"a\",",
          "2547:       },",
          "2548:     ],",
          "2549:   },",
          "",
          "[Removed Lines]",
          "2546:         expected: { escaped: '\"a\"', notEscaped: '\"a\"' },",
          "",
          "[Added Lines]",
          "2536:         expected: '\"a\"',",
          "2537:       },",
          "2538:     ],",
          "2539:     \"<null> (\\\\0)\": [",
          "2540:       {",
          "2541:         input: \"a\\x00b\",",
          "2542:         expected: '\"ab\"',",
          "2543:       },",
          "2544:       {",
          "2545:         input: \"a\\x00b\\x00c\",",
          "2546:         expected: '\"abc\"',",
          "2547:       },",
          "2548:       {",
          "2549:         input: \"a\\x00\",",
          "2550:         expected: '\"a\"',",
          "2551:       },",
          "2552:       {",
          "2553:         input: \"\\x00a\",",
          "2554:         expected: '\"a\"',",
          "2555:       },",
          "2556:     ],",
          "2557:     \"<backspace> (\\\\b)\": [",
          "2558:       {",
          "2559:         input: \"a\\bb\",",
          "2560:         expected: '\"ab\"',",
          "2561:       },",
          "2562:       {",
          "2563:         input: \"a\\bb\\bc\",",
          "2564:         expected: '\"abc\"',",
          "2565:       },",
          "2566:       {",
          "2567:         input: \"a\\b\",",
          "2568:         expected: '\"a\"',",
          "2569:       },",
          "2570:       {",
          "2571:         input: \"\\ba\",",
          "2572:         expected: '\"a\"',",
          "2573:       },",
          "2574:     ],",
          "2575:     \"<end of line> ('\\\\n')\": [",
          "2576:       {",
          "2577:         input: \"a\\nb\",",
          "2578:         expected: '\"a b\"',",
          "2579:       },",
          "2580:       {",
          "2581:         input: \"a\\nb\\nc\",",
          "2582:         expected: '\"a b c\"',",
          "2583:       },",
          "2584:       {",
          "2585:         input: \"a\\n\",",
          "2586:         expected: '\"a \"',",
          "2587:       },",
          "2588:       {",
          "2589:         input: \"\\na\",",
          "2590:         expected: '\" a\"',",
          "2591:       },",
          "2592:     ],",
          "2593:     \"<carriage return> ('\\\\r')\": [",
          "2594:       {",
          "2595:         input: \"a\\rb\",",
          "2596:         expected: '\"a b\"',",
          "2597:       },",
          "2598:       {",
          "2599:         input: \"a\\rb\\rc\",",
          "2600:         expected: '\"a b c\"',",
          "2601:       },",
          "2602:       {",
          "2603:         input: \"\\ra\",",
          "2604:         expected: '\" a\"',",
          "2605:       },",
          "2606:       {",
          "2607:         input: \"a\\r\",",
          "2608:         expected: '\"a \"',",
          "2609:       },",
          "2610:       {",
          "2611:         input: \"a\\r\\nb\",",
          "2612:         expected: '\"a b\"',",
          "2613:       },",
          "2614:     ],",
          "2615:     \"<escape> ('\\\\u001B')\": [",
          "2616:       {",
          "2617:         input: \"a\\u001Bb\",",
          "2618:         expected: '\"ab\"',",
          "2619:       },",
          "2620:       {",
          "2621:         input: \"a\\u001Bb\\u001Bc\",",
          "2622:         expected: '\"abc\"',",
          "2623:       },",
          "2624:       {",
          "2625:         input: \"a\\u001B\",",
          "2626:         expected: '\"a\"',",
          "2627:       },",
          "2628:       {",
          "2629:         input: \"\\u001Ba\",",
          "2630:         expected: '\"a\"',",
          "2631:       },",
          "2632:     ],",
          "2633:     \"<control sequence introducer> ('\\\\u009B')\": [",
          "2634:       {",
          "2635:         input: \"a\\u009Bb\",",
          "2636:         expected: '\"ab\"',",
          "2637:       },",
          "2638:       {",
          "2639:         input: \"a\\u009Bb\\u009Bc\",",
          "2640:         expected: '\"abc\"',",
          "2641:       },",
          "2642:       {",
          "2643:         input: \"a\\u009B\",",
          "2644:         expected: '\"a\"',",
          "2645:       },",
          "2646:       {",
          "2647:         input: \"\\u009Ba\",",
          "2648:         expected: '\"a\"',",
          "2649:       },",
          "2650:     ],",
          "2651:     \"double quotes ('\\\"')\": [",
          "2652:       {",
          "2653:         input: 'a\"b',",
          "2654:         expected: '\"a\"\"b\"',",
          "2655:       },",
          "2656:       {",
          "2657:         input: 'a\"b\"c',",
          "2658:         expected: '\"a\"\"b\"\"c\"',",
          "2659:       },",
          "2660:     ],",
          "2661:     \"backticks ('`')\": [",
          "2662:       {",
          "2663:         input: \"a`b\",",
          "2664:         expected: '\"a`b\"',",
          "2665:       },",
          "2666:       {",
          "2667:         input: \"a`b`c\",",
          "2668:         expected: '\"a`b`c\"',",
          "2669:       },",
          "2670:     ],",
          "2671:     \"dollar signs ('$')\": [",
          "2672:       {",
          "2673:         input: \"a$b\",",
          "2674:         expected: '\"a$b\"',",
          "2675:       },",
          "2676:       {",
          "2677:         input: \"a$b$c\",",
          "2678:         expected: '\"a$b$c\"',",
          "2679:       },",
          "2680:     ],",
          "2681:     \"left double quotation mark ('\u201c')\": [",
          "2682:       {",
          "2683:         input: \"a\u201cb\",",
          "2684:         expected: '\"a\u201cb\"',",
          "2685:       },",
          "2686:       {",
          "2687:         input: \"a\u201cb\u201cc\",",
          "2688:         expected: '\"a\u201cb\u201cc\"',",
          "2689:       },",
          "2690:     ],",
          "2691:     \"right double quotation mark ('\u201d')\": [",
          "2692:       {",
          "2693:         input: \"a\u201db\",",
          "2694:         expected: '\"a\u201db\"',",
          "2695:       },",
          "2696:       {",
          "2697:         input: \"a\u201db\u201dc\",",
          "2698:         expected: '\"a\u201db\u201dc\"',",
          "2699:       },",
          "2700:     ],",
          "2701:     \"double low-9 quotation mark ('\u201e')\": [",
          "2702:       {",
          "2703:         input: \"a\u201eb\",",
          "2704:         expected: '\"a\u201eb\"',",
          "2705:       },",
          "2706:       {",
          "2707:         input: \"a\u201eb\u201ec\",",
          "2708:         expected: '\"a\u201eb\u201ec\"',",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2551:     \"sample strings\": [",
          "2552:       {",
          "2553:         input: \"a\",",
          "2555:       },",
          "2556:     ],",
          "2557:   },",
          "",
          "[Removed Lines]",
          "2554:         expected: { escaped: '\"a\"', notEscaped: '\"a\"' },",
          "",
          "[Added Lines]",
          "2716:         expected: '\"a\"',",
          "2717:       },",
          "2718:     ],",
          "2719:     \"<null> (\\\\0)\": [",
          "2720:       {",
          "2721:         input: \"a\\x00b\",",
          "2722:         expected: '\"ab\"',",
          "2723:       },",
          "2724:       {",
          "2725:         input: \"a\\x00b\\x00c\",",
          "2726:         expected: '\"abc\"',",
          "2727:       },",
          "2728:       {",
          "2729:         input: \"a\\x00\",",
          "2730:         expected: '\"a\"',",
          "2731:       },",
          "2732:       {",
          "2733:         input: \"\\x00a\",",
          "2734:         expected: '\"a\"',",
          "2735:       },",
          "2736:     ],",
          "2737:     \"<backspace> (\\\\b)\": [",
          "2738:       {",
          "2739:         input: \"a\\bb\",",
          "2740:         expected: '\"ab\"',",
          "2741:       },",
          "2742:       {",
          "2743:         input: \"a\\bb\\bc\",",
          "2744:         expected: '\"abc\"',",
          "2745:       },",
          "2746:       {",
          "2747:         input: \"a\\b\",",
          "2748:         expected: '\"a\"',",
          "2749:       },",
          "2750:       {",
          "2751:         input: \"\\ba\",",
          "2752:         expected: '\"a\"',",
          "2753:       },",
          "2754:     ],",
          "2755:     \"<end of line> ('\\\\n')\": [",
          "2756:       {",
          "2757:         input: \"a\\nb\",",
          "2758:         expected: '\"a\\nb\"',",
          "2759:       },",
          "2760:       {",
          "2761:         input: \"a\\nb\\nc\",",
          "2762:         expected: '\"a\\nb\\nc\"',",
          "2763:       },",
          "2764:       {",
          "2765:         input: \"a\\n\",",
          "2766:         expected: '\"a\\n\"',",
          "2767:       },",
          "2768:       {",
          "2769:         input: \"\\na\",",
          "2770:         expected: '\"\\na\"',",
          "2771:       },",
          "2772:     ],",
          "2773:     \"<carriage return> ('\\\\r')\": [",
          "2774:       {",
          "2775:         input: \"a\\rb\",",
          "2776:         expected: '\"ab\"',",
          "2777:       },",
          "2778:       {",
          "2779:         input: \"a\\rb\\rc\",",
          "2780:         expected: '\"abc\"',",
          "2781:       },",
          "2782:       {",
          "2783:         input: \"\\ra\",",
          "2784:         expected: '\"a\"',",
          "2785:       },",
          "2786:       {",
          "2787:         input: \"a\\r\",",
          "2788:         expected: '\"a\"',",
          "2789:       },",
          "2790:       {",
          "2791:         input: \"a\\r\\nb\",",
          "2792:         expected: '\"a\\r\\nb\"',",
          "2793:       },",
          "2794:     ],",
          "2795:     \"<escape> ('\\\\u001B')\": [",
          "2796:       {",
          "2797:         input: \"a\\u001Bb\",",
          "2798:         expected: '\"ab\"',",
          "2799:       },",
          "2800:       {",
          "2801:         input: \"a\\u001Bb\\u001Bc\",",
          "2802:         expected: '\"abc\"',",
          "2803:       },",
          "2804:       {",
          "2805:         input: \"a\\u001B\",",
          "2806:         expected: '\"a\"',",
          "2807:       },",
          "2808:       {",
          "2809:         input: \"\\u001Ba\",",
          "2810:         expected: '\"a\"',",
          "2811:       },",
          "2812:     ],",
          "2813:     \"<control sequence introducer> ('\\\\u009B')\": [",
          "2814:       {",
          "2815:         input: \"a\\u009Bb\",",
          "2816:         expected: '\"ab\"',",
          "2817:       },",
          "2818:       {",
          "2819:         input: \"a\\u009Bb\\u009Bc\",",
          "2820:         expected: '\"abc\"',",
          "2821:       },",
          "2822:       {",
          "2823:         input: \"a\\u009B\",",
          "2824:         expected: '\"a\"',",
          "2825:       },",
          "2826:       {",
          "2827:         input: \"\\u009Ba\",",
          "2828:         expected: '\"a\"',",
          "2829:       },",
          "2830:     ],",
          "2831:     \"double quotes ('\\\"')\": [",
          "2832:       {",
          "2833:         input: 'a\"b',",
          "2834:         expected: '\"a\"\"b\"',",
          "2835:       },",
          "2836:       {",
          "2837:         input: 'a\"b\"c',",
          "2838:         expected: '\"a\"\"b\"\"c\"',",
          "2839:       },",
          "2840:     ],",
          "2841:     \"backticks ('`')\": [",
          "2842:       {",
          "2843:         input: \"a`b\",",
          "2844:         expected: '\"a``b\"',",
          "2845:       },",
          "2846:       {",
          "2847:         input: \"a`b`c\",",
          "2848:         expected: '\"a``b``c\"',",
          "2849:       },",
          "2850:     ],",
          "2851:     \"dollar signs ('$')\": [",
          "2852:       {",
          "2853:         input: \"a$b\",",
          "2854:         expected: '\"a`$b\"',",
          "2855:       },",
          "2856:       {",
          "2857:         input: \"a$b$c\",",
          "2858:         expected: '\"a`$b`$c\"',",
          "2859:       },",
          "2860:     ],",
          "2861:     \"left double quotation mark ('\u201c')\": [",
          "2862:       {",
          "2863:         input: \"a\u201cb\",",
          "2864:         expected: '\"a\u201c\u201cb\"',",
          "2865:       },",
          "2866:       {",
          "2867:         input: \"a\u201cb\u201cc\",",
          "2868:         expected: '\"a\u201c\u201cb\u201c\u201cc\"',",
          "2869:       },",
          "2870:     ],",
          "2871:     \"right double quotation mark ('\u201d')\": [",
          "2872:       {",
          "2873:         input: \"a\u201db\",",
          "2874:         expected: '\"a\u201d\u201db\"',",
          "2875:       },",
          "2876:       {",
          "2877:         input: \"a\u201db\u201dc\",",
          "2878:         expected: '\"a\u201d\u201db\u201d\u201dc\"',",
          "2879:       },",
          "2880:     ],",
          "2881:     \"double low-9 quotation mark ('\u201e')\": [",
          "2882:       {",
          "2883:         input: \"a\u201eb\",",
          "2884:         expected: '\"a\u201e\u201eb\"',",
          "2885:       },",
          "2886:       {",
          "2887:         input: \"a\u201eb\u201ec\",",
          "2888:         expected: '\"a\u201e\u201eb\u201e\u201ec\"',",
          "",
          "---------------"
        ],
        "test/integration/_macros.js||test/integration/_macros.js": [
          "File: test/integration/_macros.js -> test/integration/_macros.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     return example.expected.interpolation;",
          "67:   } else {",
          "68:     return example.expected.noInterpolation;",
          "",
          "[Removed Lines]",
          "60: function getExpectedValue(example, interpolation, quoted) {",
          "61:   if (quoted === true) {",
          "62:     return example.expected.quoted || example.expected.noInterpolation;",
          "63:   } else if (interpolation === false) {",
          "64:     return example.expected.noInterpolation;",
          "65:   } else if (interpolation === true) {",
          "",
          "[Added Lines]",
          "59: function getExpectedValue(example, interpolation) {",
          "60:   if (interpolation === true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:   const shells = getPlatformShells();",
          "81:   for (const shell of shells) {",
          "82:     const { escapeExamples } = getPlatformExamples(shell);",
          "83:     for (const example of escapeExamples) {",
          "84:       const input = example.input;",
          "86:       yield { expected, input, shell };",
          "87:     }",
          "88:   }",
          "",
          "[Removed Lines]",
          "79: function* escapeFixtures(interpolation, quoted) {",
          "85:       const expected = getExpectedValue(example, interpolation, quoted);",
          "",
          "[Added Lines]",
          "73: function* escapeFixtures(interpolation) {",
          "79:       const expected = getExpectedValue(example, interpolation);",
          "",
          "---------------"
        ],
        "test/unit/_macros.js||test/unit/_macros.js": [
          "File: test/unit/_macros.js -> test/unit/_macros.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import test from \"ava\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: function escapeControlCharacters(string) {",
          "16:   return string",
          "17:     .replace(/\\0/gu, \"\\\\u{0000}\")",
          "18:     .replace(/\\t/gu, \"\\\\t\")",
          "19:     .replace(/\\n/gu, \"\\\\n\")",
          "20:     .replace(/\\v/gu, \"\\\\v\")",
          "21:     .replace(/\\f/gu, \"\\\\f\")",
          "22:     .replace(/\\r/gu, \"\\\\r\")",
          "23:     .replace(/\\u0008/gu, \"\\\\u{0008}\")",
          "24:     .replace(/\\u001B/gu, \"\\\\u{001B}\")",
          "25:     .replace(/\\u0085/gu, \"\\\\u{0085}\")",
          "26:     .replace(/\\u009B/gu, \"\\\\u{009B}\")",
          "27:     .replace(/\\u00A0/gu, \"\\\\u{00A0}\")",
          "28:     .replace(/\\u1680/gu, \"\\\\u{1680}\")",
          "29:     .replace(/\\u2000/gu, \"\\\\u{2000}\")",
          "30:     .replace(/\\u2001/gu, \"\\\\u{2001}\")",
          "31:     .replace(/\\u2002/gu, \"\\\\u{2002}\")",
          "32:     .replace(/\\u2003/gu, \"\\\\u{2003}\")",
          "33:     .replace(/\\u2004/gu, \"\\\\u{2004}\")",
          "34:     .replace(/\\u2005/gu, \"\\\\u{2005}\")",
          "35:     .replace(/\\u2006/gu, \"\\\\u{2006}\")",
          "36:     .replace(/\\u2007/gu, \"\\\\u{2007}\")",
          "37:     .replace(/\\u2008/gu, \"\\\\u{2008}\")",
          "38:     .replace(/\\u2009/gu, \"\\\\u{2009}\")",
          "39:     .replace(/\\u200A/gu, \"\\\\u{200A}\")",
          "40:     .replace(/\\u2028/gu, \"\\\\u{2028}\")",
          "41:     .replace(/\\u2029/gu, \"\\\\u{2029}\")",
          "42:     .replace(/\\u202F/gu, \"\\\\u{202F}\")",
          "43:     .replace(/\\u205F/gu, \"\\\\u{205F}\")",
          "44:     .replace(/\\u3000/gu, \"\\\\u{3000}\")",
          "45:     .replace(/\\uFEFF/gu, \"\\\\u{FEFF}\");",
          "46: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: export const escape = test.macro({",
          "24:     const actual = escapeFn(input);",
          "25:     t.is(actual, expected);",
          "26:   },",
          "58:     interpolation = interpolation ? \"interpolation\" : \"no interpolation\";",
          "62:   },",
          "63: });",
          "",
          "[Removed Lines]",
          "22:   exec(t, { expected, getEscapeFunction, input, interpolation, quoted }) {",
          "23:     const escapeFn = getEscapeFunction({ interpolation, quoted });",
          "27:   title(_, { input, interpolation, quoted, shellName }) {",
          "28:     input = input",
          "29:       .replace(/\\0/gu, \"\\\\u{0000}\")",
          "30:       .replace(/\\t/gu, \"\\\\t\")",
          "31:       .replace(/\\n/gu, \"\\\\n\")",
          "32:       .replace(/\\v/gu, \"\\\\v\")",
          "33:       .replace(/\\f/gu, \"\\\\f\")",
          "34:       .replace(/\\r/gu, \"\\\\r\")",
          "35:       .replace(/\\u0008/gu, \"\\\\u{0008}\")",
          "36:       .replace(/\\u001B/gu, \"\\\\u{001B}\")",
          "37:       .replace(/\\u0085/gu, \"\\\\u{0085}\")",
          "38:       .replace(/\\u009B/gu, \"\\\\u{009B}\")",
          "39:       .replace(/\\u00A0/gu, \"\\\\u{00A0}\")",
          "40:       .replace(/\\u1680/gu, \"\\\\u{1680}\")",
          "41:       .replace(/\\u2000/gu, \"\\\\u{2000}\")",
          "42:       .replace(/\\u2001/gu, \"\\\\u{2001}\")",
          "43:       .replace(/\\u2002/gu, \"\\\\u{2002}\")",
          "44:       .replace(/\\u2003/gu, \"\\\\u{2003}\")",
          "45:       .replace(/\\u2004/gu, \"\\\\u{2004}\")",
          "46:       .replace(/\\u2005/gu, \"\\\\u{2005}\")",
          "47:       .replace(/\\u2006/gu, \"\\\\u{2006}\")",
          "48:       .replace(/\\u2007/gu, \"\\\\u{2007}\")",
          "49:       .replace(/\\u2008/gu, \"\\\\u{2008}\")",
          "50:       .replace(/\\u2009/gu, \"\\\\u{2009}\")",
          "51:       .replace(/\\u200A/gu, \"\\\\u{200A}\")",
          "52:       .replace(/\\u2028/gu, \"\\\\u{2028}\")",
          "53:       .replace(/\\u2029/gu, \"\\\\u{2029}\")",
          "54:       .replace(/\\u202F/gu, \"\\\\u{202F}\")",
          "55:       .replace(/\\u205F/gu, \"\\\\u{205F}\")",
          "56:       .replace(/\\u3000/gu, \"\\\\u{3000}\")",
          "57:       .replace(/\\uFEFF/gu, \"\\\\u{FEFF}\");",
          "59:     quoted = quoted ? \"quoted\" : \"not quoted\";",
          "61:     return `escape '${input}' for ${shellName} (${interpolation}, ${quoted})`;",
          "",
          "[Added Lines]",
          "61:   exec(t, { expected, getEscapeFunction, input, interpolation }) {",
          "62:     const escapeFn = getEscapeFunction({ interpolation });",
          "66:   title(_, { input, interpolation, shellName }) {",
          "67:     input = escapeControlCharacters(input);",
          "70:     return `escape '${input}' for ${shellName} (${interpolation})`;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:     t.is(actual, expected);",
          "82:   },",
          "83:   title(_, { input, shellName }) {",
          "84:     return `quote '${input}' for ${shellName}`;",
          "85:   },",
          "86: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     input = escapeControlCharacters(input);",
          "",
          "---------------"
        ],
        "test/unit/main/escape.test.js||test/unit/main/escape.test.js": [
          "File: test/unit/main/escape.test.js -> test/unit/main/escape.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   t.true(t.context.deps.getEscapeFunction.alwaysCalledWithExactly(shellName));",
          "60: });",
          "62: for (const shell of [undefined, true, false]) {",
          "63:   testProp(",
          "64:     `shell is \\`${shell}\\``,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: testProp(\"escaping\", [fc.string()], (t, inputArg) => {",
          "63:   t.context.args.arg = inputArg;",
          "65:   escapeShellArg(t.context.args, t.context.deps);",
          "67:   t.true(",
          "68:     t.context.deps.escapeFunction.calledWithExactly(inputArg, sinon.match.any)",
          "69:   );",
          "70: });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:   );",
          "156: }",
          "177: testProp(",
          "178:   \"the escaping of the argument\",",
          "179:   [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],",
          "",
          "[Removed Lines]",
          "158: for (const quoted of [undefined, true, false]) {",
          "159:   testProp(",
          "160:     `quoted is ${quoted}`,",
          "161:     [arbitrary.shescapeOptions()],",
          "162:     (t, options = {}) => {",
          "163:       options.quoted = quoted;",
          "164:       t.context.args.options = options;",
          "166:       escapeShellArg(t.context.args, t.context.deps);",
          "167:       t.true(",
          "168:         t.context.deps.escapeFunction.calledWithExactly(",
          "169:           sinon.match.any,",
          "170:           sinon.match({ quoted: false })",
          "171:         )",
          "172:       );",
          "173:     }",
          "174:   );",
          "175: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit/main/quote.test.js||test/unit/main/quote.test.js": [
          "File: test/unit/main/quote.test.js -> test/unit/main/quote.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: test.beforeEach((t) => {",
          "18:   const getDefaultShell = sinon.stub();",
          "20:   const getQuoteFunction = sinon.stub();",
          "21:   const getShellName = sinon.stub();",
          "24:   const quoteFunction = sinon.stub();",
          "27:   getQuoteFunction.returns(quoteFunction);",
          "29:   t.context.args = {",
          "",
          "[Removed Lines]",
          "19:   const getEscapeFunction = sinon.stub();",
          "23:   const escapeFunction = sinon.stub();",
          "26:   getEscapeFunction.returns(escapeFunction);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:   };",
          "38:   t.context.deps = {",
          "39:     getDefaultShell,",
          "41:     getQuoteFunction,",
          "42:     getShellName,",
          "45:     quoteFunction,",
          "46:   };",
          "47: });",
          "",
          "[Removed Lines]",
          "40:     getEscapeFunction,",
          "44:     escapeFunction,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:   t.is(result, escapedArg);",
          "54: });",
          "67: testProp(\"getting the quote function\", [fc.string()], (t, shellName) => {",
          "68:   t.context.deps.getQuoteFunction.resetHistory();",
          "",
          "[Removed Lines]",
          "56: testProp(\"getting the escape function\", [fc.string()], (t, shellName) => {",
          "57:   t.context.deps.getEscapeFunction.resetHistory();",
          "59:   t.context.deps.getShellName.returns(shellName);",
          "61:   quoteShellArg(t.context.args, t.context.deps);",
          "63:   t.is(t.context.deps.getEscapeFunction.callCount, 1);",
          "64:   t.true(t.context.deps.getEscapeFunction.alwaysCalledWithExactly(shellName));",
          "65: });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:   t.true(t.context.deps.getQuoteFunction.alwaysCalledWithExactly(shellName));",
          "76: });",
          "81:   quoteShellArg(t.context.args, t.context.deps);",
          "84: });",
          "86: for (const shell of [undefined, true, false]) {",
          "",
          "[Removed Lines]",
          "78: testProp(\"quoting\", [fc.string()], (t, escapedArg) => {",
          "79:   t.context.deps.escapeFunction.returns(escapedArg);",
          "83:   t.true(t.context.deps.quoteFunction.calledWithExactly(escapedArg));",
          "",
          "[Added Lines]",
          "62: testProp(\"quoting\", [fc.string()], (t, inputArg) => {",
          "63:   t.context.args.arg = inputArg;",
          "67:   t.true(t.context.deps.quoteFunction.calledWithExactly(inputArg));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:   );",
          "144: });",
          "178: testProp(",
          "179:   \"the escaping of the argument\",",
          "180:   [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],",
          "",
          "[Removed Lines]",
          "146: testProp(",
          "147:   \"the used interpolation value\",",
          "148:   [arbitrary.shescapeOptions()],",
          "149:   (t, options = {}) => {",
          "150:     t.context.args.options = options;",
          "152:     quoteShellArg(t.context.args, t.context.deps);",
          "153:     t.true(",
          "154:       t.context.deps.escapeFunction.calledWithExactly(",
          "155:         sinon.match.any,",
          "156:         sinon.match({ interpolation: false })",
          "157:       )",
          "158:     );",
          "159:   }",
          "160: );",
          "162: testProp(",
          "163:   \"the used quoted value\",",
          "164:   [arbitrary.shescapeOptions()],",
          "165:   (t, options = {}) => {",
          "166:     t.context.args.options = options;",
          "168:     quoteShellArg(t.context.args, t.context.deps);",
          "169:     t.true(",
          "170:       t.context.deps.escapeFunction.calledWithExactly(",
          "171:         sinon.match.any,",
          "172:         sinon.match({ quoted: true })",
          "173:       )",
          "174:     );",
          "175:   }",
          "176: );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit/unix/csh.test.js||test/unit/unix/csh.test.js": [
          "File: test/unit/unix/csh.test.js -> test/unit/unix/csh.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:       testCharacter +",
          "41:       baseString.substring(insertIndex);",
          "47:     const result = escapeFn(testStr);",
          "48:     t.assert(result.includes(`'${testCharacter}'`));",
          "49:   }",
          "",
          "[Removed Lines]",
          "43:     const escapeFn = csh.getEscapeFunction({",
          "44:       interpolation: true,",
          "45:       quoted: false,",
          "46:     });",
          "",
          "[Added Lines]",
          "43:     const escapeFn = csh.getEscapeFunction({ interpolation: true });",
          "",
          "---------------"
        ],
        "test/unit/unix/facade.test.js||test/unit/unix/facade.test.js": [
          "File: test/unit/unix/facade.test.js -> test/unit/unix/facade.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   \"escape function for supported shell\",",
          "16:   [arbitrary.unixShell(), fc.string()],",
          "17:   (t, shellName, arg) => {",
          "19:     t.is(",
          "20:       facade.getEscapeFunction(shellName)(arg, options),",
          "21:       unix.getEscapeFunction(shellName, options)(arg)",
          "22:     );",
          "31:     t.is(",
          "32:       facade.getEscapeFunction(shellName)(arg, options),",
          "33:       unix.getEscapeFunction(shellName, options)(arg)",
          "",
          "[Removed Lines]",
          "18:     let options = { interpolation: false, quoted: false };",
          "24:     options = { interpolation: true, quoted: false };",
          "25:     t.is(",
          "26:       facade.getEscapeFunction(shellName)(arg, options),",
          "27:       unix.getEscapeFunction(shellName, options)(arg)",
          "28:     );",
          "30:     options = { interpolation: false, quoted: true };",
          "",
          "[Added Lines]",
          "18:     let options = { interpolation: false };",
          "24:     options = { interpolation: true };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     t.is(typeof quoteFn, \"function\");",
          "53:     const result = quoteFn(arg);",
          "54:     t.is(typeof result, \"string\");",
          "56:     t.regex(result, /^(\".*\"|'.*')$/u);",
          "57:   }",
          "58: );",
          "",
          "[Removed Lines]",
          "55:     t.is(result.substring(1, arg.length + 1), arg);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit/unix/index.test.js||test/unit/unix/index.test.js": [
          "File: test/unit/unix/index.test.js -> test/unit/unix/index.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: });",
          "26: test(\"escape function for bash\", (t) => {",
          "28:   t.is(",
          "29:     unix.getEscapeFunction(constants.binBash, options),",
          "30:     bash.getEscapeFunction(options)",
          "31:   );",
          "40:   t.is(",
          "41:     unix.getEscapeFunction(constants.binBash, options),",
          "42:     bash.getEscapeFunction(options)",
          "",
          "[Removed Lines]",
          "27:   let options = { interpolation: false, quoted: false };",
          "33:   options = { interpolation: true, quoted: false };",
          "34:   t.is(",
          "35:     unix.getEscapeFunction(constants.binBash, options),",
          "36:     bash.getEscapeFunction(options)",
          "37:   );",
          "39:   options = { interpolation: false, quoted: true };",
          "",
          "[Added Lines]",
          "27:   let options = { interpolation: false };",
          "33:   options = { interpolation: true };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: });",
          "46: test(\"escape function for csh\", (t) => {",
          "54:   t.is(",
          "55:     unix.getEscapeFunction(constants.binCsh, options),",
          "56:     csh.getEscapeFunction(options)",
          "57:   );",
          "60:   t.is(",
          "61:     unix.getEscapeFunction(constants.binCsh, options),",
          "62:     csh.getEscapeFunction(options)",
          "",
          "[Removed Lines]",
          "47:   let options = { interpolation: false, quoted: false };",
          "48:   t.is(",
          "49:     unix.getEscapeFunction(constants.binCsh, options),",
          "50:     csh.getEscapeFunction(options)",
          "51:   );",
          "53:   options = { interpolation: true, quoted: false };",
          "59:   options = { interpolation: false, quoted: true };",
          "",
          "[Added Lines]",
          "41:   let options = { interpolation: false };",
          "47:   options = { interpolation: true };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64: });",
          "66: test(\"escape function for dash\", (t) => {",
          "68:   t.is(",
          "69:     unix.getEscapeFunction(constants.binDash, options),",
          "70:     dash.getEscapeFunction(options)",
          "71:   );",
          "80:   t.is(",
          "81:     unix.getEscapeFunction(constants.binDash, options),",
          "82:     dash.getEscapeFunction(options)",
          "",
          "[Removed Lines]",
          "67:   let options = { interpolation: false, quoted: false };",
          "73:   options = { interpolation: true, quoted: false };",
          "74:   t.is(",
          "75:     unix.getEscapeFunction(constants.binDash, options),",
          "76:     dash.getEscapeFunction(options)",
          "77:   );",
          "79:   options = { interpolation: false, quoted: true };",
          "",
          "[Added Lines]",
          "55:   let options = { interpolation: false };",
          "61:   options = { interpolation: true };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84: });",
          "86: test(\"escape function for zsh\", (t) => {",
          "94:   t.is(",
          "95:     unix.getEscapeFunction(constants.binZsh, options),",
          "96:     zsh.getEscapeFunction(options)",
          "97:   );",
          "100:   t.is(",
          "101:     unix.getEscapeFunction(constants.binZsh, options),",
          "102:     zsh.getEscapeFunction(options)",
          "",
          "[Removed Lines]",
          "87:   let options = { interpolation: false, quoted: false };",
          "88:   t.is(",
          "89:     unix.getEscapeFunction(constants.binZsh, options),",
          "90:     zsh.getEscapeFunction(options)",
          "91:   );",
          "93:   options = { interpolation: true, quoted: false };",
          "99:   options = { interpolation: false, quoted: true };",
          "",
          "[Added Lines]",
          "69:   let options = { interpolation: false };",
          "75:   options = { interpolation: true };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106: testProp(",
          "107:   \"escape function for unsupported shell\",",
          "111:     t.is(result, undefined);",
          "112:   }",
          "113: );",
          "",
          "[Removed Lines]",
          "108:   [arbitrary.unsupportedUnixShell(), fc.boolean(), fc.boolean()],",
          "109:   (t, shellName, interpolation, quoted) => {",
          "110:     const result = unix.getEscapeFunction(shellName, { interpolation, quoted });",
          "",
          "[Added Lines]",
          "84:   [arbitrary.unsupportedUnixShell(), fc.boolean()],",
          "85:   (t, shellName, interpolation) => {",
          "86:     const result = unix.getEscapeFunction(shellName, { interpolation });",
          "",
          "---------------"
        ],
        "test/unit/unix/shells.test.js||test/unit/unix/shells.test.js": [
          "File: test/unit/unix/shells.test.js -> test/unit/unix/shells.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:       input,",
          "31:       getEscapeFunction: shellExports.getEscapeFunction,",
          "32:       interpolation: false,",
          "34:       shellName,",
          "35:     });",
          "",
          "[Removed Lines]",
          "33:       quoted: false,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:       input,",
          "40:       getEscapeFunction: shellExports.getEscapeFunction,",
          "41:       interpolation: true,",
          "52:       shellName,",
          "53:     });",
          "54:   });",
          "56:   quoteFixtures.forEach(({ input, expected }) => {",
          "57:     test(macros.quote, {",
          "59:       input,",
          "60:       getQuoteFunction: shellExports.getQuoteFunction,",
          "61:       shellName,",
          "",
          "[Removed Lines]",
          "42:       quoted: false,",
          "43:       shellName,",
          "44:     });",
          "46:     test(macros.escape, {",
          "47:       expected: expected.quoted || expected.noInterpolation,",
          "48:       input,",
          "49:       getEscapeFunction: shellExports.getEscapeFunction,",
          "50:       interpolation: false,",
          "51:       quoted: true,",
          "58:       expected: expected.notEscaped,",
          "",
          "[Added Lines]",
          "47:       expected,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:   redosFixtures.forEach((input, id) => {",
          "66:     test(`${shellName}, ReDoS #${id}`, (t) => {",
          "71:       escape(input);",
          "72:       t.pass();",
          "73:     });",
          "",
          "[Removed Lines]",
          "67:       const escape = shellExports.getEscapeFunction({",
          "68:         interpolation: true,",
          "69:         quoted: false,",
          "70:       });",
          "",
          "[Added Lines]",
          "56:       const escape = shellExports.getEscapeFunction({ interpolation: true });",
          "",
          "---------------"
        ],
        "test/unit/win/facade.test.js||test/unit/win/facade.test.js": [
          "File: test/unit/win/facade.test.js -> test/unit/win/facade.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   \"escape function for supported shell\",",
          "16:   [arbitrary.windowsShell(), fc.string()],",
          "17:   (t, shellName, arg) => {",
          "19:     t.is(",
          "20:       facade.getEscapeFunction(shellName)(arg, options),",
          "21:       win.getEscapeFunction(shellName, options)(arg)",
          "22:     );",
          "31:     t.is(",
          "32:       facade.getEscapeFunction(shellName)(arg, options),",
          "33:       win.getEscapeFunction(shellName, options)(arg)",
          "",
          "[Removed Lines]",
          "18:     let options = { interpolation: false, quoted: false };",
          "24:     options = { interpolation: true, quoted: false };",
          "25:     t.is(",
          "26:       facade.getEscapeFunction(shellName)(arg, options),",
          "27:       win.getEscapeFunction(shellName, options)(arg)",
          "28:     );",
          "30:     options = { interpolation: false, quoted: true };",
          "",
          "[Added Lines]",
          "18:     let options = { interpolation: false };",
          "24:     options = { interpolation: true };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     t.is(typeof quoteFn, \"function\");",
          "53:     const result = quoteFn(arg);",
          "54:     t.is(typeof result, \"string\");",
          "56:     t.regex(result, /^(\".*\"|'.*')$/u);",
          "57:   }",
          "58: );",
          "",
          "[Removed Lines]",
          "55:     t.is(result.substring(1, arg.length + 1), arg);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit/win/index.test.js||test/unit/win/index.test.js": [
          "File: test/unit/win/index.test.js -> test/unit/win/index.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: );",
          "49: test(\"escape function for CMD\", (t) => {",
          "51:   t.is(",
          "52:     win.getEscapeFunction(constants.binCmd, options),",
          "53:     cmd.getEscapeFunction(options)",
          "54:   );",
          "63:   t.is(",
          "64:     win.getEscapeFunction(constants.binCmd, options),",
          "65:     cmd.getEscapeFunction(options)",
          "",
          "[Removed Lines]",
          "50:   let options = { interpolation: false, quoted: false };",
          "56:   options = { interpolation: true, quoted: false };",
          "57:   t.is(",
          "58:     win.getEscapeFunction(constants.binCmd, options),",
          "59:     cmd.getEscapeFunction(options)",
          "60:   );",
          "62:   options = { interpolation: false, quoted: true };",
          "",
          "[Added Lines]",
          "50:   let options = { interpolation: false };",
          "56:   options = { interpolation: true };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: });",
          "69: test(\"escape function for PowerShell\", (t) => {",
          "77:   t.is(",
          "78:     win.getEscapeFunction(constants.binPowerShell, options),",
          "79:     powershell.getEscapeFunction(options)",
          "80:   );",
          "83:   t.is(",
          "84:     win.getEscapeFunction(constants.binPowerShell, options),",
          "85:     powershell.getEscapeFunction(options)",
          "",
          "[Removed Lines]",
          "70:   let options = { interpolation: false, quoted: false };",
          "71:   t.is(",
          "72:     win.getEscapeFunction(constants.binPowerShell, options),",
          "73:     powershell.getEscapeFunction(options)",
          "74:   );",
          "76:   options = { interpolation: true, quoted: false };",
          "82:   options = { interpolation: false, quoted: true };",
          "",
          "[Added Lines]",
          "64:   let options = { interpolation: false };",
          "70:   options = { interpolation: true };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89: testProp(",
          "90:   \"escape function for unsupported shell\",",
          "94:     t.is(result, undefined);",
          "95:   }",
          "96: );",
          "",
          "[Removed Lines]",
          "91:   [arbitrary.unsupportedWindowsShell(), fc.boolean(), fc.boolean()],",
          "92:   (t, shellName, interpolation, quoted) => {",
          "93:     const result = win.getEscapeFunction(shellName, { interpolation, quoted });",
          "",
          "[Added Lines]",
          "79:   [arbitrary.unsupportedWindowsShell(), fc.boolean()],",
          "80:   (t, shellName, interpolation) => {",
          "81:     const result = win.getEscapeFunction(shellName, { interpolation });",
          "",
          "---------------"
        ],
        "test/unit/win/shells.test.js||test/unit/win/shells.test.js": [
          "File: test/unit/win/shells.test.js -> test/unit/win/shells.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:       input,",
          "26:       getEscapeFunction: shellExports.getEscapeFunction,",
          "27:       interpolation: false,",
          "29:       shellName,",
          "30:     });",
          "",
          "[Removed Lines]",
          "28:       quoted: false,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:       input,",
          "35:       getEscapeFunction: shellExports.getEscapeFunction,",
          "36:       interpolation: true,",
          "47:       shellName,",
          "48:     });",
          "49:   });",
          "51:   quoteFixtures.forEach(({ input, expected }) => {",
          "52:     test(macros.quote, {",
          "54:       input,",
          "55:       getQuoteFunction: shellExports.getQuoteFunction,",
          "56:       shellName,",
          "",
          "[Removed Lines]",
          "37:       quoted: false,",
          "38:       shellName,",
          "39:     });",
          "41:     test(macros.escape, {",
          "42:       expected: expected.quoted || expected.noInterpolation,",
          "43:       input,",
          "44:       getEscapeFunction: shellExports.getEscapeFunction,",
          "45:       interpolation: false,",
          "46:       quoted: true,",
          "53:       expected: expected.notEscaped,",
          "",
          "[Added Lines]",
          "42:       expected,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b888aafd679972b4c31474377d5a40f41a16b1fe",
      "candidate_info": {
        "commit_hash": "b888aafd679972b4c31474377d5a40f41a16b1fe",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/b888aafd679972b4c31474377d5a40f41a16b1fe",
        "files": [
          "CHANGELOG.md",
          "src/unix.js",
          "test/fixtures/unix.cjs"
        ],
        "message": "Separate Dash escaping from Bash escaping (#272)\n\n* Add dedicated escaping logic for Dash\n\nBased on the escaping logic for Bash, notably with escaping for tildes\n(`~`) after equality signs (`=`) omitted. This isn't necessary based on\nmanual testing, and can be confirmed by running the existing fuzz target\non Dash (given that the corpus included in git contains various test\ncases for the scenario, from [1]).\n\n* Update fixtures for dash\n\nUpdate test cases related to tildes (`~`) after equality signs (`=`) as\nthose don't need to be escaped for Dash based on manual testing.\n\n* Update CHANGELOG\n\n\n--\n1. https://github.com/ericcornelissen/shescape/issues/169",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "test/fixtures/unix.cjs||test/fixtures/unix.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "test/fixtures/unix.cjs||test/fixtures/unix.cjs"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "test/fixtures/unix.cjs||test/fixtures/unix.cjs"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   return result;",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: function escapeArgDash(arg, interpolation) {",
          "69:   let result = arg.replace(/\\u{0}/gu, \"\");",
          "71:   if (interpolation) {",
          "72:     result = result",
          "73:       .replace(/\\\\/g, \"\\\\\\\\\")",
          "74:       .replace(/^(~|#)/g, \"\\\\$1\")",
          "75:       .replace(/(\\*|\\?)/gu, \"\\\\$1\")",
          "76:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
          "77:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
          "78:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
          "79:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\");",
          "80:   } else {",
          "81:     result = result.replace(/'/g, `'\\\\''`);",
          "82:   }",
          "84:   return result;",
          "85: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: const escapeFunctionsByShell = new Map([",
          "106:   [binBash, escapeArgBash],",
          "108:   [binZsh, escapeArgZsh],",
          "109: ]);",
          "",
          "[Removed Lines]",
          "107:   [binDash, escapeArgBash],",
          "",
          "[Added Lines]",
          "133:   [binDash, escapeArgDash],",
          "",
          "---------------"
        ],
        "test/fixtures/unix.cjs||test/fixtures/unix.cjs": [
          "File: test/fixtures/unix.cjs -> test/fixtures/unix.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "474:       },",
          "475:       {",
          "476:         input: \"a=~\",",
          "478:       },",
          "479:       {",
          "480:         input: \"a~b=~\",",
          "482:       },",
          "483:       {",
          "484:         input: \"a=b~\",",
          "",
          "[Removed Lines]",
          "477:         expected: { interpolation: \"a=\\\\~\", noInterpolation: \"a=~\" },",
          "481:         expected: { interpolation: \"a~b=\\\\~\", noInterpolation: \"a~b=~\" },",
          "",
          "[Added Lines]",
          "477:         expected: { interpolation: \"a=~\", noInterpolation: \"a=~\" },",
          "481:         expected: { interpolation: \"a~b=~\", noInterpolation: \"a~b=~\" },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "490:       },",
          "491:       {",
          "492:         input: \"a=:~\",",
          "494:       },",
          "495:       {",
          "496:         input: \"a=b:~\",",
          "498:       },",
          "499:       {",
          "500:         input: \"a=~:\",",
          "502:       },",
          "503:       {",
          "504:         input: \"a=~:b\",",
          "506:       },",
          "507:       {",
          "508:         input: \"a=~:~\",",
          "510:       },",
          "511:       {",
          "512:         input: \"a=:~:\",",
          "514:       },",
          "515:       {",
          "516:         input: \"a=:~:b\",",
          "518:       },",
          "519:       {",
          "520:         input: \"a=b:~:\",",
          "522:       },",
          "523:       {",
          "524:         input: \"a=b:~:c\",",
          "526:       },",
          "527:       {",
          "528:         input: \"a=~=\",",
          "530:       },",
          "531:       {",
          "532:         input: \"a=~-\",",
          "534:       },",
          "535:       {",
          "536:         input: \"a=~+\",",
          "538:       },",
          "539:       {",
          "540:         input: \"a=~/\",",
          "542:       },",
          "543:       {",
          "544:         input: \"a=~0\",",
          "546:       },",
          "547:       {",
          "548:         input: \"a=~ \",",
          "550:       },",
          "551:     ],",
          "552:     \"hashtags ('#')\": [",
          "",
          "[Removed Lines]",
          "493:         expected: { interpolation: \"a=:\\\\~\", noInterpolation: \"a=:~\" },",
          "497:         expected: { interpolation: \"a=b:\\\\~\", noInterpolation: \"a=b:~\" },",
          "501:         expected: { interpolation: \"a=\\\\~:\", noInterpolation: \"a=~:\" },",
          "505:         expected: { interpolation: \"a=\\\\~:b\", noInterpolation: \"a=~:b\" },",
          "509:         expected: { interpolation: \"a=\\\\~:\\\\~\", noInterpolation: \"a=~:~\" },",
          "513:         expected: { interpolation: \"a=:\\\\~:\", noInterpolation: \"a=:~:\" },",
          "517:         expected: { interpolation: \"a=:\\\\~:b\", noInterpolation: \"a=:~:b\" },",
          "521:         expected: { interpolation: \"a=b:\\\\~:\", noInterpolation: \"a=b:~:\" },",
          "525:         expected: { interpolation: \"a=b:\\\\~:c\", noInterpolation: \"a=b:~:c\" },",
          "529:         expected: { interpolation: \"a=\\\\~=\", noInterpolation: \"a=~=\" },",
          "533:         expected: { interpolation: \"a=\\\\~-\", noInterpolation: \"a=~-\" },",
          "537:         expected: { interpolation: \"a=\\\\~+\", noInterpolation: \"a=~+\" },",
          "541:         expected: { interpolation: \"a=\\\\~/\", noInterpolation: \"a=~/\" },",
          "545:         expected: { interpolation: \"a=\\\\~0\", noInterpolation: \"a=~0\" },",
          "549:         expected: { interpolation: \"a=\\\\~ \", noInterpolation: \"a=~ \" },",
          "",
          "[Added Lines]",
          "493:         expected: { interpolation: \"a=:~\", noInterpolation: \"a=:~\" },",
          "497:         expected: { interpolation: \"a=b:~\", noInterpolation: \"a=b:~\" },",
          "501:         expected: { interpolation: \"a=~:\", noInterpolation: \"a=~:\" },",
          "505:         expected: { interpolation: \"a=~:b\", noInterpolation: \"a=~:b\" },",
          "509:         expected: { interpolation: \"a=~:~\", noInterpolation: \"a=~:~\" },",
          "513:         expected: { interpolation: \"a=:~:\", noInterpolation: \"a=:~:\" },",
          "517:         expected: { interpolation: \"a=:~:b\", noInterpolation: \"a=:~:b\" },",
          "521:         expected: { interpolation: \"a=b:~:\", noInterpolation: \"a=b:~:\" },",
          "525:         expected: { interpolation: \"a=b:~:c\", noInterpolation: \"a=b:~:c\" },",
          "529:         expected: { interpolation: \"a=~=\", noInterpolation: \"a=~=\" },",
          "533:         expected: { interpolation: \"a=~-\", noInterpolation: \"a=~-\" },",
          "537:         expected: { interpolation: \"a=~+\", noInterpolation: \"a=~+\" },",
          "541:         expected: { interpolation: \"a=~/\", noInterpolation: \"a=~/\" },",
          "545:         expected: { interpolation: \"a=~0\", noInterpolation: \"a=~0\" },",
          "549:         expected: { interpolation: \"a=~ \", noInterpolation: \"a=~ \" },",
          "",
          "---------------"
        ]
      }
    }
  ]
}