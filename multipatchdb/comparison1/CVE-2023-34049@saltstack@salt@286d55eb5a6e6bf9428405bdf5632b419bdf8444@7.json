{
  "cve_id": "CVE-2023-34049",
  "cve_desc": "The Salt-SSH pre-flight option copies the script to the target at a predictable path, which allows an attacker to force Salt-SSH to run their script. If an attacker has access to the target VM and knows the path to the pre-flight script before it runs they can ensure Salt-SSH runs their script with the privileges of the user running Salt-SSH.\u00a0Do not make the copy path on the target predictable and ensure we check return codes of the scp command if the copy fails.",
  "repo": "saltstack/salt",
  "patch_hash": "286d55eb5a6e6bf9428405bdf5632b419bdf8444",
  "patch_info": {
    "commit_hash": "286d55eb5a6e6bf9428405bdf5632b419bdf8444",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/286d55eb5a6e6bf9428405bdf5632b419bdf8444",
    "files": [
      "tests/integration/ssh/test_pre_flight.py",
      "tests/pytests/integration/ssh/test_pre_flight.py"
    ],
    "message": "Add pytest integration pre_flight integration tests for CVE-2023-34049",
    "before_after_code_files": [
      "tests/integration/ssh/test_pre_flight.py||tests/integration/ssh/test_pre_flight.py",
      "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
    ]
  },
  "patch_diff": {
    "tests/integration/ssh/test_pre_flight.py||tests/integration/ssh/test_pre_flight.py": [
      "File: tests/integration/ssh/test_pre_flight.py -> tests/integration/ssh/test_pre_flight.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py": [
      "File: tests/pytests/integration/ssh/test_pre_flight.py -> tests/pytests/integration/ssh/test_pre_flight.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: Test for ssh_pre_flight roster option",
      "3: \"\"\"",
      "5: import grp",
      "6: import os",
      "7: import pathlib",
      "8: import pwd",
      "9: import shutil",
      "10: import subprocess",
      "12: import pytest",
      "13: import yaml",
      "14: from saltfactories.utils import random_string",
      "16: import salt.utils.files",
      "19: def _custom_roster(roster_file, roster_data):",
      "20:     with salt.utils.files.fopen(roster_file, \"r\") as fp:",
      "21:         data = salt.utils.yaml.safe_load(fp)",
      "22:     for key, item in roster_data.items():",
      "23:         data[\"localhost\"][key] = item",
      "24:     with salt.utils.files.fopen(roster_file, \"w\") as fp:",
      "25:         yaml.safe_dump(data, fp)",
      "28: @pytest.fixture",
      "29: def _create_roster(salt_ssh_roster_file, tmp_path):",
      "30:     ret = {}",
      "31:     ret[\"roster\"] = salt_ssh_roster_file",
      "32:     ret[\"data\"] = {\"ssh_pre_flight\": str(tmp_path / \"ssh_pre_flight.sh\")}",
      "33:     ret[\"test_script\"] = str(tmp_path / \"test-pre-flight-script-worked.txt\")",
      "34:     ret[\"thin_dir\"] = tmp_path / \"thin_dir\"",
      "36:     with salt.utils.files.fopen(salt_ssh_roster_file, \"r\") as fp:",
      "37:         data = salt.utils.yaml.safe_load(fp)",
      "38:     pre_flight_script = ret[\"data\"][\"ssh_pre_flight\"]",
      "39:     data[\"localhost\"][\"ssh_pre_flight\"] = pre_flight_script",
      "40:     data[\"localhost\"][\"thin_dir\"] = str(ret[\"thin_dir\"])",
      "41:     with salt.utils.files.fopen(salt_ssh_roster_file, \"w\") as fp:",
      "42:         yaml.safe_dump(data, fp)",
      "44:     with salt.utils.files.fopen(pre_flight_script, \"w\") as fp:",
      "45:         fp.write(\"touch {}\".format(ret[\"test_script\"]))",
      "47:     yield ret",
      "48:     if ret[\"thin_dir\"].exists():",
      "49:         shutil.rmtree(ret[\"thin_dir\"])",
      "52: @pytest.mark.slow_test",
      "53: def test_ssh_pre_flight(salt_ssh_cli, caplog, _create_roster):",
      "54:     \"\"\"",
      "55:     test ssh when ssh_pre_flight is set",
      "56:     ensure the script runs successfully",
      "57:     \"\"\"",
      "58:     ret = salt_ssh_cli.run(\"test.ping\")",
      "59:     assert ret.returncode == 0",
      "61:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "64: @pytest.mark.slow_test",
      "65: def test_ssh_run_pre_flight(salt_ssh_cli, _create_roster):",
      "66:     \"\"\"",
      "67:     test ssh when --pre-flight is passed to salt-ssh",
      "68:     to ensure the script runs successfully",
      "69:     \"\"\"",
      "70:     # make sure we previously ran a command so the thin dir exists",
      "71:     ret = salt_ssh_cli.run(\"test.ping\")",
      "72:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "74:     # Now remeove the script to ensure pre_flight doesn't run",
      "75:     # without --pre-flight",
      "76:     pathlib.Path(_create_roster[\"test_script\"]).unlink()",
      "78:     assert salt_ssh_cli.run(\"test.ping\").returncode == 0",
      "79:     assert not pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "81:     # Now ensure",
      "82:     ret = salt_ssh_cli.run(",
      "83:         \"test.ping\",",
      "84:         \"--pre-flight\",",
      "85:     )",
      "86:     assert ret.returncode == 0",
      "87:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "90: @pytest.mark.slow_test",
      "91: def test_ssh_run_pre_flight_args(salt_ssh_cli, _create_roster):",
      "92:     \"\"\"",
      "93:     test ssh when --pre-flight is passed to salt-ssh",
      "94:     to ensure the script runs successfully passing some args",
      "95:     \"\"\"",
      "96:     _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight_args\": \"foobar test\"})",
      "97:     # Create pre_flight script that accepts args",
      "98:     test_script = _create_roster[\"test_script\"]",
      "99:     test_script_1 = pathlib.Path(test_script + \"-foobar\")",
      "100:     test_script_2 = pathlib.Path(test_script + \"-test\")",
      "101:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
      "102:         fp.write(",
      "103:             f\"\"\"",
      "104:         touch {str(test_script)}-$1",
      "105:         touch {str(test_script)}-$2",
      "106:         \"\"\"",
      "107:         )",
      "108:     ret = salt_ssh_cli.run(\"test.ping\")",
      "109:     assert ret.returncode == 0",
      "110:     assert test_script_1.exists()",
      "111:     assert test_script_2.exists()",
      "112:     pathlib.Path(test_script_1).unlink()",
      "113:     pathlib.Path(test_script_2).unlink()",
      "115:     ret = salt_ssh_cli.run(\"test.ping\")",
      "116:     assert ret.returncode == 0",
      "117:     assert not test_script_1.exists()",
      "118:     assert not test_script_2.exists()",
      "120:     ret = salt_ssh_cli.run(",
      "121:         \"test.ping\",",
      "122:         \"--pre-flight\",",
      "123:     )",
      "124:     assert ret.returncode == 0",
      "125:     assert test_script_1.exists()",
      "126:     assert test_script_2.exists()",
      "129: @pytest.mark.slow_test",
      "130: def test_ssh_run_pre_flight_args_prevent_injection(",
      "131:     salt_ssh_cli, _create_roster, tmp_path",
      "132: ):",
      "133:     \"\"\"",
      "134:     test ssh when --pre-flight is passed to salt-ssh",
      "135:     and evil arguments are used in order to produce shell injection",
      "136:     \"\"\"",
      "137:     injected_file = tmp_path / \"injection\"",
      "138:     _custom_roster(",
      "139:         salt_ssh_cli.roster_file,",
      "140:         {\"ssh_pre_flight_args\": f\"foobar; echo injected > {str(injected_file)}\"},",
      "141:     )",
      "142:     # Create pre_flight script that accepts args",
      "143:     test_script = _create_roster[\"test_script\"]",
      "144:     test_script_1 = pathlib.Path(test_script + \"-echo\")",
      "145:     test_script_2 = pathlib.Path(test_script + \"-foobar;\")",
      "146:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
      "147:         fp.write(",
      "148:             f\"\"\"",
      "149:         touch {str(test_script)}-$1",
      "150:         touch {str(test_script)}-$2",
      "151:         \"\"\"",
      "152:         )",
      "154:     # make sure we previously ran a command so the thin dir exists",
      "155:     ret = salt_ssh_cli.run(\"test.ping\")",
      "156:     assert ret.returncode == 0",
      "157:     assert test_script_1.exists()",
      "158:     assert test_script_2.exists()",
      "159:     test_script_1.unlink()",
      "160:     test_script_2.unlink()",
      "161:     assert not injected_file.is_file()",
      "163:     ret = salt_ssh_cli.run(",
      "164:         \"test.ping\",",
      "165:         \"--pre-flight\",",
      "166:     )",
      "167:     assert ret.returncode == 0",
      "169:     assert test_script_1.exists()",
      "170:     assert test_script_2.exists()",
      "171:     assert not pathlib.Path(",
      "172:         injected_file",
      "173:     ).is_file(), \"File injection suceeded. This shouldn't happend\"",
      "176: @pytest.mark.flaky(max_runs=4)",
      "177: @pytest.mark.slow_test",
      "178: def test_ssh_run_pre_flight_failure(salt_ssh_cli, _create_roster):",
      "179:     \"\"\"",
      "180:     test ssh_pre_flight when there is a failure",
      "181:     in the script.",
      "182:     \"\"\"",
      "183:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
      "184:         fp_.write(\"exit 2\")",
      "186:     ret = salt_ssh_cli.run(",
      "187:         \"test.ping\",",
      "188:         \"--pre-flight\",",
      "189:     )",
      "190:     assert ret.data[\"retcode\"] == 2",
      "193: @pytest.fixture",
      "194: def account():",
      "195:     username = random_string(\"test-account-\", uppercase=False)",
      "196:     with pytest.helpers.create_account(username=username) as account:",
      "197:         yield account",
      "200: @pytest.mark.slow_test",
      "201: def test_ssh_pre_flight_script(salt_ssh_cli, caplog, _create_roster, tmp_path, account):",
      "202:     \"\"\"",
      "203:     Test to ensure user cannot create and run a script",
      "204:     with the expected pre_flight script path on target.",
      "205:     \"\"\"",
      "206:     try:",
      "207:         script = pathlib.Path.home() / \"hacked\"",
      "208:         tmp_preflight = pathlib.Path(\"/tmp\", \"ssh_pre_flight.sh\")",
      "209:         tmp_preflight.write_text(f\"touch {script}\")",
      "210:         os.chown(tmp_preflight, account.info.uid, account.info.gid)",
      "211:         ret = salt_ssh_cli.run(\"test.ping\")",
      "212:         assert not script.is_file()",
      "213:         assert ret.returncode == 0",
      "214:         assert ret.stdout == '{\\n\"localhost\": true\\n}\\n'",
      "215:     finally:",
      "216:         for _file in [script, tmp_preflight]:",
      "217:             if _file.is_file():",
      "218:                 _file.unlink()",
      "221: def demote(user_uid, user_gid):",
      "222:     def result():",
      "223:         # os.setgid does not remove group membership, so we remove them here so they are REALLY non-root",
      "224:         os.setgroups([])",
      "225:         os.setgid(user_gid)",
      "226:         os.setuid(user_uid)",
      "228:     return result",
      "231: @pytest.mark.slow_test",
      "232: def test_ssh_pre_flight_perms(salt_ssh_cli, caplog, _create_roster, account):",
      "233:     \"\"\"",
      "234:     Test to ensure standard user cannot run pre flight script",
      "235:     on target when user sets wrong permissions (777) on",
      "236:     ssh_pre_flight script.",
      "237:     \"\"\"",
      "238:     try:",
      "239:         script = pathlib.Path(\"/tmp\", \"itworked\")",
      "240:         preflight = pathlib.Path(\"/ssh_pre_flight.sh\")",
      "241:         preflight.write_text(f\"touch {str(script)}\")",
      "242:         tmp_preflight = pathlib.Path(\"/tmp\", preflight.name)",
      "244:         _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight\": str(preflight)})",
      "245:         preflight.chmod(0o0777)",
      "246:         run_script = pathlib.Path(\"/run_script\")",
      "247:         run_script.write_text(",
      "248:             f\"\"\"",
      "249:         x=1",
      "250:         while [ $x -le 200000 ]; do",
      "251:             SCRIPT=`bash {str(tmp_preflight)} 2> /dev/null; echo $?`",
      "252:             if [ ${{SCRIPT}} == 0 ]; then",
      "253:                 break",
      "254:             fi",
      "255:             x=$(( $x + 1 ))",
      "256:         done",
      "257:         \"\"\"",
      "258:         )",
      "259:         run_script.chmod(0o0777)",
      "260:         # pylint: disable=W1509",
      "261:         ret = subprocess.Popen(",
      "262:             [\"sh\", f\"{run_script}\"],",
      "263:             preexec_fn=demote(account.info.uid, account.info.gid),",
      "264:             stdout=None,",
      "265:             stderr=None,",
      "266:             stdin=None,",
      "267:             universal_newlines=True,",
      "268:         )",
      "269:         # pylint: enable=W1509",
      "270:         ret = salt_ssh_cli.run(\"test.ping\")",
      "271:         assert ret.returncode == 0",
      "273:         # Lets make sure a different user other than root",
      "274:         # Didn't run the script",
      "275:         assert os.stat(script).st_uid != account.info.uid",
      "276:         assert script.is_file()",
      "277:     finally:",
      "278:         for _file in [script, preflight, tmp_preflight, run_script]:",
      "279:             if _file.is_file():",
      "280:                 _file.unlink()",
      "283: @pytest.mark.slow_test",
      "284: def test_ssh_run_pre_flight_target_file_perms(salt_ssh_cli, _create_roster, tmp_path):",
      "285:     \"\"\"",
      "286:     test ssh_pre_flight to ensure the target pre flight script",
      "287:     has the correct perms",
      "288:     \"\"\"",
      "289:     perms_file = tmp_path / \"perms\"",
      "290:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
      "291:         fp_.write(",
      "292:             f\"\"\"",
      "293:         SCRIPT_NAME=$0",
      "294:         stat -L -c \"%a %G %U\" $SCRIPT_NAME > {perms_file}",
      "295:         \"\"\"",
      "296:         )",
      "298:     ret = salt_ssh_cli.run(",
      "299:         \"test.ping\",",
      "300:         \"--pre-flight\",",
      "301:     )",
      "302:     assert ret.returncode == 0",
      "303:     with salt.utils.files.fopen(perms_file) as fp:",
      "304:         data = fp.read()",
      "305:     assert data.split()[0] == \"600\"",
      "306:     uid = os.getuid()",
      "307:     gid = os.getgid()",
      "308:     assert data.split()[1] == grp.getgrgid(gid).gr_name",
      "309:     assert data.split()[2] == pwd.getpwuid(uid).pw_name",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ec38a2e5bb7451df0933ca3b02690f40ba8a714b",
      "candidate_info": {
        "commit_hash": "ec38a2e5bb7451df0933ca3b02690f40ba8a714b",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/ec38a2e5bb7451df0933ca3b02690f40ba8a714b",
        "files": [
          "changelog/65383.security.md",
          "requirements/darwin.txt",
          "requirements/static/ci/common.in",
          "requirements/static/ci/py3.10/cloud.txt",
          "requirements/static/ci/py3.10/darwin.txt",
          "requirements/static/ci/py3.10/freebsd.txt",
          "requirements/static/ci/py3.10/lint.txt",
          "requirements/static/ci/py3.10/linux.txt",
          "requirements/static/ci/py3.10/windows.txt",
          "requirements/static/ci/py3.7/cloud.txt",
          "requirements/static/ci/py3.7/freebsd.txt",
          "requirements/static/ci/py3.7/lint.txt",
          "requirements/static/ci/py3.7/linux.txt",
          "requirements/static/ci/py3.7/windows.txt",
          "requirements/static/ci/py3.8/cloud.txt",
          "requirements/static/ci/py3.8/freebsd.txt",
          "requirements/static/ci/py3.8/lint.txt",
          "requirements/static/ci/py3.8/linux.txt",
          "requirements/static/ci/py3.8/windows.txt",
          "requirements/static/ci/py3.9/cloud.txt",
          "requirements/static/ci/py3.9/darwin.txt",
          "requirements/static/ci/py3.9/freebsd.txt",
          "requirements/static/ci/py3.9/lint.txt",
          "requirements/static/ci/py3.9/linux.txt",
          "requirements/static/ci/py3.9/windows.txt",
          "requirements/static/pkg/py3.10/darwin.txt",
          "requirements/static/pkg/py3.10/windows.txt",
          "requirements/static/pkg/py3.7/windows.txt",
          "requirements/static/pkg/py3.8/windows.txt",
          "requirements/static/pkg/py3.9/darwin.txt",
          "requirements/static/pkg/py3.9/windows.txt",
          "requirements/windows.txt"
        ],
        "message": "[3006.4] Update gitpython to 3.1.37",
        "before_after_code_files": [
          "requirements/static/ci/common.in||requirements/static/ci/common.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "requirements/static/ci/common.in||requirements/static/ci/common.in": [
          "File: requirements/static/ci/common.in -> requirements/static/ci/common.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: dnspython",
          "15: docker",
          "16: etcd3-py==0.1.6",
          "18: jmespath",
          "19: jsonschema",
          "20: junos-eznc; sys_platform != 'win32' and python_version <= '3.10'",
          "",
          "[Removed Lines]",
          "17: gitpython>=3.1.35",
          "",
          "[Added Lines]",
          "17: gitpython>=3.1.37",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f41ed71b13241fff9c9e4c3caae8efa638e5b0f8",
      "candidate_info": {
        "commit_hash": "f41ed71b13241fff9c9e4c3caae8efa638e5b0f8",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/f41ed71b13241fff9c9e4c3caae8efa638e5b0f8",
        "files": [
          "tests/pytests/unit/client/ssh/test_single.py"
        ],
        "message": "Fix logs in ssh tests",
        "before_after_code_files": [
          "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
          "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:     with caplog.at_level(logging.TRACE):",
          "412:         with patch_send, patch_exec_cmd, patch_tmp:",
          "413:             ret = single.run_ssh_pre_flight()",
          "419:     assert ret == ret_send",
          "420:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "421:     target_script = send_mock.call_args_list[0][0][1]",
          "",
          "[Removed Lines]",
          "414:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
          "415:     assert (",
          "416:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
          "417:         in caplog.text",
          "418:     )",
          "",
          "[Added Lines]",
          "414:     assert \"Copying the pre flight script\" in caplog.text",
          "415:     assert \"Could not copy the pre flight script to target\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "506:         with patch_send, patch_exec_cmd, patch_tmp:",
          "507:             ret = single.run_ssh_pre_flight()",
          "510:     assert ret == ret_exec_cmd",
          "511:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "512:     target_script = send_mock.call_args_list[0][0][1]",
          "",
          "[Removed Lines]",
          "509:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
          "",
          "[Added Lines]",
          "506:     assert \"Executing the pre flight script on target\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "552:     assert ret == (",
          "553:         \"\",",
          "555:         1,",
          "556:     )",
          "557:     mock_exec_cmd.assert_not_called()",
          "",
          "[Removed Lines]",
          "554:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
          "",
          "[Added Lines]",
          "551:         \"Could not copy pre flight script to temporary path\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a543a6b4346181af5bcaf3a9954811146e1da4fe",
      "candidate_info": {
        "commit_hash": "a543a6b4346181af5bcaf3a9954811146e1da4fe",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/a543a6b4346181af5bcaf3a9954811146e1da4fe",
        "files": [
          "tests/pytests/integration/ssh/test_pre_flight.py"
        ],
        "message": "Do not run ssh integration tests on windows",
        "before_after_code_files": [
          "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
          ],
          "candidate": [
            "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py": [
          "File: tests/pytests/integration/ssh/test_pre_flight.py -> tests/pytests/integration/ssh/test_pre_flight.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: Test for ssh_pre_flight roster option",
          "3: \"\"\"",
          "6: import os",
          "7: import pathlib",
          "9: import shutil",
          "10: import subprocess",
          "",
          "[Removed Lines]",
          "5: import grp",
          "8: import pwd",
          "",
          "[Added Lines]",
          "5: try:",
          "6:     import grp",
          "7:     import pwd",
          "8: except ImportError:",
          "9:     # windows stacktraces on import of these modules",
          "10:     pass",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: import salt.utils.files",
          "19: def _custom_roster(roster_file, roster_data):",
          "20:     with salt.utils.files.fopen(roster_file, \"r\") as fp:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: pytestmark = pytest.mark.skip_on_windows(reason=\"Salt-ssh not available on Windows\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a09afcba6824e9884461041cf4336bd4a80212ad",
      "candidate_info": {
        "commit_hash": "a09afcba6824e9884461041cf4336bd4a80212ad",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/a09afcba6824e9884461041cf4336bd4a80212ad",
        "files": [
          "tests/pytests/integration/ssh/test_pre_flight.py"
        ],
        "message": "Use `-eq 0` instead of `== 0` in shell script logic\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
          ],
          "candidate": [
            "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py": [
          "File: tests/pytests/integration/ssh/test_pre_flight.py -> tests/pytests/integration/ssh/test_pre_flight.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import salt.utils.files",
          "25: def _custom_roster(roster_file, roster_data):",
          "",
          "[Removed Lines]",
          "22: pytestmark = pytest.mark.skip_on_windows(reason=\"Salt-ssh not available on Windows\")",
          "",
          "[Added Lines]",
          "22: pytestmark = [",
          "23:     pytest.mark.skip_on_windows(reason=\"Salt-ssh not available on Windows\"),",
          "24: ]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: @pytest.fixture",
          "35: def _create_roster(salt_ssh_roster_file, tmp_path):",
          "42:     with salt.utils.files.fopen(salt_ssh_roster_file, \"r\") as fp:",
          "43:         data = salt.utils.yaml.safe_load(fp)",
          "44:     pre_flight_script = ret[\"data\"][\"ssh_pre_flight\"]",
          "45:     data[\"localhost\"][\"ssh_pre_flight\"] = pre_flight_script",
          "47:     with salt.utils.files.fopen(salt_ssh_roster_file, \"w\") as fp:",
          "48:         yaml.safe_dump(data, fp)",
          "50:     with salt.utils.files.fopen(pre_flight_script, \"w\") as fp:",
          "51:         fp.write(\"touch {}\".format(ret[\"test_script\"]))",
          "58: @pytest.mark.slow_test",
          "59: def test_ssh_pre_flight(salt_ssh_cli, caplog, _create_roster):",
          "60:     \"\"\"",
          "63:     \"\"\"",
          "64:     ret = salt_ssh_cli.run(\"test.ping\")",
          "65:     assert ret.returncode == 0",
          "",
          "[Removed Lines]",
          "36:     ret = {}",
          "37:     ret[\"roster\"] = salt_ssh_roster_file",
          "38:     ret[\"data\"] = {\"ssh_pre_flight\": str(tmp_path / \"ssh_pre_flight.sh\")}",
          "39:     ret[\"test_script\"] = str(tmp_path / \"test-pre-flight-script-worked.txt\")",
          "40:     ret[\"thin_dir\"] = tmp_path / \"thin_dir\"",
          "46:     data[\"localhost\"][\"thin_dir\"] = str(ret[\"thin_dir\"])",
          "53:     yield ret",
          "54:     if ret[\"thin_dir\"].exists():",
          "55:         shutil.rmtree(ret[\"thin_dir\"])",
          "61:     test ssh when ssh_pre_flight is set",
          "62:     ensure the script runs successfully",
          "",
          "[Added Lines]",
          "38:     thin_dir = tmp_path / \"thin-dir\"",
          "39:     ret = {",
          "40:         \"roster\": salt_ssh_roster_file,",
          "41:         \"data\": {",
          "42:             \"ssh_pre_flight\": str(tmp_path / \"ssh_pre_flight.sh\"),",
          "43:         },",
          "44:         \"test_script\": str(tmp_path / \"test-pre-flight-script-worked.txt\"),",
          "45:         \"thin_dir\": str(thin_dir),",
          "46:     }",
          "53:     data[\"localhost\"][\"thin_dir\"] = ret[\"thin_dir\"]",
          "60:     try:",
          "61:         yield ret",
          "62:     finally:",
          "63:         if thin_dir.exists():",
          "64:             shutil.rmtree(thin_dir)",
          "70:     test ssh when ssh_pre_flight is set ensure the script runs successfully",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70: @pytest.mark.slow_test",
          "71: def test_ssh_run_pre_flight(salt_ssh_cli, _create_roster):",
          "72:     \"\"\"",
          "75:     \"\"\"",
          "76:     # make sure we previously ran a command so the thin dir exists",
          "77:     ret = salt_ssh_cli.run(\"test.ping\")",
          "",
          "[Removed Lines]",
          "73:     test ssh when --pre-flight is passed to salt-ssh",
          "74:     to ensure the script runs successfully",
          "",
          "[Added Lines]",
          "81:     test ssh when --pre-flight is passed to salt-ssh to ensure the script runs successfully",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85:     assert not pathlib.Path(_create_roster[\"test_script\"]).exists()",
          "87:     # Now ensure",
          "92:     assert ret.returncode == 0",
          "93:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
          "",
          "[Removed Lines]",
          "88:     ret = salt_ssh_cli.run(",
          "89:         \"test.ping\",",
          "90:         \"--pre-flight\",",
          "91:     )",
          "",
          "[Added Lines]",
          "95:     ret = salt_ssh_cli.run(\"test.ping\", \"--pre-flight\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:     assert ret.returncode == 0",
          "116:     assert test_script_1.exists()",
          "117:     assert test_script_2.exists()",
          "121:     ret = salt_ssh_cli.run(\"test.ping\")",
          "122:     assert ret.returncode == 0",
          "123:     assert not test_script_1.exists()",
          "124:     assert not test_script_2.exists()",
          "130:     assert ret.returncode == 0",
          "131:     assert test_script_1.exists()",
          "132:     assert test_script_2.exists()",
          "",
          "[Removed Lines]",
          "118:     pathlib.Path(test_script_1).unlink()",
          "119:     pathlib.Path(test_script_2).unlink()",
          "126:     ret = salt_ssh_cli.run(",
          "127:         \"test.ping\",",
          "128:         \"--pre-flight\",",
          "129:     )",
          "",
          "[Added Lines]",
          "122:     test_script_1.unlink()",
          "123:     test_script_2.unlink()",
          "130:     ret = salt_ssh_cli.run(\"test.ping\", \"--pre-flight\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "166:     test_script_2.unlink()",
          "167:     assert not injected_file.is_file()",
          "173:     assert ret.returncode == 0",
          "175:     assert test_script_1.exists()",
          "176:     assert test_script_2.exists()",
          "182: @pytest.mark.flaky(max_runs=4)",
          "",
          "[Removed Lines]",
          "169:     ret = salt_ssh_cli.run(",
          "170:         \"test.ping\",",
          "171:         \"--pre-flight\",",
          "172:     )",
          "177:     assert not pathlib.Path(",
          "178:         injected_file",
          "179:     ).is_file(), \"File injection suceeded. This shouldn't happend\"",
          "",
          "[Added Lines]",
          "170:     ret = salt_ssh_cli.run(\"test.ping\", \"--pre-flight\")",
          "175:     assert (",
          "176:         not injected_file.is_file()",
          "177:     ), \"File injection suceeded. This shouldn't happend\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "189:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
          "190:         fp_.write(\"exit 2\")",
          "196:     assert ret.data[\"retcode\"] == 2",
          "",
          "[Removed Lines]",
          "192:     ret = salt_ssh_cli.run(",
          "193:         \"test.ping\",",
          "194:         \"--pre-flight\",",
          "195:     )",
          "",
          "[Added Lines]",
          "190:     ret = salt_ssh_cli.run(\"test.ping\", \"--pre-flight\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "255:         x=1",
          "256:         while [ $x -le 200000 ]; do",
          "257:             SCRIPT=`bash {str(tmp_preflight)} 2> /dev/null; echo $?`",
          "259:                 break",
          "260:             fi",
          "261:             x=$(( $x + 1 ))",
          "",
          "[Removed Lines]",
          "258:             if [ ${{SCRIPT}} == 0 ]; then",
          "",
          "[Added Lines]",
          "253:             if [ ${{SCRIPT}} -eq 0 ]; then",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "301:         \"\"\"",
          "302:         )",
          "308:     assert ret.returncode == 0",
          "309:     with salt.utils.files.fopen(perms_file) as fp:",
          "310:         data = fp.read()",
          "",
          "[Removed Lines]",
          "304:     ret = salt_ssh_cli.run(",
          "305:         \"test.ping\",",
          "306:         \"--pre-flight\",",
          "307:     )",
          "",
          "[Added Lines]",
          "299:     ret = salt_ssh_cli.run(\"test.ping\", \"--pre-flight\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c708ded80e8f2c026474f80f68977c4735a13a63",
      "candidate_info": {
        "commit_hash": "c708ded80e8f2c026474f80f68977c4735a13a63",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/c708ded80e8f2c026474f80f68977c4735a13a63",
        "files": [
          "tests/pytests/integration/ssh/test_pre_flight.py"
        ],
        "message": "Add pytest integration pre_flight integration tests for CVE-2023-34049",
        "before_after_code_files": [
          "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
          ],
          "candidate": [
            "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py": [
          "File: tests/pytests/integration/ssh/test_pre_flight.py -> tests/pytests/integration/ssh/test_pre_flight.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: Test for ssh_pre_flight roster option",
          "3: \"\"\"",
          "5: import grp",
          "6: import os",
          "7: import pathlib",
          "8: import pwd",
          "9: import shutil",
          "10: import subprocess",
          "12: import pytest",
          "13: import salt.utils.files",
          "14: import yaml",
          "15: from saltfactories.utils import random_string",
          "18: def _custom_roster(roster_file, roster_data):",
          "19:     with salt.utils.files.fopen(roster_file, \"r\") as fp:",
          "20:         data = salt.utils.yaml.safe_load(fp)",
          "21:     for key, item in roster_data.items():",
          "22:         data[\"localhost\"][key] = item",
          "23:     with salt.utils.files.fopen(roster_file, \"w\") as fp:",
          "24:         yaml.safe_dump(data, fp)",
          "27: @pytest.fixture",
          "28: def _create_roster(salt_ssh_roster_file, tmp_path):",
          "29:     ret = {}",
          "30:     ret[\"roster\"] = salt_ssh_roster_file",
          "31:     ret[\"data\"] = {\"ssh_pre_flight\": str(tmp_path / \"ssh_pre_flight.sh\")}",
          "32:     ret[\"test_script\"] = str(tmp_path / \"test-pre-flight-script-worked.txt\")",
          "33:     ret[\"thin_dir\"] = tmp_path / \"thin_dir\"",
          "35:     with salt.utils.files.fopen(salt_ssh_roster_file, \"r\") as fp:",
          "36:         data = salt.utils.yaml.safe_load(fp)",
          "37:     pre_flight_script = ret[\"data\"][\"ssh_pre_flight\"]",
          "38:     data[\"localhost\"][\"ssh_pre_flight\"] = pre_flight_script",
          "39:     data[\"localhost\"][\"thin_dir\"] = str(ret[\"thin_dir\"])",
          "40:     with salt.utils.files.fopen(salt_ssh_roster_file, \"w\") as fp:",
          "41:         yaml.safe_dump(data, fp)",
          "43:     with salt.utils.files.fopen(pre_flight_script, \"w\") as fp:",
          "44:         fp.write(\"touch {}\".format(ret[\"test_script\"]))",
          "46:     yield ret",
          "47:     if ret[\"thin_dir\"].exists():",
          "48:         shutil.rmtree(ret[\"thin_dir\"])",
          "51: @pytest.mark.slow_test",
          "52: def test_ssh_pre_flight(salt_ssh_cli, caplog, _create_roster):",
          "53:     \"\"\"",
          "54:     test ssh when ssh_pre_flight is set",
          "55:     ensure the script runs successfully",
          "56:     \"\"\"",
          "57:     ret = salt_ssh_cli.run(\"test.ping\")",
          "58:     assert ret.returncode == 0",
          "60:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
          "63: @pytest.mark.slow_test",
          "64: def test_ssh_run_pre_flight(salt_ssh_cli, _create_roster):",
          "65:     \"\"\"",
          "66:     test ssh when --pre-flight is passed to salt-ssh",
          "67:     to ensure the script runs successfully",
          "68:     \"\"\"",
          "69:     # make sure we previously ran a command so the thin dir exists",
          "70:     ret = salt_ssh_cli.run(\"test.ping\")",
          "71:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
          "73:     # Now remeove the script to ensure pre_flight doesn't run",
          "74:     # without --pre-flight",
          "75:     pathlib.Path(_create_roster[\"test_script\"]).unlink()",
          "77:     assert salt_ssh_cli.run(\"test.ping\").returncode == 0",
          "78:     assert not pathlib.Path(_create_roster[\"test_script\"]).exists()",
          "80:     # Now ensure",
          "81:     ret = salt_ssh_cli.run(",
          "82:         \"test.ping\",",
          "83:         \"--pre-flight\",",
          "84:     )",
          "85:     assert ret.returncode == 0",
          "86:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
          "89: @pytest.mark.slow_test",
          "90: def test_ssh_run_pre_flight_args(salt_ssh_cli, _create_roster):",
          "91:     \"\"\"",
          "92:     test ssh when --pre-flight is passed to salt-ssh",
          "93:     to ensure the script runs successfully passing some args",
          "94:     \"\"\"",
          "95:     _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight_args\": \"foobar test\"})",
          "96:     # Create pre_flight script that accepts args",
          "97:     test_script = _create_roster[\"test_script\"]",
          "98:     test_script_1 = pathlib.Path(test_script + \"-foobar\")",
          "99:     test_script_2 = pathlib.Path(test_script + \"-test\")",
          "100:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
          "101:         fp.write(",
          "102:             f\"\"\"",
          "103:         touch {str(test_script)}-$1",
          "104:         touch {str(test_script)}-$2",
          "105:         \"\"\"",
          "106:         )",
          "107:     ret = salt_ssh_cli.run(\"test.ping\")",
          "108:     assert ret.returncode == 0",
          "109:     assert test_script_1.exists()",
          "110:     assert test_script_2.exists()",
          "111:     pathlib.Path(test_script_1).unlink()",
          "112:     pathlib.Path(test_script_2).unlink()",
          "114:     ret = salt_ssh_cli.run(\"test.ping\")",
          "115:     assert ret.returncode == 0",
          "116:     assert not test_script_1.exists()",
          "117:     assert not test_script_2.exists()",
          "119:     ret = salt_ssh_cli.run(",
          "120:         \"test.ping\",",
          "121:         \"--pre-flight\",",
          "122:     )",
          "123:     assert ret.returncode == 0",
          "124:     assert test_script_1.exists()",
          "125:     assert test_script_2.exists()",
          "128: @pytest.mark.slow_test",
          "129: def test_ssh_run_pre_flight_args_prevent_injection(",
          "130:     salt_ssh_cli, _create_roster, tmp_path",
          "131: ):",
          "132:     \"\"\"",
          "133:     test ssh when --pre-flight is passed to salt-ssh",
          "134:     and evil arguments are used in order to produce shell injection",
          "135:     \"\"\"",
          "136:     injected_file = tmp_path / \"injection\"",
          "137:     _custom_roster(",
          "138:         salt_ssh_cli.roster_file,",
          "139:         {\"ssh_pre_flight_args\": f\"foobar; echo injected > {str(injected_file)}\"},",
          "140:     )",
          "141:     # Create pre_flight script that accepts args",
          "142:     test_script = _create_roster[\"test_script\"]",
          "143:     test_script_1 = pathlib.Path(test_script + \"-echo\")",
          "144:     test_script_2 = pathlib.Path(test_script + \"-foobar;\")",
          "145:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
          "146:         fp.write(",
          "147:             f\"\"\"",
          "148:         touch {str(test_script)}-$1",
          "149:         touch {str(test_script)}-$2",
          "150:         \"\"\"",
          "151:         )",
          "153:     # make sure we previously ran a command so the thin dir exists",
          "154:     ret = salt_ssh_cli.run(\"test.ping\")",
          "155:     assert ret.returncode == 0",
          "156:     assert test_script_1.exists()",
          "157:     assert test_script_2.exists()",
          "158:     test_script_1.unlink()",
          "159:     test_script_2.unlink()",
          "160:     assert not injected_file.is_file()",
          "162:     ret = salt_ssh_cli.run(",
          "163:         \"test.ping\",",
          "164:         \"--pre-flight\",",
          "165:     )",
          "166:     assert ret.returncode == 0",
          "168:     assert test_script_1.exists()",
          "169:     assert test_script_2.exists()",
          "170:     assert not pathlib.Path(",
          "171:         injected_file",
          "172:     ).is_file(), \"File injection suceeded. This shouldn't happend\"",
          "175: @pytest.mark.flaky(max_runs=4)",
          "176: @pytest.mark.slow_test",
          "177: def test_ssh_run_pre_flight_failure(salt_ssh_cli, _create_roster):",
          "178:     \"\"\"",
          "179:     test ssh_pre_flight when there is a failure",
          "180:     in the script.",
          "181:     \"\"\"",
          "182:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
          "183:         fp_.write(\"exit 2\")",
          "185:     ret = salt_ssh_cli.run(",
          "186:         \"test.ping\",",
          "187:         \"--pre-flight\",",
          "188:     )",
          "189:     assert ret.data[\"retcode\"] == 2",
          "192: @pytest.fixture",
          "193: def account():",
          "194:     username = random_string(\"test-account-\", uppercase=False)",
          "195:     with pytest.helpers.create_account(username=username) as account:",
          "196:         yield account",
          "199: @pytest.mark.slow_test",
          "200: def test_ssh_pre_flight_script(salt_ssh_cli, caplog, _create_roster, tmp_path, account):",
          "201:     \"\"\"",
          "202:     Test to ensure user cannot create and run a script",
          "203:     with the expected pre_flight script path on target.",
          "204:     \"\"\"",
          "205:     try:",
          "206:         script = pathlib.Path.home() / \"hacked\"",
          "207:         tmp_preflight = pathlib.Path(\"/tmp\", \"ssh_pre_flight.sh\")",
          "208:         tmp_preflight.write_text(f\"touch {script}\")",
          "209:         os.chown(tmp_preflight, account.info.uid, account.info.gid)",
          "210:         ret = salt_ssh_cli.run(\"test.ping\")",
          "211:         assert not script.is_file()",
          "212:         assert ret.returncode == 0",
          "213:         assert ret.stdout == '{\\n\"localhost\": true\\n}\\n'",
          "214:     finally:",
          "215:         for _file in [script, tmp_preflight]:",
          "216:             if _file.is_file():",
          "217:                 _file.unlink()",
          "220: def demote(user_uid, user_gid):",
          "221:     def result():",
          "222:         # os.setgid does not remove group membership, so we remove them here so they are REALLY non-root",
          "223:         os.setgroups([])",
          "224:         os.setgid(user_gid)",
          "225:         os.setuid(user_uid)",
          "227:     return result",
          "230: @pytest.mark.slow_test",
          "231: def test_ssh_pre_flight_perms(salt_ssh_cli, caplog, _create_roster, account):",
          "232:     \"\"\"",
          "233:     Test to ensure standard user cannot run pre flight script",
          "234:     on target when user sets wrong permissions (777) on",
          "235:     ssh_pre_flight script.",
          "236:     \"\"\"",
          "237:     try:",
          "238:         script = pathlib.Path(\"/tmp\", \"itworked\")",
          "239:         preflight = pathlib.Path(\"/ssh_pre_flight.sh\")",
          "240:         preflight.write_text(f\"touch {str(script)}\")",
          "241:         tmp_preflight = pathlib.Path(\"/tmp\", preflight.name)",
          "243:         _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight\": str(preflight)})",
          "244:         preflight.chmod(0o0777)",
          "245:         run_script = pathlib.Path(\"/run_script\")",
          "246:         run_script.write_text(",
          "247:             f\"\"\"",
          "248:         x=1",
          "249:         while [ $x -le 200000 ]; do",
          "250:             SCRIPT=`bash {str(tmp_preflight)} 2> /dev/null; echo $?`",
          "251:             if [ ${{SCRIPT}} == 0 ]; then",
          "252:                 break",
          "253:             fi",
          "254:             x=$(( $x + 1 ))",
          "255:         done",
          "256:         \"\"\"",
          "257:         )",
          "258:         run_script.chmod(0o0777)",
          "259:         # pylint: disable=W1509",
          "260:         ret = subprocess.Popen(",
          "261:             [\"sh\", f\"{run_script}\"],",
          "262:             preexec_fn=demote(account.info.uid, account.info.gid),",
          "263:             stdout=None,",
          "264:             stderr=None,",
          "265:             stdin=None,",
          "266:             universal_newlines=True,",
          "267:         )",
          "268:         # pylint: enable=W1509",
          "269:         ret = salt_ssh_cli.run(\"test.ping\")",
          "270:         assert ret.returncode == 0",
          "272:         # Lets make sure a different user other than root",
          "273:         # Didn't run the script",
          "274:         assert os.stat(script).st_uid != account.info.uid",
          "275:         assert script.is_file()",
          "276:     finally:",
          "277:         for _file in [script, preflight, tmp_preflight, run_script]:",
          "278:             if _file.is_file():",
          "279:                 _file.unlink()",
          "282: @pytest.mark.slow_test",
          "283: def test_ssh_run_pre_flight_target_file_perms(salt_ssh_cli, _create_roster, tmp_path):",
          "284:     \"\"\"",
          "285:     test ssh_pre_flight to ensure the target pre flight script",
          "286:     has the correct perms",
          "287:     \"\"\"",
          "288:     perms_file = tmp_path / \"perms\"",
          "289:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
          "290:         fp_.write(",
          "291:             f\"\"\"",
          "292:         SCRIPT_NAME=$0",
          "293:         stat -L -c \"%a %G %U\" $SCRIPT_NAME > {perms_file}",
          "294:         \"\"\"",
          "295:         )",
          "297:     ret = salt_ssh_cli.run(",
          "298:         \"test.ping\",",
          "299:         \"--pre-flight\",",
          "300:     )",
          "301:     assert ret.returncode == 0",
          "302:     with salt.utils.files.fopen(perms_file) as fp:",
          "303:         data = fp.read()",
          "304:     assert data.split()[0] == \"600\"",
          "305:     uid = os.getuid()",
          "306:     gid = os.getgid()",
          "307:     assert data.split()[1] == grp.getgrgid(gid).gr_name",
          "308:     assert data.split()[2] == pwd.getpwuid(uid).pw_name",
          "",
          "---------------"
        ]
      }
    }
  ]
}