{
  "cve_id": "CVE-2021-45711",
  "cve_desc": "An issue was discovered in the simple_asn1 crate 0.6.0 before 0.6.1 for Rust. There is a panic if UTCTime data, supplied by a remote attacker, has a second character greater than 0x7f.",
  "repo": "acw/simple_asn1",
  "patch_hash": "d7d39d709577710e9dc8833ee57d200eef366db8",
  "patch_info": {
    "commit_hash": "d7d39d709577710e9dc8833ee57d200eef366db8",
    "repo": "acw/simple_asn1",
    "commit_url": "https://github.com/acw/simple_asn1/commit/d7d39d709577710e9dc8833ee57d200eef366db8",
    "files": [
      "Cargo.toml",
      "src/lib.rs"
    ],
    "message": "Remove chrono dependency in favour of time crate",
    "before_after_code_files": [
      "src/lib.rs||src/lib.rs"
    ]
  },
  "patch_diff": {
    "src/lib.rs||src/lib.rs": [
      "File: src/lib.rs -> src/lib.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: pub use num_bigint::{BigInt, BigUint};",
      "31: use num_traits::{FromPrimitive, One, ToPrimitive, Zero};",
      "32: #[cfg(test)]",
      "",
      "[Removed Lines]",
      "29: use chrono::{DateTime, TimeZone, Utc};",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: use std::mem::size_of;",
      "37: use std::str::Utf8Error;",
      "38: use thiserror::Error;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: use time::PrimitiveDateTime;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "78:     PrintableString(usize, String),",
      "79:     TeletexString(usize, String),",
      "80:     IA5String(usize, String),",
      "83:     UniversalString(usize, String),",
      "84:     BMPString(usize, String),",
      "85:     Sequence(usize, Vec<ASN1Block>),",
      "",
      "[Removed Lines]",
      "81:     UTCTime(usize, DateTime<Utc>),",
      "82:     GeneralizedTime(usize, DateTime<Utc>),",
      "",
      "[Added Lines]",
      "82:     UTCTime(usize, PrimitiveDateTime),",
      "83:     GeneralizedTime(usize, PrimitiveDateTime),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "296:     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'()+,-./:=? \";",
      "298: #[cfg(test)]",
      "306: #[derive(Clone, Debug, Error, PartialEq)]",
      "",
      "[Removed Lines]",
      "299: const KNOWN_TAGS: &[u8] =",
      "300:     &[0x01, 0x02, 0x03, 0x04, 0x05, 0x06,",
      "301:       0x0c, 0x10, 0x11, 0x13, 0x14, 0x16,",
      "302:       0x17, 0x18, 0x1c, 0x1e,",
      "303:      ];",
      "",
      "[Added Lines]",
      "300: const KNOWN_TAGS: &[u8] = &[",
      "301:     0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x0c, 0x10, 0x11, 0x13, 0x14, 0x16, 0x17, 0x18, 0x1c, 0x1e,",
      "302: ];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "506:                 }",
      "508:                 let v = String::from_iter(body.iter().map(|x| *x as char));",
      "510:                     Err(_) => return Err(ASN1DecodeErr::InvalidDateValue(v)),",
      "511:                     Ok(t) => result.push(ASN1Block::UTCTime(soff, t)),",
      "512:                 }",
      "",
      "[Removed Lines]",
      "509:                 match Utc.datetime_from_str(&v, \"%y%m%d%H%M%SZ\") {",
      "",
      "[Added Lines]",
      "509:                 let y = &v[0..2];",
      "511:                 let y_prefix = match y.parse::<u8>() {",
      "512:                     Err(_) => return Err(ASN1DecodeErr::InvalidDateValue(v)),",
      "513:                     Ok(y) => {",
      "514:                         if y >= 50 {",
      "515:                             \"19\"",
      "516:                         } else {",
      "517:                             \"20\"",
      "518:                         }",
      "519:                     }",
      "520:                 };",
      "522:                 let v = format!(\"{}{}\", y_prefix, v);",
      "524:                 let format = time::format_description::parse(",
      "525:                     \"[year][month][day][hour repr:24][minute][second]Z\",",
      "526:                 )",
      "527:                 .unwrap();",
      "529:                 match PrimitiveDateTime::parse(&v, &format) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "533:                     let idx = v.len() - 1;",
      "534:                     v.insert(idx, '0');",
      "535:                 }",
      "537:                     Err(_) => return Err(ASN1DecodeErr::InvalidDateValue(v)),",
      "538:                     Ok(t) => result.push(ASN1Block::GeneralizedTime(soff, t)),",
      "539:                 }",
      "",
      "[Removed Lines]",
      "536:                 match Utc.datetime_from_str(&v, \"%Y%m%d%H%M%S.%fZ\") {",
      "",
      "[Added Lines]",
      "557:                 let format = time::format_description::parse(",
      "558:                     \"[year][month][day][hour repr:24][minute][second].[subsecond]Z\",",
      "559:                 )",
      "560:                 .unwrap();",
      "562:                 match PrimitiveDateTime::parse(&v, &format) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "807:             Ok(res)",
      "808:         }",
      "809:         &ASN1Block::UTCTime(_, ref time) => {",
      "811:             let inttag = BigUint::from_u8(0x17).unwrap();",
      "812:             let mut lenbytes = encode_len(body.len());",
      "813:             let mut tagbytes = encode_tag(ASN1Class::Universal, false, &inttag);",
      "",
      "[Removed Lines]",
      "810:             let mut body = time.format(\"%y%m%d%H%M%SZ\").to_string().into_bytes();",
      "",
      "[Added Lines]",
      "836:             let format = time::format_description::parse(",
      "837:                 \"[year][month][day][hour repr:24][minute][second]Z\",",
      "838:             )",
      "839:             .unwrap();",
      "840:             let mut body = time.format(&format).unwrap().into_bytes();",
      "841:             body.drain(0..2);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "819:             Ok(res)",
      "820:         }",
      "821:         &ASN1Block::GeneralizedTime(_, ref time) => {",
      "823:             let zclear = base.trim_end_matches('0');",
      "824:             let dclear = zclear.trim_end_matches('.');",
      "825:             let mut body = format!(\"{}Z\", dclear).into_bytes();",
      "",
      "[Removed Lines]",
      "822:             let base = time.format(\"%Y%m%d%H%M%S.%f\").to_string();",
      "",
      "[Added Lines]",
      "853:             let format = time::format_description::parse(",
      "854:                 \"[year][month][day][hour repr:24][minute][second].[subsecond]\",",
      "855:             )",
      "856:             .unwrap();",
      "857:             let base = time.format(&format).unwrap();",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1061: #[cfg(test)]",
      "1062: mod tests {",
      "1063:     use super::*;",
      "1065:     use quickcheck::{Arbitrary, Gen};",
      "1066:     use std::fs::File;",
      "1067:     use std::io::Read;",
      "1069:     impl Arbitrary for ASN1Class {",
      "1070:         fn arbitrary(g: &mut Gen) -> ASN1Class {",
      "",
      "[Removed Lines]",
      "1064:     use chrono::offset::LocalResult;",
      "",
      "[Added Lines]",
      "1102:     use time::{Date, Month, Time};",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1266:     }",
      "1268:     fn arb_utc(g: &mut Gen, _d: usize) -> ASN1Block {",
      "1285:     }",
      "1287:     fn arb_time(g: &mut Gen, _d: usize) -> ASN1Block {",
      "1305:     }",
      "1307:     fn arb_explicit(g: &mut Gen, d: usize) -> ASN1Block {",
      "",
      "[Removed Lines]",
      "1269:         loop {",
      "1270:             let y = (i32::arbitrary(g) % 100).abs() + 1970;",
      "1271:             let m = u32::arbitrary(g) % 12 + 1;",
      "1272:             let d = u32::arbitrary(g) % 31 + 1;",
      "1273:             match Utc.ymd_opt(y, m, d) {",
      "1274:                 LocalResult::None => {}",
      "1275:                 LocalResult::Single(d) => {",
      "1276:                     let h = u32::arbitrary(g) % 24;",
      "1277:                     let m = u32::arbitrary(g) % 60;",
      "1278:                     let s = u32::arbitrary(g) % 60;",
      "1279:                     let t = d.and_hms(h, m, s);",
      "1280:                     return ASN1Block::UTCTime(0, t);",
      "1281:                 }",
      "1282:                 LocalResult::Ambiguous(_, _) => {}",
      "1283:             }",
      "1284:         }",
      "1288:         loop {",
      "1289:             let y = (i32::arbitrary(g) % 10000).abs();",
      "1290:             let m = u32::arbitrary(g) % 12 + 1;",
      "1291:             let d = u32::arbitrary(g) % 31 + 1;",
      "1292:             match Utc.ymd_opt(y, m, d) {",
      "1293:                 LocalResult::None => {}",
      "1294:                 LocalResult::Single(d) => {",
      "1295:                     let h = u32::arbitrary(g) % 24;",
      "1296:                     let m = u32::arbitrary(g) % 60;",
      "1297:                     let s = u32::arbitrary(g) % 60;",
      "1298:                     let n = u32::arbitrary(g) % 1000000000;",
      "1299:                     let t = d.and_hms_nano(h, m, s, n);",
      "1300:                     return ASN1Block::GeneralizedTime(0, t);",
      "1301:                 }",
      "1302:                 LocalResult::Ambiguous(_, _) => {}",
      "1303:             }",
      "1304:         }",
      "",
      "[Added Lines]",
      "1304:         let min = Date::from_calendar_date(1950, Month::January, 01)",
      "1305:             .unwrap()",
      "1306:             .to_julian_day();",
      "1307:         let max = Date::from_calendar_date(2049, Month::December, 31)",
      "1308:             .unwrap()",
      "1309:             .to_julian_day();",
      "1310:         let date =",
      "1311:             Date::from_julian_day(i32::arbitrary(g).rem_euclid(max - min + 1) + min).unwrap();",
      "1313:         let h = u8::arbitrary(g).rem_euclid(24);",
      "1314:         let m = u8::arbitrary(g).rem_euclid(60);",
      "1315:         let s = u8::arbitrary(g).rem_euclid(60);",
      "1316:         let time = Time::from_hms(h, m, s).unwrap();",
      "1318:         let t = PrimitiveDateTime::new(date, time);",
      "1319:         ASN1Block::UTCTime(0, t)",
      "1323:         let min = Date::from_calendar_date(0, Month::January, 01)",
      "1324:             .unwrap()",
      "1325:             .to_julian_day();",
      "1326:         let max = Date::from_calendar_date(9999, Month::December, 31)",
      "1327:             .unwrap()",
      "1328:             .to_julian_day();",
      "1329:         let date =",
      "1330:             Date::from_julian_day(i32::arbitrary(g).rem_euclid(max - min + 1) + min).unwrap();",
      "1332:         let time = Time::arbitrary(g);",
      "1334:         let t = PrimitiveDateTime::new(date, time);",
      "1335:         ASN1Block::GeneralizedTime(0, t)",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1319:     fn arb_unknown(g: &mut Gen, _d: usize) -> ASN1Block {",
      "1320:         let class = ASN1Class::arbitrary(g);",
      "1321:         let tag = loop {",
      "1323:             match potential.x.to_u8() {",
      "1324:                 None => break potential,",
      "1326:                 Some(_) => break potential,",
      "1327:             }",
      "1328:         };",
      "1329:         let size = usize::arbitrary(g) % 128;",
      "1330:         let mut items = Vec::with_capacity(size);",
      "1332:         while items.len() < size {",
      "1333:             items.push(u8::arbitrary(g));",
      "1334:         }",
      "",
      "[Removed Lines]",
      "1322:             let potential = RandomUint::arbitrary(g);",
      "1325:                 Some(x) if KNOWN_TAGS.contains(&x) => {},",
      "",
      "[Added Lines]",
      "1353:             let potential = RandomUint::arbitrary(g);",
      "1356:                 Some(x) if KNOWN_TAGS.contains(&x) => {}",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1411:     #[test]",
      "1412:     fn generalized_time_tests() {",
      "1413:         check_spec(",
      "1415:             \"19920521000000Z\".to_string(),",
      "1416:         );",
      "1417:         check_spec(",
      "1419:             \"19920622123421Z\".to_string(),",
      "1420:         );",
      "1421:         check_spec(",
      "1423:             \"19920722132100.3Z\".to_string(),",
      "1424:         );",
      "1425:     }",
      "1428:         let b = ASN1Block::GeneralizedTime(0, d.clone());",
      "1429:         match to_der(&b) {",
      "1430:             Err(_) => assert_eq!(format!(\"Broken: {}\", d), s),",
      "",
      "[Removed Lines]",
      "1414:             &Utc.ymd(1992, 5, 21).and_hms(0, 0, 0),",
      "1418:             &Utc.ymd(1992, 6, 22).and_hms(12, 34, 21),",
      "1422:             &Utc.ymd(1992, 7, 22).and_hms_milli(13, 21, 00, 300),",
      "1427:     fn check_spec(d: &DateTime<Utc>, s: String) {",
      "",
      "[Added Lines]",
      "1445:             &PrimitiveDateTime::new(",
      "1446:                 Date::from_calendar_date(1992, Month::May, 21).unwrap(),",
      "1447:                 Time::from_hms(0, 0, 0).unwrap(),",
      "1448:             ),",
      "1452:             &PrimitiveDateTime::new(",
      "1453:                 Date::from_calendar_date(1992, Month::June, 22).unwrap(),",
      "1454:                 Time::from_hms(12, 34, 21).unwrap(),",
      "1455:             ),",
      "1459:             &PrimitiveDateTime::new(",
      "1460:                 Date::from_calendar_date(1992, Month::July, 22).unwrap(),",
      "1461:                 Time::from_hms_milli(13, 21, 00, 300).unwrap(),",
      "1462:             ),",
      "1467:     fn check_spec(d: &PrimitiveDateTime, s: String) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "34c0267144029c85fbdda2f5dc449e151f5423dd",
      "candidate_info": {
        "commit_hash": "34c0267144029c85fbdda2f5dc449e151f5423dd",
        "repo": "acw/simple_asn1",
        "commit_url": "https://github.com/acw/simple_asn1/commit/34c0267144029c85fbdda2f5dc449e151f5423dd",
        "files": [
          "src/lib.rs"
        ],
        "message": "Remove comment",
        "before_after_code_files": [
          "src/lib.rs||src/lib.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/acw/simple_asn1/pull/26"
        ],
        "olp_code_files": {
          "patch": [
            "src/lib.rs||src/lib.rs"
          ],
          "candidate": [
            "src/lib.rs||src/lib.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs"
        ]
      }
    },
    {
      "candidate_hash": "c98100429071a2dca3191c0d0dfa17cd64fcdda2",
      "candidate_info": {
        "commit_hash": "c98100429071a2dca3191c0d0dfa17cd64fcdda2",
        "repo": "acw/simple_asn1",
        "commit_url": "https://github.com/acw/simple_asn1/commit/c98100429071a2dca3191c0d0dfa17cd64fcdda2",
        "files": [
          "src/lib.rs"
        ],
        "message": "Fix a panic from an unchecked string slice.\n\nWhen slicing a string, you get a panic if you do so at any point\nother than at a character boundary.  This happened in the\nimplementation of UTCTime parsing.\n\nThis bug was introduced in bc156c36d76d91b77cdf8f1f231e2c554ea0e454,\nand appears to affect only version 0.6.0.\n\nI've tried using the clippy::string_slice lint to confirm that there\nare not any other string slices in this code.\n\nFixes bug #27.  Found via fuzzing.",
        "before_after_code_files": [
          "src/lib.rs||src/lib.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib.rs||src/lib.rs"
          ],
          "candidate": [
            "src/lib.rs||src/lib.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:                 let v = String::from_iter(body.iter().map(|x| *x as char));",
          "510:                 let y_prefix = match y.parse::<u8>() {",
          "511:                     Err(_) => return Err(ASN1DecodeErr::InvalidDateValue(v)),",
          "",
          "[Removed Lines]",
          "508:                 let y = &v[0..2];",
          "",
          "[Added Lines]",
          "508:                 let y = match v.get(0..2) {",
          "509:                     Some(yy) => yy,",
          "510:                     None => {",
          "512:                         return Err(ASN1DecodeErr::InvalidDateValue(v));",
          "513:                     }",
          "514:                 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1438:         Ok(vec![ASN1Block::Integer(0, val)])",
          "1439:     }",
          "1441:     #[test]",
          "1442:     fn generalized_time_tests() {",
          "1443:         check_spec(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1447:     #[test]",
          "1448:     fn utc_time_tests() {",
          "1451:         let input = [55, 13, 13, 133, 13, 13, 50, 13, 13, 133, 13, 13, 50, 13, 133];",
          "1452:         let output = from_der(&input);",
          "1453:         assert!(output.is_err());",
          "1454:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c585acc5306cdabdabe3041128caa8f76cdad5e5",
      "candidate_info": {
        "commit_hash": "c585acc5306cdabdabe3041128caa8f76cdad5e5",
        "repo": "acw/simple_asn1",
        "commit_url": "https://github.com/acw/simple_asn1/commit/c585acc5306cdabdabe3041128caa8f76cdad5e5",
        "files": [
          "Cargo.toml",
          "src/lib.rs"
        ],
        "message": "Upgrade the QuickCheck/rand dependencies.\n\nThis also adds a check in the synthesis of arbitary items of unknown type,\nto ensure that we don't accidentally create objects with a known type. I'm\nactually not 100% sure how the old tests were passing so reliably, which\nis worrying.",
        "before_after_code_files": [
          "src/lib.rs||src/lib.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib.rs||src/lib.rs"
          ],
          "candidate": [
            "src/lib.rs||src/lib.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "281: const PRINTABLE_CHARS: &'static str =",
          "282:     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'()+,-./:=? \";",
          "285: #[derive(Clone, Debug, Error, PartialEq)]",
          "286: pub enum ASN1DecodeErr {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: #[cfg(test)]",
          "285: const KNOWN_TAGS: &[u8] =",
          "286:     &[0x01, 0x02, 0x03, 0x04, 0x05, 0x06,",
          "287:       0x0c, 0x10, 0x11, 0x13, 0x14, 0x16,",
          "288:       0x17, 0x18, 0x1c, 0x1e,",
          "289:      ];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1040:     use super::*;",
          "1041:     use chrono::offset::LocalResult;",
          "1042:     use quickcheck::{Arbitrary, Gen};",
          "1044:     use std::fs::File;",
          "1045:     use std::io::Read;",
          "1047:     impl Arbitrary for ASN1Class {",
          "1050:                 0 => ASN1Class::Private,",
          "1051:                 1 => ASN1Class::ContextSpecific,",
          "1052:                 2 => ASN1Class::Universal,",
          "",
          "[Removed Lines]",
          "1043:     use rand::{distributions::Standard, prelude::SliceRandom, Rng};",
          "1048:         fn arbitrary<G: Gen>(g: &mut G) -> ASN1Class {",
          "1049:             match g.gen::<u8>() % 4 {",
          "",
          "[Added Lines]",
          "1054:         fn arbitrary(g: &mut Gen) -> ASN1Class {",
          "1055:             match u8::arbitrary(g) % 4 {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1072:     }",
          "1074:     impl Arbitrary for RandomUint {",
          "1077:             RandomUint { x: v }",
          "1078:         }",
          "1079:     }",
          "",
          "[Removed Lines]",
          "1075:         fn arbitrary<G: Gen>(g: &mut G) -> RandomUint {",
          "1076:             let v = BigUint::from_u32(g.gen::<u32>()).unwrap();",
          "",
          "[Added Lines]",
          "1081:         fn arbitrary(g: &mut Gen) -> RandomUint {",
          "1082:             let v = BigUint::from_u32(u32::arbitrary(g)).unwrap();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1102:     }",
          "1104:     impl Arbitrary for RandomInt {",
          "1107:             RandomInt { x: v }",
          "1108:         }",
          "1109:     }",
          "1111:     #[allow(type_alias_bounds)]",
          "1116:         ASN1Block::Boolean(0, v)",
          "1117:     }",
          "1120:         let d = RandomInt::arbitrary(g);",
          "1121:         ASN1Block::Integer(0, d.x)",
          "1122:     }",
          "1126:         let maxbits = (size as usize) * 8;",
          "1128:         let nbits = if modbits > maxbits {",
          "1129:             maxbits",
          "1130:         } else {",
          "1131:             maxbits - modbits",
          "1132:         };",
          "1134:         ASN1Block::BitString(0, nbits, bytes)",
          "1135:     }",
          "1140:         ASN1Block::OctetString(0, bytes)",
          "1141:     }",
          "1144:         ASN1Block::Null(0)",
          "1145:     }",
          "1147:     impl Arbitrary for OID {",
          "1151:             let v2mod = if val1 == 2 { 176 } else { 40 };",
          "1153:             let v1 = BigUint::from_u8(val1).unwrap();",
          "1154:             let v2 = BigUint::from_u8(val2).unwrap();",
          "1155:             let mut nums = vec![v1, v2];",
          "",
          "[Removed Lines]",
          "1105:         fn arbitrary<G: Gen>(g: &mut G) -> RandomInt {",
          "1106:             let v = BigInt::from_i64(g.gen::<i64>()).unwrap();",
          "1112:     type ASN1BlockGen<G: Gen> = fn(&mut G, usize) -> ASN1Block;",
          "1114:     fn arb_boolean<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1115:         let v = g.gen::<bool>();",
          "1119:     fn arb_integer<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1124:     fn arb_bitstr<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1125:         let size = g.gen::<u16>() as usize % 16;",
          "1127:         let modbits = g.gen::<u8>() as usize % 8;",
          "1133:         let bytes = g.sample_iter::<u8, _>(&Standard).take(size).collect();",
          "1137:     fn arb_octstr<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1138:         let size = g.gen::<u16>() as usize % 16;",
          "1139:         let bytes = g.sample_iter::<u8, _>(&Standard).take(size).collect();",
          "1143:     fn arb_null<G: Gen>(_g: &mut G, _d: usize) -> ASN1Block {",
          "1148:         fn arbitrary<G: Gen>(g: &mut G) -> OID {",
          "1149:             let count = g.gen_range::<usize, _, _>(0, 40);",
          "1150:             let val1 = g.gen::<u8>() % 3;",
          "1152:             let val2 = g.gen::<u8>() % v2mod;",
          "",
          "[Added Lines]",
          "1111:         fn arbitrary(g: &mut Gen) -> RandomInt {",
          "1112:             let v = BigInt::from_i64(i64::arbitrary(g)).unwrap();",
          "1118:     type ASN1BlockGen = fn(&mut Gen, usize) -> ASN1Block;",
          "1120:     fn arb_boolean(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1121:         let v = bool::arbitrary(g);",
          "1125:     fn arb_integer(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1130:     fn arb_bitstr(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1131:         let size = u16::arbitrary(g) as usize % 16;",
          "1133:         let modbits = u8::arbitrary(g) as usize % 8;",
          "1140:         let mut bytes = Vec::with_capacity(size);",
          "1141:         while bytes.len() < size {",
          "1142:             bytes.push(u8::arbitrary(g));",
          "1143:         }",
          "1148:     fn arb_octstr(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1149:         let size = usize::arbitrary(g) % 16;",
          "1150:         let mut bytes = Vec::with_capacity(size);",
          "1152:         while bytes.len() < size {",
          "1153:             bytes.push(u8::arbitrary(g));",
          "1154:         }",
          "1159:     fn arb_null(_g: &mut Gen, _d: usize) -> ASN1Block {",
          "1164:         fn arbitrary(g: &mut Gen) -> OID {",
          "1165:             let count = usize::arbitrary(g) % 40;",
          "1166:             let val1 = u8::arbitrary(g) % 3;",
          "1168:             let val2 = u8::arbitrary(g) % v2mod;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1163:         }",
          "1164:     }",
          "1167:         let oid = OID::arbitrary(g);",
          "1168:         ASN1Block::ObjectIdentifier(0, oid)",
          "1169:     }",
          "1173:         let mut items = Vec::new();",
          "1175:         for _ in 0..count {",
          "",
          "[Removed Lines]",
          "1166:     fn arb_objid<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1171:     fn arb_seq<G: Gen>(g: &mut G, d: usize) -> ASN1Block {",
          "1172:         let count = g.gen_range::<usize, _, _>(1, 64);",
          "",
          "[Added Lines]",
          "1182:     fn arb_objid(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1187:     fn arb_seq(g: &mut Gen, d: usize) -> ASN1Block {",
          "1188:         let count = usize::arbitrary(g) % 63 + 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1179:         ASN1Block::Sequence(0, items)",
          "1180:     }",
          "1184:         let mut items = Vec::new();",
          "1186:         for _ in 0..count {",
          "",
          "[Removed Lines]",
          "1182:     fn arb_set<G: Gen>(g: &mut G, d: usize) -> ASN1Block {",
          "1183:         let count = g.gen_range::<usize, _, _>(1, 64);",
          "",
          "[Added Lines]",
          "1198:     fn arb_set(g: &mut Gen, d: usize) -> ASN1Block {",
          "1199:         let count = usize::arbitrary(g) % 63 + 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1190:         ASN1Block::Set(0, items)",
          "1191:     }",
          "1195:         let mut items = Vec::new();",
          "1197:         for _ in 0..count {",
          "1200:         }",
          "1202:         ASN1Block::PrintableString(0, String::from_iter(items.iter()))",
          "1203:     }",
          "1207:         let mut items = Vec::new();",
          "1209:         for _ in 0..count {",
          "1211:         }",
          "1213:         ASN1Block::IA5String(0, String::from_iter(items.iter()))",
          "1214:     }",
          "1217:         let val = String::arbitrary(g);",
          "1218:         ASN1Block::UTF8String(0, val)",
          "1219:     }",
          "1222:         let val = String::arbitrary(g);",
          "1223:         ASN1Block::TeletexString(0, val)",
          "1224:     }",
          "1227:         let val = String::arbitrary(g);",
          "1228:         ASN1Block::UniversalString(0, val)",
          "1229:     }",
          "1232:         let val = String::arbitrary(g);",
          "1233:         ASN1Block::BMPString(0, val)",
          "1234:     }",
          "1237:         loop {",
          "1241:             match Utc.ymd_opt(y, m, d) {",
          "1242:                 LocalResult::None => {}",
          "1243:                 LocalResult::Single(d) => {",
          "1247:                     let t = d.and_hms(h, m, s);",
          "1248:                     return ASN1Block::UTCTime(0, t);",
          "1249:                 }",
          "",
          "[Removed Lines]",
          "1193:     fn arb_print<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1194:         let count = g.gen_range::<usize, _, _>(0, 384);",
          "1198:             let v = PRINTABLE_CHARS.as_bytes().choose(g).unwrap();",
          "1199:             items.push(*v as char);",
          "1205:     fn arb_ia5<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1206:         let count = g.gen_range::<usize, _, _>(0, 384);",
          "1210:             items.push(g.gen::<u8>() as char);",
          "1216:     fn arb_utf8<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1221:     fn arb_tele<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1226:     fn arb_uni<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1231:     fn arb_bmp<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1236:     fn arb_utc<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1238:             let y = g.gen_range::<i32, _, _>(1970, 2069);",
          "1239:             let m = g.gen_range::<u32, _, _>(1, 13);",
          "1240:             let d = g.gen_range::<u32, _, _>(1, 32);",
          "1244:                     let h = g.gen_range::<u32, _, _>(0, 24);",
          "1245:                     let m = g.gen_range::<u32, _, _>(0, 60);",
          "1246:                     let s = g.gen_range::<u32, _, _>(0, 60);",
          "",
          "[Added Lines]",
          "1209:     fn arb_print(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1210:         let count = usize::arbitrary(g) % 384;",
          "1214:             let v = g.choose(PRINTABLE_CHARS.as_bytes());",
          "1215:             items.push(*v.unwrap() as char);",
          "1221:     fn arb_ia5(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1222:         let count = usize::arbitrary(g) % 384;",
          "1226:             items.push(u8::arbitrary(g) as char);",
          "1232:     fn arb_utf8(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1237:     fn arb_tele(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1242:     fn arb_uni(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1247:     fn arb_bmp(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1252:     fn arb_utc(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1254:             let y = (i32::arbitrary(g) % 100).abs() + 1970;",
          "1255:             let m = u32::arbitrary(g) % 12 + 1;",
          "1256:             let d = u32::arbitrary(g) % 31 + 1;",
          "1260:                     let h = u32::arbitrary(g) % 24;",
          "1261:                     let m = u32::arbitrary(g) % 60;",
          "1262:                     let s = u32::arbitrary(g) % 60;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1252:         }",
          "1253:     }",
          "1256:         loop {",
          "1260:             match Utc.ymd_opt(y, m, d) {",
          "1261:                 LocalResult::None => {}",
          "1262:                 LocalResult::Single(d) => {",
          "1267:                     let t = d.and_hms_nano(h, m, s, n);",
          "1268:                     return ASN1Block::GeneralizedTime(0, t);",
          "1269:                 }",
          "",
          "[Removed Lines]",
          "1255:     fn arb_time<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1257:             let y = g.gen_range::<i32, _, _>(0, 10000);",
          "1258:             let m = g.gen_range::<u32, _, _>(1, 13);",
          "1259:             let d = g.gen_range::<u32, _, _>(1, 32);",
          "1263:                     let h = g.gen_range::<u32, _, _>(0, 24);",
          "1264:                     let m = g.gen_range::<u32, _, _>(0, 60);",
          "1265:                     let s = g.gen_range::<u32, _, _>(0, 60);",
          "1266:                     let n = g.gen_range::<u32, _, _>(0, 1000000000);",
          "",
          "[Added Lines]",
          "1271:     fn arb_time(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1273:             let y = (i32::arbitrary(g) % 10000).abs();",
          "1274:             let m = u32::arbitrary(g) % 12 + 1;",
          "1275:             let d = u32::arbitrary(g) % 31 + 1;",
          "1279:                     let h = u32::arbitrary(g) % 24;",
          "1280:                     let m = u32::arbitrary(g) % 60;",
          "1281:                     let s = u32::arbitrary(g) % 60;",
          "1282:                     let n = u32::arbitrary(g) % 1000000000;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1272:         }",
          "1273:     }",
          "1276:         let mut class = ASN1Class::arbitrary(g);",
          "1277:         if class == ASN1Class::Universal {",
          "",
          "[Removed Lines]",
          "1275:     fn arb_explicit<G: Gen>(g: &mut G, d: usize) -> ASN1Block {",
          "",
          "[Added Lines]",
          "1291:     fn arb_explicit(g: &mut Gen, d: usize) -> ASN1Block {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1284:         ASN1Block::Explicit(class, 0, tag.x, Box::new(item))",
          "1285:     }",
          "1288:         let class = ASN1Class::arbitrary(g);",
          "1293:         ASN1Block::Unknown(class, false, 0, tag.x, items)",
          "1294:     }",
          "1298:             arb_boolean,",
          "1299:             arb_integer,",
          "1300:             arb_bitstr,",
          "",
          "[Removed Lines]",
          "1287:     fn arb_unknown<G: Gen>(g: &mut G, _d: usize) -> ASN1Block {",
          "1289:         let tag = RandomUint::arbitrary(g);",
          "1290:         let size = g.gen_range::<usize, _, _>(0, 128);",
          "1291:         let items = g.sample_iter::<u8, _>(&Standard).take(size).collect();",
          "1296:     fn limited_arbitrary<G: Gen>(g: &mut G, d: usize) -> ASN1Block {",
          "1297:         let mut possibles: Vec<ASN1BlockGen<G>> = vec![",
          "",
          "[Added Lines]",
          "1303:     fn arb_unknown(g: &mut Gen, _d: usize) -> ASN1Block {",
          "1305:         let tag = loop {",
          "1306:             let potential = RandomUint::arbitrary(g);",
          "1307:             match potential.x.to_u8() {",
          "1308:                 None => break potential,",
          "1309:                 Some(x) if KNOWN_TAGS.contains(&x) => {},",
          "1310:                 Some(_) => break potential,",
          "1311:             }",
          "1312:         };",
          "1313:         let size = usize::arbitrary(g) % 128;",
          "1314:         let mut items = Vec::with_capacity(size);",
          "1316:         while items.len() < size {",
          "1317:             items.push(u8::arbitrary(g));",
          "1318:         }",
          "1323:     fn limited_arbitrary(g: &mut Gen, d: usize) -> ASN1Block {",
          "1324:         let mut possibles: Vec<ASN1BlockGen> = vec![",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1318:             possibles.push(arb_explicit);",
          "1319:         }",
          "1322:             Some(f) => f(g, d),",
          "1323:             None => panic!(\"Couldn't generate arbitrary value.\"),",
          "1324:         }",
          "1325:     }",
          "1327:     impl Arbitrary for ASN1Block {",
          "1329:             limited_arbitrary(g, 2)",
          "1330:         }",
          "1331:     }",
          "",
          "[Removed Lines]",
          "1321:         match possibles[..].choose(g) {",
          "1328:         fn arbitrary<G: Gen>(g: &mut G) -> ASN1Block {",
          "",
          "[Added Lines]",
          "1348:         match g.choose(&possibles[..]) {",
          "1355:         fn arbitrary(g: &mut Gen) -> ASN1Block {",
          "",
          "---------------"
        ]
      }
    }
  ]
}