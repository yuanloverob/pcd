{
  "cve_id": "CVE-2020-36048",
  "cve_desc": "Engine.IO before 4.0.0 allows attackers to cause a denial of service (resource consumption) via a POST request to the long polling transport.",
  "repo": "socketio/engine.io",
  "patch_hash": "734f9d1268840722c41219e69eb58318e0b2ac6b",
  "patch_info": {
    "commit_hash": "734f9d1268840722c41219e69eb58318e0b2ac6b",
    "repo": "socketio/engine.io",
    "commit_url": "https://github.com/socketio/engine.io/commit/734f9d1268840722c41219e69eb58318e0b2ac6b",
    "files": [
      "lib/server.js"
    ],
    "message": "feat: decrease the default value of maxHttpBufferSize\n\nThis change reduces the default value from 100 mb to a more sane 1 mb.\n\nThis helps protect the server against denial of service attacks by\nmalicious clients sending huge amounts of data.",
    "before_after_code_files": [
      "lib/server.js||lib/server.js"
    ]
  },
  "patch_diff": {
    "lib/server.js||lib/server.js": [
      "File: lib/server.js -> lib/server.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:         pingTimeout: 5000,",
      "27:         pingInterval: 25000,",
      "28:         upgradeTimeout: 10000,",
      "30:         transports: Object.keys(transports),",
      "31:         allowUpgrades: true,",
      "32:         perMessageDeflate: {",
      "",
      "[Removed Lines]",
      "29:         maxHttpBufferSize: 10e7,",
      "",
      "[Added Lines]",
      "29:         maxHttpBufferSize: 1e6,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58e274c437e9cbcf69fd913c813aad8fbd253703",
      "candidate_info": {
        "commit_hash": "58e274c437e9cbcf69fd913c813aad8fbd253703",
        "repo": "socketio/engine.io",
        "commit_url": "https://github.com/socketio/engine.io/commit/58e274c437e9cbcf69fd913c813aad8fbd253703",
        "files": [
          "README.md",
          "lib/server.js"
        ],
        "message": "feat: decrease the default value of maxHttpBufferSize\n\nThis change reduces the default value from 100 mb to a more sane 1 mb.\n\nThis helps protect the server against denial of service attacks by\nmalicious clients sending huge amounts of data.\n\nBackported from https://github.com/socketio/engine.io/commit/734f9d1268840722c41219e69eb58318e0b2ac6b",
        "before_after_code_files": [
          "lib/server.js||lib/server.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/server.js||lib/server.js"
          ],
          "candidate": [
            "lib/server.js||lib/server.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/server.js||lib/server.js": [
          "File: lib/server.js -> lib/server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   this.pingTimeout = opts.pingTimeout || 5000;",
          "41:   this.pingInterval = opts.pingInterval || 25000;",
          "42:   this.upgradeTimeout = opts.upgradeTimeout || 10000;",
          "44:   this.transports = opts.transports || Object.keys(transports);",
          "45:   this.allowUpgrades = false !== opts.allowUpgrades;",
          "46:   this.allowRequest = opts.allowRequest;",
          "",
          "[Removed Lines]",
          "43:   this.maxHttpBufferSize = opts.maxHttpBufferSize || 10E7;",
          "",
          "[Added Lines]",
          "43:   this.maxHttpBufferSize = opts.maxHttpBufferSize || 1e6;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da93fb6ef3d6f6e2a93226480823683accb82aa3",
      "candidate_info": {
        "commit_hash": "da93fb6ef3d6f6e2a93226480823683accb82aa3",
        "repo": "socketio/engine.io",
        "commit_url": "https://github.com/socketio/engine.io/commit/da93fb6ef3d6f6e2a93226480823683accb82aa3",
        "files": [
          "lib/engine.io.js",
          "lib/server.js",
          "lib/socket.js",
          "lib/transport.js",
          "lib/transports/index.js",
          "lib/transports/polling-jsonp.js",
          "lib/transports/polling-xhr.js",
          "lib/transports/polling.js",
          "lib/transports/websocket.js",
          "package-lock.json"
        ],
        "message": "refactor: migrate to ES6 syntax",
        "before_after_code_files": [
          "lib/engine.io.js||lib/engine.io.js",
          "lib/server.js||lib/server.js",
          "lib/socket.js||lib/socket.js",
          "lib/transport.js||lib/transport.js",
          "lib/transports/index.js||lib/transports/index.js",
          "lib/transports/polling-jsonp.js||lib/transports/polling-jsonp.js",
          "lib/transports/polling-xhr.js||lib/transports/polling-xhr.js",
          "lib/transports/polling.js||lib/transports/polling.js",
          "lib/transports/websocket.js||lib/transports/websocket.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/server.js||lib/server.js"
          ],
          "candidate": [
            "lib/server.js||lib/server.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/engine.io.js||lib/engine.io.js": [
          "File: lib/engine.io.js -> lib/engine.io.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "5: var http = require('http');",
          "",
          "[Added Lines]",
          "5: const http = require('http');",
          "6: const Server = require('./server');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:   }",
          "29: };",
          "",
          "[Removed Lines]",
          "28:   return exports.Server.apply(null, arguments);",
          "",
          "[Added Lines]",
          "29:   return new Server(arguments);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "45: exports.Server = require('./server');",
          "",
          "[Added Lines]",
          "46: exports.Server = Server;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:     options = {};",
          "95:   }",
          "98:     res.writeHead(501);",
          "99:     res.end('Not Implemented');",
          "100:   });",
          "104:   engine.httpServer = server;",
          "106:   server.listen(port, fn);",
          "",
          "[Removed Lines]",
          "97:   var server = http.createServer(function (req, res) {",
          "103:   var engine = exports.attach(server, options);",
          "",
          "[Added Lines]",
          "98:   const server = http.createServer(function (req, res) {",
          "104:   const engine = exports.attach(server, options);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120: exports.attach = attach;",
          "122: function attach (server, options) {",
          "124:   engine.attach(server, options);",
          "125:   return engine;",
          "126: }",
          "",
          "[Removed Lines]",
          "123:   var engine = new exports.Server(options);",
          "",
          "[Added Lines]",
          "124:   const engine = new Server(options);",
          "",
          "---------------"
        ],
        "lib/server.js||lib/server.js": [
          "File: lib/server.js -> lib/server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   }",
          "62:     }",
          "110:   }",
          "145:   }",
          "161:     }",
          "165:     }",
          "171:   }",
          "200:     }",
          "201:   }",
          "237: };",
          "",
          "[Removed Lines]",
          "6: var qs = require('querystring');",
          "7: var parse = require('url').parse;",
          "8: var base64id = require('base64id');",
          "9: var transports = require('./transports');",
          "10: var EventEmitter = require('events').EventEmitter;",
          "11: var Socket = require('./socket');",
          "12: var util = require('util');",
          "13: var debug = require('debug')('engine');",
          "14: var cookieMod = require('cookie');",
          "20: module.exports = Server;",
          "29: function Server (opts) {",
          "30:   if (!(this instanceof Server)) {",
          "31:     return new Server(opts);",
          "34:   this.clients = {};",
          "35:   this.clientsCount = 0;",
          "37:   opts = opts || {};",
          "39:   this.wsEngine = opts.wsEngine || process.env.EIO_WS_ENGINE || 'ws';",
          "40:   this.pingTimeout = opts.pingTimeout || 5000;",
          "41:   this.pingInterval = opts.pingInterval || 25000;",
          "42:   this.upgradeTimeout = opts.upgradeTimeout || 10000;",
          "43:   this.maxHttpBufferSize = opts.maxHttpBufferSize || 10E7;",
          "44:   this.transports = opts.transports || Object.keys(transports);",
          "45:   this.allowUpgrades = false !== opts.allowUpgrades;",
          "46:   this.allowRequest = opts.allowRequest;",
          "47:   this.cookie = false !== opts.cookie ? (opts.cookie || 'io') : false;",
          "48:   this.cookiePath = false !== opts.cookiePath ? (opts.cookiePath || '/') : false;",
          "49:   this.cookieHttpOnly = false !== opts.cookieHttpOnly;",
          "50:   this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || true) : false;",
          "51:   this.httpCompression = false !== opts.httpCompression ? (opts.httpCompression || {}) : false;",
          "52:   this.initialPacket = opts.initialPacket;",
          "54:   var self = this;",
          "57:   ['perMessageDeflate', 'httpCompression'].forEach(function (type) {",
          "58:     var compression = self[type];",
          "59:     if (true === compression) self[type] = compression = {};",
          "60:     if (compression && null == compression.threshold) {",
          "61:       compression.threshold = 1024;",
          "63:   });",
          "65:   this.init();",
          "66: }",
          "72: Server.errors = {",
          "73:   UNKNOWN_TRANSPORT: 0,",
          "74:   UNKNOWN_SID: 1,",
          "75:   BAD_HANDSHAKE_METHOD: 2,",
          "76:   BAD_REQUEST: 3,",
          "77:   FORBIDDEN: 4",
          "78: };",
          "80: Server.errorMessages = {",
          "81:   0: 'Transport unknown',",
          "82:   1: 'Session ID unknown',",
          "83:   2: 'Bad handshake method',",
          "84:   3: 'Bad request',",
          "85:   4: 'Forbidden'",
          "86: };",
          "92: util.inherits(Server, EventEmitter);",
          "100: Server.prototype.init = function () {",
          "101:   if (!~this.transports.indexOf('websocket')) return;",
          "103:   if (this.ws) this.ws.close();",
          "105:   var wsModule;",
          "106:   switch (this.wsEngine) {",
          "107:     case 'uws': wsModule = require('uws'); break;",
          "108:     case 'ws': wsModule = require('ws'); break;",
          "109:     default: throw new Error('unknown wsEngine');",
          "111:   this.ws = new wsModule.Server({",
          "112:     noServer: true,",
          "113:     clientTracking: false,",
          "114:     perMessageDeflate: this.perMessageDeflate,",
          "115:     maxPayload: this.maxHttpBufferSize",
          "116:   });",
          "117: };",
          "126: Server.prototype.upgrades = function (transport) {",
          "127:   if (!this.allowUpgrades) return [];",
          "128:   return transports[transport].upgradesTo || [];",
          "129: };",
          "139: Server.prototype.verify = function (req, upgrade, fn) {",
          "141:   var transport = req._query.transport;",
          "142:   if (!~this.transports.indexOf(transport)) {",
          "143:     debug('unknown transport \"%s\"', transport);",
          "144:     return fn(Server.errors.UNKNOWN_TRANSPORT, false);",
          "148:   var isOriginInvalid = checkInvalidHeaderChar(req.headers.origin);",
          "149:   if (isOriginInvalid) {",
          "150:     req.headers.origin = null;",
          "151:     debug('origin header invalid');",
          "152:     return fn(Server.errors.BAD_REQUEST, false);",
          "153:   }",
          "156:   var sid = req._query.sid;",
          "157:   if (sid) {",
          "158:     if (!this.clients.hasOwnProperty(sid)) {",
          "159:       debug('unknown sid \"%s\"', sid);",
          "160:       return fn(Server.errors.UNKNOWN_SID, false);",
          "162:     if (!upgrade && this.clients[sid].transport.name !== transport) {",
          "163:       debug('bad request: unexpected transport without upgrade');",
          "164:       return fn(Server.errors.BAD_REQUEST, false);",
          "166:   } else {",
          "168:     if ('GET' !== req.method) return fn(Server.errors.BAD_HANDSHAKE_METHOD, false);",
          "169:     if (!this.allowRequest) return fn(null, true);",
          "170:     return this.allowRequest(req, fn);",
          "173:   fn(null, true);",
          "174: };",
          "182: Server.prototype.prepare = function (req) {",
          "184:   if (!req._query) {",
          "185:     req._query = ~req.url.indexOf('?') ? qs.parse(parse(req.url).query) : {};",
          "186:   }",
          "187: };",
          "195: Server.prototype.close = function () {",
          "196:   debug('closing all open clients');",
          "197:   for (var i in this.clients) {",
          "198:     if (this.clients.hasOwnProperty(i)) {",
          "199:       this.clients[i].close(true);",
          "202:   if (this.ws) {",
          "203:     debug('closing webSocketServer');",
          "204:     this.ws.close();",
          "206:   }",
          "207:   return this;",
          "208: };",
          "218: Server.prototype.handleRequest = function (req, res) {",
          "219:   debug('handling \"%s\" http request \"%s\"', req.method, req.url);",
          "220:   this.prepare(req);",
          "221:   req.res = res;",
          "223:   var self = this;",
          "224:   this.verify(req, false, function (err, success) {",
          "225:     if (!success) {",
          "226:       sendErrorMessage(req, res, err);",
          "227:       return;",
          "228:     }",
          "230:     if (req._query.sid) {",
          "231:       debug('setting new request for existing client');",
          "232:       self.clients[req._query.sid].transport.onRequest(req);",
          "233:     } else {",
          "234:       self.handshake(req._query.transport, req);",
          "235:     }",
          "236:   });",
          "",
          "[Added Lines]",
          "1: const qs = require('querystring');",
          "2: const parse = require('url').parse;",
          "3: const base64id = require('base64id');",
          "4: const transports = require('./transports');",
          "5: const EventEmitter = require('events').EventEmitter;",
          "6: const Socket = require('./socket');",
          "7: const debug = require('debug')('engine');",
          "8: const cookieMod = require('cookie');",
          "10: class Server extends EventEmitter {",
          "17:   constructor (opts) {",
          "18:     super();",
          "20:     this.clients = {};",
          "21:     this.clientsCount = 0;",
          "23:     opts = opts || {};",
          "25:     this.wsEngine = opts.wsEngine || process.env.EIO_WS_ENGINE || 'ws';",
          "26:     this.pingTimeout = opts.pingTimeout || 5000;",
          "27:     this.pingInterval = opts.pingInterval || 25000;",
          "28:     this.upgradeTimeout = opts.upgradeTimeout || 10000;",
          "29:     this.maxHttpBufferSize = opts.maxHttpBufferSize || 10E7;",
          "30:     this.transports = opts.transports || Object.keys(transports);",
          "31:     this.allowUpgrades = false !== opts.allowUpgrades;",
          "32:     this.allowRequest = opts.allowRequest;",
          "33:     this.cookie = false !== opts.cookie ? (opts.cookie || 'io') : false;",
          "34:     this.cookiePath = false !== opts.cookiePath ? (opts.cookiePath || '/') : false;",
          "35:     this.cookieHttpOnly = false !== opts.cookieHttpOnly;",
          "36:     this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || true) : false;",
          "37:     this.httpCompression = false !== opts.httpCompression ? (opts.httpCompression || {}) : false;",
          "38:     this.initialPacket = opts.initialPacket;",
          "41:     ['perMessageDeflate', 'httpCompression'].forEach((type) => {",
          "42:       let compression = this[type];",
          "43:       if (true === compression) this[type] = compression = {};",
          "44:       if (compression && null == compression.threshold) {",
          "45:         compression.threshold = 1024;",
          "46:       }",
          "47:     });",
          "49:     this.init();",
          "50:   }",
          "57:   init () {",
          "58:     if (!~this.transports.indexOf('websocket')) return;",
          "60:     if (this.ws) this.ws.close();",
          "62:     let wsModule;",
          "63:     switch (this.wsEngine) {",
          "64:       case 'uws': wsModule = require('uws'); break;",
          "65:       case 'ws': wsModule = require('ws'); break;",
          "66:       default: throw new Error('unknown wsEngine');",
          "67:     }",
          "68:     this.ws = new wsModule.Server({",
          "69:       noServer: true,",
          "70:       clientTracking: false,",
          "71:       perMessageDeflate: this.perMessageDeflate,",
          "72:       maxPayload: this.maxHttpBufferSize",
          "73:     });",
          "74:   }",
          "82:   upgrades (transport) {",
          "83:     if (!this.allowUpgrades) return [];",
          "84:     return transports[transport].upgradesTo || [];",
          "85:   }",
          "94:   verify (req, upgrade, fn) {",
          "96:     const transport = req._query.transport;",
          "97:     if (!~this.transports.indexOf(transport)) {",
          "98:       debug('unknown transport \"%s\"', transport);",
          "99:       return fn(Server.errors.UNKNOWN_TRANSPORT, false);",
          "100:     }",
          "103:     const isOriginInvalid = checkInvalidHeaderChar(req.headers.origin);",
          "104:     if (isOriginInvalid) {",
          "105:       req.headers.origin = null;",
          "106:       debug('origin header invalid');",
          "107:       return fn(Server.errors.BAD_REQUEST, false);",
          "108:     }",
          "111:     const sid = req._query.sid;",
          "112:     if (sid) {",
          "113:       if (!this.clients.hasOwnProperty(sid)) {",
          "114:         debug('unknown sid \"%s\"', sid);",
          "115:         return fn(Server.errors.UNKNOWN_SID, false);",
          "116:       }",
          "117:       if (!upgrade && this.clients[sid].transport.name !== transport) {",
          "118:         debug('bad request: unexpected transport without upgrade');",
          "119:         return fn(Server.errors.BAD_REQUEST, false);",
          "120:       }",
          "121:     } else {",
          "123:       if ('GET' !== req.method) return fn(Server.errors.BAD_HANDSHAKE_METHOD, false);",
          "124:       if (!this.allowRequest) return fn(null, true);",
          "125:       return this.allowRequest(req, fn);",
          "126:     }",
          "128:     fn(null, true);",
          "136:   prepare (req) {",
          "138:     if (!req._query) {",
          "139:       req._query = ~req.url.indexOf('?') ? qs.parse(parse(req.url).query) : {};",
          "141:   }",
          "148:   close () {",
          "149:     debug('closing all open clients');",
          "150:     for (let i in this.clients) {",
          "151:       if (this.clients.hasOwnProperty(i)) {",
          "152:         this.clients[i].close(true);",
          "153:       }",
          "154:     }",
          "155:     if (this.ws) {",
          "156:       debug('closing webSocketServer');",
          "157:       this.ws.close();",
          "159:     }",
          "160:     return this;",
          "161:   }",
          "170:   handleRequest (req, res) {",
          "171:     debug('handling \"%s\" http request \"%s\"', req.method, req.url);",
          "172:     this.prepare(req);",
          "173:     req.res = res;",
          "175:     const self = this;",
          "176:     this.verify(req, false, function (err, success) {",
          "177:       if (!success) {",
          "178:         sendErrorMessage(req, res, err);",
          "179:         return;",
          "180:       }",
          "182:       if (req._query.sid) {",
          "183:         debug('setting new request for existing client');",
          "184:         self.clients[req._query.sid].transport.onRequest(req);",
          "185:       } else {",
          "186:         self.handshake(req._query.transport, req);",
          "187:       }",
          "188:     });",
          "189:   }",
          "198:   generateId (req) {",
          "199:     return base64id.generateId();",
          "200:   }",
          "209:   handshake (transportName, req) {",
          "210:     const id = this.generateId(req);",
          "212:     debug('handshaking client \"%s\"', id);",
          "214:     try {",
          "215:       var transport = new transports[transportName](req);",
          "216:       if ('polling' === transportName) {",
          "217:         transport.maxHttpBufferSize = this.maxHttpBufferSize;",
          "218:         transport.httpCompression = this.httpCompression;",
          "219:       } else if ('websocket' === transportName) {",
          "220:         transport.perMessageDeflate = this.perMessageDeflate;",
          "221:       }",
          "223:       if (req._query && req._query.b64) {",
          "224:         transport.supportsBinary = false;",
          "225:       } else {",
          "226:         transport.supportsBinary = true;",
          "227:       }",
          "228:     } catch (e) {",
          "229:       debug('error handshaking to transport \"%s\"', transportName);",
          "230:       sendErrorMessage(req, req.res, Server.errors.BAD_REQUEST);",
          "231:       return;",
          "232:     }",
          "233:     const socket = new Socket(id, this, transport, req);",
          "234:     const self = this;",
          "236:     if (false !== this.cookie) {",
          "237:       transport.on('headers', function (headers) {",
          "238:         headers['Set-Cookie'] = cookieMod.serialize(self.cookie, id,",
          "239:           {",
          "240:             path: self.cookiePath,",
          "241:             httpOnly: self.cookiePath ? self.cookieHttpOnly : false",
          "242:           });",
          "243:       });",
          "244:     }",
          "246:     transport.onRequest(req);",
          "248:     this.clients[id] = socket;",
          "249:     this.clientsCount++;",
          "251:     socket.once('close', function () {",
          "252:       delete self.clients[id];",
          "253:       self.clientsCount--;",
          "254:     });",
          "256:     this.emit('connection', socket);",
          "264:   handleUpgrade (req, socket, upgradeHead) {",
          "265:     this.prepare(req);",
          "267:     const self = this;",
          "268:     this.verify(req, true, function (err, success) {",
          "269:       if (!success) {",
          "270:         abortConnection(socket, err);",
          "271:         return;",
          "272:       }",
          "274:       const head = Buffer.from(upgradeHead); // eslint-disable-line node/no-deprecated-api",
          "275:       upgradeHead = null;",
          "278:       self.ws.handleUpgrade(req, socket, head, function (conn) {",
          "279:         self.onWebSocket(req, conn);",
          "280:       });",
          "281:     });",
          "290:   onWebSocket (req, socket) {",
          "291:     socket.on('error', onUpgradeError);",
          "293:     if (transports[req._query.transport] !== undefined && !transports[req._query.transport].prototype.handlesUpgrades) {",
          "294:       debug('transport doesnt handle upgraded requests');",
          "295:       socket.close();",
          "296:       return;",
          "297:     }",
          "300:     const id = req._query.sid;",
          "303:     req.websocket = socket;",
          "305:     if (id) {",
          "306:       const client = this.clients[id];",
          "307:       if (!client) {",
          "308:         debug('upgrade attempt for closed client');",
          "309:         socket.close();",
          "310:       } else if (client.upgrading) {",
          "311:         debug('transport has already been trying to upgrade');",
          "312:         socket.close();",
          "313:       } else if (client.upgraded) {",
          "314:         debug('transport had already been upgraded');",
          "315:         socket.close();",
          "316:       } else {",
          "317:         debug('upgrading existing transport');",
          "320:         socket.removeListener('error', onUpgradeError);",
          "322:         const transport = new transports[req._query.transport](req);",
          "323:         if (req._query && req._query.b64) {",
          "324:           transport.supportsBinary = false;",
          "325:         } else {",
          "326:           transport.supportsBinary = true;",
          "327:         }",
          "328:         transport.perMessageDeflate = this.perMessageDeflate;",
          "329:         client.maybeUpgrade(transport);",
          "330:       }",
          "331:     } else {",
          "333:       socket.removeListener('error', onUpgradeError);",
          "335:       this.handshake(req._query.transport, req);",
          "338:     function onUpgradeError () {",
          "339:       debug('websocket error before upgrade');",
          "351:   attach (server, options) {",
          "352:     const self = this;",
          "353:     options = options || {};",
          "354:     let path = (options.path || '/engine.io').replace(/\\/$/, '');",
          "356:     const destroyUpgradeTimeout = options.destroyUpgradeTimeout || 1000;",
          "359:     path += '/';",
          "361:     function check (req) {",
          "362:       if ('OPTIONS' === req.method && false === options.handlePreflightRequest) {",
          "363:         return false;",
          "364:       }",
          "365:       return path === req.url.substr(0, path.length);",
          "366:     }",
          "369:     const listeners = server.listeners('request').slice(0);",
          "370:     server.removeAllListeners('request');",
          "371:     server.on('close', self.close.bind(self));",
          "372:     server.on('listening', self.init.bind(self));",
          "375:     server.on('request', function (req, res) {",
          "376:       if (check(req)) {",
          "377:         debug('intercepting request for path \"%s\"', path);",
          "378:         if ('OPTIONS' === req.method && 'function' === typeof options.handlePreflightRequest) {",
          "379:           options.handlePreflightRequest.call(server, req, res);",
          "380:         } else {",
          "381:           self.handleRequest(req, res);",
          "382:         }",
          "383:       } else {",
          "384:         let i = 0;",
          "385:         const l = listeners.length;",
          "386:         for (; i < l; i++) {",
          "387:           listeners[i].call(server, req, res);",
          "388:         }",
          "389:       }",
          "390:     });",
          "392:     if (~self.transports.indexOf('websocket')) {",
          "393:       server.on('upgrade', function (req, socket, head) {",
          "394:         if (check(req)) {",
          "395:           self.handleUpgrade(req, socket, head);",
          "396:         } else if (false !== options.destroyUpgrade) {",
          "401:           setTimeout(function () {",
          "402:             if (socket.writable && socket.bytesWritten <= 0) {",
          "403:               return socket.end();",
          "404:             }",
          "405:           }, destroyUpgradeTimeout);",
          "406:         }",
          "407:       });",
          "410: }",
          "416: Server.errors = {",
          "417:   UNKNOWN_TRANSPORT: 0,",
          "418:   UNKNOWN_SID: 1,",
          "419:   BAD_HANDSHAKE_METHOD: 2,",
          "420:   BAD_REQUEST: 3,",
          "421:   FORBIDDEN: 4",
          "422: };",
          "424: Server.errorMessages = {",
          "425:   0: 'Transport unknown',",
          "426:   1: 'Session ID unknown',",
          "427:   2: 'Bad handshake method',",
          "428:   3: 'Bad request',",
          "429:   4: 'Forbidden'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247: function sendErrorMessage (req, res, code) {",
          "251:   if (isForbidden) {",
          "252:     res.writeHead(403, headers);",
          "253:     res.end(JSON.stringify({",
          "",
          "[Removed Lines]",
          "248:   var headers = { 'Content-Type': 'application/json' };",
          "250:   var isForbidden = !Server.errorMessages.hasOwnProperty(code);",
          "",
          "[Added Lines]",
          "441:   const headers = {'Content-Type': 'application/json'};",
          "443:   const isForbidden = !Server.errorMessages.hasOwnProperty(code);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "271:   }",
          "272: }",
          "",
          "[Removed Lines]",
          "282: Server.prototype.generateId = function (req) {",
          "283:   return base64id.generateId();",
          "284: };",
          "294: Server.prototype.handshake = function (transportName, req) {",
          "295:   var id = this.generateId(req);",
          "297:   debug('handshaking client \"%s\"', id);",
          "299:   try {",
          "300:     var transport = new transports[transportName](req);",
          "301:     if ('polling' === transportName) {",
          "302:       transport.maxHttpBufferSize = this.maxHttpBufferSize;",
          "303:       transport.httpCompression = this.httpCompression;",
          "304:     } else if ('websocket' === transportName) {",
          "305:       transport.perMessageDeflate = this.perMessageDeflate;",
          "306:     }",
          "308:     if (req._query && req._query.b64) {",
          "309:       transport.supportsBinary = false;",
          "310:     } else {",
          "311:       transport.supportsBinary = true;",
          "312:     }",
          "313:   } catch (e) {",
          "314:     debug('error handshaking to transport \"%s\"', transportName);",
          "315:     sendErrorMessage(req, req.res, Server.errors.BAD_REQUEST);",
          "316:     return;",
          "317:   }",
          "318:   var socket = new Socket(id, this, transport, req);",
          "319:   var self = this;",
          "321:   if (false !== this.cookie) {",
          "322:     transport.on('headers', function (headers) {",
          "323:       headers['Set-Cookie'] = cookieMod.serialize(self.cookie, id,",
          "324:         {",
          "325:           path: self.cookiePath,",
          "326:           httpOnly: self.cookiePath ? self.cookieHttpOnly : false",
          "327:         });",
          "328:     });",
          "329:   }",
          "331:   transport.onRequest(req);",
          "333:   this.clients[id] = socket;",
          "334:   this.clientsCount++;",
          "336:   socket.once('close', function () {",
          "337:     delete self.clients[id];",
          "338:     self.clientsCount--;",
          "339:   });",
          "341:   this.emit('connection', socket);",
          "342: };",
          "350: Server.prototype.handleUpgrade = function (req, socket, upgradeHead) {",
          "351:   this.prepare(req);",
          "353:   var self = this;",
          "354:   this.verify(req, true, function (err, success) {",
          "355:     if (!success) {",
          "356:       abortConnection(socket, err);",
          "357:       return;",
          "358:     }",
          "360:     var head = Buffer.from(upgradeHead); // eslint-disable-line node/no-deprecated-api",
          "361:     upgradeHead = null;",
          "364:     self.ws.handleUpgrade(req, socket, head, function (conn) {",
          "365:       self.onWebSocket(req, conn);",
          "366:     });",
          "367:   });",
          "368: };",
          "377: Server.prototype.onWebSocket = function (req, socket) {",
          "378:   socket.on('error', onUpgradeError);",
          "380:   if (transports[req._query.transport] !== undefined && !transports[req._query.transport].prototype.handlesUpgrades) {",
          "381:     debug('transport doesnt handle upgraded requests');",
          "382:     socket.close();",
          "383:     return;",
          "384:   }",
          "387:   var id = req._query.sid;",
          "390:   req.websocket = socket;",
          "392:   if (id) {",
          "393:     var client = this.clients[id];",
          "394:     if (!client) {",
          "395:       debug('upgrade attempt for closed client');",
          "396:       socket.close();",
          "397:     } else if (client.upgrading) {",
          "398:       debug('transport has already been trying to upgrade');",
          "399:       socket.close();",
          "400:     } else if (client.upgraded) {",
          "401:       debug('transport had already been upgraded');",
          "402:       socket.close();",
          "403:     } else {",
          "404:       debug('upgrading existing transport');",
          "407:       socket.removeListener('error', onUpgradeError);",
          "409:       var transport = new transports[req._query.transport](req);",
          "410:       if (req._query && req._query.b64) {",
          "411:         transport.supportsBinary = false;",
          "412:       } else {",
          "413:         transport.supportsBinary = true;",
          "414:       }",
          "415:       transport.perMessageDeflate = this.perMessageDeflate;",
          "416:       client.maybeUpgrade(transport);",
          "417:     }",
          "418:   } else {",
          "420:     socket.removeListener('error', onUpgradeError);",
          "422:     this.handshake(req._query.transport, req);",
          "423:   }",
          "425:   function onUpgradeError () {",
          "426:     debug('websocket error before upgrade');",
          "428:   }",
          "429: };",
          "439: Server.prototype.attach = function (server, options) {",
          "440:   var self = this;",
          "441:   options = options || {};",
          "442:   var path = (options.path || '/engine.io').replace(/\\/$/, '');",
          "444:   var destroyUpgradeTimeout = options.destroyUpgradeTimeout || 1000;",
          "447:   path += '/';",
          "449:   function check (req) {",
          "450:     if ('OPTIONS' === req.method && false === options.handlePreflightRequest) {",
          "451:       return false;",
          "452:     }",
          "453:     return path === req.url.substr(0, path.length);",
          "454:   }",
          "457:   var listeners = server.listeners('request').slice(0);",
          "458:   server.removeAllListeners('request');",
          "459:   server.on('close', self.close.bind(self));",
          "460:   server.on('listening', self.init.bind(self));",
          "463:   server.on('request', function (req, res) {",
          "464:     if (check(req)) {",
          "465:       debug('intercepting request for path \"%s\"', path);",
          "466:       if ('OPTIONS' === req.method && 'function' === typeof options.handlePreflightRequest) {",
          "467:         options.handlePreflightRequest.call(server, req, res);",
          "468:       } else {",
          "469:         self.handleRequest(req, res);",
          "470:       }",
          "471:     } else {",
          "472:       for (var i = 0, l = listeners.length; i < l; i++) {",
          "473:         listeners[i].call(server, req, res);",
          "474:       }",
          "475:     }",
          "476:   });",
          "478:   if (~self.transports.indexOf('websocket')) {",
          "479:     server.on('upgrade', function (req, socket, head) {",
          "480:       if (check(req)) {",
          "481:         self.handleUpgrade(req, socket, head);",
          "482:       } else if (false !== options.destroyUpgrade) {",
          "487:         setTimeout(function () {",
          "488:           if (socket.writable && socket.bytesWritten <= 0) {",
          "489:             return socket.end();",
          "490:           }",
          "491:         }, destroyUpgradeTimeout);",
          "492:       }",
          "493:     });",
          "494:   }",
          "495: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "505: function abortConnection (socket, code) {",
          "506:   if (socket.writable) {",
          "509:     socket.write(",
          "510:       'HTTP/1.1 400 Bad Request\\r\\n' +",
          "511:       'Connection: close\\r\\n' +",
          "",
          "[Removed Lines]",
          "507:     var message = Server.errorMessages.hasOwnProperty(code) ? Server.errorMessages[code] : String(code || '');",
          "508:     var length = Buffer.byteLength(message);",
          "",
          "[Added Lines]",
          "477:     const message = Server.errorMessages.hasOwnProperty(code) ? Server.errorMessages[code] : String(code || '');",
          "478:     const length = Buffer.byteLength(message);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "518:   socket.destroy();",
          "519: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491: module.exports = Server;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "536:   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, // 0 - 15",
          "537:   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31",
          "538:   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 32 - 47",
          "",
          "[Removed Lines]",
          "535: var validHdrChars = [",
          "",
          "[Added Lines]",
          "507: const validHdrChars = [",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "549:   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "550:   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "551:   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // ... 255",
          "554: function checkInvalidHeaderChar(val) {",
          "555:   val += '';",
          "",
          "[Removed Lines]",
          "552: ];",
          "",
          "[Added Lines]",
          "524: ]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "577:     debug('invalid header, index 3, char \"%s\"', val.charCodeAt(3));",
          "578:     return true;",
          "579:   }",
          "581:     if (!validHdrChars[val.charCodeAt(i)]) {",
          "582:       debug('invalid header, index \"%i\", char \"%s\"', i, val.charCodeAt(i));",
          "583:       return true;",
          "",
          "[Removed Lines]",
          "580:   for (var i = 4; i < val.length; ++i) {",
          "",
          "[Added Lines]",
          "552:   for (let i = 4; i < val.length; ++i) {",
          "",
          "---------------"
        ],
        "lib/socket.js||lib/socket.js": [
          "File: lib/socket.js -> lib/socket.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   }",
          "74:   }",
          "205:       cleanup();",
          "217:       }",
          "221:     }",
          "229:     }",
          "314:     });",
          "348:           }",
          "349:         }",
          "350:       }",
          "351:     }",
          "352:   }",
          "384:   }",
          "429:     }",
          "434:   }",
          "450:     }",
          "451:   }",
          "471:   }",
          "",
          "[Removed Lines]",
          "5: var EventEmitter = require('events').EventEmitter;",
          "6: var util = require('util');",
          "7: var debug = require('debug')('engine:socket');",
          "13: module.exports = Socket;",
          "21: function Socket (id, server, transport, req) {",
          "22:   this.id = id;",
          "23:   this.server = server;",
          "24:   this.upgrading = false;",
          "25:   this.upgraded = false;",
          "26:   this.readyState = 'opening';",
          "27:   this.writeBuffer = [];",
          "28:   this.packetsFn = [];",
          "29:   this.sentCallbackFn = [];",
          "30:   this.cleanupFn = [];",
          "31:   this.request = req;",
          "34:   if (req.websocket && req.websocket._socket) {",
          "35:     this.remoteAddress = req.websocket._socket.remoteAddress;",
          "36:   } else {",
          "37:     this.remoteAddress = req.connection.remoteAddress;",
          "40:   this.checkIntervalTimer = null;",
          "41:   this.upgradeTimeoutTimer = null;",
          "42:   this.pingTimeoutTimer = null;",
          "44:   this.setTransport(transport);",
          "45:   this.onOpen();",
          "46: }",
          "52: util.inherits(Socket, EventEmitter);",
          "60: Socket.prototype.onOpen = function () {",
          "61:   this.readyState = 'open';",
          "64:   this.transport.sid = this.id;",
          "65:   this.sendPacket('open', JSON.stringify({",
          "66:     sid: this.id,",
          "67:     upgrades: this.getAvailableUpgrades(),",
          "68:     pingInterval: this.server.pingInterval,",
          "69:     pingTimeout: this.server.pingTimeout",
          "70:   }));",
          "72:   if (this.server.initialPacket) {",
          "73:     this.sendPacket('message', this.server.initialPacket);",
          "76:   this.emit('open');",
          "77:   this.setPingTimeout();",
          "78: };",
          "87: Socket.prototype.onPacket = function (packet) {",
          "88:   if ('open' === this.readyState) {",
          "90:     debug('packet');",
          "91:     this.emit('packet', packet);",
          "95:     this.setPingTimeout();",
          "97:     switch (packet.type) {",
          "98:       case 'ping':",
          "99:         debug('got ping');",
          "100:         this.sendPacket('pong');",
          "101:         this.emit('heartbeat');",
          "102:         break;",
          "104:       case 'error':",
          "105:         this.onClose('parse error');",
          "106:         break;",
          "108:       case 'message':",
          "109:         this.emit('data', packet.data);",
          "110:         this.emit('message', packet.data);",
          "111:         break;",
          "112:     }",
          "113:   } else {",
          "114:     debug('packet received with closed socket');",
          "115:   }",
          "116: };",
          "125: Socket.prototype.onError = function (err) {",
          "126:   debug('transport error');",
          "127:   this.onClose('transport error', err);",
          "128: };",
          "136: Socket.prototype.setPingTimeout = function () {",
          "137:   var self = this;",
          "138:   clearTimeout(self.pingTimeoutTimer);",
          "139:   self.pingTimeoutTimer = setTimeout(function () {",
          "140:     self.onClose('ping timeout');",
          "141:   }, self.server.pingInterval + self.server.pingTimeout);",
          "142: };",
          "151: Socket.prototype.setTransport = function (transport) {",
          "152:   var onError = this.onError.bind(this);",
          "153:   var onPacket = this.onPacket.bind(this);",
          "154:   var flush = this.flush.bind(this);",
          "155:   var onClose = this.onClose.bind(this, 'transport close');",
          "157:   this.transport = transport;",
          "158:   this.transport.once('error', onError);",
          "159:   this.transport.on('packet', onPacket);",
          "160:   this.transport.on('drain', flush);",
          "161:   this.transport.once('close', onClose);",
          "163:   this.setupSendCallback();",
          "165:   this.cleanupFn.push(function () {",
          "166:     transport.removeListener('error', onError);",
          "167:     transport.removeListener('packet', onPacket);",
          "168:     transport.removeListener('drain', flush);",
          "169:     transport.removeListener('close', onClose);",
          "170:   });",
          "171: };",
          "180: Socket.prototype.maybeUpgrade = function (transport) {",
          "181:   debug('might upgrade socket transport from \"%s\" to \"%s\"'",
          "182:     , this.transport.name, transport.name);",
          "184:   this.upgrading = true;",
          "186:   var self = this;",
          "189:   self.upgradeTimeoutTimer = setTimeout(function () {",
          "190:     debug('client did not complete upgrade - closing transport');",
          "191:     cleanup();",
          "192:     if ('open' === transport.readyState) {",
          "193:       transport.close();",
          "194:     }",
          "195:   }, this.server.upgradeTimeout);",
          "197:   function onPacket (packet) {",
          "198:     if ('ping' === packet.type && 'probe' === packet.data) {",
          "199:       transport.send([{ type: 'pong', data: 'probe' }]);",
          "200:       self.emit('upgrading', transport);",
          "201:       clearInterval(self.checkIntervalTimer);",
          "202:       self.checkIntervalTimer = setInterval(check, 100);",
          "203:     } else if ('upgrade' === packet.type && self.readyState !== 'closed') {",
          "204:       debug('got upgrade packet - upgrading');",
          "206:       self.transport.discard();",
          "207:       self.upgraded = true;",
          "208:       self.clearTransport();",
          "209:       self.setTransport(transport);",
          "210:       self.emit('upgrade', transport);",
          "211:       self.setPingTimeout();",
          "212:       self.flush();",
          "213:       if (self.readyState === 'closing') {",
          "214:         transport.close(function () {",
          "215:           self.onClose('forced close');",
          "216:         });",
          "218:     } else {",
          "219:       cleanup();",
          "220:       transport.close();",
          "222:   }",
          "225:   function check () {",
          "226:     if ('polling' === self.transport.name && self.transport.writable) {",
          "227:       debug('writing a noop packet to polling for fast upgrade');",
          "228:       self.transport.send([{ type: 'noop' }]);",
          "230:   }",
          "232:   function cleanup () {",
          "233:     self.upgrading = false;",
          "235:     clearInterval(self.checkIntervalTimer);",
          "236:     self.checkIntervalTimer = null;",
          "238:     clearTimeout(self.upgradeTimeoutTimer);",
          "239:     self.upgradeTimeoutTimer = null;",
          "241:     transport.removeListener('packet', onPacket);",
          "242:     transport.removeListener('close', onTransportClose);",
          "243:     transport.removeListener('error', onError);",
          "244:     self.removeListener('close', onClose);",
          "245:   }",
          "247:   function onError (err) {",
          "248:     debug('client did not complete upgrade - %s', err);",
          "249:     cleanup();",
          "250:     transport.close();",
          "251:     transport = null;",
          "252:   }",
          "254:   function onTransportClose () {",
          "255:     onError('transport closed');",
          "256:   }",
          "258:   function onClose () {",
          "259:     onError('socket closed');",
          "260:   }",
          "262:   transport.on('packet', onPacket);",
          "263:   transport.once('close', onTransportClose);",
          "264:   transport.once('error', onError);",
          "266:   self.once('close', onClose);",
          "267: };",
          "275: Socket.prototype.clearTransport = function () {",
          "276:   var cleanup;",
          "278:   var toCleanUp = this.cleanupFn.length;",
          "280:   for (var i = 0; i < toCleanUp; i++) {",
          "281:     cleanup = this.cleanupFn.shift();",
          "282:     cleanup();",
          "283:   }",
          "286:   this.transport.on('error', function () {",
          "287:     debug('error triggered by discarded transport');",
          "288:   });",
          "291:   this.transport.close();",
          "293:   clearTimeout(this.pingTimeoutTimer);",
          "294: };",
          "302: Socket.prototype.onClose = function (reason, description) {",
          "303:   if ('closed' !== this.readyState) {",
          "304:     this.readyState = 'closed';",
          "305:     clearTimeout(this.pingTimeoutTimer);",
          "306:     clearInterval(this.checkIntervalTimer);",
          "307:     this.checkIntervalTimer = null;",
          "308:     clearTimeout(this.upgradeTimeoutTimer);",
          "309:     var self = this;",
          "312:     process.nextTick(function () {",
          "313:       self.writeBuffer = [];",
          "315:     this.packetsFn = [];",
          "316:     this.sentCallbackFn = [];",
          "317:     this.clearTransport();",
          "318:     this.emit('close', reason, description);",
          "319:   }",
          "320: };",
          "328: Socket.prototype.setupSendCallback = function () {",
          "329:   var self = this;",
          "330:   this.transport.on('drain', onDrain);",
          "332:   this.cleanupFn.push(function () {",
          "333:     self.transport.removeListener('drain', onDrain);",
          "334:   });",
          "337:   function onDrain () {",
          "338:     if (self.sentCallbackFn.length > 0) {",
          "339:       var seqFn = self.sentCallbackFn.splice(0, 1)[0];",
          "340:       if ('function' === typeof seqFn) {",
          "341:         debug('executing send callback');",
          "342:         seqFn(self.transport);",
          "343:       } else if (Array.isArray(seqFn)) {",
          "344:         debug('executing batch send callback');",
          "345:         for (var l = seqFn.length, i = 0; i < l; i++) {",
          "346:           if ('function' === typeof seqFn[i]) {",
          "347:             seqFn[i](self.transport);",
          "353: };",
          "365: Socket.prototype.send =",
          "366: Socket.prototype.write = function (data, options, callback) {",
          "367:   this.sendPacket('message', data, options, callback);",
          "368:   return this;",
          "369: };",
          "380: Socket.prototype.sendPacket = function (type, data, options, callback) {",
          "381:   if ('function' === typeof options) {",
          "382:     callback = options;",
          "383:     options = null;",
          "386:   options = options || {};",
          "387:   options.compress = false !== options.compress;",
          "389:   if ('closing' !== this.readyState && 'closed' !== this.readyState) {",
          "390:     debug('sending packet \"%s\" (%s)', type, data);",
          "392:     var packet = {",
          "393:       type: type,",
          "394:       options: options",
          "395:     };",
          "396:     if (data) packet.data = data;",
          "399:     this.emit('packetCreate', packet);",
          "401:     this.writeBuffer.push(packet);",
          "404:     if (callback) this.packetsFn.push(callback);",
          "406:     this.flush();",
          "407:   }",
          "408: };",
          "416: Socket.prototype.flush = function () {",
          "417:   if ('closed' !== this.readyState &&",
          "418:                 this.transport.writable &&",
          "419:                 this.writeBuffer.length) {",
          "420:     debug('flushing buffer to transport');",
          "421:     this.emit('flush', this.writeBuffer);",
          "422:     this.server.emit('flush', this, this.writeBuffer);",
          "423:     var wbuf = this.writeBuffer;",
          "424:     this.writeBuffer = [];",
          "425:     if (!this.transport.supportsFraming) {",
          "426:       this.sentCallbackFn.push(this.packetsFn);",
          "427:     } else {",
          "428:       this.sentCallbackFn.push.apply(this.sentCallbackFn, this.packetsFn);",
          "430:     this.packetsFn = [];",
          "431:     this.transport.send(wbuf);",
          "432:     this.emit('drain');",
          "433:     this.server.emit('drain', this);",
          "435: };",
          "443: Socket.prototype.getAvailableUpgrades = function () {",
          "444:   var availableUpgrades = [];",
          "445:   var allUpgrades = this.server.upgrades(this.transport.name);",
          "446:   for (var i = 0, l = allUpgrades.length; i < l; ++i) {",
          "447:     var upg = allUpgrades[i];",
          "448:     if (this.server.transports.indexOf(upg) !== -1) {",
          "449:       availableUpgrades.push(upg);",
          "452:   return availableUpgrades;",
          "453: };",
          "463: Socket.prototype.close = function (discard) {",
          "464:   if ('open' !== this.readyState) return;",
          "466:   this.readyState = 'closing';",
          "468:   if (this.writeBuffer.length) {",
          "469:     this.once('drain', this.closeTransport.bind(this, discard));",
          "470:     return;",
          "473:   this.closeTransport(discard);",
          "474: };",
          "483: Socket.prototype.closeTransport = function (discard) {",
          "484:   if (discard) this.transport.discard();",
          "485:   this.transport.close(this.onClose.bind(this, 'forced close'));",
          "486: };",
          "",
          "[Added Lines]",
          "1: const EventEmitter = require('events');",
          "2: const debug = require('debug')('engine:socket');",
          "4: class Socket extends EventEmitter {",
          "10:   constructor (id, server, transport, req) {",
          "11:     super();",
          "12:     this.id = id;",
          "13:     this.server = server;",
          "14:     this.upgrading = false;",
          "15:     this.upgraded = false;",
          "16:     this.readyState = 'opening';",
          "17:     this.writeBuffer = [];",
          "18:     this.packetsFn = [];",
          "19:     this.sentCallbackFn = [];",
          "20:     this.cleanupFn = [];",
          "21:     this.request = req;",
          "24:     if (req.websocket && req.websocket._socket) {",
          "25:       this.remoteAddress = req.websocket._socket.remoteAddress;",
          "26:     } else {",
          "27:       this.remoteAddress = req.connection.remoteAddress;",
          "28:     }",
          "30:     this.checkIntervalTimer = null;",
          "31:     this.upgradeTimeoutTimer = null;",
          "32:     this.pingTimeoutTimer = null;",
          "34:     this.setTransport(transport);",
          "35:     this.onOpen();",
          "43:   onOpen () {",
          "44:     this.readyState = 'open';",
          "47:     this.transport.sid = this.id;",
          "48:     this.sendPacket('open', JSON.stringify({",
          "49:       sid: this.id,",
          "50:       upgrades: this.getAvailableUpgrades(),",
          "51:       pingInterval: this.server.pingInterval,",
          "52:       pingTimeout: this.server.pingTimeout",
          "53:     }));",
          "55:     if (this.server.initialPacket) {",
          "56:       this.sendPacket('message', this.server.initialPacket);",
          "57:     }",
          "59:     this.emit('open');",
          "60:     this.setPingTimeout();",
          "61:   }",
          "69:   onPacket (packet) {",
          "70:     if ('open' === this.readyState) {",
          "72:       debug('packet');",
          "73:       this.emit('packet', packet);",
          "77:       this.setPingTimeout();",
          "79:       switch (packet.type) {",
          "80:         case 'ping':",
          "81:           debug('got ping');",
          "82:           this.sendPacket('pong');",
          "83:           this.emit('heartbeat');",
          "84:           break;",
          "86:         case 'error':",
          "87:           this.onClose('parse error');",
          "88:           break;",
          "90:         case 'message':",
          "91:           this.emit('data', packet.data);",
          "92:           this.emit('message', packet.data);",
          "93:           break;",
          "94:       }",
          "95:     } else {",
          "96:       debug('packet received with closed socket');",
          "97:     }",
          "98:   }",
          "106:   onError (err) {",
          "107:     debug('transport error');",
          "108:     this.onClose('transport error', err);",
          "109:   }",
          "116:   setPingTimeout () {",
          "117:     clearTimeout(this.pingTimeoutTimer);",
          "118:     this.pingTimeoutTimer = setTimeout(() => {",
          "119:       this.onClose('ping timeout');",
          "120:     }, this.server.pingInterval + this.server.pingTimeout);",
          "121:   }",
          "129:   setTransport (transport) {",
          "130:     const onError = this.onError.bind(this);",
          "131:     const onPacket = this.onPacket.bind(this);",
          "132:     const flush = this.flush.bind(this);",
          "133:     const onClose = this.onClose.bind(this, 'transport close');",
          "135:     this.transport = transport;",
          "136:     this.transport.once('error', onError);",
          "137:     this.transport.on('packet', onPacket);",
          "138:     this.transport.on('drain', flush);",
          "139:     this.transport.once('close', onClose);",
          "141:     this.setupSendCallback();",
          "143:     this.cleanupFn.push(function () {",
          "144:       transport.removeListener('error', onError);",
          "145:       transport.removeListener('packet', onPacket);",
          "146:       transport.removeListener('drain', flush);",
          "147:       transport.removeListener('close', onClose);",
          "148:     });",
          "157:   maybeUpgrade (transport) {",
          "158:     debug('might upgrade socket transport from \"%s\" to \"%s\"'",
          "159:       , this.transport.name, transport.name);",
          "161:     this.upgrading = true;",
          "163:     const self = this;",
          "166:     self.upgradeTimeoutTimer = setTimeout(function () {",
          "167:       debug('client did not complete upgrade - closing transport');",
          "169:       if ('open' === transport.readyState) {",
          "170:         transport.close();",
          "171:       }",
          "172:     }, this.server.upgradeTimeout);",
          "174:     function onPacket (packet) {",
          "175:       if ('ping' === packet.type && 'probe' === packet.data) {",
          "176:         transport.send([{ type: 'pong', data: 'probe' }]);",
          "177:         self.emit('upgrading', transport);",
          "178:         clearInterval(self.checkIntervalTimer);",
          "179:         self.checkIntervalTimer = setInterval(check, 100);",
          "180:       } else if ('upgrade' === packet.type && self.readyState !== 'closed') {",
          "181:         debug('got upgrade packet - upgrading');",
          "182:         cleanup();",
          "183:         self.transport.discard();",
          "184:         self.upgraded = true;",
          "185:         self.clearTransport();",
          "186:         self.setTransport(transport);",
          "187:         self.emit('upgrade', transport);",
          "188:         self.setPingTimeout();",
          "189:         self.flush();",
          "190:         if (self.readyState === 'closing') {",
          "191:           transport.close(function () {",
          "192:             self.onClose('forced close');",
          "193:           });",
          "194:         }",
          "195:       } else {",
          "196:         cleanup();",
          "197:         transport.close();",
          "202:     function check () {",
          "203:       if ('polling' === self.transport.name && self.transport.writable) {",
          "204:         debug('writing a noop packet to polling for fast upgrade');",
          "205:         self.transport.send([{ type: 'noop' }]);",
          "206:       }",
          "209:     function cleanup () {",
          "210:       self.upgrading = false;",
          "212:       clearInterval(self.checkIntervalTimer);",
          "213:       self.checkIntervalTimer = null;",
          "215:       clearTimeout(self.upgradeTimeoutTimer);",
          "216:       self.upgradeTimeoutTimer = null;",
          "218:       transport.removeListener('packet', onPacket);",
          "219:       transport.removeListener('close', onTransportClose);",
          "220:       transport.removeListener('error', onError);",
          "221:       self.removeListener('close', onClose);",
          "222:     }",
          "224:     function onError (err) {",
          "225:       debug('client did not complete upgrade - %s', err);",
          "226:       cleanup();",
          "227:       transport.close();",
          "228:       transport = null;",
          "229:     }",
          "231:     function onTransportClose () {",
          "232:       onError('transport closed');",
          "233:     }",
          "235:     function onClose () {",
          "236:       onError('socket closed');",
          "237:     }",
          "239:     transport.on('packet', onPacket);",
          "240:     transport.once('close', onTransportClose);",
          "241:     transport.once('error', onError);",
          "243:     self.once('close', onClose);",
          "244:   }",
          "251:   clearTransport () {",
          "252:     let cleanup;",
          "254:     const toCleanUp = this.cleanupFn.length;",
          "256:     for (let i = 0; i < toCleanUp; i++) {",
          "257:       cleanup = this.cleanupFn.shift();",
          "258:       cleanup();",
          "259:     }",
          "262:     this.transport.on('error', function () {",
          "263:       debug('error triggered by discarded transport');",
          "264:     });",
          "267:     this.transport.close();",
          "269:     clearTimeout(this.pingTimeoutTimer);",
          "270:   }",
          "277:   onClose (reason, description) {",
          "278:     if ('closed' !== this.readyState) {",
          "279:       this.readyState = 'closed';",
          "280:       clearTimeout(this.pingTimeoutTimer);",
          "281:       clearInterval(this.checkIntervalTimer);",
          "282:       this.checkIntervalTimer = null;",
          "283:       clearTimeout(this.upgradeTimeoutTimer);",
          "284:       const self = this;",
          "287:       process.nextTick(function () {",
          "288:         self.writeBuffer = [];",
          "289:       });",
          "290:       this.packetsFn = [];",
          "291:       this.sentCallbackFn = [];",
          "292:       this.clearTransport();",
          "293:       this.emit('close', reason, description);",
          "294:     }",
          "295:   }",
          "302:   setupSendCallback () {",
          "303:     const self = this;",
          "304:     this.transport.on('drain', onDrain);",
          "306:     this.cleanupFn.push(function () {",
          "307:       self.transport.removeListener('drain', onDrain);",
          "311:     function onDrain () {",
          "312:       if (self.sentCallbackFn.length > 0) {",
          "313:         const seqFn = self.sentCallbackFn.splice(0, 1)[0];",
          "314:         if ('function' === typeof seqFn) {",
          "315:           debug('executing send callback');",
          "316:           seqFn(self.transport);",
          "317:         } else if (Array.isArray(seqFn)) {",
          "318:           debug('executing batch send callback');",
          "319:           const l = seqFn.length;",
          "320:           let i = 0;",
          "321:           for (; i < l; i++) {",
          "322:             if ('function' === typeof seqFn[i]) {",
          "323:               seqFn[i](self.transport);",
          "324:             }",
          "340:   send (data, options, callback) {",
          "341:     this.sendPacket('message', data, options, callback);",
          "342:     return this;",
          "345:   write (data, options, callback) {",
          "346:     this.sendPacket('message', data, options, callback);",
          "347:     return this;",
          "348:   }",
          "358:   sendPacket (type, data, options, callback) {",
          "359:     if ('function' === typeof options) {",
          "360:       callback = options;",
          "361:       options = null;",
          "362:     }",
          "364:     options = options || {};",
          "365:     options.compress = false !== options.compress;",
          "367:     if ('closing' !== this.readyState && 'closed' !== this.readyState) {",
          "368:       debug('sending packet \"%s\" (%s)', type, data);",
          "370:       const packet = {",
          "371:         type: type,",
          "372:         options: options",
          "373:       };",
          "374:       if (data) packet.data = data;",
          "377:       this.emit('packetCreate', packet);",
          "379:       this.writeBuffer.push(packet);",
          "382:       if (callback) this.packetsFn.push(callback);",
          "384:       this.flush();",
          "393:   flush () {",
          "394:     if ('closed' !== this.readyState &&",
          "395:       this.transport.writable &&",
          "396:       this.writeBuffer.length) {",
          "397:       debug('flushing buffer to transport');",
          "398:       this.emit('flush', this.writeBuffer);",
          "399:       this.server.emit('flush', this, this.writeBuffer);",
          "400:       const wbuf = this.writeBuffer;",
          "401:       this.writeBuffer = [];",
          "402:       if (!this.transport.supportsFraming) {",
          "403:         this.sentCallbackFn.push(this.packetsFn);",
          "404:       } else {",
          "405:         this.sentCallbackFn.push.apply(this.sentCallbackFn, this.packetsFn);",
          "406:       }",
          "407:       this.packetsFn = [];",
          "408:       this.transport.send(wbuf);",
          "409:       this.emit('drain');",
          "410:       this.server.emit('drain', this);",
          "419:   getAvailableUpgrades () {",
          "420:     const availableUpgrades = [];",
          "421:     const allUpgrades = this.server.upgrades(this.transport.name);",
          "422:     let i = 0;",
          "423:     const l = allUpgrades.length;",
          "424:     for (; i < l; ++i) {",
          "425:       const upg = allUpgrades[i];",
          "426:       if (this.server.transports.indexOf(upg) !== -1) {",
          "427:         availableUpgrades.push(upg);",
          "428:       }",
          "429:     }",
          "430:     return availableUpgrades;",
          "431:   }",
          "440:   close (discard) {",
          "441:     if ('open' !== this.readyState) return;",
          "443:     this.readyState = 'closing';",
          "445:     if (this.writeBuffer.length) {",
          "446:       this.once('drain', this.closeTransport.bind(this, discard));",
          "447:       return;",
          "448:     }",
          "450:     this.closeTransport(discard);",
          "459:   closeTransport (discard) {",
          "460:     if (discard) this.transport.discard();",
          "461:     this.transport.close(this.onClose.bind(this, 'forced close'));",
          "462:   }",
          "463: }",
          "465: module.exports = Socket;",
          "",
          "---------------"
        ],
        "lib/transport.js||lib/transport.js": [
          "File: lib/transport.js -> lib/transport.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "6: var EventEmitter = require('events').EventEmitter;",
          "7: var parser = require('engine.io-parser');",
          "8: var util = require('util');",
          "9: var debug = require('debug')('engine:transport');",
          "15: module.exports = Transport;",
          "",
          "[Added Lines]",
          "1: const EventEmitter = require('events');",
          "2: const parser = require('engine.io-parser');",
          "3: const debug = require('debug')('engine:transport');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: function noop () {}",
          "94:   }",
          "",
          "[Removed Lines]",
          "32: function Transport (req) {",
          "33:   this.readyState = 'open';",
          "34:   this.discarded = false;",
          "35: }",
          "41: util.inherits(Transport, EventEmitter);",
          "49: Transport.prototype.discard = function () {",
          "50:   this.discarded = true;",
          "51: };",
          "60: Transport.prototype.onRequest = function (req) {",
          "61:   debug('setting request');",
          "62:   this.req = req;",
          "63: };",
          "71: Transport.prototype.close = function (fn) {",
          "72:   if ('closed' === this.readyState || 'closing' === this.readyState) return;",
          "74:   this.readyState = 'closing';",
          "75:   this.doClose(fn || noop);",
          "76: };",
          "86: Transport.prototype.onError = function (msg, desc) {",
          "87:   if (this.listeners('error').length) {",
          "88:     var err = new Error(msg);",
          "89:     err.type = 'TransportError';",
          "90:     err.description = desc;",
          "91:     this.emit('error', err);",
          "92:   } else {",
          "93:     debug('ignored transport error %s (%s)', msg, desc);",
          "95: };",
          "104: Transport.prototype.onPacket = function (packet) {",
          "105:   this.emit('packet', packet);",
          "106: };",
          "115: Transport.prototype.onData = function (data) {",
          "116:   this.onPacket(parser.decodePacket(data));",
          "117: };",
          "125: Transport.prototype.onClose = function () {",
          "126:   this.readyState = 'closed';",
          "127:   this.emit('close');",
          "128: };",
          "",
          "[Added Lines]",
          "13: class Transport extends EventEmitter {",
          "20:   constructor (req) {",
          "21:     super();",
          "22:     this.readyState = 'open';",
          "23:     this.discarded = false;",
          "24:   }",
          "31:   discard () {",
          "32:     this.discarded = true;",
          "33:   }",
          "41:   onRequest (req) {",
          "42:     debug('setting request');",
          "43:     this.req = req;",
          "44:   }",
          "51:   close (fn) {",
          "52:     if ('closed' === this.readyState || 'closing' === this.readyState) return;",
          "54:     this.readyState = 'closing';",
          "55:     this.doClose(fn || noop);",
          "65:   onError (msg, desc) {",
          "66:     if (this.listeners('error').length) {",
          "67:       const err = new Error(msg);",
          "68:       err.type = 'TransportError';",
          "69:       err.description = desc;",
          "70:       this.emit('error', err);",
          "71:     } else {",
          "72:       debug('ignored transport error %s (%s)', msg, desc);",
          "73:     }",
          "74:   }",
          "82:   onPacket (packet) {",
          "83:     this.emit('packet', packet);",
          "84:   }",
          "92:   onData (data) {",
          "93:     this.onPacket(parser.decodePacket(data));",
          "94:   }",
          "101:   onClose () {",
          "102:     this.readyState = 'closed';",
          "103:     this.emit('close');",
          "104:   }",
          "105: }",
          "107: module.exports = Transport;",
          "",
          "---------------"
        ],
        "lib/transports/index.js||lib/transports/index.js": [
          "File: lib/transports/index.js -> lib/transports/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "6: var XHR = require('./polling-xhr');",
          "7: var JSONP = require('./polling-jsonp');",
          "",
          "[Added Lines]",
          "1: const XHR = require('./polling-xhr');",
          "2: const JSONP = require('./polling-jsonp');",
          "",
          "---------------"
        ],
        "lib/transports/polling-jsonp.js||lib/transports/polling-jsonp.js": [
          "File: lib/transports/polling-jsonp.js -> lib/transports/polling-jsonp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   }",
          "",
          "[Removed Lines]",
          "6: var Polling = require('./polling');",
          "7: var qs = require('querystring');",
          "8: var rDoubleSlashes = /\\\\\\\\n/g;",
          "9: var rSlashes = /(\\\\)?\\\\n/g;",
          "10: var util = require('util');",
          "16: module.exports = JSONP;",
          "24: function JSONP (req) {",
          "25:   Polling.call(this, req);",
          "27:   this.head = '___eio[' + (req._query.j || '').replace(/[^0-9]/g, '') + '](';",
          "28:   this.foot = ');';",
          "29: }",
          "35: util.inherits(JSONP, Polling);",
          "44: JSONP.prototype.onData = function (data) {",
          "47:   data = qs.parse(data).d;",
          "48:   if ('string' === typeof data) {",
          "51:     data = data.replace(rSlashes, function (match, slashes) {",
          "52:       return slashes ? match : '\\n';",
          "53:     });",
          "54:     Polling.prototype.onData.call(this, data.replace(rDoubleSlashes, '\\\\n'));",
          "56: };",
          "64: JSONP.prototype.doWrite = function (data, options, callback) {",
          "67:   var js = JSON.stringify(data)",
          "68:     .replace(/\\u2028/g, '\\\\u2028')",
          "69:     .replace(/\\u2029/g, '\\\\u2029');",
          "72:   data = this.head + js + this.foot;",
          "74:   Polling.prototype.doWrite.call(this, data, options, callback);",
          "75: };",
          "",
          "[Added Lines]",
          "1: const Polling = require('./polling');",
          "2: const qs = require('querystring');",
          "3: const rDoubleSlashes = /\\\\\\\\n/g;",
          "4: const rSlashes = /(\\\\)?\\\\n/g;",
          "6: class JSONP extends Polling {",
          "12:   constructor (req) {",
          "13:     super(req);",
          "15:     this.head = '___eio[' + (req._query.j || '').replace(/[^0-9]/g, '') + '](';",
          "16:     this.foot = ');';",
          "25:   onData (data) {",
          "28:     data = qs.parse(data).d;",
          "29:     if ('string' === typeof data) {",
          "32:       data = data.replace(rSlashes, function (match, slashes) {",
          "33:         return slashes ? match : '\\n';",
          "34:       });",
          "35:       super.onData(data.replace(rDoubleSlashes, '\\\\n'));",
          "36:     }",
          "37:   }",
          "44:   doWrite (data, options, callback) {",
          "47:     const js = JSON.stringify(data)",
          "48:       .replace(/\\u2028/g, '\\\\u2028')",
          "49:       .replace(/\\u2029/g, '\\\\u2029');",
          "52:     data = this.head + js + this.foot;",
          "54:     super.doWrite(data, options, callback);",
          "55:   }",
          "56: }",
          "58: module.exports = JSONP;",
          "",
          "---------------"
        ],
        "lib/transports/polling-xhr.js||lib/transports/polling-xhr.js": [
          "File: lib/transports/polling-xhr.js -> lib/transports/polling-xhr.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   }",
          "66:   }",
          "",
          "[Removed Lines]",
          "6: var Polling = require('./polling');",
          "7: var util = require('util');",
          "13: module.exports = XHR;",
          "21: function XHR (req) {",
          "22:   Polling.call(this, req);",
          "23: }",
          "29: util.inherits(XHR, Polling);",
          "38: XHR.prototype.onRequest = function (req) {",
          "39:   if ('OPTIONS' === req.method) {",
          "40:     var res = req.res;",
          "41:     var headers = this.headers(req);",
          "42:     headers['Access-Control-Allow-Headers'] = 'Content-Type';",
          "43:     res.writeHead(200, headers);",
          "44:     res.end();",
          "45:   } else {",
          "46:     Polling.prototype.onRequest.call(this, req);",
          "48: };",
          "58: XHR.prototype.headers = function (req, headers) {",
          "59:   headers = headers || {};",
          "61:   if (req.headers.origin) {",
          "62:     headers['Access-Control-Allow-Credentials'] = 'true';",
          "63:     headers['Access-Control-Allow-Origin'] = req.headers.origin;",
          "64:   } else {",
          "65:     headers['Access-Control-Allow-Origin'] = '*';",
          "68:   return Polling.prototype.headers.call(this, req, headers);",
          "69: };",
          "",
          "[Added Lines]",
          "1: const Polling = require('./polling');",
          "3: class XHR extends Polling {",
          "10:   onRequest (req) {",
          "11:     if ('OPTIONS' === req.method) {",
          "12:       const res = req.res;",
          "13:       const headers = this.headers(req);",
          "14:       headers['Access-Control-Allow-Headers'] = 'Content-Type';",
          "15:       res.writeHead(200, headers);",
          "16:       res.end();",
          "17:     } else {",
          "18:       super.onRequest(req);",
          "19:     }",
          "29:   headers (req, headers) {",
          "30:     headers = headers || {};",
          "32:     if (req.headers.origin) {",
          "33:       headers['Access-Control-Allow-Credentials'] = 'true';",
          "34:       headers['Access-Control-Allow-Origin'] = req.headers.origin;",
          "35:     } else {",
          "36:       headers['Access-Control-Allow-Origin'] = '*';",
          "37:     }",
          "39:     return super.headers(req, headers);",
          "41: }",
          "43: module.exports = XHR;",
          "",
          "---------------"
        ],
        "lib/transports/polling.js||lib/transports/polling.js": [
          "File: lib/transports/polling.js -> lib/transports/polling.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:   gzip: zlib.createGzip,",
          "15:   deflate: zlib.createDeflate",
          "16: };",
          "71:   }",
          "88:   }",
          "132:   }",
          "162:     }",
          "167:     }",
          "206:     }",
          "224:   }",
          "243:   }",
          "292:   }",
          "298:   }",
          "311:       return;",
          "312:     }",
          "323:   }",
          "378:   }",
          "403:   }",
          "",
          "[Removed Lines]",
          "6: var Transport = require('../transport');",
          "7: var parser = require('engine.io-parser');",
          "8: var zlib = require('zlib');",
          "9: var accepts = require('accepts');",
          "10: var util = require('util');",
          "11: var debug = require('debug')('engine:polling');",
          "13: var compressionMethods = {",
          "22: module.exports = Polling;",
          "30: function Polling (req) {",
          "31:   Transport.call(this, req);",
          "33:   this.closeTimeout = 30 * 1000;",
          "34:   this.maxHttpBufferSize = null;",
          "35:   this.httpCompression = null;",
          "36: }",
          "44: util.inherits(Polling, Transport);",
          "52: Polling.prototype.name = 'polling';",
          "61: Polling.prototype.onRequest = function (req) {",
          "62:   var res = req.res;",
          "64:   if ('GET' === req.method) {",
          "65:     this.onPollRequest(req, res);",
          "66:   } else if ('POST' === req.method) {",
          "67:     this.onDataRequest(req, res);",
          "68:   } else {",
          "69:     res.writeHead(500);",
          "70:     res.end();",
          "72: };",
          "80: Polling.prototype.onPollRequest = function (req, res) {",
          "81:   if (this.req) {",
          "82:     debug('request overlap');",
          "84:     this.onError('overlap from client');",
          "85:     res.writeHead(500);",
          "86:     res.end();",
          "87:     return;",
          "90:   debug('setting request');",
          "92:   this.req = req;",
          "93:   this.res = res;",
          "95:   var self = this;",
          "97:   function onClose () {",
          "98:     self.onError('poll connection closed prematurely');",
          "99:   }",
          "101:   function cleanup () {",
          "102:     req.removeListener('close', onClose);",
          "103:     self.req = self.res = null;",
          "104:   }",
          "106:   req.cleanup = cleanup;",
          "107:   req.on('close', onClose);",
          "109:   this.writable = true;",
          "110:   this.emit('drain');",
          "113:   if (this.writable && this.shouldClose) {",
          "114:     debug('triggering empty send to append close packet');",
          "115:     this.send([{ type: 'noop' }]);",
          "116:   }",
          "117: };",
          "125: Polling.prototype.onDataRequest = function (req, res) {",
          "126:   if (this.dataReq) {",
          "128:     this.onError('data request overlap from client');",
          "129:     res.writeHead(500);",
          "130:     res.end();",
          "131:     return;",
          "134:   var isBinary = 'application/octet-stream' === req.headers['content-type'];",
          "136:   this.dataReq = req;",
          "137:   this.dataRes = res;",
          "139:   var chunks = isBinary ? Buffer.concat([]) : '';",
          "140:   var self = this;",
          "142:   function cleanup () {",
          "143:     req.removeListener('data', onData);",
          "144:     req.removeListener('end', onEnd);",
          "145:     req.removeListener('close', onClose);",
          "146:     self.dataReq = self.dataRes = chunks = null;",
          "147:   }",
          "149:   function onClose () {",
          "150:     cleanup();",
          "151:     self.onError('data request connection closed prematurely');",
          "152:   }",
          "154:   function onData (data) {",
          "155:     var contentLength;",
          "156:     if (isBinary) {",
          "157:       chunks = Buffer.concat([chunks, data]);",
          "158:       contentLength = chunks.length;",
          "159:     } else {",
          "160:       chunks += data;",
          "161:       contentLength = Buffer.byteLength(chunks);",
          "164:     if (contentLength > self.maxHttpBufferSize) {",
          "165:       chunks = isBinary ? Buffer.concat([]) : '';",
          "166:       req.connection.destroy();",
          "168:   }",
          "170:   function onEnd () {",
          "171:     self.onData(chunks);",
          "173:     var headers = {",
          "176:       'Content-Type': 'text/html',",
          "177:       'Content-Length': 2",
          "178:     };",
          "180:     res.writeHead(200, self.headers(req, headers));",
          "181:     res.end('ok');",
          "182:     cleanup();",
          "183:   }",
          "185:   req.on('close', onClose);",
          "186:   if (!isBinary) req.setEncoding('utf8');",
          "187:   req.on('data', onData);",
          "188:   req.on('end', onEnd);",
          "189: };",
          "198: Polling.prototype.onData = function (data) {",
          "199:   debug('received \"%s\"', data);",
          "200:   var self = this;",
          "201:   var callback = function (packet) {",
          "202:     if ('close' === packet.type) {",
          "203:       debug('got xhr close packet');",
          "204:       self.onClose();",
          "205:       return false;",
          "208:     self.onPacket(packet);",
          "209:   };",
          "211:   parser.decodePayload(data, callback);",
          "212: };",
          "220: Polling.prototype.onClose = function () {",
          "221:   if (this.writable) {",
          "223:     this.send([{ type: 'noop' }]);",
          "225:   Transport.prototype.onClose.call(this);",
          "226: };",
          "235: Polling.prototype.send = function (packets) {",
          "236:   this.writable = false;",
          "238:   if (this.shouldClose) {",
          "239:     debug('appending close packet to payload');",
          "240:     packets.push({ type: 'close' });",
          "241:     this.shouldClose();",
          "242:     this.shouldClose = null;",
          "245:   var self = this;",
          "246:   parser.encodePayload(packets, this.supportsBinary, function (data) {",
          "247:     var compress = packets.some(function (packet) {",
          "248:       return packet.options && packet.options.compress;",
          "249:     });",
          "250:     self.write(data, { compress: compress });",
          "251:   });",
          "252: };",
          "262: Polling.prototype.write = function (data, options) {",
          "263:   debug('writing \"%s\"', data);",
          "264:   var self = this;",
          "265:   this.doWrite(data, options, function () {",
          "266:     self.req.cleanup();",
          "267:   });",
          "268: };",
          "276: Polling.prototype.doWrite = function (data, options, callback) {",
          "277:   var self = this;",
          "280:   var isString = typeof data === 'string';",
          "281:   var contentType = isString",
          "282:     ? 'text/plain; charset=UTF-8'",
          "283:     : 'application/octet-stream';",
          "285:   var headers = {",
          "286:     'Content-Type': contentType",
          "287:   };",
          "289:   if (!this.httpCompression || !options.compress) {",
          "290:     respond(data);",
          "291:     return;",
          "294:   var len = isString ? Buffer.byteLength(data) : data.length;",
          "295:   if (len < this.httpCompression.threshold) {",
          "296:     respond(data);",
          "297:     return;",
          "300:   var encoding = accepts(this.req).encodings(['gzip', 'deflate']);",
          "301:   if (!encoding) {",
          "302:     respond(data);",
          "303:     return;",
          "304:   }",
          "306:   this.compress(data, encoding, function (err, data) {",
          "307:     if (err) {",
          "308:       self.res.writeHead(500);",
          "309:       self.res.end();",
          "310:       callback(err);",
          "314:     headers['Content-Encoding'] = encoding;",
          "315:     respond(data);",
          "316:   });",
          "318:   function respond (data) {",
          "319:     headers['Content-Length'] = 'string' === typeof data ? Buffer.byteLength(data) : data.length;",
          "320:     self.res.writeHead(200, self.headers(self.req, headers));",
          "321:     self.res.end(data);",
          "322:     callback();",
          "324: };",
          "332: Polling.prototype.compress = function (data, encoding, callback) {",
          "333:   debug('compressing');",
          "335:   var buffers = [];",
          "336:   var nread = 0;",
          "338:   compressionMethods[encoding](this.httpCompression)",
          "339:     .on('error', callback)",
          "340:     .on('data', function (chunk) {",
          "341:       buffers.push(chunk);",
          "342:       nread += chunk.length;",
          "343:     })",
          "344:     .on('end', function () {",
          "345:       callback(null, Buffer.concat(buffers, nread));",
          "346:     })",
          "347:     .end(data);",
          "348: };",
          "356: Polling.prototype.doClose = function (fn) {",
          "357:   debug('closing');",
          "359:   var self = this;",
          "360:   var closeTimeoutTimer;",
          "362:   if (this.dataReq) {",
          "363:     debug('aborting ongoing data request');",
          "364:     this.dataReq.destroy();",
          "365:   }",
          "367:   if (this.writable) {",
          "368:     debug('transport writable - closing right away');",
          "369:     this.send([{ type: 'close' }]);",
          "370:     onClose();",
          "371:   } else if (this.discarded) {",
          "372:     debug('transport discarded - closing right away');",
          "373:     onClose();",
          "374:   } else {",
          "375:     debug('transport not writable - buffering orderly close');",
          "376:     this.shouldClose = onClose;",
          "377:     closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);",
          "380:   function onClose () {",
          "381:     clearTimeout(closeTimeoutTimer);",
          "382:     fn();",
          "383:     self.onClose();",
          "384:   }",
          "385: };",
          "395: Polling.prototype.headers = function (req, headers) {",
          "396:   headers = headers || {};",
          "400:   var ua = req.headers['user-agent'];",
          "401:   if (ua && (~ua.indexOf(';MSIE') || ~ua.indexOf('Trident/'))) {",
          "402:     headers['X-XSS-Protection'] = '0';",
          "405:   this.emit('headers', headers);",
          "406:   return headers;",
          "407: };",
          "",
          "[Added Lines]",
          "1: const Transport = require('../transport');",
          "2: const parser = require('engine.io-parser');",
          "3: const zlib = require('zlib');",
          "4: const accepts = require('accepts');",
          "5: const debug = require('debug')('engine:polling');",
          "7: const compressionMethods = {",
          "12: class Polling extends Transport {",
          "18:   constructor (req) {",
          "19:     super(req);",
          "21:     this.closeTimeout = 30 * 1000;",
          "22:     this.maxHttpBufferSize = null;",
          "23:     this.httpCompression = null;",
          "24:   }",
          "31:   get name () {",
          "32:     return 'polling';",
          "41:   onRequest (req) {",
          "42:     const res = req.res;",
          "44:     if ('GET' === req.method) {",
          "45:       this.onPollRequest(req, res);",
          "46:     } else if ('POST' === req.method) {",
          "47:       this.onDataRequest(req, res);",
          "48:     } else {",
          "49:       res.writeHead(500);",
          "50:       res.end();",
          "51:     }",
          "59:   onPollRequest (req, res) {",
          "60:     if (this.req) {",
          "61:       debug('request overlap');",
          "63:       this.onError('overlap from client');",
          "64:       res.writeHead(500);",
          "65:       res.end();",
          "66:       return;",
          "67:     }",
          "69:     debug('setting request');",
          "71:     this.req = req;",
          "72:     this.res = res;",
          "74:     const self = this;",
          "76:     function onClose () {",
          "77:       self.onError('poll connection closed prematurely');",
          "78:     }",
          "80:     function cleanup () {",
          "81:       req.removeListener('close', onClose);",
          "82:       self.req = self.res = null;",
          "83:     }",
          "85:     req.cleanup = cleanup;",
          "86:     req.on('close', onClose);",
          "88:     this.writable = true;",
          "89:     this.emit('drain');",
          "92:     if (this.writable && this.shouldClose) {",
          "93:       debug('triggering empty send to append close packet');",
          "94:       this.send([{ type: 'noop' }]);",
          "95:     }",
          "103:   onDataRequest (req, res) {",
          "104:     if (this.dataReq) {",
          "106:       this.onError('data request overlap from client');",
          "107:       res.writeHead(500);",
          "108:       res.end();",
          "109:       return;",
          "110:     }",
          "112:     const isBinary = 'application/octet-stream' === req.headers['content-type'];",
          "114:     this.dataReq = req;",
          "115:     this.dataRes = res;",
          "117:     let chunks = isBinary ? Buffer.concat([]) : '';",
          "118:     const self = this;",
          "120:     function cleanup () {",
          "121:       req.removeListener('data', onData);",
          "122:       req.removeListener('end', onEnd);",
          "123:       req.removeListener('close', onClose);",
          "124:       self.dataReq = self.dataRes = chunks = null;",
          "127:     function onClose () {",
          "128:       cleanup();",
          "129:       self.onError('data request connection closed prematurely');",
          "132:     function onData (data) {",
          "133:       let contentLength;",
          "134:       if (isBinary) {",
          "135:         chunks = Buffer.concat([chunks, data]);",
          "136:         contentLength = chunks.length;",
          "137:       } else {",
          "138:         chunks += data;",
          "139:         contentLength = Buffer.byteLength(chunks);",
          "140:       }",
          "142:       if (contentLength > self.maxHttpBufferSize) {",
          "143:         chunks = isBinary ? Buffer.concat([]) : '';",
          "144:         req.connection.destroy();",
          "145:       }",
          "146:     }",
          "148:     function onEnd () {",
          "149:       self.onData(chunks);",
          "151:       const headers = {",
          "154:         'Content-Type': 'text/html',",
          "155:         'Content-Length': 2",
          "156:       };",
          "158:       res.writeHead(200, self.headers(req, headers));",
          "159:       res.end('ok');",
          "160:       cleanup();",
          "163:     req.on('close', onClose);",
          "164:     if (!isBinary) req.setEncoding('utf8');",
          "165:     req.on('data', onData);",
          "166:     req.on('end', onEnd);",
          "167:   }",
          "175:   onData (data) {",
          "176:     debug('received \"%s\"', data);",
          "177:     const self = this;",
          "178:     const callback = function (packet) {",
          "179:       if ('close' === packet.type) {",
          "180:         debug('got xhr close packet');",
          "181:         self.onClose();",
          "182:         return false;",
          "183:       }",
          "185:       self.onPacket(packet);",
          "186:     };",
          "188:     parser.decodePayload(data, callback);",
          "196:   onClose () {",
          "197:     if (this.writable) {",
          "199:       this.send([{ type: 'noop' }]);",
          "200:     }",
          "201:     super.onClose();",
          "210:   send (packets) {",
          "211:     this.writable = false;",
          "213:     if (this.shouldClose) {",
          "214:       debug('appending close packet to payload');",
          "215:       packets.push({ type: 'close' });",
          "216:       this.shouldClose();",
          "217:       this.shouldClose = null;",
          "218:     }",
          "220:     const self = this;",
          "221:     parser.encodePayload(packets, this.supportsBinary, function (data) {",
          "222:       const compress = packets.some(function (packet) {",
          "223:         return packet.options && packet.options.compress;",
          "224:       });",
          "225:       self.write(data, { compress: compress });",
          "226:     });",
          "236:   write (data, options) {",
          "237:     debug('writing \"%s\"', data);",
          "238:     const self = this;",
          "239:     this.doWrite(data, options, function () {",
          "240:       self.req.cleanup();",
          "241:     });",
          "249:   doWrite (data, options, callback) {",
          "250:     const self = this;",
          "253:     const isString = typeof data === 'string';",
          "254:     const contentType = isString",
          "255:       ? 'text/plain; charset=UTF-8'",
          "256:       : 'application/octet-stream';",
          "258:     const headers = {",
          "259:       'Content-Type': contentType",
          "260:     };",
          "262:     if (!this.httpCompression || !options.compress) {",
          "263:       respond(data);",
          "264:       return;",
          "265:     }",
          "267:     const len = isString ? Buffer.byteLength(data) : data.length;",
          "268:     if (len < this.httpCompression.threshold) {",
          "269:       respond(data);",
          "270:       return;",
          "271:     }",
          "273:     const encoding = accepts(this.req).encodings(['gzip', 'deflate']);",
          "274:     if (!encoding) {",
          "275:       respond(data);",
          "279:     this.compress(data, encoding, function (err, data) {",
          "280:       if (err) {",
          "281:         self.res.writeHead(500);",
          "282:         self.res.end();",
          "283:         callback(err);",
          "284:         return;",
          "285:       }",
          "287:       headers['Content-Encoding'] = encoding;",
          "288:       respond(data);",
          "289:     });",
          "291:     function respond (data) {",
          "292:       headers['Content-Length'] = 'string' === typeof data ? Buffer.byteLength(data) : data.length;",
          "293:       self.res.writeHead(200, self.headers(self.req, headers));",
          "294:       self.res.end(data);",
          "295:       callback();",
          "296:     }",
          "304:   compress (data, encoding, callback) {",
          "305:     debug('compressing');",
          "307:     const buffers = [];",
          "308:     let nread = 0;",
          "310:     compressionMethods[encoding](this.httpCompression)",
          "311:       .on('error', callback)",
          "312:       .on('data', function (chunk) {",
          "313:         buffers.push(chunk);",
          "314:         nread += chunk.length;",
          "315:       })",
          "316:       .on('end', function () {",
          "317:         callback(null, Buffer.concat(buffers, nread));",
          "318:       })",
          "319:       .end(data);",
          "320:   }",
          "327:   doClose (fn) {",
          "328:     debug('closing');",
          "330:     const self = this;",
          "331:     let closeTimeoutTimer;",
          "333:     if (this.dataReq) {",
          "334:       debug('aborting ongoing data request');",
          "335:       this.dataReq.destroy();",
          "336:     }",
          "338:     if (this.writable) {",
          "339:       debug('transport writable - closing right away');",
          "340:       this.send([{ type: 'close' }]);",
          "341:       onClose();",
          "342:     } else if (this.discarded) {",
          "343:       debug('transport discarded - closing right away');",
          "344:       onClose();",
          "345:     } else {",
          "346:       debug('transport not writable - buffering orderly close');",
          "347:       this.shouldClose = onClose;",
          "348:       closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);",
          "349:     }",
          "351:     function onClose () {",
          "352:       clearTimeout(closeTimeoutTimer);",
          "353:       fn();",
          "354:       self.onClose();",
          "355:     }",
          "365:   headers (req, headers) {",
          "366:     headers = headers || {};",
          "370:     const ua = req.headers['user-agent'];",
          "371:     if (ua && (~ua.indexOf(';MSIE') || ~ua.indexOf('Trident/'))) {",
          "372:       headers['X-XSS-Protection'] = '0';",
          "373:     }",
          "375:     this.emit('headers', headers);",
          "376:     return headers;",
          "378: }",
          "380: module.exports = Polling;",
          "",
          "---------------"
        ],
        "lib/transports/websocket.js||lib/transports/websocket.js": [
          "File: lib/transports/websocket.js -> lib/transports/websocket.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   }",
          "104:     }",
          "111:     }",
          "115:   }",
          "121:   }",
          "",
          "[Removed Lines]",
          "6: var Transport = require('../transport');",
          "7: var parser = require('engine.io-parser');",
          "8: var util = require('util');",
          "9: var debug = require('debug')('engine:ws');",
          "15: module.exports = WebSocket;",
          "24: function WebSocket (req) {",
          "25:   Transport.call(this, req);",
          "26:   var self = this;",
          "27:   this.socket = req.websocket;",
          "28:   this.socket.on('message', this.onData.bind(this));",
          "29:   this.socket.once('close', this.onClose.bind(this));",
          "30:   this.socket.on('error', this.onError.bind(this));",
          "31:   this.socket.on('headers', onHeaders);",
          "32:   this.writable = true;",
          "33:   this.perMessageDeflate = null;",
          "35:   function onHeaders (headers) {",
          "36:     self.emit('headers', headers);",
          "38: }",
          "44: util.inherits(WebSocket, Transport);",
          "52: WebSocket.prototype.name = 'websocket';",
          "60: WebSocket.prototype.handlesUpgrades = true;",
          "68: WebSocket.prototype.supportsFraming = true;",
          "77: WebSocket.prototype.onData = function (data) {",
          "78:   debug('received \"%s\"', data);",
          "79:   Transport.prototype.onData.call(this, data);",
          "80: };",
          "89: WebSocket.prototype.send = function (packets) {",
          "90:   var self = this;",
          "92:   for (var i = 0; i < packets.length; i++) {",
          "93:     var packet = packets[i];",
          "94:     parser.encodePacket(packet, self.supportsBinary, send);",
          "95:   }",
          "97:   function send (data) {",
          "98:     debug('writing \"%s\"', data);",
          "101:     var opts = {};",
          "102:     if (packet.options) {",
          "103:       opts.compress = packet.options.compress;",
          "106:     if (self.perMessageDeflate) {",
          "107:       var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;",
          "108:       if (len < self.perMessageDeflate.threshold) {",
          "109:         opts.compress = false;",
          "110:       }",
          "113:     self.writable = false;",
          "114:     self.socket.send(data, opts, onEnd);",
          "117:   function onEnd (err) {",
          "118:     if (err) return self.onError('write error', err.stack);",
          "119:     self.writable = true;",
          "120:     self.emit('drain');",
          "122: };",
          "130: WebSocket.prototype.doClose = function (fn) {",
          "131:   debug('closing');",
          "132:   this.socket.close();",
          "133:   fn && fn();",
          "134: };",
          "",
          "[Added Lines]",
          "1: const Transport = require('../transport');",
          "2: const parser = require('engine.io-parser');",
          "3: const debug = require('debug')('engine:ws');",
          "5: class WebSocket extends Transport {",
          "12:   constructor (req) {",
          "13:     super(req);",
          "14:     this.socket = req.websocket;",
          "15:     this.socket.on('message', this.onData.bind(this));",
          "16:     this.socket.once('close', this.onClose.bind(this));",
          "17:     this.socket.on('error', this.onError.bind(this));",
          "18:     this.socket.on('headers', (headers) => {",
          "19:       this.emit('headers', headers);",
          "20:     });",
          "21:     this.writable = true;",
          "22:     this.perMessageDeflate = null;",
          "30:   get name () {",
          "31:     return 'websocket';",
          "32:   }",
          "39:   get handlesUpgrades () {",
          "40:     return true;",
          "41:   }",
          "48:   get supportsFraming () {",
          "49:     return true;",
          "50:   }",
          "58:   onData (data) {",
          "59:     debug('received \"%s\"', data);",
          "60:     super.onData(data);",
          "61:   }",
          "69:   send (packets) {",
          "70:     var self = this;",
          "72:     for (var i = 0; i < packets.length; i++) {",
          "73:       var packet = packets[i];",
          "74:       parser.encodePacket(packet, self.supportsBinary, send);",
          "75:     }",
          "77:     function send (data) {",
          "78:       debug('writing \"%s\"', data);",
          "81:       var opts = {};",
          "82:       if (packet.options) {",
          "83:         opts.compress = packet.options.compress;",
          "84:       }",
          "86:       if (self.perMessageDeflate) {",
          "87:         var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;",
          "88:         if (len < self.perMessageDeflate.threshold) {",
          "89:           opts.compress = false;",
          "90:         }",
          "91:       }",
          "93:       self.writable = false;",
          "94:       self.socket.send(data, opts, onEnd);",
          "97:     function onEnd (err) {",
          "98:       if (err) return self.onError('write error', err.stack);",
          "99:       self.writable = true;",
          "100:       self.emit('drain');",
          "109:   doClose (fn) {",
          "110:     debug('closing');",
          "111:     this.socket.close();",
          "112:     fn && fn();",
          "114: }",
          "116: module.exports = WebSocket;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bafe684a193e7ad9e2af9aff82bb8b555f627f11",
      "candidate_info": {
        "commit_hash": "bafe684a193e7ad9e2af9aff82bb8b555f627f11",
        "repo": "socketio/engine.io",
        "commit_url": "https://github.com/socketio/engine.io/commit/bafe684a193e7ad9e2af9aff82bb8b555f627f11",
        "files": [
          "lib/server.js",
          "lib/socket.js"
        ],
        "message": "refactor: refactor the handling of the options",
        "before_after_code_files": [
          "lib/server.js||lib/server.js",
          "lib/socket.js||lib/socket.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/server.js||lib/server.js"
          ],
          "candidate": [
            "lib/server.js||lib/server.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/server.js||lib/server.js": [
          "File: lib/server.js -> lib/server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     super();",
          "20:     this.clients = {};",
          "21:     this.clientsCount = 0;",
          "41:     if (opts.cookie) {",
          "42:       this.opts.cookie = Object.assign(",
          "",
          "[Removed Lines]",
          "17:   constructor(opts) {",
          "23:     opts = opts || {};",
          "25:     this.wsEngine = opts.wsEngine || process.env.EIO_WS_ENGINE || \"ws\";",
          "26:     this.pingTimeout = opts.pingTimeout || 5000;",
          "27:     this.pingInterval = opts.pingInterval || 25000;",
          "28:     this.upgradeTimeout = opts.upgradeTimeout || 10000;",
          "29:     this.maxHttpBufferSize = opts.maxHttpBufferSize || 10e7;",
          "30:     this.transports = opts.transports || Object.keys(transports);",
          "31:     this.allowUpgrades = false !== opts.allowUpgrades;",
          "32:     this.allowRequest = opts.allowRequest;",
          "33:     this.perMessageDeflate =",
          "34:       false !== opts.perMessageDeflate ? opts.perMessageDeflate || true : false;",
          "35:     this.httpCompression =",
          "36:       false !== opts.httpCompression ? opts.httpCompression || {} : false;",
          "37:     this.initialPacket = opts.initialPacket;",
          "39:     this.opts = Object.assign({}, opts);",
          "",
          "[Added Lines]",
          "17:   constructor(opts = {}) {",
          "23:     this.opts = Object.assign(",
          "24:       {",
          "25:         wsEngine: process.env.EIO_WS_ENGINE || \"ws\",",
          "26:         pingTimeout: 5000,",
          "27:         pingInterval: 25000,",
          "28:         upgradeTimeout: 10000,",
          "29:         maxHttpBufferSize: 10e7,",
          "30:         transports: Object.keys(transports),",
          "31:         allowUpgrades: true,",
          "32:         perMessageDeflate: {",
          "33:           threshold: 1024",
          "34:         },",
          "35:         httpCompression: {",
          "36:           threshold: 1024",
          "37:         }",
          "38:       },",
          "39:       opts",
          "40:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:       );",
          "51:     }",
          "62:     this.init();",
          "63:   }",
          "",
          "[Removed Lines]",
          "54:     [\"perMessageDeflate\", \"httpCompression\"].forEach(type => {",
          "55:       let compression = this[type];",
          "56:       if (true === compression) this[type] = compression = {};",
          "57:       if (compression && null == compression.threshold) {",
          "58:         compression.threshold = 1024;",
          "59:       }",
          "60:     });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:   init() {",
          "73:     if (this.ws) this.ws.close();",
          "75:     let wsModule;",
          "77:       case \"uws\":",
          "78:         wsModule = require(\"uws\");",
          "79:         break;",
          "",
          "[Removed Lines]",
          "71:     if (!~this.transports.indexOf(\"websocket\")) return;",
          "76:     switch (this.wsEngine) {",
          "",
          "[Added Lines]",
          "63:     if (!~this.opts.transports.indexOf(\"websocket\")) return;",
          "68:     switch (this.opts.wsEngine) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:     this.ws = new wsModule.Server({",
          "87:       noServer: true,",
          "88:       clientTracking: false,",
          "91:     });",
          "92:   }",
          "",
          "[Removed Lines]",
          "89:       perMessageDeflate: this.perMessageDeflate,",
          "90:       maxPayload: this.maxHttpBufferSize",
          "",
          "[Added Lines]",
          "81:       perMessageDeflate: this.opts.perMessageDeflate,",
          "82:       maxPayload: this.opts.maxHttpBufferSize",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:   upgrades(transport) {",
          "102:     return transports[transport].upgradesTo || [];",
          "103:   }",
          "",
          "[Removed Lines]",
          "101:     if (!this.allowUpgrades) return [];",
          "",
          "[Added Lines]",
          "93:     if (!this.opts.allowUpgrades) return [];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "112:   verify(req, upgrade, fn) {",
          "114:     const transport = req._query.transport;",
          "116:       debug('unknown transport \"%s\"', transport);",
          "117:       return fn(Server.errors.UNKNOWN_TRANSPORT, false);",
          "118:     }",
          "",
          "[Removed Lines]",
          "115:     if (!~this.transports.indexOf(transport)) {",
          "",
          "[Added Lines]",
          "107:     if (!~this.opts.transports.indexOf(transport)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "141:       if (\"GET\" !== req.method)",
          "142:         return fn(Server.errors.BAD_HANDSHAKE_METHOD, false);",
          "145:     }",
          "147:     fn(null, true);",
          "",
          "[Removed Lines]",
          "143:       if (!this.allowRequest) return fn(null, true);",
          "144:       return this.allowRequest(req, fn);",
          "",
          "[Added Lines]",
          "135:       if (!this.opts.allowRequest) return fn(null, true);",
          "136:       return this.opts.allowRequest(req, fn);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "240:     try {",
          "241:       var transport = new transports[transportName](req);",
          "242:       if (\"polling\" === transportName) {",
          "245:       } else if (\"websocket\" === transportName) {",
          "247:       }",
          "249:       if (req._query && req._query.b64) {",
          "",
          "[Removed Lines]",
          "243:         transport.maxHttpBufferSize = this.maxHttpBufferSize;",
          "244:         transport.httpCompression = this.httpCompression;",
          "246:         transport.perMessageDeflate = this.perMessageDeflate;",
          "",
          "[Added Lines]",
          "235:         transport.maxHttpBufferSize = this.opts.maxHttpBufferSize;",
          "236:         transport.httpCompression = this.opts.httpCompression;",
          "238:         transport.perMessageDeflate = this.opts.perMessageDeflate;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "424:       }",
          "425:     });",
          "428:       server.on(\"upgrade\", function(req, socket, head) {",
          "429:         if (check(req)) {",
          "430:           self.handleUpgrade(req, socket, head);",
          "",
          "[Removed Lines]",
          "427:     if (~self.transports.indexOf(\"websocket\")) {",
          "",
          "[Added Lines]",
          "419:     if (~self.opts.transports.indexOf(\"websocket\")) {",
          "",
          "---------------"
        ],
        "lib/socket.js||lib/socket.js": [
          "File: lib/socket.js -> lib/socket.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:       JSON.stringify({",
          "52:         sid: this.id,",
          "53:         upgrades: this.getAvailableUpgrades(),",
          "56:       })",
          "57:     );",
          "61:     }",
          "63:     this.emit(\"open\");",
          "",
          "[Removed Lines]",
          "54:         pingInterval: this.server.pingInterval,",
          "55:         pingTimeout: this.server.pingTimeout",
          "59:     if (this.server.initialPacket) {",
          "60:       this.sendPacket(\"message\", this.server.initialPacket);",
          "",
          "[Added Lines]",
          "54:         pingInterval: this.server.opts.pingInterval,",
          "55:         pingTimeout: this.server.opts.pingTimeout",
          "59:     if (this.server.opts.initialPacket) {",
          "60:       this.sendPacket(\"message\", this.server.opts.initialPacket);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:       switch (packet.type) {",
          "84:         case \"pong\":",
          "",
          "[Removed Lines]",
          "81:       this.resetPingTimeout(this.server.pingInterval + this.server.pingTimeout);",
          "",
          "[Added Lines]",
          "81:       this.resetPingTimeout(",
          "82:         this.server.opts.pingInterval + this.server.opts.pingTimeout",
          "83:       );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     this.pingIntervalTimer = setTimeout(() => {",
          "124:       debug(",
          "125:         \"writing ping packet - expecting pong within %sms\",",
          "127:       );",
          "128:       this.sendPacket(\"ping\");",
          "131:   }",
          "",
          "[Removed Lines]",
          "126:         this.server.pingTimeout",
          "129:       this.resetPingTimeout(this.server.pingTimeout);",
          "130:     }, this.server.pingInterval);",
          "",
          "[Added Lines]",
          "128:         this.server.opts.pingTimeout",
          "131:       this.resetPingTimeout(this.server.opts.pingTimeout);",
          "132:     }, this.server.opts.pingInterval);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:       if (\"open\" === transport.readyState) {",
          "196:         transport.close();",
          "197:       }",
          "200:     function onPacket(packet) {",
          "201:       if (\"ping\" === packet.type && \"probe\" === packet.data) {",
          "",
          "[Removed Lines]",
          "198:     }, this.server.upgradeTimeout);",
          "",
          "[Added Lines]",
          "200:     }, this.server.opts.upgradeTimeout);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "455:     const l = allUpgrades.length;",
          "456:     for (; i < l; ++i) {",
          "457:       const upg = allUpgrades[i];",
          "459:         availableUpgrades.push(upg);",
          "460:       }",
          "461:     }",
          "",
          "[Removed Lines]",
          "458:       if (this.server.transports.indexOf(upg) !== -1) {",
          "",
          "[Added Lines]",
          "460:       if (this.server.opts.transports.indexOf(upg) !== -1) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a374471d06e3681a769766a1d068898182f9305f",
      "candidate_info": {
        "commit_hash": "a374471d06e3681a769766a1d068898182f9305f",
        "repo": "socketio/engine.io",
        "commit_url": "https://github.com/socketio/engine.io/commit/a374471d06e3681a769766a1d068898182f9305f",
        "files": [
          "README.md",
          "lib/server.js",
          "test/server.js"
        ],
        "message": "feat: disable cookie by default and add sameSite attribute\n\nThe cookie might be used for sticky-session, but is not mandatory so it\nmakes sense to disable it by default.\n\nThe change also add a SameSite=Lax attribute by default.\n\nBreaking change: the syntax has changed from\n\n```\nnew Server({\n  cookieName: \"test\",\n  cookieHttpOnly: false,\n  cookiePath: \"/custom\"\n})\n```\n\nto\n\n```\nnew Server({\n  cookie: {\n    name: \"test\",\n    httpOnly: false,\n    path: \"/custom\"\n  }\n})\n```\n\nAll other options (domain, maxAge, sameSite, ...) are now supported.\n\nReference: https://github.com/jshttp/cookie#options-1",
        "before_after_code_files": [
          "lib/server.js||lib/server.js",
          "test/server.js||test/server.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/server.js||lib/server.js"
          ],
          "candidate": [
            "lib/server.js||lib/server.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/server.js||lib/server.js": [
          "File: lib/server.js -> lib/server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     this.transports = opts.transports || Object.keys(transports);",
          "31:     this.allowUpgrades = false !== opts.allowUpgrades;",
          "32:     this.allowRequest = opts.allowRequest;",
          "37:     this.perMessageDeflate =",
          "38:       false !== opts.perMessageDeflate ? opts.perMessageDeflate || true : false;",
          "39:     this.httpCompression =",
          "40:       false !== opts.httpCompression ? opts.httpCompression || {} : false;",
          "41:     this.initialPacket = opts.initialPacket;",
          "44:     [\"perMessageDeflate\", \"httpCompression\"].forEach(type => {",
          "45:       let compression = this[type];",
          "",
          "[Removed Lines]",
          "33:     this.cookie = false !== opts.cookie ? opts.cookie || \"io\" : false;",
          "34:     this.cookiePath =",
          "35:       false !== opts.cookiePath ? opts.cookiePath || \"/\" : false;",
          "36:     this.cookieHttpOnly = false !== opts.cookieHttpOnly;",
          "",
          "[Added Lines]",
          "39:     this.opts = Object.assign({}, opts);",
          "41:     if (opts.cookie) {",
          "42:       this.opts.cookie = Object.assign(",
          "43:         {",
          "44:           name: \"io\",",
          "45:           path: \"/\",",
          "46:           httpOnly: opts.cookie.path !== false,",
          "47:           sameSite: \"lax\"",
          "48:         },",
          "49:         opts.cookie",
          "50:       );",
          "51:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:     const socket = new Socket(id, this, transport, req);",
          "250:     const self = this;",
          "258:       });",
          "259:     }",
          "",
          "[Removed Lines]",
          "252:     if (false !== this.cookie) {",
          "253:       transport.on(\"headers\", function(headers) {",
          "254:         headers[\"Set-Cookie\"] = cookieMod.serialize(self.cookie, id, {",
          "255:           path: self.cookiePath,",
          "256:           httpOnly: self.cookiePath ? self.cookieHttpOnly : false",
          "257:         });",
          "",
          "[Added Lines]",
          "262:     if (this.opts.cookie) {",
          "263:       transport.on(\"headers\", headers => {",
          "264:         headers[\"Set-Cookie\"] = cookieMod.serialize(",
          "265:           this.opts.cookie.name,",
          "266:           id,",
          "267:           this.opts.cookie",
          "268:         );",
          "",
          "---------------"
        ],
        "test/server.js||test/server.js": [
          "File: test/server.js -> test/server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:   });",
          "143:   describe(\"handshake\", function() {",
          "146:         request",
          "147:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "148:           .query({ transport: \"polling\", b64: 1 })",
          "149:           .end(function(err, res) {",
          "150:             expect(err).to.be(null);",
          "153:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "155:             );",
          "156:             done();",
          "157:           });",
          "158:       });",
          "159:     });",
          "163:         request",
          "164:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "165:           .query({ transport: \"polling\", b64: 1 })",
          "166:           .end(function(err, res) {",
          "167:             expect(err).to.be(null);",
          "169:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "171:             );",
          "172:             done();",
          "173:           });",
          "174:       });",
          "175:     });",
          "179:         request",
          "180:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "181:           .query({ transport: \"polling\", b64: 1 })",
          "182:           .end(function(err, res) {",
          "183:             expect(err).to.be(null);",
          "185:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "187:             );",
          "188:             done();",
          "189:           });",
          "190:       });",
          "191:     });",
          "195:         request",
          "196:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "197:           .query({ transport: \"polling\", b64: 1 })",
          "198:           .end(function(err, res) {",
          "199:             expect(err).to.be(null);",
          "202:             done();",
          "203:           });",
          "204:       });",
          "205:     });",
          "209:         request",
          "210:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "211:           .query({ transport: \"polling\", b64: 1 })",
          "212:           .end(function(err, res) {",
          "213:             expect(err).to.be(null);",
          "215:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "217:             );",
          "218:             done();",
          "219:           });",
          "220:       });",
          "221:     });",
          "225:         request",
          "226:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "227:           .query({ transport: \"polling\", b64: 1 })",
          "228:           .end(function(err, res) {",
          "229:             expect(err).to.be(null);",
          "232:             done();",
          "233:           });",
          "234:       });",
          "235:     });",
          "239:         request",
          "240:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "241:           .query({ transport: \"polling\", b64: 1 })",
          "242:           .end(function(err, res) {",
          "243:             expect(err).to.be(null);",
          "245:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "247:             );",
          "248:             done();",
          "249:           });",
          "250:       });",
          "251:     });",
          "255:         request",
          "256:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "257:           .query({ transport: \"polling\", b64: 1 })",
          "258:           .end(function(err, res) {",
          "259:             expect(err).to.be(null);",
          "261:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "263:             );",
          "264:             done();",
          "265:           });",
          "266:       });",
          "267:     });",
          "271:         request",
          "272:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "273:           .query({ transport: \"polling\" })",
          "",
          "[Removed Lines]",
          "144:     it(\"should send the io cookie\", function(done) {",
          "145:       listen(function(port) {",
          "152:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "154:               \"io=\" + sid + \"; Path=/; HttpOnly\"",
          "161:     it(\"should send the io cookie custom name\", function(done) {",
          "162:       listen({ cookie: \"woot\" }, function(port) {",
          "168:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "170:               \"woot=\" + sid + \"; Path=/; HttpOnly\"",
          "177:     it(\"should send the cookie with custom path\", function(done) {",
          "178:       listen({ cookiePath: \"/custom\" }, function(port) {",
          "184:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "186:               \"io=\" + sid + \"; Path=/custom; HttpOnly\"",
          "193:     it(\"should send the cookie with path=false\", function(done) {",
          "194:       listen({ cookiePath: false }, function(port) {",
          "200:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "201:             expect(res.headers[\"set-cookie\"][0]).to.be(\"io=\" + sid);",
          "207:     it(\"should send the io cookie with httpOnly=true\", function(done) {",
          "208:       listen({ cookieHttpOnly: true }, function(port) {",
          "214:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "216:               \"io=\" + sid + \"; Path=/; HttpOnly\"",
          "223:     it(\"should send the io cookie with httpOnly=true and path=false\", function(done) {",
          "224:       listen({ cookieHttpOnly: true, cookiePath: false }, function(port) {",
          "230:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "231:             expect(res.headers[\"set-cookie\"][0]).to.be(\"io=\" + sid);",
          "237:     it(\"should send the io cookie with httpOnly=false\", function(done) {",
          "238:       listen({ cookieHttpOnly: false }, function(port) {",
          "244:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "246:               \"io=\" + sid + \"; Path=/\"",
          "253:     it(\"should send the io cookie with httpOnly not boolean\", function(done) {",
          "254:       listen({ cookieHttpOnly: \"no\" }, function(port) {",
          "260:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "262:               \"io=\" + sid + \"; Path=/; HttpOnly\"",
          "269:     it(\"should not send the io cookie\", function(done) {",
          "270:       listen({ cookie: false }, function(port) {",
          "",
          "[Added Lines]",
          "144:     it(\"should send the io cookie\", done => {",
          "145:       listen({ cookie: true }, port => {",
          "152:             const sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "154:               `io=${sid}; Path=/; HttpOnly; SameSite=Lax`",
          "161:     it(\"should send the io cookie custom name\", done => {",
          "162:       listen({ cookie: { name: \"woot\" } }, port => {",
          "168:             const sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "170:               `woot=${sid}; Path=/; HttpOnly; SameSite=Lax`",
          "177:     it(\"should send the cookie with custom path\", done => {",
          "178:       listen({ cookie: { path: \"/custom\" } }, port => {",
          "184:             const sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "186:               `io=${sid}; Path=/custom; HttpOnly; SameSite=Lax`",
          "193:     it(\"should send the cookie with path=false\", done => {",
          "194:       listen({ cookie: { path: false } }, port => {",
          "200:             const sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "201:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "202:               `io=${sid}; SameSite=Lax`",
          "203:             );",
          "209:     it(\"should send the io cookie with httpOnly=true\", done => {",
          "210:       listen({ cookie: { httpOnly: true } }, port => {",
          "216:             const sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "218:               `io=${sid}; Path=/; HttpOnly; SameSite=Lax`",
          "225:     it(\"should send the io cookie with sameSite=strict\", done => {",
          "226:       listen({ cookie: { sameSite: \"strict\" } }, port => {",
          "232:             const sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "233:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "234:               `io=${sid}; Path=/; HttpOnly; SameSite=Strict`",
          "235:             );",
          "241:     it(\"should send the io cookie with httpOnly=false\", done => {",
          "242:       listen({ cookie: { httpOnly: false } }, port => {",
          "248:             const sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "250:               `io=${sid}; Path=/; SameSite=Lax`",
          "257:     it(\"should send the io cookie with httpOnly not boolean\", done => {",
          "258:       listen({ cookie: { httpOnly: \"no\" } }, port => {",
          "264:             const sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "266:               `io=${sid}; Path=/; HttpOnly; SameSite=Lax`",
          "273:     it(\"should not send the io cookie\", done => {",
          "274:       listen({ cookie: false }, port => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2549:     }",
          "2551:     it(\"should compress by default\", function(done) {",
          "2553:         engine.on(\"connection\", function(conn) {",
          "2554:           var buf = Buffer.allocUnsafe(1024);",
          "2555:           for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "",
          "[Removed Lines]",
          "2552:       var engine = listen({ transports: [\"polling\"] }, function(port) {",
          "",
          "[Added Lines]",
          "2556:       var engine = listen({ cookie: true, transports: [\"polling\"] }, function(",
          "2557:         port",
          "2558:       ) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2584:     });",
          "2586:     it(\"should compress using deflate\", function(done) {",
          "2588:         engine.on(\"connection\", function(conn) {",
          "2589:           var buf = Buffer.allocUnsafe(1024);",
          "2590:           for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "",
          "[Removed Lines]",
          "2587:       var engine = listen({ transports: [\"polling\"] }, function(port) {",
          "",
          "[Added Lines]",
          "2593:       var engine = listen({ cookie: true, transports: [\"polling\"] }, function(",
          "2594:         port",
          "2595:       ) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2621:     it(\"should set threshold\", function(done) {",
          "2622:       var engine = listen(",
          "2624:         function(port) {",
          "2625:           engine.on(\"connection\", function(conn) {",
          "2626:             var buf = Buffer.allocUnsafe(10);",
          "",
          "[Removed Lines]",
          "2623:         { transports: [\"polling\"], httpCompression: { threshold: 0 } },",
          "",
          "[Added Lines]",
          "2631:         {",
          "2632:           cookie: true,",
          "2633:           transports: [\"polling\"],",
          "2634:           httpCompression: { threshold: 0 }",
          "2635:         },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2655:     it(\"should disable compression\", function(done) {",
          "2656:       var engine = listen(",
          "2658:         function(port) {",
          "2659:           engine.on(\"connection\", function(conn) {",
          "2660:             var buf = Buffer.allocUnsafe(1024);",
          "",
          "[Removed Lines]",
          "2657:         { transports: [\"polling\"], httpCompression: false },",
          "",
          "[Added Lines]",
          "2669:         { cookie: true, transports: [\"polling\"], httpCompression: false },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2687:     });",
          "2689:     it(\"should disable compression per message\", function(done) {",
          "2691:         engine.on(\"connection\", function(conn) {",
          "2692:           var buf = Buffer.allocUnsafe(1024);",
          "2693:           for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "",
          "[Removed Lines]",
          "2690:       var engine = listen({ transports: [\"polling\"] }, function(port) {",
          "",
          "[Added Lines]",
          "2702:       var engine = listen({ cookie: true, transports: [\"polling\"] }, function(",
          "2703:         port",
          "2704:       ) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2718:     });",
          "2720:     it(\"should not compress when the byte size is below threshold\", function(done) {",
          "2722:         engine.on(\"connection\", function(conn) {",
          "2723:           var buf = Buffer.allocUnsafe(100);",
          "2724:           for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "",
          "[Removed Lines]",
          "2721:       var engine = listen({ transports: [\"polling\"] }, function(port) {",
          "",
          "[Added Lines]",
          "2735:       var engine = listen({ cookie: true, transports: [\"polling\"] }, function(",
          "2736:         port",
          "2737:       ) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33564b2391e0d4393b636bbb956ba9a8ae5a38e0",
      "candidate_info": {
        "commit_hash": "33564b2391e0d4393b636bbb956ba9a8ae5a38e0",
        "repo": "socketio/engine.io",
        "commit_url": "https://github.com/socketio/engine.io/commit/33564b2391e0d4393b636bbb956ba9a8ae5a38e0",
        "files": [
          ".eslintrc.json",
          "lib/engine.io.js",
          "lib/server.js",
          "lib/socket.js",
          "lib/transport.js",
          "lib/transports/index.js",
          "lib/transports/polling-jsonp.js",
          "lib/transports/polling-xhr.js",
          "lib/transports/polling.js",
          "lib/transports/websocket.js",
          "package-lock.json",
          "package.json",
          "test/common.js",
          "test/engine.io.js",
          "test/fixtures/server-close-upgraded.js",
          "test/fixtures/server-close-upgrading.js",
          "test/fixtures/server-close.js",
          "test/jsonp.js",
          "test/server.js"
        ],
        "message": "refactor: use prettier to format code",
        "before_after_code_files": [
          "lib/engine.io.js||lib/engine.io.js",
          "lib/server.js||lib/server.js",
          "lib/socket.js||lib/socket.js",
          "lib/transport.js||lib/transport.js",
          "lib/transports/index.js||lib/transports/index.js",
          "lib/transports/polling-jsonp.js||lib/transports/polling-jsonp.js",
          "lib/transports/polling-xhr.js||lib/transports/polling-xhr.js",
          "lib/transports/polling.js||lib/transports/polling.js",
          "lib/transports/websocket.js||lib/transports/websocket.js",
          "test/common.js||test/common.js",
          "test/engine.io.js||test/engine.io.js",
          "test/fixtures/server-close-upgraded.js||test/fixtures/server-close-upgraded.js",
          "test/fixtures/server-close-upgrading.js||test/fixtures/server-close-upgrading.js",
          "test/fixtures/server-close.js||test/fixtures/server-close.js",
          "test/jsonp.js||test/jsonp.js",
          "test/server.js||test/server.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/server.js||lib/server.js"
          ],
          "candidate": [
            "lib/server.js||lib/server.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/engine.io.js||lib/engine.io.js": [
          "File: lib/engine.io.js -> lib/engine.io.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "5: const http = require('http');",
          "6: const Server = require('./server');",
          "",
          "[Added Lines]",
          "5: const http = require(\"http\");",
          "6: const Server = require(\"./server\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:   if (arguments.length && arguments[0] instanceof http.Server) {",
          "",
          "[Removed Lines]",
          "21: exports = module.exports = function () {",
          "",
          "[Added Lines]",
          "21: exports = module.exports = function() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "54: exports.Socket = require('./socket');",
          "",
          "[Added Lines]",
          "54: exports.Socket = require(\"./socket\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "62: exports.Transport = require('./transport');",
          "",
          "[Added Lines]",
          "62: exports.Transport = require(\"./transport\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "70: exports.transports = require('./transports');",
          "",
          "[Added Lines]",
          "70: exports.transports = require(\"./transports\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "78: exports.parser = require('engine.io-parser');",
          "",
          "[Added Lines]",
          "78: exports.parser = require(\"engine.io-parser\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "90: exports.listen = listen;",
          "94:     fn = options;",
          "95:     options = {};",
          "96:   }",
          "99:     res.writeHead(501);",
          "101:   });",
          "",
          "[Removed Lines]",
          "92: function listen (port, options, fn) {",
          "93:   if ('function' === typeof options) {",
          "98:   const server = http.createServer(function (req, res) {",
          "100:     res.end('Not Implemented');",
          "",
          "[Added Lines]",
          "92: function listen(port, options, fn) {",
          "93:   if (\"function\" === typeof options) {",
          "98:   const server = http.createServer(function(req, res) {",
          "100:     res.end(\"Not Implemented\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "121: exports.attach = attach;",
          "124:   const engine = new Server(options);",
          "125:   engine.attach(server, options);",
          "126:   return engine;",
          "",
          "[Removed Lines]",
          "123: function attach (server, options) {",
          "",
          "[Added Lines]",
          "123: function attach(server, options) {",
          "",
          "---------------"
        ],
        "lib/server.js||lib/server.js": [
          "File: lib/server.js -> lib/server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: class Server extends EventEmitter {",
          "",
          "[Removed Lines]",
          "1: const qs = require('querystring');",
          "2: const parse = require('url').parse;",
          "3: const base64id = require('base64id');",
          "4: const transports = require('./transports');",
          "5: const EventEmitter = require('events').EventEmitter;",
          "6: const Socket = require('./socket');",
          "7: const debug = require('debug')('engine');",
          "8: const cookieMod = require('cookie');",
          "",
          "[Added Lines]",
          "1: const qs = require(\"querystring\");",
          "2: const parse = require(\"url\").parse;",
          "3: const base64id = require(\"base64id\");",
          "4: const transports = require(\"./transports\");",
          "5: const EventEmitter = require(\"events\").EventEmitter;",
          "6: const Socket = require(\"./socket\");",
          "7: const debug = require(\"debug\")(\"engine\");",
          "8: const cookieMod = require(\"cookie\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     super();",
          "20:     this.clients = {};",
          "",
          "[Removed Lines]",
          "17:   constructor (opts) {",
          "",
          "[Added Lines]",
          "17:   constructor(opts) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "23:     opts = opts || {};",
          "26:     this.pingTimeout = opts.pingTimeout || 5000;",
          "27:     this.pingInterval = opts.pingInterval || 25000;",
          "28:     this.upgradeTimeout = opts.upgradeTimeout || 10000;",
          "30:     this.transports = opts.transports || Object.keys(transports);",
          "31:     this.allowUpgrades = false !== opts.allowUpgrades;",
          "32:     this.allowRequest = opts.allowRequest;",
          "35:     this.cookieHttpOnly = false !== opts.cookieHttpOnly;",
          "38:     this.initialPacket = opts.initialPacket;",
          "42:       let compression = this[type];",
          "43:       if (true === compression) this[type] = compression = {};",
          "44:       if (compression && null == compression.threshold) {",
          "",
          "[Removed Lines]",
          "25:     this.wsEngine = opts.wsEngine || process.env.EIO_WS_ENGINE || 'ws';",
          "29:     this.maxHttpBufferSize = opts.maxHttpBufferSize || 10E7;",
          "33:     this.cookie = false !== opts.cookie ? (opts.cookie || 'io') : false;",
          "34:     this.cookiePath = false !== opts.cookiePath ? (opts.cookiePath || '/') : false;",
          "36:     this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || true) : false;",
          "37:     this.httpCompression = false !== opts.httpCompression ? (opts.httpCompression || {}) : false;",
          "41:     ['perMessageDeflate', 'httpCompression'].forEach((type) => {",
          "",
          "[Added Lines]",
          "25:     this.wsEngine = opts.wsEngine || process.env.EIO_WS_ENGINE || \"ws\";",
          "29:     this.maxHttpBufferSize = opts.maxHttpBufferSize || 10e7;",
          "33:     this.cookie = false !== opts.cookie ? opts.cookie || \"io\" : false;",
          "34:     this.cookiePath =",
          "35:       false !== opts.cookiePath ? opts.cookiePath || \"/\" : false;",
          "37:     this.perMessageDeflate =",
          "38:       false !== opts.perMessageDeflate ? opts.perMessageDeflate || true : false;",
          "39:     this.httpCompression =",
          "40:       false !== opts.httpCompression ? opts.httpCompression || {} : false;",
          "44:     [\"perMessageDeflate\", \"httpCompression\"].forEach(type => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:     if (this.ws) this.ws.close();",
          "62:     let wsModule;",
          "63:     switch (this.wsEngine) {",
          "67:     }",
          "68:     this.ws = new wsModule.Server({",
          "69:       noServer: true,",
          "",
          "[Removed Lines]",
          "57:   init () {",
          "58:     if (!~this.transports.indexOf('websocket')) return;",
          "64:       case 'uws': wsModule = require('uws'); break;",
          "65:       case 'ws': wsModule = require('ws'); break;",
          "66:       default: throw new Error('unknown wsEngine');",
          "",
          "[Added Lines]",
          "60:   init() {",
          "61:     if (!~this.transports.indexOf(\"websocket\")) return;",
          "67:       case \"uws\":",
          "68:         wsModule = require(\"uws\");",
          "69:         break;",
          "70:       case \"ws\":",
          "71:         wsModule = require(\"ws\");",
          "72:         break;",
          "73:       default:",
          "74:         throw new Error(\"unknown wsEngine\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "83:     if (!this.allowUpgrades) return [];",
          "84:     return transports[transport].upgradesTo || [];",
          "85:   }",
          "",
          "[Removed Lines]",
          "82:   upgrades (transport) {",
          "",
          "[Added Lines]",
          "90:   upgrades(transport) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "96:     const transport = req._query.transport;",
          "97:     if (!~this.transports.indexOf(transport)) {",
          "",
          "[Removed Lines]",
          "94:   verify (req, upgrade, fn) {",
          "",
          "[Added Lines]",
          "102:   verify(req, upgrade, fn) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "103:     const isOriginInvalid = checkInvalidHeaderChar(req.headers.origin);",
          "104:     if (isOriginInvalid) {",
          "105:       req.headers.origin = null;",
          "107:       return fn(Server.errors.BAD_REQUEST, false);",
          "108:     }",
          "",
          "[Removed Lines]",
          "106:       debug('origin header invalid');",
          "",
          "[Added Lines]",
          "114:       debug(\"origin header invalid\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "115:         return fn(Server.errors.UNKNOWN_SID, false);",
          "116:       }",
          "117:       if (!upgrade && this.clients[sid].transport.name !== transport) {",
          "119:         return fn(Server.errors.BAD_REQUEST, false);",
          "120:       }",
          "121:     } else {",
          "124:       if (!this.allowRequest) return fn(null, true);",
          "125:       return this.allowRequest(req, fn);",
          "126:     }",
          "",
          "[Removed Lines]",
          "118:         debug('bad request: unexpected transport without upgrade');",
          "123:       if ('GET' !== req.method) return fn(Server.errors.BAD_HANDSHAKE_METHOD, false);",
          "",
          "[Added Lines]",
          "126:         debug(\"bad request: unexpected transport without upgrade\");",
          "131:       if (\"GET\" !== req.method)",
          "132:         return fn(Server.errors.BAD_HANDSHAKE_METHOD, false);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "138:     if (!req._query) {",
          "140:     }",
          "141:   }",
          "",
          "[Removed Lines]",
          "136:   prepare (req) {",
          "139:       req._query = ~req.url.indexOf('?') ? qs.parse(parse(req.url).query) : {};",
          "",
          "[Added Lines]",
          "145:   prepare(req) {",
          "148:       req._query = ~req.url.indexOf(\"?\") ? qs.parse(parse(req.url).query) : {};",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "150:     for (let i in this.clients) {",
          "151:       if (this.clients.hasOwnProperty(i)) {",
          "152:         this.clients[i].close(true);",
          "153:       }",
          "154:     }",
          "155:     if (this.ws) {",
          "157:       this.ws.close();",
          "159:     }",
          "",
          "[Removed Lines]",
          "148:   close () {",
          "149:     debug('closing all open clients');",
          "156:       debug('closing webSocketServer');",
          "",
          "[Added Lines]",
          "157:   close() {",
          "158:     debug(\"closing all open clients\");",
          "165:       debug(\"closing webSocketServer\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "171:     debug('handling \"%s\" http request \"%s\"', req.method, req.url);",
          "172:     this.prepare(req);",
          "173:     req.res = res;",
          "175:     const self = this;",
          "177:       if (!success) {",
          "178:         sendErrorMessage(req, res, err);",
          "179:         return;",
          "180:       }",
          "182:       if (req._query.sid) {",
          "184:         self.clients[req._query.sid].transport.onRequest(req);",
          "185:       } else {",
          "186:         self.handshake(req._query.transport, req);",
          "",
          "[Removed Lines]",
          "170:   handleRequest (req, res) {",
          "176:     this.verify(req, false, function (err, success) {",
          "183:         debug('setting new request for existing client');",
          "",
          "[Added Lines]",
          "179:   handleRequest(req, res) {",
          "185:     this.verify(req, false, function(err, success) {",
          "192:         debug(\"setting new request for existing client\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "199:     return base64id.generateId();",
          "200:   }",
          "",
          "[Removed Lines]",
          "198:   generateId (req) {",
          "",
          "[Added Lines]",
          "207:   generateId(req) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "210:     const id = this.generateId(req);",
          "212:     debug('handshaking client \"%s\"', id);",
          "214:     try {",
          "215:       var transport = new transports[transportName](req);",
          "217:         transport.maxHttpBufferSize = this.maxHttpBufferSize;",
          "218:         transport.httpCompression = this.httpCompression;",
          "220:         transport.perMessageDeflate = this.perMessageDeflate;",
          "221:       }",
          "",
          "[Removed Lines]",
          "209:   handshake (transportName, req) {",
          "216:       if ('polling' === transportName) {",
          "219:       } else if ('websocket' === transportName) {",
          "",
          "[Added Lines]",
          "218:   handshake(transportName, req) {",
          "225:       if (\"polling\" === transportName) {",
          "228:       } else if (\"websocket\" === transportName) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "234:     const self = this;",
          "236:     if (false !== this.cookie) {",
          "243:       });",
          "244:     }",
          "",
          "[Removed Lines]",
          "237:       transport.on('headers', function (headers) {",
          "238:         headers['Set-Cookie'] = cookieMod.serialize(self.cookie, id,",
          "239:           {",
          "240:             path: self.cookiePath,",
          "241:             httpOnly: self.cookiePath ? self.cookieHttpOnly : false",
          "242:           });",
          "",
          "[Added Lines]",
          "246:       transport.on(\"headers\", function(headers) {",
          "247:         headers[\"Set-Cookie\"] = cookieMod.serialize(self.cookie, id, {",
          "248:           path: self.cookiePath,",
          "249:           httpOnly: self.cookiePath ? self.cookieHttpOnly : false",
          "250:         });",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "248:     this.clients[id] = socket;",
          "249:     this.clientsCount++;",
          "252:       delete self.clients[id];",
          "253:       self.clientsCount--;",
          "254:     });",
          "257:   }",
          "",
          "[Removed Lines]",
          "251:     socket.once('close', function () {",
          "256:     this.emit('connection', socket);",
          "",
          "[Added Lines]",
          "259:     socket.once(\"close\", function() {",
          "264:     this.emit(\"connection\", socket);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "265:     this.prepare(req);",
          "267:     const self = this;",
          "269:       if (!success) {",
          "270:         abortConnection(socket, err);",
          "271:         return;",
          "",
          "[Removed Lines]",
          "264:   handleUpgrade (req, socket, upgradeHead) {",
          "268:     this.verify(req, true, function (err, success) {",
          "",
          "[Added Lines]",
          "272:   handleUpgrade(req, socket, upgradeHead) {",
          "276:     this.verify(req, true, function(err, success) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "275:       upgradeHead = null;",
          "279:         self.onWebSocket(req, conn);",
          "280:       });",
          "281:     });",
          "",
          "[Removed Lines]",
          "278:       self.ws.handleUpgrade(req, socket, head, function (conn) {",
          "",
          "[Added Lines]",
          "286:       self.ws.handleUpgrade(req, socket, head, function(conn) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "295:       socket.close();",
          "296:       return;",
          "297:     }",
          "",
          "[Removed Lines]",
          "290:   onWebSocket (req, socket) {",
          "291:     socket.on('error', onUpgradeError);",
          "293:     if (transports[req._query.transport] !== undefined && !transports[req._query.transport].prototype.handlesUpgrades) {",
          "294:       debug('transport doesnt handle upgraded requests');",
          "",
          "[Added Lines]",
          "298:   onWebSocket(req, socket) {",
          "299:     socket.on(\"error\", onUpgradeError);",
          "301:     if (",
          "302:       transports[req._query.transport] !== undefined &&",
          "303:       !transports[req._query.transport].prototype.handlesUpgrades",
          "304:     ) {",
          "305:       debug(\"transport doesnt handle upgraded requests\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "305:     if (id) {",
          "306:       const client = this.clients[id];",
          "307:       if (!client) {",
          "309:         socket.close();",
          "310:       } else if (client.upgrading) {",
          "312:         socket.close();",
          "313:       } else if (client.upgraded) {",
          "315:         socket.close();",
          "316:       } else {",
          "322:         const transport = new transports[req._query.transport](req);",
          "323:         if (req._query && req._query.b64) {",
          "",
          "[Removed Lines]",
          "308:         debug('upgrade attempt for closed client');",
          "311:         debug('transport has already been trying to upgrade');",
          "314:         debug('transport had already been upgraded');",
          "317:         debug('upgrading existing transport');",
          "320:         socket.removeListener('error', onUpgradeError);",
          "",
          "[Added Lines]",
          "319:         debug(\"upgrade attempt for closed client\");",
          "322:         debug(\"transport has already been trying to upgrade\");",
          "325:         debug(\"transport had already been upgraded\");",
          "328:         debug(\"upgrading existing transport\");",
          "331:         socket.removeListener(\"error\", onUpgradeError);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "330:       }",
          "331:     } else {",
          "335:       this.handshake(req._query.transport, req);",
          "336:     }",
          "341:     }",
          "342:   }",
          "",
          "[Removed Lines]",
          "333:       socket.removeListener('error', onUpgradeError);",
          "338:     function onUpgradeError () {",
          "339:       debug('websocket error before upgrade');",
          "",
          "[Added Lines]",
          "344:       socket.removeListener(\"error\", onUpgradeError);",
          "349:     function onUpgradeError() {",
          "350:       debug(\"websocket error before upgrade\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "352:     const self = this;",
          "353:     options = options || {};",
          "356:     const destroyUpgradeTimeout = options.destroyUpgradeTimeout || 1000;",
          "363:         return false;",
          "364:       }",
          "365:       return path === req.url.substr(0, path.length);",
          "366:     }",
          "376:       if (check(req)) {",
          "377:         debug('intercepting request for path \"%s\"', path);",
          "379:           options.handlePreflightRequest.call(server, req, res);",
          "380:         } else {",
          "381:           self.handleRequest(req, res);",
          "",
          "[Removed Lines]",
          "351:   attach (server, options) {",
          "354:     let path = (options.path || '/engine.io').replace(/\\/$/, '');",
          "359:     path += '/';",
          "361:     function check (req) {",
          "362:       if ('OPTIONS' === req.method && false === options.handlePreflightRequest) {",
          "369:     const listeners = server.listeners('request').slice(0);",
          "370:     server.removeAllListeners('request');",
          "371:     server.on('close', self.close.bind(self));",
          "372:     server.on('listening', self.init.bind(self));",
          "375:     server.on('request', function (req, res) {",
          "378:         if ('OPTIONS' === req.method && 'function' === typeof options.handlePreflightRequest) {",
          "",
          "[Added Lines]",
          "362:   attach(server, options) {",
          "365:     let path = (options.path || \"/engine.io\").replace(/\\/$/, \"\");",
          "370:     path += \"/\";",
          "372:     function check(req) {",
          "373:       if (",
          "374:         \"OPTIONS\" === req.method &&",
          "375:         false === options.handlePreflightRequest",
          "376:       ) {",
          "383:     const listeners = server.listeners(\"request\").slice(0);",
          "384:     server.removeAllListeners(\"request\");",
          "385:     server.on(\"close\", self.close.bind(self));",
          "386:     server.on(\"listening\", self.init.bind(self));",
          "389:     server.on(\"request\", function(req, res) {",
          "392:         if (",
          "393:           \"OPTIONS\" === req.method &&",
          "394:           \"function\" === typeof options.handlePreflightRequest",
          "395:         ) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "389:       }",
          "390:     });",
          "394:         if (check(req)) {",
          "395:           self.handleUpgrade(req, socket, head);",
          "396:         } else if (false !== options.destroyUpgrade) {",
          "",
          "[Removed Lines]",
          "392:     if (~self.transports.indexOf('websocket')) {",
          "393:       server.on('upgrade', function (req, socket, head) {",
          "",
          "[Added Lines]",
          "409:     if (~self.transports.indexOf(\"websocket\")) {",
          "410:       server.on(\"upgrade\", function(req, socket, head) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "402:             if (socket.writable && socket.bytesWritten <= 0) {",
          "403:               return socket.end();",
          "404:             }",
          "",
          "[Removed Lines]",
          "401:           setTimeout(function () {",
          "",
          "[Added Lines]",
          "418:           setTimeout(function() {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "422: };",
          "424: Server.errorMessages = {",
          "430: };",
          "",
          "[Removed Lines]",
          "425:   0: 'Transport unknown',",
          "426:   1: 'Session ID unknown',",
          "427:   2: 'Bad handshake method',",
          "428:   3: 'Bad request',",
          "429:   4: 'Forbidden'",
          "",
          "[Added Lines]",
          "442:   0: \"Transport unknown\",",
          "443:   1: \"Session ID unknown\",",
          "444:   2: \"Bad handshake method\",",
          "445:   3: \"Bad request\",",
          "446:   4: \"Forbidden\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "443:   const isForbidden = !Server.errorMessages.hasOwnProperty(code);",
          "444:   if (isForbidden) {",
          "445:     res.writeHead(403, headers);",
          "450:     return;",
          "451:   }",
          "452:   if (req.headers.origin) {",
          "455:   } else {",
          "457:   }",
          "458:   if (res !== undefined) {",
          "459:     res.writeHead(400, headers);",
          "464:   }",
          "465: }",
          "",
          "[Removed Lines]",
          "440: function sendErrorMessage (req, res, code) {",
          "441:   const headers = {'Content-Type': 'application/json'};",
          "446:     res.end(JSON.stringify({",
          "447:       code: Server.errors.FORBIDDEN,",
          "448:       message: code || Server.errorMessages[Server.errors.FORBIDDEN]",
          "449:     }));",
          "453:     headers['Access-Control-Allow-Credentials'] = 'true';",
          "454:     headers['Access-Control-Allow-Origin'] = req.headers.origin;",
          "456:     headers['Access-Control-Allow-Origin'] = '*';",
          "460:     res.end(JSON.stringify({",
          "461:       code: code,",
          "462:       message: Server.errorMessages[code]",
          "463:     }));",
          "",
          "[Added Lines]",
          "457: function sendErrorMessage(req, res, code) {",
          "458:   const headers = { \"Content-Type\": \"application/json\" };",
          "463:     res.end(",
          "464:       JSON.stringify({",
          "465:         code: Server.errors.FORBIDDEN,",
          "466:         message: code || Server.errorMessages[Server.errors.FORBIDDEN]",
          "467:       })",
          "468:     );",
          "472:     headers[\"Access-Control-Allow-Credentials\"] = \"true\";",
          "473:     headers[\"Access-Control-Allow-Origin\"] = req.headers.origin;",
          "475:     headers[\"Access-Control-Allow-Origin\"] = \"*\";",
          "479:     res.end(",
          "480:       JSON.stringify({",
          "481:         code: code,",
          "482:         message: Server.errorMessages[code]",
          "483:       })",
          "484:     );",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "476:   if (socket.writable) {",
          "478:     const length = Buffer.byteLength(message);",
          "479:     socket.write(",
          "486:     );",
          "487:   }",
          "488:   socket.destroy();",
          "",
          "[Removed Lines]",
          "475: function abortConnection (socket, code) {",
          "477:     const message = Server.errorMessages.hasOwnProperty(code) ? Server.errorMessages[code] : String(code || '');",
          "480:       'HTTP/1.1 400 Bad Request\\r\\n' +",
          "481:       'Connection: close\\r\\n' +",
          "482:       'Content-type: text/html\\r\\n' +",
          "483:       'Content-Length: ' + length + '\\r\\n' +",
          "484:       '\\r\\n' +",
          "485:       message",
          "",
          "[Added Lines]",
          "496: function abortConnection(socket, code) {",
          "498:     const message = Server.errorMessages.hasOwnProperty(code)",
          "499:       ? Server.errorMessages[code]",
          "500:       : String(code || \"\");",
          "503:       \"HTTP/1.1 400 Bad Request\\r\\n\" +",
          "504:         \"Connection: close\\r\\n\" +",
          "505:         \"Content-type: text/html\\r\\n\" +",
          "506:         \"Content-Length: \" +",
          "507:         length +",
          "508:         \"\\r\\n\" +",
          "509:         \"\\r\\n\" +",
          "510:         message",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "524: ]",
          "526: function checkInvalidHeaderChar(val) {",
          "530:   if (!validHdrChars[val.charCodeAt(0)]) {",
          "531:     debug('invalid header, index 0, char \"%s\"', val.charCodeAt(0));",
          "532:     return true;",
          "533:   }",
          "536:   if (!validHdrChars[val.charCodeAt(1)]) {",
          "537:     debug('invalid header, index 1, char \"%s\"', val.charCodeAt(1));",
          "538:     return true;",
          "539:   }",
          "542:   if (!validHdrChars[val.charCodeAt(2)]) {",
          "543:     debug('invalid header, index 2, char \"%s\"', val.charCodeAt(2));",
          "544:     return true;",
          "545:   }",
          "548:   if (!validHdrChars[val.charCodeAt(3)]) {",
          "549:     debug('invalid header, index 3, char \"%s\"', val.charCodeAt(3));",
          "550:     return true;",
          "",
          "[Removed Lines]",
          "527:   val += '';",
          "528:   if (val.length < 1)",
          "529:     return false;",
          "534:   if (val.length < 2)",
          "535:     return false;",
          "540:   if (val.length < 3)",
          "541:     return false;",
          "546:   if (val.length < 4)",
          "547:     return false;",
          "",
          "[Added Lines]",
          "553:   val += \"\";",
          "554:   if (val.length < 1) return false;",
          "559:   if (val.length < 2) return false;",
          "564:   if (val.length < 3) return false;",
          "569:   if (val.length < 4) return false;",
          "",
          "---------------"
        ],
        "lib/socket.js||lib/socket.js": [
          "File: lib/socket.js -> lib/socket.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: class Socket extends EventEmitter {",
          "",
          "[Removed Lines]",
          "1: const EventEmitter = require('events');",
          "2: const debug = require('debug')('engine:socket');",
          "",
          "[Added Lines]",
          "1: const EventEmitter = require(\"events\");",
          "2: const debug = require(\"debug\")(\"engine:socket\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11:     super();",
          "12:     this.id = id;",
          "13:     this.server = server;",
          "14:     this.upgrading = false;",
          "15:     this.upgraded = false;",
          "17:     this.writeBuffer = [];",
          "18:     this.packetsFn = [];",
          "19:     this.sentCallbackFn = [];",
          "",
          "[Removed Lines]",
          "10:   constructor (id, server, transport, req) {",
          "16:     this.readyState = 'opening';",
          "",
          "[Added Lines]",
          "10:   constructor(id, server, transport, req) {",
          "16:     this.readyState = \"opening\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     this.transport.sid = this.id;",
          "55:     if (this.server.initialPacket) {",
          "57:     }",
          "60:     this.setPingTimeout();",
          "61:   }",
          "",
          "[Removed Lines]",
          "43:   onOpen () {",
          "44:     this.readyState = 'open';",
          "48:     this.sendPacket('open', JSON.stringify({",
          "49:       sid: this.id,",
          "50:       upgrades: this.getAvailableUpgrades(),",
          "51:       pingInterval: this.server.pingInterval,",
          "52:       pingTimeout: this.server.pingTimeout",
          "53:     }));",
          "56:       this.sendPacket('message', this.server.initialPacket);",
          "59:     this.emit('open');",
          "",
          "[Added Lines]",
          "43:   onOpen() {",
          "44:     this.readyState = \"open\";",
          "48:     this.sendPacket(",
          "49:       \"open\",",
          "50:       JSON.stringify({",
          "51:         sid: this.id,",
          "52:         upgrades: this.getAvailableUpgrades(),",
          "53:         pingInterval: this.server.pingInterval,",
          "54:         pingTimeout: this.server.pingTimeout",
          "55:       })",
          "56:     );",
          "59:       this.sendPacket(\"message\", this.server.initialPacket);",
          "62:     this.emit(\"open\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:       this.setPingTimeout();",
          "79:       switch (packet.type) {",
          "84:           break;",
          "88:           break;",
          "93:           break;",
          "94:       }",
          "95:     } else {",
          "97:     }",
          "98:   }",
          "",
          "[Removed Lines]",
          "69:   onPacket (packet) {",
          "70:     if ('open' === this.readyState) {",
          "72:       debug('packet');",
          "73:       this.emit('packet', packet);",
          "80:         case 'ping':",
          "81:           debug('got ping');",
          "82:           this.sendPacket('pong');",
          "83:           this.emit('heartbeat');",
          "86:         case 'error':",
          "87:           this.onClose('parse error');",
          "90:         case 'message':",
          "91:           this.emit('data', packet.data);",
          "92:           this.emit('message', packet.data);",
          "96:       debug('packet received with closed socket');",
          "",
          "[Added Lines]",
          "72:   onPacket(packet) {",
          "73:     if (\"open\" === this.readyState) {",
          "75:       debug(\"packet\");",
          "76:       this.emit(\"packet\", packet);",
          "83:         case \"ping\":",
          "84:           debug(\"got ping\");",
          "85:           this.sendPacket(\"pong\");",
          "86:           this.emit(\"heartbeat\");",
          "89:         case \"error\":",
          "90:           this.onClose(\"parse error\");",
          "93:         case \"message\":",
          "94:           this.emit(\"data\", packet.data);",
          "95:           this.emit(\"message\", packet.data);",
          "99:       debug(\"packet received with closed socket\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109:   }",
          "",
          "[Removed Lines]",
          "106:   onError (err) {",
          "107:     debug('transport error');",
          "108:     this.onClose('transport error', err);",
          "",
          "[Added Lines]",
          "109:   onError(err) {",
          "110:     debug(\"transport error\");",
          "111:     this.onClose(\"transport error\", err);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "117:     clearTimeout(this.pingTimeoutTimer);",
          "118:     this.pingTimeoutTimer = setTimeout(() => {",
          "120:     }, this.server.pingInterval + this.server.pingTimeout);",
          "121:   }",
          "",
          "[Removed Lines]",
          "116:   setPingTimeout () {",
          "119:       this.onClose('ping timeout');",
          "",
          "[Added Lines]",
          "119:   setPingTimeout() {",
          "122:       this.onClose(\"ping timeout\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "130:     const onError = this.onError.bind(this);",
          "131:     const onPacket = this.onPacket.bind(this);",
          "132:     const flush = this.flush.bind(this);",
          "135:     this.transport = transport;",
          "141:     this.setupSendCallback();",
          "148:     });",
          "149:   }",
          "",
          "[Removed Lines]",
          "129:   setTransport (transport) {",
          "133:     const onClose = this.onClose.bind(this, 'transport close');",
          "136:     this.transport.once('error', onError);",
          "137:     this.transport.on('packet', onPacket);",
          "138:     this.transport.on('drain', flush);",
          "139:     this.transport.once('close', onClose);",
          "143:     this.cleanupFn.push(function () {",
          "144:       transport.removeListener('error', onError);",
          "145:       transport.removeListener('packet', onPacket);",
          "146:       transport.removeListener('drain', flush);",
          "147:       transport.removeListener('close', onClose);",
          "",
          "[Added Lines]",
          "132:   setTransport(transport) {",
          "136:     const onClose = this.onClose.bind(this, \"transport close\");",
          "139:     this.transport.once(\"error\", onError);",
          "140:     this.transport.on(\"packet\", onPacket);",
          "141:     this.transport.on(\"drain\", flush);",
          "142:     this.transport.once(\"close\", onClose);",
          "146:     this.cleanupFn.push(function() {",
          "147:       transport.removeListener(\"error\", onError);",
          "148:       transport.removeListener(\"packet\", onPacket);",
          "149:       transport.removeListener(\"drain\", flush);",
          "150:       transport.removeListener(\"close\", onClose);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "161:     this.upgrading = true;",
          "163:     const self = this;",
          "168:       cleanup();",
          "170:         transport.close();",
          "171:       }",
          "172:     }, this.server.upgradeTimeout);",
          "178:         clearInterval(self.checkIntervalTimer);",
          "179:         self.checkIntervalTimer = setInterval(check, 100);",
          "182:         cleanup();",
          "183:         self.transport.discard();",
          "184:         self.upgraded = true;",
          "185:         self.clearTransport();",
          "186:         self.setTransport(transport);",
          "188:         self.setPingTimeout();",
          "189:         self.flush();",
          "193:           });",
          "194:         }",
          "195:       } else {",
          "",
          "[Removed Lines]",
          "157:   maybeUpgrade (transport) {",
          "158:     debug('might upgrade socket transport from \"%s\" to \"%s\"'",
          "159:       , this.transport.name, transport.name);",
          "166:     self.upgradeTimeoutTimer = setTimeout(function () {",
          "167:       debug('client did not complete upgrade - closing transport');",
          "169:       if ('open' === transport.readyState) {",
          "174:     function onPacket (packet) {",
          "175:       if ('ping' === packet.type && 'probe' === packet.data) {",
          "176:         transport.send([{ type: 'pong', data: 'probe' }]);",
          "177:         self.emit('upgrading', transport);",
          "180:       } else if ('upgrade' === packet.type && self.readyState !== 'closed') {",
          "181:         debug('got upgrade packet - upgrading');",
          "187:         self.emit('upgrade', transport);",
          "190:         if (self.readyState === 'closing') {",
          "191:           transport.close(function () {",
          "192:             self.onClose('forced close');",
          "",
          "[Added Lines]",
          "160:   maybeUpgrade(transport) {",
          "161:     debug(",
          "162:       'might upgrade socket transport from \"%s\" to \"%s\"',",
          "163:       this.transport.name,",
          "164:       transport.name",
          "165:     );",
          "172:     self.upgradeTimeoutTimer = setTimeout(function() {",
          "173:       debug(\"client did not complete upgrade - closing transport\");",
          "175:       if (\"open\" === transport.readyState) {",
          "180:     function onPacket(packet) {",
          "181:       if (\"ping\" === packet.type && \"probe\" === packet.data) {",
          "182:         transport.send([{ type: \"pong\", data: \"probe\" }]);",
          "183:         self.emit(\"upgrading\", transport);",
          "186:       } else if (\"upgrade\" === packet.type && self.readyState !== \"closed\") {",
          "187:         debug(\"got upgrade packet - upgrading\");",
          "193:         self.emit(\"upgrade\", transport);",
          "196:         if (self.readyState === \"closing\") {",
          "197:           transport.close(function() {",
          "198:             self.onClose(\"forced close\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "199:     }",
          "206:       }",
          "207:     }",
          "210:       self.upgrading = false;",
          "212:       clearInterval(self.checkIntervalTimer);",
          "",
          "[Removed Lines]",
          "202:     function check () {",
          "203:       if ('polling' === self.transport.name && self.transport.writable) {",
          "204:         debug('writing a noop packet to polling for fast upgrade');",
          "205:         self.transport.send([{ type: 'noop' }]);",
          "209:     function cleanup () {",
          "",
          "[Added Lines]",
          "208:     function check() {",
          "209:       if (\"polling\" === self.transport.name && self.transport.writable) {",
          "210:         debug(\"writing a noop packet to polling for fast upgrade\");",
          "211:         self.transport.send([{ type: \"noop\" }]);",
          "215:     function cleanup() {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "215:       clearTimeout(self.upgradeTimeoutTimer);",
          "216:       self.upgradeTimeoutTimer = null;",
          "222:     }",
          "226:       cleanup();",
          "227:       transport.close();",
          "228:       transport = null;",
          "229:     }",
          "233:     }",
          "237:     }",
          "244:   }",
          "",
          "[Removed Lines]",
          "218:       transport.removeListener('packet', onPacket);",
          "219:       transport.removeListener('close', onTransportClose);",
          "220:       transport.removeListener('error', onError);",
          "221:       self.removeListener('close', onClose);",
          "224:     function onError (err) {",
          "225:       debug('client did not complete upgrade - %s', err);",
          "231:     function onTransportClose () {",
          "232:       onError('transport closed');",
          "235:     function onClose () {",
          "236:       onError('socket closed');",
          "239:     transport.on('packet', onPacket);",
          "240:     transport.once('close', onTransportClose);",
          "241:     transport.once('error', onError);",
          "243:     self.once('close', onClose);",
          "",
          "[Added Lines]",
          "224:       transport.removeListener(\"packet\", onPacket);",
          "225:       transport.removeListener(\"close\", onTransportClose);",
          "226:       transport.removeListener(\"error\", onError);",
          "227:       self.removeListener(\"close\", onClose);",
          "230:     function onError(err) {",
          "231:       debug(\"client did not complete upgrade - %s\", err);",
          "237:     function onTransportClose() {",
          "238:       onError(\"transport closed\");",
          "241:     function onClose() {",
          "242:       onError(\"socket closed\");",
          "245:     transport.on(\"packet\", onPacket);",
          "246:     transport.once(\"close\", onTransportClose);",
          "247:     transport.once(\"error\", onError);",
          "249:     self.once(\"close\", onClose);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "252:     let cleanup;",
          "254:     const toCleanUp = this.cleanupFn.length;",
          "",
          "[Removed Lines]",
          "251:   clearTransport () {",
          "",
          "[Added Lines]",
          "257:   clearTransport() {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "259:     }",
          "264:     });",
          "",
          "[Removed Lines]",
          "262:     this.transport.on('error', function () {",
          "263:       debug('error triggered by discarded transport');",
          "",
          "[Added Lines]",
          "268:     this.transport.on(\"error\", function() {",
          "269:       debug(\"error triggered by discarded transport\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "280:       clearTimeout(this.pingTimeoutTimer);",
          "281:       clearInterval(this.checkIntervalTimer);",
          "282:       this.checkIntervalTimer = null;",
          "",
          "[Removed Lines]",
          "277:   onClose (reason, description) {",
          "278:     if ('closed' !== this.readyState) {",
          "279:       this.readyState = 'closed';",
          "",
          "[Added Lines]",
          "283:   onClose(reason, description) {",
          "284:     if (\"closed\" !== this.readyState) {",
          "285:       this.readyState = \"closed\";",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "284:       const self = this;",
          "288:         self.writeBuffer = [];",
          "289:       });",
          "290:       this.packetsFn = [];",
          "291:       this.sentCallbackFn = [];",
          "292:       this.clearTransport();",
          "294:     }",
          "295:   }",
          "",
          "[Removed Lines]",
          "287:       process.nextTick(function () {",
          "293:       this.emit('close', reason, description);",
          "",
          "[Added Lines]",
          "293:       process.nextTick(function() {",
          "299:       this.emit(\"close\", reason, description);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "303:     const self = this;",
          "308:     });",
          "312:       if (self.sentCallbackFn.length > 0) {",
          "313:         const seqFn = self.sentCallbackFn.splice(0, 1)[0];",
          "316:           seqFn(self.transport);",
          "317:         } else if (Array.isArray(seqFn)) {",
          "319:           const l = seqFn.length;",
          "320:           let i = 0;",
          "321:           for (; i < l; i++) {",
          "323:               seqFn[i](self.transport);",
          "324:             }",
          "325:           }",
          "",
          "[Removed Lines]",
          "302:   setupSendCallback () {",
          "304:     this.transport.on('drain', onDrain);",
          "306:     this.cleanupFn.push(function () {",
          "307:       self.transport.removeListener('drain', onDrain);",
          "311:     function onDrain () {",
          "314:         if ('function' === typeof seqFn) {",
          "315:           debug('executing send callback');",
          "318:           debug('executing batch send callback');",
          "322:             if ('function' === typeof seqFn[i]) {",
          "",
          "[Added Lines]",
          "308:   setupSendCallback() {",
          "310:     this.transport.on(\"drain\", onDrain);",
          "312:     this.cleanupFn.push(function() {",
          "313:       self.transport.removeListener(\"drain\", onDrain);",
          "317:     function onDrain() {",
          "320:         if (\"function\" === typeof seqFn) {",
          "321:           debug(\"executing send callback\");",
          "324:           debug(\"executing batch send callback\");",
          "328:             if (\"function\" === typeof seqFn[i]) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "342:     return this;",
          "343:   }",
          "347:     return this;",
          "348:   }",
          "",
          "[Removed Lines]",
          "340:   send (data, options, callback) {",
          "341:     this.sendPacket('message', data, options, callback);",
          "345:   write (data, options, callback) {",
          "346:     this.sendPacket('message', data, options, callback);",
          "",
          "[Added Lines]",
          "346:   send(data, options, callback) {",
          "347:     this.sendPacket(\"message\", data, options, callback);",
          "351:   write(data, options, callback) {",
          "352:     this.sendPacket(\"message\", data, options, callback);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "360:       callback = options;",
          "361:       options = null;",
          "362:     }",
          "",
          "[Removed Lines]",
          "358:   sendPacket (type, data, options, callback) {",
          "359:     if ('function' === typeof options) {",
          "",
          "[Added Lines]",
          "364:   sendPacket(type, data, options, callback) {",
          "365:     if (\"function\" === typeof options) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "364:     options = options || {};",
          "365:     options.compress = false !== options.compress;",
          "368:       debug('sending packet \"%s\" (%s)', type, data);",
          "370:       const packet = {",
          "",
          "[Removed Lines]",
          "367:     if ('closing' !== this.readyState && 'closed' !== this.readyState) {",
          "",
          "[Added Lines]",
          "373:     if (\"closing\" !== this.readyState && \"closed\" !== this.readyState) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "374:       if (data) packet.data = data;",
          "379:       this.writeBuffer.push(packet);",
          "",
          "[Removed Lines]",
          "377:       this.emit('packetCreate', packet);",
          "",
          "[Added Lines]",
          "383:       this.emit(\"packetCreate\", packet);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "395:       this.transport.writable &&",
          "400:       const wbuf = this.writeBuffer;",
          "401:       this.writeBuffer = [];",
          "402:       if (!this.transport.supportsFraming) {",
          "",
          "[Removed Lines]",
          "393:   flush () {",
          "394:     if ('closed' !== this.readyState &&",
          "396:       this.writeBuffer.length) {",
          "397:       debug('flushing buffer to transport');",
          "398:       this.emit('flush', this.writeBuffer);",
          "399:       this.server.emit('flush', this, this.writeBuffer);",
          "",
          "[Added Lines]",
          "399:   flush() {",
          "400:     if (",
          "401:       \"closed\" !== this.readyState &&",
          "403:       this.writeBuffer.length",
          "404:     ) {",
          "405:       debug(\"flushing buffer to transport\");",
          "406:       this.emit(\"flush\", this.writeBuffer);",
          "407:       this.server.emit(\"flush\", this, this.writeBuffer);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "406:       }",
          "407:       this.packetsFn = [];",
          "408:       this.transport.send(wbuf);",
          "411:     }",
          "412:   }",
          "",
          "[Removed Lines]",
          "409:       this.emit('drain');",
          "410:       this.server.emit('drain', this);",
          "",
          "[Added Lines]",
          "417:       this.emit(\"drain\");",
          "418:       this.server.emit(\"drain\", this);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "420:     const availableUpgrades = [];",
          "421:     const allUpgrades = this.server.upgrades(this.transport.name);",
          "422:     let i = 0;",
          "",
          "[Removed Lines]",
          "419:   getAvailableUpgrades () {",
          "",
          "[Added Lines]",
          "427:   getAvailableUpgrades() {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "445:     if (this.writeBuffer.length) {",
          "447:       return;",
          "448:     }",
          "",
          "[Removed Lines]",
          "440:   close (discard) {",
          "441:     if ('open' !== this.readyState) return;",
          "443:     this.readyState = 'closing';",
          "446:       this.once('drain', this.closeTransport.bind(this, discard));",
          "",
          "[Added Lines]",
          "448:   close(discard) {",
          "449:     if (\"open\" !== this.readyState) return;",
          "451:     this.readyState = \"closing\";",
          "454:       this.once(\"drain\", this.closeTransport.bind(this, discard));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "460:     if (discard) this.transport.discard();",
          "462:   }",
          "463: }",
          "",
          "[Removed Lines]",
          "459:   closeTransport (discard) {",
          "461:     this.transport.close(this.onClose.bind(this, 'forced close'));",
          "",
          "[Added Lines]",
          "467:   closeTransport(discard) {",
          "469:     this.transport.close(this.onClose.bind(this, \"forced close\"));",
          "",
          "---------------"
        ],
        "lib/transport.js||lib/transport.js": [
          "File: lib/transport.js -> lib/transport.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: const EventEmitter = require('events');",
          "2: const parser = require('engine.io-parser');",
          "3: const debug = require('debug')('engine:transport');",
          "",
          "[Added Lines]",
          "1: const EventEmitter = require(\"events\");",
          "2: const parser = require(\"engine.io-parser\");",
          "3: const debug = require(\"debug\")(\"engine:transport\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: class Transport extends EventEmitter {",
          "",
          "[Removed Lines]",
          "11: function noop () {}",
          "",
          "[Added Lines]",
          "11: function noop() {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "21:     super();",
          "23:     this.discarded = false;",
          "24:   }",
          "",
          "[Removed Lines]",
          "20:   constructor (req) {",
          "22:     this.readyState = 'open';",
          "",
          "[Added Lines]",
          "20:   constructor(req) {",
          "22:     this.readyState = \"open\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "32:     this.discarded = true;",
          "33:   }",
          "",
          "[Removed Lines]",
          "31:   discard () {",
          "",
          "[Added Lines]",
          "31:   discard() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "43:     this.req = req;",
          "44:   }",
          "",
          "[Removed Lines]",
          "41:   onRequest (req) {",
          "42:     debug('setting request');",
          "",
          "[Added Lines]",
          "41:   onRequest(req) {",
          "42:     debug(\"setting request\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "55:     this.doClose(fn || noop);",
          "56:   }",
          "",
          "[Removed Lines]",
          "51:   close (fn) {",
          "52:     if ('closed' === this.readyState || 'closing' === this.readyState) return;",
          "54:     this.readyState = 'closing';",
          "",
          "[Added Lines]",
          "51:   close(fn) {",
          "52:     if (\"closed\" === this.readyState || \"closing\" === this.readyState) return;",
          "54:     this.readyState = \"closing\";",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "67:       const err = new Error(msg);",
          "69:       err.description = desc;",
          "71:     } else {",
          "73:     }",
          "74:   }",
          "",
          "[Removed Lines]",
          "65:   onError (msg, desc) {",
          "66:     if (this.listeners('error').length) {",
          "68:       err.type = 'TransportError';",
          "70:       this.emit('error', err);",
          "72:       debug('ignored transport error %s (%s)', msg, desc);",
          "",
          "[Added Lines]",
          "65:   onError(msg, desc) {",
          "66:     if (this.listeners(\"error\").length) {",
          "68:       err.type = \"TransportError\";",
          "70:       this.emit(\"error\", err);",
          "72:       debug(\"ignored transport error %s (%s)\", msg, desc);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "84:   }",
          "",
          "[Removed Lines]",
          "82:   onPacket (packet) {",
          "83:     this.emit('packet', packet);",
          "",
          "[Added Lines]",
          "82:   onPacket(packet) {",
          "83:     this.emit(\"packet\", packet);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "93:     this.onPacket(parser.decodePacket(data));",
          "94:   }",
          "",
          "[Removed Lines]",
          "92:   onData (data) {",
          "",
          "[Added Lines]",
          "92:   onData(data) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "104:   }",
          "105: }",
          "",
          "[Removed Lines]",
          "101:   onClose () {",
          "102:     this.readyState = 'closed';",
          "103:     this.emit('close');",
          "",
          "[Added Lines]",
          "101:   onClose() {",
          "102:     this.readyState = \"closed\";",
          "103:     this.emit(\"close\");",
          "",
          "---------------"
        ],
        "lib/transports/index.js||lib/transports/index.js": [
          "File: lib/transports/index.js -> lib/transports/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: const XHR = require('./polling-xhr');",
          "2: const JSONP = require('./polling-jsonp');",
          "",
          "[Added Lines]",
          "1: const XHR = require(\"./polling-xhr\");",
          "2: const JSONP = require(\"./polling-jsonp\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: module.exports = exports = {",
          "9:   polling: polling,",
          "11: };",
          "",
          "[Removed Lines]",
          "10:   websocket: require('./websocket')",
          "17: exports.polling.upgradesTo = ['websocket'];",
          "",
          "[Added Lines]",
          "10:   websocket: require(\"./websocket\")",
          "17: exports.polling.upgradesTo = [\"websocket\"];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27:     return new JSONP(req);",
          "28:   } else {",
          "29:     return new XHR(req);",
          "",
          "[Removed Lines]",
          "25: function polling (req) {",
          "26:   if ('string' === typeof req._query.j) {",
          "",
          "[Added Lines]",
          "25: function polling(req) {",
          "26:   if (\"string\" === typeof req._query.j) {",
          "",
          "---------------"
        ],
        "lib/transports/polling-jsonp.js||lib/transports/polling-jsonp.js": [
          "File: lib/transports/polling-jsonp.js -> lib/transports/polling-jsonp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: const rDoubleSlashes = /\\\\\\\\n/g;",
          "4: const rSlashes = /(\\\\)?\\\\n/g;",
          "",
          "[Removed Lines]",
          "1: const Polling = require('./polling');",
          "2: const qs = require('querystring');",
          "",
          "[Added Lines]",
          "1: const Polling = require(\"./polling\");",
          "2: const qs = require(\"querystring\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     super(req);",
          "17:   }",
          "",
          "[Removed Lines]",
          "12:   constructor (req) {",
          "15:     this.head = '___eio[' + (req._query.j || '').replace(/[^0-9]/g, '') + '](';",
          "16:     this.foot = ');';",
          "",
          "[Added Lines]",
          "12:   constructor(req) {",
          "15:     this.head = \"___eio[\" + (req._query.j || \"\").replace(/[^0-9]/g, \"\") + \"](\";",
          "16:     this.foot = \");\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:     data = qs.parse(data).d;",
          "34:       });",
          "36:     }",
          "37:   }",
          "",
          "[Removed Lines]",
          "25:   onData (data) {",
          "29:     if ('string' === typeof data) {",
          "32:       data = data.replace(rSlashes, function (match, slashes) {",
          "33:         return slashes ? match : '\\n';",
          "35:       super.onData(data.replace(rDoubleSlashes, '\\\\n'));",
          "",
          "[Added Lines]",
          "25:   onData(data) {",
          "29:     if (\"string\" === typeof data) {",
          "32:       data = data.replace(rSlashes, function(match, slashes) {",
          "33:         return slashes ? match : \"\\n\";",
          "35:       super.onData(data.replace(rDoubleSlashes, \"\\\\n\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "47:     const js = JSON.stringify(data)",
          "52:     data = this.head + js + this.foot;",
          "",
          "[Removed Lines]",
          "44:   doWrite (data, options, callback) {",
          "48:       .replace(/\\u2028/g, '\\\\u2028')",
          "49:       .replace(/\\u2029/g, '\\\\u2029');",
          "",
          "[Added Lines]",
          "44:   doWrite(data, options, callback) {",
          "48:       .replace(/\\u2028/g, \"\\\\u2028\")",
          "49:       .replace(/\\u2029/g, \"\\\\u2029\");",
          "",
          "---------------"
        ],
        "lib/transports/polling-xhr.js||lib/transports/polling-xhr.js": [
          "File: lib/transports/polling-xhr.js -> lib/transports/polling-xhr.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: class XHR extends Polling {",
          "",
          "[Removed Lines]",
          "1: const Polling = require('./polling');",
          "",
          "[Added Lines]",
          "1: const Polling = require(\"./polling\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:       const res = req.res;",
          "13:       const headers = this.headers(req);",
          "15:       res.writeHead(200, headers);",
          "16:       res.end();",
          "17:     } else {",
          "",
          "[Removed Lines]",
          "10:   onRequest (req) {",
          "11:     if ('OPTIONS' === req.method) {",
          "14:       headers['Access-Control-Allow-Headers'] = 'Content-Type';",
          "",
          "[Added Lines]",
          "10:   onRequest(req) {",
          "11:     if (\"OPTIONS\" === req.method) {",
          "14:       headers[\"Access-Control-Allow-Headers\"] = \"Content-Type\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30:     headers = headers || {};",
          "32:     if (req.headers.origin) {",
          "35:     } else {",
          "37:     }",
          "39:     return super.headers(req, headers);",
          "",
          "[Removed Lines]",
          "29:   headers (req, headers) {",
          "33:       headers['Access-Control-Allow-Credentials'] = 'true';",
          "34:       headers['Access-Control-Allow-Origin'] = req.headers.origin;",
          "36:       headers['Access-Control-Allow-Origin'] = '*';",
          "",
          "[Added Lines]",
          "29:   headers(req, headers) {",
          "33:       headers[\"Access-Control-Allow-Credentials\"] = \"true\";",
          "34:       headers[\"Access-Control-Allow-Origin\"] = req.headers.origin;",
          "36:       headers[\"Access-Control-Allow-Origin\"] = \"*\";",
          "",
          "---------------"
        ],
        "lib/transports/polling.js||lib/transports/polling.js": [
          "File: lib/transports/polling.js -> lib/transports/polling.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const compressionMethods = {",
          "8:   gzip: zlib.createGzip,",
          "",
          "[Removed Lines]",
          "1: const Transport = require('../transport');",
          "2: const parser = require('engine.io-parser');",
          "3: const zlib = require('zlib');",
          "4: const accepts = require('accepts');",
          "5: const debug = require('debug')('engine:polling');",
          "",
          "[Added Lines]",
          "1: const Transport = require(\"../transport\");",
          "2: const parser = require(\"engine.io-parser\");",
          "3: const zlib = require(\"zlib\");",
          "4: const accepts = require(\"accepts\");",
          "5: const debug = require(\"debug\")(\"engine:polling\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:     super(req);",
          "21:     this.closeTimeout = 30 * 1000;",
          "",
          "[Removed Lines]",
          "18:   constructor (req) {",
          "",
          "[Added Lines]",
          "18:   constructor(req) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:   }",
          "",
          "[Removed Lines]",
          "31:   get name () {",
          "32:     return 'polling';",
          "",
          "[Added Lines]",
          "31:   get name() {",
          "32:     return \"polling\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "42:     const res = req.res;",
          "45:       this.onPollRequest(req, res);",
          "47:       this.onDataRequest(req, res);",
          "48:     } else {",
          "49:       res.writeHead(500);",
          "",
          "[Removed Lines]",
          "41:   onRequest (req) {",
          "44:     if ('GET' === req.method) {",
          "46:     } else if ('POST' === req.method) {",
          "",
          "[Added Lines]",
          "41:   onRequest(req) {",
          "44:     if (\"GET\" === req.method) {",
          "46:     } else if (\"POST\" === req.method) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "60:     if (this.req) {",
          "64:       res.writeHead(500);",
          "65:       res.end();",
          "66:       return;",
          "67:     }",
          "71:     this.req = req;",
          "72:     this.res = res;",
          "74:     const self = this;",
          "78:     }",
          "82:       self.req = self.res = null;",
          "83:     }",
          "85:     req.cleanup = cleanup;",
          "88:     this.writable = true;",
          "92:     if (this.writable && this.shouldClose) {",
          "95:     }",
          "96:   }",
          "",
          "[Removed Lines]",
          "59:   onPollRequest (req, res) {",
          "61:       debug('request overlap');",
          "63:       this.onError('overlap from client');",
          "69:     debug('setting request');",
          "76:     function onClose () {",
          "77:       self.onError('poll connection closed prematurely');",
          "80:     function cleanup () {",
          "81:       req.removeListener('close', onClose);",
          "86:     req.on('close', onClose);",
          "89:     this.emit('drain');",
          "93:       debug('triggering empty send to append close packet');",
          "94:       this.send([{ type: 'noop' }]);",
          "",
          "[Added Lines]",
          "59:   onPollRequest(req, res) {",
          "61:       debug(\"request overlap\");",
          "63:       this.onError(\"overlap from client\");",
          "69:     debug(\"setting request\");",
          "76:     function onClose() {",
          "77:       self.onError(\"poll connection closed prematurely\");",
          "80:     function cleanup() {",
          "81:       req.removeListener(\"close\", onClose);",
          "86:     req.on(\"close\", onClose);",
          "89:     this.emit(\"drain\");",
          "93:       debug(\"triggering empty send to append close packet\");",
          "94:       this.send([{ type: \"noop\" }]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "104:     if (this.dataReq) {",
          "107:       res.writeHead(500);",
          "108:       res.end();",
          "109:       return;",
          "110:     }",
          "114:     this.dataReq = req;",
          "115:     this.dataRes = res;",
          "118:     const self = this;",
          "124:       self.dataReq = self.dataRes = chunks = null;",
          "125:     }",
          "128:       cleanup();",
          "130:     }",
          "133:       let contentLength;",
          "134:       if (isBinary) {",
          "135:         chunks = Buffer.concat([chunks, data]);",
          "",
          "[Removed Lines]",
          "103:   onDataRequest (req, res) {",
          "106:       this.onError('data request overlap from client');",
          "112:     const isBinary = 'application/octet-stream' === req.headers['content-type'];",
          "117:     let chunks = isBinary ? Buffer.concat([]) : '';",
          "120:     function cleanup () {",
          "121:       req.removeListener('data', onData);",
          "122:       req.removeListener('end', onEnd);",
          "123:       req.removeListener('close', onClose);",
          "127:     function onClose () {",
          "129:       self.onError('data request connection closed prematurely');",
          "132:     function onData (data) {",
          "",
          "[Added Lines]",
          "103:   onDataRequest(req, res) {",
          "106:       this.onError(\"data request overlap from client\");",
          "112:     const isBinary = \"application/octet-stream\" === req.headers[\"content-type\"];",
          "117:     let chunks = isBinary ? Buffer.concat([]) : \"\";",
          "120:     function cleanup() {",
          "121:       req.removeListener(\"data\", onData);",
          "122:       req.removeListener(\"end\", onEnd);",
          "123:       req.removeListener(\"close\", onClose);",
          "127:     function onClose() {",
          "129:       self.onError(\"data request connection closed prematurely\");",
          "132:     function onData(data) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "140:       }",
          "142:       if (contentLength > self.maxHttpBufferSize) {",
          "144:         req.connection.destroy();",
          "145:       }",
          "146:     }",
          "149:       self.onData(chunks);",
          "151:       const headers = {",
          "156:       };",
          "158:       res.writeHead(200, self.headers(req, headers));",
          "160:       cleanup();",
          "161:     }",
          "167:   }",
          "",
          "[Removed Lines]",
          "143:         chunks = isBinary ? Buffer.concat([]) : '';",
          "148:     function onEnd () {",
          "154:         'Content-Type': 'text/html',",
          "155:         'Content-Length': 2",
          "159:       res.end('ok');",
          "163:     req.on('close', onClose);",
          "164:     if (!isBinary) req.setEncoding('utf8');",
          "165:     req.on('data', onData);",
          "166:     req.on('end', onEnd);",
          "",
          "[Added Lines]",
          "143:         chunks = isBinary ? Buffer.concat([]) : \"\";",
          "148:     function onEnd() {",
          "154:         \"Content-Type\": \"text/html\",",
          "155:         \"Content-Length\": 2",
          "159:       res.end(\"ok\");",
          "163:     req.on(\"close\", onClose);",
          "164:     if (!isBinary) req.setEncoding(\"utf8\");",
          "165:     req.on(\"data\", onData);",
          "166:     req.on(\"end\", onEnd);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "176:     debug('received \"%s\"', data);",
          "177:     const self = this;",
          "181:         self.onClose();",
          "182:         return false;",
          "183:       }",
          "",
          "[Removed Lines]",
          "175:   onData (data) {",
          "178:     const callback = function (packet) {",
          "179:       if ('close' === packet.type) {",
          "180:         debug('got xhr close packet');",
          "",
          "[Added Lines]",
          "175:   onData(data) {",
          "178:     const callback = function(packet) {",
          "179:       if (\"close\" === packet.type) {",
          "180:         debug(\"got xhr close packet\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "197:     if (this.writable) {",
          "200:     }",
          "201:     super.onClose();",
          "202:   }",
          "",
          "[Removed Lines]",
          "196:   onClose () {",
          "199:       this.send([{ type: 'noop' }]);",
          "",
          "[Added Lines]",
          "196:   onClose() {",
          "199:       this.send([{ type: \"noop\" }]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "211:     this.writable = false;",
          "213:     if (this.shouldClose) {",
          "216:       this.shouldClose();",
          "217:       this.shouldClose = null;",
          "218:     }",
          "220:     const self = this;",
          "223:         return packet.options && packet.options.compress;",
          "224:       });",
          "225:       self.write(data, { compress: compress });",
          "",
          "[Removed Lines]",
          "210:   send (packets) {",
          "214:       debug('appending close packet to payload');",
          "215:       packets.push({ type: 'close' });",
          "221:     parser.encodePayload(packets, this.supportsBinary, function (data) {",
          "222:       const compress = packets.some(function (packet) {",
          "",
          "[Added Lines]",
          "210:   send(packets) {",
          "214:       debug(\"appending close packet to payload\");",
          "215:       packets.push({ type: \"close\" });",
          "221:     parser.encodePayload(packets, this.supportsBinary, function(data) {",
          "222:       const compress = packets.some(function(packet) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "237:     debug('writing \"%s\"', data);",
          "238:     const self = this;",
          "240:       self.req.cleanup();",
          "241:     });",
          "242:   }",
          "",
          "[Removed Lines]",
          "236:   write (data, options) {",
          "239:     this.doWrite(data, options, function () {",
          "",
          "[Added Lines]",
          "236:   write(data, options) {",
          "239:     this.doWrite(data, options, function() {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "250:     const self = this;",
          "254:     const contentType = isString",
          "258:     const headers = {",
          "260:     };",
          "262:     if (!this.httpCompression || !options.compress) {",
          "",
          "[Removed Lines]",
          "249:   doWrite (data, options, callback) {",
          "253:     const isString = typeof data === 'string';",
          "255:       ? 'text/plain; charset=UTF-8'",
          "256:       : 'application/octet-stream';",
          "259:       'Content-Type': contentType",
          "",
          "[Added Lines]",
          "249:   doWrite(data, options, callback) {",
          "253:     const isString = typeof data === \"string\";",
          "255:       ? \"text/plain; charset=UTF-8\"",
          "256:       : \"application/octet-stream\";",
          "259:       \"Content-Type\": contentType",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "270:       return;",
          "271:     }",
          "274:     if (!encoding) {",
          "275:       respond(data);",
          "276:       return;",
          "277:     }",
          "280:       if (err) {",
          "281:         self.res.writeHead(500);",
          "282:         self.res.end();",
          "",
          "[Removed Lines]",
          "273:     const encoding = accepts(this.req).encodings(['gzip', 'deflate']);",
          "279:     this.compress(data, encoding, function (err, data) {",
          "",
          "[Added Lines]",
          "273:     const encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);",
          "279:     this.compress(data, encoding, function(err, data) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "284:         return;",
          "285:       }",
          "288:       respond(data);",
          "289:     });",
          "293:       self.res.writeHead(200, self.headers(self.req, headers));",
          "294:       self.res.end(data);",
          "295:       callback();",
          "",
          "[Removed Lines]",
          "287:       headers['Content-Encoding'] = encoding;",
          "291:     function respond (data) {",
          "292:       headers['Content-Length'] = 'string' === typeof data ? Buffer.byteLength(data) : data.length;",
          "",
          "[Added Lines]",
          "287:       headers[\"Content-Encoding\"] = encoding;",
          "291:     function respond(data) {",
          "292:       headers[\"Content-Length\"] =",
          "293:         \"string\" === typeof data ? Buffer.byteLength(data) : data.length;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "307:     const buffers = [];",
          "308:     let nread = 0;",
          "310:     compressionMethods[encoding](this.httpCompression)",
          "313:         buffers.push(chunk);",
          "314:         nread += chunk.length;",
          "315:       })",
          "317:         callback(null, Buffer.concat(buffers, nread));",
          "318:       })",
          "319:       .end(data);",
          "",
          "[Removed Lines]",
          "304:   compress (data, encoding, callback) {",
          "305:     debug('compressing');",
          "311:       .on('error', callback)",
          "312:       .on('data', function (chunk) {",
          "316:       .on('end', function () {",
          "",
          "[Added Lines]",
          "305:   compress(data, encoding, callback) {",
          "306:     debug(\"compressing\");",
          "312:       .on(\"error\", callback)",
          "313:       .on(\"data\", function(chunk) {",
          "317:       .on(\"end\", function() {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "330:     const self = this;",
          "331:     let closeTimeoutTimer;",
          "333:     if (this.dataReq) {",
          "335:       this.dataReq.destroy();",
          "336:     }",
          "338:     if (this.writable) {",
          "341:       onClose();",
          "342:     } else if (this.discarded) {",
          "344:       onClose();",
          "345:     } else {",
          "347:       this.shouldClose = onClose;",
          "348:       closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);",
          "349:     }",
          "352:       clearTimeout(closeTimeoutTimer);",
          "353:       fn();",
          "354:       self.onClose();",
          "",
          "[Removed Lines]",
          "327:   doClose (fn) {",
          "328:     debug('closing');",
          "334:       debug('aborting ongoing data request');",
          "339:       debug('transport writable - closing right away');",
          "340:       this.send([{ type: 'close' }]);",
          "343:       debug('transport discarded - closing right away');",
          "346:       debug('transport not writable - buffering orderly close');",
          "351:     function onClose () {",
          "",
          "[Added Lines]",
          "328:   doClose(fn) {",
          "329:     debug(\"closing\");",
          "335:       debug(\"aborting ongoing data request\");",
          "340:       debug(\"transport writable - closing right away\");",
          "341:       this.send([{ type: \"close\" }]);",
          "344:       debug(\"transport discarded - closing right away\");",
          "347:       debug(\"transport not writable - buffering orderly close\");",
          "352:     function onClose() {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "366:     headers = headers || {};",
          "373:     }",
          "376:     return headers;",
          "377:   }",
          "378: }",
          "",
          "[Removed Lines]",
          "365:   headers (req, headers) {",
          "370:     const ua = req.headers['user-agent'];",
          "371:     if (ua && (~ua.indexOf(';MSIE') || ~ua.indexOf('Trident/'))) {",
          "372:       headers['X-XSS-Protection'] = '0';",
          "375:     this.emit('headers', headers);",
          "",
          "[Added Lines]",
          "366:   headers(req, headers) {",
          "371:     const ua = req.headers[\"user-agent\"];",
          "372:     if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {",
          "373:       headers[\"X-XSS-Protection\"] = \"0\";",
          "376:     this.emit(\"headers\", headers);",
          "",
          "---------------"
        ],
        "lib/transports/websocket.js||lib/transports/websocket.js": [
          "File: lib/transports/websocket.js -> lib/transports/websocket.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: class WebSocket extends Transport {",
          "",
          "[Removed Lines]",
          "1: const Transport = require('../transport');",
          "2: const parser = require('engine.io-parser');",
          "3: const debug = require('debug')('engine:ws');",
          "",
          "[Added Lines]",
          "1: const Transport = require(\"../transport\");",
          "2: const parser = require(\"engine.io-parser\");",
          "3: const debug = require(\"debug\")(\"engine:ws\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     super(req);",
          "14:     this.socket = req.websocket;",
          "20:     });",
          "21:     this.writable = true;",
          "22:     this.perMessageDeflate = null;",
          "",
          "[Removed Lines]",
          "12:   constructor (req) {",
          "15:     this.socket.on('message', this.onData.bind(this));",
          "16:     this.socket.once('close', this.onClose.bind(this));",
          "17:     this.socket.on('error', this.onError.bind(this));",
          "18:     this.socket.on('headers', (headers) => {",
          "19:       this.emit('headers', headers);",
          "",
          "[Added Lines]",
          "12:   constructor(req) {",
          "15:     this.socket.on(\"message\", this.onData.bind(this));",
          "16:     this.socket.once(\"close\", this.onClose.bind(this));",
          "17:     this.socket.on(\"error\", this.onError.bind(this));",
          "18:     this.socket.on(\"headers\", headers => {",
          "19:       this.emit(\"headers\", headers);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:   }",
          "",
          "[Removed Lines]",
          "30:   get name () {",
          "31:     return 'websocket';",
          "",
          "[Added Lines]",
          "30:   get name() {",
          "31:     return \"websocket\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "40:     return true;",
          "41:   }",
          "",
          "[Removed Lines]",
          "39:   get handlesUpgrades () {",
          "",
          "[Added Lines]",
          "39:   get handlesUpgrades() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "49:     return true;",
          "50:   }",
          "",
          "[Removed Lines]",
          "48:   get supportsFraming () {",
          "",
          "[Added Lines]",
          "48:   get supportsFraming() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "59:     debug('received \"%s\"', data);",
          "60:     super.onData(data);",
          "61:   }",
          "",
          "[Removed Lines]",
          "58:   onData (data) {",
          "",
          "[Added Lines]",
          "58:   onData(data) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "70:     var self = this;",
          "72:     for (var i = 0; i < packets.length; i++) {",
          "",
          "[Removed Lines]",
          "69:   send (packets) {",
          "",
          "[Added Lines]",
          "69:   send(packets) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "74:       parser.encodePacket(packet, self.supportsBinary, send);",
          "75:     }",
          "78:       debug('writing \"%s\"', data);",
          "",
          "[Removed Lines]",
          "77:     function send (data) {",
          "",
          "[Added Lines]",
          "77:     function send(data) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "84:       }",
          "86:       if (self.perMessageDeflate) {",
          "88:         if (len < self.perMessageDeflate.threshold) {",
          "89:           opts.compress = false;",
          "90:         }",
          "",
          "[Removed Lines]",
          "87:         var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;",
          "",
          "[Added Lines]",
          "87:         var len =",
          "88:           \"string\" === typeof data ? Buffer.byteLength(data) : data.length;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "94:       self.socket.send(data, opts, onEnd);",
          "95:     }",
          "99:       self.writable = true;",
          "101:     }",
          "102:   }",
          "",
          "[Removed Lines]",
          "97:     function onEnd (err) {",
          "98:       if (err) return self.onError('write error', err.stack);",
          "100:       self.emit('drain');",
          "",
          "[Added Lines]",
          "98:     function onEnd(err) {",
          "99:       if (err) return self.onError(\"write error\", err.stack);",
          "101:       self.emit(\"drain\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "111:     this.socket.close();",
          "112:     fn && fn();",
          "113:   }",
          "",
          "[Removed Lines]",
          "109:   doClose (fn) {",
          "110:     debug('closing');",
          "",
          "[Added Lines]",
          "110:   doClose(fn) {",
          "111:     debug(\"closing\");",
          "",
          "---------------"
        ],
        "test/common.js||test/common.js": [
          "File: test/common.js -> test/common.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     fn = opts;",
          "15:     opts = {};",
          "16:   }",
          "19:     fn(e.httpServer.address().port);",
          "20:   });",
          "",
          "[Removed Lines]",
          "6: var eio = require('..');",
          "12: exports.listen = function (opts, fn) {",
          "13:   if ('function' === typeof opts) {",
          "18:   var e = eio.listen(0, opts, function () {",
          "",
          "[Added Lines]",
          "5: var eio = require(\"..\");",
          "11: exports.listen = function(opts, fn) {",
          "12:   if (\"function\" === typeof opts) {",
          "17:   var e = eio.listen(0, opts, function() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "29: require('s').extend();",
          "",
          "[Added Lines]",
          "28: require(\"s\").extend();",
          "",
          "---------------"
        ],
        "test/engine.io.js||test/engine.io.js": [
          "File: test/engine.io.js -> test/engine.io.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:   });",
          "25:   });",
          "29:       var engine = eio();",
          "30:       expect(engine).to.be.an(eio.Server);",
          "31:       expect(engine.ws).to.be.ok();",
          "32:     });",
          "33:   });",
          "39:           expect(err).to.be.an(Error);",
          "40:           expect(res.status).to.be(501);",
          "41:           done();",
          "",
          "[Removed Lines]",
          "6: var net = require('net');",
          "7: var eio = require('..');",
          "8: var listen = require('./common').listen;",
          "9: var expect = require('expect.js');",
          "10: var request = require('superagent');",
          "11: var http = require('http');",
          "17: describe('engine', function () {",
          "18:   it('should expose protocol number', function () {",
          "19:     expect(eio.protocol).to.be.a('number');",
          "22:   it('should be the same version as client', function () {",
          "23:     var version = require('../package').version;",
          "24:     expect(version).to.be(require('engine.io-client/package').version);",
          "27:   describe('engine()', function () {",
          "28:     it('should create a Server when require called with no arguments', function () {",
          "35:   describe('listen', function () {",
          "36:     it('should open a http server that returns 501', function (done) {",
          "37:       listen(function (port) {",
          "38:         request.get('http://localhost:%d/'.s(port), function (err, res) {",
          "",
          "[Added Lines]",
          "5: var net = require(\"net\");",
          "6: var eio = require(\"..\");",
          "7: var listen = require(\"./common\").listen;",
          "8: var expect = require(\"expect.js\");",
          "9: var request = require(\"superagent\");",
          "10: var http = require(\"http\");",
          "16: describe(\"engine\", function() {",
          "17:   it(\"should expose protocol number\", function() {",
          "18:     expect(eio.protocol).to.be.a(\"number\");",
          "21:   it(\"should be the same version as client\", function() {",
          "22:     var version = require(\"../package\").version;",
          "23:     expect(version).to.be(require(\"engine.io-client/package\").version);",
          "26:   describe(\"engine()\", function() {",
          "27:     it(\"should create a Server when require called with no arguments\", function() {",
          "34:   describe(\"listen\", function() {",
          "35:     it(\"should open a http server that returns 501\", function(done) {",
          "36:       listen(function(port) {",
          "37:         request.get(\"http://localhost:%d/\".s(port), function(err, res) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     });",
          "45:   });",
          "49:       var server = http.createServer();",
          "50:       var engine = eio(server);",
          "52:       expect(engine).to.be.an(eio.Server);",
          "53:     });",
          "56:       var server = http.createServer();",
          "57:       var engine = eio.attach(server);",
          "59:       expect(engine).to.be.an(eio.Server);",
          "60:     });",
          "63:       var server = http.createServer();",
          "64:       eio.attach(server);",
          "69:           expect(err).to.be.an(Error);",
          "70:           expect(res.status).to.be(400);",
          "71:           expect(res.body.code).to.be(0);",
          "74:           server.close();",
          "75:         });",
          "76:       });",
          "77:     });",
          "80:       var server = http.createServer();",
          "81:       eio.attach(server, { destroyUpgradeTimeout: 50 });",
          "84:         var client = net.createConnection(server.address().port);",
          "95:         }, 100);",
          "98:           clearTimeout(check);",
          "99:           done();",
          "100:         });",
          "101:       });",
          "102:     });",
          "105:       var server = http.createServer();",
          "106:       eio.attach(server, { destroyUpgrade: false, destroyUpgradeTimeout: 50 });",
          "109:         var client = net.createConnection(server.address().port);",
          "121:             done();",
          "122:           }, 100);",
          "126:           }",
          "129:         });",
          "130:       });",
          "131:     });",
          "134:       var server = http.createServer();",
          "135:       eio.attach(server, { destroyUpgradeTimeout: 200 });",
          "138:         var client = net.createConnection(server.address().port);",
          "153:           }, 100);",
          "156:             done();",
          "157:           }",
          "160:         });",
          "161:       });",
          "162:     });",
          "165:       var server = http.createServer();",
          "166:       eio.attach(server, { destroyUpgradeTimeout: 100 });",
          "173:           socket.end();",
          "174:         });",
          "175:       });",
          "178:         var client = net.createConnection(server.address().port);",
          "192:           }, 200);",
          "198:         });",
          "199:       });",
          "200:     });",
          "203:       var listeners = 0;",
          "205:         expect(req && res).to.be.ok();",
          "206:         listeners++;",
          "207:       });",
          "210:         expect(req && res).to.be.ok();",
          "211:         res.writeHead(200);",
          "213:         listeners++;",
          "214:       });",
          "216:       eio.attach(server);",
          "219:         var port = server.address().port;",
          "221:           expect(err).to.be.an(Error);",
          "222:           expect(res.status).to.be(400);",
          "223:           expect(res.body.code).to.be(0);",
          "226:             expect(err).to.be(null);",
          "227:             expect(res.status).to.be(200);",
          "228:             expect(listeners).to.eql(2);",
          "230:             server.close();",
          "231:           });",
          "232:         });",
          "",
          "[Removed Lines]",
          "47:   describe('attach()', function () {",
          "48:     it('should work from require()', function () {",
          "55:     it('should return an engine.Server', function () {",
          "62:     it('should attach engine to an http server', function (done) {",
          "66:       server.listen(function () {",
          "67:         var uri = 'http://localhost:%d/engine.io/default/'.s(server.address().port);",
          "68:         request.get(uri, function (err, res) {",
          "72:           expect(res.body.message).to.be('Transport unknown');",
          "73:           server.once('close', done);",
          "79:     it('should destroy upgrades not handled by engine', function (done) {",
          "83:       server.listen(function () {",
          "85:         client.setEncoding('ascii');",
          "86:         client.write([",
          "87:           'GET / HTTP/1.1',",
          "88:           'Connection: Upgrade',",
          "89:           'Upgrade: IRC/6.9',",
          "90:           '', ''",
          "91:         ].join('\\r\\n'));",
          "93:         var check = setTimeout(function () {",
          "94:           done(new Error('Client should have ended'));",
          "97:         client.on('end', function () {",
          "104:     it('should not destroy unhandled upgrades with destroyUpgrade:false', function (done) {",
          "108:       server.listen(function () {",
          "110:         client.on('connect', function () {",
          "111:           client.setEncoding('ascii');",
          "112:           client.write([",
          "113:             'GET / HTTP/1.1',",
          "114:             'Connection: Upgrade',",
          "115:             'Upgrade: IRC/6.9',",
          "116:             '', ''",
          "117:           ].join('\\r\\n'));",
          "119:           setTimeout(function () {",
          "120:             client.removeListener('end', onEnd);",
          "124:           function onEnd () {",
          "125:             done(new Error('Client should not end'));",
          "128:           client.on('end', onEnd);",
          "133:     it('should destroy unhandled upgrades with after a timeout', function (done) {",
          "137:       server.listen(function () {",
          "139:         client.on('connect', function () {",
          "140:           client.setEncoding('ascii');",
          "141:           client.write([",
          "142:             'GET / HTTP/1.1',",
          "143:             'Connection: Upgrade',",
          "144:             'Upgrade: IRC/6.9',",
          "145:             '', ''",
          "146:           ].join('\\r\\n'));",
          "151:           setTimeout(function () {",
          "152:             client.write('foo');",
          "155:           function onEnd () {",
          "159:           client.on('end', onEnd);",
          "164:     it('should not destroy handled upgrades with after a timeout', function (done) {",
          "169:       server.on('upgrade', function (req, socket) {",
          "170:         socket.write('foo');",
          "171:         socket.on('data', function (chunk) {",
          "172:           expect(chunk.toString()).to.be('foo');",
          "177:       server.listen(function () {",
          "180:         client.on('connect', function () {",
          "181:           client.setEncoding('ascii');",
          "182:           client.write([",
          "183:             'GET / HTTP/1.1',",
          "184:             'Connection: Upgrade',",
          "185:             'Upgrade: IRC/6.9',",
          "186:             '', ''",
          "187:           ].join('\\r\\n'));",
          "190:           setTimeout(function () {",
          "191:             client.write('foo');",
          "194:           client.on('data', function (data) {",
          "195:           });",
          "197:           client.on('end', done);",
          "202:     it('should preserve original request listeners', function (done) {",
          "204:       var server = http.createServer(function (req, res) {",
          "209:       server.on('request', function (req, res) {",
          "212:         res.end('');",
          "218:       server.listen(function () {",
          "220:         request.get('http://localhost:%d/engine.io/default/'.s(port), function (err, res) {",
          "224:           expect(res.body.message).to.be('Transport unknown');",
          "225:           request.get('http://localhost:%d/test'.s(port), function (err, res) {",
          "229:             server.once('close', done);",
          "",
          "[Added Lines]",
          "46:   describe(\"attach()\", function() {",
          "47:     it(\"should work from require()\", function() {",
          "54:     it(\"should return an engine.Server\", function() {",
          "61:     it(\"should attach engine to an http server\", function(done) {",
          "65:       server.listen(function() {",
          "66:         var uri = \"http://localhost:%d/engine.io/default/\".s(",
          "67:           server.address().port",
          "68:         );",
          "69:         request.get(uri, function(err, res) {",
          "73:           expect(res.body.message).to.be(\"Transport unknown\");",
          "74:           server.once(\"close\", done);",
          "80:     it(\"should destroy upgrades not handled by engine\", function(done) {",
          "84:       server.listen(function() {",
          "86:         client.setEncoding(\"ascii\");",
          "87:         client.write(",
          "88:           [",
          "89:             \"GET / HTTP/1.1\",",
          "90:             \"Connection: Upgrade\",",
          "91:             \"Upgrade: IRC/6.9\",",
          "92:             \"\",",
          "93:             \"\"",
          "94:           ].join(\"\\r\\n\")",
          "95:         );",
          "97:         var check = setTimeout(function() {",
          "98:           done(new Error(\"Client should have ended\"));",
          "101:         client.on(\"end\", function() {",
          "108:     it(\"should not destroy unhandled upgrades with destroyUpgrade:false\", function(done) {",
          "112:       server.listen(function() {",
          "114:         client.on(\"connect\", function() {",
          "115:           client.setEncoding(\"ascii\");",
          "116:           client.write(",
          "117:             [",
          "118:               \"GET / HTTP/1.1\",",
          "119:               \"Connection: Upgrade\",",
          "120:               \"Upgrade: IRC/6.9\",",
          "121:               \"\",",
          "122:               \"\"",
          "123:             ].join(\"\\r\\n\")",
          "124:           );",
          "126:           setTimeout(function() {",
          "127:             client.removeListener(\"end\", onEnd);",
          "131:           function onEnd() {",
          "132:             done(new Error(\"Client should not end\"));",
          "135:           client.on(\"end\", onEnd);",
          "140:     it(\"should destroy unhandled upgrades with after a timeout\", function(done) {",
          "144:       server.listen(function() {",
          "146:         client.on(\"connect\", function() {",
          "147:           client.setEncoding(\"ascii\");",
          "148:           client.write(",
          "149:             [",
          "150:               \"GET / HTTP/1.1\",",
          "151:               \"Connection: Upgrade\",",
          "152:               \"Upgrade: IRC/6.9\",",
          "153:               \"\",",
          "154:               \"\"",
          "155:             ].join(\"\\r\\n\")",
          "156:           );",
          "161:           setTimeout(function() {",
          "162:             client.write(\"foo\");",
          "165:           function onEnd() {",
          "169:           client.on(\"end\", onEnd);",
          "174:     it(\"should not destroy handled upgrades with after a timeout\", function(done) {",
          "179:       server.on(\"upgrade\", function(req, socket) {",
          "180:         socket.write(\"foo\");",
          "181:         socket.on(\"data\", function(chunk) {",
          "182:           expect(chunk.toString()).to.be(\"foo\");",
          "187:       server.listen(function() {",
          "190:         client.on(\"connect\", function() {",
          "191:           client.setEncoding(\"ascii\");",
          "192:           client.write(",
          "193:             [",
          "194:               \"GET / HTTP/1.1\",",
          "195:               \"Connection: Upgrade\",",
          "196:               \"Upgrade: IRC/6.9\",",
          "197:               \"\",",
          "198:               \"\"",
          "199:             ].join(\"\\r\\n\")",
          "200:           );",
          "203:           setTimeout(function() {",
          "204:             client.write(\"foo\");",
          "207:           client.on(\"data\", function(data) {});",
          "209:           client.on(\"end\", done);",
          "214:     it(\"should preserve original request listeners\", function(done) {",
          "216:       var server = http.createServer(function(req, res) {",
          "221:       server.on(\"request\", function(req, res) {",
          "224:         res.end(\"\");",
          "230:       server.listen(function() {",
          "232:         request.get(\"http://localhost:%d/engine.io/default/\".s(port), function(",
          "233:           err,",
          "234:           res",
          "235:         ) {",
          "239:           expect(res.body.message).to.be(\"Transport unknown\");",
          "240:           request.get(\"http://localhost:%d/test\".s(port), function(err, res) {",
          "244:             server.once(\"close\", done);",
          "",
          "---------------"
        ],
        "test/fixtures/server-close-upgraded.js||test/fixtures/server-close-upgraded.js": [
          "File: test/fixtures/server-close-upgraded.js -> test/fixtures/server-close-upgraded.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     engine.httpServer.close();",
          "8:     engine.close();",
          "9:   });",
          "",
          "[Removed Lines]",
          "1: var eioc = require('engine.io-client');",
          "2: var listen = require('../common').listen;",
          "4: var engine = listen(function (port) {",
          "5:   var socket = new eioc.Socket('ws://localhost:' + port);",
          "6:   socket.on('upgrade', function () {",
          "",
          "[Added Lines]",
          "1: var eioc = require(\"engine.io-client\");",
          "2: var listen = require(\"../common\").listen;",
          "4: var engine = listen(function(port) {",
          "5:   var socket = new eioc.Socket(\"ws://localhost:\" + port);",
          "6:   socket.on(\"upgrade\", function() {",
          "",
          "---------------"
        ],
        "test/fixtures/server-close-upgrading.js||test/fixtures/server-close-upgrading.js": [
          "File: test/fixtures/server-close-upgrading.js -> test/fixtures/server-close-upgrading.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     engine.httpServer.close();",
          "8:     engine.close();",
          "9:   });",
          "",
          "[Removed Lines]",
          "1: var eioc = require('engine.io-client');",
          "2: var listen = require('../common').listen;",
          "4: var engine = listen(function (port) {",
          "5:   var socket = new eioc.Socket('ws://localhost:' + port);",
          "6:   socket.on('upgrading', function () {",
          "",
          "[Added Lines]",
          "1: var eioc = require(\"engine.io-client\");",
          "2: var listen = require(\"../common\").listen;",
          "4: var engine = listen(function(port) {",
          "5:   var socket = new eioc.Socket(\"ws://localhost:\" + port);",
          "6:   socket.on(\"upgrading\", function() {",
          "",
          "---------------"
        ],
        "test/fixtures/server-close.js||test/fixtures/server-close.js": [
          "File: test/fixtures/server-close.js -> test/fixtures/server-close.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     engine.httpServer.close();",
          "8:     engine.close();",
          "9:   });",
          "",
          "[Removed Lines]",
          "1: var eioc = require('engine.io-client');",
          "2: var listen = require('../common').listen;",
          "4: var engine = listen(function (port) {",
          "5:   var socket = new eioc.Socket('ws://localhost:' + port);",
          "6:   socket.on('open', function () {",
          "",
          "[Added Lines]",
          "1: var eioc = require(\"engine.io-client\");",
          "2: var listen = require(\"../common\").listen;",
          "4: var engine = listen(function(port) {",
          "5:   var socket = new eioc.Socket(\"ws://localhost:\" + port);",
          "6:   socket.on(\"open\", function() {",
          "",
          "---------------"
        ],
        "test/jsonp.js||test/jsonp.js": [
          "File: test/jsonp.js -> test/jsonp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:       body: {",
          "18:       }",
          "19:     };",
          "22:       var self = this;",
          "25:         var script = {};",
          "28:           return document.body;",
          "29:         });",
          "33:             expect(err).to.be(null);",
          "34:             eval(res.text); // eslint-disable-line no-eval",
          "35:           });",
          "36:         });",
          "37:         return script;",
          "39:         var form = {",
          "40:           style: {},",
          "47:             request",
          "48:               .post(this.action)",
          "50:               .send({ d: self.areaValue })",
          "52:           }",
          "53:         };",
          "54:         return form;",
          "56:         var textarea = {};",
          "60:           self.areaValue = data;",
          "61:         });",
          "62:         return textarea;",
          "64:         var iframe = {};",
          "66:           if (iframe.onload) iframe.onload();",
          "67:         }, 0);",
          "",
          "[Removed Lines]",
          "6: var eioc = require('engine.io-client');",
          "7: var listen = require('./common').listen;",
          "8: var expect = require('expect.js');",
          "9: var request = require('superagent');",
          "11: describe('JSONP', function () {",
          "12:   before(function () {",
          "14:     document = { // eslint-disable-line no-global-assign",
          "16:         appendChild: function () {},",
          "17:         removeChild: function () {}",
          "21:     document.createElement = function (name) {",
          "24:       if ('script' === name) {",
          "27:         script.__defineGetter__('parentNode', function () {",
          "31:         script.__defineSetter__('src', function (uri) {",
          "32:           request.get(uri).end(function (err, res) {",
          "38:       } else if ('form' === name) {",
          "41:           action: '',",
          "42:           parentNode: { removeChild: function () {} },",
          "43:           removeChild: function () {},",
          "44:           setAttribute: function () {},",
          "45:           appendChild: function () {},",
          "46:           submit: function () {",
          "49:               .type('form')",
          "51:               .end(function () {});",
          "55:       } else if ('textarea' === name) {",
          "59:         textarea.__defineSetter__('value', function (data) {",
          "63:       } else if (~name.indexOf('iframe')) {",
          "65:         setTimeout(function () {",
          "",
          "[Added Lines]",
          "5: var eioc = require(\"engine.io-client\");",
          "6: var listen = require(\"./common\").listen;",
          "7: var expect = require(\"expect.js\");",
          "8: var request = require(\"superagent\");",
          "10: describe(\"JSONP\", function() {",
          "11:   before(function() {",
          "13:     document = {",
          "16:         appendChild: function() {},",
          "17:         removeChild: function() {}",
          "21:     document.createElement = function(name) {",
          "24:       if (\"script\" === name) {",
          "27:         script.__defineGetter__(\"parentNode\", function() {",
          "31:         script.__defineSetter__(\"src\", function(uri) {",
          "32:           request.get(uri).end(function(err, res) {",
          "38:       } else if (\"form\" === name) {",
          "41:           action: \"\",",
          "42:           parentNode: { removeChild: function() {} },",
          "43:           removeChild: function() {},",
          "44:           setAttribute: function() {},",
          "45:           appendChild: function() {},",
          "46:           submit: function() {",
          "49:               .type(\"form\")",
          "51:               .end(function() {});",
          "55:       } else if (\"textarea\" === name) {",
          "59:         textarea.__defineSetter__(\"value\", function(data) {",
          "63:       } else if (~name.indexOf(\"iframe\")) {",
          "65:         setTimeout(function() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:       }",
          "73:     };",
          "79:         }",
          "81:     };",
          "82:   });",
          "85:     delete document.getElementsByTagName;",
          "86:     delete document.createElement;",
          "87:     delete global.document;",
          "88:   });",
          "101:     });",
          "102:   });",
          "105:     var engine, port, socket;",
          "116:     });",
          "122:         });",
          "123:       });",
          "128:           expect(socket.transport.query.j).to.not.be(undefined);",
          "130:           done();",
          "131:         });",
          "132:       });",
          "133:     });",
          "139:           done();",
          "140:         });",
          "141:       });",
          "144:       });",
          "145:     });",
          "151:           done();",
          "152:         });",
          "153:       });",
          "156:       });",
          "157:     });",
          "160:       var binaryData = Buffer.allocUnsafe(5);",
          "161:       for (var i = 0; i < 5; i++) binaryData[i] = i;",
          "164:           conn.send(msg);",
          "165:         });",
          "166:       });",
          "169:         socket.send(binaryData);",
          "171:           for (var i = 0; i < msg.length; i++) expect(msg[i]).to.be(i);",
          "172:           done();",
          "173:         });",
          "",
          "[Removed Lines]",
          "75:     document.getElementsByTagName = function (name) {",
          "76:       return [{",
          "77:         parentNode: {",
          "78:           insertBefore: function () {}",
          "80:       }];",
          "84:   after(function () {",
          "90:   describe('handshake', function () {",
          "91:     it('should open with polling JSONP when requested', function (done) {",
          "92:       var engine = listen({ allowUpgrades: false, transports: ['polling'] }, function (port) {",
          "93:         eioc('ws://localhost:' + port,",
          "94:           { transports: ['polling'], forceJSONP: true, upgrade: false });",
          "95:         engine.on('connection', function (socket) {",
          "96:           expect(socket.transport.name).to.be('polling');",
          "97:           expect(socket.transport.head).to.be('___eio[0](');",
          "98:           done();",
          "99:         });",
          "100:       });",
          "104:   describe('messages', function () {",
          "107:     beforeEach(function (done) {",
          "108:       engine = listen({ allowUpgrades: false, transports: ['polling'] }, function (p) {",
          "109:         port = p;",
          "111:         socket = new eioc.Socket('ws://localhost:' + port",
          "112:           , { transports: ['polling'], forceJSONP: true, upgrade: false });",
          "114:         done();",
          "115:       });",
          "118:     it('should arrive from client to server and back (pollingJSONP)', function (done) {",
          "119:       engine.on('connection', function (conn) {",
          "120:         conn.on('message', function (msg) {",
          "121:           conn.send('a');",
          "125:       socket.on('open', function () {",
          "126:         socket.send('a');",
          "127:         socket.on('message', function (msg) {",
          "129:           expect(msg).to.be('a');",
          "135:     it('should not fail JSON.parse for stringified messages', function (done) {",
          "136:       engine.on('connection', function (conn) {",
          "137:         conn.on('message', function (message) {",
          "138:           expect(JSON.parse(message)).to.be.eql({test: 'a\\r\\nb\\n\\n\\n\\nc'});",
          "142:       socket.on('open', function () {",
          "143:         socket.send(JSON.stringify({test: 'a\\r\\nb\\n\\n\\n\\nc'}));",
          "147:     it('should parse newlines in message correctly', function (done) {",
          "148:       engine.on('connection', function (conn) {",
          "149:         conn.on('message', function (message) {",
          "150:           expect(message).to.be.equal('a\\r\\nb\\n\\n\\n\\nc');",
          "154:       socket.on('open', function () {",
          "155:         socket.send('a\\r\\nb\\n\\n\\n\\nc');",
          "159:     it('should arrive from server to client and back with binary data (pollingJSONP)', function (done) {",
          "162:       engine.on('connection', function (conn) {",
          "163:         conn.on('message', function (msg) {",
          "168:       socket.on('open', function () {",
          "170:         socket.on('message', function (msg) {",
          "",
          "[Added Lines]",
          "75:     document.getElementsByTagName = function(name) {",
          "76:       return [",
          "77:         {",
          "78:           parentNode: {",
          "79:             insertBefore: function() {}",
          "80:           }",
          "82:       ];",
          "86:   after(function() {",
          "92:   describe(\"handshake\", function() {",
          "93:     it(\"should open with polling JSONP when requested\", function(done) {",
          "94:       var engine = listen(",
          "95:         { allowUpgrades: false, transports: [\"polling\"] },",
          "96:         function(port) {",
          "97:           eioc(\"ws://localhost:\" + port, {",
          "98:             transports: [\"polling\"],",
          "99:             forceJSONP: true,",
          "100:             upgrade: false",
          "101:           });",
          "102:           engine.on(\"connection\", function(socket) {",
          "103:             expect(socket.transport.name).to.be(\"polling\");",
          "104:             expect(socket.transport.head).to.be(\"___eio[0](\");",
          "105:             done();",
          "106:           });",
          "107:         }",
          "108:       );",
          "112:   describe(\"messages\", function() {",
          "115:     beforeEach(function(done) {",
          "116:       engine = listen(",
          "117:         { allowUpgrades: false, transports: [\"polling\"] },",
          "118:         function(p) {",
          "119:           port = p;",
          "121:           socket = new eioc.Socket(\"ws://localhost:\" + port, {",
          "122:             transports: [\"polling\"],",
          "123:             forceJSONP: true,",
          "124:             upgrade: false",
          "125:           });",
          "127:           done();",
          "128:         }",
          "129:       );",
          "132:     it(\"should arrive from client to server and back (pollingJSONP)\", function(done) {",
          "133:       engine.on(\"connection\", function(conn) {",
          "134:         conn.on(\"message\", function(msg) {",
          "135:           conn.send(\"a\");",
          "139:       socket.on(\"open\", function() {",
          "140:         socket.send(\"a\");",
          "141:         socket.on(\"message\", function(msg) {",
          "143:           expect(msg).to.be(\"a\");",
          "149:     it(\"should not fail JSON.parse for stringified messages\", function(done) {",
          "150:       engine.on(\"connection\", function(conn) {",
          "151:         conn.on(\"message\", function(message) {",
          "152:           expect(JSON.parse(message)).to.be.eql({ test: \"a\\r\\nb\\n\\n\\n\\nc\" });",
          "156:       socket.on(\"open\", function() {",
          "157:         socket.send(JSON.stringify({ test: \"a\\r\\nb\\n\\n\\n\\nc\" }));",
          "161:     it(\"should parse newlines in message correctly\", function(done) {",
          "162:       engine.on(\"connection\", function(conn) {",
          "163:         conn.on(\"message\", function(message) {",
          "164:           expect(message).to.be.equal(\"a\\r\\nb\\n\\n\\n\\nc\");",
          "168:       socket.on(\"open\", function() {",
          "169:         socket.send(\"a\\r\\nb\\n\\n\\n\\nc\");",
          "173:     it(\"should arrive from server to client and back with binary data (pollingJSONP)\", function(done) {",
          "176:       engine.on(\"connection\", function(conn) {",
          "177:         conn.on(\"message\", function(msg) {",
          "182:       socket.on(\"open\", function() {",
          "184:         socket.on(\"message\", function(msg) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:     });",
          "176:   });",
          "189:           });",
          "199:           });",
          "214:           });",
          "222:           });",
          "229:     });",
          "230:   });",
          "231: });",
          "",
          "[Removed Lines]",
          "178:   describe('close', function () {",
          "179:     it('should trigger when server closes a client', function (done) {",
          "180:       var engine = listen({ allowUpgrades: false, transports: ['polling'] }, function (port) {",
          "181:         var socket = new eioc.Socket('ws://localhost:' + port,",
          "182:           { transports: ['polling'], forceJSONP: true, upgrade: false });",
          "183:         var total = 2;",
          "185:         engine.on('connection', function (conn) {",
          "186:           conn.on('close', function (reason) {",
          "187:             expect(reason).to.be('forced close');",
          "188:             --total || done();",
          "190:           setTimeout(function () {",
          "191:             conn.close();",
          "192:           }, 10);",
          "193:         });",
          "195:         socket.on('open', function () {",
          "196:           socket.on('close', function (reason) {",
          "197:             expect(reason).to.be('transport close');",
          "198:             --total || done();",
          "200:         });",
          "201:       });",
          "202:     });",
          "204:     it('should trigger when client closes', function (done) {",
          "205:       var engine = listen({ allowUpgrades: false, transports: ['polling'] }, function (port) {",
          "206:         var socket = new eioc.Socket('ws://localhost:' + port",
          "207:           , { transports: ['polling'], forceJSONP: true, upgrade: false });",
          "208:         var total = 2;",
          "210:         engine.on('connection', function (conn) {",
          "211:           conn.on('close', function (reason) {",
          "212:             expect(reason).to.be('transport close');",
          "213:             --total || done();",
          "215:         });",
          "217:         socket.on('open', function () {",
          "218:           socket.send('a');",
          "219:           socket.on('close', function (reason) {",
          "220:             expect(reason).to.be('forced close');",
          "221:             --total || done();",
          "224:           setTimeout(function () {",
          "225:             socket.close();",
          "226:           }, 10);",
          "227:         });",
          "228:       });",
          "",
          "[Added Lines]",
          "192:   describe(\"close\", function() {",
          "193:     it(\"should trigger when server closes a client\", function(done) {",
          "194:       var engine = listen(",
          "195:         { allowUpgrades: false, transports: [\"polling\"] },",
          "196:         function(port) {",
          "197:           var socket = new eioc.Socket(\"ws://localhost:\" + port, {",
          "198:             transports: [\"polling\"],",
          "199:             forceJSONP: true,",
          "200:             upgrade: false",
          "202:           var total = 2;",
          "204:           engine.on(\"connection\", function(conn) {",
          "205:             conn.on(\"close\", function(reason) {",
          "206:               expect(reason).to.be(\"forced close\");",
          "207:               --total || done();",
          "208:             });",
          "209:             setTimeout(function() {",
          "210:               conn.close();",
          "211:             }, 10);",
          "214:           socket.on(\"open\", function() {",
          "215:             socket.on(\"close\", function(reason) {",
          "216:               expect(reason).to.be(\"transport close\");",
          "217:               --total || done();",
          "218:             });",
          "219:           });",
          "220:         }",
          "221:       );",
          "222:     });",
          "224:     it(\"should trigger when client closes\", function(done) {",
          "225:       var engine = listen(",
          "226:         { allowUpgrades: false, transports: [\"polling\"] },",
          "227:         function(port) {",
          "228:           var socket = new eioc.Socket(\"ws://localhost:\" + port, {",
          "229:             transports: [\"polling\"],",
          "230:             forceJSONP: true,",
          "231:             upgrade: false",
          "233:           var total = 2;",
          "235:           engine.on(\"connection\", function(conn) {",
          "236:             conn.on(\"close\", function(reason) {",
          "237:               expect(reason).to.be(\"transport close\");",
          "238:               --total || done();",
          "239:             });",
          "242:           socket.on(\"open\", function() {",
          "243:             socket.send(\"a\");",
          "244:             socket.on(\"close\", function(reason) {",
          "245:               expect(reason).to.be(\"forced close\");",
          "246:               --total || done();",
          "247:             });",
          "249:             setTimeout(function() {",
          "250:               socket.close();",
          "251:             }, 10);",
          "252:           });",
          "253:         }",
          "254:       );",
          "",
          "---------------"
        ],
        "test/server.js||test/server.js": [
          "File: test/server.js -> test/server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: })();",
          "39:             expect(err).to.be.an(Error);",
          "40:             expect(res.status).to.be(400);",
          "41:             expect(res.body.code).to.be(0);",
          "44:             done();",
          "45:           });",
          "46:       });",
          "47:     });",
          "56:             expect(err).to.be.an(Error);",
          "57:             expect(res.status).to.be(400);",
          "58:             expect(res.body.code).to.be(0);",
          "62:             done();",
          "63:           });",
          "64:       });",
          "65:     });",
          "73:             expect(err).to.be.an(Error);",
          "74:             expect(res.status).to.be(400);",
          "75:             expect(res.body.code).to.be(1);",
          "79:             done();",
          "80:           });",
          "81:       });",
          "82:     });",
          "99:     });",
          "108:     });",
          "109:   });",
          "117:             expect(err).to.be(null);",
          "119:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "121:             done();",
          "122:           });",
          "123:       });",
          "124:     });",
          "131:             expect(err).to.be(null);",
          "132:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "134:             done();",
          "135:           });",
          "136:       });",
          "137:     });",
          "144:             expect(err).to.be(null);",
          "145:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "147:             done();",
          "148:           });",
          "149:       });",
          "150:     });",
          "157:             expect(err).to.be(null);",
          "158:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "160:             done();",
          "161:           });",
          "162:       });",
          "163:     });",
          "170:             expect(err).to.be(null);",
          "171:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "173:             done();",
          "174:           });",
          "175:       });",
          "176:     });",
          "183:             expect(err).to.be(null);",
          "184:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "186:             done();",
          "187:           });",
          "188:       });",
          "189:     });",
          "196:             expect(err).to.be(null);",
          "197:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "199:             done();",
          "200:           });",
          "201:       });",
          "202:     });",
          "209:             expect(err).to.be(null);",
          "210:             var sid = res.text.match(/\"sid\":\"([^\"]+)\"/)[1];",
          "212:             done();",
          "213:           });",
          "214:       });",
          "215:     });",
          "222:             expect(err).to.be(null);",
          "224:             done();",
          "225:           });",
          "226:       });",
          "227:     });",
          "231:         expect(Object.keys(engine.clients)).to.have.length(0);",
          "232:         expect(engine.clientsCount).to.be(0);",
          "236:           expect(Object.keys(engine.clients)).to.have.length(1);",
          "237:           expect(engine.clientsCount).to.be(1);",
          "238:           done();",
          "",
          "[Removed Lines]",
          "7: var http = require('http');",
          "8: var https = require('https');",
          "9: var fs = require('fs');",
          "10: var path = require('path');",
          "11: var exec = require('child_process').exec;",
          "12: var zlib = require('zlib');",
          "13: var eio = require('..');",
          "14: var eioc = require('engine.io-client');",
          "15: var listen = require('./common').listen;",
          "16: var expect = require('expect.js');",
          "17: var request = require('superagent');",
          "18: var cookieMod = require('cookie');",
          "21: var NODE_LT_443 = (function () {",
          "22:   var parts = process.versions.node.split('.');",
          "23:   return (parts[0] < 4 || parts[1] < 4 || parts[2] < 3);",
          "26: var UWS_ENGINE = process.env.EIO_WS_ENGINE === 'uws';",
          "32: describe('server', function () {",
          "33:   describe('verification', function () {",
          "34:     it('should disallow non-existent transports', function (done) {",
          "35:       listen(function (port) {",
          "36:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "37:           .query({ transport: 'tobi' }) // no tobi transport - outrageous",
          "38:           .end(function (err, res) {",
          "42:             expect(res.body.message).to.be('Transport unknown');",
          "43:             expect(res.header['access-control-allow-origin']).to.be('*');",
          "49:     it('should disallow `constructor` as transports', function (done) {",
          "51:       listen(function (port) {",
          "52:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "53:           .set('Origin', 'http://engine.io')",
          "54:           .query({ transport: 'constructor' })",
          "55:           .end(function (err, res) {",
          "59:             expect(res.body.message).to.be('Transport unknown');",
          "60:             expect(res.header['access-control-allow-credentials']).to.be('true');",
          "61:             expect(res.header['access-control-allow-origin']).to.be('http://engine.io');",
          "67:     it('should disallow non-existent sids', function (done) {",
          "68:       listen(function (port) {",
          "69:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "70:           .set('Origin', 'http://engine.io')",
          "71:           .query({ transport: 'polling', sid: 'test' })",
          "72:           .end(function (err, res) {",
          "76:             expect(res.body.message).to.be('Session ID unknown');",
          "77:             expect(res.header['access-control-allow-credentials']).to.be('true');",
          "78:             expect(res.header['access-control-allow-origin']).to.be('http://engine.io');",
          "84:     it('should disallow requests that are rejected by `allowRequest`', function (done) {",
          "85:       listen({ allowRequest: function (req, fn) { fn('Thou shall not pass', false); } }, function (port) {",
          "86:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "87:           .set('Origin', 'http://engine.io')",
          "88:           .query({ transport: 'polling' })",
          "89:           .end(function (err, res) {",
          "90:             expect(err).to.be.an(Error);",
          "91:             expect(res.status).to.be(403);",
          "92:             expect(res.body.code).to.be(4);",
          "93:             expect(res.body.message).to.be('Thou shall not pass');",
          "94:             expect(res.header['access-control-allow-credentials']).to.be(undefined);",
          "95:             expect(res.header['access-control-allow-origin']).to.be(undefined);",
          "96:             done();",
          "97:           });",
          "98:       });",
          "101:     it('should disallow connection that are rejected by `allowRequest`', function (done) {",
          "102:       listen({ allowRequest: function (req, fn) { fn(null, false); } }, function (port) {",
          "103:         var client = eioc('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "104:         client.on('error', function () {",
          "105:           done();",
          "106:         });",
          "107:       });",
          "111:   describe('handshake', function () {",
          "112:     it('should send the io cookie', function (done) {",
          "113:       listen(function (port) {",
          "114:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "115:           .query({ transport: 'polling', b64: 1 })",
          "116:           .end(function (err, res) {",
          "120:             expect(res.headers['set-cookie'][0]).to.be('io=' + sid + '; Path=/; HttpOnly');",
          "126:     it('should send the io cookie custom name', function (done) {",
          "127:       listen({ cookie: 'woot' }, function (port) {",
          "128:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "129:           .query({ transport: 'polling', b64: 1 })",
          "130:           .end(function (err, res) {",
          "133:             expect(res.headers['set-cookie'][0]).to.be('woot=' + sid + '; Path=/; HttpOnly');",
          "139:     it('should send the cookie with custom path', function (done) {",
          "140:       listen({ cookiePath: '/custom' }, function (port) {",
          "141:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "142:           .query({ transport: 'polling', b64: 1 })",
          "143:           .end(function (err, res) {",
          "146:             expect(res.headers['set-cookie'][0]).to.be('io=' + sid + '; Path=/custom; HttpOnly');",
          "152:     it('should send the cookie with path=false', function (done) {",
          "153:       listen({ cookiePath: false }, function (port) {",
          "154:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "155:           .query({ transport: 'polling', b64: 1 })",
          "156:           .end(function (err, res) {",
          "159:             expect(res.headers['set-cookie'][0]).to.be('io=' + sid);",
          "165:     it('should send the io cookie with httpOnly=true', function (done) {",
          "166:       listen({ cookieHttpOnly: true }, function (port) {",
          "167:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "168:           .query({ transport: 'polling', b64: 1 })",
          "169:           .end(function (err, res) {",
          "172:             expect(res.headers['set-cookie'][0]).to.be('io=' + sid + '; Path=/; HttpOnly');",
          "178:     it('should send the io cookie with httpOnly=true and path=false', function (done) {",
          "179:       listen({ cookieHttpOnly: true, cookiePath: false }, function (port) {",
          "180:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "181:           .query({ transport: 'polling', b64: 1 })",
          "182:           .end(function (err, res) {",
          "185:             expect(res.headers['set-cookie'][0]).to.be('io=' + sid);",
          "191:     it('should send the io cookie with httpOnly=false', function (done) {",
          "192:       listen({ cookieHttpOnly: false }, function (port) {",
          "193:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "194:           .query({ transport: 'polling', b64: 1 })",
          "195:           .end(function (err, res) {",
          "198:             expect(res.headers['set-cookie'][0]).to.be('io=' + sid + '; Path=/');",
          "204:     it('should send the io cookie with httpOnly not boolean', function (done) {",
          "205:       listen({ cookieHttpOnly: 'no' }, function (port) {",
          "206:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "207:           .query({ transport: 'polling', b64: 1 })",
          "208:           .end(function (err, res) {",
          "211:             expect(res.headers['set-cookie'][0]).to.be('io=' + sid + '; Path=/; HttpOnly');",
          "217:     it('should not send the io cookie', function (done) {",
          "218:       listen({ cookie: false }, function (port) {",
          "219:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "220:           .query({ transport: 'polling' })",
          "221:           .end(function (err, res) {",
          "223:             expect(res.headers['set-cookie']).to.be(undefined);",
          "229:     it('should register a new client', function (done) {",
          "230:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "234:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "235:         socket.on('open', function () {",
          "",
          "[Added Lines]",
          "7: var http = require(\"http\");",
          "8: var https = require(\"https\");",
          "9: var fs = require(\"fs\");",
          "10: var path = require(\"path\");",
          "11: var exec = require(\"child_process\").exec;",
          "12: var zlib = require(\"zlib\");",
          "13: var eio = require(\"..\");",
          "14: var eioc = require(\"engine.io-client\");",
          "15: var listen = require(\"./common\").listen;",
          "16: var expect = require(\"expect.js\");",
          "17: var request = require(\"superagent\");",
          "18: var cookieMod = require(\"cookie\");",
          "21: var NODE_LT_443 = (function() {",
          "22:   var parts = process.versions.node.split(\".\");",
          "23:   return parts[0] < 4 || parts[1] < 4 || parts[2] < 3;",
          "26: var UWS_ENGINE = process.env.EIO_WS_ENGINE === \"uws\";",
          "32: describe(\"server\", function() {",
          "33:   describe(\"verification\", function() {",
          "34:     it(\"should disallow non-existent transports\", function(done) {",
          "35:       listen(function(port) {",
          "36:         request",
          "37:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "38:           .query({ transport: \"tobi\" }) // no tobi transport - outrageous",
          "39:           .end(function(err, res) {",
          "43:             expect(res.body.message).to.be(\"Transport unknown\");",
          "44:             expect(res.header[\"access-control-allow-origin\"]).to.be(\"*\");",
          "50:     it(\"should disallow `constructor` as transports\", function(done) {",
          "52:       listen(function(port) {",
          "53:         request",
          "54:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "55:           .set(\"Origin\", \"http://engine.io\")",
          "56:           .query({ transport: \"constructor\" })",
          "57:           .end(function(err, res) {",
          "61:             expect(res.body.message).to.be(\"Transport unknown\");",
          "62:             expect(res.header[\"access-control-allow-credentials\"]).to.be(",
          "63:               \"true\"",
          "64:             );",
          "65:             expect(res.header[\"access-control-allow-origin\"]).to.be(",
          "66:               \"http://engine.io\"",
          "67:             );",
          "73:     it(\"should disallow non-existent sids\", function(done) {",
          "74:       listen(function(port) {",
          "75:         request",
          "76:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "77:           .set(\"Origin\", \"http://engine.io\")",
          "78:           .query({ transport: \"polling\", sid: \"test\" })",
          "79:           .end(function(err, res) {",
          "83:             expect(res.body.message).to.be(\"Session ID unknown\");",
          "84:             expect(res.header[\"access-control-allow-credentials\"]).to.be(",
          "85:               \"true\"",
          "86:             );",
          "87:             expect(res.header[\"access-control-allow-origin\"]).to.be(",
          "88:               \"http://engine.io\"",
          "89:             );",
          "95:     it(\"should disallow requests that are rejected by `allowRequest`\", function(done) {",
          "96:       listen(",
          "97:         {",
          "98:           allowRequest: function(req, fn) {",
          "99:             fn(\"Thou shall not pass\", false);",
          "100:           }",
          "101:         },",
          "102:         function(port) {",
          "103:           request",
          "104:             .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "105:             .set(\"Origin\", \"http://engine.io\")",
          "106:             .query({ transport: \"polling\" })",
          "107:             .end(function(err, res) {",
          "108:               expect(err).to.be.an(Error);",
          "109:               expect(res.status).to.be(403);",
          "110:               expect(res.body.code).to.be(4);",
          "111:               expect(res.body.message).to.be(\"Thou shall not pass\");",
          "112:               expect(res.header[\"access-control-allow-credentials\"]).to.be(",
          "113:                 undefined",
          "114:               );",
          "115:               expect(res.header[\"access-control-allow-origin\"]).to.be(",
          "116:                 undefined",
          "117:               );",
          "118:               done();",
          "119:             });",
          "120:         }",
          "121:       );",
          "124:     it(\"should disallow connection that are rejected by `allowRequest`\", function(done) {",
          "125:       listen(",
          "126:         {",
          "127:           allowRequest: function(req, fn) {",
          "128:             fn(null, false);",
          "129:           }",
          "130:         },",
          "131:         function(port) {",
          "132:           var client = eioc(\"ws://localhost:%d\".s(port), {",
          "133:             transports: [\"websocket\"]",
          "134:           });",
          "135:           client.on(\"error\", function() {",
          "136:             done();",
          "137:           });",
          "138:         }",
          "139:       );",
          "143:   describe(\"handshake\", function() {",
          "144:     it(\"should send the io cookie\", function(done) {",
          "145:       listen(function(port) {",
          "146:         request",
          "147:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "148:           .query({ transport: \"polling\", b64: 1 })",
          "149:           .end(function(err, res) {",
          "153:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "154:               \"io=\" + sid + \"; Path=/; HttpOnly\"",
          "155:             );",
          "161:     it(\"should send the io cookie custom name\", function(done) {",
          "162:       listen({ cookie: \"woot\" }, function(port) {",
          "163:         request",
          "164:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "165:           .query({ transport: \"polling\", b64: 1 })",
          "166:           .end(function(err, res) {",
          "169:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "170:               \"woot=\" + sid + \"; Path=/; HttpOnly\"",
          "171:             );",
          "177:     it(\"should send the cookie with custom path\", function(done) {",
          "178:       listen({ cookiePath: \"/custom\" }, function(port) {",
          "179:         request",
          "180:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "181:           .query({ transport: \"polling\", b64: 1 })",
          "182:           .end(function(err, res) {",
          "185:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "186:               \"io=\" + sid + \"; Path=/custom; HttpOnly\"",
          "187:             );",
          "193:     it(\"should send the cookie with path=false\", function(done) {",
          "194:       listen({ cookiePath: false }, function(port) {",
          "195:         request",
          "196:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "197:           .query({ transport: \"polling\", b64: 1 })",
          "198:           .end(function(err, res) {",
          "201:             expect(res.headers[\"set-cookie\"][0]).to.be(\"io=\" + sid);",
          "207:     it(\"should send the io cookie with httpOnly=true\", function(done) {",
          "208:       listen({ cookieHttpOnly: true }, function(port) {",
          "209:         request",
          "210:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "211:           .query({ transport: \"polling\", b64: 1 })",
          "212:           .end(function(err, res) {",
          "215:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "216:               \"io=\" + sid + \"; Path=/; HttpOnly\"",
          "217:             );",
          "223:     it(\"should send the io cookie with httpOnly=true and path=false\", function(done) {",
          "224:       listen({ cookieHttpOnly: true, cookiePath: false }, function(port) {",
          "225:         request",
          "226:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "227:           .query({ transport: \"polling\", b64: 1 })",
          "228:           .end(function(err, res) {",
          "231:             expect(res.headers[\"set-cookie\"][0]).to.be(\"io=\" + sid);",
          "237:     it(\"should send the io cookie with httpOnly=false\", function(done) {",
          "238:       listen({ cookieHttpOnly: false }, function(port) {",
          "239:         request",
          "240:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "241:           .query({ transport: \"polling\", b64: 1 })",
          "242:           .end(function(err, res) {",
          "245:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "246:               \"io=\" + sid + \"; Path=/\"",
          "247:             );",
          "253:     it(\"should send the io cookie with httpOnly not boolean\", function(done) {",
          "254:       listen({ cookieHttpOnly: \"no\" }, function(port) {",
          "255:         request",
          "256:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "257:           .query({ transport: \"polling\", b64: 1 })",
          "258:           .end(function(err, res) {",
          "261:             expect(res.headers[\"set-cookie\"][0]).to.be(",
          "262:               \"io=\" + sid + \"; Path=/; HttpOnly\"",
          "263:             );",
          "269:     it(\"should not send the io cookie\", function(done) {",
          "270:       listen({ cookie: false }, function(port) {",
          "271:         request",
          "272:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "273:           .query({ transport: \"polling\" })",
          "274:           .end(function(err, res) {",
          "276:             expect(res.headers[\"set-cookie\"]).to.be(undefined);",
          "282:     it(\"should register a new client\", function(done) {",
          "283:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "287:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "288:         socket.on(\"open\", function() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:       });",
          "241:     });",
          "245:         expect(Object.keys(engine.clients)).to.have.length(0);",
          "246:         expect(engine.clientsCount).to.be(0);",
          "251:           return customId;",
          "252:         };",
          "256:           expect(Object.keys(engine.clients)).to.have.length(1);",
          "257:           expect(engine.clientsCount).to.be(1);",
          "258:           expect(socket.id).to.be(customId);",
          "",
          "[Removed Lines]",
          "243:     it('should register a new client with custom id', function (done) {",
          "244:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "248:         var customId = 'CustomId' + Date.now();",
          "250:         engine.generateId = function (req) {",
          "254:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "255:         socket.once('open', function () {",
          "",
          "[Added Lines]",
          "296:     it(\"should register a new client with custom id\", function(done) {",
          "297:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "301:         var customId = \"CustomId\" + Date.now();",
          "303:         engine.generateId = function(req) {",
          "307:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "308:         socket.once(\"open\", function() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262:       });",
          "263:     });",
          "272:           done();",
          "273:         });",
          "274:       });",
          "275:     });",
          "281:           expect(obj.pingTimeout).to.be(123);",
          "282:           done();",
          "283:         });",
          "284:       });",
          "285:     });",
          "291:           expect(socket).to.be.an(eio.Socket);",
          "292:           done();",
          "293:         });",
          "294:       });",
          "295:     });",
          "302:           done();",
          "303:         });",
          "304:       });",
          "305:     });",
          "312:           done();",
          "313:         });",
          "314:       });",
          "315:     });",
          "321:           expect(obj.upgrades).to.have.length(0);",
          "322:           done();",
          "323:         });",
          "324:       });",
          "325:     });",
          "331:           expect(obj.upgrades).to.have.length(0);",
          "332:           done();",
          "333:         });",
          "334:       });",
          "335:     });",
          "341:           expect(obj.upgrades).to.have.length(0);",
          "342:           done();",
          "343:         });",
          "344:       });",
          "345:     });",
          "351:           expect(obj.upgrades).to.have.length(1);",
          "353:           done();",
          "354:         });",
          "355:       });",
          "356:     });",
          "363:           });",
          "364:         });",
          "372:               expect(err).to.be.an(Error);",
          "373:               expect(res.status).to.be(400);",
          "374:               expect(res.body.code).to.be(3);",
          "378:                 done();",
          "379:               });",
          "380:             });",
          "",
          "[Removed Lines]",
          "265:     it('should exchange handshake data', function (done) {",
          "266:       listen({ allowUpgrades: false }, function (port) {",
          "267:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "268:         socket.on('handshake', function (obj) {",
          "269:           expect(obj.sid).to.be.a('string');",
          "270:           expect(obj.pingTimeout).to.be.a('number');",
          "271:           expect(obj.upgrades).to.be.an('array');",
          "277:     it('should allow custom ping timeouts', function (done) {",
          "278:       listen({ allowUpgrades: false, pingTimeout: 123 }, function (port) {",
          "279:         var socket = new eioc.Socket('http://localhost:%d'.s(port));",
          "280:         socket.on('handshake', function (obj) {",
          "287:     it('should trigger a connection event with a Socket', function (done) {",
          "288:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "289:         eioc('ws://localhost:%d'.s(port));",
          "290:         engine.on('connection', function (socket) {",
          "297:     it('should open with polling by default', function (done) {",
          "298:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "299:         eioc('ws://localhost:%d'.s(port));",
          "300:         engine.on('connection', function (socket) {",
          "301:           expect(socket.transport.name).to.be('polling');",
          "307:     it('should be able to open with ws directly', function (done) {",
          "308:       var engine = listen({ transports: ['websocket'] }, function (port) {",
          "309:         eioc('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "310:         engine.on('connection', function (socket) {",
          "311:           expect(socket.transport.name).to.be('websocket');",
          "317:     it('should not suggest any upgrades for websocket', function (done) {",
          "318:       listen({ transports: ['websocket'] }, function (port) {",
          "319:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "320:         socket.on('handshake', function (obj) {",
          "327:     it('should not suggest upgrades when none are availble', function (done) {",
          "328:       listen({ transports: ['polling'] }, function (port) {",
          "329:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { });",
          "330:         socket.on('handshake', function (obj) {",
          "337:     it('should only suggest available upgrades', function (done) {",
          "338:       listen({ transports: ['polling'] }, function (port) {",
          "339:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { });",
          "340:         socket.on('handshake', function (obj) {",
          "347:     it('should suggest all upgrades when no transports are disabled', function (done) {",
          "348:       listen({}, function (port) {",
          "349:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { });",
          "350:         socket.on('handshake', function (obj) {",
          "352:           expect(obj.upgrades).to.have.contain('websocket');",
          "358:     it('default to polling when proxy doesn\\'t support websocket', function (done) {",
          "359:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "360:         engine.on('connection', function (socket) {",
          "361:           socket.on('message', function (msg) {",
          "362:             if ('echo' === msg) socket.send(msg);",
          "366:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "367:         socket.on('open', function () {",
          "368:           request.get('http://localhost:%d/engine.io/'.s(port))",
          "369:             .set({ connection: 'close' })",
          "370:             .query({ transport: 'websocket', sid: socket.id })",
          "371:             .end(function (err, res) {",
          "375:               socket.send('echo');",
          "376:               socket.on('message', function (msg) {",
          "377:                 expect(msg).to.be('echo');",
          "",
          "[Added Lines]",
          "318:     it(\"should exchange handshake data\", function(done) {",
          "319:       listen({ allowUpgrades: false }, function(port) {",
          "320:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "321:         socket.on(\"handshake\", function(obj) {",
          "322:           expect(obj.sid).to.be.a(\"string\");",
          "323:           expect(obj.pingTimeout).to.be.a(\"number\");",
          "324:           expect(obj.upgrades).to.be.an(\"array\");",
          "330:     it(\"should allow custom ping timeouts\", function(done) {",
          "331:       listen({ allowUpgrades: false, pingTimeout: 123 }, function(port) {",
          "332:         var socket = new eioc.Socket(\"http://localhost:%d\".s(port));",
          "333:         socket.on(\"handshake\", function(obj) {",
          "340:     it(\"should trigger a connection event with a Socket\", function(done) {",
          "341:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "342:         eioc(\"ws://localhost:%d\".s(port));",
          "343:         engine.on(\"connection\", function(socket) {",
          "350:     it(\"should open with polling by default\", function(done) {",
          "351:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "352:         eioc(\"ws://localhost:%d\".s(port));",
          "353:         engine.on(\"connection\", function(socket) {",
          "354:           expect(socket.transport.name).to.be(\"polling\");",
          "360:     it(\"should be able to open with ws directly\", function(done) {",
          "361:       var engine = listen({ transports: [\"websocket\"] }, function(port) {",
          "362:         eioc(\"ws://localhost:%d\".s(port), { transports: [\"websocket\"] });",
          "363:         engine.on(\"connection\", function(socket) {",
          "364:           expect(socket.transport.name).to.be(\"websocket\");",
          "370:     it(\"should not suggest any upgrades for websocket\", function(done) {",
          "371:       listen({ transports: [\"websocket\"] }, function(port) {",
          "372:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "373:           transports: [\"websocket\"]",
          "374:         });",
          "375:         socket.on(\"handshake\", function(obj) {",
          "382:     it(\"should not suggest upgrades when none are availble\", function(done) {",
          "383:       listen({ transports: [\"polling\"] }, function(port) {",
          "384:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {});",
          "385:         socket.on(\"handshake\", function(obj) {",
          "392:     it(\"should only suggest available upgrades\", function(done) {",
          "393:       listen({ transports: [\"polling\"] }, function(port) {",
          "394:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {});",
          "395:         socket.on(\"handshake\", function(obj) {",
          "402:     it(\"should suggest all upgrades when no transports are disabled\", function(done) {",
          "403:       listen({}, function(port) {",
          "404:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {});",
          "405:         socket.on(\"handshake\", function(obj) {",
          "407:           expect(obj.upgrades).to.have.contain(\"websocket\");",
          "413:     it(\"default to polling when proxy doesn't support websocket\", function(done) {",
          "414:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "415:         engine.on(\"connection\", function(socket) {",
          "416:           socket.on(\"message\", function(msg) {",
          "417:             if (\"echo\" === msg) socket.send(msg);",
          "421:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "422:         socket.on(\"open\", function() {",
          "423:           request",
          "424:             .get(\"http://localhost:%d/engine.io/\".s(port))",
          "425:             .set({ connection: \"close\" })",
          "426:             .query({ transport: \"websocket\", sid: socket.id })",
          "427:             .end(function(err, res) {",
          "431:               socket.send(\"echo\");",
          "432:               socket.on(\"message\", function(msg) {",
          "433:                 expect(msg).to.be(\"echo\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "382:       });",
          "383:     });",
          "391:           done();",
          "392:         });",
          "393:       });",
          "394:     });",
          "403:           done();",
          "404:         });",
          "405:       });",
          "406:     });",
          "414:             expect(err).to.be.an(Error);",
          "415:             expect(res.status).to.be(400);",
          "416:             expect(res.body.code).to.be(3);",
          "420:             done();",
          "421:           });",
          "422:       });",
          "423:     });",
          "431:             done();",
          "432:           });",
          "433:         });",
          "",
          "[Removed Lines]",
          "385:     it('should allow arbitrary data through query string', function (done) {",
          "386:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "387:         eioc('ws://localhost:%d'.s(port), { query: { a: 'b' } });",
          "388:         engine.on('connection', function (conn) {",
          "389:           expect(conn.request._query).to.have.keys('transport', 'a');",
          "390:           expect(conn.request._query.a).to.be('b');",
          "396:     it('should allow data through query string in uri', function (done) {",
          "397:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "398:         eioc('ws://localhost:%d?a=b&c=d'.s(port));",
          "399:         engine.on('connection', function (conn) {",
          "400:           expect(conn.request._query.EIO).to.be.a('string');",
          "401:           expect(conn.request._query.a).to.be('b');",
          "402:           expect(conn.request._query.c).to.be('d');",
          "408:     it('should disallow bad requests', function (done) {",
          "409:       listen(function (port) {",
          "410:         request.get('http://localhost:%d/engine.io/default/'.s(port))",
          "411:           .set('Origin', 'http://engine.io')",
          "412:           .query({ transport: 'websocket' })",
          "413:           .end(function (err, res) {",
          "417:             expect(res.body.message).to.be('Bad request');",
          "418:             expect(res.header['access-control-allow-credentials']).to.be('true');",
          "419:             expect(res.header['access-control-allow-origin']).to.be('http://engine.io');",
          "425:     it('should send a packet along with the handshake', function (done) {",
          "426:       listen({ initialPacket: 'faster!' }, function (port) {",
          "427:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "428:         socket.on('open', function () {",
          "429:           socket.on('message', function (msg) {",
          "430:             expect(msg).to.be('faster!');",
          "",
          "[Added Lines]",
          "441:     it(\"should allow arbitrary data through query string\", function(done) {",
          "442:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "443:         eioc(\"ws://localhost:%d\".s(port), { query: { a: \"b\" } });",
          "444:         engine.on(\"connection\", function(conn) {",
          "445:           expect(conn.request._query).to.have.keys(\"transport\", \"a\");",
          "446:           expect(conn.request._query.a).to.be(\"b\");",
          "452:     it(\"should allow data through query string in uri\", function(done) {",
          "453:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "454:         eioc(\"ws://localhost:%d?a=b&c=d\".s(port));",
          "455:         engine.on(\"connection\", function(conn) {",
          "456:           expect(conn.request._query.EIO).to.be.a(\"string\");",
          "457:           expect(conn.request._query.a).to.be(\"b\");",
          "458:           expect(conn.request._query.c).to.be(\"d\");",
          "464:     it(\"should disallow bad requests\", function(done) {",
          "465:       listen(function(port) {",
          "466:         request",
          "467:           .get(\"http://localhost:%d/engine.io/default/\".s(port))",
          "468:           .set(\"Origin\", \"http://engine.io\")",
          "469:           .query({ transport: \"websocket\" })",
          "470:           .end(function(err, res) {",
          "474:             expect(res.body.message).to.be(\"Bad request\");",
          "475:             expect(res.header[\"access-control-allow-credentials\"]).to.be(",
          "476:               \"true\"",
          "477:             );",
          "478:             expect(res.header[\"access-control-allow-origin\"]).to.be(",
          "479:               \"http://engine.io\"",
          "480:             );",
          "486:     it(\"should send a packet along with the handshake\", function(done) {",
          "487:       listen({ initialPacket: \"faster!\" }, function(port) {",
          "488:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "489:         socket.on(\"open\", function() {",
          "490:           socket.on(\"message\", function(msg) {",
          "491:             expect(msg).to.be(\"faster!\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "435:     });",
          "436:   });",
          "445:             expect(conn.writeBuffer.length).to.be(1);",
          "447:               expect(conn.writeBuffer.length).to.be(0); // writeBuffer has been cleared",
          "448:             }, 10);",
          "449:             done();",
          "450:           });",
          "453:         });",
          "454:       });",
          "455:     });",
          "463:             expect(socket.writeBuffer.length).to.be(1);",
          "465:               expect(socket.writeBuffer.length).to.be(0);",
          "466:             }, 10);",
          "467:             done();",
          "468:           });",
          "471:         });",
          "472:       });",
          "473:     });",
          "476:       var opts = { allowUpgrades: false, pingInterval: 5, pingTimeout: 5 };",
          "483:             done();",
          "484:           });",
          "485:         });",
          "486:       });",
          "487:     });",
          "490:       var opts = { allowUpgrades: false, pingInterval: 500, pingTimeout: 500 };",
          "496:             done();",
          "497:           });",
          "500:           socket.close();",
          "502:           conn.close();",
          "",
          "[Removed Lines]",
          "438:   describe('close', function () {",
          "439:     it('should be able to access non-empty writeBuffer at closing (server)', function (done) {",
          "440:       var opts = {allowUpgrades: false};",
          "441:       var engine = listen(opts, function (port) {",
          "442:         eioc('http://localhost:%d'.s(port));",
          "443:         engine.on('connection', function (conn) {",
          "444:           conn.on('close', function (reason) {",
          "446:             setTimeout(function () {",
          "451:           conn.writeBuffer.push({ type: 'message', data: 'foo' });",
          "452:           conn.onError('');",
          "457:     it('should be able to access non-empty writeBuffer at closing (client)', function (done) {",
          "458:       var opts = {allowUpgrades: false};",
          "459:       listen(opts, function (port) {",
          "460:         var socket = new eioc.Socket('http://localhost:%d'.s(port));",
          "461:         socket.on('open', function () {",
          "462:           socket.on('close', function (reason) {",
          "464:             setTimeout(function () {",
          "469:           socket.writeBuffer.push({ type: 'message', data: 'foo' });",
          "470:           socket.onError('');",
          "475:     it('should trigger on server if the client does not pong', function (done) {",
          "477:       var engine = listen(opts, function (port) {",
          "478:         var socket = new eioc.Socket('http://localhost:%d'.s(port));",
          "479:         socket.sendPacket = function () {};",
          "480:         engine.on('connection', function (conn) {",
          "481:           conn.on('close', function (reason) {",
          "482:             expect(reason).to.be('ping timeout');",
          "489:     it('should trigger on server even when there is no outstanding polling request (GH-198)', function (done) {",
          "491:       var engine = listen(opts, function (port) {",
          "492:         var socket = new eioc.Socket('http://localhost:%d'.s(port));",
          "493:         engine.on('connection', function (conn) {",
          "494:           conn.on('close', function (reason) {",
          "495:             expect(reason).to.be('ping timeout');",
          "499:           socket.sendPacket = socket.onPacket = function () {};",
          "",
          "[Added Lines]",
          "499:   describe(\"close\", function() {",
          "500:     it(\"should be able to access non-empty writeBuffer at closing (server)\", function(done) {",
          "501:       var opts = { allowUpgrades: false };",
          "502:       var engine = listen(opts, function(port) {",
          "503:         eioc(\"http://localhost:%d\".s(port));",
          "504:         engine.on(\"connection\", function(conn) {",
          "505:           conn.on(\"close\", function(reason) {",
          "507:             setTimeout(function() {",
          "512:           conn.writeBuffer.push({ type: \"message\", data: \"foo\" });",
          "513:           conn.onError(\"\");",
          "518:     it(\"should be able to access non-empty writeBuffer at closing (client)\", function(done) {",
          "519:       var opts = { allowUpgrades: false };",
          "520:       listen(opts, function(port) {",
          "521:         var socket = new eioc.Socket(\"http://localhost:%d\".s(port));",
          "522:         socket.on(\"open\", function() {",
          "523:           socket.on(\"close\", function(reason) {",
          "525:             setTimeout(function() {",
          "530:           socket.writeBuffer.push({ type: \"message\", data: \"foo\" });",
          "531:           socket.onError(\"\");",
          "536:     it(\"should trigger on server if the client does not pong\", function(done) {",
          "538:       var engine = listen(opts, function(port) {",
          "539:         var socket = new eioc.Socket(\"http://localhost:%d\".s(port));",
          "540:         socket.sendPacket = function() {};",
          "541:         engine.on(\"connection\", function(conn) {",
          "542:           conn.on(\"close\", function(reason) {",
          "543:             expect(reason).to.be(\"ping timeout\");",
          "550:     it(\"should trigger on server even when there is no outstanding polling request (GH-198)\", function(done) {",
          "552:       var engine = listen(opts, function(port) {",
          "553:         var socket = new eioc.Socket(\"http://localhost:%d\".s(port));",
          "554:         engine.on(\"connection\", function(conn) {",
          "555:           conn.on(\"close\", function(reason) {",
          "556:             expect(reason).to.be(\"ping timeout\");",
          "560:           socket.sendPacket = socket.onPacket = function() {};",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "504:       });",
          "505:     });",
          "508:       var opts = { allowUpgrades: false, pingInterval: 50, pingTimeout: 30 };",
          "517:             done();",
          "518:           });",
          "519:         });",
          "520:       });",
          "521:     });",
          "524:       var opts = { allowUpgrades: false, pingTimeout: 50, pingInterval: 50 };",
          "527:         var total = 2;",
          "531:           --total || done();",
          "532:         }",
          "536:         });",
          "543:         });",
          "544:       });",
          "545:     });",
          "550:         var total = 2;",
          "555:             --total || done();",
          "556:           });",
          "558:             conn.close();",
          "559:           }, 10);",
          "560:         });",
          "565:             --total || done();",
          "566:           });",
          "567:         });",
          "568:       });",
          "569:     });",
          "575:         var total = 2;",
          "580:             --total || done();",
          "581:           });",
          "583:             conn.close();",
          "584:           }, 10);",
          "585:         });",
          "590:             --total || done();",
          "591:           });",
          "592:         });",
          "593:       });",
          "594:     });",
          "599:         engine.httpServer.close();",
          "600:         engine.httpServer.listen(port);",
          "606:             conn.close();",
          "607:           }, 10);",
          "608:         });",
          "612:           done();",
          "613:         });",
          "614:       });",
          "615:     });",
          "620:         var total = 2;",
          "625:             --total || done();",
          "626:           });",
          "627:         });",
          "632:             --total || done();",
          "633:           });",
          "636:             socket.close();",
          "637:           }, 10);",
          "638:         });",
          "639:       });",
          "640:     });",
          "646:         var total = 2;",
          "651:             --total || done();",
          "652:           });",
          "653:         });",
          "658:             --total || done();",
          "659:           });",
          "662:             socket.close();",
          "663:           }, 10);",
          "664:         });",
          "665:       });",
          "666:     });",
          "678:             done();",
          "679:           });",
          "680:         });",
          "685:           });",
          "689:           });",
          "690:         });",
          "691:       });",
          "692:     });",
          "698:           socket.close();",
          "701:             done();",
          "702:           }, 100);",
          "703:         });",
          "704:       });",
          "705:     });",
          "758:         });",
          "765:         var request = http.request;",
          "767:           var opts = arguments[0];",
          "768:           opts.headers = opts.headers || {};",
          "770:           return request.apply(this, arguments);",
          "771:         };",
          "774:           http.request = request;",
          "775:           $done();",
          "776:         }",
          "782:           });",
          "783:         });",
          "788:         });",
          "791:           done();",
          "792:         });",
          "793:       });",
          "794:     });",
          "811:           });",
          "833:           });",
          "840:         });",
          "861:           });",
          "873:           });",
          "889:         });",
          "904:           });",
          "905:         });",
          "922:         });",
          "926:         });",
          "936:         var socket = new eioc.Socket(url);",
          "939:         });",
          "942:           done();",
          "943:         });",
          "944:       });",
          "",
          "[Removed Lines]",
          "507:     it('should trigger on client if server does not meet ping timeout', function (done) {",
          "509:       listen(opts, function (port) {",
          "510:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "511:         socket.on('open', function () {",
          "513:           socket.onPacket = function () {};",
          "514:           socket.transport.onClose = function () {};",
          "515:           socket.on('close', function (reason, err) {",
          "516:             expect(reason).to.be('ping timeout');",
          "523:     it('should trigger on both ends upon ping timeout', function (done) {",
          "525:       var engine = listen(opts, function (port) {",
          "526:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "529:         function onClose (reason, err) {",
          "530:           expect(reason).to.be('ping timeout');",
          "534:         engine.on('connection', function (conn) {",
          "535:           conn.on('close', onClose);",
          "538:         socket.on('open', function () {",
          "540:           socket.onPacket = socket.sendPacket = function () {};",
          "541:           socket.transport.onClose = function () {};",
          "542:           socket.on('close', onClose);",
          "547:     it('should trigger when server closes a client', function (done) {",
          "548:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "549:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "552:         engine.on('connection', function (conn) {",
          "553:           conn.on('close', function (reason) {",
          "554:             expect(reason).to.be('forced close');",
          "557:           setTimeout(function () {",
          "562:         socket.on('open', function () {",
          "563:           socket.on('close', function (reason) {",
          "564:             expect(reason).to.be('transport close');",
          "571:     it('should trigger when server closes a client (ws)', function (done) {",
          "572:       var opts = { allowUpgrades: false, transports: ['websocket'] };",
          "573:       var engine = listen(opts, function (port) {",
          "574:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "577:         engine.on('connection', function (conn) {",
          "578:           conn.on('close', function (reason) {",
          "579:             expect(reason).to.be('forced close');",
          "582:           setTimeout(function () {",
          "587:         socket.on('open', function () {",
          "588:           socket.on('close', function (reason) {",
          "589:             expect(reason).to.be('transport close');",
          "596:     it('should allow client reconnect after restarting (ws)', function (done) {",
          "597:       var opts = { transports: ['websocket'] };",
          "598:       var engine = listen(opts, function (port) {",
          "602:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "604:         engine.once('connection', function (conn) {",
          "605:           setTimeout(function () {",
          "610:         socket.once('close', function (reason) {",
          "611:           expect(reason).to.be('transport close');",
          "617:     it('should trigger when client closes', function (done) {",
          "618:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "619:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "622:         engine.on('connection', function (conn) {",
          "623:           conn.on('close', function (reason) {",
          "624:             expect(reason).to.be('transport close');",
          "629:         socket.on('open', function () {",
          "630:           socket.on('close', function (reason) {",
          "631:             expect(reason).to.be('forced close');",
          "635:           setTimeout(function () {",
          "642:     it('should trigger when client closes (ws)', function (done) {",
          "643:       var opts = { allowUpgrades: false, transports: ['websocket'] };",
          "644:       var engine = listen(opts, function (port) {",
          "645:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "648:         engine.on('connection', function (conn) {",
          "649:           conn.on('close', function (reason) {",
          "650:             expect(reason).to.be('transport close');",
          "655:         socket.on('open', function () {",
          "656:           socket.on('close', function (reason) {",
          "657:             expect(reason).to.be('forced close');",
          "661:           setTimeout(function () {",
          "668:     it('should trigger when calling socket.close() in payload', function (done) {",
          "669:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "670:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "672:         engine.on('connection', function (conn) {",
          "673:           conn.send(null, function () { socket.close(); });",
          "674:           conn.send('this should not be handled');",
          "676:           conn.on('close', function (reason) {",
          "677:             expect(reason).to.be('transport close');",
          "682:         socket.on('open', function () {",
          "683:           socket.on('message', function (msg) {",
          "684:             expect(msg).to.not.be('this should not be handled');",
          "687:           socket.on('close', function (reason) {",
          "688:             expect(reason).to.be('forced close');",
          "694:     it('should abort upgrade if socket is closed (GH-35)', function (done) {",
          "695:       listen({ allowUpgrades: true }, function (port) {",
          "696:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "697:         socket.on('open', function () {",
          "700:           setTimeout(function () {",
          "707:     it('should trigger if a poll request is ongoing and the underlying ' +",
          "708:        'socket closes, as in a browser tab close', function ($done) {",
          "709:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "712:         var request = require('http').request;",
          "713:         var sockets = [];",
          "714:         http.request = function (opts) {",
          "715:           var req = request.apply(null, arguments);",
          "716:           req.on('socket', function (socket) {",
          "717:             sockets.push(socket);",
          "718:           });",
          "719:           return req;",
          "720:         };",
          "722:         function done () {",
          "723:           http.request = request;",
          "724:           $done();",
          "725:         }",
          "727:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "728:         var serverSocket;",
          "730:         engine.on('connection', function (s) {",
          "731:           serverSocket = s;",
          "732:         });",
          "734:         socket.transport.on('poll', function () {",
          "736:           setTimeout(function () {",
          "738:             expect(serverSocket).to.be.an('object');",
          "741:             expect(socket.transport.pollXhr.xhr.readyState).to.be(1);",
          "745:             expect(sockets.length).to.be(2);",
          "748:             expect(serverSocket.readyState).to.be('open');",
          "751:             sockets[1].end();",
          "752:             serverSocket.on('close', function (reason, err) {",
          "753:               expect(reason).to.be('transport error');",
          "754:               expect(err.message).to.be('poll connection closed prematurely');",
          "755:               done();",
          "756:             });",
          "757:           }, 50);",
          "759:       });",
          "760:     });",
          "762:     it('should not trigger with connection: close header', function ($done) {",
          "763:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "766:         http.request = function () {",
          "769:           opts.headers.Connection = 'close';",
          "773:         function done () {",
          "778:         engine.on('connection', function (socket) {",
          "779:           socket.on('message', function (msg) {",
          "780:             expect(msg).to.equal('test');",
          "781:             socket.send('woot');",
          "785:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "786:         socket.on('open', function () {",
          "787:           socket.send('test');",
          "789:         socket.on('message', function (msg) {",
          "790:           expect(msg).to.be('woot');",
          "796:     it('should not trigger early with connection `ping timeout`' +",
          "797:        'after post handshake timeout', function (done) {",
          "800:       var opts = { allowUpgrades: false, pingInterval: 300, pingTimeout: 100 };",
          "801:       listen(opts, function (port) {",
          "802:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "803:         var clientCloseReason = null;",
          "805:         socket.on('handshake', function () {",
          "806:           socket.onPacket = function () {};",
          "807:         });",
          "808:         socket.on('open', function () {",
          "809:           socket.on('close', function (reason) {",
          "810:             clientCloseReason = reason;",
          "812:         });",
          "814:         setTimeout(function () {",
          "815:           expect(clientCloseReason).to.be(null);",
          "816:           done();",
          "817:         }, 200);",
          "818:       });",
          "819:     });",
          "821:     it('should not trigger early with connection `ping timeout` ' +",
          "822:        'after post ping timeout', function (done) {",
          "825:       var opts = { allowUpgrades: false, pingInterval: 80, pingTimeout: 50 };",
          "826:       var engine = listen(opts, function (port) {",
          "827:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "828:         var clientCloseReason = null;",
          "830:         engine.on('connection', function (conn) {",
          "831:           conn.on('heartbeat', function () {",
          "832:             conn.onPacket = function () {};",
          "834:         });",
          "836:         socket.on('open', function () {",
          "837:           socket.on('close', function (reason) {",
          "838:             clientCloseReason = reason;",
          "839:           });",
          "842:         setTimeout(function () {",
          "843:           expect(clientCloseReason).to.be(null);",
          "844:           done();",
          "845:         }, 100);",
          "846:       });",
          "847:     });",
          "849:     it('should trigger early with connection `transport close` ' +",
          "850:        'after missing pong', function (done) {",
          "853:       var opts = { allowUpgrades: false, pingInterval: 80, pingTimeout: 50 };",
          "854:       var engine = listen(opts, function (port) {",
          "855:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "856:         var clientCloseReason = null;",
          "858:         socket.on('open', function () {",
          "859:           socket.on('close', function (reason) {",
          "860:             clientCloseReason = reason;",
          "862:         });",
          "864:         engine.on('connection', function (conn) {",
          "865:           conn.on('heartbeat', function () {",
          "866:             setTimeout(function () {",
          "867:               conn.close();",
          "868:             }, 20);",
          "869:             setTimeout(function () {",
          "870:               expect(clientCloseReason).to.be('transport close');",
          "871:               done();",
          "872:             }, 100);",
          "874:         });",
          "875:       });",
          "876:     });",
          "878:     it('should trigger with connection `ping timeout` ' +",
          "879:        'after `pingInterval + pingTimeout`', function (done) {",
          "880:       var opts = { allowUpgrades: false, pingInterval: 300, pingTimeout: 100 };",
          "881:       var engine = listen(opts, function (port) {",
          "882:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "883:         var clientCloseReason = null;",
          "885:         socket.on('open', function () {",
          "886:           socket.on('close', function (reason) {",
          "887:             clientCloseReason = reason;",
          "888:           });",
          "891:         engine.on('connection', function (conn) {",
          "892:           conn.once('heartbeat', function () {",
          "893:             setTimeout(function () {",
          "894:               socket.onPacket = function () {};",
          "895:               expect(clientCloseReason).to.be(null);",
          "896:             }, 150);",
          "897:             setTimeout(function () {",
          "898:               expect(clientCloseReason).to.be(null);",
          "899:             }, 350);",
          "900:             setTimeout(function () {",
          "901:               expect(clientCloseReason).to.be('ping timeout');",
          "902:               done();",
          "903:             }, 500);",
          "906:       });",
          "907:     });",
          "909:     it('should abort the polling data request if it is ' +",
          "910:        'in progress', function (done) {",
          "911:       var engine = listen({ transports: [ 'polling' ] }, function (port) {",
          "912:         var socket = new eioc.Socket('http://localhost:%d'.s(port));",
          "914:         engine.on('connection', function (conn) {",
          "915:           var onDataRequest = conn.transport.onDataRequest;",
          "916:           conn.transport.onDataRequest = function (req, res) {",
          "917:             engine.httpServer.close(done);",
          "918:             onDataRequest.call(conn.transport, req, res);",
          "919:             req.removeAllListeners();",
          "920:             conn.close();",
          "921:           };",
          "924:         socket.on('open', function () {",
          "925:           socket.send('test');",
          "927:       });",
          "928:     });",
          "932:     it('should trigger transport close before open for ws', function (done) {",
          "933:       var opts = { transports: ['websocket'] };",
          "934:       listen(opts, function (port) {",
          "935:         var url = 'ws://%s:%d'.s('0.0.0.50', port);",
          "937:         socket.on('open', function () {",
          "938:           done(new Error('Test invalidation'));",
          "940:         socket.on('close', function (reason) {",
          "941:           expect(reason).to.be('transport error');",
          "",
          "[Added Lines]",
          "568:     it(\"should trigger on client if server does not meet ping timeout\", function(done) {",
          "570:       listen(opts, function(port) {",
          "571:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "572:         socket.on(\"open\", function() {",
          "574:           socket.onPacket = function() {};",
          "575:           socket.transport.onClose = function() {};",
          "576:           socket.on(\"close\", function(reason, err) {",
          "577:             expect(reason).to.be(\"ping timeout\");",
          "584:     it(\"should trigger on both ends upon ping timeout\", function(done) {",
          "586:       var engine = listen(opts, function(port) {",
          "587:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "590:         function onClose(reason, err) {",
          "591:           expect(reason).to.be(\"ping timeout\");",
          "595:         engine.on(\"connection\", function(conn) {",
          "596:           conn.on(\"close\", onClose);",
          "599:         socket.on(\"open\", function() {",
          "601:           socket.onPacket = socket.sendPacket = function() {};",
          "602:           socket.transport.onClose = function() {};",
          "603:           socket.on(\"close\", onClose);",
          "608:     it(\"should trigger when server closes a client\", function(done) {",
          "609:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "610:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "613:         engine.on(\"connection\", function(conn) {",
          "614:           conn.on(\"close\", function(reason) {",
          "615:             expect(reason).to.be(\"forced close\");",
          "618:           setTimeout(function() {",
          "623:         socket.on(\"open\", function() {",
          "624:           socket.on(\"close\", function(reason) {",
          "625:             expect(reason).to.be(\"transport close\");",
          "632:     it(\"should trigger when server closes a client (ws)\", function(done) {",
          "633:       var opts = { allowUpgrades: false, transports: [\"websocket\"] };",
          "634:       var engine = listen(opts, function(port) {",
          "635:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "636:           transports: [\"websocket\"]",
          "637:         });",
          "640:         engine.on(\"connection\", function(conn) {",
          "641:           conn.on(\"close\", function(reason) {",
          "642:             expect(reason).to.be(\"forced close\");",
          "645:           setTimeout(function() {",
          "650:         socket.on(\"open\", function() {",
          "651:           socket.on(\"close\", function(reason) {",
          "652:             expect(reason).to.be(\"transport close\");",
          "659:     it(\"should allow client reconnect after restarting (ws)\", function(done) {",
          "660:       var opts = { transports: [\"websocket\"] };",
          "661:       var engine = listen(opts, function(port) {",
          "665:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "666:           transports: [\"websocket\"]",
          "667:         });",
          "669:         engine.once(\"connection\", function(conn) {",
          "670:           setTimeout(function() {",
          "675:         socket.once(\"close\", function(reason) {",
          "676:           expect(reason).to.be(\"transport close\");",
          "682:     it(\"should trigger when client closes\", function(done) {",
          "683:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "684:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "687:         engine.on(\"connection\", function(conn) {",
          "688:           conn.on(\"close\", function(reason) {",
          "689:             expect(reason).to.be(\"transport close\");",
          "694:         socket.on(\"open\", function() {",
          "695:           socket.on(\"close\", function(reason) {",
          "696:             expect(reason).to.be(\"forced close\");",
          "700:           setTimeout(function() {",
          "707:     it(\"should trigger when client closes (ws)\", function(done) {",
          "708:       var opts = { allowUpgrades: false, transports: [\"websocket\"] };",
          "709:       var engine = listen(opts, function(port) {",
          "710:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "711:           transports: [\"websocket\"]",
          "712:         });",
          "715:         engine.on(\"connection\", function(conn) {",
          "716:           conn.on(\"close\", function(reason) {",
          "717:             expect(reason).to.be(\"transport close\");",
          "722:         socket.on(\"open\", function() {",
          "723:           socket.on(\"close\", function(reason) {",
          "724:             expect(reason).to.be(\"forced close\");",
          "728:           setTimeout(function() {",
          "735:     it(\"should trigger when calling socket.close() in payload\", function(done) {",
          "736:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "737:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "739:         engine.on(\"connection\", function(conn) {",
          "740:           conn.send(null, function() {",
          "741:             socket.close();",
          "742:           });",
          "743:           conn.send(\"this should not be handled\");",
          "745:           conn.on(\"close\", function(reason) {",
          "746:             expect(reason).to.be(\"transport close\");",
          "751:         socket.on(\"open\", function() {",
          "752:           socket.on(\"message\", function(msg) {",
          "753:             expect(msg).to.not.be(\"this should not be handled\");",
          "756:           socket.on(\"close\", function(reason) {",
          "757:             expect(reason).to.be(\"forced close\");",
          "763:     it(\"should abort upgrade if socket is closed (GH-35)\", function(done) {",
          "764:       listen({ allowUpgrades: true }, function(port) {",
          "765:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "766:         socket.on(\"open\", function() {",
          "769:           setTimeout(function() {",
          "776:     it(",
          "777:       \"should trigger if a poll request is ongoing and the underlying \" +",
          "778:         \"socket closes, as in a browser tab close\",",
          "779:       function($done) {",
          "780:         var engine = listen({ allowUpgrades: false }, function(port) {",
          "783:           var request = require(\"http\").request;",
          "784:           var sockets = [];",
          "785:           http.request = function(opts) {",
          "786:             var req = request.apply(null, arguments);",
          "787:             req.on(\"socket\", function(socket) {",
          "788:               sockets.push(socket);",
          "789:             });",
          "790:             return req;",
          "791:           };",
          "793:           function done() {",
          "794:             http.request = request;",
          "795:             $done();",
          "796:           }",
          "798:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "799:           var serverSocket;",
          "801:           engine.on(\"connection\", function(s) {",
          "802:             serverSocket = s;",
          "803:           });",
          "805:           socket.transport.on(\"poll\", function() {",
          "807:             setTimeout(function() {",
          "809:               expect(serverSocket).to.be.an(\"object\");",
          "812:               expect(socket.transport.pollXhr.xhr.readyState).to.be(1);",
          "816:               expect(sockets.length).to.be(2);",
          "819:               expect(serverSocket.readyState).to.be(\"open\");",
          "822:               sockets[1].end();",
          "823:               serverSocket.on(\"close\", function(reason, err) {",
          "824:                 expect(reason).to.be(\"transport error\");",
          "825:                 expect(err.message).to.be(\"poll connection closed prematurely\");",
          "826:                 done();",
          "827:               });",
          "828:             }, 50);",
          "829:           });",
          "831:       }",
          "832:     );",
          "834:     it(\"should not trigger with connection: close header\", function($done) {",
          "835:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "838:         http.request = function() {",
          "841:           opts.headers.Connection = \"close\";",
          "845:         function done() {",
          "850:         engine.on(\"connection\", function(socket) {",
          "851:           socket.on(\"message\", function(msg) {",
          "852:             expect(msg).to.equal(\"test\");",
          "853:             socket.send(\"woot\");",
          "857:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "858:         socket.on(\"open\", function() {",
          "859:           socket.send(\"test\");",
          "861:         socket.on(\"message\", function(msg) {",
          "862:           expect(msg).to.be(\"woot\");",
          "868:     it(",
          "869:       \"should not trigger early with connection `ping timeout`\" +",
          "870:         \"after post handshake timeout\",",
          "871:       function(done) {",
          "874:         var opts = {",
          "875:           allowUpgrades: false,",
          "876:           pingInterval: 300,",
          "877:           pingTimeout: 100",
          "878:         };",
          "879:         listen(opts, function(port) {",
          "880:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "881:           var clientCloseReason = null;",
          "883:           socket.on(\"handshake\", function() {",
          "884:             socket.onPacket = function() {};",
          "886:           socket.on(\"open\", function() {",
          "887:             socket.on(\"close\", function(reason) {",
          "888:               clientCloseReason = reason;",
          "889:             });",
          "892:           setTimeout(function() {",
          "893:             expect(clientCloseReason).to.be(null);",
          "894:             done();",
          "895:           }, 200);",
          "897:       }",
          "898:     );",
          "900:     it(",
          "901:       \"should not trigger early with connection `ping timeout` \" +",
          "902:         \"after post ping timeout\",",
          "903:       function(done) {",
          "906:         var opts = { allowUpgrades: false, pingInterval: 80, pingTimeout: 50 };",
          "907:         var engine = listen(opts, function(port) {",
          "908:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "909:           var clientCloseReason = null;",
          "911:           engine.on(\"connection\", function(conn) {",
          "912:             conn.on(\"heartbeat\", function() {",
          "913:               conn.onPacket = function() {};",
          "914:             });",
          "917:           socket.on(\"open\", function() {",
          "918:             socket.on(\"close\", function(reason) {",
          "919:               clientCloseReason = reason;",
          "920:             });",
          "923:           setTimeout(function() {",
          "924:             expect(clientCloseReason).to.be(null);",
          "925:             done();",
          "926:           }, 100);",
          "928:       }",
          "929:     );",
          "931:     it(",
          "932:       \"should trigger early with connection `transport close` \" +",
          "933:         \"after missing pong\",",
          "934:       function(done) {",
          "937:         var opts = { allowUpgrades: false, pingInterval: 80, pingTimeout: 50 };",
          "938:         var engine = listen(opts, function(port) {",
          "939:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "940:           var clientCloseReason = null;",
          "942:           socket.on(\"open\", function() {",
          "943:             socket.on(\"close\", function(reason) {",
          "944:               clientCloseReason = reason;",
          "945:             });",
          "946:           });",
          "948:           engine.on(\"connection\", function(conn) {",
          "949:             conn.on(\"heartbeat\", function() {",
          "950:               setTimeout(function() {",
          "951:                 conn.close();",
          "952:               }, 20);",
          "953:               setTimeout(function() {",
          "954:                 expect(clientCloseReason).to.be(\"transport close\");",
          "955:                 done();",
          "956:               }, 100);",
          "957:             });",
          "960:       }",
          "961:     );",
          "963:     it(",
          "964:       \"should trigger with connection `ping timeout` \" +",
          "965:         \"after `pingInterval + pingTimeout`\",",
          "966:       function(done) {",
          "967:         var opts = {",
          "968:           allowUpgrades: false,",
          "969:           pingInterval: 300,",
          "970:           pingTimeout: 100",
          "971:         };",
          "972:         var engine = listen(opts, function(port) {",
          "973:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "974:           var clientCloseReason = null;",
          "976:           socket.on(\"open\", function() {",
          "977:             socket.on(\"close\", function(reason) {",
          "978:               clientCloseReason = reason;",
          "979:             });",
          "980:           });",
          "982:           engine.on(\"connection\", function(conn) {",
          "983:             conn.once(\"heartbeat\", function() {",
          "984:               setTimeout(function() {",
          "985:                 socket.onPacket = function() {};",
          "986:                 expect(clientCloseReason).to.be(null);",
          "987:               }, 150);",
          "988:               setTimeout(function() {",
          "989:                 expect(clientCloseReason).to.be(null);",
          "990:               }, 350);",
          "991:               setTimeout(function() {",
          "992:                 expect(clientCloseReason).to.be(\"ping timeout\");",
          "993:                 done();",
          "994:               }, 500);",
          "995:             });",
          "996:           });",
          "998:       }",
          "999:     );",
          "1001:     it(",
          "1002:       \"should abort the polling data request if it is \" + \"in progress\",",
          "1003:       function(done) {",
          "1004:         var engine = listen({ transports: [\"polling\"] }, function(port) {",
          "1005:           var socket = new eioc.Socket(\"http://localhost:%d\".s(port));",
          "1007:           engine.on(\"connection\", function(conn) {",
          "1008:             var onDataRequest = conn.transport.onDataRequest;",
          "1009:             conn.transport.onDataRequest = function(req, res) {",
          "1010:               engine.httpServer.close(done);",
          "1011:               onDataRequest.call(conn.transport, req, res);",
          "1012:               req.removeAllListeners();",
          "1013:               conn.close();",
          "1014:             };",
          "1015:           });",
          "1017:           socket.on(\"open\", function() {",
          "1018:             socket.send(\"test\");",
          "1019:           });",
          "1021:       }",
          "1022:     );",
          "1026:     it(\"should trigger transport close before open for ws\", function(done) {",
          "1027:       var opts = { transports: [\"websocket\"] };",
          "1028:       listen(opts, function(port) {",
          "1029:         var url = \"ws://%s:%d\".s(\"0.0.0.50\", port);",
          "1031:         socket.on(\"open\", function() {",
          "1032:           done(new Error(\"Test invalidation\"));",
          "1034:         socket.on(\"close\", function(reason) {",
          "1035:           expect(reason).to.be(\"transport error\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "958:           done();",
          "959:         });",
          "960:       });",
          "",
          "[Removed Lines]",
          "949:     it('should trigger transport close before open for xhr', function (done) {",
          "950:       var opts = { transports: ['polling'] };",
          "951:       listen(opts, function (port) {",
          "952:         var socket = new eioc.Socket('http://invalidserver:%d'.s(port));",
          "953:         socket.on('open', function () {",
          "954:           done(new Error('Test invalidation'));",
          "955:         });",
          "956:         socket.on('close', function (reason) {",
          "957:           expect(reason).to.be('transport error');",
          "",
          "[Added Lines]",
          "1043:     it(\"should trigger transport close before open for xhr\", function(done) {",
          "1044:       var opts = { transports: [\"polling\"] };",
          "1045:       listen(opts, function(port) {",
          "1046:         var socket = new eioc.Socket(\"http://invalidserver:%d\".s(port));",
          "1047:         socket.on(\"open\", function() {",
          "1048:           done(new Error(\"Test invalidation\"));",
          "1049:         });",
          "1050:         socket.on(\"close\", function(reason) {",
          "1051:           expect(reason).to.be(\"transport error\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "974:           done();",
          "975:         });",
          "976:         socket.close();",
          "",
          "[Removed Lines]",
          "965:     it('should trigger force close before open for ws', function (done) {",
          "966:       var opts = { transports: ['websocket'] };",
          "967:       listen(opts, function (port) {",
          "968:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "969:         socket.on('open', function () {",
          "970:           done(new Error('Test invalidation'));",
          "971:         });",
          "972:         socket.on('close', function (reason) {",
          "973:           expect(reason).to.be('forced close');",
          "",
          "[Added Lines]",
          "1059:     it(\"should trigger force close before open for ws\", function(done) {",
          "1060:       var opts = { transports: [\"websocket\"] };",
          "1061:       listen(opts, function(port) {",
          "1062:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "1063:         socket.on(\"open\", function() {",
          "1064:           done(new Error(\"Test invalidation\"));",
          "1065:         });",
          "1066:         socket.on(\"close\", function(reason) {",
          "1067:           expect(reason).to.be(\"forced close\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "991:           done();",
          "992:         });",
          "993:         socket.close();",
          "994:       });",
          "995:     });",
          "1002:         });",
          "1006:       });",
          "1007:     });",
          "1014:         });",
          "1018:       });",
          "1019:     });",
          "1026:         });",
          "1030:         });",
          "1031:       });",
          "1032:     });",
          "1038:           conn.transport.closeTimeout = 100;",
          "1040:         });",
          "1044:         });",
          "1045:       });",
          "1046:     });",
          "1053:             conn.close();",
          "1054:           });",
          "1055:         });",
          "1057:       });",
          "1058:     });",
          "1061:       var opts = { upgradeTimeout: 100 };",
          "1066:           });",
          "1067:         });",
          "1072:         });",
          "1073:       });",
          "1074:     });",
          "1081:           engine.close();",
          "1083:             done();",
          "1084:           }, 100);",
          "1085:         });",
          "1086:       });",
          "1087:     });",
          "1093:       }",
          "1097:       });",
          "1101:       });",
          "1105:       });",
          "1106:     });",
          "1107:   });",
          "1110:     this.timeout(5000);",
          "1117:         });",
          "1121:             done();",
          "1122:           });",
          "1123:         });",
          "1124:       });",
          "1125:     });",
          "1131:         var i = 0;",
          "1144:               conn.close();",
          "1145:             }, 50);",
          "1146:           }, 50);",
          "1151:               expect(i).to.be(3);",
          "1152:               done();",
          "1153:             }, 50);",
          "1154:           });",
          "1155:         });",
          "1158:             expect(msg).to.be(expected[i++]);",
          "1159:           });",
          "1160:         });",
          "1161:       });",
          "1162:     });",
          "1171:           });",
          "1172:         });",
          "1175:         });",
          "1177:           done();",
          "1178:         });",
          "1179:       });",
          "1180:     });",
          "1183:       var opts = { maxHttpBufferSize: 5 };",
          "1189:           });",
          "1190:         });",
          "1193:         });",
          "1195:           done();",
          "1196:         });",
          "1197:       });",
          "1198:     });",
          "1207:             done();",
          "1208:           });",
          "1209:         });",
          "1212:         });",
          "1213:       });",
          "1214:     });",
          "1222:         });",
          "1226:             done();",
          "1227:           });",
          "1228:         });",
          "1229:       });",
          "1230:     });",
          "1237:         var i = 0;",
          "1245:               conn.close();",
          "1246:             }, 50);",
          "1247:           }, 50);",
          "1250:               expect(i).to.be(3);",
          "1251:               done();",
          "1252:             }, 50);",
          "1253:           });",
          "1254:         });",
          "1258:             expect(msg).to.be(expected[i++]);",
          "1259:           });",
          "1260:         });",
          "1261:       });",
          "1262:     });",
          "1269:         var i = 0;",
          "1274:               expect(i).to.be(3);",
          "1275:               done();",
          "1276:             }, 50);",
          "1277:           });",
          "1281:           conn.close();",
          "1282:         });",
          "1286:             expect(msg).to.be(expected[i++]);",
          "1287:           });",
          "1288:         });",
          "1289:       });",
          "1290:     });",
          "1293:       var binaryData = new Int8Array(5);",
          "1294:       for (var i = 0; i < binaryData.length; i++) {",
          "1295:         binaryData[i] = i;",
          "1296:       }",
          "1303:           conn.send(binaryData);",
          "1304:         });",
          "1308:             for (var i = 0; i < binaryData.length; i++) {",
          "1309:               var num = msg.readInt8(i);",
          "1310:               expect(num).to.be(i);",
          "",
          "[Removed Lines]",
          "982:     it('should trigger force close before open for xhr', function (done) {",
          "983:       var opts = { transports: ['polling'] };",
          "984:       listen(opts, function (port) {",
          "985:         var socket = new eioc.Socket('http://localhost:%d'.s(port));",
          "986:         socket.on('open', function () {",
          "987:           done(new Error('Test invalidation'));",
          "988:         });",
          "989:         socket.on('close', function (reason) {",
          "990:           expect(reason).to.be('forced close');",
          "997:     it('should close transport upon ping timeout (ws)', function (done) {",
          "998:       var opts = { allowUpgrades: false, transports: ['websocket'], pingInterval: 50, pingTimeout: 30 };",
          "999:       var engine = listen(opts, function (port) {",
          "1000:         engine.on('connection', function (conn) {",
          "1001:           conn.transport.on('close', done);",
          "1003:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1005:         socket.sendPacket = socket.onHeartbeat = function () {};",
          "1009:     it('should close transport upon ping timeout (polling)', function (done) {",
          "1010:       var opts = { allowUpgrades: false, transports: ['polling'], pingInterval: 50, pingTimeout: 30 };",
          "1011:       var engine = listen(opts, function (port) {",
          "1012:         engine.on('connection', function (conn) {",
          "1013:           conn.transport.on('close', done);",
          "1015:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['polling'] });",
          "1017:         socket.sendPacket = socket.onHeartbeat = function () {};",
          "1021:     it('should close transport upon parse error (ws)', function (done) {",
          "1022:       var opts = { allowUpgrades: false, transports: ['websocket'] };",
          "1023:       var engine = listen(opts, function (port) {",
          "1024:         engine.on('connection', function (conn) {",
          "1025:           conn.transport.on('close', done);",
          "1027:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1028:         socket.on('open', function () {",
          "1029:           socket.transport.ws.send('invalid');",
          "1034:     it('should close transport upon parse error (polling)', function (done) {",
          "1035:       var opts = { allowUpgrades: false, transports: ['polling'] };",
          "1036:       var engine = listen(opts, function (port) {",
          "1037:         engine.on('connection', function (conn) {",
          "1039:           conn.transport.on('close', done);",
          "1041:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['polling'] });",
          "1042:         socket.on('open', function () {",
          "1043:           socket.transport.doWrite('invalid', function () {});",
          "1048:     it('should close upgrading transport upon socket close', function (done) {",
          "1049:       var engine = listen(function (port) {",
          "1050:         engine.on('connection', function (conn) {",
          "1051:           conn.on('upgrading', function (transport) {",
          "1052:             transport.on('close', done);",
          "1056:         eioc('ws://localhost:%d'.s(port));",
          "1060:     it('should close upgrading transport upon upgrade timeout', function (done) {",
          "1062:       var engine = listen(opts, function (port) {",
          "1063:         engine.on('connection', function (conn) {",
          "1064:           conn.on('upgrading', function (transport) {",
          "1065:             transport.on('close', done);",
          "1068:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "1069:         socket.on('upgrading', function (transport) {",
          "1071:           transport.send = function () {};",
          "1076:     it('should not crash when messing with Object prototype', function (done) {",
          "1077:       Object.prototype.foo = 'bar'; // eslint-disable-line no-extend-native",
          "1078:       var engine = listen({ allowUpgrades: true }, function (port) {",
          "1079:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "1080:         socket.on('open', function () {",
          "1082:           setTimeout(function () {",
          "1089:     describe('graceful close', function () {",
          "1090:       function fixture (filename) {",
          "1091:         return process.execPath + ' ' +",
          "1092:           path.join(__dirname, 'fixtures', filename);",
          "1095:       it('should stop socket and timers', function (done) {",
          "1096:         exec(fixture('server-close.js'), done);",
          "1099:       it('should stop upgraded socket and timers', function (done) {",
          "1100:         exec(fixture('server-close-upgraded.js'), done);",
          "1103:       it('should stop upgrading socket and timers', function (done) {",
          "1104:         exec(fixture('server-close-upgrading.js'), done);",
          "1109:   describe('messages', function () {",
          "1112:     it('should arrive from server to client', function (done) {",
          "1113:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "1114:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "1115:         engine.on('connection', function (conn) {",
          "1116:           conn.send('a');",
          "1118:         socket.on('open', function () {",
          "1119:           socket.on('message', function (msg) {",
          "1120:             expect(msg).to.be('a');",
          "1127:     it('should arrive from server to client (multiple)', function (done) {",
          "1128:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "1129:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "1130:         var expected = ['a', 'b', 'c'];",
          "1133:         engine.on('connection', function (conn) {",
          "1134:           conn.send('a');",
          "1137:           setTimeout(function () {",
          "1138:             conn.send('b');",
          "1140:             setTimeout(function () {",
          "1143:               conn.send('c');",
          "1148:           conn.on('close', function () {",
          "1150:             setTimeout(function () {",
          "1156:         socket.on('open', function () {",
          "1157:           socket.on('message', function (msg) {",
          "1164:     it('should not be receiving data when getting a message longer than maxHttpBufferSize when polling', function (done) {",
          "1165:       var opts = { allowUpgrades: false, transports: ['polling'], maxHttpBufferSize: 5 };",
          "1166:       var engine = listen(opts, function (port) {",
          "1167:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "1168:         engine.on('connection', function (conn) {",
          "1169:           conn.on('message', function (msg) {",
          "1170:             done(new Error('Test invalidation (message is longer than allowed)'));",
          "1173:         socket.on('open', function () {",
          "1174:           socket.send('aasdasdakjhasdkjhasdkjhasdkjhasdkjhasdkjhasdkjha');",
          "1176:         socket.on('close', function () {",
          "1182:     it('should not be receiving data when getting a message longer than maxHttpBufferSize (websocket)', function (done) {",
          "1184:       var engine = listen(opts, function (port) {",
          "1185:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1186:         engine.on('connection', function (conn) {",
          "1187:           conn.on('message', function (msg) {",
          "1188:             done(new Error('Test invalidation (message is longer than allowed)'));",
          "1191:         socket.on('open', function () {",
          "1192:           socket.send('aasdasdakjhasdkjhasdkjhasdkjhasdkjhasdkjhasdkjha');",
          "1194:         socket.on('close', function () {",
          "1200:     it('should receive data when getting a message shorter than maxHttpBufferSize when polling', function (done) {",
          "1201:       var opts = { allowUpgrades: false, transports: ['polling'], maxHttpBufferSize: 5 };",
          "1202:       var engine = listen(opts, function (port) {",
          "1203:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "1204:         engine.on('connection', function (conn) {",
          "1205:           conn.on('message', function (msg) {",
          "1206:             expect(msg).to.be('a');",
          "1210:         socket.on('open', function () {",
          "1211:           socket.send('a');",
          "1216:     it('should arrive from server to client (ws)', function (done) {",
          "1217:       var opts = { allowUpgrades: false, transports: ['websocket'] };",
          "1218:       var engine = listen(opts, function (port) {",
          "1219:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1220:         engine.on('connection', function (conn) {",
          "1221:           conn.send('a');",
          "1223:         socket.on('open', function () {",
          "1224:           socket.on('message', function (msg) {",
          "1225:             expect(msg).to.be('a');",
          "1232:     it('should arrive from server to client (multiple, ws)', function (done) {",
          "1233:       var opts = { allowUpgrades: false, transports: ['websocket'] };",
          "1234:       var engine = listen(opts, function (port) {",
          "1235:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1236:         var expected = ['a', 'b', 'c'];",
          "1239:         engine.on('connection', function (conn) {",
          "1240:           conn.send('a');",
          "1241:           setTimeout(function () {",
          "1242:             conn.send('b');",
          "1243:             setTimeout(function () {",
          "1244:               conn.send('c');",
          "1248:           conn.on('close', function () {",
          "1249:             setTimeout(function () {",
          "1256:         socket.on('open', function () {",
          "1257:           socket.on('message', function (msg) {",
          "1264:     it('should arrive from server to client (multiple, no delay, ws)', function (done) {",
          "1265:       var opts = { allowUpgrades: false, transports: ['websocket'] };",
          "1266:       var engine = listen(opts, function (port) {",
          "1267:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1268:         var expected = ['a', 'b', 'c'];",
          "1271:         engine.on('connection', function (conn) {",
          "1272:           conn.on('close', function () {",
          "1273:             setTimeout(function () {",
          "1278:           conn.send('a');",
          "1279:           conn.send('b');",
          "1280:           conn.send('c');",
          "1284:         socket.on('open', function () {",
          "1285:           socket.on('message', function (msg) {",
          "1292:     it('should arrive when binary data is sent as Int8Array (ws)', function (done) {",
          "1298:       var opts = { allowUpgrades: false, transports: ['websocket'] };",
          "1299:       var engine = listen(opts, function (port) {",
          "1300:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1302:         engine.on('connection', function (conn) {",
          "1306:         socket.on('open', function () {",
          "1307:           socket.on('message', function (msg) {",
          "",
          "[Added Lines]",
          "1076:     it(\"should trigger force close before open for xhr\", function(done) {",
          "1077:       var opts = { transports: [\"polling\"] };",
          "1078:       listen(opts, function(port) {",
          "1079:         var socket = new eioc.Socket(\"http://localhost:%d\".s(port));",
          "1080:         socket.on(\"open\", function() {",
          "1081:           done(new Error(\"Test invalidation\"));",
          "1082:         });",
          "1083:         socket.on(\"close\", function(reason) {",
          "1084:           expect(reason).to.be(\"forced close\");",
          "1091:     it(\"should close transport upon ping timeout (ws)\", function(done) {",
          "1092:       var opts = {",
          "1093:         allowUpgrades: false,",
          "1094:         transports: [\"websocket\"],",
          "1095:         pingInterval: 50,",
          "1096:         pingTimeout: 30",
          "1097:       };",
          "1098:       var engine = listen(opts, function(port) {",
          "1099:         engine.on(\"connection\", function(conn) {",
          "1100:           conn.transport.on(\"close\", done);",
          "1101:         });",
          "1102:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1103:           transports: [\"websocket\"]",
          "1106:         socket.sendPacket = socket.onHeartbeat = function() {};",
          "1110:     it(\"should close transport upon ping timeout (polling)\", function(done) {",
          "1111:       var opts = {",
          "1112:         allowUpgrades: false,",
          "1113:         transports: [\"polling\"],",
          "1114:         pingInterval: 50,",
          "1115:         pingTimeout: 30",
          "1116:       };",
          "1117:       var engine = listen(opts, function(port) {",
          "1118:         engine.on(\"connection\", function(conn) {",
          "1119:           conn.transport.on(\"close\", done);",
          "1120:         });",
          "1121:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1122:           transports: [\"polling\"]",
          "1125:         socket.sendPacket = socket.onHeartbeat = function() {};",
          "1129:     it(\"should close transport upon parse error (ws)\", function(done) {",
          "1130:       var opts = { allowUpgrades: false, transports: [\"websocket\"] };",
          "1131:       var engine = listen(opts, function(port) {",
          "1132:         engine.on(\"connection\", function(conn) {",
          "1133:           conn.transport.on(\"close\", done);",
          "1134:         });",
          "1135:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1136:           transports: [\"websocket\"]",
          "1138:         socket.on(\"open\", function() {",
          "1139:           socket.transport.ws.send(\"invalid\");",
          "1144:     it(\"should close transport upon parse error (polling)\", function(done) {",
          "1145:       var opts = { allowUpgrades: false, transports: [\"polling\"] };",
          "1146:       var engine = listen(opts, function(port) {",
          "1147:         engine.on(\"connection\", function(conn) {",
          "1149:           conn.transport.on(\"close\", done);",
          "1150:         });",
          "1151:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1152:           transports: [\"polling\"]",
          "1154:         socket.on(\"open\", function() {",
          "1155:           socket.transport.doWrite(\"invalid\", function() {});",
          "1160:     it(\"should close upgrading transport upon socket close\", function(done) {",
          "1161:       var engine = listen(function(port) {",
          "1162:         engine.on(\"connection\", function(conn) {",
          "1163:           conn.on(\"upgrading\", function(transport) {",
          "1164:             transport.on(\"close\", done);",
          "1168:         eioc(\"ws://localhost:%d\".s(port));",
          "1172:     it(\"should close upgrading transport upon upgrade timeout\", function(done) {",
          "1174:       var engine = listen(opts, function(port) {",
          "1175:         engine.on(\"connection\", function(conn) {",
          "1176:           conn.on(\"upgrading\", function(transport) {",
          "1177:             transport.on(\"close\", done);",
          "1180:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "1181:         socket.on(\"upgrading\", function(transport) {",
          "1183:           transport.send = function() {};",
          "1188:     it(\"should not crash when messing with Object prototype\", function(done) {",
          "1189:       Object.prototype.foo = \"bar\"; // eslint-disable-line no-extend-native",
          "1190:       var engine = listen({ allowUpgrades: true }, function(port) {",
          "1191:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "1192:         socket.on(\"open\", function() {",
          "1194:           setTimeout(function() {",
          "1201:     describe(\"graceful close\", function() {",
          "1202:       function fixture(filename) {",
          "1203:         return (",
          "1204:           process.execPath + \" \" + path.join(__dirname, \"fixtures\", filename)",
          "1205:         );",
          "1208:       it(\"should stop socket and timers\", function(done) {",
          "1209:         exec(fixture(\"server-close.js\"), done);",
          "1212:       it(\"should stop upgraded socket and timers\", function(done) {",
          "1213:         exec(fixture(\"server-close-upgraded.js\"), done);",
          "1216:       it(\"should stop upgrading socket and timers\", function(done) {",
          "1217:         exec(fixture(\"server-close-upgrading.js\"), done);",
          "1222:   describe(\"messages\", function() {",
          "1225:     it(\"should arrive from server to client\", function(done) {",
          "1226:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "1227:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "1228:         engine.on(\"connection\", function(conn) {",
          "1229:           conn.send(\"a\");",
          "1231:         socket.on(\"open\", function() {",
          "1232:           socket.on(\"message\", function(msg) {",
          "1233:             expect(msg).to.be(\"a\");",
          "1240:     it(\"should arrive from server to client (multiple)\", function(done) {",
          "1241:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "1242:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "1243:         var expected = [\"a\", \"b\", \"c\"];",
          "1246:         engine.on(\"connection\", function(conn) {",
          "1247:           conn.send(\"a\");",
          "1250:           setTimeout(function() {",
          "1251:             conn.send(\"b\");",
          "1253:             setTimeout(function() {",
          "1256:               conn.send(\"c\");",
          "1261:           conn.on(\"close\", function() {",
          "1263:             setTimeout(function() {",
          "1269:         socket.on(\"open\", function() {",
          "1270:           socket.on(\"message\", function(msg) {",
          "1277:     it(\"should not be receiving data when getting a message longer than maxHttpBufferSize when polling\", function(done) {",
          "1278:       var opts = {",
          "1279:         allowUpgrades: false,",
          "1280:         transports: [\"polling\"],",
          "1281:         maxHttpBufferSize: 5",
          "1282:       };",
          "1283:       var engine = listen(opts, function(port) {",
          "1284:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "1285:         engine.on(\"connection\", function(conn) {",
          "1286:           conn.on(\"message\", function(msg) {",
          "1287:             done(",
          "1288:               new Error(\"Test invalidation (message is longer than allowed)\")",
          "1289:             );",
          "1292:         socket.on(\"open\", function() {",
          "1293:           socket.send(\"aasdasdakjhasdkjhasdkjhasdkjhasdkjhasdkjhasdkjha\");",
          "1295:         socket.on(\"close\", function() {",
          "1301:     it(\"should not be receiving data when getting a message longer than maxHttpBufferSize (websocket)\", function(done) {",
          "1303:       var engine = listen(opts, function(port) {",
          "1304:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1305:           transports: [\"websocket\"]",
          "1306:         });",
          "1307:         engine.on(\"connection\", function(conn) {",
          "1308:           conn.on(\"message\", function(msg) {",
          "1309:             done(",
          "1310:               new Error(\"Test invalidation (message is longer than allowed)\")",
          "1311:             );",
          "1314:         socket.on(\"open\", function() {",
          "1315:           socket.send(\"aasdasdakjhasdkjhasdkjhasdkjhasdkjhasdkjhasdkjha\");",
          "1317:         socket.on(\"close\", function() {",
          "1323:     it(\"should receive data when getting a message shorter than maxHttpBufferSize when polling\", function(done) {",
          "1324:       var opts = {",
          "1325:         allowUpgrades: false,",
          "1326:         transports: [\"polling\"],",
          "1327:         maxHttpBufferSize: 5",
          "1328:       };",
          "1329:       var engine = listen(opts, function(port) {",
          "1330:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "1331:         engine.on(\"connection\", function(conn) {",
          "1332:           conn.on(\"message\", function(msg) {",
          "1333:             expect(msg).to.be(\"a\");",
          "1337:         socket.on(\"open\", function() {",
          "1338:           socket.send(\"a\");",
          "1343:     it(\"should arrive from server to client (ws)\", function(done) {",
          "1344:       var opts = { allowUpgrades: false, transports: [\"websocket\"] };",
          "1345:       var engine = listen(opts, function(port) {",
          "1346:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1347:           transports: [\"websocket\"]",
          "1349:         engine.on(\"connection\", function(conn) {",
          "1350:           conn.send(\"a\");",
          "1351:         });",
          "1352:         socket.on(\"open\", function() {",
          "1353:           socket.on(\"message\", function(msg) {",
          "1354:             expect(msg).to.be(\"a\");",
          "1361:     it(\"should arrive from server to client (multiple, ws)\", function(done) {",
          "1362:       var opts = { allowUpgrades: false, transports: [\"websocket\"] };",
          "1363:       var engine = listen(opts, function(port) {",
          "1364:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1365:           transports: [\"websocket\"]",
          "1366:         });",
          "1367:         var expected = [\"a\", \"b\", \"c\"];",
          "1370:         engine.on(\"connection\", function(conn) {",
          "1371:           conn.send(\"a\");",
          "1372:           setTimeout(function() {",
          "1373:             conn.send(\"b\");",
          "1374:             setTimeout(function() {",
          "1375:               conn.send(\"c\");",
          "1379:           conn.on(\"close\", function() {",
          "1380:             setTimeout(function() {",
          "1387:         socket.on(\"open\", function() {",
          "1388:           socket.on(\"message\", function(msg) {",
          "1395:     it(\"should arrive from server to client (multiple, no delay, ws)\", function(done) {",
          "1396:       var opts = { allowUpgrades: false, transports: [\"websocket\"] };",
          "1397:       var engine = listen(opts, function(port) {",
          "1398:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1399:           transports: [\"websocket\"]",
          "1400:         });",
          "1401:         var expected = [\"a\", \"b\", \"c\"];",
          "1404:         engine.on(\"connection\", function(conn) {",
          "1405:           conn.on(\"close\", function() {",
          "1406:             setTimeout(function() {",
          "1411:           conn.send(\"a\");",
          "1412:           conn.send(\"b\");",
          "1413:           conn.send(\"c\");",
          "1417:         socket.on(\"open\", function() {",
          "1418:           socket.on(\"message\", function(msg) {",
          "1425:     it(\"should arrive when binary data is sent as Int8Array (ws)\", function(done) {",
          "1431:       var opts = { allowUpgrades: false, transports: [\"websocket\"] };",
          "1432:       var engine = listen(opts, function(port) {",
          "1433:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1434:           transports: [\"websocket\"]",
          "1435:         });",
          "1437:         engine.on(\"connection\", function(conn) {",
          "1441:         socket.on(\"open\", function() {",
          "1442:           socket.on(\"message\", function(msg) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1315:       });",
          "1316:     });",
          "1319:       var binaryData = new Int32Array(5);",
          "1320:       for (var i = 0; i < binaryData.length; i++) {",
          "1321:         binaryData[i] = (i + 100) * 9823;",
          "1322:       }",
          "1329:           conn.send(binaryData);",
          "1330:         });",
          "1334:             for (var i = 0, ii = 0; ii < binaryData.length; i += 4, ii++) {",
          "1335:               var num = msg.readInt32LE(i);",
          "1336:               expect(num).to.be((ii + 100) * 9823);",
          "",
          "[Removed Lines]",
          "1318:     it('should arrive when binary data is sent as Int32Array (ws)', function (done) {",
          "1324:       var opts = { allowUpgrades: false, transports: ['websocket'] };",
          "1325:       var engine = listen(opts, function (port) {",
          "1326:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1328:         engine.on('connection', function (conn) {",
          "1332:         socket.on('open', function () {",
          "1333:           socket.on('message', function (msg) {",
          "",
          "[Added Lines]",
          "1453:     it(\"should arrive when binary data is sent as Int32Array (ws)\", function(done) {",
          "1459:       var opts = { allowUpgrades: false, transports: [\"websocket\"] };",
          "1460:       var engine = listen(opts, function(port) {",
          "1461:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1462:           transports: [\"websocket\"]",
          "1463:         });",
          "1465:         engine.on(\"connection\", function(conn) {",
          "1469:         socket.on(\"open\", function() {",
          "1470:           socket.on(\"message\", function(msg) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1341:       });",
          "1342:     });",
          "1345:       var binaryData = new Int32Array(5);",
          "1346:       for (var i = 0; i < binaryData.length; i++) {",
          "1347:         binaryData[i] = (i + 100) * 9823;",
          "1348:       }",
          "1355:           conn.send(binaryData.buffer);",
          "1356:         });",
          "1360:             for (var i = 0, ii = 0; ii < binaryData.length; i += 4, ii++) {",
          "1361:               var num = msg.readInt32LE(i);",
          "1362:               expect(num).to.be((ii + 100) * 9823);",
          "",
          "[Removed Lines]",
          "1344:     it('should arrive when binary data is sent as Int32Array, given as ArrayBuffer(ws)', function (done) {",
          "1350:       var opts = { allowUpgrades: false, transports: ['websocket'] };",
          "1351:       var engine = listen(opts, function (port) {",
          "1352:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1354:         engine.on('connection', function (conn) {",
          "1358:         socket.on('open', function () {",
          "1359:           socket.on('message', function (msg) {",
          "",
          "[Added Lines]",
          "1481:     it(\"should arrive when binary data is sent as Int32Array, given as ArrayBuffer(ws)\", function(done) {",
          "1487:       var opts = { allowUpgrades: false, transports: [\"websocket\"] };",
          "1488:       var engine = listen(opts, function(port) {",
          "1489:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1490:           transports: [\"websocket\"]",
          "1491:         });",
          "1493:         engine.on(\"connection\", function(conn) {",
          "1497:         socket.on(\"open\", function() {",
          "1498:           socket.on(\"message\", function(msg) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1367:       });",
          "1368:     });",
          "1371:       var binaryData = Buffer.allocUnsafe(5);",
          "1372:       for (var i = 0; i < binaryData.length; i++) {",
          "1373:         binaryData.writeInt8(i, i);",
          "1374:       }",
          "1381:           conn.send(binaryData);",
          "1382:         });",
          "1386:             for (var i = 0; i < binaryData.length; i++) {",
          "1387:               var num = msg.readInt8(i);",
          "1388:               expect(num).to.be(i);",
          "",
          "[Removed Lines]",
          "1370:     it('should arrive when binary data is sent as Buffer (ws)', function (done) {",
          "1376:       var opts = { allowUpgrades: false, transports: ['websocket'] };",
          "1377:       var engine = listen(opts, function (port) {",
          "1378:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1380:         engine.on('connection', function (conn) {",
          "1384:         socket.on('open', function () {",
          "1385:           socket.on('message', function (msg) {",
          "",
          "[Added Lines]",
          "1509:     it(\"should arrive when binary data is sent as Buffer (ws)\", function(done) {",
          "1515:       var opts = { allowUpgrades: false, transports: [\"websocket\"] };",
          "1516:       var engine = listen(opts, function(port) {",
          "1517:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1518:           transports: [\"websocket\"]",
          "1519:         });",
          "1521:         engine.on(\"connection\", function(conn) {",
          "1525:         socket.on(\"open\", function() {",
          "1526:           socket.on(\"message\", function(msg) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1393:       });",
          "1394:     });",
          "1397:       var binaryData = Buffer.allocUnsafe(5);",
          "1398:       for (var i = 0; i < binaryData.length; i++) {",
          "1399:         binaryData.writeInt8(i, i);",
          "1400:       }",
          "1407:           conn.send(binaryData);",
          "1408:         });",
          "1412:             for (var i = 0; i < binaryData.length; i++) {",
          "1413:               var num = msg.readInt8(i);",
          "1414:               expect(num).to.be(i);",
          "",
          "[Removed Lines]",
          "1396:     it('should arrive when binary data sent as Buffer (polling)', function (done) {",
          "1402:       var opts = { allowUpgrades: false, transports: ['polling'] };",
          "1403:       var engine = listen(opts, function (port) {",
          "1404:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['polling'] });",
          "1406:         engine.on('connection', function (conn) {",
          "1410:         socket.on('open', function () {",
          "1411:           socket.on('message', function (msg) {",
          "",
          "[Added Lines]",
          "1537:     it(\"should arrive when binary data sent as Buffer (polling)\", function(done) {",
          "1543:       var opts = { allowUpgrades: false, transports: [\"polling\"] };",
          "1544:       var engine = listen(opts, function(port) {",
          "1545:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1546:           transports: [\"polling\"]",
          "1547:         });",
          "1549:         engine.on(\"connection\", function(conn) {",
          "1553:         socket.on(\"open\", function() {",
          "1554:           socket.on(\"message\", function(msg) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1420:       });",
          "1421:     });",
          "1424:       var binaryData = Buffer.allocUnsafe(5);",
          "1425:       for (var i = 0; i < binaryData.length; i++) {",
          "1426:         binaryData.writeInt8(i, i);",
          "1427:       }",
          "1435:           conn.send(binaryData);",
          "1436:         });",
          "1440:             expect(msg instanceof ArrayBuffer).to.be(true);",
          "1441:             var intArray = new Int8Array(msg);",
          "1442:             for (var i = 0; i < binaryData.length; i++) {",
          "",
          "[Removed Lines]",
          "1423:     it('should arrive as ArrayBuffer if requested when binary data sent as Buffer (ws)', function (done) {",
          "1429:       var opts = { allowUpgrades: false, transports: ['websocket'] };",
          "1430:       var engine = listen(opts, function (port) {",
          "1431:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1432:         socket.binaryType = 'arraybuffer';",
          "1434:         engine.on('connection', function (conn) {",
          "1438:         socket.on('open', function () {",
          "1439:           socket.on('message', function (msg) {",
          "",
          "[Added Lines]",
          "1566:     it(\"should arrive as ArrayBuffer if requested when binary data sent as Buffer (ws)\", function(done) {",
          "1572:       var opts = { allowUpgrades: false, transports: [\"websocket\"] };",
          "1573:       var engine = listen(opts, function(port) {",
          "1574:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1575:           transports: [\"websocket\"]",
          "1576:         });",
          "1577:         socket.binaryType = \"arraybuffer\";",
          "1579:         engine.on(\"connection\", function(conn) {",
          "1583:         socket.on(\"open\", function() {",
          "1584:           socket.on(\"message\", function(msg) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1449:       });",
          "1450:     });",
          "1453:       var binaryData = Buffer.allocUnsafe(5);",
          "1454:       for (var i = 0; i < binaryData.length; i++) {",
          "1455:         binaryData.writeInt8(i, i);",
          "1456:       }",
          "1464:           conn.send(binaryData);",
          "1465:         });",
          "1469:             expect(msg instanceof ArrayBuffer).to.be(true);",
          "1470:             var intArray = new Int8Array(msg);",
          "1471:             for (var i = 0; i < binaryData.length; i++) {",
          "",
          "[Removed Lines]",
          "1452:     it('should arrive as ArrayBuffer if requested when binary data sent as Buffer (polling)', function (done) {",
          "1458:       var opts = { allowUpgrades: false, transports: ['polling'] };",
          "1459:       var engine = listen(opts, function (port) {",
          "1460:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['polling'] });",
          "1461:         socket.binaryType = 'arraybuffer';",
          "1463:         engine.on('connection', function (conn) {",
          "1467:         socket.on('open', function () {",
          "1468:           socket.on('message', function (msg) {",
          "",
          "[Added Lines]",
          "1597:     it(\"should arrive as ArrayBuffer if requested when binary data sent as Buffer (polling)\", function(done) {",
          "1603:       var opts = { allowUpgrades: false, transports: [\"polling\"] };",
          "1604:       var engine = listen(opts, function(port) {",
          "1605:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1606:           transports: [\"polling\"]",
          "1607:         });",
          "1608:         socket.binaryType = \"arraybuffer\";",
          "1610:         engine.on(\"connection\", function(conn) {",
          "1614:         socket.on(\"open\", function() {",
          "1615:           socket.on(\"message\", function(msg) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1478:       });",
          "1479:     });",
          "1484:           var totalEvents = 4;",
          "1487:             expect(sock).to.be(socket);",
          "1489:             --totalEvents || done();",
          "1490:           });",
          "1493:             --totalEvents || done();",
          "1494:           });",
          "1497:             expect(sock).to.be(socket);",
          "1498:             expect(socket.writeBuffer.length).to.be(0);",
          "1499:             --totalEvents || done();",
          "1500:           });",
          "1502:             expect(socket.writeBuffer.length).to.be(0);",
          "1503:             --totalEvents || done();",
          "1504:           });",
          "1507:         });",
          "1510:       });",
          "1511:     });",
          "1542:             }",
          "1543:           });",
          "1544:         });",
          "1555:           conn.send(shi);",
          "1556:           conn.send(shi2);",
          "1560:               expect(msg).to.be(shi);",
          "1562:                 expect(msg2).to.be(shi2);",
          "1563:                 done();",
          "1564:               });",
          "1565:             });",
          "1566:           });",
          "1567:         });",
          "1572:               expect(msg).to.be(shi);",
          "1574:                 expect(msg2).to.be(shi2);",
          "1576:                 socket.send(shi);",
          "1577:                 socket.send(shi2);",
          "1578:               });",
          "",
          "[Removed Lines]",
          "1481:     it('should trigger a flush/drain event', function (done) {",
          "1482:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "1483:         engine.on('connection', function (socket) {",
          "1486:           engine.on('flush', function (sock, buf) {",
          "1488:             expect(buf).to.be.an('array');",
          "1491:           socket.on('flush', function (buf) {",
          "1492:             expect(buf).to.be.an('array');",
          "1496:           engine.on('drain', function (sock) {",
          "1501:           socket.on('drain', function () {",
          "1506:           socket.send('aaaa');",
          "1509:         eioc('ws://localhost:%d'.s(port));",
          "1513:     it('should interleave with pongs if many messages buffered ' +",
          "1514:        'after connection open', function (done) {",
          "1515:       this.slow(4000);",
          "1516:       this.timeout(8000);",
          "1518:       var opts = {",
          "1519:         transports: ['websocket'],",
          "1520:         pingInterval: 200,",
          "1521:         pingTimeout: 100",
          "1522:       };",
          "1524:       var engine = listen(opts, function (port) {",
          "1525:         var messageCount = 100;",
          "1526:         var messagePayload = new Array(256 * 256).join('a');",
          "1527:         var connection = null;",
          "1528:         engine.on('connection', function (conn) {",
          "1529:           connection = conn;",
          "1530:         });",
          "1531:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1532:         socket.on('open', function () {",
          "1533:           for (var i = 0; i < messageCount; i++) {",
          "1535:             connection.send(messagePayload + '|message: ' + i); // does not work",
          "1536:           }",
          "1537:           var receivedCount = 0;",
          "1538:           socket.on('message', function (msg) {",
          "1539:             receivedCount += 1;",
          "1540:             if (receivedCount === messageCount) {",
          "1541:               done();",
          "1545:       });",
          "1546:     });",
          "1548:     it('should support chinese', function (done) {",
          "1549:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "1550:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "1551:         var shi = '\u77f3\u5ba4\u8a69\u58eb\u65bd\u6c0f\uff0c\u55dc\u7345\uff0c\u8a93\u98df\u5341\u7345\u3002';",
          "1552:         var shi2 = '\u6c0f\u6642\u6642\u9069\u5e02\u8996\u7345\u3002';",
          "1553:         engine.on('connection', function (conn) {",
          "1554:           conn.send('.');",
          "1557:           conn.once('message', function (msg0) {",
          "1558:             expect(msg0).to.be('.');",
          "1559:             conn.once('message', function (msg) {",
          "1561:               conn.once('message', function (msg2) {",
          "1568:         socket.on('open', function () {",
          "1569:           socket.once('message', function (msg0) {",
          "1570:             expect(msg0).to.be('.');",
          "1571:             socket.once('message', function (msg) {",
          "1573:               socket.once('message', function (msg2) {",
          "1575:                 socket.send('.');",
          "",
          "[Added Lines]",
          "1628:     it(\"should trigger a flush/drain event\", function(done) {",
          "1629:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "1630:         engine.on(\"connection\", function(socket) {",
          "1633:           engine.on(\"flush\", function(sock, buf) {",
          "1635:             expect(buf).to.be.an(\"array\");",
          "1638:           socket.on(\"flush\", function(buf) {",
          "1639:             expect(buf).to.be.an(\"array\");",
          "1643:           engine.on(\"drain\", function(sock) {",
          "1648:           socket.on(\"drain\", function() {",
          "1653:           socket.send(\"aaaa\");",
          "1656:         eioc(\"ws://localhost:%d\".s(port));",
          "1660:     it(",
          "1661:       \"should interleave with pongs if many messages buffered \" +",
          "1662:         \"after connection open\",",
          "1663:       function(done) {",
          "1664:         this.slow(4000);",
          "1665:         this.timeout(8000);",
          "1667:         var opts = {",
          "1668:           transports: [\"websocket\"],",
          "1669:           pingInterval: 200,",
          "1670:           pingTimeout: 100",
          "1671:         };",
          "1673:         var engine = listen(opts, function(port) {",
          "1674:           var messageCount = 100;",
          "1675:           var messagePayload = new Array(256 * 256).join(\"a\");",
          "1676:           var connection = null;",
          "1677:           engine.on(\"connection\", function(conn) {",
          "1678:             connection = conn;",
          "1679:           });",
          "1680:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1681:             transports: [\"websocket\"]",
          "1682:           });",
          "1683:           socket.on(\"open\", function() {",
          "1684:             for (var i = 0; i < messageCount; i++) {",
          "1686:               connection.send(messagePayload + \"|message: \" + i); // does not work",
          "1688:             var receivedCount = 0;",
          "1689:             socket.on(\"message\", function(msg) {",
          "1690:               receivedCount += 1;",
          "1691:               if (receivedCount === messageCount) {",
          "1692:                 done();",
          "1693:               }",
          "1694:             });",
          "1697:       }",
          "1698:     );",
          "1700:     it(\"should support chinese\", function(done) {",
          "1701:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "1702:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "1703:         var shi = \"\u77f3\u5ba4\u8a69\u58eb\u65bd\u6c0f\uff0c\u55dc\u7345\uff0c\u8a93\u98df\u5341\u7345\u3002\";",
          "1704:         var shi2 = \"\u6c0f\u6642\u6642\u9069\u5e02\u8996\u7345\u3002\";",
          "1705:         engine.on(\"connection\", function(conn) {",
          "1706:           conn.send(\".\");",
          "1709:           conn.once(\"message\", function(msg0) {",
          "1710:             expect(msg0).to.be(\".\");",
          "1711:             conn.once(\"message\", function(msg) {",
          "1713:               conn.once(\"message\", function(msg2) {",
          "1720:         socket.on(\"open\", function() {",
          "1721:           socket.once(\"message\", function(msg0) {",
          "1722:             expect(msg0).to.be(\".\");",
          "1723:             socket.once(\"message\", function(msg) {",
          "1725:               socket.once(\"message\", function(msg2) {",
          "1727:                 socket.send(\".\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1582:       });",
          "1583:     });",
          "1586:       if (UWS_ENGINE && NODE_LT_443) return done();",
          "1587:       var srvOpts = {",
          "1591:         requestCert: true,",
          "1592:         rejectUnauthorized: true",
          "1593:       };",
          "1595:       var opts = {",
          "1600:       };",
          "1603:         res.writeHead(200);",
          "1605:       });",
          "1608:       engine.attach(srv);",
          "1610:         var port = srv.address().port;",
          "1616:             done();",
          "1617:           });",
          "1618:         });",
          "1622:         });",
          "1623:       });",
          "1624:     });",
          "1627:       if (UWS_ENGINE && NODE_LT_443) return done();",
          "1628:       var srvOpts = {",
          "1632:         requestCert: true,",
          "1633:         rejectUnauthorized: false",
          "1634:       };",
          "1636:       var opts = {",
          "1639:       };",
          "1642:         res.writeHead(200);",
          "1644:       });",
          "1647:       engine.attach(srv);",
          "1649:         var port = srv.address().port;",
          "1655:             done();",
          "1656:           });",
          "1657:         });",
          "1661:         });",
          "1662:       });",
          "1663:     });",
          "1666:       var srvOpts = {",
          "1670:         requestCert: true,",
          "1671:         rejectUnauthorized: true",
          "1672:       };",
          "1674:       var opts = {",
          "1679:       };",
          "1682:         res.writeHead(200);",
          "1684:       });",
          "1687:       engine.attach(srv);",
          "1689:         var port = srv.address().port;",
          "1695:             done();",
          "1696:           });",
          "1697:         });",
          "1701:         });",
          "1702:       });",
          "1703:     });",
          "1706:       if (UWS_ENGINE && NODE_LT_443) return done();",
          "1707:       var srvOpts = {",
          "1711:         requestCert: true,",
          "1712:         rejectUnauthorized: true",
          "1713:       };",
          "1715:       var opts = {",
          "1719:       };",
          "1722:         res.writeHead(200);",
          "1724:       });",
          "1727:       engine.attach(srv);",
          "1729:         var port = srv.address().port;",
          "1735:             done();",
          "1736:           });",
          "1737:         });",
          "1741:         });",
          "1742:       });",
          "1743:     });",
          "1746:       if (UWS_ENGINE && NODE_LT_443) return done();",
          "1747:       var srvOpts = {",
          "1751:         requestCert: true,",
          "1752:         rejectUnauthorized: true",
          "1753:       };",
          "1755:       var opts = {",
          "1759:       };",
          "1762:         res.writeHead(200);",
          "1764:       });",
          "1767:       engine.attach(srv);",
          "1769:         var port = srv.address().port;",
          "1775:             done();",
          "1776:           });",
          "1777:         });",
          "1781:         });",
          "1782:       });",
          "1783:     });",
          "1784:   });",
          "1791:           var totalEvents = 2;",
          "1796:             expect(socket.writeBuffer.length).to.eql(2);",
          "1797:           });",
          "1799:             expect(socket.writeBuffer.length).to.eql(--totalEvents);",
          "1800:             totalEvents || done();",
          "1801:           });",
          "1802:         });",
          "1803:       });",
          "1808:           var totalEvents = 2;",
          "1813:             expect(socket.writeBuffer.length).to.eql(2);",
          "1814:           });",
          "1816:             expect(socket.writeBuffer.length).to.eql(--totalEvents);",
          "1817:             totalEvents || done();",
          "1818:           });",
          "",
          "[Removed Lines]",
          "1585:     it('should send and receive data with key and cert (polling)', function (done) {",
          "1588:         key: fs.readFileSync('test/fixtures/server.key'),",
          "1589:         cert: fs.readFileSync('test/fixtures/server.crt'),",
          "1590:         ca: fs.readFileSync('test/fixtures/ca.crt'),",
          "1596:         key: fs.readFileSync('test/fixtures/client.key'),",
          "1597:         cert: fs.readFileSync('test/fixtures/client.crt'),",
          "1598:         ca: fs.readFileSync('test/fixtures/ca.crt'),",
          "1599:         transports: ['polling']",
          "1602:       var srv = https.createServer(srvOpts, function (req, res) {",
          "1604:         res.end('hello world\\n');",
          "1607:       var engine = eio({ transports: ['polling'], allowUpgrades: false });",
          "1609:       srv.listen(function () {",
          "1611:         var socket = new eioc.Socket('https://localhost:%d'.s(port), opts);",
          "1613:         engine.on('connection', function (conn) {",
          "1614:           conn.on('message', function (msg) {",
          "1615:             expect(msg).to.be('hello');",
          "1620:         socket.on('open', function () {",
          "1621:           socket.send('hello');",
          "1626:     it('should send and receive data with ca when not requiring auth (polling)', function (done) {",
          "1629:         key: fs.readFileSync('test/fixtures/server.key'),",
          "1630:         cert: fs.readFileSync('test/fixtures/server.crt'),",
          "1631:         ca: fs.readFileSync('test/fixtures/ca.crt'),",
          "1637:         ca: fs.readFileSync('test/fixtures/ca.crt'),",
          "1638:         transports: ['polling']",
          "1641:       var srv = https.createServer(srvOpts, function (req, res) {",
          "1643:         res.end('hello world\\n');",
          "1646:       var engine = eio({ transports: ['polling'], allowUpgrades: false });",
          "1648:       srv.listen(function () {",
          "1650:         var socket = new eioc.Socket('https://localhost:%d'.s(port), opts);",
          "1652:         engine.on('connection', function (conn) {",
          "1653:           conn.on('message', function (msg) {",
          "1654:             expect(msg).to.be('hello');",
          "1659:         socket.on('open', function () {",
          "1660:           socket.send('hello');",
          "1665:     it('should send and receive data with key and cert (ws)', function (done) {",
          "1667:         key: fs.readFileSync('test/fixtures/server.key'),",
          "1668:         cert: fs.readFileSync('test/fixtures/server.crt'),",
          "1669:         ca: fs.readFileSync('test/fixtures/ca.crt'),",
          "1675:         key: fs.readFileSync('test/fixtures/client.key'),",
          "1676:         cert: fs.readFileSync('test/fixtures/client.crt'),",
          "1677:         ca: fs.readFileSync('test/fixtures/ca.crt'),",
          "1678:         transports: ['websocket']",
          "1681:       var srv = https.createServer(srvOpts, function (req, res) {",
          "1683:         res.end('hello world\\n');",
          "1686:       var engine = eio({ transports: ['websocket'], allowUpgrades: false });",
          "1688:       srv.listen(function () {",
          "1690:         var socket = new eioc.Socket('https://localhost:%d'.s(port), opts);",
          "1692:         engine.on('connection', function (conn) {",
          "1693:           conn.on('message', function (msg) {",
          "1694:             expect(msg).to.be('hello');",
          "1699:         socket.on('open', function () {",
          "1700:           socket.send('hello');",
          "1705:     it('should send and receive data with pfx (polling)', function (done) {",
          "1708:         key: fs.readFileSync('test/fixtures/server.key'),",
          "1709:         cert: fs.readFileSync('test/fixtures/server.crt'),",
          "1710:         ca: fs.readFileSync('test/fixtures/ca.crt'),",
          "1716:         pfx: fs.readFileSync('test/fixtures/client.pfx'),",
          "1717:         ca: fs.readFileSync('test/fixtures/ca.crt'),",
          "1718:         transports: ['polling']",
          "1721:       var srv = https.createServer(srvOpts, function (req, res) {",
          "1723:         res.end('hello world\\n');",
          "1726:       var engine = eio({ transports: ['polling'], allowUpgrades: false });",
          "1728:       srv.listen(function () {",
          "1730:         var socket = new eioc.Socket('https://localhost:%d'.s(port), opts);",
          "1732:         engine.on('connection', function (conn) {",
          "1733:           conn.on('message', function (msg) {",
          "1734:             expect(msg).to.be('hello');",
          "1739:         socket.on('open', function () {",
          "1740:           socket.send('hello');",
          "1745:     it('should send and receive data with pfx (ws)', function (done) {",
          "1748:         key: fs.readFileSync('test/fixtures/server.key'),",
          "1749:         cert: fs.readFileSync('test/fixtures/server.crt'),",
          "1750:         ca: fs.readFileSync('test/fixtures/ca.crt'),",
          "1756:         pfx: fs.readFileSync('test/fixtures/client.pfx'),",
          "1757:         ca: fs.readFileSync('test/fixtures/ca.crt'),",
          "1758:         transports: ['websocket']",
          "1761:       var srv = https.createServer(srvOpts, function (req, res) {",
          "1763:         res.end('hello world\\n');",
          "1766:       var engine = eio({ transports: ['websocket'], allowUpgrades: false });",
          "1768:       srv.listen(function () {",
          "1770:         var socket = new eioc.Socket('https://localhost:%d'.s(port), opts);",
          "1772:         engine.on('connection', function (conn) {",
          "1773:           conn.on('message', function (msg) {",
          "1774:             expect(msg).to.be('hello');",
          "1779:         socket.on('open', function () {",
          "1780:           socket.send('hello');",
          "1786:   describe('send', function () {",
          "1787:     describe('writeBuffer', function () {",
          "1788:       it('should not empty until `drain` event (polling)', function (done) {",
          "1789:         listen({ allowUpgrades: false }, function (port) {",
          "1790:           var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['polling'] });",
          "1792:           socket.on('open', function () {",
          "1793:             socket.send('a');",
          "1794:             socket.send('b');",
          "1798:           socket.transport.on('drain', function () {",
          "1805:       it('should not empty until `drain` event (websocket)', function (done) {",
          "1806:         listen({ allowUpgrades: false }, function (port) {",
          "1807:           var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1809:           socket.on('open', function () {",
          "1810:             socket.send('a');",
          "1811:             socket.send('b');",
          "1815:           socket.transport.on('drain', function () {",
          "",
          "[Added Lines]",
          "1737:     it(\"should send and receive data with key and cert (polling)\", function(done) {",
          "1740:         key: fs.readFileSync(\"test/fixtures/server.key\"),",
          "1741:         cert: fs.readFileSync(\"test/fixtures/server.crt\"),",
          "1742:         ca: fs.readFileSync(\"test/fixtures/ca.crt\"),",
          "1748:         key: fs.readFileSync(\"test/fixtures/client.key\"),",
          "1749:         cert: fs.readFileSync(\"test/fixtures/client.crt\"),",
          "1750:         ca: fs.readFileSync(\"test/fixtures/ca.crt\"),",
          "1751:         transports: [\"polling\"]",
          "1754:       var srv = https.createServer(srvOpts, function(req, res) {",
          "1756:         res.end(\"hello world\\n\");",
          "1759:       var engine = eio({ transports: [\"polling\"], allowUpgrades: false });",
          "1761:       srv.listen(function() {",
          "1763:         var socket = new eioc.Socket(\"https://localhost:%d\".s(port), opts);",
          "1765:         engine.on(\"connection\", function(conn) {",
          "1766:           conn.on(\"message\", function(msg) {",
          "1767:             expect(msg).to.be(\"hello\");",
          "1772:         socket.on(\"open\", function() {",
          "1773:           socket.send(\"hello\");",
          "1778:     it(\"should send and receive data with ca when not requiring auth (polling)\", function(done) {",
          "1781:         key: fs.readFileSync(\"test/fixtures/server.key\"),",
          "1782:         cert: fs.readFileSync(\"test/fixtures/server.crt\"),",
          "1783:         ca: fs.readFileSync(\"test/fixtures/ca.crt\"),",
          "1789:         ca: fs.readFileSync(\"test/fixtures/ca.crt\"),",
          "1790:         transports: [\"polling\"]",
          "1793:       var srv = https.createServer(srvOpts, function(req, res) {",
          "1795:         res.end(\"hello world\\n\");",
          "1798:       var engine = eio({ transports: [\"polling\"], allowUpgrades: false });",
          "1800:       srv.listen(function() {",
          "1802:         var socket = new eioc.Socket(\"https://localhost:%d\".s(port), opts);",
          "1804:         engine.on(\"connection\", function(conn) {",
          "1805:           conn.on(\"message\", function(msg) {",
          "1806:             expect(msg).to.be(\"hello\");",
          "1811:         socket.on(\"open\", function() {",
          "1812:           socket.send(\"hello\");",
          "1817:     it(\"should send and receive data with key and cert (ws)\", function(done) {",
          "1819:         key: fs.readFileSync(\"test/fixtures/server.key\"),",
          "1820:         cert: fs.readFileSync(\"test/fixtures/server.crt\"),",
          "1821:         ca: fs.readFileSync(\"test/fixtures/ca.crt\"),",
          "1827:         key: fs.readFileSync(\"test/fixtures/client.key\"),",
          "1828:         cert: fs.readFileSync(\"test/fixtures/client.crt\"),",
          "1829:         ca: fs.readFileSync(\"test/fixtures/ca.crt\"),",
          "1830:         transports: [\"websocket\"]",
          "1833:       var srv = https.createServer(srvOpts, function(req, res) {",
          "1835:         res.end(\"hello world\\n\");",
          "1838:       var engine = eio({ transports: [\"websocket\"], allowUpgrades: false });",
          "1840:       srv.listen(function() {",
          "1842:         var socket = new eioc.Socket(\"https://localhost:%d\".s(port), opts);",
          "1844:         engine.on(\"connection\", function(conn) {",
          "1845:           conn.on(\"message\", function(msg) {",
          "1846:             expect(msg).to.be(\"hello\");",
          "1851:         socket.on(\"open\", function() {",
          "1852:           socket.send(\"hello\");",
          "1857:     it(\"should send and receive data with pfx (polling)\", function(done) {",
          "1860:         key: fs.readFileSync(\"test/fixtures/server.key\"),",
          "1861:         cert: fs.readFileSync(\"test/fixtures/server.crt\"),",
          "1862:         ca: fs.readFileSync(\"test/fixtures/ca.crt\"),",
          "1868:         pfx: fs.readFileSync(\"test/fixtures/client.pfx\"),",
          "1869:         ca: fs.readFileSync(\"test/fixtures/ca.crt\"),",
          "1870:         transports: [\"polling\"]",
          "1873:       var srv = https.createServer(srvOpts, function(req, res) {",
          "1875:         res.end(\"hello world\\n\");",
          "1878:       var engine = eio({ transports: [\"polling\"], allowUpgrades: false });",
          "1880:       srv.listen(function() {",
          "1882:         var socket = new eioc.Socket(\"https://localhost:%d\".s(port), opts);",
          "1884:         engine.on(\"connection\", function(conn) {",
          "1885:           conn.on(\"message\", function(msg) {",
          "1886:             expect(msg).to.be(\"hello\");",
          "1891:         socket.on(\"open\", function() {",
          "1892:           socket.send(\"hello\");",
          "1897:     it(\"should send and receive data with pfx (ws)\", function(done) {",
          "1900:         key: fs.readFileSync(\"test/fixtures/server.key\"),",
          "1901:         cert: fs.readFileSync(\"test/fixtures/server.crt\"),",
          "1902:         ca: fs.readFileSync(\"test/fixtures/ca.crt\"),",
          "1908:         pfx: fs.readFileSync(\"test/fixtures/client.pfx\"),",
          "1909:         ca: fs.readFileSync(\"test/fixtures/ca.crt\"),",
          "1910:         transports: [\"websocket\"]",
          "1913:       var srv = https.createServer(srvOpts, function(req, res) {",
          "1915:         res.end(\"hello world\\n\");",
          "1918:       var engine = eio({ transports: [\"websocket\"], allowUpgrades: false });",
          "1920:       srv.listen(function() {",
          "1922:         var socket = new eioc.Socket(\"https://localhost:%d\".s(port), opts);",
          "1924:         engine.on(\"connection\", function(conn) {",
          "1925:           conn.on(\"message\", function(msg) {",
          "1926:             expect(msg).to.be(\"hello\");",
          "1931:         socket.on(\"open\", function() {",
          "1932:           socket.send(\"hello\");",
          "1938:   describe(\"send\", function() {",
          "1939:     describe(\"writeBuffer\", function() {",
          "1940:       it(\"should not empty until `drain` event (polling)\", function(done) {",
          "1941:         listen({ allowUpgrades: false }, function(port) {",
          "1942:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1943:             transports: [\"polling\"]",
          "1944:           });",
          "1946:           socket.on(\"open\", function() {",
          "1947:             socket.send(\"a\");",
          "1948:             socket.send(\"b\");",
          "1952:           socket.transport.on(\"drain\", function() {",
          "1959:       it(\"should not empty until `drain` event (websocket)\", function(done) {",
          "1960:         listen({ allowUpgrades: false }, function(port) {",
          "1961:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1962:             transports: [\"websocket\"]",
          "1963:           });",
          "1965:           socket.on(\"open\", function() {",
          "1966:             socket.send(\"a\");",
          "1967:             socket.send(\"b\");",
          "1971:           socket.transport.on(\"drain\", function() {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1820:       });",
          "1821:     });",
          "1827:           var i = 0;",
          "1828:           var j = 0;",
          "1832:               conn.send(msg);",
          "1833:             });",
          "1834:           });",
          "1839:               if (++i < 3) {",
          "1840:                 expect(i).to.eql(j);",
          "",
          "[Removed Lines]",
          "1823:     describe('callback', function () {",
          "1824:       it('should execute in order when message sent (client) (polling)', function (done) {",
          "1825:         var engine = listen({ allowUpgrades: false }, function (port) {",
          "1826:           var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['polling'] });",
          "1830:           engine.on('connection', function (conn) {",
          "1831:             conn.on('message', function (msg) {",
          "1836:           socket.on('open', function () {",
          "1837:             socket.on('message', function (msg) {",
          "",
          "[Added Lines]",
          "1979:     describe(\"callback\", function() {",
          "1980:       it(\"should execute in order when message sent (client) (polling)\", function(done) {",
          "1981:         var engine = listen({ allowUpgrades: false }, function(port) {",
          "1982:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "1983:             transports: [\"polling\"]",
          "1984:           });",
          "1988:           engine.on(\"connection\", function(conn) {",
          "1989:             conn.on(\"message\", function(msg) {",
          "1994:           socket.on(\"open\", function() {",
          "1995:             socket.on(\"message\", function(msg) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1844:               }",
          "1845:             });",
          "1851:             }",
          "1853:             sendFn();",
          "",
          "[Removed Lines]",
          "1847:             function sendFn () {",
          "1848:               socket.send(j, (function (value) {",
          "1849:                 j++;",
          "1850:               })(j));",
          "",
          "[Added Lines]",
          "2005:             function sendFn() {",
          "2006:               socket.send(",
          "2007:                 j,",
          "2008:                 (function(value) {",
          "2009:                   j++;",
          "2010:                 })(j)",
          "2011:               );",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1855:         });",
          "1856:       });",
          "1861:           var i = 0;",
          "1862:           var j = 0;",
          "1866:               conn.send(msg);",
          "1867:             });",
          "1868:           });",
          "1873:               if (++i < 3) {",
          "1874:                 expect(i).to.eql(j);",
          "",
          "[Removed Lines]",
          "1858:       it('should execute in order when message sent (client) (websocket)', function (done) {",
          "1859:         var engine = listen({ allowUpgrades: false }, function (port) {",
          "1860:           var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1864:           engine.on('connection', function (conn) {",
          "1865:             conn.on('message', function (msg) {",
          "1870:           socket.on('open', function () {",
          "1871:             socket.on('message', function (msg) {",
          "",
          "[Added Lines]",
          "2019:       it(\"should execute in order when message sent (client) (websocket)\", function(done) {",
          "2020:         var engine = listen({ allowUpgrades: false }, function(port) {",
          "2021:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "2022:             transports: [\"websocket\"]",
          "2023:           });",
          "2027:           engine.on(\"connection\", function(conn) {",
          "2028:             conn.on(\"message\", function(msg) {",
          "2033:           socket.on(\"open\", function() {",
          "2034:             socket.on(\"message\", function(msg) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1878:               }",
          "1879:             });",
          "1885:             }",
          "1887:             sendFn();",
          "",
          "[Removed Lines]",
          "1881:             function sendFn () {",
          "1882:               socket.send(j, (function (value) {",
          "1883:                 j++;",
          "1884:               })(j));",
          "",
          "[Added Lines]",
          "2044:             function sendFn() {",
          "2045:               socket.send(",
          "2046:                 j,",
          "2047:                 (function(value) {",
          "2048:                   j++;",
          "2049:                 })(j)",
          "2050:               );",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1889:         });",
          "1890:       });",
          "1895:           var i = 0;",
          "1896:           var lastCbFired = 0;",
          "1900:               conn.send(msg);",
          "1901:             });",
          "1902:           });",
          "1906:               expect(msg).to.eql(i + 1);",
          "1907:               i++;",
          "1908:             });",
          "1911:               expect(value).to.eql(lastCbFired + 1);",
          "1912:               lastCbFired = value;",
          "1913:               if (value === 3) {",
          "",
          "[Removed Lines]",
          "1892:       it('should execute in order with payloads (client) (polling)', function (done) {",
          "1893:         var engine = listen({ allowUpgrades: false }, function (port) {",
          "1894:           var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['polling'] });",
          "1898:           engine.on('connection', function (conn) {",
          "1899:             conn.on('message', function (msg) {",
          "1904:           socket.on('open', function () {",
          "1905:             socket.on('message', function (msg) {",
          "1910:             function cb (value) {",
          "",
          "[Added Lines]",
          "2058:       it(\"should execute in order with payloads (client) (polling)\", function(done) {",
          "2059:         var engine = listen({ allowUpgrades: false }, function(port) {",
          "2060:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "2061:             transports: [\"polling\"]",
          "2062:           });",
          "2066:           engine.on(\"connection\", function(conn) {",
          "2067:             conn.on(\"message\", function(msg) {",
          "2072:           socket.on(\"open\", function() {",
          "2073:             socket.on(\"message\", function(msg) {",
          "2078:             function cb(value) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1916:             }",
          "1922:             });",
          "1925:           });",
          "1926:         });",
          "1927:       });",
          "1932:           var i = 0;",
          "1933:           var lastCbFired = 0;",
          "1937:               conn.send(msg);",
          "1938:             });",
          "1939:           });",
          "1943:               expect(msg).to.eql(i + 1);",
          "1944:               i++;",
          "1945:             });",
          "1948:               expect(value).to.eql(lastCbFired + 1);",
          "1949:               lastCbFired = value;",
          "1950:               if (value === 3) {",
          "",
          "[Removed Lines]",
          "1919:             socket.once('flush', function () {",
          "1920:               socket.send(2, function () { cb(2); });",
          "1921:               socket.send(3, function () { cb(3); });",
          "1924:             socket.send(1, function () { cb(1); });",
          "1929:       it('should execute in order with payloads (client) (websocket)', function (done) {",
          "1930:         var engine = listen({ allowUpgrades: false }, function (port) {",
          "1931:           var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1935:           engine.on('connection', function (conn) {",
          "1936:             conn.on('message', function (msg) {",
          "1941:           socket.on('open', function () {",
          "1942:             socket.on('message', function (msg) {",
          "1947:             function cb (value) {",
          "",
          "[Added Lines]",
          "2087:             socket.once(\"flush\", function() {",
          "2088:               socket.send(2, function() {",
          "2089:                 cb(2);",
          "2090:               });",
          "2091:               socket.send(3, function() {",
          "2092:                 cb(3);",
          "2093:               });",
          "2096:             socket.send(1, function() {",
          "2097:               cb(1);",
          "2098:             });",
          "2103:       it(\"should execute in order with payloads (client) (websocket)\", function(done) {",
          "2104:         var engine = listen({ allowUpgrades: false }, function(port) {",
          "2105:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "2106:             transports: [\"websocket\"]",
          "2107:           });",
          "2111:           engine.on(\"connection\", function(conn) {",
          "2112:             conn.on(\"message\", function(msg) {",
          "2117:           socket.on(\"open\", function() {",
          "2118:             socket.on(\"message\", function(msg) {",
          "2123:             function cb(value) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1953:             }",
          "1959:             });",
          "1962:           });",
          "1963:         });",
          "1964:       });",
          "1969:           var i = 0;",
          "1970:           var j = 0;",
          "1974:               i++;",
          "1975:             });",
          "1976:           });",
          "1979:               j++;",
          "1980:             });",
          "1981:           });",
          "1984:             expect(i).to.be(j);",
          "1985:             done();",
          "1986:           }, 100);",
          "1987:         });",
          "1988:       });",
          "1993:           var i = 0;",
          "1994:           var j = 0;",
          "1998:               i++;",
          "1999:             });",
          "2000:           });",
          "2004:               j++;",
          "2005:             });",
          "2006:           });",
          "2009:             expect(i).to.be(j);",
          "2010:             done();",
          "2011:           }, 100);",
          "2012:         });",
          "2013:       });",
          "2018:           var a = 0;",
          "2019:           var b = 0;",
          "2020:           var c = 0;",
          "2021:           var all = 0;",
          "2027:           });",
          "2035:               if (++all === 3) {",
          "2036:                 expect(a).to.be(1);",
          "",
          "[Removed Lines]",
          "1956:             socket.once('flush', function () {",
          "1957:               socket.send(2, function () { cb(2); });",
          "1958:               socket.send(3, function () { cb(3); });",
          "1961:             socket.send(1, function () { cb(1); });",
          "1966:       it('should execute when message sent (polling)', function (done) {",
          "1967:         var engine = listen({ allowUpgrades: false }, function (port) {",
          "1968:           var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['polling'] });",
          "1972:           engine.on('connection', function (conn) {",
          "1973:             conn.send('a', function (transport) {",
          "1977:           socket.on('open', function () {",
          "1978:             socket.on('message', function (msg) {",
          "1983:           setTimeout(function () {",
          "1990:       it('should execute when message sent (websocket)', function (done) {",
          "1991:         var engine = listen({ allowUpgrades: false }, function (port) {",
          "1992:           var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "1996:           engine.on('connection', function (conn) {",
          "1997:             conn.send('a', function (transport) {",
          "2002:           socket.on('open', function () {",
          "2003:             socket.on('message', function (msg) {",
          "2008:           setTimeout(function () {",
          "2015:       it('should execute once for each send', function (done) {",
          "2016:         var engine = listen(function (port) {",
          "2017:           var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "2023:           engine.on('connection', function (conn) {",
          "2024:             conn.send('a');",
          "2025:             conn.send('b');",
          "2026:             conn.send('c');",
          "2029:           socket.on('open', function () {",
          "2030:             socket.on('message', function (msg) {",
          "2031:               if (msg === 'a') a++;",
          "2032:               if (msg === 'b') b++;",
          "2033:               if (msg === 'c') c++;",
          "",
          "[Added Lines]",
          "2132:             socket.once(\"flush\", function() {",
          "2133:               socket.send(2, function() {",
          "2134:                 cb(2);",
          "2135:               });",
          "2136:               socket.send(3, function() {",
          "2137:                 cb(3);",
          "2138:               });",
          "2141:             socket.send(1, function() {",
          "2142:               cb(1);",
          "2143:             });",
          "2148:       it(\"should execute when message sent (polling)\", function(done) {",
          "2149:         var engine = listen({ allowUpgrades: false }, function(port) {",
          "2150:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "2151:             transports: [\"polling\"]",
          "2152:           });",
          "2156:           engine.on(\"connection\", function(conn) {",
          "2157:             conn.send(\"a\", function(transport) {",
          "2161:           socket.on(\"open\", function() {",
          "2162:             socket.on(\"message\", function(msg) {",
          "2167:           setTimeout(function() {",
          "2174:       it(\"should execute when message sent (websocket)\", function(done) {",
          "2175:         var engine = listen({ allowUpgrades: false }, function(port) {",
          "2176:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "2177:             transports: [\"websocket\"]",
          "2178:           });",
          "2182:           engine.on(\"connection\", function(conn) {",
          "2183:             conn.send(\"a\", function(transport) {",
          "2188:           socket.on(\"open\", function() {",
          "2189:             socket.on(\"message\", function(msg) {",
          "2194:           setTimeout(function() {",
          "2201:       it(\"should execute once for each send\", function(done) {",
          "2202:         var engine = listen(function(port) {",
          "2203:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "2209:           engine.on(\"connection\", function(conn) {",
          "2210:             conn.send(\"a\");",
          "2211:             conn.send(\"b\");",
          "2212:             conn.send(\"c\");",
          "2215:           socket.on(\"open\", function() {",
          "2216:             socket.on(\"message\", function(msg) {",
          "2217:               if (msg === \"a\") a++;",
          "2218:               if (msg === \"b\") b++;",
          "2219:               if (msg === \"c\") c++;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2043:         });",
          "2044:       });",
          "2049:           var i = 0;",
          "2050:           var j = 0;",
          "2054:               i++;",
          "2055:             });",
          "2058:               i++;",
          "2059:             });",
          "2060:           });",
          "2063:               j++;",
          "2064:             });",
          "2065:           });",
          "2068:             expect(i).to.be(j);",
          "2069:             done();",
          "2070:           }, 200);",
          "2071:         });",
          "2072:       });",
          "2077:           var i = 0;",
          "2078:           var j = 0;",
          "2082:               i++;",
          "2083:             });",
          "2086:               i++;",
          "2087:             });",
          "2090:               i++;",
          "2091:             });",
          "2094:               i++;",
          "2095:             });",
          "2096:           });",
          "2099:               j++;",
          "2100:             });",
          "2101:           });",
          "2104:             expect(i).to.be(j);",
          "2105:             done();",
          "2106:           }, 200);",
          "2107:         });",
          "2108:       });",
          "2118:               });",
          "2120:               if (!conn.writeBuffer.length) {",
          "2122:               }",
          "2125:               socket.close();",
          "2126:             });",
          "2129:               expect(conn.packetsFn).to.be.empty();",
          "2130:               expect(conn.sentCallbackFn).to.be.empty();",
          "2131:               done();",
          "",
          "[Removed Lines]",
          "2046:       it('should execute in multipart packet', function (done) {",
          "2047:         var engine = listen(function (port) {",
          "2048:           var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "2052:           engine.on('connection', function (conn) {",
          "2053:             conn.send('b', function (transport) {",
          "2057:             conn.send('a', function (transport) {",
          "2061:           socket.on('open', function () {",
          "2062:             socket.on('message', function (msg) {",
          "2067:           setTimeout(function () {",
          "2074:       it('should execute in multipart packet (polling)', function (done) {",
          "2075:         var engine = listen(function (port) {",
          "2076:           var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['polling'] });",
          "2080:           engine.on('connection', function (conn) {",
          "2081:             conn.send('d', function (transport) {",
          "2085:             conn.send('c', function (transport) {",
          "2089:             conn.send('b', function (transport) {",
          "2093:             conn.send('a', function (transport) {",
          "2097:           socket.on('open', function () {",
          "2098:             socket.on('message', function (msg) {",
          "2103:           setTimeout(function () {",
          "2110:       it('should clean callback references when socket gets closed with pending callbacks', function (done) {",
          "2111:         var engine = listen({ allowUpgrades: false }, function (port) {",
          "2112:           var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['polling'] });",
          "2114:           engine.on('connection', function (conn) {",
          "2115:             socket.transport.on('pollComplete', function () {",
          "2116:               conn.send('a', function (transport) {",
          "2117:                 done(new Error('Test invalidation'));",
          "2121:                 done(new Error('Test invalidation'));",
          "2128:             conn.on('close', function (reason) {",
          "",
          "[Added Lines]",
          "2232:       it(\"should execute in multipart packet\", function(done) {",
          "2233:         var engine = listen(function(port) {",
          "2234:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "2238:           engine.on(\"connection\", function(conn) {",
          "2239:             conn.send(\"b\", function(transport) {",
          "2243:             conn.send(\"a\", function(transport) {",
          "2247:           socket.on(\"open\", function() {",
          "2248:             socket.on(\"message\", function(msg) {",
          "2253:           setTimeout(function() {",
          "2260:       it(\"should execute in multipart packet (polling)\", function(done) {",
          "2261:         var engine = listen(function(port) {",
          "2262:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "2263:             transports: [\"polling\"]",
          "2264:           });",
          "2268:           engine.on(\"connection\", function(conn) {",
          "2269:             conn.send(\"d\", function(transport) {",
          "2273:             conn.send(\"c\", function(transport) {",
          "2277:             conn.send(\"b\", function(transport) {",
          "2281:             conn.send(\"a\", function(transport) {",
          "2285:           socket.on(\"open\", function() {",
          "2286:             socket.on(\"message\", function(msg) {",
          "2291:           setTimeout(function() {",
          "2298:       it(\"should clean callback references when socket gets closed with pending callbacks\", function(done) {",
          "2299:         var engine = listen({ allowUpgrades: false }, function(port) {",
          "2300:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "2301:             transports: [\"polling\"]",
          "2302:           });",
          "2304:           engine.on(\"connection\", function(conn) {",
          "2305:             socket.transport.on(\"pollComplete\", function() {",
          "2306:               conn.send(\"a\", function(transport) {",
          "2307:                 done(new Error(\"Test invalidation\"));",
          "2311:                 done(new Error(\"Test invalidation\"));",
          "2318:             conn.on(\"close\", function(reason) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2134:         });",
          "2135:       });",
          "2142:             socket.close();",
          "2143:           });",
          "2146:             var err;",
          "2150:             });",
          "2152:               done(err);",
          "2153:             });",
          "2154:           });",
          "",
          "[Removed Lines]",
          "2137:       it('should not execute when it is not actually sent (polling)', function (done) {",
          "2138:         var engine = listen({ allowUpgrades: false }, function (port) {",
          "2139:           var socket = new eioc.Socket('ws://localhost:%d'.s(port), { transports: ['polling'] });",
          "2141:           socket.transport.on('pollComplete', function (msg) {",
          "2145:           engine.on('connection', function (conn) {",
          "2147:             conn.send('a');",
          "2148:             conn.send('b', function (transport) {",
          "2149:               err = new Error('Test invalidation');",
          "2151:             conn.on('close', function (reason) {",
          "",
          "[Added Lines]",
          "2327:       it(\"should not execute when it is not actually sent (polling)\", function(done) {",
          "2328:         var engine = listen({ allowUpgrades: false }, function(port) {",
          "2329:           var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "2330:             transports: [\"polling\"]",
          "2331:           });",
          "2333:           socket.transport.on(\"pollComplete\", function(msg) {",
          "2337:           engine.on(\"connection\", function(conn) {",
          "2339:             conn.send(\"a\");",
          "2340:             conn.send(\"b\", function(transport) {",
          "2341:               err = new Error(\"Test invalidation\");",
          "2343:             conn.on(\"close\", function(reason) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2157:     });",
          "2158:   });",
          "2168:             done();",
          "2169:           });",
          "2170:         });",
          "2173:         });",
          "2174:       });",
          "2175:     });",
          "2182:             conn.close();",
          "2184:             done();",
          "2185:           });",
          "2186:         });",
          "",
          "[Removed Lines]",
          "2160:   describe('packet', function () {",
          "2161:     it('should emit when socket receives packet', function (done) {",
          "2162:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "2163:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "2164:         engine.on('connection', function (conn) {",
          "2165:           conn.on('packet', function (packet) {",
          "2166:             expect(packet.type).to.be('message');",
          "2167:             expect(packet.data).to.be('a');",
          "2171:         socket.on('open', function () {",
          "2172:           socket.send('a');",
          "2177:     it('should emit when receives ping', function (done) {",
          "2178:       var engine = listen({ allowUpgrades: false, pingInterval: 4 }, function (port) {",
          "2179:         eioc('ws://localhost:%d'.s(port));",
          "2180:         engine.on('connection', function (conn) {",
          "2181:           conn.on('packet', function (packet) {",
          "2183:             expect(packet.type).to.be('ping');",
          "",
          "[Added Lines]",
          "2352:   describe(\"packet\", function() {",
          "2353:     it(\"should emit when socket receives packet\", function(done) {",
          "2354:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "2355:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "2356:         engine.on(\"connection\", function(conn) {",
          "2357:           conn.on(\"packet\", function(packet) {",
          "2358:             expect(packet.type).to.be(\"message\");",
          "2359:             expect(packet.data).to.be(\"a\");",
          "2363:         socket.on(\"open\", function() {",
          "2364:           socket.send(\"a\");",
          "2369:     it(\"should emit when receives ping\", function(done) {",
          "2370:       var engine = listen({ allowUpgrades: false, pingInterval: 4 }, function(",
          "2371:         port",
          "2372:       ) {",
          "2373:         eioc(\"ws://localhost:%d\".s(port));",
          "2374:         engine.on(\"connection\", function(conn) {",
          "2375:           conn.on(\"packet\", function(packet) {",
          "2377:             expect(packet.type).to.be(\"ping\");",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2188:     });",
          "2189:   });",
          "2199:             done();",
          "2200:           });",
          "2202:         });",
          "2203:       });",
          "2204:     });",
          "2211:             conn.close();",
          "2213:             done();",
          "2214:           });",
          "2215:         });",
          "",
          "[Removed Lines]",
          "2191:   describe('packetCreate', function () {",
          "2192:     it('should emit before socket send message', function (done) {",
          "2193:       var engine = listen({ allowUpgrades: false }, function (port) {",
          "2194:         eioc('ws://localhost:%d'.s(port));",
          "2195:         engine.on('connection', function (conn) {",
          "2196:           conn.on('packetCreate', function (packet) {",
          "2197:             expect(packet.type).to.be('message');",
          "2198:             expect(packet.data).to.be('a');",
          "2201:           conn.send('a');",
          "2206:     it('should emit before send pong', function (done) {",
          "2207:       var engine = listen({ allowUpgrades: false, pingInterval: 4 }, function (port) {",
          "2208:         eioc('ws://localhost:%d'.s(port));",
          "2209:         engine.on('connection', function (conn) {",
          "2210:           conn.on('packetCreate', function (packet) {",
          "2212:             expect(packet.type).to.be('pong');",
          "",
          "[Added Lines]",
          "2385:   describe(\"packetCreate\", function() {",
          "2386:     it(\"should emit before socket send message\", function(done) {",
          "2387:       var engine = listen({ allowUpgrades: false }, function(port) {",
          "2388:         eioc(\"ws://localhost:%d\".s(port));",
          "2389:         engine.on(\"connection\", function(conn) {",
          "2390:           conn.on(\"packetCreate\", function(packet) {",
          "2391:             expect(packet.type).to.be(\"message\");",
          "2392:             expect(packet.data).to.be(\"a\");",
          "2395:           conn.send(\"a\");",
          "2400:     it(\"should emit before send pong\", function(done) {",
          "2401:       var engine = listen({ allowUpgrades: false, pingInterval: 4 }, function(",
          "2402:         port",
          "2403:       ) {",
          "2404:         eioc(\"ws://localhost:%d\".s(port));",
          "2405:         engine.on(\"connection\", function(conn) {",
          "2406:           conn.on(\"packetCreate\", function(packet) {",
          "2408:             expect(packet.type).to.be(\"pong\");",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2217:     });",
          "2218:   });",
          "2224:         var ready = 2;",
          "2225:         var closed = 2;",
          "2228:             socket.close();",
          "2229:           }, 10);",
          "2230:         }",
          "2234:           var lastSent = 0;",
          "2235:           var lastReceived = 0;",
          "2236:           var upgraded = false;",
          "2238:             lastSent++;",
          "2239:             conn.send(lastSent);",
          "2240:             if (50 === lastSent) {",
          "",
          "[Removed Lines]",
          "2220:   describe('upgrade', function () {",
          "2221:     it('should upgrade', function (done) {",
          "2222:       var engine = listen(function (port) {",
          "2226:         function finish () {",
          "2227:           setTimeout(function () {",
          "2233:         engine.on('connection', function (conn) {",
          "2237:           var interval = setInterval(function () {",
          "",
          "[Added Lines]",
          "2416:   describe(\"upgrade\", function() {",
          "2417:     it(\"should upgrade\", function(done) {",
          "2418:       var engine = listen(function(port) {",
          "2422:         function finish() {",
          "2423:           setTimeout(function() {",
          "2429:         engine.on(\"connection\", function(conn) {",
          "2433:           var interval = setInterval(function() {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2243:             }",
          "2244:           }, 2);",
          "2250:             lastReceived++;",
          "2251:             expect(msg).to.eql(lastReceived);",
          "2252:           });",
          "2256:             upgraded = true;",
          "2259:           });",
          "2263:             expect(lastSent).to.be(50);",
          "2264:             expect(lastReceived).to.be(50);",
          "2265:             expect(upgraded).to.be(true);",
          "",
          "[Removed Lines]",
          "2246:           expect(conn.request._query.transport).to.be('polling');",
          "2248:           conn.on('message', function (msg) {",
          "2249:             expect(conn.request._query).to.be.an('object');",
          "2254:           conn.on('upgrade', function (to) {",
          "2255:             expect(conn.request._query.transport).to.be('polling');",
          "2257:             expect(to.name).to.be('websocket');",
          "2258:             expect(conn.transport.name).to.be('websocket');",
          "2261:           conn.on('close', function (reason) {",
          "2262:             expect(reason).to.be('transport close');",
          "",
          "[Added Lines]",
          "2442:           expect(conn.request._query.transport).to.be(\"polling\");",
          "2444:           conn.on(\"message\", function(msg) {",
          "2445:             expect(conn.request._query).to.be.an(\"object\");",
          "2450:           conn.on(\"upgrade\", function(to) {",
          "2451:             expect(conn.request._query.transport).to.be(\"polling\");",
          "2453:             expect(to.name).to.be(\"websocket\");",
          "2454:             expect(conn.transport.name).to.be(\"websocket\");",
          "2457:           conn.on(\"close\", function(reason) {",
          "2458:             expect(reason).to.be(\"transport close\");",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2268:         });",
          "2273:           var lastSent = 0;",
          "2274:           var lastReceived = 0;",
          "2275:           var upgrades = 0;",
          "2277:             lastSent++;",
          "2278:             socket.send(lastSent);",
          "2279:             if (50 === lastSent) {",
          "",
          "[Removed Lines]",
          "2271:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "2272:         socket.on('open', function () {",
          "2276:           var interval = setInterval(function () {",
          "",
          "[Added Lines]",
          "2467:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "2468:         socket.on(\"open\", function() {",
          "2472:           var interval = setInterval(function() {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2281:               --ready || finish();",
          "2282:             }",
          "2283:           }, 2);",
          "2287:             upgrades++;",
          "",
          "[Removed Lines]",
          "2284:           socket.on('upgrading', function (to) {",
          "2286:             expect(to.name).to.equal('websocket');",
          "",
          "[Added Lines]",
          "2480:           socket.on(\"upgrading\", function(to) {",
          "2482:             expect(to.name).to.equal(\"websocket\");",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2295:             expect(socket.writeBuffer).to.not.be.empty();",
          "2296:           });",
          "2299:             upgrades++;",
          "2300:           });",
          "2302:             lastReceived++;",
          "2303:             expect(lastReceived).to.eql(msg);",
          "2304:           });",
          "2307:             expect(lastSent).to.be(50);",
          "2308:             expect(upgrades).to.be(2);",
          "2309:             --closed || done();",
          "",
          "[Removed Lines]",
          "2297:           socket.on('upgrade', function (to) {",
          "2298:             expect(to.name).to.equal('websocket');",
          "2301:           socket.on('message', function (msg) {",
          "2305:           socket.on('close', function (reason) {",
          "2306:             expect(reason).to.be('forced close');",
          "",
          "[Added Lines]",
          "2493:           socket.on(\"upgrade\", function(to) {",
          "2494:             expect(to.name).to.equal(\"websocket\");",
          "2497:           socket.on(\"message\", function(msg) {",
          "2501:           socket.on(\"close\", function(reason) {",
          "2502:             expect(reason).to.be(\"forced close\");",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2312:       });",
          "2316:     });",
          "2317:   });",
          "2322:       return c[Object.keys(c)[0]];",
          "2323:     }",
          "2328:           var buf = Buffer.allocUnsafe(1024);",
          "2329:           for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "2330:           conn.send(buf);",
          "2331:         });",
          "2395:             port: port,",
          "2403:       });",
          "2404:     });",
          "2409:           var buf = Buffer.allocUnsafe(1024);",
          "2410:           for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "2411:           conn.send(buf);",
          "2412:         });",
          "2420:             port: port,",
          "2429:     });",
          "2434:           var buf = Buffer.allocUnsafe(1024);",
          "2435:           for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "2436:           conn.send(buf, { compress: false });",
          "2437:         });",
          "2445:             port: port,",
          "2453:       });",
          "2454:     });",
          "2459:           var buf = Buffer.allocUnsafe(100);",
          "2460:           for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "2461:           conn.send(buf);",
          "2462:         });",
          "2470:             port: port,",
          "2478:       });",
          "2479:     });",
          "2480:   });",
          "2503:     });",
          "2508:           var socket = conn.transport.socket;",
          "2509:           var send = socket.send;",
          "2511:             socket.send = send;",
          "2512:             socket.send(data, opts, callback);",
          "",
          "[Removed Lines]",
          "2315:       eio.attach(engine.httpServer, { path: '/foo' });",
          "2319:   describe('http compression', function () {",
          "2320:     function getSidFromResponse (res) {",
          "2321:       var c = cookieMod.parse(res.headers['set-cookie'][0]);",
          "2325:     it('should compress by default', function (done) {",
          "2326:       var engine = listen({ transports: ['polling'] }, function (port) {",
          "2327:         engine.on('connection', function (conn) {",
          "2333:         http.get({",
          "2334:           port: port,",
          "2335:           path: '/engine.io/default/?transport=polling'",
          "2336:         }, function (res) {",
          "2337:           var sid = getSidFromResponse(res);",
          "2338:           http.get({",
          "2339:             port: port,",
          "2340:             path: '/engine.io/default/?transport=polling&sid=' + sid,",
          "2341:             headers: { 'Accept-Encoding': 'gzip, deflate' }",
          "2342:           }, function (res) {",
          "2343:             expect(res.headers['content-encoding']).to.equal('gzip');",
          "2344:             res.pipe(zlib.createGunzip())",
          "2345:               .on('error', done)",
          "2346:               .on('end', done)",
          "2347:               .resume();",
          "2348:           });",
          "2349:         });",
          "2350:       });",
          "2351:     });",
          "2353:     it('should compress using deflate', function (done) {",
          "2354:       var engine = listen({ transports: ['polling'] }, function (port) {",
          "2355:         engine.on('connection', function (conn) {",
          "2356:           var buf = Buffer.allocUnsafe(1024);",
          "2357:           for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "2358:           conn.send(buf);",
          "2359:         });",
          "2361:         http.get({",
          "2362:           port: port,",
          "2363:           path: '/engine.io/default/?transport=polling'",
          "2364:         }, function (res) {",
          "2365:           var sid = getSidFromResponse(res);",
          "2366:           http.get({",
          "2367:             port: port,",
          "2368:             path: '/engine.io/default/?transport=polling&sid=' + sid,",
          "2369:             headers: { 'Accept-Encoding': 'deflate' }",
          "2370:           }, function (res) {",
          "2371:             expect(res.headers['content-encoding']).to.equal('deflate');",
          "2372:             res.pipe(zlib.createDeflate())",
          "2373:               .on('error', done)",
          "2374:               .on('end', done)",
          "2375:               .resume();",
          "2376:           });",
          "2377:         });",
          "2378:       });",
          "2379:     });",
          "2381:     it('should set threshold', function (done) {",
          "2382:       var engine = listen({ transports: ['polling'], httpCompression: { threshold: 0 } }, function (port) {",
          "2383:         engine.on('connection', function (conn) {",
          "2384:           var buf = Buffer.allocUnsafe(10);",
          "2385:           for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "2386:           conn.send(buf);",
          "2387:         });",
          "2389:         http.get({",
          "2390:           port: port,",
          "2391:           path: '/engine.io/default/?transport=polling'",
          "2392:         }, function (res) {",
          "2393:           var sid = getSidFromResponse(res);",
          "2394:           http.get({",
          "2396:             path: '/engine.io/default/?transport=polling&sid=' + sid,",
          "2397:             headers: { 'Accept-Encoding': 'gzip, deflate' }",
          "2398:           }, function (res) {",
          "2399:             expect(res.headers['content-encoding']).to.equal('gzip');",
          "2400:             done();",
          "2401:           });",
          "2402:         });",
          "2406:     it('should disable compression', function (done) {",
          "2407:       var engine = listen({ transports: ['polling'], httpCompression: false }, function (port) {",
          "2408:         engine.on('connection', function (conn) {",
          "2414:         http.get({",
          "2415:           port: port,",
          "2416:           path: '/engine.io/default/?transport=polling'",
          "2417:         }, function (res) {",
          "2418:           var sid = getSidFromResponse(res);",
          "2419:           http.get({",
          "2421:             path: '/engine.io/default/?transport=polling&sid=' + sid,",
          "2422:             headers: { 'Accept-Encoding': 'gzip, deflate' }",
          "2423:           }, function (res) {",
          "2424:             expect(res.headers['content-encoding']).to.be(undefined);",
          "2425:             done();",
          "2426:           });",
          "2427:         });",
          "2428:       });",
          "2431:     it('should disable compression per message', function (done) {",
          "2432:       var engine = listen({ transports: ['polling'] }, function (port) {",
          "2433:         engine.on('connection', function (conn) {",
          "2439:         http.get({",
          "2440:           port: port,",
          "2441:           path: '/engine.io/default/?transport=polling'",
          "2442:         }, function (res) {",
          "2443:           var sid = getSidFromResponse(res);",
          "2444:           http.get({",
          "2446:             path: '/engine.io/default/?transport=polling&sid=' + sid,",
          "2447:             headers: { 'Accept-Encoding': 'gzip, deflate' }",
          "2448:           }, function (res) {",
          "2449:             expect(res.headers['content-encoding']).to.be(undefined);",
          "2450:             done();",
          "2451:           });",
          "2452:         });",
          "2456:     it('should not compress when the byte size is below threshold', function (done) {",
          "2457:       var engine = listen({ transports: ['polling'] }, function (port) {",
          "2458:         engine.on('connection', function (conn) {",
          "2464:         http.get({",
          "2465:           port: port,",
          "2466:           path: '/engine.io/default/?transport=polling'",
          "2467:         }, function (res) {",
          "2468:           var sid = getSidFromResponse(res);",
          "2469:           http.get({",
          "2471:             path: '/engine.io/default/?transport=polling&sid=' + sid,",
          "2472:             headers: { 'Accept-Encoding': 'gzip, deflate' }",
          "2473:           }, function (res) {",
          "2474:             expect(res.headers['content-encoding']).to.be(undefined);",
          "2475:             done();",
          "2476:           });",
          "2477:         });",
          "2482:   describe('permessage-deflate', function () {",
          "2483:     it('should set threshold', function (done) {",
          "2484:       var engine = listen({ transports: ['websocket'], perMessageDeflate: { threshold: 0 } }, function (port) {",
          "2485:         engine.on('connection', function (conn) {",
          "2486:           var socket = conn.transport.socket;",
          "2487:           var send = socket.send;",
          "2488:           socket.send = function (data, opts, callback) {",
          "2489:             socket.send = send;",
          "2490:             socket.send(data, opts, callback);",
          "2492:             expect(opts.compress).to.be(true);",
          "2493:             conn.close();",
          "2494:             done();",
          "2495:           };",
          "2497:           var buf = Buffer.allocUnsafe(100);",
          "2498:           for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "2499:           conn.send(buf, { compress: true });",
          "2500:         });",
          "2501:         eioc('http://localhost:%d'.s(port), { transports: ['websocket'] });",
          "2502:       });",
          "2505:     it('should not compress when the byte size is below threshold', function (done) {",
          "2506:       var engine = listen({ transports: ['websocket'] }, function (port) {",
          "2507:         engine.on('connection', function (conn) {",
          "2510:           socket.send = function (data, opts, callback) {",
          "",
          "[Added Lines]",
          "2511:       eio.attach(engine.httpServer, { path: \"/foo\" });",
          "2515:   describe(\"http compression\", function() {",
          "2516:     function getSidFromResponse(res) {",
          "2517:       var c = cookieMod.parse(res.headers[\"set-cookie\"][0]);",
          "2521:     it(\"should compress by default\", function(done) {",
          "2522:       var engine = listen({ transports: [\"polling\"] }, function(port) {",
          "2523:         engine.on(\"connection\", function(conn) {",
          "2529:         http.get(",
          "2530:           {",
          "2532:             path: \"/engine.io/default/?transport=polling\"",
          "2533:           },",
          "2534:           function(res) {",
          "2535:             var sid = getSidFromResponse(res);",
          "2536:             http.get(",
          "2537:               {",
          "2538:                 port: port,",
          "2539:                 path: \"/engine.io/default/?transport=polling&sid=\" + sid,",
          "2540:                 headers: { \"Accept-Encoding\": \"gzip, deflate\" }",
          "2541:               },",
          "2542:               function(res) {",
          "2543:                 expect(res.headers[\"content-encoding\"]).to.equal(\"gzip\");",
          "2544:                 res",
          "2545:                   .pipe(zlib.createGunzip())",
          "2546:                   .on(\"error\", done)",
          "2547:                   .on(\"end\", done)",
          "2548:                   .resume();",
          "2549:               }",
          "2550:             );",
          "2551:           }",
          "2552:         );",
          "2556:     it(\"should compress using deflate\", function(done) {",
          "2557:       var engine = listen({ transports: [\"polling\"] }, function(port) {",
          "2558:         engine.on(\"connection\", function(conn) {",
          "2564:         http.get(",
          "2565:           {",
          "2567:             path: \"/engine.io/default/?transport=polling\"",
          "2568:           },",
          "2569:           function(res) {",
          "2570:             var sid = getSidFromResponse(res);",
          "2571:             http.get(",
          "2572:               {",
          "2573:                 port: port,",
          "2574:                 path: \"/engine.io/default/?transport=polling&sid=\" + sid,",
          "2575:                 headers: { \"Accept-Encoding\": \"deflate\" }",
          "2576:               },",
          "2577:               function(res) {",
          "2578:                 expect(res.headers[\"content-encoding\"]).to.equal(\"deflate\");",
          "2579:                 res",
          "2580:                   .pipe(zlib.createDeflate())",
          "2581:                   .on(\"error\", done)",
          "2582:                   .on(\"end\", done)",
          "2583:                   .resume();",
          "2584:               }",
          "2585:             );",
          "2586:           }",
          "2587:         );",
          "2588:       });",
          "2589:     });",
          "2591:     it(\"should set threshold\", function(done) {",
          "2592:       var engine = listen(",
          "2593:         { transports: [\"polling\"], httpCompression: { threshold: 0 } },",
          "2594:         function(port) {",
          "2595:           engine.on(\"connection\", function(conn) {",
          "2596:             var buf = Buffer.allocUnsafe(10);",
          "2597:             for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "2598:             conn.send(buf);",
          "2599:           });",
          "2601:           http.get(",
          "2602:             {",
          "2603:               port: port,",
          "2604:               path: \"/engine.io/default/?transport=polling\"",
          "2605:             },",
          "2606:             function(res) {",
          "2607:               var sid = getSidFromResponse(res);",
          "2608:               http.get(",
          "2609:                 {",
          "2610:                   port: port,",
          "2611:                   path: \"/engine.io/default/?transport=polling&sid=\" + sid,",
          "2612:                   headers: { \"Accept-Encoding\": \"gzip, deflate\" }",
          "2613:                 },",
          "2614:                 function(res) {",
          "2615:                   expect(res.headers[\"content-encoding\"]).to.equal(\"gzip\");",
          "2616:                   done();",
          "2617:                 }",
          "2618:               );",
          "2619:             }",
          "2620:           );",
          "2621:         }",
          "2622:       );",
          "2623:     });",
          "2625:     it(\"should disable compression\", function(done) {",
          "2626:       var engine = listen(",
          "2627:         { transports: [\"polling\"], httpCompression: false },",
          "2628:         function(port) {",
          "2629:           engine.on(\"connection\", function(conn) {",
          "2630:             var buf = Buffer.allocUnsafe(1024);",
          "2631:             for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "2632:             conn.send(buf);",
          "2633:           });",
          "2635:           http.get(",
          "2636:             {",
          "2637:               port: port,",
          "2638:               path: \"/engine.io/default/?transport=polling\"",
          "2639:             },",
          "2640:             function(res) {",
          "2641:               var sid = getSidFromResponse(res);",
          "2642:               http.get(",
          "2643:                 {",
          "2644:                   port: port,",
          "2645:                   path: \"/engine.io/default/?transport=polling&sid=\" + sid,",
          "2646:                   headers: { \"Accept-Encoding\": \"gzip, deflate\" }",
          "2647:                 },",
          "2648:                 function(res) {",
          "2649:                   expect(res.headers[\"content-encoding\"]).to.be(undefined);",
          "2650:                   done();",
          "2651:                 }",
          "2652:               );",
          "2653:             }",
          "2654:           );",
          "2655:         }",
          "2656:       );",
          "2659:     it(\"should disable compression per message\", function(done) {",
          "2660:       var engine = listen({ transports: [\"polling\"] }, function(port) {",
          "2661:         engine.on(\"connection\", function(conn) {",
          "2667:         http.get(",
          "2668:           {",
          "2670:             path: \"/engine.io/default/?transport=polling\"",
          "2671:           },",
          "2672:           function(res) {",
          "2673:             var sid = getSidFromResponse(res);",
          "2674:             http.get(",
          "2675:               {",
          "2676:                 port: port,",
          "2677:                 path: \"/engine.io/default/?transport=polling&sid=\" + sid,",
          "2678:                 headers: { \"Accept-Encoding\": \"gzip, deflate\" }",
          "2679:               },",
          "2680:               function(res) {",
          "2681:                 expect(res.headers[\"content-encoding\"]).to.be(undefined);",
          "2682:                 done();",
          "2683:               }",
          "2684:             );",
          "2685:           }",
          "2686:         );",
          "2690:     it(\"should not compress when the byte size is below threshold\", function(done) {",
          "2691:       var engine = listen({ transports: [\"polling\"] }, function(port) {",
          "2692:         engine.on(\"connection\", function(conn) {",
          "2698:         http.get(",
          "2699:           {",
          "2701:             path: \"/engine.io/default/?transport=polling\"",
          "2702:           },",
          "2703:           function(res) {",
          "2704:             var sid = getSidFromResponse(res);",
          "2705:             http.get(",
          "2706:               {",
          "2707:                 port: port,",
          "2708:                 path: \"/engine.io/default/?transport=polling&sid=\" + sid,",
          "2709:                 headers: { \"Accept-Encoding\": \"gzip, deflate\" }",
          "2710:               },",
          "2711:               function(res) {",
          "2712:                 expect(res.headers[\"content-encoding\"]).to.be(undefined);",
          "2713:                 done();",
          "2714:               }",
          "2715:             );",
          "2716:           }",
          "2717:         );",
          "2722:   describe(\"permessage-deflate\", function() {",
          "2723:     it(\"should set threshold\", function(done) {",
          "2724:       var engine = listen(",
          "2725:         { transports: [\"websocket\"], perMessageDeflate: { threshold: 0 } },",
          "2726:         function(port) {",
          "2727:           engine.on(\"connection\", function(conn) {",
          "2728:             var socket = conn.transport.socket;",
          "2729:             var send = socket.send;",
          "2730:             socket.send = function(data, opts, callback) {",
          "2731:               socket.send = send;",
          "2732:               socket.send(data, opts, callback);",
          "2734:               expect(opts.compress).to.be(true);",
          "2735:               conn.close();",
          "2736:               done();",
          "2737:             };",
          "2739:             var buf = Buffer.allocUnsafe(100);",
          "2740:             for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "2741:             conn.send(buf, { compress: true });",
          "2742:           });",
          "2743:           eioc(\"http://localhost:%d\".s(port), { transports: [\"websocket\"] });",
          "2744:         }",
          "2745:       );",
          "2748:     it(\"should not compress when the byte size is below threshold\", function(done) {",
          "2749:       var engine = listen({ transports: [\"websocket\"] }, function(port) {",
          "2750:         engine.on(\"connection\", function(conn) {",
          "2753:           socket.send = function(data, opts, callback) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2520:           for (var i = 0; i < buf.length; i++) buf[i] = i % 0xff;",
          "2521:           conn.send(buf, { compress: true });",
          "2522:         });",
          "2524:       });",
          "2525:     });",
          "2526:   });",
          "2529:     this.timeout(5000);",
          "2531:     var headers = {",
          "2534:     };",
          "2539:           extraHeaders: headers,",
          "2540:           transports: [transport]",
          "2541:         });",
          "2543:           for (var h in headers) {",
          "2544:             expect(conn.request.headers[h]).to.equal(headers[h]);",
          "2545:           }",
          "2546:           done();",
          "2547:         });",
          "2549:       });",
          "2550:     }",
          "2554:     });",
          "2558:     });",
          "2559:   });",
          "2567:             conn.close();",
          "2568:             done();",
          "2569:           });",
          "2571:         });",
          "2573:           extraHeaders: headers,",
          "2575:         });",
          "2576:       });",
          "2577:     }",
          "2581:       testForHeaders(headers, done);",
          "2582:     });",
          "2586:       testForHeaders(headers, done);",
          "2587:     });",
          "2588:   });",
          "2597:             expect(err).to.be.an(Error);",
          "2598:             expect(res.status).to.be(400);",
          "2599:             expect(res.body.code).to.be(2);",
          "2603:             done();",
          "2604:           });",
          "2605:       });",
          "2606:     });",
          "2614:             expect(err).to.be.an(Error);",
          "2615:             expect(res.status).to.be(501);",
          "2616:             expect(res.body.code).to.be(undefined);",
          "",
          "[Removed Lines]",
          "2523:         eioc('http://localhost:%d'.s(port), { transports: ['websocket'] });",
          "2528:   describe('extraHeaders', function () {",
          "2532:       'x-custom-header-for-my-project': 'my-secret-access-token',",
          "2533:       'cookie': 'user_session=NI2JlCKF90aE0sJZD9ZzujtdsUqNYSBYxzlTsvdSUe35ZzdtVRGqYFr0kdGxbfc5gUOkR9RGp20GVKza; path=/; expires=Tue, 07-Apr-2015 18:18:08 GMT; secure; HttpOnly'",
          "2536:     function testForTransport (transport, done) {",
          "2537:       var engine = listen(function (port) {",
          "2538:         var socket = new eioc.Socket('ws://localhost:%d'.s(port), {",
          "2542:         engine.on('connection', function (conn) {",
          "2548:         socket.on('open', function () {});",
          "2552:     it('should arrive from client to server via WebSockets', function (done) {",
          "2553:       testForTransport('websocket', done);",
          "2556:     it('should arrive from client to server via XMLHttpRequest', function (done) {",
          "2557:       testForTransport('polling', done);",
          "2561:   describe('response headers', function () {",
          "2562:     function testForHeaders (headers, done) {",
          "2563:       var engine = listen(function (port) {",
          "2564:         engine.on('connection', function (conn) {",
          "2565:           conn.transport.once('headers', function (headers) {",
          "2566:             expect(headers['X-XSS-Protection']).to.be('0');",
          "2570:           conn.send('hi');",
          "2572:         eioc('ws://localhost:%d'.s(port), {",
          "2574:           transports: ['polling']",
          "2579:     it('should contain X-XSS-Protection: 0 for IE8', function (done) {",
          "2580:       var headers = { 'user-agent': 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)' };",
          "2584:     it('should contain X-XSS-Protection: 0 for IE11', function (done) {",
          "2585:       var headers = { 'user-agent': 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko' };",
          "2590:   describe('cors', function () {",
          "2591:     it('should handle OPTIONS requests', function (done) {",
          "2592:       listen({handlePreflightRequest: true}, function (port) {",
          "2593:         request.options('http://localhost:%d/engine.io/default/'.s(port))",
          "2594:           .set('Origin', 'http://engine.io')",
          "2595:           .query({ transport: 'polling' })",
          "2596:           .end(function (err, res) {",
          "2600:             expect(res.body.message).to.be('Bad handshake method');",
          "2601:             expect(res.header['access-control-allow-credentials']).to.be('true');",
          "2602:             expect(res.header['access-control-allow-origin']).to.be('http://engine.io');",
          "2608:     it('should not handle OPTIONS requests', function (done) {",
          "2609:       listen({handlePreflightRequest: false}, function (port) {",
          "2610:         request.options('http://localhost:%d/engine.io/default/'.s(port))",
          "2611:           .set('Origin', 'http://engine.io')",
          "2612:           .query({ transport: 'polling' })",
          "2613:           .end(function (err, res) {",
          "",
          "[Added Lines]",
          "2766:         eioc(\"http://localhost:%d\".s(port), { transports: [\"websocket\"] });",
          "2771:   describe(\"extraHeaders\", function() {",
          "2775:       \"x-custom-header-for-my-project\": \"my-secret-access-token\",",
          "2776:       cookie:",
          "2777:         \"user_session=NI2JlCKF90aE0sJZD9ZzujtdsUqNYSBYxzlTsvdSUe35ZzdtVRGqYFr0kdGxbfc5gUOkR9RGp20GVKza; path=/; expires=Tue, 07-Apr-2015 18:18:08 GMT; secure; HttpOnly\"",
          "2780:     function testForTransport(transport, done) {",
          "2781:       var engine = listen(function(port) {",
          "2782:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port), {",
          "2786:         engine.on(\"connection\", function(conn) {",
          "2792:         socket.on(\"open\", function() {});",
          "2796:     it(\"should arrive from client to server via WebSockets\", function(done) {",
          "2797:       testForTransport(\"websocket\", done);",
          "2800:     it(\"should arrive from client to server via XMLHttpRequest\", function(done) {",
          "2801:       testForTransport(\"polling\", done);",
          "2805:   describe(\"response headers\", function() {",
          "2806:     function testForHeaders(headers, done) {",
          "2807:       var engine = listen(function(port) {",
          "2808:         engine.on(\"connection\", function(conn) {",
          "2809:           conn.transport.once(\"headers\", function(headers) {",
          "2810:             expect(headers[\"X-XSS-Protection\"]).to.be(\"0\");",
          "2814:           conn.send(\"hi\");",
          "2816:         eioc(\"ws://localhost:%d\".s(port), {",
          "2818:           transports: [\"polling\"]",
          "2823:     it(\"should contain X-XSS-Protection: 0 for IE8\", function(done) {",
          "2824:       var headers = {",
          "2825:         \"user-agent\":",
          "2826:           \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)\"",
          "2827:       };",
          "2831:     it(\"should contain X-XSS-Protection: 0 for IE11\", function(done) {",
          "2832:       var headers = {",
          "2833:         \"user-agent\":",
          "2834:           \"Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko\"",
          "2835:       };",
          "2840:   describe(\"cors\", function() {",
          "2841:     it(\"should handle OPTIONS requests\", function(done) {",
          "2842:       listen({ handlePreflightRequest: true }, function(port) {",
          "2843:         request",
          "2844:           .options(\"http://localhost:%d/engine.io/default/\".s(port))",
          "2845:           .set(\"Origin\", \"http://engine.io\")",
          "2846:           .query({ transport: \"polling\" })",
          "2847:           .end(function(err, res) {",
          "2851:             expect(res.body.message).to.be(\"Bad handshake method\");",
          "2852:             expect(res.header[\"access-control-allow-credentials\"]).to.be(",
          "2853:               \"true\"",
          "2854:             );",
          "2855:             expect(res.header[\"access-control-allow-origin\"]).to.be(",
          "2856:               \"http://engine.io\"",
          "2857:             );",
          "2863:     it(\"should not handle OPTIONS requests\", function(done) {",
          "2864:       listen({ handlePreflightRequest: false }, function(port) {",
          "2865:         request",
          "2866:           .options(\"http://localhost:%d/engine.io/default/\".s(port))",
          "2867:           .set(\"Origin\", \"http://engine.io\")",
          "2868:           .query({ transport: \"polling\" })",
          "2869:           .end(function(err, res) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2619:       });",
          "2620:     });",
          "2624:         var headers = {};",
          "2625:         if (req.headers.origin) {",
          "2628:         } else {",
          "2630:         }",
          "2633:         res.writeHead(200, headers);",
          "2634:         res.end();",
          "2635:       };",
          "2641:             expect(err).to.be(null);",
          "2642:             expect(res.status).to.be(200);",
          "2643:             expect(res.body).to.be.empty();",
          "2648:             done();",
          "2649:           });",
          "2650:       });",
          "2651:     });",
          "2652:   });",
          "2665:             done();",
          "2666:           });",
          "2667:         });",
          "",
          "[Removed Lines]",
          "2622:     it('should handle OPTIONS requests with the given function', function (done) {",
          "2623:       var handlePreflightRequest = function (req, res) {",
          "2626:           headers['Access-Control-Allow-Credentials'] = 'true';",
          "2627:           headers['Access-Control-Allow-Origin'] = req.headers.origin;",
          "2629:           headers['Access-Control-Allow-Origin'] = '*';",
          "2631:         headers['Access-Control-Allow-Methods'] = 'GET,HEAD,PUT,PATCH,POST,DELETE';",
          "2632:         headers['Access-Control-Allow-Headers'] = 'origin, content-type, accept';",
          "2636:       listen({handlePreflightRequest: handlePreflightRequest}, function (port) {",
          "2637:         request.options('http://localhost:%d/engine.io/default/'.s(port))",
          "2638:           .set('Origin', 'http://engine.io')",
          "2639:           .query({ transport: 'polling' })",
          "2640:           .end(function (err, res) {",
          "2644:             expect(res.header['access-control-allow-credentials']).to.be('true');",
          "2645:             expect(res.header['access-control-allow-origin']).to.be('http://engine.io');",
          "2646:             expect(res.header['access-control-allow-methods']).to.be('GET,HEAD,PUT,PATCH,POST,DELETE');",
          "2647:             expect(res.header['access-control-allow-headers']).to.be('origin, content-type, accept');",
          "2654:   describe('wsEngine option', function () {",
          "2655:     it('should allow loading of other websocket server implementation like uws', function (done) {",
          "2656:       var engine = listen({ allowUpgrades: false, wsEngine: 'uws' }, function (port) {",
          "2657:         expect(engine.ws instanceof require('uws').Server).to.be.ok();",
          "2658:         var socket = new eioc.Socket('ws://localhost:%d'.s(port));",
          "2659:         engine.on('connection', function (conn) {",
          "2660:           conn.send('a');",
          "2661:         });",
          "2662:         socket.on('open', function () {",
          "2663:           socket.on('message', function (msg) {",
          "2664:             expect(msg).to.be('a');",
          "",
          "[Added Lines]",
          "2878:     it(\"should handle OPTIONS requests with the given function\", function(done) {",
          "2879:       var handlePreflightRequest = function(req, res) {",
          "2882:           headers[\"Access-Control-Allow-Credentials\"] = \"true\";",
          "2883:           headers[\"Access-Control-Allow-Origin\"] = req.headers.origin;",
          "2885:           headers[\"Access-Control-Allow-Origin\"] = \"*\";",
          "2887:         headers[\"Access-Control-Allow-Methods\"] =",
          "2888:           \"GET,HEAD,PUT,PATCH,POST,DELETE\";",
          "2889:         headers[\"Access-Control-Allow-Headers\"] =",
          "2890:           \"origin, content-type, accept\";",
          "2894:       listen({ handlePreflightRequest: handlePreflightRequest }, function(",
          "2895:         port",
          "2896:       ) {",
          "2897:         request",
          "2898:           .options(\"http://localhost:%d/engine.io/default/\".s(port))",
          "2899:           .set(\"Origin\", \"http://engine.io\")",
          "2900:           .query({ transport: \"polling\" })",
          "2901:           .end(function(err, res) {",
          "2905:             expect(res.header[\"access-control-allow-credentials\"]).to.be(",
          "2906:               \"true\"",
          "2907:             );",
          "2908:             expect(res.header[\"access-control-allow-origin\"]).to.be(",
          "2909:               \"http://engine.io\"",
          "2910:             );",
          "2911:             expect(res.header[\"access-control-allow-methods\"]).to.be(",
          "2912:               \"GET,HEAD,PUT,PATCH,POST,DELETE\"",
          "2913:             );",
          "2914:             expect(res.header[\"access-control-allow-headers\"]).to.be(",
          "2915:               \"origin, content-type, accept\"",
          "2916:             );",
          "2923:   describe(\"wsEngine option\", function() {",
          "2924:     it(\"should allow loading of other websocket server implementation like uws\", function(done) {",
          "2925:       var engine = listen({ allowUpgrades: false, wsEngine: \"uws\" }, function(",
          "2926:         port",
          "2927:       ) {",
          "2928:         expect(engine.ws instanceof require(\"uws\").Server).to.be.ok();",
          "2929:         var socket = new eioc.Socket(\"ws://localhost:%d\".s(port));",
          "2930:         engine.on(\"connection\", function(conn) {",
          "2931:           conn.send(\"a\");",
          "2932:         });",
          "2933:         socket.on(\"open\", function() {",
          "2934:           socket.on(\"message\", function(msg) {",
          "2935:             expect(msg).to.be(\"a\");",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2669:     });",
          "2670:   });",
          "2678:           done();",
          "2679:         });",
          "2680:       });",
          "2681:     });",
          "2688:           done();",
          "2689:         });",
          "2690:       });",
          "",
          "[Removed Lines]",
          "2672:   describe('remoteAddress', function () {",
          "2673:     it('should be defined (polling)', function (done) {",
          "2674:       var engine = listen({ transports: ['polling'] }, port => {",
          "2675:         eioc('ws://localhost:%d'.s(port), { transports: ['polling'] });",
          "2676:         engine.on('connection', socket => {",
          "2677:           expect(socket.remoteAddress).to.be('::ffff:127.0.0.1');",
          "2683:     it('should be defined (ws)', function (done) {",
          "2684:       var engine = listen({ transports: ['websocket'] }, port => {",
          "2685:         eioc('ws://localhost:%d'.s(port), { transports: ['websocket'] });",
          "2686:         engine.on('connection', socket => {",
          "2687:           expect(socket.remoteAddress).to.be('::ffff:127.0.0.1');",
          "",
          "[Added Lines]",
          "2943:   describe(\"remoteAddress\", function() {",
          "2944:     it(\"should be defined (polling)\", function(done) {",
          "2945:       var engine = listen({ transports: [\"polling\"] }, port => {",
          "2946:         eioc(\"ws://localhost:%d\".s(port), { transports: [\"polling\"] });",
          "2947:         engine.on(\"connection\", socket => {",
          "2948:           expect(socket.remoteAddress).to.be(\"::ffff:127.0.0.1\");",
          "2954:     it(\"should be defined (ws)\", function(done) {",
          "2955:       var engine = listen({ transports: [\"websocket\"] }, port => {",
          "2956:         eioc(\"ws://localhost:%d\".s(port), { transports: [\"websocket\"] });",
          "2957:         engine.on(\"connection\", socket => {",
          "2958:           expect(socket.remoteAddress).to.be(\"::ffff:127.0.0.1\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}