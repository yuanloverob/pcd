{
  "cve_id": "CVE-2022-31112",
  "cve_desc": "Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. In affected versions parse Server LiveQuery does not remove protected fields in classes, passing them to the client. The LiveQueryController now removes protected fields from the client response. Users are advised to upgrade. Users unable t upgrade should use `Parse.Cloud.afterLiveQueryEvent` to manually remove protected fields.",
  "repo": "parse-community/parse-server",
  "patch_hash": "309f64ced8700321df056fb3cc97f15007a00df1",
  "patch_info": {
    "commit_hash": "309f64ced8700321df056fb3cc97f15007a00df1",
    "repo": "parse-community/parse-server",
    "commit_url": "https://github.com/parse-community/parse-server/commit/309f64ced8700321df056fb3cc97f15007a00df1",
    "files": [
      "spec/ParseLiveQuery.spec.js",
      "src/Controllers/DatabaseController.js",
      "src/LiveQuery/ParseCloudCodePublisher.js",
      "src/LiveQuery/ParseLiveQueryServer.js"
    ],
    "message": "fix: protected fields exposed via LiveQuery; this removes protected fields from the client response; this may be a breaking change if your app is currently expecting to receive these protected fields ([GHSA-crrq-vr9j-fxxh](https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh)) (https://github.com/parse-community/parse-server/pull/8074) (#8073)",
    "before_after_code_files": [
      "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
      "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js",
      "src/LiveQuery/ParseCloudCodePublisher.js||src/LiveQuery/ParseCloudCodePublisher.js",
      "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
    ]
  },
  "patch_diff": {
    "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js": [
      "File: spec/ParseLiveQuery.spec.js -> spec/ParseLiveQuery.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1066:     }",
      "1067:   });",
      "1069:   afterEach(async function (done) {",
      "1070:     const client = await Parse.CoreManager.getLiveQueryController().getDefaultLiveQueryClient();",
      "1071:     client.close();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1069:   it('should strip out protected fields', async () => {",
      "1070:     await reconfigureServer({",
      "1071:       liveQuery: { classNames: ['Test'] },",
      "1072:       startLiveQueryServer: true,",
      "1073:     });",
      "1074:     const obj1 = new Parse.Object('Test');",
      "1075:     obj1.set('foo', 'foo');",
      "1076:     obj1.set('bar', 'bar');",
      "1077:     obj1.set('qux', 'qux');",
      "1078:     await obj1.save();",
      "1079:     const config = Config.get(Parse.applicationId);",
      "1080:     const schemaController = await config.database.loadSchema();",
      "1081:     await schemaController.updateClass(",
      "1082:       'Test',",
      "1083:       {},",
      "1084:       {",
      "1085:         get: { '*': true },",
      "1086:         find: { '*': true },",
      "1087:         update: { '*': true },",
      "1088:         protectedFields: {",
      "1089:           '*': ['foo'],",
      "1090:         },",
      "1091:       }",
      "1092:     );",
      "1093:     const object = await obj1.fetch();",
      "1094:     expect(object.get('foo')).toBe(undefined);",
      "1095:     expect(object.get('bar')).toBeDefined();",
      "1096:     expect(object.get('qux')).toBeDefined();",
      "1098:     const subscription = await new Parse.Query('Test').subscribe();",
      "1099:     await Promise.all([",
      "1100:       new Promise(resolve => {",
      "1101:         subscription.on('update', (obj, original) => {",
      "1102:           expect(obj.get('foo')).toBe(undefined);",
      "1103:           expect(obj.get('bar')).toBeDefined();",
      "1104:           expect(obj.get('qux')).toBeDefined();",
      "1105:           expect(original.get('foo')).toBe(undefined);",
      "1106:           expect(original.get('bar')).toBeDefined();",
      "1107:           expect(original.get('qux')).toBeDefined();",
      "1108:           resolve();",
      "1109:         });",
      "1110:       }),",
      "1111:       obj1.save({ foo: 'abc' }),",
      "1112:     ]);",
      "1113:   });",
      "",
      "---------------"
    ],
    "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js": [
      "File: src/Controllers/DatabaseController.js -> src/Controllers/DatabaseController.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:   aclGroup: any[],",
      "128:   auth: any,",
      "129:   operation: any,",
      "131:   className: string,",
      "132:   protectedFields: null | Array<any>,",
      "133:   object: any",
      "",
      "[Removed Lines]",
      "130:   schema: SchemaController.SchemaController,",
      "",
      "[Added Lines]",
      "130:   schema: SchemaController.SchemaController | any,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "136:   if (auth && auth.user) userId = auth.user.id;",
      "140:   if (perms) {",
      "141:     const isReadOperation = ['get', 'find'].indexOf(operation) > -1;",
      "",
      "[Removed Lines]",
      "139:   const perms = schema.getClassLevelPermissions(className);",
      "",
      "[Added Lines]",
      "139:   const perms =",
      "140:     schema && schema.getClassLevelPermissions ? schema.getClassLevelPermissions(className) : {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1533:   }",
      "1535:   addProtectedFields(",
      "1537:     className: string,",
      "1538:     query: any = {},",
      "1539:     aclGroup: any[] = [],",
      "1540:     auth: any = {},",
      "1541:     queryOptions: FullQueryOptions = {}",
      "1542:   ): null | string[] {",
      "1544:     if (!perms) return null;",
      "1546:     const protectedFields = perms.protectedFields;",
      "",
      "[Removed Lines]",
      "1536:     schema: SchemaController.SchemaController,",
      "1543:     const perms = schema.getClassLevelPermissions(className);",
      "",
      "[Added Lines]",
      "1537:     schema: SchemaController.SchemaController | any,",
      "1544:     const perms =",
      "1545:       schema && schema.getClassLevelPermissions",
      "1546:         ? schema.getClassLevelPermissions(className)",
      "1547:         : schema;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1806:   }",
      "1808:   static _validateQuery: any => void;",
      "1809: }",
      "1811: module.exports = DatabaseController;",
      "1813: module.exports._validateQuery = validateQuery;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1813:   static filterSensitiveData: (boolean, any[], any, any, any, string, any[], any) => void;",
      "1819: module.exports.filterSensitiveData = filterSensitiveData;",
      "",
      "---------------"
    ],
    "src/LiveQuery/ParseCloudCodePublisher.js||src/LiveQuery/ParseCloudCodePublisher.js": [
      "File: src/LiveQuery/ParseCloudCodePublisher.js -> src/LiveQuery/ParseCloudCodePublisher.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:     if (request.original) {",
      "34:       message.originalParseObject = request.original._toFullJSON();",
      "35:     }",
      "36:     this.parsePublisher.publish(type, JSON.stringify(message));",
      "37:   }",
      "38: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36:     if (request.classLevelPermissions) {",
      "37:       message.classLevelPermissions = request.classLevelPermissions;",
      "38:     }",
      "",
      "---------------"
    ],
    "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js": [
      "File: src/LiveQuery/ParseLiveQueryServer.js -> src/LiveQuery/ParseLiveQueryServer.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: import SchemaController from '../Controllers/SchemaController';",
      "11: import _ from 'lodash';",
      "12: import { v4 as uuidv4 } from 'uuid';",
      "14: import { getAuthForSessionToken, Auth } from '../Auth';",
      "16: import LRU from 'lru-cache';",
      "17: import UserRouter from '../Routers/UsersRouter';",
      "19: class ParseLiveQueryServer {",
      "20:   clients: Map;",
      "",
      "[Removed Lines]",
      "13: import { runLiveQueryEventHandlers, getTrigger, runTrigger, resolveError, toJSONwithObjects } from '../triggers';",
      "15: import { getCacheController } from '../Controllers';",
      "",
      "[Added Lines]",
      "13: import {",
      "14:   runLiveQueryEventHandlers,",
      "15:   getTrigger,",
      "16:   runTrigger,",
      "17:   resolveError,",
      "18:   toJSONwithObjects,",
      "19: } from '../triggers';",
      "21: import { getCacheController, getDatabaseController } from '../Controllers';",
      "24: import DatabaseController from '../Controllers/DatabaseController';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "185:             if (res.object && typeof res.object.toJSON === 'function') {",
      "186:               deletedParseObject = toJSONwithObjects(res.object, res.object.className || className);",
      "187:             }",
      "196:             client.pushDelete(requestId, deletedParseObject);",
      "197:           } catch (e) {",
      "198:             const error = resolveError(e);",
      "",
      "[Removed Lines]",
      "188:             if (",
      "189:               (deletedParseObject.className === '_User' ||",
      "190:                 deletedParseObject.className === '_Session') &&",
      "191:               !client.hasMasterKey",
      "192:             ) {",
      "193:               delete deletedParseObject.sessionToken;",
      "194:               delete deletedParseObject.authData;",
      "195:             }",
      "",
      "[Added Lines]",
      "195:             await this._filterSensitiveData(",
      "196:               classLevelPermissions,",
      "197:               res,",
      "198:               client,",
      "199:               requestId,",
      "200:               op,",
      "201:               subscription.query",
      "202:             );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:                 res.original.className || className",
      "340:               );",
      "341:             }",
      "352:             const functionName = 'push' + res.event.charAt(0).toUpperCase() + res.event.slice(1);",
      "353:             if (client[functionName]) {",
      "354:               client[functionName](requestId, currentParseObject, originalParseObject);",
      "",
      "[Removed Lines]",
      "342:             if (",
      "343:               (currentParseObject.className === '_User' ||",
      "344:                 currentParseObject.className === '_Session') &&",
      "345:               !client.hasMasterKey",
      "346:             ) {",
      "347:               delete currentParseObject.sessionToken;",
      "348:               delete originalParseObject?.sessionToken;",
      "349:               delete currentParseObject.authData;",
      "350:               delete originalParseObject?.authData;",
      "351:             }",
      "",
      "[Added Lines]",
      "349:             await this._filterSensitiveData(",
      "350:               classLevelPermissions,",
      "351:               res,",
      "352:               client,",
      "353:               requestId,",
      "354:               op,",
      "355:               subscription.query",
      "356:             );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "541:   }",
      "543:   _getCLPOperation(query: any) {",
      "544:     return typeof query === 'object' &&",
      "545:       Object.keys(query).length == 1 &&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "548:   async _filterSensitiveData(",
      "549:     classLevelPermissions: ?any,",
      "550:     res: any,",
      "551:     client: any,",
      "552:     requestId: number,",
      "553:     op: string,",
      "554:     query: any",
      "555:   ) {",
      "556:     const subscriptionInfo = client.getSubscriptionInfo(requestId);",
      "557:     const aclGroup = ['*'];",
      "558:     let clientAuth;",
      "559:     if (typeof subscriptionInfo !== 'undefined') {",
      "560:       const { userId, auth } = await this.getAuthForSessionToken(subscriptionInfo.sessionToken);",
      "561:       if (userId) {",
      "562:         aclGroup.push(userId);",
      "563:       }",
      "564:       clientAuth = auth;",
      "565:     }",
      "566:     const filter = obj => {",
      "567:       if (!obj) {",
      "568:         return;",
      "569:       }",
      "570:       let protectedFields = classLevelPermissions?.protectedFields || [];",
      "571:       if (!client.hasMasterKey && !Array.isArray(protectedFields)) {",
      "572:         protectedFields = getDatabaseController(this.config).addProtectedFields(",
      "573:           classLevelPermissions,",
      "574:           res.object.className,",
      "575:           query,",
      "576:           aclGroup,",
      "577:           clientAuth",
      "578:         );",
      "579:       }",
      "580:       return DatabaseController.filterSensitiveData(",
      "581:         client.hasMasterKey,",
      "582:         aclGroup,",
      "583:         clientAuth,",
      "584:         op,",
      "585:         classLevelPermissions,",
      "586:         res.object.className,",
      "587:         protectedFields,",
      "588:         obj,",
      "589:         query",
      "590:       );",
      "591:     };",
      "592:     res.object = filter(res.object);",
      "593:     res.original = filter(res.original);",
      "594:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e39d51bd329cd978589983bd659db46e1d45aad4",
      "candidate_info": {
        "commit_hash": "e39d51bd329cd978589983bd659db46e1d45aad4",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/e39d51bd329cd978589983bd659db46e1d45aad4",
        "files": [
          "spec/RestQuery.spec.js",
          "src/Controllers/DatabaseController.js",
          "src/RestQuery.js"
        ],
        "message": "fix: brute force guessing of user sensitive data via search patterns; this fixes a security vulnerability in which internal and protected fields may be used as query constraints to guess the value of these fields and obtain sensitive data (GHSA-2m6g-crv8-p3c6) (#8144)",
        "before_after_code_files": [
          "spec/RestQuery.spec.js||spec/RestQuery.spec.js",
          "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js",
          "src/RestQuery.js||src/RestQuery.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js"
          ],
          "candidate": [
            "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/RestQuery.spec.js||spec/RestQuery.spec.js": [
          "File: spec/RestQuery.spec.js -> spec/RestQuery.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     expect(result.results.length).toEqual(0);",
          "192:   });",
          "194:   it('query with wrongly encoded parameter', done => {",
          "195:     rest",
          "196:       .create(config, nobody, 'TestParameterEncode', { foo: 'bar' })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:   it('query internal field', async () => {",
          "195:     const internalFields = [",
          "196:       '_email_verify_token',",
          "197:       '_perishable_token',",
          "198:       '_tombstone',",
          "199:       '_email_verify_token_expires_at',",
          "200:       '_failed_login_count',",
          "201:       '_account_lockout_expires_at',",
          "202:       '_password_changed_at',",
          "203:       '_password_history',",
          "204:     ];",
          "205:     await Promise.all([",
          "206:       ...internalFields.map(field =>",
          "207:         expectAsync(new Parse.Query(Parse.User).exists(field).find()).toBeRejectedWith(",
          "208:           new Parse.Error(Parse.Error.INVALID_KEY_NAME, `Invalid key name: ${field}`)",
          "209:         )",
          "210:       ),",
          "211:       ...internalFields.map(field =>",
          "212:         new Parse.Query(Parse.User).exists(field).find({ useMasterKey: true })",
          "213:       ),",
          "214:     ]);",
          "215:   });",
          "217:   it('query protected field', async () => {",
          "218:     const user = new Parse.User();",
          "219:     user.setUsername('username1');",
          "220:     user.setPassword('password');",
          "221:     await user.signUp();",
          "222:     const config = Config.get(Parse.applicationId);",
          "223:     const obj = new Parse.Object('Test');",
          "225:     obj.set('owner', user);",
          "226:     obj.set('test', 'test');",
          "227:     obj.set('zip', 1234);",
          "228:     await obj.save();",
          "230:     const schema = await config.database.loadSchema();",
          "231:     await schema.updateClass(",
          "232:       'Test',",
          "233:       {},",
          "234:       {",
          "235:         get: { '*': true },",
          "236:         find: { '*': true },",
          "237:         protectedFields: { [user.id]: ['zip'] },",
          "238:       }",
          "239:     );",
          "240:     await Promise.all([",
          "241:       new Parse.Query('Test').exists('test').find(),",
          "242:       expectAsync(new Parse.Query('Test').exists('zip').find()).toBeRejectedWith(",
          "243:         new Parse.Error(",
          "244:           Parse.Error.OPERATION_FORBIDDEN,",
          "245:           'This user is not allowed to query zip on class Test'",
          "246:         )",
          "247:       ),",
          "248:     ]);",
          "249:   });",
          "251:   it('query protected field with matchesQuery', async () => {",
          "252:     const user = new Parse.User();",
          "253:     user.setUsername('username1');",
          "254:     user.setPassword('password');",
          "255:     await user.signUp();",
          "256:     const test = new Parse.Object('TestObject', { user });",
          "257:     await test.save();",
          "258:     const subQuery = new Parse.Query(Parse.User);",
          "259:     subQuery.exists('_perishable_token');",
          "260:     await expectAsync(",
          "261:       new Parse.Query('TestObject').matchesQuery('user', subQuery).find()",
          "262:     ).toBeRejectedWith(",
          "263:       new Parse.Error(Parse.Error.INVALID_KEY_NAME, 'Invalid key name: _perishable_token')",
          "264:     );",
          "265:   });",
          "",
          "---------------"
        ],
        "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js": [
          "File: src/Controllers/DatabaseController.js -> src/Controllers/DatabaseController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   return result;",
          "56: };",
          "65:   '_email_verify_token',",
          "66:   '_email_verify_token_expires_at',",
          "68:   '_failed_login_count',",
          "69: ];",
          "76:   if (query.ACL) {",
          "77:     throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Cannot query on ACL.');",
          "78:   }",
          "80:   if (query.$or) {",
          "81:     if (query.$or instanceof Array) {",
          "83:     } else {",
          "84:       throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Bad $or format - use an array value.');",
          "85:     }",
          "",
          "[Removed Lines]",
          "58: const specialQuerykeys = [",
          "59:   '$and',",
          "60:   '$or',",
          "61:   '$nor',",
          "62:   '_rperm',",
          "63:   '_wperm',",
          "64:   '_perishable_token',",
          "67:   '_account_lockout_expires_at',",
          "71: const isSpecialQueryKey = key => {",
          "72:   return specialQuerykeys.indexOf(key) >= 0;",
          "73: };",
          "75: const validateQuery = (query: any): void => {",
          "82:       query.$or.forEach(validateQuery);",
          "",
          "[Added Lines]",
          "58: const specialQueryKeys = ['$and', '$or', '$nor', '_rperm', '_wperm'];",
          "59: const specialMasterQueryKeys = [",
          "60:   ...specialQueryKeys,",
          "62:   '_perishable_token',",
          "63:   '_tombstone',",
          "66:   '_account_lockout_expires_at',",
          "67:   '_password_changed_at',",
          "68:   '_password_history',",
          "71: const validateQuery = (query: any, isMaster: boolean, update: boolean): void => {",
          "78:       query.$or.forEach(value => validateQuery(value, isMaster, update));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:   if (query.$and) {",
          "89:     if (query.$and instanceof Array) {",
          "91:     } else {",
          "92:       throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Bad $and format - use an array value.');",
          "93:     }",
          "",
          "[Removed Lines]",
          "90:       query.$and.forEach(validateQuery);",
          "",
          "[Added Lines]",
          "86:       query.$and.forEach(value => validateQuery(value, isMaster, update));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:   if (query.$nor) {",
          "97:     if (query.$nor instanceof Array && query.$nor.length > 0) {",
          "99:     } else {",
          "100:       throw new Parse.Error(",
          "101:         Parse.Error.INVALID_QUERY,",
          "",
          "[Removed Lines]",
          "98:       query.$nor.forEach(validateQuery);",
          "",
          "[Added Lines]",
          "94:       query.$nor.forEach(value => validateQuery(value, isMaster, update));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:         }",
          "116:       }",
          "117:     }",
          "119:       throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, `Invalid key name: ${key}`);",
          "120:     }",
          "121:   });",
          "",
          "[Removed Lines]",
          "118:     if (!isSpecialQueryKey(key) && !key.match(/^[a-zA-Z][a-zA-Z0-9_\\.]*$/)) {",
          "",
          "[Added Lines]",
          "114:     if (",
          "115:       !key.match(/^[a-zA-Z][a-zA-Z0-9_\\.]*$/) &&",
          "116:       ((!specialQueryKeys.includes(key) && !isMaster && !update) ||",
          "117:         (update && isMaster && !specialMasterQueryKeys.includes(key)))",
          "118:     ) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "208:       perms.protectedFields.temporaryKeys.forEach(k => delete object[k]);",
          "209:   }",
          "213:   }",
          "220:   if (isMaster) {",
          "221:     return object;",
          "222:   }",
          "233:   if (aclGroup.indexOf(object.objectId) > -1) {",
          "234:     return object;",
          "",
          "[Removed Lines]",
          "211:   if (!isUserClass) {",
          "212:     return object;",
          "215:   object.password = object._hashed_password;",
          "216:   delete object._hashed_password;",
          "218:   delete object.sessionToken;",
          "223:   delete object._email_verify_token;",
          "224:   delete object._perishable_token;",
          "225:   delete object._perishable_token_expires_at;",
          "226:   delete object._tombstone;",
          "227:   delete object._email_verify_token_expires_at;",
          "228:   delete object._failed_login_count;",
          "229:   delete object._account_lockout_expires_at;",
          "230:   delete object._password_changed_at;",
          "231:   delete object._password_history;",
          "",
          "[Added Lines]",
          "211:   if (isUserClass) {",
          "212:     object.password = object._hashed_password;",
          "213:     delete object._hashed_password;",
          "214:     delete object.sessionToken;",
          "220:   for (const key in object) {",
          "221:     if (key.charAt(0) === '_') {",
          "222:       delete object[key];",
          "223:     }",
          "224:   }",
          "226:   if (!isUserClass) {",
          "227:     return object;",
          "228:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "515:           if (acl) {",
          "516:             query = addWriteACL(query, acl);",
          "517:           }",
          "519:           return schemaController",
          "520:             .getOneSchema(className, true)",
          "521:             .catch(error => {",
          "",
          "[Removed Lines]",
          "518:           validateQuery(query);",
          "",
          "[Added Lines]",
          "515:           validateQuery(query, isMaster, true);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "761:         if (acl) {",
          "762:           query = addWriteACL(query, acl);",
          "763:         }",
          "765:         return schemaController",
          "766:           .getOneSchema(className)",
          "767:           .catch(error => {",
          "",
          "[Removed Lines]",
          "764:         validateQuery(query);",
          "",
          "[Added Lines]",
          "761:         validateQuery(query, isMaster, false);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1253:                   query = addReadACL(query, aclGroup);",
          "1254:                 }",
          "1255:               }",
          "1257:               if (count) {",
          "1258:                 if (!classExists) {",
          "1259:                   return 0;",
          "",
          "[Removed Lines]",
          "1256:               validateQuery(query);",
          "",
          "[Added Lines]",
          "1253:               validateQuery(query, isMaster, false);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1809:     return Promise.resolve(response);",
          "1810:   }",
          "1813:   static filterSensitiveData: (boolean, any[], any, any, any, string, any[], any) => void;",
          "1814: }",
          "",
          "[Removed Lines]",
          "1812:   static _validateQuery: any => void;",
          "",
          "[Added Lines]",
          "1809:   static _validateQuery: (any, boolean, boolean) => void;",
          "",
          "---------------"
        ],
        "src/RestQuery.js||src/RestQuery.js": [
          "File: src/RestQuery.js -> src/RestQuery.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     .then(() => {",
          "203:       return this.buildRestWhere();",
          "204:     })",
          "205:     .then(() => {",
          "206:       return this.handleIncludeAll();",
          "207:     })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:     .then(() => {",
          "206:       return this.denyProtectedFields();",
          "207:     })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688:   });",
          "689: };",
          "692: RestQuery.prototype.handleIncludeAll = function () {",
          "693:   if (!this.includeAll) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "694: RestQuery.prototype.denyProtectedFields = async function () {",
          "695:   if (this.auth.isMaster) {",
          "696:     return;",
          "697:   }",
          "698:   const schemaController = await this.config.database.loadSchema();",
          "699:   const protectedFields =",
          "700:     this.config.database.addProtectedFields(",
          "701:       schemaController,",
          "702:       this.className,",
          "703:       this.restWhere,",
          "704:       this.findOptions.acl,",
          "705:       this.auth,",
          "706:       this.findOptions",
          "707:     ) || [];",
          "708:   for (const key of protectedFields) {",
          "709:     if (this.restWhere[key]) {",
          "710:       throw new Parse.Error(",
          "711:         Parse.Error.OPERATION_FORBIDDEN,",
          "712:         `This user is not allowed to query ${key} on class ${this.className}`",
          "713:       );",
          "714:     }",
          "715:   }",
          "716: };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "443a5099059538d379fe491793a5871fcbb4f377",
      "candidate_info": {
        "commit_hash": "443a5099059538d379fe491793a5871fcbb4f377",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/443a5099059538d379fe491793a5871fcbb4f377",
        "files": [
          "spec/ParseLiveQuery.spec.js",
          "src/LiveQuery/ParseLiveQueryServer.js"
        ],
        "message": "feat: improved LiveQuery error logging with additional information (#7837)",
        "before_after_code_files": [
          "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
          "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
            "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
          ],
          "candidate": [
            "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
            "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js": [
          "File: spec/ParseLiveQuery.spec.js -> spec/ParseLiveQuery.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:     await object.save();",
          "320:   });",
          "322:   it('can handle afterEvent sendEvent to false', async done => {",
          "323:     await reconfigureServer({",
          "324:       liveQuery: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:   it('can log on afterLiveQueryEvent throw', async () => {",
          "323:     await reconfigureServer({",
          "324:       liveQuery: {",
          "325:         classNames: ['TestObject'],",
          "326:       },",
          "327:       startLiveQueryServer: true,",
          "328:       verbose: false,",
          "329:       silent: true,",
          "330:     });",
          "332:     const object = new TestObject();",
          "333:     await object.save();",
          "335:     const logger = require('../lib/logger').logger;",
          "336:     spyOn(logger, 'error').and.callFake(() => {});",
          "338:     let session = undefined;",
          "339:     Parse.Cloud.afterLiveQueryEvent('TestObject', ({ sessionToken }) => {",
          "340:       session = sessionToken;",
          "342:       foo.bar();",
          "344:     });",
          "346:     const query = new Parse.Query(TestObject);",
          "347:     query.equalTo('objectId', object.id);",
          "348:     const subscription = await query.subscribe();",
          "349:     object.set({ foo: 'bar' });",
          "350:     await object.save();",
          "351:     await new Promise(resolve => subscription.on('error', resolve));",
          "352:     expect(logger.error).toHaveBeenCalledWith(",
          "353:       `Failed running afterLiveQueryEvent on class TestObject for event update with session ${session} with:\\n Error: {\"message\":\"foo is not defined\",\"code\":141}`",
          "354:     );",
          "355:   });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "566:     await query.subscribe();",
          "567:   });",
          "569:   it('can handle beforeSubscribe error', async done => {",
          "570:     await reconfigureServer({",
          "571:       liveQuery: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604:   it('can log on beforeConnect throw', async () => {",
          "605:     await reconfigureServer({",
          "606:       liveQuery: {",
          "607:         classNames: ['TestObject'],",
          "608:       },",
          "609:       startLiveQueryServer: true,",
          "610:       verbose: false,",
          "611:       silent: true,",
          "612:     });",
          "614:     const logger = require('../lib/logger').logger;",
          "615:     spyOn(logger, 'error').and.callFake(() => {});",
          "616:     let token = undefined;",
          "617:     Parse.Cloud.beforeConnect(({ sessionToken }) => {",
          "618:       token = sessionToken;",
          "620:       foo.bar();",
          "622:     });",
          "623:     new Parse.Query(TestObject).subscribe();",
          "624:     await new Promise(resolve => Parse.LiveQuery.on('error', resolve));",
          "625:     Parse.LiveQuery.removeAllListeners('error');",
          "626:     expect(logger.error).toHaveBeenCalledWith(",
          "627:       `Failed running beforeConnect for session ${token} with:\\n Error: {\"message\":\"foo is not defined\",\"code\":141}`",
          "628:     );",
          "629:   });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "594:     });",
          "595:   });",
          "597:   it('can handle mutate beforeSubscribe query', async done => {",
          "598:     await reconfigureServer({",
          "599:       liveQuery: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "659:   it('can log on beforeSubscribe error', async () => {",
          "660:     await reconfigureServer({",
          "661:       liveQuery: {",
          "662:         classNames: ['TestObject'],",
          "663:       },",
          "664:       startLiveQueryServer: true,",
          "665:       verbose: false,",
          "666:       silent: true,",
          "667:     });",
          "669:     const logger = require('../lib/logger').logger;",
          "670:     spyOn(logger, 'error').and.callFake(() => {});",
          "672:     Parse.Cloud.beforeSubscribe(TestObject, () => {",
          "674:       foo.bar();",
          "676:     });",
          "678:     const query = new Parse.Query(TestObject);",
          "679:     const subscription = await query.subscribe();",
          "680:     await new Promise(resolve => subscription.on('error', resolve));",
          "682:     expect(logger.error).toHaveBeenCalledWith(",
          "683:       `Failed running beforeSubscribe on TestObject for session undefined with:\\n Error: {\"message\":\"foo is not defined\",\"code\":141}`",
          "684:     );",
          "685:   });",
          "",
          "---------------"
        ],
        "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js": [
          "File: src/LiveQuery/ParseLiveQueryServer.js -> src/LiveQuery/ParseLiveQueryServer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import SchemaController from '../Controllers/SchemaController';",
          "11: import _ from 'lodash';",
          "12: import { v4 as uuidv4 } from 'uuid';",
          "14: import { getAuthForSessionToken, Auth } from '../Auth';",
          "15: import { getCacheController } from '../Controllers';",
          "16: import LRU from 'lru-cache';",
          "",
          "[Removed Lines]",
          "13: import { runLiveQueryEventHandlers, getTrigger, runTrigger, toJSONwithObjects } from '../triggers';",
          "",
          "[Added Lines]",
          "13: import { runLiveQueryEventHandlers, getTrigger, runTrigger, resolveError, toJSONwithObjects } from '../triggers';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:               delete deletedParseObject.authData;",
          "195:             }",
          "196:             client.pushDelete(requestId, deletedParseObject);",
          "205:             logger.error(",
          "206:               `Failed running afterLiveQueryEvent on class ${className} for event ${res.event} with session ${res.sessionToken} with:\\n Error: ` +",
          "207:                 JSON.stringify(error)",
          "",
          "[Removed Lines]",
          "197:           } catch (error) {",
          "198:             Client.pushError(",
          "199:               client.parseWebSocket,",
          "200:               error.code || Parse.Error.SCRIPT_FAILED,",
          "201:               error.message || error,",
          "202:               false,",
          "203:               requestId",
          "204:             );",
          "",
          "[Added Lines]",
          "197:           } catch (e) {",
          "198:             const error = resolveError(e);",
          "199:             Client.pushError(client.parseWebSocket, error.code, error.message, false, requestId);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "358:             if (client[functionName]) {",
          "359:               client[functionName](requestId, currentParseObject, originalParseObject);",
          "360:             }",
          "369:             logger.error(",
          "370:               `Failed running afterLiveQueryEvent on class ${className} for event ${res.event} with session ${res.sessionToken} with:\\n Error: ` +",
          "371:                 JSON.stringify(error)",
          "",
          "[Removed Lines]",
          "361:           } catch (error) {",
          "362:             Client.pushError(",
          "363:               client.parseWebSocket,",
          "364:               error.code || Parse.Error.SCRIPT_FAILED,",
          "365:               error.message || error,",
          "366:               false,",
          "367:               requestId",
          "368:             );",
          "",
          "[Added Lines]",
          "356:           } catch (e) {",
          "357:             const error = resolveError(e);",
          "358:             Client.pushError(client.parseWebSocket, error.code, error.message, false, requestId);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "681:       logger.info(`Create new client: ${parseWebsocket.clientId}`);",
          "682:       client.pushConnect();",
          "683:       runLiveQueryEventHandlers(req);",
          "691:       logger.error(",
          "692:         `Failed running beforeConnect for session ${request.sessionToken} with:\\n Error: ` +",
          "693:           JSON.stringify(error)",
          "",
          "[Removed Lines]",
          "684:     } catch (error) {",
          "685:       Client.pushError(",
          "686:         parseWebsocket,",
          "687:         error.code || Parse.Error.SCRIPT_FAILED,",
          "688:         error.message || error,",
          "689:         false",
          "690:       );",
          "",
          "[Added Lines]",
          "674:     } catch (e) {",
          "675:       const error = resolveError(e);",
          "676:       Client.pushError(parseWebsocket, error.code, error.message, false);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "827:         installationId: client.installationId,",
          "828:       });",
          "829:     } catch (e) {",
          "837:       logger.error(",
          "838:         `Failed running beforeSubscribe on ${className} for session ${request.sessionToken} with:\\n Error: ` +",
          "840:       );",
          "841:     }",
          "842:   }",
          "",
          "[Removed Lines]",
          "830:       Client.pushError(",
          "831:         parseWebsocket,",
          "832:         e.code || Parse.Error.SCRIPT_FAILED,",
          "833:         e.message || e,",
          "834:         false,",
          "835:         request.requestId",
          "836:       );",
          "839:           JSON.stringify(e)",
          "",
          "[Added Lines]",
          "816:       const error = resolveError(e);",
          "817:       Client.pushError(parseWebsocket, error.code, error.message, false, request.requestId);",
          "820:           JSON.stringify(error)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68a3a875017d545253f0438c5d4c1c2b6c6c3b22",
      "candidate_info": {
        "commit_hash": "68a3a875017d545253f0438c5d4c1c2b6c6c3b22",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/68a3a875017d545253f0438c5d4c1c2b6c6c3b22",
        "files": [
          "CHANGELOG.md",
          "spec/CloudCode.spec.js",
          "spec/ParseLiveQuery.spec.js",
          "src/LiveQuery/ParseLiveQueryServer.js",
          "src/triggers.js"
        ],
        "message": "fix: set objects in afterFind triggers (#7311)",
        "before_after_code_files": [
          "spec/CloudCode.spec.js||spec/CloudCode.spec.js",
          "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
          "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js",
          "src/triggers.js||src/triggers.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
            "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
          ],
          "candidate": [
            "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
            "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/CloudCode.spec.js||spec/CloudCode.spec.js": [
          "File: spec/CloudCode.spec.js -> spec/CloudCode.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2391:     });",
          "2392:   });",
          "2394:   it('should have request headers', done => {",
          "2395:     Parse.Cloud.afterFind('MyObject', req => {",
          "2396:       expect(req.headers).toBeDefined();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2394:   it('can set a pointer object in afterFind', async () => {",
          "2395:     const obj = new Parse.Object('MyObject');",
          "2396:     await obj.save();",
          "2397:     Parse.Cloud.afterFind('MyObject', async ({ objects }) => {",
          "2398:       const otherObject = new Parse.Object('Test');",
          "2399:       otherObject.set('foo', 'bar');",
          "2400:       await otherObject.save();",
          "2401:       objects[0].set('Pointer', otherObject);",
          "2402:       objects[0].set('xyz', 'yolo');",
          "2403:       expect(objects[0].get('Pointer').get('foo')).toBe('bar');",
          "2404:     });",
          "2405:     const query = new Parse.Query('MyObject');",
          "2406:     query.equalTo('objectId', obj.id);",
          "2407:     const obj2 = await query.first();",
          "2408:     expect(obj2.get('xyz')).toBe('yolo');",
          "2409:     const pointer = obj2.get('Pointer');",
          "2410:     expect(pointer.get('foo')).toBe('bar');",
          "2411:   });",
          "2413:   it('can set invalid object in afterFind', async () => {",
          "2414:     const obj = new Parse.Object('MyObject');",
          "2415:     await obj.save();",
          "2416:     Parse.Cloud.afterFind('MyObject', () => [{}]);",
          "2417:     const query = new Parse.Query('MyObject');",
          "2418:     query.equalTo('objectId', obj.id);",
          "2419:     const obj2 = await query.first();",
          "2420:     expect(obj2).toBeDefined();",
          "2421:     expect(obj2.toJSON()).toEqual({});",
          "2422:     expect(obj2.id).toBeUndefined();",
          "2423:   });",
          "2425:   it('can return a unsaved object in afterFind', async () => {",
          "2426:     const obj = new Parse.Object('MyObject');",
          "2427:     await obj.save();",
          "2428:     Parse.Cloud.afterFind('MyObject', async () => {",
          "2429:       const otherObject = new Parse.Object('Test');",
          "2430:       otherObject.set('foo', 'bar');",
          "2431:       return [otherObject];",
          "2432:     });",
          "2433:     const query = new Parse.Query('MyObject');",
          "2434:     const obj2 = await query.first();",
          "2435:     expect(obj2.get('foo')).toEqual('bar');",
          "2436:     expect(obj2.id).toBeUndefined();",
          "2437:     await obj2.save();",
          "2438:     expect(obj2.id).toBeDefined();",
          "2439:   });",
          "",
          "---------------"
        ],
        "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js": [
          "File: spec/ParseLiveQuery.spec.js -> spec/ParseLiveQuery.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:     await object.save();",
          "359:   });",
          "361:   it('can handle async afterEvent modification', async done => {",
          "362:     await reconfigureServer({",
          "363:       liveQuery: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361:   it('can handle afterEvent set pointers', async done => {",
          "362:     await reconfigureServer({",
          "363:       liveQuery: {",
          "364:         classNames: ['TestObject'],",
          "365:       },",
          "366:       startLiveQueryServer: true,",
          "367:       verbose: false,",
          "368:       silent: true,",
          "369:     });",
          "371:     const object = new TestObject();",
          "372:     await object.save();",
          "374:     const secondObject = new Parse.Object('Test2');",
          "375:     secondObject.set('foo', 'bar');",
          "376:     await secondObject.save();",
          "378:     Parse.Cloud.afterLiveQueryEvent('TestObject', async ({ object }) => {",
          "379:       const query = new Parse.Query('Test2');",
          "380:       const obj = await query.first();",
          "381:       object.set('obj', obj);",
          "382:     });",
          "384:     const query = new Parse.Query(TestObject);",
          "385:     query.equalTo('objectId', object.id);",
          "386:     const subscription = await query.subscribe();",
          "387:     subscription.on('update', object => {",
          "388:       expect(object.get('obj')).toBeDefined();",
          "389:       expect(object.get('obj').get('foo')).toBe('bar');",
          "390:       done();",
          "391:     });",
          "392:     subscription.on('error', () => {",
          "393:       fail('error should not have been called.');",
          "394:     });",
          "395:     object.set({ foo: 'bar' });",
          "396:     await object.save();",
          "397:   });",
          "",
          "---------------"
        ],
        "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js": [
          "File: src/LiveQuery/ParseLiveQueryServer.js -> src/LiveQuery/ParseLiveQueryServer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import SchemaController from '../Controllers/SchemaController';",
          "11: import _ from 'lodash';",
          "12: import { v4 as uuidv4 } from 'uuid';",
          "14: import { getAuthForSessionToken, Auth } from '../Auth';",
          "15: import { getCacheController } from '../Controllers';",
          "16: import LRU from 'lru-cache';",
          "",
          "[Removed Lines]",
          "13: import { runLiveQueryEventHandlers, getTrigger, runTrigger } from '../triggers';",
          "",
          "[Added Lines]",
          "13: import { runLiveQueryEventHandlers, getTrigger, runTrigger, toJSONwithObjects } from '../triggers';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:               return;",
          "184:             }",
          "185:             if (res.object && typeof res.object.toJSON === 'function') {",
          "188:             }",
          "189:             if (",
          "190:               (deletedParseObject.className === '_User' ||",
          "",
          "[Removed Lines]",
          "186:               deletedParseObject = res.object.toJSON();",
          "187:               deletedParseObject.className = className;",
          "",
          "[Added Lines]",
          "186:               deletedParseObject = toJSONwithObjects(res.object, res.object.className || className);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "337:               return;",
          "338:             }",
          "339:             if (res.object && typeof res.object.toJSON === 'function') {",
          "342:             }",
          "344:             if (res.original && typeof res.original.toJSON === 'function') {",
          "347:             }",
          "348:             if (",
          "349:               (currentParseObject.className === '_User' ||",
          "",
          "[Removed Lines]",
          "340:               currentParseObject = res.object.toJSON();",
          "341:               currentParseObject.className = res.object.className || className;",
          "345:               originalParseObject = res.original.toJSON();",
          "346:               originalParseObject.className = res.original.className || className;",
          "",
          "[Added Lines]",
          "339:               currentParseObject = toJSONwithObjects(res.object, res.object.className || className);",
          "342:               originalParseObject = toJSONwithObjects(",
          "343:                 res.original,",
          "344:                 res.original.className || className",
          "345:               );",
          "",
          "---------------"
        ],
        "src/triggers.js||src/triggers.js": [
          "File: src/triggers.js -> src/triggers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:   Object.keys(_triggerStore).forEach(appId => delete _triggerStore[appId]);",
          "169: }",
          "171: export function getTrigger(className, triggerType, applicationId) {",
          "172:   if (!applicationId) {",
          "173:     throw 'Missing ApplicationID';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: export function toJSONwithObjects(object, className) {",
          "172:   if (!object || !object.toJSON) {",
          "173:     return {};",
          "174:   }",
          "175:   const toJSON = object.toJSON();",
          "176:   const stateController = Parse.CoreManager.getObjectStateController();",
          "177:   const [pending] = stateController.getPendingOps(object._getStateIdentifier());",
          "178:   for (const key in pending) {",
          "179:     const val = object.get(key);",
          "180:     if (!val || !val._toFullJSON) {",
          "181:       toJSON[key] = val;",
          "182:       continue;",
          "183:     }",
          "184:     toJSON[key] = val._toFullJSON();",
          "185:   }",
          "186:   if (className) {",
          "187:     toJSON.className = className;",
          "188:   }",
          "189:   return toJSON;",
          "190: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:           response = request.objects;",
          "324:         }",
          "325:         response = response.map(object => {",
          "327:         });",
          "328:         return resolve(response);",
          "329:       }",
          "",
          "[Removed Lines]",
          "326:           return object.toJSON();",
          "",
          "[Added Lines]",
          "347:           return toJSONwithObjects(object);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "451:         const response = trigger(request);",
          "452:         if (response && typeof response.then === 'function') {",
          "453:           return response.then(results => {",
          "460:             return results;",
          "461:           });",
          "462:         }",
          "",
          "[Removed Lines]",
          "454:             if (!results) {",
          "455:               throw new Parse.Error(",
          "456:                 Parse.Error.SCRIPT_FAILED,",
          "457:                 'AfterFind expect results to be returned in the promise'",
          "458:               );",
          "459:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "834ae366f98179c99332ea90692d943dd00851b1",
      "candidate_info": {
        "commit_hash": "834ae366f98179c99332ea90692d943dd00851b1",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/834ae366f98179c99332ea90692d943dd00851b1",
        "files": [
          "CHANGELOG.md",
          "package-lock.json",
          "package.json",
          "spec/ParseLiveQuery.spec.js",
          "spec/ParseUser.spec.js",
          "src/LiveQuery/ParseLiveQueryServer.js"
        ],
        "message": "Merge pull request from GHSA-7pr3-p5fm-8r9x\n\n* fix: strip sessionToken on _User LiveQuery\n\n* delete authData\n\n* add changelog\n\n* Update package.json\n\n* Update CHANGELOG.md\n\n* add changes\n\n* Update ParseLiveQuery.spec.js\n\nCo-authored-by: Manuel <5673677+mtrezza@users.noreply.github.com>",
        "before_after_code_files": [
          "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
          "spec/ParseUser.spec.js||spec/ParseUser.spec.js",
          "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
            "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
          ],
          "candidate": [
            "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
            "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js": [
          "File: spec/ParseLiveQuery.spec.js -> spec/ParseLiveQuery.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "840:     done();",
          "841:   });",
          "843:   afterEach(async function (done) {",
          "844:     const client = await Parse.CoreManager.getLiveQueryController().getDefaultLiveQueryClient();",
          "845:     client.close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "843:   it('should strip out session token in LiveQuery', async () => {",
          "844:     await reconfigureServer({",
          "845:       liveQuery: { classNames: ['_User'] },",
          "846:       startLiveQueryServer: true,",
          "847:       verbose: false,",
          "848:       silent: true,",
          "849:     });",
          "851:     const user = new Parse.User();",
          "852:     user.setUsername('username');",
          "853:     user.setPassword('password');",
          "854:     user.set('foo', 'bar');",
          "856:     const query = new Parse.Query(Parse.User);",
          "857:     query.equalTo('foo', 'bar');",
          "858:     const subscription = await query.subscribe();",
          "860:     const events = ['create', 'update', 'enter', 'leave', 'delete'];",
          "861:     const response = (obj, prev) => {",
          "862:       expect(obj.get('sessionToken')).toBeUndefined();",
          "863:       expect(obj.sessionToken).toBeUndefined();",
          "864:       expect(prev?.sessionToken).toBeUndefined();",
          "865:       if (prev && prev.get) {",
          "866:         expect(prev.get('sessionToken')).toBeUndefined();",
          "867:       }",
          "868:     };",
          "869:     const calls = {};",
          "870:     for (const key of events) {",
          "871:       calls[key] = response;",
          "872:       spyOn(calls, key).and.callThrough();",
          "873:       subscription.on(key, calls[key]);",
          "874:     }",
          "875:     await user.signUp();",
          "876:     user.unset('foo');",
          "877:     await user.save();",
          "878:     user.set('foo', 'bar');",
          "879:     await user.save();",
          "880:     user.set('yolo', 'bar');",
          "881:     await user.save();",
          "882:     await user.destroy();",
          "883:     await new Promise(resolve => process.nextTick(resolve));",
          "884:     for (const key of events) {",
          "885:       expect(calls[key]).toHaveBeenCalled();",
          "886:     }",
          "887:   });",
          "",
          "---------------"
        ],
        "spec/ParseUser.spec.js||spec/ParseUser.spec.js": [
          "File: spec/ParseUser.spec.js -> spec/ParseUser.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3966:       ok(model._isLinked('facebook'), 'User should be linked to facebook');",
          "3967:     });",
          "3968:   });",
          "3969: });",
          "3971: describe('Security Advisory GHSA-8w3j-g983-8jh5', function () {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3970:   it('should strip out authdata in LiveQuery', async () => {",
          "3971:     const provider = getMockFacebookProvider();",
          "3972:     Parse.User._registerAuthenticationProvider(provider);",
          "3974:     await reconfigureServer({",
          "3975:       liveQuery: { classNames: ['_User'] },",
          "3976:       startLiveQueryServer: true,",
          "3977:       verbose: false,",
          "3978:       silent: true,",
          "3979:     });",
          "3981:     const query = new Parse.Query(Parse.User);",
          "3982:     query.doesNotExist('foo');",
          "3983:     const subscription = await query.subscribe();",
          "3985:     const events = ['create', 'update', 'enter', 'leave', 'delete'];",
          "3986:     const response = (obj, prev) => {",
          "3987:       expect(obj.get('authData')).toBeUndefined();",
          "3988:       expect(obj.authData).toBeUndefined();",
          "3989:       expect(prev?.authData).toBeUndefined();",
          "3990:       if (prev && prev.get) {",
          "3991:         expect(prev.get('authData')).toBeUndefined();",
          "3992:       }",
          "3993:     };",
          "3994:     const calls = {};",
          "3995:     for (const key of events) {",
          "3996:       calls[key] = response;",
          "3997:       spyOn(calls, key).and.callThrough();",
          "3998:       subscription.on(key, calls[key]);",
          "3999:     }",
          "4000:     const user = await Parse.User._logInWith('facebook');",
          "4002:     user.set('foo', 'bar');",
          "4003:     await user.save();",
          "4004:     user.unset('foo');",
          "4005:     await user.save();",
          "4006:     user.set('yolo', 'bar');",
          "4007:     await user.save();",
          "4008:     await user.destroy();",
          "4009:     await new Promise(resolve => process.nextTick(resolve));",
          "4010:     for (const key of events) {",
          "4011:       expect(calls[key]).toHaveBeenCalled();",
          "4012:     }",
          "4013:   });",
          "",
          "---------------"
        ],
        "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js": [
          "File: src/LiveQuery/ParseLiveQueryServer.js -> src/LiveQuery/ParseLiveQueryServer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:               deletedParseObject = res.object.toJSON();",
          "187:               deletedParseObject.className = className;",
          "188:             }",
          "189:             client.pushDelete(requestId, deletedParseObject);",
          "190:           } catch (error) {",
          "191:             Client.pushError(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:             if (",
          "190:               (deletedParseObject.className === '_User' ||",
          "191:                 deletedParseObject.className === '_Session') &&",
          "192:               !client.hasMasterKey",
          "193:             ) {",
          "194:               delete deletedParseObject.sessionToken;",
          "195:               delete deletedParseObject.authData;",
          "196:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:               originalParseObject = res.original.toJSON();",
          "338:               originalParseObject.className = res.original.className || className;",
          "339:             }",
          "340:             const functionName = 'push' + res.event.charAt(0).toUpperCase() + res.event.slice(1);",
          "341:             if (client[functionName]) {",
          "342:               client[functionName](requestId, currentParseObject, originalParseObject);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:             if (",
          "349:               (currentParseObject.className === '_User' ||",
          "350:                 currentParseObject.className === '_Session') &&",
          "351:               !client.hasMasterKey",
          "352:             ) {",
          "353:               delete currentParseObject.sessionToken;",
          "354:               delete originalParseObject?.sessionToken;",
          "355:               delete currentParseObject.authData;",
          "356:               delete originalParseObject?.authData;",
          "357:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3bcc9365cd6f08b0a32c132e8e5ff6d1b650863",
      "candidate_info": {
        "commit_hash": "f3bcc9365cd6f08b0a32c132e8e5ff6d1b650863",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/f3bcc9365cd6f08b0a32c132e8e5ff6d1b650863",
        "files": [
          "README.md",
          "spec/EmailVerificationToken.spec.js",
          "spec/Middlewares.spec.js",
          "spec/ParseLiveQuery.spec.js",
          "spec/ParseUser.spec.js",
          "spec/PasswordPolicy.spec.js",
          "spec/RegexVulnerabilities.spec.js",
          "spec/helper.js",
          "spec/rest.spec.js",
          "src/Auth.js",
          "src/Config.js",
          "src/Controllers/DatabaseController.js",
          "src/Controllers/SchemaController.js",
          "src/Controllers/UserController.js",
          "src/LiveQuery/ParseLiveQueryServer.js",
          "src/Options/Definitions.js",
          "src/Options/docs.js",
          "src/Options/index.js",
          "src/ParseServer.js",
          "src/RestWrite.js",
          "src/Routers/UsersRouter.js",
          "src/middlewares.js",
          "src/rest.js"
        ],
        "message": "feat: Access the internal scope of Parse Server using the new `maintenanceKey`; the internal scope contains unofficial and undocumented fields (prefixed with underscore `_`) which are used internally by Parse Server; you may want to manipulate these fields for out-of-band changes such as data migration or correction tasks; changes within the internal scope of Parse Server may happen at any time without notice or changelog entry, it is therefore recommended to look at the source code of Parse Server to understand the effects of manipulating internal fields before using the key; it is discouraged to use the `maintenanceKey` for routine operations in a production environment; see [access scopes](https://github.com/parse-community/parse-server#access-scopes) (#8212)\n\nBREAKING CHANGE: Fields in the internal scope of Parse Server (prefixed with underscore `_`) are only returned using the new `maintenanceKey`; previously the `masterKey` allowed reading of internal fields; see [access scopes](https://github.com/parse-community/parse-server#access-scopes) for a comparison of the keys' access permissions (#8212)",
        "before_after_code_files": [
          "spec/EmailVerificationToken.spec.js||spec/EmailVerificationToken.spec.js",
          "spec/Middlewares.spec.js||spec/Middlewares.spec.js",
          "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
          "spec/ParseUser.spec.js||spec/ParseUser.spec.js",
          "spec/PasswordPolicy.spec.js||spec/PasswordPolicy.spec.js",
          "spec/RegexVulnerabilities.spec.js||spec/RegexVulnerabilities.spec.js",
          "spec/helper.js||spec/helper.js",
          "spec/rest.spec.js||spec/rest.spec.js",
          "src/Auth.js||src/Auth.js",
          "src/Config.js||src/Config.js",
          "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js",
          "src/Controllers/SchemaController.js||src/Controllers/SchemaController.js",
          "src/Controllers/UserController.js||src/Controllers/UserController.js",
          "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js",
          "src/Options/Definitions.js||src/Options/Definitions.js",
          "src/Options/docs.js||src/Options/docs.js",
          "src/Options/index.js||src/Options/index.js",
          "src/ParseServer.js||src/ParseServer.js",
          "src/RestWrite.js||src/RestWrite.js",
          "src/Routers/UsersRouter.js||src/Routers/UsersRouter.js",
          "src/middlewares.js||src/middlewares.js",
          "src/rest.js||src/rest.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
            "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js",
            "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
          ],
          "candidate": [
            "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
            "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js",
            "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/EmailVerificationToken.spec.js||spec/EmailVerificationToken.spec.js": [
          "File: spec/EmailVerificationToken.spec.js -> spec/EmailVerificationToken.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict';",
          "3: const Config = require('../lib/Config');",
          "4: const request = require('../lib/request');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: const Auth = require('../lib/Auth');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:       })",
          "263:       .then(() => {",
          "264:         const config = Config.get('test');",
          "268:       })",
          "269:       .then(results => {",
          "270:         expect(results.length).toBe(1);",
          "",
          "[Removed Lines]",
          "265:         return config.database.find('_User', {",
          "266:           username: 'sets_email_verify_token_expires_at',",
          "267:         });",
          "",
          "[Added Lines]",
          "266:         return config.database.find(",
          "267:           '_User',",
          "268:           {",
          "269:             username: 'sets_email_verify_token_expires_at',",
          "270:           },",
          "271:           {},",
          "272:           Auth.maintenance(config)",
          "273:         );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "499:       .then(() => {",
          "500:         const config = Config.get('test');",
          "501:         return config.database",
          "503:           .then(results => {",
          "504:             return results[0];",
          "505:           });",
          "",
          "[Removed Lines]",
          "502:           .find('_User', { username: 'newEmailVerifyTokenOnEmailReset' })",
          "",
          "[Added Lines]",
          "508:           .find(",
          "509:             '_User',",
          "510:             { username: 'newEmailVerifyTokenOnEmailReset' },",
          "511:             {},",
          "512:             Auth.maintenance(config)",
          "513:           )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "583:         const config = Config.get('test');",
          "584:         return config.database",
          "586:           .then(results => {",
          "587:             return results[0];",
          "588:           });",
          "",
          "[Removed Lines]",
          "585:           .find('_User', { username: 'resends_verification_token' })",
          "",
          "[Added Lines]",
          "596:           .find('_User', { username: 'resends_verification_token' }, {}, Auth.maintenance(config))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "599:         done();",
          "600:       })",
          "601:       .catch(error => {",
          "602:         jfail(error);",
          "603:         done();",
          "604:       });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613:         console.log(error);",
          "",
          "---------------"
        ],
        "spec/Middlewares.spec.js||spec/Middlewares.spec.js": [
          "File: spec/Middlewares.spec.js -> spec/Middlewares.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     expect(fakeReq.auth.isMaster).toBe(false);",
          "163:   });",
          "165:   it('should succeed if the ip does belong to masterKeyIps list', async () => {",
          "166:     AppCache.put(fakeReq.body._ApplicationId, {",
          "167:       masterKey: 'masterKey',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:   it('should not succeed if the ip does not belong to maintenanceKeyIps list', async () => {",
          "166:     const logger = require('../lib/logger').logger;",
          "167:     spyOn(logger, 'error').and.callFake(() => {});",
          "168:     AppCache.put(fakeReq.body._ApplicationId, {",
          "169:       maintenanceKey: 'masterKey',",
          "170:       maintenanceKeyIps: ['10.0.0.0', '10.0.0.1'],",
          "171:     });",
          "172:     fakeReq.ip = '10.0.0.2';",
          "173:     fakeReq.headers['x-parse-maintenance-key'] = 'masterKey';",
          "174:     await new Promise(resolve => middlewares.handleParseHeaders(fakeReq, fakeRes, resolve));",
          "175:     expect(fakeReq.auth.isMaintenance).toBe(false);",
          "176:     expect(logger.error).toHaveBeenCalledWith(",
          "177:       `Request using maintenance key rejected as the request IP address '10.0.0.2' is not set in Parse Server option 'maintenanceKeyIps'.`",
          "178:     );",
          "179:   });",
          "",
          "---------------"
        ],
        "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js": [
          "File: spec/ParseLiveQuery.spec.js -> spec/ParseLiveQuery.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict';",
          "2: const UserController = require('../lib/Controllers/UserController').UserController;",
          "3: const Config = require('../lib/Config');",
          "4: const validatorFail = () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: const Auth = require('../lib/Auth');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "977:     };",
          "979:     await reconfigureServer({",
          "980:       liveQuery: {",
          "981:         classNames: [Parse.User],",
          "982:       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "981:       maintenanceKey: 'test2',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "998:         .signUp()",
          "999:         .then(() => {",
          "1000:           const config = Config.get('test');",
          "1004:         })",
          "1005:         .then(async results => {",
          "1006:           const foundUser = results[0];",
          "",
          "[Removed Lines]",
          "1001:           return config.database.find('_User', {",
          "1002:             username: 'zxcv',",
          "1003:           });",
          "",
          "[Added Lines]",
          "1003:           return config.database.find(",
          "1004:             '_User',",
          "1005:             {",
          "1006:               username: 'zxcv',",
          "1007:             },",
          "1008:             {},",
          "1009:             Auth.maintenance(config)",
          "1010:           );",
          "",
          "---------------"
        ],
        "spec/ParseUser.spec.js||spec/ParseUser.spec.js": [
          "File: spec/ParseUser.spec.js -> spec/ParseUser.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3522:       });",
          "3523:   });",
          "3526:     const emailAdapter = {",
          "3527:       sendVerificationEmail: () => {},",
          "3528:       sendPasswordResetEmail: () => Promise.resolve(),",
          "3529:       sendMail: () => Promise.resolve(),",
          "3530:     };",
          "3532:     const user = new Parse.User();",
          "3533:     user.set({",
          "3534:       username: 'hello',",
          "3535:       password: 'world',",
          "3536:       email: 'test@email.com',",
          "3537:     });",
          "3540:       appName: 'unused',",
          "3541:       verifyUserEmails: true,",
          "3542:       emailAdapter: emailAdapter,",
          "3543:       publicServerURL: 'http://localhost:8378/1',",
          "3559:   });",
          "3561:   it('should revoke sessions when setting paswword with masterKey (#3289)', done => {",
          "",
          "[Removed Lines]",
          "3525:   it('should not allow updates to hidden fields', done => {",
          "3539:     reconfigureServer({",
          "3544:     })",
          "3545:       .then(() => {",
          "3546:         return user.signUp();",
          "3547:       })",
          "3548:       .then(() => {",
          "3549:         return Parse.User.current().set('_email_verify_token', 'bad').save();",
          "3550:       })",
          "3551:       .then(() => {",
          "3552:         fail('Should not be able to update email verification token');",
          "3553:         done();",
          "3554:       })",
          "3555:       .catch(err => {",
          "3556:         expect(err).toBeDefined();",
          "3557:         done();",
          "3558:       });",
          "",
          "[Added Lines]",
          "3525:   it('should not allow updates to hidden fields', async () => {",
          "3537:     await reconfigureServer({",
          "3538:       appName: 'unused',",
          "3539:       verifyUserEmails: true,",
          "3540:       emailAdapter: emailAdapter,",
          "3541:       publicServerURL: 'http://localhost:8378/1',",
          "3542:     });",
          "3543:     await user.signUp();",
          "3544:     user.set('_email_verify_token', 'bad', { ignoreValidation: true });",
          "3545:     await expectAsync(user.save()).toBeRejectedWith(",
          "3546:       new Parse.Error(Parse.Error.INVALID_KEY_NAME, 'Invalid field name: _email_verify_token.')",
          "3547:     );",
          "3548:   });",
          "3550:   it('should allow updates to fields with maintenanceKey', async () => {",
          "3551:     const emailAdapter = {",
          "3552:       sendVerificationEmail: () => {},",
          "3553:       sendPasswordResetEmail: () => Promise.resolve(),",
          "3554:       sendMail: () => Promise.resolve(),",
          "3555:     };",
          "3556:     const user = new Parse.User();",
          "3557:     user.set({",
          "3558:       username: 'hello',",
          "3559:       password: 'world',",
          "3560:       email: 'test@example.com',",
          "3561:     });",
          "3562:     await reconfigureServer({",
          "3564:       maintenanceKey: 'test2',",
          "3566:       emailVerifyTokenValidityDuration: 5,",
          "3567:       accountLockout: {",
          "3568:         duration: 1,",
          "3569:         threshold: 1,",
          "3570:       },",
          "3573:     });",
          "3574:     await user.signUp();",
          "3575:     for (let i = 0; i < 2; i++) {",
          "3576:       try {",
          "3577:         await Parse.User.logIn(user.getEmail(), 'abc');",
          "3578:       } catch (e) {",
          "3579:         expect(e.code).toBe(Parse.Error.OBJECT_NOT_FOUND);",
          "3580:         expect(",
          "3581:           e.message === 'Invalid username/password.' ||",
          "3582:             e.message ===",
          "3583:               'Your account is locked due to multiple failed login attempts. Please try again after 1 minute(s)'",
          "3584:         ).toBeTrue();",
          "3585:       }",
          "3586:     }",
          "3587:     await Parse.User.requestPasswordReset(user.getEmail());",
          "3588:     const headers = {",
          "3589:       'X-Parse-Application-Id': 'test',",
          "3590:       'X-Parse-Rest-API-Key': 'rest',",
          "3591:       'X-Parse-Maintenance-Key': 'test2',",
          "3592:       'Content-Type': 'application/json',",
          "3593:     };",
          "3594:     const userMaster = await request({",
          "3595:       method: 'GET',",
          "3596:       url: `http://localhost:8378/1/classes/_User`,",
          "3597:       json: true,",
          "3598:       headers,",
          "3599:     }).then(res => res.data.results[0]);",
          "3600:     expect(Object.keys(userMaster).sort()).toEqual(",
          "3601:       [",
          "3602:         'ACL',",
          "3603:         '_account_lockout_expires_at',",
          "3604:         '_email_verify_token',",
          "3605:         '_email_verify_token_expires_at',",
          "3606:         '_failed_login_count',",
          "3607:         '_perishable_token',",
          "3608:         'createdAt',",
          "3609:         'email',",
          "3610:         'emailVerified',",
          "3611:         'objectId',",
          "3612:         'updatedAt',",
          "3613:         'username',",
          "3614:       ].sort()",
          "3615:     );",
          "3616:     const toSet = {",
          "3617:       _account_lockout_expires_at: new Date(),",
          "3618:       _email_verify_token: 'abc',",
          "3619:       _email_verify_token_expires_at: new Date(),",
          "3620:       _failed_login_count: 0,",
          "3621:       _perishable_token_expires_at: new Date(),",
          "3622:       _perishable_token: 'abc',",
          "3623:     };",
          "3624:     await request({",
          "3625:       method: 'PUT',",
          "3626:       headers,",
          "3627:       url: Parse.serverURL + '/users/' + userMaster.objectId,",
          "3628:       json: true,",
          "3629:       body: toSet,",
          "3630:     }).then(res => res.data);",
          "3631:     const update = await request({",
          "3632:       method: 'GET',",
          "3633:       url: `http://localhost:8378/1/classes/_User`,",
          "3634:       json: true,",
          "3635:       headers,",
          "3636:     }).then(res => res.data.results[0]);",
          "3637:     for (const key in toSet) {",
          "3638:       const value = toSet[key];",
          "3639:       if (update[key] && update[key].iso) {",
          "3640:         expect(update[key].iso).toEqual(value.toISOString());",
          "3641:       } else if (value.toISOString) {",
          "3642:         expect(update[key]).toEqual(value.toISOString());",
          "3643:       } else {",
          "3644:         expect(update[key]).toEqual(value);",
          "3645:       }",
          "3646:     }",
          "",
          "---------------"
        ],
        "spec/PasswordPolicy.spec.js||spec/PasswordPolicy.spec.js": [
          "File: spec/PasswordPolicy.spec.js -> spec/PasswordPolicy.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1677:   });",
          "1679:   it('should not infinitely loop if maxPasswordHistory is 1 (#4918)', async () => {",
          "1680:     const user = new Parse.User();",
          "1681:     const query = new Parse.Query(Parse.User);",
          "1683:     await reconfigureServer({",
          "1684:       appName: 'passwordPolicy',",
          "1685:       verifyUserEmails: false,",
          "1686:       passwordPolicy: {",
          "1687:         maxPasswordHistory: 1,",
          "1688:       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1680:     const headers = {",
          "1681:       'X-Parse-Application-Id': 'test',",
          "1682:       'X-Parse-Rest-API-Key': 'test',",
          "1683:       'X-Parse-Maintenance-Key': 'test2',",
          "1684:       'Content-Type': 'application/json',",
          "1685:     };",
          "1692:       maintenanceKey: 'test2',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1696:     user.setPassword('user2');",
          "1697:     await user.save();",
          "1702:     user.setPassword('user3');",
          "1703:     await user.save();",
          "1709:   });",
          "1710: });",
          "",
          "[Removed Lines]",
          "1699:     const result1 = await query.get(user.id, { useMasterKey: true });",
          "1700:     expect(result1.get('_password_history').length).toBe(1);",
          "1705:     const result2 = await query.get(user.id, { useMasterKey: true });",
          "1706:     expect(result2.get('_password_history').length).toBe(1);",
          "1708:     expect(result1.get('_password_history')).not.toEqual(result2.get('_password_history'));",
          "",
          "[Added Lines]",
          "1706:     const user1 = await query.get(user.id, { useMasterKey: true });",
          "1707:     expect(user1.get('_password_history')).toBeUndefined();",
          "1709:     const result1 = await request({",
          "1710:       method: 'GET',",
          "1711:       url: `http://localhost:8378/1/classes/_User/${user.id}`,",
          "1712:       json: true,",
          "1713:       headers,",
          "1714:     }).then(res => res.data);",
          "1715:     expect(result1._password_history.length).toBe(1);",
          "1720:     const result2 = await request({",
          "1721:       method: 'GET',",
          "1722:       url: `http://localhost:8378/1/classes/_User/${user.id}`,",
          "1723:       json: true,",
          "1724:       headers,",
          "1725:     }).then(res => res.data);",
          "1726:     expect(result2._password_history.length).toBe(1);",
          "1728:     expect(result1._password_history).not.toEqual(result2._password_history);",
          "",
          "---------------"
        ],
        "spec/RegexVulnerabilities.spec.js||spec/RegexVulnerabilities.spec.js": [
          "File: spec/RegexVulnerabilities.spec.js -> spec/RegexVulnerabilities.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: describe('Regex Vulnerabilities', function () {",
          "20:   beforeEach(async function () {",
          "21:     await reconfigureServer({",
          "22:       verifyUserEmails: true,",
          "23:       emailAdapter,",
          "24:       appName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:       maintenanceKey: 'test2',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     it('should work with plain token', async function () {",
          "100:       expect(this.user.get('emailVerified')).toEqual(false);",
          "102:       await request({",
          "106:         method: 'GET',",
          "107:       });",
          "108:       await this.user.fetch({ useMasterKey: true });",
          "",
          "[Removed Lines]",
          "103:         url: `${serverURL}/apps/test/verify_email?username=someemail@somedomain.com&token=${this.user.get(",
          "104:           '_email_verify_token'",
          "105:         )}`,",
          "",
          "[Added Lines]",
          "102:       const current = await request({",
          "103:         method: 'GET',",
          "104:         url: `http://localhost:8378/1/classes/_User/${this.user.id}`,",
          "105:         json: true,",
          "106:         headers: {",
          "107:           'X-Parse-Application-Id': 'test',",
          "108:           'X-Parse-Rest-API-Key': 'test',",
          "109:           'X-Parse-Maintenance-Key': 'test2',",
          "110:           'Content-Type': 'application/json',",
          "111:         },",
          "112:       }).then(res => res.data);",
          "115:         url: `${serverURL}/apps/test/verify_email?username=someemail@somedomain.com&token=${current._email_verify_token}`,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:           email: 'someemail@somedomain.com',",
          "165:         }),",
          "166:       });",
          "169:       const passwordResetResponse = await request({",
          "170:         url: `${serverURL}/apps/test/request_password_reset?username=someemail@somedomain.com&token=${token}`,",
          "171:         method: 'GET',",
          "",
          "[Removed Lines]",
          "167:       await this.user.fetch({ useMasterKey: true });",
          "168:       const token = this.user.get('_perishable_token');",
          "",
          "[Added Lines]",
          "177:       const current = await request({",
          "178:         method: 'GET',",
          "179:         url: `http://localhost:8378/1/classes/_User/${this.user.id}`,",
          "180:         json: true,",
          "181:         headers: {",
          "182:           'X-Parse-Application-Id': 'test',",
          "183:           'X-Parse-Rest-API-Key': 'test',",
          "184:           'X-Parse-Maintenance-Key': 'test2',",
          "185:           'Content-Type': 'application/json',",
          "186:         },",
          "187:       }).then(res => res.data);",
          "188:       const token = current._perishable_token;",
          "",
          "---------------"
        ],
        "spec/helper.js||spec/helper.js": [
          "File: spec/helper.js -> spec/helper.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     enableForAnonymousUser: true,",
          "114:     enableForAuthenticatedUser: true,",
          "115:   },",
          "117:   push: {",
          "118:     android: {",
          "119:       senderId: 'yolo',",
          "",
          "[Removed Lines]",
          "116:   masterKeyIps: ['127.0.0.1'],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "spec/rest.spec.js||spec/rest.spec.js": [
          "File: spec/rest.spec.js -> spec/rest.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "859:     await reconfigureServer();",
          "860:   });",
          "862:   it('should throw when trying to create RestWrite', () => {",
          "863:     const config = Config.get('test');",
          "864:     expect(() => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "862:   it('should throw when masterKey and maintenanceKey are the same', async () => {",
          "863:     await expectAsync(",
          "864:       reconfigureServer({",
          "865:         masterKey: 'yolo',",
          "866:         maintenanceKey: 'yolo',",
          "867:       })",
          "868:     ).toBeRejectedWith(new Error('masterKey and maintenanceKey should be different'));",
          "869:   });",
          "",
          "---------------"
        ],
        "src/Auth.js||src/Auth.js": [
          "File: src/Auth.js -> src/Auth.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   config,",
          "12:   cacheController = undefined,",
          "13:   isMaster = false,",
          "14:   isReadOnly = false,",
          "15:   user,",
          "16:   installationId,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:   isMaintenance = false,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:   this.cacheController = cacheController || (config && config.cacheController);",
          "20:   this.installationId = installationId;",
          "21:   this.isMaster = isMaster;",
          "22:   this.user = user;",
          "23:   this.isReadOnly = isReadOnly;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:   this.isMaintenance = isMaintenance;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:   if (this.isMaster) {",
          "36:     return false;",
          "37:   }",
          "38:   if (this.user) {",
          "39:     return false;",
          "40:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   if (this.isMaintenance) {",
          "41:     return false;",
          "42:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "46:   return new Auth({ config, isMaster: true });",
          "47: }",
          "50: function readOnly(config) {",
          "51:   return new Auth({ config, isMaster: true, isReadOnly: true });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: function maintenance(config) {",
          "56:   return new Auth({ config, isMaintenance: true });",
          "57: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "151: Auth.prototype.getUserRoles = function () {",
          "153:     return Promise.resolve([]);",
          "154:   }",
          "155:   if (this.fetchedRoles) {",
          "",
          "[Removed Lines]",
          "152:   if (this.isMaster || !this.user) {",
          "",
          "[Added Lines]",
          "162:   if (this.isMaster || this.isMaintenance || !this.user) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "493: module.exports = {",
          "494:   Auth,",
          "495:   master,",
          "496:   nobody,",
          "497:   readOnly,",
          "498:   getAuthForSessionToken,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:   maintenance,",
          "",
          "---------------"
        ],
        "src/Config.js||src/Config.js": [
          "File: src/Config.js -> src/Config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     passwordPolicy,",
          "74:     masterKeyIps,",
          "75:     masterKey,",
          "76:     readOnlyMasterKey,",
          "77:     allowHeaders,",
          "78:     idempotencyOptions,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     maintenanceKey,",
          "77:     maintenanceKeyIps,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:       throw new Error('masterKey and readOnlyMasterKey should be different');",
          "92:     }",
          "94:     const emailAdapter = userController.adapter;",
          "95:     if (verifyUserEmails) {",
          "96:       this.validateEmailConfiguration({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     if (masterKey === maintenanceKey) {",
          "97:       throw new Error('masterKey and maintenanceKey should be different');",
          "98:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:       }",
          "117:     }",
          "118:     this.validateSessionConfiguration(sessionLength, expireInactiveSessions);",
          "120:     this.validateDefaultLimit(defaultLimit);",
          "121:     this.validateMaxLimit(maxLimit);",
          "122:     this.validateAllowHeaders(allowHeaders);",
          "",
          "[Removed Lines]",
          "119:     this.validateMasterKeyIps(masterKeyIps);",
          "",
          "[Added Lines]",
          "125:     this.validateIps('masterKeyIps', masterKeyIps);",
          "126:     this.validateIps('maintenanceKeyIps', maintenanceKeyIps);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "440:     }",
          "441:   }",
          "444:     for (let ip of masterKeyIps) {",
          "445:       if (ip.includes('/')) {",
          "446:         ip = ip.split('/')[0];",
          "447:       }",
          "448:       if (!net.isIP(ip)) {",
          "450:       }",
          "451:     }",
          "452:   }",
          "",
          "[Removed Lines]",
          "443:   static validateMasterKeyIps(masterKeyIps) {",
          "449:         throw `The Parse Server option \"masterKeyIps\" contains an invalid IP address \"${ip}\".`;",
          "",
          "[Added Lines]",
          "450:   static validateIps(field, masterKeyIps) {",
          "456:         throw `The Parse Server option \"${field}\" contains an invalid IP address \"${ip}\".`;",
          "",
          "---------------"
        ],
        "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js": [
          "File: src/Controllers/DatabaseController.js -> src/Controllers/DatabaseController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   '_password_history',",
          "69: ];",
          "72:   if (query.ACL) {",
          "73:     throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Cannot query on ACL.');",
          "74:   }",
          "76:   if (query.$or) {",
          "77:     if (query.$or instanceof Array) {",
          "79:     } else {",
          "80:       throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Bad $or format - use an array value.');",
          "81:     }",
          "",
          "[Removed Lines]",
          "71: const validateQuery = (query: any, isMaster: boolean, update: boolean): void => {",
          "78:       query.$or.forEach(value => validateQuery(value, isMaster, update));",
          "",
          "[Added Lines]",
          "71: const validateQuery = (",
          "72:   query: any,",
          "73:   isMaster: boolean,",
          "74:   isMaintenance: boolean,",
          "75:   update: boolean",
          "76: ): void => {",
          "77:   if (isMaintenance) {",
          "78:     isMaster = true;",
          "79:   }",
          "86:       query.$or.forEach(value => validateQuery(value, isMaster, isMaintenance, update));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   if (query.$and) {",
          "85:     if (query.$and instanceof Array) {",
          "87:     } else {",
          "88:       throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Bad $and format - use an array value.');",
          "89:     }",
          "",
          "[Removed Lines]",
          "86:       query.$and.forEach(value => validateQuery(value, isMaster, update));",
          "",
          "[Added Lines]",
          "94:       query.$and.forEach(value => validateQuery(value, isMaster, isMaintenance, update));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   if (query.$nor) {",
          "93:     if (query.$nor instanceof Array && query.$nor.length > 0) {",
          "95:     } else {",
          "96:       throw new Parse.Error(",
          "97:         Parse.Error.INVALID_QUERY,",
          "",
          "[Removed Lines]",
          "94:       query.$nor.forEach(value => validateQuery(value, isMaster, update));",
          "",
          "[Added Lines]",
          "102:       query.$nor.forEach(value => validateQuery(value, isMaster, isMaintenance, update));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125: const filterSensitiveData = (",
          "126:   isMaster: boolean,",
          "127:   aclGroup: any[],",
          "128:   auth: any,",
          "129:   operation: any,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:   isMaintenance: boolean,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "195:   }",
          "197:   const isUserClass = className === '_User';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:   if (isUserClass) {",
          "208:     object.password = object._hashed_password;",
          "209:     delete object._hashed_password;",
          "210:     delete object.sessionToken;",
          "211:   }",
          "213:   if (isMaintenance) {",
          "214:     return object;",
          "215:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "208:       perms.protectedFields.temporaryKeys.forEach(k => delete object[k]);",
          "209:   }",
          "220:   for (const key in object) {",
          "221:     if (key.charAt(0) === '_') {",
          "222:       delete object[key];",
          "223:     }",
          "224:   }",
          "227:     return object;",
          "228:   }",
          "",
          "[Removed Lines]",
          "211:   if (isUserClass) {",
          "212:     object.password = object._hashed_password;",
          "213:     delete object._hashed_password;",
          "214:     delete object.sessionToken;",
          "215:   }",
          "217:   if (isMaster) {",
          "218:     return object;",
          "219:   }",
          "226:   if (!isUserClass) {",
          "",
          "[Added Lines]",
          "235:   if (!isUserClass || isMaster) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "439:     className: string,",
          "440:     object: any,",
          "441:     query: any,",
          "443:   ): Promise<boolean> {",
          "444:     let schema;",
          "445:     const acl = runOptions.acl;",
          "",
          "[Removed Lines]",
          "442:     runOptions: QueryOptions",
          "",
          "[Added Lines]",
          "451:     runOptions: QueryOptions,",
          "452:     maintenance: boolean",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "454:         return this.canAddField(schema, className, object, aclGroup, runOptions);",
          "455:       })",
          "456:       .then(() => {",
          "458:       });",
          "459:   }",
          "",
          "[Removed Lines]",
          "457:         return schema.validateObject(className, object, query);",
          "",
          "[Added Lines]",
          "467:         return schema.validateObject(className, object, query, maintenance);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "512:           if (acl) {",
          "513:             query = addWriteACL(query, acl);",
          "514:           }",
          "516:           return schemaController",
          "517:             .getOneSchema(className, true)",
          "518:             .catch(error => {",
          "",
          "[Removed Lines]",
          "515:           validateQuery(query, isMaster, true);",
          "",
          "[Added Lines]",
          "525:           validateQuery(query, isMaster, false, true);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "758:         if (acl) {",
          "759:           query = addWriteACL(query, acl);",
          "760:         }",
          "762:         return schemaController",
          "763:           .getOneSchema(className)",
          "764:           .catch(error => {",
          "",
          "[Removed Lines]",
          "761:         validateQuery(query, isMaster, false);",
          "",
          "[Added Lines]",
          "771:         validateQuery(query, isMaster, false, false);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1151:     auth: any = {},",
          "1152:     validSchemaController: SchemaController.SchemaController",
          "1153:   ): Promise<any> {",
          "1155:     const aclGroup = acl || [];",
          "1156:     op =",
          "1157:       op || (typeof query.objectId == 'string' && Object.keys(query).length === 1 ? 'get' : 'find');",
          "",
          "[Removed Lines]",
          "1154:     const isMaster = acl === undefined;",
          "",
          "[Added Lines]",
          "1164:     const isMaintenance = auth.isMaintenance;",
          "1165:     const isMaster = acl === undefined || isMaintenance;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1253:                   query = addReadACL(query, aclGroup);",
          "1254:                 }",
          "1255:               }",
          "1257:               if (count) {",
          "1258:                 if (!classExists) {",
          "1259:                   return 0;",
          "",
          "[Removed Lines]",
          "1256:               validateQuery(query, isMaster, false);",
          "",
          "[Added Lines]",
          "1267:               validateQuery(query, isMaster, isMaintenance, false);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1296:                       object = untransformObjectACL(object);",
          "1297:                       return filterSensitiveData(",
          "1298:                         isMaster,",
          "1299:                         aclGroup,",
          "1300:                         auth,",
          "1301:                         op,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1310:                         isMaintenance,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1813:     return Promise.resolve(response);",
          "1814:   }",
          "1818: }",
          "1820: module.exports = DatabaseController;",
          "",
          "[Removed Lines]",
          "1816:   static _validateQuery: (any, boolean, boolean) => void;",
          "1817:   static filterSensitiveData: (boolean, any[], any, any, any, string, any[], any) => void;",
          "",
          "[Added Lines]",
          "1828:   static _validateQuery: (any, boolean, boolean, boolean) => void;",
          "1829:   static filterSensitiveData: (boolean, boolean, any[], any, any, any, string, any[], any) => void;",
          "",
          "---------------"
        ],
        "src/Controllers/SchemaController.js||src/Controllers/SchemaController.js": [
          "File: src/Controllers/SchemaController.js -> src/Controllers/SchemaController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:     className: string,",
          "1072:     fieldName: string,",
          "1073:     type: string | SchemaField,",
          "1075:   ) {",
          "1076:     if (fieldName.indexOf('.') > 0) {",
          "1078:       fieldName = fieldName.split('.')[0];",
          "1079:       type = 'Object';",
          "1080:     }",
          "1082:       throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, `Invalid field name: ${fieldName}.`);",
          "1083:     }",
          "",
          "[Removed Lines]",
          "1074:     isValidation?: boolean",
          "1081:     if (!fieldNameIsValid(fieldName, className)) {",
          "",
          "[Added Lines]",
          "1074:     isValidation?: boolean,",
          "1075:     maintenance?: boolean",
          "1082:     let fieldNameToValidate = `${fieldName}`;",
          "1083:     if (maintenance && fieldNameToValidate.charAt(0) === '_') {",
          "1084:       fieldNameToValidate = fieldNameToValidate.substring(1);",
          "1085:     }",
          "1086:     if (!fieldNameIsValid(fieldNameToValidate, className)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1232:     let geocount = 0;",
          "1233:     const schema = await this.enforceClassExists(className);",
          "1234:     const promises = [];",
          "",
          "[Removed Lines]",
          "1231:   async validateObject(className: string, object: any, query: any) {",
          "",
          "[Added Lines]",
          "1236:   async validateObject(className: string, object: any, query: any, maintenance: boolean) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1259:         continue;",
          "1260:       }",
          "1262:     }",
          "1263:     const results = await Promise.all(promises);",
          "1264:     const enforceFields = results.filter(result => !!result);",
          "",
          "[Removed Lines]",
          "1261:       promises.push(schema.enforceFieldExists(className, fieldName, expected, true));",
          "",
          "[Added Lines]",
          "1266:       promises.push(schema.enforceFieldExists(className, fieldName, expected, true, maintenance));",
          "",
          "---------------"
        ],
        "src/Controllers/UserController.js||src/Controllers/UserController.js": [
          "File: src/Controllers/UserController.js -> src/Controllers/UserController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:       updateFields._email_verify_token_expires_at = { __op: 'Delete' };",
          "71:     }",
          "79:     return findUserForEmailVerification.execute().then(result => {",
          "80:       if (result.results.length && result.results[0].emailVerified) {",
          "81:         return Promise.resolve(result.results.length[0]);",
          "82:       } else if (result.results.length) {",
          "83:         query.objectId = result.results[0].objectId;",
          "84:       }",
          "86:     });",
          "87:   }",
          "",
          "[Removed Lines]",
          "72:     const masterAuth = Auth.master(this.config);",
          "73:     var findUserForEmailVerification = new RestQuery(",
          "74:       this.config,",
          "75:       Auth.master(this.config),",
          "76:       '_User',",
          "77:       { username: username }",
          "78:     );",
          "85:       return rest.update(this.config, masterAuth, '_User', query, updateFields);",
          "",
          "[Added Lines]",
          "72:     const maintenanceAuth = Auth.maintenance(this.config);",
          "73:     var findUserForEmailVerification = new RestQuery(this.config, maintenanceAuth, '_User', {",
          "74:       username,",
          "75:     });",
          "82:       return rest.update(this.config, maintenanceAuth, '_User', query, updateFields);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:           username: username,",
          "95:           _perishable_token: token,",
          "96:         },",
          "98:       )",
          "99:       .then(results => {",
          "100:         if (results.length != 1) {",
          "",
          "[Removed Lines]",
          "97:         { limit: 1 }",
          "",
          "[Added Lines]",
          "94:         { limit: 1 },",
          "95:         Auth.maintenance(this.config)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:             { username: email, email: { $exists: false }, _perishable_token: { $exists: true } },",
          "229:           ],",
          "230:         },",
          "232:       );",
          "233:       if (results.length == 1) {",
          "234:         let expiresDate = results[0]._perishable_token_expires_at;",
          "",
          "[Removed Lines]",
          "231:         { limit: 1 }",
          "",
          "[Added Lines]",
          "229:         { limit: 1 },",
          "230:         Auth.maintenance(this.config)",
          "",
          "---------------"
        ],
        "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js": [
          "File: src/LiveQuery/ParseLiveQueryServer.js -> src/LiveQuery/ParseLiveQueryServer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:       }",
          "626:       return DatabaseController.filterSensitiveData(",
          "627:         client.hasMasterKey,",
          "628:         aclGroup,",
          "629:         clientAuth,",
          "630:         op,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:         false,",
          "",
          "---------------"
        ],
        "src/Options/Definitions.js||src/Options/Definitions.js": [
          "File: src/Options/Definitions.js -> src/Options/Definitions.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:     help: \"Folder for the logs (defaults to './logs'); set to null to disable file based logging\",",
          "301:     default: './logs',",
          "302:   },",
          "303:   masterKey: {",
          "304:     env: 'PARSE_SERVER_MASTER_KEY',",
          "305:     help: 'Your Parse Master Key',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:   maintenanceKey: {",
          "304:     env: 'PARSE_SERVER_MAINTENANCE_KEY',",
          "305:     help:",
          "306:       '(Optional) The maintenance key is used for modifying internal fields of Parse Server.<br><br>\\u26A0\\uFE0F This key is not intended to be used as part of a regular operation of Parse Server. This key is intended to conduct out-of-band changes such as one-time migrations or data correction tasks. Internal fields are not officially documented and may change at any time without publication in release changelogs. We strongly advice not to rely on internal fields as part of your regular operation and to investigate the implications of any planned changes *directly in the source code* of your current version of Parse Server.',",
          "307:     required: true,",
          "308:   },",
          "309:   maintenanceKeyIps: {",
          "310:     env: 'PARSE_SERVER_MAINTENANCE_KEY_IPS',",
          "311:     help:",
          "312:       \"(Optional) Restricts the use of maintenance key permissions to a list of IP addresses.<br><br>This option accepts a list of single IP addresses, for example:<br>`['10.0.0.1', '10.0.0.2']`<br><br>You can also use CIDR notation to specify an IP address range, for example:<br>`['10.0.1.0/24']`<br><br>Special cases:<br>- Setting an empty array `[]` means that `maintenanceKey` cannot be used even in Parse Server Cloud Code.<br>- Setting `['0.0.0.0/0']` means disabling the filter and the maintenance key can be used from any IP address.<br><br>Defaults to `['127.0.0.1', '::1']` which means that only `localhost`, the server itself, is allowed to use the maintenance key.\",",
          "313:     action: parsers.arrayParser,",
          "314:     default: ['127.0.0.1', '::1'],",
          "315:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:   masterKeyIps: {",
          "309:     env: 'PARSE_SERVER_MASTER_KEY_IPS',",
          "310:     help:",
          "312:     action: parsers.arrayParser,",
          "313:     default: ['127.0.0.1', '::1'],",
          "314:   },",
          "",
          "[Removed Lines]",
          "311:       \"(Optional) Restricts the use of master key permissions to a list of IP addresses.<br><br>This option accepts a list of single IP addresses, for example:<br>`['10.0.0.1', '10.0.0.2']`<br><br>You can also use CIDR notation to specify an IP address range, for example:<br>`['10.0.1.0/24']`<br><br>Special cases:<br>- Setting an empty array `[]` means that `masterKey`` cannot be used even in Parse Server Cloud Code.<br>- Setting `['0.0.0.0/0']` means disabling the filter and the master key can be used from any IP address.<br><br>To connect Parse Dashboard from a different server requires to add the IP address of the server that hosts Parse Dashboard because Parse Dashboard uses the master key.<br><br>Defaults to `['127.0.0.1', '::1']` which means that only `localhost`, the server itself, is allowed to use the master key.\",",
          "",
          "[Added Lines]",
          "324:       \"(Optional) Restricts the use of master key permissions to a list of IP addresses.<br><br>This option accepts a list of single IP addresses, for example:<br>`['10.0.0.1', '10.0.0.2']`<br><br>You can also use CIDR notation to specify an IP address range, for example:<br>`['10.0.1.0/24']`<br><br>Special cases:<br>- Setting an empty array `[]` means that `masterKey` cannot be used even in Parse Server Cloud Code.<br>- Setting `['0.0.0.0/0']` means disabling the filter and the master key can be used from any IP address.<br><br>To connect Parse Dashboard from a different server requires to add the IP address of the server that hosts Parse Dashboard because Parse Dashboard uses the master key.<br><br>Defaults to `['127.0.0.1', '::1']` which means that only `localhost`, the server itself, is allowed to use the master key.\",",
          "",
          "---------------"
        ],
        "src/Options/docs.js||src/Options/docs.js": [
          "File: src/Options/docs.js -> src/Options/docs.js"
        ],
        "src/Options/index.js||src/Options/index.js": [
          "File: src/Options/index.js -> src/Options/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   appId: string;",
          "48:   masterKey: string;",
          "51:   serverURL: string;",
          "54:   masterKeyIps: ?(string[]);",
          "56:   appName: ?string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   maintenanceKey: string;",
          "59:   maintenanceKeyIps: ?(string[]);",
          "",
          "---------------"
        ],
        "src/ParseServer.js||src/ParseServer.js": [
          "File: src/ParseServer.js -> src/ParseServer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:       });",
          "514:     }",
          "515:   });",
          "520: }",
          "",
          "[Removed Lines]",
          "517:   options.masterKeyIps = Array.from(",
          "518:     new Set(options.masterKeyIps.concat(defaults.masterKeyIps, options.masterKeyIps))",
          "519:   );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/RestWrite.js||src/RestWrite.js": [
          "File: src/RestWrite.js -> src/RestWrite.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: RestWrite.prototype.getUserAndRoleACL = function () {",
          "170:     return Promise.resolve();",
          "171:   }",
          "",
          "[Removed Lines]",
          "169:   if (this.auth.isMaster) {",
          "",
          "[Added Lines]",
          "169:   if (this.auth.isMaster || this.auth.isMaintenance) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:   if (",
          "188:     this.config.allowClientClassCreation === false &&",
          "189:     !this.auth.isMaster &&",
          "190:     SchemaController.systemClasses.indexOf(this.className) === -1",
          "191:   ) {",
          "192:     return this.config.database",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:     !this.auth.isMaintenance &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211:     this.className,",
          "212:     this.data,",
          "213:     this.query,",
          "215:   );",
          "216: };",
          "",
          "[Removed Lines]",
          "214:     this.runOptions",
          "",
          "[Added Lines]",
          "215:     this.runOptions,",
          "216:     this.auth.isMaintenance",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "434: };",
          "436: RestWrite.prototype.filteredObjectsByACL = function (objects) {",
          "438:     return objects;",
          "439:   }",
          "440:   return objects.filter(object => {",
          "",
          "[Removed Lines]",
          "437:   if (this.auth.isMaster) {",
          "",
          "[Added Lines]",
          "439:   if (this.auth.isMaster || this.auth.isMaintenance) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "605:     return promise;",
          "606:   }",
          "609:     const error = `Clients aren't allowed to manually update email verification.`;",
          "610:     throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
          "611:   }",
          "",
          "[Removed Lines]",
          "608:   if (!this.auth.isMaster && 'emailVerified' in this.data) {",
          "",
          "[Added Lines]",
          "610:   if (!this.auth.isMaintenance && !this.auth.isMaster && 'emailVerified' in this.data) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "640:       if (this.query) {",
          "641:         this.storage['clearSessions'] = true;",
          "644:           this.storage['generateNewSession'] = true;",
          "645:         }",
          "646:       }",
          "",
          "[Removed Lines]",
          "643:         if (!this.auth.isMaster) {",
          "",
          "[Added Lines]",
          "645:         if (!this.auth.isMaster && !this.auth.isMaintenance) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "813:       .find(",
          "814:         '_User',",
          "815:         { objectId: this.objectId() },",
          "817:       )",
          "818:       .then(results => {",
          "819:         if (results.length != 1) {",
          "",
          "[Removed Lines]",
          "816:         { keys: ['_password_history', '_hashed_password'] }",
          "",
          "[Added Lines]",
          "818:         { keys: ['_password_history', '_hashed_password'] },",
          "819:         Auth.maintenance(this.config)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1015:     return;",
          "1016:   }",
          "1019:     throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Session token required.');",
          "1020:   }",
          "",
          "[Removed Lines]",
          "1018:   if (!this.auth.user && !this.auth.isMaster) {",
          "",
          "[Added Lines]",
          "1021:   if (!this.auth.user && !this.auth.isMaster && !this.auth.isMaintenance) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1048:     }",
          "1049:   }",
          "1052:     const additionalSessionData = {};",
          "1053:     for (var key in this.data) {",
          "1054:       if (key === 'objectId' || key === 'user') {",
          "",
          "[Removed Lines]",
          "1051:   if (!this.query && !this.auth.isMaster) {",
          "",
          "[Added Lines]",
          "1054:   if (!this.query && !this.auth.isMaster && !this.auth.isMaintenance) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1115:   let installationId = this.data.installationId;",
          "1119:     installationId = this.auth.installationId;",
          "1120:   }",
          "",
          "[Removed Lines]",
          "1118:   if (!installationId && !this.auth.isMaster) {",
          "",
          "[Added Lines]",
          "1121:   if (!installationId && !this.auth.isMaster && !this.auth.isMaintenance) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1379:   if (this.query) {",
          "1383:       this.data.ACL[this.query.objectId] = { read: true, write: true };",
          "1384:     }",
          "",
          "[Removed Lines]",
          "1382:     if (this.className === '_User' && this.data.ACL && this.auth.isMaster !== true) {",
          "",
          "[Added Lines]",
          "1385:     if (",
          "1386:       this.className === '_User' &&",
          "1387:       this.data.ACL &&",
          "1388:       this.auth.isMaster !== true &&",
          "1389:       this.auth.isMaintenance !== true",
          "1390:     ) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1406:         .find(",
          "1407:           '_User',",
          "1408:           { objectId: this.objectId() },",
          "1410:         )",
          "1411:         .then(results => {",
          "1412:           if (results.length != 1) {",
          "",
          "[Removed Lines]",
          "1409:           { keys: ['_password_history', '_hashed_password'] }",
          "",
          "[Added Lines]",
          "1417:           { keys: ['_password_history', '_hashed_password'] },",
          "1418:           Auth.maintenance(this.config)",
          "",
          "---------------"
        ],
        "src/Routers/UsersRouter.js||src/Routers/UsersRouter.js": [
          "File: src/Routers/UsersRouter.js -> src/Routers/UsersRouter.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:         query = { $or: [{ username }, { email: username }] };",
          "104:       }",
          "105:       return req.config.database",
          "107:         .then(results => {",
          "108:           if (!results.length) {",
          "109:             throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');",
          "",
          "[Removed Lines]",
          "106:         .find('_User', query)",
          "",
          "[Added Lines]",
          "106:         .find('_User', query, {}, Auth.maintenance(req.config))",
          "",
          "---------------"
        ],
        "src/middlewares.js||src/middlewares.js": [
          "File: src/middlewares.js -> src/middlewares.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     appId: req.get('X-Parse-Application-Id'),",
          "46:     sessionToken: req.get('X-Parse-Session-Token'),",
          "47:     masterKey: req.get('X-Parse-Master-Key'),",
          "48:     installationId: req.get('X-Parse-Installation-Id'),",
          "49:     clientKey: req.get('X-Parse-Client-Key'),",
          "50:     javascriptKey: req.get('X-Parse-Javascript-Key'),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     maintenanceKey: req.get('X-Parse-Maintenance-Key'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:   req.config.ip = clientIp;",
          "178:   req.info = info;",
          "180:   let isMaster = info.masterKey === req.config.masterKey;",
          "181:   if (isMaster && !ipRangeCheck(clientIp, req.config.masterKeyIps || [])) {",
          "182:     const log = req.config?.loggerController || defaultLogger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:   const isMaintenance =",
          "182:     req.config.maintenanceKey && info.maintenanceKey === req.config.maintenanceKey;",
          "183:   if (isMaintenance) {",
          "184:     if (ipRangeCheck(clientIp, req.config.maintenanceKeyIps || [])) {",
          "185:       req.auth = new auth.Auth({",
          "186:         config: req.config,",
          "187:         installationId: info.installationId,",
          "188:         isMaintenance: true,",
          "189:       });",
          "190:       next();",
          "191:       return;",
          "192:     }",
          "193:     const log = req.config?.loggerController || defaultLogger;",
          "194:     log.error(",
          "195:       `Request using maintenance key rejected as the request IP address '${clientIp}' is not set in Parse Server option 'maintenanceKeyIps'.`",
          "196:     );",
          "197:   }",
          "",
          "---------------"
        ],
        "src/rest.js||src/rest.js": [
          "File: src/rest.js -> src/rest.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:             if (response && response.results && response.results.length) {",
          "112:               const firstResult = response.results[0];",
          "113:               firstResult.className = className;",
          "115:                 if (!auth.user || firstResult.user.objectId !== auth.user.id) {",
          "116:                   throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');",
          "117:                 }",
          "",
          "[Removed Lines]",
          "114:               if (className === '_Session' && !auth.isMaster) {",
          "",
          "[Added Lines]",
          "114:               if (className === '_Session' && !auth.isMaster && !auth.isMaintenance) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:       return Promise.resolve({});",
          "135:     })",
          "136:     .then(() => {",
          "138:         return auth.getUserRoles();",
          "139:       } else {",
          "140:         return;",
          "",
          "[Removed Lines]",
          "137:       if (!auth.isMaster) {",
          "",
          "[Added Lines]",
          "137:       if (!auth.isMaster && !auth.isMaintenance) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:     .then(s => {",
          "145:       schemaController = s;",
          "146:       const options = {};",
          "148:         options.acl = ['*'];",
          "149:         if (auth.user) {",
          "150:           options.acl.push(auth.user.id);",
          "",
          "[Removed Lines]",
          "147:       if (!auth.isMaster) {",
          "",
          "[Added Lines]",
          "147:       if (!auth.isMaster && !auth.isMaintenance) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238: function handleSessionMissingError(error, className, auth) {",
          "241:     throw new Parse.Error(Parse.Error.SESSION_MISSING, 'Insufficient auth.');",
          "242:   }",
          "243:   throw error;",
          "",
          "[Removed Lines]",
          "240:   if (className === '_User' && error.code === Parse.Error.OBJECT_NOT_FOUND && !auth.isMaster) {",
          "",
          "[Added Lines]",
          "240:   if (",
          "241:     className === '_User' &&",
          "242:     error.code === Parse.Error.OBJECT_NOT_FOUND &&",
          "243:     !auth.isMaster &&",
          "244:     !auth.isMaintenance",
          "245:   ) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "253: ];",
          "255: function enforceRoleSecurity(method, className, auth) {",
          "257:     if (method === 'delete' || method === 'find') {",
          "258:       const error = `Clients aren't allowed to perform the ${method} operation on the installation collection.`;",
          "259:       throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
          "",
          "[Removed Lines]",
          "256:   if (className === '_Installation' && !auth.isMaster) {",
          "",
          "[Added Lines]",
          "261:   if (className === '_Installation' && !auth.isMaster && !auth.isMaintenance) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "261:   }",
          "265:     const error = `Clients aren't allowed to perform the ${method} operation on the ${className} collection.`;",
          "266:     throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
          "267:   }",
          "",
          "[Removed Lines]",
          "264:   if (classesWithMasterOnlyAccess.indexOf(className) >= 0 && !auth.isMaster) {",
          "",
          "[Added Lines]",
          "269:   if (",
          "270:     classesWithMasterOnlyAccess.indexOf(className) >= 0 &&",
          "271:     !auth.isMaster &&",
          "272:     !auth.isMaintenance",
          "273:   ) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}