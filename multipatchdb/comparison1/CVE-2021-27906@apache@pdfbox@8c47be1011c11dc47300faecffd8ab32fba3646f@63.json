{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e1d65c7a9b90696345a53cb303bde52c601eb824",
      "candidate_info": {
        "commit_hash": "e1d65c7a9b90696345a53cb303bde52c601eb824",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e1d65c7a9b90696345a53cb303bde52c601eb824",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java"
        ],
        "message": "PDFBOX-4892: simply code, avoid using available()\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891457 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java||pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java||pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java -> pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.apache.commons.logging.Log;",
          "27: import org.apache.commons.logging.LogFactory;",
          "28: import org.apache.pdfbox.cos.COSDictionary;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.pdfbox.io.IOUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:         int compressionLevel = getCompressionLevel();",
          "129:         Deflater deflater = new Deflater(compressionLevel);",
          "130:         DeflaterOutputStream out = new DeflaterOutputStream(encoded, deflater);",
          "141:         out.close();",
          "142:         encoded.flush();",
          "143:         deflater.end();",
          "",
          "[Removed Lines]",
          "131:         int amountRead;",
          "132:         int mayRead = input.available();",
          "133:         if (mayRead > 0)",
          "134:         {",
          "135:             byte[] buffer = new byte[Math.min(mayRead,BUFFER_SIZE)];",
          "136:             while ((amountRead = input.read(buffer, 0, Math.min(mayRead,BUFFER_SIZE))) != -1)",
          "137:             {",
          "138:                 out.write(buffer, 0, amountRead);",
          "139:             }",
          "140:         }",
          "",
          "[Added Lines]",
          "132:         IOUtils.copy(input, out);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "402b5d12ec243a3851d120072f5ce47b7d4888d2",
      "candidate_info": {
        "commit_hash": "402b5d12ec243a3851d120072f5ce47b7d4888d2",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/402b5d12ec243a3851d120072f5ce47b7d4888d2",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java"
        ],
        "message": "PDFBOX-4847: return the image data as WritableRaster, by Emmeran Seehuber\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881254 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.awt.Paint;",
          "20: import java.awt.Rectangle;",
          "21: import java.awt.image.BufferedImage;",
          "22: import java.io.IOException;",
          "23: import java.io.InputStream;",
          "24: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.awt.image.WritableRaster;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     BufferedImage getImage() throws IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:     WritableRaster getRawRaster() throws IOException;",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:         return image;",
          "507:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:     @Override",
          "510:     public WritableRaster getRawRaster() throws IOException",
          "511:     {",
          "512:         return SampledImageReader.getRawRaster(this);",
          "513:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.awt.Paint;",
          "20: import java.awt.Rectangle;",
          "21: import java.awt.image.BufferedImage;",
          "22: import java.io.ByteArrayInputStream;",
          "23: import java.io.ByteArrayOutputStream;",
          "24: import java.io.IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.awt.image.WritableRaster;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355:         return SampledImageReader.getRGBImage(this, region, subsampling, null);",
          "356:     }",
          "358:     @Override",
          "359:     public BufferedImage getStencilImage(Paint paint) throws IOException",
          "360:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "359:     @Override",
          "360:     public WritableRaster getRawRaster() throws IOException",
          "361:     {",
          "362:         return SampledImageReader.getRawRaster(this);",
          "363:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:         }",
          "234:     }",
          "236:     private static BufferedImage from1Bit(PDImage pdImage, Rectangle clipped, final int subsampling,",
          "237:                                           final int width, final int height) throws IOException",
          "238:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     public static WritableRaster getRawRaster(PDImage pdImage) throws IOException",
          "243:     {",
          "244:         if (pdImage.isEmpty())",
          "245:         {",
          "246:             throw new IOException(\"Image stream is empty\");",
          "247:         }",
          "250:         final PDColorSpace colorSpace = pdImage.getColorSpace();",
          "251:         final int numComponents = colorSpace.getNumberOfComponents();",
          "252:         final int width = pdImage.getWidth();",
          "253:         final int height = pdImage.getHeight();",
          "254:         final int bitsPerComponent = pdImage.getBitsPerComponent();",
          "256:         if (width <= 0 || height <= 0)",
          "257:         {",
          "258:             throw new IOException(\"image width and height must be positive\");",
          "259:         }",
          "261:         try",
          "262:         {",
          "263:             int dataBuffeType = DataBuffer.TYPE_BYTE;",
          "264:             if (bitsPerComponent > 8)",
          "265:             {",
          "266:                 dataBuffeType = DataBuffer.TYPE_USHORT;",
          "267:             }",
          "268:             WritableRaster raster = Raster.createInterleavedRaster(dataBuffeType, width, height, numComponents,",
          "269:                     new Point(0, 0));",
          "270:             readRasterFromAny(pdImage, raster);",
          "271:             return raster;",
          "272:         }",
          "273:         catch (NegativeArraySizeException ex)",
          "274:         {",
          "275:             throw new IOException(ex);",
          "276:         }",
          "277:     }",
          "279:     private static void readRasterFromAny(PDImage pdImage, WritableRaster raster)",
          "280:             throws IOException",
          "281:     {",
          "282:         final PDColorSpace colorSpace = pdImage.getColorSpace();",
          "283:         final int numComponents = colorSpace.getNumberOfComponents();",
          "284:         final int bitsPerComponent = pdImage.getBitsPerComponent();",
          "285:         final float[] decode = getDecodeArray(pdImage);",
          "286:         DecodeOptions options = new DecodeOptions();",
          "289:         ImageInputStream iis = null;",
          "290:         try",
          "291:         {",
          "292:             iis = new MemoryCacheImageInputStream(pdImage.createInputStream(options));",
          "294:             final int inputWidth = pdImage.getWidth();",
          "295:             final int scanWidth = pdImage.getWidth();",
          "296:             final int scanHeight = pdImage.getHeight();",
          "299:             final float sampleMax = (float) Math.pow(2, bitsPerComponent) - 1f;",
          "300:             final boolean isIndexed = colorSpace instanceof PDIndexed;",
          "303:             int padding = 0;",
          "304:             if (inputWidth * numComponents * bitsPerComponent % 8 > 0)",
          "305:             {",
          "306:                 padding = 8 - (inputWidth * numComponents * bitsPerComponent % 8);",
          "307:             }",
          "310:             final boolean isShort = raster.getDataBuffer().getDataType() == DataBuffer.TYPE_USHORT;",
          "311:             assert !isIndexed || !isShort;",
          "312:             final byte[] srcColorValuesBytes = isShort ? null : new byte[numComponents];",
          "313:             final short[] srcColorValuesShort = isShort ? new short[numComponents] : null;",
          "314:             for (int y = 0; y < scanHeight; y++)",
          "315:             {",
          "316:                 for (int x = 0; x < scanWidth; x++)",
          "317:                 {",
          "318:                     for (int c = 0; c < numComponents; c++)",
          "319:                     {",
          "320:                         int value = (int) iis.readBits(bitsPerComponent);",
          "323:                         final float dMin = decode[c * 2];",
          "324:                         final float dMax = decode[(c * 2) + 1];",
          "327:                         float output = dMin + (value * ((dMax - dMin) / sampleMax));",
          "329:                         if (isIndexed)",
          "330:                         {",
          "334:                             srcColorValuesBytes[c] = (byte) Math.round(output);",
          "335:                         }",
          "336:                         else",
          "337:                         {",
          "338:                             if (isShort)",
          "339:                             {",
          "341:                                 int outputShort = Math",
          "342:                                         .round(((output - Math.min(dMin, dMax)) / Math.abs(dMax - dMin)) * 65535f);",
          "344:                                 srcColorValuesShort[c] = (short) outputShort;",
          "345:                             }",
          "346:                             else",
          "347:                             {",
          "349:                                 int outputByte = Math",
          "350:                                         .round(((output - Math.min(dMin, dMax)) / Math.abs(dMax - dMin)) * 255f);",
          "352:                                 srcColorValuesBytes[c] = (byte) outputByte;",
          "353:                             }",
          "354:                         }",
          "355:                     }",
          "357:                     if (isShort)",
          "358:                     {",
          "359:                         raster.setDataElements(x, y, srcColorValuesShort);",
          "360:                     }",
          "361:                     else",
          "362:                     {",
          "363:                         raster.setDataElements(x, y, srcColorValuesBytes);",
          "364:                     }",
          "365:                 }",
          "368:                 iis.readBits(padding);",
          "369:             }",
          "370:         }",
          "371:         finally",
          "372:         {",
          "373:             if (iis != null)",
          "374:             {",
          "375:                 iis.close();",
          "376:             }",
          "377:         }",
          "378:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9d33dcc9ad5d42b15330b55ee8e7c83283c21ce",
      "candidate_info": {
        "commit_hash": "b9d33dcc9ad5d42b15330b55ee8e7c83283c21ce",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/b9d33dcc9ad5d42b15330b55ee8e7c83283c21ce",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSDictionary.java"
        ],
        "message": "PDFBOX-4999: don't skip size values when merging COSDictionaries as proposed by Michael Klink\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884087 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSDictionary.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSDictionary.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/COSDictionary.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSDictionary.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/COSDictionary.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/COSDictionary.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1435:     }",
          "1443:     public void addAll(COSDictionary dic)",
          "1444:     {",
          "1445:         for (Map.Entry<COSName, COSBase> entry : dic.entrySet())",
          "1446:         {",
          "1455:         }",
          "1456:     }",
          "",
          "[Removed Lines]",
          "1451:             if (!COSName.SIZE.equals(entry.getKey()) || !items.containsKey(COSName.SIZE))",
          "1452:             {",
          "1453:                 setItem(entry.getKey(), entry.getValue());",
          "1454:             }",
          "",
          "[Added Lines]",
          "1447:             setItem(entry.getKey(), entry.getValue());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2873390d838fd2739f74c655afa28c1153c28d4a",
      "candidate_info": {
        "commit_hash": "2873390d838fd2739f74c655afa28c1153c28d4a",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/2873390d838fd2739f74c655afa28c1153c28d4a",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/afm/AFMParser.java"
        ],
        "message": "PDFBOX-4892: remove redundant boxing, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888298 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/afm/AFMParser.java||fontbox/src/main/java/org/apache/fontbox/afm/AFMParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/afm/AFMParser.java||fontbox/src/main/java/org/apache/fontbox/afm/AFMParser.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/afm/AFMParser.java -> fontbox/src/main/java/org/apache/fontbox/afm/AFMParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "901:     private boolean readBoolean() throws IOException",
          "902:     {",
          "903:         String theBoolean = readString();",
          "905:     }",
          "",
          "[Removed Lines]",
          "904:         return Boolean.valueOf( theBoolean );",
          "",
          "[Added Lines]",
          "904:         return Boolean.parseBoolean(theBoolean );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3052846ff06792e40beeedf5ef022fa82b744f21",
      "candidate_info": {
        "commit_hash": "3052846ff06792e40beeedf5ef022fa82b744f21",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3052846ff06792e40beeedf5ef022fa82b744f21",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java"
        ],
        "message": "PDFBOX-5044: avoid stack overflow\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884358 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.interactive.form;",
          "19: import java.util.ArrayDeque;",
          "20: import java.util.Iterator;",
          "21: import java.util.Queue;",
          "23: import java.util.List;",
          "24: import java.util.NoSuchElementException;",
          "29: public class PDFieldTree implements Iterable<PDField>",
          "30: {",
          "31:     private final PDAcroForm acroForm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.util.HashSet;",
          "26: import java.util.Set;",
          "27: import org.apache.commons.logging.Log;",
          "28: import org.apache.commons.logging.LogFactory;",
          "29: import org.apache.pdfbox.cos.COSDictionary;",
          "36:     private static final Log LOG = LogFactory.getLog(PDFieldTree.class);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     {",
          "61:         private final Queue<PDField> queue = new ArrayDeque<PDField>();",
          "63:         private FieldIterator(PDAcroForm form)",
          "64:         {",
          "65:             List<PDField> fields = form.getFields();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:         private final Set<COSDictionary> set = new HashSet<COSDictionary>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:         @Override",
          "79:         public PDField next()",
          "80:         {",
          "82:                 throw new NoSuchElementException();",
          "83:             }",
          "",
          "[Removed Lines]",
          "81:             if(!hasNext()){",
          "",
          "[Added Lines]",
          "92:             if(!hasNext())",
          "93:             {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:         private void enqueueKids(PDField node)",
          "95:         {",
          "96:             queue.add(node);",
          "97:             if (node instanceof PDNonTerminalField)",
          "98:             {",
          "99:                 List<PDField> kids = ((PDNonTerminalField) node).getChildren();",
          "100:                 for (PDField kid : kids)",
          "101:                 {",
          "103:                 }",
          "104:             }",
          "105:         }",
          "",
          "[Removed Lines]",
          "102:                     enqueueKids(kid);",
          "",
          "[Added Lines]",
          "109:             set.add(node.getCOSObject());",
          "115:                     if (set.contains(kid.getCOSObject()))",
          "116:                     {",
          "117:                         LOG.error(\"Child of field '\" + node.getFullyQualifiedName() +",
          "118:                                 \"' already exists elsewhere, ignored to avoid recursion\");",
          "119:                     }",
          "120:                     else",
          "121:                     {",
          "122:                         enqueueKids(kid);",
          "123:                     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}