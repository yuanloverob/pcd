{
  "cve_id": "CVE-2024-28175",
  "cve_desc": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Due to the improper URL protocols filtering of links specified in the `link.argocd.argoproj.io` annotations in the application summary component, an attacker can achieve cross-site scripting with elevated permissions. All unpatched versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a javascript: link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin). This vulnerability allows an attacker to perform arbitrary actions on behalf of the victim via the API, such as creating, modifying, and deleting Kubernetes resources. A patch for this vulnerability has been released in Argo CD versions v2.10.3 v2.9.8, and v2.8.12. There are no completely-safe workarounds besides upgrading. The safest alternative, if upgrading is not possible, would be to create a Kubernetes admission controller to reject any resources with an annotation starting with link.argocd.argoproj.io or reject the resource if the value use an improper URL protocol. This validation will need to be applied in all clusters managed by ArgoCD.\n\n",
  "repo": "argoproj/argo-cd",
  "patch_hash": "479b5544b57dc9ef767d49f7003f39602c480b71",
  "patch_info": {
    "commit_hash": "479b5544b57dc9ef767d49f7003f39602c480b71",
    "repo": "argoproj/argo-cd",
    "commit_url": "https://github.com/argoproj/argo-cd/commit/479b5544b57dc9ef767d49f7003f39602c480b71",
    "files": [
      "ui/src/app/applications/components/application-summary/application-summary.tsx",
      "ui/src/app/applications/components/application-urls.test.ts",
      "ui/src/app/applications/components/application-urls.tsx"
    ],
    "message": "Merge pull request from GHSA-jwv5-8mqv-g387\n\n* fix: Validate external URLs for applicatins\n\nSigned-off-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>\n\n* fix(ui): remove invalid external-link\n\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\n\n* linting\n\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\n\n---------\n\nSigned-off-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\nCo-authored-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>",
    "before_after_code_files": [
      "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx",
      "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
      "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
    ]
  },
  "patch_diff": {
    "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx": [
      "File: ui/src/app/applications/components/application-summary/application-summary.tsx -> ui/src/app/applications/components/application-summary/application-summary.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: import './application-summary.scss';",
      "32: import {DeepLinks} from '../../../shared/components/deep-links';",
      "34: function swap(array: any[], a: number, b: number) {",
      "35:     array = array.slice();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: import {ExternalLinks} from '../application-urls';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "341:             )",
      "342:         }",
      "343:     ];",
      "346:     if (urls.length > 0) {",
      "347:         attributes.push({",
      "348:             title: 'URLs',",
      "349:             view: (",
      "350:                 <React.Fragment>",
      "356:                             </a>",
      "358:                 </React.Fragment>",
      "359:             )",
      "360:         });",
      "",
      "[Removed Lines]",
      "345:     const urls = app.status.summary.externalURLs || [];",
      "351:                     {urls",
      "352:                         .map(item => item.split('|'))",
      "353:                         .map((parts, i) => (",
      "354:                             <a key={i} href={parts.length > 1 ? parts[1] : parts[0]} target='__blank'>",
      "355:                                 {parts[0]} &nbsp;",
      "357:                         ))}",
      "",
      "[Added Lines]",
      "345:     const urls = ExternalLinks(app.status.summary.externalURLs);",
      "351:                     {urls.map((url, i) => {",
      "352:                         return (",
      "353:                             <a key={i} href={url.ref} target='__blank'>",
      "354:                                 {url.title} &nbsp;",
      "356:                         );",
      "357:                     })}",
      "",
      "---------------"
    ],
    "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
      "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: test('rejects malicious URLs', () => {",
      "4:     expect(() => {",
      "",
      "[Removed Lines]",
      "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
      "",
      "[Added Lines]",
      "1: import { ExternalLink, ExternalLinks, InvalidExternalLinkError } from './application-urls';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7:     expect(() => {",
      "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
      "9:     }).toThrowError(InvalidExternalLinkError);",
      "10: });",
      "12: test('allows absolute URLs', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10:     expect(() => {",
      "11:         const _ = new ExternalLink('title|data:text/html;<h1>hi</h1>');",
      "12:     }).toThrowError(InvalidExternalLinkError);",
      "13:     expect(() => {",
      "14:         const _ = new ExternalLink('data:title|data:text/html;<h1>hi</h1>');",
      "15:     }).toThrowError(InvalidExternalLinkError);",
      "17:     expect(() => {",
      "18:         const _ = new ExternalLink('data:title|https://localhost:8080/applications');",
      "19:     }).not.toThrowError(InvalidExternalLinkError);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "18:     window.location = new URL('https://localhost:8080/applications');",
      "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
      "20: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: test('URLs format', () => {",
      "34:     expect(new ExternalLink('https://localhost:8080/applications')).toEqual({",
      "35:         ref: 'https://localhost:8080/applications',",
      "36:         title: 'https://localhost:8080/applications',",
      "37:     })",
      "38:     expect(new ExternalLink('title|https://localhost:8080/applications')).toEqual({",
      "39:         ref: 'https://localhost:8080/applications',",
      "40:         title: 'title',",
      "41:     })",
      "42: });",
      "45: test('malicious URLs from list to be removed', () => {",
      "46:     const urls: string[] = [",
      "47:         'javascript:alert(\"hi\")',",
      "48:         'https://localhost:8080/applications',",
      "49:     ]",
      "50:     const links = ExternalLinks(urls);",
      "52:     expect(links).toHaveLength(1);",
      "53:     expect(links).toContainEqual({",
      "54:         ref: 'https://localhost:8080/applications',",
      "55:         title: 'https://localhost:8080/applications',",
      "56:     });",
      "57: });",
      "60: test('list to be sorted', () => {",
      "61:     const urls: string[] = [",
      "62:         'https://a',",
      "63:         'https://b',",
      "64:         'a|https://c',",
      "65:         'z|https://c',",
      "66:         'x|https://d',",
      "67:         'x|https://c',",
      "68:     ]",
      "69:     const links = ExternalLinks(urls);",
      "77:     expect(links).toHaveLength(6);",
      "78:     expect(links[0].title).toEqual('a')",
      "79:     expect(links[1].title).toEqual('x')",
      "80:     expect(links[1].ref).toEqual('https://c')",
      "81:     expect(links[2].title).toEqual('x')",
      "82:     expect(links[2].ref).toEqual('https://d')",
      "83:     expect(links[3].title).toEqual('z')",
      "84:     expect(links[4].title).toEqual('https://a')",
      "85:     expect(links[5].title).toEqual('https://b')",
      "86: });",
      "",
      "---------------"
    ],
    "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
      "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:     }",
      "30: }",
      "33:     const externalLinks: ExternalLink[] = [];",
      "34:     for (const url of urls || []) {",
      "35:         try {",
      "",
      "[Removed Lines]",
      "32: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
      "",
      "[Added Lines]",
      "32: export const ExternalLinks = (urls?: string[]) => {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:     externalLinks.sort((a, b) => {",
      "46:             return a.title > b.title ? 1 : -1;",
      "48:             return 1;",
      "50:             return -1;",
      "51:         }",
      "52:         return a.ref > b.ref ? 1 : -1;",
      "53:     });",
      "55:     return (",
      "56:         ((externalLinks || []).length > 0 && (",
      "57:             <div className='applications-list__external-links-icon-container'>",
      "",
      "[Removed Lines]",
      "45:         if (a.title !== '' && b.title !== '') {",
      "47:         } else if (a.title === '') {",
      "49:         } else if (b.title === '') {",
      "",
      "[Added Lines]",
      "45:         const hasTitle = (x: ExternalLink): boolean => {",
      "46:             return x.title !== x.ref && x.title !== '';",
      "47:         };",
      "49:         if (hasTitle(a) && hasTitle(b) && a.title !== b.title) {",
      "51:         } else if (hasTitle(b) && !hasTitle(a)) {",
      "53:         } else if (hasTitle(a) && !hasTitle(b)) {",
      "59:     return externalLinks;",
      "60: };",
      "62: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
      "63:     const externalLinks: ExternalLink[] = ExternalLinks(urls);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "85a782e91edbedc6ad9a46d8390bba93d0d96721",
      "candidate_info": {
        "commit_hash": "85a782e91edbedc6ad9a46d8390bba93d0d96721",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/85a782e91edbedc6ad9a46d8390bba93d0d96721",
        "files": [
          "ui/src/app/applications/components/application-summary/application-summary.tsx"
        ],
        "message": "Fix target for external urls (#19124)\n\nSigned-off-by: Dan Garfield <dan@codefresh.io>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx": [
          "File: ui/src/app/applications/components/application-summary/application-summary.tsx -> ui/src/app/applications/components/application-summary/application-summary.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:                             .map(item => item.split('|'))",
          "346:                             .map((parts, i) => (",
          "347:                                 <div className='application-summary__links-row'>",
          "349:                                         {parts[0]} &nbsp;",
          "350:                                     </a>",
          "351:                                 </div>",
          "",
          "[Removed Lines]",
          "348:                                     <a key={i} href={parts.length > 1 ? parts[1] : parts[0]} target='__blank'>",
          "",
          "[Added Lines]",
          "348:                                     <a key={i} href={parts.length > 1 ? parts[1] : parts[0]} target='_blank'>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae61752c298612947d3889aa77cb0f5869955559",
      "candidate_info": {
        "commit_hash": "ae61752c298612947d3889aa77cb0f5869955559",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/ae61752c298612947d3889aa77cb0f5869955559",
        "files": [
          "ui/src/app/applications/components/application-parameters/application-parameters-source.tsx",
          "ui/src/app/applications/components/application-parameters/application-parameters.scss",
          "ui/src/app/applications/components/application-parameters/application-parameters.tsx",
          "ui/src/app/applications/components/application-summary/application-summary.tsx",
          "ui/src/app/applications/components/resource-details/resource-details.tsx",
          "ui/src/app/applications/components/revision-form-field/revision-form-field.tsx",
          "ui/src/app/shared/components/editable-panel/editable-panel.scss",
          "ui/src/app/shared/components/editable-panel/editable-section.tsx"
        ],
        "message": "feat: Provide Edit support in Sources tab for multi-source app (#17588) (#17890)\n\nSigned-off-by: Keith Chong <kykchong@redhat.com>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-parameters/application-parameters-source.tsx||ui/src/app/applications/components/application-parameters/application-parameters-source.tsx",
          "ui/src/app/applications/components/application-parameters/application-parameters.scss||ui/src/app/applications/components/application-parameters/application-parameters.scss",
          "ui/src/app/applications/components/application-parameters/application-parameters.tsx||ui/src/app/applications/components/application-parameters/application-parameters.tsx",
          "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx",
          "ui/src/app/applications/components/resource-details/resource-details.tsx||ui/src/app/applications/components/resource-details/resource-details.tsx",
          "ui/src/app/applications/components/revision-form-field/revision-form-field.tsx||ui/src/app/applications/components/revision-form-field/revision-form-field.tsx",
          "ui/src/app/shared/components/editable-panel/editable-panel.scss||ui/src/app/shared/components/editable-panel/editable-panel.scss",
          "ui/src/app/shared/components/editable-panel/editable-section.tsx||ui/src/app/shared/components/editable-panel/editable-section.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-parameters/application-parameters-source.tsx||ui/src/app/applications/components/application-parameters/application-parameters-source.tsx": [
          "File: ui/src/app/applications/components/application-parameters/application-parameters-source.tsx -> ui/src/app/applications/components/application-parameters/application-parameters-source.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import * as classNames from 'classnames';",
          "2: import * as React from 'react';",
          "3: import {FormApi} from 'react-form';",
          "4: import {EditablePanelItem} from '../../../shared/components';",
          "5: import {EditableSection} from '../../../shared/components/editable-panel/editable-section';",
          "6: import {Consumer} from '../../../shared/context';",
          "7: import '../../../shared/components/editable-panel/editable-panel.scss';",
          "9: export interface ApplicationParametersPanelProps<T> {",
          "10:     floatingTitle?: string | React.ReactNode;",
          "11:     titleTop?: string | React.ReactNode;",
          "12:     titleBottom?: string | React.ReactNode;",
          "13:     index: number;",
          "14:     valuesTop?: T;",
          "15:     valuesBottom?: T;",
          "16:     validateTop?: (values: T) => any;",
          "17:     validateBottom?: (values: T) => any;",
          "18:     saveTop?: (input: T, query: {validate?: boolean}) => Promise<any>;",
          "19:     saveBottom?: (input: T, query: {validate?: boolean}) => Promise<any>;",
          "20:     itemsTop?: EditablePanelItem[];",
          "21:     itemsBottom?: EditablePanelItem[];",
          "22:     onModeSwitch?: () => any;",
          "23:     viewTop?: string | React.ReactNode;",
          "24:     viewBottom?: string | React.ReactNode;",
          "25:     editTop?: (formApi: FormApi) => React.ReactNode;",
          "26:     editBottom?: (formApi: FormApi) => React.ReactNode;",
          "27:     noReadonlyMode?: boolean;",
          "28:     collapsible?: boolean;",
          "29: }",
          "31: interface ApplicationParametersPanelState {",
          "32:     editTop: boolean;",
          "33:     editBottom: boolean;",
          "34:     savingTop: boolean;",
          "35:     savingBottom: boolean;",
          "36: }",
          "39: export class ApplicationParametersSource<T = {}> extends React.Component<ApplicationParametersPanelProps<T>, ApplicationParametersPanelState> {",
          "40:     constructor(props: ApplicationParametersPanelProps<T>) {",
          "41:         super(props);",
          "42:         this.state = {editTop: !!props.noReadonlyMode, editBottom: !!props.noReadonlyMode, savingTop: false, savingBottom: false};",
          "43:     }",
          "45:     public render() {",
          "46:         return (",
          "47:             <Consumer>",
          "48:                 {ctx => (",
          "49:                     <div className={classNames({'editable-panel--disabled': this.state.savingTop})}>",
          "50:                         {this.props.floatingTitle && <div className='white-box--additional-top-space editable-panel__sticky-title'>{this.props.floatingTitle}</div>}",
          "51:                         <React.Fragment>",
          "52:                             <EditableSection",
          "53:                                 uniqueId={'top_' + this.props.index}",
          "54:                                 title={this.props.titleTop}",
          "55:                                 view={this.props.viewTop}",
          "56:                                 values={this.props.valuesTop}",
          "57:                                 items={this.props.itemsTop}",
          "58:                                 validate={this.props.validateTop}",
          "59:                                 save={this.props.saveTop}",
          "60:                                 onModeSwitch={() => this.onModeSwitch()}",
          "61:                                 noReadonlyMode={this.props.noReadonlyMode}",
          "62:                                 edit={this.props.editTop}",
          "63:                                 collapsible={this.props.collapsible}",
          "64:                                 ctx={ctx}",
          "65:                                 isTopSection={true}",
          "66:                                 disabledState={this.state.editTop || this.state.editTop === null}",
          "67:                                 updateButtons={editClicked => {",
          "68:                                     this.setState({editBottom: editClicked});",
          "69:                                 }}",
          "70:                             />",
          "71:                         </React.Fragment>",
          "72:                         {this.props.itemsTop && (",
          "73:                             <React.Fragment>",
          "74:                                 <div className='row white-box__details-row'>",
          "75:                                     <p>&nbsp;</p>",
          "76:                                 </div>",
          "77:                                 <div className='white-box--no-padding editable-panel__divider' />",
          "78:                             </React.Fragment>",
          "79:                         )}",
          "80:                         <React.Fragment>",
          "81:                             <EditableSection",
          "82:                                 uniqueId={'bottom_' + this.props.index}",
          "83:                                 title={this.props.titleBottom}",
          "84:                                 view={this.props.viewBottom}",
          "85:                                 values={this.props.valuesBottom}",
          "86:                                 items={this.props.itemsBottom}",
          "87:                                 validate={this.props.validateBottom}",
          "88:                                 save={this.props.saveBottom}",
          "89:                                 onModeSwitch={() => this.onModeSwitch()}",
          "90:                                 noReadonlyMode={this.props.noReadonlyMode}",
          "91:                                 edit={this.props.editBottom}",
          "92:                                 collapsible={this.props.collapsible}",
          "93:                                 ctx={ctx}",
          "94:                                 isTopSection={false}",
          "95:                                 disabledState={this.state.editBottom || this.state.editBottom === null}",
          "96:                                 updateButtons={editClicked => {",
          "97:                                     this.setState({editTop: editClicked});",
          "98:                                 }}",
          "99:                             />",
          "100:                         </React.Fragment>",
          "101:                     </div>",
          "102:                 )}",
          "103:             </Consumer>",
          "104:         );",
          "105:     }",
          "107:     private onModeSwitch() {",
          "108:         if (this.props.onModeSwitch) {",
          "109:             this.props.onModeSwitch();",
          "110:         }",
          "111:     }",
          "112: }",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-parameters/application-parameters.scss||ui/src/app/applications/components/application-parameters/application-parameters.scss": [
          "File: ui/src/app/applications/components/application-parameters/application-parameters.scss -> ui/src/app/applications/components/application-parameters/application-parameters.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: @import 'node_modules/argo-ui/src/styles/config';",
          "2: @import 'node_modules/argo-ui/src/styles/theme';",
          "4: .application-parameters {",
          "5:     &__labels {",
          "6:         line-height: 28px;",
          "7:         display: flex;",
          "8:         align-items: center;",
          "9:         height: 100%;",
          "10:         flex-wrap: wrap;",
          "11:         padding-top: 0.5em;",
          "12:     }",
          "14:     &__label {",
          "15:         background-color: $argo-color-gray-5;",
          "16:         color: white;",
          "17:         border-radius: 5px;",
          "18:         padding: 4px;",
          "19:         line-height: 14px;",
          "20:         margin: 0.3em 0;",
          "21:         margin-right: 2px;",
          "22:     }",
          "24:     &__sort-icon {",
          "25:         cursor: pointer;",
          "26:         position: absolute;",
          "27:         font-size: 1.3em;",
          "28:         left: -1em;",
          "30:         &.fa-sort-up {",
          "31:             top: 10px;",
          "32:         }",
          "34:         &.fa-sort-down {",
          "35:             bottom: 10px;",
          "36:         }",
          "37:     }",
          "38:     &__remove-icon {",
          "39:         cursor: pointer;",
          "40:         position: absolute;",
          "41:         top: 1em;",
          "42:         right: 1em;",
          "43:     }",
          "45:     .argo-field {",
          "46:         line-height: 1.15;",
          "47:     }",
          "49:     .white-box__details p {",
          "50:         font-weight: 500;",
          "51:         @include themify($themes) {",
          "52:             color: themed('text-1');",
          "53:         }",
          "54:     }",
          "56:     .white-box__details-row .row {",
          "57:         padding-left: 1em;",
          "58:         padding-right: 1em;",
          "59:     }",
          "61:     .white-box__details-row .row .columns:last-child {",
          "62:         padding-left: 1em;",
          "63:     }",
          "65:     .select {",
          "66:         padding-bottom: 0;",
          "67:     }",
          "69:     .row.application-retry-options {",
          "70:         .columns.application-retry-options__item{",
          "71:             padding-left: 0;",
          "72:             padding-right: 10px;",
          "73:         }",
          "75:         .argo-form-row__error-msg {",
          "76:             position: static;",
          "77:             line-height: 1;",
          "78:         }",
          "79:     }",
          "80: }",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-parameters/application-parameters.tsx||ui/src/app/applications/components/application-parameters/application-parameters.tsx": [
          "File: ui/src/app/applications/components/application-parameters/application-parameters.tsx -> ui/src/app/applications/components/application-parameters/application-parameters.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     ArrayInputField,",
          "7:     ArrayValueField,",
          "8:     CheckboxField,",
          "11:     Expandable,",
          "12:     MapValueField,",
          "13:     NameValueEditor,",
          "",
          "[Removed Lines]",
          "9:     EditablePanel,",
          "10:     EditablePanelItem,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     Paginate,",
          "19:     RevisionHelpIcon,",
          "20:     Revision,",
          "22: } from '../../../shared/components';",
          "23: import * as models from '../../../shared/models';",
          "24: import {ApplicationSourceDirectory, Plugin} from '../../../shared/models';",
          "",
          "[Removed Lines]",
          "21:     Repo",
          "",
          "[Added Lines]",
          "19:     Repo,",
          "20:     EditablePanel,",
          "21:     EditablePanelItem",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27: import * as kustomize from './kustomize-image';",
          "28: import {VarsInputField} from './vars-input-field';",
          "29: import {concatMaps} from '../../../shared/utils';",
          "31: import * as jsYaml from 'js-yaml';",
          "32: import {RevisionFormField} from '../revision-form-field/revision-form-field';",
          "34: const TextWithMetadataField = ReactFormField((props: {metadata: {value: string}; fieldApi: FieldApi; className: string}) => {",
          "35:     const {",
          "",
          "[Removed Lines]",
          "30: import {getAppDefaultSource, helpTip} from '../utils';",
          "",
          "[Added Lines]",
          "30: import {getAppDefaultSource} from '../utils';",
          "33: import classNames from 'classnames';",
          "34: import {ApplicationParametersSource} from './application-parameters-source';",
          "36: import './application-parameters.scss';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138: export const ApplicationParameters = (props: {",
          "139:     application: models.Application;",
          "140:     details?: models.RepoAppDetails;",
          "142:     save?: (application: models.Application, query: {validate?: boolean}) => Promise<any>;",
          "143:     noReadonlyMode?: boolean;",
          "144:     pageNumber?: number;",
          "145:     setPageNumber?: (x: number) => any;",
          "146: }) => {",
          "147:     const app = cloneDeep(props.application);",
          "148:     const source = getAppDefaultSource(app); // For source field",
          "149:     const appSources = app?.spec.sources;",
          "150:     const [removedOverrides, setRemovedOverrides] = React.useState(new Array<boolean>());",
          "155:     const [appParamsDeletedState, setAppParamsDeletedState] = React.useState([]);",
          "161:             );",
          "163:         }",
          "167:     }",
          "178:                 }}>",
          "188:         );",
          "193:     }",
          "198:         let floatingTitle: string;",
          "226:         }",
          "227:         return (",
          "231:                     props.save &&",
          "232:                     (async (input: models.Application) => {",
          "235:                         function isDefined(item: any) {",
          "236:                             return item !== null && item !== undefined;",
          "",
          "[Removed Lines]",
          "141:     detailsList?: models.RepoAppDetails[];",
          "152:     let attributes: EditablePanelItem[] = [];",
          "153:     const multipleAttributes = new Array<EditablePanelItem[]>();",
          "157:     if (appSources && props.detailsList && props.detailsList.length > 1) {",
          "158:         for (let i: number = 0; i < props.detailsList.length; i++) {",
          "159:             multipleAttributes.push(",
          "160:                 gatherDetails(props.detailsList[i], attributes, appSources[i], app, setRemovedOverrides, removedOverrides, appParamsDeletedState, setAppParamsDeletedState)",
          "162:             attributes = [];",
          "164:     } else {",
          "166:         attributes = gatherDetails(props.details, attributes, source, app, setRemovedOverrides, removedOverrides, appParamsDeletedState, setAppParamsDeletedState);",
          "169:     if (props.detailsList && props.detailsList.length > 1) {",
          "170:         return (",
          "171:             <Paginate",
          "172:                 showHeader={false}",
          "173:                 data={multipleAttributes}",
          "174:                 page={props.pageNumber}",
          "175:                 preferencesKey={'5'}",
          "176:                 onPageChange={page => {",
          "177:                     props.setPageNumber(page);",
          "179:                 {data => {",
          "180:                     const listOfPanels: any[] = [];",
          "181:                     data.forEach(attr => {",
          "182:                         const repoAppDetails = props.detailsList[multipleAttributes.indexOf(attr)];",
          "183:                         listOfPanels.push(getEditablePanel(attr, repoAppDetails, multipleAttributes.indexOf(attr), app.spec.sources));",
          "184:                     });",
          "185:                     return listOfPanels;",
          "186:                 }}",
          "187:             </Paginate>",
          "189:     } else {",
          "190:         const v: models.ApplicationSource[] = new Array<models.ApplicationSource>();",
          "191:         v.push(app.spec.source);",
          "192:         return getEditablePanel(attributes, props.details, 0, v, true);",
          "195:     function getEditablePanel(panel: EditablePanelItem[], repoAppDetails: models.RepoAppDetails, ind: number, sources: models.ApplicationSource[], isSingleSource?: boolean): any {",
          "196:         const src: models.ApplicationSource = sources[ind];",
          "197:         let descriptionCollapsed: string;",
          "199:         if (sources.length > 1) {",
          "200:             if (repoAppDetails.type === 'Directory') {",
          "201:                 floatingTitle = 'TYPE=' + repoAppDetails.type + ', URL=' + src.repoURL;",
          "202:                 descriptionCollapsed =",
          "203:                     'TYPE=' + repoAppDetails.type + (src.path ? ', PATH=' + src.path : '' + (src.targetRevision ? ', TARGET REVISION=' + src.targetRevision : ''));",
          "204:             } else if (repoAppDetails.type === 'Helm') {",
          "205:                 floatingTitle = 'TYPE=' + repoAppDetails.type + ', URL=' + src.repoURL + (src.chart ? ', CHART=' + src.chart + ':' + src.targetRevision : '');",
          "206:                 descriptionCollapsed =",
          "207:                     'TYPE=' +",
          "208:                     repoAppDetails.type +",
          "209:                     (src.chart ? ', CHART=' + src.chart + ':' + src.targetRevision : '') +",
          "210:                     (src.path ? ', PATH=' + src.path : '') +",
          "211:                     (src.helm && src.helm.valueFiles ? ', VALUES=' + src.helm.valueFiles[0] : '');",
          "212:             } else if (repoAppDetails.type === 'Kustomize') {",
          "213:                 floatingTitle = 'TYPE=' + repoAppDetails.type + ', URL=' + src.repoURL;",
          "214:                 descriptionCollapsed = 'TYPE=' + repoAppDetails.type + ', VERSION=' + src.kustomize.version + (src.path ? ', PATH=' + src.path : '');",
          "215:             } else if (repoAppDetails.type === 'Plugin') {",
          "216:                 floatingTitle =",
          "217:                     'TYPE=' +",
          "218:                     repoAppDetails.type +",
          "219:                     ', URL=' +",
          "220:                     src.repoURL +",
          "221:                     (src.path ? ', PATH=' + src.path : '') +",
          "222:                     (src.targetRevision ? ', TARGET REVISION=' + src.targetRevision : '');",
          "223:                 descriptionCollapsed =",
          "224:                     'TYPE=' + repoAppDetails.type + '' + (src.path ? ', PATH=' + src.path : '') + (src.targetRevision ? ', TARGET REVISION=' + src.targetRevision : '');",
          "225:             }",
          "228:             <EditablePanel",
          "229:                 key={ind}",
          "230:                 save={",
          "233:                         const updatedSrc = isSingleSource ? input.spec.source : input.spec.sources[ind];",
          "",
          "[Added Lines]",
          "149:     collapsedSources?: boolean[];",
          "150:     handleCollapse?: (i: number, isCollapsed: boolean) => void;",
          "156:     const collapsible = props.collapsedSources !== undefined && props.handleCollapse !== undefined;",
          "159:     if (app.spec.sources?.length > 0 && !props.details) {",
          "160:         return (",
          "161:             <div className='application-parameters'>",
          "162:                 <Paginate",
          "163:                     showHeader={false}",
          "164:                     data={app.spec.sources}",
          "165:                     page={props.pageNumber}",
          "166:                     preferencesKey={'5'}",
          "167:                     onPageChange={page => {",
          "168:                         props.setPageNumber(page);",
          "169:                     }}>",
          "170:                     {data => {",
          "171:                         const listOfPanels: JSX.Element[] = [];",
          "172:                         data.forEach(appSource => {",
          "173:                             const i = app.spec.sources.indexOf(appSource);",
          "174:                             listOfPanels.push(getEditablePanelForSources(i, appSource));",
          "175:                         });",
          "176:                         return listOfPanels;",
          "177:                     }}",
          "178:                 </Paginate>",
          "179:             </div>",
          "180:         );",
          "181:     } else {",
          "183:         let attributes: EditablePanelItem[] = [];",
          "184:         if (props.details) {",
          "185:             return getEditablePanel(",
          "186:                 gatherDetails(0, props.details, attributes, source, app, setRemovedOverrides, removedOverrides, appParamsDeletedState, setAppParamsDeletedState, false),",
          "187:                 props.details",
          "188:             );",
          "189:         } else {",
          "191:             return (",
          "192:                 <DataLoader input={app} load={application => getSingleSource(application)}>",
          "193:                     {(details: models.RepoAppDetails) => {",
          "194:                         attributes = [];",
          "195:                         const attr = gatherDetails(",
          "196:                             0,",
          "197:                             details,",
          "198:                             attributes,",
          "199:                             source,",
          "200:                             app,",
          "201:                             setRemovedOverrides,",
          "202:                             removedOverrides,",
          "203:                             appParamsDeletedState,",
          "204:                             setAppParamsDeletedState,",
          "205:                             false",
          "206:                         );",
          "207:                         return getEditablePanel(attr, details);",
          "208:                     }}",
          "209:                 </DataLoader>",
          "215:     function getEditablePanelForSources(index: number, appSource: models.ApplicationSource): JSX.Element {",
          "216:         return (collapsible && props.collapsedSources[index] === undefined) || props.collapsedSources[index] ? (",
          "217:             <div",
          "218:                 key={'app_params_collapsed_' + index}",
          "219:                 className='settings-overview__redirect-panel'",
          "220:                 style={{marginTop: 0}}",
          "221:                 onClick={() => {",
          "222:                     const currentState = props.collapsedSources[index] !== undefined ? props.collapsedSources[index] : true;",
          "223:                     props.handleCollapse(index, !currentState);",
          "225:                 <div className='editable-panel__collapsible-button'>",
          "226:                     <i className={`fa fa-angle-down filter__collapse`} />",
          "227:                 </div>",
          "228:                 <div className='settings-overview__redirect-panel__content'>",
          "229:                     <div className='settings-overview__redirect-panel__title'>Source {index + 1 + ': ' + appSource.repoURL}</div>",
          "230:                     <div className='settings-overview__redirect-panel__description'>",
          "231:                         {(appSource.path ? 'PATH=' + appSource.path : '') + (appSource.targetRevision ? (appSource.path ? ', ' : '') + 'REVISION=' + appSource.targetRevision : '')}",
          "232:                     </div>",
          "233:                 </div>",
          "234:             </div>",
          "235:         ) : (",
          "236:             <div key={'app_params_expanded_' + index} className={classNames('white-box', 'editable-panel')} style={{marginBottom: '18px', paddingBottom: '20px'}}>",
          "237:                 <div key={'app_params_panel_' + index} className='white-box__details'>",
          "238:                     {collapsible && (",
          "239:                         <React.Fragment>",
          "240:                             <div className='editable-panel__collapsible-button'>",
          "241:                                 <i",
          "242:                                     className={`fa fa-angle-up filter__collapse`}",
          "243:                                     onClick={() => {",
          "244:                                         props.handleCollapse(index, !props.collapsedSources[index]);",
          "245:                                     }}",
          "246:                                 />",
          "247:                             </div>",
          "248:                         </React.Fragment>",
          "249:                     )}",
          "250:                     <DataLoader input={app} load={application => getSourceFromSources(application, index)}>",
          "251:                         {(details: models.RepoAppDetails) => getEditablePanelForOneSource(details, index, source)}",
          "252:                     </DataLoader>",
          "253:                 </div>",
          "254:             </div>",
          "255:         );",
          "256:     }",
          "258:     function getEditablePanel(items: EditablePanelItem[], repoAppDetails: models.RepoAppDetails): any {",
          "259:         return (",
          "260:             <div className='application-parameters'>",
          "261:                 <EditablePanel",
          "262:                     save={",
          "263:                         props.save &&",
          "264:                         (async (input: models.Application) => {",
          "265:                             const updatedSrc = input.spec.source;",
          "267:                             function isDefined(item: any) {",
          "268:                                 return item !== null && item !== undefined;",
          "269:                             }",
          "270:                             function isDefinedWithVersion(item: any) {",
          "271:                                 return item !== null && item !== undefined && item.match(/:/);",
          "272:                             }",
          "273:                             if (updatedSrc.helm && updatedSrc.helm.parameters) {",
          "274:                                 updatedSrc.helm.parameters = updatedSrc.helm.parameters.filter(isDefined);",
          "275:                             }",
          "276:                             if (updatedSrc.kustomize && updatedSrc.kustomize.images) {",
          "277:                                 updatedSrc.kustomize.images = updatedSrc.kustomize.images.filter(isDefinedWithVersion);",
          "278:                             }",
          "280:                             let params = input.spec?.source?.plugin?.parameters;",
          "281:                             if (params) {",
          "282:                                 for (const param of params) {",
          "283:                                     if (param.map && param.array) {",
          "286:                                         param.map = param.array.reduce((acc, {name, value}) => {",
          "289:                                             acc[name] = value;",
          "290:                                             return acc;",
          "291:                                         }, {});",
          "292:                                         delete param.array;",
          "293:                                     }",
          "294:                                 }",
          "295:                                 params = params.filter(param => !appParamsDeletedState.includes(param.name));",
          "296:                                 input.spec.source.plugin.parameters = params;",
          "297:                             }",
          "298:                             if (input.spec.source.helm && input.spec.source.helm.valuesObject) {",
          "299:                                 input.spec.source.helm.valuesObject = jsYaml.load(input.spec.source.helm.values); // Deserialize json",
          "300:                                 input.spec.source.helm.values = '';",
          "301:                             }",
          "302:                             await props.save(input, {});",
          "303:                             setRemovedOverrides(new Array<boolean>());",
          "304:                         })",
          "305:                     }",
          "306:                     values={((repoAppDetails.plugin || app?.spec?.source?.plugin) && cloneDeep(app)) || app}",
          "307:                     validate={updatedApp => {",
          "308:                         const errors = {} as any;",
          "310:                         for (const fieldPath of ['spec.source.directory.jsonnet.tlas', 'spec.source.directory.jsonnet.extVars']) {",
          "311:                             const invalid = ((getNestedField(updatedApp, fieldPath) || []) as Array<models.JsonnetVar>).filter(item => !item.name && !item.code);",
          "312:                             errors[fieldPath] = invalid.length > 0 ? 'All fields must have name' : null;",
          "313:                         }",
          "315:                         if (updatedApp.spec.source.helm && updatedApp.spec.source.helm.values) {",
          "316:                             const parsedValues = jsYaml.load(updatedApp.spec.source.helm.values);",
          "317:                             errors['spec.source.helm.values'] = typeof parsedValues === 'object' ? null : 'Values must be a map';",
          "318:                         }",
          "320:                         return errors;",
          "321:                     }}",
          "322:                     onModeSwitch={",
          "323:                         repoAppDetails.plugin &&",
          "324:                         (() => {",
          "325:                             setAppParamsDeletedState([]);",
          "326:                         })",
          "327:                     }",
          "328:                     title={repoAppDetails.type.toLocaleUpperCase()}",
          "329:                     items={items as EditablePanelItem[]}",
          "330:                     noReadonlyMode={props.noReadonlyMode}",
          "331:                     hasMultipleSources={false}",
          "332:                 />",
          "333:             </div>",
          "337:     function getEditablePanelForOneSource(repoAppDetails: models.RepoAppDetails, ind: number, src: models.ApplicationSource): any {",
          "339:         const lowerPanelAttributes: EditablePanelItem[] = [];",
          "340:         const upperPanelAttributes: EditablePanelItem[] = [];",
          "342:         const upperPanel = gatherCoreSourceDetails(ind, upperPanelAttributes, appSources[ind], app);",
          "343:         const lowerPanel = gatherDetails(",
          "344:             ind,",
          "345:             repoAppDetails,",
          "346:             lowerPanelAttributes,",
          "347:             appSources[ind],",
          "348:             app,",
          "349:             setRemovedOverrides,",
          "350:             removedOverrides,",
          "351:             appParamsDeletedState,",
          "352:             setAppParamsDeletedState,",
          "353:             true",
          "354:         );",
          "356:         if (repoAppDetails.type === 'Directory') {",
          "357:             floatingTitle =",
          "358:                 'Source ' +",
          "359:                 (ind + 1) +",
          "360:                 ': TYPE=' +",
          "361:                 repoAppDetails.type +",
          "362:                 ', URL=' +",
          "363:                 src.repoURL +",
          "364:                 (repoAppDetails.path ? ', PATH=' + repoAppDetails.path : '') +",
          "365:                 (src.targetRevision ? ', TARGET REVISION=' + src.targetRevision : '');",
          "366:         } else if (repoAppDetails.type === 'Helm') {",
          "367:             floatingTitle =",
          "368:                 'Source ' +",
          "369:                 (ind + 1) +",
          "370:                 ': TYPE=' +",
          "371:                 repoAppDetails.type +",
          "372:                 ', URL=' +",
          "373:                 src.repoURL +",
          "374:                 (src.chart ? ', CHART=' + src.chart + ':' + src.targetRevision : '') +",
          "375:                 (src.path ? ', PATH=' + src.path : '') +",
          "376:                 (src.targetRevision ? ', REVISION=' + src.targetRevision : '');",
          "377:         } else if (repoAppDetails.type === 'Kustomize') {",
          "378:             floatingTitle =",
          "379:                 'Source ' +",
          "380:                 (ind + 1) +",
          "381:                 ': TYPE=' +",
          "382:                 repoAppDetails.type +",
          "383:                 ', URL=' +",
          "384:                 src.repoURL +",
          "385:                 (repoAppDetails.path ? ', PATH=' + repoAppDetails.path : '') +",
          "386:                 (src.targetRevision ? ', TARGET REVISION=' + src.targetRevision : '');",
          "387:         } else if (repoAppDetails.type === 'Plugin') {",
          "388:             floatingTitle =",
          "389:                 'Source ' +",
          "390:                 (ind + 1) +",
          "391:                 ': TYPE=' +",
          "392:                 repoAppDetails.type +",
          "393:                 ', URL=' +",
          "394:                 src.repoURL +",
          "395:                 (repoAppDetails.path ? ', PATH=' + repoAppDetails.path : '') +",
          "396:                 (src.targetRevision ? ', TARGET REVISION=' + src.targetRevision : '');",
          "399:             <ApplicationParametersSource",
          "400:                 index={ind}",
          "401:                 saveTop={props.save}",
          "402:                 saveBottom={",
          "405:                         const updatedSrc = input.spec.sources[ind];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:                             updatedSrc.kustomize.images = updatedSrc.kustomize.images.filter(isDefinedWithVersion);",
          "247:                         }",
          "250:                         if (params) {",
          "251:                             for (const param of params) {",
          "252:                                 if (param.map && param.array) {",
          "",
          "[Removed Lines]",
          "249:                         let params = input.spec?.source?.plugin?.parameters;",
          "",
          "[Added Lines]",
          "421:                         let params = input.spec?.sources[ind]?.plugin?.parameters;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "263:                             }",
          "265:                             params = params.filter(param => !appParamsDeletedState.includes(param.name));",
          "267:                         }",
          "271:                         }",
          "272:                         await props.save(input, {});",
          "273:                         setRemovedOverrides(new Array<boolean>());",
          "274:                     })",
          "275:                 }",
          "282:                     const errors = {} as any;",
          "285:                         const invalid = ((getNestedField(updatedApp, fieldPath) || []) as Array<models.JsonnetVar>).filter(item => !item.name && !item.code);",
          "286:                         errors[fieldPath] = invalid.length > 0 ? 'All fields must have name' : null;",
          "287:                     }",
          "292:                     }",
          "294:                     return errors;",
          "",
          "[Removed Lines]",
          "266:                             input.spec.source.plugin.parameters = params;",
          "268:                         if (input.spec.source.helm && input.spec.source.helm.valuesObject) {",
          "269:                             input.spec.source.helm.valuesObject = jsYaml.load(input.spec.source.helm.values); // Deserialize json",
          "270:                             input.spec.source.helm.values = '';",
          "276:                 values={",
          "277:                     app?.spec?.source",
          "278:                         ? ((props.details.plugin || app?.spec?.source?.plugin) && cloneDeep(app)) || app",
          "279:                         : ((repoAppDetails.plugin || app?.spec?.sources[ind]?.plugin) && cloneDeep(app)) || app",
          "280:                 }",
          "281:                 validate={updatedApp => {",
          "284:                     for (const fieldPath of ['spec.source.directory.jsonnet.tlas', 'spec.source.directory.jsonnet.extVars']) {",
          "289:                     if (updatedApp.spec.source.helm && updatedApp.spec.source.helm.values) {",
          "290:                         const parsedValues = jsYaml.load(updatedApp.spec.source.helm.values);",
          "291:                         errors['spec.source.helm.values'] = typeof parsedValues === 'object' ? null : 'Values must be a map';",
          "",
          "[Added Lines]",
          "438:                             updatedSrc.plugin.parameters = params;",
          "440:                         if (updatedSrc.helm && updatedSrc.helm.valuesObject) {",
          "441:                             updatedSrc.helm.valuesObject = jsYaml.load(updatedSrc.helm.values); // Deserialize json",
          "442:                             updatedSrc.helm.values = '';",
          "449:                 valuesTop={(app?.spec?.sources && (repoAppDetails.plugin || app?.spec?.sources[ind]?.plugin) && cloneDeep(app)) || app}",
          "450:                 valuesBottom={(app?.spec?.sources && (repoAppDetails.plugin || app?.spec?.sources[ind]?.plugin) && cloneDeep(app)) || app}",
          "451:                 validateTop={updatedApp => {",
          "452:                     const errors = [] as any;",
          "453:                     const repoURL = updatedApp.spec.sources[ind].repoURL;",
          "454:                     if (repoURL === null || repoURL.length === 0) {",
          "455:                         errors['spec.sources[' + ind + '].repoURL'] = 'The source repo URL cannot be empty';",
          "456:                     } else {",
          "457:                         errors['spec.sources[' + ind + '].repoURL'] = null;",
          "458:                     }",
          "459:                     return errors;",
          "460:                 }}",
          "461:                 validateBottom={updatedApp => {",
          "464:                     for (const fieldPath of ['spec.sources[' + ind + '].directory.jsonnet.tlas', 'spec.sources[' + ind + '].directory.jsonnet.extVars']) {",
          "469:                     if (updatedApp.spec.sources[ind].helm?.values) {",
          "470:                         const parsedValues = jsYaml.load(updatedApp.spec.sources[ind].helm.values);",
          "471:                         errors['spec.sources[' + ind + '].helm.values'] = typeof parsedValues === 'object' ? null : 'Values must be a map';",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "299:                         setAppParamsDeletedState([]);",
          "300:                     })",
          "301:                 }",
          "306:                 noReadonlyMode={props.noReadonlyMode}",
          "311:             />",
          "312:         );",
          "313:     }",
          "314: };",
          "326:     const hasMultipleSources = app.spec.sources && app.spec.sources.length > 0;",
          "328:     const isHelm = source.hasOwnProperty('chart');",
          "329:     if (hasMultipleSources) {",
          "330:         attributes.push({",
          "331:             title: 'REPO URL',",
          "332:             view: <Repo url={source.repoURL} />,",
          "339:         });",
          "340:         if (isHelm) {",
          "341:             attributes.push({",
          "",
          "[Removed Lines]",
          "302:                 title={repoAppDetails.type.toLocaleUpperCase()}",
          "303:                 titleCollapsed={src.repoURL}",
          "304:                 floatingTitle={floatingTitle}",
          "305:                 items={panel as EditablePanelItem[]}",
          "307:                 collapsible={sources.length > 1}",
          "308:                 collapsed={true}",
          "309:                 collapsedDescription={descriptionCollapsed}",
          "310:                 hasMultipleSources={app.spec.sources && app.spec.sources.length > 0}",
          "316: function gatherDetails(",
          "317:     repoDetails: models.RepoAppDetails,",
          "318:     attributes: EditablePanelItem[],",
          "319:     source: models.ApplicationSource,",
          "320:     app: models.Application,",
          "321:     setRemovedOverrides: any,",
          "322:     removedOverrides: any,",
          "323:     appParamsDeletedState: any[],",
          "324:     setAppParamsDeletedState: any",
          "325: ): EditablePanelItem[] {",
          "333:             edit: (formApi: FormApi) =>",
          "334:                 hasMultipleSources ? (",
          "335:                     helpTip('REPO URL is not editable for applications with multiple sources. You can edit them in the \"Manifest\" tab.')",
          "336:                 ) : (",
          "337:                     <FormField formApi={formApi} field='spec.source.repoURL' component={Text} />",
          "338:                 )",
          "",
          "[Added Lines]",
          "482:                 titleBottom={repoAppDetails.type.toLocaleUpperCase()}",
          "483:                 titleTop={'SOURCE ' + (ind + 1)}",
          "484:                 floatingTitle={floatingTitle ? floatingTitle : null}",
          "485:                 itemsBottom={lowerPanel as EditablePanelItem[]}",
          "486:                 itemsTop={upperPanel as EditablePanelItem[]}",
          "488:                 collapsible={collapsible}",
          "494: function gatherCoreSourceDetails(i: number, attributes: EditablePanelItem[], source: models.ApplicationSource, app: models.Application): EditablePanelItem[] {",
          "498:     const repoUrlField = 'spec.sources[' + i + '].repoURL';",
          "499:     const sourcesPathField = 'spec.sources[' + i + '].path';",
          "500:     const refField = 'spec.sources[' + i + '].ref';",
          "501:     const chartField = 'spec.sources[' + i + '].chart';",
          "502:     const revisionField = 'spec.sources[' + i + '].targetRevision';",
          "508:             edit: (formApi: FormApi) => <FormField formApi={formApi} field={repoUrlField} component={Text} />",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "345:                         {source.chart}:{source.targetRevision}",
          "346:                     </span>",
          "347:                 ),",
          "386:                                 </div>",
          "390:             });",
          "391:         } else {",
          "392:             attributes.push({",
          "393:                 title: 'TARGET REVISION',",
          "394:                 view: <Revision repoUrl={source.repoURL} revision={source.targetRevision || 'HEAD'} />,",
          "401:             });",
          "402:             attributes.push({",
          "403:                 title: 'PATH',",
          "",
          "[Removed Lines]",
          "348:                 edit: (formApi: FormApi) =>",
          "349:                     hasMultipleSources ? (",
          "350:                         helpTip('CHART is not editable for applications with multiple sources. You can edit them in the \"Manifest\" tab.')",
          "351:                     ) : (",
          "352:                         <DataLoader input={{repoURL: source.repoURL}} load={src => services.repos.charts(src.repoURL).catch(() => new Array<models.HelmChart>())}>",
          "353:                             {(charts: models.HelmChart[]) => (",
          "354:                                 <div className='row'>",
          "355:                                     <div className='columns small-8'>",
          "356:                                         <FormField",
          "357:                                             formApi={formApi}",
          "358:                                             field='spec.source.chart'",
          "359:                                             component={AutocompleteField}",
          "360:                                             componentProps={{",
          "361:                                                 items: charts.map(chart => chart.name),",
          "362:                                                 filterSuggestions: true",
          "363:                                             }}",
          "364:                                         />",
          "365:                                     </div>",
          "366:                                     <DataLoader",
          "367:                                         input={{charts, chart: source.chart}}",
          "368:                                         load={async data => {",
          "369:                                             const chartInfo = data.charts.find(chart => chart.name === data.chart);",
          "370:                                             return (chartInfo && chartInfo.versions) || new Array<string>();",
          "371:                                         }}>",
          "372:                                         {(versions: string[]) => (",
          "373:                                             <div className='columns small-4'>",
          "374:                                                 <FormField",
          "375:                                                     formApi={formApi}",
          "376:                                                     field='spec.source.targetRevision'",
          "377:                                                     component={AutocompleteField}",
          "378:                                                     componentProps={{",
          "379:                                                         items: versions",
          "380:                                                     }}",
          "381:                                                 />",
          "382:                                                 <RevisionHelpIcon type='helm' top='0' />",
          "383:                                             </div>",
          "384:                                         )}",
          "385:                                     </DataLoader>",
          "387:                             )}",
          "388:                         </DataLoader>",
          "389:                     )",
          "395:                 edit: (formApi: FormApi) =>",
          "396:                     hasMultipleSources ? (",
          "397:                         helpTip('TARGET REVISION is not editable for applications with multiple sources. You can edit them in the \"Manifest\" tab.')",
          "398:                     ) : (",
          "399:                         <RevisionFormField helpIconTop={'0'} hideLabel={true} formApi={formApi} repoURL={source.repoURL} />",
          "400:                     )",
          "",
          "[Added Lines]",
          "518:                 edit: (formApi: FormApi) => (",
          "519:                     <DataLoader input={{repoURL: source.repoURL}} load={src => services.repos.charts(src.repoURL).catch(() => new Array<models.HelmChart>())}>",
          "520:                         {(charts: models.HelmChart[]) => (",
          "521:                             <div className='row'>",
          "522:                                 <div className='columns small-8'>",
          "523:                                     <FormField",
          "524:                                         formApi={formApi}",
          "525:                                         field={chartField}",
          "526:                                         component={AutocompleteField}",
          "527:                                         componentProps={{",
          "528:                                             items: charts.map(chart => chart.name),",
          "529:                                             filterSuggestions: true",
          "530:                                         }}",
          "531:                                     />",
          "533:                                 <DataLoader",
          "534:                                     input={{charts, chart: source.chart}}",
          "535:                                     load={async data => {",
          "536:                                         const chartInfo = data.charts.find(chart => chart.name === data.chart);",
          "537:                                         return (chartInfo && chartInfo.versions) || new Array<string>();",
          "538:                                     }}>",
          "539:                                     {(versions: string[]) => (",
          "540:                                         <div className='columns small-4'>",
          "541:                                             <FormField",
          "542:                                                 formApi={formApi}",
          "543:                                                 field={revisionField}",
          "544:                                                 component={AutocompleteField}",
          "545:                                                 componentProps={{",
          "546:                                                     items: versions",
          "547:                                                 }}",
          "548:                                             />",
          "549:                                             <RevisionHelpIcon type='helm' top='0' />",
          "550:                                         </div>",
          "551:                                     )}",
          "552:                                 </DataLoader>",
          "553:                             </div>",
          "554:                         )}",
          "555:                     </DataLoader>",
          "556:                 )",
          "562:                 edit: (formApi: FormApi) => <RevisionFormField helpIconTop={'0'} hideLabel={true} formApi={formApi} repoURL={source.repoURL} fieldValue={revisionField} />",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "406:                         {processPath(source.path)}",
          "407:                     </Revision>",
          "408:                 ),",
          "415:             });",
          "416:             attributes.push({",
          "417:                 title: 'REF',",
          "420:             });",
          "421:         }",
          "422:     }",
          "423:     if (repoDetails.type === 'Kustomize' && repoDetails.kustomize) {",
          "424:         attributes.push({",
          "425:             title: 'VERSION',",
          "",
          "[Removed Lines]",
          "409:                 edit: (formApi: FormApi) =>",
          "410:                     hasMultipleSources ? (",
          "411:                         helpTip('PATH is not editable for applications with multiple sources. You can edit them in the \"Manifest\" tab.')",
          "412:                     ) : (",
          "413:                         <FormField formApi={formApi} field='spec.source.path' component={Text} />",
          "414:                     )",
          "418:                 view: source.ref,",
          "419:                 edit: (formApi: FormApi) => <FormField formApi={formApi} field='spec.source.ref' component={Text} />",
          "",
          "[Added Lines]",
          "571:                 edit: (formApi: FormApi) => <FormField formApi={formApi} field={sourcesPathField} component={Text} />",
          "575:                 view: <span>{source.ref}</span>,",
          "576:                 edit: (formApi: FormApi) => <FormField formApi={formApi} field={refField} component={Text} />",
          "580:     return attributes;",
          "581: }",
          "583: function gatherDetails(",
          "584:     ind: number,",
          "585:     repoDetails: models.RepoAppDetails,",
          "586:     attributes: EditablePanelItem[],",
          "587:     source: models.ApplicationSource,",
          "588:     app: models.Application,",
          "589:     setRemovedOverrides: any,",
          "590:     removedOverrides: any,",
          "591:     appParamsDeletedState: any[],",
          "592:     setAppParamsDeletedState: any,",
          "593:     isMultiSource: boolean",
          "594: ): EditablePanelItem[] {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "428:                 <DataLoader load={() => services.authService.settings()}>",
          "429:                     {settings =>",
          "430:                         ((settings.kustomizeVersions || []).length > 0 && (",
          "432:                         )) || <span>default</span>",
          "433:                     }",
          "434:                 </DataLoader>",
          "",
          "[Removed Lines]",
          "431:                             <FormField formApi={formApi} field='spec.source.kustomize.version' component={AutocompleteField} componentProps={{items: settings.kustomizeVersions}} />",
          "",
          "[Added Lines]",
          "603:                             <FormField",
          "604:                                 formApi={formApi}",
          "605:                                 field={isMultiSource ? 'spec.sources[' + ind + '].kustomize.version' : 'spec.source.kustomize.version'}",
          "606:                                 component={AutocompleteField}",
          "607:                                 componentProps={{items: settings.kustomizeVersions}}",
          "608:                             />",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "438:         attributes.push({",
          "439:             title: 'NAME PREFIX',",
          "440:             view: source.kustomize && source.kustomize.namePrefix,",
          "442:         });",
          "444:         attributes.push({",
          "445:             title: 'NAME SUFFIX',",
          "446:             view: source.kustomize && source.kustomize.nameSuffix,",
          "448:         });",
          "450:         attributes.push({",
          "451:             title: 'NAMESPACE',",
          "454:         });",
          "456:         const srcImages = ((repoDetails && repoDetails.kustomize && repoDetails.kustomize.images) || []).map(val => kustomize.parse(val));",
          "",
          "[Removed Lines]",
          "441:             edit: (formApi: FormApi) => <FormField formApi={formApi} field='spec.source.kustomize.namePrefix' component={Text} />",
          "447:             edit: (formApi: FormApi) => <FormField formApi={formApi} field='spec.source.kustomize.nameSuffix' component={Text} />",
          "452:             view: app.spec.source.kustomize && app.spec.source.kustomize.namespace,",
          "453:             edit: (formApi: FormApi) => <FormField formApi={formApi} field='spec.source.kustomize.namespace' component={Text} />",
          "",
          "[Added Lines]",
          "618:             edit: (formApi: FormApi) => (",
          "619:                 <FormField formApi={formApi} field={isMultiSource ? 'spec.sources[' + ind + '].kustomize.namePrefix' : 'spec.source.kustomize.namePrefix'} component={Text} />",
          "620:             )",
          "626:             edit: (formApi: FormApi) => (",
          "627:                 <FormField formApi={formApi} field={isMultiSource ? 'spec.sources[' + ind + '].kustomize.nameSuffix' : 'spec.source.kustomize.nameSuffix'} component={Text} />",
          "628:             )",
          "633:             view: source.kustomize && source.kustomize.namespace,",
          "634:             edit: (formApi: FormApi) => (",
          "635:                 <FormField formApi={formApi} field={isMultiSource ? 'spec.sources[' + ind + '].kustomize.namespace' : 'spec.source.kustomize.namespace'} component={Text} />",
          "636:             )",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "467:                 getParamsEditableItems(",
          "468:                     app,",
          "469:                     'IMAGES',",
          "471:                     removedOverrides,",
          "472:                     setRemovedOverrides,",
          "473:                     distinct(imagesByName.keys(), overridesByName.keys()).map(name => {",
          "",
          "[Removed Lines]",
          "470:                     'spec.source.kustomize.images',",
          "",
          "[Added Lines]",
          "653:                     isMultiSource ? 'spec.sources[' + ind + '].kustomize.images' : 'spec.source.kustomize.images',",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "493:             edit: (formApi: FormApi) => (",
          "494:                 <FormField",
          "495:                     formApi={formApi}",
          "497:                     component={TagsInputField}",
          "498:                     componentProps={{",
          "499:                         options: repoDetails.helm.valueFiles,",
          "",
          "[Removed Lines]",
          "496:                     field='spec.source.helm.valueFiles'",
          "",
          "[Added Lines]",
          "679:                     field={isMultiSource ? 'spec.sources[' + ind + '].helm.valueFiles' : 'spec.source.helm.valueFiles'}",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "518:                 return (",
          "519:                     <div>",
          "520:                         <pre>",
          "522:                         </pre>",
          "523:                     </div>",
          "524:                 );",
          "",
          "[Removed Lines]",
          "521:                             <FormField formApi={formApi} field='spec.source.helm.values' component={TextArea} />",
          "",
          "[Added Lines]",
          "704:                             <FormField formApi={formApi} field={isMultiSource ? 'spec.sources[' + ind + '].helm.values' : 'spec.source.helm.values'} component={TextArea} />",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "532:             getParamsEditableItems(",
          "533:                 app,",
          "534:                 'PARAMETERS',",
          "536:                 removedOverrides,",
          "537:                 setRemovedOverrides,",
          "538:                 distinct(paramsByName.keys(), overridesByName.keys()).map(name => {",
          "",
          "[Removed Lines]",
          "535:                 'spec.source.helm.parameters',",
          "",
          "[Added Lines]",
          "718:                 isMultiSource ? 'spec.sources[' + ind + '].helm.parameters' : 'spec.source.helm.parameters',",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "555:             getParamsEditableItems(",
          "556:                 app,",
          "557:                 'PARAMETERS',",
          "559:                 removedOverrides,",
          "560:                 setRemovedOverrides,",
          "561:                 distinct(fileParamsByName.keys(), fileOverridesByName.keys()).map(name => {",
          "",
          "[Removed Lines]",
          "558:                 'spec.source.helm.parameters',",
          "",
          "[Added Lines]",
          "741:                 isMultiSource ? 'spec.sources[' + ind + '].helm.parameters' : 'spec.source.helm.parameters',",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "577:             edit: (formApi: FormApi) => (",
          "578:                 <DataLoader load={() => services.authService.plugins()}>",
          "579:                     {(plugins: Plugin[]) => (",
          "581:                     )}",
          "582:                 </DataLoader>",
          "583:             )",
          "",
          "[Removed Lines]",
          "580:                         <FormField formApi={formApi} field='spec.source.plugin.name' component={FormSelect} componentProps={{options: plugins.map(p => p.name)}} />",
          "",
          "[Added Lines]",
          "763:                         <FormField",
          "764:                             formApi={formApi}",
          "765:                             field={isMultiSource ? 'spec.sources[' + ind + '].plugin.name' : 'spec.source.plugin.name'}",
          "766:                             component={FormSelect}",
          "767:                             componentProps={{options: plugins.map(p => p.name)}}",
          "768:                         />",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "593:                     ))}",
          "594:                 </div>",
          "595:             ),",
          "597:         });",
          "598:         const parametersSet = new Set<string>();",
          "599:         if (repoDetails?.plugin?.parametersAnnouncement) {",
          "",
          "[Removed Lines]",
          "596:             edit: (formApi: FormApi) => <FormField field='spec.source.plugin.env' formApi={formApi} component={ArrayInputField} />",
          "",
          "[Added Lines]",
          "784:             edit: (formApi: FormApi) => (",
          "785:                 <FormField field={isMultiSource ? 'spec.sources[' + ind + '].plugin.env' : 'spec.source.plugin.env'} formApi={formApi} component={ArrayInputField} />",
          "786:             )",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "645:                     ),",
          "646:                     edit: (formApi: FormApi) => (",
          "647:                         <FormField",
          "649:                             componentProps={{",
          "650:                                 name: announcement?.name ?? name,",
          "651:                                 defaultVal: announcement?.map,",
          "",
          "[Removed Lines]",
          "648:                             field='spec.source.plugin.parameters'",
          "",
          "[Added Lines]",
          "838:                             field={isMultiSource ? 'spec.sources[' + ind + '].plugin.parameters' : 'spec.source.plugin.parameters'}",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "682:                     ),",
          "683:                     edit: (formApi: FormApi) => (",
          "684:                         <FormField",
          "686:                             componentProps={{",
          "687:                                 name: announcement?.name ?? name,",
          "688:                                 defaultVal: announcement?.array,",
          "",
          "[Removed Lines]",
          "685:                             field='spec.source.plugin.parameters'",
          "",
          "[Added Lines]",
          "875:                             field={isMultiSource ? 'spec.sources[' + ind + '].plugin.parameters' : 'spec.source.plugin.parameters'}",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "723:                     ),",
          "724:                     edit: (formApi: FormApi) => (",
          "725:                         <FormField",
          "727:                             componentProps={{",
          "728:                                 name: announcement?.name ?? name,",
          "729:                                 defaultVal: announcement?.string,",
          "",
          "[Removed Lines]",
          "726:                             field='spec.source.plugin.parameters'",
          "",
          "[Added Lines]",
          "916:                             field={isMultiSource ? 'spec.sources[' + ind + '].plugin.parameters' : 'spec.source.plugin.parameters'}",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "739:         });",
          "740:     } else if (repoDetails.type === 'Directory') {",
          "741:         const directory = source.directory || ({} as ApplicationSourceDirectory);",
          "742:         attributes.push({",
          "743:             title: 'DIRECTORY RECURSE',",
          "744:             view: (!!directory.recurse).toString(),",
          "746:         });",
          "747:         attributes.push({",
          "748:             title: 'TOP-LEVEL ARGUMENTS',",
          "",
          "[Removed Lines]",
          "745:             edit: (formApi: FormApi) => <FormField formApi={formApi} field='spec.source.directory.recurse' component={CheckboxField} />",
          "",
          "[Added Lines]",
          "932:         const fieldValue = isMultiSource ? 'spec.sources[' + ind + '].directory.recurse' : 'spec.source.directory.recurse';",
          "936:             edit: (formApi: FormApi) => <FormField formApi={formApi} field={fieldValue} component={CheckboxField} />",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "751:                     {i.name}='{i.value}' {i.code && 'code'}",
          "752:                 </label>",
          "753:             )),",
          "755:         });",
          "756:         attributes.push({",
          "757:             title: 'EXTERNAL VARIABLES',",
          "",
          "[Removed Lines]",
          "754:             edit: (formApi: FormApi) => <FormField field='spec.source.directory.jsonnet.tlas' formApi={formApi} component={VarsInputField} />",
          "",
          "[Added Lines]",
          "945:             edit: (formApi: FormApi) => (",
          "946:                 <FormField",
          "947:                     field={isMultiSource ? 'spec.sources[' + ind + '].directory.jsonnet.tlas' : 'spec.source.directory.jsonnet.tlas'}",
          "948:                     formApi={formApi}",
          "949:                     component={VarsInputField}",
          "950:                 />",
          "951:             )",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "760:                     {i.name}='{i.value}' {i.code && 'code'}",
          "761:                 </label>",
          "762:             )),",
          "764:         });",
          "766:         attributes.push({",
          "767:             title: 'INCLUDE',",
          "768:             view: directory && directory.include,",
          "770:         });",
          "772:         attributes.push({",
          "773:             title: 'EXCLUDE',",
          "774:             view: directory && directory.exclude,",
          "776:         });",
          "777:     }",
          "778:     return attributes;",
          "779: }",
          "",
          "[Removed Lines]",
          "763:             edit: (formApi: FormApi) => <FormField field='spec.source.directory.jsonnet.extVars' formApi={formApi} component={VarsInputField} />",
          "769:             edit: (formApi: FormApi) => <FormField formApi={formApi} field='spec.source.directory.include' component={Text} />",
          "775:             edit: (formApi: FormApi) => <FormField formApi={formApi} field='spec.source.directory.exclude' component={Text} />",
          "",
          "[Added Lines]",
          "960:             edit: (formApi: FormApi) => (",
          "961:                 <FormField",
          "962:                     field={isMultiSource ? 'spec.sources[' + ind + '].directory.jsonnet.extVars' : 'spec.source.directory.jsonnet.extVars'}",
          "963:                     formApi={formApi}",
          "964:                     component={VarsInputField}",
          "965:                 />",
          "966:             )",
          "972:             edit: (formApi: FormApi) => (",
          "973:                 <FormField formApi={formApi} field={isMultiSource ? 'spec.sources[' + ind + '].directory.include' : 'spec.source.directory.include'} component={Text} />",
          "974:             )",
          "980:             edit: (formApi: FormApi) => (",
          "981:                 <FormField formApi={formApi} field={isMultiSource ? 'spec.sources[' + ind + '].directory.exclude' : 'spec.source.directory.exclude'} component={Text} />",
          "982:             )",
          "989: async function getSourceFromSources(app: models.Application, i: number) {",
          "990:     const sources: models.ApplicationSource[] = app.spec.sources;",
          "991:     if (sources && i < sources.length) {",
          "992:         const aSource = sources[i];",
          "993:         const repoDetail = await services.repos.appDetails(aSource, app.metadata.name, app.spec.project, i, 0).catch(() => ({",
          "994:             type: 'Directory' as models.AppSourceType,",
          "995:             path: aSource.path",
          "996:         }));",
          "997:         return repoDetail;",
          "998:     }",
          "999:     return null;",
          "1000: }",
          "1003: async function getSingleSource(app: models.Application) {",
          "1004:     if (app.spec.source) {",
          "1005:         const repoDetail = await services.repos.appDetails(getAppDefaultSource(app), app.metadata.name, app.spec.project, 0, 0).catch(() => ({",
          "1006:             type: 'Directory' as models.AppSourceType,",
          "1007:             path: getAppDefaultSource(app).path",
          "1008:         }));",
          "1009:         return repoDetail;",
          "1010:     }",
          "1011:     return null;",
          "1012: }",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx": [
          "File: ui/src/app/applications/components/application-summary/application-summary.tsx -> ui/src/app/applications/components/application-summary/application-summary.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import './application-summary.scss';",
          "33: import {DeepLinks} from '../../../shared/components/deep-links';",
          "36: function swap(array: any[], a: number, b: number) {",
          "37:     array = array.slice();",
          "",
          "[Removed Lines]",
          "34: import {ExternalLinks} from '../application-urls';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:         !hasMultipleSources && {",
          "175:             title: 'REPO URL',",
          "176:             view: <Repo url={source.repoURL} />,",
          "183:         },",
          "184:         ...(!hasMultipleSources",
          "185:             ? isHelm",
          "",
          "[Removed Lines]",
          "177:             edit: (formApi: FormApi) =>",
          "178:                 hasMultipleSources ? (",
          "179:                     helpTip('REPO URL is not editable for applications with multiple sources. You can edit them in the \"Manifest\" tab.')",
          "180:                 ) : (",
          "181:                     <FormField formApi={formApi} field='spec.source.repoURL' component={Text} />",
          "182:                 )",
          "",
          "[Added Lines]",
          "176:             edit: (formApi: FormApi) => <FormField formApi={formApi} field='spec.source.repoURL' component={Text} />",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "269:             view: app.spec.revisionHistoryLimit,",
          "270:             edit: (formApi: FormApi) => (",
          "271:                 <div style={{position: 'relative'}}>",
          "278:                     <div style={{position: 'absolute', right: '0', top: '0'}}>",
          "279:                         <HelpIcon",
          "280:                             title='This limits the number of items kept in the apps revision history.",
          "",
          "[Removed Lines]",
          "272:                     <FormField",
          "273:                         formApi={formApi}",
          "274:                         field='spec.revisionHistoryLimit'",
          "275:                         componentProps={{style: {paddingRight: '1em', width: '97%'}, placeholder: '10'}}",
          "276:                         component={NumberField}",
          "277:                     />",
          "",
          "[Added Lines]",
          "266:                     <FormField formApi={formApi} field='spec.revisionHistoryLimit' componentProps={{style: {paddingRight: '1em'}, placeholder: '10'}} component={NumberField} />",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "344:             )",
          "345:         }",
          "346:     ];",
          "348:     if (urls.length > 0) {",
          "349:         attributes.push({",
          "350:             title: 'URLs',",
          "351:             view: (",
          "352:                 <React.Fragment>",
          "357:                             </a>",
          "360:                 </React.Fragment>",
          "361:             )",
          "362:         });",
          "",
          "[Removed Lines]",
          "347:     const urls = ExternalLinks(app.status.summary.externalURLs);",
          "353:                     {urls.map((url, i) => {",
          "354:                         return (",
          "355:                             <a key={i} href={url.ref} target='__blank'>",
          "356:                                 {url.title} &nbsp;",
          "358:                         );",
          "359:                     })}",
          "",
          "[Added Lines]",
          "337:     const urls = app.status.summary.externalURLs || [];",
          "343:                     {urls",
          "344:                         .map(item => item.split('|'))",
          "345:                         .map((parts, i) => (",
          "346:                             <a key={i} href={parts.length > 1 ? parts[1] : parts[0]} target='__blank'>",
          "347:                                 {parts[0]} &nbsp;",
          "349:                         ))}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "495:         <div className='application-summary'>",
          "496:             <EditablePanel",
          "497:                 save={updateApp}",
          "498:                 validate={input => ({",
          "499:                     'spec.project': !input.spec.project && 'Project name is required',",
          "500:                     'spec.destination.server': !input.spec.destination.server && input.spec.destination.hasOwnProperty('server') && 'Cluster server is required',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:                 view={hasMultipleSources ? <>This is a multi-source app, see the Sources tab for repository URLs and source-related information.</> : <></>}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "511:                         <div className='white-box__details'>",
          "512:                             <p>SYNC POLICY</p>",
          "513:                             <div className='row white-box__details-row'>",
          "515:                                 <div className='columns small-9'>",
          "516:                                     {(app.spec.syncPolicy && app.spec.syncPolicy.automated && (",
          "517:                                         <button className='argo-button argo-button--base' onClick={() => unsetAutoSync(ctx)}>",
          "",
          "[Removed Lines]",
          "514:                                 <div className='columns small-3'>{(app.spec.syncPolicy && app.spec.syncPolicy.automated && <span>AUTOMATED</span>) || <span>MANUAL</span>}</div>",
          "",
          "[Added Lines]",
          "505:                                 <div className='columns small-3'>{(app.spec.syncPolicy && app.spec.syncPolicy.automated && <span>AUTOMATED</span>) || <span>NONE</span>}</div>",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/resource-details/resource-details.tsx||ui/src/app/applications/components/resource-details/resource-details.tsx": [
          "File: ui/src/app/applications/components/resource-details/resource-details.tsx -> ui/src/app/applications/components/resource-details/resource-details.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import * as models from '../../../shared/models';",
          "6: import {ErrorBoundary} from '../../../shared/components/error-boundary/error-boundary';",
          "7: import {Context} from '../../../shared/context';",
          "9: import {services} from '../../../shared/services';",
          "10: import {ResourceTabExtension} from '../../../shared/services/extensions-service';",
          "11: import {NodeInfo, SelectNode} from '../application-details/application-details';",
          "",
          "[Removed Lines]",
          "8: import {Application, ApplicationTree, AppSourceType, Event, RepoAppDetails, ResourceNode, State, SyncStatuses} from '../../../shared/models';",
          "",
          "[Added Lines]",
          "8: import {Application, ApplicationTree, Event, ResourceNode, State, SyncStatuses} from '../../../shared/models';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     const selectedNodeInfo = NodeInfo(new URLSearchParams(appContext.history.location.search).get('node'));",
          "42:     const selectedNodeKey = selectedNodeInfo.key;",
          "43:     const [pageNumber, setPageNumber] = React.useState(0);",
          "45:     const getResourceTabs = (",
          "46:         node: ResourceNode,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     const [collapsedSources, setCollapsedSources] = React.useState(new Array<boolean>()); // For Sources tab to save collapse states",
          "45:     const handleCollapse = (i: number, isCollapsed: boolean) => {",
          "46:         const v = collapsedSources.slice();",
          "47:         v[i] = isCollapsed;",
          "48:         setCollapsedSources(v);",
          "49:     };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:                 content: <ApplicationSummary app={application} updateApp={(app, query: {validate?: boolean}) => updateApp(app, query)} />",
          "163:             },",
          "164:             {",
          "167:                 content: (",
          "180:                 )",
          "181:             },",
          "182:             {",
          "",
          "[Removed Lines]",
          "165:                 title: 'SOURCES',",
          "166:                 key: 'sources',",
          "168:                     <DataLoader key='appDetails' input={application} load={app => getSources(app)}>",
          "169:                         {(details: RepoAppDetails[]) => (",
          "170:                             <ApplicationParameters",
          "171:                                 save={(app: models.Application, query: {validate?: boolean}) => updateApp(app, query)}",
          "172:                                 application={application}",
          "173:                                 details={details[0]}",
          "174:                                 detailsList={details}",
          "175:                                 pageNumber={pageNumber}",
          "176:                                 setPageNumber={setPageNumber}",
          "177:                             />",
          "178:                         )}",
          "179:                     </DataLoader>",
          "",
          "[Added Lines]",
          "171:                 title: application.spec.sources === undefined ? 'PARAMETERS' : 'SOURCES',",
          "172:                 key: 'parameters',",
          "174:                     <ApplicationParameters",
          "175:                         save={(app: models.Application, query: {validate?: boolean}) => updateApp(app, query)}",
          "176:                         application={application}",
          "177:                         pageNumber={pageNumber}",
          "178:                         setPageNumber={setPageNumber}",
          "179:                         collapsedSources={collapsedSources}",
          "180:                         handleCollapse={handleCollapse}",
          "181:                     />",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366:         </div>",
          "367:     );",
          "368: };",
          "",
          "[Removed Lines]",
          "371: async function getSources(app: models.Application) {",
          "372:     const listOfDetails = new Array<RepoAppDetails & {type: AppSourceType; path: string}>();",
          "373:     const sources: models.ApplicationSource[] = app.spec.sources;",
          "374:     if (sources) {",
          "375:         const length = sources.length;",
          "376:         for (let i = 0; i < length; i++) {",
          "377:             const aSource = sources[i];",
          "378:             const repoDetail = await services.repos.appDetails(aSource, app.metadata.name, app.spec.project, i, 0).catch(() => ({",
          "379:                 type: 'Directory' as AppSourceType,",
          "380:                 path: aSource.path",
          "381:             }));",
          "382:             if (repoDetail) {",
          "383:                 listOfDetails.push(repoDetail);",
          "384:             }",
          "385:         }",
          "386:         return listOfDetails;",
          "387:     } else {",
          "388:         const repoDetail = await services.repos.appDetails(AppUtils.getAppDefaultSource(app), app.metadata.name, app.spec.project, 0, 0).catch(() => ({",
          "389:             type: 'Directory' as AppSourceType,",
          "390:             path: AppUtils.getAppDefaultSource(app).path",
          "391:         }));",
          "392:         if (repoDetail) {",
          "393:             listOfDetails.push(repoDetail);",
          "394:         }",
          "395:         return listOfDetails;",
          "396:     }",
          "397: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/revision-form-field/revision-form-field.tsx||ui/src/app/applications/components/revision-form-field/revision-form-field.tsx": [
          "File: ui/src/app/applications/components/revision-form-field/revision-form-field.tsx -> ui/src/app/applications/components/revision-form-field/revision-form-field.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     helpIconTop?: string;",
          "11:     hideLabel?: boolean;",
          "12:     repoURL: string;",
          "13: }",
          "15: export class RevisionFormField extends React.PureComponent<RevisionFormFieldProps, {filterType: string}> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:     fieldValue?: string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:                                 <FormField",
          "50:                                     formApi={this.props.formApi}",
          "51:                                     label={this.props.hideLabel ? undefined : 'Revision'}",
          "53:                                     component={AutocompleteField}",
          "54:                                     componentProps={{",
          "55:                                         items: revisions,",
          "",
          "[Removed Lines]",
          "52:                                     field='spec.source.targetRevision'",
          "",
          "[Added Lines]",
          "53:                                     field={this.props.fieldValue ? this.props.fieldValue : 'spec.source.targetRevision'}",
          "",
          "---------------"
        ],
        "ui/src/app/shared/components/editable-panel/editable-panel.scss||ui/src/app/shared/components/editable-panel/editable-panel.scss": [
          "File: ui/src/app/shared/components/editable-panel/editable-panel.scss -> ui/src/app/shared/components/editable-panel/editable-panel.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:         right: 3em;",
          "14:     }",
          "16:     &__collapsible-button {",
          "17:         position: absolute;",
          "18:         top: 30px;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:     &__divider {",
          "17:         position: relative;",
          "18:         border-top: 2px solid lightgray;",
          "19:         padding-top: 8px;",
          "20:     }",
          "22:     &__buttons-relative {",
          "23:         position: relative;",
          "24:         justify-content: right;",
          "25:     }",
          "27:     &__buttons-relative-button {",
          "28:         margin-left: 8px;",
          "29:     }",
          "",
          "---------------"
        ],
        "ui/src/app/shared/components/editable-panel/editable-section.tsx||ui/src/app/shared/components/editable-panel/editable-section.tsx": [
          "File: ui/src/app/shared/components/editable-panel/editable-section.tsx -> ui/src/app/shared/components/editable-panel/editable-section.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {ErrorNotification, NotificationType} from 'argo-ui';",
          "2: import * as React from 'react';",
          "3: import {Form, FormApi} from 'react-form';",
          "4: import {ContextApis} from '../../context';",
          "5: import {EditablePanelItem} from './editable-panel';",
          "6: import {Spinner} from '../spinner';",
          "8: export interface EditableSectionProps<T> {",
          "9:     title?: string | React.ReactNode;",
          "10:     uniqueId: string;",
          "11:     values: T;",
          "12:     validate?: (values: T) => any;",
          "13:     save?: (input: T, query: {validate?: boolean}) => Promise<any>;",
          "14:     items: EditablePanelItem[];",
          "15:     onModeSwitch?: () => any;",
          "16:     noReadonlyMode?: boolean;",
          "17:     view?: string | React.ReactNode;",
          "18:     edit?: (formApi: FormApi) => React.ReactNode;",
          "19:     collapsible?: boolean;",
          "20:     ctx: ContextApis;",
          "21:     isTopSection?: boolean;",
          "22:     disabledState?: boolean;",
          "23:     updateButtons?: (pressed: boolean) => void;",
          "24: }",
          "26: interface EditableSectionState {",
          "27:     isEditing: boolean;",
          "28:     isSaving: boolean;",
          "29: }",
          "32: export class EditableSection<T = {}> extends React.Component<EditableSectionProps<T>, EditableSectionState> {",
          "33:     private formApi: FormApi;",
          "35:     constructor(props: EditableSectionProps<T>) {",
          "36:         super(props);",
          "37:         this.state = {isEditing: !!props.noReadonlyMode, isSaving: false};",
          "38:     }",
          "40:     public UNSAFE_componentWillReceiveProps(nextProps: EditableSectionProps<T>) {",
          "41:         if (this.formApi && JSON.stringify(this.props.values) !== JSON.stringify(nextProps.values)) {",
          "42:             if (nextProps.noReadonlyMode) {",
          "43:                 this.formApi.setAllValues(nextProps.values);",
          "44:             }",
          "45:         }",
          "46:     }",
          "48:     public render() {",
          "49:         return (",
          "50:             <div key={this.props.uniqueId}>",
          "51:                 {!this.props.noReadonlyMode && this.props.save && (",
          "52:                     <div",
          "53:                         key={this.props.uniqueId + '__panel__buttons'}",
          "54:                         className={this.props.isTopSection ? 'editable-panel__buttons' : 'row white-box__details-row editable-panel__buttons-relative'}",
          "55:                         style={{",
          "56:                             top: this.props.isTopSection ? '25px' : '',",
          "57:                             right: this.props.isTopSection ? (this.props.collapsible ? '4.5em' : '3.5em') : this.props.collapsible ? '1.0em' : '0em'",
          "58:                         }}>",
          "59:                         {!this.state.isEditing && (",
          "60:                             <button",
          "61:                                 key={'edit_button_' + this.props.uniqueId}",
          "62:                                 onClick={() => {",
          "63:                                     this.setState({isEditing: true});",
          "64:                                     this.props.updateButtons(true);",
          "65:                                     this.props.onModeSwitch();",
          "66:                                 }}",
          "67:                                 disabled={this.props.disabledState}",
          "68:                                 className='argo-button argo-button--base'>",
          "69:                                 Edit",
          "70:                             </button>",
          "71:                         )}",
          "72:                         {this.state.isEditing && (",
          "73:                             <div key={'buttons_' + this.props.uniqueId} className={!this.props.isTopSection ? 'editable-panel__buttons-relative-button' : ''}>",
          "74:                                 <React.Fragment key={'fragment_' + this.props.uniqueId}>",
          "75:                                     <button",
          "76:                                         key={'save_button_' + this.props.uniqueId}",
          "77:                                         disabled={this.state.isSaving}",
          "78:                                         onClick={() => !this.state.isSaving && this.formApi.submitForm(null)}",
          "79:                                         className='argo-button argo-button--base'>",
          "80:                                         <Spinner show={this.state.isSaving} style={{marginRight: '5px'}} />",
          "81:                                         Save",
          "82:                                     </button>{' '}",
          "83:                                     <button",
          "84:                                         key={'cancel_button_' + this.props.uniqueId}",
          "85:                                         onClick={() => {",
          "86:                                             this.setState({isEditing: false});",
          "87:                                             this.props.updateButtons(false);",
          "88:                                             this.props.onModeSwitch();",
          "89:                                         }}",
          "90:                                         className='argo-button argo-button--base-o'>",
          "91:                                         Cancel",
          "92:                                     </button>",
          "93:                                 </React.Fragment>",
          "94:                             </div>",
          "95:                         )}",
          "96:                     </div>",
          "97:                 )}",
          "99:                 {this.props.title && (",
          "100:                     <div className='row white-box__details-row'>",
          "101:                         <p>{this.props.title}</p>",
          "102:                     </div>",
          "103:                 )}",
          "105:                 {(!this.state.isEditing && (",
          "106:                     <React.Fragment key={'read_' + this.props.uniqueId}>",
          "107:                         {this.props.view}",
          "108:                         {this.props.items",
          "109:                             .filter(item => item.view)",
          "110:                             .map(item => (",
          "111:                                 <React.Fragment key={'read_' + this.props.uniqueId + '_' + (item.key || item.title)}>",
          "112:                                     {item.before}",
          "113:                                     <div className='row white-box__details-row'>",
          "114:                                         <div className='columns small-3'>{item.customTitle || item.title}</div>",
          "115:                                         <div className='columns small-9'>{item.view}</div>",
          "116:                                     </div>",
          "117:                                 </React.Fragment>",
          "118:                             ))}",
          "119:                     </React.Fragment>",
          "120:                 )) || (",
          "121:                     <Form",
          "122:                         getApi={api => (this.formApi = api)}",
          "123:                         formDidUpdate={async form => {",
          "124:                             if (this.props.noReadonlyMode && this.props.save) {",
          "125:                                 await this.props.save(form.values as any, {});",
          "126:                             }",
          "127:                         }}",
          "128:                         onSubmit={async input => {",
          "129:                             try {",
          "130:                                 this.setState({isSaving: true});",
          "131:                                 await this.props.save(input as any, {});",
          "132:                                 this.setState({isEditing: false, isSaving: false});",
          "133:                                 this.props.onModeSwitch();",
          "134:                             } catch (e) {",
          "135:                                 this.props.ctx.notifications.show({",
          "136:                                     content: <ErrorNotification title='Unable to save changes' e={e} />,",
          "137:                                     type: NotificationType.Error",
          "138:                                 });",
          "139:                             } finally {",
          "140:                                 this.setState({isSaving: false});",
          "141:                             }",
          "142:                         }}",
          "143:                         defaultValues={this.props.values}",
          "144:                         validateError={this.props.validate}>",
          "145:                         {api => (",
          "146:                             <React.Fragment key={'edit_' + this.props.uniqueId}>",
          "147:                                 {this.props.edit && this.props.edit(api)}",
          "148:                                 {this.props.items?.map(item => (",
          "149:                                     <React.Fragment key={'edit_' + this.props.uniqueId + '_' + (item.key || item.title)}>",
          "150:                                         {item.before}",
          "151:                                         <div className='row white-box__details-row'>",
          "152:                                             <div className='columns small-3'>{(item.titleEdit && item.titleEdit(api)) || item.customTitle || item.title}</div>",
          "153:                                             <div className='columns small-9'>{(item.edit && item.edit(api)) || item.view}</div>",
          "154:                                         </div>",
          "155:                                     </React.Fragment>",
          "156:                                 ))}",
          "157:                             </React.Fragment>",
          "158:                         )}",
          "159:                     </Form>",
          "160:                 )}",
          "161:             </div>",
          "162:         );",
          "163:     }",
          "164: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41b8e4406b342c732148f1fd7e5905220371c0ba",
      "candidate_info": {
        "commit_hash": "41b8e4406b342c732148f1fd7e5905220371c0ba",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/41b8e4406b342c732148f1fd7e5905220371c0ba",
        "files": [
          "ui/src/app/applications/components/application-summary/application-summary.scss",
          "ui/src/app/applications/components/application-summary/application-summary.tsx"
        ],
        "message": "fix(ui): break external links to lines for each (#17679) (#18768)\n\n* break external links to lines for each\n\nSigned-off-by: Jessie Teng <jessie.teng@fmr.com>\n\n* update for better layout css style\n\nSigned-off-by: Jessie Teng <jessie.teng@fmr.com>\n\n---------\n\nSigned-off-by: Jessie Teng <jessie.teng@fmr.com>\nCo-authored-by: Jessie Teng <jessie.teng@fmr.com>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-summary/application-summary.scss||ui/src/app/applications/components/application-summary/application-summary.scss",
          "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-summary/application-summary.scss||ui/src/app/applications/components/application-summary/application-summary.scss": [
          "File: ui/src/app/applications/components/application-summary/application-summary.scss -> ui/src/app/applications/components/application-summary/application-summary.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         right: 1em;",
          "43:     }",
          "45:     .argo-field {",
          "46:         line-height: 1.15;",
          "47:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     &__links-rows {",
          "46:         margin: 10px 0;",
          "47:     }",
          "49:     &__links-row {",
          "50:         display: flex;",
          "51:         align-items: center;",
          "52:         height: 35px;",
          "53:     }",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx": [
          "File: ui/src/app/applications/components/application-summary/application-summary.tsx -> ui/src/app/applications/components/application-summary/application-summary.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:             title: 'URLs',",
          "341:             view: (",
          "342:                 <React.Fragment>",
          "350:                 </React.Fragment>",
          "351:             )",
          "352:         });",
          "",
          "[Removed Lines]",
          "343:                     {urls",
          "344:                         .map(item => item.split('|'))",
          "345:                         .map((parts, i) => (",
          "346:                             <a key={i} href={parts.length > 1 ? parts[1] : parts[0]} target='__blank'>",
          "347:                                 {parts[0]} &nbsp;",
          "348:                             </a>",
          "349:                         ))}",
          "",
          "[Added Lines]",
          "343:                     <div className='application-summary__links-rows'>",
          "344:                         {urls",
          "345:                             .map(item => item.split('|'))",
          "346:                             .map((parts, i) => (",
          "347:                                 <div className='application-summary__links-row'>",
          "348:                                     <a key={i} href={parts.length > 1 ? parts[1] : parts[0]} target='__blank'>",
          "349:                                         {parts[0]} &nbsp;",
          "350:                                     </a>",
          "351:                                 </div>",
          "352:                             ))}",
          "353:                     </div>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4629a2b03381bfcea5deb4c670d1182c4377071c",
      "candidate_info": {
        "commit_hash": "4629a2b03381bfcea5deb4c670d1182c4377071c",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/4629a2b03381bfcea5deb4c670d1182c4377071c",
        "files": [
          "ui/src/app/applications/components/application-summary/application-summary.tsx",
          "ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx"
        ],
        "message": "Merge pull request from GHSA-jwv5-8mqv-g387\n\n* fix: Validate external URLs for applicatins\n\nSigned-off-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>\n\n* fix(ui): remove invalid external-link\n\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\n\n* linting\n\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\n\n---------\n\nSigned-off-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\nCo-authored-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx",
          "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx",
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx",
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx": [
          "File: ui/src/app/applications/components/application-summary/application-summary.tsx -> ui/src/app/applications/components/application-summary/application-summary.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import './application-summary.scss';",
          "32: import {DeepLinks} from '../../../shared/components/deep-links';",
          "34: function swap(array: any[], a: number, b: number) {",
          "35:     array = array.slice();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import {ExternalLinks} from '../application-urls';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:             )",
          "327:         }",
          "328:     ];",
          "331:     if (urls.length > 0) {",
          "332:         attributes.push({",
          "333:             title: 'URLs',",
          "334:             view: (",
          "335:                 <React.Fragment>",
          "341:                             </a>",
          "343:                 </React.Fragment>",
          "344:             )",
          "345:         });",
          "",
          "[Removed Lines]",
          "330:     const urls = app.status.summary.externalURLs || [];",
          "336:                     {urls",
          "337:                         .map(item => item.split('|'))",
          "338:                         .map((parts, i) => (",
          "339:                             <a key={i} href={parts.length > 1 ? parts[1] : parts[0]} target='__blank'>",
          "340:                                 {parts[0]} &nbsp;",
          "342:                         ))}",
          "",
          "[Added Lines]",
          "330:     const urls = ExternalLinks(app.status.summary.externalURLs);",
          "336:                     {urls.map((url, i) => {",
          "337:                         return (",
          "338:                             <a key={i} href={url.ref} target='__blank'>",
          "339:                                 {url.title} &nbsp;",
          "341:                         );",
          "342:                     })}",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
          "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: test('rejects malicious URLs', () => {",
          "4:     expect(() => {",
          "",
          "[Removed Lines]",
          "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
          "",
          "[Added Lines]",
          "1: import { ExternalLink, ExternalLinks, InvalidExternalLinkError } from './application-urls';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7:     expect(() => {",
          "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
          "9:     }).toThrowError(InvalidExternalLinkError);",
          "10: });",
          "12: test('allows absolute URLs', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:     expect(() => {",
          "11:         const _ = new ExternalLink('title|data:text/html;<h1>hi</h1>');",
          "12:     }).toThrowError(InvalidExternalLinkError);",
          "13:     expect(() => {",
          "14:         const _ = new ExternalLink('data:title|data:text/html;<h1>hi</h1>');",
          "15:     }).toThrowError(InvalidExternalLinkError);",
          "17:     expect(() => {",
          "18:         const _ = new ExternalLink('data:title|https://localhost:8080/applications');",
          "19:     }).not.toThrowError(InvalidExternalLinkError);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "18:     window.location = new URL('https://localhost:8080/applications');",
          "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
          "20: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: test('URLs format', () => {",
          "34:     expect(new ExternalLink('https://localhost:8080/applications')).toEqual({",
          "35:         ref: 'https://localhost:8080/applications',",
          "36:         title: 'https://localhost:8080/applications',",
          "37:     })",
          "38:     expect(new ExternalLink('title|https://localhost:8080/applications')).toEqual({",
          "39:         ref: 'https://localhost:8080/applications',",
          "40:         title: 'title',",
          "41:     })",
          "42: });",
          "45: test('malicious URLs from list to be removed', () => {",
          "46:     const urls: string[] = [",
          "47:         'javascript:alert(\"hi\")',",
          "48:         'https://localhost:8080/applications',",
          "49:     ]",
          "50:     const links = ExternalLinks(urls);",
          "52:     expect(links).toHaveLength(1);",
          "53:     expect(links).toContainEqual({",
          "54:         ref: 'https://localhost:8080/applications',",
          "55:         title: 'https://localhost:8080/applications',",
          "56:     });",
          "57: });",
          "60: test('list to be sorted', () => {",
          "61:     const urls: string[] = [",
          "62:         'https://a',",
          "63:         'https://b',",
          "64:         'a|https://c',",
          "65:         'z|https://c',",
          "66:         'x|https://d',",
          "67:         'x|https://c',",
          "68:     ]",
          "69:     const links = ExternalLinks(urls);",
          "77:     expect(links).toHaveLength(6);",
          "78:     expect(links[0].title).toEqual('a')",
          "79:     expect(links[1].title).toEqual('x')",
          "80:     expect(links[1].ref).toEqual('https://c')",
          "81:     expect(links[2].title).toEqual('x')",
          "82:     expect(links[2].ref).toEqual('https://d')",
          "83:     expect(links[3].title).toEqual('z')",
          "84:     expect(links[4].title).toEqual('https://a')",
          "85:     expect(links[5].title).toEqual('https://b')",
          "86: });",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
          "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     }",
          "30: }",
          "33:     const externalLinks: ExternalLink[] = [];",
          "34:     for (const url of urls || []) {",
          "35:         try {",
          "",
          "[Removed Lines]",
          "32: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "",
          "[Added Lines]",
          "32: export const ExternalLinks = (urls?: string[]) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     externalLinks.sort((a, b) => {",
          "46:             return a.title > b.title ? 1 : -1;",
          "48:             return 1;",
          "50:             return -1;",
          "51:         }",
          "52:         return a.ref > b.ref ? 1 : -1;",
          "53:     });",
          "55:     return (",
          "56:         ((externalLinks || []).length > 0 && (",
          "57:             <div className='applications-list__external-links-icon-container'>",
          "",
          "[Removed Lines]",
          "45:         if (a.title !== '' && b.title !== '') {",
          "47:         } else if (a.title === '') {",
          "49:         } else if (b.title === '') {",
          "",
          "[Added Lines]",
          "45:         const hasTitle = (x: ExternalLink): boolean => {",
          "46:             return x.title !== x.ref && x.title !== '';",
          "47:         };",
          "49:         if (hasTitle(a) && hasTitle(b) && a.title !== b.title) {",
          "51:         } else if (hasTitle(b) && !hasTitle(a)) {",
          "53:         } else if (hasTitle(a) && !hasTitle(b)) {",
          "59:     return externalLinks;",
          "60: };",
          "62: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "63:     const externalLinks: ExternalLink[] = ExternalLinks(urls);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "689a73a729b615d92baacf00beb464cf89e0b053",
      "candidate_info": {
        "commit_hash": "689a73a729b615d92baacf00beb464cf89e0b053",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/689a73a729b615d92baacf00beb464cf89e0b053",
        "files": [
          "ui/src/app/applications/components/application-summary/application-summary.tsx",
          "ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx"
        ],
        "message": "Merge pull request from GHSA-jwv5-8mqv-g387\n\n* fix: Validate external URLs for applicatins\n\nSigned-off-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>\n\n* fix(ui): remove invalid external-link\n\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\n\n* linting\n\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\n\n---------\n\nSigned-off-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\nCo-authored-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx",
          "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx",
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx",
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx": [
          "File: ui/src/app/applications/components/application-summary/application-summary.tsx -> ui/src/app/applications/components/application-summary/application-summary.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import './application-summary.scss';",
          "32: import {DeepLinks} from '../../../shared/components/deep-links';",
          "34: function swap(array: any[], a: number, b: number) {",
          "35:     array = array.slice();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import {ExternalLinks} from '../application-urls';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:             )",
          "327:         }",
          "328:     ];",
          "331:     if (urls.length > 0) {",
          "332:         attributes.push({",
          "333:             title: 'URLs',",
          "334:             view: (",
          "335:                 <React.Fragment>",
          "341:                             </a>",
          "343:                 </React.Fragment>",
          "344:             )",
          "345:         });",
          "",
          "[Removed Lines]",
          "330:     const urls = app.status.summary.externalURLs || [];",
          "336:                     {urls",
          "337:                         .map(item => item.split('|'))",
          "338:                         .map((parts, i) => (",
          "339:                             <a key={i} href={parts.length > 1 ? parts[1] : parts[0]} target='__blank'>",
          "340:                                 {parts[0]} &nbsp;",
          "342:                         ))}",
          "",
          "[Added Lines]",
          "330:     const urls = ExternalLinks(app.status.summary.externalURLs);",
          "336:                     {urls.map((url, i) => {",
          "337:                         return (",
          "338:                             <a key={i} href={url.ref} target='__blank'>",
          "339:                                 {url.title} &nbsp;",
          "341:                         );",
          "342:                     })}",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
          "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: test('rejects malicious URLs', () => {",
          "4:     expect(() => {",
          "",
          "[Removed Lines]",
          "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
          "",
          "[Added Lines]",
          "1: import { ExternalLink, ExternalLinks, InvalidExternalLinkError } from './application-urls';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7:     expect(() => {",
          "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
          "9:     }).toThrowError(InvalidExternalLinkError);",
          "10: });",
          "12: test('allows absolute URLs', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:     expect(() => {",
          "11:         const _ = new ExternalLink('title|data:text/html;<h1>hi</h1>');",
          "12:     }).toThrowError(InvalidExternalLinkError);",
          "13:     expect(() => {",
          "14:         const _ = new ExternalLink('data:title|data:text/html;<h1>hi</h1>');",
          "15:     }).toThrowError(InvalidExternalLinkError);",
          "17:     expect(() => {",
          "18:         const _ = new ExternalLink('data:title|https://localhost:8080/applications');",
          "19:     }).not.toThrowError(InvalidExternalLinkError);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "18:     window.location = new URL('https://localhost:8080/applications');",
          "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
          "20: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: test('URLs format', () => {",
          "34:     expect(new ExternalLink('https://localhost:8080/applications')).toEqual({",
          "35:         ref: 'https://localhost:8080/applications',",
          "36:         title: 'https://localhost:8080/applications',",
          "37:     })",
          "38:     expect(new ExternalLink('title|https://localhost:8080/applications')).toEqual({",
          "39:         ref: 'https://localhost:8080/applications',",
          "40:         title: 'title',",
          "41:     })",
          "42: });",
          "45: test('malicious URLs from list to be removed', () => {",
          "46:     const urls: string[] = [",
          "47:         'javascript:alert(\"hi\")',",
          "48:         'https://localhost:8080/applications',",
          "49:     ]",
          "50:     const links = ExternalLinks(urls);",
          "52:     expect(links).toHaveLength(1);",
          "53:     expect(links).toContainEqual({",
          "54:         ref: 'https://localhost:8080/applications',",
          "55:         title: 'https://localhost:8080/applications',",
          "56:     });",
          "57: });",
          "60: test('list to be sorted', () => {",
          "61:     const urls: string[] = [",
          "62:         'https://a',",
          "63:         'https://b',",
          "64:         'a|https://c',",
          "65:         'z|https://c',",
          "66:         'x|https://d',",
          "67:         'x|https://c',",
          "68:     ]",
          "69:     const links = ExternalLinks(urls);",
          "77:     expect(links).toHaveLength(6);",
          "78:     expect(links[0].title).toEqual('a')",
          "79:     expect(links[1].title).toEqual('x')",
          "80:     expect(links[1].ref).toEqual('https://c')",
          "81:     expect(links[2].title).toEqual('x')",
          "82:     expect(links[2].ref).toEqual('https://d')",
          "83:     expect(links[3].title).toEqual('z')",
          "84:     expect(links[4].title).toEqual('https://a')",
          "85:     expect(links[5].title).toEqual('https://b')",
          "86: });",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
          "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     }",
          "30: }",
          "33:     const externalLinks: ExternalLink[] = [];",
          "34:     for (const url of urls || []) {",
          "35:         try {",
          "",
          "[Removed Lines]",
          "32: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "",
          "[Added Lines]",
          "32: export const ExternalLinks = (urls?: string[]) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     externalLinks.sort((a, b) => {",
          "46:             return a.title > b.title ? 1 : -1;",
          "48:             return 1;",
          "50:             return -1;",
          "51:         }",
          "52:         return a.ref > b.ref ? 1 : -1;",
          "53:     });",
          "55:     return (",
          "56:         ((externalLinks || []).length > 0 && (",
          "57:             <div className='applications-list__external-links-icon-container'>",
          "",
          "[Removed Lines]",
          "45:         if (a.title !== '' && b.title !== '') {",
          "47:         } else if (a.title === '') {",
          "49:         } else if (b.title === '') {",
          "",
          "[Added Lines]",
          "45:         const hasTitle = (x: ExternalLink): boolean => {",
          "46:             return x.title !== x.ref && x.title !== '';",
          "47:         };",
          "49:         if (hasTitle(a) && hasTitle(b) && a.title !== b.title) {",
          "51:         } else if (hasTitle(b) && !hasTitle(a)) {",
          "53:         } else if (hasTitle(a) && !hasTitle(b)) {",
          "59:     return externalLinks;",
          "60: };",
          "62: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "63:     const externalLinks: ExternalLink[] = ExternalLinks(urls);",
          "",
          "---------------"
        ]
      }
    }
  ]
}