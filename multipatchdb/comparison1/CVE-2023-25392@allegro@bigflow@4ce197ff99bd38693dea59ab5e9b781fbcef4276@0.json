{
  "cve_id": "CVE-2023-25392",
  "cve_desc": "Allegro Tech BigFlow <1.6 is vulnerable to Missing SSL Certificate Validation.",
  "repo": "allegro/bigflow",
  "patch_hash": "4ce197ff99bd38693dea59ab5e9b781fbcef4276",
  "patch_info": {
    "commit_hash": "4ce197ff99bd38693dea59ab5e9b781fbcef4276",
    "repo": "allegro/bigflow",
    "commit_url": "https://github.com/allegro/bigflow/commit/4ce197ff99bd38693dea59ab5e9b781fbcef4276",
    "files": [
      "bigflow/cli.py",
      "requirements.in",
      "requirements.txt",
      "test/cli/test_cli.py"
    ],
    "message": "Add CLI tests",
    "before_after_code_files": [
      "bigflow/cli.py||bigflow/cli.py",
      "requirements.in||requirements.in",
      "test/cli/test_cli.py||test/cli/test_cli.py"
    ]
  },
  "patch_diff": {
    "bigflow/cli.py||bigflow/cli.py": [
      "File: bigflow/cli.py -> bigflow/cli.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "408:     parser.add_argument('-vev', '--vault-endpoint-verify',",
      "409:                         type=str,",
      "410:                         action=VaultEndpointVerifyAction,",
      "412:                              'Enables/disables vault endpoint TLS certificate verification. Enabled by default. '",
      "413:                              'Disabling makes execution vulnerable for MITM attacks - do it only when justified and in trusted environments. '",
      "414:                              'For details see: https://requests.readthedocs.io/en/latest/user/advanced/#ssl-cert-verification',",
      "",
      "[Removed Lines]",
      "411:                         help='Can be \"true\", \"false\", a path to certificate PEM file or a path to directory with PEM files. '",
      "",
      "[Added Lines]",
      "411:                         help='Can be \"true\", \"false\", a path to certificate PEM file or a path to '",
      "412:                              'directory with PEM files (see the link for details). '",
      "",
      "---------------"
    ],
    "requirements.in||requirements.in": [
      "File: requirements.in -> requirements.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: pytest",
      "13: pytest-html",
      "14: pytest-cov",
      "",
      "[Removed Lines]",
      "15: pytest-github-actions-annotate-failures",
      "",
      "[Added Lines]",
      "16: parameterized",
      "",
      "---------------"
    ],
    "test/cli/test_cli.py||test/cli/test_cli.py": [
      "File: test/cli/test_cli.py -> test/cli/test_cli.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: from unittest import mock",
      "2: import shutil",
      "3: import freezegun",
      "5: from bigflow.build.operate import BuildImageCacheParams",
      "6: from bigflow.deploy import AuthorizationType",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: from parameterized import parameterized",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "291:         cli(['deploy-dags'])",
      "293:         # then",
      "302:     @mock.patch('bigflow.deploy.deploy_dags_folder')",
      "303:     def test_should_call_cli_deploy_dags_command_for_different_environments(self, deploy_dags_folder_mock):",
      "",
      "[Removed Lines]",
      "294:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "295:                                                    clear_dags_folder=False,",
      "296:                                                    dags_bucket='my-dags-bucket',",
      "297:                                                    dags_dir=self._expected_default_dags_dir(),",
      "298:                                                    project_id='my-gcp-project-id',",
      "299:                                                    vault_endpoint=None,",
      "300:                                                    vault_secret='secret')",
      "",
      "[Added Lines]",
      "295:         deploy_dags_folder_mock.assert_called_with(",
      "296:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "297:             clear_dags_folder=False,",
      "298:             dags_bucket='my-dags-bucket',",
      "299:             dags_dir=self._expected_default_dags_dir(),",
      "300:             project_id='my-gcp-project-id',",
      "301:             vault_endpoint=None,",
      "302:             vault_secret='secret',",
      "303:             vault_endpoint_verify=True",
      "304:         )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "325:         cli(['deploy-dags'])",
      "327:         # then",
      "336:         # when",
      "337:         cli(['deploy-dags', '--config', 'dev'])",
      "339:         # then",
      "348:         # when",
      "349:         cli(['deploy-dags', '--config', 'prod'])",
      "351:         # then",
      "360:     @mock.patch('bigflow.deploy.deploy_dags_folder')",
      "361:     def test_should_call_cli_deploy_dags_command__when_parameters_are_given_by_explicit_deployment_config_file(self,",
      "",
      "[Removed Lines]",
      "328:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "329:                                                    clear_dags_folder=False,",
      "330:                                                    dags_bucket='my-dags-dev-bucket',",
      "331:                                                    dags_dir=self._expected_default_dags_dir(),",
      "332:                                                    project_id='my-gcp-dev-project-id',",
      "333:                                                    vault_endpoint=None,",
      "334:                                                    vault_secret='secret-dev')",
      "340:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "341:                                                    clear_dags_folder=False,",
      "342:                                                    dags_bucket='my-dags-dev-bucket',",
      "343:                                                    dags_dir=self._expected_default_dags_dir(),",
      "344:                                                    project_id='my-gcp-dev-project-id',",
      "345:                                                    vault_endpoint=None,",
      "346:                                                    vault_secret='secret-dev')",
      "352:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "353:                                                    clear_dags_folder=False,",
      "354:                                                    dags_bucket='my-dags-prod-bucket',",
      "355:                                                    dags_dir=self._expected_default_dags_dir(),",
      "356:                                                    project_id='my-gcp-prod-project-id',",
      "357:                                                    vault_endpoint=None,",
      "358:                                                    vault_secret='secret-prod')",
      "",
      "[Added Lines]",
      "332:         deploy_dags_folder_mock.assert_called_with(",
      "333:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "334:             clear_dags_folder=False,",
      "335:             dags_bucket='my-dags-dev-bucket',",
      "336:             dags_dir=self._expected_default_dags_dir(),",
      "337:             project_id='my-gcp-dev-project-id',",
      "338:             vault_endpoint=None,",
      "339:             vault_secret='secret-dev',",
      "340:             vault_endpoint_verify=True",
      "341:         )",
      "347:         deploy_dags_folder_mock.assert_called_with(",
      "348:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "349:             clear_dags_folder=False,",
      "350:             dags_bucket='my-dags-dev-bucket',",
      "351:             dags_dir=self._expected_default_dags_dir(),",
      "352:             project_id='my-gcp-dev-project-id',",
      "353:             vault_endpoint=None,",
      "354:             vault_secret='secret-dev',",
      "355:             vault_endpoint_verify=True",
      "356:         )",
      "362:         deploy_dags_folder_mock.assert_called_with(",
      "363:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "364:             clear_dags_folder=False,",
      "365:             dags_bucket='my-dags-prod-bucket',",
      "366:             dags_dir=self._expected_default_dags_dir(),",
      "367:             project_id='my-gcp-prod-project-id',",
      "368:             vault_endpoint=None,",
      "369:             vault_secret='secret-prod',",
      "370:             vault_endpoint_verify=True",
      "371:         )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "382:              ])",
      "384:         # then",
      "393:     @mock.patch('bigflow.deploy.deploy_dags_folder')",
      "394:     def test_should_call_cli_deploy_dags_command__when_all_parameters_are_given_by_cli_arguments(self,",
      "",
      "[Removed Lines]",
      "385:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.VAULT,",
      "386:                                                    clear_dags_folder=False,",
      "387:                                                    dags_bucket='my-another-dags-bucket',",
      "388:                                                    dags_dir='/tmp/my-dags-dir',",
      "389:                                                    project_id='my-another-gcp-project-id',",
      "390:                                                    vault_endpoint='my-another-vault-endpoint',",
      "391:                                                    vault_secret='secrett')",
      "",
      "[Added Lines]",
      "398:         deploy_dags_folder_mock.assert_called_with(",
      "399:             auth_method=AuthorizationType.VAULT,",
      "400:             clear_dags_folder=False,",
      "401:             dags_bucket='my-another-dags-bucket',",
      "402:             dags_dir='/tmp/my-dags-dir',",
      "403:             project_id='my-another-gcp-project-id',",
      "404:             vault_endpoint='my-another-vault-endpoint',",
      "405:             vault_secret='secrett',",
      "406:             vault_endpoint_verify=True",
      "407:         )",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "405:              ])",
      "407:         # then",
      "416:     @mock.patch('bigflow.deploy.deploy_docker_image')",
      "417:     def test_should_call_cli_deploy_image_command__with_defaults_and_with_implicit_deployment_config_file(self,",
      "",
      "[Removed Lines]",
      "408:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.VAULT,",
      "409:                                                    clear_dags_folder=True,",
      "410:                                                    dags_bucket='my-dags-bucket',",
      "411:                                                    dags_dir='/tmp/my-dags-dir',",
      "412:                                                    project_id='my-gcp-project-id',",
      "413:                                                    vault_endpoint='my-vault-endpoint',",
      "414:                                                    vault_secret='secrett')",
      "",
      "[Added Lines]",
      "424:         deploy_dags_folder_mock.assert_called_with(",
      "425:             auth_method=AuthorizationType.VAULT,",
      "426:             clear_dags_folder=True,",
      "427:             dags_bucket='my-dags-bucket',",
      "428:             dags_dir='/tmp/my-dags-dir',",
      "429:             project_id='my-gcp-project-id',",
      "430:             vault_endpoint='my-vault-endpoint',",
      "431:             vault_secret='secrett',",
      "432:             vault_endpoint_verify=True",
      "433:         )",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "431:         cli(['deploy-image', '--image-tar-path', 'image-0.0.2.tar'])",
      "433:         # then",
      "440:     @mock.patch('bigflow.deploy.deploy_docker_image')",
      "441:     def test_should_call_cli_deploy_image_command__with_explicit_deployment_config_file(self, deploy_docker_image_mock):",
      "",
      "[Removed Lines]",
      "434:         deploy_docker_image_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "435:                                                     docker_repository='my-docker--repository',",
      "436:                                                     image_tar_path='image-0.0.2.tar',",
      "437:                                                     vault_endpoint=None,",
      "438:                                                     vault_secret=None)",
      "",
      "[Added Lines]",
      "453:         deploy_docker_image_mock.assert_called_with(",
      "454:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "455:             docker_repository='my-docker--repository',",
      "456:             image_tar_path='image-0.0.2.tar',",
      "457:             vault_endpoint=None,",
      "458:             vault_secret=None,",
      "459:             vault_endpoint_verify=True",
      "460:         )",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "460:              ])",
      "462:         # then",
      "469:     @mock.patch('bigflow.deploy.deploy_docker_image')",
      "470:     def test_should_call_cli_deploy_image_command__when_all_parameters_are_given_by_cli_arguments_and_image_is_loaded_from_tar(",
      "",
      "[Removed Lines]",
      "463:         deploy_docker_image_mock.assert_called_with(auth_method=AuthorizationType.VAULT,",
      "464:                                                     docker_repository='my-another-docker-repository',",
      "465:                                                     image_tar_path='image-0.0.3.tar',",
      "466:                                                     vault_endpoint='my-another-vault-endpoint',",
      "467:                                                     vault_secret='secrett')",
      "",
      "[Added Lines]",
      "485:         deploy_docker_image_mock.assert_called_with(",
      "486:             auth_method=AuthorizationType.VAULT,",
      "487:             docker_repository='my-another-docker-repository',",
      "488:             image_tar_path='image-0.0.3.tar',",
      "489:             vault_endpoint='my-another-vault-endpoint',",
      "490:             vault_secret='secrett',",
      "491:             vault_endpoint_verify=True",
      "492:         )",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "479:              ])",
      "481:         # then",
      "488:     @mock.patch('bigflow.deploy.deploy_docker_image')",
      "489:     def test_should_find_tar_in_image_directory(self, deploy_docker_image_mock):",
      "",
      "[Removed Lines]",
      "482:         deploy_docker_image_mock.assert_called_with(auth_method=AuthorizationType.VAULT,",
      "483:                                                     docker_repository='my-docker-repository',",
      "484:                                                     image_tar_path='image-0.0.1.tar',",
      "485:                                                     vault_endpoint='my-vault-endpoint',",
      "486:                                                     vault_secret='secrett')",
      "",
      "[Added Lines]",
      "507:         deploy_docker_image_mock.assert_called_with(",
      "508:             auth_method=AuthorizationType.VAULT,",
      "509:             docker_repository='my-docker-repository',",
      "510:             image_tar_path='image-0.0.1.tar',",
      "511:             vault_endpoint='my-vault-endpoint',",
      "512:             vault_secret='secrett',",
      "513:             vault_endpoint_verify=True",
      "514:         )",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "501:              ])",
      "503:         # then",
      "510:     @mock.patch('bigflow.deploy.deploy_docker_image')",
      "511:     def test_should_find_toml_ref_in_image_directory(self, deploy_docker_image_mock):",
      "",
      "[Removed Lines]",
      "504:         deploy_docker_image_mock.assert_called_with(auth_method=AuthorizationType.VAULT,",
      "505:                                                     docker_repository='my-docker-repository',",
      "506:                                                     image_tar_path='.image/image-123.tar',",
      "507:                                                     vault_endpoint='my-vault-endpoint',",
      "508:                                                     vault_secret='secrett')",
      "",
      "[Added Lines]",
      "532:         deploy_docker_image_mock.assert_called_with(",
      "533:             auth_method=AuthorizationType.VAULT,",
      "534:             docker_repository='my-docker-repository',",
      "535:             image_tar_path='.image/image-123.tar',",
      "536:             vault_endpoint='my-vault-endpoint',",
      "537:             vault_secret='secrett',",
      "538:             vault_endpoint_verify=True",
      "539:         )",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "529:             image_tar_path='.image/imageinfo-123.toml',",
      "530:             vault_endpoint='my-vault-endpoint',",
      "531:             vault_secret='secrett',",
      "532:         )",
      "534:     @mock.patch('bigflow.deploy.deploy_dags_folder')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "563:             vault_endpoint_verify=True,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "552:         cli(['deploy', '-i', 'my-images/image-version'])",
      "554:         # then",
      "569:     @mock.patch('bigflow.cli._cli_build_dags')",
      "570:     def test_should_call_cli_build_dags_command(self, _cli_build_dags_mock):",
      "",
      "[Removed Lines]",
      "555:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "556:                                                    clear_dags_folder=False,",
      "557:                                                    dags_bucket='my-dags-bucket',",
      "558:                                                    dags_dir=self._expected_default_dags_dir(),",
      "559:                                                    project_id='my-gcp-project-id',",
      "560:                                                    vault_endpoint=None,",
      "561:                                                    vault_secret=None)",
      "563:         deploy_docker_image_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "564:                                                     docker_repository='my-docker--repository',",
      "565:                                                     image_tar_path='my-images/image-version',",
      "566:                                                     vault_endpoint=None,",
      "567:                                                     vault_secret=None)",
      "",
      "[Added Lines]",
      "587:         deploy_dags_folder_mock.assert_called_with(",
      "588:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "589:             clear_dags_folder=False,",
      "590:             dags_bucket='my-dags-bucket',",
      "591:             dags_dir=self._expected_default_dags_dir(),",
      "592:             project_id='my-gcp-project-id',",
      "593:             vault_endpoint=None,",
      "594:             vault_secret=None,",
      "595:             vault_endpoint_verify=True",
      "596:         )",
      "598:         deploy_docker_image_mock.assert_called_with(",
      "599:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "600:             docker_repository='my-docker--repository',",
      "601:             image_tar_path='my-images/image-version',",
      "602:             vault_endpoint=None,",
      "603:             vault_secret=None,",
      "604:             vault_endpoint_verify=True",
      "605:         )",
      "607:     @parameterized.expand([",
      "608:         ['true', True],",
      "609:         ['false', False],",
      "610:         ['certificate/path', 'certificate/path'],",
      "611:     ])",
      "612:     @mock.patch('bigflow.deploy.deploy_dags_folder')",
      "613:     @mock.patch('bigflow.deploy.deploy_docker_image')",
      "614:     def test_should_use_provided_vault_endpoint_verify_value_when_deploy(",
      "615:             self, verify, expected_verify, deploy_docker_image_mock, deploy_dags_folder_mock):",
      "616:         # given",
      "617:         shutil.rmtree(Path.cwd() / \".image\", ignore_errors=True)",
      "618:         self._touch_file('imageinfo-123.toml', '', '.image')",
      "620:         # when",
      "621:         cli(['deploy',",
      "622:              '--docker-repository', 'my-docker-repository',",
      "623:              '--vault-endpoint', 'my-vault-endpoint',",
      "624:              '--auth-method', 'vault',",
      "625:              '--vault-secret', 'secrett',",
      "626:              '--dags-bucket', 'my-dags-bucket',",
      "627:              '--dags-dir', '/tmp/my-dags-dir',",
      "628:              '--gcp-project-id', 'my-gcp-project-id',",
      "629:              '--clear-dags-folder',",
      "630:              '--vault-endpoint-verify', verify",
      "631:              ])",
      "633:         # then",
      "634:         deploy_dags_folder_mock.assert_called_with(",
      "635:             auth_method=AuthorizationType.VAULT,",
      "636:             clear_dags_folder=True,",
      "637:             dags_bucket='my-dags-bucket',",
      "638:             dags_dir='/tmp/my-dags-dir',",
      "639:             project_id='my-gcp-project-id',",
      "640:             vault_endpoint='my-vault-endpoint',",
      "641:             vault_secret='secrett',",
      "642:             vault_endpoint_verify=expected_verify",
      "643:         )",
      "645:         deploy_docker_image_mock.assert_called_with(",
      "646:             auth_method=AuthorizationType.VAULT,",
      "647:             docker_repository='my-docker-repository',",
      "648:             image_tar_path='.image/imageinfo-123.toml',",
      "649:             vault_endpoint='my-vault-endpoint',",
      "650:             vault_secret='secrett',",
      "651:             vault_endpoint_verify=expected_verify,",
      "652:         )",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "664:         cli_build_mock.assert_called_once()",
      "665:         self.assertEqual(cli_build_mock.call_args[0][0].export_image_tar, True)",
      "688:     def test_should_call_cli_build_image_with_cached_from_image(self):",
      "690:         # given",
      "",
      "[Removed Lines]",
      "667:     @mock.patch('bigflow.cli._cli_build_image')",
      "668:     def test_should_call_cli_build_image_command_without_tar(self, _cli_build_image_mock):",
      "669:         # when",
      "670:         cli(['build-image', '--no-export-image-tar'])",
      "672:         # then",
      "673:         _cli_build_image_mock.assert_called_with(",
      "674:             Namespace(",
      "675:                 auth_method=AuthorizationType.LOCAL_ACCOUNT,",
      "676:                 cache_from_image=None,",
      "677:                 cache_from_version=None,",
      "678:                 config=None,",
      "679:                 deployment_config_path=None,",
      "680:                 export_image_tar=False,",
      "681:                 operation='build-image',",
      "682:                 vault_endpoint=None,",
      "683:                 vault_secret=None,",
      "684:                 verbose=False,",
      "685:             )",
      "686:         )",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "712:             vault_secret='secrett',",
      "713:             cache_from_image=['xyz.org/foo:bar', 'xyz.org/foo:baz'],",
      "714:             cache_from_version=None,",
      "715:         ))",
      "717:     def test_should_call_cli_build_image_with_cached_from_version(self):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "779:             vault_endpoint_verify=True,",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "741:             vault_secret='secrett',",
      "742:             cache_from_image=None,",
      "743:             cache_from_version=['bar', 'baz'],",
      "744:         ))",
      "746:     @mock.patch('bigflow.build.operate.build_project')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "809:             vault_endpoint_verify=True,",
      "810:         ))",
      "812:     def test_should_call_cli_build_image_from_cache_with_vault_endpoint_verify_by_default(self):",
      "813:         # given",
      "814:         self.addMock(mock.patch('bigflow.build.spec.read_project_spec'))",
      "815:         build_image_mock = self.addMock(mock.patch('bigflow.build.operate.build_image'))",
      "817:         # when",
      "818:         cli([",
      "819:             'build-image',",
      "820:             '--vault-endpoint', 'my-vault-endpoint',",
      "821:             '--auth-method', 'vault',",
      "822:             '--vault-secret', 'secrett',",
      "823:             '--cache-from-image', 'xyz.org/foo:bar',",
      "824:         ])",
      "826:         # then",
      "827:         build_image_mock.assert_called_once()",
      "828:         _, kwrgs = build_image_mock.call_args",
      "829:         self.assertEqual(kwrgs['cache_params'], BuildImageCacheParams(",
      "830:             auth_method=AuthorizationType.VAULT,",
      "831:             vault_endpoint='my-vault-endpoint',",
      "832:             vault_secret='secrett',",
      "833:             vault_endpoint_verify=True,",
      "834:             cache_from_image=['xyz.org/foo:bar'],",
      "835:         ))",
      "837:     @parameterized.expand([",
      "838:         ['true', True],",
      "839:         ['false', False],",
      "840:         ['certificate/path', 'certificate/path'],",
      "841:     ])",
      "842:     def test_should_call_cli_build_image_from_cache_with_vault_endpoint_verify(self, verify, expected_verify):",
      "843:         # given",
      "844:         self.addMock(mock.patch('bigflow.build.spec.read_project_spec'))",
      "845:         build_image_mock = self.addMock(mock.patch('bigflow.build.operate.build_image'))",
      "847:         # when",
      "848:         cli([",
      "849:             'build-image',",
      "850:             '--vault-endpoint', 'my-vault-endpoint',",
      "851:             '--auth-method', 'vault',",
      "852:             '--vault-secret', 'secrett',",
      "853:             '--cache-from-image', 'xyz.org/foo:bar',",
      "854:             '--vault-endpoint-verify', verify,",
      "855:         ])",
      "857:         # then",
      "858:         build_image_mock.assert_called_once()",
      "859:         _, kwrgs = build_image_mock.call_args",
      "860:         self.assertEqual(kwrgs['cache_params'], BuildImageCacheParams(",
      "861:             auth_method=AuthorizationType.VAULT,",
      "862:             vault_endpoint='my-vault-endpoint',",
      "863:             vault_secret='secrett',",
      "864:             vault_endpoint_verify=expected_verify,",
      "865:             cache_from_image=['xyz.org/foo:bar'],",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "789:             verbose=False,",
      "790:             workflow=None,",
      "791:             config=None,",
      "792:         )",
      "794:         # then",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "914:             vault_endpoint_verify=True,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fab2660b7d5ed98319776dede095d1bf21c88154",
      "candidate_info": {
        "commit_hash": "fab2660b7d5ed98319776dede095d1bf21c88154",
        "repo": "allegro/bigflow",
        "commit_url": "https://github.com/allegro/bigflow/commit/fab2660b7d5ed98319776dede095d1bf21c88154",
        "files": [
          ".github/workflows/ci.yml",
          "CHANGELOG.md",
          "bigflow/_version.py",
          "bigflow/build/operate.py",
          "bigflow/cli.py",
          "bigflow/deploy.py",
          "requirements.in",
          "requirements.txt",
          "test/cli/test_cli.py",
          "test/test_deploy.py"
        ],
        "message": "Enabled TLS certificate verification in get_vault_token() (#357)\n\n* Enabled TLS certificate verification in get_vault_token()\n\n* Enabled TLS certificate verification in get_vault_token(): deploy module unit tests\n\n* enable CI on push\n\n* Add CLI tests\n\n* Reverted branchees: master in CI GH Action\n\n* Fixed get_vault_token logging\n\n---------\n\nCo-authored-by: Agnieszka Rybak <agnieszka.rybak@allegro.pl>",
        "before_after_code_files": [
          "bigflow/_version.py||bigflow/_version.py",
          "bigflow/build/operate.py||bigflow/build/operate.py",
          "bigflow/cli.py||bigflow/cli.py",
          "bigflow/deploy.py||bigflow/deploy.py",
          "requirements.in||requirements.in",
          "test/cli/test_cli.py||test/cli/test_cli.py",
          "test/test_deploy.py||test/test_deploy.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/allegro/bigflow/pull/357"
        ],
        "olp_code_files": {
          "patch": [
            "bigflow/cli.py||bigflow/cli.py",
            "requirements.in||requirements.in",
            "test/cli/test_cli.py||test/cli/test_cli.py"
          ],
          "candidate": [
            "bigflow/cli.py||bigflow/cli.py",
            "requirements.in||requirements.in",
            "test/cli/test_cli.py||test/cli/test_cli.py"
          ]
        }
      },
      "candidate_diff": {
        "bigflow/_version.py||bigflow/_version.py": [
          "File: bigflow/_version.py -> bigflow/_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: __version__ = '1.5.4'",
          "",
          "[Added Lines]",
          "1: __version__ = '1.6.0.dev1'",
          "",
          "---------------"
        ],
        "bigflow/build/operate.py||bigflow/build/operate.py": [
          "File: bigflow/build/operate.py -> bigflow/build/operate.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:             auth_method=cache_params.auth_method or bigflow.deploy.AuthorizationType.LOCAL_ACCOUNT,",
          "96:             vault_endpoint=cache_params.vault_endpoint,",
          "97:             vault_secret=cache_params.vault_secret,",
          "98:         )",
          "100:         for image in (cache_params.cache_from_image or []):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:             vault_endpoint_verify=cache_params.vault_endpoint_verify",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:     vault_secret: str | None = None",
          "121:     cache_from_version: list[str] | None = None",
          "122:     cache_from_image: list[str] | None = None",
          "125: def build_image(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     vault_endpoint_verify: str | bool | None = None",
          "",
          "---------------"
        ],
        "bigflow/cli.py||bigflow/cli.py": [
          "File: bigflow/cli.py -> bigflow/cli.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: from importlib import import_module",
          "14: from pathlib import Path",
          "15: from types import ModuleType",
          "18: import fnmatch",
          "20: import bigflow as bf",
          "",
          "[Removed Lines]",
          "16: from typing import Tuple, Iterator",
          "17: from typing import Optional",
          "",
          "[Added Lines]",
          "16: from typing import Tuple, Iterator, Optional",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386: def _add_auth_parsers_arguments(parser):",
          "387:     parser.add_argument('-a', '--auth-method',",
          "388:                         type=bigflow.deploy.AuthorizationType,",
          "389:                         default='local_account',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:     class VaultEndpointVerifyAction(argparse.Action):",
          "387:         def __call__(self, parser, args, values, option_string=None):",
          "388:             if values in ['true', 'false']:",
          "389:                 setattr(args, self.dest, values == 'true')",
          "390:             else:",
          "391:                 setattr(args, self.dest, str(values))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "399:                              'Required if auth-method is vault. '",
          "400:                              'If not set, will be read from deployment_config.py.'",
          "401:                         )",
          "402:     parser.add_argument('-vs', '--vault-secret',",
          "403:                         type=str,",
          "404:                         help='Vault secret token. '",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:     parser.add_argument('-vev', '--vault-endpoint-verify',",
          "409:                         type=str,",
          "410:                         action=VaultEndpointVerifyAction,",
          "411:                         help='Can be \"true\", \"false\", a path to certificate PEM file or a path to '",
          "412:                              'directory with PEM files (see the link for details). '",
          "413:                              'Enables/disables vault endpoint TLS certificate verification. Enabled by default. '",
          "414:                              'Disabling makes execution vulnerable for MITM attacks - do it only when justified and in trusted environments. '",
          "415:                              'For details see: https://requests.readthedocs.io/en/latest/user/advanced/#ssl-cert-verification',",
          "416:                         dest='vault_endpoint_verify',",
          "417:                         default=True",
          "418:                         )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "514: def _resolve_property(args, property_name, ignore_value_error=False):",
          "515:     try:",
          "516:         cli_atr = getattr(args, property_name)",
          "518:             return cli_atr",
          "519:         else:",
          "520:             config = import_deployment_config(_resolve_deployment_config_path(args), property_name)",
          "",
          "[Removed Lines]",
          "517:         if cli_atr:",
          "",
          "[Added Lines]",
          "534:         if cli_atr or cli_atr is False:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "533:                        clear_dags_folder=args.clear_dags_folder,",
          "534:                        auth_method=args.auth_method,",
          "535:                        vault_endpoint=_resolve_vault_endpoint(args),",
          "536:                        vault_secret=vault_secret,",
          "537:                        project_id=_resolve_property(args, 'gcp_project_id')",
          "538:                        )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:                        vault_endpoint_verify=_resolve_property(args, 'vault_endpoint_verify', ignore_value_error=True),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "543:     docker_repository = _resolve_property(args, 'docker_repository')",
          "544:     vault_secret = _resolve_property(args, 'vault_secret', ignore_value_error=True)",
          "545:     vault_endpoint = _resolve_vault_endpoint(args)",
          "546:     image_tar_path = args.image_tar_path if args.image_tar_path else find_image_file()",
          "548:     bigflow.deploy.deploy_docker_image(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:     vault_endpoint_verify = _resolve_property(args, 'vault_endpoint_verify', ignore_value_error=True)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "550:         auth_method=args.auth_method,",
          "551:         docker_repository=docker_repository,",
          "552:         vault_endpoint=vault_endpoint,",
          "553:         vault_secret=vault_secret,",
          "554:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572:         vault_endpoint_verify=vault_endpoint_verify,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "579:         logger.debug(\"Image caching is requested - create build image cache params obj\")",
          "580:         vault_secret = _resolve_property(args, 'vault_secret', ignore_value_error=True)",
          "581:         vault_endpoint = _resolve_vault_endpoint(args)",
          "582:         return bigflow.build.operate.BuildImageCacheParams(",
          "583:             auth_method=args.auth_method,",
          "584:             vault_endpoint=vault_endpoint,",
          "585:             vault_secret=vault_secret,",
          "586:             cache_from_version=args.cache_from_version,",
          "587:             cache_from_image=args.cache_from_image,",
          "588:         )",
          "589:     else:",
          "590:         logger.debug(\"No caching is requested - so just disable it completly\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602:         vault_endpoint_verify = _resolve_property(args, 'vault_endpoint_verify', ignore_value_error=True)",
          "609:             vault_endpoint_verify=vault_endpoint_verify",
          "",
          "---------------"
        ],
        "bigflow/deploy.py||bigflow/deploy.py": [
          "File: bigflow/deploy.py -> bigflow/deploy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     docker_repository: str,",
          "43:     auth_method: AuthorizationType = AuthorizationType.LOCAL_ACCOUNT,",
          "44:     vault_endpoint: T.Optional[str] = None,",
          "45:     vault_secret: T.Optional[str] = None,",
          "46: ) -> str:",
          "47:     if image_tar_path.endswith(\".toml\"):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     vault_endpoint_verify: str | bool | None = None,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:         docker_repository,",
          "54:         auth_method,",
          "55:         vault_endpoint,",
          "56:         vault_secret,",
          "57:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         vault_endpoint_verify,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:     docker_repository: str,",
          "63:     auth_method: AuthorizationType = AuthorizationType.LOCAL_ACCOUNT,",
          "64:     vault_endpoint: str | None = None,",
          "65:     vault_secret: str | None = None,",
          "66: ) -> str:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     vault_endpoint_verify: str | bool | None = None,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "81:         docker_repository=docker_repository,",
          "82:         auth_method=auth_method,",
          "83:         vault_endpoint=vault_endpoint,",
          "84:         vault_secret=vault_secret,",
          "85:         image_id=image_id,",
          "86:         build_ver=build_ver,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:         vault_endpoint_verify=vault_endpoint_verify,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92:     docker_repository: str,",
          "93:     auth_method: AuthorizationType = AuthorizationType.LOCAL_ACCOUNT,",
          "94:     vault_endpoint: str | None = None,",
          "95:     vault_secret: str | None = None,",
          "96: ) -> str:",
          "97:     build_ver = bf_commons.decode_version_number_from_file_name(Path(image_tar_path))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     vault_endpoint_verify: str | bool | None = None,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "105:             image_id=image_id,",
          "106:             auth_method=auth_method,",
          "107:             vault_endpoint=vault_endpoint,",
          "108:             vault_secret=vault_secret,",
          "109:         )",
          "110:     finally:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:             vault_endpoint_verify=vault_endpoint_verify,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "118:     image_id: str,",
          "119:     auth_method: AuthorizationType,",
          "120:     vault_endpoint: str | None = None,",
          "121:     vault_secret: str | None = None,",
          "122: ) -> str:",
          "123:     docker_image = docker_repository + \":\" + build_ver",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     vault_endpoint_verify: str | bool | None = None,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "125:     tag_image(image_id, docker_repository, \"latest\")",
          "127:     logger.info(\"Deploying docker image tag=%s auth_method=%s\", docker_image, auth_method)",
          "129:     bf_commons.run_process(['docker', 'push', docker_image])",
          "130:     bf_commons.run_process(['docker', 'push', docker_image_latest])",
          "",
          "[Removed Lines]",
          "128:     authenticate_to_registry(auth_method, vault_endpoint, vault_secret)",
          "",
          "[Added Lines]",
          "135:     authenticate_to_registry(auth_method, vault_endpoint, vault_secret, vault_endpoint_verify)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "136:         auth_method: AuthorizationType,",
          "137:         vault_endpoint: T.Optional[str] = None,",
          "138:         vault_secret: T.Optional[str] = None,",
          "139: ):",
          "140:     logger.info(\"Authenticating to registry with auth_method=%s\", auth_method)",
          "142:     if auth_method == AuthorizationType.LOCAL_ACCOUNT:",
          "143:         bf_commons.run_process(['gcloud', 'auth', 'configure-docker'])",
          "144:     elif auth_method == AuthorizationType.VAULT:",
          "146:         bf_commons.run_process(",
          "147:             ['docker', 'login', '-u', 'oauth2accesstoken', '--password-stdin', 'https://eu.gcr.io'],",
          "148:             input=oauthtoken,",
          "",
          "[Removed Lines]",
          "145:         oauthtoken = get_vault_token(vault_endpoint, vault_secret)",
          "",
          "[Added Lines]",
          "146:         vault_endpoint_verify: str | bool | None = None,",
          "153:         oauthtoken = get_vault_token(vault_endpoint, vault_secret, vault_endpoint_verify)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "156:         auth_method: AuthorizationType,",
          "157:         vault_endpoint: T.Optional[str] = None,",
          "158:         vault_secret: T.Optional[str] = None,",
          "159: ):",
          "160:     logger.info(\"Checking if images used in DAGs exist in the registry\")",
          "162:     missing_images = set()",
          "163:     for image in images:",
          "164:         found_images = bf_commons.run_process(['docker', 'manifest', 'inspect', image], check=False, verbose=False)",
          "",
          "[Removed Lines]",
          "161:     authenticate_to_registry(auth_method, vault_endpoint, vault_secret)",
          "",
          "[Added Lines]",
          "167:         vault_endpoint_verify: str | bool | None = None",
          "170:     authenticate_to_registry(auth_method, vault_endpoint, vault_secret, vault_endpoint_verify)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "189:         clear_dags_folder: bool = False,",
          "190:         auth_method: AuthorizationType = AuthorizationType.LOCAL_ACCOUNT,",
          "191:         vault_endpoint: T.Optional[str] = None,",
          "192:         vault_secret: T.Optional[str] = None,",
          "193:         gs_client: T.Optional[storage.Client] = None,",
          "194: ) -> str:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:         vault_endpoint_verify: str | bool | None = None,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "196:     if images:",
          "197:         check_images_exist(auth_method=auth_method,",
          "198:                            vault_endpoint=vault_endpoint,",
          "199:                            vault_secret=vault_secret,",
          "200:                            images=images)",
          "202:     logger.info(\"Deploying DAGs folder, auth_method=%s, clear_dags_folder=%s, dags_dir=%s\", auth_method, clear_dags_folder, dags_dir)",
          "205:     bucket = client.bucket(dags_bucket)",
          "207:     if clear_dags_folder:",
          "",
          "[Removed Lines]",
          "204:     client = gs_client or create_storage_client(auth_method, project_id, vault_endpoint, vault_secret)",
          "",
          "[Added Lines]",
          "209:                            vault_endpoint_verify=vault_endpoint_verify,",
          "215:     client = gs_client or create_storage_client(auth_method, project_id, vault_endpoint, vault_secret, vault_endpoint_verify)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "246:         project_id: str,",
          "247:         vault_endpoint: str,",
          "248:         vault_secret: str,",
          "249: ) -> storage.Client:",
          "250:     if auth_method == AuthorizationType.LOCAL_ACCOUNT:",
          "251:         return storage.Client(project=project_id)",
          "252:     elif auth_method == AuthorizationType.VAULT:",
          "254:         return storage.Client(project=project_id, credentials=credentials.Credentials(oauthtoken))",
          "255:     else:",
          "256:         raise ValueError(f\"unsupported auth_method: {auth_method!r}\")",
          "260:     if not vault_endpoint:",
          "261:         raise ValueError('vault_endpoint is required')",
          "262:     if not vault_secret:",
          "263:         raise ValueError('vault_secret is required')",
          "265:     headers = {'X-Vault-Token': vault_secret}",
          "268:     if response.status_code != 200:",
          "269:         logger.info(response.text)",
          "270:         raise ValueError(",
          "271:             'Could not get vault token, response code: {}'.format(",
          "272:                 response.status_code))",
          "275:     return response.json()['data']['token']",
          "",
          "[Removed Lines]",
          "253:         oauthtoken = get_vault_token(vault_endpoint, vault_secret)",
          "259: def get_vault_token(vault_endpoint: str, vault_secret: str) -> str:",
          "266:     response = requests.get(vault_endpoint, headers=headers, verify=False)",
          "274:     logger.info(\"get oauth token from %s status_code=%s\", vault_endpoint, response.status_code)",
          "",
          "[Added Lines]",
          "260:         vault_endpoint_verify: str | bool | None = None",
          "265:         oauthtoken = get_vault_token(vault_endpoint, vault_secret, vault_endpoint_verify)",
          "271: def get_vault_token(vault_endpoint: str, vault_secret: str, vault_endpoint_verify: str | bool | None = True) -> str:",
          "278:     response = requests.get(vault_endpoint, headers=headers, verify=vault_endpoint_verify)",
          "280:     logger.info(\"get oauth token from %s status_code=%s\", vault_endpoint, response.status_code)",
          "",
          "---------------"
        ],
        "requirements.in||requirements.in": [
          "File: requirements.in -> requirements.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: pytest",
          "13: pytest-html",
          "14: pytest-cov",
          "",
          "[Removed Lines]",
          "15: pytest-github-actions-annotate-failures",
          "",
          "[Added Lines]",
          "16: parameterized",
          "",
          "---------------"
        ],
        "test/cli/test_cli.py||test/cli/test_cli.py": [
          "File: test/cli/test_cli.py -> test/cli/test_cli.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from unittest import mock",
          "2: import shutil",
          "3: import freezegun",
          "5: from bigflow.build.operate import BuildImageCacheParams",
          "6: from bigflow.deploy import AuthorizationType",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: from parameterized import parameterized",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291:         cli(['deploy-dags'])",
          "293:         # then",
          "302:     @mock.patch('bigflow.deploy.deploy_dags_folder')",
          "303:     def test_should_call_cli_deploy_dags_command_for_different_environments(self, deploy_dags_folder_mock):",
          "",
          "[Removed Lines]",
          "294:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "295:                                                    clear_dags_folder=False,",
          "296:                                                    dags_bucket='my-dags-bucket',",
          "297:                                                    dags_dir=self._expected_default_dags_dir(),",
          "298:                                                    project_id='my-gcp-project-id',",
          "299:                                                    vault_endpoint=None,",
          "300:                                                    vault_secret='secret')",
          "",
          "[Added Lines]",
          "295:         deploy_dags_folder_mock.assert_called_with(",
          "296:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "297:             clear_dags_folder=False,",
          "298:             dags_bucket='my-dags-bucket',",
          "299:             dags_dir=self._expected_default_dags_dir(),",
          "300:             project_id='my-gcp-project-id',",
          "301:             vault_endpoint=None,",
          "302:             vault_secret='secret',",
          "303:             vault_endpoint_verify=True",
          "304:         )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "325:         cli(['deploy-dags'])",
          "327:         # then",
          "336:         # when",
          "337:         cli(['deploy-dags', '--config', 'dev'])",
          "339:         # then",
          "348:         # when",
          "349:         cli(['deploy-dags', '--config', 'prod'])",
          "351:         # then",
          "360:     @mock.patch('bigflow.deploy.deploy_dags_folder')",
          "361:     def test_should_call_cli_deploy_dags_command__when_parameters_are_given_by_explicit_deployment_config_file(self,",
          "",
          "[Removed Lines]",
          "328:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "329:                                                    clear_dags_folder=False,",
          "330:                                                    dags_bucket='my-dags-dev-bucket',",
          "331:                                                    dags_dir=self._expected_default_dags_dir(),",
          "332:                                                    project_id='my-gcp-dev-project-id',",
          "333:                                                    vault_endpoint=None,",
          "334:                                                    vault_secret='secret-dev')",
          "340:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "341:                                                    clear_dags_folder=False,",
          "342:                                                    dags_bucket='my-dags-dev-bucket',",
          "343:                                                    dags_dir=self._expected_default_dags_dir(),",
          "344:                                                    project_id='my-gcp-dev-project-id',",
          "345:                                                    vault_endpoint=None,",
          "346:                                                    vault_secret='secret-dev')",
          "352:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "353:                                                    clear_dags_folder=False,",
          "354:                                                    dags_bucket='my-dags-prod-bucket',",
          "355:                                                    dags_dir=self._expected_default_dags_dir(),",
          "356:                                                    project_id='my-gcp-prod-project-id',",
          "357:                                                    vault_endpoint=None,",
          "358:                                                    vault_secret='secret-prod')",
          "",
          "[Added Lines]",
          "332:         deploy_dags_folder_mock.assert_called_with(",
          "333:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "334:             clear_dags_folder=False,",
          "335:             dags_bucket='my-dags-dev-bucket',",
          "336:             dags_dir=self._expected_default_dags_dir(),",
          "337:             project_id='my-gcp-dev-project-id',",
          "338:             vault_endpoint=None,",
          "339:             vault_secret='secret-dev',",
          "340:             vault_endpoint_verify=True",
          "341:         )",
          "347:         deploy_dags_folder_mock.assert_called_with(",
          "348:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "349:             clear_dags_folder=False,",
          "350:             dags_bucket='my-dags-dev-bucket',",
          "351:             dags_dir=self._expected_default_dags_dir(),",
          "352:             project_id='my-gcp-dev-project-id',",
          "353:             vault_endpoint=None,",
          "354:             vault_secret='secret-dev',",
          "355:             vault_endpoint_verify=True",
          "356:         )",
          "362:         deploy_dags_folder_mock.assert_called_with(",
          "363:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "364:             clear_dags_folder=False,",
          "365:             dags_bucket='my-dags-prod-bucket',",
          "366:             dags_dir=self._expected_default_dags_dir(),",
          "367:             project_id='my-gcp-prod-project-id',",
          "368:             vault_endpoint=None,",
          "369:             vault_secret='secret-prod',",
          "370:             vault_endpoint_verify=True",
          "371:         )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "382:              ])",
          "384:         # then",
          "393:     @mock.patch('bigflow.deploy.deploy_dags_folder')",
          "394:     def test_should_call_cli_deploy_dags_command__when_all_parameters_are_given_by_cli_arguments(self,",
          "",
          "[Removed Lines]",
          "385:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.VAULT,",
          "386:                                                    clear_dags_folder=False,",
          "387:                                                    dags_bucket='my-another-dags-bucket',",
          "388:                                                    dags_dir='/tmp/my-dags-dir',",
          "389:                                                    project_id='my-another-gcp-project-id',",
          "390:                                                    vault_endpoint='my-another-vault-endpoint',",
          "391:                                                    vault_secret='secrett')",
          "",
          "[Added Lines]",
          "398:         deploy_dags_folder_mock.assert_called_with(",
          "399:             auth_method=AuthorizationType.VAULT,",
          "400:             clear_dags_folder=False,",
          "401:             dags_bucket='my-another-dags-bucket',",
          "402:             dags_dir='/tmp/my-dags-dir',",
          "403:             project_id='my-another-gcp-project-id',",
          "404:             vault_endpoint='my-another-vault-endpoint',",
          "405:             vault_secret='secrett',",
          "406:             vault_endpoint_verify=True",
          "407:         )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "405:              ])",
          "407:         # then",
          "416:     @mock.patch('bigflow.deploy.deploy_docker_image')",
          "417:     def test_should_call_cli_deploy_image_command__with_defaults_and_with_implicit_deployment_config_file(self,",
          "",
          "[Removed Lines]",
          "408:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.VAULT,",
          "409:                                                    clear_dags_folder=True,",
          "410:                                                    dags_bucket='my-dags-bucket',",
          "411:                                                    dags_dir='/tmp/my-dags-dir',",
          "412:                                                    project_id='my-gcp-project-id',",
          "413:                                                    vault_endpoint='my-vault-endpoint',",
          "414:                                                    vault_secret='secrett')",
          "",
          "[Added Lines]",
          "424:         deploy_dags_folder_mock.assert_called_with(",
          "425:             auth_method=AuthorizationType.VAULT,",
          "426:             clear_dags_folder=True,",
          "427:             dags_bucket='my-dags-bucket',",
          "428:             dags_dir='/tmp/my-dags-dir',",
          "429:             project_id='my-gcp-project-id',",
          "430:             vault_endpoint='my-vault-endpoint',",
          "431:             vault_secret='secrett',",
          "432:             vault_endpoint_verify=True",
          "433:         )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "431:         cli(['deploy-image', '--image-tar-path', 'image-0.0.2.tar'])",
          "433:         # then",
          "440:     @mock.patch('bigflow.deploy.deploy_docker_image')",
          "441:     def test_should_call_cli_deploy_image_command__with_explicit_deployment_config_file(self, deploy_docker_image_mock):",
          "",
          "[Removed Lines]",
          "434:         deploy_docker_image_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "435:                                                     docker_repository='my-docker--repository',",
          "436:                                                     image_tar_path='image-0.0.2.tar',",
          "437:                                                     vault_endpoint=None,",
          "438:                                                     vault_secret=None)",
          "",
          "[Added Lines]",
          "453:         deploy_docker_image_mock.assert_called_with(",
          "454:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "455:             docker_repository='my-docker--repository',",
          "456:             image_tar_path='image-0.0.2.tar',",
          "457:             vault_endpoint=None,",
          "458:             vault_secret=None,",
          "459:             vault_endpoint_verify=True",
          "460:         )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "460:              ])",
          "462:         # then",
          "469:     @mock.patch('bigflow.deploy.deploy_docker_image')",
          "470:     def test_should_call_cli_deploy_image_command__when_all_parameters_are_given_by_cli_arguments_and_image_is_loaded_from_tar(",
          "",
          "[Removed Lines]",
          "463:         deploy_docker_image_mock.assert_called_with(auth_method=AuthorizationType.VAULT,",
          "464:                                                     docker_repository='my-another-docker-repository',",
          "465:                                                     image_tar_path='image-0.0.3.tar',",
          "466:                                                     vault_endpoint='my-another-vault-endpoint',",
          "467:                                                     vault_secret='secrett')",
          "",
          "[Added Lines]",
          "485:         deploy_docker_image_mock.assert_called_with(",
          "486:             auth_method=AuthorizationType.VAULT,",
          "487:             docker_repository='my-another-docker-repository',",
          "488:             image_tar_path='image-0.0.3.tar',",
          "489:             vault_endpoint='my-another-vault-endpoint',",
          "490:             vault_secret='secrett',",
          "491:             vault_endpoint_verify=True",
          "492:         )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "479:              ])",
          "481:         # then",
          "488:     @mock.patch('bigflow.deploy.deploy_docker_image')",
          "489:     def test_should_find_tar_in_image_directory(self, deploy_docker_image_mock):",
          "",
          "[Removed Lines]",
          "482:         deploy_docker_image_mock.assert_called_with(auth_method=AuthorizationType.VAULT,",
          "483:                                                     docker_repository='my-docker-repository',",
          "484:                                                     image_tar_path='image-0.0.1.tar',",
          "485:                                                     vault_endpoint='my-vault-endpoint',",
          "486:                                                     vault_secret='secrett')",
          "",
          "[Added Lines]",
          "507:         deploy_docker_image_mock.assert_called_with(",
          "508:             auth_method=AuthorizationType.VAULT,",
          "509:             docker_repository='my-docker-repository',",
          "510:             image_tar_path='image-0.0.1.tar',",
          "511:             vault_endpoint='my-vault-endpoint',",
          "512:             vault_secret='secrett',",
          "513:             vault_endpoint_verify=True",
          "514:         )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "501:              ])",
          "503:         # then",
          "510:     @mock.patch('bigflow.deploy.deploy_docker_image')",
          "511:     def test_should_find_toml_ref_in_image_directory(self, deploy_docker_image_mock):",
          "",
          "[Removed Lines]",
          "504:         deploy_docker_image_mock.assert_called_with(auth_method=AuthorizationType.VAULT,",
          "505:                                                     docker_repository='my-docker-repository',",
          "506:                                                     image_tar_path='.image/image-123.tar',",
          "507:                                                     vault_endpoint='my-vault-endpoint',",
          "508:                                                     vault_secret='secrett')",
          "",
          "[Added Lines]",
          "532:         deploy_docker_image_mock.assert_called_with(",
          "533:             auth_method=AuthorizationType.VAULT,",
          "534:             docker_repository='my-docker-repository',",
          "535:             image_tar_path='.image/image-123.tar',",
          "536:             vault_endpoint='my-vault-endpoint',",
          "537:             vault_secret='secrett',",
          "538:             vault_endpoint_verify=True",
          "539:         )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "529:             image_tar_path='.image/imageinfo-123.toml',",
          "530:             vault_endpoint='my-vault-endpoint',",
          "531:             vault_secret='secrett',",
          "532:         )",
          "534:     @mock.patch('bigflow.deploy.deploy_dags_folder')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:             vault_endpoint_verify=True,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "552:         cli(['deploy', '-i', 'my-images/image-version'])",
          "554:         # then",
          "569:     @mock.patch('bigflow.cli._cli_build_dags')",
          "570:     def test_should_call_cli_build_dags_command(self, _cli_build_dags_mock):",
          "",
          "[Removed Lines]",
          "555:         deploy_dags_folder_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "556:                                                    clear_dags_folder=False,",
          "557:                                                    dags_bucket='my-dags-bucket',",
          "558:                                                    dags_dir=self._expected_default_dags_dir(),",
          "559:                                                    project_id='my-gcp-project-id',",
          "560:                                                    vault_endpoint=None,",
          "561:                                                    vault_secret=None)",
          "563:         deploy_docker_image_mock.assert_called_with(auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "564:                                                     docker_repository='my-docker--repository',",
          "565:                                                     image_tar_path='my-images/image-version',",
          "566:                                                     vault_endpoint=None,",
          "567:                                                     vault_secret=None)",
          "",
          "[Added Lines]",
          "587:         deploy_dags_folder_mock.assert_called_with(",
          "588:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "589:             clear_dags_folder=False,",
          "590:             dags_bucket='my-dags-bucket',",
          "591:             dags_dir=self._expected_default_dags_dir(),",
          "592:             project_id='my-gcp-project-id',",
          "593:             vault_endpoint=None,",
          "594:             vault_secret=None,",
          "595:             vault_endpoint_verify=True",
          "596:         )",
          "598:         deploy_docker_image_mock.assert_called_with(",
          "599:             auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "600:             docker_repository='my-docker--repository',",
          "601:             image_tar_path='my-images/image-version',",
          "602:             vault_endpoint=None,",
          "603:             vault_secret=None,",
          "604:             vault_endpoint_verify=True",
          "605:         )",
          "607:     @parameterized.expand([",
          "608:         ['true', True],",
          "609:         ['false', False],",
          "610:         ['certificate/path', 'certificate/path'],",
          "611:     ])",
          "612:     @mock.patch('bigflow.deploy.deploy_dags_folder')",
          "613:     @mock.patch('bigflow.deploy.deploy_docker_image')",
          "614:     def test_should_use_provided_vault_endpoint_verify_value_when_deploy(",
          "615:             self, verify, expected_verify, deploy_docker_image_mock, deploy_dags_folder_mock):",
          "616:         # given",
          "617:         shutil.rmtree(Path.cwd() / \".image\", ignore_errors=True)",
          "618:         self._touch_file('imageinfo-123.toml', '', '.image')",
          "620:         # when",
          "621:         cli(['deploy',",
          "622:              '--docker-repository', 'my-docker-repository',",
          "623:              '--vault-endpoint', 'my-vault-endpoint',",
          "624:              '--auth-method', 'vault',",
          "625:              '--vault-secret', 'secrett',",
          "626:              '--dags-bucket', 'my-dags-bucket',",
          "627:              '--dags-dir', '/tmp/my-dags-dir',",
          "628:              '--gcp-project-id', 'my-gcp-project-id',",
          "629:              '--clear-dags-folder',",
          "630:              '--vault-endpoint-verify', verify",
          "631:              ])",
          "633:         # then",
          "634:         deploy_dags_folder_mock.assert_called_with(",
          "635:             auth_method=AuthorizationType.VAULT,",
          "636:             clear_dags_folder=True,",
          "637:             dags_bucket='my-dags-bucket',",
          "638:             dags_dir='/tmp/my-dags-dir',",
          "639:             project_id='my-gcp-project-id',",
          "640:             vault_endpoint='my-vault-endpoint',",
          "641:             vault_secret='secrett',",
          "642:             vault_endpoint_verify=expected_verify",
          "643:         )",
          "645:         deploy_docker_image_mock.assert_called_with(",
          "646:             auth_method=AuthorizationType.VAULT,",
          "647:             docker_repository='my-docker-repository',",
          "648:             image_tar_path='.image/imageinfo-123.toml',",
          "649:             vault_endpoint='my-vault-endpoint',",
          "650:             vault_secret='secrett',",
          "651:             vault_endpoint_verify=expected_verify,",
          "652:         )",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "664:         cli_build_mock.assert_called_once()",
          "665:         self.assertEqual(cli_build_mock.call_args[0][0].export_image_tar, True)",
          "688:     def test_should_call_cli_build_image_with_cached_from_image(self):",
          "690:         # given",
          "",
          "[Removed Lines]",
          "667:     @mock.patch('bigflow.cli._cli_build_image')",
          "668:     def test_should_call_cli_build_image_command_without_tar(self, _cli_build_image_mock):",
          "669:         # when",
          "670:         cli(['build-image', '--no-export-image-tar'])",
          "672:         # then",
          "673:         _cli_build_image_mock.assert_called_with(",
          "674:             Namespace(",
          "675:                 auth_method=AuthorizationType.LOCAL_ACCOUNT,",
          "676:                 cache_from_image=None,",
          "677:                 cache_from_version=None,",
          "678:                 config=None,",
          "679:                 deployment_config_path=None,",
          "680:                 export_image_tar=False,",
          "681:                 operation='build-image',",
          "682:                 vault_endpoint=None,",
          "683:                 vault_secret=None,",
          "684:                 verbose=False,",
          "685:             )",
          "686:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "712:             vault_secret='secrett',",
          "713:             cache_from_image=['xyz.org/foo:bar', 'xyz.org/foo:baz'],",
          "714:             cache_from_version=None,",
          "715:         ))",
          "717:     def test_should_call_cli_build_image_with_cached_from_version(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "779:             vault_endpoint_verify=True,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "741:             vault_secret='secrett',",
          "742:             cache_from_image=None,",
          "743:             cache_from_version=['bar', 'baz'],",
          "744:         ))",
          "746:     @mock.patch('bigflow.build.operate.build_project')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "809:             vault_endpoint_verify=True,",
          "810:         ))",
          "812:     def test_should_call_cli_build_image_from_cache_with_vault_endpoint_verify_by_default(self):",
          "813:         # given",
          "814:         self.addMock(mock.patch('bigflow.build.spec.read_project_spec'))",
          "815:         build_image_mock = self.addMock(mock.patch('bigflow.build.operate.build_image'))",
          "817:         # when",
          "818:         cli([",
          "819:             'build-image',",
          "820:             '--vault-endpoint', 'my-vault-endpoint',",
          "821:             '--auth-method', 'vault',",
          "822:             '--vault-secret', 'secrett',",
          "823:             '--cache-from-image', 'xyz.org/foo:bar',",
          "824:         ])",
          "826:         # then",
          "827:         build_image_mock.assert_called_once()",
          "828:         _, kwrgs = build_image_mock.call_args",
          "829:         self.assertEqual(kwrgs['cache_params'], BuildImageCacheParams(",
          "830:             auth_method=AuthorizationType.VAULT,",
          "831:             vault_endpoint='my-vault-endpoint',",
          "832:             vault_secret='secrett',",
          "833:             vault_endpoint_verify=True,",
          "834:             cache_from_image=['xyz.org/foo:bar'],",
          "835:         ))",
          "837:     @parameterized.expand([",
          "838:         ['true', True],",
          "839:         ['false', False],",
          "840:         ['certificate/path', 'certificate/path'],",
          "841:     ])",
          "842:     def test_should_call_cli_build_image_from_cache_with_vault_endpoint_verify(self, verify, expected_verify):",
          "843:         # given",
          "844:         self.addMock(mock.patch('bigflow.build.spec.read_project_spec'))",
          "845:         build_image_mock = self.addMock(mock.patch('bigflow.build.operate.build_image'))",
          "847:         # when",
          "848:         cli([",
          "849:             'build-image',",
          "850:             '--vault-endpoint', 'my-vault-endpoint',",
          "851:             '--auth-method', 'vault',",
          "852:             '--vault-secret', 'secrett',",
          "853:             '--cache-from-image', 'xyz.org/foo:bar',",
          "854:             '--vault-endpoint-verify', verify,",
          "855:         ])",
          "857:         # then",
          "858:         build_image_mock.assert_called_once()",
          "859:         _, kwrgs = build_image_mock.call_args",
          "860:         self.assertEqual(kwrgs['cache_params'], BuildImageCacheParams(",
          "861:             auth_method=AuthorizationType.VAULT,",
          "862:             vault_endpoint='my-vault-endpoint',",
          "863:             vault_secret='secrett',",
          "864:             vault_endpoint_verify=expected_verify,",
          "865:             cache_from_image=['xyz.org/foo:bar'],",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "789:             verbose=False,",
          "790:             workflow=None,",
          "791:             config=None,",
          "792:         )",
          "794:         # then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "914:             vault_endpoint_verify=True,",
          "",
          "---------------"
        ],
        "test/test_deploy.py||test/test_deploy.py": [
          "File: test/test_deploy.py -> test/test_deploy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import os",
          "2: from unittest import mock",
          "3: from pathlib import Path",
          "6: import responses",
          "8: from bigflow.build.operate import create_image_version_file",
          "",
          "[Removed Lines]",
          "4: import unittest",
          "",
          "[Added Lines]",
          "5: import requests",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: from test.mixins import TempCwdMixin, BaseTestCase",
          "22: class DeployTestCase(TempCwdMixin, BaseTestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: TEST_VAULT_ENDPOINT = 'https://example.com/v1/gcp/token'",
          "22: TEST_VAULT_SECRET = 'secret'",
          "23: VAULT_TOKEN_HEADER = 'X-Vault-Token'",
          "24: TEST_VAULT_GET_HEADERS = {VAULT_TOKEN_HEADER: TEST_VAULT_SECRET}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:     @responses.activate",
          "94:     def test_should_retrieve_token_from_vault(self):",
          "95:         # given",
          "98:                       json={'data': {'token': 'token_value'}})",
          "100:         # when",
          "103:         # then",
          "104:         self.assertEqual(token, 'token_value')",
          "105:         self.assertEqual(len(responses.calls), 1)",
          "109:     @responses.activate",
          "110:     def test_should_raise_value_error_if_vault_problem_occurred_during_fetching_token(self):",
          "111:         # given",
          "115:         # then",
          "116:         with self.assertRaises(ValueError):",
          "117:             # when",
          "119:             self.assertEqual(len(responses.calls), 1)",
          "123:     @mock.patch('bigflow.commons.decode_version_number_from_file_name')",
          "124:     @mock.patch('bigflow.deploy.load_image_from_tar')",
          "",
          "[Removed Lines]",
          "96:         vault_endpoint = 'https://example.com/v1/gcp/token'",
          "97:         responses.add(responses.GET, vault_endpoint, status=200,",
          "101:         token = get_vault_token(vault_endpoint, 'secret')",
          "106:         self.assertEqual(responses.calls[0].request.url, 'https://example.com/v1/gcp/token')",
          "107:         self.assertEqual(responses.calls[0].request.headers['X-Vault-Token'], 'secret')",
          "112:         responses.add(responses.GET, 'https://example.com/v1/gcp/token', status=503)",
          "113:         vault_endpoint = 'https://example.com/v1/gcp/token'",
          "118:             get_vault_token(vault_endpoint, 'secret')",
          "120:             self.assertEqual(responses.calls[0].request.url, 'https://example.com/v1/gcp/token')",
          "121:             self.assertEqual(responses.calls[0].request.headers['X-Vault-Token'], 'secret')",
          "",
          "[Added Lines]",
          "101:         responses.add(responses.GET, TEST_VAULT_ENDPOINT, status=200,",
          "105:         token = get_vault_token(TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET)",
          "110:         self.assertEqual(responses.calls[0].request.url, TEST_VAULT_ENDPOINT)",
          "111:         self.assertEqual(responses.calls[0].request.headers[VAULT_TOKEN_HEADER], TEST_VAULT_SECRET)",
          "113:     @responses.activate",
          "114:     @mock.patch('requests.get', wraps=requests.get)",
          "115:     def test_should_retrieve_token_from_vault_verifying_endpoint_by_default(self, requests_get_mock):",
          "116:         # given",
          "117:         responses.add(responses.GET, TEST_VAULT_ENDPOINT, status=200,",
          "118:                       json={'data': {'token': 'token_value'}})",
          "120:         # when",
          "121:         token = get_vault_token(TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET)",
          "123:         # then",
          "124:         requests_get_mock.assert_called_with(TEST_VAULT_ENDPOINT, headers=TEST_VAULT_GET_HEADERS, verify=True)",
          "126:     @responses.activate",
          "127:     @mock.patch('requests.get', wraps=requests.get)",
          "128:     def test_should_retrieve_token_from_vault_verifying_endpoint(self, requests_get_mock):",
          "129:         # given",
          "130:         responses.add(responses.GET, TEST_VAULT_ENDPOINT, status=200,",
          "131:                       json={'data': {'token': 'token_value'}})",
          "133:         # when",
          "134:         token = get_vault_token(TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET, vault_endpoint_verify=True)",
          "136:         # then",
          "137:         requests_get_mock.assert_called_with(TEST_VAULT_ENDPOINT, headers=TEST_VAULT_GET_HEADERS, verify=True)",
          "139:     @responses.activate",
          "140:     @mock.patch('requests.get', wraps=requests.get)",
          "141:     def test_should_retrieve_token_from_vault_without_endpoint_verification(self, requests_get_mock):",
          "142:         # given",
          "143:         responses.add(responses.GET, TEST_VAULT_ENDPOINT, status=200,",
          "144:                       json={'data': {'token': 'token_value'}})",
          "146:         # when",
          "147:         token = get_vault_token(TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET, vault_endpoint_verify=False)",
          "149:         # then",
          "150:         requests_get_mock.assert_called_with(TEST_VAULT_ENDPOINT, headers=TEST_VAULT_GET_HEADERS, verify=False)",
          "152:     @responses.activate",
          "153:     @mock.patch('requests.get', wraps=requests.get)",
          "154:     def test_should_retrieve_token_from_vault_with_trusted_cert_path(self, requests_get_mock):",
          "155:         # given",
          "156:         responses.add(responses.GET, TEST_VAULT_ENDPOINT, status=200,",
          "157:                       json={'data': {'token': 'token_value'}})",
          "159:         # when",
          "160:         token = get_vault_token(TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET, vault_endpoint_verify='/path/to/trusted/certificate.pem')",
          "162:         # then",
          "163:         requests_get_mock.assert_called_with(TEST_VAULT_ENDPOINT, headers=TEST_VAULT_GET_HEADERS, verify='/path/to/trusted/certificate.pem')",
          "168:         responses.add(responses.GET, TEST_VAULT_ENDPOINT, status=503)",
          "173:             get_vault_token(TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET)",
          "175:             self.assertEqual(responses.calls[0].request.url, TEST_VAULT_ENDPOINT)",
          "176:             self.assertEqual(responses.calls[0].request.headers[VAULT_TOKEN_HEADER], TEST_VAULT_SECRET)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:             docker_repository='docker_repository',",
          "147:             image_id='image_id',",
          "148:             vault_endpoint=None,",
          "149:             vault_secret=None,",
          "150:         )",
          "151:         remove_docker_image_from_local_registry.assert_called_with('docker_repository:version123')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:             vault_endpoint_verify=None,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "232:             docker_repository=\"docker_repository\",",
          "233:             image_id=\"image123\",",
          "234:             auth_method=AuthorizationType.VAULT,",
          "237:         )",
          "239:         # then",
          "240:         authenticate_to_registry_mock.assert_called_once_with(",
          "243:         run_process_mock.assert_has_calls([",
          "244:             mock.call([\"docker\", \"tag\", \"image123\", \"docker_repository:latest\"]),",
          "",
          "[Removed Lines]",
          "235:             vault_endpoint=\"vault_endpoint\",",
          "236:             vault_secret=\"vault_secret\",",
          "241:             AuthorizationType.VAULT, \"vault_endpoint\", \"vault_secret\")",
          "",
          "[Added Lines]",
          "290:             vault_endpoint=TEST_VAULT_ENDPOINT,",
          "291:             vault_secret=TEST_VAULT_SECRET,",
          "296:             AuthorizationType.VAULT, TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET, None)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cddb3fdbda4104c38a057ed79fabf1dd7c45e6c5",
      "candidate_info": {
        "commit_hash": "cddb3fdbda4104c38a057ed79fabf1dd7c45e6c5",
        "repo": "allegro/bigflow",
        "commit_url": "https://github.com/allegro/bigflow/commit/cddb3fdbda4104c38a057ed79fabf1dd7c45e6c5",
        "files": [
          "test/test_deploy.py"
        ],
        "message": "Enabled TLS certificate verification in get_vault_token(): deploy module unit tests",
        "before_after_code_files": [
          "test/test_deploy.py||test/test_deploy.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/allegro/bigflow/pull/357"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test_deploy.py||test/test_deploy.py": [
          "File: test/test_deploy.py -> test/test_deploy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import os",
          "2: from unittest import mock",
          "3: from pathlib import Path",
          "6: import responses",
          "8: from bigflow.build.operate import create_image_version_file",
          "",
          "[Removed Lines]",
          "4: import unittest",
          "",
          "[Added Lines]",
          "5: import requests",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: from test.mixins import TempCwdMixin, BaseTestCase",
          "22: class DeployTestCase(TempCwdMixin, BaseTestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: TEST_VAULT_ENDPOINT = 'https://example.com/v1/gcp/token'",
          "22: TEST_VAULT_SECRET = 'secret'",
          "23: VAULT_TOKEN_HEADER = 'X-Vault-Token'",
          "24: TEST_VAULT_GET_HEADERS = {VAULT_TOKEN_HEADER: TEST_VAULT_SECRET}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:     @responses.activate",
          "94:     def test_should_retrieve_token_from_vault(self):",
          "95:         # given",
          "98:                       json={'data': {'token': 'token_value'}})",
          "100:         # when",
          "103:         # then",
          "104:         self.assertEqual(token, 'token_value')",
          "105:         self.assertEqual(len(responses.calls), 1)",
          "109:     @responses.activate",
          "110:     def test_should_raise_value_error_if_vault_problem_occurred_during_fetching_token(self):",
          "111:         # given",
          "115:         # then",
          "116:         with self.assertRaises(ValueError):",
          "117:             # when",
          "119:             self.assertEqual(len(responses.calls), 1)",
          "123:     @mock.patch('bigflow.commons.decode_version_number_from_file_name')",
          "124:     @mock.patch('bigflow.deploy.load_image_from_tar')",
          "",
          "[Removed Lines]",
          "96:         vault_endpoint = 'https://example.com/v1/gcp/token'",
          "97:         responses.add(responses.GET, vault_endpoint, status=200,",
          "101:         token = get_vault_token(vault_endpoint, 'secret')",
          "106:         self.assertEqual(responses.calls[0].request.url, 'https://example.com/v1/gcp/token')",
          "107:         self.assertEqual(responses.calls[0].request.headers['X-Vault-Token'], 'secret')",
          "112:         responses.add(responses.GET, 'https://example.com/v1/gcp/token', status=503)",
          "113:         vault_endpoint = 'https://example.com/v1/gcp/token'",
          "118:             get_vault_token(vault_endpoint, 'secret')",
          "120:             self.assertEqual(responses.calls[0].request.url, 'https://example.com/v1/gcp/token')",
          "121:             self.assertEqual(responses.calls[0].request.headers['X-Vault-Token'], 'secret')",
          "",
          "[Added Lines]",
          "101:         responses.add(responses.GET, TEST_VAULT_ENDPOINT, status=200,",
          "105:         token = get_vault_token(TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET)",
          "110:         self.assertEqual(responses.calls[0].request.url, TEST_VAULT_ENDPOINT)",
          "111:         self.assertEqual(responses.calls[0].request.headers[VAULT_TOKEN_HEADER], TEST_VAULT_SECRET)",
          "113:     @responses.activate",
          "114:     @mock.patch('requests.get', wraps=requests.get)",
          "115:     def test_should_retrieve_token_from_vault_verifying_endpoint_by_default(self, requests_get_mock):",
          "116:         # given",
          "117:         responses.add(responses.GET, TEST_VAULT_ENDPOINT, status=200,",
          "118:                       json={'data': {'token': 'token_value'}})",
          "120:         # when",
          "121:         token = get_vault_token(TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET)",
          "123:         # then",
          "124:         requests_get_mock.assert_called_with(TEST_VAULT_ENDPOINT, headers=TEST_VAULT_GET_HEADERS, verify=True)",
          "126:     @responses.activate",
          "127:     @mock.patch('requests.get', wraps=requests.get)",
          "128:     def test_should_retrieve_token_from_vault_verifying_endpoint(self, requests_get_mock):",
          "129:         # given",
          "130:         responses.add(responses.GET, TEST_VAULT_ENDPOINT, status=200,",
          "131:                       json={'data': {'token': 'token_value'}})",
          "133:         # when",
          "134:         token = get_vault_token(TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET, vault_endpoint_verify=True)",
          "136:         # then",
          "137:         requests_get_mock.assert_called_with(TEST_VAULT_ENDPOINT, headers=TEST_VAULT_GET_HEADERS, verify=True)",
          "139:     @responses.activate",
          "140:     @mock.patch('requests.get', wraps=requests.get)",
          "141:     def test_should_retrieve_token_from_vault_without_endpoint_verification(self, requests_get_mock):",
          "142:         # given",
          "143:         responses.add(responses.GET, TEST_VAULT_ENDPOINT, status=200,",
          "144:                       json={'data': {'token': 'token_value'}})",
          "146:         # when",
          "147:         token = get_vault_token(TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET, vault_endpoint_verify=False)",
          "149:         # then",
          "150:         requests_get_mock.assert_called_with(TEST_VAULT_ENDPOINT, headers=TEST_VAULT_GET_HEADERS, verify=False)",
          "152:     @responses.activate",
          "153:     @mock.patch('requests.get', wraps=requests.get)",
          "154:     def test_should_retrieve_token_from_vault_with_trusted_cert_path(self, requests_get_mock):",
          "155:         # given",
          "156:         responses.add(responses.GET, TEST_VAULT_ENDPOINT, status=200,",
          "157:                       json={'data': {'token': 'token_value'}})",
          "159:         # when",
          "160:         token = get_vault_token(TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET, vault_endpoint_verify='/path/to/trusted/certificate.pem')",
          "162:         # then",
          "163:         requests_get_mock.assert_called_with(TEST_VAULT_ENDPOINT, headers=TEST_VAULT_GET_HEADERS, verify='/path/to/trusted/certificate.pem')",
          "168:         responses.add(responses.GET, TEST_VAULT_ENDPOINT, status=503)",
          "173:             get_vault_token(TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET)",
          "175:             self.assertEqual(responses.calls[0].request.url, TEST_VAULT_ENDPOINT)",
          "176:             self.assertEqual(responses.calls[0].request.headers[VAULT_TOKEN_HEADER], TEST_VAULT_SECRET)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:             docker_repository='docker_repository',",
          "147:             image_id='image_id',",
          "148:             vault_endpoint=None,",
          "149:             vault_secret=None,",
          "150:         )",
          "151:         remove_docker_image_from_local_registry.assert_called_with('docker_repository:version123')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:             vault_endpoint_verify=None,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "232:             docker_repository=\"docker_repository\",",
          "233:             image_id=\"image123\",",
          "234:             auth_method=AuthorizationType.VAULT,",
          "237:         )",
          "239:         # then",
          "240:         authenticate_to_registry_mock.assert_called_once_with(",
          "243:         run_process_mock.assert_has_calls([",
          "244:             mock.call([\"docker\", \"tag\", \"image123\", \"docker_repository:latest\"]),",
          "",
          "[Removed Lines]",
          "235:             vault_endpoint=\"vault_endpoint\",",
          "236:             vault_secret=\"vault_secret\",",
          "241:             AuthorizationType.VAULT, \"vault_endpoint\", \"vault_secret\")",
          "",
          "[Added Lines]",
          "290:             vault_endpoint=TEST_VAULT_ENDPOINT,",
          "291:             vault_secret=TEST_VAULT_SECRET,",
          "296:             AuthorizationType.VAULT, TEST_VAULT_ENDPOINT, TEST_VAULT_SECRET, None)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b5afd35c6bb5e496bafb6492a052cb2e8f75c34",
      "candidate_info": {
        "commit_hash": "9b5afd35c6bb5e496bafb6492a052cb2e8f75c34",
        "repo": "allegro/bigflow",
        "commit_url": "https://github.com/allegro/bigflow/commit/9b5afd35c6bb5e496bafb6492a052cb2e8f75c34",
        "files": [
          "bigflow/deploy.py"
        ],
        "message": "Fixed get_vault_token logging",
        "before_after_code_files": [
          "bigflow/deploy.py||bigflow/deploy.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/allegro/bigflow/pull/357"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bigflow/deploy.py||bigflow/deploy.py": [
          "File: bigflow/deploy.py -> bigflow/deploy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:     headers = {'X-Vault-Token': vault_secret}",
          "278:     response = requests.get(vault_endpoint, headers=headers, verify=vault_endpoint_verify)",
          "280:     if response.status_code != 200:",
          "281:         logger.info(response.text)",
          "282:         raise ValueError(",
          "283:             'Could not get vault token, response code: {}'.format(",
          "284:                 response.status_code))",
          "287:     return response.json()['data']['token']",
          "",
          "[Removed Lines]",
          "286:     logger.info(\"get oauth token from %s status_code=%s\", vault_endpoint, response.status_code)",
          "",
          "[Added Lines]",
          "280:     logger.info(\"get oauth token from %s status_code=%s\", vault_endpoint, response.status_code)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19d11e71c342f91feeecff3366c007b42f05e42c",
      "candidate_info": {
        "commit_hash": "19d11e71c342f91feeecff3366c007b42f05e42c",
        "repo": "allegro/bigflow",
        "commit_url": "https://github.com/allegro/bigflow/commit/19d11e71c342f91feeecff3366c007b42f05e42c",
        "files": [
          "bigflow/__init__.py",
          "bigflow/_version.py",
          "bigflow/build/operate.py",
          "bigflow/cli.py",
          "bigflow/dataproc.py",
          "bigflow/log.py",
          "bigflow/workflow.py",
          "requirements.in",
          "requirements.txt",
          "requirements/base.txt",
          "requirements/dataproc_extras.txt",
          "requirements/log_extras.txt",
          "setup.py",
          "test/bf-projects/bf_simple_pytest/Dockerfile",
          "test/bf-projects/bf_simple_v10/Dockerfile",
          "test/bf-projects/bf_simple_v11/Dockerfile",
          "test/bf-projects/bf_simple_v12/Dockerfile",
          "test/bf-projects/example_project/Dockerfile",
          "test/buildd/bf-projects/bf_selfbuild_project/Dockerfile",
          "test/buildd/test_operate.py",
          "test/cli/test_cli.py",
          "test/cli/test_module/Unused1.py",
          "test/test_dataproc.py",
          "test/test_log.py",
          "test/test_workflow.py"
        ],
        "message": "freezing requirements, removing deprecated extras and more\n\n* removing deprecated dataproc and log modules with their dependencies\n* adding pip and pip-tools constraints in requirements.in\n* turning requirements.txt into requirements.in and generating requirements.txt using pip-compile\n* changing docker image chaching implementation - using BUILDKIT_INLINE_CACHE=1 only if cache properties are set\n* setting grpcio-status as <=1.48.2 to avoid problems with pip-compile on protobuf package\n* always installing typing-extensions>=3.7 to avoid clashes\n* changing test docker images from python:3.7 to python:3.7.15-slim to reduce image size\n* bumping to 1.5.0dev1",
        "before_after_code_files": [
          "bigflow/__init__.py||bigflow/__init__.py",
          "bigflow/_version.py||bigflow/_version.py",
          "bigflow/build/operate.py||bigflow/build/operate.py",
          "bigflow/cli.py||bigflow/cli.py",
          "bigflow/dataproc.py||bigflow/dataproc.py",
          "bigflow/log.py||bigflow/log.py",
          "bigflow/workflow.py||bigflow/workflow.py",
          "requirements.in||requirements.in",
          "setup.py||setup.py",
          "test/buildd/test_operate.py||test/buildd/test_operate.py",
          "test/cli/test_cli.py||test/cli/test_cli.py",
          "test/cli/test_module/Unused1.py||test/cli/test_module/Unused1.py",
          "test/test_dataproc.py||test/test_dataproc.py",
          "test/test_log.py||test/test_log.py",
          "test/test_workflow.py||test/test_workflow.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "bigflow/cli.py||bigflow/cli.py",
            "requirements.in||requirements.in",
            "test/cli/test_cli.py||test/cli/test_cli.py"
          ],
          "candidate": [
            "bigflow/cli.py||bigflow/cli.py",
            "requirements.in||requirements.in",
            "test/cli/test_cli.py||test/cli/test_cli.py"
          ]
        }
      },
      "candidate_diff": {
        "bigflow/__init__.py||bigflow/__init__.py": [
          "File: bigflow/__init__.py -> bigflow/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: @public(class_alias=True)",
          "34: class Config(bigflow.configuration.Config): ...",
          "",
          "[Removed Lines]",
          "36: # proactively try to initialize bigflow-specific logging",
          "37: # it is used to configure logging on pyspark/beam/etc workers",
          "38: try:",
          "39:     from bigflow.log import maybe_init_logging_from_env",
          "40: except ImportError:",
          "41:     pass  # logging is not installed?",
          "42: else:",
          "43:     maybe_init_logging_from_env()",
          "44:     del maybe_init_logging_from_env",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bigflow/_version.py||bigflow/_version.py": [
          "File: bigflow/_version.py -> bigflow/_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: __version__ = '1.4.2'",
          "",
          "[Added Lines]",
          "1: __version__ = '1.5.0dev1'",
          "",
          "---------------"
        ],
        "bigflow/build/operate.py||bigflow/build/operate.py": [
          "File: bigflow/build/operate.py -> bigflow/build/operate.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:             logger.debug(\"Add --cache-from=%s to `docker build`\", image)",
          "107:             cmd.extend([\"--cache-from\", image])",
          "113:     return bf_commons.run_process(cmd)",
          "",
          "[Removed Lines]",
          "109:     # noop when building backend is not a buildkit",
          "110:     logger.debug(\"Enable buildkit inline cache\")",
          "111:     cmd.extend([\"--build-arg\", \"BUILDKIT_INLINE_CACHE=1\"])",
          "",
          "[Added Lines]",
          "109:         # noop when building backend is not a buildkit",
          "110:         logger.debug(\"Enable buildkit inline cache\")",
          "111:         cmd.extend([\"--build-arg\", \"BUILDKIT_INLINE_CACHE=1\"])",
          "",
          "---------------"
        ],
        "bigflow/cli.py||bigflow/cli.py": [
          "File: bigflow/cli.py -> bigflow/cli.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:         print(f\"bf_env is : {os.environ.get('bf_env', None)}\")",
          "152: def execute_job(root_package: Path, workflow_id: str, job_id: str, runtime=None):",
          "153:     \"\"\"",
          "154:     Executes the job with the `workflow_id`, with job id `job_id`",
          "",
          "[Removed Lines]",
          "139: def _init_workflow_log(workflow: bf.Workflow):",
          "140:     if not workflow.log_config:",
          "141:         return",
          "143:     try:",
          "144:         import bigflow.log",
          "145:     except ImportError:",
          "146:         # `log` extras is not installed?",
          "147:         pass",
          "148:     else:",
          "149:         bigflow.log.init_workflow_logging(workflow)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:     @param runtime: str determine partition that will be used for write operations.",
          "157:     \"\"\"",
          "158:     w = find_workflow(root_package, workflow_id)",
          "160:     w.run_job(job_id, runtime)",
          "",
          "[Removed Lines]",
          "159:     _init_workflow_log(w)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:     @param runtime: str determine partition that will be used for write operations.",
          "168:     \"\"\"",
          "169:     w = find_workflow(root_package, workflow_id)",
          "171:     w.run(runtime)",
          "",
          "[Removed Lines]",
          "170:     _init_workflow_log(w)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "898:         _cli_project_version(parsed_args)",
          "899:     elif operation == 'release':",
          "900:         _cli_release(parsed_args)",
          "905:     elif operation == 'build-requirements':",
          "906:         _cli_build_requirements(parsed_args)",
          "907:     elif operation == 'codegen':",
          "",
          "[Removed Lines]",
          "901:     elif operation == 'logs':",
          "902:         _is_log_module_installed()",
          "903:         root_package = find_root_package(project_name, None)",
          "904:         cli_logs(root_package)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bigflow/dataproc.py||bigflow/dataproc.py": [
          "File: bigflow/dataproc.py -> bigflow/dataproc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bigflow/log.py||bigflow/log.py": [
          "File: bigflow/log.py -> bigflow/log.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bigflow/workflow.py||bigflow/workflow.py": [
          "File: bigflow/workflow.py -> bigflow/workflow.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:         definition: Union['Definition', List['Job']],",
          "169:         schedule_interval: str = DEFAULT_SCHEDULE_INTERVAL,",
          "170:         start_time_factory: Callable[[dt.datetime], dt.datetime] = daily_start_time,",
          "172:         depends_on_past: bool = True,",
          "173:         secrets: Iterable[str] = ()",
          "174:     ):",
          "",
          "[Removed Lines]",
          "171:         log_config: Optional['bigflow.log.LogConfigDict'] = None,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:         self.schedule_interval = schedule_interval",
          "177:         self.workflow_id = workflow_id",
          "178:         self.start_time_factory = start_time_factory",
          "180:         self.depends_on_past = depends_on_past",
          "181:         self.secrets = secrets",
          "",
          "[Removed Lines]",
          "179:         self.log_config = log_config",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "requirements.in||requirements.in": [
          "File: requirements.in -> requirements.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: -r requirements/base.txt",
          "2: -r requirements/bigquery_extras.txt",
          "3: -r requirements/dataflow_extras.txt",
          "4: pip>=22",
          "5: pip-tools>=6.9.0",
          "6: twine",
          "7: freezegun",
          "8: pexpect",
          "9: responses",
          "10: bs4",
          "12: pytest",
          "13: pytest-html",
          "14: pytest-cov",
          "15: pytest-github-actions-annotate-failures",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     install_requires=read_requirements(\"base.txt\"),",
          "38:     extras_require={",
          "39:         'bigquery': read_requirements(\"bigquery_extras.txt\"),",
          "42:         'dataflow': read_requirements(\"dataflow_extras.txt\"),",
          "43:         'base_frozen': read_requirements(\"base_frozen.txt\"),",
          "44:     },",
          "",
          "[Removed Lines]",
          "40:         'log': read_requirements(\"log_extras.txt\"),",
          "41:         'dataproc': read_requirements(\"dataproc_extras.txt\"),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/buildd/test_operate.py||test/buildd/test_operate.py": [
          "File: test/buildd/test_operate.py -> test/buildd/test_operate.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:         self.remove_docker_image_mock.assert_called_once_with(\"docker-repo:1.2\")",
          "45:         self.run_process_mock.assert_has_calls([",
          "47:             call(['docker', 'image', 'save', '-o', PurePosixPath('.image/image-1.2.tar'), '12345']),",
          "48:         ])",
          "",
          "[Removed Lines]",
          "46:             call(['docker', 'build', PurePosixPath('.'), '--tag', 'docker-repo:1.2', '--build-arg', 'BUILDKIT_INLINE_CACHE=1']),",
          "",
          "[Added Lines]",
          "46:             call(['docker', 'build', PurePosixPath('.'), '--tag', 'docker-repo:1.2']),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         self.remove_docker_image_mock.assert_not_called()",
          "90:         self.run_process_mock.assert_has_calls([",
          "92:         ])",
          "94:     def test_build_image_cache_image(self):",
          "",
          "[Removed Lines]",
          "91:             call(['docker', 'build', PurePosixPath('.'), '--tag', 'docker-repo:1.2', '--build-arg', 'BUILDKIT_INLINE_CACHE=1']),",
          "",
          "[Added Lines]",
          "91:             call(['docker', 'build', PurePosixPath('.'), '--tag', 'docker-repo:1.2']),",
          "",
          "---------------"
        ],
        "test/cli/test_cli.py||test/cli/test_cli.py": [
          "File: test/cli/test_cli.py -> test/cli/test_cli.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "954:         # then",
          "955:         self.assertEqual(cli_start_project_mock.call_count, 1)",
          "1025:     def test_should_raise_exception_if_no_workflow_with_log_config_found(self):",
          "1026:         root_package = TESTS_DIR / \"i_do_not_exist_at_all\"",
          "1027:         with self.assertRaises(Exception) as e:",
          "",
          "[Removed Lines]",
          "957:     @mock.patch('builtins.print')",
          "958:     def test_should_call_cli_logs_command(self, print_mock):",
          "959:         # when",
          "960:         root_package = TESTS_DIR / \"cli_logs_regular_workflows\"",
          "961:         cli_logs(root_package)",
          "963:         # then",
          "964:         print_mock.assert_called_with(",
          "965:             '\\n*************************LOGS LINK*************************\\nInfrastructure logs:'",
          "966:             '\\nsome-project-id: https://console.cloud.google.com/logs/query;query=%28'",
          "967:             'severity%3E%3D%22INFO%22%0A'",
          "968:             'resource.type%3D%22k8s_pod%22%0A%22'",
          "969:             'Error%3A%22%29%0AOR%0A%28'",
          "970:             'resource.type%3D%22dataflow_step%22%0A'",
          "971:             'log_name%3D%22projects%2Fsome-project-id%2Flogs%2Fdataflow.googleapis.com%252Fjob-message%22%0A'",
          "972:             'severity%3E%3D%22INFO%22%0A%29\\n'",
          "973:             'another-project-id: https://console.cloud.google.com/logs/query;query=%28'",
          "974:             'severity%3E%3D%22INFO%22%0A'",
          "975:             'resource.type%3D%22k8s_pod%22%0A%22'",
          "976:             'Error%3A%22%29%0AOR%0A%28'",
          "977:             'resource.type%3D%22dataflow_step%22%0A'",
          "978:             'log_name%3D%22projects%2Fanother-project-id%2Flogs%2Fdataflow.googleapis.com%252Fjob-message%22%0A'",
          "979:             'severity%3E%3D%22INFO%22%0A%29\\nWorkflow logs:\\nID_1: https://console.cloud.google.com/logs/query;query='",
          "980:             'logName%3D%22projects%2Fsome-project-id%2Flogs%2FID_1%22%0Alabels.workflow_id%3D%22ID_1%22%0A'",
          "981:             '\\nID_2: https://console.cloud.google.com/logs/query;query='",
          "982:             'logName%3D%22projects%2Fanother-project-id%2Flogs%2FID_2%22%0Alabels.workflow_id%3D%22ID_2%22%0A'",
          "983:             '\\n***********************************************************')",
          "985:     @mock.patch('builtins.print')",
          "986:     def test_should_call_cli_logs_and_use_log_name_if_provided(self, print_mock):",
          "987:         # when",
          "988:         root_package = TESTS_DIR / \"cli_logs_log_name_workflow\"",
          "989:         cli_logs(root_package)",
          "991:         # then",
          "992:         print_mock.assert_called_with(",
          "993:             '\\n*************************LOGS LINK*************************\\nInfrastructure logs:\\nsome-project-id: '",
          "994:             'https://console.cloud.google.com/logs/query;query=%28'",
          "995:             'severity%3E%3D%22INFO%22%0A'",
          "996:             'resource.type%3D%22k8s_pod%22%0A%22'",
          "997:             'Error%3A%22%29%0AOR%0A%28'",
          "998:             'resource.type%3D%22dataflow_step%22%0A'",
          "999:             'log_name%3D%22projects%2Fsome-project-id%2Flogs%2Fdataflow.googleapis.com%252Fjob-message%22%0A'",
          "1000:             'severity%3E%3D%22INFO%22%0A%29\\nWorkflow logs:\\nID_1: https://console.cloud.google.com/logs/query;query='",
          "1001:             'logName%3D%22projects%2Fsome-project-id%2Flogs%2Fname-log%22%0A'",
          "1002:             'labels.workflow_id%3D%22ID_1%22%0A\\n***********************************************************')",
          "1004:     @mock.patch('builtins.print')",
          "1005:     def test_should_deduplicate_projects_id(self, print_mock):",
          "1006:         # when",
          "1007:         root_package = TESTS_DIR / \"cli_logs_duplicated_workflows\"",
          "1008:         cli_logs(root_package)",
          "1010:         # then",
          "1011:         print_mock.assert_called_with(",
          "1012:             '\\n*************************LOGS LINK*************************\\nInfrastructure logs:'",
          "1013:             '\\nsome-project-id: https://console.cloud.google.com/logs/query;query=%28'",
          "1014:             'severity%3E%3D%22INFO%22%0A'",
          "1015:             'resource.type%3D%22k8s_pod%22%0A%22'",
          "1016:             'Error%3A%22%29%0AOR%0A%28'",
          "1017:             'resource.type%3D%22dataflow_step%22%0A'",
          "1018:             'log_name%3D%22projects%2Fsome-project-id%2Flogs%2Fdataflow.googleapis.com%252Fjob-message%22%0A'",
          "1019:             'severity%3E%3D%22INFO%22%0A%29\\nWorkflow logs:\\nID_1: https://console.cloud.google.com/logs/query;query='",
          "1020:             'logName%3D%22projects%2Fsome-project-id%2Flogs%2FID_1%22%0A'",
          "1021:             'labels.workflow_id%3D%22ID_1%22%0A\\nID_2: https://console.cloud.google.com/logs/query;query='",
          "1022:             'logName%3D%22projects%2Fsome-project-id%2Flogs%2FID_2%22%0Alabels.workflow_id%3D%22ID_2%22%0A'",
          "1023:             '\\n***********************************************************')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/cli/test_module/Unused1.py||test/cli/test_module/Unused1.py": [
          "File: test/cli/test_module/Unused1.py -> test/cli/test_module/Unused1.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     def execute(self, context):",
          "26:         started_jobs.append(self.id)",
          "36: workflow_3 = bf.Workflow(workflow_id=\"ID_3\", definition=[ExampleJob(\"J_ID_3\"), ExampleJob(\"J_ID_4\")])",
          "37: workflow_4 = bf.Workflow(workflow_id=\"ID_4\", definition=[ExampleJob(\"J_ID_5\")])",
          "",
          "[Removed Lines]",
          "28: workflow_1 = bf.Workflow(workflow_id=\"ID_1\", definition=[wait_for_requests.to_job(), wait_for_requests.to_job()], schedule_interval=\"@once\", log_config={",
          "29:         'gcp_project_id': 'some-project-id',",
          "30:         'log_level': 'INFO',",
          "31:     })",
          "32: workflow_2 = bf.Workflow(workflow_id=\"ID_2\", definition=[wait_for_requests.to_job()], log_config={",
          "33:         'gcp_project_id': 'another-project-id',",
          "34:         'log_level': 'INFO',",
          "35:     })",
          "",
          "[Added Lines]",
          "28: workflow_1 = bf.Workflow(workflow_id=\"ID_1\", definition=[wait_for_requests.to_job(), wait_for_requests.to_job()], schedule_interval=\"@once\")",
          "29: workflow_2 = bf.Workflow(workflow_id=\"ID_2\", definition=[wait_for_requests.to_job()])",
          "",
          "---------------"
        ],
        "test/test_dataproc.py||test/test_dataproc.py": [
          "File: test/test_dataproc.py -> test/test_dataproc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/test_log.py||test/test_log.py": [
          "File: test/test_log.py -> test/test_log.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/test_workflow.py||test/test_workflow.py": [
          "File: test/test_workflow.py -> test/test_workflow.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from collections import OrderedDict",
          "6: from unittest import TestCase, mock",
          "10: from bigflow.workflow import JobContext, Workflow, Definition, InvalidJobGraph, WorkflowJob",
          "",
          "[Removed Lines]",
          "8: from google.cloud import logging_v2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e956661f76907594e8c82e8fb0af76dbea2a0fc",
      "candidate_info": {
        "commit_hash": "7e956661f76907594e8c82e8fb0af76dbea2a0fc",
        "repo": "allegro/bigflow",
        "commit_url": "https://github.com/allegro/bigflow/commit/7e956661f76907594e8c82e8fb0af76dbea2a0fc",
        "files": [
          "CHANGELOG.md",
          "bigflow/_version.py",
          "bigflow/build/operate.py",
          "bigflow/cli.py",
          "bigflow/deploy.py"
        ],
        "message": "Enabled TLS certificate verification in get_vault_token()",
        "before_after_code_files": [
          "bigflow/_version.py||bigflow/_version.py",
          "bigflow/build/operate.py||bigflow/build/operate.py",
          "bigflow/cli.py||bigflow/cli.py",
          "bigflow/deploy.py||bigflow/deploy.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "bigflow/cli.py||bigflow/cli.py"
          ],
          "candidate": [
            "bigflow/cli.py||bigflow/cli.py"
          ]
        }
      },
      "candidate_diff": {
        "bigflow/_version.py||bigflow/_version.py": [
          "File: bigflow/_version.py -> bigflow/_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: __version__ = '1.5.4'",
          "",
          "[Added Lines]",
          "1: __version__ = '1.6.0.dev1'",
          "",
          "---------------"
        ],
        "bigflow/build/operate.py||bigflow/build/operate.py": [
          "File: bigflow/build/operate.py -> bigflow/build/operate.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:             auth_method=cache_params.auth_method or bigflow.deploy.AuthorizationType.LOCAL_ACCOUNT,",
          "96:             vault_endpoint=cache_params.vault_endpoint,",
          "97:             vault_secret=cache_params.vault_secret,",
          "98:         )",
          "100:         for image in (cache_params.cache_from_image or []):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:             vault_endpoint_verify=cache_params.vault_endpoint_verify",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:     vault_secret: str | None = None",
          "121:     cache_from_version: list[str] | None = None",
          "122:     cache_from_image: list[str] | None = None",
          "125: def build_image(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     vault_endpoint_verify: str | bool | None = None",
          "",
          "---------------"
        ],
        "bigflow/cli.py||bigflow/cli.py": [
          "File: bigflow/cli.py -> bigflow/cli.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: from importlib import import_module",
          "14: from pathlib import Path",
          "15: from types import ModuleType",
          "18: import fnmatch",
          "20: import bigflow as bf",
          "",
          "[Removed Lines]",
          "16: from typing import Tuple, Iterator",
          "17: from typing import Optional",
          "",
          "[Added Lines]",
          "16: from typing import Tuple, Iterator, Optional",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386: def _add_auth_parsers_arguments(parser):",
          "387:     parser.add_argument('-a', '--auth-method',",
          "388:                         type=bigflow.deploy.AuthorizationType,",
          "389:                         default='local_account',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:     class VaultEndpointVerifyAction(argparse.Action):",
          "387:         def __call__(self, parser, args, values, option_string=None):",
          "388:             if values in ['true', 'false']:",
          "389:                 setattr(args, self.dest, values == 'true')",
          "390:             else:",
          "391:                 setattr(args, self.dest, str(values))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "399:                              'Required if auth-method is vault. '",
          "400:                              'If not set, will be read from deployment_config.py.'",
          "401:                         )",
          "402:     parser.add_argument('-vs', '--vault-secret',",
          "403:                         type=str,",
          "404:                         help='Vault secret token. '",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:     parser.add_argument('-vev', '--vault-endpoint-verify',",
          "409:                         type=str,",
          "410:                         action=VaultEndpointVerifyAction,",
          "411:                         help='Can be \"true\", \"false\", a path to certificate PEM file or a path to directory with PEM files. '",
          "412:                              'Enables/disables vault endpoint TLS certificate verification. Enabled by default. '",
          "413:                              'Disabling makes execution vulnerable for MITM attacks - do it only when justified and in trusted environments. '",
          "414:                              'For details see: https://requests.readthedocs.io/en/latest/user/advanced/#ssl-cert-verification',",
          "415:                         dest='vault_endpoint_verify',",
          "416:                         default=True",
          "417:                         )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "514: def _resolve_property(args, property_name, ignore_value_error=False):",
          "515:     try:",
          "516:         cli_atr = getattr(args, property_name)",
          "518:             return cli_atr",
          "519:         else:",
          "520:             config = import_deployment_config(_resolve_deployment_config_path(args), property_name)",
          "",
          "[Removed Lines]",
          "517:         if cli_atr:",
          "",
          "[Added Lines]",
          "533:         if cli_atr or cli_atr is False:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "533:                        clear_dags_folder=args.clear_dags_folder,",
          "534:                        auth_method=args.auth_method,",
          "535:                        vault_endpoint=_resolve_vault_endpoint(args),",
          "536:                        vault_secret=vault_secret,",
          "537:                        project_id=_resolve_property(args, 'gcp_project_id')",
          "538:                        )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "552:                        vault_endpoint_verify=_resolve_property(args, 'vault_endpoint_verify', ignore_value_error=True),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "543:     docker_repository = _resolve_property(args, 'docker_repository')",
          "544:     vault_secret = _resolve_property(args, 'vault_secret', ignore_value_error=True)",
          "545:     vault_endpoint = _resolve_vault_endpoint(args)",
          "546:     image_tar_path = args.image_tar_path if args.image_tar_path else find_image_file()",
          "548:     bigflow.deploy.deploy_docker_image(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:     vault_endpoint_verify = _resolve_property(args, 'vault_endpoint_verify', ignore_value_error=True)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "550:         auth_method=args.auth_method,",
          "551:         docker_repository=docker_repository,",
          "552:         vault_endpoint=vault_endpoint,",
          "553:         vault_secret=vault_secret,",
          "554:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571:         vault_endpoint_verify=vault_endpoint_verify,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "579:         logger.debug(\"Image caching is requested - create build image cache params obj\")",
          "580:         vault_secret = _resolve_property(args, 'vault_secret', ignore_value_error=True)",
          "581:         vault_endpoint = _resolve_vault_endpoint(args)",
          "582:         return bigflow.build.operate.BuildImageCacheParams(",
          "583:             auth_method=args.auth_method,",
          "584:             vault_endpoint=vault_endpoint,",
          "585:             vault_secret=vault_secret,",
          "586:             cache_from_version=args.cache_from_version,",
          "587:             cache_from_image=args.cache_from_image,",
          "588:         )",
          "589:     else:",
          "590:         logger.debug(\"No caching is requested - so just disable it completly\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "601:         vault_endpoint_verify = _resolve_property(args, 'vault_endpoint_verify', ignore_value_error=True)",
          "608:             vault_endpoint_verify=vault_endpoint_verify",
          "",
          "---------------"
        ],
        "bigflow/deploy.py||bigflow/deploy.py": [
          "File: bigflow/deploy.py -> bigflow/deploy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     docker_repository: str,",
          "43:     auth_method: AuthorizationType = AuthorizationType.LOCAL_ACCOUNT,",
          "44:     vault_endpoint: T.Optional[str] = None,",
          "45:     vault_secret: T.Optional[str] = None,",
          "46: ) -> str:",
          "47:     if image_tar_path.endswith(\".toml\"):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     vault_endpoint_verify: str | bool | None = None,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:         docker_repository,",
          "54:         auth_method,",
          "55:         vault_endpoint,",
          "56:         vault_secret,",
          "57:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         vault_endpoint_verify,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:     docker_repository: str,",
          "63:     auth_method: AuthorizationType = AuthorizationType.LOCAL_ACCOUNT,",
          "64:     vault_endpoint: str | None = None,",
          "65:     vault_secret: str | None = None,",
          "66: ) -> str:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     vault_endpoint_verify: str | bool | None = None,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "81:         docker_repository=docker_repository,",
          "82:         auth_method=auth_method,",
          "83:         vault_endpoint=vault_endpoint,",
          "84:         vault_secret=vault_secret,",
          "85:         image_id=image_id,",
          "86:         build_ver=build_ver,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:         vault_endpoint_verify=vault_endpoint_verify,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92:     docker_repository: str,",
          "93:     auth_method: AuthorizationType = AuthorizationType.LOCAL_ACCOUNT,",
          "94:     vault_endpoint: str | None = None,",
          "95:     vault_secret: str | None = None,",
          "96: ) -> str:",
          "97:     build_ver = bf_commons.decode_version_number_from_file_name(Path(image_tar_path))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     vault_endpoint_verify: str | bool | None = None,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "105:             image_id=image_id,",
          "106:             auth_method=auth_method,",
          "107:             vault_endpoint=vault_endpoint,",
          "108:             vault_secret=vault_secret,",
          "109:         )",
          "110:     finally:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:             vault_endpoint_verify=vault_endpoint_verify,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "118:     image_id: str,",
          "119:     auth_method: AuthorizationType,",
          "120:     vault_endpoint: str | None = None,",
          "121:     vault_secret: str | None = None,",
          "122: ) -> str:",
          "123:     docker_image = docker_repository + \":\" + build_ver",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     vault_endpoint_verify: str | bool | None = None,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "125:     tag_image(image_id, docker_repository, \"latest\")",
          "127:     logger.info(\"Deploying docker image tag=%s auth_method=%s\", docker_image, auth_method)",
          "129:     bf_commons.run_process(['docker', 'push', docker_image])",
          "130:     bf_commons.run_process(['docker', 'push', docker_image_latest])",
          "",
          "[Removed Lines]",
          "128:     authenticate_to_registry(auth_method, vault_endpoint, vault_secret)",
          "",
          "[Added Lines]",
          "135:     authenticate_to_registry(auth_method, vault_endpoint, vault_secret, vault_endpoint_verify)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "136:         auth_method: AuthorizationType,",
          "137:         vault_endpoint: T.Optional[str] = None,",
          "138:         vault_secret: T.Optional[str] = None,",
          "139: ):",
          "140:     logger.info(\"Authenticating to registry with auth_method=%s\", auth_method)",
          "142:     if auth_method == AuthorizationType.LOCAL_ACCOUNT:",
          "143:         bf_commons.run_process(['gcloud', 'auth', 'configure-docker'])",
          "144:     elif auth_method == AuthorizationType.VAULT:",
          "146:         bf_commons.run_process(",
          "147:             ['docker', 'login', '-u', 'oauth2accesstoken', '--password-stdin', 'https://eu.gcr.io'],",
          "148:             input=oauthtoken,",
          "",
          "[Removed Lines]",
          "145:         oauthtoken = get_vault_token(vault_endpoint, vault_secret)",
          "",
          "[Added Lines]",
          "146:         vault_endpoint_verify: str | bool | None = None,",
          "153:         oauthtoken = get_vault_token(vault_endpoint, vault_secret, vault_endpoint_verify)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "156:         auth_method: AuthorizationType,",
          "157:         vault_endpoint: T.Optional[str] = None,",
          "158:         vault_secret: T.Optional[str] = None,",
          "159: ):",
          "160:     logger.info(\"Checking if images used in DAGs exist in the registry\")",
          "162:     missing_images = set()",
          "163:     for image in images:",
          "164:         found_images = bf_commons.run_process(['docker', 'manifest', 'inspect', image], check=False, verbose=False)",
          "",
          "[Removed Lines]",
          "161:     authenticate_to_registry(auth_method, vault_endpoint, vault_secret)",
          "",
          "[Added Lines]",
          "167:         vault_endpoint_verify: str | bool | None = None",
          "170:     authenticate_to_registry(auth_method, vault_endpoint, vault_secret, vault_endpoint_verify)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "189:         clear_dags_folder: bool = False,",
          "190:         auth_method: AuthorizationType = AuthorizationType.LOCAL_ACCOUNT,",
          "191:         vault_endpoint: T.Optional[str] = None,",
          "192:         vault_secret: T.Optional[str] = None,",
          "193:         gs_client: T.Optional[storage.Client] = None,",
          "194: ) -> str:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:         vault_endpoint_verify: str | bool | None = None,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "196:     if images:",
          "197:         check_images_exist(auth_method=auth_method,",
          "198:                            vault_endpoint=vault_endpoint,",
          "199:                            vault_secret=vault_secret,",
          "200:                            images=images)",
          "202:     logger.info(\"Deploying DAGs folder, auth_method=%s, clear_dags_folder=%s, dags_dir=%s\", auth_method, clear_dags_folder, dags_dir)",
          "205:     bucket = client.bucket(dags_bucket)",
          "207:     if clear_dags_folder:",
          "",
          "[Removed Lines]",
          "204:     client = gs_client or create_storage_client(auth_method, project_id, vault_endpoint, vault_secret)",
          "",
          "[Added Lines]",
          "209:                            vault_endpoint_verify=vault_endpoint_verify,",
          "215:     client = gs_client or create_storage_client(auth_method, project_id, vault_endpoint, vault_secret, vault_endpoint_verify)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "246:         project_id: str,",
          "247:         vault_endpoint: str,",
          "248:         vault_secret: str,",
          "249: ) -> storage.Client:",
          "250:     if auth_method == AuthorizationType.LOCAL_ACCOUNT:",
          "251:         return storage.Client(project=project_id)",
          "252:     elif auth_method == AuthorizationType.VAULT:",
          "254:         return storage.Client(project=project_id, credentials=credentials.Credentials(oauthtoken))",
          "255:     else:",
          "256:         raise ValueError(f\"unsupported auth_method: {auth_method!r}\")",
          "260:     if not vault_endpoint:",
          "261:         raise ValueError('vault_endpoint is required')",
          "262:     if not vault_secret:",
          "263:         raise ValueError('vault_secret is required')",
          "265:     headers = {'X-Vault-Token': vault_secret}",
          "268:     if response.status_code != 200:",
          "269:         logger.info(response.text)",
          "",
          "[Removed Lines]",
          "253:         oauthtoken = get_vault_token(vault_endpoint, vault_secret)",
          "259: def get_vault_token(vault_endpoint: str, vault_secret: str) -> str:",
          "266:     response = requests.get(vault_endpoint, headers=headers, verify=False)",
          "",
          "[Added Lines]",
          "260:         vault_endpoint_verify: str | bool | None = None",
          "265:         oauthtoken = get_vault_token(vault_endpoint, vault_secret, vault_endpoint_verify)",
          "271: def get_vault_token(vault_endpoint: str, vault_secret: str, vault_endpoint_verify: str | bool | None = True) -> str:",
          "278:     response = requests.get(vault_endpoint, headers=headers, verify=vault_endpoint_verify)",
          "",
          "---------------"
        ]
      }
    }
  ]
}