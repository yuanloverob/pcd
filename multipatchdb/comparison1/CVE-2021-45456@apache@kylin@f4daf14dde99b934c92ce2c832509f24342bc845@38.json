{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8a44cac482bbf09843a26cf0663e0480954fbec6",
      "candidate_info": {
        "commit_hash": "8a44cac482bbf09843a26cf0663e0480954fbec6",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/8a44cac482bbf09843a26cf0663e0480954fbec6",
        "files": [
          "webapp/app/js/config.js",
          "webapp/app/js/controllers/auth.js",
          "webapp/app/partials/cubes/cubes.html"
        ],
        "message": "Kylin 5193 fix login page redirection (#1887)\n\n* KYLIN-5193, fix login page redirection\n\n* minor, add refresh cube list button then not need to refresh whole page to update cube list",
        "before_after_code_files": [
          "webapp/app/js/config.js||webapp/app/js/config.js",
          "webapp/app/js/controllers/auth.js||webapp/app/js/controllers/auth.js",
          "webapp/app/partials/cubes/cubes.html||webapp/app/partials/cubes/cubes.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "webapp/app/js/config.js||webapp/app/js/config.js": [
          "File: webapp/app/js/config.js -> webapp/app/js/config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     $locationProvider.html5Mode(true);",
          "79:       return function (promise) {",
          "80:         return promise.then(",
          "",
          "[Removed Lines]",
          "78:     $httpProvider.responseInterceptors.push(function ($rootScope, $q) {",
          "",
          "[Added Lines]",
          "78:     $httpProvider.responseInterceptors.push(function ($rootScope, $q, $location) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:           },",
          "86:           function (response) {",
          "88:               var deferred = $q.defer(),",
          "89:                 req = {",
          "90:                   config: response.config,",
          "",
          "[Removed Lines]",
          "87:             if (response.status === 401 && !(response.config.url.indexOf(\"user/authentication\") !== -1 && response.config.method === 'POST')) {",
          "",
          "[Added Lines]",
          "87:             var isLogin = $location.$$path === \"/login\"",
          "88:             if (response.status === 401 && !(response.config.url.indexOf(\"user/authentication\") !== -1 && response.config.method === 'POST') && !isLogin) {",
          "",
          "---------------"
        ],
        "webapp/app/js/controllers/auth.js||webapp/app/js/controllers/auth.js": [
          "File: webapp/app/js/controllers/auth.js -> webapp/app/js/controllers/auth.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     });",
          "95:   };",
          "97:   $scope.init();",
          "98: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:   AuthenticationService.ping(function () {",
          "98:     $location.path(UserService.getHomePage());",
          "99:   });",
          "",
          "---------------"
        ],
        "webapp/app/partials/cubes/cubes.html||webapp/app/partials/cubes/cubes.html": [
          "File: webapp/app/partials/cubes/cubes.html -> webapp/app/partials/cubes/cubes.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:             <input type=\"text\" placeholder=\"Search by name\" class=\"nav-search-input\" ng-model=\"listParams.cubeName\" />",
          "32:             <i class=\"ace-icon fa fa-search blue\" ng-click=\"cubeList.removeAll();reload()\"></i>",
          "33:           </span>",
          "34:       </form>",
          "35:       </div>",
          "36:     </div>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:         <!--Refresh cube list-->",
          "35:         <button class=\"btn btn-success btn-xs\" style=\"margin-left: 10px\" ng-click=\"cubeList.removeAll();reload()\"><i class=\"fa fa-refresh\"></i></button>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27d9ee032751aee36a1f4b6d6e615f41ac94eed2",
      "candidate_info": {
        "commit_hash": "27d9ee032751aee36a1f4b6d6e615f41ac94eed2",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/27d9ee032751aee36a1f4b6d6e615f41ac94eed2",
        "files": [
          "kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query00.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query01.sql",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala",
          "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java"
        ],
        "message": "KYLIN-5040 Add rule for exactly match cuboid",
        "before_after_code_files": [
          "kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query00.sql||kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query00.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query01.sql||kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query01.sql",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala",
          "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java||kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query00.sql||kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query00.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query00.sql -> kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query00.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: select CAL_DT,LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD,",
          "20:        sum(price) as GMV, count(1) as TRANS_CNT,",
          "21:        min(price) as minP, max(price) as maxP",
          "22: from test_kylin_fact",
          "23: group by CAL_DT,LSTG_FORMAT_NAME,SLR_SEGMENT_CD,LSTG_SITE_ID",
          "24: ;{\"scanRowCount\":9287,\"scanBytes\":0,\"scanFiles\":2,\"cuboidId\":[276480],\"exactlyMatched\":[true]}",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query01.sql||kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query01.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query01.sql -> kylin-it/src/test/resources/query/sql_exactly_agg_multi_segment/query01.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: select LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD,",
          "20:        sum(price) as GMV, count(1) as TRANS_CNT,",
          "21:        min(price) as minP, max(price) as maxP",
          "22: from test_kylin_fact",
          "23: group by LSTG_FORMAT_NAME,SLR_SEGMENT_CD,LSTG_SITE_ID",
          "24: ;{\"scanRowCount\":537,\"scanBytes\":0,\"scanFiles\":2,\"cuboidId\":[14336],\"exactlyMatched\":[false]}",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala": [
          "File: kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala -> kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.apache.calcite.rel.core.AggregateCall",
          "23: import org.apache.calcite.sql.SqlKind",
          "24: import org.apache.kylin.common.KylinConfig",
          "26: import org.apache.kylin.query.relnode.{KylinAggregateCall, OLAPAggregateRel}",
          "27: import org.apache.kylin.query.runtime.RuntimeHelper",
          "28: import org.apache.kylin.query.SchemaProcessor",
          "",
          "[Removed Lines]",
          "25: import org.apache.kylin.metadata.model.FunctionDesc",
          "",
          "[Added Lines]",
          "25: import org.apache.kylin.cube.CubeInstance",
          "26: import org.apache.kylin.metadata.model.{FunctionDesc, PartitionDesc, SegmentStatusEnum, TblColRef}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:     }",
          "245:     val groupByCols = rel.getGroups.asScala.map(_.getIdentity).toSet",
          "246:     if (groupByCols.isEmpty) return false",
          "247:     val cuboidDims = cuboid.getColumns.asScala.map(_.getIdentity).toSet",
          "248:     groupByCols.equals(cuboidDims)",
          "249:   }",
          "250: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:     val f = olapContext.realization.asInstanceOf[CubeInstance].getSegments(SegmentStatusEnum.READY).size()",
          "249:     if (!groupByContainsPartition(groupByCols, cuboid.getCubeDesc.getModel.getPartitionDesc) &&",
          "250:       olapContext.realization.asInstanceOf[CubeInstance].getSegments(SegmentStatusEnum.READY).size() != 1) {",
          "251:       return false",
          "252:     }",
          "257:   def groupByContainsPartition(groupByCols: Set[String], partitionDesc: PartitionDesc): Boolean = {",
          "258:     partitionDesc != null && partitionDesc.getPartitionDateColumnRef != null && groupByCols.contains(partitionDesc.getPartitionDateColumnRef.getIdentity)",
          "259:   }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java||kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java": [
          "File: kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java -> kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:         report(results);",
          "106:     }",
          "108:     private List<Pair<String, Throwable>> execAndGetResults(List<QueryCallable> tasks)",
          "109:             throws InterruptedException, java.util.concurrent.ExecutionException {",
          "110:         ThreadPoolExecutor executor = new ThreadPoolExecutor(9//",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:     @Test",
          "109:     public void exactlyMatchCuboidMultiSegmentTest() throws Exception {",
          "110:         final KylinConfig config = KylinConfig.getInstanceFromEnv();",
          "111:         buildSegments(\"ci_left_join_cube\", new SegmentRange.TSRange(dateToLong(\"2012-01-01\"), dateToLong(\"2013-01-01\")),",
          "112:                 new SegmentRange.TSRange(dateToLong(\"2013-01-01\"), dateToLong(\"2015-01-01\")));",
          "114:         populateSSWithCSVData(config, getProject(), KylinSparkEnv.getSparkSession());",
          "116:         List<QueryCallable> tasks = new ArrayList<>();",
          "117:         tasks.add(new QueryCallable(CompareLevel.SAME, \"left\", \"sql_exactly_agg\"));",
          "118:         List<Pair<String, Throwable>> results = execAndGetResults(tasks);",
          "119:         Assert.assertEquals(results.size(), tasks.size());",
          "120:         report(results);",
          "121:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0cf9e3d5951e880f04033efa599059237deba766",
      "candidate_info": {
        "commit_hash": "0cf9e3d5951e880f04033efa599059237deba766",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/0cf9e3d5951e880f04033efa599059237deba766",
        "files": [
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala"
        ],
        "message": "KYLIN-4887 Segment pruner support string type partition col in spark query engine",
        "before_after_code_files": [
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala": [
          "File: kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala -> kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:         val id = layoutEntity.getOrderedDimensions.asScala.values.find(column => column.columnName.equals(ref.getName))",
          "134:         if (id.isDefined && (ref.getType.isDateTimeFamily || ref.getType.isStringFamily)) {",
          "138:           dataSchema.filter(_.name == String.valueOf(id.get.id))",
          "140:         } else {",
          "141:           Seq.empty",
          "142:         }",
          "",
          "[Removed Lines]",
          "135:           if (ref.getType.isDateTimeFamily) {",
          "136:             pattern = desc.getPartitionDateFormat",
          "137:           }",
          "",
          "[Added Lines]",
          "135:           pattern = desc.getPartitionDateFormat",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9797e4c339d041c344a25a0b92c3763bd5b0e184",
      "candidate_info": {
        "commit_hash": "9797e4c339d041c344a25a0b92c3763bd5b0e184",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/9797e4c339d041c344a25a0b92c3763bd5b0e184",
        "files": [
          "build/bin/kylin.sh",
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-common/src/main/java/org/apache/kylin/common/QueryContext.java",
          "core-common/src/main/java/org/apache/kylin/common/annotation/ConfigTag.java",
          "core-common/src/main/resources/kylin-defaults.properties",
          "core-dictionary/DEPRECATED_MODULE",
          "datasource-sdk/DEPRECATED_MODULE",
          "docker/conf/kylin/kylin.properties",
          "docker/dockerfile/standalone/conf/bin/kylin.sh",
          "docker/dockerfile/standalone/conf/kylin/kylin.properties",
          "engine-flink/DEPRECATED_MODULE",
          "engine-mr/DEPRECATED_MODULE",
          "engine-spark/DEPRECATED_MODULE",
          "examples/sample_cube/template/cube_desc/kylin_sales_cube.json",
          "examples/test_case_data/file_prunning/kylin.properties",
          "examples/test_case_data/localmeta/kylin.properties",
          "examples/test_case_data/parquet_test/kylin.properties",
          "examples/test_case_data/sandbox/kylin.properties",
          "kylin-it/DEPRECATED_MODULE",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/JobMetricsUtils.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala",
          "source-jdbc/DEPRECATED_MODULE",
          "source-kafka/DEPRECATED_MODULE",
          "storage-hbase/DEPRECATED_MODULE",
          "storage-stream/DEPRECATED_MODULE",
          "stream-coordinator/DEPRECATED_MODULE",
          "stream-core/DEPRECATED_MODULE",
          "stream-receiver/DEPRECATED_MODULE",
          "stream-source-kafka/DEPRECATED_MODULE"
        ],
        "message": "Refine Kylin Config (#1726)\n\n* Add deprecated notice for some maven modules\n\n* remove duplicated log\n\n* refine kylin config\n\n* refine sample cube desc\n\n* Fix config entry rename\n\n* add switch for sparder canary tool",
        "before_after_code_files": [
          "build/bin/kylin.sh||build/bin/kylin.sh",
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-common/src/main/java/org/apache/kylin/common/QueryContext.java||core-common/src/main/java/org/apache/kylin/common/QueryContext.java",
          "core-common/src/main/java/org/apache/kylin/common/annotation/ConfigTag.java||core-common/src/main/java/org/apache/kylin/common/annotation/ConfigTag.java",
          "core-common/src/main/resources/kylin-defaults.properties||core-common/src/main/resources/kylin-defaults.properties",
          "docker/conf/kylin/kylin.properties||docker/conf/kylin/kylin.properties",
          "docker/dockerfile/standalone/conf/bin/kylin.sh||docker/dockerfile/standalone/conf/bin/kylin.sh",
          "docker/dockerfile/standalone/conf/kylin/kylin.properties||docker/dockerfile/standalone/conf/kylin/kylin.properties",
          "examples/test_case_data/file_prunning/kylin.properties||examples/test_case_data/file_prunning/kylin.properties",
          "examples/test_case_data/localmeta/kylin.properties||examples/test_case_data/localmeta/kylin.properties",
          "examples/test_case_data/parquet_test/kylin.properties||examples/test_case_data/parquet_test/kylin.properties",
          "examples/test_case_data/sandbox/kylin.properties||examples/test_case_data/sandbox/kylin.properties",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/JobMetricsUtils.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/JobMetricsUtils.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "build/bin/kylin.sh||build/bin/kylin.sh": [
          "File: build/bin/kylin.sh -> build/bin/kylin.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:   <pool name=\"query_pushdown\">",
          "213:     <schedulingMode>FAIR</schedulingMode>",
          "214:     <weight>1</weight>",
          "216:   </pool>",
          "217:   <pool name=\"heavy_tasks\">",
          "218:     <schedulingMode>FAIR</schedulingMode>",
          "",
          "[Removed Lines]",
          "215:     <minShare>1</minShare>",
          "",
          "[Added Lines]",
          "215:     <minShare>0</minShare>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:   <pool name=\"vip_tasks\">",
          "228:     <schedulingMode>FAIR</schedulingMode>",
          "229:     <weight>15</weight>",
          "231:   </pool>",
          "232: </allocations>",
          "233: EOL",
          "",
          "[Removed Lines]",
          "230:     <minShare>1</minShare>",
          "",
          "[Added Lines]",
          "230:     <minShare>0</minShare>",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:     public boolean isUseForestTrieDictionary() {",
          "570:         return Boolean.parseBoolean(getOptional(\"kylin.dictionary.use-forest-trie\", TRUE));",
          "571:     }",
          "573:     public long getTrieDictionaryForestMaxTrieSizeMB() {",
          "574:         return Integer.parseInt(getOptional(\"kylin.dictionary.forest-trie-max-mb\", \"500\"));",
          "575:     }",
          "577:     public long getCachedDictMaxEntrySize() {",
          "578:         return Long.parseLong(getOptional(\"kylin.dictionary.max-cache-entry\", \"3000\"));",
          "579:     }",
          "581:     public int getCachedDictMaxSize() {",
          "582:         return Integer.parseInt(getOptional(\"kylin.dictionary.max-cache-size\", \"-1\"));",
          "583:     }",
          "585:     public boolean isGrowingDictEnabled() {",
          "586:         return Boolean.parseBoolean(this.getOptional(\"kylin.dictionary.growing-enabled\", FALSE));",
          "587:     }",
          "589:     public boolean isDictResuable() {",
          "590:         return Boolean.parseBoolean(this.getOptional(\"kylin.dictionary.resuable\", FALSE));",
          "591:     }",
          "593:     public long getCachedDictionaryMaxEntrySize() {",
          "594:         return Long.parseLong(getOptional(\"kylin.dictionary.cached-dict-max-cache-entry\", \"50000\"));",
          "595:     }",
          "597:     public int getAppendDictEntrySize() {",
          "598:         return Integer.parseInt(getOptional(\"kylin.dictionary.append-entry-size\", \"10000000\"));",
          "599:     }",
          "601:     public int getAppendDictMaxVersions() {",
          "602:         return Integer.parseInt(getOptional(\"kylin.dictionary.append-max-versions\", \"3\"));",
          "603:     }",
          "605:     public int getAppendDictVersionTTL() {",
          "606:         return Integer.parseInt(getOptional(\"kylin.dictionary.append-version-ttl\", \"259200000\"));",
          "607:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "574:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "579:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "584:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "589:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "594:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "599:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "604:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "609:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "614:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670:         return getOptional(\"kylin.dictionary.mr-hive.table.suffix\", \"_global_dict\");",
          "671:     }",
          "",
          "[Removed Lines]",
          "679:     public int getGlobalDictV2MinHashPartitions() {",
          "680:         return Integer.parseInt(getOptional(\"kylin.dictionary.globalV2-min-hash-partitions\", \"10\"));",
          "681:     }",
          "683:     public int getGlobalDictV2ThresholdBucketSize() {",
          "684:         return Integer.parseInt(getOptional(\"kylin.dictionary.globalV2-threshold-bucket-size\", \"500000\"));",
          "685:     }",
          "687:     public int getDictionarySliceEvicationThreshold() {",
          "688:         return Integer.parseInt(getOptional(\"kylin.dictionary.slice.eviction.threshold\", \"5\"));",
          "689:     }",
          "691:     public double getGlobalDictV2InitLoadFactor() {",
          "692:         return Double.parseDouble(getOptional(\"kylin.dictionary.globalV2-init-load-factor\", \"0.5\"));",
          "693:     }",
          "695:     public double getGlobalDictV2BucketOverheadFactor() {",
          "696:         return Double.parseDouble(getOptional(\"kylin.dictionary.globalV2-bucket-overhead-factor\", \"1.5\"));",
          "697:     }",
          "699:     public int getGlobalDictV2MaxVersions() {",
          "700:         return Integer.parseInt(getOptional(\"kylin.dictionary.globalV2-max-versions\", \"3\"));",
          "701:     }",
          "703:     public long getGlobalDictV2VersionTTL() {",
          "704:         return Long.parseLong(getOptional(\"kylin.dictionary.globalV2-version-ttl\", \"259200000\"));",
          "705:     }",
          "707:     public boolean isCheckGlobalDictV2() {",
          "708:         return Boolean.parseBoolean(getOptional(\"kylin.dictionary.globalV2-check\", \"true\"));",
          "709:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1110:     public String getHiveUrl() {",
          "1111:         return getOptional(\"kylin.source.hive.connection-url\", \"\");",
          "1112:     }",
          "",
          "[Removed Lines]",
          "1109:     @Deprecated",
          "",
          "[Added Lines]",
          "1082:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1118:     public String getHiveUser() {",
          "1119:         return getOptional(\"kylin.source.hive.connection-user\", \"\");",
          "1120:     }",
          "",
          "[Removed Lines]",
          "1117:     @Deprecated",
          "",
          "[Added Lines]",
          "1090:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1126:     public String getHivePassword() {",
          "1127:         return getOptional(\"kylin.source.hive.connection-password\", \"\");",
          "1128:     }",
          "",
          "[Removed Lines]",
          "1125:     @Deprecated",
          "",
          "[Added Lines]",
          "1098:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1444:         return Integer.parseInt(this.getOptional(\"kylin.storage.hbase.max-visit-scanrange\", \"1000000\"));",
          "1445:     }",
          "1448:     public String getDefaultIGTStorage() {",
          "1449:         return getOptional(\"kylin.storage.hbase.gtstorage\",",
          "1450:                 \"org.apache.kylin.storage.hbase.cube.v2.CubeHBaseEndpointRPC\");",
          "",
          "[Removed Lines]",
          "1447:     @ConfigTag(ConfigTag.Tag.UNCATEGORIZED)",
          "",
          "[Added Lines]",
          "1420:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1515:         return Integer.parseInt(getOptional(\"kylin.storage.hbase.replication-scope\", \"0\"));",
          "1516:     }",
          "1519:     public boolean cleanStorageAfterDelOperation() {",
          "1520:         return Boolean.parseBoolean(getOptional(\"kylin.storage.clean-after-delete-operation\", FALSE));",
          "1521:     }",
          "",
          "[Removed Lines]",
          "1518:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1540:         return Integer.parseInt(getOptional(\"kylin.engine.default\", \"6\"));",
          "1541:     }",
          "1548:     public String getKylinJobJarPath() {",
          "1549:         final String jobJar = getOptional(KYLIN_ENGINE_MR_JOB_JAR);",
          "1550:         if (StringUtils.isNotEmpty(jobJar)) {",
          "",
          "[Removed Lines]",
          "1544:     public String getSparkStandaloneMasterWebUI() {",
          "1545:         return getOptional(\"kylin.engine.spark.standalone.master.httpUrl\", \"\");",
          "1546:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1683:     }",
          "1689:     public String getHadoopConfDir() {",
          "1690:         return getOptional(\"kylin.env.hadoop-conf-dir\", \"\");",
          "1691:     }",
          "1705:     public String getSparkAdditionalJars() {",
          "1706:         return getOptional(\"kylin.engine.spark.additional-jars\", \"\");",
          "1707:     }",
          "1709:     public String getFlinkAdditionalJars() {",
          "1710:         return getOptional(\"kylin.engine.flink.additional-jars\", \"\");",
          "1711:     }",
          "1713:     public float getSparkRDDPartitionCutMB() {",
          "1714:         return Float.parseFloat(getOptional(\"kylin.engine.spark.rdd-partition-cut-mb\", \"10.0\"));",
          "1715:     }",
          "1717:     public float getFlinkPartitionCutMB() {",
          "1718:         return Float.parseFloat(getOptional(\"kylin.engine.flink.partition-cut-mb\", \"10.0\"));",
          "1719:     }",
          "1721:     public int getSparkMinPartition() {",
          "1722:         return Integer.parseInt(getOptional(\"kylin.engine.spark.min-partition\", \"1\"));",
          "1723:     }",
          "1725:     public int getFlinkMinPartition() {",
          "1726:         return Integer.parseInt(getOptional(\"kylin.engine.flink.min-partition\", \"1\"));",
          "1727:     }",
          "1729:     public int getSparkMaxPartition() {",
          "1730:         return Integer.parseInt(getOptional(\"kylin.engine.spark.max-partition\", \"5000\"));",
          "1731:     }",
          "1733:     public int getFlinkMaxPartition() {",
          "1734:         return Integer.parseInt(getOptional(\"kylin.engine.flink.max-partition\", \"5000\"));",
          "1735:     }",
          "1737:     public String getSparkStorageLevel() {",
          "1738:         return getOptional(\"kylin.engine.spark.storage-level\", \"MEMORY_AND_DISK_SER\");",
          "1739:     }",
          "1741:     public boolean isSparkSanityCheckEnabled() {",
          "1742:         return Boolean.parseBoolean(getOptional(\"kylin.engine.spark.sanity-check-enabled\", FALSE));",
          "1743:     }",
          "1745:     public boolean isSparkFactDistinctEnable() {",
          "1746:         return Boolean.parseBoolean(getOptional(\"kylin.engine.spark-fact-distinct\", \"false\"));",
          "1747:     }",
          "1749:     public boolean isSparkUHCDictionaryEnable() {",
          "1750:         return Boolean.parseBoolean(getOptional(\"kylin.engine.spark-udc-dictionary\", \"false\"));",
          "1751:     }",
          "1753:     public boolean isSparkCardinalityEnabled() {",
          "1754:         return Boolean.parseBoolean(getOptional(\"kylin.engine.spark-cardinality\", \"false\"));",
          "1755:     }",
          "1757:     public int getSparkOutputMaxSize() {",
          "1758:         return Integer.valueOf(getOptional(\"kylin.engine.spark.output.max-size\", \"10485760\"));",
          "1759:     }",
          "1761:     public boolean isSparkDimensionDictionaryEnabled() {",
          "1762:         return Boolean.parseBoolean(getOptional(\"kylin.engine.spark-dimension-dictionary\", \"false\"));",
          "1763:     }",
          "1765:     public boolean isFlinkSanityCheckEnabled() {",
          "1766:         return Boolean.parseBoolean(getOptional(\"kylin.engine.flink.sanity-check-enabled\", FALSE));",
          "1767:     }",
          "1769:     public boolean isSparCreateHiveTableViaSparkEnable() {",
          "1770:         return Boolean.parseBoolean(getOptional(\"kylin.engine.spark-create-table-enabled\", \"false\"));",
          "1771:     }",
          "",
          "[Removed Lines]",
          "1696:     public String getSparderAppName() {",
          "1697:         String customSparderAppName = getOptional(\"kylin.query.sparder-context.app-name\", \"\");",
          "1698:         if (StringUtils.isEmpty(customSparderAppName)) {",
          "1699:             customSparderAppName =",
          "1700:                     \"sparder_on_\" + getServerRestAddress().replaceAll(\":\", \"-\");",
          "1701:         }",
          "1702:         return customSparderAppName;",
          "1703:     }",
          "",
          "[Added Lines]",
          "1656:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1661:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1666:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1671:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1676:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1681:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1686:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1691:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1696:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1701:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1706:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1711:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1716:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1721:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1726:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1731:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1736:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1741:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1777:     public boolean isLivyEnabled() {",
          "1778:         return Boolean.parseBoolean(getOptional(\"kylin.engine.livy-conf.livy-enabled\", FALSE));",
          "1779:     }",
          "1781:     public String getLivyRestApiBacktick() {",
          "1782:         return getOptional(\"kylin.engine.livy.backtick.quote\", \"\");",
          "1783:     }",
          "1785:     public String getLivyUrl() {",
          "1786:         return getOptional(\"kylin.engine.livy-conf.livy-url\");",
          "1787:     }",
          "1789:     public Map<String, String> getLivyKey() {",
          "1790:         return getPropertiesByPrefix(\"kylin.engine.livy-conf.livy-key.\");",
          "1791:     }",
          "1793:     public Map<String, String> getLivyArr() {",
          "1794:         return getPropertiesByPrefix(\"kylin.engine.livy-conf.livy-arr.\");",
          "1795:     }",
          "1797:     public Map<String, String> getLivyMap() {",
          "1798:         return getPropertiesByPrefix(\"kylin.engine.livy-conf.livy-map.\");",
          "1799:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1750:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1755:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1760:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1765:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1770:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1775:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1805:     public boolean isDictionaryEnumeratorEnabled() {",
          "1806:         return Boolean.parseBoolean(getOptional(\"kylin.query.enable-dict-enumerator\", FALSE));",
          "1807:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1784:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1871:         return Boolean.parseBoolean(getOptional(\"kylin.query.stream-aggregate-enabled\", TRUE));",
          "1872:     }",
          "1878:     public boolean isProjectIsolationEnabled() {",
          "1879:         return Boolean.parseBoolean(getOptional(\"kylin.storage.project-isolation-enable\", TRUE));",
          "1880:     }",
          "",
          "[Removed Lines]",
          "1874:     public String getProjectQuerySparkPool() {",
          "1875:         return getOptional(\"kylin.query.spark.pool\", null);",
          "1876:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1908:         return Integer.parseInt(getOptional(\"kylin.query.project-concurrent-running-threshold\", \"0\"));",
          "1909:     }",
          "1911:     public long getQueryMaxScanBytes() {",
          "1912:         long value = Long.parseLong(getOptional(\"kylin.query.max-scan-bytes\", \"0\"));",
          "1913:         return value > 0 ? value : Long.MAX_VALUE;",
          "1914:     }",
          "1916:     public long getQueryMaxReturnRows() {",
          "1917:         return Integer.parseInt(this.getOptional(\"kylin.query.max-return-rows\", \"5000000\"));",
          "1918:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1887:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "1893:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2495:     public String getStreamingStoreClass() {",
          "2496:         return getOptional(\"kylin.stream.store.class\",",
          "2497:                 \"org.apache.kylin.stream.core.storage.columnar.ColumnarSegmentStore\");",
          "2498:     }",
          "2500:     public String getStreamingBasicCuboidJobDFSBlockSize() {",
          "2501:         return getOptional(\"kylin.stream.job.dfs.block.size\", String.valueOf(16 * 1024 * 1024));",
          "2502:     }",
          "2504:     public String getStreamingIndexPath() {",
          "2505:         return getOptional(\"kylin.stream.index.path\", \"stream_index\");",
          "2506:     }",
          "2508:     public int getStreamingCubeConsumerTasksNum() {",
          "2509:         return Integer.parseInt(getOptional(\"kylin.stream.cube-num-of-consumer-tasks\", \"3\"));",
          "2510:     }",
          "2512:     public int getStreamingCubeWindowInSecs() {",
          "2513:         return Integer.parseInt(getOptional(\"kylin.stream.cube.window\", \"3600\"));",
          "2514:     }",
          "2516:     public int getStreamingCubeDurationInSecs() {",
          "2517:         return Integer.parseInt(getOptional(\"kylin.stream.cube.duration\", \"7200\"));",
          "2518:     }",
          "2520:     public int getStreamingCubeMaxDurationInSecs() {",
          "2521:         return Integer.parseInt(getOptional(\"kylin.stream.cube.duration.max\", \"43200\"));",
          "2522:     }",
          "2524:     public int getStreamingCheckPointFileMaxNum() {",
          "2525:         return Integer.parseInt(getOptional(\"kylin.stream.checkpoint.file.max.num\", \"5\"));",
          "2526:     }",
          "2528:     public int getStreamingCheckPointIntervalsInSecs() {",
          "2529:         return Integer.parseInt(getOptional(\"kylin.stream.index.checkpoint.intervals\", \"300\"));",
          "2530:     }",
          "2532:     public int getStreamingIndexMaxRows() {",
          "2533:         return Integer.parseInt(getOptional(\"kylin.stream.index.maxrows\", \"50000\"));",
          "2534:     }",
          "2536:     public int getStreamingMaxImmutableSegments() {",
          "2537:         return Integer.parseInt(getOptional(\"kylin.stream.immutable.segments.max.num\", \"100\"));",
          "2538:     }",
          "2540:     public boolean isStreamingConsumeFromLatestOffsets() {",
          "2541:         return Boolean.parseBoolean(getOptional(\"kylin.stream.consume.offsets.latest\", \"true\"));",
          "2542:     }",
          "2544:     public String getStreamingNode() {",
          "2545:         return getOptional(\"kylin.stream.node\", null);",
          "2546:     }",
          "2548:     public Map<String, String> getStreamingNodeProperties() {",
          "2549:         return getPropertiesByPrefix(\"kylin.stream.node\");",
          "2550:     }",
          "2552:     public String getStreamingMetadataStoreType() {",
          "2553:         return getOptional(\"kylin.stream.metadata.store.type\", \"zk\");",
          "2554:     }",
          "2556:     public String getStreamingSegmentRetentionPolicy() {",
          "2557:         return getOptional(\"kylin.stream.segment.retention.policy\", \"fullBuild\");",
          "2558:     }",
          "2560:     public String getStreamingAssigner() {",
          "2561:         return getOptional(\"kylin.stream.assigner\", \"DefaultAssigner\");",
          "2562:     }",
          "2564:     public int getCoordinatorHttpClientTimeout() {",
          "2565:         return Integer.parseInt(getOptional(\"kylin.stream.coordinator.client.timeout.millsecond\", \"5000\"));",
          "2566:     }",
          "2568:     public int getReceiverHttpClientTimeout() {",
          "2569:         return Integer.parseInt(getOptional(\"kylin.stream.receiver.client.timeout.millsecond\", \"5000\"));",
          "2570:     }",
          "2572:     public int getStreamingReceiverHttpMaxThreads() {",
          "2573:         return Integer.parseInt(getOptional(\"kylin.stream.receiver.http.max.threads\", \"200\"));",
          "2574:     }",
          "2576:     public int getStreamingReceiverHttpMinThreads() {",
          "2577:         return Integer.parseInt(getOptional(\"kylin.stream.receiver.http.min.threads\", \"10\"));",
          "2578:     }",
          "2580:     public int getStreamingReceiverQueryCoreThreads() {",
          "2581:         return Integer.parseInt(getOptional(\"kylin.stream.receiver.query-core-threads\", \"50\"));",
          "2582:     }",
          "2584:     public int getStreamingReceiverQueryMaxThreads() {",
          "2585:         return Integer.parseInt(getOptional(\"kylin.stream.receiver.query-max-threads\", \"200\"));",
          "2586:     }",
          "2588:     public int getStreamingReceiverUseThreadsPerQuery() {",
          "2589:         return Integer.parseInt(getOptional(\"kylin.stream.receiver.use-threads-per-query\", \"8\"));",
          "2590:     }",
          "2592:     public int getStreamingRPCHttpConnTimeout() {",
          "2593:         return Integer.parseInt(getOptional(\"kylin.stream.rpc.http.connect.timeout\", \"10000\"));",
          "2594:     }",
          "2596:     public int getStreamingRPCHttpReadTimeout() {",
          "2597:         return Integer.parseInt(getOptional(\"kylin.stream.rpc.http.read.timeout\", \"60000\"));",
          "2598:     }",
          "2600:     public boolean isStreamingBuildAdditionalCuboids() {",
          "2601:         return Boolean.parseBoolean(getOptional(\"kylin.stream.build.additional.cuboids\", \"false\"));",
          "2602:     }",
          "2604:     public Map<String, String> getStreamingSegmentRetentionPolicyProperties(String policyName) {",
          "2605:         return getPropertiesByPrefix(\"kylin.stream.segment.retention.policy.\" + policyName + \".\");",
          "2606:     }",
          "2608:     public int getStreamingMaxFragmentsInSegment() {",
          "2609:         return Integer.parseInt(getOptional(\"kylin.stream.segment-max-fragments\", \"50\"));",
          "2610:     }",
          "2612:     public int getStreamingMinFragmentsInSegment() {",
          "2613:         return Integer.parseInt(getOptional(\"kylin.stream.segment-min-fragments\", \"15\"));",
          "2614:     }",
          "2616:     public int getStreamingMaxFragmentSizeInMb() {",
          "2617:         return Integer.parseInt(getOptional(\"kylin.stream.max-fragment-size-mb\", \"300\"));",
          "2618:     }",
          "2620:     public boolean isStreamingFragmentsAutoMergeEnabled() {",
          "2621:         return Boolean.parseBoolean(getOptional(\"kylin.stream.fragments-auto-merge-enable\", \"true\"));",
          "2622:     }",
          "2624:     public boolean isStreamingConcurrentScanEnabled() {",
          "2625:         return Boolean.parseBoolean(getOptional(\"kylin.stream.segment.concurrent.scan\", \"false\"));",
          "2626:     }",
          "2628:     public boolean isStreamingStandAloneMode() {",
          "2629:         return Boolean.parseBoolean(getOptional(\"kylin.stream.stand-alone.mode\", \"false\"));",
          "2630:     }",
          "2632:     public boolean isNewCoordinatorEnabled() {",
          "2633:         return Boolean.parseBoolean(getOptional(\"kylin.stream.new.coordinator-enabled\", \"true\"));",
          "2634:     }",
          "2636:     public String getLocalStorageImpl() {",
          "2637:         return getOptional(\"kylin.stream.settled.storage\", null);",
          "2638:     }",
          "2640:     public String getStreamMetrics() {",
          "2641:         return getOptional(\"kylin.stream.metrics.option\", \"\");",
          "2642:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2474:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2480:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2485:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2490:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2495:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2500:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2505:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2510:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2515:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2520:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2525:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2530:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2535:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2540:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2545:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2550:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2555:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2560:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2565:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2570:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2575:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2580:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2585:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2590:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2595:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2600:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2605:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2610:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2615:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2620:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2625:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2630:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2635:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2640:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2645:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2650:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2655:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2647:     public boolean isPrintRealtimeDictEnabled() {",
          "2648:         return Boolean.parseBoolean(getOptional(\"kylin.stream.print-realtime-dict-enabled\", \"false\"));",
          "2649:     }",
          "2651:     public long getStreamMetricsInterval() {",
          "2652:         return Long.parseLong(getOptional(\"kylin.stream.metrics.interval\", \"5\"));",
          "2653:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2663:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2668:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2658:     public String getStreamingDerivedTimeTimezone() {",
          "2659:         return (getOptional(\"kylin.stream.event.timezone\", \"\"));",
          "2660:     }",
          "2662:     public boolean isAutoResubmitDiscardJob() {",
          "2663:         return Boolean.parseBoolean(getOptional(\"kylin.stream.auto-resubmit-after-discard-enabled\", \"true\"));",
          "2664:     }",
          "2666:     public String getHiveDatabaseLambdaCube() {",
          "2667:         return this.getOptional(\"kylin.stream.hive.database-for-lambda-cube\", DEFAULT);",
          "2668:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2676:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2681:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "2686:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2713:     public String getSparkSubmitCmd() {",
          "2714:         return getOptional(\"kylin.engine.spark-cmd\", null);",
          "2715:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2735:     @ConfigTag(ConfigTag.Tag.DEBUG_HACK)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2724:         return getOptional(\"kylin.engine.spark.build-class-name\", \"org.apache.kylin.engine.spark.job.CubeBuildJob\");",
          "2725:     }",
          "2753:     public StorageURL getJobTmpMetaStoreUrl(String project, String jobId) {",
          "2754:         Map<String, String> params = new HashMap<>();",
          "2755:         params.put(\"path\", getJobTmpDir(project) + getNestedPath(jobId) + \"meta\");",
          "",
          "[Removed Lines]",
          "2727:     public Boolean getSparkEngineTaskImpactInstanceEnabled() {",
          "2728:         return Boolean.parseBoolean(getOptional(\"kylin.engine.spark.task-impact-instance-enabled\", \"true\"));",
          "2729:     }",
          "2731:     public int getSparkEngineTaskCoreFactor() {",
          "2732:         return Integer.parseInt(getOptional(\"kylin.engine.spark.task-core-factor\", \"3\"));",
          "2733:     }",
          "2735:     public int getSparkEngineDriverMemoryBase() {",
          "2736:         return Integer.parseInt(getOptional(\"kylin.engine.driver-memory-base\", \"1024\"));",
          "2737:     }",
          "2739:     public boolean isTrackingUrlIpAddressEnabled() {",
          "2740:         return Boolean.valueOf(this.getOptional(\"kylin.job.tracking-url-ip-address-enabled\", TRUE));",
          "2741:     }",
          "2744:     public int[] getSparkEngineDriverMemoryStrategy() {",
          "2745:         String[] dft = {\"2\", \"20\", \"100\"};",
          "2746:         return getOptionalIntArray(\"kylin.engine.driver-memory-strategy\", dft);",
          "2747:     }",
          "2749:     public int getSparkEngineDriverMemoryMaximum() {",
          "2750:         return Integer.parseInt(getOptional(\"kylin.engine.driver-memory-maximum\", \"4096\"));",
          "2751:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2857:         return Integer.valueOf(getOptional(\"kylin.storage.columnar.dfs-replication\", \"3\"));",
          "2858:     }",
          "2864:     public String getBuildConf() {",
          "2865:         return getOptional(\"kylin.engine.submit-hadoop-conf-dir\", \"\");",
          "2866:     }",
          "",
          "[Removed Lines]",
          "2860:     public boolean isAutoSetSparkConf() {",
          "2861:         return Boolean.parseBoolean(getOptional(\"kylin.spark-conf.auto.prior\", \"true\"));",
          "2862:     }",
          "",
          "[Added Lines]",
          "2861:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2884:         return Integer.parseInt(getOptional(\"kylin.engine.max-retry-time\", \"3\"));",
          "2885:     }",
          "2887:     public double getSparkEngineRetryMemoryGradient() {",
          "2888:         return Double.parseDouble(getOptional(\"kylin.engine.retry-memory-gradient\", \"1.5\"));",
          "2889:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2885:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "2886:     public int getSnapshotShardSizeMB() {",
          "2887:         return Integer.parseInt(getOptional(\"kylin.snapshot.shard-size-mb\", \"128\"));",
          "2888:     }",
          "2893:     @ConfigTag(ConfigTag.Tag.NOT_CLEAR)",
          "2894:     public boolean isSegmentStatisticsEnabled() {",
          "2895:         return Boolean.parseBoolean(this.getOptional(\"kylin.engine.segment-statistics-enabled\", \"false\"));",
          "2896:     }",
          "2898:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "2899:     public String getParentDatasetStorageLevel() {",
          "2900:         return getOptional(\"kylin.engine.spark.cache-parent-dataset-storage-level\", \"NONE\");",
          "2901:     }",
          "2903:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "2904:     public int getMaxParentDatasetPersistCount() {",
          "2905:         return Integer.parseInt(getOptional(\"kylin.engine.spark.cache-parent-dataset-count\", \"1\"));",
          "2906:     }",
          "2908:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "2909:     public boolean isBuildBaseCuboid() {",
          "2910:         return Boolean.valueOf(getOptional(\"kylin.engine.build-base-cuboid-enabled\", TRUE));",
          "2911:     }",
          "2913:     public boolean isTrackingUrlIpAddressEnabled() {",
          "2914:         return Boolean.valueOf(this.getOptional(\"kylin.job.tracking-url-ip-address-enabled\", TRUE));",
          "2915:     }",
          "2941:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "2942:     public boolean isAutoSetSparkConf() {",
          "2943:         return Boolean.parseBoolean(getOptional(\"kylin.spark-conf.auto.prior\", \"true\"));",
          "2944:     }",
          "2946:     public Boolean getSparkEngineTaskImpactInstanceEnabled() {",
          "2947:         return Boolean.parseBoolean(getOptional(\"kylin.engine.spark.task-impact-instance-enabled\", \"true\"));",
          "2948:     }",
          "2950:     public int getSparkEngineTaskCoreFactor() {",
          "2951:         return Integer.parseInt(getOptional(\"kylin.engine.spark.task-core-factor\", \"3\"));",
          "2952:     }",
          "2954:     public int getSparkEngineDriverMemoryBase() {",
          "2955:         return Integer.parseInt(getOptional(\"kylin.engine.driver-memory-base\", \"1024\"));",
          "2956:     }",
          "2958:     public int[] getSparkEngineDriverMemoryStrategy() {",
          "2959:         String[] dft = {\"2\", \"20\", \"100\"};",
          "2960:         return getOptionalIntArray(\"kylin.engine.driver-memory-strategy\", dft);",
          "2961:     }",
          "2963:     public int getSparkEngineDriverMemoryMaximum() {",
          "2964:         return Integer.parseInt(getOptional(\"kylin.engine.driver-memory-maximum\", \"4096\"));",
          "2965:     }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2908:         return getOptional(\"kylin.engine.executor-instance-strategy\", \"100,2,500,3,1000,4\");",
          "2909:     }",
          "2913:     }",
          "2918:     public double getJoinMemoryFraction() {",
          "2919:         return Double.parseDouble(getOptional(\"kylin.query.spark-engine.join-memory-fraction\", \"0.3\"));",
          "2920:     }",
          "",
          "[Removed Lines]",
          "2911:     public int getSnapshotShardSizeMB() {",
          "2912:         return Integer.parseInt(getOptional(\"kylin.snapshot.shard-size-mb\", \"128\"));",
          "",
          "[Added Lines]",
          "2998:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "2999:     public int getGlobalDictV2MinHashPartitions() {",
          "3000:         return Integer.parseInt(getOptional(\"kylin.dictionary.globalV2-min-hash-partitions\", \"10\"));",
          "3001:     }",
          "3003:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "3004:     public int getGlobalDictV2ThresholdBucketSize() {",
          "3005:         return Integer.parseInt(getOptional(\"kylin.dictionary.globalV2-threshold-bucket-size\", \"500000\"));",
          "3006:     }",
          "3008:     public int getDictionarySliceEvicationThreshold() {",
          "3009:         return Integer.parseInt(getOptional(\"kylin.dictionary.slice.eviction.threshold\", \"5\"));",
          "3010:     }",
          "3012:     @ConfigTag({ConfigTag.Tag.CUBE_LEVEL})",
          "3013:     public double getGlobalDictV2InitLoadFactor() {",
          "3014:         return Double.parseDouble(getOptional(\"kylin.dictionary.globalV2-init-load-factor\", \"0.5\"));",
          "3015:     }",
          "3017:     @ConfigTag({ConfigTag.Tag.CUBE_LEVEL})",
          "3018:     public double getGlobalDictV2BucketOverheadFactor() {",
          "3019:         return Double.parseDouble(getOptional(\"kylin.dictionary.globalV2-bucket-overhead-factor\", \"1.5\"));",
          "3020:     }",
          "3022:     @ConfigTag({ConfigTag.Tag.CUBE_LEVEL})",
          "3023:     public int getGlobalDictV2MaxVersions() {",
          "3024:         return Integer.parseInt(getOptional(\"kylin.dictionary.globalV2-max-versions\", \"3\"));",
          "3025:     }",
          "3027:     @ConfigTag({ConfigTag.Tag.CUBE_LEVEL})",
          "3028:     public long getGlobalDictV2VersionTTL() {",
          "3029:         return Long.parseLong(getOptional(\"kylin.dictionary.globalV2-version-ttl\", \"259200000\"));",
          "3030:     }",
          "3032:     @ConfigTag({ConfigTag.Tag.CUBE_LEVEL})",
          "3033:     public boolean isCheckGlobalDictV2() {",
          "3034:         return Boolean.parseBoolean(getOptional(\"kylin.dictionary.globalV2-check-enabled\", \"true\"));",
          "3035:     }",
          "3040:     @ConfigTag({ConfigTag.Tag.CUBE_LEVEL})",
          "3041:     public boolean detectDataSkewInDictEncodingEnabled() {",
          "3042:         return Boolean.valueOf(getOptional(\"kylin.dictionary.detect-data-skew-sample-enabled\", FALSE));",
          "3043:     }",
          "3049:     @ConfigTag({ConfigTag.Tag.CUBE_LEVEL})",
          "3050:     public double sampleRateInEncodingSkewDetection() {",
          "3051:         return Double.valueOf(getOptional(\"kylin.dictionary.detect-data-skew-sample-rate\", \"0.1\"));",
          "3052:     }",
          "3063:     @ConfigTag({ConfigTag.Tag.CUBE_LEVEL})",
          "3064:     public double skewPercentageThreshHold() {",
          "3065:         return Double.valueOf(getOptional(\"kylin.dictionary.detect-data-skew-percentage-threshold\", \"0.05\"));",
          "3066:     }",
          "3081:     @ConfigTag({ConfigTag.Tag.CUBE_LEVEL})",
          "3082:     public boolean rePartitionEncodedDatasetWithRowKey() {",
          "3083:         return Boolean.valueOf(getOptional(\"kylin.engine.spark.repartition.dataset.after.encode-enabled\", FALSE));",
          "3084:     }",
          "3086:     @ConfigTag({ConfigTag.Tag.CUBE_LEVEL})",
          "3087:     public int getRepartitionNumAfterEncode() {",
          "3088:         return Integer.valueOf(getOptional(\"kylin.engine.spark.repartition.dataset.after.encode.num\", \"0\"));",
          "3089:     }",
          "3091:     @ConfigTag(ConfigTag.Tag.GLOBAL_LEVEL)",
          "3092:     public String getSparkStandaloneMasterWebUI() {",
          "3093:         return getOptional(\"kylin.engine.spark.standalone.master.httpUrl\", \"\");",
          "3094:     }",
          "3104:     @ConfigTag(ConfigTag.Tag.GLOBAL_LEVEL)",
          "3105:     public String getSparderAppName() {",
          "3106:         String customSparderAppName = getOptional(\"kylin.query.sparder-context.app-name\", \"\");",
          "3107:         if (StringUtils.isEmpty(customSparderAppName)) {",
          "3108:             customSparderAppName =",
          "3109:                     \"sparder_on_\" + getServerRestAddress().replaceAll(\":\", \"-\");",
          "3110:         }",
          "3111:         return customSparderAppName;",
          "3117:     @ConfigTag(ConfigTag.Tag.DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2943:         }",
          "2944:     }",
          "2946:     public int getQueryPartitionSplitSizeMB() {",
          "2947:         return Integer.parseInt(getOptional(\"kylin.query.spark-engine.partition-split-size-mb\",",
          "2948:                 \"64\"));",
          "2949:     }",
          "2955:     public int getMaxShardingSizeMBPerTask() {",
          "2956:         return Integer.parseInt(getOptional(\"kylin.query.spark-engine.max-sharding-size-mb\",",
          "2957:                 \"64\"));",
          "2958:     }",
          "2960:     public boolean isShardingJoinOptEnabled() {",
          "2961:         return Boolean.parseBoolean(getOptional(\"kylin.query.spark-engine.expose-sharding-trait\",",
          "2962:                 \"true\"));",
          "2963:     }",
          "2970:     public Map<String, String> getQuerySparkConf() {",
          "2971:         return getPropertiesByPrefix(\"kylin.query.spark-conf.\");",
          "2972:     }",
          "",
          "[Removed Lines]",
          "2965:     public int getSparkSqlShufflePartitions() {",
          "2966:         return Integer.parseInt(getOptional(\"kylin.query.spark-engine.spark-sql-shuffle-partitions\",",
          "2967:                 \"-1\"));",
          "2968:     }",
          "",
          "[Added Lines]",
          "3155:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "3156:     public int getSparkSqlShufflePartitions() {",
          "3157:         return Integer.parseInt(getOptional(\"kylin.query.spark-engine.spark-sql-shuffle-partitions\",",
          "3158:                 \"-1\"));",
          "3159:     }",
          "3161:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "3167:     @ConfigTag(ConfigTag.Tag.GLOBAL_LEVEL)",
          "3168:     public boolean isAutoSetPushDownPartitions() {",
          "3169:         return Boolean",
          "3170:                 .parseBoolean(this.getOptional(\"kylin.query.pushdown.auto-set-shuffle-partitions-enabled\", \"true\"));",
          "3171:     }",
          "3173:     @ConfigTag(ConfigTag.Tag.GLOBAL_LEVEL)",
          "3174:     public int getBaseShufflePartitionSize() {",
          "3175:         return Integer.parseInt(this.getOptional(\"kylin.query.pushdown.base-shuffle-partition-size\", \"48\"));",
          "3176:     }",
          "3182:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "3188:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "3197:     @ConfigTag(ConfigTag.Tag.GLOBAL_LEVEL)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2986:         return Integer.parseInt(getOptional(\"kylin.query.bitmap-upper-bound\", \"10000000\"));",
          "2987:     }",
          "2989:     public boolean needReplaceAggWhenExactlyMatched() {",
          "2990:         return Boolean.parseBoolean(getOptional(\"kylin.query.need-replace-exactly-agg\", \"true\"));",
          "2991:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3217:     @ConfigTag(ConfigTag.Tag.CUBE_LEVEL)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3045:         }",
          "3046:     }",
          "3053:     public String getJobOutputStorePath(String project, String jobId) {",
          "3054:         return getSparkLogDir(project) + getNestedPath(jobId) + \"execute_output.json\";",
          "3055:     }",
          "3059:     }",
          "3061:     public boolean isAutoStartSparder() {",
          "3063:     }",
          "3068:     public int getSparderCanaryErrorResponseMs() {",
          "3069:         return Integer.parseInt(this.getOptional(\"kylin.canary.sparder-context-error-response-ms\", \"3000\"));",
          "3070:     }",
          "",
          "[Removed Lines]",
          "3048:     public boolean isAutoSetPushDownPartitions() {",
          "3049:         return Boolean",
          "3050:                 .parseBoolean(this.getOptional(\"kylin.query.pushdown.auto-set-shuffle-partitions-enabled\", \"true\"));",
          "3051:     }",
          "3057:     public int getBaseShufflePartitionSize() {",
          "3058:         return Integer.parseInt(this.getOptional(\"kylin.query.pushdown.base-shuffle-partition-size\", \"48\"));",
          "3062:         return Boolean.parseBoolean(this.getOptional(\"kylin.query.auto-sparder-context\", \"false\"));",
          "",
          "[Added Lines]",
          "3296:     @ConfigTag({ConfigTag.Tag.PROJECT_LEVEL, ConfigTag.Tag.THREAD_LEVEL})",
          "3297:     public String getProjectQuerySparkPool() {",
          "3298:         return getOptional(\"kylin.query.spark.pool\", null);",
          "3304:     @ConfigTag(ConfigTag.Tag.GLOBAL_LEVEL)",
          "3306:         return Boolean.parseBoolean(this.getOptional(\"kylin.query.auto-sparder-context-enabled\", \"false\"));",
          "3307:     }",
          "3312:     @ConfigTag(ConfigTag.Tag.GLOBAL_LEVEL)",
          "3313:     public boolean isSparderCanaryEnabled() {",
          "3314:         return Boolean.parseBoolean(this.getOptional(\"kylin.canary.sparder-context-canary-enabled\", TRUE));",
          "3320:     @ConfigTag(ConfigTag.Tag.GLOBAL_LEVEL)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3075:     public int getThresholdToRestartSparder() {",
          "3076:         return Integer.parseInt(this.getOptional(\"kylin.canary.sparder-context-threshold-to-restart-spark\", \"3\"));",
          "3077:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3328:     @ConfigTag(ConfigTag.Tag.GLOBAL_LEVEL)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3082:     public int getSparderCanaryPeriodMinutes() {",
          "3083:         return Integer.parseInt(this.getOptional(\"kylin.canary.sparder-context-period-min\", \"3\"));",
          "3084:     }",
          "",
          "[Removed Lines]",
          "3089:     public boolean isSegmentStatisticsEnabled() {",
          "3090:         return Boolean.parseBoolean(this.getOptional(\"kylin.engine.segment-statistics-enabled\", \"false\"));",
          "3091:     }",
          "",
          "[Added Lines]",
          "3336:     @ConfigTag(ConfigTag.Tag.GLOBAL_LEVEL)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3154:     public String getKerberosPrincipal() {",
          "3155:         return getOptional(\"kylin.kerberos.principal\");",
          "3156:     }",
          "3218: }",
          "",
          "[Removed Lines]",
          "3158:     public String getParentDatasetStorageLevel() {",
          "3159:         return getOptional(\"kylin.engine.spark.parent-dataset.storage.level\", \"NONE\");",
          "3160:     }",
          "3162:     public int getMaxParentDatasetPersistCount() {",
          "3163:         return Integer.parseInt(getOptional(\"kylin.engine.spark.parent-dataset.max.persist.count\", \"1\"));",
          "3164:     }",
          "3166:     public int getRepartitionNumAfterEncode() {",
          "3167:         return Integer.valueOf(getOptional(\"kylin.engine.spark.dataset.repartition.num.after.encoding\", \"0\"));",
          "3168:     }",
          "3183:     public boolean rePartitionEncodedDatasetWithRowKey() {",
          "3184:         return Boolean.valueOf(getOptional(\"kylin.engine.spark.repartition.encoded.dataset\", \"false\"));",
          "3185:     }",
          "3190:     public boolean detectDataSkewInDictEncodingEnabled() {",
          "3191:         return Boolean.valueOf(getOptional(\"kylin.dictionary.detect.data.skew.in.encoding\", \"false\"));",
          "3192:     }",
          "3198:     public double sampleRateInEncodingSkewDetection() {",
          "3199:         return Double.valueOf(getOptional(\"kylin.dictionary.detect.data.skew.sample.rate\", \"0.1\"));",
          "3200:     }",
          "3211:     public double skewPercentageThreshHold() {",
          "3212:         return Double.valueOf(getOptional(\"kylin.dictionary.data.skew.percentage.threshhold\", \"0.05\"));",
          "3213:     }",
          "3215:     public boolean isBuildBaseCuboid() {",
          "3216:         return Boolean.valueOf(getOptional(\"kylin.engine.cuboid.build.base\", \"true\"));",
          "3217:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/QueryContext.java||core-common/src/main/java/org/apache/kylin/common/QueryContext.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/QueryContext.java -> core-common/src/main/java/org/apache/kylin/common/QueryContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:         return scanTime.addAndGet(time);",
          "215:     }",
          "218:     public void addQueryStopListener(QueryStopListener listener) {",
          "219:         this.stopListeners.add(listener);",
          "220:     }",
          "223:     public void setHighPriorityQuery(boolean highPriorityQuery) {",
          "224:         isHighPriorityQuery = highPriorityQuery;",
          "225:     }",
          "",
          "[Removed Lines]",
          "217:     @Clarification(priority = Clarification.Priority.MAJOR, msg = \"remove this\")",
          "222:     @Clarification(priority = Clarification.Priority.MAJOR, msg = \"Maybe we can change spark.scheduler.pool to implement resource isolation.\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/annotation/ConfigTag.java||core-common/src/main/java/org/apache/kylin/common/annotation/ConfigTag.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/annotation/ConfigTag.java -> core-common/src/main/java/org/apache/kylin/common/annotation/ConfigTag.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         NOT_IMPLEMENTED,",
          "62:         CUBE_LEVEL,",
          "67:         PROJECT_LEVEL,",
          "73:     }",
          "74: }",
          "",
          "[Removed Lines]",
          "52:         UNCATEGORIZED,",
          "57:         DEBUG_HACK,",
          "72:         GLOBAL_LEVEL",
          "",
          "[Added Lines]",
          "58:         DEBUG_HACK,",
          "65:         THREAD_LEVEL,",
          "80:         GLOBAL_LEVEL,",
          "84:         MAJOR,",
          "86:         MINOR",
          "",
          "---------------"
        ],
        "core-common/src/main/resources/kylin-defaults.properties||core-common/src/main/resources/kylin-defaults.properties": [
          "File: core-common/src/main/resources/kylin-defaults.properties -> core-common/src/main/resources/kylin-defaults.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: # Default time filter for job list, 0->current day, 1->last one day, 2->last one week, 3->last one year, 4->all",
          "88: kylin.web.default-time-filter=1",
          "104: ### STORAGE ###",
          "110: # if you want to delete the real storage like htable of deleting segment, you can set it to true",
          "111: kylin.storage.clean-after-delete-operation=false",
          "",
          "[Removed Lines]",
          "90: ### SOURCE ###",
          "91: # Define how to access to hive metadata",
          "92: # When user deploy kylin on AWS EMR and Glue is used as external metadata, use gluecatalog instead",
          "93: kylin.source.hive.metadata-type=hcatalog",
          "95: # Hive client, valid value [cli, beeline]",
          "96: kylin.source.hive.client=cli",
          "98: # Absolute path to beeline shell, can be set to spark beeline instead of the default hive beeline on PATH",
          "99: kylin.source.hive.beeline-shell=beeline",
          "101: # Hive database name for putting the intermediate flat tables",
          "102: kylin.source.hive.database-for-flat-table=default",
          "106: # The storage for final cube file in hbase",
          "107: kylin.storage.url=hbase",
          "109: # clean real storage after delete operation",
          "",
          "[Added Lines]",
          "92: # clean real storage after purge operation",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: kylin.cube.cuboid-scheduler=org.apache.kylin.cube.cuboid.DefaultCuboidScheduler",
          "138: kylin.cube.segment-advisor=org.apache.kylin.cube.CubeSegmentAdvisor",
          "151: kylin.cube.aggrgroup.max-combination=32768",
          "153: kylin.cube.cubeplanner.enabled=false",
          "",
          "[Removed Lines]",
          "140: # 'auto', 'inmem', 'layer' or 'random' for testing",
          "141: kylin.cube.algorithm=layer",
          "143: # A smaller threshold prefers layer, a larger threshold prefers in-mem",
          "144: kylin.cube.algorithm.layer-or-inmem-threshold=7",
          "146: # auto use inmem algorithm:",
          "147: # 1, cube planner optimize job",
          "148: # 2, no source record",
          "149: kylin.cube.algorithm.inmem-auto-optimize=true",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161: ### QUERY ###",
          "168: kylin.query.cache-enabled=true",
          "169: kylin.query.cache-threshold-scan-count=10240",
          "170: kylin.query.cache-threshold-duration=2000",
          "",
          "[Removed Lines]",
          "163: # Controls the maximum number of bytes a query is allowed to scan storage.",
          "164: # The default value 0 means no limit.",
          "165: # The counterpart kylin.storage.partition.max-scan-bytes sets the maximum per coprocessor.",
          "166: kylin.query.max-scan-bytes=0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235: kylin.security.saml.context-server-port=443",
          "236: kylin.security.saml.context-path=/kylin",
          "238: ### SPARK BUILD ENGINE CONFIGS ###",
          "240: # Hadoop conf folder, will export this as \"HADOOP_CONF_DIR\" to run spark-submit",
          "241: # This must contain site xmls of core, yarn, hive, and hbase in one folder",
          "242: #kylin.env.hadoop-conf-dir=/etc/hadoop/conf",
          "244: # Spark conf (default is in spark/conf/spark-defaults.conf)",
          "245: kylin.engine.spark-conf.spark.master=yarn",
          "246: kylin.engine.spark-conf.spark.submit.deployMode=client",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: ##################################",
          "211: # Switch to spark resources automatic adjustment strategy",
          "212: kylin.spark-conf.auto.prior=true",
          "214: # Read-Write separation deployment for Kylin 4, please check https://cwiki.apache.org/confluence/display/KYLIN/Read-Write+Separation+Deployment+for+Kylin+4.0",
          "215: #kylin.engine.submit-hadoop-conf-dir=",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "269: #kylin.engine.spark-conf.spark.yarn.am.extraJavaOptions=-Dhdp.version=current",
          "270: kylin.engine.spark-conf.spark.driver.extraJavaOptions=-XX:+CrashOnOutOfMemoryError",
          "273: # Enlarge cores and memory to improve query performance in production env, please check https://cwiki.apache.org/confluence/display/KYLIN/User+Manual+4.X",
          "275: kylin.query.spark-conf.spark.master=yarn",
          "277: kylin.query.spark-conf.spark.driver.cores=1",
          "278: kylin.query.spark-conf.spark.driver.memory=4G",
          "279: kylin.query.spark-conf.spark.driver.memoryOverhead=1G",
          "",
          "[Removed Lines]",
          "272: ### SPARK QUERY ENGINE CONFIGS (a.k.a. Sparder Context) ###",
          "276: #kylin.query.spark-conf.spark.submit.deployMode=client",
          "",
          "[Added Lines]",
          "245: ##################################",
          "246: ### SPARK QUERY ENGINE CONFIGS ###",
          "250: #Whether or not to start SparderContext when query server start",
          "251: kylin.query.auto-sparder-context-enabled-enabled=false",
          "252: #kylin.query.sparder-context.app-name=",
          "",
          "---------------"
        ],
        "docker/conf/kylin/kylin.properties||docker/conf/kylin/kylin.properties": [
          "File: docker/conf/kylin/kylin.properties -> docker/conf/kylin/kylin.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "332: kylin.storage.columnar.repartition-threshold-size-mb=128",
          "333: kylin.storage.columnar.shard-size-mb=128",
          "336: kylin.query.spark-conf.spark.master=yarn",
          "337: kylin.query.spark-conf.spark.driver.memory=512M",
          "338: kylin.query.spark-conf.spark.driver.memoryOverhead=512M",
          "",
          "[Removed Lines]",
          "335: kylin.query.auto-sparder-context=true",
          "",
          "[Added Lines]",
          "335: kylin.query.auto-sparder-context-enabled=true",
          "",
          "---------------"
        ],
        "docker/dockerfile/standalone/conf/bin/kylin.sh||docker/dockerfile/standalone/conf/bin/kylin.sh": [
          "File: docker/dockerfile/standalone/conf/bin/kylin.sh -> docker/dockerfile/standalone/conf/bin/kylin.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:   <pool name=\"query_pushdown\">",
          "213:     <schedulingMode>FAIR</schedulingMode>",
          "214:     <weight>1</weight>",
          "216:   </pool>",
          "217:   <pool name=\"heavy_tasks\">",
          "218:     <schedulingMode>FAIR</schedulingMode>",
          "",
          "[Removed Lines]",
          "215:     <minShare>1</minShare>",
          "",
          "[Added Lines]",
          "215:     <minShare>0</minShare>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:   <pool name=\"vip_tasks\">",
          "228:     <schedulingMode>FAIR</schedulingMode>",
          "229:     <weight>15</weight>",
          "231:   </pool>",
          "232: </allocations>",
          "233: EOL",
          "",
          "[Removed Lines]",
          "230:     <minShare>1</minShare>",
          "",
          "[Added Lines]",
          "230:     <minShare>0</minShare>",
          "",
          "---------------"
        ],
        "docker/dockerfile/standalone/conf/kylin/kylin.properties||docker/dockerfile/standalone/conf/kylin/kylin.properties": [
          "File: docker/dockerfile/standalone/conf/kylin/kylin.properties -> docker/dockerfile/standalone/conf/kylin/kylin.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "336: kylin.storage.columnar.repartition-threshold-size-mb=128",
          "337: kylin.storage.columnar.shard-size-mb=128",
          "340: kylin.query.sparder-context.app-name=sparder_on_docker",
          "341: kylin.query.spark-conf.spark.master=yarn",
          "342: kylin.query.spark-conf.spark.driver.memory=512M",
          "",
          "[Removed Lines]",
          "339: kylin.query.auto-sparder-context=true",
          "",
          "[Added Lines]",
          "339: kylin.query.auto-sparder-context-enabled=true",
          "",
          "---------------"
        ],
        "examples/test_case_data/file_prunning/kylin.properties||examples/test_case_data/file_prunning/kylin.properties": [
          "File: examples/test_case_data/file_prunning/kylin.properties -> examples/test_case_data/file_prunning/kylin.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: kylin.source.jdbc.pass=",
          "",
          "[Removed Lines]",
          "160: kylin.query.auto-sparder-context=false",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "examples/test_case_data/localmeta/kylin.properties||examples/test_case_data/localmeta/kylin.properties": [
          "File: examples/test_case_data/localmeta/kylin.properties -> examples/test_case_data/localmeta/kylin.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "159: kylin.source.jdbc.user=",
          "160: kylin.source.jdbc.pass=",
          "164: kylin.metrics.query-cache.expire-seconds=5",
          "165: kylin.metrics.query-cache.max-entries=2",
          "",
          "[Removed Lines]",
          "162: kylin.query.auto-sparder-context=false",
          "",
          "[Added Lines]",
          "162: kylin.query.auto-sparder-context-enabled=false",
          "",
          "---------------"
        ],
        "examples/test_case_data/parquet_test/kylin.properties||examples/test_case_data/parquet_test/kylin.properties": [
          "File: examples/test_case_data/parquet_test/kylin.properties -> examples/test_case_data/parquet_test/kylin.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: kylin.source.jdbc.user=",
          "157: kylin.source.jdbc.pass=",
          "",
          "[Removed Lines]",
          "159: kylin.query.auto-sparder-context=false",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "examples/test_case_data/sandbox/kylin.properties||examples/test_case_data/sandbox/kylin.properties": [
          "File: examples/test_case_data/sandbox/kylin.properties -> examples/test_case_data/sandbox/kylin.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "231: kylin.query.transformers=org.apache.kylin.query.util.DefaultQueryTransformer",
          "",
          "[Removed Lines]",
          "233: kylin.query.auto-sparder-context=false",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:         JobMetrics metrics = JobMetricsUtils.collectMetrics(queryExecutionId);",
          "468:         long rowCount = metrics.getMetrics(Metrics.CUBOID_ROWS_CNT());",
          "469:         if (rowCount == -1) {",
          "472:             long cuboidRowCnt = dataset.count();",
          "473:             layout.setRows(cuboidRowCnt);",
          "",
          "[Removed Lines]",
          "470:             infos.recordAbnormalLayouts(layoutId, \"'Job metrics seems null, use count() to collect cuboid rows.'\");",
          "471:             logger.debug(\"Can not get cuboid row cnt, use count() to collect cuboid rows.\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/JobMetricsUtils.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/JobMetricsUtils.scala": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/JobMetricsUtils.scala -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/JobMetricsUtils.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     if (execution != null) {",
          "41:       metrics = collectOutputRows(execution.executedPlan)",
          "42:       logInfo(s\"Collect output rows successfully. $metrics\")",
          "45:     }",
          "46:     metrics",
          "47:   }",
          "",
          "[Removed Lines]",
          "43:     } else {",
          "44:       logInfo(s\"Collect output rows failed.\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     rowMetrics",
          "87:   }",
          "90:   def registerListener(ss: SparkSession): Unit = {",
          "91:     sparkListener = new SparkListener {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:      override def onOtherEvent(event: SparkListenerEvent): Unit = event match {",
          "98:         case e: PostQueryExecutionForKylin =>",
          "99:           val nExecutionId = e.localProperties.getProperty(QueryExecutionCache.N_EXECUTION_ID_KEY, \"\")",
          "100:           if (nExecutionId != \"\" && e.queryExecution != null) {",
          "101:             QueryExecutionCache.setQueryExecution(nExecutionId, e.queryExecution)",
          "102:           } else {",
          "103:             logWarning(\"executionIdStr is null, can't get QueryExecution from SQLExecution.\")",
          "104:           }",
          "105:         case _ => // Ignore",
          "106:       }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala": [
          "File: kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala -> kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:         initializingThread.join()",
          "206:       }",
          "210:         SparderContextCanary.init()",
          "211:       }",
          "",
          "[Removed Lines]",
          "208:       if (System.getProperty(\"spark.local\") ne \"true\") {",
          "",
          "[Added Lines]",
          "208:       if (System.getProperty(\"spark.local\") != \"true\" && KylinConfig.getInstanceFromEnv.isSparderCanaryEnabled) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6416ea0f426ccfa60bed707693bccc0e7676eac2",
      "candidate_info": {
        "commit_hash": "6416ea0f426ccfa60bed707693bccc0e7676eac2",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/6416ea0f426ccfa60bed707693bccc0e7676eac2",
        "files": [
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeTableEncoder.scala"
        ],
        "message": "KYLIN-5011 Detect and scatter skewed data in dict encoding step",
        "before_after_code_files": [
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeTableEncoder.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeTableEncoder.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeTableEncoder.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeTableEncoder.scala": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeTableEncoder.scala -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeTableEncoder.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:             partitionedDs = partitionedDs.select(columns ++ Seq(scatterColumn): _*)",
          "112:               .repartition(enlargedBucketSize, col(\"scatter_skew_data_\" + ref.columnName))",
          "113:               .select(columns ++ Seq(encodeCol): _*)",
          "115:           }",
          "116:         }",
          "120:       }",
          "121:     )",
          "",
          "[Removed Lines]",
          "114:             return partitionedDs;",
          "117:         partitionedDs = partitionedDs",
          "118:           .repartition(enlargedBucketSize, col(encodeColRef).cast(StringType))",
          "119:           .select(columns ++ Seq(encodeCol): _*)",
          "",
          "[Added Lines]",
          "115:         } else {",
          "116:           partitionedDs = partitionedDs",
          "117:             .repartition(enlargedBucketSize, col(encodeColRef).cast(StringType))",
          "118:             .select(columns ++ Seq(encodeCol): _*)",
          "",
          "---------------"
        ]
      }
    }
  ]
}