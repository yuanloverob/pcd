{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "73ab2bc3dda7b691867a9cf6e18693157e8a241b",
      "candidate_info": {
        "commit_hash": "73ab2bc3dda7b691867a9cf6e18693157e8a241b",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/73ab2bc3dda7b691867a9cf6e18693157e8a241b",
        "files": [
          "ambari-web/app/controllers/wizard/step1_controller.js"
        ],
        "message": "AMBARI-25069 - Ambari wrties Empty baseurl values written to Repo Files when using a local repository causing stack installation failure (#2837)\n\n* AMBARI-25069 - Ambari wrties Empty baseurl values written to Repo Files when using a local repository causing stack installation failure\n\n* AMBARI-25069 - Ambari wrties Empty baseurl values written to Repo Files when using a local repository causing stack installation failure (asnaik)",
        "before_after_code_files": [
          "ambari-web/app/controllers/wizard/step1_controller.js||ambari-web/app/controllers/wizard/step1_controller.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/wizard/step1_controller.js||ambari-web/app/controllers/wizard/step1_controller.js": [
          "File: ambari-web/app/controllers/wizard/step1_controller.js -> ambari-web/app/controllers/wizard/step1_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:   onNetworkIssuesExist: function() {",
          "195:     if (this.get('networkIssuesExist')) {",
          "196:       this.get('content.stacks').forEach(function (stack) {",
          "202:       });",
          "203:     }",
          "204:   }.observes('networkIssuesExist'),",
          "",
          "[Removed Lines]",
          "197:         stack.setProperties({",
          "198:           usePublicRepo: false,",
          "199:           useLocalRepo: true",
          "200:         });",
          "201:         stack.cleanReposBaseUrls();",
          "",
          "[Added Lines]",
          "197:        if(stack.get('useLocalRepo') !== true){",
          "198:           stack.setProperties({",
          "199:             usePublicRepo: false,",
          "200:             useLocalRepo: true",
          "201:           });",
          "202:           stack.cleanReposBaseUrls();",
          "203:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9622786afbfdb1b33fd877c67a9cc8dc5be4bcb5",
      "candidate_info": {
        "commit_hash": "9622786afbfdb1b33fd877c67a9cc8dc5be4bcb5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9622786afbfdb1b33fd877c67a9cc8dc5be4bcb5",
        "files": [
          "ambari-web/app/controllers/main/host/details.js"
        ],
        "message": "AMBARI-24639 Not able to turn off maintenance mode for a host.",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js": [
          "File: ambari-web/app/controllers/main/host/details.js -> ambari-web/app/controllers/main/host/details.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2285:     var message = Em.I18n.t('hosts.host.details.for.postfix').format(context.label);",
          "2286:     var popupInfo = Em.I18n.t('hosts.passiveMode.popup').format(context.active ? 'On' : 'Off', this.get('content.hostName'));",
          "2287:     if (state === 'OFF') {",
          "2289:         currentVersion = App.StackVersion.find().findProperty('isCurrent'),",
          "2290:         clusterVersion = currentVersion && currentVersion.get('repositoryVersion.repositoryVersion');",
          "2291:       if (hostVersion !== clusterVersion) {",
          "",
          "[Removed Lines]",
          "2288:       var hostVersion = this.get('content.stackVersions') && this.get('content.stackVersions').findProperty('isCurrent').get('repoVersion'),",
          "",
          "[Added Lines]",
          "2288:       var currentHostVersion = this.get('content.stackVersions') && this.get('content.stackVersions').findProperty('isCurrent'),",
          "2289:         hostVersion = currentHostVersion && currentHostVersion.get('repoVersion'),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8eedd8c8af2959b30884785105ed6fdd04eb48a",
      "candidate_info": {
        "commit_hash": "b8eedd8c8af2959b30884785105ed6fdd04eb48a",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b8eedd8c8af2959b30884785105ed6fdd04eb48a",
        "files": [
          "ambari-common/src/main/python/resource_management/libraries/script/script.py",
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/mysql_server.py"
        ],
        "message": "[AMBARI-24275] - Unable to Restart Hive When Using An Ambari-Managed MySQL Server (#1742) (#2209)",
        "before_after_code_files": [
          "ambari-common/src/main/python/resource_management/libraries/script/script.py||ambari-common/src/main/python/resource_management/libraries/script/script.py",
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/mysql_server.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/mysql_server.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/resource_management/libraries/script/script.py||ambari-common/src/main/python/resource_management/libraries/script/script.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/script/script.py -> ambari-common/src/main/python/resource_management/libraries/script/script.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "964:     else:",
          "965:       # To remain backward compatible with older stacks, only pass upgrade_type if available.",
          "966:       # TODO, remove checking the argspec for \"upgrade_type\" once all of the services support that optional param.",
          "968:         self.stop(env, upgrade_type=upgrade_type)",
          "969:       else:",
          "970:         if is_stack_upgrade:",
          "",
          "[Removed Lines]",
          "967:       if True:",
          "",
          "[Added Lines]",
          "967:       if \"upgrade_type\" in inspect.getargspec(self.stop).args:",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/mysql_server.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/mysql_server.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/mysql_server.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/mysql_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     env.set_params(params)",
          "43:     mysql_configure()",
          "46:     import params",
          "47:     env.set_params(params)",
          "48:     mysql_service(action='start')",
          "51:     import params",
          "52:     env.set_params(params)",
          "53:     mysql_service(action='stop')",
          "",
          "[Removed Lines]",
          "45:   def start(self, env, rolling_restart=False):",
          "50:   def stop(self, env, rolling_restart=False):",
          "",
          "[Added Lines]",
          "45:   def start(self, env):",
          "50:   def stop(self, env):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4be4c8a252cab40ce6e037021bcc3da493becdaf",
      "candidate_info": {
        "commit_hash": "4be4c8a252cab40ce6e037021bcc3da493becdaf",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/4be4c8a252cab40ce6e037021bcc3da493becdaf",
        "files": [
          "ambari-server/src/main/resources/stacks/HDP/2.5/services/HIVE/configuration/hive-interactive-site.xml",
          "ambari-web/app/mappers/service_metrics_mapper.js",
          "ambari-web/app/utils/ajax/ajax.js",
          "ambari-web/test/mappers/service_metrics_mapper_test.js"
        ],
        "message": "AMBARI-25374. Use host names instead ip addresses while checking hive interactive service status",
        "before_after_code_files": [
          "ambari-web/app/mappers/service_metrics_mapper.js||ambari-web/app/mappers/service_metrics_mapper.js",
          "ambari-web/app/utils/ajax/ajax.js||ambari-web/app/utils/ajax/ajax.js",
          "ambari-web/test/mappers/service_metrics_mapper_test.js||ambari-web/test/mappers/service_metrics_mapper_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mappers/service_metrics_mapper.js||ambari-web/app/mappers/service_metrics_mapper.js": [
          "File: ambari-web/app/mappers/service_metrics_mapper.js -> ambari-web/app/mappers/service_metrics_mapper.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:     var self = this;",
          "317:     App.router.get('configurationController').getCurrentConfigsBySites(['hive-site', 'hive-interactive-site']).done(function (configs) {",
          "318:       var hiveWebUiPort = configs.findProperty('type', 'hive-interactive-site').properties['hive.server2.webui.port'];",
          "319:       var hostNames = hiveInteractiveServers.mapProperty('host_name');",
          "320:       var notDefinedHostIp = hostNames.find(function (hostName) {",
          "321:         return !self.get('hostNameIpMap')[hostName];",
          "322:       });",
          "324:         self.getHostNameIpMap(hostNames).done(function () {",
          "326:         });",
          "327:       } else {",
          "329:       }",
          "330:     });",
          "331:   },",
          "",
          "[Removed Lines]",
          "323:       if (notDefinedHostIp) {",
          "325:           self.getHiveServersInteractiveStatus(hiveInteractiveServers, hiveWebUiPort);",
          "328:         self.getHiveServersInteractiveStatus(hiveInteractiveServers, hiveWebUiPort);",
          "",
          "[Added Lines]",
          "319:       var hiveWebUiProtoFlag = configs.findProperty('type', 'hive-interactive-site').properties['hive.server2.webui.use.ssl'];",
          "320:       var hiveWebUiProto = hiveWebUiProtoFlag ? 'https' : 'http';",
          "322:       var useIps = configs.findProperty('type', 'hive-interactive-site').properties['hive.server2.leadertest.use.ip'];",
          "326:       if (useIps && notDefinedHostIp) {",
          "328:           self.getHiveServersInteractiveStatus(hiveInteractiveServers, hiveWebUiPort, hiveWebUiProto, useIps);",
          "331:         self.getHiveServersInteractiveStatus(hiveInteractiveServers, hiveWebUiPort, hiveWebUiProto, useIps);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:     });",
          "348:   },",
          "351:     var self = this;",
          "352:     hiveInteractiveServers.forEach(function (hiveInteractiveServer) {",
          "353:       App.ajax.send({",
          "354:         name: 'hiveServerInteractive.getStatus',",
          "355:         data: {",
          "358:         },",
          "359:         sender: self",
          "360:       }).success(function (isActive) {",
          "",
          "[Removed Lines]",
          "350:   getHiveServersInteractiveStatus: function(hiveInteractiveServers, hiveWebUiPort) {",
          "356:           hsiHost: self.hostNameIpMap[hiveInteractiveServer.host_name],",
          "357:           port: hiveWebUiPort",
          "",
          "[Added Lines]",
          "353:   getHiveServersInteractiveStatus: function(hiveInteractiveServers, hiveWebUiPort, hiveWebUiProto, useIps) {",
          "359:           hsiHost: useIps ? self.hostNameIpMap[hiveInteractiveServer.host_name] : hiveInteractiveServer.host_name,",
          "360:           port: hiveWebUiPort,",
          "361:           proto: hiveWebUiProto",
          "",
          "---------------"
        ],
        "ambari-web/app/utils/ajax/ajax.js||ambari-web/app/utils/ajax/ajax.js": [
          "File: ambari-web/app/utils/ajax/ajax.js -> ambari-web/app/utils/ajax/ajax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3220:     mock: '',",
          "3221:     format: function (data) {",
          "3222:       return {",
          "3224:       }",
          "3225:     }",
          "3226:   }",
          "",
          "[Removed Lines]",
          "3223:         url: 'http://' + data.hsiHost + ':' + data.port + '/leader'",
          "",
          "[Added Lines]",
          "3223:         url: data.proto + '://' + data.hsiHost + ':' + data.port + '/leader'",
          "",
          "---------------"
        ],
        "ambari-web/test/mappers/service_metrics_mapper_test.js||ambari-web/test/mappers/service_metrics_mapper_test.js": [
          "File: ambari-web/test/mappers/service_metrics_mapper_test.js -> ambari-web/test/mappers/service_metrics_mapper_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:       sinon.stub(configurationController, 'getCurrentConfigsBySites', function () {",
          "274:         return {done: function (callback) {",
          "275:           return callback([",
          "277:           ]);",
          "278:         }};",
          "279:       });",
          "",
          "[Removed Lines]",
          "276:             {type: 'hive-interactive-site', properties: {'hive.server2.webui.port': '1'}}",
          "",
          "[Added Lines]",
          "276:             {type: 'hive-interactive-site', properties: {'hive.server2.webui.port': '1', 'hive.server2.leadertest.use.ip': true}},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08be81d899f12102e3eabff5693776f2f98c06cc",
      "candidate_info": {
        "commit_hash": "08be81d899f12102e3eabff5693776f2f98c06cc",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/08be81d899f12102e3eabff5693776f2f98c06cc",
        "files": [
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/UIMappingConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/AuditLogsManager.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/common/LabelFallbackHandlerTest.java"
        ],
        "message": "AMBARI-24640. Log Search: support to remove suffixes from field names. (#2322)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/UIMappingConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/UIMappingConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/AuditLogsManager.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/AuditLogsManager.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/common/LabelFallbackHandlerTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/common/LabelFallbackHandlerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   }",
          "48:   public String fallbackIfRequired(String field, String label, boolean replaceUnderscore,",
          "50:     if (isEnabled() && StringUtils.isBlank(label)) {",
          "52:     }",
          "53:     return label;",
          "54:   }",
          "",
          "[Removed Lines]",
          "49:                                    boolean replaceUppercaseInWord, boolean capitalizeAll, List<String> prefixesToRemove) {",
          "51:       return fallback(field,replaceUnderscore, replaceUppercaseInWord, capitalizeAll, prefixesToRemove);",
          "",
          "[Added Lines]",
          "49:                                    boolean replaceUppercaseInWord, boolean capitalizeAll, List<String> prefixesToRemove, List<String> suffixesToRemove) {",
          "51:       return fallback(field,replaceUnderscore, replaceUppercaseInWord, capitalizeAll, prefixesToRemove, suffixesToRemove);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     return result;",
          "67:   }",
          "71:     if (!CollectionUtils.isEmpty(prefixesToRemove)) {",
          "72:       for (String prefix : prefixesToRemove) {",
          "73:         if (StringUtils.isNotBlank(field) && field.startsWith(prefix)) {",
          "75:         }",
          "76:       }",
          "77:     }",
          "79:   }",
          "81:   private String deUnderScore(String input) {",
          "",
          "[Removed Lines]",
          "69:   public String fallback(String field, boolean replaceUnderscore, boolean replaceUppercaseInWord, boolean capitalizeAll, List<String> prefixesToRemove) {",
          "70:     String fieldWithoutPrefix =  null;",
          "74:           fieldWithoutPrefix = field.substring(prefix.length());",
          "78:     return fallback(fieldWithoutPrefix != null ? fieldWithoutPrefix : field, replaceUnderscore, replaceUppercaseInWord, capitalizeAll);",
          "",
          "[Added Lines]",
          "69:   public String fallback(String field, boolean replaceUnderscore, boolean replaceUppercaseInWord, boolean capitalizeAll,",
          "70:                          List<String> prefixesToRemove,  List<String> suffixesToRemove) {",
          "71:     String fieldWithoutPrefixAndSuffix =  null;",
          "75:           fieldWithoutPrefixAndSuffix = field.substring(prefix.length());",
          "79:     if (!CollectionUtils.isEmpty(suffixesToRemove)) {",
          "80:       for (String suffix : suffixesToRemove) {",
          "81:         if (StringUtils.isNotBlank(field) && field.endsWith(suffix)) {",
          "82:           fieldWithoutPrefixAndSuffix = field.substring(0, field.length() - suffix.length());",
          "83:         }",
          "84:       }",
          "85:     }",
          "86:     return fallback(fieldWithoutPrefixAndSuffix != null ? fieldWithoutPrefixAndSuffix : field, replaceUnderscore, replaceUppercaseInWord, capitalizeAll);",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   public static final String SERVICE_FIELD_VISIBLE_DEFAULTS = \"log_message,level,logtime,type\";",
          "73:   public static final String SERVICE_FIELD_EXCLUDES_DEFAULTS = \"id,tags,text,message,seq_num,case_id,bundle_id,rowtype,event_count\";",
          "74:   public static final String SERVICE_FIELD_FILTERABLE_EXLUDE_DEFAULTS = \"\";",
          "78:   public static final String AUDIT_COMPONENT_LABELS_DEFAULTS = \"ambari:Ambari,hdfs:Hdfs,RangerAudit:Ranger\";",
          "",
          "[Removed Lines]",
          "75:   public static final String SERVICE_FIELD_FALLBACK_PREFIX_DEFAULTS = \"ws_,sdi_\";",
          "",
          "[Added Lines]",
          "75:   public static final String SERVICE_FIELD_FALLBACK_PREFIX_DEFAULTS = \"ws_,sdi_,std_\";",
          "76:   public static final String SERVICE_FIELD_FALLBACK_SUFFIX_DEFAULTS = \"_i,_l,_s,_b\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:   public static final String AUDIT_FIELD_FILTERABLE_EXCLUDES_DEFAULTS = \"\";",
          "87:   public static final String AUDIT_FIELD_FILTERABLE_EXCLUDES_COMMON_DEFAULTS = \"\";",
          "88:   public static final String AUDIT_FIELD_FALLBACK_PREFIX_DEFAULTS = \"ws_,std_\";",
          "91:   public static final String FACET_FIELD = \"facet.field\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:   public static final String AUDIT_FIELD_FALLBACK_SUFFIX_DEFAULTS = \"_i,_l,_s,_b\";",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/UIMappingConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/UIMappingConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/UIMappingConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/UIMappingConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "22: import org.apache.ambari.logsearch.config.api.LogSearchPropertyDescription;",
          "23: import org.springframework.beans.factory.annotation.Value;",
          "24: import org.springframework.context.annotation.Configuration;",
          "",
          "[Removed Lines]",
          "21: import org.apache.ambari.logsearch.common.LogSearchConstants;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import static org.apache.ambari.logsearch.common.LogSearchConstants.AUDIT_FIELD_EXCLUDES_COMMON_DEFAULTS;",
          "36: import static org.apache.ambari.logsearch.common.LogSearchConstants.AUDIT_FIELD_EXCLUDES_DEFAULTS;",
          "37: import static org.apache.ambari.logsearch.common.LogSearchConstants.AUDIT_FIELD_FALLBACK_PREFIX_DEFAULTS;",
          "38: import static org.apache.ambari.logsearch.common.LogSearchConstants.AUDIT_FIELD_FILTERABLE_EXCLUDES_COMMON_DEFAULTS;",
          "39: import static org.apache.ambari.logsearch.common.LogSearchConstants.AUDIT_FIELD_FILTERABLE_EXCLUDES_DEFAULTS;",
          "40: import static org.apache.ambari.logsearch.common.LogSearchConstants.AUDIT_FIELD_LABELS_DEFAULTS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import static org.apache.ambari.logsearch.common.LogSearchConstants.AUDIT_FIELD_FALLBACK_SUFFIX_DEFAULTS;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42: import static org.apache.ambari.logsearch.common.LogSearchConstants.AUDIT_FIELD_VISIBLE_DEFAULTS;",
          "43: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_PROPERTIES_FILE;",
          "44: import static org.apache.ambari.logsearch.common.LogSearchConstants.SERVICE_FIELD_FALLBACK_PREFIX_DEFAULTS;",
          "45: import static org.apache.ambari.logsearch.common.LogSearchConstants.SERVICE_FIELD_FILTERABLE_EXLUDE_DEFAULTS;",
          "46: import static org.apache.ambari.logsearch.common.LogSearchConstants.SERVICE_GROUP_LABELS_DEFAULTS;",
          "47: import static org.apache.ambari.logsearch.common.LogSearchConstants.SERVICE_COMPONENT_LABELS_DEFAULTS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import static org.apache.ambari.logsearch.common.LogSearchConstants.SERVICE_FIELD_FALLBACK_SUFFIX_DEFAULTS;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "222:   )",
          "223:   private List<String> serviceFieldFallbackPrefixes;",
          "226:   @LogSearchPropertyDescription(",
          "227:     name = \"logsearch.web.labels.service_logs.field.fallback.prefixes\",",
          "228:     description = \"List of prefixes that should be removed during fallback of audit field labels.\",",
          "",
          "[Removed Lines]",
          "225:   @Value(\"#{propertiesSplitter.parseList('${logsearch.web.labels.service_logs.field.fallback.prefixes:\" + AUDIT_FIELD_FALLBACK_PREFIX_DEFAULTS + \"}')}\")",
          "",
          "[Added Lines]",
          "226:   @Value(\"#{propertiesSplitter.parseList('${logsearch.web.labels.audit_logs.field.fallback.prefixes:\" + AUDIT_FIELD_FALLBACK_PREFIX_DEFAULTS + \"}')}\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "232:   )",
          "233:   private List<String> auditFieldFallbackPrefixes;",
          "235:   private final Map<String, Map<String, String>> mergedAuditFieldLabelMap = new HashMap<>();",
          "237:   private final Map<String, List<String>> mergedAuditFieldVisibleMap = new HashMap<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:   @Value(\"#{propertiesSplitter.parseList('${logsearch.web.labels.service_logs.field.fallback.suffixes:\" + SERVICE_FIELD_FALLBACK_PREFIX_DEFAULTS +\"}')}\")",
          "237:   @LogSearchPropertyDescription(",
          "238:     name = \"logsearch.web.labels.service_logs.field.fallback.suffixes\",",
          "239:     description = \"List of suffixes that should be removed during fallback of service field labels.\",",
          "240:     examples = {\"_i,_l,_s,_b\"},",
          "241:     defaultValue = SERVICE_FIELD_FALLBACK_SUFFIX_DEFAULTS,",
          "242:     sources = {LOGSEARCH_PROPERTIES_FILE}",
          "243:   )",
          "244:   private List<String> serviceFieldFallbackSuffixes;",
          "246:   @Value(\"#{propertiesSplitter.parseList('${logsearch.web.labels.audit_logs.field.fallback.suffixes:\" + AUDIT_FIELD_FALLBACK_PREFIX_DEFAULTS + \"}')}\")",
          "247:   @LogSearchPropertyDescription(",
          "248:     name = \"logsearch.web.labels.service_logs.field.fallback.suffixes\",",
          "249:     description = \"List of suffixes that should be removed during fallback of audit field labels.\",",
          "250:     examples = {\"_i,_l,_s,_b\"},",
          "251:     defaultValue = AUDIT_FIELD_FALLBACK_SUFFIX_DEFAULTS,",
          "252:     sources = {LOGSEARCH_PROPERTIES_FILE}",
          "253:   )",
          "254:   private List<String> auditFieldFallbackSuffixes;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "368:     this.serviceFieldFilterableExcludesList = serviceFieldFilterableExcludesList;",
          "369:   }",
          "371:   public Map<String, List<String>> getMergedAuditFieldVisibleMap() {",
          "372:     return mergedAuditFieldVisibleMap;",
          "373:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:   public List<String> getServiceFieldFallbackSuffixes() {",
          "393:     return serviceFieldFallbackSuffixes;",
          "394:   }",
          "396:   public void setServiceFieldFallbackSuffixes(List<String> serviceFieldFallbackSuffixes) {",
          "397:     this.serviceFieldFallbackSuffixes = serviceFieldFallbackSuffixes;",
          "398:   }",
          "400:   public List<String> getAuditFieldFallbackSuffixes() {",
          "401:     return auditFieldFallbackSuffixes;",
          "402:   }",
          "404:   public void setAuditFieldFallbackSuffixes(List<String> auditFieldFallbackSuffixes) {",
          "405:     this.auditFieldFallbackSuffixes = auditFieldFallbackSuffixes;",
          "406:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/AuditLogsManager.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/AuditLogsManager.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/AuditLogsManager.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/AuditLogsManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:           String fieldLabel = fieldLabelMap.get(componentName) != null ? fieldLabelMap.get(componentName).get(field): null;",
          "181:           String fallbackedFieldLabel = labelFallbackHandler.fallbackIfRequired(field, fieldLabel,",
          "182:             true, true, true,",
          "185:           Boolean excludeFromFilter = fieldFilterableExcludeMap.get(componentName) != null && fieldFilterableExcludeMap.get(componentName).contains(field);",
          "186:           Boolean visible = fieldVisibleeMap.get(componentName) != null && fieldVisibleeMap.get(componentName).contains(field);",
          "",
          "[Removed Lines]",
          "183:             uiMappingConfig.getAuditFieldFallbackPrefixes());",
          "",
          "[Added Lines]",
          "183:             uiMappingConfig.getAuditFieldFallbackPrefixes(),",
          "184:             uiMappingConfig.getAuditFieldFallbackSuffixes());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:         Boolean excludeFromFilter = commonFieldFilterableExcludeList.contains(field);",
          "199:         String fallbackedFieldLabel = labelFallbackHandler.fallbackIfRequired(field, fieldLabel,",
          "200:           true, true, true,",
          "202:         defaults.add(new FieldMetadata(field, fallbackedFieldLabel, !excludeFromFilter, visible));",
          "203:       }",
          "204:     }",
          "",
          "[Removed Lines]",
          "201:           uiMappingConfig.getAuditFieldFallbackPrefixes());",
          "",
          "[Added Lines]",
          "202:           uiMappingConfig.getAuditFieldFallbackPrefixes(), uiMappingConfig.getAuditFieldFallbackSuffixes());",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:           labelFallbackHandler.fallbackIfRequired(",
          "456:             e.getKey(), uiMappingConfig.getServiceFieldLabels().get(e.getKey()),",
          "457:             true, false, true,",
          "459:           !uiMappingConfig.getServiceFieldFilterableExcludesList().contains(e.getKey()),",
          "460:           uiMappingConfig.getServiceFieldVisibleList().contains(e.getKey())))",
          "461:       .collect(Collectors.toList());",
          "",
          "[Removed Lines]",
          "458:             uiMappingConfig.getServiceFieldFallbackPrefixes()),",
          "",
          "[Added Lines]",
          "458:             uiMappingConfig.getServiceFieldFallbackPrefixes(),",
          "459:             uiMappingConfig.getServiceFieldFallbackSuffixes()),",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/common/LabelFallbackHandlerTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/common/LabelFallbackHandlerTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/common/LabelFallbackHandlerTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/common/LabelFallbackHandlerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     String testInput = \"my_field\";",
          "48:     assertEquals(\"spec label\", result);",
          "49:   }",
          "",
          "[Removed Lines]",
          "46:     String result = underTest.fallbackIfRequired(testInput, \"spec label\", true, false, true, null);",
          "",
          "[Added Lines]",
          "46:     String result = underTest.fallbackIfRequired(testInput, \"spec label\", true, false, true, null, null);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:   @Test",
          "110:   public void testFallbackWithRemovingPrefixes() {",
          "117:   }",
          "119:   @Test",
          "",
          "[Removed Lines]",
          "112:     String testInput = \"ws_request_id\";",
          "114:     String result = underTest.fallback(testInput, true, true, true, Arrays.asList(\"ws_\", \"std_\"));",
          "116:     assertEquals(\"Request Id\", result);",
          "",
          "[Added Lines]",
          "112:     String testInput1 = \"ws_request_id\";",
          "113:     String testInput2 = \"std_request_username\";",
          "115:     String result1 = underTest.fallback(testInput1, true, true, true, Arrays.asList(\"ws_\", \"std_\"), null);",
          "116:     String result2 = underTest.fallback(testInput2, true, true, true, Arrays.asList(\"ws_\", \"std_\"), null);",
          "118:     assertEquals(\"Request Id\", result1);",
          "119:     assertEquals(\"Request Username\", result2);",
          "120:   }",
          "122:   @Test",
          "123:   public void testFallbackWithRemovingSuffixes() {",
          "125:     String testInput1 = \"request_id_i\";",
          "126:     String testInput2 = \"request_username_s\";",
          "128:     String result1 = underTest.fallback(testInput1, true, true, true, null, Arrays.asList(\"_i\", \"_s\"));",
          "129:     String result2 = underTest.fallback(testInput2, true, true, true, null, Arrays.asList(\"_i\", \"_s\"));",
          "131:     assertEquals(\"Request Id\", result1);",
          "132:     assertEquals(\"Request Username\", result2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:     String testInput = \"request_id\";",
          "126:     assertEquals(\"Request Id\", result);",
          "127:   }",
          "",
          "[Removed Lines]",
          "124:     String result = underTest.fallback(testInput, true, true, true, Arrays.asList(\"ws_\", \"std_\"));",
          "",
          "[Added Lines]",
          "140:     String result = underTest.fallback(testInput, true, true, true, Arrays.asList(\"ws_\", \"std_\"), null);",
          "",
          "---------------"
        ]
      }
    }
  ]
}