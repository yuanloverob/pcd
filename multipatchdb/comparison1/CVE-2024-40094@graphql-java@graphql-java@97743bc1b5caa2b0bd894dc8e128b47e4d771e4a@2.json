{
  "cve_id": "CVE-2024-40094",
  "cve_desc": "GraphQL Java (aka graphql-java) before 21.5 does not properly consider ExecutableNormalizedFields (ENFs) as part of preventing denial of service via introspection queries. 20.9 and 19.11 are also fixed versions.",
  "repo": "graphql-java/graphql-java",
  "patch_hash": "97743bc1b5caa2b0bd894dc8e128b47e4d771e4a",
  "patch_info": {
    "commit_hash": "97743bc1b5caa2b0bd894dc8e128b47e4d771e4a",
    "repo": "graphql-java/graphql-java",
    "commit_url": "https://github.com/graphql-java/graphql-java/commit/97743bc1b5caa2b0bd894dc8e128b47e4d771e4a",
    "files": [
      "src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ],
    "message": "Merge pull request #3539 from graphql-java/max-enf-count\n\nRestrict the number of ENFs created and take advantage in GoodFaith introspection",
    "before_after_code_files": [
      "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ]
  },
  "patch_diff": {
    "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java": [
      "File: src/main/java/graphql/execution/ExecutionContext.java -> src/main/java/graphql/execution/ExecutionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:         this.errors.set(builder.errors);",
      "87:         this.localContext = builder.localContext;",
      "88:         this.executionInput = builder.executionInput;",
      "90:     }",
      "",
      "[Removed Lines]",
      "89:         queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "[Added Lines]",
      "89:         this.queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java": [
      "File: src/main/java/graphql/introspection/GoodFaithIntrospection.java -> src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: import java.util.Optional;",
      "19: import java.util.concurrent.atomic.AtomicBoolean;",
      "21: import static graphql.schema.FieldCoordinates.coordinates;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: import static graphql.normalized.ExecutableNormalizedOperationFactory.Options;",
      "22: import static graphql.normalized.ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:     public static final String GOOD_FAITH_INTROSPECTION_DISABLED = \"GOOD_FAITH_INTROSPECTION_DISABLED\";",
      "46:     private static final AtomicBoolean ENABLED_STATE = new AtomicBoolean(true);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     public static final int GOOD_FAITH_MAX_FIELDS_COUNT = 500;",
      "56:     public static final int GOOD_FAITH_MAX_DEPTH_COUNT = 20;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76:     public static Optional<ExecutionResult> checkIntrospection(ExecutionContext executionContext) {",
      "77:         if (isIntrospectionEnabled(executionContext.getGraphQLContext())) {",
      "79:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToENFs = operation.getCoordinatesToNormalizedFields();",
      "80:             for (Map.Entry<FieldCoordinates, Integer> entry : ALLOWED_FIELD_INSTANCES.entrySet()) {",
      "81:                 FieldCoordinates coordinates = entry.getKey();",
      "",
      "[Removed Lines]",
      "78:             ExecutableNormalizedOperation operation = executionContext.getNormalizedQueryTree().get();",
      "",
      "[Added Lines]",
      "88:             ExecutableNormalizedOperation operation = mkOperation(executionContext);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "90:         return Optional.empty();",
      "91:     }",
      "93:     private static boolean isIntrospectionEnabled(GraphQLContext graphQlContext) {",
      "94:         if (!isEnabledJvmWide()) {",
      "95:             return false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     private static ExecutableNormalizedOperation mkOperation(ExecutionContext executionContext) {",
      "112:         Options options = Options.defaultOptions()",
      "113:                 .maxFieldsCount(GOOD_FAITH_MAX_FIELDS_COUNT)",
      "114:                 .maxChildrenDepth(GOOD_FAITH_MAX_DEPTH_COUNT)",
      "115:                 .locale(executionContext.getLocale())",
      "116:                 .graphQLContext(executionContext.getGraphQLContext());",
      "118:         return createExecutableNormalizedOperation(executionContext.getGraphQLSchema(),",
      "119:                 executionContext.getOperationDefinition(),",
      "120:                 executionContext.getFragmentsByName(),",
      "121:                 executionContext.getCoercedVariables(),",
      "122:                 options);",
      "124:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java": [
      "File: src/main/java/graphql/introspection/Introspection.java -> src/main/java/graphql/introspection/Introspection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:     public static Optional<ExecutionResult> isIntrospectionSensible(MergedSelectionSet mergedSelectionSet, ExecutionContext executionContext) {",
      "117:         GraphQLContext graphQLContext = executionContext.getGraphQLContext();",
      "128:             }",
      "129:         }",
      "132:             return GoodFaithIntrospection.checkIntrospection(executionContext);",
      "133:         }",
      "134:         return Optional.empty();",
      "",
      "[Removed Lines]",
      "118:         MergedField schemaField = mergedSelectionSet.getSubField(SchemaMetaFieldDef.getName());",
      "119:         if (schemaField != null) {",
      "120:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "121:                 return mkDisabledError(schemaField);",
      "122:             }",
      "123:         }",
      "124:         MergedField typeField = mergedSelectionSet.getSubField(TypeMetaFieldDef.getName());",
      "125:         if (typeField != null) {",
      "126:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "127:                 return mkDisabledError(typeField);",
      "130:         if (schemaField != null || typeField != null)",
      "131:         {",
      "",
      "[Added Lines]",
      "119:         boolean isIntrospection = false;",
      "120:         for (String key : mergedSelectionSet.getKeys()) {",
      "121:             String fieldName = mergedSelectionSet.getSubField(key).getName();",
      "122:             if (fieldName.equals(SchemaMetaFieldDef.getName())",
      "123:                     || fieldName.equals(TypeMetaFieldDef.getName())) {",
      "124:                 if (!isIntrospectionEnabled(graphQLContext)) {",
      "125:                     return mkDisabledError(mergedSelectionSet.getSubField(key));",
      "126:                 }",
      "127:                 isIntrospection = true;",
      "128:                 break;",
      "131:         if (isIntrospection) {",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperation.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:     private final Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField;",
      "32:     private final Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives;",
      "33:     private final ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields;",
      "35:     public ExecutableNormalizedOperation(",
      "36:             OperationDefinition.Operation operation,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34:     private final int operationFieldCount;",
      "35:     private final int operationDepth;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39:             ImmutableListMultimap<Field, ExecutableNormalizedField> fieldToNormalizedField,",
      "40:             Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
      "41:             Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives,",
      "44:         this.operation = operation;",
      "45:         this.operationName = operationName;",
      "46:         this.topLevelFields = topLevelFields;",
      "",
      "[Removed Lines]",
      "42:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields",
      "43:     ) {",
      "",
      "[Added Lines]",
      "44:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
      "45:             int operationFieldCount,",
      "46:             int operationDepth) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "48:         this.normalizedFieldToMergedField = normalizedFieldToMergedField;",
      "49:         this.normalizedFieldToQueryDirectives = normalizedFieldToQueryDirectives;",
      "50:         this.coordinatesToNormalizedFields = coordinatesToNormalizedFields;",
      "51:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:         this.operationFieldCount = operationFieldCount;",
      "55:         this.operationDepth = operationDepth;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "64:         return operationName;",
      "65:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75:     public int getOperationFieldCount() {",
      "76:         return operationFieldCount;",
      "77:     }",
      "82:     public int getOperationDepth() {",
      "83:         return operationDepth;",
      "84:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "64: import static graphql.util.FpKit.filterSet;",
      "65: import static graphql.util.FpKit.groupingBy;",
      "66: import static graphql.util.FpKit.intersection;",
      "67: import static java.util.Collections.singleton;",
      "68: import static java.util.Collections.singletonList;",
      "69: import static java.util.stream.Collectors.toCollection;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67: import static java.util.Collections.max;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         private final GraphQLContext graphQLContext;",
      "81:         private final Locale locale;",
      "82:         private final int maxChildrenDepth;",
      "84:         private final boolean deferSupport;",
      "86:         private Options(GraphQLContext graphQLContext,",
      "87:                         Locale locale,",
      "88:                         int maxChildrenDepth,",
      "89:                         boolean deferSupport) {",
      "90:             this.graphQLContext = graphQLContext;",
      "91:             this.locale = locale;",
      "92:             this.maxChildrenDepth = maxChildrenDepth;",
      "93:             this.deferSupport = deferSupport;",
      "94:         }",
      "96:         public static Options defaultOptions() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         private final int maxFieldsCount;",
      "91:                         int maxFieldsCount,",
      "97:             this.maxFieldsCount = maxFieldsCount;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "98:                     GraphQLContext.getDefault(),",
      "99:                     Locale.getDefault(),",
      "100:                     Integer.MAX_VALUE,",
      "101:                     false);",
      "102:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:                     Integer.MAX_VALUE,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "113:         public Options locale(Locale locale) {",
      "115:         }",
      "",
      "[Removed Lines]",
      "114:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.deferSupport);",
      "",
      "[Added Lines]",
      "119:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "126:         public Options graphQLContext(GraphQLContext graphQLContext) {",
      "128:         }",
      "",
      "[Removed Lines]",
      "127:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.deferSupport);",
      "",
      "[Added Lines]",
      "132:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "138:         public Options maxChildrenDepth(int maxChildrenDepth) {",
      "140:         }",
      "",
      "[Removed Lines]",
      "139:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.deferSupport);",
      "",
      "[Added Lines]",
      "144:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
      "145:         }",
      "155:         public Options maxFieldsCount(int maxFieldsCount) {",
      "156:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, maxFieldsCount, this.deferSupport);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "149:         @ExperimentalApi",
      "150:         public Options deferSupport(boolean deferSupport) {",
      "152:         }",
      "",
      "[Removed Lines]",
      "151:             return new Options(this.graphQLContext, this.locale, this.maxChildrenDepth, deferSupport);",
      "",
      "[Added Lines]",
      "168:             return new Options(this.graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount, deferSupport);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "178:             return maxChildrenDepth;",
      "179:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "198:         public int getMaxFieldsCount() {",
      "199:             return maxFieldsCount;",
      "200:         }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "266:                                                                                     OperationDefinition operationDefinition,",
      "267:                                                                                     Map<String, FragmentDefinition> fragments,",
      "268:                                                                                     CoercedVariables coercedVariableValues) {",
      "269:         return new ExecutableNormalizedOperationFactoryImpl(",
      "270:                 graphQLSchema,",
      "271:                 operationDefinition,",
      "272:                 fragments,",
      "273:                 coercedVariableValues,",
      "274:                 null,",
      "276:         ).createNormalizedQueryImpl();",
      "277:     }",
      "",
      "[Removed Lines]",
      "275:                 Options.defaultOptions()",
      "",
      "[Added Lines]",
      "290:         return createExecutableNormalizedOperation(graphQLSchema,",
      "291:                 operationDefinition,",
      "292:                 fragments,",
      "293:                 coercedVariableValues,",
      "294:                 Options.defaultOptions());",
      "295:     }",
      "308:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "309:                                                                                     OperationDefinition operationDefinition,",
      "310:                                                                                     Map<String, FragmentDefinition> fragments,",
      "311:                                                                                     CoercedVariables coercedVariableValues,",
      "312:                                                                                     Options options) {",
      "319:                 options",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "386:         private final ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
      "387:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
      "388:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
      "390:         private ExecutableNormalizedOperationFactoryImpl(",
      "391:                 GraphQLSchema graphQLSchema,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "433:         private int fieldCount = 0;",
      "434:         private int maxDepthSeen = 0;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "420:                 updateFieldToNFMap(topLevel, fieldAndAstParents);",
      "421:                 updateCoordinatedToNFMap(topLevel);",
      "424:                         topLevel,",
      "425:                         fieldAndAstParents,",
      "426:                         1);",
      "427:             }",
      "429:             for (PossibleMerger possibleMerger : possibleMergerList) {",
      "",
      "[Removed Lines]",
      "423:                 buildFieldWithChildren(",
      "",
      "[Added Lines]",
      "469:                 int depthSeen = buildFieldWithChildren(",
      "473:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "437:                     fieldToNormalizedField.build(),",
      "438:                     normalizedFieldToMergedField.build(),",
      "439:                     normalizedFieldToQueryDirectives.build(),",
      "441:             );",
      "442:         }",
      "",
      "[Removed Lines]",
      "440:                     coordinatesToNormalizedFields.build()",
      "",
      "[Added Lines]",
      "487:                     coordinatesToNormalizedFields.build(),",
      "488:                     fieldCount,",
      "489:                     maxDepthSeen",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "448:             normalizedFieldToMergedField.put(enf, mergedFld);",
      "449:         }",
      "452:                                             ImmutableList<FieldAndAstParent> fieldAndAstParents,",
      "453:                                             int curLevel) {",
      "458:             CollectNFResult nextLevel = collectFromMergedField(executableNormalizedField, fieldAndAstParents, curLevel + 1);",
      "460:             for (ExecutableNormalizedField childENF : nextLevel.children) {",
      "461:                 executableNormalizedField.addChild(childENF);",
      "462:                 ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
      "",
      "[Removed Lines]",
      "451:         private void buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
      "454:             if (curLevel > this.options.getMaxChildrenDepth()) {",
      "455:                 throw new AbortExecutionException(\"Maximum query depth exceeded \" + curLevel + \" > \" + this.options.getMaxChildrenDepth());",
      "456:             }",
      "",
      "[Added Lines]",
      "500:         private int buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
      "503:             checkMaxDepthExceeded(curLevel);",
      "507:             int maxDepthSeen = curLevel;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "467:                 updateFieldToNFMap(childENF, childFieldAndAstParents);",
      "468:                 updateCoordinatedToNFMap(childENF);",
      "471:                         childFieldAndAstParents,",
      "472:                         curLevel + 1);",
      "473:             }",
      "474:         }",
      "",
      "[Removed Lines]",
      "470:                 buildFieldWithChildren(childENF,",
      "",
      "[Added Lines]",
      "518:                 int depthSeen = buildFieldWithChildren(childENF,",
      "521:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
      "523:                 checkMaxDepthExceeded(maxDepthSeen);",
      "524:             }",
      "525:             return maxDepthSeen;",
      "526:         }",
      "528:         private void checkMaxDepthExceeded(int depthSeen) {",
      "529:             if (depthSeen > this.options.getMaxChildrenDepth()) {",
      "530:                 throw new AbortExecutionException(\"Maximum query depth exceeded. \" + depthSeen + \" > \" + this.options.getMaxChildrenDepth());",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "578:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
      "579:                                                    int level,",
      "580:                                                    ExecutableNormalizedField parent) {",
      "581:             Field field;",
      "582:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
      "583:             field = collectedFieldGroup.fields.iterator().next().field;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "640:             this.fieldCount++;",
      "641:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
      "642:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
      "643:             }",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "764:         private NormalizedDeferredExecution buildDeferredExecution(",
      "765:                 List<Directive> directives,",
      "768:                 return null;",
      "769:             }",
      "",
      "[Removed Lines]",
      "766:                 Set<GraphQLObjectType> newPossibleObjects)  {",
      "767:             if(!options.deferSupport) {",
      "",
      "[Added Lines]",
      "828:                 Set<GraphQLObjectType> newPossibleObjects) {",
      "829:             if (!options.deferSupport) {",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy": [
      "File: src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy -> src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "893:         given:",
      "894:         def graphQLSchema = createComplexSchema()",
      "896:         when:",
      "898:             {",
      "899:                 nodeType: __type(name: \"Node\") {",
      "900:                     possibleTypes {",
      "",
      "[Removed Lines]",
      "897:         def result = GraphQL.newGraphQL(graphQLSchema).build().execute(\"\"\"",
      "",
      "[Added Lines]",
      "896:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
      "899:         String query = \"\"\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "902:                         name",
      "903:                     }",
      "904:                 }",
      "906:                     possibleTypes {",
      "907:                         kind",
      "908:                         name",
      "",
      "[Removed Lines]",
      "905:                 resourceType: __type(name: \"Resource\") {",
      "",
      "[Added Lines]",
      "907:             }",
      "908:         \"\"\"",
      "909:         def result = graphQL.execute(query)",
      "911:         then:",
      "912:         !result.errors",
      "913:         result.data == [",
      "914:                 nodeType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "915:         ]",
      "917:         when:",
      "918:         query = \"\"\"",
      "919:         {",
      "920:             resourceType: __type(name: \"Resource\") {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "911:                         kind",
      "912:                         name",
      "913:                     }",
      "916:                     interfaces {",
      "917:                         kind",
      "918:                         name",
      "919:                     }",
      "920:                 }",
      "924:         then:",
      "925:         !result.errors",
      "926:         result.data == [",
      "928:                 imageType   : [interfaces: [[kind: 'INTERFACE', name: 'Resource'], [kind: 'INTERFACE', name: 'Node']]],",
      "930:         ]",
      "931:     }",
      "",
      "[Removed Lines]",
      "914:                 }",
      "915:                 imageType: __type(name: \"Image\") {",
      "921:             }",
      "922:         \"\"\")",
      "927:                 nodeType    : [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "929:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "",
      "[Added Lines]",
      "929:                 }",
      "930:         }",
      "931:         \"\"\"",
      "932:         result = graphQL.execute(query)",
      "934:         then:",
      "935:         !result.errors",
      "936:         result.data == [",
      "937:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "938:         ]",
      "940:         when:",
      "942:         query = \"\"\"",
      "943:         {",
      "944:             imageType: __type(name: \"Image\") {",
      "950:         }",
      "951:         \"\"\"",
      "952:         result = graphQL.execute(query)",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy": [
      "File: src/test/groovy/graphql/UnionTest.groovy -> src/test/groovy/graphql/UnionTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: class UnionTest extends Specification {",
      "8:         def query = \"\"\"",
      "9:             {",
      "10:                 Named: __type(name: \"Named\") {",
      "",
      "[Removed Lines]",
      "7:     def \"can introspect on union and intersection types\"() {",
      "",
      "[Added Lines]",
      "7:     def \"can introspect on union types\"() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15:                   possibleTypes { name }",
      "16:                   enumValues { name }",
      "17:                   inputFields { name }",
      "27:                 }",
      "28:             }",
      "29:             \"\"\"",
      "",
      "[Removed Lines]",
      "18:             }",
      "19:                 Pet: __type(name: \"Pet\") {",
      "20:                   kind",
      "21:                   name",
      "22:                   fields { name }",
      "23:                   interfaces { name }",
      "24:                   possibleTypes { name }",
      "25:                   enumValues { name }",
      "26:                   inputFields { name }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42:                 ],",
      "43:                 enumValues   : null,",
      "44:                 inputFields  : null",
      "47:                                       kind         : 'UNION',",
      "48:                                       name         : 'Pet',",
      "49:                                       fields       : null,",
      "",
      "[Removed Lines]",
      "45:         ],",
      "46:                               Pet  : [",
      "",
      "[Added Lines]",
      "36:         ]]",
      "37:         when:",
      "38:         def executionResult = GraphQL.newGraphQL(GarfieldSchema.GarfieldSchema).build().execute(query)",
      "40:         then:",
      "41:         executionResult.data == expectedResult",
      "44:     }",
      "46:     def \"can introspect on intersection types\"() {",
      "47:         def query = \"\"\"",
      "48:             {",
      "49:                 Pet: __type(name: \"Pet\") {",
      "50:                   kind",
      "51:                   name",
      "52:                   fields { name }",
      "53:                   interfaces { name }",
      "54:                   possibleTypes { name }",
      "55:                   enumValues { name }",
      "56:                   inputFields { name }",
      "57:                 }",
      "58:             }",
      "59:             \"\"\"",
      "61:         def expectedResult = [Pet  : [",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy": [
      "File: src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy -> src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.ExecutionInput",
      "4: import graphql.ExecutionResult",
      "5: import graphql.TestUtil",
      "6: import spock.lang.Specification",
      "8: class GoodFaithIntrospectionInstrumentationTest extends Specification {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.AbortExecutionException",
      "7: import graphql.execution.CoercedVariables",
      "8: import graphql.language.Document",
      "9: import graphql.normalized.ExecutableNormalizedOperationFactory",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "12:     def setup() {",
      "13:         GoodFaithIntrospection.enabledJvmWide(true)",
      "14:     }",
      "15:     def cleanup() {",
      "16:         GoodFaithIntrospection.enabledJvmWide(true)",
      "17:     }",
      "19:     def \"test asking for introspection in good faith\"() {",
      "21:         when:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:     def \"standard introspection query is inside limits just in general\"() {",
      "26:         when:",
      "27:         Document document = TestUtil.toDocument(IntrospectionQuery.INTROSPECTION_QUERY)",
      "28:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(), document,",
      "29:                 \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
      "31:         then:",
      "32:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 189",
      "33:         eno.getOperationDepth() < GoodFaithIntrospection.GOOD_FAITH_MAX_DEPTH_COUNT  // currently 13",
      "34:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "69:                 alias1 :  __type(name : \"t1\") { name }",
      "70:             }",
      "71:         \"\"\"                                                                                           | _",
      "73:         \"\"\" query badActor {",
      "74:                 __schema { types { name} }",
      "75:                 alias1 : __schema { types { name} }",
      "76:             }",
      "77:         \"\"\"                                                                                           | _",
      "78:     }",
      "80:     def \"mixed general queries and introspections will be stopped anyway\"() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "90:         \"\"\" query badActor {",
      "91:                 a1: __type(name : \"t\") { name }",
      "92:                 a2 :  __type(name : \"t1\") { name }",
      "93:             }",
      "94:         \"\"\"                                                                                           | _",
      "102:         \"\"\" query badActor {",
      "103:                 a1: __schema { types { name} }",
      "104:                 a2 : __schema { types { name} }",
      "105:             }",
      "106:         \"\"\"                                                                                           | _",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "133:         !er.errors.isEmpty()",
      "134:         er.errors[0] instanceof GoodFaithIntrospection.BadFaithIntrospectionError",
      "135:     }",
      "136: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "167:     def \"can stop deep queries\"() {",
      "169:         when:",
      "170:         def query = createDeepQuery(depth)",
      "171:         def then = System.currentTimeMillis()",
      "172:         ExecutionResult er = graphql.execute(query)",
      "173:         def ms = System.currentTimeMillis()-then",
      "175:         then:",
      "176:         !er.errors.isEmpty()",
      "177:         er.errors[0].class == targetError",
      "178:         er.data == null // it stopped hard - it did not continue to normal business",
      "179:         println \"Took \" + ms + \"ms\"",
      "181:         where:",
      "182:         depth | targetError",
      "183:         2     | GoodFaithIntrospection.BadFaithIntrospectionError.class",
      "184:         10    | AbortExecutionException.class",
      "185:         15    | AbortExecutionException.class",
      "186:         20    | AbortExecutionException.class",
      "187:         25    | AbortExecutionException.class",
      "188:         50    | AbortExecutionException.class",
      "189:         100    | AbortExecutionException.class",
      "190:     }",
      "192:     String createDeepQuery(int depth = 25) {",
      "193:         def result = \"\"\"",
      "194: query test {",
      "195:   __schema {",
      "196:     types {",
      "197:       ...F1",
      "198:     }",
      "199:   }",
      "200: }",
      "201: \"\"\"",
      "202:         for (int i = 1; i < depth; i++) {",
      "203:             result += \"\"\"",
      "204:         fragment F$i on __Type {",
      "205:           fields {",
      "206:             type {",
      "207:               ...F${i + 1}",
      "208:             }",
      "209:           }",
      "211:   ofType {",
      "212:     ...F${i + 1}",
      "213:   }",
      "214: }",
      "217: \"\"\"",
      "218:         }",
      "219:         result += \"\"\"",
      "220:         fragment F$depth on __Type {",
      "221:           fields {",
      "222:             type {",
      "223: name",
      "224:             }",
      "225:           }",
      "226: }",
      "229: \"\"\"",
      "230:         return result",
      "231:     }",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
      "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.ExecutionInput",
      "4: import graphql.GraphQL",
      "5: import graphql.TestUtil",
      "6: import graphql.execution.CoercedVariables",
      "7: import graphql.execution.MergedField",
      "8: import graphql.execution.RawVariables",
      "9: import graphql.execution.directives.QueryAppliedDirective",
      "10: import graphql.language.Document",
      "11: import graphql.language.Field",
      "12: import graphql.language.FragmentDefinition",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.AbortExecutionException",
      "11: import graphql.introspection.IntrospectionQuery",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2876:         noExceptionThrown()",
      "2877:     }",
      "2879:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperation(",
      "2880:             GraphQLSchema graphQLSchema,",
      "2881:             Document document,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2880:     def \"big query exceeding fields count\"() {",
      "2881:         String schema = \"\"\"",
      "2882:         type Query {",
      "2883:             animal: Animal",
      "2884:         }",
      "2885:         interface Animal {",
      "2886:             name: String",
      "2887:             friends: [Friend]",
      "2888:         }",
      "2889:         union Pet = Dog | Cat",
      "2890:         type Friend {",
      "2891:             name: String",
      "2892:             isBirdOwner: Boolean",
      "2893:             isCatOwner: Boolean",
      "2894:             pets: [Pet]",
      "2895:         }",
      "2896:         type Bird implements Animal {",
      "2897:             name: String",
      "2898:             friends: [Friend]",
      "2899:         }",
      "2900:         type Cat implements Animal {",
      "2901:             name: String",
      "2902:             friends: [Friend]",
      "2903:             breed: String",
      "2904:         }",
      "2905:         type Dog implements Animal {",
      "2906:             name: String",
      "2907:             breed: String",
      "2908:             friends: [Friend]",
      "2909:         }",
      "2910:         \"\"\"",
      "2912:         def garbageFields = IntStream.range(0, 1000)",
      "2913:                 .mapToObj {",
      "2914:                     \"\"\"test_$it: friends { name }\"\"\"",
      "2915:                 }",
      "2916:                 .collect(Collectors.joining(\"\\n\"))",
      "2918:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2920:         String query = \"\"\"",
      "2921:         {",
      "2922:             animal {",
      "2923:                 name",
      "2924:                 otherName: name",
      "2925:                 ... on Animal {",
      "2926:                     name",
      "2927:                 }",
      "2928:                 ... on Cat {",
      "2929:                     name",
      "2930:                     friends {",
      "2931:                         ... on Friend {",
      "2932:                             isCatOwner",
      "2933:                             pets {",
      "2934:                                 ... on Dog {",
      "2935:                                     name",
      "2936:                                 }",
      "2937:                             }",
      "2938:                         }",
      "2939:                     }",
      "2940:                 }",
      "2941:                 ... on Bird {",
      "2942:                     friends {",
      "2943:                         isBirdOwner",
      "2944:                     }",
      "2945:                     friends {",
      "2946:                         name",
      "2947:                         pets {",
      "2948:                             ... on Cat {",
      "2949:                                 breed",
      "2950:                             }",
      "2951:                         }",
      "2952:                     }",
      "2953:                 }",
      "2954:                 ... on Dog {",
      "2955:                     name",
      "2956:                 }",
      "2957:                 $garbageFields",
      "2958:             }",
      "2959:         }",
      "2960:         \"\"\"",
      "2962:         assertValidQuery(graphQLSchema, query)",
      "2964:         Document document = TestUtil.parseQuery(query)",
      "2966:         when:",
      "2967:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2968:                 graphQLSchema,",
      "2969:                 document,",
      "2970:                 null,",
      "2971:                 RawVariables.emptyVariables(),",
      "2972:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(2013))",
      "2974:         then:",
      "2975:         def e = thrown(AbortExecutionException)",
      "2976:         e.message == \"Maximum field count exceeded. 2014 > 2013\"",
      "2977:     }",
      "2979:     def \"small query exceeding fields count\"() {",
      "2980:         String schema = \"\"\"",
      "2981:         type Query {",
      "2982:             hello: String",
      "2983:         }",
      "2984:         \"\"\"",
      "2986:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2988:         String query = \"\"\" {hello a1: hello}\"\"\"",
      "2990:         assertValidQuery(graphQLSchema, query)",
      "2992:         Document document = TestUtil.parseQuery(query)",
      "2994:         when:",
      "2995:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2996:                 graphQLSchema,",
      "2997:                 document,",
      "2998:                 null,",
      "2999:                 RawVariables.emptyVariables(),",
      "3000:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(1))",
      "3002:         then:",
      "3003:         def e = thrown(AbortExecutionException)",
      "3004:         e.message == \"Maximum field count exceeded. 2 > 1\"",
      "3007:     }",
      "3009:     def \"query not exceeding fields count\"() {",
      "3010:         String schema = \"\"\"",
      "3011:         type Query {",
      "3012:             dogs: [Dog]",
      "3013:         }",
      "3014:         type Dog {",
      "3015:             name: String",
      "3016:             breed: String",
      "3017:         }",
      "3018:         \"\"\"",
      "3020:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3022:         String query = \"\"\" {dogs{name breed }}\"\"\"",
      "3024:         assertValidQuery(graphQLSchema, query)",
      "3026:         Document document = TestUtil.parseQuery(query)",
      "3028:         when:",
      "3029:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3030:                 graphQLSchema,",
      "3031:                 document,",
      "3032:                 null,",
      "3033:                 RawVariables.emptyVariables(),",
      "3034:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(3))",
      "3036:         then:",
      "3037:         notThrown(AbortExecutionException)",
      "3040:     }",
      "3042:     def \"query with meta fields exceeding fields count\"() {",
      "3043:         String schema = \"\"\"",
      "3044:         type Query {",
      "3045:             hello: String",
      "3046:         }",
      "3047:         \"\"\"",
      "3049:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3051:         String query = IntrospectionQuery.INTROSPECTION_QUERY",
      "3053:         assertValidQuery(graphQLSchema, query)",
      "3055:         Document document = TestUtil.parseQuery(query)",
      "3057:         when:",
      "3058:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3059:                 graphQLSchema,",
      "3060:                 document,",
      "3061:                 null,",
      "3062:                 RawVariables.emptyVariables(),",
      "3063:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(188))",
      "3064:         println result.normalizedFieldToMergedField.size()",
      "3066:         then:",
      "3067:         def e = thrown(AbortExecutionException)",
      "3068:         e.message == \"Maximum field count exceeded. 189 > 188\"",
      "3069:     }",
      "3071:     def \"can capture depth and field count\"() {",
      "3072:         String schema = \"\"\"",
      "3073:         type Query {",
      "3074:             foo: Foo",
      "3075:         }",
      "3077:         type Foo {",
      "3078:             stop : String",
      "3079:             bar : Bar",
      "3080:         }",
      "3082:         type Bar {",
      "3083:             stop : String",
      "3084:             foo : Foo",
      "3085:         }",
      "3086:         \"\"\"",
      "3088:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3090:         String query = \"{ foo { bar { foo { bar { foo { stop bar { stop }}}}}}}\"",
      "3092:         assertValidQuery(graphQLSchema, query)",
      "3094:         Document document = TestUtil.parseQuery(query)",
      "3096:         when:",
      "3097:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3098:                 graphQLSchema,",
      "3099:                 document,",
      "3100:                 null,",
      "3101:                 RawVariables.emptyVariables()",
      "3102:                 )",
      "3104:         then:",
      "3105:         result.getOperationDepth() == 7",
      "3106:         result.getOperationFieldCount() == 8",
      "3107:     }",
      "",
      "---------------"
    ],
    "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java": [
      "File: src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java -> src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package benchmark;",
      "3: import graphql.execution.CoercedVariables;",
      "4: import graphql.language.Document;",
      "5: import graphql.normalized.ExecutableNormalizedOperation;",
      "6: import graphql.normalized.ExecutableNormalizedOperationFactory;",
      "7: import graphql.parser.Parser;",
      "8: import graphql.schema.GraphQLSchema;",
      "9: import graphql.schema.idl.SchemaGenerator;",
      "10: import org.openjdk.jmh.annotations.Benchmark;",
      "11: import org.openjdk.jmh.annotations.BenchmarkMode;",
      "12: import org.openjdk.jmh.annotations.Fork;",
      "13: import org.openjdk.jmh.annotations.Level;",
      "14: import org.openjdk.jmh.annotations.Measurement;",
      "15: import org.openjdk.jmh.annotations.Mode;",
      "16: import org.openjdk.jmh.annotations.OutputTimeUnit;",
      "17: import org.openjdk.jmh.annotations.Param;",
      "18: import org.openjdk.jmh.annotations.Scope;",
      "19: import org.openjdk.jmh.annotations.Setup;",
      "20: import org.openjdk.jmh.annotations.State;",
      "21: import org.openjdk.jmh.annotations.Warmup;",
      "22: import org.openjdk.jmh.runner.Runner;",
      "23: import org.openjdk.jmh.runner.RunnerException;",
      "24: import org.openjdk.jmh.runner.options.Options;",
      "25: import org.openjdk.jmh.runner.options.OptionsBuilder;",
      "27: import java.util.concurrent.TimeUnit;",
      "29: import static graphql.normalized.ExecutableNormalizedOperationFactory.*;",
      "31: @State(Scope.Benchmark)",
      "32: @Warmup(iterations = 2, time = 5)",
      "33: @Measurement(iterations = 3, time = 5)",
      "34: @Fork(2)",
      "35: public class ENFBenchmarkDeepIntrospection {",
      "37:     @Param({\"2\", \"10\", \"20\"})",
      "38:     int howDeep = 2;",
      "40:     String query = \"\";",
      "42:     GraphQLSchema schema;",
      "43:     Document document;",
      "45:     @Setup(Level.Trial)",
      "46:     public void setUp() {",
      "47:         String schemaString = BenchmarkUtils.loadResource(\"large-schema-2.graphqls\");",
      "48:         schema = SchemaGenerator.createdMockedSchema(schemaString);",
      "50:         query = createDeepQuery(howDeep);",
      "51:         document = Parser.parse(query);",
      "52:     }",
      "53:     @Benchmark",
      "54:     @BenchmarkMode(Mode.AverageTime)",
      "55:     @OutputTimeUnit(TimeUnit.MILLISECONDS)",
      "56:     public ExecutableNormalizedOperation benchMarkAvgTime() {",
      "57:         ExecutableNormalizedOperationFactory.Options options  = ExecutableNormalizedOperationFactory.Options.defaultOptions();",
      "58:         ExecutableNormalizedOperation executableNormalizedOperation = createExecutableNormalizedOperation(schema,",
      "59:                 document,",
      "60:                 null,",
      "61:                 CoercedVariables.emptyVariables(),",
      "62:                 options);",
      "63:         return executableNormalizedOperation;",
      "64:     }",
      "66:     public static void main(String[] args) throws RunnerException {",
      "67:         runAtStartup();",
      "69:         Options opt = new OptionsBuilder()",
      "70:                 .include(\"benchmark.ENFBenchmarkDeepIntrospection\")",
      "71:                 .build();",
      "73:         new Runner(opt).run();",
      "74:     }",
      "76:     private static void runAtStartup() {",
      "78:         ENFBenchmarkDeepIntrospection benchmarkIntrospection = new ENFBenchmarkDeepIntrospection();",
      "79:         benchmarkIntrospection.howDeep = 2;",
      "81:         BenchmarkUtils.runInToolingForSomeTimeThenExit(",
      "82:                 benchmarkIntrospection::setUp,",
      "83:                 () -> { while (true) { benchmarkIntrospection.benchMarkAvgTime(); }},",
      "84:                 () ->{}",
      "85:         );",
      "86:     }",
      "90:     private static String createDeepQuery(int depth) {",
      "91:         String result = \"query test {\\n\" +",
      "92:                 \"  __schema {\\n\" +",
      "93:                 \"    types {\\n\" +",
      "94:                 \"      ...F1\\n\" +",
      "95:                 \"    }\\n\" +",
      "96:                 \"  }\\n\" +",
      "97:                 \"}\\n\";",
      "99:         for (int i = 1; i < depth; i++) {",
      "100:             result += \"        fragment F\" + i + \" on __Type {\\n\" +",
      "101:                     \"          fields {\\n\" +",
      "102:                     \"            type {\\n\" +",
      "103:                     \"              ...F\" + (i + 1) +\"\\n\" +",
      "104:                     \"            }\\n\" +",
      "105:                     \"          }\\n\" +",
      "106:                     \"\\n\" +",
      "107:                     \"          ofType {\\n\" +",
      "108:                     \"            ...F\"+ (i + 1) + \"\\n\" +",
      "109:                     \"          }\\n\" +",
      "110:                     \"        }\\n\";",
      "111:         }",
      "112:         result += \"        fragment F\" + depth + \" on __Type {\\n\" +",
      "113:                 \"          fields {\\n\" +",
      "114:                 \"            type {\\n\" +",
      "115:                 \"name\\n\" +",
      "116:                 \"            }\\n\" +",
      "117:                 \"          }\\n\" +",
      "118:                 \"}\\n\";",
      "119:         return result;",
      "120:     }",
      "122: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "933a5487919dc517a64aa27c1eb0b5e676004bf0",
      "candidate_info": {
        "commit_hash": "933a5487919dc517a64aa27c1eb0b5e676004bf0",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/933a5487919dc517a64aa27c1eb0b5e676004bf0",
        "files": [
          "src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java",
          "src/main/java/graphql/parser/Parser.java",
          "src/main/java/graphql/parser/ParserOptions.java",
          "src/main/java/graphql/parser/SafeTokenReader.java",
          "src/test/groovy/graphql/parser/ParserOptionsTest.groovy",
          "src/test/groovy/graphql/parser/ParserStressTest.groovy",
          "src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy"
        ],
        "message": "Backport max chars fix to v17",
        "before_after_code_files": [
          "src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java||src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java",
          "src/main/java/graphql/parser/Parser.java||src/main/java/graphql/parser/Parser.java",
          "src/main/java/graphql/parser/ParserOptions.java||src/main/java/graphql/parser/ParserOptions.java",
          "src/main/java/graphql/parser/SafeTokenReader.java||src/main/java/graphql/parser/SafeTokenReader.java",
          "src/test/groovy/graphql/parser/ParserOptionsTest.groovy||src/test/groovy/graphql/parser/ParserOptionsTest.groovy",
          "src/test/groovy/graphql/parser/ParserStressTest.groovy||src/test/groovy/graphql/parser/ParserStressTest.groovy",
          "src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy||src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java||src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java": [
          "File: src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java -> src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.parser;",
          "3: import graphql.Internal;",
          "5: @Internal",
          "6: public class ParseCancelledTooManyCharsException extends InvalidSyntaxException {",
          "8:     @Internal",
          "9:     public ParseCancelledTooManyCharsException(String msg, int maxCharacters) {",
          "10:         super(null, msg, null, null, null);",
          "11:     }",
          "12: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/parser/Parser.java||src/main/java/graphql/parser/Parser.java": [
          "File: src/main/java/graphql/parser/Parser.java -> src/main/java/graphql/parser/Parser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import org.antlr.v4.runtime.atn.PredictionMode;",
          "21: import org.antlr.v4.runtime.tree.ParseTreeListener;",
          "22: import org.antlr.v4.runtime.tree.TerminalNode;",
          "24: import java.io.IOException;",
          "25: import java.io.Reader;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.jetbrains.annotations.NotNull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: import java.util.Optional;",
          "29: import java.util.function.BiConsumer;",
          "30: import java.util.function.BiFunction;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import java.util.function.Consumer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:     }",
          "180:     private Node<?> parseImpl(Reader reader, BiFunction<GraphqlParser, GraphqlAntlrToLanguage, Object[]> nodeFunction, ParserOptions parserOptions) throws InvalidSyntaxException {",
          "219:         CommonTokenStream tokens = new CommonTokenStream(safeTokenSource);",
          "",
          "[Removed Lines]",
          "181:         MultiSourceReader multiSourceReader;",
          "182:         if (reader instanceof MultiSourceReader) {",
          "183:             multiSourceReader = (MultiSourceReader) reader;",
          "184:         } else {",
          "185:             multiSourceReader = MultiSourceReader.newMultiSourceReader()",
          "186:                     .reader(reader, null).build();",
          "187:         }",
          "188:         CodePointCharStream charStream;",
          "189:         try {",
          "190:             charStream = CharStreams.fromReader(multiSourceReader);",
          "191:         } catch (IOException e) {",
          "192:             throw new UncheckedIOException(e);",
          "193:         }",
          "195:         GraphqlLexer lexer = new GraphqlLexer(charStream);",
          "196:         lexer.removeErrorListeners();",
          "197:         lexer.addErrorListener(new BaseErrorListener() {",
          "198:             @Override",
          "199:             public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e) {",
          "200:                 SourceLocation sourceLocation = AntlrHelper.createSourceLocation(multiSourceReader, line, charPositionInLine);",
          "201:                 String preview = AntlrHelper.createPreview(multiSourceReader, line);",
          "202:                 throw new InvalidSyntaxException(sourceLocation, msg, preview, null, null);",
          "203:             }",
          "204:         });",
          "207:         parserOptions = Optional.ofNullable(parserOptions).orElse(ParserOptions.getDefaultParserOptions());",
          "210:         int maxTokens = parserOptions.getMaxTokens();",
          "211:         int maxWhitespaceTokens = parserOptions.getMaxWhitespaceTokens();",
          "212:         BiConsumer<Integer, Token> onTooManyTokens = (maxTokenCount, token) -> throwIfTokenProblems(",
          "213:                 token,",
          "214:                 maxTokenCount,",
          "215:                 multiSourceReader,",
          "216:                 ParseCancelledException.class);",
          "217:         SafeTokenSource safeTokenSource = new SafeTokenSource(lexer, maxTokens, maxWhitespaceTokens, onTooManyTokens);",
          "",
          "[Added Lines]",
          "183:         parserOptions = Optional.ofNullable(parserOptions).orElse(ParserOptions.getDefaultParserOptions());",
          "185:         MultiSourceReader multiSourceReader = setupMultiSourceReader(reader, parserOptions);",
          "187:         SafeTokenReader safeTokenReader = setupSafeTokenReader(parserOptions, multiSourceReader);",
          "189:         CodePointCharStream charStream = setupCharStream(safeTokenReader);",
          "191:         GraphqlLexer lexer = setupGraphqlLexer(multiSourceReader, charStream);",
          "194:         SafeTokenSource safeTokenSource = getSafeTokenSource(parserOptions, multiSourceReader, lexer);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:         return node;",
          "259:     }",
          "261:     private void setupParserListener(MultiSourceReader multiSourceReader, GraphqlParser parser, GraphqlAntlrToLanguage toLanguage) {",
          "262:         ParserOptions parserOptions = toLanguage.getParserOptions();",
          "263:         int maxTokens = parserOptions.getMaxTokens();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:     private static MultiSourceReader setupMultiSourceReader(Reader reader, ParserOptions parserOptions) {",
          "239:         MultiSourceReader multiSourceReader;",
          "240:         if (reader instanceof MultiSourceReader) {",
          "241:             multiSourceReader = (MultiSourceReader) reader;",
          "242:         } else {",
          "243:             multiSourceReader = MultiSourceReader.newMultiSourceReader()",
          "244:                     .reader(reader, null).build();",
          "245:         }",
          "246:         return multiSourceReader;",
          "247:     }",
          "249:     @NotNull",
          "250:     private static SafeTokenReader setupSafeTokenReader(ParserOptions parserOptions, MultiSourceReader multiSourceReader) {",
          "251:         int maxCharacters = parserOptions.getMaxCharacters();",
          "252:         Consumer<Integer> onTooManyCharacters = it -> {",
          "253:             String msg = String.format(\"More than %d characters have been presented. To prevent Denial Of Service attacks, parsing has been cancelled.\", maxCharacters);",
          "254:             throw new ParseCancelledTooManyCharsException(msg, maxCharacters);",
          "255:         };",
          "256:         return new SafeTokenReader(multiSourceReader, maxCharacters, onTooManyCharacters);",
          "257:     }",
          "259:     @NotNull",
          "260:     private static CodePointCharStream setupCharStream(SafeTokenReader safeTokenReader) {",
          "261:         CodePointCharStream charStream;",
          "262:         try {",
          "263:             charStream = CharStreams.fromReader(safeTokenReader);",
          "264:         } catch (IOException e) {",
          "265:             throw new UncheckedIOException(e);",
          "266:         }",
          "267:         return charStream;",
          "268:     }",
          "270:     @NotNull",
          "271:     private static GraphqlLexer setupGraphqlLexer(MultiSourceReader multiSourceReader, CodePointCharStream charStream) {",
          "272:         GraphqlLexer lexer = new GraphqlLexer(charStream);",
          "273:         lexer.removeErrorListeners();",
          "274:         lexer.addErrorListener(new BaseErrorListener() {",
          "275:             @Override",
          "276:             public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e) {",
          "277:                 SourceLocation sourceLocation = AntlrHelper.createSourceLocation(multiSourceReader, line, charPositionInLine);",
          "278:                 String preview = AntlrHelper.createPreview(multiSourceReader, line);",
          "279:                 throw new InvalidSyntaxException(sourceLocation, msg, preview, null, null);",
          "280:             }",
          "281:         });",
          "282:         return lexer;",
          "283:     }",
          "285:     @NotNull",
          "286:     private SafeTokenSource getSafeTokenSource(ParserOptions parserOptions, MultiSourceReader multiSourceReader, GraphqlLexer lexer) {",
          "287:         int maxTokens = parserOptions.getMaxTokens();",
          "288:         int maxWhitespaceTokens = parserOptions.getMaxWhitespaceTokens();",
          "289:         BiConsumer<Integer, Token> onTooManyTokens = (maxTokenCount, token) -> throwIfTokenProblems(",
          "290:                 token,",
          "291:                 maxTokenCount,",
          "292:                 multiSourceReader,",
          "293:                 ParseCancelledException.class);",
          "294:         return new SafeTokenSource(lexer, maxTokens, maxWhitespaceTokens, onTooManyTokens);",
          "295:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "319:             throw new ParseCancelledTooDeepException(msg, sourceLocation, offendingToken, maxLimit, tokenType);",
          "320:         }",
          "321:         String msg = String.format(\"More than %d %s tokens have been presented. To prevent Denial Of Service attacks, parsing has been cancelled.\", maxLimit, tokenType);",
          "",
          "[Removed Lines]",
          "322:         throw new ParseCancelledException(msg, sourceLocation, offendingToken);    }",
          "",
          "[Added Lines]",
          "358:         throw new ParseCancelledException(msg, sourceLocation, offendingToken);",
          "359:     }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/parser/ParserOptions.java||src/main/java/graphql/parser/ParserOptions.java": [
          "File: src/main/java/graphql/parser/ParserOptions.java -> src/main/java/graphql/parser/ParserOptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: @PublicApi",
          "13: public class ParserOptions {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     public static final int MAX_QUERY_CHARACTERS = 1024 * 1024; // 1 MB",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:             .captureIgnoredChars(false)",
          "47:             .captureSourceLocation(true)",
          "48:             .captureLineComments(true)",
          "49:             .maxTokens(MAX_QUERY_TOKENS) // to prevent a billion laughs style attacks, we set a default for graphql-java",
          "50:             .maxWhitespaceTokens(MAX_WHITESPACE_TOKENS)",
          "51:             .maxRuleDepth(MAX_RULE_DEPTH)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:             .maxCharacters(MAX_QUERY_CHARACTERS)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:             .captureIgnoredChars(false)",
          "56:             .captureSourceLocation(true)",
          "57:             .captureLineComments(false) // #comments are not useful in query parsing",
          "58:             .maxTokens(MAX_QUERY_TOKENS) // to prevent a billion laughs style attacks, we set a default for graphql-java",
          "59:             .maxWhitespaceTokens(MAX_WHITESPACE_TOKENS)",
          "60:             .maxRuleDepth(MAX_RULE_DEPTH)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:             .maxCharacters(MAX_QUERY_CHARACTERS)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64:             .captureIgnoredChars(false)",
          "65:             .captureSourceLocation(true)",
          "66:             .captureLineComments(true) // #comments are useful in SDL parsing",
          "67:             .maxTokens(Integer.MAX_VALUE) // we are less worried about a billion laughs with SDL parsing since the call path is not facing attackers",
          "68:             .maxWhitespaceTokens(Integer.MAX_VALUE)",
          "69:             .maxRuleDepth(Integer.MAX_VALUE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:             .maxCharacters(Integer.MAX_VALUE)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "167:     private final boolean captureIgnoredChars;",
          "168:     private final boolean captureSourceLocation;",
          "169:     private final boolean captureLineComments;",
          "170:     private final int maxTokens;",
          "171:     private final int maxWhitespaceTokens;",
          "172:     private final int maxRuleDepth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:     private final int maxCharacters;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "175:         this.captureIgnoredChars = builder.captureIgnoredChars;",
          "176:         this.captureSourceLocation = builder.captureSourceLocation;",
          "177:         this.captureLineComments = builder.captureLineComments;",
          "178:         this.maxTokens = builder.maxTokens;",
          "179:         this.maxWhitespaceTokens = builder.maxWhitespaceTokens;",
          "180:         this.maxRuleDepth = builder.maxRuleDepth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:         this.maxCharacters = builder.maxCharacters;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "217:         return captureLineComments;",
          "218:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:     public int getMaxCharacters() {",
          "244:         return maxCharacters;",
          "245:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "265:         private boolean captureIgnoredChars = false;",
          "266:         private boolean captureSourceLocation = true;",
          "267:         private boolean captureLineComments = true;",
          "268:         private int maxTokens = MAX_QUERY_TOKENS;",
          "269:         private int maxWhitespaceTokens = MAX_WHITESPACE_TOKENS;",
          "270:         private int maxRuleDepth = MAX_RULE_DEPTH;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296:         private int maxCharacters = MAX_QUERY_CHARACTERS;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "276:             this.captureIgnoredChars = parserOptions.captureIgnoredChars;",
          "277:             this.captureSourceLocation = parserOptions.captureSourceLocation;",
          "278:             this.captureLineComments = parserOptions.captureLineComments;",
          "279:             this.maxTokens = parserOptions.maxTokens;",
          "280:             this.maxWhitespaceTokens = parserOptions.maxWhitespaceTokens;",
          "281:             this.maxRuleDepth = parserOptions.maxRuleDepth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308:             this.maxCharacters = parserOptions.maxCharacters;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "296:             return this;",
          "297:         }",
          "299:         public Builder maxTokens(int maxTokens) {",
          "300:             this.maxTokens = maxTokens;",
          "301:             return this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:         public Builder maxCharacters(int maxCharacters) {",
          "330:             this.maxCharacters = maxCharacters;",
          "331:             return this;",
          "332:         }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/parser/SafeTokenReader.java||src/main/java/graphql/parser/SafeTokenReader.java": [
          "File: src/main/java/graphql/parser/SafeTokenReader.java -> src/main/java/graphql/parser/SafeTokenReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.parser;",
          "3: import graphql.Internal;",
          "4: import org.jetbrains.annotations.NotNull;",
          "6: import java.io.IOException;",
          "7: import java.io.Reader;",
          "8: import java.nio.CharBuffer;",
          "9: import java.util.function.Consumer;",
          "17: @Internal",
          "18: public class SafeTokenReader extends Reader {",
          "20:     private final Reader delegate;",
          "21:     private final int maxCharacters;",
          "22:     private final Consumer<Integer> whenMaxCharactersExceeded;",
          "23:     private int count;",
          "25:     public SafeTokenReader(Reader delegate, int maxCharacters, Consumer<Integer> whenMaxCharactersExceeded) {",
          "26:         this.delegate = delegate;",
          "27:         this.maxCharacters = maxCharacters;",
          "28:         this.whenMaxCharactersExceeded = whenMaxCharactersExceeded;",
          "29:         count = 0;",
          "30:     }",
          "32:     private int checkHowMany(int read, int howMany) {",
          "33:         if (read != -1) {",
          "34:             count += howMany;",
          "35:             if (count > maxCharacters) {",
          "36:                 whenMaxCharactersExceeded.accept(maxCharacters);",
          "37:             }",
          "38:         }",
          "39:         return read;",
          "40:     }",
          "42:     @Override",
          "43:     public int read(char @NotNull [] buff, int off, int len) throws IOException {",
          "44:         int howMany = delegate.read(buff, off, len);",
          "45:         return checkHowMany(howMany, howMany);",
          "46:     }",
          "48:     @Override",
          "49:     public int read() throws IOException {",
          "50:         int ch = delegate.read();",
          "51:         return checkHowMany(ch, 1);",
          "52:     }",
          "54:     @Override",
          "55:     public int read(@NotNull CharBuffer target) throws IOException {",
          "56:         int howMany = delegate.read(target);",
          "57:         return checkHowMany(howMany, howMany);",
          "58:     }",
          "60:     @Override",
          "61:     public int read( char @NotNull [] buff) throws IOException {",
          "62:         int howMany = delegate.read(buff);",
          "63:         return checkHowMany(howMany, howMany);",
          "64:     }",
          "66:     @Override",
          "67:     public void close() throws IOException {",
          "68:         delegate.close();",
          "69:     }",
          "71:     @Override",
          "72:     public long skip(long n) throws IOException {",
          "73:         return delegate.skip(n);",
          "74:     }",
          "76:     @Override",
          "77:     public boolean ready() throws IOException {",
          "78:         return delegate.ready();",
          "79:     }",
          "81:     @Override",
          "82:     public boolean markSupported() {",
          "83:         return delegate.markSupported();",
          "84:     }",
          "86:     @Override",
          "87:     public void mark(int readAheadLimit) throws IOException {",
          "88:         delegate.mark(readAheadLimit);",
          "89:     }",
          "91:     @Override",
          "92:     public void reset() throws IOException {",
          "93:         delegate.reset();",
          "94:     }",
          "95: }",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/parser/ParserOptionsTest.groovy||src/test/groovy/graphql/parser/ParserOptionsTest.groovy": [
          "File: src/test/groovy/graphql/parser/ParserOptionsTest.groovy -> src/test/groovy/graphql/parser/ParserOptionsTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     static defaultOperationOptions = ParserOptions.getDefaultOperationParserOptions()",
          "8:     static defaultSdlOptions = ParserOptions.getDefaultSdlParserOptions()",
          "10:     void setup() {",
          "11:         ParserOptions.setDefaultParserOptions(defaultOptions)",
          "12:         ParserOptions.setDefaultOperationParserOptions(defaultOperationOptions)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:     static final int ONE_MB = 1024 * 1024",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     def \"lock in default settings\"() {",
          "23:         expect:",
          "24:         defaultOptions.getMaxTokens() == 15_000",
          "25:         defaultOptions.getMaxWhitespaceTokens() == 200_000",
          "26:         defaultOptions.isCaptureSourceLocation()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:         defaultOptions.getMaxCharacters() == ONE_MB",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:         !defaultOperationOptions.isCaptureLineComments()",
          "34:         !defaultOperationOptions.isCaptureIgnoredChars()",
          "36:         defaultSdlOptions.getMaxTokens() == Integer.MAX_VALUE",
          "37:         defaultSdlOptions.getMaxWhitespaceTokens() == Integer.MAX_VALUE",
          "38:         defaultSdlOptions.isCaptureSourceLocation()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:         defaultSdlOptions.getMaxCharacters() == Integer.MAX_VALUE",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "41:     }",
          "43:     def \"can set in new option JVM wide\"() {",
          "45:         def newDefaultOperationOptions = defaultOperationOptions.transform(",
          "47:         def newDefaultSDlOptions = defaultSdlOptions.transform(",
          "50:         when:",
          "51:         ParserOptions.setDefaultParserOptions(newDefaultOptions)",
          "",
          "[Removed Lines]",
          "44:         def newDefaultOptions = defaultOptions.transform({ it.captureIgnoredChars(true) })",
          "46:                 { it.captureIgnoredChars(true).captureLineComments(true).maxWhitespaceTokens(300_000) })",
          "48:                 { it.captureIgnoredChars(true).captureLineComments(true).maxWhitespaceTokens(300_000) })",
          "",
          "[Added Lines]",
          "48:         def newDefaultOptions = defaultOptions.transform({",
          "49:             it.captureIgnoredChars(true)",
          "50:         })",
          "52:                 {",
          "53:                     it.captureIgnoredChars(true)",
          "54:                             .captureLineComments(true)",
          "55:                             .maxCharacters(1_000_000)",
          "56:                             .maxWhitespaceTokens(300_000)",
          "57:                 })",
          "59:                 {",
          "60:                     it.captureIgnoredChars(true)",
          "61:                             .captureLineComments(true)",
          "62:                             .maxWhitespaceTokens(300_000)",
          "63:                 })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "59:         then:",
          "61:         currentDefaultOptions.getMaxTokens() == 15_000",
          "62:         currentDefaultOptions.getMaxWhitespaceTokens() == 200_000",
          "63:         currentDefaultOptions.isCaptureSourceLocation()",
          "64:         currentDefaultOptions.isCaptureLineComments()",
          "65:         currentDefaultOptions.isCaptureIgnoredChars()",
          "67:         currentDefaultOperationOptions.getMaxTokens() == 15_000",
          "68:         currentDefaultOperationOptions.getMaxWhitespaceTokens() == 300_000",
          "69:         currentDefaultOperationOptions.isCaptureSourceLocation()",
          "70:         currentDefaultOperationOptions.isCaptureLineComments()",
          "71:         currentDefaultOperationOptions.isCaptureIgnoredChars()",
          "73:         currentDefaultSdlOptions.getMaxTokens() == Integer.MAX_VALUE",
          "74:         currentDefaultSdlOptions.getMaxWhitespaceTokens() == 300_000",
          "75:         currentDefaultSdlOptions.isCaptureSourceLocation()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:         currentDefaultOptions.getMaxCharacters() == ONE_MB",
          "83:         currentDefaultOperationOptions.getMaxCharacters() == 1_000_000",
          "90:         currentDefaultSdlOptions.getMaxCharacters() == Integer.MAX_VALUE",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/parser/ParserStressTest.groovy||src/test/groovy/graphql/parser/ParserStressTest.groovy": [
          "File: src/test/groovy/graphql/parser/ParserStressTest.groovy -> src/test/groovy/graphql/parser/ParserStressTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:         thrown(ParseCancelledException) // too many tokens will catch this wide queries",
          "113:     }",
          "115:     String mkDeepQuery(int howMany) {",
          "116:         def field = 'f(a:\"\")'",
          "117:         StringBuilder sb = new StringBuilder(\"query q{\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:     def \"large single token attack parse can be prevented\"() {",
          "116:         String text = \"q\" * 10_000_000",
          "117:         text = \"query \" + text + \" {f}\"",
          "119:         when:",
          "120:         new Parser().parseDocument(text, defaultOperationOptions)",
          "122:         then:",
          "123:         thrown(ParseCancelledTooManyCharsException)",
          "124:     }",
          "126:     def \"inside limits single token attack parse will be accepted\"() {",
          "127:         String text = \"q\" * 900_000",
          "128:         text = \"query \" + text + \" {f}\"",
          "130:         when:",
          "131:         def document = new Parser().parseDocument(text, defaultOperationOptions)",
          "133:         then:",
          "134:         document != null // its parsed - its invalid of course but parsed",
          "135:     }",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy||src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy": [
          "File: src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy -> src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.parser",
          "3: import spock.lang.Specification",
          "5: class SafeTokenReaderTest extends Specification {",
          "7:     def \"will count how many its read and stop after max\"() {",
          "8:         when:",
          "9:         StringReader sr = new StringReader(\"0123456789\")",
          "10:         SafeTokenReader safeReader = new SafeTokenReader(sr, 5,",
          "11:                 { Integer maxChars -> throw new RuntimeException(\"max \" + maxChars) })",
          "12:         safeReader.readLine()",
          "14:         then:",
          "15:         def rte = thrown(RuntimeException)",
          "16:         rte.message == \"max 5\"",
          "17:     }",
          "18: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1f0dfffeace21ae69153def76aef4f83d660574",
      "candidate_info": {
        "commit_hash": "f1f0dfffeace21ae69153def76aef4f83d660574",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/f1f0dfffeace21ae69153def76aef4f83d660574",
        "files": [
          "src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java",
          "src/main/java/graphql/parser/Parser.java",
          "src/main/java/graphql/parser/ParserOptions.java",
          "src/main/java/graphql/parser/SafeTokenReader.java",
          "src/test/groovy/graphql/parser/ParserOptionsTest.groovy",
          "src/test/groovy/graphql/parser/ParserStressTest.groovy",
          "src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy"
        ],
        "message": "This is the backport of the max characters in a parse to the 19.x branch",
        "before_after_code_files": [
          "src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java||src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java",
          "src/main/java/graphql/parser/Parser.java||src/main/java/graphql/parser/Parser.java",
          "src/main/java/graphql/parser/ParserOptions.java||src/main/java/graphql/parser/ParserOptions.java",
          "src/main/java/graphql/parser/SafeTokenReader.java||src/main/java/graphql/parser/SafeTokenReader.java",
          "src/test/groovy/graphql/parser/ParserOptionsTest.groovy||src/test/groovy/graphql/parser/ParserOptionsTest.groovy",
          "src/test/groovy/graphql/parser/ParserStressTest.groovy||src/test/groovy/graphql/parser/ParserStressTest.groovy",
          "src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy||src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java||src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java": [
          "File: src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java -> src/main/java/graphql/parser/ParseCancelledTooManyCharsException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.parser;",
          "3: import graphql.Internal;",
          "5: @Internal",
          "6: public class ParseCancelledTooManyCharsException extends InvalidSyntaxException {",
          "8:     @Internal",
          "9:     public ParseCancelledTooManyCharsException(String msg, int maxCharacters) {",
          "10:         super(null, msg, null, null, null);",
          "11:     }",
          "12: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/parser/Parser.java||src/main/java/graphql/parser/Parser.java": [
          "File: src/main/java/graphql/parser/Parser.java -> src/main/java/graphql/parser/Parser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.antlr.v4.runtime.atn.PredictionMode;",
          "22: import org.antlr.v4.runtime.tree.ParseTreeListener;",
          "23: import org.antlr.v4.runtime.tree.TerminalNode;",
          "25: import java.io.IOException;",
          "26: import java.io.Reader;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import org.jetbrains.annotations.NotNull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import java.util.Optional;",
          "30: import java.util.function.BiConsumer;",
          "31: import java.util.function.BiFunction;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import java.util.function.Consumer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:     }",
          "207:     private Node<?> parseImpl(Reader reader, BiFunction<GraphqlParser, GraphqlAntlrToLanguage, Object[]> nodeFunction, ParserOptions parserOptions) throws InvalidSyntaxException {",
          "246:         CommonTokenStream tokens = new CommonTokenStream(safeTokenSource);",
          "",
          "[Removed Lines]",
          "208:         MultiSourceReader multiSourceReader;",
          "209:         if (reader instanceof MultiSourceReader) {",
          "210:             multiSourceReader = (MultiSourceReader) reader;",
          "211:         } else {",
          "212:             multiSourceReader = MultiSourceReader.newMultiSourceReader()",
          "213:                     .reader(reader, null).build();",
          "214:         }",
          "215:         CodePointCharStream charStream;",
          "216:         try {",
          "217:             charStream = CharStreams.fromReader(multiSourceReader);",
          "218:         } catch (IOException e) {",
          "219:             throw new UncheckedIOException(e);",
          "220:         }",
          "222:         GraphqlLexer lexer = new GraphqlLexer(charStream);",
          "223:         lexer.removeErrorListeners();",
          "224:         lexer.addErrorListener(new BaseErrorListener() {",
          "225:             @Override",
          "226:             public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e) {",
          "227:                 SourceLocation sourceLocation = AntlrHelper.createSourceLocation(multiSourceReader, line, charPositionInLine);",
          "228:                 String preview = AntlrHelper.createPreview(multiSourceReader, line);",
          "229:                 throw new InvalidSyntaxException(sourceLocation, msg, preview, null, null);",
          "230:             }",
          "231:         });",
          "234:         parserOptions = Optional.ofNullable(parserOptions).orElse(ParserOptions.getDefaultParserOptions());",
          "237:         int maxTokens = parserOptions.getMaxTokens();",
          "238:         int maxWhitespaceTokens = parserOptions.getMaxWhitespaceTokens();",
          "239:         BiConsumer<Integer, Token> onTooManyTokens = (maxTokenCount, token) -> throwIfTokenProblems(",
          "240:                 token,",
          "241:                 maxTokenCount,",
          "242:                 multiSourceReader,",
          "243:                 ParseCancelledException.class);",
          "244:         SafeTokenSource safeTokenSource = new SafeTokenSource(lexer, maxTokens, maxWhitespaceTokens, onTooManyTokens);",
          "",
          "[Added Lines]",
          "210:         parserOptions = Optional.ofNullable(parserOptions).orElse(ParserOptions.getDefaultParserOptions());",
          "212:         MultiSourceReader multiSourceReader = setupMultiSourceReader(reader, parserOptions);",
          "214:         SafeTokenReader safeTokenReader = setupSafeTokenReader(parserOptions, multiSourceReader);",
          "216:         CodePointCharStream charStream = setupCharStream(safeTokenReader);",
          "218:         GraphqlLexer lexer = setupGraphqlLexer(multiSourceReader, charStream);",
          "221:         SafeTokenSource safeTokenSource = getSafeTokenSource(parserOptions, multiSourceReader, lexer);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "285:         return node;",
          "286:     }",
          "288:     private void setupParserListener(MultiSourceReader multiSourceReader, GraphqlParser parser, GraphqlAntlrToLanguage toLanguage) {",
          "289:         ParserOptions parserOptions = toLanguage.getParserOptions();",
          "290:         ParsingListener parsingListener = parserOptions.getParsingListener();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     private static MultiSourceReader setupMultiSourceReader(Reader reader, ParserOptions parserOptions) {",
          "266:         MultiSourceReader multiSourceReader;",
          "267:         if (reader instanceof MultiSourceReader) {",
          "268:             multiSourceReader = (MultiSourceReader) reader;",
          "269:         } else {",
          "270:             multiSourceReader = MultiSourceReader.newMultiSourceReader()",
          "271:                     .reader(reader, null).build();",
          "272:         }",
          "273:         return multiSourceReader;",
          "274:     }",
          "276:     @NotNull",
          "277:     private static SafeTokenReader setupSafeTokenReader(ParserOptions parserOptions, MultiSourceReader multiSourceReader) {",
          "278:         int maxCharacters = parserOptions.getMaxCharacters();",
          "279:         Consumer<Integer> onTooManyCharacters = it -> {",
          "280:             String msg = String.format(\"More than %d characters have been presented. To prevent Denial Of Service attacks, parsing has been cancelled.\", maxCharacters);",
          "281:             throw new ParseCancelledTooManyCharsException(msg, maxCharacters);",
          "282:         };",
          "283:         return new SafeTokenReader(multiSourceReader, maxCharacters, onTooManyCharacters);",
          "284:     }",
          "286:     @NotNull",
          "287:     private static CodePointCharStream setupCharStream(SafeTokenReader safeTokenReader) {",
          "288:         CodePointCharStream charStream;",
          "289:         try {",
          "290:             charStream = CharStreams.fromReader(safeTokenReader);",
          "291:         } catch (IOException e) {",
          "292:             throw new UncheckedIOException(e);",
          "293:         }",
          "294:         return charStream;",
          "295:     }",
          "297:     @NotNull",
          "298:     private static GraphqlLexer setupGraphqlLexer(MultiSourceReader multiSourceReader, CodePointCharStream charStream) {",
          "299:         GraphqlLexer lexer = new GraphqlLexer(charStream);",
          "300:         lexer.removeErrorListeners();",
          "301:         lexer.addErrorListener(new BaseErrorListener() {",
          "302:             @Override",
          "303:             public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e) {",
          "304:                 SourceLocation sourceLocation = AntlrHelper.createSourceLocation(multiSourceReader, line, charPositionInLine);",
          "305:                 String preview = AntlrHelper.createPreview(multiSourceReader, line);",
          "306:                 throw new InvalidSyntaxException(sourceLocation, msg, preview, null, null);",
          "307:             }",
          "308:         });",
          "309:         return lexer;",
          "310:     }",
          "312:     @NotNull",
          "313:     private SafeTokenSource getSafeTokenSource(ParserOptions parserOptions, MultiSourceReader multiSourceReader, GraphqlLexer lexer) {",
          "314:         int maxTokens = parserOptions.getMaxTokens();",
          "315:         int maxWhitespaceTokens = parserOptions.getMaxWhitespaceTokens();",
          "316:         BiConsumer<Integer, Token> onTooManyTokens = (maxTokenCount, token) -> throwIfTokenProblems(",
          "317:                 token,",
          "318:                 maxTokenCount,",
          "319:                 multiSourceReader,",
          "320:                 ParseCancelledException.class);",
          "321:         return new SafeTokenSource(lexer, maxTokens, maxWhitespaceTokens, onTooManyTokens);",
          "322:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "365:             throw new ParseCancelledTooDeepException(msg, sourceLocation, offendingToken, maxLimit, tokenType);",
          "366:         }",
          "367:         String msg = String.format(\"More than %d %s tokens have been presented. To prevent Denial Of Service attacks, parsing has been cancelled.\", maxLimit, tokenType);",
          "",
          "[Removed Lines]",
          "368:         throw new ParseCancelledException(msg, sourceLocation, offendingToken);    }",
          "",
          "[Added Lines]",
          "404:         throw new ParseCancelledException(msg, sourceLocation, offendingToken);",
          "405:     }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/parser/ParserOptions.java||src/main/java/graphql/parser/ParserOptions.java": [
          "File: src/main/java/graphql/parser/ParserOptions.java -> src/main/java/graphql/parser/ParserOptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: @PublicApi",
          "13: public class ParserOptions {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     public static final int MAX_QUERY_CHARACTERS = 1024 * 1024; // 1 MB",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:             .captureIgnoredChars(false)",
          "47:             .captureSourceLocation(true)",
          "48:             .captureLineComments(true)",
          "49:             .maxTokens(MAX_QUERY_TOKENS) // to prevent a billion laughs style attacks, we set a default for graphql-java",
          "50:             .maxWhitespaceTokens(MAX_WHITESPACE_TOKENS)",
          "51:             .maxRuleDepth(MAX_RULE_DEPTH)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:             .maxCharacters(MAX_QUERY_CHARACTERS)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:             .captureIgnoredChars(false)",
          "56:             .captureSourceLocation(true)",
          "57:             .captureLineComments(false) // #comments are not useful in query parsing",
          "58:             .maxTokens(MAX_QUERY_TOKENS) // to prevent a billion laughs style attacks, we set a default for graphql-java",
          "59:             .maxWhitespaceTokens(MAX_WHITESPACE_TOKENS)",
          "60:             .maxRuleDepth(MAX_RULE_DEPTH)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:             .maxCharacters(MAX_QUERY_CHARACTERS)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64:             .captureIgnoredChars(false)",
          "65:             .captureSourceLocation(true)",
          "66:             .captureLineComments(true) // #comments are useful in SDL parsing",
          "67:             .maxTokens(Integer.MAX_VALUE) // we are less worried about a billion laughs with SDL parsing since the call path is not facing attackers",
          "68:             .maxWhitespaceTokens(Integer.MAX_VALUE)",
          "69:             .maxRuleDepth(Integer.MAX_VALUE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:             .maxCharacters(Integer.MAX_VALUE)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "167:     private final boolean captureIgnoredChars;",
          "168:     private final boolean captureSourceLocation;",
          "169:     private final boolean captureLineComments;",
          "170:     private final int maxTokens;",
          "171:     private final int maxWhitespaceTokens;",
          "172:     private final int maxRuleDepth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:     private final int maxCharacters;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "176:         this.captureIgnoredChars = builder.captureIgnoredChars;",
          "177:         this.captureSourceLocation = builder.captureSourceLocation;",
          "178:         this.captureLineComments = builder.captureLineComments;",
          "179:         this.maxTokens = builder.maxTokens;",
          "180:         this.maxWhitespaceTokens = builder.maxWhitespaceTokens;",
          "181:         this.maxRuleDepth = builder.maxRuleDepth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:         this.maxCharacters = builder.maxCharacters;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "219:         return captureLineComments;",
          "220:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:     public int getMaxCharacters() {",
          "246:         return maxCharacters;",
          "247:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "272:         private boolean captureSourceLocation = true;",
          "273:         private boolean captureLineComments = true;",
          "274:         private ParsingListener parsingListener = ParsingListener.NOOP;",
          "275:         private int maxTokens = MAX_QUERY_TOKENS;",
          "276:         private int maxWhitespaceTokens = MAX_WHITESPACE_TOKENS;",
          "277:         private int maxRuleDepth = MAX_RULE_DEPTH;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:         private int maxCharacters = MAX_QUERY_CHARACTERS;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "283:             this.captureIgnoredChars = parserOptions.captureIgnoredChars;",
          "284:             this.captureSourceLocation = parserOptions.captureSourceLocation;",
          "285:             this.captureLineComments = parserOptions.captureLineComments;",
          "286:             this.maxTokens = parserOptions.maxTokens;",
          "287:             this.maxWhitespaceTokens = parserOptions.maxWhitespaceTokens;",
          "288:             this.maxRuleDepth = parserOptions.maxRuleDepth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:             this.maxCharacters = parserOptions.maxCharacters;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "304:             return this;",
          "305:         }",
          "307:         public Builder maxTokens(int maxTokens) {",
          "308:             this.maxTokens = maxTokens;",
          "309:             return this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:         public Builder maxCharacters(int maxCharacters) {",
          "338:             this.maxCharacters = maxCharacters;",
          "339:             return this;",
          "340:         }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/parser/SafeTokenReader.java||src/main/java/graphql/parser/SafeTokenReader.java": [
          "File: src/main/java/graphql/parser/SafeTokenReader.java -> src/main/java/graphql/parser/SafeTokenReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.parser;",
          "3: import graphql.Internal;",
          "4: import org.jetbrains.annotations.NotNull;",
          "6: import java.io.IOException;",
          "7: import java.io.Reader;",
          "8: import java.nio.CharBuffer;",
          "9: import java.util.function.Consumer;",
          "17: @Internal",
          "18: public class SafeTokenReader extends Reader {",
          "20:     private final Reader delegate;",
          "21:     private final int maxCharacters;",
          "22:     private final Consumer<Integer> whenMaxCharactersExceeded;",
          "23:     private int count;",
          "25:     public SafeTokenReader(Reader delegate, int maxCharacters, Consumer<Integer> whenMaxCharactersExceeded) {",
          "26:         this.delegate = delegate;",
          "27:         this.maxCharacters = maxCharacters;",
          "28:         this.whenMaxCharactersExceeded = whenMaxCharactersExceeded;",
          "29:         count = 0;",
          "30:     }",
          "32:     private int checkHowMany(int read, int howMany) {",
          "33:         if (read != -1) {",
          "34:             count += howMany;",
          "35:             if (count > maxCharacters) {",
          "36:                 whenMaxCharactersExceeded.accept(maxCharacters);",
          "37:             }",
          "38:         }",
          "39:         return read;",
          "40:     }",
          "42:     @Override",
          "43:     public int read(char @NotNull [] buff, int off, int len) throws IOException {",
          "44:         int howMany = delegate.read(buff, off, len);",
          "45:         return checkHowMany(howMany, howMany);",
          "46:     }",
          "48:     @Override",
          "49:     public int read() throws IOException {",
          "50:         int ch = delegate.read();",
          "51:         return checkHowMany(ch, 1);",
          "52:     }",
          "54:     @Override",
          "55:     public int read(@NotNull CharBuffer target) throws IOException {",
          "56:         int howMany = delegate.read(target);",
          "57:         return checkHowMany(howMany, howMany);",
          "58:     }",
          "60:     @Override",
          "61:     public int read( char @NotNull [] buff) throws IOException {",
          "62:         int howMany = delegate.read(buff);",
          "63:         return checkHowMany(howMany, howMany);",
          "64:     }",
          "66:     @Override",
          "67:     public void close() throws IOException {",
          "68:         delegate.close();",
          "69:     }",
          "71:     @Override",
          "72:     public long skip(long n) throws IOException {",
          "73:         return delegate.skip(n);",
          "74:     }",
          "76:     @Override",
          "77:     public boolean ready() throws IOException {",
          "78:         return delegate.ready();",
          "79:     }",
          "81:     @Override",
          "82:     public boolean markSupported() {",
          "83:         return delegate.markSupported();",
          "84:     }",
          "86:     @Override",
          "87:     public void mark(int readAheadLimit) throws IOException {",
          "88:         delegate.mark(readAheadLimit);",
          "89:     }",
          "91:     @Override",
          "92:     public void reset() throws IOException {",
          "93:         delegate.reset();",
          "94:     }",
          "95: }",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/parser/ParserOptionsTest.groovy||src/test/groovy/graphql/parser/ParserOptionsTest.groovy": [
          "File: src/test/groovy/graphql/parser/ParserOptionsTest.groovy -> src/test/groovy/graphql/parser/ParserOptionsTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     static defaultOperationOptions = ParserOptions.getDefaultOperationParserOptions()",
          "8:     static defaultSdlOptions = ParserOptions.getDefaultSdlParserOptions()",
          "10:     void setup() {",
          "11:         ParserOptions.setDefaultParserOptions(defaultOptions)",
          "12:         ParserOptions.setDefaultOperationParserOptions(defaultOperationOptions)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:     static final int ONE_MB = 1024 * 1024",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     def \"lock in default settings\"() {",
          "23:         expect:",
          "24:         defaultOptions.getMaxTokens() == 15_000",
          "25:         defaultOptions.getMaxWhitespaceTokens() == 200_000",
          "26:         defaultOptions.isCaptureSourceLocation()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:         defaultOptions.getMaxCharacters() == ONE_MB",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:         !defaultOperationOptions.isCaptureLineComments()",
          "34:         !defaultOperationOptions.isCaptureIgnoredChars()",
          "36:         defaultSdlOptions.getMaxTokens() == Integer.MAX_VALUE",
          "37:         defaultSdlOptions.getMaxWhitespaceTokens() == Integer.MAX_VALUE",
          "38:         defaultSdlOptions.isCaptureSourceLocation()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:         defaultSdlOptions.getMaxCharacters() == Integer.MAX_VALUE",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "41:     }",
          "43:     def \"can set in new option JVM wide\"() {",
          "45:         def newDefaultOperationOptions = defaultOperationOptions.transform(",
          "47:         def newDefaultSDlOptions = defaultSdlOptions.transform(",
          "50:         when:",
          "51:         ParserOptions.setDefaultParserOptions(newDefaultOptions)",
          "",
          "[Removed Lines]",
          "44:         def newDefaultOptions = defaultOptions.transform({ it.captureIgnoredChars(true) })",
          "46:                 { it.captureIgnoredChars(true).captureLineComments(true).maxWhitespaceTokens(300_000) })",
          "48:                 { it.captureIgnoredChars(true).captureLineComments(true).maxWhitespaceTokens(300_000) })",
          "",
          "[Added Lines]",
          "48:         def newDefaultOptions = defaultOptions.transform({",
          "49:             it.captureIgnoredChars(true)",
          "50:         })",
          "52:                 {",
          "53:                     it.captureIgnoredChars(true)",
          "54:                             .captureLineComments(true)",
          "55:                             .maxCharacters(1_000_000)",
          "56:                             .maxWhitespaceTokens(300_000)",
          "57:                 })",
          "59:                 {",
          "60:                     it.captureIgnoredChars(true)",
          "61:                             .captureLineComments(true)",
          "62:                             .maxWhitespaceTokens(300_000)",
          "63:                 })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "59:         then:",
          "61:         currentDefaultOptions.getMaxTokens() == 15_000",
          "62:         currentDefaultOptions.getMaxWhitespaceTokens() == 200_000",
          "63:         currentDefaultOptions.isCaptureSourceLocation()",
          "64:         currentDefaultOptions.isCaptureLineComments()",
          "65:         currentDefaultOptions.isCaptureIgnoredChars()",
          "67:         currentDefaultOperationOptions.getMaxTokens() == 15_000",
          "68:         currentDefaultOperationOptions.getMaxWhitespaceTokens() == 300_000",
          "69:         currentDefaultOperationOptions.isCaptureSourceLocation()",
          "70:         currentDefaultOperationOptions.isCaptureLineComments()",
          "71:         currentDefaultOperationOptions.isCaptureIgnoredChars()",
          "73:         currentDefaultSdlOptions.getMaxTokens() == Integer.MAX_VALUE",
          "74:         currentDefaultSdlOptions.getMaxWhitespaceTokens() == 300_000",
          "75:         currentDefaultSdlOptions.isCaptureSourceLocation()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:         currentDefaultOptions.getMaxCharacters() == ONE_MB",
          "83:         currentDefaultOperationOptions.getMaxCharacters() == 1_000_000",
          "90:         currentDefaultSdlOptions.getMaxCharacters() == Integer.MAX_VALUE",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/parser/ParserStressTest.groovy||src/test/groovy/graphql/parser/ParserStressTest.groovy": [
          "File: src/test/groovy/graphql/parser/ParserStressTest.groovy -> src/test/groovy/graphql/parser/ParserStressTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         thrown(ParseCancelledException) // too many tokens will catch this wide queries",
          "150:     }",
          "152:     String mkDeepQuery(int howMany) {",
          "153:         def field = 'f(a:\"\")'",
          "154:         StringBuilder sb = new StringBuilder(\"query q{\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     def \"large single token attack parse can be prevented\"() {",
          "153:         String text = \"q\" * 10_000_000",
          "154:         text = \"query \" + text + \" {f}\"",
          "156:         when:",
          "157:         new Parser().parseDocument(text, defaultOperationOptions)",
          "159:         then:",
          "160:         thrown(ParseCancelledTooManyCharsException)",
          "161:     }",
          "163:     def \"inside limits single token attack parse will be accepted\"() {",
          "164:         String text = \"q\" * 900_000",
          "165:         text = \"query \" + text + \" {f}\"",
          "167:         when:",
          "168:         def document = new Parser().parseDocument(text, defaultOperationOptions)",
          "170:         then:",
          "171:         document != null // its parsed - its invalid of course but parsed",
          "172:     }",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy||src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy": [
          "File: src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy -> src/test/groovy/graphql/parser/SafeTokenReaderTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.parser",
          "3: import spock.lang.Specification",
          "5: class SafeTokenReaderTest extends Specification {",
          "7:     def \"will count how many its read and stop after max\"() {",
          "8:         when:",
          "9:         StringReader sr = new StringReader(\"0123456789\")",
          "10:         SafeTokenReader safeReader = new SafeTokenReader(sr, 5,",
          "11:                 { Integer maxChars -> throw new RuntimeException(\"max \" + maxChars) })",
          "12:         safeReader.readLine()",
          "14:         then:",
          "15:         def rte = thrown(RuntimeException)",
          "16:         rte.message == \"max 5\"",
          "17:     }",
          "18: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}