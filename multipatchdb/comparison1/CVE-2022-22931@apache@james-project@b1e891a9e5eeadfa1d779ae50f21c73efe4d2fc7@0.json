{
  "cve_id": "CVE-2022-22931",
  "cve_desc": "Fix of CVE-2021-40525 do not prepend delimiters upon valid directory validations. Affected implementations include: - maildir mailbox store - Sieve file repository This enables a user to access other users data stores (limited to user names being prefixed by the value of the username being used).",
  "repo": "apache/james-project",
  "patch_hash": "b1e891a9e5eeadfa1d779ae50f21c73efe4d2fc7",
  "patch_info": {
    "commit_hash": "b1e891a9e5eeadfa1d779ae50f21c73efe4d2fc7",
    "repo": "apache/james-project",
    "commit_url": "https://github.com/apache/james-project/pull/877/commits/b1e891a9e5eeadfa1d779ae50f21c73efe4d2fc7",
    "files": [
      "server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java",
      "server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java"
    ],
    "message": "CVE-2022-22931 JAMES-3646 Rely on strong typing for file paths operations",
    "before_after_code_files": [
      "server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java||server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java",
      "server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java||server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java"
    ]
  },
  "patch_diff": {
    "server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java||server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java": [
      "File: server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java -> server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "316:     }",
      "318:     private void enforceRoot(File file) throws StorageException {",
      "325:         }",
      "326:     }",
      "",
      "[Removed Lines]",
      "319:         try {",
      "320:             if (!file.getCanonicalPath().startsWith(root.getCanonicalPath())) {",
      "321:                 throw new StorageException(new IllegalStateException(\"Path traversal attempted\"));",
      "322:             }",
      "323:         } catch (IOException e) {",
      "324:             throw new StorageException(e);",
      "",
      "[Added Lines]",
      "319:         if (!file.toPath().normalize().startsWith(root.toPath().normalize())) {",
      "320:             throw new StorageException(new IllegalStateException(\"Path traversal attempted\"));",
      "",
      "---------------"
    ],
    "server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java||server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java": [
      "File: server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java -> server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "84:                 new ScriptName(\"../other/script\")))",
      "85:             .isInstanceOf(StorageException.class);",
      "86:     }",
      "87: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88:     @Test",
      "89:     void getScriptShouldNotAllowToReadScriptsOfOtherUsersWhenPrefix() throws Exception {",
      "90:         sieveRepository().putScript(Username.of(\"testa\"), new ScriptName(\"script\"), new ScriptContent(\"PWND!!!\"));",
      "92:         assertThatThrownBy(() ->  sieveRepository().getScript(Username.of(\"test\"),",
      "93:             new ScriptName(\"../other/script\")))",
      "94:             .isInstanceOf(StorageException.class);",
      "95:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7d22c6fbd79d817bc137da7b9d712cb2802a7df8",
      "candidate_info": {
        "commit_hash": "7d22c6fbd79d817bc137da7b9d712cb2802a7df8",
        "repo": "apache/james-project",
        "commit_url": "https://github.com/apache/james-project/commit/7d22c6fbd79d817bc137da7b9d712cb2802a7df8",
        "files": [
          "server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java",
          "server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java"
        ],
        "message": "CVE-2022-22931 JAMES-3646 Rely on strong typing for file paths operations (#877)",
        "before_after_code_files": [
          "server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java||server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java",
          "server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java||server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/james-project/pull/877"
        ],
        "olp_code_files": {
          "patch": [
            "server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java||server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java",
            "server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java||server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java"
          ],
          "candidate": [
            "server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java||server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java",
            "server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java||server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java"
          ]
        }
      },
      "candidate_diff": {
        "server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java||server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java": [
          "File: server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java -> server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:     }",
          "318:     private void enforceRoot(File file) throws StorageException {",
          "325:         }",
          "326:     }",
          "",
          "[Removed Lines]",
          "319:         try {",
          "320:             if (!file.getCanonicalPath().startsWith(root.getCanonicalPath())) {",
          "321:                 throw new StorageException(new IllegalStateException(\"Path traversal attempted\"));",
          "322:             }",
          "323:         } catch (IOException e) {",
          "324:             throw new StorageException(e);",
          "",
          "[Added Lines]",
          "319:         if (!file.toPath().normalize().startsWith(root.toPath().normalize())) {",
          "320:             throw new StorageException(new IllegalStateException(\"Path traversal attempted\"));",
          "",
          "---------------"
        ],
        "server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java||server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java": [
          "File: server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java -> server/data/data-file/src/test/java/org/apache/james/sieverepository/file/SieveFileRepositoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:                 new ScriptName(\"../other/script\")))",
          "85:             .isInstanceOf(StorageException.class);",
          "86:     }",
          "87: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     @Test",
          "89:     void getScriptShouldNotAllowToReadScriptsOfOtherUsersWhenPrefix() throws Exception {",
          "90:         sieveRepository().putScript(Username.of(\"testa\"), new ScriptName(\"script\"), new ScriptContent(\"PWND!!!\"));",
          "92:         assertThatThrownBy(() ->  sieveRepository().getScript(Username.of(\"test\"),",
          "93:             new ScriptName(\"../other/script\")))",
          "94:             .isInstanceOf(StorageException.class);",
          "95:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0974e767b870c8d171061fff5cbd3ecfb95f2533",
      "candidate_info": {
        "commit_hash": "0974e767b870c8d171061fff5cbd3ecfb95f2533",
        "repo": "apache/james-project",
        "commit_url": "https://github.com/apache/james-project/commit/0974e767b870c8d171061fff5cbd3ecfb95f2533",
        "files": [
          "mailbox/maildir/src/main/java/org/apache/james/mailbox/maildir/MaildirFolder.java"
        ],
        "message": "JAMES-3646 Rely on strong typing for file paths operations",
        "before_after_code_files": [
          "mailbox/maildir/src/main/java/org/apache/james/mailbox/maildir/MaildirFolder.java||mailbox/maildir/src/main/java/org/apache/james/mailbox/maildir/MaildirFolder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mailbox/maildir/src/main/java/org/apache/james/mailbox/maildir/MaildirFolder.java||mailbox/maildir/src/main/java/org/apache/james/mailbox/maildir/MaildirFolder.java": [
          "File: mailbox/maildir/src/main/java/org/apache/james/mailbox/maildir/MaildirFolder.java -> mailbox/maildir/src/main/java/org/apache/james/mailbox/maildir/MaildirFolder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import java.io.InputStreamReader;",
          "29: import java.io.PrintWriter;",
          "30: import java.nio.charset.StandardCharsets;",
          "31: import java.util.ArrayList;",
          "32: import java.util.HashMap;",
          "33: import java.util.LinkedList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import java.nio.file.Path;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     public MaildirFolder validateWithinFolder(File maildirRoot) throws MailboxNotFoundException {",
          "109:         try {",
          "111:                 throw new MailboxNotFoundException(rootFolder.getCanonicalPath() + \" jail breaks out of \" + maildirRoot.getCanonicalPath());",
          "112:             }",
          "113:         } catch (IOException e) {",
          "",
          "[Removed Lines]",
          "110:             if (!rootFolder.toPath().normalize().startsWith(maildirRoot.toPath().normalize())) {",
          "",
          "[Added Lines]",
          "111:             if (!Path.of(rootFolder.getCanonicalPath()).normalize().startsWith(Path.of(maildirRoot.getCanonicalPath()).normalize())) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}