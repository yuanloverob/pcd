{
  "cve_id": "CVE-2018-11776",
  "cve_desc": "Apache Struts versions 2.3 to 2.3.34 and 2.5 to 2.5.16 suffer from possible Remote Code Execution when alwaysSelectFullNamespace is true (either by user or a plugin like Convention Plugin) and then: results are used with no namespace and in same time, its upper package have no or wildcard namespace and similar to results, same possibility when using url tag which doesn't have value and action set and in same time, its upper package have no or wildcard namespace.",
  "repo": "apache/struts",
  "patch_hash": "6e87474f9ad0549f07dd2c37d50a9ccd0977c6e5",
  "patch_info": {
    "commit_hash": "6e87474f9ad0549f07dd2c37d50a9ccd0977c6e5",
    "repo": "apache/struts",
    "commit_url": "https://github.com/apache/struts/commit/6e87474f9ad0549f07dd2c37d50a9ccd0977c6e",
    "files": [
      "core/src/main/java/org/apache/struts2/StrutsConstants.java",
      "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
      "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
      "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java"
    ],
    "message": "Validates action, namespace and method in the same way",
    "before_after_code_files": [
      "core/src/main/java/org/apache/struts2/StrutsConstants.java||core/src/main/java/org/apache/struts2/StrutsConstants.java",
      "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
      "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java||core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
      "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java||plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/org/apache/struts2/StrutsConstants.java||core/src/main/java/org/apache/struts2/StrutsConstants.java": [
      "File: core/src/main/java/org/apache/struts2/StrutsConstants.java -> core/src/main/java/org/apache/struts2/StrutsConstants.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "283:     public static final String STRUTS_EXPRESSION_PARSER = \"struts.expression.parser\";",
      "286:     public static final String STRUTS_ALLOWED_ACTION_NAMES = \"struts.allowed.action.names\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "286:     public static final String STRUTS_ALLOWED_NAMESPACE_NAMES = \"struts.allowed.namespace.names\";",
      "288:     public static final String STRUTS_DEFAULT_NAMESPACE_NAME = \"struts.default.namespace.name\";",
      "",
      "---------------"
    ],
    "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java": [
      "File: core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java -> core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: import org.apache.struts2.RequestUtils;",
      "32: import org.apache.struts2.ServletActionContext;",
      "33: import org.apache.struts2.StrutsConstants;",
      "35: import org.apache.struts2.util.PrefixTrie;",
      "37: import javax.servlet.http.HttpServletRequest;",
      "",
      "[Removed Lines]",
      "34: import org.apache.struts2.StrutsException;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:     protected boolean allowSlashesInActionNames = false;",
      "118:     protected boolean alwaysSelectFullNamespace = false;",
      "119:     protected PrefixTrie prefixTrie = null;",
      "120:     protected Pattern allowedActionNames = Pattern.compile(\"[a-zA-Z0-9._!/\\\\-]*\");",
      "121:     protected String defaultActionName = \"index\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "120:     protected Pattern allowedNamespaceNames = Pattern.compile(\"[a-zA-Z0-9._/\\\\-]*\");",
      "121:     protected String defaultNamespaceName = \"/\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "202:         this.alwaysSelectFullNamespace = BooleanUtils.toBoolean(alwaysSelectFullNamespace);",
      "203:     }",
      "205:     @Inject(value = StrutsConstants.STRUTS_ALLOWED_ACTION_NAMES, required = false)",
      "206:     public void setAllowedActionNames(String allowedActionNames) {",
      "207:         this.allowedActionNames = Pattern.compile(allowedActionNames);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "208:     @Inject(value = StrutsConstants.STRUTS_ALLOWED_NAMESPACE_NAMES, required = false)",
      "209:     public void setAllowedNamespaceNames(String allowedNamespaceNames) {",
      "210:         this.allowedNamespaceNames = Pattern.compile(allowedNamespaceNames);",
      "211:     }",
      "213:     @Inject(value = StrutsConstants.STRUTS_DEFAULT_NAMESPACE_NAME, required = false)",
      "214:     public void setDefaultNamespaceName(String defaultNamespaceName) {",
      "215:         this.defaultNamespaceName = defaultNamespaceName;",
      "216:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "389:             }",
      "390:         }",
      "393:         mapping.setName(cleanupActionName(name));",
      "394:     }",
      "",
      "[Removed Lines]",
      "392:         mapping.setNamespace(namespace);",
      "",
      "[Added Lines]",
      "405:         mapping.setNamespace(cleanupNamespaceName(namespace));",
      "415:     protected String cleanupNamespaceName(final String rawNamespace) {",
      "416:         if (allowedNamespaceNames.matcher(rawNamespace).matches()) {",
      "417:             return rawNamespace;",
      "418:         } else {",
      "419:             LOG.warn(",
      "420:                 \"{} did not match allowed namespace names {} - default namespace {} will be used!\",",
      "421:                 rawNamespace, allowedActionNames, defaultActionName",
      "422:             );",
      "423:             return defaultNamespaceName;",
      "424:         }",
      "425:     }",
      "",
      "---------------"
    ],
    "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java||core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java": [
      "File: core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java -> core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import com.opensymphony.xwork2.config.impl.DefaultConfiguration;",
      "28: import com.opensymphony.xwork2.inject.Container;",
      "29: import org.apache.struts2.ServletActionContext;",
      "31: import org.apache.struts2.StrutsInternalTestCase;",
      "32: import org.apache.struts2.result.StrutsResultSupport;",
      "33: import org.apache.struts2.views.jsp.StrutsMockHttpServletRequest;",
      "35: import java.util.Arrays;",
      "36: import java.util.HashMap;",
      "37: import java.util.Map;",
      "",
      "[Removed Lines]",
      "30: import org.apache.struts2.StrutsException;",
      "",
      "[Added Lines]",
      "35: import java.util.Collections;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:         };",
      "66:     }",
      "69:         req.setupGetRequestURI(\"/my/namespace/actionName.action\");",
      "70:         req.setupGetServletPath(\"/my/namespace/actionName.action\");",
      "71:         req.setupGetAttribute(null);",
      "",
      "[Removed Lines]",
      "68:     public void testGetMapping() throws Exception {",
      "",
      "[Added Lines]",
      "68:     public void testGetMapping() {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "79:         assertNull(mapping.getMethod());",
      "80:     }",
      "83:         req.setupGetParameterMap(new HashMap());",
      "84:         req.setupGetRequestURI(\"/my/namespace/actionName!add.action\");",
      "85:         req.setupGetServletPath(\"/my/namespace/actionName!add.action\");",
      "",
      "[Removed Lines]",
      "82:     public void testGetMappingWithMethod() throws Exception {",
      "",
      "[Added Lines]",
      "82:     public void testGetMappingWithMethod() {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "95:         assertEquals(\"add\", mapping.getMethod());",
      "96:     }",
      "100:         req.setupGetRequestURI(\"/my/foo/actionName.action\");",
      "101:         req.setupGetServletPath(\"/my/foo/actionName.action\");",
      "",
      "[Removed Lines]",
      "98:     public void testGetMappingWithSlashedName() throws Exception {",
      "",
      "[Added Lines]",
      "98:     public void testGetMappingWithSlashedName() {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "111:         assertNull(mapping.getMethod());",
      "112:     }",
      "116:         req.setupGetRequestURI(\"/foo/actionName.action\");",
      "117:         req.setupGetServletPath(\"/foo/actionName.action\");",
      "",
      "[Removed Lines]",
      "114:     public void testGetMappingWithSlashedNameAtRootButNoSlashPackage() throws Exception {",
      "",
      "[Added Lines]",
      "114:     public void testGetMappingWithSlashedNameAtRootButNoSlashPackage() {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "127:         assertNull(mapping.getMethod());",
      "128:     }",
      "131:         config = new DefaultConfiguration();",
      "132:         PackageConfig pkg = new PackageConfig.Builder(\"myns\")",
      "133:             .namespace(\"/my/namespace\").build();",
      "",
      "[Removed Lines]",
      "130:     public void testGetMappingWithSlashedNameAtRoot() throws Exception {",
      "",
      "[Added Lines]",
      "130:     public void testGetMappingWithSlashedNameAtRoot() {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "163:         req.setupGetRequestURI(\"/my-hh/abc.action\");",
      "164:         req.setupGetServletPath(\"/my-hh/abc.action\");",
      "",
      "[Removed Lines]",
      "161:     public void testGetMappingWithNamespaceSlash() throws Exception {",
      "",
      "[Added Lines]",
      "161:     public void testGetMappingWithNamespaceSlash() {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "181:         assertEquals(\"my-hh/abc\", mapping.getName());",
      "182:     }",
      "185:         req.setupGetRequestURI(\"/bo/foo/actionName.action\");",
      "186:         req.setupGetServletPath(\"/bo/foo/actionName.action\");",
      "187:         req.setupGetAttribute(null);",
      "",
      "[Removed Lines]",
      "184:     public void testGetMappingWithUnknownNamespace() throws Exception {",
      "",
      "[Added Lines]",
      "184:     public void testGetMappingWithUnknownNamespace() {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "195:         assertNull(mapping.getMethod());",
      "196:     }",
      "199:         req.setupGetRequestURI(\"/bo/foo/actionName.action\");",
      "200:         req.setupGetServletPath(\"/bo/foo/actionName.action\");",
      "201:         req.setupGetAttribute(null);",
      "",
      "[Removed Lines]",
      "198:     public void testGetMappingWithUnknownNamespaceButFullNamespaceSelect() throws Exception {",
      "",
      "[Added Lines]",
      "198:     public void testGetMappingWithUnknownNamespaceButFullNamespaceSelect() {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "210:         assertNull(mapping.getMethod());",
      "211:     }",
      "214:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "215:         mapper.setAllowDynamicMethodCalls(\"true\");",
      "216:         ActionMapping mapping = mapper.getMappingFromActionName(\"actionName!add\");",
      "",
      "[Removed Lines]",
      "213:     public void testGetMappingWithActionName_methodAndName() throws Exception {",
      "",
      "[Added Lines]",
      "213:     public void testGetMappingWithActionName_methodAndName() {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "218:         assertEquals(\"add\", mapping.getMethod());",
      "219:     }",
      "222:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "223:         ActionMapping mapping = mapper.getMappingFromActionName(\"actionName\");",
      "224:         assertEquals(\"actionName\", mapping.getName());",
      "226:     }",
      "229:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "230:         mapper.setAllowDynamicMethodCalls(\"false\");",
      "231:         ActionMapping mapping = mapper.getMappingFromActionName(\"actionName!add\");",
      "232:         assertEquals(\"actionName!add\", mapping.getName());",
      "234:     }",
      "239:         parameterMap.put(DefaultActionMapper.METHOD_PREFIX + \"someMethod\", \"\");",
      "241:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "221:     public void testGetMappingWithActionName_name() throws Exception {",
      "225:         assertEquals(null, mapping.getMethod());",
      "228:     public void testGetMappingWithActionName_noDynamicMethod() throws Exception {",
      "233:         assertEquals(null, mapping.getMethod());",
      "236:     public void testGetMappingWithActionName_noDynamicMethodColonPrefix() throws Exception {",
      "238:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "221:     public void testGetMappingWithActionName_name() {",
      "225:         assertNull(mapping.getMethod());",
      "228:     public void testGetMappingWithActionName_noDynamicMethod() {",
      "233:         assertNull(mapping.getMethod());",
      "236:     public void testGetMappingWithActionName_noDynamicMethodColonPrefix() {",
      "238:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "247:         ActionMapping actionMapping = defaultActionMapper.getMapping(request, configManager);",
      "249:         assertEquals(\"someServletPath\", actionMapping.getName());",
      "251:     }",
      "254:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "255:         ActionMapping mapping = mapper.getMappingFromActionName(null);",
      "256:         assertNull(mapping);",
      "257:     }",
      "260:         req.setupGetParameterMap(new HashMap());",
      "261:         req.setupGetRequestURI(\"/my/namespace/actionName.action\");",
      "262:         req.setupGetServletPath(\"/my/namespace/actionName.action\");",
      "",
      "[Removed Lines]",
      "250:         assertEquals(null, actionMapping.getMethod());",
      "253:     public void testGetMappingWithActionName_null() throws Exception {",
      "259:     public void testGetUri() throws Exception {",
      "",
      "[Added Lines]",
      "250:         assertNull(actionMapping.getMethod());",
      "253:     public void testGetMappingWithActionName_null() {",
      "259:     public void testGetUri() {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "268:         assertEquals(\"/my/namespace/actionName.action\", mapper.getUriFromActionMapping(mapping));",
      "269:     }",
      "272:         req.setupGetParameterMap(new HashMap());",
      "273:         req.setupGetRequestURI(\"/my/namespace/actionName.action;abc=123rty56\");",
      "274:         req.setupGetServletPath(\"/my/namespace/actionName.action;abc=123rty56\");",
      "",
      "[Removed Lines]",
      "271:     public void testGetUriWithSemicolonPresent() throws Exception {",
      "",
      "[Added Lines]",
      "271:     public void testGetUriWithSemicolonPresent() {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "280:         assertEquals(\"/my/namespace/actionName.action\", mapper.getUriFromActionMapping(mapping));",
      "281:     }",
      "284:         req.setupGetParameterMap(new HashMap());",
      "285:         req.setupGetRequestURI(\"/my/namespace/actionName!add.action\");",
      "286:         req.setupGetServletPath(\"/my/namespace/actionName!add.action\");",
      "",
      "[Removed Lines]",
      "283:     public void testGetUriWithMethod() throws Exception {",
      "",
      "[Added Lines]",
      "283:     public void testGetUriWithMethod() {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "293:         assertEquals(\"/my/namespace/actionName!add.action\", mapper.getUriFromActionMapping(mapping));",
      "294:     }",
      "299:         ActionMapping orig = new ActionMapping();",
      "300:         orig.setExtension(\"foo\");",
      "",
      "[Removed Lines]",
      "296:     public void testGetUriWithOriginalExtension() throws Exception {",
      "297:         ActionMapping mapping = new ActionMapping(\"actionName\", \"/ns\", null, new HashMap());",
      "",
      "[Added Lines]",
      "296:     public void testGetUriWithOriginalExtension() {",
      "297:         ActionMapping mapping = new ActionMapping(\"actionName\", \"/ns\", null, new HashMap<String, Object>());",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "304:         assertEquals(\"/ns/actionName.foo\", mapper.getUriFromActionMapping(mapping));",
      "305:     }",
      "308:         req.setupGetParameterMap(new HashMap());",
      "309:         req.setupGetRequestURI(\"/my/namespace/actionName\");",
      "310:         req.setupGetServletPath(\"/my/namespace/actionName\");",
      "",
      "[Removed Lines]",
      "307:     public void testGetMappingWithNoExtension() throws Exception {",
      "",
      "[Added Lines]",
      "307:     public void testGetMappingWithNoExtension() {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "320:         assertNull(mapping.getMethod());",
      "321:     }",
      "324:         req.setupGetParameterMap(new HashMap());",
      "325:         req.setupGetRequestURI(\"/my/namespace/actionName.html\");",
      "326:         req.setupGetServletPath(\"/my/namespace/actionName.html\");",
      "",
      "[Removed Lines]",
      "323:     public void testGetMappingWithNoExtensionButUriHasExtension() throws Exception {",
      "",
      "[Added Lines]",
      "323:     public void testGetMappingWithNoExtensionButUriHasExtension() {",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "344:         ActionMapping actionMapping = new ActionMapping();",
      "346:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
      "",
      "[Removed Lines]",
      "343:     public void testParseNameAndNamespace1() throws Exception {",
      "",
      "[Added Lines]",
      "343:     public void testParseNameAndNamespace1() {",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "350:         assertEquals(actionMapping.getNamespace(), \"\");",
      "351:     }",
      "354:         ActionMapping actionMapping = new ActionMapping();",
      "356:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
      "",
      "[Removed Lines]",
      "353:     public void testParseNameAndNamespace2() throws Exception {",
      "",
      "[Added Lines]",
      "353:     public void testParseNameAndNamespace2() {",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "360:         assertEquals(actionMapping.getNamespace(), \"/\");",
      "361:     }",
      "364:         ActionMapping actionMapping = new ActionMapping();",
      "366:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
      "",
      "[Removed Lines]",
      "363:     public void testParseNameAndNamespace3() throws Exception {",
      "",
      "[Added Lines]",
      "363:     public void testParseNameAndNamespace3() {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "370:         assertEquals(actionMapping.getNamespace(), \"/my\");",
      "371:     }",
      "374:         ActionMapping actionMapping = new ActionMapping();",
      "376:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
      "",
      "[Removed Lines]",
      "373:     public void testParseNameAndNamespace_NoSlashes() throws Exception {",
      "",
      "[Added Lines]",
      "373:     public void testParseNameAndNamespace_NoSlashes() {",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "381:         assertEquals(actionMapping.getNamespace(), \"\");",
      "382:     }",
      "385:         ActionMapping actionMapping = new ActionMapping();",
      "387:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
      "",
      "[Removed Lines]",
      "384:     public void testParseNameAndNamespace_AllowSlashes() throws Exception {",
      "",
      "[Added Lines]",
      "384:     public void testParseNameAndNamespace_AllowSlashes() {",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "402:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction\", \"\");",
      "404:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "400:     public void testActionPrefixWhenDisabled() throws Exception {",
      "401:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "400:     public void testActionPrefixWhenDisabled() {",
      "401:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "411:         assertEquals(\"someServletPath\", actionMapping.getName());",
      "412:     }",
      "416:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction\", \"\");",
      "418:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "414:     public void testActionPrefixWhenEnabled() throws Exception {",
      "415:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "414:     public void testActionPrefixWhenEnabled() {",
      "415:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "426:         assertEquals(\"myAction\", actionMapping.getName());",
      "427:     }",
      "431:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"my/Action\", \"\");",
      "433:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "429:     public void testActionPrefixWhenSlashesAndCrossNamespaceDisabled() throws Exception {",
      "430:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "429:     public void testActionPrefixWhenSlashesAndCrossNamespaceDisabled() {",
      "430:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "442:         assertEquals(\"my/Action\", actionMapping.getName());",
      "443:     }",
      "447:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"my/Action\", \"\");",
      "449:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "445:     public void testActionPrefixWhenSlashesButSlashesDisabledAndCrossNamespaceDisabled() throws Exception {",
      "446:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "445:     public void testActionPrefixWhenSlashesButSlashesDisabledAndCrossNamespaceDisabled() {",
      "446:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "458:         assertEquals(\"Action\", actionMapping.getName());",
      "459:     }",
      "463:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"my/Action\", \"\");",
      "465:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "461:     public void testActionPrefixWhenSlashesButSlashesDisabledAndCrossNamespace() throws Exception {",
      "462:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "461:     public void testActionPrefixWhenSlashesButSlashesDisabledAndCrossNamespace() {",
      "462:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "475:         assertEquals(\"my/Action\", actionMapping.getName());",
      "476:     }",
      "480:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"/my/Action\", \"\");",
      "482:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "478:     public void testActionPrefixWhenCrossNamespace() throws Exception {",
      "479:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "478:     public void testActionPrefixWhenCrossNamespace() {",
      "479:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "491:         assertEquals(\"/my/Action\", actionMapping.getName());",
      "492:     }",
      "496:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction\", \"\");",
      "497:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction.x\", \"\");",
      "498:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction.y\", \"\");",
      "",
      "[Removed Lines]",
      "494:     public void testActionPrefix_fromImageButton() throws Exception {",
      "495:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "494:     public void testActionPrefix_fromImageButton() {",
      "495:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "508:         assertEquals(\"myAction\", actionMapping.getName());",
      "509:     }",
      "513:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction.x\", \"\");",
      "514:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction.y\", \"\");",
      "",
      "[Removed Lines]",
      "511:     public void testActionPrefix_fromIEImageButton() throws Exception {",
      "512:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "511:     public void testActionPrefix_fromIEImageButton() {",
      "512:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "524:         assertEquals(\"myAction\", actionMapping.getName());",
      "525:     }",
      "529:         parameterMap.put(\"redirect:\" + \"http://www.google.com\", \"\");",
      "531:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "527:     public void testRedirectPrefix() throws Exception {",
      "528:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "527:     public void testRedirectPrefix() {",
      "528:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "540:         assertNull(result);",
      "541:     }",
      "545:         parameterMap.put(\"redirect:\" + \"http://%{3*4}\", \"\");",
      "547:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "543:     public void testUnsafeRedirectPrefix() throws Exception {",
      "544:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "543:     public void testUnsafeRedirectPrefix() {",
      "544:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "556:         assertNull(result);",
      "557:     }",
      "561:         parameterMap.put(\"redirectAction:\" + \"myAction\", \"\");",
      "563:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "559:     public void testRedirectActionPrefix() throws Exception {",
      "560:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "559:     public void testRedirectActionPrefix() {",
      "560:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "573:         assertNull(result);",
      "574:     }",
      "578:         parameterMap.put(\"redirectAction:\" + \"%{3*4}\", \"\");",
      "580:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "576:     public void testUnsafeRedirectActionPrefix() throws Exception {",
      "577:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "576:     public void testUnsafeRedirectActionPrefix() {",
      "577:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "590:         assertNull(result);",
      "591:     }",
      "595:         parameterMap.put(\"redirectAction:\" + \"myAction\", \"\");",
      "597:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "593:     public void testRedirectActionPrefixWithEmptyExtension() throws Exception {",
      "594:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "593:     public void testRedirectActionPrefixWithEmptyExtension() {",
      "594:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "608:         assertNull(result);",
      "609:     }",
      "613:         parameterMap.put(\"foo:myAction\", \"\");",
      "615:         final StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
      "",
      "[Removed Lines]",
      "611:     public void testCustomActionPrefix() throws Exception {",
      "612:         Map parameterMap = new HashMap();",
      "",
      "[Added Lines]",
      "611:     public void testCustomActionPrefix() {",
      "612:         Map<String, Object> parameterMap = new HashMap<>();",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "627:         assertEquals(actionMapping.getName(), \"myAction\");",
      "628:     }",
      "631:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "632:         String name = mapper.dropExtension(\"foo.action\", new ActionMapping());",
      "635:         name = mapper.dropExtension(\"foo.action.action\", new ActionMapping());",
      "638:     }",
      "641:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "642:         mapper.setExtensions(\"action,,\");",
      "643:         String name = mapper.dropExtension(\"foo.action\", new ActionMapping());",
      "645:         name = mapper.dropExtension(\"foo\", new ActionMapping());",
      "647:         assertNull(mapper.dropExtension(\"foo.bar\", new ActionMapping()));",
      "648:         assertNull(mapper.dropExtension(\"foo.\", new ActionMapping()));",
      "649:     }",
      "652:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "653:         mapper.setExtensions(\"action,,\");",
      "655:         String name = mapper.dropExtension(\"/foo/bar-1.0/baz.action\", new ActionMapping());",
      "658:         name = mapper.dropExtension(\"/foo/bar-1.0/baz\", new ActionMapping());",
      "660:     }",
      "663:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "664:         ActionMapping actionMapping = new ActionMapping();",
      "665:         actionMapping.setMethod(\"myMethod\");",
      "",
      "[Removed Lines]",
      "630:     public void testDropExtension() throws Exception {",
      "633:         assertTrue(\"Name not right: \"+name, \"foo\".equals(name));",
      "636:         assertTrue(\"Name not right: \"+name, \"foo.action\".equals(name));",
      "640:     public void testDropExtensionWhenBlank() throws Exception {",
      "644:         assertTrue(\"Name not right: \"+name, \"foo\".equals(name));",
      "646:         assertTrue(\"Name not right: \"+name, \"foo\".equals(name));",
      "651:     public void testDropExtensionEmbeddedDot() throws Exception {",
      "656:         assertTrue(\"Name not right: \"+name, \"/foo/bar-1.0/baz\".equals(name));",
      "659:         assertTrue(\"Name not right: \"+name, \"/foo/bar-1.0/baz\".equals(name));",
      "662:     public void testGetUriFromActionMapper1() throws Exception {",
      "",
      "[Added Lines]",
      "630:     public void testDropExtension() {",
      "633:         assertEquals(\"Name not right: \" + name, \"foo\", name);",
      "636:         assertEquals(\"Name not right: \" + name, \"foo.action\", name);",
      "640:     public void testDropExtensionWhenBlank() {",
      "644:         assertEquals(\"Name not right: \" + name, \"foo\", name);",
      "646:         assertEquals(\"Name not right: \" + name, \"foo\", name);",
      "651:     public void testDropExtensionEmbeddedDot() {",
      "656:         assertEquals(\"Name not right: \" + name, \"/foo/bar-1.0/baz\", name);",
      "659:         assertEquals(\"Name not right: \" + name, \"/foo/bar-1.0/baz\", name);",
      "662:     public void testGetUriFromActionMapper1() {",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "670:         assertEquals(\"/myNamespace/myActionName!myMethod.action\", uri);",
      "671:     }",
      "674:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "675:         ActionMapping actionMapping = new ActionMapping();",
      "676:         actionMapping.setMethod(\"myMethod\");",
      "",
      "[Removed Lines]",
      "673:     public void testGetUriFromActionMapper2() throws Exception {",
      "",
      "[Added Lines]",
      "673:     public void testGetUriFromActionMapper2() {",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "681:         assertEquals(\"/myActionName!myMethod.action\", uri);",
      "682:     }",
      "685:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "686:         ActionMapping actionMapping = new ActionMapping();",
      "687:         actionMapping.setMethod(\"myMethod\");",
      "",
      "[Removed Lines]",
      "684:     public void testGetUriFromActionMapper3() throws Exception {",
      "",
      "[Added Lines]",
      "684:     public void testGetUriFromActionMapper3() {",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "693:     }",
      "697:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "698:         ActionMapping actionMapping = new ActionMapping();",
      "699:         actionMapping.setName(\"myActionName\");",
      "",
      "[Removed Lines]",
      "696:     public void testGetUriFromActionMapper4() throws Exception {",
      "",
      "[Added Lines]",
      "696:     public void testGetUriFromActionMapper4() {",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "703:         assertEquals(\"/myActionName.action\", uri);",
      "704:     }",
      "707:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "708:         ActionMapping actionMapping = new ActionMapping();",
      "709:         actionMapping.setName(\"myActionName\");",
      "",
      "[Removed Lines]",
      "706:     public void testGetUriFromActionMapper5() throws Exception {",
      "",
      "[Added Lines]",
      "706:     public void testGetUriFromActionMapper5() {",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "714:     }",
      "718:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "719:         ActionMapping actionMapping = new ActionMapping();",
      "720:         actionMapping.setMethod(\"myMethod\");",
      "",
      "[Removed Lines]",
      "717:     public void testGetUriFromActionMapper6() throws Exception {",
      "",
      "[Added Lines]",
      "717:     public void testGetUriFromActionMapper6() {",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "725:         assertEquals(\"/myNamespace/myActionName!myMethod.action?test=bla\", uri);",
      "726:     }",
      "729:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "730:         ActionMapping actionMapping = new ActionMapping();",
      "731:         actionMapping.setMethod(\"myMethod\");",
      "",
      "[Removed Lines]",
      "728:     public void testGetUriFromActionMapper7() throws Exception {",
      "",
      "[Added Lines]",
      "728:     public void testGetUriFromActionMapper7() {",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "736:         assertEquals(\"/myActionName!myMethod.action?test=bla\", uri);",
      "737:     }",
      "740:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "741:         ActionMapping actionMapping = new ActionMapping();",
      "742:         actionMapping.setMethod(\"myMethod\");",
      "",
      "[Removed Lines]",
      "739:     public void testGetUriFromActionMapper8() throws Exception {",
      "",
      "[Added Lines]",
      "739:     public void testGetUriFromActionMapper8() {",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "748:     }",
      "752:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "753:         ActionMapping actionMapping = new ActionMapping();",
      "754:         actionMapping.setName(\"myActionName?test=bla\");",
      "",
      "[Removed Lines]",
      "751:     public void testGetUriFromActionMapper9() throws Exception {",
      "",
      "[Added Lines]",
      "751:     public void testGetUriFromActionMapper9() {",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "758:         assertEquals(\"/myActionName.action?test=bla\", uri);",
      "759:     }",
      "762:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "763:         ActionMapping actionMapping = new ActionMapping();",
      "764:         actionMapping.setName(\"myActionName?test=bla\");",
      "",
      "[Removed Lines]",
      "761:     public void testGetUriFromActionMapper10() throws Exception {",
      "",
      "[Added Lines]",
      "761:     public void testGetUriFromActionMapper10() {",
      "",
      "---------------",
      "--- Hunk 47 ---",
      "[Context before]",
      "768:         assertEquals(\"/myActionName.action?test=bla\", uri);",
      "769:     }",
      "772:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "773:         ActionMapping actionMapping = new ActionMapping();",
      "774:         actionMapping.setName(\"myActionName.action\");",
      "",
      "[Removed Lines]",
      "771:     public void testGetUriFromActionMapper11() throws Exception {",
      "",
      "[Added Lines]",
      "771:     public void testGetUriFromActionMapper11() {",
      "",
      "---------------",
      "--- Hunk 48 ---",
      "[Context before]",
      "778:         assertEquals(\"/myActionName.action\", uri);",
      "779:     }",
      "782:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "783:         ActionMapping actionMapping = new ActionMapping();",
      "784:         actionMapping.setName(\"myActionName.action\");",
      "",
      "[Removed Lines]",
      "781:     public void testGetUriFromActionMapper12() throws Exception {",
      "",
      "[Added Lines]",
      "781:     public void testGetUriFromActionMapper12() {",
      "",
      "---------------",
      "--- Hunk 49 ---",
      "[Context before]",
      "788:         assertEquals(\"/myActionName.action\", uri);",
      "789:     }",
      "792:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "793:         ActionMapping actionMapping = new ActionMapping();",
      "794:         actionMapping.setMethod(\"myMethod\");",
      "",
      "[Removed Lines]",
      "791:     public void testGetUriFromActionMapper_justActionAndMethod() throws Exception {",
      "",
      "[Added Lines]",
      "791:     public void testGetUriFromActionMapper_justActionAndMethod() {",
      "",
      "---------------",
      "--- Hunk 50 ---",
      "[Context before]",
      "799:         assertEquals(\"myActionName!myMethod\", uri);",
      "800:     }",
      "803:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "804:         mapper.setExtensions(\",,\");",
      "805:         ActionMapping actionMapping = new ActionMapping();",
      "",
      "[Removed Lines]",
      "802:     public void testGetUriFromActionMapperWhenBlankExtension() throws Exception {",
      "",
      "[Added Lines]",
      "802:     public void testGetUriFromActionMapperWhenBlankExtension() {",
      "",
      "---------------",
      "--- Hunk 51 ---",
      "[Context before]",
      "811:         assertEquals(\"/myNamespace/myActionName!myMethod\", uri);",
      "812:     }",
      "815:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "816:         mapper.setExtensions(\"\");",
      "817:         assertNull(mapper.extensions);",
      "",
      "[Removed Lines]",
      "814:     public void testSetExtension() throws Exception {",
      "",
      "[Added Lines]",
      "814:     public void testSetExtension() {",
      "",
      "---------------",
      "--- Hunk 52 ---",
      "[Context before]",
      "828:         assertEquals(Arrays.asList(\"html\", \"\", \"xml\"), mapper.extensions);",
      "830:         mapper.setExtensions(\"xml\");",
      "833:         mapper.setExtensions(\",\");",
      "837:     }",
      "840:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "842:         String actionName = \"action\";",
      "",
      "[Removed Lines]",
      "831:         assertEquals(Arrays.asList(\"xml\"), mapper.extensions);",
      "834:         assertEquals(Arrays.asList(\"\"), mapper.extensions);",
      "839:     public void testAllowedActionNames() throws Exception {",
      "",
      "[Added Lines]",
      "831:         assertEquals(Collections.singletonList(\"xml\"), mapper.extensions);",
      "834:         assertEquals(Collections.singletonList(\"\"), mapper.extensions);",
      "837:     }",
      "839:     public void testAllowedNamespaceNames() {",
      "840:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "842:         String namespace = \"/\";",
      "843:         assertEquals(namespace, mapper.cleanupNamespaceName(namespace));",
      "845:         namespace = \"${namespace}\";",
      "846:         assertEquals(mapper.defaultNamespaceName, mapper.cleanupNamespaceName(namespace));",
      "848:         namespace = \"${${%{namespace}}}\";",
      "849:         assertEquals(mapper.defaultNamespaceName, mapper.cleanupNamespaceName(namespace));",
      "851:         namespace = \"${#foo='namespace',#foo}\";",
      "852:         assertEquals(mapper.defaultNamespaceName, mapper.cleanupNamespaceName(namespace));",
      "854:         namespace = \"/test-namespace/namespace/\";",
      "855:         assertEquals(\"/test-namespace/namespace/\", mapper.cleanupNamespaceName(namespace));",
      "857:         namespace = \"/test_namespace/namespace-test/\";",
      "858:         assertEquals(\"/test_namespace/namespace-test/\", mapper.cleanupNamespaceName(namespace));",
      "860:         namespace = \"/test_namespace/namespace.test/\";",
      "861:         assertEquals(\"/test_namespace/namespace.test/\", mapper.cleanupActionName(namespace));",
      "864:     public void testAllowedActionNames() {",
      "",
      "---------------",
      "--- Hunk 53 ---",
      "[Context before]",
      "861:         assertEquals(\"test!bar.action\", mapper.cleanupActionName(actionName));",
      "862:     }",
      "865:         DefaultActionMapper mapper = new DefaultActionMapper();",
      "867:         assertEquals(\"\", mapper.cleanupMethodName(\"\"));",
      "",
      "[Removed Lines]",
      "864:     public void testAllowedMethodNames() throws Exception {",
      "",
      "[Added Lines]",
      "889:     public void testAllowedMethodNames() {",
      "",
      "---------------"
    ],
    "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java||plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java": [
      "File: plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java -> plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "364:             name = uri.substring(namespace.length() + 1);",
      "365:         }",
      "368:         mapping.setName(name);",
      "369:     }",
      "",
      "[Removed Lines]",
      "367:         mapping.setNamespace(namespace);",
      "",
      "[Added Lines]",
      "367:         mapping.setNamespace(cleanupNamespaceName(namespace));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58d87025e989b71b35cf6a832d32dcd7bc96acea",
      "candidate_info": {
        "commit_hash": "58d87025e989b71b35cf6a832d32dcd7bc96acea",
        "repo": "apache/struts",
        "commit_url": "https://github.com/apache/struts/commit/58d87025e989b71b35cf6a832d32dcd7bc96acea",
        "files": [
          "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java"
        ],
        "message": "Fix logging messages",
        "before_after_code_files": [
          "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java"
          ],
          "candidate": [
            "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java": [
          "File: core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java -> core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "418:         } else {",
          "419:             LOG.warn(",
          "420:                 \"{} did not match allowed namespace names {} - default namespace {} will be used!\",",
          "422:             );",
          "423:             return defaultNamespaceName;",
          "424:         }",
          "",
          "[Removed Lines]",
          "421:                 rawNamespace, allowedActionNames, defaultActionName",
          "",
          "[Added Lines]",
          "421:                 rawNamespace, allowedNamespaceNames, defaultNamespaceName",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eec0d8e877dc86da4946268caf73c2f7ed5d2fc6",
      "candidate_info": {
        "commit_hash": "eec0d8e877dc86da4946268caf73c2f7ed5d2fc6",
        "repo": "apache/struts",
        "commit_url": "https://github.com/apache/struts/commit/eec0d8e877dc86da4946268caf73c2f7ed5d2fc6",
        "files": [
          "core/src/main/java/org/apache/struts2/StrutsConstants.java",
          "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
          "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
          "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java"
        ],
        "message": "Validates action, namespace and method in the same way",
        "before_after_code_files": [
          "core/src/main/java/org/apache/struts2/StrutsConstants.java||core/src/main/java/org/apache/struts2/StrutsConstants.java",
          "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
          "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java||core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
          "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java||plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/org/apache/struts2/StrutsConstants.java||core/src/main/java/org/apache/struts2/StrutsConstants.java",
            "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
            "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java||core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
            "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java||plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java"
          ],
          "candidate": [
            "core/src/main/java/org/apache/struts2/StrutsConstants.java||core/src/main/java/org/apache/struts2/StrutsConstants.java",
            "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
            "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java||core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
            "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java||plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/apache/struts2/StrutsConstants.java||core/src/main/java/org/apache/struts2/StrutsConstants.java": [
          "File: core/src/main/java/org/apache/struts2/StrutsConstants.java -> core/src/main/java/org/apache/struts2/StrutsConstants.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:     public static final String STRUTS_EXPRESSION_PARSER = \"struts.expression.parser\";",
          "286:     public static final String STRUTS_ALLOWED_ACTION_NAMES = \"struts.allowed.action.names\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:     public static final String STRUTS_ALLOWED_NAMESPACE_NAMES = \"struts.allowed.namespace.names\";",
          "288:     public static final String STRUTS_DEFAULT_NAMESPACE_NAME = \"struts.default.namespace.name\";",
          "",
          "---------------"
        ],
        "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java": [
          "File: core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java -> core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import org.apache.struts2.RequestUtils;",
          "32: import org.apache.struts2.ServletActionContext;",
          "33: import org.apache.struts2.StrutsConstants;",
          "35: import org.apache.struts2.util.PrefixTrie;",
          "37: import javax.servlet.http.HttpServletRequest;",
          "",
          "[Removed Lines]",
          "34: import org.apache.struts2.StrutsException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:     protected boolean allowSlashesInActionNames = false;",
          "118:     protected boolean alwaysSelectFullNamespace = false;",
          "119:     protected PrefixTrie prefixTrie = null;",
          "120:     protected Pattern allowedActionNames = Pattern.compile(\"[a-zA-Z0-9._!/\\\\-]*\");",
          "121:     protected String defaultActionName = \"index\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:     protected Pattern allowedNamespaceNames = Pattern.compile(\"[a-zA-Z0-9._/\\\\-]*\");",
          "121:     protected String defaultNamespaceName = \"/\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:         this.alwaysSelectFullNamespace = BooleanUtils.toBoolean(alwaysSelectFullNamespace);",
          "203:     }",
          "205:     @Inject(value = StrutsConstants.STRUTS_ALLOWED_ACTION_NAMES, required = false)",
          "206:     public void setAllowedActionNames(String allowedActionNames) {",
          "207:         this.allowedActionNames = Pattern.compile(allowedActionNames);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:     @Inject(value = StrutsConstants.STRUTS_ALLOWED_NAMESPACE_NAMES, required = false)",
          "209:     public void setAllowedNamespaceNames(String allowedNamespaceNames) {",
          "210:         this.allowedNamespaceNames = Pattern.compile(allowedNamespaceNames);",
          "211:     }",
          "213:     @Inject(value = StrutsConstants.STRUTS_DEFAULT_NAMESPACE_NAME, required = false)",
          "214:     public void setDefaultNamespaceName(String defaultNamespaceName) {",
          "215:         this.defaultNamespaceName = defaultNamespaceName;",
          "216:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "389:             }",
          "390:         }",
          "393:         mapping.setName(cleanupActionName(name));",
          "394:     }",
          "",
          "[Removed Lines]",
          "392:         mapping.setNamespace(namespace);",
          "",
          "[Added Lines]",
          "405:         mapping.setNamespace(cleanupNamespaceName(namespace));",
          "415:     protected String cleanupNamespaceName(final String rawNamespace) {",
          "416:         if (allowedNamespaceNames.matcher(rawNamespace).matches()) {",
          "417:             return rawNamespace;",
          "418:         } else {",
          "419:             LOG.warn(",
          "420:                 \"{} did not match allowed namespace names {} - default namespace {} will be used!\",",
          "421:                 rawNamespace, allowedActionNames, defaultActionName",
          "422:             );",
          "423:             return defaultNamespaceName;",
          "424:         }",
          "425:     }",
          "",
          "---------------"
        ],
        "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java||core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java": [
          "File: core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java -> core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import com.opensymphony.xwork2.config.impl.DefaultConfiguration;",
          "28: import com.opensymphony.xwork2.inject.Container;",
          "29: import org.apache.struts2.ServletActionContext;",
          "31: import org.apache.struts2.StrutsInternalTestCase;",
          "32: import org.apache.struts2.result.StrutsResultSupport;",
          "33: import org.apache.struts2.views.jsp.StrutsMockHttpServletRequest;",
          "35: import java.util.Arrays;",
          "36: import java.util.HashMap;",
          "37: import java.util.Map;",
          "",
          "[Removed Lines]",
          "30: import org.apache.struts2.StrutsException;",
          "",
          "[Added Lines]",
          "35: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:         };",
          "66:     }",
          "69:         req.setupGetRequestURI(\"/my/namespace/actionName.action\");",
          "70:         req.setupGetServletPath(\"/my/namespace/actionName.action\");",
          "71:         req.setupGetAttribute(null);",
          "",
          "[Removed Lines]",
          "68:     public void testGetMapping() throws Exception {",
          "",
          "[Added Lines]",
          "68:     public void testGetMapping() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:         assertNull(mapping.getMethod());",
          "80:     }",
          "83:         req.setupGetParameterMap(new HashMap());",
          "84:         req.setupGetRequestURI(\"/my/namespace/actionName!add.action\");",
          "85:         req.setupGetServletPath(\"/my/namespace/actionName!add.action\");",
          "",
          "[Removed Lines]",
          "82:     public void testGetMappingWithMethod() throws Exception {",
          "",
          "[Added Lines]",
          "82:     public void testGetMappingWithMethod() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:         assertEquals(\"add\", mapping.getMethod());",
          "96:     }",
          "100:         req.setupGetRequestURI(\"/my/foo/actionName.action\");",
          "101:         req.setupGetServletPath(\"/my/foo/actionName.action\");",
          "",
          "[Removed Lines]",
          "98:     public void testGetMappingWithSlashedName() throws Exception {",
          "",
          "[Added Lines]",
          "98:     public void testGetMappingWithSlashedName() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:         assertNull(mapping.getMethod());",
          "112:     }",
          "116:         req.setupGetRequestURI(\"/foo/actionName.action\");",
          "117:         req.setupGetServletPath(\"/foo/actionName.action\");",
          "",
          "[Removed Lines]",
          "114:     public void testGetMappingWithSlashedNameAtRootButNoSlashPackage() throws Exception {",
          "",
          "[Added Lines]",
          "114:     public void testGetMappingWithSlashedNameAtRootButNoSlashPackage() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "127:         assertNull(mapping.getMethod());",
          "128:     }",
          "131:         config = new DefaultConfiguration();",
          "132:         PackageConfig pkg = new PackageConfig.Builder(\"myns\")",
          "133:             .namespace(\"/my/namespace\").build();",
          "",
          "[Removed Lines]",
          "130:     public void testGetMappingWithSlashedNameAtRoot() throws Exception {",
          "",
          "[Added Lines]",
          "130:     public void testGetMappingWithSlashedNameAtRoot() {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "163:         req.setupGetRequestURI(\"/my-hh/abc.action\");",
          "164:         req.setupGetServletPath(\"/my-hh/abc.action\");",
          "",
          "[Removed Lines]",
          "161:     public void testGetMappingWithNamespaceSlash() throws Exception {",
          "",
          "[Added Lines]",
          "161:     public void testGetMappingWithNamespaceSlash() {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "181:         assertEquals(\"my-hh/abc\", mapping.getName());",
          "182:     }",
          "185:         req.setupGetRequestURI(\"/bo/foo/actionName.action\");",
          "186:         req.setupGetServletPath(\"/bo/foo/actionName.action\");",
          "187:         req.setupGetAttribute(null);",
          "",
          "[Removed Lines]",
          "184:     public void testGetMappingWithUnknownNamespace() throws Exception {",
          "",
          "[Added Lines]",
          "184:     public void testGetMappingWithUnknownNamespace() {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "195:         assertNull(mapping.getMethod());",
          "196:     }",
          "199:         req.setupGetRequestURI(\"/bo/foo/actionName.action\");",
          "200:         req.setupGetServletPath(\"/bo/foo/actionName.action\");",
          "201:         req.setupGetAttribute(null);",
          "",
          "[Removed Lines]",
          "198:     public void testGetMappingWithUnknownNamespaceButFullNamespaceSelect() throws Exception {",
          "",
          "[Added Lines]",
          "198:     public void testGetMappingWithUnknownNamespaceButFullNamespaceSelect() {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "210:         assertNull(mapping.getMethod());",
          "211:     }",
          "214:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "215:         mapper.setAllowDynamicMethodCalls(\"true\");",
          "216:         ActionMapping mapping = mapper.getMappingFromActionName(\"actionName!add\");",
          "",
          "[Removed Lines]",
          "213:     public void testGetMappingWithActionName_methodAndName() throws Exception {",
          "",
          "[Added Lines]",
          "213:     public void testGetMappingWithActionName_methodAndName() {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "218:         assertEquals(\"add\", mapping.getMethod());",
          "219:     }",
          "222:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "223:         ActionMapping mapping = mapper.getMappingFromActionName(\"actionName\");",
          "224:         assertEquals(\"actionName\", mapping.getName());",
          "226:     }",
          "229:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "230:         mapper.setAllowDynamicMethodCalls(\"false\");",
          "231:         ActionMapping mapping = mapper.getMappingFromActionName(\"actionName!add\");",
          "232:         assertEquals(\"actionName!add\", mapping.getName());",
          "234:     }",
          "239:         parameterMap.put(DefaultActionMapper.METHOD_PREFIX + \"someMethod\", \"\");",
          "241:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "221:     public void testGetMappingWithActionName_name() throws Exception {",
          "225:         assertEquals(null, mapping.getMethod());",
          "228:     public void testGetMappingWithActionName_noDynamicMethod() throws Exception {",
          "233:         assertEquals(null, mapping.getMethod());",
          "236:     public void testGetMappingWithActionName_noDynamicMethodColonPrefix() throws Exception {",
          "238:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "221:     public void testGetMappingWithActionName_name() {",
          "225:         assertNull(mapping.getMethod());",
          "228:     public void testGetMappingWithActionName_noDynamicMethod() {",
          "233:         assertNull(mapping.getMethod());",
          "236:     public void testGetMappingWithActionName_noDynamicMethodColonPrefix() {",
          "238:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "247:         ActionMapping actionMapping = defaultActionMapper.getMapping(request, configManager);",
          "249:         assertEquals(\"someServletPath\", actionMapping.getName());",
          "251:     }",
          "254:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "255:         ActionMapping mapping = mapper.getMappingFromActionName(null);",
          "256:         assertNull(mapping);",
          "257:     }",
          "260:         req.setupGetParameterMap(new HashMap());",
          "261:         req.setupGetRequestURI(\"/my/namespace/actionName.action\");",
          "262:         req.setupGetServletPath(\"/my/namespace/actionName.action\");",
          "",
          "[Removed Lines]",
          "250:         assertEquals(null, actionMapping.getMethod());",
          "253:     public void testGetMappingWithActionName_null() throws Exception {",
          "259:     public void testGetUri() throws Exception {",
          "",
          "[Added Lines]",
          "250:         assertNull(actionMapping.getMethod());",
          "253:     public void testGetMappingWithActionName_null() {",
          "259:     public void testGetUri() {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "268:         assertEquals(\"/my/namespace/actionName.action\", mapper.getUriFromActionMapping(mapping));",
          "269:     }",
          "272:         req.setupGetParameterMap(new HashMap());",
          "273:         req.setupGetRequestURI(\"/my/namespace/actionName.action;abc=123rty56\");",
          "274:         req.setupGetServletPath(\"/my/namespace/actionName.action;abc=123rty56\");",
          "",
          "[Removed Lines]",
          "271:     public void testGetUriWithSemicolonPresent() throws Exception {",
          "",
          "[Added Lines]",
          "271:     public void testGetUriWithSemicolonPresent() {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "280:         assertEquals(\"/my/namespace/actionName.action\", mapper.getUriFromActionMapping(mapping));",
          "281:     }",
          "284:         req.setupGetParameterMap(new HashMap());",
          "285:         req.setupGetRequestURI(\"/my/namespace/actionName!add.action\");",
          "286:         req.setupGetServletPath(\"/my/namespace/actionName!add.action\");",
          "",
          "[Removed Lines]",
          "283:     public void testGetUriWithMethod() throws Exception {",
          "",
          "[Added Lines]",
          "283:     public void testGetUriWithMethod() {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "293:         assertEquals(\"/my/namespace/actionName!add.action\", mapper.getUriFromActionMapping(mapping));",
          "294:     }",
          "299:         ActionMapping orig = new ActionMapping();",
          "300:         orig.setExtension(\"foo\");",
          "",
          "[Removed Lines]",
          "296:     public void testGetUriWithOriginalExtension() throws Exception {",
          "297:         ActionMapping mapping = new ActionMapping(\"actionName\", \"/ns\", null, new HashMap());",
          "",
          "[Added Lines]",
          "296:     public void testGetUriWithOriginalExtension() {",
          "297:         ActionMapping mapping = new ActionMapping(\"actionName\", \"/ns\", null, new HashMap<String, Object>());",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "304:         assertEquals(\"/ns/actionName.foo\", mapper.getUriFromActionMapping(mapping));",
          "305:     }",
          "308:         req.setupGetParameterMap(new HashMap());",
          "309:         req.setupGetRequestURI(\"/my/namespace/actionName\");",
          "310:         req.setupGetServletPath(\"/my/namespace/actionName\");",
          "",
          "[Removed Lines]",
          "307:     public void testGetMappingWithNoExtension() throws Exception {",
          "",
          "[Added Lines]",
          "307:     public void testGetMappingWithNoExtension() {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "320:         assertNull(mapping.getMethod());",
          "321:     }",
          "324:         req.setupGetParameterMap(new HashMap());",
          "325:         req.setupGetRequestURI(\"/my/namespace/actionName.html\");",
          "326:         req.setupGetServletPath(\"/my/namespace/actionName.html\");",
          "",
          "[Removed Lines]",
          "323:     public void testGetMappingWithNoExtensionButUriHasExtension() throws Exception {",
          "",
          "[Added Lines]",
          "323:     public void testGetMappingWithNoExtensionButUriHasExtension() {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "344:         ActionMapping actionMapping = new ActionMapping();",
          "346:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
          "",
          "[Removed Lines]",
          "343:     public void testParseNameAndNamespace1() throws Exception {",
          "",
          "[Added Lines]",
          "343:     public void testParseNameAndNamespace1() {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "350:         assertEquals(actionMapping.getNamespace(), \"\");",
          "351:     }",
          "354:         ActionMapping actionMapping = new ActionMapping();",
          "356:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
          "",
          "[Removed Lines]",
          "353:     public void testParseNameAndNamespace2() throws Exception {",
          "",
          "[Added Lines]",
          "353:     public void testParseNameAndNamespace2() {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "360:         assertEquals(actionMapping.getNamespace(), \"/\");",
          "361:     }",
          "364:         ActionMapping actionMapping = new ActionMapping();",
          "366:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
          "",
          "[Removed Lines]",
          "363:     public void testParseNameAndNamespace3() throws Exception {",
          "",
          "[Added Lines]",
          "363:     public void testParseNameAndNamespace3() {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "370:         assertEquals(actionMapping.getNamespace(), \"/my\");",
          "371:     }",
          "374:         ActionMapping actionMapping = new ActionMapping();",
          "376:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
          "",
          "[Removed Lines]",
          "373:     public void testParseNameAndNamespace_NoSlashes() throws Exception {",
          "",
          "[Added Lines]",
          "373:     public void testParseNameAndNamespace_NoSlashes() {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "381:         assertEquals(actionMapping.getNamespace(), \"\");",
          "382:     }",
          "385:         ActionMapping actionMapping = new ActionMapping();",
          "387:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
          "",
          "[Removed Lines]",
          "384:     public void testParseNameAndNamespace_AllowSlashes() throws Exception {",
          "",
          "[Added Lines]",
          "384:     public void testParseNameAndNamespace_AllowSlashes() {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "402:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction\", \"\");",
          "404:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "400:     public void testActionPrefixWhenDisabled() throws Exception {",
          "401:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "400:     public void testActionPrefixWhenDisabled() {",
          "401:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "411:         assertEquals(\"someServletPath\", actionMapping.getName());",
          "412:     }",
          "416:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction\", \"\");",
          "418:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "414:     public void testActionPrefixWhenEnabled() throws Exception {",
          "415:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "414:     public void testActionPrefixWhenEnabled() {",
          "415:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "426:         assertEquals(\"myAction\", actionMapping.getName());",
          "427:     }",
          "431:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"my/Action\", \"\");",
          "433:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "429:     public void testActionPrefixWhenSlashesAndCrossNamespaceDisabled() throws Exception {",
          "430:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "429:     public void testActionPrefixWhenSlashesAndCrossNamespaceDisabled() {",
          "430:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "442:         assertEquals(\"my/Action\", actionMapping.getName());",
          "443:     }",
          "447:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"my/Action\", \"\");",
          "449:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "445:     public void testActionPrefixWhenSlashesButSlashesDisabledAndCrossNamespaceDisabled() throws Exception {",
          "446:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "445:     public void testActionPrefixWhenSlashesButSlashesDisabledAndCrossNamespaceDisabled() {",
          "446:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "458:         assertEquals(\"Action\", actionMapping.getName());",
          "459:     }",
          "463:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"my/Action\", \"\");",
          "465:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "461:     public void testActionPrefixWhenSlashesButSlashesDisabledAndCrossNamespace() throws Exception {",
          "462:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "461:     public void testActionPrefixWhenSlashesButSlashesDisabledAndCrossNamespace() {",
          "462:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "475:         assertEquals(\"my/Action\", actionMapping.getName());",
          "476:     }",
          "480:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"/my/Action\", \"\");",
          "482:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "478:     public void testActionPrefixWhenCrossNamespace() throws Exception {",
          "479:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "478:     public void testActionPrefixWhenCrossNamespace() {",
          "479:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "491:         assertEquals(\"/my/Action\", actionMapping.getName());",
          "492:     }",
          "496:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction\", \"\");",
          "497:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction.x\", \"\");",
          "498:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction.y\", \"\");",
          "",
          "[Removed Lines]",
          "494:     public void testActionPrefix_fromImageButton() throws Exception {",
          "495:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "494:     public void testActionPrefix_fromImageButton() {",
          "495:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "508:         assertEquals(\"myAction\", actionMapping.getName());",
          "509:     }",
          "513:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction.x\", \"\");",
          "514:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction.y\", \"\");",
          "",
          "[Removed Lines]",
          "511:     public void testActionPrefix_fromIEImageButton() throws Exception {",
          "512:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "511:     public void testActionPrefix_fromIEImageButton() {",
          "512:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "524:         assertEquals(\"myAction\", actionMapping.getName());",
          "525:     }",
          "529:         parameterMap.put(\"redirect:\" + \"http://www.google.com\", \"\");",
          "531:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "527:     public void testRedirectPrefix() throws Exception {",
          "528:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "527:     public void testRedirectPrefix() {",
          "528:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "540:         assertNull(result);",
          "541:     }",
          "545:         parameterMap.put(\"redirect:\" + \"http://%{3*4}\", \"\");",
          "547:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "543:     public void testUnsafeRedirectPrefix() throws Exception {",
          "544:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "543:     public void testUnsafeRedirectPrefix() {",
          "544:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "556:         assertNull(result);",
          "557:     }",
          "561:         parameterMap.put(\"redirectAction:\" + \"myAction\", \"\");",
          "563:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "559:     public void testRedirectActionPrefix() throws Exception {",
          "560:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "559:     public void testRedirectActionPrefix() {",
          "560:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "573:         assertNull(result);",
          "574:     }",
          "578:         parameterMap.put(\"redirectAction:\" + \"%{3*4}\", \"\");",
          "580:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "576:     public void testUnsafeRedirectActionPrefix() throws Exception {",
          "577:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "576:     public void testUnsafeRedirectActionPrefix() {",
          "577:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "590:         assertNull(result);",
          "591:     }",
          "595:         parameterMap.put(\"redirectAction:\" + \"myAction\", \"\");",
          "597:         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "593:     public void testRedirectActionPrefixWithEmptyExtension() throws Exception {",
          "594:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "593:     public void testRedirectActionPrefixWithEmptyExtension() {",
          "594:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "608:         assertNull(result);",
          "609:     }",
          "613:         parameterMap.put(\"foo:myAction\", \"\");",
          "615:         final StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();",
          "",
          "[Removed Lines]",
          "611:     public void testCustomActionPrefix() throws Exception {",
          "612:         Map parameterMap = new HashMap();",
          "",
          "[Added Lines]",
          "611:     public void testCustomActionPrefix() {",
          "612:         Map<String, Object> parameterMap = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "627:         assertEquals(actionMapping.getName(), \"myAction\");",
          "628:     }",
          "631:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "632:         String name = mapper.dropExtension(\"foo.action\", new ActionMapping());",
          "635:         name = mapper.dropExtension(\"foo.action.action\", new ActionMapping());",
          "638:     }",
          "641:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "642:         mapper.setExtensions(\"action,,\");",
          "643:         String name = mapper.dropExtension(\"foo.action\", new ActionMapping());",
          "645:         name = mapper.dropExtension(\"foo\", new ActionMapping());",
          "647:         assertNull(mapper.dropExtension(\"foo.bar\", new ActionMapping()));",
          "648:         assertNull(mapper.dropExtension(\"foo.\", new ActionMapping()));",
          "649:     }",
          "652:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "653:         mapper.setExtensions(\"action,,\");",
          "655:         String name = mapper.dropExtension(\"/foo/bar-1.0/baz.action\", new ActionMapping());",
          "658:         name = mapper.dropExtension(\"/foo/bar-1.0/baz\", new ActionMapping());",
          "660:     }",
          "663:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "664:         ActionMapping actionMapping = new ActionMapping();",
          "665:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "630:     public void testDropExtension() throws Exception {",
          "633:         assertTrue(\"Name not right: \"+name, \"foo\".equals(name));",
          "636:         assertTrue(\"Name not right: \"+name, \"foo.action\".equals(name));",
          "640:     public void testDropExtensionWhenBlank() throws Exception {",
          "644:         assertTrue(\"Name not right: \"+name, \"foo\".equals(name));",
          "646:         assertTrue(\"Name not right: \"+name, \"foo\".equals(name));",
          "651:     public void testDropExtensionEmbeddedDot() throws Exception {",
          "656:         assertTrue(\"Name not right: \"+name, \"/foo/bar-1.0/baz\".equals(name));",
          "659:         assertTrue(\"Name not right: \"+name, \"/foo/bar-1.0/baz\".equals(name));",
          "662:     public void testGetUriFromActionMapper1() throws Exception {",
          "",
          "[Added Lines]",
          "630:     public void testDropExtension() {",
          "633:         assertEquals(\"Name not right: \" + name, \"foo\", name);",
          "636:         assertEquals(\"Name not right: \" + name, \"foo.action\", name);",
          "640:     public void testDropExtensionWhenBlank() {",
          "644:         assertEquals(\"Name not right: \" + name, \"foo\", name);",
          "646:         assertEquals(\"Name not right: \" + name, \"foo\", name);",
          "651:     public void testDropExtensionEmbeddedDot() {",
          "656:         assertEquals(\"Name not right: \" + name, \"/foo/bar-1.0/baz\", name);",
          "659:         assertEquals(\"Name not right: \" + name, \"/foo/bar-1.0/baz\", name);",
          "662:     public void testGetUriFromActionMapper1() {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "670:         assertEquals(\"/myNamespace/myActionName!myMethod.action\", uri);",
          "671:     }",
          "674:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "675:         ActionMapping actionMapping = new ActionMapping();",
          "676:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "673:     public void testGetUriFromActionMapper2() throws Exception {",
          "",
          "[Added Lines]",
          "673:     public void testGetUriFromActionMapper2() {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "681:         assertEquals(\"/myActionName!myMethod.action\", uri);",
          "682:     }",
          "685:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "686:         ActionMapping actionMapping = new ActionMapping();",
          "687:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "684:     public void testGetUriFromActionMapper3() throws Exception {",
          "",
          "[Added Lines]",
          "684:     public void testGetUriFromActionMapper3() {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "693:     }",
          "697:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "698:         ActionMapping actionMapping = new ActionMapping();",
          "699:         actionMapping.setName(\"myActionName\");",
          "",
          "[Removed Lines]",
          "696:     public void testGetUriFromActionMapper4() throws Exception {",
          "",
          "[Added Lines]",
          "696:     public void testGetUriFromActionMapper4() {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "703:         assertEquals(\"/myActionName.action\", uri);",
          "704:     }",
          "707:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "708:         ActionMapping actionMapping = new ActionMapping();",
          "709:         actionMapping.setName(\"myActionName\");",
          "",
          "[Removed Lines]",
          "706:     public void testGetUriFromActionMapper5() throws Exception {",
          "",
          "[Added Lines]",
          "706:     public void testGetUriFromActionMapper5() {",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "714:     }",
          "718:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "719:         ActionMapping actionMapping = new ActionMapping();",
          "720:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "717:     public void testGetUriFromActionMapper6() throws Exception {",
          "",
          "[Added Lines]",
          "717:     public void testGetUriFromActionMapper6() {",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "725:         assertEquals(\"/myNamespace/myActionName!myMethod.action?test=bla\", uri);",
          "726:     }",
          "729:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "730:         ActionMapping actionMapping = new ActionMapping();",
          "731:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "728:     public void testGetUriFromActionMapper7() throws Exception {",
          "",
          "[Added Lines]",
          "728:     public void testGetUriFromActionMapper7() {",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "736:         assertEquals(\"/myActionName!myMethod.action?test=bla\", uri);",
          "737:     }",
          "740:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "741:         ActionMapping actionMapping = new ActionMapping();",
          "742:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "739:     public void testGetUriFromActionMapper8() throws Exception {",
          "",
          "[Added Lines]",
          "739:     public void testGetUriFromActionMapper8() {",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "748:     }",
          "752:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "753:         ActionMapping actionMapping = new ActionMapping();",
          "754:         actionMapping.setName(\"myActionName?test=bla\");",
          "",
          "[Removed Lines]",
          "751:     public void testGetUriFromActionMapper9() throws Exception {",
          "",
          "[Added Lines]",
          "751:     public void testGetUriFromActionMapper9() {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "758:         assertEquals(\"/myActionName.action?test=bla\", uri);",
          "759:     }",
          "762:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "763:         ActionMapping actionMapping = new ActionMapping();",
          "764:         actionMapping.setName(\"myActionName?test=bla\");",
          "",
          "[Removed Lines]",
          "761:     public void testGetUriFromActionMapper10() throws Exception {",
          "",
          "[Added Lines]",
          "761:     public void testGetUriFromActionMapper10() {",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "768:         assertEquals(\"/myActionName.action?test=bla\", uri);",
          "769:     }",
          "772:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "773:         ActionMapping actionMapping = new ActionMapping();",
          "774:         actionMapping.setName(\"myActionName.action\");",
          "",
          "[Removed Lines]",
          "771:     public void testGetUriFromActionMapper11() throws Exception {",
          "",
          "[Added Lines]",
          "771:     public void testGetUriFromActionMapper11() {",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "778:         assertEquals(\"/myActionName.action\", uri);",
          "779:     }",
          "782:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "783:         ActionMapping actionMapping = new ActionMapping();",
          "784:         actionMapping.setName(\"myActionName.action\");",
          "",
          "[Removed Lines]",
          "781:     public void testGetUriFromActionMapper12() throws Exception {",
          "",
          "[Added Lines]",
          "781:     public void testGetUriFromActionMapper12() {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "788:         assertEquals(\"/myActionName.action\", uri);",
          "789:     }",
          "792:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "793:         ActionMapping actionMapping = new ActionMapping();",
          "794:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "791:     public void testGetUriFromActionMapper_justActionAndMethod() throws Exception {",
          "",
          "[Added Lines]",
          "791:     public void testGetUriFromActionMapper_justActionAndMethod() {",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "799:         assertEquals(\"myActionName!myMethod\", uri);",
          "800:     }",
          "803:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "804:         mapper.setExtensions(\",,\");",
          "805:         ActionMapping actionMapping = new ActionMapping();",
          "",
          "[Removed Lines]",
          "802:     public void testGetUriFromActionMapperWhenBlankExtension() throws Exception {",
          "",
          "[Added Lines]",
          "802:     public void testGetUriFromActionMapperWhenBlankExtension() {",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "811:         assertEquals(\"/myNamespace/myActionName!myMethod\", uri);",
          "812:     }",
          "815:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "816:         mapper.setExtensions(\"\");",
          "817:         assertNull(mapper.extensions);",
          "",
          "[Removed Lines]",
          "814:     public void testSetExtension() throws Exception {",
          "",
          "[Added Lines]",
          "814:     public void testSetExtension() {",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "828:         assertEquals(Arrays.asList(\"html\", \"\", \"xml\"), mapper.extensions);",
          "830:         mapper.setExtensions(\"xml\");",
          "833:         mapper.setExtensions(\",\");",
          "837:     }",
          "840:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "842:         String actionName = \"action\";",
          "",
          "[Removed Lines]",
          "831:         assertEquals(Arrays.asList(\"xml\"), mapper.extensions);",
          "834:         assertEquals(Arrays.asList(\"\"), mapper.extensions);",
          "839:     public void testAllowedActionNames() throws Exception {",
          "",
          "[Added Lines]",
          "831:         assertEquals(Collections.singletonList(\"xml\"), mapper.extensions);",
          "834:         assertEquals(Collections.singletonList(\"\"), mapper.extensions);",
          "837:     }",
          "839:     public void testAllowedNamespaceNames() {",
          "840:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "842:         String namespace = \"/\";",
          "843:         assertEquals(namespace, mapper.cleanupNamespaceName(namespace));",
          "845:         namespace = \"${namespace}\";",
          "846:         assertEquals(mapper.defaultNamespaceName, mapper.cleanupNamespaceName(namespace));",
          "848:         namespace = \"${${%{namespace}}}\";",
          "849:         assertEquals(mapper.defaultNamespaceName, mapper.cleanupNamespaceName(namespace));",
          "851:         namespace = \"${#foo='namespace',#foo}\";",
          "852:         assertEquals(mapper.defaultNamespaceName, mapper.cleanupNamespaceName(namespace));",
          "854:         namespace = \"/test-namespace/namespace/\";",
          "855:         assertEquals(\"/test-namespace/namespace/\", mapper.cleanupNamespaceName(namespace));",
          "857:         namespace = \"/test_namespace/namespace-test/\";",
          "858:         assertEquals(\"/test_namespace/namespace-test/\", mapper.cleanupNamespaceName(namespace));",
          "860:         namespace = \"/test_namespace/namespace.test/\";",
          "861:         assertEquals(\"/test_namespace/namespace.test/\", mapper.cleanupActionName(namespace));",
          "864:     public void testAllowedActionNames() {",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "861:         assertEquals(\"test!bar.action\", mapper.cleanupActionName(actionName));",
          "862:     }",
          "865:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "867:         assertEquals(\"\", mapper.cleanupMethodName(\"\"));",
          "",
          "[Removed Lines]",
          "864:     public void testAllowedMethodNames() throws Exception {",
          "",
          "[Added Lines]",
          "889:     public void testAllowedMethodNames() {",
          "",
          "---------------"
        ],
        "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java||plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java": [
          "File: plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java -> plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:             name = uri.substring(namespace.length() + 1);",
          "365:         }",
          "368:         mapping.setName(name);",
          "369:     }",
          "",
          "[Removed Lines]",
          "367:         mapping.setNamespace(namespace);",
          "",
          "[Added Lines]",
          "367:         mapping.setNamespace(cleanupNamespaceName(namespace));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "918182344cc97515353cc3dcb09b9fce19c739c0",
      "candidate_info": {
        "commit_hash": "918182344cc97515353cc3dcb09b9fce19c739c0",
        "repo": "apache/struts",
        "commit_url": "https://github.com/apache/struts/commit/918182344cc97515353cc3dcb09b9fce19c739c0",
        "files": [
          "core/src/main/java/org/apache/struts2/StrutsConstants.java",
          "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
          "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
          "core/src/test/java/org/apache/struts2/util/OgnlUtilStrutsTest.java",
          "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java",
          "xwork-core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java",
          "xwork-core/src/test/java/com/opensymphony/xwork2/ognl/OgnlUtilTest.java"
        ],
        "message": "fix some sonar issue",
        "before_after_code_files": [
          "core/src/main/java/org/apache/struts2/StrutsConstants.java||core/src/main/java/org/apache/struts2/StrutsConstants.java",
          "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
          "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java||core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
          "core/src/test/java/org/apache/struts2/util/OgnlUtilStrutsTest.java||core/src/test/java/org/apache/struts2/util/OgnlUtilStrutsTest.java",
          "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java||plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java",
          "xwork-core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java||xwork-core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java",
          "xwork-core/src/test/java/com/opensymphony/xwork2/ognl/OgnlUtilTest.java||xwork-core/src/test/java/com/opensymphony/xwork2/ognl/OgnlUtilTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/org/apache/struts2/StrutsConstants.java||core/src/main/java/org/apache/struts2/StrutsConstants.java",
            "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
            "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java||core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
            "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java||plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java"
          ],
          "candidate": [
            "core/src/main/java/org/apache/struts2/StrutsConstants.java||core/src/main/java/org/apache/struts2/StrutsConstants.java",
            "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
            "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java||core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
            "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java||plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/apache/struts2/StrutsConstants.java||core/src/main/java/org/apache/struts2/StrutsConstants.java": [
          "File: core/src/main/java/org/apache/struts2/StrutsConstants.java -> core/src/main/java/org/apache/struts2/StrutsConstants.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:     public static final String STRUTS_EXPRESSION_PARSER = \"struts.expression.parser\";",
          "274:     public static final String STRUTS_ALLOWED_ACTION_NAMES = \"struts.allowed.action.names\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:     public static final String STRUTS_ALLOWED_NAMESPACE_NAMES = \"struts.allowed.namespace.names\";",
          "276:     public static final String STRUTS_DEFAULT_NAMESPACE_NAME = \"struts.default.namespace.name\";",
          "",
          "---------------"
        ],
        "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java||core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java": [
          "File: core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java -> core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     protected boolean allowSlashesInActionNames = false;",
          "121:     protected boolean alwaysSelectFullNamespace = false;",
          "122:     protected PrefixTrie prefixTrie = null;",
          "123:     protected Pattern allowedActionNames = Pattern.compile(\"[a-zA-Z0-9._!/\\\\-]*\");",
          "124:     protected String defaultActionName = \"index\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     protected Pattern allowedNamespaceNames = Pattern.compile(\"[a-zA-Z0-9._/\\\\-]*\");",
          "125:     protected String defaultNamespaceName = \"/\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:                                 }",
          "167:                             }",
          "168:                             if (!allowSlashesInActionNames && !allowActionCrossNamespaceAccess) {",
          "171:                                 }",
          "172:                             }",
          "173:                             mapping.setName(actionName);",
          "",
          "[Removed Lines]",
          "169:                                 if (actionName.lastIndexOf(\"/\") != -1) {",
          "170:                                     actionName = actionName.substring(actionName.lastIndexOf(\"/\") + 1);",
          "",
          "[Added Lines]",
          "173:                                 if (actionName.lastIndexOf('/') != -1) {",
          "174:                                     actionName = actionName.substring(actionName.lastIndexOf('/') + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:         this.alwaysSelectFullNamespace = \"true\".equals(val);",
          "206:     }",
          "208:     @Inject(value = StrutsConstants.STRUTS_ALLOWED_ACTION_NAMES, required = false)",
          "209:     public void setAllowedActionNames(String allowedActionNames) {",
          "210:         this.allowedActionNames = Pattern.compile(allowedActionNames);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:     @Inject(value = StrutsConstants.STRUTS_ALLOWED_NAMESPACE_NAMES, required = false)",
          "213:     public void setAllowedNamespaceNames(String allowedNamespaceNames) {",
          "214:         this.allowedNamespaceNames = Pattern.compile(allowedNamespaceNames);",
          "215:     }",
          "217:     @Inject(value = StrutsConstants.STRUTS_DEFAULT_NAMESPACE_NAME, required = false)",
          "218:     public void setDefaultNamespaceName(String defaultNamespaceName) {",
          "219:         this.defaultNamespaceName = defaultNamespaceName;",
          "220:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:         ActionMapping mapping = new ActionMapping();",
          "275:         String uri = RequestUtils.getUri(request);",
          "278:         uri = (indexOfSemicolon > -1) ? uri.substring(0, indexOfSemicolon) : uri;",
          "280:         uri = dropExtension(uri, mapping);",
          "",
          "[Removed Lines]",
          "277:         int indexOfSemicolon = uri.indexOf(\";\");",
          "",
          "[Added Lines]",
          "291:         int indexOfSemicolon = uri.indexOf(';');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "294:         if (allowDynamicMethodCalls) {",
          "296:             String name = mapping.getName();",
          "298:             if (exclamation != -1) {",
          "299:                 mapping.setName(name.substring(0, exclamation));",
          "",
          "[Removed Lines]",
          "297:             int exclamation = name.lastIndexOf(\"!\");",
          "",
          "[Added Lines]",
          "311:             int exclamation = name.lastIndexOf('!');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "344:     protected void parseNameAndNamespace(String uri, ActionMapping mapping, ConfigurationManager configManager) {",
          "345:         String namespace, name;",
          "347:         if (lastSlash == -1) {",
          "348:             namespace = \"\";",
          "349:             name = uri;",
          "",
          "[Removed Lines]",
          "346:         int lastSlash = uri.lastIndexOf(\"/\");",
          "",
          "[Added Lines]",
          "360:         int lastSlash = uri.lastIndexOf('/');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "391:             }",
          "392:         }",
          "395:         mapping.setName(cleanupActionName(name));",
          "396:     }",
          "",
          "[Removed Lines]",
          "394:         mapping.setNamespace(namespace);",
          "",
          "[Added Lines]",
          "408:         mapping.setNamespace(cleanupNamespaceName(namespace));",
          "418:     protected String cleanupNamespaceName(final String rawNamespace) {",
          "419:         if (allowedNamespaceNames.matcher(rawNamespace).matches()) {",
          "420:             return rawNamespace;",
          "421:         } else {",
          "422:             LOG.warn(",
          "423:                 \"{} did not match allowed namespace names {} - default namespace {} will be used!\",",
          "424:                 rawNamespace, allowedActionNames, defaultActionName",
          "425:             );",
          "426:             return defaultNamespaceName;",
          "427:         }",
          "428:     }",
          "",
          "---------------"
        ],
        "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java||core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java": [
          "File: core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java -> core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         };",
          "69:     }",
          "72:         req.setupGetRequestURI(\"/my/namespace/actionName.action\");",
          "73:         req.setupGetServletPath(\"/my/namespace/actionName.action\");",
          "74:         req.setupGetAttribute(null);",
          "",
          "[Removed Lines]",
          "71:     public void testGetMapping() throws Exception {",
          "",
          "[Added Lines]",
          "71:     public void testGetMapping() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:         assertNull(mapping.getMethod());",
          "83:     }",
          "86:         req.setupGetParameterMap(new HashMap());",
          "87:         req.setupGetRequestURI(\"/my/namespace/actionName!add.action\");",
          "88:         req.setupGetServletPath(\"/my/namespace/actionName!add.action\");",
          "",
          "[Removed Lines]",
          "85:     public void testGetMappingWithMethod() throws Exception {",
          "",
          "[Added Lines]",
          "85:     public void testGetMappingWithMethod() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:         assertEquals(\"add\", mapping.getMethod());",
          "99:     }",
          "103:         req.setupGetRequestURI(\"/my/foo/actionName.action\");",
          "104:         req.setupGetServletPath(\"/my/foo/actionName.action\");",
          "",
          "[Removed Lines]",
          "101:     public void testGetMappingWithSlashedName() throws Exception {",
          "",
          "[Added Lines]",
          "101:     public void testGetMappingWithSlashedName() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:         assertNull(mapping.getMethod());",
          "115:     }",
          "119:         req.setupGetRequestURI(\"/foo/actionName.action\");",
          "120:         req.setupGetServletPath(\"/foo/actionName.action\");",
          "",
          "[Removed Lines]",
          "117:     public void testGetMappingWithSlashedNameAtRootButNoSlashPackage() throws Exception {",
          "",
          "[Added Lines]",
          "117:     public void testGetMappingWithSlashedNameAtRootButNoSlashPackage() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:         assertNull(mapping.getMethod());",
          "131:     }",
          "134:         config = new DefaultConfiguration();",
          "135:         PackageConfig pkg = new PackageConfig.Builder(\"myns\")",
          "136:             .namespace(\"/my/namespace\").build();",
          "",
          "[Removed Lines]",
          "133:     public void testGetMappingWithSlashedNameAtRoot() throws Exception {",
          "",
          "[Added Lines]",
          "133:     public void testGetMappingWithSlashedNameAtRoot() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "166:         req.setupGetRequestURI(\"/my-hh/abc.action\");",
          "167:         req.setupGetServletPath(\"/my-hh/abc.action\");",
          "",
          "[Removed Lines]",
          "164:     public void testGetMappingWithNamespaceSlash() throws Exception {",
          "",
          "[Added Lines]",
          "164:     public void testGetMappingWithNamespaceSlash() {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "184:         assertEquals(\"my-hh/abc\", mapping.getName());",
          "185:     }",
          "188:         req.setupGetRequestURI(\"/bo/foo/actionName.action\");",
          "189:         req.setupGetServletPath(\"/bo/foo/actionName.action\");",
          "190:         req.setupGetAttribute(null);",
          "",
          "[Removed Lines]",
          "187:     public void testGetMappingWithUnknownNamespace() throws Exception {",
          "",
          "[Added Lines]",
          "187:     public void testGetMappingWithUnknownNamespace() {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "198:         assertNull(mapping.getMethod());",
          "199:     }",
          "202:         req.setupGetRequestURI(\"/bo/foo/actionName.action\");",
          "203:         req.setupGetServletPath(\"/bo/foo/actionName.action\");",
          "204:         req.setupGetAttribute(null);",
          "",
          "[Removed Lines]",
          "201:     public void testGetMappingWithUnknownNamespaceButFullNamespaceSelect() throws Exception {",
          "",
          "[Added Lines]",
          "201:     public void testGetMappingWithUnknownNamespaceButFullNamespaceSelect() {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "213:         assertNull(mapping.getMethod());",
          "214:     }",
          "217:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "218:         mapper.setAllowDynamicMethodCalls(\"true\");",
          "219:         ActionMapping mapping = mapper.getMappingFromActionName(\"actionName!add\");",
          "",
          "[Removed Lines]",
          "216:     public void testGetMappingWithActionName_methodAndName() throws Exception {",
          "",
          "[Added Lines]",
          "216:     public void testGetMappingWithActionName_methodAndName() {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "221:         assertEquals(\"add\", mapping.getMethod());",
          "222:     }",
          "225:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "226:         ActionMapping mapping = mapper.getMappingFromActionName(\"actionName\");",
          "227:         assertEquals(\"actionName\", mapping.getName());",
          "229:     }",
          "232:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "233:         mapper.setAllowDynamicMethodCalls(\"false\");",
          "234:         ActionMapping mapping = mapper.getMappingFromActionName(\"actionName!add\");",
          "235:         assertEquals(\"actionName!add\", mapping.getName());",
          "237:     }",
          "241:         Map parameterMap = new HashMap();",
          "242:         parameterMap.put(DefaultActionMapper.METHOD_PREFIX + \"someMethod\", \"\");",
          "",
          "[Removed Lines]",
          "224:     public void testGetMappingWithActionName_name() throws Exception {",
          "228:         assertEquals(null, mapping.getMethod());",
          "231:     public void testGetMappingWithActionName_noDynamicMethod() throws Exception {",
          "236:         assertEquals(null, mapping.getMethod());",
          "239:     public void testGetMappingWithActionName_noDynamicMethodColonPrefix() throws Exception {",
          "",
          "[Added Lines]",
          "224:     public void testGetMappingWithActionName_name() {",
          "228:         assertNull(mapping.getMethod());",
          "231:     public void testGetMappingWithActionName_noDynamicMethod() {",
          "236:         assertNull(mapping.getMethod());",
          "239:     public void testGetMappingWithActionName_noDynamicMethodColonPrefix() {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "250:         ActionMapping actionMapping = defaultActionMapper.getMapping(request, configManager);",
          "252:         assertEquals(\"someServletPath\", actionMapping.getName());",
          "254:     }",
          "257:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "258:         ActionMapping mapping = mapper.getMappingFromActionName(null);",
          "259:         assertNull(mapping);",
          "260:     }",
          "263:         req.setupGetParameterMap(new HashMap());",
          "264:         req.setupGetRequestURI(\"/my/namespace/actionName.action\");",
          "265:         req.setupGetServletPath(\"/my/namespace/actionName.action\");",
          "",
          "[Removed Lines]",
          "253:         assertEquals(null, actionMapping.getMethod());",
          "256:     public void testGetMappingWithActionName_null() throws Exception {",
          "262:     public void testGetUri() throws Exception {",
          "",
          "[Added Lines]",
          "253:         assertNull(actionMapping.getMethod());",
          "256:     public void testGetMappingWithActionName_null() {",
          "262:     public void testGetUri() {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "271:         assertEquals(\"/my/namespace/actionName.action\", mapper.getUriFromActionMapping(mapping));",
          "272:     }",
          "275:         req.setupGetParameterMap(new HashMap());",
          "276:         req.setupGetRequestURI(\"/my/namespace/actionName.action;abc=123rty56\");",
          "277:         req.setupGetServletPath(\"/my/namespace/actionName.action;abc=123rty56\");",
          "",
          "[Removed Lines]",
          "274:     public void testGetUriWithSemicolonPresent() throws Exception {",
          "",
          "[Added Lines]",
          "274:     public void testGetUriWithSemicolonPresent() {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "283:         assertEquals(\"/my/namespace/actionName.action\", mapper.getUriFromActionMapping(mapping));",
          "284:     }",
          "287:         req.setupGetParameterMap(new HashMap());",
          "288:         req.setupGetRequestURI(\"/my/namespace/actionName!add.action\");",
          "289:         req.setupGetServletPath(\"/my/namespace/actionName!add.action\");",
          "",
          "[Removed Lines]",
          "286:     public void testGetUriWithMethod() throws Exception {",
          "",
          "[Added Lines]",
          "286:     public void testGetUriWithMethod() {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "296:         assertEquals(\"/my/namespace/actionName!add.action\", mapper.getUriFromActionMapping(mapping));",
          "297:     }",
          "300:         ActionMapping mapping = new ActionMapping(\"actionName\", \"/ns\", null, new HashMap());",
          "302:         ActionMapping orig = new ActionMapping();",
          "",
          "[Removed Lines]",
          "299:     public void testGetUriWithOriginalExtension() throws Exception {",
          "",
          "[Added Lines]",
          "299:     public void testGetUriWithOriginalExtension() {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "307:         assertEquals(\"/ns/actionName.foo\", mapper.getUriFromActionMapping(mapping));",
          "308:     }",
          "311:         req.setupGetParameterMap(new HashMap());",
          "312:         req.setupGetRequestURI(\"/my/namespace/actionName\");",
          "313:         req.setupGetServletPath(\"/my/namespace/actionName\");",
          "",
          "[Removed Lines]",
          "310:     public void testGetMappingWithNoExtension() throws Exception {",
          "",
          "[Added Lines]",
          "310:     public void testGetMappingWithNoExtension() {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "323:         assertNull(mapping.getMethod());",
          "324:     }",
          "327:         req.setupGetParameterMap(new HashMap());",
          "328:         req.setupGetRequestURI(\"/my/namespace/actionName.html\");",
          "329:         req.setupGetServletPath(\"/my/namespace/actionName.html\");",
          "",
          "[Removed Lines]",
          "326:     public void testGetMappingWithNoExtensionButUriHasExtension() throws Exception {",
          "",
          "[Added Lines]",
          "326:     public void testGetMappingWithNoExtensionButUriHasExtension() {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "347:         ActionMapping actionMapping = new ActionMapping();",
          "349:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
          "",
          "[Removed Lines]",
          "346:     public void testParseNameAndNamespace1() throws Exception {",
          "",
          "[Added Lines]",
          "346:     public void testParseNameAndNamespace1() {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "353:         assertEquals(actionMapping.getNamespace(), \"\");",
          "354:     }",
          "357:         ActionMapping actionMapping = new ActionMapping();",
          "359:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
          "",
          "[Removed Lines]",
          "356:     public void testParseNameAndNamespace2() throws Exception {",
          "",
          "[Added Lines]",
          "356:     public void testParseNameAndNamespace2() {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "363:         assertEquals(actionMapping.getNamespace(), \"/\");",
          "364:     }",
          "367:         ActionMapping actionMapping = new ActionMapping();",
          "369:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
          "",
          "[Removed Lines]",
          "366:     public void testParseNameAndNamespace3() throws Exception {",
          "",
          "[Added Lines]",
          "366:     public void testParseNameAndNamespace3() {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "373:         assertEquals(actionMapping.getNamespace(), \"/my\");",
          "374:     }",
          "377:         ActionMapping actionMapping = new ActionMapping();",
          "379:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
          "",
          "[Removed Lines]",
          "376:     public void testParseNameAndNamespace_NoSlashes() throws Exception {",
          "",
          "[Added Lines]",
          "376:     public void testParseNameAndNamespace_NoSlashes() {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "384:         assertEquals(actionMapping.getNamespace(), \"\");",
          "385:     }",
          "388:         ActionMapping actionMapping = new ActionMapping();",
          "390:         DefaultActionMapper defaultActionMapper = new DefaultActionMapper();",
          "",
          "[Removed Lines]",
          "387:     public void testParseNameAndNamespace_AllowSlashes() throws Exception {",
          "",
          "[Added Lines]",
          "387:     public void testParseNameAndNamespace_AllowSlashes() {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "404:         Map parameterMap = new HashMap();",
          "405:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction\", \"\");",
          "",
          "[Removed Lines]",
          "403:     public void testActionPrefixWhenDisabled() throws Exception {",
          "",
          "[Added Lines]",
          "403:     public void testActionPrefixWhenDisabled() {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "414:         assertEquals(\"someServletPath\", actionMapping.getName());",
          "415:     }",
          "418:         Map parameterMap = new HashMap();",
          "419:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction\", \"\");",
          "",
          "[Removed Lines]",
          "417:     public void testActionPrefixWhenEnabled() throws Exception {",
          "",
          "[Added Lines]",
          "417:     public void testActionPrefixWhenEnabled() {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "429:         assertEquals(\"myAction\", actionMapping.getName());",
          "430:     }",
          "433:         Map parameterMap = new HashMap();",
          "434:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"my/Action\", \"\");",
          "",
          "[Removed Lines]",
          "432:     public void testActionPrefixWhenSlashesAndCrossNamespaceDisabled() throws Exception {",
          "",
          "[Added Lines]",
          "432:     public void testActionPrefixWhenSlashesAndCrossNamespaceDisabled() {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "445:         assertEquals(\"my/Action\", actionMapping.getName());",
          "446:     }",
          "449:         Map parameterMap = new HashMap();",
          "450:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"my/Action\", \"\");",
          "",
          "[Removed Lines]",
          "448:     public void testActionPrefixWhenSlashesButSlashesDisabledAndCrossNamespaceDisabled() throws Exception {",
          "",
          "[Added Lines]",
          "448:     public void testActionPrefixWhenSlashesButSlashesDisabledAndCrossNamespaceDisabled() {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "461:         assertEquals(\"Action\", actionMapping.getName());",
          "462:     }",
          "465:         Map parameterMap = new HashMap();",
          "466:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"my/Action\", \"\");",
          "",
          "[Removed Lines]",
          "464:     public void testActionPrefixWhenSlashesButSlashesDisabledAndCrossNamespace() throws Exception {",
          "",
          "[Added Lines]",
          "464:     public void testActionPrefixWhenSlashesButSlashesDisabledAndCrossNamespace() {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "478:         assertEquals(\"my/Action\", actionMapping.getName());",
          "479:     }",
          "482:         Map parameterMap = new HashMap();",
          "483:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"/my/Action\", \"\");",
          "",
          "[Removed Lines]",
          "481:     public void testActionPrefixWhenCrossNamespace() throws Exception {",
          "",
          "[Added Lines]",
          "481:     public void testActionPrefixWhenCrossNamespace() {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "494:         assertEquals(\"/my/Action\", actionMapping.getName());",
          "495:     }",
          "498:         Map parameterMap = new HashMap();",
          "499:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction\", \"\");",
          "500:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction.x\", \"\");",
          "",
          "[Removed Lines]",
          "497:     public void testActionPrefix_fromImageButton() throws Exception {",
          "",
          "[Added Lines]",
          "497:     public void testActionPrefix_fromImageButton() {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "511:         assertEquals(\"myAction\", actionMapping.getName());",
          "512:     }",
          "515:         Map parameterMap = new HashMap();",
          "516:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction.x\", \"\");",
          "517:         parameterMap.put(DefaultActionMapper.ACTION_PREFIX + \"myAction.y\", \"\");",
          "",
          "[Removed Lines]",
          "514:     public void testActionPrefix_fromIEImageButton() throws Exception {",
          "",
          "[Added Lines]",
          "514:     public void testActionPrefix_fromIEImageButton() {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "527:         assertEquals(\"myAction\", actionMapping.getName());",
          "528:     }",
          "531:         Map parameterMap = new HashMap();",
          "532:         parameterMap.put(\"redirect:\" + \"http://www.google.com\", \"\");",
          "",
          "[Removed Lines]",
          "530:     public void testRedirectPrefix() throws Exception {",
          "",
          "[Added Lines]",
          "530:     public void testRedirectPrefix() {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "543:         assertNull(result);",
          "544:     }",
          "547:         Map parameterMap = new HashMap();",
          "548:         parameterMap.put(\"redirect:\" + \"http://%{3*4}\", \"\");",
          "",
          "[Removed Lines]",
          "546:     public void testUnsafeRedirectPrefix() throws Exception {",
          "",
          "[Added Lines]",
          "546:     public void testUnsafeRedirectPrefix() {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "559:         assertNull(result);",
          "560:     }",
          "563:         Map parameterMap = new HashMap();",
          "564:         parameterMap.put(\"redirectAction:\" + \"myAction\", \"\");",
          "",
          "[Removed Lines]",
          "562:     public void testRedirectActionPrefix() throws Exception {",
          "",
          "[Added Lines]",
          "562:     public void testRedirectActionPrefix() {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "576:         assertNull(result);",
          "577:     }",
          "580:         Map parameterMap = new HashMap();",
          "581:         parameterMap.put(\"redirectAction:\" + \"%{3*4}\", \"\");",
          "",
          "[Removed Lines]",
          "579:     public void testUnsafeRedirectActionPrefix() throws Exception {",
          "",
          "[Added Lines]",
          "579:     public void testUnsafeRedirectActionPrefix() {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "593:         assertNull(result);",
          "594:     }",
          "597:         Map parameterMap = new HashMap();",
          "598:         parameterMap.put(\"redirectAction:\" + \"myAction\", \"\");",
          "",
          "[Removed Lines]",
          "596:     public void testRedirectActionPrefixWithEmptyExtension() throws Exception {",
          "",
          "[Added Lines]",
          "596:     public void testRedirectActionPrefixWithEmptyExtension() {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "611:         assertNull(result);",
          "612:     }",
          "615:         Map parameterMap = new HashMap();",
          "616:         parameterMap.put(\"foo:myAction\", \"\");",
          "",
          "[Removed Lines]",
          "614:     public void testCustomActionPrefix() throws Exception {",
          "",
          "[Added Lines]",
          "614:     public void testCustomActionPrefix() {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "630:         assertEquals(actionMapping.getName(), \"myAction\");",
          "631:     }",
          "634:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "635:         String name = mapper.dropExtension(\"foo.action\");",
          "636:         assertTrue(\"Name not right: \"+name, \"foo\".equals(name));",
          "",
          "[Removed Lines]",
          "633:     public void testDropExtension() throws Exception {",
          "",
          "[Added Lines]",
          "633:     public void testDropExtension() {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "641:     }",
          "644:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "645:         mapper.setExtensions(\"action,,\");",
          "646:         String name = mapper.dropExtension(\"foo.action\");",
          "",
          "[Removed Lines]",
          "643:     public void testDropExtensionWhenBlank() throws Exception {",
          "",
          "[Added Lines]",
          "643:     public void testDropExtensionWhenBlank() {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "651:         assertNull(mapper.dropExtension(\"foo.\"));",
          "652:     }",
          "655:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "656:         mapper.setExtensions(\"action,,\");",
          "",
          "[Removed Lines]",
          "654:     public void testDropExtensionEmbeddedDot() throws Exception {",
          "",
          "[Added Lines]",
          "654:     public void testDropExtensionEmbeddedDot() {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "662:         assertTrue(\"Name not right: \"+name, \"/foo/bar-1.0/baz\".equals(name));",
          "663:     }",
          "666:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "667:         ActionMapping actionMapping = new ActionMapping();",
          "668:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "665:     public void testGetUriFromActionMapper1() throws Exception {",
          "",
          "[Added Lines]",
          "665:     public void testGetUriFromActionMapper1() {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "673:         assertEquals(\"/myNamespace/myActionName!myMethod.action\", uri);",
          "674:     }",
          "677:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "678:         ActionMapping actionMapping = new ActionMapping();",
          "679:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "676:     public void testGetUriFromActionMapper2() throws Exception {",
          "",
          "[Added Lines]",
          "676:     public void testGetUriFromActionMapper2() {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "684:         assertEquals(\"/myActionName!myMethod.action\", uri);",
          "685:     }",
          "688:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "689:         ActionMapping actionMapping = new ActionMapping();",
          "690:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "687:     public void testGetUriFromActionMapper3() throws Exception {",
          "",
          "[Added Lines]",
          "687:     public void testGetUriFromActionMapper3() {",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "696:     }",
          "700:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "701:         ActionMapping actionMapping = new ActionMapping();",
          "702:         actionMapping.setName(\"myActionName\");",
          "",
          "[Removed Lines]",
          "699:     public void testGetUriFromActionMapper4() throws Exception {",
          "",
          "[Added Lines]",
          "699:     public void testGetUriFromActionMapper4() {",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "706:         assertEquals(\"/myActionName.action\", uri);",
          "707:     }",
          "710:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "711:         ActionMapping actionMapping = new ActionMapping();",
          "712:         actionMapping.setName(\"myActionName\");",
          "",
          "[Removed Lines]",
          "709:     public void testGetUriFromActionMapper5() throws Exception {",
          "",
          "[Added Lines]",
          "709:     public void testGetUriFromActionMapper5() {",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "717:     }",
          "721:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "722:         ActionMapping actionMapping = new ActionMapping();",
          "723:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "720:     public void testGetUriFromActionMapper6() throws Exception {",
          "",
          "[Added Lines]",
          "720:     public void testGetUriFromActionMapper6() {",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "728:         assertEquals(\"/myNamespace/myActionName!myMethod.action?test=bla\", uri);",
          "729:     }",
          "732:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "733:         ActionMapping actionMapping = new ActionMapping();",
          "734:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "731:     public void testGetUriFromActionMapper7() throws Exception {",
          "",
          "[Added Lines]",
          "731:     public void testGetUriFromActionMapper7() {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "739:         assertEquals(\"/myActionName!myMethod.action?test=bla\", uri);",
          "740:     }",
          "743:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "744:         ActionMapping actionMapping = new ActionMapping();",
          "745:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "742:     public void testGetUriFromActionMapper8() throws Exception {",
          "",
          "[Added Lines]",
          "742:     public void testGetUriFromActionMapper8() {",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "751:     }",
          "755:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "756:         ActionMapping actionMapping = new ActionMapping();",
          "757:         actionMapping.setName(\"myActionName?test=bla\");",
          "",
          "[Removed Lines]",
          "754:     public void testGetUriFromActionMapper9() throws Exception {",
          "",
          "[Added Lines]",
          "754:     public void testGetUriFromActionMapper9() {",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "761:         assertEquals(\"/myActionName.action?test=bla\", uri);",
          "762:     }",
          "765:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "766:         ActionMapping actionMapping = new ActionMapping();",
          "767:         actionMapping.setName(\"myActionName?test=bla\");",
          "",
          "[Removed Lines]",
          "764:     public void testGetUriFromActionMapper10() throws Exception {",
          "",
          "[Added Lines]",
          "764:     public void testGetUriFromActionMapper10() {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "771:         assertEquals(\"/myActionName.action?test=bla\", uri);",
          "772:     }",
          "775:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "776:         ActionMapping actionMapping = new ActionMapping();",
          "777:         actionMapping.setName(\"myActionName.action\");",
          "",
          "[Removed Lines]",
          "774:     public void testGetUriFromActionMapper11() throws Exception {",
          "",
          "[Added Lines]",
          "774:     public void testGetUriFromActionMapper11() {",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "781:         assertEquals(\"/myActionName.action\", uri);",
          "782:     }",
          "785:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "786:         ActionMapping actionMapping = new ActionMapping();",
          "787:         actionMapping.setName(\"myActionName.action\");",
          "",
          "[Removed Lines]",
          "784:     public void testGetUriFromActionMapper12() throws Exception {",
          "",
          "[Added Lines]",
          "784:     public void testGetUriFromActionMapper12() {",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "791:         assertEquals(\"/myActionName.action\", uri);",
          "792:     }",
          "795:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "796:         ActionMapping actionMapping = new ActionMapping();",
          "797:         actionMapping.setMethod(\"myMethod\");",
          "",
          "[Removed Lines]",
          "794:     public void testGetUriFromActionMapper_justActionAndMethod() throws Exception {",
          "",
          "[Added Lines]",
          "794:     public void testGetUriFromActionMapper_justActionAndMethod() {",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "802:         assertEquals(\"myActionName!myMethod\", uri);",
          "803:     }",
          "806:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "807:         mapper.setExtensions(\",,\");",
          "808:         ActionMapping actionMapping = new ActionMapping();",
          "",
          "[Removed Lines]",
          "805:     public void testGetUriFromActionMapperWhenBlankExtension() throws Exception {",
          "",
          "[Added Lines]",
          "805:     public void testGetUriFromActionMapperWhenBlankExtension() {",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "814:         assertEquals(\"/myNamespace/myActionName!myMethod\", uri);",
          "815:     }",
          "818:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "819:         mapper.setExtensions(\"\");",
          "820:         assertNull(mapper.extensions);",
          "",
          "[Removed Lines]",
          "817:     public void testSetExtension() throws Exception {",
          "",
          "[Added Lines]",
          "817:     public void testSetExtension() {",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "840:     }",
          "843:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "845:         String actionName = \"action\";",
          "",
          "[Removed Lines]",
          "842:     public void testAllowedActionNames() throws Exception {",
          "",
          "[Added Lines]",
          "842:     public void testAllowedNamespaceNames() {",
          "843:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "845:         String namespace = \"/\";",
          "846:         assertEquals(namespace, mapper.cleanupNamespaceName(namespace));",
          "848:         namespace = \"${namespace}\";",
          "849:         assertEquals(mapper.defaultNamespaceName, mapper.cleanupNamespaceName(namespace));",
          "851:         namespace = \"${${%{namespace}}}\";",
          "852:         assertEquals(mapper.defaultNamespaceName, mapper.cleanupNamespaceName(namespace));",
          "854:         namespace = \"${#foo='namespace',#foo}\";",
          "855:         assertEquals(mapper.defaultNamespaceName, mapper.cleanupNamespaceName(namespace));",
          "857:         namespace = \"/test-namespace/namespace/\";",
          "858:         assertEquals(\"/test-namespace/namespace/\", mapper.cleanupNamespaceName(namespace));",
          "860:         namespace = \"/test_namespace/namespace-test/\";",
          "861:         assertEquals(\"/test_namespace/namespace-test/\", mapper.cleanupNamespaceName(namespace));",
          "863:         namespace = \"/test_namespace/namespace.test/\";",
          "864:         assertEquals(\"/test_namespace/namespace.test/\", mapper.cleanupActionName(namespace));",
          "865:     }",
          "867:     public void testAllowedActionNames() {",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "864:         assertEquals(\"test!bar.action\", mapper.cleanupActionName(actionName));",
          "865:     }",
          "868:         DefaultActionMapper mapper = new DefaultActionMapper();",
          "870:         assertEquals(\"\", mapper.cleanupMethodName(\"\"));",
          "",
          "[Removed Lines]",
          "867:     public void testAllowedMethodNames() throws Exception {",
          "",
          "[Added Lines]",
          "892:     public void testAllowedMethodNames() {",
          "",
          "---------------"
        ],
        "core/src/test/java/org/apache/struts2/util/OgnlUtilStrutsTest.java||core/src/test/java/org/apache/struts2/util/OgnlUtilStrutsTest.java": [
          "File: core/src/test/java/org/apache/struts2/util/OgnlUtilStrutsTest.java -> core/src/test/java/org/apache/struts2/util/OgnlUtilStrutsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.struts2.util;",
          "21: import com.opensymphony.xwork2.ognl.OgnlUtil;",
          "22: import org.apache.struts2.StrutsInternalTestCase;",
          "24: public class OgnlUtilStrutsTest extends StrutsInternalTestCase {",
          "26:     private OgnlUtil ognlUtil;",
          "28:     @Override",
          "29:     public void setUp() throws Exception {",
          "30:         super.setUp();",
          "31:         ognlUtil = container.getInstance(OgnlUtil.class);",
          "32:     }",
          "34:     public void testDefaultExcludes() {",
          "35:         ognlUtil.setExcludedClasses(\"\");",
          "36:         ognlUtil.setExcludedPackageNames(\"\");",
          "37:         ognlUtil.setExcludedPackageNamePatterns(\"\");",
          "38:         assertTrue(ognlUtil.getExcludedClasses().size() > 0);",
          "39:         assertTrue(ognlUtil.getExcludedPackageNames().size() > 0);",
          "41:         try {",
          "42:             ognlUtil.getExcludedClasses().clear();",
          "43:         } catch (Exception ex){",
          "44:             assertTrue(ex instanceof UnsupportedOperationException);",
          "45:         }",
          "46:         try {",
          "47:             ognlUtil.getExcludedPackageNames().clear();",
          "48:         } catch (Exception ex){",
          "49:             assertTrue(ex instanceof UnsupportedOperationException);",
          "50:         }",
          "51:         try {",
          "52:             ognlUtil.getExcludedPackageNamePatterns().clear();",
          "53:         } catch (Exception ex){",
          "54:             assertTrue(ex instanceof UnsupportedOperationException);",
          "55:         }",
          "56:     }",
          "57: }",
          "",
          "---------------"
        ],
        "plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java||plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java": [
          "File: plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java -> plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "359:             name = uri.substring(namespace.length() + 1);",
          "360:         }",
          "363:         mapping.setName(name);",
          "364:     }",
          "",
          "[Removed Lines]",
          "362:         mapping.setNamespace(namespace);",
          "",
          "[Added Lines]",
          "362:         mapping.setNamespace(cleanupNamespaceName(namespace));",
          "",
          "---------------"
        ],
        "xwork-core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java||xwork-core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java": [
          "File: xwork-core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java -> xwork-core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import java.beans.PropertyDescriptor;",
          "41: import java.lang.reflect.Method;",
          "42: import java.util.Collection;",
          "43: import java.util.HashMap;",
          "44: import java.util.HashSet;",
          "45: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     private boolean enableExpressionCache = true;",
          "67:     private boolean enableEvalExpression;",
          "73:     private Container container;",
          "74:     private boolean allowStaticMethodAccess;",
          "75:     private boolean disallowProxyMemberAccess;",
          "77:     @Inject",
          "78:     public void setXWorkConverter(XWorkConverter conv) {",
          "79:         this.defaultConverter = new OgnlTypeConverterWrapper(conv);",
          "",
          "[Removed Lines]",
          "69:     private Set<Class<?>> excludedClasses = new HashSet<Class<?>>();",
          "70:     private Set<Pattern> excludedPackageNamePatterns = new HashSet<Pattern>();",
          "71:     private Set<String> excludedPackageNames = new HashSet<String>();",
          "",
          "[Added Lines]",
          "70:     private Set<Class<?>> excludedClasses;",
          "71:     private Set<Pattern> excludedPackageNamePatterns;",
          "72:     private Set<String> excludedPackageNames;",
          "78:     public OgnlUtil() {",
          "79:         excludedClasses = new HashSet<Class<?>>();",
          "80:         excludedPackageNamePatterns = new HashSet<Pattern>();",
          "81:         excludedPackageNames = new HashSet<String>();",
          "82:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:     @Inject(value = XWorkConstants.OGNL_EXCLUDED_CLASSES, required = false)",
          "102:     public void setExcludedClasses(String commaDelimitedClasses) {",
          "105:             try {",
          "107:             } catch (ClassNotFoundException e) {",
          "108:                 throw new ConfigurationException(\"Cannot load excluded class: \" + className, e);",
          "109:             }",
          "110:         }",
          "111:     }",
          "113:     @Inject(value = XWorkConstants.OGNL_EXCLUDED_PACKAGE_NAME_PATTERNS, required = false)",
          "114:     public void setExcludedPackageNamePatterns(String commaDelimitedPackagePatterns) {",
          "115:         Set<String> packagePatterns = TextParseUtil.commaDelimitedStringToSet(commaDelimitedPackagePatterns);",
          "116:         for (String pattern : packagePatterns) {",
          "118:         }",
          "119:     }",
          "121:     @Inject(value = XWorkConstants.OGNL_EXCLUDED_PACKAGE_NAMES, required = false)",
          "122:     public void setExcludedPackageNames(String commaDelimitedPackageNames) {",
          "124:     }",
          "126:     public Set<Class<?>> getExcludedClasses() {",
          "",
          "[Removed Lines]",
          "103:         Set<String> classes = TextParseUtil.commaDelimitedStringToSet(commaDelimitedClasses);",
          "104:         for (String className : classes) {",
          "106:                 excludedClasses.add(Class.forName(className));",
          "117:             excludedPackageNamePatterns.add(Pattern.compile(pattern));",
          "123:         excludedPackageNames = TextParseUtil.commaDelimitedStringToSet(commaDelimitedPackageNames);",
          "",
          "[Added Lines]",
          "110:         Set<Class<?>> excludedClasses = new HashSet<Class<?>>();",
          "111:         excludedClasses.addAll(this.excludedClasses);",
          "112:         excludedClasses.addAll(parseExcludedClasses(commaDelimitedClasses));",
          "113:         this.excludedClasses = Collections.unmodifiableSet(excludedClasses);",
          "114:     }",
          "116:     private Set<Class<?>> parseExcludedClasses(String commaDelimitedClasses) {",
          "117:         Set<String> classNames = TextParseUtil.commaDelimitedStringToSet(commaDelimitedClasses);",
          "118:         Set<Class<?>> classes = new HashSet<Class<?>>();",
          "120:         for (String className : classNames) {",
          "122:                 classes.add(Class.forName(className));",
          "128:         return classes;",
          "133:         Set<Pattern> excludedPackageNamePatterns = new HashSet<Pattern>();",
          "134:         excludedPackageNamePatterns.addAll(this.excludedPackageNamePatterns);",
          "135:         excludedPackageNamePatterns.addAll(parseExcludedPackageNamePatterns(commaDelimitedPackagePatterns));",
          "136:         this.excludedPackageNamePatterns = Collections.unmodifiableSet(excludedPackageNamePatterns);",
          "137:     }",
          "139:     private Set<Pattern> parseExcludedPackageNamePatterns(String commaDelimitedPackagePatterns) {",
          "141:         Set<Pattern> packageNamePatterns = new HashSet<Pattern>();",
          "144:             packageNamePatterns.add(Pattern.compile(pattern));",
          "147:         return packageNamePatterns;",
          "152:         Set<String> excludedPackageNames = new HashSet<String>();",
          "153:         excludedPackageNames.addAll(this.excludedPackageNames);",
          "154:         excludedPackageNames.addAll(parseExcludedPackageNames(commaDelimitedPackageNames));",
          "155:         this.excludedPackageNames = Collections.unmodifiableSet(excludedPackageNames);",
          "156:     }",
          "158:     private Set<String> parseExcludedPackageNames(String commaDelimitedPackageNames) {",
          "159:         return TextParseUtil.commaDelimitedStringToSet(commaDelimitedPackageNames);",
          "",
          "---------------"
        ],
        "xwork-core/src/test/java/com/opensymphony/xwork2/ognl/OgnlUtilTest.java||xwork-core/src/test/java/com/opensymphony/xwork2/ognl/OgnlUtilTest.java": [
          "File: xwork-core/src/test/java/com/opensymphony/xwork2/ognl/OgnlUtilTest.java -> xwork-core/src/test/java/com/opensymphony/xwork2/ognl/OgnlUtilTest.java"
        ]
      }
    }
  ]
}