{
  "cve_id": "CVE-2016-1000027",
  "cve_desc": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.",
  "repo": "spring-projects/spring-framework",
  "patch_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
  "patch_info": {
    "commit_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "repo": "spring-projects/spring-framework",
    "commit_url": "https://github.com/spring-projects/spring-framework/commit/5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ],
    "message": "Explicit note on Java deserialization",
    "before_after_code_files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "patch_diff": {
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java"
    ],
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6075c81371be96d0f28c6ed4a4086b702f963d71",
      "candidate_info": {
        "commit_hash": "6075c81371be96d0f28c6ed4a4086b702f963d71",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/6075c81371be96d0f28c6ed4a4086b702f963d71",
        "files": [
          "spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java"
        ],
        "message": "Consistent DeferredResultHandler invocation outside of result lock\n\nIssue: SPR-14978\n(cherry picked from commit 86614af)",
        "before_after_code_files": [
          "spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java||spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java||spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java": [
          "File: spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java -> spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:  private volatile Object result = RESULT_NONE;",
          "",
          "[Removed Lines]",
          "68:  private volatile boolean expired;",
          "",
          "[Added Lines]",
          "69:  private volatile boolean expired = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:  public final void setResultHandler(DeferredResultHandler resultHandler) {",
          "144:   Assert.notNull(resultHandler, \"DeferredResultHandler is required\");",
          "145:   synchronized (this) {",
          "154:    }",
          "155:   }",
          "156:  }",
          "165:  public boolean setResult(T result) {",
          "",
          "[Removed Lines]",
          "146:    this.resultHandler = resultHandler;",
          "147:    if (this.result != RESULT_NONE && !this.expired) {",
          "148:     try {",
          "149:      this.resultHandler.handleResult(this.result);",
          "150:     }",
          "151:     catch (Throwable ex) {",
          "152:      logger.trace(\"DeferredResult not handled\", ex);",
          "153:     }",
          "",
          "[Added Lines]",
          "147:   if (this.expired) {",
          "148:    return;",
          "149:   }",
          "150:   Object resultToHandle;",
          "153:    if (this.expired) {",
          "154:     return;",
          "156:    resultToHandle = this.result;",
          "157:    if (resultToHandle == RESULT_NONE) {",
          "159:     this.resultHandler = resultHandler;",
          "160:     return;",
          "161:    }",
          "162:   }",
          "166:   try {",
          "167:    resultHandler.handleResult(resultToHandle);",
          "168:   }",
          "169:   catch (Throwable ex) {",
          "170:    logger.debug(\"Failed to handle existing result\", ex);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:  }",
          "169:  private boolean setResultInternal(Object result) {",
          "170:   synchronized (this) {",
          "171:    if (isSetOrExpired()) {",
          "172:     return false;",
          "173:    }",
          "174:    this.result = result;",
          "175:   }",
          "179:   return true;",
          "180:  }",
          "",
          "[Removed Lines]",
          "176:   if (this.resultHandler != null) {",
          "177:    this.resultHandler.handleResult(this.result);",
          "178:   }",
          "",
          "[Added Lines]",
          "187:   if (isSetOrExpired()) {",
          "188:    return false;",
          "189:   }",
          "190:   DeferredResultHandler resultHandlerToUse;",
          "198:    resultHandlerToUse = this.resultHandler;",
          "199:    if (resultHandlerToUse == null) {",
          "202:     return true;",
          "203:    }",
          "206:    this.resultHandler = null;",
          "211:   resultHandlerToUse.handleResult(result);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:   return new DeferredResultProcessingInterceptorAdapter() {",
          "198:    @Override",
          "199:    public <S> boolean handleTimeout(NativeWebRequest request, DeferredResult<S> deferredResult) {",
          "202:     }",
          "205:     }",
          "207:    }",
          "208:    @Override",
          "209:    public <S> void afterCompletion(NativeWebRequest request, DeferredResult<S> deferredResult) {",
          "213:     if (completionCallback != null) {",
          "214:      completionCallback.run();",
          "215:     }",
          "",
          "[Removed Lines]",
          "200:     if (timeoutCallback != null) {",
          "201:      timeoutCallback.run();",
          "203:     if (DeferredResult.this.timeoutResult != RESULT_NONE) {",
          "204:      setResultInternal(timeoutResult);",
          "206:     return true;",
          "210:     synchronized (DeferredResult.this) {",
          "211:      expired = true;",
          "212:     }",
          "",
          "[Added Lines]",
          "234:     boolean continueProcessing = true;",
          "235:     try {",
          "236:      if (timeoutCallback != null) {",
          "237:       timeoutCallback.run();",
          "238:      }",
          "240:     finally {",
          "241:      if (timeoutResult != RESULT_NONE) {",
          "242:       continueProcessing = false;",
          "243:       try {",
          "244:        setResultInternal(timeoutResult);",
          "245:       }",
          "246:       catch (Throwable ex) {",
          "247:        logger.debug(\"Failed to handle timeout result\", ex);",
          "248:       }",
          "249:      }",
          "251:     return continueProcessing;",
          "255:     expired = true;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49ae46d7e430aecd6fcb980f383cc6d3c0e901cf",
      "candidate_info": {
        "commit_hash": "49ae46d7e430aecd6fcb980f383cc6d3c0e901cf",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/49ae46d7e430aecd6fcb980f383cc6d3c0e901cf",
        "files": [
          "spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/LabelTag.java"
        ],
        "message": "For attribute is not actually required\n\nIssue: SPR-14287\n(cherry picked from commit dacc31e)",
        "before_after_code_files": [
          "spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/LabelTag.java||spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/LabelTag.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/LabelTag.java||spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/LabelTag.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/LabelTag.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/LabelTag.java"
        ]
      }
    },
    {
      "candidate_hash": "7de8f4f58436f7953de41ee208afd53c4f2ba54e",
      "candidate_info": {
        "commit_hash": "7de8f4f58436f7953de41ee208afd53c4f2ba54e",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/7de8f4f58436f7953de41ee208afd53c4f2ba54e",
        "files": [
          "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java",
          "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java"
        ],
        "message": "LazySingletonAspectInstanceFactoryDecorator uses shared singleton mutex\n\nIssue: SPR-14241",
        "before_after_code_files": [
          "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java||spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java",
          "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java||spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java||spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java": [
          "File: spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java -> spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import org.springframework.beans.factory.BeanFactory;",
          "20: import org.springframework.beans.factory.config.ConfigurableBeanFactory;",
          "21: import org.springframework.core.Ordered;",
          "22: import org.springframework.core.annotation.AnnotationUtils;",
          "23: import org.springframework.core.annotation.Order;",
          "24: import org.springframework.util.ClassUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import org.springframework.beans.factory.support.AbstractBeanFactory;",
          "25: import org.springframework.util.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   this.beanFactory = beanFactory;",
          "71:   this.name = name;",
          "72:   this.aspectMetadata = new AspectMetadata(type, name);",
          "",
          "[Removed Lines]",
          "69:  public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class type) {",
          "",
          "[Added Lines]",
          "71:  public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type) {",
          "72:   Assert.notNull(beanFactory, \"BeanFactory must not be null\");",
          "73:   Assert.notNull(name, \"Bean name must not be null\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:  }",
          "80:  public ClassLoader getAspectClassLoader() {",
          "87:  }",
          "89:  public AspectMetadata getAspectMetadata() {",
          "90:   return this.aspectMetadata;",
          "91:  }",
          "",
          "[Removed Lines]",
          "81:   if (this.beanFactory instanceof ConfigurableBeanFactory) {",
          "82:    return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader();",
          "83:   }",
          "84:   else {",
          "85:    return ClassUtils.getDefaultClassLoader();",
          "86:   }",
          "",
          "[Added Lines]",
          "85:   return (this.beanFactory instanceof ConfigurableBeanFactory ?",
          "86:     ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() :",
          "87:     ClassUtils.getDefaultClassLoader());",
          "94:  public Object getAspectCreationMutex() {",
          "95:   return (this.beanFactory instanceof AbstractBeanFactory ?",
          "96:     ((AbstractBeanFactory) this.beanFactory).getSingletonMutex() : this);",
          "97:  }",
          "",
          "---------------"
        ],
        "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java||spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java": [
          "File: spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java -> spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  }",
          "46:   if (this.materialized == null) {",
          "48:     if (this.materialized == null) {",
          "49:      this.materialized = this.maaif.getAspectInstance();",
          "50:     }",
          "",
          "[Removed Lines]",
          "45:  public synchronized Object getAspectInstance() {",
          "47:    synchronized (this) {",
          "",
          "[Added Lines]",
          "45:  public Object getAspectInstance() {",
          "47:    Object mutex = this;",
          "48:    if (this.maaif instanceof BeanFactoryAspectInstanceFactory) {",
          "49:     mutex = ((BeanFactoryAspectInstanceFactory) this.maaif).getAspectCreationMutex();",
          "50:    }",
          "51:    synchronized (mutex) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1295f62319da04b86d0ac51ecda259c23f81192b",
      "candidate_info": {
        "commit_hash": "1295f62319da04b86d0ac51ecda259c23f81192b",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/1295f62319da04b86d0ac51ecda259c23f81192b",
        "files": [
          "spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java",
          "spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java",
          "spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java"
        ],
        "message": "Polishing",
        "before_after_code_files": [
          "spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java||spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java",
          "spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java||spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java",
          "spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java||spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java||spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java": [
          "File: spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java -> spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   return invocation.proceed();",
          "36:  }",
          "40:  }",
          "44:  }",
          "",
          "[Removed Lines]",
          "38:  public int getCount() {",
          "39:   return this.count;",
          "42:  protected void increment() {",
          "43:   ++count;",
          "",
          "[Added Lines]",
          "38:  protected void increment() {",
          "39:   this.count++;",
          "42:  public int getCount() {",
          "43:   return this.count;",
          "",
          "---------------"
        ],
        "spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java||spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java": [
          "File: spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java -> spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:  @Override",
          "39:  }",
          "41:  @Override",
          "44:  }",
          "46:  @Override",
          "49:  }",
          "51:  @Override",
          "54:  }",
          "56:  @Override",
          "",
          "[Removed Lines]",
          "37:  public int getAge() {",
          "38:   return age;",
          "42:  public void setAge(int age) {",
          "43:   this.age = age;",
          "47:  public String getName() {",
          "48:   return name;",
          "52:  public void setName(String name) {",
          "53:   this.name = name;",
          "",
          "[Added Lines]",
          "37:  public String getName() {",
          "38:   return name;",
          "42:  public void setName(String name) {",
          "43:   this.name = name;",
          "47:  public int getAge() {",
          "48:   return age;",
          "52:  public void setAge(int age) {",
          "53:   this.age = age;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:  }",
          "65:  public boolean equals(Object other) {",
          "66:   if (!(other instanceof SerializablePerson)) {",
          "67:    return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:  @Override",
          "",
          "---------------"
        ],
        "spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java||spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java": [
          "File: spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java -> spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:   }",
          "279:  }",
          "",
          "[Removed Lines]",
          "281: }",
          "",
          "[Added Lines]",
          "274: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14ab9800ff607c75ae1717ab1b00dcf67755cb90",
      "candidate_info": {
        "commit_hash": "14ab9800ff607c75ae1717ab1b00dcf67755cb90",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/14ab9800ff607c75ae1717ab1b00dcf67755cb90",
        "files": [
          "spring-core/src/main/java/org/springframework/util/ObjectUtils.java"
        ],
        "message": "ObjectUtils.nullSafeEquals allows for JVM method inlining (through reducing its bytecode size)\n\nIssue: SPR-14349\n(cherry picked from commit 71df9ce)",
        "before_after_code_files": [
          "spring-core/src/main/java/org/springframework/util/ObjectUtils.java||spring-core/src/main/java/org/springframework/util/ObjectUtils.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-core/src/main/java/org/springframework/util/ObjectUtils.java||spring-core/src/main/java/org/springframework/util/ObjectUtils.java": [
          "File: spring-core/src/main/java/org/springframework/util/ObjectUtils.java -> spring-core/src/main/java/org/springframework/util/ObjectUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:    return true;",
          "248:   }",
          "249:   if (o1.getClass().isArray() && o2.getClass().isArray()) {",
          "277:   }",
          "278:   return false;",
          "279:  }",
          "",
          "[Removed Lines]",
          "250:    if (o1 instanceof Object[] && o2 instanceof Object[]) {",
          "251:     return Arrays.equals((Object[]) o1, (Object[]) o2);",
          "252:    }",
          "253:    if (o1 instanceof boolean[] && o2 instanceof boolean[]) {",
          "254:     return Arrays.equals((boolean[]) o1, (boolean[]) o2);",
          "255:    }",
          "256:    if (o1 instanceof byte[] && o2 instanceof byte[]) {",
          "257:     return Arrays.equals((byte[]) o1, (byte[]) o2);",
          "258:    }",
          "259:    if (o1 instanceof char[] && o2 instanceof char[]) {",
          "260:     return Arrays.equals((char[]) o1, (char[]) o2);",
          "261:    }",
          "262:    if (o1 instanceof double[] && o2 instanceof double[]) {",
          "263:     return Arrays.equals((double[]) o1, (double[]) o2);",
          "264:    }",
          "265:    if (o1 instanceof float[] && o2 instanceof float[]) {",
          "266:     return Arrays.equals((float[]) o1, (float[]) o2);",
          "267:    }",
          "268:    if (o1 instanceof int[] && o2 instanceof int[]) {",
          "269:     return Arrays.equals((int[]) o1, (int[]) o2);",
          "270:    }",
          "271:    if (o1 instanceof long[] && o2 instanceof long[]) {",
          "272:     return Arrays.equals((long[]) o1, (long[]) o2);",
          "273:    }",
          "274:    if (o1 instanceof short[] && o2 instanceof short[]) {",
          "275:     return Arrays.equals((short[]) o1, (short[]) o2);",
          "276:    }",
          "",
          "[Added Lines]",
          "254:    return arrayEquals(o1, o2);",
          "255:   }",
          "256:   return false;",
          "257:  }",
          "268:  private static boolean arrayEquals(Object o1, Object o2) {",
          "269:   if (o1 instanceof Object[] && o2 instanceof Object[]) {",
          "270:    return Arrays.equals((Object[]) o1, (Object[]) o2);",
          "271:   }",
          "272:   if (o1 instanceof boolean[] && o2 instanceof boolean[]) {",
          "273:    return Arrays.equals((boolean[]) o1, (boolean[]) o2);",
          "274:   }",
          "275:   if (o1 instanceof byte[] && o2 instanceof byte[]) {",
          "276:    return Arrays.equals((byte[]) o1, (byte[]) o2);",
          "277:   }",
          "278:   if (o1 instanceof char[] && o2 instanceof char[]) {",
          "279:    return Arrays.equals((char[]) o1, (char[]) o2);",
          "280:   }",
          "281:   if (o1 instanceof double[] && o2 instanceof double[]) {",
          "282:    return Arrays.equals((double[]) o1, (double[]) o2);",
          "283:   }",
          "284:   if (o1 instanceof float[] && o2 instanceof float[]) {",
          "285:    return Arrays.equals((float[]) o1, (float[]) o2);",
          "286:   }",
          "287:   if (o1 instanceof int[] && o2 instanceof int[]) {",
          "288:    return Arrays.equals((int[]) o1, (int[]) o2);",
          "289:   }",
          "290:   if (o1 instanceof long[] && o2 instanceof long[]) {",
          "291:    return Arrays.equals((long[]) o1, (long[]) o2);",
          "292:   }",
          "293:   if (o1 instanceof short[] && o2 instanceof short[]) {",
          "294:    return Arrays.equals((short[]) o1, (short[]) o2);",
          "",
          "---------------"
        ]
      }
    }
  ]
}