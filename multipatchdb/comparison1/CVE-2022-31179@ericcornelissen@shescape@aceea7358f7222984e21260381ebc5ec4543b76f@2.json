{
  "cve_id": "CVE-2022-31179",
  "cve_desc": "Shescape is a simple shell escape package for JavaScript. Versions prior to 1.5.8 were found to be subject to code injection on windows. This impacts users that use Shescape (any API function) to escape arguments for cmd.exe on Windows An attacker can omit all arguments following their input by including a line feed character (`'\\n'`) in the payload. This bug has been patched in [v1.5.8] which you can upgrade to now. No further changes are required. Alternatively, line feed characters (`'\\n'`) can be stripped out manually or the user input can be made the last argument (this only limits the impact).",
  "repo": "ericcornelissen/shescape",
  "patch_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
  "patch_info": {
    "commit_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
    "repo": "ericcornelissen/shescape",
    "commit_url": "https://github.com/ericcornelissen/shescape/commit/aceea7358f7222984e21260381ebc5ec4543b76f",
    "files": [
      "CHANGELOG.md",
      "src/unix.js",
      "src/win.js",
      "test/fixtures/unix.cjs",
      "test/fixtures/win.cjs",
      "test/fuzz/_common.cjs",
      "test/fuzz/corpus/036053b103374e82177446b4e083ccb6a22da06e0375582d622632775c8a938a",
      "test/fuzz/corpus/31ed7643aba69fe2d776af3aee587bb7899165af5ed3846c6f70327f2eec4713",
      "test/fuzz/corpus/7ef6c55f814adceff17a05c032ba6ec89483e37addcfd96bd13281f5de6716fa",
      "test/fuzz/corpus/dece2a606846120af17949c2d758b7df475449689d043a04a1ba63953326e5bb",
      "test/fuzz/corpus/f1d97ce94d0c9dd109dc27538786781da634bbed1df58877cac3c44e4344f3dd",
      "test/fuzz/corpus/f28febc41472c437122c2a44b66ccf7dcefdd19876fe4d9370ece44b5b2deb13",
      "test/fuzz/corpus/faf3c25ec7c017c2cc21a5af0f5584557d8a0c7340c68249076a86a2c4ce74fb",
      "test/fuzz/exec.test.cjs",
      "test/unit/_macros.js"
    ],
    "message": "Improve testing and escaping of newlines (#332)\n\n* Don't ignore newlines when fuzzing\n\nUpdate the fuzzing logic to not ignore newline characters anymore. For\nBash, Dash, PowerShell, and Zsh this is reflected by the removal of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nfrom the `exec.test.cjs` fuzz target. For CMD it is (additionally) the\nremoval of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nin the `_common.cjs` fuzz logic.\n\nThe inclusion of newlines in input arguments required some changes to\nthe `getExpectedOutput` function to account for the individual shell's\nhandling of these characters, typically removing them from the start and\nend of the input. (Note: not all changes to `getExpectedOutput` are due\nto this.)\n\n* Update the fuzz corpus\n\n- `31ed764`: contains a trailing forward slash ('\\\\') character that\n  was echod as a double quote ('\"') character by CMD due to carriage\n  return ('\\r') characters not being escaped.\n- `dece2a6`: contains a line feed ('\\n') character and a tilde where the\n  tilde should be escaped but wasn't for Bash.\n- `f28febc`: contains a carriage return ('\\r') character and a tilde\n  where the tilde should be escaped but wasn't for Bash.\n- `faf3c25`: contains a line feed ('\\n') character inside of curly\n  braces where the opening curly bracket should be escaped but wasn't\n  for bash.\n\nThe remaining new items in the fuzz corpus (`036053b`, `71ef6c5`, and\n`f1d97ce`) we're added based on fuzzing with whitespace for PowerShell.\n\n* Update macro for executing fixtures\n\nUpdate the macro for executing fixtures to properly display all the\nwhitespace characters as distinct characters. This is required because\notherwise test names will be considered duplicates.\n\nWhitespace characters with common shorthands are display using that\nshorthand (e.g. '\\n' for line feed). Other characters will be displayed\nby their unicode index (similar to the null character). This has been\nnormalized to the `\\u{hhhh}` notation for consistency where the curly\nbraces are included to improve readability of the test title (clearly\ndemarcating the end of the unicode index from any characters that might\nfollow it).\n\n* Escape newlines for PowerShell\n\nFor PowerShell only line feed ('\\n') and carriage return ('\\r')\ncharacters need to be escaped, and only when `interpolation` is `true`.\nThis is supported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that all character except\nfor line feed ('\\n'), carriage return ('\\r'), and '\\uFEFF' are converted\nto a normal space by PowerShell so it isn't necessary to escape them.\nFor '\\uFEFF', it was found that it is interpreted as is and doesn't\ncause any problems.\n\nThe test fixtures for PowerShell were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for CMD\n\nFor CMD only line feed ('\\n') and carriage return ('\\r') characters need\nto be escaped, but those need to be escaped always. This is supported by\nmanual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n')\ncharacters cause CMD to omit the remaining input;  carriage return\n('\\r') could change the interpretation of certain characters; tab ('\\t')\ncharacters are converted to normal spaces; and all other whitespace\ncharacters are interpreted as is.\n\nThe test fixtures for CMD were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for Bash, Dash, and Zsh\n\nFor the supported Unix shells only the line feed ('\\n') character needs\nto be escaped, and only when `interpolation` is `true`. This is\nsupported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n') and\ncharacters cause the whatever follows it to be interpreted as a new\ncommand; tab ('\\t') characters are converted to normal spaces; and all\nother whitespace characters are interpreted as is.\n\nThe test fixtures for Bash, Dash, and Zsh were updated to include\nexamples where whitespace characters need or need not be escaped.\n\n* Improve escaping of tilde for Bash\n\nFor Bash escape the tilde ('~') character if a line terminating\ncharacter ('\\n', '\\r', '\\u2028', or '\\u2029') appears between and\n\"opening\" equals sign ('=') and a \"closing\" colon-tilde (\":~\"). This\ncase was missed previously because the regular expression `/./` does not\nindeed match all characters, but only those that are not line\nterminating characters (even with the multiline flag). From [1]:\n\n> Note that the m multiline flag doesn't change the dot behavior. So to\n> match a pattern across multiple lines, the character class `[^]` can\n> be used - it will match any character including newlines.\n\nThe test fixtures for Bash were updated to include examples where the\ntilde character should have been escaped but wasn't.\n\n* Improve escaping of curly braces for Bash\n\nFor Bash escape the opening curly brace ('}') character if a line\nterminating character ('\\n', '\\r', '\\u2028', or '\\u2029') appears\nbetween and opening curly brace ('{') and closing curly brace ('}').\nAgain, this case was missed previously because the regular expression\n`/./` does match _all_ characters - instead `/[^]/` is used.\n\nThe test fixtures for Bash were updated to include examples where the\nopening curly brace should have been escaped but wasn't.\n\n* Update CHANGELOG\n\nInclude the fixed bugs in the CHANGELOG.\n\n---\n\n1. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide-\n   /Regular_Expressions/Character_Classes\n2. Sample of a script used for manual testing:\n\n    import { execSync } from \"node:child_process\";\n    import assert from \"node:assert\";\n    import * as shescape from \"shescape\";\n\n    const options = {\n      shell: \"powershell.exe\", // <-- set shell to test here\n      interpolation: true,     // <-- change depending on test\n      encoding: \"utf8\",\n    };\n\n    const whitespaceChars = [\n      \"\\u0009\", \"\\u000A\", \"\\u000B\", \"\\u000C\", \"\\u000D\", \" \", \"\\u0085\",\n      \"\\u00A0\", \"\\u1680\", \"\\u2000\", \"\\u2001\", \"\\u2002\", \"\\u2003\",\n      \"\\u2004\", \"\\u2005\", \"\\u2006\", \"\\u2007\", \"\\u2008\", \"\\u2009\",\n      \"\\u200A\", \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\",\n      \"\\uFEFF\",\n    ];\n\n    for (const char of whitespaceChars) {\n      const userInput = `foo${char}bar`;\n\n      const escapeOutput = execSync(\n        `node test/_echo.js ${shescape.escape(userInput, options)}`,\n        options\n      );\n      // Use this if you don't expect the escaped output to equal the\n      // quote output.\n      //assert.strictEqual(escapeOutput, \"some string\");\n\n      const quoteOutput = execSync(\n        `node test/_echo.js ${shescape.quote(userInput, options)}`,\n        options\n      );\n      assert.strictEqual(escapeOutput, quoteOutput);\n    }",
    "before_after_code_files": [
      "src/unix.js||src/unix.js",
      "src/win.js||src/win.js",
      "test/fixtures/unix.cjs||test/fixtures/unix.cjs",
      "test/fixtures/win.cjs||test/fixtures/win.cjs",
      "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
      "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs",
      "test/unit/_macros.js||test/unit/_macros.js"
    ]
  },
  "patch_diff": {
    "src/unix.js||src/unix.js": [
      "File: src/unix.js -> src/unix.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:   if (interpolation) {",
      "47:     result = result",
      "48:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "49:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "50:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "51:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "52:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "53:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "56:   } else if (quoted) {",
      "57:     result = result.replace(/'/g, `'\\\\''`);",
      "58:   }",
      "",
      "[Removed Lines]",
      "54:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\")",
      "55:       .replace(/(?<=\\=(?:.*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "[Added Lines]",
      "49:       .replace(/\\n/g, \" \")",
      "55:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\")",
      "56:       .replace(/(?<=\\=(?:[^]*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:   if (interpolation) {",
      "75:     result = result",
      "76:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "77:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "78:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "79:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "80:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "81:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "83:   } else if (quoted) {",
      "84:     result = result.replace(/'/g, `'\\\\''`);",
      "85:   }",
      "",
      "[Removed Lines]",
      "82:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\");",
      "",
      "[Added Lines]",
      "78:       .replace(/\\n/g, \" \")",
      "84:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   if (interpolation) {",
      "102:     result = result",
      "103:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "104:       .replace(/(^|\\s)(~|#|=)/g, \"$1\\\\$2\")",
      "105:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "106:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:       .replace(/\\n/g, \" \")",
      "",
      "---------------"
    ],
    "src/win.js||src/win.js": [
      "File: src/win.js -> src/win.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: function escapeArgCmd(arg, interpolation, quoted) {",
      "38:   if (interpolation) {",
      "39:     result = result",
      "",
      "[Removed Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\");",
      "",
      "[Added Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\").replace(/\\n|\\r/g, \" \");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:   if (interpolation) {",
      "66:     result = result",
      "67:       .replace(/(^|\\s)((?:\\*|[1-6])?)(>)/g, \"$1$2`$3\")",
      "68:       .replace(/(^|\\s)(<|@|#|-|\\:|\\])/g, \"$1`$2\")",
      "69:       .replace(/(,|\\;|\\&|\\|)/g, \"`$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:       .replace(/\\n|\\r/g, \" \")",
      "",
      "---------------"
    ],
    "test/fixtures/unix.cjs||test/fixtures/unix.cjs": [
      "File: test/fixtures/unix.cjs -> test/fixtures/unix.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u2000bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u2000bar\",",
      "76:           noInterpolation: \"foo\\u2000bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2001bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2001bar\",",
      "83:           noInterpolation: \"foo\\u2001bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2002bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2002bar\",",
      "90:           noInterpolation: \"foo\\u2002bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2003bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2003bar\",",
      "97:           noInterpolation: \"foo\\u2003bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2004bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2004bar\",",
      "104:           noInterpolation: \"foo\\u2004bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2005bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2005bar\",",
      "111:           noInterpolation: \"foo\\u2005bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2006bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2006bar\",",
      "118:           noInterpolation: \"foo\\u2006bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2007bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2007bar\",",
      "125:           noInterpolation: \"foo\\u2007bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2008bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2008bar\",",
      "132:           noInterpolation: \"foo\\u2008bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2009bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2009bar\",",
      "139:           noInterpolation: \"foo\\u2009bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u200Abar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u200Abar\",",
      "146:           noInterpolation: \"foo\\u200Abar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u2028bar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u2028bar\",",
      "153:           noInterpolation: \"foo\\u2028bar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2029bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2029bar\",",
      "160:           noInterpolation: \"foo\\u2029bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u202Fbar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u202Fbar\",",
      "167:           noInterpolation: \"foo\\u202Fbar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u205Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u205Fbar\",",
      "174:           noInterpolation: \"foo\\u205Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u3000bar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u3000bar\",",
      "181:           noInterpolation: \"foo\\u3000bar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\uFEFFbar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\uFEFFbar\",",
      "188:           noInterpolation: \"foo\\uFEFFbar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\n\\rbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo \\rbar\",",
      "195:           noInterpolation: \"foo\\n\\rbar\",",
      "196:         },",
      "197:       },",
      "198:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "137:         input: \"a=b:~:\",",
      "138:         expected: { interpolation: \"a=b:\\\\~:\", noInterpolation: \"a=b:~:\" },",
      "139:       },",
      "140:       {",
      "141:         input: \"a=b:~:c\",",
      "142:         expected: { interpolation: \"a=b:\\\\~:c\", noInterpolation: \"a=b:~:c\" },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306:       {",
      "307:         input: \"a=\\r:~:\",",
      "308:         expected: { interpolation: \"a=\\r:\\\\~:\", noInterpolation: \"a=\\r:~:\" },",
      "309:       },",
      "310:       {",
      "311:         input: \"a=\\u2028:~:\",",
      "312:         expected: {",
      "313:           interpolation: \"a=\\u2028:\\\\~:\",",
      "314:           noInterpolation: \"a=\\u2028:~:\",",
      "315:         },",
      "316:       },",
      "317:       {",
      "318:         input: \"a=\\u2029:~:\",",
      "319:         expected: {",
      "320:           interpolation: \"a=\\u2029:\\\\~:\",",
      "321:           noInterpolation: \"a=\\u2029:~:\",",
      "322:         },",
      "323:       },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "391:         input: \"a{0..2}b\",",
      "392:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "393:       },",
      "394:     ],",
      "395:     \"angle brackets ('<', '>')\": [",
      "396:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "578:       {",
      "579:         input: \"a{\\u000Db,c}d\",",
      "580:         expected: {",
      "581:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "582:           noInterpolation: \"a{\\u000Db,c}d\",",
      "583:         },",
      "584:       },",
      "585:       {",
      "586:         input: \"a{\\u2028b,c}d\",",
      "587:         expected: {",
      "588:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "589:           noInterpolation: \"a{\\u2028b,c}d\",",
      "590:         },",
      "591:       },",
      "592:       {",
      "593:         input: \"a{\\u2029b,c}d\",",
      "594:         expected: {",
      "595:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "596:           noInterpolation: \"a{\\u2029b,c}d\",",
      "597:         },",
      "598:       },",
      "599:       {",
      "600:         input: \"a{b,c\\u000D}d\",",
      "601:         expected: {",
      "602:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "603:           noInterpolation: \"a{b,c\\u000D}d\",",
      "604:         },",
      "605:       },",
      "606:       {",
      "607:         input: \"a{b,c\\u2028}d\",",
      "608:         expected: {",
      "609:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "610:           noInterpolation: \"a{b,c\\u2028}d\",",
      "611:         },",
      "612:       },",
      "613:       {",
      "614:         input: \"a{b,c\\u2029}d\",",
      "615:         expected: {",
      "616:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "617:           noInterpolation: \"a{b,c\\u2029}d\",",
      "618:         },",
      "619:       },",
      "620:       {",
      "621:         input: \"a{\\u000D0..2}b\",",
      "622:         expected: {",
      "623:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "624:           noInterpolation: \"a{\\u000D0..2}b\",",
      "625:         },",
      "626:       },",
      "627:       {",
      "628:         input: \"a{\\u20280..2}b\",",
      "629:         expected: {",
      "630:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "631:           noInterpolation: \"a{\\u20280..2}b\",",
      "632:         },",
      "633:       },",
      "634:       {",
      "635:         input: \"a{\\u20290..2}b\",",
      "636:         expected: {",
      "637:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "638:           noInterpolation: \"a{\\u20290..2}b\",",
      "639:         },",
      "640:       },",
      "641:       {",
      "642:         input: \"a{0..2\\u000D}b\",",
      "643:         expected: {",
      "644:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "645:           noInterpolation: \"a{0..2\\u000D}b\",",
      "646:         },",
      "647:       },",
      "648:       {",
      "649:         input: \"a{0..2\\u2028}b\",",
      "650:         expected: {",
      "651:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "652:           noInterpolation: \"a{0..2\\u2028}b\",",
      "653:         },",
      "654:       },",
      "655:       {",
      "656:         input: \"a{0..2\\u2029}b\",",
      "657:         expected: {",
      "658:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "659:           noInterpolation: \"a{0..2\\u2029}b\",",
      "660:         },",
      "661:       },",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "439:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "440:       },",
      "441:     ],",
      "442:     'single quotes (\"\\'\")': [",
      "443:       {",
      "444:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "710:     \"whitespace (\\\\s)\": [",
      "711:       {",
      "712:         input: \"foo bar\",",
      "713:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "714:       },",
      "715:       {",
      "716:         input: \"foo\\nbar\",",
      "717:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\vbar\",",
      "721:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "722:       },",
      "723:       {",
      "724:         input: \"foo\\fbar\",",
      "725:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "726:       },",
      "727:       {",
      "728:         input: \"foo\\rbar\",",
      "729:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "730:       },",
      "731:       {",
      "732:         input: \"foo bar\",",
      "733:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "734:       },",
      "735:       {",
      "736:         input: \"foo\\u0085bar\",",
      "737:         expected: {",
      "738:           interpolation: \"foo\\u0085bar\",",
      "739:           noInterpolation: \"foo\\u0085bar\",",
      "740:         },",
      "741:       },",
      "742:       {",
      "743:         input: \"foo\\u00A0bar\",",
      "744:         expected: {",
      "745:           interpolation: \"foo\\u00A0bar\",",
      "746:           noInterpolation: \"foo\\u00A0bar\",",
      "747:         },",
      "748:       },",
      "749:       {",
      "750:         input: \"foo\\u2000bar\",",
      "751:         expected: {",
      "752:           interpolation: \"foo\\u2000bar\",",
      "753:           noInterpolation: \"foo\\u2000bar\",",
      "754:         },",
      "755:       },",
      "756:       {",
      "757:         input: \"foo\\u2001bar\",",
      "758:         expected: {",
      "759:           interpolation: \"foo\\u2001bar\",",
      "760:           noInterpolation: \"foo\\u2001bar\",",
      "761:         },",
      "762:       },",
      "763:       {",
      "764:         input: \"foo\\u2002bar\",",
      "765:         expected: {",
      "766:           interpolation: \"foo\\u2002bar\",",
      "767:           noInterpolation: \"foo\\u2002bar\",",
      "768:         },",
      "769:       },",
      "770:       {",
      "771:         input: \"foo\\u2003bar\",",
      "772:         expected: {",
      "773:           interpolation: \"foo\\u2003bar\",",
      "774:           noInterpolation: \"foo\\u2003bar\",",
      "775:         },",
      "776:       },",
      "777:       {",
      "778:         input: \"foo\\u2004bar\",",
      "779:         expected: {",
      "780:           interpolation: \"foo\\u2004bar\",",
      "781:           noInterpolation: \"foo\\u2004bar\",",
      "782:         },",
      "783:       },",
      "784:       {",
      "785:         input: \"foo\\u2005bar\",",
      "786:         expected: {",
      "787:           interpolation: \"foo\\u2005bar\",",
      "788:           noInterpolation: \"foo\\u2005bar\",",
      "789:         },",
      "790:       },",
      "791:       {",
      "792:         input: \"foo\\u2006bar\",",
      "793:         expected: {",
      "794:           interpolation: \"foo\\u2006bar\",",
      "795:           noInterpolation: \"foo\\u2006bar\",",
      "796:         },",
      "797:       },",
      "798:       {",
      "799:         input: \"foo\\u2007bar\",",
      "800:         expected: {",
      "801:           interpolation: \"foo\\u2007bar\",",
      "802:           noInterpolation: \"foo\\u2007bar\",",
      "803:         },",
      "804:       },",
      "805:       {",
      "806:         input: \"foo\\u2008bar\",",
      "807:         expected: {",
      "808:           interpolation: \"foo\\u2008bar\",",
      "809:           noInterpolation: \"foo\\u2008bar\",",
      "810:         },",
      "811:       },",
      "812:       {",
      "813:         input: \"foo\\u2009bar\",",
      "814:         expected: {",
      "815:           interpolation: \"foo\\u2009bar\",",
      "816:           noInterpolation: \"foo\\u2009bar\",",
      "817:         },",
      "818:       },",
      "819:       {",
      "820:         input: \"foo\\u200Abar\",",
      "821:         expected: {",
      "822:           interpolation: \"foo\\u200Abar\",",
      "823:           noInterpolation: \"foo\\u200Abar\",",
      "824:         },",
      "825:       },",
      "826:       {",
      "827:         input: \"foo\\u2028bar\",",
      "828:         expected: {",
      "829:           interpolation: \"foo\\u2028bar\",",
      "830:           noInterpolation: \"foo\\u2028bar\",",
      "831:         },",
      "832:       },",
      "833:       {",
      "834:         input: \"foo\\u2029bar\",",
      "835:         expected: {",
      "836:           interpolation: \"foo\\u2029bar\",",
      "837:           noInterpolation: \"foo\\u2029bar\",",
      "838:         },",
      "839:       },",
      "840:       {",
      "841:         input: \"foo\\u202Fbar\",",
      "842:         expected: {",
      "843:           interpolation: \"foo\\u202Fbar\",",
      "844:           noInterpolation: \"foo\\u202Fbar\",",
      "845:         },",
      "846:       },",
      "847:       {",
      "848:         input: \"foo\\u205Fbar\",",
      "849:         expected: {",
      "850:           interpolation: \"foo\\u205Fbar\",",
      "851:           noInterpolation: \"foo\\u205Fbar\",",
      "852:         },",
      "853:       },",
      "854:       {",
      "855:         input: \"foo\\u3000bar\",",
      "856:         expected: {",
      "857:           interpolation: \"foo\\u3000bar\",",
      "858:           noInterpolation: \"foo\\u3000bar\",",
      "859:         },",
      "860:       },",
      "861:       {",
      "862:         input: \"foo\\uFEFFbar\",",
      "863:         expected: {",
      "864:           interpolation: \"foo\\uFEFFbar\",",
      "865:           noInterpolation: \"foo\\uFEFFbar\",",
      "866:         },",
      "867:       },",
      "868:       {",
      "869:         input: \"foo\\n\\rbar\",",
      "870:         expected: {",
      "871:           interpolation: \"foo \\rbar\",",
      "872:           noInterpolation: \"foo\\n\\rbar\",",
      "873:         },",
      "874:       },",
      "875:     ],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "800:         input: \"a{0..2}b\",",
      "801:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "802:       },",
      "803:     ],",
      "804:     \"angle brackets ('<', '>')\": [",
      "805:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1237:       {",
      "1238:         input: \"a{\\u000Db,c}d\",",
      "1239:         expected: {",
      "1240:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "1241:           noInterpolation: \"a{\\u000Db,c}d\",",
      "1242:         },",
      "1243:       },",
      "1244:       {",
      "1245:         input: \"a{\\u2028b,c}d\",",
      "1246:         expected: {",
      "1247:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "1248:           noInterpolation: \"a{\\u2028b,c}d\",",
      "1249:         },",
      "1250:       },",
      "1251:       {",
      "1252:         input: \"a{\\u2029b,c}d\",",
      "1253:         expected: {",
      "1254:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "1255:           noInterpolation: \"a{\\u2029b,c}d\",",
      "1256:         },",
      "1257:       },",
      "1258:       {",
      "1259:         input: \"a{b,c\\u000D}d\",",
      "1260:         expected: {",
      "1261:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "1262:           noInterpolation: \"a{b,c\\u000D}d\",",
      "1263:         },",
      "1264:       },",
      "1265:       {",
      "1266:         input: \"a{b,c\\u2028}d\",",
      "1267:         expected: {",
      "1268:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "1269:           noInterpolation: \"a{b,c\\u2028}d\",",
      "1270:         },",
      "1271:       },",
      "1272:       {",
      "1273:         input: \"a{b,c\\u2029}d\",",
      "1274:         expected: {",
      "1275:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "1276:           noInterpolation: \"a{b,c\\u2029}d\",",
      "1277:         },",
      "1278:       },",
      "1279:       {",
      "1280:         input: \"a{\\u000D0..2}b\",",
      "1281:         expected: {",
      "1282:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "1283:           noInterpolation: \"a{\\u000D0..2}b\",",
      "1284:         },",
      "1285:       },",
      "1286:       {",
      "1287:         input: \"a{\\u20280..2}b\",",
      "1288:         expected: {",
      "1289:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "1290:           noInterpolation: \"a{\\u20280..2}b\",",
      "1291:         },",
      "1292:       },",
      "1293:       {",
      "1294:         input: \"a{\\u20290..2}b\",",
      "1295:         expected: {",
      "1296:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "1297:           noInterpolation: \"a{\\u20290..2}b\",",
      "1298:         },",
      "1299:       },",
      "1300:       {",
      "1301:         input: \"a{0..2\\u000D}b\",",
      "1302:         expected: {",
      "1303:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "1304:           noInterpolation: \"a{0..2\\u000D}b\",",
      "1305:         },",
      "1306:       },",
      "1307:       {",
      "1308:         input: \"a{0..2\\u2028}b\",",
      "1309:         expected: {",
      "1310:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "1311:           noInterpolation: \"a{0..2\\u2028}b\",",
      "1312:         },",
      "1313:       },",
      "1314:       {",
      "1315:         input: \"a{0..2\\u2029}b\",",
      "1316:         expected: {",
      "1317:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "1318:           noInterpolation: \"a{0..2\\u2029}b\",",
      "1319:         },",
      "1320:       },",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "848:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "849:       },",
      "850:     ],",
      "851:     'single quotes (\"\\'\")': [",
      "852:       {",
      "853:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1369:     \"whitespace (\\\\s)\": [",
      "1370:       {",
      "1371:         input: \"foo bar\",",
      "1372:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1373:       },",
      "1374:       {",
      "1375:         input: \"foo\\nbar\",",
      "1376:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "1377:       },",
      "1378:       {",
      "1379:         input: \"foo\\vbar\",",
      "1380:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "1381:       },",
      "1382:       {",
      "1383:         input: \"foo\\fbar\",",
      "1384:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "1385:       },",
      "1386:       {",
      "1387:         input: \"foo\\rbar\",",
      "1388:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "1389:       },",
      "1390:       {",
      "1391:         input: \"foo bar\",",
      "1392:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1393:       },",
      "1394:       {",
      "1395:         input: \"foo\\u0085bar\",",
      "1396:         expected: {",
      "1397:           interpolation: \"foo\\u0085bar\",",
      "1398:           noInterpolation: \"foo\\u0085bar\",",
      "1399:         },",
      "1400:       },",
      "1401:       {",
      "1402:         input: \"foo\\u00A0bar\",",
      "1403:         expected: {",
      "1404:           interpolation: \"foo\\u00A0bar\",",
      "1405:           noInterpolation: \"foo\\u00A0bar\",",
      "1406:         },",
      "1407:       },",
      "1408:       {",
      "1409:         input: \"foo\\u2000bar\",",
      "1410:         expected: {",
      "1411:           interpolation: \"foo\\u2000bar\",",
      "1412:           noInterpolation: \"foo\\u2000bar\",",
      "1413:         },",
      "1414:       },",
      "1415:       {",
      "1416:         input: \"foo\\u2001bar\",",
      "1417:         expected: {",
      "1418:           interpolation: \"foo\\u2001bar\",",
      "1419:           noInterpolation: \"foo\\u2001bar\",",
      "1420:         },",
      "1421:       },",
      "1422:       {",
      "1423:         input: \"foo\\u2002bar\",",
      "1424:         expected: {",
      "1425:           interpolation: \"foo\\u2002bar\",",
      "1426:           noInterpolation: \"foo\\u2002bar\",",
      "1427:         },",
      "1428:       },",
      "1429:       {",
      "1430:         input: \"foo\\u2003bar\",",
      "1431:         expected: {",
      "1432:           interpolation: \"foo\\u2003bar\",",
      "1433:           noInterpolation: \"foo\\u2003bar\",",
      "1434:         },",
      "1435:       },",
      "1436:       {",
      "1437:         input: \"foo\\u2004bar\",",
      "1438:         expected: {",
      "1439:           interpolation: \"foo\\u2004bar\",",
      "1440:           noInterpolation: \"foo\\u2004bar\",",
      "1441:         },",
      "1442:       },",
      "1443:       {",
      "1444:         input: \"foo\\u2005bar\",",
      "1445:         expected: {",
      "1446:           interpolation: \"foo\\u2005bar\",",
      "1447:           noInterpolation: \"foo\\u2005bar\",",
      "1448:         },",
      "1449:       },",
      "1450:       {",
      "1451:         input: \"foo\\u2006bar\",",
      "1452:         expected: {",
      "1453:           interpolation: \"foo\\u2006bar\",",
      "1454:           noInterpolation: \"foo\\u2006bar\",",
      "1455:         },",
      "1456:       },",
      "1457:       {",
      "1458:         input: \"foo\\u2007bar\",",
      "1459:         expected: {",
      "1460:           interpolation: \"foo\\u2007bar\",",
      "1461:           noInterpolation: \"foo\\u2007bar\",",
      "1462:         },",
      "1463:       },",
      "1464:       {",
      "1465:         input: \"foo\\u2008bar\",",
      "1466:         expected: {",
      "1467:           interpolation: \"foo\\u2008bar\",",
      "1468:           noInterpolation: \"foo\\u2008bar\",",
      "1469:         },",
      "1470:       },",
      "1471:       {",
      "1472:         input: \"foo\\u2009bar\",",
      "1473:         expected: {",
      "1474:           interpolation: \"foo\\u2009bar\",",
      "1475:           noInterpolation: \"foo\\u2009bar\",",
      "1476:         },",
      "1477:       },",
      "1478:       {",
      "1479:         input: \"foo\\u200Abar\",",
      "1480:         expected: {",
      "1481:           interpolation: \"foo\\u200Abar\",",
      "1482:           noInterpolation: \"foo\\u200Abar\",",
      "1483:         },",
      "1484:       },",
      "1485:       {",
      "1486:         input: \"foo\\u2028bar\",",
      "1487:         expected: {",
      "1488:           interpolation: \"foo\\u2028bar\",",
      "1489:           noInterpolation: \"foo\\u2028bar\",",
      "1490:         },",
      "1491:       },",
      "1492:       {",
      "1493:         input: \"foo\\u2029bar\",",
      "1494:         expected: {",
      "1495:           interpolation: \"foo\\u2029bar\",",
      "1496:           noInterpolation: \"foo\\u2029bar\",",
      "1497:         },",
      "1498:       },",
      "1499:       {",
      "1500:         input: \"foo\\u202Fbar\",",
      "1501:         expected: {",
      "1502:           interpolation: \"foo\\u202Fbar\",",
      "1503:           noInterpolation: \"foo\\u202Fbar\",",
      "1504:         },",
      "1505:       },",
      "1506:       {",
      "1507:         input: \"foo\\u205Fbar\",",
      "1508:         expected: {",
      "1509:           interpolation: \"foo\\u205Fbar\",",
      "1510:           noInterpolation: \"foo\\u205Fbar\",",
      "1511:         },",
      "1512:       },",
      "1513:       {",
      "1514:         input: \"foo\\u3000bar\",",
      "1515:         expected: {",
      "1516:           interpolation: \"foo\\u3000bar\",",
      "1517:           noInterpolation: \"foo\\u3000bar\",",
      "1518:         },",
      "1519:       },",
      "1520:       {",
      "1521:         input: \"foo\\uFEFFbar\",",
      "1522:         expected: {",
      "1523:           interpolation: \"foo\\uFEFFbar\",",
      "1524:           noInterpolation: \"foo\\uFEFFbar\",",
      "1525:         },",
      "1526:       },",
      "1527:       {",
      "1528:         input: \"foo\\n\\rbar\",",
      "1529:         expected: {",
      "1530:           interpolation: \"foo \\rbar\",",
      "1531:           noInterpolation: \"foo\\n\\rbar\",",
      "1532:         },",
      "1533:       },",
      "1534:     ],",
      "",
      "---------------"
    ],
    "test/fixtures/win.cjs||test/fixtures/win.cjs": [
      "File: test/fixtures/win.cjs -> test/fixtures/win.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u1680bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u1680bar\",",
      "76:           noInterpolation: \"foo\\u1680bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2000bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2000bar\",",
      "83:           noInterpolation: \"foo\\u2000bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2001bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2001bar\",",
      "90:           noInterpolation: \"foo\\u2001bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2002bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2002bar\",",
      "97:           noInterpolation: \"foo\\u2002bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2003bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2003bar\",",
      "104:           noInterpolation: \"foo\\u2003bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2004bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2004bar\",",
      "111:           noInterpolation: \"foo\\u2004bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2005bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2005bar\",",
      "118:           noInterpolation: \"foo\\u2005bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2006bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2006bar\",",
      "125:           noInterpolation: \"foo\\u2006bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2007bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2007bar\",",
      "132:           noInterpolation: \"foo\\u2007bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2008bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2008bar\",",
      "139:           noInterpolation: \"foo\\u2008bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u2009bar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u2009bar\",",
      "146:           noInterpolation: \"foo\\u2009bar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u200Abar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u200Abar\",",
      "153:           noInterpolation: \"foo\\u200Abar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2028bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2028bar\",",
      "160:           noInterpolation: \"foo\\u2028bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u2029bar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u2029bar\",",
      "167:           noInterpolation: \"foo\\u2029bar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u202Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u202Fbar\",",
      "174:           noInterpolation: \"foo\\u202Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u205Fbar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u205Fbar\",",
      "181:           noInterpolation: \"foo\\u205Fbar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\u3000bar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\u3000bar\",",
      "188:           noInterpolation: \"foo\\u3000bar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\uFEFFbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo\\uFEFFbar\",",
      "195:           noInterpolation: \"foo\\uFEFFbar\",",
      "196:         },",
      "197:       },",
      "198:       {",
      "199:         input: \"foo\\n\\rbar\",",
      "200:         expected: {",
      "201:           interpolation: \"foo  bar\",",
      "202:           noInterpolation: \"foo  bar\",",
      "203:         },",
      "204:       },",
      "205:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "399:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "400:       },",
      "401:     ],",
      "402:     'single quotes (\"\\'\")': [",
      "403:       {",
      "404:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "575:     \"whitespace (\\\\s)\": [",
      "576:       {",
      "577:         input: \"foo bar\",",
      "578:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "579:       },",
      "580:       {",
      "581:         input: \"foo\\nbar\",",
      "582:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "583:       },",
      "584:       {",
      "585:         input: \"foo\\vbar\",",
      "586:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "587:       },",
      "588:       {",
      "589:         input: \"foo\\fbar\",",
      "590:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "591:       },",
      "592:       {",
      "593:         input: \"foo\\rbar\",",
      "594:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\rbar\" },",
      "595:       },",
      "596:       {",
      "597:         input: \"foo bar\",",
      "598:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "599:       },",
      "600:       {",
      "601:         input: \"foo\\u0085bar\",",
      "602:         expected: {",
      "603:           interpolation: \"foo\\u0085bar\",",
      "604:           noInterpolation: \"foo\\u0085bar\",",
      "605:         },",
      "606:       },",
      "607:       {",
      "608:         input: \"foo\\u00A0bar\",",
      "609:         expected: {",
      "610:           interpolation: \"foo\\u00A0bar\",",
      "611:           noInterpolation: \"foo\\u00A0bar\",",
      "612:         },",
      "613:       },",
      "614:       {",
      "615:         input: \"foo\\u1680bar\",",
      "616:         expected: {",
      "617:           interpolation: \"foo\\u1680bar\",",
      "618:           noInterpolation: \"foo\\u1680bar\",",
      "619:         },",
      "620:       },",
      "621:       {",
      "622:         input: \"foo\\u2000bar\",",
      "623:         expected: {",
      "624:           interpolation: \"foo\\u2000bar\",",
      "625:           noInterpolation: \"foo\\u2000bar\",",
      "626:         },",
      "627:       },",
      "628:       {",
      "629:         input: \"foo\\u2001bar\",",
      "630:         expected: {",
      "631:           interpolation: \"foo\\u2001bar\",",
      "632:           noInterpolation: \"foo\\u2001bar\",",
      "633:         },",
      "634:       },",
      "635:       {",
      "636:         input: \"foo\\u2002bar\",",
      "637:         expected: {",
      "638:           interpolation: \"foo\\u2002bar\",",
      "639:           noInterpolation: \"foo\\u2002bar\",",
      "640:         },",
      "641:       },",
      "642:       {",
      "643:         input: \"foo\\u2003bar\",",
      "644:         expected: {",
      "645:           interpolation: \"foo\\u2003bar\",",
      "646:           noInterpolation: \"foo\\u2003bar\",",
      "647:         },",
      "648:       },",
      "649:       {",
      "650:         input: \"foo\\u2004bar\",",
      "651:         expected: {",
      "652:           interpolation: \"foo\\u2004bar\",",
      "653:           noInterpolation: \"foo\\u2004bar\",",
      "654:         },",
      "655:       },",
      "656:       {",
      "657:         input: \"foo\\u2005bar\",",
      "658:         expected: {",
      "659:           interpolation: \"foo\\u2005bar\",",
      "660:           noInterpolation: \"foo\\u2005bar\",",
      "661:         },",
      "662:       },",
      "663:       {",
      "664:         input: \"foo\\u2006bar\",",
      "665:         expected: {",
      "666:           interpolation: \"foo\\u2006bar\",",
      "667:           noInterpolation: \"foo\\u2006bar\",",
      "668:         },",
      "669:       },",
      "670:       {",
      "671:         input: \"foo\\u2007bar\",",
      "672:         expected: {",
      "673:           interpolation: \"foo\\u2007bar\",",
      "674:           noInterpolation: \"foo\\u2007bar\",",
      "675:         },",
      "676:       },",
      "677:       {",
      "678:         input: \"foo\\u2008bar\",",
      "679:         expected: {",
      "680:           interpolation: \"foo\\u2008bar\",",
      "681:           noInterpolation: \"foo\\u2008bar\",",
      "682:         },",
      "683:       },",
      "684:       {",
      "685:         input: \"foo\\u2009bar\",",
      "686:         expected: {",
      "687:           interpolation: \"foo\\u2009bar\",",
      "688:           noInterpolation: \"foo\\u2009bar\",",
      "689:         },",
      "690:       },",
      "691:       {",
      "692:         input: \"foo\\u200Abar\",",
      "693:         expected: {",
      "694:           interpolation: \"foo\\u200Abar\",",
      "695:           noInterpolation: \"foo\\u200Abar\",",
      "696:         },",
      "697:       },",
      "698:       {",
      "699:         input: \"foo\\u2028bar\",",
      "700:         expected: {",
      "701:           interpolation: \"foo\\u2028bar\",",
      "702:           noInterpolation: \"foo\\u2028bar\",",
      "703:         },",
      "704:       },",
      "705:       {",
      "706:         input: \"foo\\u2029bar\",",
      "707:         expected: {",
      "708:           interpolation: \"foo\\u2029bar\",",
      "709:           noInterpolation: \"foo\\u2029bar\",",
      "710:         },",
      "711:       },",
      "712:       {",
      "713:         input: \"foo\\u202Fbar\",",
      "714:         expected: {",
      "715:           interpolation: \"foo\\u202Fbar\",",
      "716:           noInterpolation: \"foo\\u202Fbar\",",
      "717:         },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\u205Fbar\",",
      "721:         expected: {",
      "722:           interpolation: \"foo\\u205Fbar\",",
      "723:           noInterpolation: \"foo\\u205Fbar\",",
      "724:         },",
      "725:       },",
      "726:       {",
      "727:         input: \"foo\\u3000bar\",",
      "728:         expected: {",
      "729:           interpolation: \"foo\\u3000bar\",",
      "730:           noInterpolation: \"foo\\u3000bar\",",
      "731:         },",
      "732:       },",
      "733:       {",
      "734:         input: \"foo\\uFEFFbar\",",
      "735:         expected: {",
      "736:           interpolation: \"foo\\uFEFFbar\",",
      "737:           noInterpolation: \"foo\\uFEFFbar\",",
      "738:         },",
      "739:       },",
      "740:       {",
      "741:         input: \"foo\\n\\rbar\",",
      "742:         expected: {",
      "743:           interpolation: \"foo  bar\",",
      "744:           noInterpolation: \"foo\\n\\rbar\",",
      "745:         },",
      "746:       },",
      "747:     ],",
      "",
      "---------------"
    ],
    "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
      "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: }",
      "27: function getExpectedOutput({ arg, shell }, normalizeWhitespace) {",
      "32:   arg = arg.replace(/\\u{0}/gu, \"\"); // Remove null characters, like Shescape",
      "34:   if (normalizeWhitespace) {",
      "37:     if (isShellPowerShell(shell)) {",
      "39:     } else {",
      "41:     }",
      "44:     if (isShellPowerShell(shell)) {",
      "46:     } else {",
      "48:     }",
      "49:   }",
      "",
      "[Removed Lines]",
      "28:   if (isShellCmd(shell)) {",
      "29:     arg = arg.replace(/[\\n\\r]+/g, \"\"); // Remove newline characters, like prep",
      "30:   }",
      "38:       arg = arg.replace(/^[\\s\\u0085]+|[\\s\\u0085]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t]+|[ \\t]+$/g, \"\");",
      "45:       arg = arg.replace(/(\\s|\\u0085)+/g, \" \");",
      "47:       arg = arg.replace(/[ \\t]+/g, \" \");",
      "",
      "[Added Lines]",
      "33:       arg = arg.replace(",
      "34:         /^[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+|[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+$/g,",
      "35:         \"\"",
      "36:       );",
      "37:     } else if (isShellCmd(shell)) {",
      "38:       arg = arg.replace(/^[ \\t\\n\\r]+|[ \\t\\n\\r]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t\\n]+|[ \\t\\n]+$/g, \"\");",
      "45:       arg = arg.replace(",
      "46:         /[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+/g,",
      "47:         \" \"",
      "48:       );",
      "49:     } else if (isShellCmd(shell)) {",
      "50:       arg = arg.replace(/[ \\t\\n\\r]+/g, \" \");",
      "52:       arg = arg.replace(/[ \\t\\n]+/g, \" \");",
      "53:     }",
      "54:   } else {",
      "55:     if (isShellCmd(shell)) {",
      "56:       arg = arg.replace(/[\\n\\r]/g, \" \"); // Change newlines to spaces, like Shescape",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57: }",
      "59: function prepareArg({ arg, quoted, shell }, disableExtraWindowsPreparations) {",
      "66:   if (isWindows() && !disableExtraWindowsPreparations) {",
      "68:     if (isShellCmd(shell)) {",
      "",
      "[Removed Lines]",
      "60:   if (isShellCmd(shell)) {",
      "63:     arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "64:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs": [
      "File: test/fuzz/exec.test.cjs -> test/fuzz/exec.test.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: }",
      "45: function checkWithoutShellUsingInterpolation(arg) {",
      "48:   const argInfo = { arg, shell: undefined, quoted: false };",
      "50:   const preparedArg = common.prepareArg(argInfo);",
      "",
      "[Removed Lines]",
      "46:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60: }",
      "62: function checkWithShellUsingInterpolation(arg) {",
      "65:   const shell = common.getFuzzShell() || true;",
      "66:   const argInfo = { arg, shell, quoted: false };",
      "67:   const execOptions = { shell };",
      "",
      "[Removed Lines]",
      "63:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/unit/_macros.js||test/unit/_macros.js": [
      "File: test/unit/_macros.js -> test/unit/_macros.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:     t.is(actual, expected);",
      "29:   },",
      "30:   title(_, { input, interpolation, quoted, shellName }) {",
      "32:     interpolation = interpolation ? \"interpolation\" : \"no interpolation\";",
      "33:     quoted = quoted ? \"quoted\" : \"not quoted\";",
      "",
      "[Removed Lines]",
      "31:     input = input.replace(/\\u{0}/gu, \"\\\\x00\").replace(/\\t/g, \"\\\\t\");",
      "",
      "[Added Lines]",
      "31:     input = input",
      "32:       .replace(/\\u0000/g, \"\\\\u{0000}\")",
      "33:       .replace(/\\u0009/g, \"\\\\t\")",
      "34:       .replace(/\\u000A/g, \"\\\\n\")",
      "35:       .replace(/\\u000B/g, \"\\\\v\")",
      "36:       .replace(/\\u000C/g, \"\\\\f\")",
      "37:       .replace(/\\u000D/g, \"\\\\r\")",
      "38:       .replace(/\\u0085/g, \"\\\\u{0085}\")",
      "39:       .replace(/\\u00A0/g, \"\\\\u{00A0}\")",
      "40:       .replace(/\\u1680/g, \"\\\\u{1680}\")",
      "41:       .replace(/\\u2000/g, \"\\\\u{2000}\")",
      "42:       .replace(/\\u2001/g, \"\\\\u{2001}\")",
      "43:       .replace(/\\u2002/g, \"\\\\u{2002}\")",
      "44:       .replace(/\\u2003/g, \"\\\\u{2003}\")",
      "45:       .replace(/\\u2004/g, \"\\\\u{2004}\")",
      "46:       .replace(/\\u2005/g, \"\\\\u{2005}\")",
      "47:       .replace(/\\u2006/g, \"\\\\u{2006}\")",
      "48:       .replace(/\\u2007/g, \"\\\\u{2007}\")",
      "49:       .replace(/\\u2008/g, \"\\\\u{2008}\")",
      "50:       .replace(/\\u2009/g, \"\\\\u{2009}\")",
      "51:       .replace(/\\u200A/g, \"\\\\u{200A}\")",
      "52:       .replace(/\\u2028/g, \"\\\\u{2028}\")",
      "53:       .replace(/\\u2029/g, \"\\\\u{2029}\")",
      "54:       .replace(/\\u202F/g, \"\\\\u{202F}\")",
      "55:       .replace(/\\u205F/g, \"\\\\u{205F}\")",
      "56:       .replace(/\\u3000/g, \"\\\\u{3000}\")",
      "57:       .replace(/\\uFEFF/g, \"\\\\u{FEFF}\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "174ef2a46c06f4b4db3b7311552a3cdd80166bc5",
      "candidate_info": {
        "commit_hash": "174ef2a46c06f4b4db3b7311552a3cdd80166bc5",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/174ef2a46c06f4b4db3b7311552a3cdd80166bc5",
        "files": [
          "CHANGELOG.md",
          "src/win.js",
          "test/fixtures/win.cjs",
          "test/fuzz/corpus/89cf01d2aab23094d05da090514360411e4963414f1e86912c21173ef527d5be"
        ],
        "message": "Fix escaping of some characters followed by U+0085 for PowerShell (#354)",
        "before_after_code_files": [
          "src/win.js||src/win.js",
          "test/fixtures/win.cjs||test/fixtures/win.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/win.js||src/win.js",
            "test/fixtures/win.cjs||test/fixtures/win.cjs"
          ],
          "candidate": [
            "src/win.js||src/win.js",
            "test/fixtures/win.cjs||test/fixtures/win.cjs"
          ]
        }
      },
      "candidate_diff": {
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   if (interpolation) {",
          "66:     result = result",
          "67:       .replace(/\\n|\\r/g, \" \")",
          "70:       .replace(/(,|\\;|\\&|\\|)/g, \"`$1\")",
          "71:       .replace(/(\\(|\\)|\\{|\\})/g, \"`$1\")",
          "72:       .replace(/('|\u2019|\u2018|\u201b|\u201a)/g, \"`$1\")",
          "",
          "[Removed Lines]",
          "68:       .replace(/(^|\\s)((?:\\*|[1-6])?)(>)/g, \"$1$2`$3\")",
          "69:       .replace(/(^|\\s)(<|@|#|-|\\:|\\])/g, \"$1`$2\")",
          "",
          "[Added Lines]",
          "68:       .replace(/(^|\\s|\\u0085)((?:\\*|[1-6])?)(>)/g, \"$1$2`$3\")",
          "69:       .replace(/(^|\\s|\\u0085)(<|@|#|-|\\:|\\])/g, \"$1`$2\")",
          "",
          "---------------"
        ],
        "test/fixtures/win.cjs||test/fixtures/win.cjs": [
          "File: test/fixtures/win.cjs -> test/fixtures/win.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "811:         input: \"a @b\",",
          "812:         expected: { interpolation: \"a `@b\", noInterpolation: \"a @b\" },",
          "813:       },",
          "814:     ],",
          "815:     \"hashtags ('#')\": [",
          "816:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "814:       {",
          "815:         input: \"a\\u0085@b\",",
          "816:         expected: { interpolation: \"a\\u0085`@b\", noInterpolation: \"a\\u0085@b\" },",
          "817:       },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "837:         input: \"a #b\",",
          "838:         expected: { interpolation: \"a `#b\", noInterpolation: \"a #b\" },",
          "839:       },",
          "840:     ],",
          "841:     \"carets ('^')\": [",
          "842:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844:       {",
          "845:         input: \"a\\u0085#b\",",
          "846:         expected: { interpolation: \"a\\u0085`#b\", noInterpolation: \"a\\u0085#b\" },",
          "847:       },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "893:         input: \"a -b\",",
          "894:         expected: { interpolation: \"a `-b\", noInterpolation: \"a -b\" },",
          "895:       },",
          "896:     ],",
          "897:     \"colons (':')\": [",
          "898:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904:       {",
          "905:         input: \"a\\u0085-b\",",
          "906:         expected: { interpolation: \"a\\u0085`-b\", noInterpolation: \"a\\u0085-b\" },",
          "907:       },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "915:         input: \"a :b\",",
          "916:         expected: { interpolation: \"a `:b\", noInterpolation: \"a :b\" },",
          "917:       },",
          "918:     ],",
          "919:     \"semicolons (';')\": [",
          "920:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "930:       {",
          "931:         input: \"a\\u0085:b\",",
          "932:         expected: { interpolation: \"a\\u0085`:b\", noInterpolation: \"a\\u0085:b\" },",
          "933:       },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1025:         input: \"a [b]\",",
          "1026:         expected: { interpolation: \"a [b]\", noInterpolation: \"a [b]\" },",
          "1027:       },",
          "1028:     ],",
          "1029:     \"curly brackets ('{', '}')\": [",
          "1030:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1044:       {",
          "1045:         input: \"a\\u0085[b\",",
          "1046:         expected: { interpolation: \"a\\u0085[b\", noInterpolation: \"a\\u0085[b\" },",
          "1047:       },",
          "1048:       {",
          "1049:         input: \"a\\u0085]b\",",
          "1050:         expected: { interpolation: \"a\\u0085`]b\", noInterpolation: \"a\\u0085]b\" },",
          "1051:       },",
          "1052:       {",
          "1053:         input: \"a\\u0085[b]\",",
          "1054:         expected: {",
          "1055:           interpolation: \"a\\u0085[b]\",",
          "1056:           noInterpolation: \"a\\u0085[b]\",",
          "1057:         },",
          "1058:       },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1177:         input: \"a *>b\",",
          "1178:         expected: { interpolation: \"a *`>b\", noInterpolation: \"a *>b\" },",
          "1179:       },",
          "1180:     ],",
          "1181:     \"left double quotation mark ('\u201c')\": [",
          "1182:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1211:       {",
          "1212:         input: \"a\\u0085<b\",",
          "1213:         expected: { interpolation: \"a\\u0085`<b\", noInterpolation: \"a\\u0085<b\" },",
          "1214:       },",
          "1215:       {",
          "1216:         input: \"a\\u0085>b\",",
          "1217:         expected: { interpolation: \"a\\u0085`>b\", noInterpolation: \"a\\u0085>b\" },",
          "1218:       },",
          "1219:       {",
          "1220:         input: \"a\\u00851>b\",",
          "1221:         expected: {",
          "1222:           interpolation: \"a\\u00851`>b\",",
          "1223:           noInterpolation: \"a\\u00851>b\",",
          "1224:         },",
          "1225:       },",
          "1226:       {",
          "1227:         input: \"a\\u00852>b\",",
          "1228:         expected: {",
          "1229:           interpolation: \"a\\u00852`>b\",",
          "1230:           noInterpolation: \"a\\u00852>b\",",
          "1231:         },",
          "1232:       },",
          "1233:       {",
          "1234:         input: \"a\\u00853>b\",",
          "1235:         expected: {",
          "1236:           interpolation: \"a\\u00853`>b\",",
          "1237:           noInterpolation: \"a\\u00853>b\",",
          "1238:         },",
          "1239:       },",
          "1240:       {",
          "1241:         input: \"a\\u00854>b\",",
          "1242:         expected: {",
          "1243:           interpolation: \"a\\u00854`>b\",",
          "1244:           noInterpolation: \"a\\u00854>b\",",
          "1245:         },",
          "1246:       },",
          "1247:       {",
          "1248:         input: \"a\\u00855>b\",",
          "1249:         expected: {",
          "1250:           interpolation: \"a\\u00855`>b\",",
          "1251:           noInterpolation: \"a\\u00855>b\",",
          "1252:         },",
          "1253:       },",
          "1254:       {",
          "1255:         input: \"a\\u00856>b\",",
          "1256:         expected: {",
          "1257:           interpolation: \"a\\u00856`>b\",",
          "1258:           noInterpolation: \"a\\u00856>b\",",
          "1259:         },",
          "1260:       },",
          "1261:       {",
          "1262:         input: \"a\\u0085*>b\",",
          "1263:         expected: {",
          "1264:           interpolation: \"a\\u0085*`>b\",",
          "1265:           noInterpolation: \"a\\u0085*>b\",",
          "1266:         },",
          "1267:       },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8c868def532599bdb7b4b73d0ad986585fb678e",
      "candidate_info": {
        "commit_hash": "d8c868def532599bdb7b4b73d0ad986585fb678e",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/d8c868def532599bdb7b4b73d0ad986585fb678e",
        "files": [
          "CHANGELOG.md",
          "src/win.js",
          "test/fixtures/unix.js",
          "test/fixtures/win.js",
          "test/fuzz/_common.cjs"
        ],
        "message": "Correct `\\n\\r` to `\\r\\n` (#460)\n\n* Correct `\\n\\r` to `\\r\\n`\n\nWindows newlines are <carriage return>+<line feed>, not <line feed>\n+<carriage return>.\n\n* Update CHANGELOG.md\n\nAdd followup PRs as refs to unreleased changes.",
        "before_after_code_files": [
          "src/win.js||src/win.js",
          "test/fixtures/unix.js||test/fixtures/unix.js",
          "test/fixtures/win.js||test/fixtures/win.js",
          "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/win.js||src/win.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
          ],
          "candidate": [
            "src/win.js||src/win.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
          ]
        }
      },
      "candidate_diff": {
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: function escapeArgCmd(arg, interpolation, quoted) {",
          "38:   if (interpolation) {",
          "39:     result = result.replace(/\\^/gu, \"^^\").replace(/([\"&<>|])/gu, \"^$1\");",
          "",
          "[Removed Lines]",
          "36:   let result = arg.replace(/\\0/gu, \"\").replace(/\\n\\r?|\\r/gu, \" \");",
          "",
          "[Added Lines]",
          "36:   let result = arg.replace(/\\0/gu, \"\").replace(/\\r?\\n|\\r/gu, \" \");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   if (interpolation) {",
          "62:     result = result",
          "64:       .replace(/(^|[\\s\\u0085])([*1-6]?)(>)/gu, \"$1$2`$3\")",
          "65:       .replace(/(^|[\\s\\u0085])([#\\-:<@\\]])/gu, \"$1`$2\")",
          "66:       .replace(/([\"&'(),;{|}\u2018\u2019\u201a\u201b\u201c\u201d\u201e])/gu, \"`$1\");",
          "",
          "[Removed Lines]",
          "63:       .replace(/\\n\\r?|\\r/gu, \" \")",
          "",
          "[Added Lines]",
          "63:       .replace(/\\r?\\n|\\r/gu, \" \")",
          "",
          "---------------"
        ],
        "test/fixtures/unix.js||test/fixtures/unix.js": [
          "File: test/fixtures/unix.js -> test/fixtures/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:         },",
          "190:       },",
          "191:       {",
          "193:         expected: {",
          "196:         },",
          "197:       },",
          "198:     ],",
          "",
          "[Removed Lines]",
          "192:         input: \"foo\\n\\rbar\",",
          "194:           interpolation: \"foo \\rbar\",",
          "195:           noInterpolation: \"foo\\n\\rbar\",",
          "",
          "[Added Lines]",
          "192:         input: \"foo\\r\\nbar\",",
          "194:           interpolation: \"foo\\r bar\",",
          "195:           noInterpolation: \"foo\\r\\nbar\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "888:         },",
          "889:       },",
          "890:       {",
          "892:         expected: {",
          "895:         },",
          "896:       },",
          "897:     ],",
          "",
          "[Removed Lines]",
          "891:         input: \"foo\\n\\rbar\",",
          "893:           interpolation: \"foo \\rbar\",",
          "894:           noInterpolation: \"foo\\n\\rbar\",",
          "",
          "[Added Lines]",
          "891:         input: \"foo\\r\\nbar\",",
          "893:           interpolation: \"foo\\r bar\",",
          "894:           noInterpolation: \"foo\\r\\nbar\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1547:         },",
          "1548:       },",
          "1549:       {",
          "1551:         expected: {",
          "1554:         },",
          "1555:       },",
          "1556:     ],",
          "",
          "[Removed Lines]",
          "1550:         input: \"foo\\n\\rbar\",",
          "1552:           interpolation: \"foo \\rbar\",",
          "1553:           noInterpolation: \"foo\\n\\rbar\",",
          "",
          "[Added Lines]",
          "1550:         input: \"foo\\r\\nbar\",",
          "1552:           interpolation: \"foo\\r bar\",",
          "1553:           noInterpolation: \"foo\\r\\nbar\",",
          "",
          "---------------"
        ],
        "test/fixtures/win.js||test/fixtures/win.js": [
          "File: test/fixtures/win.js -> test/fixtures/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:         },",
          "197:       },",
          "198:       {",
          "200:         expected: {",
          "201:           interpolation: \"foo bar\",",
          "202:           noInterpolation: \"foo bar\",",
          "",
          "[Removed Lines]",
          "199:         input: \"foo\\n\\rbar\",",
          "",
          "[Added Lines]",
          "199:         input: \"foo\\r\\nbar\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "738:         },",
          "739:       },",
          "740:       {",
          "742:         expected: {",
          "743:           interpolation: \"foo bar\",",
          "745:         },",
          "746:       },",
          "747:     ],",
          "",
          "[Removed Lines]",
          "741:         input: \"foo\\n\\rbar\",",
          "744:           noInterpolation: \"foo\\n\\rbar\",",
          "",
          "[Added Lines]",
          "741:         input: \"foo\\r\\nbar\",",
          "744:           noInterpolation: \"foo\\r\\nbar\",",
          "",
          "---------------"
        ],
        "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     }",
          "74:   } else {",
          "75:     if (isShellCmd(shell)) {",
          "77:     }",
          "78:   }",
          "",
          "[Removed Lines]",
          "76:       arg = arg.replace(/\\n\\r?|\\r/gu, \" \"); // Change newlines to spaces, like Shescape",
          "",
          "[Added Lines]",
          "76:       arg = arg.replace(/\\r?\\n|\\r/gu, \" \"); // Change newlines to spaces, like Shescape",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "063ef9b2c82aa13722fab37a80458dc40b2eec32",
      "candidate_info": {
        "commit_hash": "063ef9b2c82aa13722fab37a80458dc40b2eec32",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/063ef9b2c82aa13722fab37a80458dc40b2eec32",
        "files": [
          ".github/workflows/fuzz-matrix.js",
          ".github/workflows/reusable-fuzz.yml",
          "CHANGELOG.md",
          "README.md",
          "rollup.config.js",
          "src/unix.js",
          "test/_constants.cjs",
          "test/fixtures/unix.js",
          "test/fuzz/_common.cjs",
          "test/fuzz/corpus/1f575e02a1cd02b83266306ef195851dfd087e20708452d1dcc2c81e4ef3ccbd",
          "test/fuzz/corpus/dc03b80d78256c11729ab7b488d3bba7be3b541196de687c42ba37b214a2ddb9",
          "test/unit/unix/csh.test.js"
        ],
        "message": "Add C shell support (#659)\n\nAdd support for C shell [1] (on Unix systems), or `csh`, with an\nimplementation based primarily on fuzzing against `csh`using all\ncurrenlty available fuzz targets in this project.\n\nUnit and integration test fixtures were created based on 1) the fixtures\navailable for other Unix shells, adjusted based on the behaviour of the\n`csh`-specific escaping discovered based on fuzzing, and 2) additional\ncases for characters that should be escaped for `csh`; correspondingly\nsuch cases were also added for all other Unix shells.\n\nAdditionally, by including C shell in the `test/_constants.cjs` file its\ncovered by other test suites such as the end-to-end tests.\n\nOne notable thing about escaping for C shell is the code that can be\nfound in `src/unix.js` at line 103. The preceding comment explains this\nin detail but in essence, due to a bug, characters with the bytes 0xA0\nin the utf-8 encoding are to be quoted individually.\nAs checking for this requires the Node.js built-in package `util` [2],\n`util` is added as an \"external\" package in the rollup.js configuration\nto avoid unintentinally bundling it into `index.cjs`.\nThere is a special unit test for this detail in a C shell specific unit\ntestfile that generates arbitrary strings with arbitrary 0xA0-containing\ncharacters. Additionally, the two new fuzz corpus entries both relate to\nthis behaviour - one with 0xA0 in the character's -8 encoding second\nposition and one with 0xA0 in the character's utf-8 encoding third\npositionl.\n\n--\n1. https://en.wikipedia.org/wiki/C_shell\n2. https://nodejs.org/api/util.html",
        "before_after_code_files": [
          ".github/workflows/fuzz-matrix.js||.github/workflows/fuzz-matrix.js",
          "rollup.config.js||rollup.config.js",
          "src/unix.js||src/unix.js",
          "test/_constants.cjs||test/_constants.cjs",
          "test/fixtures/unix.js||test/fixtures/unix.js",
          "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
          "test/unit/unix/csh.test.js||test/unit/unix/csh.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
          ]
        }
      },
      "candidate_diff": {
        ".github/workflows/fuzz-matrix.js||.github/workflows/fuzz-matrix.js": [
          "File: .github/workflows/fuzz-matrix.js -> .github/workflows/fuzz-matrix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: const systemShell = \"\";",
          "13: const winShells = [systemShell, \"cmd.exe\", \"powershell.exe\"];",
          "15: const targets = [\"exec\", \"exec-file\", \"spawn\"];",
          "",
          "[Removed Lines]",
          "12: const unixShells = [systemShell, \"/bin/bash\", \"/bin/dash\", \"/bin/zsh\"];",
          "",
          "[Added Lines]",
          "12: const unixShells = [",
          "13:   systemShell,",
          "14:   \"/bin/bash\",",
          "15:   \"/bin/csh\",",
          "16:   \"/bin/dash\",",
          "17:   \"/bin/zsh\",",
          "18: ];",
          "",
          "---------------"
        ],
        "rollup.config.js||rollup.config.js": [
          "File: rollup.config.js -> rollup.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     file: \"index.cjs\",",
          "7:     format: \"cjs\",",
          "8:   },",
          "10: };",
          "",
          "[Removed Lines]",
          "9:   external: [\"fs\", \"os\", \"path\", \"path/win32\", \"process\", \"which\"],",
          "",
          "[Added Lines]",
          "9:   external: [\"fs\", \"os\", \"path\", \"path/win32\", \"process\", \"util\", \"which\"],",
          "",
          "---------------"
        ],
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import * as fs from \"fs\";",
          "7: import * as path from \"path\";",
          "9: import which from \"which\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import { TextEncoder } from \"util\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: const binBash = \"bash\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: const binCsh = \"csh\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:   return result;",
          "62: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: function escapeArgCsh(arg, { interpolation, quoted }) {",
          "83:   let result = arg",
          "84:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "85:     .replace(/\\r?\\n|\\r/gu, \" \");",
          "87:   if (interpolation) {",
          "88:     result = result",
          "89:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "90:       .replace(/(^|\\s)(~)/gu, \"$1\\\\$2\")",
          "91:       .replace(/([\"#$&'()*;<>?[`{|])/gu, \"\\\\$1\")",
          "92:       .replace(/([\\t ])/gu, \"\\\\$1\");",
          "94:     const textEncoder = new TextEncoder();",
          "95:     result = result",
          "96:       .split(\"\")",
          "97:       .map(",
          "103:         (char) => (textEncoder.encode(char).includes(160) ? `'${char}'` : char)",
          "104:       )",
          "105:       .join(\"\");",
          "106:   } else if (quoted) {",
          "107:     result = result.replace(/'/gu, `'\\\\''`);",
          "108:   }",
          "110:   result = result.replace(/!(?!$)/gu, \"\\\\!\");",
          "112:   return result;",
          "113: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:   switch (shellName) {",
          "160:     case binBash:",
          "161:       return escapeArgBash;",
          "162:     case binDash:",
          "163:       return escapeArgDash;",
          "164:     case binZsh:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:     case binCsh:",
          "214:       return escapeArgCsh;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177: export function getQuoteFunction(shellName) {",
          "178:   switch (shellName) {",
          "179:     case binBash:",
          "180:     case binDash:",
          "181:     case binZsh:",
          "182:       return quoteArg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:     case binCsh:",
          "",
          "---------------"
        ],
        "test/_constants.cjs||test/_constants.cjs": [
          "File: test/_constants.cjs -> test/_constants.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: module.exports.binBash = \"bash\";",
          "46: module.exports.binDash = \"dash\";",
          "47: module.exports.binZsh = \"zsh\";",
          "49: module.exports.shellsUnix = [",
          "50:   module.exports.binBash,",
          "51:   module.exports.binDash,",
          "52:   module.exports.binZsh,",
          "53: ];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: module.exports.binCsh = \"csh\";",
          "52:   module.exports.binCsh,",
          "",
          "---------------"
        ],
        "test/fixtures/unix.js||test/fixtures/unix.js": [
          "File: test/fixtures/unix.js -> test/fixtures/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: export const escape = {",
          "9:   [binBash]: {",
          "",
          "[Removed Lines]",
          "6: import { binBash, binDash, binZsh } from \"../_constants.cjs\";",
          "",
          "[Added Lines]",
          "6: import { binBash, binCsh, binDash, binZsh } from \"../_constants.cjs\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "940:         expected: { interpolation: \"a\\\\\\t\\\\~b\", noInterpolation: \"a\\t~b\" },",
          "941:       },",
          "942:     ],",
          "943:     \"hashtags ('#')\": [",
          "944:       {",
          "945:         input: \"#a\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "943:     \"exclamation marks ('!')\": [",
          "944:       {",
          "945:         input: \"a!\",",
          "946:         expected: { interpolation: \"a!\", noInterpolation: \"a!\" },",
          "947:       },",
          "948:       {",
          "949:         input: \"a!b\",",
          "950:         expected: { interpolation: \"a!b\", noInterpolation: \"a!b\" },",
          "951:       },",
          "952:       {",
          "953:         input: \"a!b!c\",",
          "954:         expected: { interpolation: \"a!b!c\", noInterpolation: \"a!b!c\" },",
          "955:       },",
          "956:     ],",
          "957:     \"hashtags ('#')\": [",
          "958:       {",
          "959:         input: \"#a\",",
          "960:         expected: { interpolation: \"\\\\#a\", noInterpolation: \"#a\" },",
          "961:       },",
          "962:       {",
          "963:         input: \"#a#b\",",
          "964:         expected: { interpolation: \"\\\\#a#b\", noInterpolation: \"#a#b\" },",
          "965:       },",
          "966:       {",
          "967:         input: \"a#b\",",
          "968:         expected: { interpolation: \"a#b\", noInterpolation: \"a#b\" },",
          "969:       },",
          "970:       {",
          "971:         input: \"a#b#c\",",
          "972:         expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },",
          "973:       },",
          "974:       {",
          "975:         input: \"a #b\",",
          "976:         expected: { interpolation: \"a\\\\ \\\\#b\", noInterpolation: \"a #b\" },",
          "977:       },",
          "978:       {",
          "979:         input: \"a\\t#b\",",
          "980:         expected: { interpolation: \"a\\\\\\t\\\\#b\", noInterpolation: \"a\\t#b\" },",
          "981:       },",
          "982:     ],",
          "983:     \"dollar signs ('$')\": [",
          "984:       {",
          "985:         input: \"a$b\",",
          "986:         expected: { interpolation: \"a\\\\$b\", noInterpolation: \"a$b\" },",
          "987:       },",
          "988:       {",
          "989:         input: \"a$b$c\",",
          "990:         expected: { interpolation: \"a\\\\$b\\\\$c\", noInterpolation: \"a$b$c\" },",
          "991:       },",
          "992:     ],",
          "993:     \"ampersands ('&')\": [",
          "994:       {",
          "995:         input: \"a&b\",",
          "996:         expected: { interpolation: \"a\\\\&b\", noInterpolation: \"a&b\" },",
          "997:       },",
          "998:       {",
          "999:         input: \"a&b&c\",",
          "1000:         expected: { interpolation: \"a\\\\&b\\\\&c\", noInterpolation: \"a&b&c\" },",
          "1001:       },",
          "1002:     ],",
          "1003:     \"asterisks ('*')\": [",
          "1004:       {",
          "1005:         input: \"a*b\",",
          "1006:         expected: { interpolation: \"a\\\\*b\", noInterpolation: \"a*b\" },",
          "1007:       },",
          "1008:       {",
          "1009:         input: \"a*b*c\",",
          "1010:         expected: { interpolation: \"a\\\\*b\\\\*c\", noInterpolation: \"a*b*c\" },",
          "1011:       },",
          "1012:     ],",
          "1013:     \"equals ('=')\": [",
          "1014:       {",
          "1015:         input: \"=a\",",
          "1016:         expected: { interpolation: \"=a\", noInterpolation: \"=a\" },",
          "1017:       },",
          "1018:       {",
          "1019:         input: \"=a=b\",",
          "1020:         expected: { interpolation: \"=a=b\", noInterpolation: \"=a=b\" },",
          "1021:       },",
          "1022:       {",
          "1023:         input: \"a=b\",",
          "1024:         expected: { interpolation: \"a=b\", noInterpolation: \"a=b\" },",
          "1025:       },",
          "1026:       {",
          "1027:         input: \"a=b=c\",",
          "1028:         expected: { interpolation: \"a=b=c\", noInterpolation: \"a=b=c\" },",
          "1029:       },",
          "1030:     ],",
          "1031:     \"backslashes ('\\\\')\": [",
          "1032:       {",
          "1033:         input: \"a\\\\b\",",
          "1034:         expected: { interpolation: \"a\\\\\\\\b\", noInterpolation: \"a\\\\b\" },",
          "1035:       },",
          "1036:       {",
          "1037:         input: \"a\\\\b\\\\c\",",
          "1038:         expected: { interpolation: \"a\\\\\\\\b\\\\\\\\c\", noInterpolation: \"a\\\\b\\\\c\" },",
          "1039:       },",
          "1040:     ],",
          "1041:     \"pipes ('|')\": [",
          "1042:       {",
          "1043:         input: \"a|b\",",
          "1044:         expected: { interpolation: \"a\\\\|b\", noInterpolation: \"a|b\" },",
          "1045:       },",
          "1046:       {",
          "1047:         input: \"a|b|c\",",
          "1048:         expected: { interpolation: \"a\\\\|b\\\\|c\", noInterpolation: \"a|b|c\" },",
          "1049:       },",
          "1050:     ],",
          "1051:     \"semicolons (';')\": [",
          "1052:       {",
          "1053:         input: \"a;b\",",
          "1054:         expected: { interpolation: \"a\\\\;b\", noInterpolation: \"a;b\" },",
          "1055:       },",
          "1056:       {",
          "1057:         input: \"a;b;c\",",
          "1058:         expected: { interpolation: \"a\\\\;b\\\\;c\", noInterpolation: \"a;b;c\" },",
          "1059:       },",
          "1060:     ],",
          "1061:     \"question marks ('?')\": [",
          "1062:       {",
          "1063:         input: \"a?b\",",
          "1064:         expected: { interpolation: \"a\\\\?b\", noInterpolation: \"a?b\" },",
          "1065:       },",
          "1066:       {",
          "1067:         input: \"a?b?c\",",
          "1068:         expected: { interpolation: \"a\\\\?b\\\\?c\", noInterpolation: \"a?b?c\" },",
          "1069:       },",
          "1070:     ],",
          "1071:     \"parentheses ('(', ')')\": [",
          "1072:       {",
          "1073:         input: \"a(b\",",
          "1074:         expected: { interpolation: \"a\\\\(b\", noInterpolation: \"a(b\" },",
          "1075:       },",
          "1076:       {",
          "1077:         input: \"a)b\",",
          "1078:         expected: { interpolation: \"a\\\\)b\", noInterpolation: \"a)b\" },",
          "1079:       },",
          "1080:       {",
          "1081:         input: \"a(b(c\",",
          "1082:         expected: { interpolation: \"a\\\\(b\\\\(c\", noInterpolation: \"a(b(c\" },",
          "1083:       },",
          "1084:       {",
          "1085:         input: \"a)b)c\",",
          "1086:         expected: { interpolation: \"a\\\\)b\\\\)c\", noInterpolation: \"a)b)c\" },",
          "1087:       },",
          "1088:       {",
          "1089:         input: \"a(b)c\",",
          "1090:         expected: { interpolation: \"a\\\\(b\\\\)c\", noInterpolation: \"a(b)c\" },",
          "1091:       },",
          "1092:       {",
          "1093:         input: \"a(b,c)d\",",
          "1094:         expected: { interpolation: \"a\\\\(b,c\\\\)d\", noInterpolation: \"a(b,c)d\" },",
          "1095:       },",
          "1096:     ],",
          "1097:     \"square brackets ('[', ']')\": [",
          "1098:       {",
          "1099:         input: \"a[b\",",
          "1100:         expected: { interpolation: \"a[b\", noInterpolation: \"a[b\" },",
          "1101:       },",
          "1102:       {",
          "1103:         input: \"a]b\",",
          "1104:         expected: { interpolation: \"a]b\", noInterpolation: \"a]b\" },",
          "1105:       },",
          "1106:       {",
          "1107:         input: \"a[b[c\",",
          "1108:         expected: { interpolation: \"a[b[c\", noInterpolation: \"a[b[c\" },",
          "1109:       },",
          "1110:       {",
          "1111:         input: \"a]b]c\",",
          "1112:         expected: { interpolation: \"a]b]c\", noInterpolation: \"a]b]c\" },",
          "1113:       },",
          "1114:       {",
          "1115:         input: \"a[b]c\",",
          "1116:         expected: { interpolation: \"a[b]c\", noInterpolation: \"a[b]c\" },",
          "1117:       },",
          "1118:       {",
          "1119:         input: \"a[b,c]d\",",
          "1120:         expected: { interpolation: \"a[b,c]d\", noInterpolation: \"a[b,c]d\" },",
          "1121:       },",
          "1122:     ],",
          "1123:     \"curly brackets ('{', '}')\": [",
          "1124:       {",
          "1125:         input: \"a{b\",",
          "1126:         expected: { interpolation: \"a\\\\{b\", noInterpolation: \"a{b\" },",
          "1127:       },",
          "1128:       {",
          "1129:         input: \"a}b\",",
          "1130:         expected: { interpolation: \"a}b\", noInterpolation: \"a}b\" },",
          "1131:       },",
          "1132:       {",
          "1133:         input: \"a{b{c\",",
          "1134:         expected: { interpolation: \"a\\\\{b\\\\{c\", noInterpolation: \"a{b{c\" },",
          "1135:       },",
          "1136:       {",
          "1137:         input: \"a}b}c\",",
          "1138:         expected: { interpolation: \"a}b}c\", noInterpolation: \"a}b}c\" },",
          "1139:       },",
          "1140:       {",
          "1141:         input: \"a{b}c\",",
          "1142:         expected: { interpolation: \"a\\\\{b}c\", noInterpolation: \"a{b}c\" },",
          "1143:       },",
          "1144:       {",
          "1145:         input: \"a{b,c}d\",",
          "1146:         expected: { interpolation: \"a\\\\{b,c}d\", noInterpolation: \"a{b,c}d\" },",
          "1147:       },",
          "1148:       {",
          "1149:         input: \"a{,b}c\",",
          "1150:         expected: { interpolation: \"a\\\\{,b}c\", noInterpolation: \"a{,b}c\" },",
          "1151:       },",
          "1152:       {",
          "1153:         input: \"a{b,}c\",",
          "1154:         expected: { interpolation: \"a\\\\{b,}c\", noInterpolation: \"a{b,}c\" },",
          "1155:       },",
          "1156:       {",
          "1157:         input: \"a{bc,de}f\",",
          "1158:         expected: {",
          "1159:           interpolation: \"a\\\\{bc,de}f\",",
          "1160:           noInterpolation: \"a{bc,de}f\",",
          "1161:         },",
          "1162:       },",
          "1163:       {",
          "1164:         input: \"a{b,{c,d},e}f\",",
          "1165:         expected: {",
          "1166:           interpolation: \"a\\\\{b,\\\\{c,d},e}f\",",
          "1167:           noInterpolation: \"a{b,{c,d},e}f\",",
          "1168:         },",
          "1169:       },",
          "1170:       {",
          "1171:         input: \"a{0..2}b\",",
          "1172:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
          "1173:       },",
          "1174:       {",
          "1175:         input: \"a{\\u000Db,c}d\",",
          "1176:         expected: {",
          "1177:           interpolation: \"a\\\\{b,c}d\",",
          "1178:           noInterpolation: \"a{b,c}d\",",
          "1179:         },",
          "1180:       },",
          "1181:       {",
          "1182:         input: \"a{\\u2028b,c}d\",",
          "1183:         expected: {",
          "1184:           interpolation: \"a\\\\{\\u2028b,c}d\",",
          "1185:           noInterpolation: \"a{\\u2028b,c}d\",",
          "1186:         },",
          "1187:       },",
          "1188:       {",
          "1189:         input: \"a{\\u2029b,c}d\",",
          "1190:         expected: {",
          "1191:           interpolation: \"a\\\\{\\u2029b,c}d\",",
          "1192:           noInterpolation: \"a{\\u2029b,c}d\",",
          "1193:         },",
          "1194:       },",
          "1195:       {",
          "1196:         input: \"a{b,c\\u000D}d\",",
          "1197:         expected: {",
          "1198:           interpolation: \"a\\\\{b,c}d\",",
          "1199:           noInterpolation: \"a{b,c}d\",",
          "1200:         },",
          "1201:       },",
          "1202:       {",
          "1203:         input: \"a{b,c\\u2028}d\",",
          "1204:         expected: {",
          "1205:           interpolation: \"a\\\\{b,c\\u2028}d\",",
          "1206:           noInterpolation: \"a{b,c\\u2028}d\",",
          "1207:         },",
          "1208:       },",
          "1209:       {",
          "1210:         input: \"a{b,c\\u2029}d\",",
          "1211:         expected: {",
          "1212:           interpolation: \"a\\\\{b,c\\u2029}d\",",
          "1213:           noInterpolation: \"a{b,c\\u2029}d\",",
          "1214:         },",
          "1215:       },",
          "1216:       {",
          "1217:         input: \"a{\\u000D0..2}b\",",
          "1218:         expected: {",
          "1219:           interpolation: \"a\\\\{0..2}b\",",
          "1220:           noInterpolation: \"a{0..2}b\",",
          "1221:         },",
          "1222:       },",
          "1223:       {",
          "1224:         input: \"a{\\u20280..2}b\",",
          "1225:         expected: {",
          "1226:           interpolation: \"a\\\\{\\u20280..2}b\",",
          "1227:           noInterpolation: \"a{\\u20280..2}b\",",
          "1228:         },",
          "1229:       },",
          "1230:       {",
          "1231:         input: \"a{\\u20290..2}b\",",
          "1232:         expected: {",
          "1233:           interpolation: \"a\\\\{\\u20290..2}b\",",
          "1234:           noInterpolation: \"a{\\u20290..2}b\",",
          "1235:         },",
          "1236:       },",
          "1237:       {",
          "1238:         input: \"a{0..2\\u000D}b\",",
          "1239:         expected: {",
          "1240:           interpolation: \"a\\\\{0..2}b\",",
          "1241:           noInterpolation: \"a{0..2}b\",",
          "1242:         },",
          "1243:       },",
          "1244:       {",
          "1245:         input: \"a{0..2\\u2028}b\",",
          "1246:         expected: {",
          "1247:           interpolation: \"a\\\\{0..2\\u2028}b\",",
          "1248:           noInterpolation: \"a{0..2\\u2028}b\",",
          "1249:         },",
          "1250:       },",
          "1251:       {",
          "1252:         input: \"a{0..2\\u2029}b\",",
          "1253:         expected: {",
          "1254:           interpolation: \"a\\\\{0..2\\u2029}b\",",
          "1255:           noInterpolation: \"a{0..2\\u2029}b\",",
          "1256:         },",
          "1257:       },",
          "1258:       {",
          "1259:         input: \"a{{b,c}\",",
          "1260:         expected: { interpolation: \"a\\\\{\\\\{b,c}\", noInterpolation: \"a{{b,c}\" },",
          "1261:       },",
          "1262:       {",
          "1263:         input: \"a{b{c,d}\",",
          "1264:         expected: {",
          "1265:           interpolation: \"a\\\\{b\\\\{c,d}\",",
          "1266:           noInterpolation: \"a{b{c,d}\",",
          "1267:         },",
          "1268:       },",
          "1269:     ],",
          "1270:     \"angle brackets ('<', '>')\": [",
          "1271:       {",
          "1272:         input: \"a<b\",",
          "1273:         expected: { interpolation: \"a\\\\<b\", noInterpolation: \"a<b\" },",
          "1274:       },",
          "1275:       {",
          "1276:         input: \"a>b\",",
          "1277:         expected: { interpolation: \"a\\\\>b\", noInterpolation: \"a>b\" },",
          "1278:       },",
          "1279:       {",
          "1280:         input: \"a<b<c\",",
          "1281:         expected: { interpolation: \"a\\\\<b\\\\<c\", noInterpolation: \"a<b<c\" },",
          "1282:       },",
          "1283:       {",
          "1284:         input: \"a>b>c\",",
          "1285:         expected: { interpolation: \"a\\\\>b\\\\>c\", noInterpolation: \"a>b>c\" },",
          "1286:       },",
          "1287:       {",
          "1288:         input: \"a<b>c\",",
          "1289:         expected: { interpolation: \"a\\\\<b\\\\>c\", noInterpolation: \"a<b>c\" },",
          "1290:       },",
          "1291:     ],",
          "1292:   },",
          "1293:   [binCsh]: {",
          "1294:     \"sample strings\": [",
          "1295:       {",
          "1296:         input: \"foobar\",",
          "1297:         expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },",
          "1298:       },",
          "1299:     ],",
          "1300:     \"<null> (\\\\0)\": [",
          "1301:       {",
          "1302:         input: \"a\\x00b\",",
          "1303:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "1304:       },",
          "1305:       {",
          "1306:         input: \"a\\x00b\\x00c\",",
          "1307:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "1308:       },",
          "1309:       {",
          "1310:         input: \"a\\x00\",",
          "1311:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1312:       },",
          "1313:       {",
          "1314:         input: \"\\x00a\",",
          "1315:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1316:       },",
          "1317:     ],",
          "1318:     \"<backspace> ('\\\\b')\": [",
          "1319:       {",
          "1320:         input: \"a\\bb\",",
          "1321:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "1322:       },",
          "1323:       {",
          "1324:         input: \"a\\bb\\bc\",",
          "1325:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "1326:       },",
          "1327:       {",
          "1328:         input: \"\\ba\",",
          "1329:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1330:       },",
          "1331:       {",
          "1332:         input: \"a\\b\",",
          "1333:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1334:       },",
          "1335:     ],",
          "1336:     \"<character tabulation> (\\\\t)\": [",
          "1337:       {",
          "1338:         input: \"a\\tb\",",
          "1339:         expected: { interpolation: \"a\\\\\\tb\", noInterpolation: \"a\\tb\" },",
          "1340:       },",
          "1341:       {",
          "1342:         input: \"a\\tb\\tc\",",
          "1343:         expected: { interpolation: \"a\\\\\\tb\\\\\\tc\", noInterpolation: \"a\\tb\\tc\" },",
          "1344:       },",
          "1345:       {",
          "1346:         input: \"a\\t\",",
          "1347:         expected: { interpolation: \"a\\\\\\t\", noInterpolation: \"a\\t\" },",
          "1348:       },",
          "1349:       {",
          "1350:         input: \"\\ta\",",
          "1351:         expected: { interpolation: \"\\\\\\ta\", noInterpolation: \"\\ta\" },",
          "1352:       },",
          "1353:     ],",
          "1354:     \"<end of line> ('\\\\n')\": [",
          "1355:       {",
          "1356:         input: \"a\\nb\",",
          "1357:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a b\" },",
          "1358:       },",
          "1359:       {",
          "1360:         input: \"a\\nb\\nc\",",
          "1361:         expected: { interpolation: \"a\\\\ b\\\\ c\", noInterpolation: \"a b c\" },",
          "1362:       },",
          "1363:       {",
          "1364:         input: \"a\\n\",",
          "1365:         expected: { interpolation: \"a\\\\ \", noInterpolation: \"a \" },",
          "1366:       },",
          "1367:       {",
          "1368:         input: \"\\na\",",
          "1369:         expected: { interpolation: \"\\\\ a\", noInterpolation: \" a\" },",
          "1370:       },",
          "1371:     ],",
          "1372:     \"<line tabulation> (\\\\v)\": [",
          "1373:       {",
          "1374:         input: \"a\\vb\",",
          "1375:         expected: { interpolation: \"a\\vb\", noInterpolation: \"a\\vb\" },",
          "1376:       },",
          "1377:       {",
          "1378:         input: \"a\\vb\\vc\",",
          "1379:         expected: { interpolation: \"a\\vb\\vc\", noInterpolation: \"a\\vb\\vc\" },",
          "1380:       },",
          "1381:       {",
          "1382:         input: \"a\\v\",",
          "1383:         expected: { interpolation: \"a\\v\", noInterpolation: \"a\\v\" },",
          "1384:       },",
          "1385:       {",
          "1386:         input: \"\\va\",",
          "1387:         expected: { interpolation: \"\\va\", noInterpolation: \"\\va\" },",
          "1388:       },",
          "1389:     ],",
          "1390:     \"<form feed> (\\\\f)\": [",
          "1391:       {",
          "1392:         input: \"a\\fb\",",
          "1393:         expected: { interpolation: \"a\\fb\", noInterpolation: \"a\\fb\" },",
          "1394:       },",
          "1395:       {",
          "1396:         input: \"a\\fb\\fc\",",
          "1397:         expected: { interpolation: \"a\\fb\\fc\", noInterpolation: \"a\\fb\\fc\" },",
          "1398:       },",
          "1399:       {",
          "1400:         input: \"a\\f\",",
          "1401:         expected: { interpolation: \"a\\f\", noInterpolation: \"a\\f\" },",
          "1402:       },",
          "1403:       {",
          "1404:         input: \"\\fa\",",
          "1405:         expected: { interpolation: \"\\fa\", noInterpolation: \"\\fa\" },",
          "1406:       },",
          "1407:     ],",
          "1408:     \"<carriage return> ('\\\\r')\": [",
          "1409:       {",
          "1410:         input: \"a\\rb\",",
          "1411:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a b\" },",
          "1412:       },",
          "1413:       {",
          "1414:         input: \"a\\rb\\rc\",",
          "1415:         expected: { interpolation: \"a\\\\ b\\\\ c\", noInterpolation: \"a b c\" },",
          "1416:       },",
          "1417:       {",
          "1418:         input: \"\\ra\",",
          "1419:         expected: { interpolation: \"\\\\ a\", noInterpolation: \" a\" },",
          "1420:       },",
          "1421:       {",
          "1422:         input: \"a\\r\",",
          "1423:         expected: { interpolation: \"a\\\\ \", noInterpolation: \"a \" },",
          "1424:       },",
          "1425:       {",
          "1426:         input: \"a\\r\\nb\",",
          "1427:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a b\" },",
          "1428:       },",
          "1429:     ],",
          "1430:     \"<escape> ('\\\\u001B')\": [",
          "1431:       {",
          "1432:         input: \"a\\u001Bb\",",
          "1433:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "1434:       },",
          "1435:       {",
          "1436:         input: \"a\\u001Bb\\u001Bc\",",
          "1437:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "1438:       },",
          "1439:       {",
          "1440:         input: \"\\u001Ba\",",
          "1441:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1442:       },",
          "1443:       {",
          "1444:         input: \"a\\u001B\",",
          "1445:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1446:       },",
          "1447:     ],",
          "1448:     \"<space> (' ')\": [",
          "1449:       {",
          "1450:         input: \"a b\",",
          "1451:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a b\" },",
          "1452:       },",
          "1453:       {",
          "1454:         input: \"a b c\",",
          "1455:         expected: { interpolation: \"a\\\\ b\\\\ c\", noInterpolation: \"a b c\" },",
          "1456:       },",
          "1457:       {",
          "1458:         input: \"a \",",
          "1459:         expected: { interpolation: \"a\\\\ \", noInterpolation: \"a \" },",
          "1460:       },",
          "1461:       {",
          "1462:         input: \" a\",",
          "1463:         expected: { interpolation: \"\\\\ a\", noInterpolation: \" a\" },",
          "1464:       },",
          "1465:     ],",
          "1466:     \"<next line> (\\\\u0085)\": [",
          "1467:       {",
          "1468:         input: \"a\\u0085b\",",
          "1469:         expected: {",
          "1470:           interpolation: \"a\\u0085b\",",
          "1471:           noInterpolation: \"a\\u0085b\",",
          "1472:         },",
          "1473:       },",
          "1474:       {",
          "1475:         input: \"a\\u0085b\\u0085c\",",
          "1476:         expected: {",
          "1477:           interpolation: \"a\\u0085b\\u0085c\",",
          "1478:           noInterpolation: \"a\\u0085b\\u0085c\",",
          "1479:         },",
          "1480:       },",
          "1481:       {",
          "1482:         input: \"a\\u0085\",",
          "1483:         expected: {",
          "1484:           interpolation: \"a\\u0085\",",
          "1485:           noInterpolation: \"a\\u0085\",",
          "1486:         },",
          "1487:       },",
          "1488:       {",
          "1489:         input: \"\\u0085a\",",
          "1490:         expected: {",
          "1491:           interpolation: \"\\u0085a\",",
          "1492:           noInterpolation: \"\\u0085a\",",
          "1493:         },",
          "1494:       },",
          "1495:     ],",
          "1496:     \"<control sequence introducer> ('\\\\u009B')\": [",
          "1497:       {",
          "1498:         input: \"a\\u009Bb\",",
          "1499:         expected: { interpolation: \"ab\", noInterpolation: \"ab\" },",
          "1500:       },",
          "1501:       {",
          "1502:         input: \"a\\u009Bb\\u009Bc\",",
          "1503:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
          "1504:       },",
          "1505:       {",
          "1506:         input: \"\\u009Ba\",",
          "1507:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1508:       },",
          "1509:       {",
          "1510:         input: \"a\\u009B\",",
          "1511:         expected: { interpolation: \"a\", noInterpolation: \"a\" },",
          "1512:       },",
          "1513:     ],",
          "1514:     \"<no break space> (\\\\u00A0)\": [",
          "1515:       {",
          "1516:         input: \"a\\u00A0b\",",
          "1517:         expected: {",
          "1518:           interpolation: \"a'\\u00A0'b\",",
          "1519:           noInterpolation: \"a\\u00A0b\",",
          "1520:         },",
          "1521:       },",
          "1522:       {",
          "1523:         input: \"a\\u00A0b\\u00A0c\",",
          "1524:         expected: {",
          "1525:           interpolation: \"a'\\u00A0'b'\\u00A0'c\",",
          "1526:           noInterpolation: \"a\\u00A0b\\u00A0c\",",
          "1527:         },",
          "1528:       },",
          "1529:       {",
          "1530:         input: \"a\\u00A0\",",
          "1531:         expected: {",
          "1532:           interpolation: \"a'\\u00A0'\",",
          "1533:           noInterpolation: \"a\\u00A0\",",
          "1534:         },",
          "1535:       },",
          "1536:       {",
          "1537:         input: \"\\u00A0a\",",
          "1538:         expected: {",
          "1539:           interpolation: \"'\\u00A0'a\",",
          "1540:           noInterpolation: \"\\u00A0a\",",
          "1541:         },",
          "1542:       },",
          "1543:     ],",
          "1544:     \"<en quad> (\\\\u2000)\": [",
          "1545:       {",
          "1546:         input: \"a\\u2000b\",",
          "1547:         expected: {",
          "1548:           interpolation: \"a\\u2000b\",",
          "1549:           noInterpolation: \"a\\u2000b\",",
          "1550:         },",
          "1551:       },",
          "1552:       {",
          "1553:         input: \"a\\u2000b\\u2000c\",",
          "1554:         expected: {",
          "1555:           interpolation: \"a\\u2000b\\u2000c\",",
          "1556:           noInterpolation: \"a\\u2000b\\u2000c\",",
          "1557:         },",
          "1558:       },",
          "1559:       {",
          "1560:         input: \"a\\u2000\",",
          "1561:         expected: {",
          "1562:           interpolation: \"a\\u2000\",",
          "1563:           noInterpolation: \"a\\u2000\",",
          "1564:         },",
          "1565:       },",
          "1566:       {",
          "1567:         input: \"\\u2000a\",",
          "1568:         expected: {",
          "1569:           interpolation: \"\\u2000a\",",
          "1570:           noInterpolation: \"\\u2000a\",",
          "1571:         },",
          "1572:       },",
          "1573:     ],",
          "1574:     \"<em quad> (\\\\u2001)\": [",
          "1575:       {",
          "1576:         input: \"a\\u2001b\",",
          "1577:         expected: {",
          "1578:           interpolation: \"a\\u2001b\",",
          "1579:           noInterpolation: \"a\\u2001b\",",
          "1580:         },",
          "1581:       },",
          "1582:       {",
          "1583:         input: \"a\\u2001b\\u2001c\",",
          "1584:         expected: {",
          "1585:           interpolation: \"a\\u2001b\\u2001c\",",
          "1586:           noInterpolation: \"a\\u2001b\\u2001c\",",
          "1587:         },",
          "1588:       },",
          "1589:       {",
          "1590:         input: \"a\\u2001\",",
          "1591:         expected: {",
          "1592:           interpolation: \"a\\u2001\",",
          "1593:           noInterpolation: \"a\\u2001\",",
          "1594:         },",
          "1595:       },",
          "1596:       {",
          "1597:         input: \"\\u2001a\",",
          "1598:         expected: {",
          "1599:           interpolation: \"\\u2001a\",",
          "1600:           noInterpolation: \"\\u2001a\",",
          "1601:         },",
          "1602:       },",
          "1603:     ],",
          "1604:     \"<en space> (\\\\u2002)\": [",
          "1605:       {",
          "1606:         input: \"a\\u2002b\",",
          "1607:         expected: {",
          "1608:           interpolation: \"a\\u2002b\",",
          "1609:           noInterpolation: \"a\\u2002b\",",
          "1610:         },",
          "1611:       },",
          "1612:       {",
          "1613:         input: \"a\\u2002b\\u2002c\",",
          "1614:         expected: {",
          "1615:           interpolation: \"a\\u2002b\\u2002c\",",
          "1616:           noInterpolation: \"a\\u2002b\\u2002c\",",
          "1617:         },",
          "1618:       },",
          "1619:       {",
          "1620:         input: \"a\\u2002\",",
          "1621:         expected: {",
          "1622:           interpolation: \"a\\u2002\",",
          "1623:           noInterpolation: \"a\\u2002\",",
          "1624:         },",
          "1625:       },",
          "1626:       {",
          "1627:         input: \"\\u2002a\",",
          "1628:         expected: {",
          "1629:           interpolation: \"\\u2002a\",",
          "1630:           noInterpolation: \"\\u2002a\",",
          "1631:         },",
          "1632:       },",
          "1633:     ],",
          "1634:     \"<em space> (\\\\u2003)\": [",
          "1635:       {",
          "1636:         input: \"a\\u2003b\",",
          "1637:         expected: {",
          "1638:           interpolation: \"a\\u2003b\",",
          "1639:           noInterpolation: \"a\\u2003b\",",
          "1640:         },",
          "1641:       },",
          "1642:       {",
          "1643:         input: \"a\\u2003b\\u2003c\",",
          "1644:         expected: {",
          "1645:           interpolation: \"a\\u2003b\\u2003c\",",
          "1646:           noInterpolation: \"a\\u2003b\\u2003c\",",
          "1647:         },",
          "1648:       },",
          "1649:       {",
          "1650:         input: \"a\\u2003\",",
          "1651:         expected: {",
          "1652:           interpolation: \"a\\u2003\",",
          "1653:           noInterpolation: \"a\\u2003\",",
          "1654:         },",
          "1655:       },",
          "1656:       {",
          "1657:         input: \"\\u2003a\",",
          "1658:         expected: {",
          "1659:           interpolation: \"\\u2003a\",",
          "1660:           noInterpolation: \"\\u2003a\",",
          "1661:         },",
          "1662:       },",
          "1663:     ],",
          "1664:     \"<three-per-em space> (\\\\u2004)\": [",
          "1665:       {",
          "1666:         input: \"a\\u2004b\",",
          "1667:         expected: {",
          "1668:           interpolation: \"a\\u2004b\",",
          "1669:           noInterpolation: \"a\\u2004b\",",
          "1670:         },",
          "1671:       },",
          "1672:       {",
          "1673:         input: \"a\\u2004b\\u2004c\",",
          "1674:         expected: {",
          "1675:           interpolation: \"a\\u2004b\\u2004c\",",
          "1676:           noInterpolation: \"a\\u2004b\\u2004c\",",
          "1677:         },",
          "1678:       },",
          "1679:       {",
          "1680:         input: \"a\\u2004\",",
          "1681:         expected: {",
          "1682:           interpolation: \"a\\u2004\",",
          "1683:           noInterpolation: \"a\\u2004\",",
          "1684:         },",
          "1685:       },",
          "1686:       {",
          "1687:         input: \"\\u2004a\",",
          "1688:         expected: {",
          "1689:           interpolation: \"\\u2004a\",",
          "1690:           noInterpolation: \"\\u2004a\",",
          "1691:         },",
          "1692:       },",
          "1693:     ],",
          "1694:     \"<four-per-em space> (\\\\u2005)\": [",
          "1695:       {",
          "1696:         input: \"a\\u2005b\",",
          "1697:         expected: {",
          "1698:           interpolation: \"a\\u2005b\",",
          "1699:           noInterpolation: \"a\\u2005b\",",
          "1700:         },",
          "1701:       },",
          "1702:       {",
          "1703:         input: \"a\\u2005b\\u2005c\",",
          "1704:         expected: {",
          "1705:           interpolation: \"a\\u2005b\\u2005c\",",
          "1706:           noInterpolation: \"a\\u2005b\\u2005c\",",
          "1707:         },",
          "1708:       },",
          "1709:       {",
          "1710:         input: \"a\\u2005\",",
          "1711:         expected: {",
          "1712:           interpolation: \"a\\u2005\",",
          "1713:           noInterpolation: \"a\\u2005\",",
          "1714:         },",
          "1715:       },",
          "1716:       {",
          "1717:         input: \"\\u2005a\",",
          "1718:         expected: {",
          "1719:           interpolation: \"\\u2005a\",",
          "1720:           noInterpolation: \"\\u2005a\",",
          "1721:         },",
          "1722:       },",
          "1723:     ],",
          "1724:     \"<six-per-em space> (\\\\u2006)\": [",
          "1725:       {",
          "1726:         input: \"a\\u2006b\",",
          "1727:         expected: {",
          "1728:           interpolation: \"a\\u2006b\",",
          "1729:           noInterpolation: \"a\\u2006b\",",
          "1730:         },",
          "1731:       },",
          "1732:       {",
          "1733:         input: \"a\\u2006b\\u2006c\",",
          "1734:         expected: {",
          "1735:           interpolation: \"a\\u2006b\\u2006c\",",
          "1736:           noInterpolation: \"a\\u2006b\\u2006c\",",
          "1737:         },",
          "1738:       },",
          "1739:       {",
          "1740:         input: \"a\\u2006\",",
          "1741:         expected: {",
          "1742:           interpolation: \"a\\u2006\",",
          "1743:           noInterpolation: \"a\\u2006\",",
          "1744:         },",
          "1745:       },",
          "1746:       {",
          "1747:         input: \"\\u2006a\",",
          "1748:         expected: {",
          "1749:           interpolation: \"\\u2006a\",",
          "1750:           noInterpolation: \"\\u2006a\",",
          "1751:         },",
          "1752:       },",
          "1753:     ],",
          "1754:     \"<figure space> (\\\\u2007)\": [",
          "1755:       {",
          "1756:         input: \"a\\u2007b\",",
          "1757:         expected: {",
          "1758:           interpolation: \"a\\u2007b\",",
          "1759:           noInterpolation: \"a\\u2007b\",",
          "1760:         },",
          "1761:       },",
          "1762:       {",
          "1763:         input: \"a\\u2007b\\u2007c\",",
          "1764:         expected: {",
          "1765:           interpolation: \"a\\u2007b\\u2007c\",",
          "1766:           noInterpolation: \"a\\u2007b\\u2007c\",",
          "1767:         },",
          "1768:       },",
          "1769:       {",
          "1770:         input: \"a\\u2007\",",
          "1771:         expected: {",
          "1772:           interpolation: \"a\\u2007\",",
          "1773:           noInterpolation: \"a\\u2007\",",
          "1774:         },",
          "1775:       },",
          "1776:       {",
          "1777:         input: \"\\u2007a\",",
          "1778:         expected: {",
          "1779:           interpolation: \"\\u2007a\",",
          "1780:           noInterpolation: \"\\u2007a\",",
          "1781:         },",
          "1782:       },",
          "1783:     ],",
          "1784:     \"<punctuation space> (\\\\u2008)\": [",
          "1785:       {",
          "1786:         input: \"a\\u2008b\",",
          "1787:         expected: {",
          "1788:           interpolation: \"a\\u2008b\",",
          "1789:           noInterpolation: \"a\\u2008b\",",
          "1790:         },",
          "1791:       },",
          "1792:       {",
          "1793:         input: \"a\\u2008b\\u2008c\",",
          "1794:         expected: {",
          "1795:           interpolation: \"a\\u2008b\\u2008c\",",
          "1796:           noInterpolation: \"a\\u2008b\\u2008c\",",
          "1797:         },",
          "1798:       },",
          "1799:       {",
          "1800:         input: \"a\\u2008\",",
          "1801:         expected: {",
          "1802:           interpolation: \"a\\u2008\",",
          "1803:           noInterpolation: \"a\\u2008\",",
          "1804:         },",
          "1805:       },",
          "1806:       {",
          "1807:         input: \"\\u2008a\",",
          "1808:         expected: {",
          "1809:           interpolation: \"\\u2008a\",",
          "1810:           noInterpolation: \"\\u2008a\",",
          "1811:         },",
          "1812:       },",
          "1813:     ],",
          "1814:     \"<thin space> (\\\\u2009)\": [",
          "1815:       {",
          "1816:         input: \"a\\u2009b\",",
          "1817:         expected: {",
          "1818:           interpolation: \"a\\u2009b\",",
          "1819:           noInterpolation: \"a\\u2009b\",",
          "1820:         },",
          "1821:       },",
          "1822:       {",
          "1823:         input: \"a\\u2009b\\u2009c\",",
          "1824:         expected: {",
          "1825:           interpolation: \"a\\u2009b\\u2009c\",",
          "1826:           noInterpolation: \"a\\u2009b\\u2009c\",",
          "1827:         },",
          "1828:       },",
          "1829:       {",
          "1830:         input: \"a\\u2009\",",
          "1831:         expected: {",
          "1832:           interpolation: \"a\\u2009\",",
          "1833:           noInterpolation: \"a\\u2009\",",
          "1834:         },",
          "1835:       },",
          "1836:       {",
          "1837:         input: \"\\u2009a\",",
          "1838:         expected: {",
          "1839:           interpolation: \"\\u2009a\",",
          "1840:           noInterpolation: \"\\u2009a\",",
          "1841:         },",
          "1842:       },",
          "1843:     ],",
          "1844:     \"<hair space> (\\\\u200A)\": [",
          "1845:       {",
          "1846:         input: \"a\\u200Ab\",",
          "1847:         expected: {",
          "1848:           interpolation: \"a\\u200Ab\",",
          "1849:           noInterpolation: \"a\\u200Ab\",",
          "1850:         },",
          "1851:       },",
          "1852:       {",
          "1853:         input: \"a\\u200Ab\\u200Ac\",",
          "1854:         expected: {",
          "1855:           interpolation: \"a\\u200Ab\\u200Ac\",",
          "1856:           noInterpolation: \"a\\u200Ab\\u200Ac\",",
          "1857:         },",
          "1858:       },",
          "1859:       {",
          "1860:         input: \"a\\u200A\",",
          "1861:         expected: {",
          "1862:           interpolation: \"a\\u200A\",",
          "1863:           noInterpolation: \"a\\u200A\",",
          "1864:         },",
          "1865:       },",
          "1866:       {",
          "1867:         input: \"\\u200Aa\",",
          "1868:         expected: {",
          "1869:           interpolation: \"\\u200Aa\",",
          "1870:           noInterpolation: \"\\u200Aa\",",
          "1871:         },",
          "1872:       },",
          "1873:     ],",
          "1874:     \"<line separator> (\\\\u2028)\": [",
          "1875:       {",
          "1876:         input: \"a\\u2028b\",",
          "1877:         expected: {",
          "1878:           interpolation: \"a\\u2028b\",",
          "1879:           noInterpolation: \"a\\u2028b\",",
          "1880:         },",
          "1881:       },",
          "1882:       {",
          "1883:         input: \"a\\u2028b\\u2028c\",",
          "1884:         expected: {",
          "1885:           interpolation: \"a\\u2028b\\u2028c\",",
          "1886:           noInterpolation: \"a\\u2028b\\u2028c\",",
          "1887:         },",
          "1888:       },",
          "1889:       {",
          "1890:         input: \"a\\u2028\",",
          "1891:         expected: {",
          "1892:           interpolation: \"a\\u2028\",",
          "1893:           noInterpolation: \"a\\u2028\",",
          "1894:         },",
          "1895:       },",
          "1896:       {",
          "1897:         input: \"\\u2028a\",",
          "1898:         expected: {",
          "1899:           interpolation: \"\\u2028a\",",
          "1900:           noInterpolation: \"\\u2028a\",",
          "1901:         },",
          "1902:       },",
          "1903:     ],",
          "1904:     \"<paragraph separator> (\\\\u2029)\": [",
          "1905:       {",
          "1906:         input: \"a\\u2029b\",",
          "1907:         expected: {",
          "1908:           interpolation: \"a\\u2029b\",",
          "1909:           noInterpolation: \"a\\u2029b\",",
          "1910:         },",
          "1911:       },",
          "1912:       {",
          "1913:         input: \"a\\u2029b\\u2029c\",",
          "1914:         expected: {",
          "1915:           interpolation: \"a\\u2029b\\u2029c\",",
          "1916:           noInterpolation: \"a\\u2029b\\u2029c\",",
          "1917:         },",
          "1918:       },",
          "1919:       {",
          "1920:         input: \"a\\u2029\",",
          "1921:         expected: {",
          "1922:           interpolation: \"a\\u2029\",",
          "1923:           noInterpolation: \"a\\u2029\",",
          "1924:         },",
          "1925:       },",
          "1926:       {",
          "1927:         input: \"\\u2029a\",",
          "1928:         expected: {",
          "1929:           interpolation: \"\\u2029a\",",
          "1930:           noInterpolation: \"\\u2029a\",",
          "1931:         },",
          "1932:       },",
          "1933:     ],",
          "1934:     \"<narrow no-break space> (\\\\u202F)\": [",
          "1935:       {",
          "1936:         input: \"a\\u202Fb\",",
          "1937:         expected: {",
          "1938:           interpolation: \"a\\u202Fb\",",
          "1939:           noInterpolation: \"a\\u202Fb\",",
          "1940:         },",
          "1941:       },",
          "1942:       {",
          "1943:         input: \"a\\u202Fb\\u202Fc\",",
          "1944:         expected: {",
          "1945:           interpolation: \"a\\u202Fb\\u202Fc\",",
          "1946:           noInterpolation: \"a\\u202Fb\\u202Fc\",",
          "1947:         },",
          "1948:       },",
          "1949:       {",
          "1950:         input: \"a\\u202F\",",
          "1951:         expected: {",
          "1952:           interpolation: \"a\\u202F\",",
          "1953:           noInterpolation: \"a\\u202F\",",
          "1954:         },",
          "1955:       },",
          "1956:       {",
          "1957:         input: \"\\u202Fa\",",
          "1958:         expected: {",
          "1959:           interpolation: \"\\u202Fa\",",
          "1960:           noInterpolation: \"\\u202Fa\",",
          "1961:         },",
          "1962:       },",
          "1963:     ],",
          "1964:     \"<medium mathematical space> (\\\\u205F)\": [",
          "1965:       {",
          "1966:         input: \"a\\u205Fb\",",
          "1967:         expected: {",
          "1968:           interpolation: \"a\\u205Fb\",",
          "1969:           noInterpolation: \"a\\u205Fb\",",
          "1970:         },",
          "1971:       },",
          "1972:       {",
          "1973:         input: \"a\\u205Fb\\u205Fc\",",
          "1974:         expected: {",
          "1975:           interpolation: \"a\\u205Fb\\u205Fc\",",
          "1976:           noInterpolation: \"a\\u205Fb\\u205Fc\",",
          "1977:         },",
          "1978:       },",
          "1979:       {",
          "1980:         input: \"a\\u205F\",",
          "1981:         expected: {",
          "1982:           interpolation: \"a\\u205F\",",
          "1983:           noInterpolation: \"a\\u205F\",",
          "1984:         },",
          "1985:       },",
          "1986:       {",
          "1987:         input: \"\\u205Fa\",",
          "1988:         expected: {",
          "1989:           interpolation: \"\\u205Fa\",",
          "1990:           noInterpolation: \"\\u205Fa\",",
          "1991:         },",
          "1992:       },",
          "1993:     ],",
          "1994:     \"<ideographic space> (\\\\u3000)\": [",
          "1995:       {",
          "1996:         input: \"a\\u3000b\",",
          "1997:         expected: {",
          "1998:           interpolation: \"a\\u3000b\",",
          "1999:           noInterpolation: \"a\\u3000b\",",
          "2000:         },",
          "2001:       },",
          "2002:       {",
          "2003:         input: \"a\\u3000b\\u3000c\",",
          "2004:         expected: {",
          "2005:           interpolation: \"a\\u3000b\\u3000c\",",
          "2006:           noInterpolation: \"a\\u3000b\\u3000c\",",
          "2007:         },",
          "2008:       },",
          "2009:       {",
          "2010:         input: \"a\\u3000\",",
          "2011:         expected: {",
          "2012:           interpolation: \"a\\u3000\",",
          "2013:           noInterpolation: \"a\\u3000\",",
          "2014:         },",
          "2015:       },",
          "2016:       {",
          "2017:         input: \"\\u3000a\",",
          "2018:         expected: {",
          "2019:           interpolation: \"\\u3000a\",",
          "2020:           noInterpolation: \"\\u3000a\",",
          "2021:         },",
          "2022:       },",
          "2023:     ],",
          "2024:     \"<zero width no-break space> (\\\\uFEFF)\": [",
          "2025:       {",
          "2026:         input: \"a\\uFEFFb\",",
          "2027:         expected: {",
          "2028:           interpolation: \"a\\uFEFFb\",",
          "2029:           noInterpolation: \"a\\uFEFFb\",",
          "2030:         },",
          "2031:       },",
          "2032:       {",
          "2033:         input: \"a\\uFEFFb\\uFEFFc\",",
          "2034:         expected: {",
          "2035:           interpolation: \"a\\uFEFFb\\uFEFFc\",",
          "2036:           noInterpolation: \"a\\uFEFFb\\uFEFFc\",",
          "2037:         },",
          "2038:       },",
          "2039:       {",
          "2040:         input: \"a\\uFEFF\",",
          "2041:         expected: {",
          "2042:           interpolation: \"a\\uFEFF\",",
          "2043:           noInterpolation: \"a\\uFEFF\",",
          "2044:         },",
          "2045:       },",
          "2046:       {",
          "2047:         input: \"\\uFEFFa\",",
          "2048:         expected: {",
          "2049:           interpolation: \"\\uFEFFa\",",
          "2050:           noInterpolation: \"\\uFEFFa\",",
          "2051:         },",
          "2052:       },",
          "2053:     ],",
          "2054:     'single quotes (\"\\'\")': [",
          "2055:       {",
          "2056:         input: \"a'b\",",
          "2057:         expected: {",
          "2058:           interpolation: \"a\\\\'b\",",
          "2059:           noInterpolation: \"a'b\",",
          "2060:           quoted: \"a'\\\\''b\",",
          "2061:         },",
          "2062:       },",
          "2063:       {",
          "2064:         input: \"a'b'c\",",
          "2065:         expected: {",
          "2066:           interpolation: \"a\\\\'b\\\\'c\",",
          "2067:           noInterpolation: \"a'b'c\",",
          "2068:           quoted: \"a'\\\\''b'\\\\''c\",",
          "2069:         },",
          "2070:       },",
          "2071:     ],",
          "2072:     \"double quotes ('\\\"')\": [",
          "2073:       {",
          "2074:         input: 'a\"b',",
          "2075:         expected: { interpolation: 'a\\\\\"b', noInterpolation: 'a\"b' },",
          "2076:       },",
          "2077:       {",
          "2078:         input: 'a\"b\"c',",
          "2079:         expected: { interpolation: 'a\\\\\"b\\\\\"c', noInterpolation: 'a\"b\"c' },",
          "2080:       },",
          "2081:     ],",
          "2082:     \"backticks (')\": [",
          "2083:       {",
          "2084:         input: \"a`b\",",
          "2085:         expected: { interpolation: \"a\\\\`b\", noInterpolation: \"a`b\" },",
          "2086:       },",
          "2087:       {",
          "2088:         input: \"a`b`c\",",
          "2089:         expected: { interpolation: \"a\\\\`b\\\\`c\", noInterpolation: \"a`b`c\" },",
          "2090:       },",
          "2091:     ],",
          "2092:     \"tildes ('~')\": [",
          "2093:       {",
          "2094:         input: \"~a\",",
          "2095:         expected: { interpolation: \"\\\\~a\", noInterpolation: \"~a\" },",
          "2096:       },",
          "2097:       {",
          "2098:         input: \"~a~b\",",
          "2099:         expected: { interpolation: \"\\\\~a~b\", noInterpolation: \"~a~b\" },",
          "2100:       },",
          "2101:       {",
          "2102:         input: \"a~b\",",
          "2103:         expected: { interpolation: \"a~b\", noInterpolation: \"a~b\" },",
          "2104:       },",
          "2105:       {",
          "2106:         input: \"a~b~c\",",
          "2107:         expected: { interpolation: \"a~b~c\", noInterpolation: \"a~b~c\" },",
          "2108:       },",
          "2109:       {",
          "2110:         input: \"a~b=\",",
          "2111:         expected: { interpolation: \"a~b=\", noInterpolation: \"a~b=\" },",
          "2112:       },",
          "2113:       {",
          "2114:         input: \"a=~\",",
          "2115:         expected: { interpolation: \"a=~\", noInterpolation: \"a=~\" },",
          "2116:       },",
          "2117:       {",
          "2118:         input: \"a~b=~\",",
          "2119:         expected: { interpolation: \"a~b=~\", noInterpolation: \"a~b=~\" },",
          "2120:       },",
          "2121:       {",
          "2122:         input: \"a=b~\",",
          "2123:         expected: { interpolation: \"a=b~\", noInterpolation: \"a=b~\" },",
          "2124:       },",
          "2125:       {",
          "2126:         input: \"a=~b\",",
          "2127:         expected: { interpolation: \"a=~b\", noInterpolation: \"a=~b\" },",
          "2128:       },",
          "2129:       {",
          "2130:         input: \"a=:~\",",
          "2131:         expected: { interpolation: \"a=:~\", noInterpolation: \"a=:~\" },",
          "2132:       },",
          "2133:       {",
          "2134:         input: \"a=b:~\",",
          "2135:         expected: { interpolation: \"a=b:~\", noInterpolation: \"a=b:~\" },",
          "2136:       },",
          "2137:       {",
          "2138:         input: \"a=~:\",",
          "2139:         expected: { interpolation: \"a=~:\", noInterpolation: \"a=~:\" },",
          "2140:       },",
          "2141:       {",
          "2142:         input: \"a=~:b\",",
          "2143:         expected: { interpolation: \"a=~:b\", noInterpolation: \"a=~:b\" },",
          "2144:       },",
          "2145:       {",
          "2146:         input: \"a=~:~\",",
          "2147:         expected: { interpolation: \"a=~:~\", noInterpolation: \"a=~:~\" },",
          "2148:       },",
          "2149:       {",
          "2150:         input: \"a=:~:\",",
          "2151:         expected: { interpolation: \"a=:~:\", noInterpolation: \"a=:~:\" },",
          "2152:       },",
          "2153:       {",
          "2154:         input: \"a=:~:b\",",
          "2155:         expected: { interpolation: \"a=:~:b\", noInterpolation: \"a=:~:b\" },",
          "2156:       },",
          "2157:       {",
          "2158:         input: \"a=b:~:\",",
          "2159:         expected: { interpolation: \"a=b:~:\", noInterpolation: \"a=b:~:\" },",
          "2160:       },",
          "2161:       {",
          "2162:         input: \"a=b:~:c\",",
          "2163:         expected: { interpolation: \"a=b:~:c\", noInterpolation: \"a=b:~:c\" },",
          "2164:       },",
          "2165:       {",
          "2166:         input: \"a=~=\",",
          "2167:         expected: { interpolation: \"a=~=\", noInterpolation: \"a=~=\" },",
          "2168:       },",
          "2169:       {",
          "2170:         input: \"a=~-\",",
          "2171:         expected: { interpolation: \"a=~-\", noInterpolation: \"a=~-\" },",
          "2172:       },",
          "2173:       {",
          "2174:         input: \"a=~+\",",
          "2175:         expected: { interpolation: \"a=~+\", noInterpolation: \"a=~+\" },",
          "2176:       },",
          "2177:       {",
          "2178:         input: \"a=~/\",",
          "2179:         expected: { interpolation: \"a=~/\", noInterpolation: \"a=~/\" },",
          "2180:       },",
          "2181:       {",
          "2182:         input: \"a=~0\",",
          "2183:         expected: { interpolation: \"a=~0\", noInterpolation: \"a=~0\" },",
          "2184:       },",
          "2185:       {",
          "2186:         input: \"a=~ \",",
          "2187:         expected: { interpolation: \"a=~\\\\ \", noInterpolation: \"a=~ \" },",
          "2188:       },",
          "2189:       {",
          "2190:         input: \"a ~b\",",
          "2191:         expected: { interpolation: \"a\\\\ \\\\~b\", noInterpolation: \"a ~b\" },",
          "2192:       },",
          "2193:       {",
          "2194:         input: \"a\\t~b\",",
          "2195:         expected: { interpolation: \"a\\\\\\t\\\\~b\", noInterpolation: \"a\\t~b\" },",
          "2196:       },",
          "2197:     ],",
          "2198:     \"exclamation marks ('!')\": [",
          "2199:       {",
          "2200:         input: \"a!\",",
          "2201:         expected: { interpolation: \"a!\", noInterpolation: \"a!\" },",
          "2202:       },",
          "2203:       {",
          "2204:         input: \"!a!\",",
          "2205:         expected: { interpolation: \"\\\\!a!\", noInterpolation: \"\\\\!a!\" },",
          "2206:       },",
          "2207:       {",
          "2208:         input: \"a!b\",",
          "2209:         expected: { interpolation: \"a\\\\!b\", noInterpolation: \"a\\\\!b\" },",
          "2210:       },",
          "2211:       {",
          "2212:         input: \"a!b!\",",
          "2213:         expected: { interpolation: \"a\\\\!b!\", noInterpolation: \"a\\\\!b!\" },",
          "2214:       },",
          "2215:       {",
          "2216:         input: \"a!b!c\",",
          "2217:         expected: { interpolation: \"a\\\\!b\\\\!c\", noInterpolation: \"a\\\\!b\\\\!c\" },",
          "2218:       },",
          "2219:     ],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "947:       },",
          "948:       {",
          "949:         input: \"#a#b\",",
          "951:       },",
          "952:       {",
          "953:         input: \"a#b\",",
          "955:       },",
          "956:       {",
          "957:         input: \"a#b#c\",",
          "959:       },",
          "960:       {",
          "961:         input: \"a #b\",",
          "",
          "[Removed Lines]",
          "950:         expected: { interpolation: \"\\\\#a#b\", noInterpolation: \"#a#b\" },",
          "954:         expected: { interpolation: \"a#b\", noInterpolation: \"a#b\" },",
          "958:         expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },",
          "",
          "[Added Lines]",
          "2227:         expected: { interpolation: \"\\\\#a\\\\#b\", noInterpolation: \"#a#b\" },",
          "2231:         expected: { interpolation: \"a\\\\#b\", noInterpolation: \"a#b\" },",
          "2235:         expected: { interpolation: \"a\\\\#b\\\\#c\", noInterpolation: \"a#b#c\" },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1083:     \"square brackets ('[', ']')\": [",
          "1084:       {",
          "1085:         input: \"a[b\",",
          "1087:       },",
          "1088:       {",
          "1089:         input: \"a]b\",",
          "",
          "[Removed Lines]",
          "1086:         expected: { interpolation: \"a[b\", noInterpolation: \"a[b\" },",
          "",
          "[Added Lines]",
          "2363:         expected: { interpolation: \"a\\\\[b\", noInterpolation: \"a[b\" },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1091:       },",
          "1092:       {",
          "1093:         input: \"a[b[c\",",
          "1095:       },",
          "1096:       {",
          "1097:         input: \"a]b]c\",",
          "",
          "[Removed Lines]",
          "1094:         expected: { interpolation: \"a[b[c\", noInterpolation: \"a[b[c\" },",
          "",
          "[Added Lines]",
          "2371:         expected: { interpolation: \"a\\\\[b\\\\[c\", noInterpolation: \"a[b[c\" },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1099:       },",
          "1100:       {",
          "1101:         input: \"a[b]c\",",
          "1103:       },",
          "1104:       {",
          "1105:         input: \"a[b,c]d\",",
          "1107:       },",
          "1108:     ],",
          "1109:     \"curly brackets ('{', '}')\": [",
          "",
          "[Removed Lines]",
          "1102:         expected: { interpolation: \"a[b]c\", noInterpolation: \"a[b]c\" },",
          "1106:         expected: { interpolation: \"a[b,c]d\", noInterpolation: \"a[b,c]d\" },",
          "",
          "[Added Lines]",
          "2379:         expected: { interpolation: \"a\\\\[b]c\", noInterpolation: \"a[b]c\" },",
          "2383:         expected: { interpolation: \"a\\\\[b,c]d\", noInterpolation: \"a[b,c]d\" },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1160:       {",
          "1161:         input: \"a{\\u000Db,c}d\",",
          "1162:         expected: {",
          "1165:         },",
          "1166:       },",
          "1167:       {",
          "",
          "[Removed Lines]",
          "1163:           interpolation: \"a\\\\{b,c}d\",",
          "1164:           noInterpolation: \"a{b,c}d\",",
          "",
          "[Added Lines]",
          "2440:           interpolation: \"a\\\\{\\\\ b,c}d\",",
          "2441:           noInterpolation: \"a{ b,c}d\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1181:       {",
          "1182:         input: \"a{b,c\\u000D}d\",",
          "1183:         expected: {",
          "1186:         },",
          "1187:       },",
          "1188:       {",
          "",
          "[Removed Lines]",
          "1184:           interpolation: \"a\\\\{b,c}d\",",
          "1185:           noInterpolation: \"a{b,c}d\",",
          "",
          "[Added Lines]",
          "2461:           interpolation: \"a\\\\{b,c\\\\ }d\",",
          "2462:           noInterpolation: \"a{b,c }d\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1202:       {",
          "1203:         input: \"a{\\u000D0..2}b\",",
          "1204:         expected: {",
          "1207:         },",
          "1208:       },",
          "1209:       {",
          "",
          "[Removed Lines]",
          "1205:           interpolation: \"a\\\\{0..2}b\",",
          "1206:           noInterpolation: \"a{0..2}b\",",
          "",
          "[Added Lines]",
          "2482:           interpolation: \"a\\\\{\\\\ 0..2}b\",",
          "2483:           noInterpolation: \"a{ 0..2}b\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1223:       {",
          "1224:         input: \"a{0..2\\u000D}b\",",
          "1225:         expected: {",
          "1228:         },",
          "1229:       },",
          "1230:       {",
          "",
          "[Removed Lines]",
          "1226:           interpolation: \"a\\\\{0..2}b\",",
          "1227:           noInterpolation: \"a{0..2}b\",",
          "",
          "[Added Lines]",
          "2503:           interpolation: \"a\\\\{0..2\\\\ }b\",",
          "2504:           noInterpolation: \"a{0..2 }b\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2173:         expected: { interpolation: \"a\\\\\\t\\\\~b\", noInterpolation: \"a\\t~b\" },",
          "2174:       },",
          "2175:     ],",
          "2176:     \"hashtags ('#')\": [",
          "2177:       {",
          "2178:         input: \"#a\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3453:     \"exclamation marks ('!')\": [",
          "3454:       {",
          "3455:         input: \"a!\",",
          "3456:         expected: { interpolation: \"a!\", noInterpolation: \"a!\" },",
          "3457:       },",
          "3458:       {",
          "3459:         input: \"a!b\",",
          "3460:         expected: { interpolation: \"a!b\", noInterpolation: \"a!b\" },",
          "3461:       },",
          "3462:       {",
          "3463:         input: \"a!b!c\",",
          "3464:         expected: { interpolation: \"a!b!c\", noInterpolation: \"a!b!c\" },",
          "3465:       },",
          "3466:     ],",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3315:         expected: { interpolation: \"a\\\\\\t\\\\~b\", noInterpolation: \"a\\t~b\" },",
          "3316:       },",
          "3317:     ],",
          "3318:     \"hashtags ('#')\": [",
          "3319:       {",
          "3320:         input: \"#a\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4609:     \"exclamation marks ('!')\": [",
          "4610:       {",
          "4611:         input: \"a!\",",
          "4612:         expected: { interpolation: \"a!\", noInterpolation: \"a!\" },",
          "4613:       },",
          "4614:       {",
          "4615:         input: \"a!b\",",
          "4616:         expected: { interpolation: \"a!b\", noInterpolation: \"a!b\" },",
          "4617:       },",
          "4618:       {",
          "4619:         input: \"a!b!c\",",
          "4620:         expected: { interpolation: \"a!b!c\", noInterpolation: \"a!b!c\" },",
          "4621:       },",
          "4622:     ],",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3563:       },",
          "3564:     ],",
          "3565:   },",
          "3566:   [binBash]: {",
          "3567:     \"sample strings\": [",
          "3568:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4871:   [binCsh]: {",
          "4872:     \"sample strings\": [",
          "4873:       {",
          "4874:         input: \"a\",",
          "4875:         expected: { escaped: \"'a'\", notEscaped: \"'a'\" },",
          "4876:       },",
          "4877:     ],",
          "4878:   },",
          "",
          "---------------"
        ],
        "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   return (isWindows() && shell === undefined) || /cmd\\.exe$/u.test(shell);",
          "32: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: function isShellCsh(shell) {",
          "41:   return /csh$/u.test(shell);",
          "42: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   arg = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");",
          "59:     arg = arg.replace(/\\r?\\n|\\r/gu, \" \");",
          "60:   } else {",
          "61:     arg = arg.replace(/\\r(?!\\n)/gu, \"\");",
          "",
          "[Removed Lines]",
          "58:   if (isShellCmd(shell)) {",
          "",
          "[Added Lines]",
          "68:   if (isShellCmd(shell) || isShellCsh(shell)) {",
          "",
          "---------------"
        ],
        "test/unit/unix/csh.test.js||test/unit/unix/csh.test.js": [
          "File: test/unit/unix/csh.test.js -> test/unit/unix/csh.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import { TextDecoder } from \"node:util\";",
          "9: import { testProp } from \"@fast-check/ava\";",
          "10: import * as fc from \"fast-check\";",
          "12: import { constants } from \"./_.js\";",
          "14: import * as unix from \"../../../src/unix.js\";",
          "16: const textDecoder = new TextDecoder(\"utf-8\", { fatal: true });",
          "18: testProp(",
          "19:   \"characters with 0xA0 when utf-8 encoded\",",
          "20:   [",
          "21:     fc.string().chain((str) => fc.tuple(fc.constant(str), fc.nat(str.length))),",
          "22:     fc",
          "23:       .uint8Array({ minLength: 1, maxLength: 2 })",
          "24:       .chain((str) => fc.tuple(fc.constant(str), fc.nat(str.length)))",
          "25:       .map(([uint8Array, insertIndex]) => {",
          "26:         try {",
          "27:           const utf8EncodedCharacter = new Uint8Array([",
          "28:             ...uint8Array.slice(0, insertIndex),",
          "29:             0xa0,",
          "30:             ...uint8Array.slice(insertIndex),",
          "31:           ]);",
          "32:           return textDecoder.decode(utf8EncodedCharacter);",
          "33:         } catch (_) {",
          "34:           return null;",
          "35:         }",
          "36:       })",
          "37:       .filter((x) => x?.length === 1),",
          "38:   ],",
          "39:   (t, [baseString, insertIndex], testCharacter) => {",
          "40:     const testStr =",
          "41:       baseString.substring(0, insertIndex) +",
          "42:       testCharacter +",
          "43:       baseString.substring(insertIndex);",
          "45:     const escapeFn = unix.getEscapeFunction(constants.binCsh);",
          "46:     const result = escapeFn(testStr, {",
          "47:       interpolation: true,",
          "48:       quoted: false,",
          "49:     });",
          "50:     t.assert(result.includes(`'${testCharacter}'`));",
          "51:   }",
          "52: );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15c805b3e3d7e6598851649df4e794585a7a4fa1",
      "candidate_info": {
        "commit_hash": "15c805b3e3d7e6598851649df4e794585a7a4fa1",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/15c805b3e3d7e6598851649df4e794585a7a4fa1",
        "files": [
          "test/fuzz/exec-file.test.cjs",
          "test/fuzz/exec.test.cjs",
          "test/fuzz/fork.test.cjs",
          "test/fuzz/spawn.test.cjs"
        ],
        "message": "Update fuzz targets (#697)\n\n* Get fuzz shell once per fuzz target\n\n* Handle errors explicitly in fuzz targets\n\n* Extract argument escaping/quoting out of invocation\n\nShould make for easier overall reading and aligns all fuzz targets with\nthe style of `exec.test.cjs`.\n\n* Test both sync and callback versions of explicitly\n\nSince, per [1], it's not actually guaranteed these work the same.\n\n* Remove multiple argument versions of checks\n\nI do not believe these currently provide significant value. They don't\nseem to test anything special about multiple arguments. Plus the method\nby which these convert the buffer into multiple args leaves a lot to be\ndesired. An upside is that fuzzing should become more efficient as less\ncycles are wasted on testing something with little to no value.\n\n--\n1. https://github.com/nodejs/node/issues/43333",
        "before_after_code_files": [
          "test/fuzz/exec-file.test.cjs||test/fuzz/exec-file.test.cjs",
          "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs",
          "test/fuzz/fork.test.cjs||test/fuzz/fork.test.cjs",
          "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs"
          ],
          "candidate": [
            "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs"
          ]
        }
      },
      "candidate_diff": {
        "test/fuzz/exec-file.test.cjs||test/fuzz/exec-file.test.cjs": [
          "File: test/fuzz/exec-file.test.cjs -> test/fuzz/exec-file.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const assert = require(\"node:assert\");",
          "10: const common = require(\"./_common.cjs\");",
          "12: const shescape = require(\"../../index.cjs\");",
          "16:   const argInfo = { arg, shell, quoted: Boolean(shell) };",
          "17:   const execFileOptions = { encoding: \"utf8\", shell };",
          "19:   const preparedArg = common.prepareArg(argInfo, !Boolean(shell));",
          "32: }",
          "37:   const execFileOptions = { encoding: \"utf8\", shell };",
          "57:   const result = stdout;",
          "67:   assert.strictEqual(result, expected);",
          "68: }",
          "71:   const arg = buf.toString();",
          "76: }",
          "78: module.exports = {",
          "",
          "[Removed Lines]",
          "8: const { execFileSync } = require(\"node:child_process\");",
          "14: function check(arg) {",
          "15:   const shell = common.getFuzzShell();",
          "21:   const stdout = execFileSync(",
          "22:     \"node\",",
          "23:     execFileOptions.shell",
          "24:       ? shescape.quoteAll([common.ECHO_SCRIPT, preparedArg], execFileOptions)",
          "25:       : shescape.escapeAll([common.ECHO_SCRIPT, preparedArg], execFileOptions),",
          "26:     execFileOptions",
          "27:   );",
          "29:   const result = stdout;",
          "30:   const expected = common.getExpectedOutput(argInfo);",
          "31:   assert.strictEqual(result, expected);",
          "34: function checkMultipleArgs(args) {",
          "35:   const shell = common.getFuzzShell();",
          "36:   const argInfo = { shell, quoted: Boolean(shell) };",
          "39:   const preparedArgs = args.map((arg) =>",
          "40:     common.prepareArg({ ...argInfo, arg }, !Boolean(shell))",
          "41:   );",
          "43:   const stdout = execFileSync(",
          "44:     \"node\",",
          "45:     execFileOptions.shell",
          "46:       ? shescape.quoteAll(",
          "47:           [common.ECHO_SCRIPT, ...preparedArgs],",
          "48:           execFileOptions",
          "49:         )",
          "50:       : shescape.escapeAll(",
          "51:           [common.ECHO_SCRIPT, ...preparedArgs],",
          "52:           execFileOptions",
          "53:         ),",
          "54:     execFileOptions",
          "55:   );",
          "58:   const expected = common.getExpectedOutput({",
          "59:     ...argInfo,",
          "60:     arg: (common.isShellPowerShell(shell)",
          "61:       ? args.filter(",
          "62:           (arg) => arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\").length !== 0",
          "63:         )",
          "64:       : args",
          "65:     ).join(\" \"),",
          "66:   });",
          "70: function fuzz(buf) {",
          "72:   const args = arg.split(/[\\n\\r]+/u);",
          "74:   check(arg);",
          "75:   checkMultipleArgs(args);",
          "",
          "[Added Lines]",
          "8: const { execFile, execFileSync } = require(\"node:child_process\");",
          "14: function check({ arg, shell }) {",
          "19:   const safeArg = execFileOptions.shell",
          "20:     ? shescape.quote(preparedArg, execFileOptions)",
          "21:     : shescape.escape(preparedArg, execFileOptions);",
          "23:   return new Promise((resolve, reject) => {",
          "24:     execFile(",
          "25:       \"node\",",
          "26:       [common.ECHO_SCRIPT, safeArg],",
          "27:       execFileOptions,",
          "28:       (error, stdout) => {",
          "29:         if (error) {",
          "30:           reject(`an unexpected error occurred: ${error}`);",
          "31:         } else {",
          "32:           const result = stdout;",
          "33:           const expected = common.getExpectedOutput(argInfo);",
          "34:           try {",
          "35:             assert.strictEqual(result, expected);",
          "36:             resolve();",
          "37:           } catch (e) {",
          "38:             reject(e);",
          "39:           }",
          "40:         }",
          "41:       }",
          "42:     );",
          "43:   });",
          "46: function checkSync({ arg, shell }) {",
          "47:   const argInfo = { arg, shell, quoted: Boolean(shell) };",
          "50:   const preparedArg = common.prepareArg(argInfo, !Boolean(shell));",
          "51:   const safeArg = execFileOptions.shell",
          "52:     ? shescape.quote(preparedArg, execFileOptions)",
          "53:     : shescape.escape(preparedArg, execFileOptions);",
          "55:   let stdout;",
          "56:   try {",
          "57:     stdout = execFileSync(",
          "58:       \"node\",",
          "59:       [common.ECHO_SCRIPT, safeArg],",
          "60:       execFileOptions",
          "61:     );",
          "62:   } catch (error) {",
          "63:     assert.fail(`an unexpected error occurred: ${error}`);",
          "64:   }",
          "67:   const expected = common.getExpectedOutput(argInfo);",
          "71: async function fuzz(buf) {",
          "73:   const shell = common.getFuzzShell();",
          "75:   try {",
          "76:     await check({ arg, shell });",
          "77:     checkSync({ arg, shell });",
          "78:   } catch (e) {",
          "79:     throw e;",
          "80:   }",
          "",
          "---------------"
        ],
        "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs": [
          "File: test/fuzz/exec.test.cjs -> test/fuzz/exec.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const assert = require(\"node:assert\");",
          "10: const common = require(\"./_common.cjs\");",
          "12: const shescape = require(\"../../index.cjs\");",
          "16:   const argInfo = { arg, shell, quoted: true };",
          "17:   const execOptions = { encoding: \"utf8\", shell };",
          "",
          "[Removed Lines]",
          "8: const { execSync } = require(\"node:child_process\");",
          "14: function check(arg) {",
          "15:   const shell = common.getFuzzShell();",
          "",
          "[Added Lines]",
          "8: const { exec, execSync } = require(\"node:child_process\");",
          "14: function check({ arg, shell }) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:     ...execOptions,",
          "22:   });",
          "29:   const result = stdout;",
          "30:   const expected = common.getExpectedOutput(argInfo);",
          "31:   assert.strictEqual(result, expected);",
          "32: }",
          "36:   const argInfo = { arg, shell, quoted: false };",
          "37:   const execOptions = { encoding: \"utf8\", shell };",
          "",
          "[Removed Lines]",
          "24:   const stdout = execSync(",
          "25:     `node ${common.ECHO_SCRIPT} ${quotedArg}`,",
          "26:     execOptions",
          "27:   );",
          "34: function checkUsingInterpolation(arg) {",
          "35:   const shell = common.getFuzzShell();",
          "",
          "[Added Lines]",
          "23:   return new Promise((resolve, reject) => {",
          "24:     exec(",
          "25:       `node ${common.ECHO_SCRIPT} ${quotedArg}`,",
          "26:       execOptions,",
          "27:       (error, stdout) => {",
          "28:         if (error) {",
          "29:           reject(`an unexpected error occurred: ${error}`);",
          "30:         } else {",
          "31:           const result = stdout;",
          "32:           const expected = common.getExpectedOutput(argInfo);",
          "33:           try {",
          "34:             assert.strictEqual(result, expected);",
          "35:             resolve();",
          "36:           } catch (e) {",
          "37:             reject(e);",
          "38:           }",
          "39:         }",
          "40:       }",
          "41:     );",
          "42:   });",
          "43: }",
          "45: function checkSync({ arg, shell }) {",
          "46:   const argInfo = { arg, shell, quoted: true };",
          "47:   const execOptions = { encoding: \"utf8\", shell };",
          "49:   const preparedArg = common.prepareArg(argInfo);",
          "50:   const quotedArg = shescape.quote(preparedArg, {",
          "51:     ...execOptions,",
          "52:   });",
          "54:   let stdout;",
          "55:   try {",
          "56:     stdout = execSync(`node ${common.ECHO_SCRIPT} ${quotedArg}`, execOptions);",
          "57:   } catch (error) {",
          "58:     assert.fail(`an unexpected error occurred: ${error}`);",
          "59:   }",
          "66: function checkUsingInterpolation({ arg, shell }) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:     interpolation: true,",
          "43:   });",
          "50:   const result = stdout;",
          "51:   const expected = common.getExpectedOutput(argInfo, true);",
          "52:   assert.strictEqual(result, expected);",
          "53: }",
          "56:   const arg = buf.toString();",
          "60: }",
          "62: module.exports = {",
          "",
          "[Removed Lines]",
          "45:   const stdout = execSync(",
          "46:     `node ${common.ECHO_SCRIPT} ${escapedArg}`,",
          "47:     execOptions",
          "48:   );",
          "55: function fuzz(buf) {",
          "58:   check(arg);",
          "59:   checkUsingInterpolation(arg);",
          "",
          "[Added Lines]",
          "76:   return new Promise((resolve, reject) => {",
          "77:     exec(",
          "78:       `node ${common.ECHO_SCRIPT} ${escapedArg}`,",
          "79:       execOptions,",
          "80:       (error, stdout) => {",
          "81:         if (error) {",
          "82:           reject(`an unexpected error occurred: ${error}`);",
          "83:         } else {",
          "84:           const result = stdout;",
          "85:           const expected = common.getExpectedOutput(argInfo, true);",
          "86:           try {",
          "87:             assert.strictEqual(result, expected);",
          "88:             resolve();",
          "89:           } catch (e) {",
          "90:             reject(e);",
          "91:           }",
          "92:         }",
          "93:       }",
          "94:     );",
          "95:   });",
          "96: }",
          "98: function checkUsingInterpolationSync({ arg, shell }) {",
          "99:   const argInfo = { arg, shell, quoted: false };",
          "100:   const execOptions = { encoding: \"utf8\", shell };",
          "102:   const preparedArg = common.prepareArg(argInfo);",
          "103:   const escapedArg = shescape.escape(preparedArg, {",
          "104:     ...execOptions,",
          "105:     interpolation: true,",
          "106:   });",
          "108:   let stdout;",
          "109:   try {",
          "110:     stdout = execSync(`node ${common.ECHO_SCRIPT} ${escapedArg}`, execOptions);",
          "111:   } catch (error) {",
          "112:     assert.fail(`an unexpected error occurred: ${error}`);",
          "113:   }",
          "120: async function fuzz(buf) {",
          "122:   const shell = common.getFuzzShell();",
          "124:   try {",
          "125:     await check({ arg, shell });",
          "126:     await checkUsingInterpolation({ arg, shell });",
          "127:     checkSync({ arg, shell });",
          "128:     checkUsingInterpolationSync({ arg, shell });",
          "129:   } catch (e) {",
          "130:     throw e;",
          "131:   }",
          "",
          "---------------"
        ],
        "test/fuzz/fork.test.cjs||test/fuzz/fork.test.cjs": [
          "File: test/fuzz/fork.test.cjs -> test/fuzz/fork.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   const forkOptions = { silent: true };",
          "18:   const preparedArg = common.prepareArg(argInfo, true);",
          "20:   return new Promise((resolve, reject) => {",
          "36:     });",
          "55:     echo.stdout.on(\"data\", (data) => {",
          "56:       const result = data.toString();",
          "61:       try {",
          "62:         assert.strictEqual(result, expected);",
          "63:         resolve();",
          "",
          "[Removed Lines]",
          "21:     const echo = fork(",
          "22:       common.ECHO_SCRIPT,",
          "23:       shescape.escapeAll([preparedArg]),",
          "24:       forkOptions",
          "25:     );",
          "27:     echo.stdout.on(\"data\", (data) => {",
          "28:       const result = data.toString();",
          "29:       const expected = common.getExpectedOutput(argInfo);",
          "30:       try {",
          "31:         assert.strictEqual(result, expected);",
          "32:         resolve();",
          "33:       } catch (e) {",
          "34:         reject(e);",
          "35:       }",
          "37:   });",
          "38: }",
          "40: function checkMultipleArgs(args) {",
          "41:   const argInfo = { quoted: false };",
          "42:   const forkOptions = { silent: true };",
          "44:   const preparedArgs = args.map((arg) =>",
          "45:     common.prepareArg({ ...argInfo, arg }, true)",
          "46:   );",
          "48:   return new Promise((resolve, reject) => {",
          "49:     const echo = fork(",
          "50:       common.ECHO_SCRIPT,",
          "51:       shescape.escapeAll(preparedArgs),",
          "52:       forkOptions",
          "53:     );",
          "57:       const expected = common.getExpectedOutput({",
          "58:         ...argInfo,",
          "59:         arg: args.join(\" \"),",
          "60:       });",
          "",
          "[Added Lines]",
          "19:   const safeArg = shescape.escape(preparedArg);",
          "22:     const echo = fork(common.ECHO_SCRIPT, [safeArg], forkOptions);",
          "24:     echo.on(\"error\", (error) => {",
          "25:       reject(`an unexpected error occurred: ${error}`);",
          "30:       const expected = common.getExpectedOutput(argInfo);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: async function fuzz(buf) {",
          "72:   const arg = buf.toString();",
          "75:   try {",
          "76:     await check(arg);",
          "78:   } catch (e) {",
          "79:     throw e;",
          "80:   }",
          "",
          "[Removed Lines]",
          "73:   const args = arg.split(/[\\n\\r]+/u);",
          "77:     await checkMultipleArgs(args);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs": [
          "File: test/fuzz/spawn.test.cjs -> test/fuzz/spawn.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const assert = require(\"node:assert\");",
          "10: const common = require(\"./_common.cjs\");",
          "12: const shescape = require(\"../../index.cjs\");",
          "16:   const argInfo = { arg, shell, quoted: Boolean(shell) };",
          "17:   const spawnOptions = { encoding: \"utf8\", shell };",
          "19:   const preparedArg = common.prepareArg(argInfo, !Boolean(shell));",
          "32: }",
          "37:   const spawnOptions = { encoding: \"utf8\", shell };",
          "62: }",
          "65:   const arg = buf.toString();",
          "70: }",
          "72: module.exports = {",
          "",
          "[Removed Lines]",
          "8: const { spawnSync } = require(\"node:child_process\");",
          "14: function check(arg) {",
          "15:   const shell = common.getFuzzShell();",
          "21:   const child = spawnSync(",
          "22:     \"node\",",
          "23:     spawnOptions.shell",
          "24:       ? shescape.quoteAll([common.ECHO_SCRIPT, preparedArg], spawnOptions)",
          "25:       : shescape.escapeAll([common.ECHO_SCRIPT, preparedArg], spawnOptions),",
          "26:     spawnOptions",
          "27:   );",
          "29:   const result = child.stdout;",
          "30:   const expected = common.getExpectedOutput(argInfo);",
          "31:   assert.strictEqual(result, expected);",
          "34: function checkMultipleArgs(args) {",
          "35:   const shell = common.getFuzzShell();",
          "36:   const argInfo = { shell, quoted: Boolean(shell) };",
          "39:   const preparedArgs = args.map((arg) =>",
          "40:     common.prepareArg({ ...argInfo, arg }, !Boolean(shell))",
          "41:   );",
          "43:   const child = spawnSync(",
          "44:     \"node\",",
          "45:     spawnOptions.shell",
          "46:       ? shescape.quoteAll([common.ECHO_SCRIPT, ...preparedArgs], spawnOptions)",
          "47:       : shescape.escapeAll([common.ECHO_SCRIPT, ...preparedArgs], spawnOptions),",
          "48:     spawnOptions",
          "49:   );",
          "51:   const result = child.stdout;",
          "52:   const expected = common.getExpectedOutput({",
          "53:     ...argInfo,",
          "54:     arg: (common.isShellPowerShell(shell)",
          "55:       ? args.filter(",
          "56:           (arg) => arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\").length !== 0",
          "57:         )",
          "58:       : args",
          "59:     ).join(\" \"),",
          "60:   });",
          "61:   assert.strictEqual(result, expected);",
          "64: function fuzz(buf) {",
          "66:   const args = arg.split(/[\\n\\r]+/u);",
          "68:   check(arg);",
          "69:   checkMultipleArgs(args);",
          "",
          "[Added Lines]",
          "8: const { spawn, spawnSync } = require(\"node:child_process\");",
          "14: function check({ arg, shell }) {",
          "19:   const safeArg = spawnOptions.shell",
          "20:     ? shescape.quote(preparedArg, spawnOptions)",
          "21:     : shescape.escape(preparedArg, spawnOptions);",
          "23:   return new Promise((resolve, reject) => {",
          "24:     const child = spawn(\"node\", [common.ECHO_SCRIPT, safeArg], spawnOptions);",
          "26:     child.on(\"error\", (error) => {",
          "27:       reject(`an unexpected error occurred: ${error}`);",
          "28:     });",
          "30:     child.stdout.on(\"data\", (data) => {",
          "31:       const result = data.toString();",
          "32:       const expected = common.getExpectedOutput(argInfo);",
          "33:       try {",
          "34:         assert.strictEqual(result, expected);",
          "35:         resolve();",
          "36:       } catch (e) {",
          "37:         reject(e);",
          "38:       }",
          "39:     });",
          "40:   });",
          "43: function checkSync({ arg, shell }) {",
          "44:   const argInfo = { arg, shell, quoted: Boolean(shell) };",
          "47:   const preparedArg = common.prepareArg(argInfo, !Boolean(shell));",
          "48:   const safeArg = spawnOptions.shell",
          "49:     ? shescape.quote(preparedArg, spawnOptions)",
          "50:     : shescape.escape(preparedArg, spawnOptions);",
          "52:   const child = spawnSync(\"node\", [common.ECHO_SCRIPT, safeArg], spawnOptions);",
          "54:   if (child.error) {",
          "55:     assert.fail(`an unexpected error occurred: ${child.error}`);",
          "56:   } else {",
          "57:     const result = child.stdout;",
          "58:     const expected = common.getExpectedOutput(argInfo);",
          "59:     assert.strictEqual(result, expected);",
          "60:   }",
          "63: async function fuzz(buf) {",
          "65:   const shell = common.getFuzzShell();",
          "67:   try {",
          "68:     await check({ arg, shell });",
          "69:     checkSync({ arg, shell });",
          "70:   } catch (e) {",
          "71:     throw e;",
          "72:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33203c139aa57b2c9f5d6c07b35f7389b01bbbd9",
      "candidate_info": {
        "commit_hash": "33203c139aa57b2c9f5d6c07b35f7389b01bbbd9",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/33203c139aa57b2c9f5d6c07b35f7389b01bbbd9",
        "files": [
          ".eslintrc.yml",
          "CHANGELOG.md",
          "package-lock.json",
          "package.json",
          "src/unix.js",
          "src/win.js"
        ],
        "message": "Lint for & remove side-effects (#408)\n\n* Add `eslint-plugin-top` to detect side effects \n\nAdd the eslint-plugin-top (scoped to my personal account) ESLint plugin\nto lint for top-level side effects in source code (we're not interested\nin scripts and tests with these rules).\n\n* Avoid side effects in `unix.js` and `win.js`\n\nBy replacing the `Map`ping from shell to escape/quote function by a\nsimple switch statement.\n\n* Update CHANGELOG",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "src/win.js||src/win.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:   return `'${arg}'`;",
          "129: }",
          "",
          "[Removed Lines]",
          "138: const escapeFunctionsByShell = new Map([",
          "139:   [binBash, escapeArgBash],",
          "140:   [binDash, escapeArgDash],",
          "141:   [binZsh, escapeArgZsh],",
          "142: ]);",
          "151: const quoteFunctionsByShell = new Map([",
          "152:   [binBash, quoteArg],",
          "153:   [binDash, quoteArg],",
          "154:   [binZsh, quoteArg],",
          "155: ]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185: export function getEscapeFunction(shellName) {",
          "187: }",
          "",
          "[Removed Lines]",
          "186:   return escapeFunctionsByShell.get(shellName) || null;",
          "",
          "[Added Lines]",
          "160:   switch (shellName) {",
          "161:     case binBash:",
          "162:       return escapeArgBash;",
          "163:     case binDash:",
          "164:       return escapeArgDash;",
          "165:     case binZsh:",
          "166:       return escapeArgZsh;",
          "167:     default:",
          "168:       return null;",
          "169:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195: export function getQuoteFunction(shellName) {",
          "197: }",
          "",
          "[Removed Lines]",
          "196:   return quoteFunctionsByShell.get(shellName) || null;",
          "",
          "[Added Lines]",
          "179:   switch (shellName) {",
          "180:     case binBash:",
          "181:     case binDash:",
          "182:     case binZsh:",
          "183:       return quoteArg;",
          "184:     default:",
          "185:       return null;",
          "186:   }",
          "",
          "---------------"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   return `\"${arg}\"`;",
          "89: }",
          "",
          "[Removed Lines]",
          "98: const escapeFunctionsByShell = new Map([",
          "99:   [binCmd, escapeArgCmd],",
          "100:   [binPowerShell, escapeArgPowerShell],",
          "101: ]);",
          "110: const quoteFunctionsByShell = new Map([",
          "111:   [binCmd, quoteArg],",
          "112:   [binPowerShell, quoteArg],",
          "113: ]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150: export function getEscapeFunction(shellName) {",
          "152: }",
          "",
          "[Removed Lines]",
          "151:   return escapeFunctionsByShell.get(shellName) || null;",
          "",
          "[Added Lines]",
          "127:   switch (shellName) {",
          "128:     case binCmd:",
          "129:       return escapeArgCmd;",
          "130:     case binPowerShell:",
          "131:       return escapeArgPowerShell;",
          "132:     default:",
          "133:       return null;",
          "134:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160: export function getQuoteFunction(shellName) {",
          "162: }",
          "",
          "[Removed Lines]",
          "161:   return quoteFunctionsByShell.get(shellName) || null;",
          "",
          "[Added Lines]",
          "144:   switch (shellName) {",
          "145:     case binCmd:",
          "146:     case binPowerShell:",
          "147:       return quoteArg;",
          "148:     default:",
          "149:       return null;",
          "150:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}