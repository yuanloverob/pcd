{
  "cve_id": "CVE-2020-36326",
  "cve_desc": "PHPMailer 6.1.8 through 6.4.0 allows object injection through Phar Deserialization via addAttachment with a UNC pathname. NOTE: this is similar to CVE-2018-19296, but arose because 6.1.8 fixed a functionality problem in which UNC pathnames were always considered unreadable by PHPMailer, even in safe contexts. As an unintended side effect, this fix eliminated the code that blocked addAttachment exploitation.",
  "repo": "PHPMailer/PHPMailer",
  "patch_hash": "e2e07a355ee8ff36aba21d0242c5950c56e4c6f9",
  "patch_info": {
    "commit_hash": "e2e07a355ee8ff36aba21d0242c5950c56e4c6f9",
    "repo": "PHPMailer/PHPMailer",
    "commit_url": "https://github.com/PHPMailer/PHPMailer/commit/e2e07a355ee8ff36aba21d0242c5950c56e4c6f9",
    "files": [
      "src/PHPMailer.php",
      "test/PHPMailerTest.php"
    ],
    "message": "Proposed fix for #2069",
    "before_after_code_files": [
      "src/PHPMailer.php||src/PHPMailer.php",
      "test/PHPMailerTest.php||test/PHPMailerTest.php"
    ]
  },
  "patch_diff": {
    "src/PHPMailer.php||src/PHPMailer.php": [
      "File: src/PHPMailer.php -> src/PHPMailer.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1753:         return !preg_match('#^[a-z]+://#i', $path);",
      "1754:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1763:     protected static function fileIsAccessible($path)",
      "1764:     {",
      "1765:         $readable = file_exists($path);",
      "1767:         if (strpos($path, '\\\\\\\\') !== 0) {",
      "1768:             $readable = $readable && is_readable($path);",
      "1769:         }",
      "1770:         return static::isPermittedPath($path) && $readable;",
      "1771:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2142:         if ('en' !== $langcode) {",
      "2145:                 $foundlang = false;",
      "2146:             } else {",
      "",
      "[Removed Lines]",
      "2144:             if (!static::isPermittedPath($lang_file) || !file_exists($lang_file)) {",
      "",
      "[Added Lines]",
      "2161:             if (!static::fileIsAccessible($lang_file)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2970:         $disposition = 'attachment'",
      "2971:     ) {",
      "2972:         try {",
      "2974:                 throw new Exception($this->lang('file_access') . $path, self::STOP_CONTINUE);",
      "2975:             }",
      "",
      "[Removed Lines]",
      "2973:             if (!static::isPermittedPath($path) || !@is_file($path) || !is_readable($path)) {",
      "",
      "[Added Lines]",
      "2990:             if (!static::fileIsAccessible($path)) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3144:     protected function encodeFile($path, $encoding = self::ENCODING_BASE64)",
      "3145:     {",
      "3146:         try {",
      "3148:                 throw new Exception($this->lang('file_open') . $path, self::STOP_CONTINUE);",
      "3149:             }",
      "3150:             $file_buffer = file_get_contents($path);",
      "",
      "[Removed Lines]",
      "3147:             if (!static::isPermittedPath($path) || !file_exists($path) || !is_readable($path)) {",
      "",
      "[Added Lines]",
      "3164:             if (!static::fileIsAccessible($path)) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3530:         $disposition = 'inline'",
      "3531:     ) {",
      "3532:         try {",
      "3534:                 throw new Exception($this->lang('file_access') . $path, self::STOP_CONTINUE);",
      "3535:             }",
      "",
      "[Removed Lines]",
      "3533:             if (!static::isPermittedPath($path) || !@is_file($path) || !is_readable($path)) {",
      "",
      "[Added Lines]",
      "3550:             if (!static::fileIsAccessible($path)) {",
      "",
      "---------------"
    ],
    "test/PHPMailerTest.php||test/PHPMailerTest.php": [
      "File: test/PHPMailerTest.php -> test/PHPMailerTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1476:             return;",
      "1477:         }",
      "1479:         $this->buildBody();",
      "1480:         self::assertTrue($this->Mail->send(), $this->Mail->ErrorInfo);",
      "1481:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1480:         self::assertFalse($this->Mail->addAttachment('\\\\\\\\nowhere\\nothing'));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bc51d1f6070e2a7bddbe064bf78448a8af146f9b",
      "candidate_info": {
        "commit_hash": "bc51d1f6070e2a7bddbe064bf78448a8af146f9b",
        "repo": "PHPMailer/PHPMailer",
        "commit_url": "https://github.com/PHPMailer/PHPMailer/commit/bc51d1f6070e2a7bddbe064bf78448a8af146f9b",
        "files": [
          "test/PHPMailerTest.php"
        ],
        "message": "Add not-strictly-necessary backslash to avoid ambiguity",
        "before_after_code_files": [
          "test/PHPMailerTest.php||test/PHPMailerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/PHPMailerTest.php||test/PHPMailerTest.php"
          ],
          "candidate": [
            "test/PHPMailerTest.php||test/PHPMailerTest.php"
          ]
        }
      },
      "candidate_diff": {
        "test/PHPMailerTest.php||test/PHPMailerTest.php": [
          "File: test/PHPMailerTest.php -> test/PHPMailerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1493:         }",
          "1498:         $this->buildBody();",
          "1499:         self::assertTrue($this->Mail->send(), $this->Mail->ErrorInfo);",
          "",
          "[Removed Lines]",
          "1496:         self::assertFalse($this->Mail->addAttachment('\\\\\\\\nowhere\\nothing'));",
          "",
          "[Added Lines]",
          "1496:         self::assertFalse($this->Mail->addAttachment('\\\\\\\\nowhere\\\\nothing'));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f24617b0c0ad2c532fcf11de00b0c7eb4df5968",
      "candidate_info": {
        "commit_hash": "0f24617b0c0ad2c532fcf11de00b0c7eb4df5968",
        "repo": "PHPMailer/PHPMailer",
        "commit_url": "https://github.com/PHPMailer/PHPMailer/commit/0f24617b0c0ad2c532fcf11de00b0c7eb4df5968",
        "files": [
          "README.md",
          "examples/callback.phps",
          "examples/extending.phps",
          "examples/gmail.phps",
          "examples/gmail_xoauth.phps",
          "examples/mailing_list.phps",
          "examples/pop_before_smtp.phps",
          "examples/send_file_upload.phps",
          "examples/send_multiple_file_upload.phps",
          "examples/sendmail.phps",
          "examples/smtp.phps",
          "examples/smtp_low_memory.phps",
          "examples/smtp_no_auth.phps",
          "examples/ssl_options.phps",
          "get_oauth_token.php",
          "src/OAuth.php",
          "src/PHPMailer.php",
          "src/POP3.php",
          "src/SMTP.php",
          "test/PHPMailerTest.php"
        ],
        "message": "Consistent comment style",
        "before_after_code_files": [
          "examples/callback.phps||examples/callback.phps",
          "examples/extending.phps||examples/extending.phps",
          "examples/gmail.phps||examples/gmail.phps",
          "examples/gmail_xoauth.phps||examples/gmail_xoauth.phps",
          "examples/mailing_list.phps||examples/mailing_list.phps",
          "examples/pop_before_smtp.phps||examples/pop_before_smtp.phps",
          "examples/send_file_upload.phps||examples/send_file_upload.phps",
          "examples/send_multiple_file_upload.phps||examples/send_multiple_file_upload.phps",
          "examples/sendmail.phps||examples/sendmail.phps",
          "examples/smtp.phps||examples/smtp.phps",
          "examples/smtp_low_memory.phps||examples/smtp_low_memory.phps",
          "examples/smtp_no_auth.phps||examples/smtp_no_auth.phps",
          "examples/ssl_options.phps||examples/ssl_options.phps",
          "get_oauth_token.php||get_oauth_token.php",
          "src/OAuth.php||src/OAuth.php",
          "src/PHPMailer.php||src/PHPMailer.php",
          "src/POP3.php||src/POP3.php",
          "src/SMTP.php||src/SMTP.php",
          "test/PHPMailerTest.php||test/PHPMailerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/PHPMailer.php||src/PHPMailer.php",
            "test/PHPMailerTest.php||test/PHPMailerTest.php"
          ],
          "candidate": [
            "src/PHPMailer.php||src/PHPMailer.php",
            "test/PHPMailerTest.php||test/PHPMailerTest.php"
          ]
        }
      },
      "candidate_diff": {
        "examples/callback.phps||examples/callback.phps": [
          "File: examples/callback.phps -> examples/callback.phps",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     $mail->addCC('john@example.com', 'John Doe');",
          "53:     $mail->Subject = 'PHPMailer Test Subject';",
          "54:     $mail->msgHTML(file_get_contents('../examples/contents.html'));",
          "56:     $mail->AltBody = 'To view the message, please use an HTML compatible email viewer!';",
          "58:     $mail->action_function = 'callbackAction';",
          "59:     $mail->send();",
          "60: } catch (Exception $e) {",
          "",
          "[Removed Lines]",
          "57:     $mail->addAttachment('images/phpmailer_mini.png'); // attachment",
          "",
          "[Added Lines]",
          "57:     $mail->addAttachment('images/phpmailer_mini.png');",
          "",
          "---------------"
        ],
        "examples/extending.phps||examples/extending.phps": [
          "File: examples/extending.phps -> examples/extending.phps",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: try {",
          "63:     $mail = new myPHPMailer(true, '<strong>This is the message body</strong>');",
          "65:     $mail->addAddress('jane@example.com', 'Jane User');",
          "66:     $mail->Subject = 'Here is the subject';",
          "67:     $mail->addAttachment(__FILE__, 'myPHPMailer.php');",
          "69: } catch (Exception $e) {",
          "71:     echo 'Caught a ' . get_class($e) . ': ' . $e->getMessage();",
          "",
          "[Removed Lines]",
          "68:     $mail->send(); //no need to check for errors - the exception handler will do it",
          "",
          "[Added Lines]",
          "68:     $mail->send(); //No need to check for errors - the exception handler will do it",
          "",
          "---------------"
        ],
        "examples/gmail.phps||examples/gmail.phps": [
          "File: examples/gmail.phps -> examples/gmail.phps"
        ],
        "examples/gmail_xoauth.phps||examples/gmail_xoauth.phps": [
          "File: examples/gmail_xoauth.phps -> examples/gmail_xoauth.phps"
        ],
        "examples/mailing_list.phps||examples/mailing_list.phps": [
          "File: examples/mailing_list.phps -> examples/mailing_list.phps",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: $mail->isSMTP();",
          "23: $mail->Host = 'smtp.example.com';",
          "24: $mail->SMTPAuth = true;",
          "26: $mail->Port = 25;",
          "27: $mail->Username = 'yourname@example.com';",
          "28: $mail->Password = 'yourpassword';",
          "",
          "[Removed Lines]",
          "25: $mail->SMTPKeepAlive = true; // SMTP connection will not close after each email sent, reduces SMTP overhead",
          "",
          "[Added Lines]",
          "25: $mail->SMTPKeepAlive = true; //SMTP connection will not close after each email sent, reduces SMTP overhead",
          "",
          "---------------"
        ],
        "examples/pop_before_smtp.phps||examples/pop_before_smtp.phps": [
          "File: examples/pop_before_smtp.phps -> examples/pop_before_smtp.phps"
        ],
        "examples/send_file_upload.phps||examples/send_file_upload.phps": [
          "File: examples/send_file_upload.phps -> examples/send_file_upload.phps"
        ],
        "examples/send_multiple_file_upload.phps||examples/send_multiple_file_upload.phps": [
          "File: examples/send_multiple_file_upload.phps -> examples/send_multiple_file_upload.phps"
        ],
        "examples/sendmail.phps||examples/sendmail.phps": [
          "File: examples/sendmail.phps -> examples/sendmail.phps"
        ],
        "examples/smtp.phps||examples/smtp.phps": [
          "File: examples/smtp.phps -> examples/smtp.phps"
        ],
        "examples/smtp_low_memory.phps||examples/smtp_low_memory.phps": [
          "File: examples/smtp_low_memory.phps -> examples/smtp_low_memory.phps"
        ],
        "examples/smtp_no_auth.phps||examples/smtp_no_auth.phps": [
          "File: examples/smtp_no_auth.phps -> examples/smtp_no_auth.phps"
        ],
        "examples/ssl_options.phps||examples/ssl_options.phps": [
          "File: examples/ssl_options.phps -> examples/ssl_options.phps"
        ],
        "get_oauth_token.php||get_oauth_token.php": [
          "File: get_oauth_token.php -> get_oauth_token.php"
        ],
        "src/OAuth.php||src/OAuth.php": [
          "File: src/OAuth.php -> src/OAuth.php"
        ],
        "src/PHPMailer.php||src/PHPMailer.php": [
          "File: src/PHPMailer.php -> src/PHPMailer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1508:         }",
          "1510:         try {",
          "1512:             $this->mailHeader = '';",
          "1515:             foreach (array_merge($this->RecipientsQueue, $this->ReplyToQueue) as $params) {",
          "1516:                 $params[1] = $this->punyencodeAddress($params[1]);",
          "1517:                 call_user_func_array([$this, 'addAnAddress'], $params);",
          "",
          "[Removed Lines]",
          "1511:             $this->error_count = 0; // Reset errors",
          "",
          "[Added Lines]",
          "1511:             $this->error_count = 0; //Reset errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2045:             $tls = (static::ENCRYPTION_STARTTLS === $this->SMTPSecure);",
          "2046:             if ('ssl' === $hostinfo[1] || ('' === $hostinfo[1] && static::ENCRYPTION_SMTPS === $this->SMTPSecure)) {",
          "2047:                 $prefix = 'ssl://';",
          "2049:                 $secure = static::ENCRYPTION_SMTPS;",
          "2050:             } elseif ('tls' === $hostinfo[1]) {",
          "2051:                 $tls = true;",
          "2053:                 $secure = static::ENCRYPTION_STARTTLS;",
          "2054:             }",
          "",
          "[Removed Lines]",
          "2048:                 $tls = false; // Can't have SSL and TLS at the same time",
          "",
          "[Added Lines]",
          "2048:                 $tls = false; //Can't have SSL and TLS at the same time",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2196:         }",
          "2197:         $foundlang = true;",
          "2198:         $lang_file = $lang_path . 'phpmailer.lang-' . $langcode . '.php';",
          "2200:         if ('en' !== $langcode) {",
          "2202:             if (!static::fileIsAccessible($lang_file)) {",
          "2203:                 $foundlang = false;",
          "2204:             } else {",
          "2207:                 $foundlang = include $lang_file;",
          "2208:             }",
          "2209:         }",
          "2210:         $this->language = $PHPMAILER_LANG;",
          "2213:     }",
          "",
          "[Removed Lines]",
          "2212:         return (bool) $foundlang; // Returns false if language not found",
          "",
          "[Added Lines]",
          "2212:         return (bool) $foundlang; //Returns false if language not found",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2254:     public function addrFormat($addr)",
          "2255:     {",
          "2257:             return $this->secureHeader($addr[0]);",
          "2258:         }",
          "",
          "[Removed Lines]",
          "2256:         if (empty($addr[1])) { // No name provided",
          "",
          "[Added Lines]",
          "2256:         if (empty($addr[1])) { //No name provided",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3052:                 2 => $name,",
          "3053:                 3 => $encoding,",
          "3054:                 4 => $type,",
          "3056:                 6 => $disposition,",
          "3057:                 7 => $name,",
          "3058:             ];",
          "",
          "[Removed Lines]",
          "3055:                 5 => false, // isStringAttachment",
          "",
          "[Added Lines]",
          "3055:                 5 => false, //isStringAttachment",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3535:                 throw new Exception($this->lang('encoding') . $encoding);",
          "3536:             }",
          "3539:             $this->attachment[] = [",
          "3540:                 0 => $string,",
          "3541:                 1 => $filename,",
          "3542:                 2 => static::mb_pathinfo($filename, PATHINFO_BASENAME),",
          "3543:                 3 => $encoding,",
          "3544:                 4 => $type,",
          "3546:                 6 => $disposition,",
          "3547:                 7 => 0,",
          "3548:             ];",
          "",
          "[Removed Lines]",
          "3545:                 5 => true, // isStringAttachment",
          "",
          "[Added Lines]",
          "3545:                 5 => true, //isStringAttachment",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3607:                 $name = $filename;",
          "3608:             }",
          "3611:             $this->attachment[] = [",
          "3612:                 0 => $path,",
          "3613:                 1 => $filename,",
          "3614:                 2 => $name,",
          "3615:                 3 => $encoding,",
          "3616:                 4 => $type,",
          "3618:                 6 => $disposition,",
          "3619:                 7 => $cid,",
          "3620:             ];",
          "",
          "[Removed Lines]",
          "3617:                 5 => false, // isStringAttachment",
          "",
          "[Added Lines]",
          "3617:                 5 => false, //isStringAttachment",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3668:                 throw new Exception($this->lang('encoding') . $encoding);",
          "3669:             }",
          "3672:             $this->attachment[] = [",
          "3673:                 0 => $string,",
          "3674:                 1 => $name,",
          "3675:                 2 => $name,",
          "3676:                 3 => $encoding,",
          "3677:                 4 => $type,",
          "3679:                 6 => $disposition,",
          "3680:                 7 => $cid,",
          "3681:             ];",
          "",
          "[Removed Lines]",
          "3678:                 5 => true, // isStringAttachment",
          "",
          "[Added Lines]",
          "3678:                 5 => true, //isStringAttachment",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3974:     protected function lang($key)",
          "3975:     {",
          "3976:         if (count($this->language) < 1) {",
          "3978:         }",
          "3980:         if (array_key_exists($key, $this->language)) {",
          "3981:             if ('smtp_connect_failed' === $key) {",
          "3985:                 return $this->language[$key] . ' https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting';",
          "3986:             }",
          "",
          "[Removed Lines]",
          "3977:             $this->setLanguage(); // set the default language",
          "",
          "[Added Lines]",
          "3977:             $this->setLanguage(); //Set the default language",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4087:                     }",
          "4092:                     if (!$this->cidExists($cid)) {",
          "4093:                         $this->addStringEmbeddedImage(",
          "",
          "[Removed Lines]",
          "4090:                     $cid = substr(hash('sha256', $data), 0, 32) . '@phpmailer.0'; // RFC2392 S 2",
          "",
          "[Added Lines]",
          "4090:                     $cid = substr(hash('sha256', $data), 0, 32) . '@phpmailer.0'; //RFC2392 S 2",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4648:     public function DKIM_Add($headers_line, $subject, $body)",
          "4649:     {",
          "4653:         $DKIMtime = time();",
          "",
          "[Removed Lines]",
          "4650:         $DKIMsignatureType = 'rsa-sha256'; // Signature & hash algorithms",
          "4651:         $DKIMcanonicalization = 'relaxed/simple'; // Canonicalization methods of header & body",
          "4652:         $DKIMquery = 'dns/txt'; // Query method",
          "",
          "[Added Lines]",
          "4650:         $DKIMsignatureType = 'rsa-sha256'; //Signature & hash algorithms",
          "4651:         $DKIMcanonicalization = 'relaxed/simple'; //Canonicalization methods of header & body",
          "4652:         $DKIMquery = 'dns/txt'; //Query method",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4750:         $headerKeys = ' h=' . implode(':', $headersToSignKeys) . ';' . static::$LE;",
          "4751:         $headerValues = implode(static::$LE, $headersToSign);",
          "4752:         $body = $this->DKIM_BodyC($body);",
          "4754:         $ident = '';",
          "4755:         if ('' !== $this->DKIM_identity) {",
          "4756:             $ident = ' i=' . $this->DKIM_identity . ';' . static::$LE;",
          "",
          "[Removed Lines]",
          "4753:         $DKIMb64 = base64_encode(pack('H*', hash('sha256', $body))); // Base64 of packed binary SHA-256 hash of body",
          "",
          "[Added Lines]",
          "4754:         $DKIMb64 = base64_encode(pack('H*', hash('sha256', $body)));",
          "",
          "---------------"
        ],
        "src/POP3.php||src/POP3.php": [
          "File: src/POP3.php -> src/POP3.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:             $port = static::DEFAULT_PORT;",
          "257:         }",
          "260:         $errno = 0;",
          "261:         $errstr = '';",
          "262:         $this->pop_conn = fsockopen(",
          "267:             $tval",
          "270:         restore_error_handler();",
          "273:         if (false === $this->pop_conn) {",
          "275:             $this->setError(",
          "276:                 \"Failed to connect to server $host on port $port. errno: $errno; errstr: $errstr\"",
          "277:             );",
          "",
          "[Removed Lines]",
          "263:             $host, //  POP3 Host",
          "264:             $port, //  Port #",
          "265:             $errno, //  Error Number",
          "266:             $errstr, //  Error Message",
          "268:         ); //  Timeout (seconds)",
          "",
          "[Added Lines]",
          "263:             $host, //POP3 Host",
          "264:             $port, //Port #",
          "265:             $errno, //Error Number",
          "266:             $errstr, //Error Message",
          "268:         ); //Timeout (seconds)",
          "",
          "---------------"
        ],
        "src/SMTP.php||src/SMTP.php": [
          "File: src/SMTP.php -> src/SMTP.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:             return hash_hmac('md5', $data, $key);",
          "625:         }",
          "636:         if (strlen($key) > $bytelen) {",
          "637:             $key = pack('H*', md5($key));",
          "638:         }",
          "",
          "[Removed Lines]",
          "635:         $bytelen = 64; // byte length for md5",
          "",
          "[Added Lines]",
          "635:         $bytelen = 64; //byte length for md5",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "665:                 return false;",
          "666:             }",
          "669:         }",
          "671:         return false;",
          "",
          "[Removed Lines]",
          "668:             return true; // everything looks good",
          "",
          "[Added Lines]",
          "668:             return true; //everything looks good",
          "",
          "---------------"
        ],
        "test/PHPMailerTest.php||test/PHPMailerTest.php": [
          "File: test/PHPMailerTest.php -> test/PHPMailerTest.php"
        ]
      }
    },
    {
      "candidate_hash": "3635e97510190926ddc8137c31293f00534a9bba",
      "candidate_info": {
        "commit_hash": "3635e97510190926ddc8137c31293f00534a9bba",
        "repo": "PHPMailer/PHPMailer",
        "commit_url": "https://github.com/PHPMailer/PHPMailer/commit/3635e97510190926ddc8137c31293f00534a9bba",
        "files": [
          "src/PHPMailer.php"
        ],
        "message": "PHPMailer::setLanguage(): fix \"lang_country\" codes do not fall back to \"lang\"\n\nWhen the  `$langCode` is passed as \"language code - country code\" and no translation is found for the specified country variant, the localization would automatically fall back to English, even when there was a viable translation available in the \"parent\" language, i.e. just based on the _language code_.\n\nThis commit changes the logic in the `PHPMailer::setLanguage()` method for when a \"lang-country\" code is passed.\nIt will now try and find a \"lang-country\" file first, if not found, it will try to find a file for just the \"lang\" and only if that could also not be found, it will fall back to English.\n\nRelated to 2418 - observation 2\n\nIncludes using named subpatterns in the regex to make the regex self-documenting.\n\nIncludes removing a commented out line of code which is superseded anyway.",
        "before_after_code_files": [
          "src/PHPMailer.php||src/PHPMailer.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/PHPMailer.php||src/PHPMailer.php"
          ],
          "candidate": [
            "src/PHPMailer.php||src/PHPMailer.php"
          ]
        }
      },
      "candidate_diff": {
        "src/PHPMailer.php||src/PHPMailer.php": [
          "File: src/PHPMailer.php -> src/PHPMailer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2252:         $foundlang = true;",
          "2253:         $langcode  = strtolower($langcode);",
          "2255:             $foundlang = false;",
          "2256:             $langcode = 'en';",
          "2257:         }",
          "2261:         if ('en' !== $langcode) {",
          "2264:                 $foundlang = false;",
          "2265:             } else {",
          "2267:                 $lines = file($lang_file);",
          "2268:                 foreach ($lines as $line) {",
          "",
          "[Removed Lines]",
          "2254:         if (!preg_match('/^[a-z]{2}(?:_[a-z]{2})?$/', $langcode) && $langcode !== 'en') {",
          "2259:         $lang_file = $lang_path . 'phpmailer.lang-' . $langcode . '.php';",
          "2263:             if (!static::fileIsAccessible($lang_file)) {",
          "",
          "[Added Lines]",
          "2254:         if (!preg_match('/^(?P<lang>[a-z]{2})(?P<country>_[a-z]{2})?$/', $langcode, $matches) && $langcode !== 'en') {",
          "2261:             $langcodes = [];",
          "2262:             if (!empty($matches['country'])) {",
          "2263:                 $langcodes[] = $matches['lang'] . $matches['country'];",
          "2264:             }",
          "2265:             $langcodes[] = $matches['lang'];",
          "2268:             $foundFile = false;",
          "2269:             foreach ($langcodes as $code) {",
          "2270:                 $lang_file = $lang_path . 'phpmailer.lang-' . $code . '.php';",
          "2271:                 if (static::fileIsAccessible($lang_file)) {",
          "2272:                     $foundFile = true;",
          "2273:                     break;",
          "2274:                 }",
          "2275:             }",
          "2277:             if ($foundFile === false) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26f2848d3bbb57add5f34a467a1e3b2f9ce5cd2a",
      "candidate_info": {
        "commit_hash": "26f2848d3bbb57add5f34a467a1e3b2f9ce5cd2a",
        "repo": "PHPMailer/PHPMailer",
        "commit_url": "https://github.com/PHPMailer/PHPMailer/commit/26f2848d3bbb57add5f34a467a1e3b2f9ce5cd2a",
        "files": [
          "src/PHPMailer.php"
        ],
        "message": "Reorder path checks, fixes CVE-2020-36326",
        "before_after_code_files": [
          "src/PHPMailer.php||src/PHPMailer.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/PHPMailer.php||src/PHPMailer.php"
          ],
          "candidate": [
            "src/PHPMailer.php||src/PHPMailer.php"
          ]
        }
      },
      "candidate_diff": {
        "src/PHPMailer.php||src/PHPMailer.php": [
          "File: src/PHPMailer.php -> src/PHPMailer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1825:     protected static function fileIsAccessible($path)",
          "1826:     {",
          "1827:         $readable = file_exists($path);",
          "1829:         if (strpos($path, '\\\\\\\\') !== 0) {",
          "1830:             $readable = $readable && is_readable($path);",
          "1831:         }",
          "1833:     }",
          "",
          "[Removed Lines]",
          "1832:         return static::isPermittedPath($path) && $readable;",
          "",
          "[Added Lines]",
          "1827:         if (!static::isPermittedPath($path)) {",
          "1828:             return false;",
          "1829:         }",
          "1835:         return  $readable;",
          "",
          "---------------"
        ]
      }
    }
  ]
}