{
  "cve_id": "CVE-2022-31683",
  "cve_desc": "Concourse (7.x.y prior to 7.8.3 and 6.x.y prior to 6.7.9) contains an authorization bypass issue. A Concourse user can send a request with body including :team_name=team2 to bypass team scope check to gain access to certain resources belong to any other team.",
  "repo": "concourse/concourse",
  "patch_hash": "57e06711b0d861775a5a6bd078a34abeb0e2638e",
  "patch_info": {
    "commit_hash": "57e06711b0d861775a5a6bd078a34abeb0e2638e",
    "repo": "concourse/concourse",
    "commit_url": "https://github.com/concourse/concourse/commit/57e06711b0d861775a5a6bd078a34abeb0e2638e",
    "files": [
      "atc/api/auth/check_pipeline_access_handler.go",
      "atc/api/pipelineserver/reject_archived_handler_factory.go",
      "atc/api/pipelineserver/scoped_handler_factory.go",
      "atc/api/pipelineserver/scoped_handler_factory_test.go",
      "atc/api/policychecker/checker.go",
      "atc/api/policychecker/checker_test.go",
      "atc/api/team_scoped_handler_factory.go",
      "atc/api/teamserver/set.go"
    ],
    "message": "Merge pull request #8580 from concourse/fix-team-name-overwritten-7-8\n\nfix team_name overwritten bug",
    "before_after_code_files": [
      "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go",
      "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go",
      "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go",
      "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go",
      "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go",
      "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go",
      "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go",
      "atc/api/teamserver/set.go||atc/api/teamserver/set.go"
    ]
  },
  "patch_diff": {
    "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go": [
      "File: atc/api/auth/check_pipeline_access_handler.go -> atc/api/auth/check_pipeline_access_handler.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: }",
      "45: func (h checkPipelineAccessHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {",
      "48:  pipelineRef := atc.PipelineRef{Name: pipelineName}",
      "49:  var err error",
      "50:  pipelineRef.InstanceVars, err = atc.InstanceVarsFromQueryParams(r.URL.Query())",
      "",
      "[Removed Lines]",
      "46:  teamName := r.FormValue(\":team_name\")",
      "47:  pipelineName := r.FormValue(\":pipeline_name\")",
      "",
      "[Added Lines]",
      "46:  teamName := r.URL.Query().Get(\":team_name\")",
      "47:  pipelineName := r.URL.Query().Get(\":pipeline_name\")",
      "",
      "---------------"
    ],
    "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go": [
      "File: atc/api/pipelineserver/reject_archived_handler_factory.go -> atc/api/pipelineserver/reject_archived_handler_factory.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: }",
      "32: func (ra RejectArchivedHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {",
      "35:  pipelineRef := atc.PipelineRef{Name: pipelineName}",
      "36:  var err error",
      "37:  pipelineRef.InstanceVars, err = atc.InstanceVarsFromQueryParams(r.URL.Query())",
      "",
      "[Removed Lines]",
      "33:  teamName := r.FormValue(\":team_name\")",
      "34:  pipelineName := r.FormValue(\":pipeline_name\")",
      "",
      "[Added Lines]",
      "33:  teamName := r.URL.Query().Get(\":team_name\")",
      "34:  pipelineName := r.URL.Query().Get(\":pipeline_name\")",
      "",
      "---------------"
    ],
    "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go": [
      "File: atc/api/pipelineserver/scoped_handler_factory.go -> atc/api/pipelineserver/scoped_handler_factory.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: func (pdbh *ScopedHandlerFactory) HandlerFor(pipelineScopedHandler func(db.Pipeline) http.Handler) http.HandlerFunc {",
      "24:  return func(w http.ResponseWriter, r *http.Request) {",
      "27:   pipelineRef := atc.PipelineRef{Name: pipelineName}",
      "28:   var err error",
      "29:   pipelineRef.InstanceVars, err = atc.InstanceVarsFromQueryParams(r.URL.Query())",
      "",
      "[Removed Lines]",
      "25:   teamName := r.FormValue(\":team_name\")",
      "26:   pipelineName := r.FormValue(\":pipeline_name\")",
      "",
      "[Added Lines]",
      "25:   teamName := r.URL.Query().Get(\":team_name\")",
      "26:   pipelineName := r.URL.Query().Get(\":pipeline_name\")",
      "",
      "---------------"
    ],
    "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go": [
      "File: atc/api/pipelineserver/scoped_handler_factory_test.go -> atc/api/pipelineserver/scoped_handler_factory_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "5:  \"errors\"",
      "6:  \"net/http\"",
      "7:  \"net/http/httptest\"",
      "9:  \"github.com/concourse/concourse/atc\"",
      "10:  \"github.com/concourse/concourse/atc/api/auth\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8:  \"net/url\"",
      "9:  \"strings\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:     Expect(dbTeamFactory.FindTeamArgsForCall(0)).To(Equal(\"some-team\"))",
      "109:    })",
      "111:    Context(\"when the pipeline exists\", func() {",
      "112:     BeforeEach(func() {",
      "113:      fakePipeline.NameReturns(\"some-pipeline\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "113:    Context(\"when the request has team name in body with content-type application/x-www-form-urlencoded\", func() {",
      "114:     JustBeforeEach(func() {",
      "115:      body := url.Values{",
      "116:       \":team_name\": {\"some-other-team\"},",
      "117:      }",
      "119:      request, err := http.NewRequest(\"POST\", server.URL+\"?:team_name=some-team&:pipeline_name=some-pipeline\", strings.NewReader(body.Encode()))",
      "120:      Expect(err).NotTo(HaveOccurred())",
      "122:      request.Header.Add(\"Content-type\", \"application/x-www-form-urlencoded\")",
      "124:      response, err = new(http.Client).Do(request)",
      "125:      Expect(err).NotTo(HaveOccurred())",
      "126:     })",
      "128:     It(\"looks up the team by the team name in URL\", func() {",
      "129:      Expect(dbTeamFactory.FindTeamCallCount()).To(Equal(2))",
      "130:      Expect(dbTeamFactory.FindTeamArgsForCall(1)).To(Equal(\"some-team\"))",
      "132:     })",
      "133:    })",
      "",
      "---------------"
    ],
    "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go": [
      "File: atc/api/policychecker/checker.go -> atc/api/policychecker/checker.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:   return policy.PassedPolicyCheck(), nil",
      "46:  }",
      "49:  input := policy.PolicyCheckInput{",
      "50:   HttpMethod: req.Method,",
      "51:   Action:     action,",
      "",
      "[Removed Lines]",
      "48:  team := req.FormValue(\":team_name\")",
      "",
      "[Added Lines]",
      "48:  team := req.URL.Query().Get(\":team_name\")",
      "",
      "---------------"
    ],
    "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go": [
      "File: atc/api/policychecker/checker_test.go -> atc/api/policychecker/checker_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "152:    Context(\"when every is ok\", func() {",
      "153:     BeforeEach(func() {",
      "154:      fakeAccess.TeamRolesReturns(map[string][]string{",
      "156:      })",
      "157:      fakeAccess.ClaimsReturns(accessor.Claims{UserName: \"some-user\"})",
      "158:      body := bytes.NewBuffer([]byte(\"a: b\"))",
      "",
      "[Removed Lines]",
      "155:       \"some-team\": []string{\"some-role\"},",
      "",
      "[Added Lines]",
      "155:       \"some-team\": {\"some-role\"},",
      "",
      "---------------"
    ],
    "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go": [
      "File: atc/api/team_scoped_handler_factory.go -> atc/api/team_scoped_handler_factory.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:  return func(w http.ResponseWriter, r *http.Request) {",
      "29:   logger := f.logger.Session(\"team-scoped-handler\")",
      "32:   team, found, err := f.teamFactory.FindTeam(teamName)",
      "33:   if err != nil {",
      "34:    logger.Error(\"failed-to-find-team-in-db\", err)",
      "",
      "[Removed Lines]",
      "31:   teamName := r.FormValue(\":team_name\")",
      "",
      "[Added Lines]",
      "31:   teamName := r.URL.Query().Get(\":team_name\")",
      "",
      "---------------"
    ],
    "atc/api/teamserver/set.go||atc/api/teamserver/set.go": [
      "File: atc/api/teamserver/set.go -> atc/api/teamserver/set.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:  acc := accessor.GetAccessor(r)",
      "29:  var atcTeam atc.Team",
      "30:  err := json.NewDecoder(r.Body).Decode(&atcTeam)",
      "",
      "[Removed Lines]",
      "27:  teamName := r.FormValue(\":team_name\")",
      "",
      "[Added Lines]",
      "27:  teamName := r.URL.Query().Get(\":team_name\")",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a57d451a31f64a0399835870f614fc9e387ae9e9",
      "candidate_info": {
        "commit_hash": "a57d451a31f64a0399835870f614fc9e387ae9e9",
        "repo": "concourse/concourse",
        "commit_url": "https://github.com/concourse/concourse/commit/a57d451a31f64a0399835870f614fc9e387ae9e9",
        "files": [
          "atc/api/auth/check_pipeline_access_handler.go",
          "atc/api/pipelineserver/reject_archived_handler_factory.go",
          "atc/api/pipelineserver/scoped_handler_factory.go",
          "atc/api/pipelineserver/scoped_handler_factory_test.go",
          "atc/api/policychecker/checker.go",
          "atc/api/policychecker/checker_test.go",
          "atc/api/team_scoped_handler_factory.go",
          "atc/api/teamserver/set.go"
        ],
        "message": "fix team_name overwritten bug\n\nSigned-off-by: Rui Yang <ruiya@vmware.com>",
        "before_after_code_files": [
          "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go",
          "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go",
          "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go",
          "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go",
          "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go",
          "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go",
          "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go",
          "atc/api/teamserver/set.go||atc/api/teamserver/set.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/concourse/concourse/pull/8580"
        ],
        "olp_code_files": {
          "patch": [
            "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go",
            "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go",
            "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go",
            "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go",
            "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go",
            "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go",
            "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go",
            "atc/api/teamserver/set.go||atc/api/teamserver/set.go"
          ],
          "candidate": [
            "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go",
            "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go",
            "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go",
            "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go",
            "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go",
            "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go",
            "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go",
            "atc/api/teamserver/set.go||atc/api/teamserver/set.go"
          ]
        }
      },
      "candidate_diff": {
        "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go": [
          "File: atc/api/auth/check_pipeline_access_handler.go -> atc/api/auth/check_pipeline_access_handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: }",
          "45: func (h checkPipelineAccessHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {",
          "48:  pipelineRef := atc.PipelineRef{Name: pipelineName}",
          "49:  var err error",
          "50:  pipelineRef.InstanceVars, err = atc.InstanceVarsFromQueryParams(r.URL.Query())",
          "",
          "[Removed Lines]",
          "46:  teamName := r.FormValue(\":team_name\")",
          "47:  pipelineName := r.FormValue(\":pipeline_name\")",
          "",
          "[Added Lines]",
          "46:  teamName := r.URL.Query().Get(\":team_name\")",
          "47:  pipelineName := r.URL.Query().Get(\":pipeline_name\")",
          "",
          "---------------"
        ],
        "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go": [
          "File: atc/api/pipelineserver/reject_archived_handler_factory.go -> atc/api/pipelineserver/reject_archived_handler_factory.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: }",
          "32: func (ra RejectArchivedHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {",
          "35:  pipelineRef := atc.PipelineRef{Name: pipelineName}",
          "36:  var err error",
          "37:  pipelineRef.InstanceVars, err = atc.InstanceVarsFromQueryParams(r.URL.Query())",
          "",
          "[Removed Lines]",
          "33:  teamName := r.FormValue(\":team_name\")",
          "34:  pipelineName := r.FormValue(\":pipeline_name\")",
          "",
          "[Added Lines]",
          "33:  teamName := r.URL.Query().Get(\":team_name\")",
          "34:  pipelineName := r.URL.Query().Get(\":pipeline_name\")",
          "",
          "---------------"
        ],
        "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go": [
          "File: atc/api/pipelineserver/scoped_handler_factory.go -> atc/api/pipelineserver/scoped_handler_factory.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: func (pdbh *ScopedHandlerFactory) HandlerFor(pipelineScopedHandler func(db.Pipeline) http.Handler) http.HandlerFunc {",
          "24:  return func(w http.ResponseWriter, r *http.Request) {",
          "27:   pipelineRef := atc.PipelineRef{Name: pipelineName}",
          "28:   var err error",
          "29:   pipelineRef.InstanceVars, err = atc.InstanceVarsFromQueryParams(r.URL.Query())",
          "",
          "[Removed Lines]",
          "25:   teamName := r.FormValue(\":team_name\")",
          "26:   pipelineName := r.FormValue(\":pipeline_name\")",
          "",
          "[Added Lines]",
          "25:   teamName := r.URL.Query().Get(\":team_name\")",
          "26:   pipelineName := r.URL.Query().Get(\":pipeline_name\")",
          "",
          "---------------"
        ],
        "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go": [
          "File: atc/api/pipelineserver/scoped_handler_factory_test.go -> atc/api/pipelineserver/scoped_handler_factory_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"errors\"",
          "6:  \"net/http\"",
          "7:  \"net/http/httptest\"",
          "9:  \"github.com/concourse/concourse/atc\"",
          "10:  \"github.com/concourse/concourse/atc/api/auth\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"net/url\"",
          "9:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     Expect(dbTeamFactory.FindTeamArgsForCall(0)).To(Equal(\"some-team\"))",
          "109:    })",
          "111:    Context(\"when the pipeline exists\", func() {",
          "112:     BeforeEach(func() {",
          "113:      fakePipeline.NameReturns(\"some-pipeline\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:    Context(\"when the request has team name in body with content-type application/x-www-form-urlencoded\", func() {",
          "114:     JustBeforeEach(func() {",
          "115:      body := url.Values{",
          "116:       \":team_name\": {\"some-other-team\"},",
          "117:      }",
          "119:      request, err := http.NewRequest(\"POST\", server.URL+\"?:team_name=some-team&:pipeline_name=some-pipeline\", strings.NewReader(body.Encode()))",
          "120:      Expect(err).NotTo(HaveOccurred())",
          "122:      request.Header.Add(\"Content-type\", \"application/x-www-form-urlencoded\")",
          "124:      response, err = new(http.Client).Do(request)",
          "125:      Expect(err).NotTo(HaveOccurred())",
          "126:     })",
          "128:     It(\"looks up the team by the team name in URL\", func() {",
          "129:      Expect(dbTeamFactory.FindTeamCallCount()).To(Equal(2))",
          "130:      Expect(dbTeamFactory.FindTeamArgsForCall(1)).To(Equal(\"some-team\"))",
          "132:     })",
          "133:    })",
          "",
          "---------------"
        ],
        "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go": [
          "File: atc/api/policychecker/checker.go -> atc/api/policychecker/checker.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   return policy.PassedPolicyCheck(), nil",
          "46:  }",
          "49:  input := policy.PolicyCheckInput{",
          "50:   HttpMethod: req.Method,",
          "51:   Action:     action,",
          "",
          "[Removed Lines]",
          "48:  team := req.FormValue(\":team_name\")",
          "",
          "[Added Lines]",
          "48:  team := req.URL.Query().Get(\":team_name\")",
          "",
          "---------------"
        ],
        "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go": [
          "File: atc/api/policychecker/checker_test.go -> atc/api/policychecker/checker_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:    Context(\"when every is ok\", func() {",
          "153:     BeforeEach(func() {",
          "154:      fakeAccess.TeamRolesReturns(map[string][]string{",
          "156:      })",
          "157:      fakeAccess.ClaimsReturns(accessor.Claims{UserName: \"some-user\"})",
          "158:      body := bytes.NewBuffer([]byte(\"a: b\"))",
          "",
          "[Removed Lines]",
          "155:       \"some-team\": []string{\"some-role\"},",
          "",
          "[Added Lines]",
          "155:       \"some-team\": {\"some-role\"},",
          "",
          "---------------"
        ],
        "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go": [
          "File: atc/api/team_scoped_handler_factory.go -> atc/api/team_scoped_handler_factory.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  return func(w http.ResponseWriter, r *http.Request) {",
          "29:   logger := f.logger.Session(\"team-scoped-handler\")",
          "32:   team, found, err := f.teamFactory.FindTeam(teamName)",
          "33:   if err != nil {",
          "34:    logger.Error(\"failed-to-find-team-in-db\", err)",
          "",
          "[Removed Lines]",
          "31:   teamName := r.FormValue(\":team_name\")",
          "",
          "[Added Lines]",
          "31:   teamName := r.URL.Query().Get(\":team_name\")",
          "",
          "---------------"
        ],
        "atc/api/teamserver/set.go||atc/api/teamserver/set.go": [
          "File: atc/api/teamserver/set.go -> atc/api/teamserver/set.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  acc := accessor.GetAccessor(r)",
          "29:  var atcTeam atc.Team",
          "30:  err := json.NewDecoder(r.Body).Decode(&atcTeam)",
          "",
          "[Removed Lines]",
          "27:  teamName := r.FormValue(\":team_name\")",
          "",
          "[Added Lines]",
          "27:  teamName := r.URL.Query().Get(\":team_name\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41882773f17cbd210a1c2272d65c643ab912f9f6",
      "candidate_info": {
        "commit_hash": "41882773f17cbd210a1c2272d65c643ab912f9f6",
        "repo": "concourse/concourse",
        "commit_url": "https://github.com/concourse/concourse/commit/41882773f17cbd210a1c2272d65c643ab912f9f6",
        "files": [
          "atc/api/auth/check_pipeline_access_handler.go",
          "atc/api/pipelineserver/reject_archived_handler_factory.go",
          "atc/api/pipelineserver/scoped_handler_factory.go",
          "atc/api/pipelineserver/scoped_handler_factory_test.go",
          "atc/api/policychecker/checker.go",
          "atc/api/policychecker/checker_test.go",
          "atc/api/team_scoped_handler_factory.go",
          "atc/api/teamserver/set.go"
        ],
        "message": "fix team_name overwritten bug\n\nSigned-off-by: Rui Yang <ruiya@vmware.com>",
        "before_after_code_files": [
          "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go",
          "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go",
          "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go",
          "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go",
          "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go",
          "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go",
          "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go",
          "atc/api/teamserver/set.go||atc/api/teamserver/set.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go",
            "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go",
            "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go",
            "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go",
            "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go",
            "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go",
            "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go",
            "atc/api/teamserver/set.go||atc/api/teamserver/set.go"
          ],
          "candidate": [
            "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go",
            "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go",
            "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go",
            "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go",
            "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go",
            "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go",
            "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go",
            "atc/api/teamserver/set.go||atc/api/teamserver/set.go"
          ]
        }
      },
      "candidate_diff": {
        "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go": [
          "File: atc/api/auth/check_pipeline_access_handler.go -> atc/api/auth/check_pipeline_access_handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: }",
          "44: func (h checkPipelineAccessHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {",
          "48:  team, found, err := h.teamFactory.FindTeam(teamName)",
          "49:  if err != nil {",
          "",
          "[Removed Lines]",
          "45:  teamName := r.FormValue(\":team_name\")",
          "46:  pipelineName := r.FormValue(\":pipeline_name\")",
          "",
          "[Added Lines]",
          "45:  teamName := r.URL.Query().Get(\":team_name\")",
          "46:  pipelineName := r.URL.Query().Get(\":pipeline_name\")",
          "",
          "---------------"
        ],
        "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go": [
          "File: atc/api/pipelineserver/reject_archived_handler_factory.go -> atc/api/pipelineserver/reject_archived_handler_factory.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: }",
          "31: func (ra RejectArchivedHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {",
          "35:  team, found, err := ra.teamFactory.FindTeam(teamName)",
          "36:  if err != nil {",
          "",
          "[Removed Lines]",
          "32:  teamName := r.FormValue(\":team_name\")",
          "33:  pipelineName := r.FormValue(\":pipeline_name\")",
          "",
          "[Added Lines]",
          "32:  teamName := r.URL.Query().Get(\":team_name\")",
          "33:  pipelineName := r.URL.Query().Get(\":pipeline_name\")",
          "",
          "---------------"
        ],
        "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go": [
          "File: atc/api/pipelineserver/scoped_handler_factory.go -> atc/api/pipelineserver/scoped_handler_factory.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: func (pdbh *ScopedHandlerFactory) HandlerFor(pipelineScopedHandler func(db.Pipeline) http.Handler) http.HandlerFunc {",
          "23:  return func(w http.ResponseWriter, r *http.Request) {",
          "27:   pipeline, ok := r.Context().Value(auth.PipelineContextKey).(db.Pipeline)",
          "28:   if !ok {",
          "",
          "[Removed Lines]",
          "24:   teamName := r.FormValue(\":team_name\")",
          "25:   pipelineName := r.FormValue(\":pipeline_name\")",
          "",
          "[Added Lines]",
          "24:   teamName := r.URL.Query().Get(\":team_name\")",
          "25:   pipelineName := r.URL.Query().Get(\":pipeline_name\")",
          "",
          "---------------"
        ],
        "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go": [
          "File: atc/api/pipelineserver/scoped_handler_factory_test.go -> atc/api/pipelineserver/scoped_handler_factory_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"errors\"",
          "6:  \"net/http\"",
          "7:  \"net/http/httptest\"",
          "9:  \"github.com/concourse/concourse/atc/api/auth\"",
          "10:  \"github.com/concourse/concourse/atc/api/pipelineserver\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"net/url\"",
          "9:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     Expect(dbTeamFactory.FindTeamArgsForCall(0)).To(Equal(\"some-team\"))",
          "108:    })",
          "110:    Context(\"when the pipeline exists\", func() {",
          "111:     BeforeEach(func() {",
          "112:      fakePipeline.NameReturns(\"some-pipeline\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:    Context(\"when the request has team name in body with content-type application/x-www-form-urlencoded\", func() {",
          "113:     JustBeforeEach(func() {",
          "114:      body := url.Values{",
          "115:       \":team_name\": {\"some-other-team\"},",
          "116:      }",
          "118:      request, err := http.NewRequest(\"POST\", server.URL+\"?:team_name=some-team&:pipeline_name=some-pipeline\", strings.NewReader(body.Encode()))",
          "119:      Expect(err).NotTo(HaveOccurred())",
          "121:      request.Header.Add(\"Content-type\", \"application/x-www-form-urlencoded\")",
          "123:      response, err = new(http.Client).Do(request)",
          "124:      Expect(err).NotTo(HaveOccurred())",
          "125:     })",
          "127:     It(\"looks up the team by the team name in URL\", func() {",
          "128:      Expect(dbTeamFactory.FindTeamCallCount()).To(Equal(2))",
          "129:      Expect(dbTeamFactory.FindTeamArgsForCall(1)).To(Equal(\"some-team\"))",
          "131:     })",
          "132:    })",
          "",
          "---------------"
        ],
        "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go": [
          "File: atc/api/policychecker/checker.go -> atc/api/policychecker/checker.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   return policy.PassedPolicyCheck(), nil",
          "48:  }",
          "51:  input := policy.PolicyCheckInput{",
          "52:   HttpMethod: req.Method,",
          "53:   Action:     action,",
          "",
          "[Removed Lines]",
          "50:  team := req.FormValue(\":team_name\")",
          "",
          "[Added Lines]",
          "50:  team := req.URL.Query().Get(\":team_name\")",
          "",
          "---------------"
        ],
        "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go": [
          "File: atc/api/policychecker/checker_test.go -> atc/api/policychecker/checker_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:    Context(\"when every is ok\", func() {",
          "149:     BeforeEach(func() {",
          "150:      fakeAccess.TeamRolesReturns(map[string][]string{",
          "152:      })",
          "153:      fakeAccess.ClaimsReturns(accessor.Claims{UserName: \"some-user\"})",
          "154:      body := bytes.NewBuffer([]byte(\"a: b\"))",
          "",
          "[Removed Lines]",
          "151:       \"some-team\": []string{\"some-role\"},",
          "",
          "[Added Lines]",
          "151:       \"some-team\": {\"some-role\"},",
          "",
          "---------------"
        ],
        "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go": [
          "File: atc/api/team_scoped_handler_factory.go -> atc/api/team_scoped_handler_factory.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   logger := f.logger.Session(\"team-scoped-handler\")",
          "31:   acc := accessor.GetAccessor(r)",
          "35:   if acc.IsAuthorized(teamName) {",
          "36:    team, found, err := f.teamFactory.FindTeam(teamName)",
          "",
          "[Removed Lines]",
          "33:   teamName := r.FormValue(\":team_name\")",
          "",
          "[Added Lines]",
          "33:   teamName := r.URL.Query().Get(\":team_name\")",
          "",
          "---------------"
        ],
        "atc/api/teamserver/set.go||atc/api/teamserver/set.go": [
          "File: atc/api/teamserver/set.go -> atc/api/teamserver/set.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  acc := accessor.GetAccessor(r)",
          "29:  var atcTeam atc.Team",
          "30:  err := json.NewDecoder(r.Body).Decode(&atcTeam)",
          "",
          "[Removed Lines]",
          "27:  teamName := r.FormValue(\":team_name\")",
          "",
          "[Added Lines]",
          "27:  teamName := r.URL.Query().Get(\":team_name\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7a863a3e693eaa094e6560b206efab8a0f4d58b",
      "candidate_info": {
        "commit_hash": "e7a863a3e693eaa094e6560b206efab8a0f4d58b",
        "repo": "concourse/concourse",
        "commit_url": "https://github.com/concourse/concourse/commit/e7a863a3e693eaa094e6560b206efab8a0f4d58b",
        "files": [
          "atc/api/auth/check_pipeline_access_handler.go",
          "atc/api/pipelineserver/reject_archived_handler_factory.go",
          "atc/api/pipelineserver/scoped_handler_factory.go",
          "atc/api/pipelineserver/scoped_handler_factory_test.go",
          "atc/api/policychecker/checker.go",
          "atc/api/policychecker/checker_test.go",
          "atc/api/team_scoped_handler_factory.go",
          "atc/api/teamserver/set.go"
        ],
        "message": "fix team_name overwritten bug\n\nSigned-off-by: Rui Yang <ruiya@vmware.com>",
        "before_after_code_files": [
          "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go",
          "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go",
          "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go",
          "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go",
          "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go",
          "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go",
          "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go",
          "atc/api/teamserver/set.go||atc/api/teamserver/set.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go",
            "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go",
            "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go",
            "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go",
            "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go",
            "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go",
            "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go",
            "atc/api/teamserver/set.go||atc/api/teamserver/set.go"
          ],
          "candidate": [
            "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go",
            "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go",
            "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go",
            "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go",
            "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go",
            "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go",
            "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go",
            "atc/api/teamserver/set.go||atc/api/teamserver/set.go"
          ]
        }
      },
      "candidate_diff": {
        "atc/api/auth/check_pipeline_access_handler.go||atc/api/auth/check_pipeline_access_handler.go": [
          "File: atc/api/auth/check_pipeline_access_handler.go -> atc/api/auth/check_pipeline_access_handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: }",
          "45: func (h checkPipelineAccessHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {",
          "48:  pipelineRef := atc.PipelineRef{Name: pipelineName}",
          "49:  var err error",
          "50:  pipelineRef.InstanceVars, err = atc.InstanceVarsFromQueryParams(r.URL.Query())",
          "",
          "[Removed Lines]",
          "46:  teamName := r.FormValue(\":team_name\")",
          "47:  pipelineName := r.FormValue(\":pipeline_name\")",
          "",
          "[Added Lines]",
          "46:  teamName := r.URL.Query().Get(\":team_name\")",
          "47:  pipelineName := r.URL.Query().Get(\":pipeline_name\")",
          "",
          "---------------"
        ],
        "atc/api/pipelineserver/reject_archived_handler_factory.go||atc/api/pipelineserver/reject_archived_handler_factory.go": [
          "File: atc/api/pipelineserver/reject_archived_handler_factory.go -> atc/api/pipelineserver/reject_archived_handler_factory.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: }",
          "32: func (ra RejectArchivedHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {",
          "35:  pipelineRef := atc.PipelineRef{Name: pipelineName}",
          "36:  var err error",
          "37:  pipelineRef.InstanceVars, err = atc.InstanceVarsFromQueryParams(r.URL.Query())",
          "",
          "[Removed Lines]",
          "33:  teamName := r.FormValue(\":team_name\")",
          "34:  pipelineName := r.FormValue(\":pipeline_name\")",
          "",
          "[Added Lines]",
          "33:  teamName := r.URL.Query().Get(\":team_name\")",
          "34:  pipelineName := r.URL.Query().Get(\":pipeline_name\")",
          "",
          "---------------"
        ],
        "atc/api/pipelineserver/scoped_handler_factory.go||atc/api/pipelineserver/scoped_handler_factory.go": [
          "File: atc/api/pipelineserver/scoped_handler_factory.go -> atc/api/pipelineserver/scoped_handler_factory.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: func (pdbh *ScopedHandlerFactory) HandlerFor(pipelineScopedHandler func(db.Pipeline) http.Handler) http.HandlerFunc {",
          "24:  return func(w http.ResponseWriter, r *http.Request) {",
          "27:   pipelineRef := atc.PipelineRef{Name: pipelineName}",
          "28:   var err error",
          "29:   pipelineRef.InstanceVars, err = atc.InstanceVarsFromQueryParams(r.URL.Query())",
          "",
          "[Removed Lines]",
          "25:   teamName := r.FormValue(\":team_name\")",
          "26:   pipelineName := r.FormValue(\":pipeline_name\")",
          "",
          "[Added Lines]",
          "25:   teamName := r.URL.Query().Get(\":team_name\")",
          "26:   pipelineName := r.URL.Query().Get(\":pipeline_name\")",
          "",
          "---------------"
        ],
        "atc/api/pipelineserver/scoped_handler_factory_test.go||atc/api/pipelineserver/scoped_handler_factory_test.go": [
          "File: atc/api/pipelineserver/scoped_handler_factory_test.go -> atc/api/pipelineserver/scoped_handler_factory_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"errors\"",
          "6:  \"net/http\"",
          "7:  \"net/http/httptest\"",
          "9:  \"github.com/concourse/concourse/atc\"",
          "10:  \"github.com/concourse/concourse/atc/api/auth\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"net/url\"",
          "9:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     Expect(dbTeamFactory.FindTeamArgsForCall(0)).To(Equal(\"some-team\"))",
          "109:    })",
          "111:    Context(\"when the pipeline exists\", func() {",
          "112:     BeforeEach(func() {",
          "113:      fakePipeline.NameReturns(\"some-pipeline\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:    Context(\"when the request has team name in body with content-type application/x-www-form-urlencoded\", func() {",
          "114:     JustBeforeEach(func() {",
          "115:      body := url.Values{",
          "116:       \":team_name\": {\"some-other-team\"},",
          "117:      }",
          "119:      request, err := http.NewRequest(\"POST\", server.URL+\"?:team_name=some-team&:pipeline_name=some-pipeline\", strings.NewReader(body.Encode()))",
          "120:      Expect(err).NotTo(HaveOccurred())",
          "122:      request.Header.Add(\"Content-type\", \"application/x-www-form-urlencoded\")",
          "124:      response, err = new(http.Client).Do(request)",
          "125:      Expect(err).NotTo(HaveOccurred())",
          "126:     })",
          "128:     It(\"looks up the team by the team name in URL\", func() {",
          "129:      Expect(dbTeamFactory.FindTeamCallCount()).To(Equal(2))",
          "130:      Expect(dbTeamFactory.FindTeamArgsForCall(1)).To(Equal(\"some-team\"))",
          "132:     })",
          "133:    })",
          "",
          "---------------"
        ],
        "atc/api/policychecker/checker.go||atc/api/policychecker/checker.go": [
          "File: atc/api/policychecker/checker.go -> atc/api/policychecker/checker.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   return policy.PassedPolicyCheck(), nil",
          "46:  }",
          "49:  input := policy.PolicyCheckInput{",
          "50:   HttpMethod: req.Method,",
          "51:   Action:     action,",
          "",
          "[Removed Lines]",
          "48:  team := req.FormValue(\":team_name\")",
          "",
          "[Added Lines]",
          "48:  team := req.URL.Query().Get(\":team_name\")",
          "",
          "---------------"
        ],
        "atc/api/policychecker/checker_test.go||atc/api/policychecker/checker_test.go": [
          "File: atc/api/policychecker/checker_test.go -> atc/api/policychecker/checker_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:    Context(\"when every is ok\", func() {",
          "153:     BeforeEach(func() {",
          "154:      fakeAccess.TeamRolesReturns(map[string][]string{",
          "156:      })",
          "157:      fakeAccess.ClaimsReturns(accessor.Claims{UserName: \"some-user\"})",
          "158:      body := bytes.NewBuffer([]byte(\"a: b\"))",
          "",
          "[Removed Lines]",
          "155:       \"some-team\": []string{\"some-role\"},",
          "",
          "[Added Lines]",
          "155:       \"some-team\": {\"some-role\"},",
          "",
          "---------------"
        ],
        "atc/api/team_scoped_handler_factory.go||atc/api/team_scoped_handler_factory.go": [
          "File: atc/api/team_scoped_handler_factory.go -> atc/api/team_scoped_handler_factory.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  return func(w http.ResponseWriter, r *http.Request) {",
          "29:   logger := f.logger.Session(\"team-scoped-handler\")",
          "32:   team, found, err := f.teamFactory.FindTeam(teamName)",
          "33:   if err != nil {",
          "34:    logger.Error(\"failed-to-find-team-in-db\", err)",
          "",
          "[Removed Lines]",
          "31:   teamName := r.FormValue(\":team_name\")",
          "",
          "[Added Lines]",
          "31:   teamName := r.URL.Query().Get(\":team_name\")",
          "",
          "---------------"
        ],
        "atc/api/teamserver/set.go||atc/api/teamserver/set.go": [
          "File: atc/api/teamserver/set.go -> atc/api/teamserver/set.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  acc := accessor.GetAccessor(r)",
          "29:  var atcTeam atc.Team",
          "30:  err := json.NewDecoder(r.Body).Decode(&atcTeam)",
          "",
          "[Removed Lines]",
          "27:  teamName := r.FormValue(\":team_name\")",
          "",
          "[Added Lines]",
          "27:  teamName := r.URL.Query().Get(\":team_name\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}