{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c968c9f9430cc55f0564204f2c370ea24ca28312",
      "candidate_info": {
        "commit_hash": "c968c9f9430cc55f0564204f2c370ea24ca28312",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/c968c9f9430cc55f0564204f2c370ea24ca28312",
        "files": [
          "examples/views/table/TableTest1.vue",
          "examples/views/table/TableTest8.vue",
          "gulpfile.js",
          "package.json",
          "packages/table/module/filter/mixin.ts",
          "packages/table/module/filter/panel.ts",
          "packages/table/src/body.ts",
          "packages/table/src/footer.ts",
          "packages/table/src/methods.ts",
          "packages/ui/index.ts",
          "packages/ui/src/dom.ts",
          "styles/components/table.scss"
        ],
        "message": "\u4f18\u5316\u865a\u62df\u6e32\u67d3\uff0c\u6e32\u67d3\u6027\u80fd\u63d0\u534780%\uff0c\u5927\u5e45\u964d\u4f4e\u6e32\u67d3\u671f\u767d\u5c4f",
        "before_after_code_files": [
          "examples/views/table/TableTest1.vue||examples/views/table/TableTest1.vue",
          "examples/views/table/TableTest8.vue||examples/views/table/TableTest8.vue",
          "gulpfile.js||gulpfile.js",
          "packages/table/module/filter/mixin.ts||packages/table/module/filter/mixin.ts",
          "packages/table/module/filter/panel.ts||packages/table/module/filter/panel.ts",
          "packages/table/src/body.ts||packages/table/src/body.ts",
          "packages/table/src/footer.ts||packages/table/src/footer.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/ui/index.ts||packages/ui/index.ts",
          "packages/ui/src/dom.ts||packages/ui/src/dom.ts",
          "styles/components/table.scss||styles/components/table.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/table/TableTest1.vue||examples/views/table/TableTest1.vue": [
          "File: examples/views/table/TableTest1.vue -> examples/views/table/TableTest1.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:       <vxe-column field=\"name\" title=\"Name\" sortable></vxe-column>",
          "17:       <vxe-column field=\"age\" title=\"Age\" :filters=\"ageOptions\" :filter-method=\"filterAgeMethod\">",
          "18:         <template #filter=\"{ $panel, column }\">",
          "20:         </template>",
          "21:       </vxe-column>",
          "22:       <vxe-column field=\"sex\" title=\"Sex\" :filters=\"demo1.sexList\" :filter-multiple=\"false\" :formatter=\"formatterSex\"></vxe-column>",
          "",
          "[Removed Lines]",
          "19:           <vxe-input class=\"my-input\" v-for=\"(option, index) in column.filters\" :key=\"index\" v-model=\"option.data\" @input=\"$panel.changeOption($event, !!option.data, option)\" @keyup.enter=\"$panel.confirmFilter()\" placeholder=\"\u6309\u56de\u8f66\u786e\u8ba4\u7b5b\u9009\" />",
          "",
          "[Added Lines]",
          "19:           <vxe-input class=\"my-input\" v-for=\"(option, index) in column.filters\" :key=\"index\" v-model=\"option.data\" @input=\"$panel.changeOption($event, !!option.data, option)\" placeholder=\"\u6309\u56de\u8f66\u786e\u8ba4\u7b5b\u9009\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:       return item ? item.label : ''",
          "70:     }",
          "74:     }",
          "76:     return {",
          "",
          "[Removed Lines]",
          "72:     const filterAgeMethod: VxeColumnPropTypes.FilterMethod = ({ value, row }) => {",
          "73:       return row.age >= value",
          "",
          "[Added Lines]",
          "72:     const filterAgeMethod: VxeColumnPropTypes.FilterMethod = ({ option, row }) => {",
          "73:       return row.age >= option.data",
          "",
          "---------------"
        ],
        "examples/views/table/TableTest8.vue||examples/views/table/TableTest8.vue": [
          "File: examples/views/table/TableTest8.vue -> examples/views/table/TableTest8.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:   <div>",
          "3:     <vxe-button @click=\"loadData(5000)\">\u52a0\u8f7d5k\u6761</vxe-button>",
          "4:     <vxe-button @click=\"loadData(10000)\">\u52a0\u8f7d1w\u6761</vxe-button>",
          "12:   </div>",
          "13: </template>",
          "15: <script lang=\"ts\">",
          "16: import Vue from 'vue'",
          "19: interface RowVO {",
          "20:   id: number",
          "",
          "[Removed Lines]",
          "5:     <vxe-button @click=\"loadData(50000)\">\u52a0\u8f7d5w\u6761</vxe-button>",
          "6:     <vxe-grid v-bind=\"gridOptions\">",
          "7:       <template #action>",
          "8:         <vxe-button mode=\"text\" status=\"primary\">\u6309\u94ae1</vxe-button>",
          "9:         <vxe-button mode=\"text\" status=\"error\">\u6309\u94ae2</vxe-button>",
          "10:       </template>",
          "11:     </vxe-grid>",
          "17: import { VxeGridProps, VxeColumnPropTypes } from '../../../types'",
          "",
          "[Added Lines]",
          "5:     <vxe-table",
          "6:       border",
          "7:       show-footer",
          "8:       height=\"800\"",
          "9:       :loading=\"loading\"",
          "10:       :column-config=\"{resizable: true}\"",
          "11:       :scroll-x=\"{enabled: true, gt: 0}\"",
          "12:       :scroll-y=\"{enabled: true, gt: 0}\"",
          "13:       :data=\"tableData\"",
          "14:       :footer-data=\"footerData\">",
          "15:       <vxe-column type=\"checkbox\" width=\"60\" fixed=\"left\"></vxe-column>",
          "16:       <vxe-column field=\"col0\" title=\"\u52170\" width=\"100\" fixed=\"left\"></vxe-column>",
          "17:       <vxe-column field=\"imgUrl\" title=\"\u52171\" width=\"80\" fixed=\"left\" :cell-render=\"imgUrlCellRender\"></vxe-column>",
          "18:       <vxe-column field=\"col2\" title=\"\u52172\" width=\"90\"></vxe-column>",
          "19:       <vxe-column field=\"col3\" title=\"\u52173\" width=\"200\"></vxe-column>",
          "20:       <vxe-column field=\"col4\" title=\"\u52174\" width=\"140\"></vxe-column>",
          "21:       <vxe-column field=\"col5\" title=\"\u52175\" width=\"300\"></vxe-column>",
          "22:       <vxe-column field=\"col6\" title=\"\u52176\" width=\"160\"></vxe-column>",
          "23:       <vxe-column field=\"col7\" title=\"\u52177\" width=\"120\"></vxe-column>",
          "24:       <vxe-column field=\"col8\" title=\"\u52178\" width=\"400\"></vxe-column>",
          "25:       <vxe-column field=\"col9\" title=\"\u52179\" width=\"160\"></vxe-column>",
          "26:       <vxe-column field=\"col10\" title=\"\u521710\" width=\"160\"></vxe-column>",
          "27:       <vxe-column field=\"col11\" title=\"\u521711\" width=\"180\"></vxe-column>",
          "28:       <vxe-column field=\"col12\" title=\"\u521712\" width=\"160\"></vxe-column>",
          "29:       <vxe-column field=\"col13\" title=\"\u521713\" width=\"80\"></vxe-column>",
          "30:       <vxe-column field=\"col14\" title=\"\u521714\" width=\"120\"></vxe-column>",
          "31:       <vxe-column field=\"col15\" title=\"\u521715\" width=\"360\"></vxe-column>",
          "32:       <vxe-column field=\"col16\" title=\"\u521716\" width=\"150\"></vxe-column>",
          "33:       <vxe-column field=\"col17\" title=\"\u521717\" width=\"380\"></vxe-column>",
          "34:       <vxe-column field=\"col18\" title=\"\u521718\" width=\"100\"></vxe-column>",
          "35:       <vxe-column field=\"col19\" title=\"\u521719\" width=\"290\"></vxe-column>",
          "36:       <vxe-column field=\"col20\" title=\"\u521720\" width=\"80\"></vxe-column>",
          "37:       <vxe-column field=\"col21\" title=\"\u521721\" width=\"100\"></vxe-column>",
          "38:       <vxe-column field=\"col22\" title=\"\u521722\" width=\"120\"></vxe-column>",
          "39:       <vxe-column field=\"col23\" title=\"\u521723\" width=\"270\"></vxe-column>",
          "40:       <vxe-column field=\"col24\" title=\"\u521724\" width=\"330\"></vxe-column>",
          "41:       <vxe-column field=\"col25\" title=\"\u521725\" width=\"460\"></vxe-column>",
          "42:       <vxe-column field=\"col26\" title=\"\u521726\" width=\"280\"></vxe-column>",
          "43:       <vxe-column field=\"col27\" title=\"\u521727\" width=\"220\"></vxe-column>",
          "44:       <vxe-column field=\"col28\" title=\"\u521728\" width=\"120\"></vxe-column>",
          "45:       <vxe-column field=\"col29\" title=\"\u521729\" width=\"180\"></vxe-column>",
          "46:       <vxe-column field=\"col30\" title=\"\u521730\" width=\"500\"></vxe-column>",
          "47:       <vxe-column field=\"col31\" title=\"\u521731\" width=\"600\"></vxe-column>",
          "48:       <vxe-column field=\"col32\" title=\"\u521732\" width=\"100\"></vxe-column>",
          "49:       <vxe-column field=\"col33\" title=\"\u521733\" width=\"490\"></vxe-column>",
          "50:       <vxe-column field=\"col34\" title=\"\u521734\" width=\"100\"></vxe-column>",
          "51:       <vxe-column field=\"col35\" title=\"\u521735\" width=\"150\"></vxe-column>",
          "52:       <vxe-column field=\"col36\" title=\"\u521736\" width=\"800\"></vxe-column>",
          "53:       <vxe-column field=\"col37\" title=\"\u521737\" width=\"400\"></vxe-column>",
          "54:       <vxe-column field=\"col38\" title=\"\u521738\" width=\"800\"></vxe-column>",
          "55:       <vxe-column field=\"col39\" title=\"\u521739\" width=\"360\"></vxe-column>",
          "56:       <vxe-column field=\"col40\" title=\"\u521740\" width=\"420\"></vxe-column>",
          "57:       <vxe-column field=\"col41\" title=\"\u521741\" width=\"100\"></vxe-column>",
          "58:       <vxe-column field=\"col42\" title=\"\u521742\" width=\"120\"></vxe-column>",
          "59:       <vxe-column field=\"col43\" title=\"\u521743\" width=\"280\"></vxe-column>",
          "60:       <vxe-column field=\"col44\" title=\"\u521744\" width=\"170\"></vxe-column>",
          "61:       <vxe-column field=\"col45\" title=\"\u521745\" width=\"370\"></vxe-column>",
          "62:       <vxe-column field=\"col46\" title=\"\u521746\" width=\"120\"></vxe-column>",
          "63:       <vxe-column field=\"col47\" title=\"\u521747\" width=\"170\"></vxe-column>",
          "64:       <vxe-column field=\"col48\" title=\"\u521748\" width=\"400\"></vxe-column>",
          "65:       <vxe-column field=\"col49\" title=\"\u521749\" width=\"220\"></vxe-column>",
          "66:       <vxe-column field=\"col50\" title=\"\u521750\" width=\"170\"></vxe-column>",
          "67:       <vxe-column field=\"col51\" title=\"\u521751\" width=\"160\"></vxe-column>",
          "68:       <vxe-column field=\"col52\" title=\"\u521752\" width=\"100\"></vxe-column>",
          "69:       <vxe-column field=\"col53\" title=\"\u521753\" width=\"280\"></vxe-column>",
          "70:       <vxe-column field=\"col54\" title=\"\u521754\" width=\"170\"></vxe-column>",
          "71:       <vxe-column field=\"col55\" title=\"\u521755\" width=\"370\"></vxe-column>",
          "72:       <vxe-column field=\"col56\" title=\"\u521756\" width=\"120\"></vxe-column>",
          "73:       <vxe-column field=\"col57\" title=\"\u521757\" width=\"170\"></vxe-column>",
          "74:       <vxe-column field=\"col58\" title=\"\u521758\" width=\"400\"></vxe-column>",
          "75:       <vxe-column field=\"col59\" title=\"\u521759\" width=\"220\"></vxe-column>",
          "76:       <vxe-column field=\"col60\" title=\"\u521760\" width=\"500\"></vxe-column>",
          "77:       <vxe-column field=\"col61\" title=\"\u521761\" width=\"600\"></vxe-column>",
          "78:       <vxe-column field=\"col62\" title=\"\u521762\" width=\"100\"></vxe-column>",
          "79:       <vxe-column field=\"col63\" title=\"\u521763\" width=\"490\"></vxe-column>",
          "80:       <vxe-column field=\"col64\" title=\"\u521764\" width=\"100\"></vxe-column>",
          "81:       <vxe-column field=\"col65\" title=\"\u521765\" width=\"150\"></vxe-column>",
          "82:       <vxe-column field=\"col66\" title=\"\u521766\" width=\"800\"></vxe-column>",
          "83:       <vxe-column field=\"col67\" title=\"\u521767\" width=\"400\"></vxe-column>",
          "84:       <vxe-column field=\"col68\" title=\"\u521768\" width=\"800\"></vxe-column>",
          "85:       <vxe-column field=\"col69\" title=\"\u521769\" width=\"360\"></vxe-column>",
          "86:       <vxe-column field=\"col70\" title=\"\u521770\" width=\"500\"></vxe-column>",
          "87:       <vxe-column field=\"col71\" title=\"\u521771\" width=\"600\"></vxe-column>",
          "88:       <vxe-column field=\"col72\" title=\"\u521772\" width=\"100\"></vxe-column>",
          "89:       <vxe-column field=\"col73\" title=\"\u521773\" width=\"490\"></vxe-column>",
          "90:       <vxe-column field=\"col74\" title=\"\u521774\" width=\"100\"></vxe-column>",
          "91:       <vxe-column field=\"col75\" title=\"\u521775\" width=\"150\"></vxe-column>",
          "92:       <vxe-column field=\"col76\" title=\"\u521776\" width=\"800\"></vxe-column>",
          "93:       <vxe-column field=\"col77\" title=\"\u521777\" width=\"400\"></vxe-column>",
          "94:       <vxe-column field=\"col78\" title=\"\u521778\" width=\"800\"></vxe-column>",
          "95:       <vxe-column field=\"col79\" title=\"\u521779\" width=\"360\"></vxe-column>",
          "96:       <vxe-column field=\"col80\" title=\"\u521780\" width=\"500\"></vxe-column>",
          "97:       <vxe-column field=\"col81\" title=\"\u521781\" width=\"600\"></vxe-column>",
          "98:       <vxe-column field=\"col82\" title=\"\u521782\" width=\"100\"></vxe-column>",
          "99:       <vxe-column field=\"col83\" title=\"\u521783\" width=\"490\"></vxe-column>",
          "100:       <vxe-column field=\"col84\" title=\"\u521784\" width=\"100\"></vxe-column>",
          "101:       <vxe-column field=\"col85\" title=\"\u521785\" width=\"150\"></vxe-column>",
          "102:       <vxe-column field=\"col86\" title=\"\u521786\" width=\"800\"></vxe-column>",
          "103:       <vxe-column field=\"imgList1\" title=\"\u521788\" width=\"120\" fixed=\"right\" :cell-render=\"imgList1CellRender\"></vxe-column>",
          "104:       <vxe-column field=\"flag1\" title=\"\u521789\" width=\"100\" fixed=\"right\" :cell-render=\"flag1CellRender\"></vxe-column>",
          "105:       <vxe-column field=\"action\" title=\"\u64cd\u4f5c\" width=\"120\" fixed=\"right\">",
          "106:         <template #default>",
          "107:           <vxe-button mode=\"text\" status=\"primary\">\u7f16\u8f91</vxe-button>",
          "108:           <vxe-button mode=\"text\" status=\"error\">\u5220\u9664</vxe-button>",
          "109:         </template>",
          "110:       </vxe-column>",
          "111:     </vxe-table>",
          "117: import { VxeColumnPropTypes } from '../../../types'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: export default Vue.extend({",
          "25:   data () {",
          "26:     const flag1CellRender: VxeColumnPropTypes.CellRender = {",
          "27:       name: 'VxeSwitch'",
          "28:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:     const tableData: RowVO[] = []",
          "127:     const footerData = [",
          "128:       { col2: '456', col3: '324', col4: '98', col6: '11', col74: '546', col75: '78', col83: '45', col86: '444' }",
          "129:     ]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:       }",
          "51:     }",
          "177:     return {",
          "179:       flag1CellRender,",
          "180:       imgUrlCellRender,",
          "181:       imgList1CellRender",
          "",
          "[Removed Lines]",
          "53:     const gridOptions: VxeGridProps<RowVO> = {",
          "54:       border: true,",
          "55:       loading: false,",
          "56:       height: 800,",
          "57:       columnConfig: {",
          "58:         resizable: true",
          "59:       },",
          "60:       scrollX: {",
          "61:         enabled: true,",
          "62:         gt: 0",
          "63:       },",
          "64:       scrollY: {",
          "65:         enabled: true,",
          "66:         gt: 0,",
          "67:         mode: 'wheel'",
          "68:       },",
          "69:       columns: [",
          "70:         { type: 'checkbox', width: 60, fixed: 'left' },",
          "71:         { title: '\u52170', field: 'col0', width: 100, fixed: 'left' },",
          "72:         { title: '\u52171', field: 'imgUrl', width: 80, fixed: 'left', cellRender: imgUrlCellRender },",
          "73:         { title: '\u52172', field: 'col2', width: 90 },",
          "74:         { title: '\u52173', field: 'col3', width: 200 },",
          "75:         { title: '\u52174', field: 'col4', width: 140 },",
          "76:         { title: '\u52175', field: 'col5', width: 300 },",
          "77:         { title: '\u52176', field: 'col6', width: 160 },",
          "78:         { title: '\u52177', field: 'col7', width: 120 },",
          "79:         { title: '\u52178', field: 'col8', width: 400 },",
          "80:         { title: '\u52179', field: 'col9', width: 160 },",
          "81:         { title: '\u521710', field: 'col10', width: 160 },",
          "82:         { title: '\u521711', field: 'col11', width: 180 },",
          "83:         { title: '\u521712', field: 'col12', width: 160 },",
          "84:         { title: '\u521713', field: 'col13', width: 80 },",
          "85:         { title: '\u521714', field: 'col14', width: 120 },",
          "86:         { title: '\u521715', field: 'col15', width: 360 },",
          "87:         { title: '\u521716', field: 'col16', width: 150 },",
          "88:         { title: '\u521717', field: 'col17', width: 380 },",
          "89:         { title: '\u521718', field: 'col18', width: 100 },",
          "90:         { title: '\u521719', field: 'col19', width: 290 },",
          "91:         { title: '\u521720', field: 'col20', width: 80 },",
          "92:         { title: '\u521721', field: 'col21', width: 100 },",
          "93:         { title: '\u521722', field: 'col22', width: 120 },",
          "94:         { title: '\u521723', field: 'col23', width: 270 },",
          "95:         { title: '\u521724', field: 'col24', width: 330 },",
          "96:         { title: '\u521725', field: 'col25', width: 460 },",
          "97:         { title: '\u521726', field: 'col26', width: 280 },",
          "98:         { title: '\u521727', field: 'col27', width: 220 },",
          "99:         { title: '\u521728', field: 'col28', width: 120 },",
          "100:         { title: '\u521729', field: 'col29', width: 180 },",
          "101:         { title: '\u521730', field: 'col30', width: 500 },",
          "102:         { title: '\u521731', field: 'col31', width: 600 },",
          "103:         { title: '\u521732', field: 'col32', width: 100 },",
          "104:         { title: '\u521733', field: 'col33', width: 490 },",
          "105:         { title: '\u521734', field: 'col34', width: 100 },",
          "106:         { title: '\u521735', field: 'col35', width: 150 },",
          "107:         { title: '\u521736', field: 'col36', width: 800 },",
          "108:         { title: '\u521737', field: 'col37', width: 400 },",
          "109:         { title: '\u521738', field: 'col38', width: 800 },",
          "110:         { title: '\u521739', field: 'col39', width: 360 },",
          "111:         { title: '\u521740', field: 'col40', width: 420 },",
          "112:         { title: '\u521741', field: 'col41', width: 100 },",
          "113:         { title: '\u521742', field: 'col42', width: 120 },",
          "114:         { title: '\u521743', field: 'col43', width: 280 },",
          "115:         { title: '\u521744', field: 'col44', width: 170 },",
          "116:         { title: '\u521745', field: 'col45', width: 370 },",
          "117:         { title: '\u521746', field: 'col46', width: 420 },",
          "118:         { title: '\u521747', field: 'col47', width: 170 },",
          "119:         { title: '\u521748', field: 'col48', width: 400 },",
          "120:         { title: '\u521749', field: 'col49', width: 220 },",
          "121:         { title: '\u521750', field: 'col50', width: 170 },",
          "122:         { title: '\u521751', field: 'col51', width: 160 },",
          "123:         { title: '\u521752', field: 'col52', width: 500 },",
          "124:         { title: '\u521753', field: 'col53', width: 280 },",
          "125:         { title: '\u521754', field: 'col54', width: 170 },",
          "126:         { title: '\u521755', field: 'col55', width: 370 },",
          "127:         { title: '\u521756', field: 'col56', width: 120 },",
          "128:         { title: '\u521757', field: 'col57', width: 170 },",
          "129:         { title: '\u521758', field: 'col58', width: 400 },",
          "130:         { title: '\u521759', field: 'col59', width: 220 },",
          "131:         { title: '\u521760', field: 'col60', width: 650 },",
          "132:         { title: '\u521761', field: 'col61', width: 600 },",
          "133:         { title: '\u521762', field: 'col62', width: 100 },",
          "134:         { title: '\u521763', field: 'col63', width: 490 },",
          "135:         { title: '\u521764', field: 'col64', width: 100 },",
          "136:         { title: '\u521765', field: 'col65', width: 150 },",
          "137:         { title: '\u521766', field: 'col66', width: 800 },",
          "138:         { title: '\u521767', field: 'col67', width: 400 },",
          "139:         { title: '\u521768', field: 'col68', width: 800 },",
          "140:         { title: '\u521769', field: 'col69', width: 360 },",
          "141:         { title: '\u521770', field: 'col70', width: 650 },",
          "142:         { title: '\u521771', field: 'col71', width: 600 },",
          "143:         { title: '\u521772', field: 'col72', width: 100 },",
          "144:         { title: '\u521773', field: 'col73', width: 490 },",
          "145:         { title: '\u521774', field: 'col74', width: 100 },",
          "146:         { title: '\u521775', field: 'col75', width: 150 },",
          "147:         { title: '\u521776', field: 'col76', width: 800 },",
          "148:         { title: '\u521777', field: 'col77', width: 400 },",
          "149:         { title: '\u521778', field: 'col78', width: 800 },",
          "150:         { title: '\u521779', field: 'col79', width: 360 },",
          "151:         { title: '\u521780', field: 'col80', width: 650 },",
          "152:         { title: '\u521781', field: 'col81', width: 600 },",
          "153:         { title: '\u521782', field: 'col82', width: 100 },",
          "154:         { title: '\u521783', field: 'col83', width: 490 },",
          "155:         { title: '\u521784', field: 'col84', width: 100 },",
          "156:         { title: '\u521785', field: 'col85', width: 150 },",
          "157:         { title: '\u521786', field: 'col86', width: 800 },",
          "158:         { title: '\u521787', field: 'col87', width: 400 },",
          "159:         { title: '\u521788', field: 'col88', width: 800 },",
          "160:         { title: '\u521789', field: 'col89', width: 360 },",
          "161:         { title: '\u521790', field: 'col90', width: 650 },",
          "162:         { title: '\u521791', field: 'col91', width: 600 },",
          "163:         { title: '\u521792', field: 'col92', width: 100 },",
          "164:         { title: '\u521793', field: 'col93', width: 490 },",
          "165:         { title: '\u521794', field: 'col94', width: 100 },",
          "166:         { title: '\u521795', field: 'col95', width: 150 },",
          "167:         { title: '\u521796', field: 'col96', width: 800 },",
          "168:         { title: '\u521797', field: 'col97', width: 400 },",
          "169:         { title: '\u521798', field: 'col98', width: 70, fixed: 'right' },",
          "170:         { title: '\u521799', field: 'imgList1', width: 120, fixed: 'right', cellRender: imgList1CellRender },",
          "171:         { title: '\u5217100', field: 'flag1', width: 100, fixed: 'right', cellRender: flag1CellRender },",
          "172:         { title: '\u64cd\u4f5c', field: 'action', width: 120, fixed: 'right', slots: { default: 'action' } }",
          "173:       ],",
          "174:       data: []",
          "175:     }",
          "178:       gridOptions,",
          "",
          "[Added Lines]",
          "159:       tableData,",
          "160:       footerData,",
          "161:       loading: false,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:   methods: {",
          "186:     loadData (rowSize: number) {",
          "188:       setTimeout(() => {",
          "189:         const dataList: RowVO[] = []",
          "190:         for (let i = 0; i < rowSize; i++) {",
          "",
          "[Removed Lines]",
          "187:       this.gridOptions.loading = true",
          "",
          "[Added Lines]",
          "170:       this.loading = true",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "208:         }",
          "210:         const startTime = Date.now()",
          "213:         this.$nextTick(() => {",
          "218:         })",
          "220:     }",
          "221:   },",
          "222:   created () {",
          "",
          "[Removed Lines]",
          "211:         this.gridOptions.data = dataList",
          "212:         this.gridOptions.loading = false",
          "214:           console.log({",
          "215:             content: `\u52a0\u8f7d\u65f6\u95f4 ${Date.now() - startTime} \u6beb\u79d2`,",
          "216:             status: 'success'",
          "217:           })",
          "219:       }, 100)",
          "",
          "[Added Lines]",
          "194:         this.tableData = dataList",
          "195:         this.loading = false",
          "197:           console.log(`\u52a0\u8f7d\u65f6\u95f4 ${Date.now() - startTime} \u6beb\u79d2`)",
          "199:       }, 350)",
          "",
          "---------------"
        ],
        "gulpfile.js||gulpfile.js": [
          "File: gulpfile.js -> gulpfile.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   const styleStr = fs.readFileSync('lib_temp/index.css', 'utf-8')",
          "170:   fs.writeFileSync('lib_temp/index.css', toCSSUnicode(styleStr))",
          "171:   return gulp.src('lib_temp/index.css')",
          "172:     .pipe(rename({",
          "173:       basename: 'style'",
          "174:     }))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:     .pipe(gulp.dest('es'))",
          "173:     .pipe(gulp.dest('lib'))",
          "174:     .pipe(rename({",
          "175:       suffix: '.min',",
          "176:       extname: '.css'",
          "177:     }))",
          "178:     .pipe(gulp.dest('es'))",
          "179:     .pipe(gulp.dest('lib'))",
          "",
          "---------------"
        ],
        "packages/table/module/filter/mixin.ts||packages/table/module/filter/mixin.ts": [
          "File: packages/table/module/filter/mixin.ts -> packages/table/module/filter/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:       }",
          "139:       this.emitEvent('filter-visible', { column, field: column.field, property: column.field, filterList: this.getCheckedFilters(), visible: filterStore.visible }, evnt)",
          "140:     },",
          "141:     _getCheckedFilters () {",
          "142:       const { tableFullColumn } = this",
          "143:       const filterList: any[] = []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     handleFilterConfirmFilter (evnt: Event | null) {",
          "142:       const $xeTable = this",
          "143:       const reactData = $xeTable",
          "145:       const { filterStore } = reactData",
          "146:       filterStore.options.forEach((option: any) => {",
          "147:         option.checked = option._checked",
          "148:       })",
          "149:       $xeTable.confirmFilterEvent(evnt)",
          "150:     },",
          "151:     _saveFilterPanel () {",
          "152:       const $xeTable = this",
          "154:       $xeTable.handleFilterConfirmFilter(null)",
          "155:       return $xeTable.$nextTick()",
          "156:     },",
          "157:     _resetFilterPanel () {",
          "158:       const $xeTable = this",
          "160:       $xeTable.handleFilterResetFilter(null)",
          "161:       return $xeTable.$nextTick()",
          "162:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:       if (this.mouseConfig && this.mouseOpts.area && this.handleFilterEvent) {",
          "187:         this.handleFilterEvent(evnt, params)",
          "188:       }",
          "190:       this.closeFilter()",
          "191:       this.updateFooter().then(() => {",
          "192:         const { scrollXLoad, scrollYLoad } = this",
          "",
          "[Removed Lines]",
          "189:       this.emitEvent('filter-change', params, evnt)",
          "",
          "[Added Lines]",
          "211:       if (evnt) {",
          "212:         this.emitEvent('filter-change', params, evnt)",
          "213:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:       this.handleClearFilter(this.filterStore.column)",
          "236:       this.confirmFilterEvent(evnt)",
          "237:     },",
          "",
          "[Removed Lines]",
          "234:     resetFilterEvent (evnt: any) {",
          "",
          "[Added Lines]",
          "258:     handleFilterResetFilter (evnt: any) {",
          "",
          "---------------"
        ],
        "packages/table/module/filter/panel.ts||packages/table/module/filter/panel.ts": [
          "File: packages/table/module/filter/panel.ts -> packages/table/module/filter/panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     },",
          "204:     confirmFilter (evnt: any) {",
          "210:     },",
          "212:     resetFilter (evnt: any) {",
          "213:       const { $parent: $xetable } = this",
          "215:     }",
          "",
          "[Removed Lines]",
          "205:       const { $parent: $xetable, filterStore } = this",
          "206:       filterStore.options.forEach((option: any) => {",
          "207:         option.checked = option._checked",
          "208:       })",
          "209:       $xetable.confirmFilterEvent(evnt)",
          "214:       $xetable.resetFilterEvent(evnt)",
          "",
          "[Added Lines]",
          "205:       const { $parent: $xetable } = this",
          "206:       $xetable.handleFilterConfirmFilter(evnt)",
          "211:       $xetable.handleFilterResetFilter(evnt)",
          "",
          "---------------"
        ],
        "packages/table/src/body.ts||packages/table/src/body.ts": [
          "File: packages/table/src/body.ts -> packages/table/src/body.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import { updateCellTitle, setScrollTop, setScrollLeft } from '../../ui/src/dom'",
          "7: import { getSlotVNs } from '../../ui/src/vn'",
          "11: const renderType = 'body'",
          "",
          "[Removed Lines]",
          "9: const { getI18n, renderer } = VxeUI",
          "",
          "[Added Lines]",
          "9: const { getI18n, renderer, renderEmptyElement } = VxeUI",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     columnKey,",
          "65:     overflowX,",
          "66:     sYOpts,",
          "67:     scrollYLoad,",
          "68:     highlightCurrentRow,",
          "69:     showOverflow: allColumnOverflow,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     scrollXLoad,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:     tooltipConfig,",
          "89:     rowOpts,",
          "90:     columnOpts,",
          "91:     validErrorMaps",
          "92:   } = $xetable",
          "93:   const cellOpts = $xetable.computeCellOpts",
          "94:   const { type, cellRender, editRender, align, showOverflow, className, treeNode, slots } = column",
          "95:   const { verticalAlign } = cellOpts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:     mouseOpts,",
          "93:     areaOpts,",
          "96:   const { selectCellToRow } = areaOpts",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "249:     if (showValidTip && errorValidItem) {",
          "250:       const errRule = errorValidItem.rule",
          "251:       const validSlot = slots ? slots.valid : null",
          "253:       tdVNs.push(",
          "254:         h('div', {",
          "255:           class: ['vxe-cell--valid-error-tip', getClass(validOpts.className, errorValidItem)],",
          "",
          "[Removed Lines]",
          "252:       const validParams = { ...params, ...errorValidItem }",
          "",
          "[Added Lines]",
          "256:       const validParams = { ...params, ...errorValidItem, rule: errorValidItem }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "277:   let cellHeight = ''",
          "278:   if (hasEllipsis && (scrollYRHeight || rowHeight)) {",
          "279:     cellHeight = `${scrollYRHeight || rowHeight}px`",
          "281:     if (!hasEllipsis) {",
          "282:       cellHeight = `${rest.height || 24}px`",
          "283:     }",
          "284:   }",
          "286:   return h('td', {",
          "287:     class: [",
          "288:       'vxe-body--column',",
          "",
          "[Removed Lines]",
          "280:   } else if (scrollYLoad) {",
          "",
          "[Added Lines]",
          "284:   } else if (scrollXLoad || scrollYLoad) {",
          "290:   if (mouseConfig && mouseOpts.area && selectCellToRow) {",
          "291:     if (",
          "292:       (!$columnIndex && selectCellToRow === true) ||",
          "293:       (selectCellToRow === column.field)",
          "294:     ) {",
          "295:       tdVNs.push(",
          "296:         h('div', {",
          "297:           class: 'vxe-cell--area-status'",
          "298:         })",
          "299:       )",
          "300:     }",
          "301:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "536:     elemStore[`${prefix}emptyBlock`] = null",
          "537:   },",
          "538:   render (this: any, h: CreateElement) {",
          "539:     const { _e, $parent: $xetable, fixedColumn, fixedType } = this",
          "540:     let { $scopedSlots, tId, tableData, tableColumn, visibleColumn, expandColumn, showOverflow: allColumnOverflow, keyboardConfig, keyboardOpts, mergeList, spanMethod, scrollXLoad, scrollYLoad, isAllOverflow, emptyOpts, mouseConfig, mouseOpts, sYOpts, rowOpts, isDragRowMove } = $xetable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:     const $xeTable = this.$parent",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "571:         emptyContent = $xetable.emptyText || getI18n('vxe.table.emptyText')",
          "572:       }",
          "573:     }",
          "574:     return h('div', {",
          "575:       class: ['vxe-table--body-wrapper', fixedType ? `fixed-${fixedType}--wrapper` : 'body--wrapper'],",
          "576:       attrs: {",
          "577:         xid: tId",
          "578:       },",
          "582:     }, [",
          "583:       fixedType",
          "584:         ? _e()",
          "",
          "[Removed Lines]",
          "579:       on: Object.assign({",
          "580:         scroll: this.scrollEvent",
          "581:       }, scrollYLoad && sYOpts.mode === 'wheel' ? { wheel: this.wheelEvent } : null)",
          "",
          "[Added Lines]",
          "594:     const ons: Record<string, any> = {",
          "595:       scroll: this.scrollEvent",
          "596:     }",
          "597:     if (sYOpts.mode === 'wheel') {",
          "598:       ons.wheel = this.wheelEvent",
          "599:     }",
          "602:       ref: 'refElem',",
          "607:       on: ons",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "661:             class: 'vxe-table--cell-active-area'",
          "662:           })",
          "663:         ])",
          "665:       !fixedType",
          "666:         ? h('div', {",
          "667:           class: 'vxe-table--empty-block',",
          "",
          "[Removed Lines]",
          "664:         : null,",
          "",
          "[Added Lines]",
          "690:         : renderEmptyElement($xeTable),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "671:             class: 'vxe-table--empty-content'",
          "672:           }, emptyContent)",
          "673:         ])",
          "675:     ])",
          "676:   },",
          "677:   methods: {",
          "",
          "[Removed Lines]",
          "674:         : null",
          "",
          "[Added Lines]",
          "700:         : renderEmptyElement($xeTable)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "683:     scrollEvent (evnt: Event) {",
          "687:       const headerElem = tableHeader ? tableHeader.$el : null",
          "688:       const footerElem = tableFooter ? tableFooter.$el : null",
          "689:       const bodyElem = tableBody.$el",
          "690:       const leftElem = leftBody ? leftBody.$el : null",
          "691:       const rightElem = rightBody ? rightBody.$el : null",
          "692:       const scrollTop = scrollBodyElem.scrollTop",
          "693:       const scrollLeft = bodyElem.scrollLeft",
          "694:       const isRollX = scrollLeft !== lastScrollLeft",
          "695:       const isRollY = scrollTop !== lastScrollTop",
          "701:         if (leftElem && fixedType === 'left') {",
          "702:           setScrollTop(bodyElem, scrollTop)",
          "703:           setScrollTop(rightElem, scrollTop)",
          "",
          "[Removed Lines]",
          "684:       const { $el: scrollBodyElem, $parent: $xeTable, fixedType } = this",
          "685:       const { $refs, lastScrollTop, lastScrollLeft } = $xeTable",
          "686:       const { tableHeader, tableBody, leftBody, rightBody, tableFooter } = $refs",
          "696:       const xHandleEl = $refs.refScrollXHandleElem",
          "697:       const yHandleEl = $refs.refScrollYHandleElem",
          "698:       if (yHandleEl) {",
          "699:         yHandleEl.scrollTop = scrollTop",
          "700:       } else if (isRollY) {",
          "",
          "[Added Lines]",
          "710:       const $xeTable = this.$parent",
          "711:       const tableInternalData = $xeTable",
          "713:       const { fixedType } = this",
          "714:       const { lastScrollTop, lastScrollLeft, inVirtualScroll, inBodyScroll, bodyScrollType, inFooterScroll } = tableInternalData",
          "715:       if (inVirtualScroll) {",
          "716:         return",
          "717:       }",
          "718:       if (inFooterScroll) {",
          "719:         return",
          "720:       }",
          "721:       if (inBodyScroll) {",
          "722:         if (bodyScrollType !== fixedType) {",
          "723:           return",
          "724:         }",
          "725:       }",
          "726:       const { tableHeader, tableBody, leftBody, rightBody, tableFooter } = $xeTable.$refs",
          "727:       const scrollBodyElem = this.$el",
          "733:       const xHandleEl = $xeTable.$refs.refScrollXHandleElem",
          "734:       const yHandleEl = $xeTable.$refs.refScrollYHandleElem",
          "739:       tableInternalData.inBodyScroll = true",
          "740:       tableInternalData.bodyScrollType = fixedType",
          "741:       if (isRollY) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "708:           setScrollTop(leftElem, scrollTop)",
          "709:           setScrollTop(rightElem, scrollTop)",
          "710:         }",
          "715:       }",
          "719:         setScrollLeft(headerElem, scrollLeft)",
          "720:         setScrollLeft(footerElem, scrollLeft)",
          "725:       }",
          "726:     },",
          "727:     handleWheel (evnt: any, isTopWheel: any, deltaTop: any, isRollX: any, isRollY: any) {",
          "728:       const { $parent: $xetable } = this",
          "",
          "[Removed Lines]",
          "711:         $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "712:           type: renderType,",
          "713:           fixed: fixedType",
          "714:         })",
          "716:       if (xHandleEl) {",
          "717:         xHandleEl.scrollLeft = scrollLeft",
          "718:       } else if (isRollX) {",
          "721:         $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "722:           type: renderType,",
          "723:           fixed: fixedType",
          "724:         })",
          "",
          "[Added Lines]",
          "752:         setScrollTop(yHandleEl, scrollTop)",
          "753:         $xeTable.triggerScrollYEvent(evnt)",
          "755:       if (isRollX) {",
          "756:         setScrollLeft(xHandleEl, scrollLeft)",
          "759:         $xeTable.triggerScrollXEvent(evnt)",
          "761:       $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "762:         type: renderType,",
          "763:         fixed: fixedType",
          "764:       })",
          "",
          "---------------"
        ],
        "packages/table/src/footer.ts||packages/table/src/footer.ts": [
          "File: packages/table/src/footer.ts -> packages/table/src/footer.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:         tableColumn = visibleColumn",
          "230:       }",
          "231:     }",
          "232:     return h('div', {",
          "233:       class: ['vxe-table--footer-wrapper', fixedType ? `fixed-${fixedType}--wrapper` : 'body--wrapper'],",
          "234:       attrs: {",
          "235:         xid: tId",
          "236:       },",
          "240:     }, [",
          "241:       fixedType",
          "242:         ? _e()",
          "",
          "[Removed Lines]",
          "237:       on: {",
          "238:         scroll: this.scrollEvent",
          "239:       }",
          "",
          "[Added Lines]",
          "233:     const ons: Record<string, any> = {}",
          "234:     if (!fixedType) {",
          "235:       ons.scroll = this.scrollEvent",
          "236:     }",
          "243:       on: ons",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:     scrollEvent (evnt: any) {",
          "297:       const headerElem = tableHeader ? tableHeader.$el : null",
          "298:       const footerElem = tableFooter ? tableFooter.$el : null",
          "299:       const bodyElem = tableBody.$el",
          "315:     }",
          "316:   } as any",
          "317: } as any",
          "",
          "[Removed Lines]",
          "294:       const { $parent: $xeTable, fixedType } = this",
          "295:       const { $refs } = $xeTable",
          "296:       const { tableHeader, tableBody, tableFooter } = $refs",
          "300:       const scrollLeft = footerElem ? footerElem.scrollLeft : 0",
          "301:       const xHandleEl = $refs.refScrollXHandleElem",
          "302:       if (xHandleEl) {",
          "303:         xHandleEl.scrollLeft = scrollLeft",
          "304:       } else {",
          "305:         const isRollX = true",
          "306:         const isRollY = false",
          "307:         const scrollTop = bodyElem.scrollTop",
          "308:         setScrollLeft(headerElem, scrollLeft)",
          "309:         setScrollLeft(bodyElem, scrollLeft)",
          "310:         $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "311:           type: renderType,",
          "312:           fixed: fixedType",
          "313:         })",
          "314:       }",
          "",
          "[Added Lines]",
          "298:       const $xeTable = this.$parent",
          "299:       const tableInternalData = $xeTable",
          "301:       const { inVirtualScroll, inBodyScroll } = tableInternalData",
          "302:       if (inVirtualScroll) {",
          "303:         return",
          "304:       }",
          "305:       if (inBodyScroll) {",
          "306:         return",
          "307:       }",
          "308:       const { fixedType } = this",
          "309:       const { tableHeader, tableBody, tableFooter } = $xeTable.$refs",
          "313:       const xHandleEl = $xeTable.$refs.refScrollXHandleElem",
          "314:       const scrollLeft = footerElem.scrollLeft",
          "315:       const isRollX = true",
          "316:       const isRollY = false",
          "317:       const scrollTop = bodyElem.scrollTop",
          "318:       tableInternalData.inFooterScroll = true",
          "319:       setScrollLeft(xHandleEl, scrollLeft)",
          "320:       setScrollLeft(headerElem, scrollLeft)",
          "321:       setScrollLeft(bodyElem, scrollLeft)",
          "322:       $xeTable.triggerScrollXEvent(evnt)",
          "323:       $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "324:         type: renderType,",
          "325:         fixed: fixedType",
          "326:       })",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: const { getConfig, getI18n, renderer, formats, interceptor, createEvent } = VxeUI",
          "17: const customStorageKey = 'VXE_CUSTOM_STORE'",
          "",
          "[Removed Lines]",
          "14: const isWebkit = browse['-webkit'] && !browse.edge",
          "15: const debounceScrollYDuration = browse.msie ? 80 : 20",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109: }",
          "111: const computeRowHeight = ($xeTable: any) => {",
          "115:   const tableBodyElem = tableBody ? tableBody.$el as HTMLDivElement : null",
          "117:   const rowHeightMaps = $xeTable.rowHeightMaps",
          "118:   let rowHeight = 0",
          "131:     }",
          "132:   }",
          "133:   return rowHeight",
          "",
          "[Removed Lines]",
          "112:   const { $refs, computeSize } = $xeTable",
          "113:   const tableHeader = $refs.tableHeader",
          "114:   const tableBody = $refs.tableBody",
          "116:   const vSize = computeSize",
          "119:   if (tableBodyElem) {",
          "120:     const tableHeaderElem = tableHeader ? tableHeader.$el as HTMLDivElement : null",
          "121:     let firstTrElem",
          "122:     firstTrElem = tableBodyElem.querySelector('tr')",
          "123:     if (!firstTrElem && tableHeaderElem) {",
          "124:       firstTrElem = tableHeaderElem.querySelector('tr')",
          "125:     }",
          "126:     if (firstTrElem) {",
          "127:       rowHeight = firstTrElem.clientHeight",
          "128:     }",
          "129:     if (!rowHeight) {",
          "130:       rowHeight = rowHeightMaps[vSize || 'default']",
          "",
          "[Added Lines]",
          "112:   const props = $xeTable",
          "114:   const { showOverflow } = props",
          "115:   const tableHeader = $xeTable.$refs.tableHeader",
          "116:   const tableBody = $xeTable.$refs.tableBody",
          "118:   const vSize = $xeTable.computeSize",
          "121:   if (showOverflow) {",
          "122:     if (tableBodyElem) {",
          "123:       const tableHeaderElem = tableHeader ? tableHeader.$el as HTMLDivElement : null",
          "124:       let firstTrElem",
          "125:       firstTrElem = tableBodyElem.querySelector('tr')",
          "126:       if (!firstTrElem && tableHeaderElem) {",
          "127:         firstTrElem = tableHeaderElem.querySelector('tr')",
          "128:       }",
          "129:       if (firstTrElem) {",
          "130:         rowHeight = firstTrElem.clientHeight",
          "131:       }",
          "132:       if (!rowHeight) {",
          "133:         rowHeight = rowHeightMaps[vSize || 'default']",
          "134:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289: }",
          "291: const calcCellHeight = ($xeTable: any) => {",
          "293:   const el = $xeTable.$el",
          "295:     tableData.forEach((row: any) => {",
          "296:       const rowid = getRowid($xeTable, row)",
          "298:       const trList = el.querySelectorAll(`.vxe-body--row[rowid=\"${rowid}\"]`)",
          "300:         let height = 0",
          "301:         for (let i = 0; i < trList.length; i++) {",
          "302:           const trEl = trList[i] as HTMLTableRowElement",
          "304:         }",
          "306:       }",
          "307:     })",
          "308:   }",
          "",
          "[Removed Lines]",
          "292:   const { tableData, scrollYLoad, fullAllDataRowIdData } = $xeTable",
          "294:   if (scrollYLoad && el) {",
          "297:       const rest = fullAllDataRowIdData[rowid]",
          "299:       if (rest && trList.length) {",
          "303:           height = Math.max(height, trEl.offsetHeight)",
          "305:         rest.height = height",
          "",
          "[Added Lines]",
          "296:   const props = $xeTable",
          "297:   const reactData = $xeTable",
          "298:   const internalData = $xeTable",
          "300:   const { showOverflow } = props",
          "301:   const { tableData, scrollXLoad, scrollYLoad } = reactData",
          "302:   const { fullAllDataRowIdData } = internalData",
          "304:   if (!showOverflow && (scrollXLoad || scrollYLoad) && el) {",
          "305:     let paddingTop = 0",
          "306:     let paddingBottom = 0",
          "307:     let calcPadding = false",
          "310:       const rowRest = fullAllDataRowIdData[rowid]",
          "312:       if (rowRest && trList.length) {",
          "316:           const tdList = trEl.children",
          "317:           for (let j = 0; j < tdList.length; j++) {",
          "318:             const tdEl = tdList[j]",
          "319:             const cellElem = tdEl.querySelector('.vxe-cell') as HTMLDivElement",
          "320:             if (!calcPadding) {",
          "321:               paddingTop = XEUtils.toNumber(getComputedStyle(tdEl).paddingTop)",
          "322:               paddingBottom = XEUtils.toNumber(getComputedStyle(tdEl).paddingBottom)",
          "323:               calcPadding = true",
          "324:             }",
          "325:             let cellHeight = paddingTop + paddingBottom",
          "326:             if (cellElem) {",
          "327:               cellHeight += cellElem.offsetHeight",
          "328:             }",
          "329:             height = Math.max(height, cellHeight)",
          "330:           }",
          "332:         rowRest.height = height",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "476:   return $xeTable.$nextTick()",
          "477: }",
          "479: const Methods = {",
          "480:   callSlot (slotFunc: any, params: any, h: any, vNodes: any) {",
          "481:     if (slotFunc) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506: function handleRecalculateLayout ($xeTable: any, reFull: boolean) {",
          "507:   const el = $xeTable.$refs.refElem",
          "508:   if (!el || !el.clientWidth) {",
          "509:     return $xeTable.$nextTick()",
          "510:   }",
          "511:   calcCellHeight($xeTable)",
          "512:   $xeTable.calcCellWidth()",
          "513:   $xeTable.autoCellWidth()",
          "514:   if (reFull === true) {",
          "516:     return $xeTable.computeScrollLoad().then(() => {",
          "517:       calcCellHeight($xeTable)",
          "518:       $xeTable.calcCellWidth()",
          "519:       $xeTable.autoCellWidth()",
          "520:       return $xeTable.computeScrollLoad()",
          "521:     })",
          "522:   }",
          "523:   return $xeTable.computeScrollLoad()",
          "524: }",
          "526: function checkLastSyncScroll ($xeTable: any, isRollX: boolean, isRollY: boolean) {",
          "527:   const reactData = $xeTable",
          "528:   const internalData = $xeTable",
          "530:   const { scrollXLoad, scrollYLoad } = reactData",
          "531:   const { lcsTimeout } = internalData",
          "532:   if (lcsTimeout) {",
          "533:     clearTimeout(lcsTimeout)",
          "534:   }",
          "535:   internalData.lcsTimeout = setTimeout(() => {",
          "536:     internalData.lcsTimeout = undefined",
          "537:     internalData.inVirtualScroll = false",
          "538:     internalData.inBodyScroll = false",
          "539:     internalData.bodyScrollType = ''",
          "540:     internalData.inFooterScroll = false",
          "541:     if (isRollX && scrollXLoad) {",
          "542:       $xeTable.updateScrollXData()",
          "543:     }",
          "544:     if (isRollY && scrollYLoad) {",
          "545:       $xeTable.updateScrollYData()",
          "546:     }",
          "547:     $xeTable.updateCellAreas()",
          "548:   }, 200)",
          "549: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2437:   recalculate (reFull?: boolean) {",
          "2452:     }",
          "2454:   },",
          "2455:   calcCellWidth () {",
          "2456:     const $xeTable = this",
          "",
          "[Removed Lines]",
          "2438:     const el = this.$el",
          "2439:     if (!el || !el.clientWidth) {",
          "2440:       return this.$nextTick()",
          "2441:     }",
          "2442:     calcCellHeight(this)",
          "2443:     this.calcCellWidth()",
          "2444:     this.autoCellWidth()",
          "2445:     if (reFull === true) {",
          "2447:       return this.computeScrollLoad().then(() => {",
          "2448:         calcCellHeight(this)",
          "2449:         this.autoCellWidth()",
          "2450:         return this.computeScrollLoad()",
          "2451:       })",
          "2453:     return this.computeScrollLoad()",
          "",
          "[Added Lines]",
          "2510:     const $xeTable = this",
          "2511:     const internalData = $xeTable",
          "2513:     const { rceTimeout } = internalData",
          "2514:     if (rceTimeout) {",
          "2515:       clearTimeout(rceTimeout)",
          "2516:     } else {",
          "2517:       handleRecalculateLayout($xeTable, !!reFull)",
          "2519:     return new Promise(resolve => {",
          "2520:       internalData.rceTimeout = setTimeout(() => {",
          "2521:         internalData.rceTimeout = undefined",
          "2522:         resolve(handleRecalculateLayout($xeTable, !!reFull))",
          "2523:       }, 20)",
          "2524:     })",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2643:   },",
          "2644:   calcCellHeight () {",
          "2645:     const $xeTable = this",
          "2646:     const reactData = $xeTable",
          "2647:     const internalData = $xeTable",
          "2650:     const { fullAllDataRowIdData } = internalData",
          "2651:     const el = $xeTable.$el",
          "2653:       tableData.forEach((row: any) => {",
          "2654:         const rowid = getRowid($xeTable, row)",
          "2655:         const rowRest = fullAllDataRowIdData[rowid]",
          "",
          "[Removed Lines]",
          "2649:     const { tableData, scrollYLoad } = reactData",
          "2652:     if (scrollYLoad && el) {",
          "",
          "[Added Lines]",
          "2717:     const props = $xeTable",
          "2721:     const { showOverflow } = props",
          "2722:     const { tableData, scrollXLoad, scrollYLoad } = reactData",
          "2725:     if (!showOverflow && (scrollXLoad || scrollYLoad) && el) {",
          "2726:       let paddingTop = 0",
          "2727:       let paddingBottom = 0",
          "2728:       let calcPadding = false",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2658:           let height = 0",
          "2659:           for (let i = 0; i < trList.length; i++) {",
          "2660:             const trEl = trList[i] as HTMLTableRowElement",
          "2662:           }",
          "2663:           rowRest.height = height",
          "2664:         }",
          "",
          "[Removed Lines]",
          "2661:             height = Math.max(height, trEl.offsetHeight)",
          "",
          "[Added Lines]",
          "2737:             const tdList = trEl.children",
          "2738:             for (let j = 0; j < tdList.length; j++) {",
          "2739:               const tdEl = tdList[j]",
          "2740:               const cellElem = tdEl.querySelector('.vxe-cell') as HTMLDivElement",
          "2741:               if (!calcPadding) {",
          "2742:                 paddingTop = XEUtils.toNumber(getComputedStyle(tdEl).paddingTop)",
          "2743:                 paddingBottom = XEUtils.toNumber(getComputedStyle(tdEl).paddingBottom)",
          "2744:                 calcPadding = true",
          "2745:               }",
          "2746:               let cellHeight = paddingTop + paddingBottom",
          "2747:               if (cellElem) {",
          "2748:                 cellHeight += cellElem.offsetHeight",
          "2749:               }",
          "2750:               height = Math.max(height, cellHeight)",
          "2751:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5890:       scrollLeft: bodyElem.scrollLeft",
          "5891:     }",
          "5892:   },",
          "5899:   loadScrollXData () {",
          "5901:     const { startIndex, endIndex, offsetSize } = scrollXStore",
          "5903:     const offsetItem = {",
          "5904:       startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),",
          "5905:       endIndex: toVisibleIndex + visibleSize + offsetSize",
          "",
          "[Removed Lines]",
          "5896:   triggerScrollXEvent () {",
          "5897:     this.loadScrollXData()",
          "5898:   },",
          "5900:     const { mergeList, mergeFooterList, scrollXStore } = this",
          "5902:     const { toVisibleIndex, visibleSize } = handleVirtualXVisible(this)",
          "",
          "[Added Lines]",
          "5984:     const $xeTable = this",
          "5985:     const reactData = $xeTable",
          "5986:     const internalData = $xeTable",
          "5988:     const { mergeList, mergeFooterList } = reactData",
          "5989:     const { scrollXStore } = internalData",
          "5991:     const { toVisibleIndex, visibleSize } = handleVirtualXVisible($xeTable)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5910:       if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {",
          "5911:         scrollXStore.startIndex = offsetStartIndex",
          "5912:         scrollXStore.endIndex = offsetEndIndex",
          "5914:       }",
          "5915:     }",
          "5917:   },",
          "5918:   handleScrollEvent (evnt: Event, isRollY: boolean, isRollX: boolean, scrollTop: number, scrollLeft: number, params: any) {",
          "5919:     const $xeTable = this",
          "",
          "[Removed Lines]",
          "5913:         this.updateScrollXData()",
          "5916:     this.closeTooltip()",
          "",
          "[Added Lines]",
          "6002:         $xeTable.updateScrollXData()",
          "6005:     $xeTable.closeTooltip()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5960:       }",
          "5961:       $xeTable.checkScrolling()",
          "5962:       internalData.lastScrollLeft = scrollLeft",
          "5964:     } else {",
          "5965:       const yThreshold = $xeTable.computeScrollYThreshold",
          "5966:       isTop = scrollTop <= 0",
          "",
          "[Removed Lines]",
          "5963:       reactData.lastScrollTime = Date.now()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5979:         }",
          "5980:       }",
          "5981:       internalData.lastScrollTop = scrollTop",
          "5983:     }",
          "5984:     const evntParams = {",
          "5985:       scrollTop,",
          "5986:       scrollLeft,",
          "",
          "[Removed Lines]",
          "5982:       reactData.lastScrollTime = Date.now()",
          "",
          "[Added Lines]",
          "6071:     reactData.lastScrollTime = Date.now()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5997:       direction,",
          "5998:       ...params",
          "5999:     }",
          "6000:     if (rowOpts.isHover || highlightHoverRow) {",
          "6001:       $xeTable.clearHoverRow()",
          "6002:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6088:     checkLastSyncScroll($xeTable, isRollX, isRollY)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6012:     }",
          "6013:     $xeTable.dispatchEvent('scroll', evntParams, evnt)",
          "6014:   },",
          "6018:   triggerScrollYEvent () {",
          "6024:     } else {",
          "6026:     }",
          "6028:   },",
          "6033:     const $xeTable = this",
          "6035:     const tableHeader = $xeTable.$refs.tableHeader",
          "6036:     const tableBody = $xeTable.$refs.tableBody",
          "6037:     const tableFooter = $xeTable.$refs.tableFooter",
          "6038:     const bodyElem = tableBody.$el as HTMLDivElement",
          "6039:     const headerElem = tableHeader ? tableHeader.$el as HTMLDivElement : null",
          "6040:     const footerElem = tableFooter ? tableFooter.$el as HTMLDivElement : null",
          "6048:     const wrapperEl = evnt.currentTarget as HTMLDivElement",
          "6049:     const { scrollTop, scrollLeft } = wrapperEl",
          "6050:     const isRollX = true",
          "6051:     const isRollY = false",
          "6053:     $xeTable.triggerScrollXEvent(evnt)",
          "6054:     $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "6055:       type: 'table',",
          "6056:       fixed: ''",
          "6057:     })",
          "6058:   },",
          "6063:     const $xeTable = this",
          "6065:     const tableBody = $xeTable.$refs.tableBody",
          "6066:     const leftBody = $xeTable.$refs.leftBody",
          "6067:     const rightBody = $xeTable.$refs.rightBody",
          "6068:     const bodyElem = tableBody.$el as HTMLDivElement",
          "6069:     const leftElem = leftBody ? leftBody.$el as HTMLDivElement : null",
          "6070:     const rightElem = rightBody ? rightBody.$el as HTMLDivElement : null",
          "6078:     const wrapperEl = evnt.currentTarget as HTMLDivElement",
          "6079:     const { scrollTop, scrollLeft } = wrapperEl",
          "6080:     const isRollX = false",
          "6081:     const isRollY = true",
          "6083:     $xeTable.triggerScrollYEvent(evnt)",
          "6084:     $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "6085:       type: 'table',",
          "",
          "[Removed Lines]",
          "6019:     const { scrollYStore } = this",
          "6020:     const { adaptive, offsetSize, visibleSize } = scrollYStore",
          "6022:     if (isWebkit && adaptive && (offsetSize * 2 + visibleSize) <= 40) {",
          "6023:       this.loadScrollYData()",
          "6025:       this.debounceScrollYData()",
          "6027:     this.debounceScrollYCalculate()",
          "6029:   debounceScrollYData: XEUtils.debounce(function () {",
          "6030:     this.loadScrollYData()",
          "6031:   }, debounceScrollYDuration, { leading: false, trailing: true }),",
          "6032:   handleSyncScrollX (scrollLeft: number) {",
          "6041:     setScrollLeft(bodyElem, scrollLeft)",
          "6042:     setScrollLeft(headerElem, scrollLeft)",
          "6043:     setScrollLeft(footerElem, scrollLeft)",
          "6044:   },",
          "6045:   scrollXEvent (evnt: Event) {",
          "6046:     const $xeTable = this",
          "6052:     $xeTable.handleSyncScrollX(scrollLeft)",
          "6059:   debounceScrollYCalculate: XEUtils.debounce(function () {",
          "6060:     this.updateScrollYSpace()",
          "6061:   }, 1000, { leading: false, trailing: true }),",
          "6062:   handleSyncScrollY (scrollTop: number) {",
          "6071:     setScrollTop(bodyElem, scrollTop)",
          "6072:     setScrollTop(leftElem, scrollTop)",
          "6073:     setScrollTop(rightElem, scrollTop)",
          "6074:   },",
          "6075:   scrollYEvent (evnt: Event) {",
          "6076:     const $xeTable = this",
          "6082:     $xeTable.handleSyncScrollY(scrollTop)",
          "",
          "[Added Lines]",
          "6104:   lazyScrollXData () {",
          "6105:     const $xeTable = this",
          "6106:     const internalData = $xeTable",
          "6108:     const { lxTimeout, lxRunTime, scrollXStore } = internalData",
          "6109:     const { visibleSize } = scrollXStore",
          "6110:     const fpsTime = Math.min(80, Math.floor(visibleSize * 3))",
          "6111:     if (lxTimeout) {",
          "6112:       clearTimeout(lxTimeout)",
          "6113:     }",
          "6114:     if (!lxRunTime || lxRunTime + fpsTime < Date.now()) {",
          "6115:       internalData.lxRunTime = Date.now()",
          "6116:       $xeTable.loadScrollXData()",
          "6117:     }",
          "6118:     internalData.lxTimeout = setTimeout(() => {",
          "6119:       internalData.lxRunTime = undefined",
          "6120:       internalData.lxRunTime = undefined",
          "6121:       $xeTable.loadScrollXData()",
          "6122:     }, fpsTime)",
          "6123:   },",
          "6124:   lazyScrollYData () {",
          "6125:     const $xeTable = this",
          "6126:     const internalData = $xeTable",
          "6128:     const { lyTimeout, lyRunTime, scrollYStore } = internalData",
          "6129:     const { visibleSize } = scrollYStore",
          "6130:     const fpsTime = Math.min(80, Math.floor(visibleSize * 2))",
          "6131:     if (lyTimeout) {",
          "6132:       clearTimeout(lyTimeout)",
          "6133:     }",
          "6134:     if (!lyRunTime || lyRunTime + fpsTime < Date.now()) {",
          "6135:       internalData.lyRunTime = Date.now()",
          "6136:       $xeTable.loadScrollYData()",
          "6137:     }",
          "6138:     internalData.lyTimeout = setTimeout(() => {",
          "6139:       internalData.lyTimeout = undefined",
          "6140:       internalData.lyRunTime = undefined",
          "6141:       $xeTable.loadScrollYData()",
          "6142:     }, fpsTime)",
          "6143:   },",
          "6147:   triggerScrollXEvent () {",
          "6148:     const $xeTable = this",
          "6150:     const sXOpts = $xeTable.computeSXOpts",
          "6151:     if (sXOpts.immediate) {",
          "6152:       $xeTable.loadScrollXData()",
          "6153:     } else {",
          "6154:       $xeTable.lazyScrollXData()",
          "6155:     }",
          "6156:   },",
          "6161:     const $xeTable = this",
          "6163:     const sYOpts = $xeTable.computeSYOpts",
          "6164:     if (sYOpts.immediate) {",
          "6165:       $xeTable.loadScrollYData()",
          "6167:       $xeTable.lazyScrollYData()",
          "6170:   scrollXEvent (evnt: Event) {",
          "6172:     const internalData = $xeTable",
          "6174:     const { inFooterScroll, inBodyScroll } = internalData",
          "6175:     if (inFooterScroll) {",
          "6176:       return",
          "6177:     }",
          "6178:     if (inBodyScroll) {",
          "6179:       return",
          "6180:     }",
          "6191:     internalData.inVirtualScroll = true",
          "6192:     setScrollLeft(bodyElem, scrollLeft)",
          "6193:     setScrollLeft(headerElem, scrollLeft)",
          "6194:     setScrollLeft(footerElem, scrollLeft)",
          "6201:   scrollYEvent (evnt: Event) {",
          "6203:     const internalData = $xeTable",
          "6205:     const { inFooterScroll, inBodyScroll } = internalData",
          "6206:     if (inFooterScroll) {",
          "6207:       return",
          "6208:     }",
          "6209:     if (inBodyScroll) {",
          "6210:       return",
          "6211:     }",
          "6223:     internalData.inVirtualScroll = true",
          "6224:     setScrollTop(bodyElem, scrollTop)",
          "6225:     setScrollTop(leftElem, scrollTop)",
          "6226:     setScrollTop(rightElem, scrollTop)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6092:   loadScrollYData () {",
          "6094:     const { startIndex, endIndex, offsetSize } = scrollYStore",
          "6096:     const offsetItem = {",
          "6099:     }",
          "6100:     calculateMergerOffsetIndex(mergeList, offsetItem, 'row')",
          "6101:     const { startIndex: offsetStartIndex, endIndex: offsetEndIndex } = offsetItem",
          "",
          "[Removed Lines]",
          "6093:     const { mergeList, scrollYStore } = this",
          "6095:     const { toVisibleIndex, visibleSize } = handleVirtualYVisible(this)",
          "6097:       startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),",
          "6098:       endIndex: toVisibleIndex + visibleSize + offsetSize",
          "",
          "[Added Lines]",
          "6237:     const $xeTable = this",
          "6238:     const props = $xeTable",
          "6239:     const reactData = $xeTable",
          "6240:     const internalData = $xeTable",
          "6242:     const { showOverflow } = props",
          "6243:     const { mergeList } = reactData",
          "6244:     const { tableHeight, scrollYStore } = internalData",
          "6246:     const offsetYSize = showOverflow ? offsetSize : offsetSize + Math.min(8, Math.ceil(tableHeight / 200))",
          "6247:     const { toVisibleIndex, visibleSize } = handleVirtualYVisible($xeTable)",
          "6249:       startIndex: Math.max(0, toVisibleIndex - 1 - offsetYSize),",
          "6250:       endIndex: toVisibleIndex + visibleSize + offsetYSize",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6103:       if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {",
          "6104:         scrollYStore.startIndex = offsetStartIndex",
          "6105:         scrollYStore.endIndex = offsetEndIndex",
          "6107:       }",
          "6108:     }",
          "6109:   },",
          "6111:   computeScrollLoad () {",
          "6112:     const $xeTable = this",
          "6115:     return this.$nextTick().then(() => {",
          "6117:       const { sYOpts, sXOpts, scrollXLoad, scrollYLoad, scrollXStore, scrollYStore } = this",
          "6119:       if (scrollXLoad) {",
          "6124:         scrollXStore.offsetSize = offsetXSize",
          "6125:         scrollXStore.visibleSize = visibleXSize",
          "6126:         scrollXStore.endIndex = Math.max(scrollXStore.startIndex + scrollXStore.visibleSize + offsetXSize, scrollXStore.endIndex)",
          "6128:       } else {",
          "6130:       }",
          "6131:       calcCellHeight(this)",
          "6133:       const rowHeight = computeRowHeight(this)",
          "6134:       scrollYStore.rowHeight = rowHeight",
          "6135:       this.rowHeight = rowHeight",
          "6137:       if (scrollYLoad) {",
          "6141:         scrollYStore.offsetSize = offsetYSize",
          "6142:         scrollYStore.visibleSize = visibleYSize",
          "6143:         scrollYStore.endIndex = Math.max(scrollYStore.startIndex + visibleYSize + offsetYSize, scrollYStore.endIndex)",
          "6145:       } else {",
          "6147:       }",
          "6149:     })",
          "6150:   },",
          "6151:   handleTableColumn () {",
          "",
          "[Removed Lines]",
          "6106:         this.updateScrollYData()",
          "6113:     const props = $xeTable",
          "6116:       const { showOverflow } = props",
          "6120:         const { visibleSize: visibleXSize } = handleVirtualXVisible(this)",
          "6122:         const bufferSize = showOverflow ? 0 : 2",
          "6123:         const offsetXSize = Math.max(bufferSize, sXOpts.oSize ? XEUtils.toNumber(sXOpts.oSize) : browse.msie ? 10 : (browse.edge ? 5 : 0))",
          "6127:         this.updateScrollXData()",
          "6129:         this.updateScrollXSpace()",
          "6136:       const { visibleSize: visibleYSize } = handleVirtualYVisible(this)",
          "6139:         const bufferSize = showOverflow ? 0 : 2",
          "6140:         const offsetYSize = Math.max(bufferSize, sYOpts.oSize ? XEUtils.toNumber(sYOpts.oSize) : (browse.edge ? 10 : 0))",
          "6144:         this.updateScrollYData()",
          "6146:         this.updateScrollYSpace()",
          "6148:       this.$nextTick(this.updateStyle)",
          "",
          "[Added Lines]",
          "6258:         $xeTable.updateScrollYData()",
          "6270:         const { visibleSize: visibleXSize } = handleVirtualXVisible($xeTable)",
          "6271:         const offsetXSize = Math.max(0, sXOpts.oSize ? XEUtils.toNumber(sXOpts.oSize) : (browse.edge ? 5 : 0))",
          "6275:         $xeTable.updateScrollXData()",
          "6277:         $xeTable.updateScrollXSpace()",
          "6284:       const { visibleSize: visibleYSize } = handleVirtualYVisible($xeTable)",
          "6286:         const offsetYSize = Math.max(0, sYOpts.oSize ? XEUtils.toNumber(sYOpts.oSize) : (browse.edge ? 10 : 0))",
          "6290:         $xeTable.updateScrollYData()",
          "6292:         $xeTable.updateScrollYSpace()",
          "6294:       $xeTable.$nextTick(this.updateStyle)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6161:     this.tableColumn = tableColumn",
          "6162:   },",
          "6163:   updateScrollXData () {",
          "6168:     })",
          "6169:   },",
          "",
          "[Removed Lines]",
          "6165:     return this.$nextTick().then(() => {",
          "6166:       this.handleTableColumn()",
          "6167:       this.updateScrollXSpace()",
          "",
          "[Added Lines]",
          "6310:     const $xeTable = this",
          "6311:     const props = $xeTable",
          "6313:     const { showOverflow } = props",
          "6315:     return $xeTable.$nextTick().then(() => {",
          "6316:       $xeTable.handleTableColumn()",
          "6317:       calcCellHeight($xeTable)",
          "6318:       $xeTable.updateScrollXSpace()",
          "6319:       if (!showOverflow) {",
          "6320:         $xeTable.updateScrollYSpace()",
          "6321:       }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6213:     const $xeTable = this",
          "6218:       calcCellHeight($xeTable)",
          "6220:     })",
          "6221:   },",
          "",
          "[Removed Lines]",
          "6216:     return this.$nextTick().then(() => {",
          "6217:       this.handleTableData()",
          "6219:       this.updateScrollYSpace()",
          "",
          "[Added Lines]",
          "6370:     return $xeTable.$nextTick().then(() => {",
          "6371:       $xeTable.handleTableData()",
          "6373:       $xeTable.updateScrollYSpace()",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6617: } as any",
          "6622: funcs.forEach(name => {",
          "6623:   Methods[name] = function (...args: any[]) {",
          "",
          "[Removed Lines]",
          "6620: const funcs = 'setFilter,openFilter,clearFilter,getCheckedFilters,updateFilterOptionStatus,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,getCopyCellAreas,clearCopyCellArea,setCellAreas,openFNR,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,fullValidateField,validateField,openExport,closeExport,openPrint,closePrint,getPrintHtml,exportData,openImport,closeImport,importData,saveFile,readFile,importByFile,print,openCustom,closeCustom,saveCustom,cancelCustom,resetCustom,toggleCustomAllCheckbox,setCustomAllCheckbox'.split(',')",
          "",
          "[Added Lines]",
          "6774: const funcs = 'setFilter,openFilter,clearFilter,saveFilterPanel,resetFilterPanel,getCheckedFilters,updateFilterOptionStatus,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,getCopyCellAreas,clearCopyCellArea,setCellAreas,openFNR,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,fullValidateField,validateField,openExport,closeExport,openPrint,closePrint,getPrintHtml,exportData,openImport,closeImport,importData,saveFile,readFile,importByFile,print,openCustom,closeCustom,saveCustom,cancelCustom,resetCustom,toggleCustomAllCheckbox,setCustomAllCheckbox'.split(',')",
          "",
          "---------------"
        ],
        "packages/ui/index.ts||packages/ui/index.ts": [
          "File: packages/ui/index.ts -> packages/ui/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     resizeConfig: {",
          "41:     },",
          "42:     radioConfig: {",
          "",
          "[Removed Lines]",
          "40:       refreshDelay: 250",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/ui/src/dom.ts||packages/ui/src/dom.ts": [
          "File: packages/ui/src/dom.ts -> packages/ui/src/dom.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   return 0",
          "82: }",
          "85:   if (elem) {",
          "86:     elem.scrollTop = scrollTop",
          "87:   }",
          "88: }",
          "91:   if (elem) {",
          "92:     elem.scrollLeft = scrollLeft",
          "93:   }",
          "",
          "[Removed Lines]",
          "84: export function setScrollTop (elem: HTMLElement | null, scrollTop: number) {",
          "90: export function setScrollLeft (elem: HTMLElement | null, scrollLeft: number) {",
          "",
          "[Added Lines]",
          "84: export function setScrollTop (elem: HTMLElement | null | undefined, scrollTop: number) {",
          "90: export function setScrollLeft (elem: HTMLElement | null | undefined, scrollLeft: number) {",
          "",
          "---------------"
        ],
        "styles/components/table.scss||styles/components/table.scss": [
          "File: styles/components/table.scss -> styles/components/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: .vxe-table--cell-main-area,",
          "157: .vxe-table--cell-extend-area,",
          "158: .vxe-table--cell-active-area,",
          "160:   display: none;",
          "161:   position: absolute;",
          "162:   pointer-events: none;",
          "163:   z-index: 1;",
          "164: }",
          "166: .vxe-table--fixed-left-wrapper,",
          "167: .vxe-table--fixed-right-wrapper {",
          "168:   .vxe-table--checkbox-range,",
          "",
          "[Removed Lines]",
          "159: .vxe-table--cell-copy-area {",
          "",
          "[Added Lines]",
          "159: .vxe-table--cell-copy-area,",
          "160: .vxe-table--cell-status {",
          "167: .vxe-table--cell-status {",
          "168:   top: 0;",
          "169:   left: 0;",
          "170:   width: var(--vxe-ui-table-cell-area-status-border-width);",
          "171:   height: 0;",
          "172:   background-color:  var(--vxe-ui-font-primary-color);",
          "173: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1357:           }",
          "1358:         }",
          "1359:       }",
          "1360:     }",
          "1361:   }",
          "1362:   &.size--medium {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1369:       & > .vxe-cell {",
          "1370:         max-height: var(--vxe-ui-table-row-height-default);",
          "1371:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1365:     .vxe-footer--column {",
          "1366:       &.col--ellipsis {",
          "1367:         @extend %MediumColumnHeight;",
          "1368:       }",
          "1369:     }",
          "1370:     .vxe-cell--checkbox {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1380:         & > .vxe-cell {",
          "1381:           max-height: var(--vxe-ui-table-row-height-medium);",
          "1382:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1380:     .vxe-footer--column {",
          "1381:       &.col--ellipsis {",
          "1382:         @extend %SmallColumnHeight;",
          "1383:       }",
          "1384:     }",
          "1385:     .vxe-cell--checkbox {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1398:         & > .vxe-cell {",
          "1399:           max-height: var(--vxe-ui-table-row-height-small);",
          "1400:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1395:     .vxe-footer--column {",
          "1396:       &.col--ellipsis {",
          "1397:         @extend %MiniColumnHeight;",
          "1398:       }",
          "1399:     }",
          "1400:     .vxe-cell--checkbox {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1416:         & > .vxe-cell {",
          "1417:           max-height: var(--vxe-ui-table-row-height-mini);",
          "1418:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1466:       pointer-events: auto;",
          "1467:     }",
          "1468:     .vxe-cell--valid-error-theme-beautify {",
          "1470:       color: #fff;",
          "1472:       .vxe-cell--valid-error-msg {",
          "1473:         background: transparent;",
          "1474:       }",
          "",
          "[Removed Lines]",
          "1469:       padding: 0.4em 0.8em;",
          "1471:       background-color: #f56c6c;",
          "",
          "[Added Lines]",
          "1490:       padding: 0.2em 0.6em 0.3em 0.6em;",
          "1492:       background-color: var(--vxe-ui-table-validate-error-color);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e14c8e7ea2ef118d244b1e7a46448918bb4a83f1",
      "candidate_info": {
        "commit_hash": "e14c8e7ea2ef118d244b1e7a46448918bb4a83f1",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/e14c8e7ea2ef118d244b1e7a46448918bb4a83f1",
        "files": [
          "package.json",
          "packages/switch/src/switch.js",
          "styles/switch.scss"
        ],
        "message": "switch \u589e\u52a0\u53c2\u6570 openActiveIcon\u3001closeActiveIcon",
        "before_after_code_files": [
          "packages/switch/src/switch.js||packages/switch/src/switch.js",
          "styles/switch.scss||styles/switch.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/switch/src/switch.js||packages/switch/src/switch.js": [
          "File: packages/switch/src/switch.js -> packages/switch/src/switch.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     openValue: { type: [String, Number, Boolean], default: true },",
          "17:     closeValue: { type: [String, Number, Boolean], default: false },",
          "18:     openIcon: String,",
          "20:   },",
          "21:   inject: {",
          "22:     $xeform: {",
          "",
          "[Removed Lines]",
          "19:     closeIcon: String",
          "",
          "[Added Lines]",
          "19:     closeIcon: String,",
          "20:     openActiveIcon: String,",
          "21:     closeActiveIcon: String",
          "",
          "---------------"
        ],
        "styles/switch.scss||styles/switch.scss": [
          "File: styles/switch.scss -> styles/switch.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     .vxe-switch--icon {",
          "24:       left: 100%;",
          "25:       transform: translateX(-1.4em);",
          "26:     }",
          "27:   }",
          "28:   &.is--off {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:       color: $vxe-primary-color;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:     .vxe-switch--icon {",
          "34:       left: 0.2em;",
          "35:       transform: translateX(0);",
          "36:     }",
          "37:   }",
          "38:   &.is--on .vxe-switch--label-off,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:       color: $vxe-switch-close-background-color;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:       .vxe-switch--button {",
          "64:         background-color: $vxe-primary-lighten-color;",
          "65:       }",
          "66:     }",
          "67:     &.is--off {",
          "68:       .vxe-switch--button {",
          "69:         background-color: $vxe-switch-disabled-background-color;",
          "70:       }",
          "71:     }",
          "72:   }",
          "73:   .vxe-switch--button {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:       .vxe-switch--icon {",
          "69:         color: $vxe-primary-lighten-color;",
          "70:       }",
          "76:       .vxe-switch--icon {",
          "77:         color: $vxe-switch-disabled-background-color;",
          "78:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:     left: 0;",
          "94:     width: 1.2em;",
          "95:     height: 1.2em;",
          "96:     border-radius: 50%;",
          "97:     background-color: $vxe-switch-icon-background-color;",
          "98:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     line-height: 1.4em;",
          "105:     text-align: center;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8dd5e8605ce0b52e6951b968e26a258ddf8441d3",
      "candidate_info": {
        "commit_hash": "8dd5e8605ce0b52e6951b968e26a258ddf8441d3",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/8dd5e8605ce0b52e6951b968e26a258ddf8441d3",
        "files": [
          "packages/custom/src/panel.js",
          "packages/export/src/export-panel.js",
          "packages/input/src/input.js",
          "packages/menu/src/panel.js",
          "packages/select/src/select.js",
          "packages/table/src/methods.js",
          "packages/v-x-e-table/src/conf.js",
          "styles/menu.scss",
          "styles/variable.scss",
          "types/module/menu.d.ts",
          "types/v-x-e-table/renderer.d.ts"
        ],
        "message": "\u4fee\u590d\u81ea\u5b9a\u4e49\u5217 html \u7c7b\u578b\u6e32\u67d3\u95ee\u9898",
        "before_after_code_files": [
          "packages/custom/src/panel.js||packages/custom/src/panel.js",
          "packages/export/src/export-panel.js||packages/export/src/export-panel.js",
          "packages/input/src/input.js||packages/input/src/input.js",
          "packages/menu/src/panel.js||packages/menu/src/panel.js",
          "packages/select/src/select.js||packages/select/src/select.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js",
          "styles/menu.scss||styles/menu.scss",
          "styles/variable.scss||styles/variable.scss",
          "types/module/menu.d.ts||types/module/menu.d.ts",
          "types/v-x-e-table/renderer.d.ts||types/v-x-e-table/renderer.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/custom/src/panel.js||packages/custom/src/panel.js": [
          "File: packages/custom/src/panel.js -> packages/custom/src/panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: }",
          "26: const renderSimplePanel = (h, _vm) => {",
          "28:   const { customColumnList, customOpts, isMaxFixedColumn } = $xetable",
          "29:   const { maxHeight } = customStore",
          "30:   const { checkMethod, visibleMethod, allowVisible, allowSort, allowFixed, trigger, placement } = customOpts",
          "",
          "[Removed Lines]",
          "27:   const { _e, $xetable, customStore } = _vm",
          "",
          "[Added Lines]",
          "27:   const { _e, $xetable, customStore, dragColumn } = _vm",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:               ])",
          "100:             ])",
          "101:             : _e(),",
          "108:           !parent && allowFixed",
          "109:             ? h('div', {",
          "110:               class: 'vxe-table-custom--fixed-option'",
          "",
          "[Removed Lines]",
          "102:           h('div', {",
          "103:             class: 'vxe-table-custom--checkbox-label',",
          "104:             attrs: {",
          "105:               title: colTitle",
          "106:             }",
          "107:           }, colTitle),",
          "",
          "[Added Lines]",
          "102:           column.type === 'html'",
          "103:             ? h('div', {",
          "104:               key: '1',",
          "105:               class: 'vxe-table-custom--checkbox-label',",
          "106:               domProps: {",
          "107:                 innerHTML: colTitle",
          "108:               }",
          "109:             }) : h('div', {",
          "110:               key: '0',",
          "111:               class: 'vxe-table-custom--checkbox-label',",
          "112:               attrs: {",
          "113:                 title: colTitle",
          "114:               }",
          "115:             }, colTitle),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:           h('div', {",
          "204:             ref: 'dragHintElemRef',",
          "205:             class: 'vxe-table-custom-popup--drag-hint'",
          "207:         ]),",
          "208:         customOpts.showFooter",
          "209:           ? h('div', {",
          "",
          "[Removed Lines]",
          "206:           }, GlobalConfig.i18n('vxe.custom.cstmDragTarget', [_vm.dragColumn ? _vm.dragColumn.getTitle() : '']))",
          "",
          "[Added Lines]",
          "214:           }, GlobalConfig.i18n('vxe.custom.cstmDragTarget', [dragColumn && dragColumn.type !== 'html' ? dragColumn.getTitle() : '']))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "315:           h('td', {",
          "316:             class: 'vxe-table-custom-popup--column-item col--name'",
          "317:           }, [",
          "324:           ]),",
          "325:           allowResizable",
          "326:             ? h('td', {",
          "",
          "[Removed Lines]",
          "318:             h('div', {",
          "319:               class: 'vxe-table-custom-popup--name',",
          "320:               attrs: {",
          "321:                 title: colTitle",
          "322:               }",
          "323:             }, colTitle)",
          "",
          "[Added Lines]",
          "326:             column.type === 'html'",
          "327:               ? h('div', {",
          "328:                 key: '1',",
          "329:                 class: 'vxe-table-custom-popup--name',",
          "330:                 domProps: {",
          "331:                   innerHTML: colTitle",
          "332:                 }",
          "333:               }) : h('div', {",
          "334:                 key: '0',",
          "335:                 class: 'vxe-table-custom-popup--name',",
          "336:                 attrs: {",
          "337:                   title: colTitle",
          "338:                 }",
          "339:               }, colTitle)",
          "",
          "---------------"
        ],
        "packages/export/src/export-panel.js||packages/export/src/export-panel.js": [
          "File: packages/export/src/export-panel.js -> packages/export/src/export-panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:       const isColGroup = column.children && column.children.length",
          "57:       const isChecked = column.checked",
          "58:       const indeterminate = column.halfChecked",
          "59:       cols.push(",
          "60:         h('li', {",
          "61:           class: ['vxe-export--panel-column-option', `level--${column.level}`, {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:       const isHtml = column.type === 'html'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:           h('span', {",
          "79:             class: ['vxe-checkbox--icon', indeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "80:           }),",
          "84:         ])",
          "85:       )",
          "86:     })",
          "",
          "[Removed Lines]",
          "81:           h('span', {",
          "82:             class: 'vxe-checkbox--label'",
          "83:           }, colTitle)",
          "",
          "[Added Lines]",
          "82:           isHtml",
          "83:             ? h('span', {",
          "84:               key: '1',",
          "85:               class: 'vxe-checkbox--label',",
          "86:               innerHTML: colTitle",
          "87:             })",
          "88:             : h('span', {",
          "89:               key: '0',",
          "90:               class: 'vxe-checkbox--label'",
          "91:             }, colTitle)",
          "",
          "---------------"
        ],
        "packages/input/src/input.js||packages/input/src/input.js": [
          "File: packages/input/src/input.js -> packages/input/src/input.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1297:         const isShiftKey = evnt.shiftKey",
          "1298:         const isAltKey = evnt.altKey",
          "1299:         const keyCode = evnt.keyCode",
          "1300:         if (!isCtrlKey && !isShiftKey && !isAltKey && (keyCode === 32 || ((!exponential || keyCode !== 69) && (keyCode >= 65 && keyCode <= 90)) || (keyCode >= 186 && keyCode <= 188) || keyCode >= 191)) {",
          "1301:           evnt.preventDefault()",
          "1302:         }",
          "1305:         }",
          "1306:       }",
          "1307:       this.triggerEvent(evnt)",
          "",
          "[Removed Lines]",
          "1303:         if (controls) {",
          "1304:           this.numberKeydownEvent(evnt)",
          "",
          "[Added Lines]",
          "1300:         const isEsc = keyCode === 27",
          "1301:         const isUpArrow = keyCode === 38",
          "1302:         const isDwArrow = keyCode === 40",
          "1306:         if (isEsc) {",
          "1307:           this.afterCheckValue()",
          "1308:         } else if (isUpArrow || isDwArrow) {",
          "1309:           if (controls) {",
          "1310:             this.numberKeydownEvent(evnt)",
          "1311:           }",
          "",
          "---------------"
        ],
        "packages/menu/src/panel.js||packages/menu/src/panel.js": [
          "File: packages/menu/src/panel.js -> packages/menu/src/panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { getFuncText } from '../../tools/utils'",
          "3: export default {",
          "4:   name: 'VxeTableMenuPanel',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import GlobalConfig from '../../v-x-e-table/src/conf'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:         key: gIndex",
          "30:       }, options.map((item, index) => {",
          "31:         const hasChildMenus = item.children && item.children.some((child) => child.visible !== false)",
          "32:         return item.visible === false ? null : h('li', {",
          "33:           class: [item.className, {",
          "34:             'link--disabled': item.disabled,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:         const prefixOpts = Object.assign({}, item.prefixConfig)",
          "34:         const suffixOpts = Object.assign({}, item.suffixConfig)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:               }",
          "51:             }",
          "52:           }, [",
          "56:             h('span', {",
          "57:               class: 'vxe-context-menu--link-content'",
          "58:             }, getFuncText(item.name)),",
          "62:           ]),",
          "63:           hasChildMenus ? h('ul', {",
          "64:             class: ['vxe-table--context-menu-clild-wrapper', {",
          "65:               'is--show': item === ctxMenuStore.selected && ctxMenuStore.showChild",
          "66:             }]",
          "67:           }, item.children.map((child, cIndex) => {",
          "68:             return child.visible === false ? null : h('li', {",
          "69:               class: [child.className, {",
          "70:                 'link--disabled': child.disabled,",
          "",
          "[Removed Lines]",
          "53:             h('i', {",
          "54:               class: ['vxe-context-menu--link-prefix', item.prefixIcon]",
          "55:             }),",
          "59:             h('i', {",
          "60:               class: ['vxe-context-menu--link-suffix', hasChildMenus ? item.suffixIcon || 'suffix--haschild' : item.suffixIcon]",
          "61:             })",
          "",
          "[Added Lines]",
          "56:             h('div', {",
          "57:               class: ['vxe-context-menu--link-prefix', prefixOpts.className || '']",
          "58:             }, [",
          "59:               h('i', {",
          "60:                 class: prefixOpts.icon || item.prefixIcon",
          "61:               }),",
          "62:               prefixOpts.content ? h('span', {}, `${prefixOpts.content}`) : _e()",
          "63:             ]),",
          "67:             h('div', {",
          "68:               class: ['vxe-context-menu--link-suffix', suffixOpts.className || '']",
          "69:             }, [",
          "70:               h('i', {",
          "71:                 class: (suffixOpts.icon || item.suffixIcon) || (hasChildMenus ? GlobalConfig.icon.TABLE_MENU_OPTIONS : '')",
          "72:               }),",
          "73:               suffixOpts.content ? h('span', `${suffixOpts.content}`) : _e()",
          "74:             ])",
          "81:             const childPrefixOpts = Object.assign({}, child.prefixConfig)",
          "82:             const childSuffixOpts = Object.assign({}, child.suffixConfig)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:                   }",
          "87:                 }",
          "88:               }, [",
          "92:                 h('span', {",
          "93:                   class: 'vxe-context-menu--link-content'",
          "95:               ])",
          "96:             ])",
          "97:           })) : null",
          "",
          "[Removed Lines]",
          "89:                 h('i', {",
          "90:                   class: ['vxe-context-menu--link-prefix', child.prefixIcon]",
          "91:                 }),",
          "94:                 }, getFuncText(child.name))",
          "",
          "[Added Lines]",
          "104:                 h('div', {",
          "105:                   class: ['vxe-context-menu--link-prefix', childPrefixOpts.className || '']",
          "106:                 }, [",
          "107:                   h('i', {",
          "108:                     class: childPrefixOpts.icon || child.prefixIcon",
          "109:                   }),",
          "110:                   childPrefixOpts.content ? h('span', `${childPrefixOpts.content}`) : _e()",
          "111:                 ]),",
          "114:                 }, getFuncText(child.name)),",
          "115:                 h('div', {",
          "116:                   class: ['vxe-context-menu--link-suffix', childSuffixOpts.className || '']",
          "117:                 }, [",
          "118:                   h('i', {",
          "119:                     class: childSuffixOpts.icon",
          "120:                   }),",
          "121:                   childSuffixOpts.content ? h('span', `${childSuffixOpts.content}`) : _e()",
          "122:                 ])",
          "",
          "---------------"
        ],
        "packages/select/src/select.js||packages/select/src/select.js": [
          "File: packages/select/src/select.js -> packages/select/src/select.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:     refreshOption () {",
          "554:       const { isGroup, fullOptionList, fullGroupList, filterable, filterMethod, searchValue, labelField, groupLabelField } = this",
          "555:       if (isGroup) {",
          "556:         if (filterable && filterMethod) {",
          "558:         } else if (filterable) {",
          "560:         } else {",
          "561:           this.visibleGroupList = fullGroupList.filter(isOptionVisible)",
          "562:         }",
          "563:       } else {",
          "564:         if (filterable && filterMethod) {",
          "566:         } else if (filterable) {",
          "568:         } else {",
          "569:           this.visibleOptionList = fullOptionList.filter(isOptionVisible)",
          "570:         }",
          "",
          "[Removed Lines]",
          "557:           this.visibleGroupList = fullGroupList.filter(group => isOptionVisible(group) && filterMethod({ group, option: null, searchValue }))",
          "559:           this.visibleGroupList = fullGroupList.filter(group => isOptionVisible(group) && (!searchValue || `${group[groupLabelField]}`.indexOf(searchValue) > -1))",
          "565:           this.visibleOptionList = fullOptionList.filter(option => isOptionVisible(option) && filterMethod({ group: null, option, searchValue }))",
          "567:           this.visibleOptionList = fullOptionList.filter(option => isOptionVisible(option) && (!searchValue || `${option[labelField]}`.indexOf(searchValue) > -1))",
          "",
          "[Added Lines]",
          "555:       const searchStr = `${searchValue || ''}`.toLowerCase()",
          "558:           this.visibleGroupList = fullGroupList.filter(group => isOptionVisible(group) && filterMethod({ group, option: null, searchValue: searchStr }))",
          "560:           this.visibleGroupList = fullGroupList.filter(group => isOptionVisible(group) && (!searchStr || `${group[groupLabelField]}`.toLowerCase().indexOf(searchStr) > -1))",
          "566:           this.visibleOptionList = fullOptionList.filter(option => isOptionVisible(option) && filterMethod({ group: null, option, searchValue: searchStr }))",
          "568:           this.visibleOptionList = fullOptionList.filter(option => isOptionVisible(option) && (!searchStr || `${option[labelField]}`.toLowerCase().indexOf(searchStr) > -1))",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1371:             const { filterMethod, filterRender, field } = column",
          "1372:             const compConf = isEnableConf(filterRender) ? VXETable.renderer.get(filterRender.name) : null",
          "1373:             const compFilterMethod = compConf && compConf.renderFilter ? (compConf.tableFilterMethod || compConf.filterMethod) : null",
          "1375:             const cellValue = UtilTools.getCellValue(row, column)",
          "1376:             if (filterMethod) {",
          "1377:               return itemList.some((item) => filterMethod({ value: item.value, option: item, cellValue, row, column, $table: this }))",
          "",
          "[Removed Lines]",
          "1374:             const defaultFilterMethod = compConf ? (compConf.defaultTableFilterMethod || compConf.defaultFilterMethod) : null",
          "",
          "[Added Lines]",
          "1374:             const defaultFilterMethod = compConf ? (compConf.tableFilterDefaultMethod || compConf.defaultTableFilterMethod || compConf.defaultFilterMethod) : null",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js": [
          "File: packages/v-x-e-table/src/conf.js -> packages/v-x-e-table/src/conf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     TABLE_RADIO_CHECKED: iconPrefix + 'radio-checked-fill',",
          "186:     TABLE_RADIO_UNCHECKED: iconPrefix + 'radio-unchecked',",
          "187:     TABLE_CUSTOM_SORT: iconPrefix + 'drag-handle',",
          "190:     BUTTON_DROPDOWN: iconPrefix + 'arrow-down',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:     TABLE_MENU_OPTIONS: iconPrefix + 'arrow-right',",
          "",
          "---------------"
        ],
        "styles/menu.scss||styles/menu.scss": [
          "File: styles/menu.scss -> styles/menu.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   font-family: $vxe-font-family;",
          "22:   background-color: $vxe-table-menu-background-color;",
          "23: }",
          "61:   .vxe-context-menu--link {",
          "64: }",
          "65: .vxe-context-menu--option-wrapper,",
          "66: .vxe-table--context-menu-clild-wrapper {",
          "",
          "[Removed Lines]",
          "24: .vxe-context-menu--link {",
          "25:   display: block;",
          "26:   padding: 0 2.5em;",
          "27:   width: $vxe-table-menu-item-width;",
          "28:   line-height: 26px;",
          "29:   color: $vxe-font-color;",
          "30:   cursor: pointer;",
          "31:   .vxe-context-menu--link-prefix,",
          "32:   .vxe-context-menu--link-suffix {",
          "33:     position: absolute;",
          "34:     top: 5px;",
          "35:     margin-right: 5px;",
          "36:     font-size: 16px;",
          "37:   }",
          "38:   .vxe-context-menu--link-prefix {",
          "39:     left: 5px;",
          "40:   }",
          "41:   .vxe-context-menu--link-suffix {",
          "42:     right: 5px;",
          "43:     &.suffix--haschild {",
          "44:       top: 8px;",
          "45:       &:before {",
          "46:         position: absolute;",
          "47:         content: \"\";",
          "48:         border: 4px solid transparent;",
          "49:         border-left-color: #727272;",
          "50:       }",
          "51:     }",
          "52:   }",
          "53:   .vxe-context-menu--link-content {",
          "54:     display: block;",
          "55:     overflow: hidden;",
          "56:     text-overflow: ellipsis;",
          "57:     white-space: nowrap;",
          "58:   }",
          "59: }",
          "60: .vxe-table--context-menu-clild-wrapper {",
          "62:     padding: 0 2em 0 2.5em;",
          "63:   }",
          "",
          "[Added Lines]",
          "25:     display: flex;",
          "26:     flex-direction: row;",
          "27:     width: $vxe-table-menu-item-width;",
          "28:     line-height: 26px;",
          "29:     padding: 0 0.8em;",
          "30:     color: $vxe-font-color;",
          "31:     cursor: pointer;",
          "32:     .vxe-context-menu--link-prefix,",
          "33:     .vxe-context-menu--link-suffix {",
          "34:       min-width: 2em;",
          "35:       flex-shrink: 0;",
          "36:       text-align: center;",
          "37:       padding: 0 0.2em;",
          "38:     }",
          "39:     .vxe-context-menu--link-content {",
          "40:       flex-grow: 1;",
          "41:       padding: 0 0.2em;",
          "42:       overflow: hidden;",
          "43:       text-overflow: ellipsis;",
          "44:       white-space: nowrap;",
          "45:     }",
          "",
          "---------------"
        ],
        "styles/variable.scss||styles/variable.scss": [
          "File: styles/variable.scss -> styles/variable.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: $vxe-table-filter-panel-background-color: #fff !default;",
          "134: $vxe-table-menu-background-color: #fff !default;",
          "",
          "[Removed Lines]",
          "133: $vxe-table-menu-item-width: 178px !default;",
          "",
          "[Added Lines]",
          "133: $vxe-table-menu-item-width: 198px !default;",
          "",
          "---------------"
        ],
        "types/module/menu.d.ts||types/module/menu.d.ts": [
          "File: types/module/menu.d.ts -> types/module/menu.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: export interface MenuFirstOption {",
          "22:   code?: string;",
          "23:   name?: string;",
          "26:   className?: string;",
          "27:   visible?: boolean;",
          "28:   disabled?: boolean;",
          "",
          "[Removed Lines]",
          "24:   prefixIcon?: string;",
          "25:   suffixIcon?: string;",
          "",
          "[Added Lines]",
          "24:   prefixConfig?: {",
          "25:     icon?: string",
          "26:     content?: string",
          "27:     className?: string",
          "28:   }",
          "33:   prefixIcon?: string",
          "34:   suffixConfig?: {",
          "35:     icon?: string",
          "36:     content?: string",
          "37:     className?: string",
          "38:   }",
          "43:   suffixIcon?: string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: export interface MenuChildOption {",
          "35:   code?: string;",
          "36:   name?: string;",
          "38:   className?: string;",
          "39:   visible?: boolean;",
          "40:   disabled?: boolean;",
          "",
          "[Removed Lines]",
          "37:   prefixIcon?: string;",
          "",
          "[Added Lines]",
          "55:   prefixConfig?: {",
          "56:     icon?: string",
          "57:     content?: string",
          "58:     className?: string",
          "59:   }",
          "64:   prefixIcon?: string",
          "65:   suffixConfig?: {",
          "66:     icon?: string",
          "67:     content?: string",
          "68:     className?: string",
          "69:   }",
          "74:   suffixIcon?: string",
          "",
          "---------------"
        ],
        "types/v-x-e-table/renderer.d.ts||types/v-x-e-table/renderer.d.ts": [
          "File: types/v-x-e-table/renderer.d.ts -> types/v-x-e-table/renderer.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   tableFilterResetMethod?(params: ColumnFilterResetParams): void;",
          "75:   defaultFilterMethod?(params: ColumnFilterMethodParams): boolean;",
          "76:   defaultTableFilterMethod?(params: ColumnFilterMethodParams): boolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:   tableFilterDefaultMethod?(params: ColumnFilterMethodParams): boolean;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1b37415e57b4aad9f831e5d046cb4f00de6b6da",
      "candidate_info": {
        "commit_hash": "e1b37415e57b4aad9f831e5d046cb4f00de6b6da",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/e1b37415e57b4aad9f831e5d046cb4f00de6b6da",
        "files": [
          "examples/views/icon/Icon.vue",
          "packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js",
          "packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js",
          "packages/table/src/columnInfo.js",
          "packages/table/src/methods.js",
          "packages/table/src/table.js",
          "packages/table/src/util.js",
          "packages/toolbar/src/toolbar.js",
          "packages/v-x-e-table/src/conf.js",
          "styles/icon.scss",
          "styles/icon/iconfont.ttf",
          "styles/icon/iconfont.woff",
          "styles/icon/iconfont.woff2",
          "styles/table.scss",
          "styles/toolbar.scss",
          "types/column.d.ts",
          "types/toolbar.d.ts"
        ],
        "message": "\u4f18\u5316\u56fa\u5b9a\u5217",
        "before_after_code_files": [
          "examples/views/icon/Icon.vue||examples/views/icon/Icon.vue",
          "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js",
          "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js",
          "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "packages/table/src/util.js||packages/table/src/util.js",
          "packages/toolbar/src/toolbar.js||packages/toolbar/src/toolbar.js",
          "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js",
          "styles/icon.scss||styles/icon.scss",
          "styles/table.scss||styles/table.scss",
          "styles/toolbar.scss||styles/toolbar.scss",
          "types/column.d.ts||types/column.d.ts",
          "types/toolbar.d.ts||types/toolbar.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/icon/Icon.vue||examples/views/icon/Icon.vue": [
          "File: examples/views/icon/Icon.vue -> examples/views/icon/Icon.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   data () {",
          "26:     return {",
          "27:       prefixClass: 'vxe-icon-',",
          "29:       demoCodes: [",
          "30:         `",
          "31:         <i class=\"vxe-icon-delete\"></i>",
          "",
          "[Removed Lines]",
          "28:       iconList: ['add', 'alipay', 'arrow-double-left', 'arrow-double-right', 'arrow-down', 'arrow-left', 'arrow-right', 'arrow-up', 'bell', 'bell-fill', 'calendar', 'caret-down', 'caret-left', 'caret-right', 'caret-up', 'chart-bar-x', 'chart-bar-y', 'chart-line', 'chart-pie', 'chart-radar', 'chat', 'chat-fill', 'check', 'checkbox-checked', 'checkbox-indeterminate', 'checkbox-unchecked', 'close', 'cloud-download', 'cloud-upload', 'cloudy', 'comment', 'company', 'copy', 'custom-column', 'cut', 'delete', 'delete-fill', 'dot', 'download', 'edit', 'ellipsis-h', 'ellipsis-v', 'envelope', 'envelope-fill', 'envelope-open', 'envelope-open-fill', 'error-circle', 'error-circle-fill', 'exclamation', 'eye-fill', 'eye-fill-close', 'file-excel', 'file-image', 'file-markdown', 'file-pdf', 'file-ppt', 'file-txt', 'file-word', 'file-zip', 'fixed', 'fixed-fill', 'flag', 'flag-fill', 'flow-branch', 'folder', 'folder-open', 'fullscreen', 'funnel', 'funnel-clear', 'goods', 'goods-fill', 'heavy-rain', 'home', 'home-fill', 'indicator', 'info-circle', 'info-circle-fill', 'information', 'lightning', 'link', 'location', 'location-fill', 'lock', 'lock-fill', 'maximize', 'menu', 'merge-cells', 'message-fill', 'microphone', 'microphone-fill', 'minimize', 'minus', 'moon', 'num-list', 'paste', 'picture', 'picture-fill', 'platform', 'print', 'question', 'question-circle', 'question-circle-fill', 'radio-checked', 'radio-unchecked', 'refresh', 'repeat', 'save', 'search', 'search-zoom-in', 'send', 'send-fill', 'setting', 'setting-fill', 'share', 'share-fill', 'sort', 'sort-alpha-asc', 'sort-alpha-desc', 'sort-numeric-asc', 'sort-numeric-desc', 'spinner', 'square', 'square-caret-right', 'square-caret-right-fill', 'square-checked', 'square-checked-fill', 'square-close', 'square-close-fill', 'square-down', 'square-down-fill', 'square-fill', 'square-left', 'square-left-fill', 'square-minus', 'square-minus-fill', 'square-plus', 'square-plus-fill', 'square-plus-square', 'square-right', 'square-right-fill', 'square-square', 'square-up', 'square-up-fill', 'star', 'star-fill', 'star-half', 'success-circle', 'success-circle-fill', 'sunny', 'swap', 'swap-left', 'swap-right', 'table', 'undo', 'unlock', 'unlock-fill', 'upload', 'user', 'user-fill', 'voice', 'voice-fill', 'warning-circle', 'warning-triangle', 'warning-triangle-fill', 'warnion-circle-fill', 'wechat', 'zoom-in', 'zoom-out'],",
          "",
          "[Added Lines]",
          "28:       iconList: ['time', 'feedback', 'lightning', 'cloudy', 'heavy-rain', 'moon', 'sunny', 'location', 'location-fill', 'microphone-fill', 'microphone', 'share', 'share-fill', 'flag', 'flag-fill', 'platform', 'goods-fill', 'goods', 'funnel-clear', 'envelope', 'envelope-open-fill', 'envelope-open', 'envelope-fill', 'message-fill', 'chat', 'chat-fill', 'send', 'send-fill', 'user', 'user-fill', 'wechat', 'alipay', 'indicator', 'file-excel', 'file-pdf', 'file-image', 'file-markdown', 'file-ppt', 'file-word', 'file-zip', 'file-txt', 'refresh', 'checkbox-unchecked', 'information', 'info-circle-fill', 'info-circle', 'chart-radar', 'chart-bar-x', 'repeat', 'voice-fill', 'voice', 'flow-branch', 'comment', 'folder', 'folder-open', 'picture', 'picture-fill', 'bell', 'bell-fill', 'undo', 'home', 'home-fill', 'checkbox-checked', 'checkbox-indeterminate', 'fullscreen', 'minimize', 'print', 'upload', 'download', 'cloud-upload', 'cloud-download', 'spinner', 'close', 'custom-column', 'edit', 'zoom-in', 'caret-down', 'caret-up', 'caret-right', 'caret-left', 'square-checked-fill', 'square-close', 'square-down', 'square-left', 'square-caret-right', 'square-minus', 'square-plus', 'square-right', 'square-up', 'square-checked', 'square-down-fill', 'square-minus-fill', 'square-close-fill', 'square-left-fill', 'square-caret-right-fill', 'square-up-fill', 'square-right-fill', 'square-plus-fill', 'square-plus-square', 'square-fill', 'square-square', 'sort-alpha-desc', 'sort-alpha-asc', 'sort-numeric-asc', 'sort-numeric-desc', 'star-fill', 'star', 'star-half', 'lock-fill', 'unlock-fill', 'question', 'exclamation', 'ellipsis-h', 'ellipsis-v', 'save', 'setting', 'setting-fill', 'link', 'sort', 'chart-pie', 'chart-line', 'swap', 'num-list', 'copy', 'company', 'swap-right', 'swap-left', 'table', 'merge-cells', 'paste', 'cut', 'lock', 'unlock', 'chart-bar-y', 'fixed-left-fill', 'fixed-left', 'fixed-right-fill', 'fixed-right', 'swap-down', 'swap-up', 'square', 'check', 'question-circle-fill', 'error-circle-fill', 'delete', 'dot', 'success-circle', 'delete-fill', 'minus', 'maximize', 'question-circle', 'warning-circle', 'warnion-circle-fill', 'eye-fill', 'search', 'funnel', 'eye-fill-close', 'search-zoom-in', 'arrow-right', 'arrow-left', 'arrow-up', 'calendar', 'arrow-down', 'warning-triangle', 'add', 'arrow-double-left', 'arrow-double-right', 'menu', 'warning-triangle-fill', 'error-circle', 'zoom-out', 'success-circle-fill', 'radio-checked', 'radio-unchecked'],",
          "",
          "---------------"
        ],
        "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js": [
          "File: packages/locale/lang/en-US.js -> packages/locale/lang/en-US.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:       customTitle: 'Column settings',",
          "139:       customAll: 'All',",
          "140:       customConfirm: 'Confirm',",
          "142:     },",
          "143:     grid: {",
          "144:       selectOneRecord: 'Please choose at least one piece of record!',",
          "",
          "[Removed Lines]",
          "141:       customRestore: 'Reset'",
          "",
          "[Added Lines]",
          "141:       customRestore: 'Reset',",
          "142:       maxFixedCol: 'The maximum number of fixed columns cannot exceed {0}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:       custom: 'Column settings',",
          "248:       customAll: 'All',",
          "249:       customConfirm: 'Confirm',",
          "251:     },",
          "252:     input: {",
          "253:       date: {",
          "",
          "[Removed Lines]",
          "250:       customRestore: 'Restore'",
          "",
          "[Added Lines]",
          "251:       customRestore: 'Reset',",
          "252:       fixedLeft: 'Fixed on the left side',",
          "253:       fixedRight: 'Fixed on the right side',",
          "254:       cancelfixed: 'Unfixed'",
          "",
          "---------------"
        ],
        "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js": [
          "File: packages/locale/lang/es-ES.js -> packages/locale/lang/es-ES.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:       customTitle: 'Configuraciones de columna',",
          "139:       customAll: 'Todo',",
          "140:       customConfirm: 'Confirmar',",
          "142:     },",
          "143:     grid: {",
          "144:       selectOneRecord: '\u00a1Seleccione al menos un registro!',",
          "",
          "[Removed Lines]",
          "141:       customRestore: 'Restaurar'",
          "",
          "[Added Lines]",
          "141:       customRestore: 'Restaurar',",
          "142:       maxFixedCol: '\u6700\u5927\u56fa\u5b9a\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:       actualizar: 'Actualizar',",
          "245:       zoomIn: 'Pantalla completa',",
          "246:       zoomOut: 'Reducci\u00f3n',",
          "251:     },",
          "252:     entrada: {",
          "253:       fecha: {",
          "",
          "[Removed Lines]",
          "247:       personalizado: 'Configuraci\u00f3n de columna',",
          "248:       personalizadoTodo: 'Todo',",
          "249:       personalizadoConfirmar: 'Confirmar',",
          "250:       personalizadoRestaurar: 'Restaurar'",
          "",
          "[Added Lines]",
          "248:       custom: 'Configuraci\u00f3n de columna',",
          "249:       customAll: 'Todo',",
          "250:       customConfirm: 'Confirmar',",
          "251:       customRestore: 'Restaurar',",
          "252:       fixedLeft: '\u56fa\u5b9a\u5728\u5de6\u4fa7',",
          "253:       fixedRight: '\u56fa\u5b9a\u5728\u53f3\u4fa7',",
          "254:       cancelfixed: '\u53d6\u6d88\u56fa\u5b9a'",
          "",
          "---------------"
        ],
        "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js": [
          "File: packages/locale/lang/ja-JP.js -> packages/locale/lang/ja-JP.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:       customTitle: '\u5217\u8bbe\u7f6e',",
          "139:       customAll: '\u5168\u90e8',",
          "140:       customConfirm: '\u786e\u8ba4',",
          "142:     },",
          "143:     grid: {",
          "144:       selectOneRecord: '\u5c11\u306a\u304f\u3068\u30821\u3064\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044',",
          "",
          "[Removed Lines]",
          "141:       customRestore: '\u30ea\u30bb\u30c3\u30c8'",
          "",
          "[Added Lines]",
          "141:       customRestore: '\u30ea\u30bb\u30c3\u30c8',",
          "142:       maxFixedCol: '\u6700\u5927\u56fa\u5b9a\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:       custom: '\u30ab\u30b9\u30bf\u30e0\u8a2d\u5b9a',",
          "248:       customAll: '\u5168\u90e8',",
          "249:       customConfirm: '\u78ba\u5b9a',",
          "251:     },",
          "252:     input: {",
          "253:       date: {",
          "",
          "[Removed Lines]",
          "250:       customRestore: '\u5fa9\u5143'",
          "",
          "[Added Lines]",
          "251:       customRestore: '\u30ea\u30bb\u30c3\u30c8',",
          "252:       fixedLeft: '\u56fa\u5b9a\u5728\u5de6\u4fa7',",
          "253:       fixedRight: '\u56fa\u5b9a\u5728\u53f3\u4fa7',",
          "254:       cancelfixed: '\u53d6\u6d88\u56fa\u5b9a'",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js": [
          "File: packages/locale/lang/zh-CN.js -> packages/locale/lang/zh-CN.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:       customTitle: '\u5217\u8bbe\u7f6e',",
          "139:       customAll: '\u5168\u90e8',",
          "140:       customConfirm: '\u786e\u8ba4',",
          "142:     },",
          "143:     grid: {",
          "144:       selectOneRecord: '\u8bf7\u81f3\u5c11\u9009\u62e9\u4e00\u6761\u8bb0\u5f55\uff01',",
          "",
          "[Removed Lines]",
          "141:       customRestore: '\u91cd\u7f6e'",
          "",
          "[Added Lines]",
          "141:       customRestore: '\u91cd\u7f6e',",
          "142:       maxFixedCol: '\u6700\u5927\u56fa\u5b9a\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:       custom: '\u5217\u8bbe\u7f6e',",
          "248:       customAll: '\u5168\u90e8',",
          "249:       customConfirm: '\u786e\u8ba4',",
          "251:     },",
          "252:     input: {",
          "253:       date: {",
          "",
          "[Removed Lines]",
          "250:       customRestore: '\u8fd8\u539f'",
          "",
          "[Added Lines]",
          "251:       customRestore: '\u91cd\u7f6e',",
          "252:       fixedLeft: '\u56fa\u5b9a\u5728\u5de6\u4fa7',",
          "253:       fixedRight: '\u56fa\u5b9a\u5728\u53f3\u4fa7',",
          "254:       cancelfixed: '\u53d6\u6d88\u56fa\u5b9a'",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js": [
          "File: packages/locale/lang/zh-TC.js -> packages/locale/lang/zh-TC.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:       customTitle: '\u5217\u8a2d\u5b9a',",
          "139:       customAll: '\u5168\u90e8',",
          "140:       customConfirm: '\u78ba\u8a8d',",
          "142:     },",
          "143:     grid: {",
          "144:       selectOneRecord: '\u8acb\u81f3\u5c11\u9078\u64c7\u4e00\u689d\u8a18\u9304\uff01',",
          "",
          "[Removed Lines]",
          "141:       customRestore: '\u91cd\u7f6e'",
          "",
          "[Added Lines]",
          "141:       customRestore: '\u91cd\u7f6e',",
          "142:       maxFixedCol: '\u6700\u5927\u56fa\u5b9a\u5217\u7684\u6578\u91cf\u4e0d\u80fd\u8d85\u904e {0} \u500b'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:       custom: '\u5217\u8a2d\u5b9a',",
          "248:       customAll: '\u5168\u90e8',",
          "249:       customConfirm: '\u78ba\u8a8d',",
          "251:     },",
          "252:     input: {",
          "253:       date: {",
          "",
          "[Removed Lines]",
          "250:       customRestore: '\u9084\u539f'",
          "",
          "[Added Lines]",
          "251:       customRestore: '\u91cd\u7f6e',",
          "252:       fixedLeft: '\u56fa\u5b9a\u5728\u5de6\u5074',",
          "253:       fixedRight: '\u56fa\u5b9a\u5728\u53f3\u5074',",
          "254:       cancelfixed: '\u53d6\u6d88\u56fa\u5b9a'",
          "",
          "---------------"
        ],
        "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js": [
          "File: packages/table/src/columnInfo.js -> packages/table/src/columnInfo.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:       colSpan: 1,",
          "114:       order: null,",
          "115:       sortTime: 0,",
          "116:       renderWidth: 0,",
          "117:       renderHeight: 0,",
          "118:       resizeWidth: 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:       customOrder: 0,",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import GlobalConfig from '../../v-x-e-table/src/conf'",
          "3: import Cell from './cell'",
          "4: import VXETable from '../../v-x-e-table'",
          "6: import UtilTools, { eqEmptyValue, isEnableConf, getFuncText } from '../../tools/utils'",
          "7: import DomTools, { browse, getPaddingTopBottomSize, setScrollTop, setScrollLeft } from '../../tools/dom'",
          "8: import { formats } from '../../v-x-e-table/src/formats'",
          "",
          "[Removed Lines]",
          "5: import { getRowid, getRowkey, clearTableAllStatus, handleFieldOrColumn, restoreScrollLocation, restoreScrollListener, toTreePathSeq, rowToVisible, colToVisible } from './util'",
          "",
          "[Added Lines]",
          "5: import { getRowid, getRowkey, clearTableAllStatus, handleFieldOrColumn, getRootColumn, restoreScrollLocation, restoreScrollListener, toTreePathSeq, rowToVisible, colToVisible } from './util'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1063:   isUpdateByRow (row, field) {",
          "1065:     if (keepSource) {",
          "1066:       let oRow, property",
          "1067:       const rowid = getRowid(this, row)",
          "",
          "[Removed Lines]",
          "1064:     const { visibleColumn, keepSource, treeConfig, treeOpts, tableSourceData, fullDataRowIdData } = this",
          "",
          "[Added Lines]",
          "1064:     const { tableFullColumn, keepSource, treeConfig, treeOpts, tableSourceData, fullDataRowIdData } = this",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1084:         if (arguments.length > 1) {",
          "1085:           return !eqCellValue(oRow, row, field)",
          "1086:         }",
          "1089:           if (property && !eqCellValue(oRow, row, property)) {",
          "1090:             return true",
          "1091:           }",
          "",
          "[Removed Lines]",
          "1087:         for (let index = 0, len = visibleColumn.length; index < len; index++) {",
          "1088:           property = visibleColumn[index].field",
          "",
          "[Added Lines]",
          "1087:         for (let index = 0, len = tableFullColumn.length; index < len; index++) {",
          "1088:           property = tableFullColumn[index].field",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1420:   setColumnFixed (fieldOrColumn, fixed) {",
          "1421:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1424:         column.fixed = fixed",
          "1425:       })",
          "1426:       this.saveCustomFixed()",
          "",
          "[Removed Lines]",
          "1422:     if (column && column.fixed !== fixed) {",
          "1423:       XEUtils.eachTree([column], (column) => {",
          "",
          "[Added Lines]",
          "1422:     const targetColumn = getRootColumn(this, column)",
          "1423:     if (targetColumn && targetColumn.fixed !== fixed) {",
          "1424:       XEUtils.eachTree([targetColumn], (column) => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1434:   clearColumnFixed (fieldOrColumn) {",
          "1435:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1438:         column.fixed = null",
          "1439:       })",
          "1440:       this.saveCustomFixed()",
          "",
          "[Removed Lines]",
          "1436:     if (column && column.fixed) {",
          "1437:       XEUtils.eachTree([column], (column) => {",
          "",
          "[Added Lines]",
          "1437:     const targetColumn = getRootColumn(this, column)",
          "1438:     if (targetColumn && targetColumn.fixed) {",
          "1439:       XEUtils.eachTree([targetColumn], (column) => {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1494:   resetColumn (options) {",
          "1496:     const { checkMethod } = customOpts",
          "1497:     const opts = Object.assign({",
          "1498:       visible: true,",
          "1499:       resizable: options === true,",
          "1500:       fixed: options === true",
          "1501:     }, options)",
          "1503:       if (opts.resizable) {",
          "1504:         column.resizeWidth = 0",
          "1505:       }",
          "",
          "[Removed Lines]",
          "1495:     const { customOpts } = this",
          "1502:     this.tableFullColumn.forEach(column => {",
          "",
          "[Added Lines]",
          "1497:     const { collectColumn, customOpts } = this",
          "1504:     XEUtils.eachTree(collectColumn, (column) => {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1599:           keyMap[colKey] = column",
          "1600:         }",
          "1601:       })",
          "1603:         const column = keyMap[field]",
          "1604:         if (column) {",
          "1605:           if (XEUtils.isNumber(resizeWidth)) {",
          "",
          "[Removed Lines]",
          "1602:       XEUtils.each(customMap, ({ visible, resizeWidth, fixed }, field) => {",
          "",
          "[Added Lines]",
          "1612:       XEUtils.each(customMap, ({ visible, resizeWidth, fixed, order }, field) => {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1611:           if (fixed) {",
          "1612:             column.fixed = fixed",
          "1613:           }",
          "1614:         }",
          "1615:       })",
          "1616:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1624:           if (order) {",
          "1625:             column.colSeq = order",
          "1626:           }",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "592:     customOpts () {",
          "593:       return Object.assign({}, GlobalConfig.table.customConfig, this.customConfig)",
          "594:     },",
          "595:     tableBorder () {",
          "596:       const { border } = this",
          "597:       if (border === true) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595:     fixedColumnSize () {",
          "596:       const { tableFullColumn } = this",
          "597:       let fixedSize = 0",
          "598:       tableFullColumn.forEach((column) => {",
          "599:         if (column.fixed) {",
          "600:           fixedSize++",
          "601:         }",
          "602:       })",
          "603:       return fixedSize",
          "604:     },",
          "605:     isMaxFixedColumn () {",
          "606:       const { maxFixedSize } = this.columnOpts",
          "607:       if (maxFixedSize) {",
          "608:         return this.fixedColumnSize >= maxFixedSize",
          "609:       }",
          "610:       return false",
          "611:     },",
          "",
          "---------------"
        ],
        "packages/table/src/util.js||packages/table/src/util.js": [
          "File: packages/table/src/util.js -> packages/table/src/util.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:   return null",
          "76: }",
          "78: function queryCellElement (cell, selector) {",
          "79:   return cell.querySelector('.vxe-cell' + selector)",
          "80: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: export function getRootColumn ($xetable, column) {",
          "79:   const fullColumnIdData = $xetable.fullColumnIdData",
          "80:   if (!column) {",
          "81:     return null",
          "82:   }",
          "83:   let parentColId = column.parentId",
          "84:   while (fullColumnIdData[parentColId]) {",
          "85:     const column = fullColumnIdData[parentColId].column",
          "86:     parentColId = column.parentId",
          "87:     if (!parentColId) {",
          "88:       return column",
          "89:     }",
          "90:   }",
          "91:   return column",
          "92: }",
          "",
          "---------------"
        ],
        "packages/toolbar/src/toolbar.js||packages/toolbar/src/toolbar.js": [
          "File: packages/toolbar/src/toolbar.js -> packages/toolbar/src/toolbar.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: function renderCustoms (h, _vm) {",
          "135:   const { $xetable, customStore, customOpts, columns } = _vm",
          "136:   const cols = []",
          "137:   const customBtnOns = {}",
          "138:   const customWrapperOns = {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:   const isMaxFixedColumn = $xetable ? $xetable.isMaxFixedColumn : true",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:     customBtnOns.click = _vm.handleClickSettingEvent",
          "151:   }",
          "153:     const colTitle = UtilTools.formatText(column.getTitle(), 1)",
          "154:     const colKey = column.getKey()",
          "155:     const isColGroup = column.children && column.children.length",
          "",
          "[Removed Lines]",
          "152:   XEUtils.eachTree(columns, (column) => {",
          "",
          "[Added Lines]",
          "153:   XEUtils.eachTree(columns, (column, index, items, path, parent) => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:       cols.push(",
          "161:         h('li', {",
          "162:           class: ['vxe-custom--option', `level--${column.level}`, {",
          "175:               }",
          "176:             }",
          "185:         ])",
          "186:       )",
          "187:     }",
          "",
          "[Removed Lines]",
          "163:             'is--group': isColGroup,",
          "164:             'is--checked': isChecked,",
          "165:             'is--indeterminate': isIndeterminate,",
          "166:             'is--disabled': isDisabled",
          "167:           }],",
          "168:           attrs: {",
          "169:             title: colTitle",
          "170:           },",
          "171:           on: {",
          "172:             click: () => {",
          "173:               if (!isDisabled) {",
          "174:                 _vm.changeCustomOption(column)",
          "177:           }",
          "178:         }, [",
          "179:           h('span', {",
          "180:             class: ['vxe-checkbox--icon', isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "181:           }),",
          "182:           h('span', {",
          "183:             class: 'vxe-checkbox--label'",
          "184:           }, colTitle)",
          "",
          "[Added Lines]",
          "164:             'is--group': isColGroup",
          "165:           }]",
          "166:         }, [",
          "167:           h('div', {",
          "168:             title: colTitle,",
          "169:             class: ['vxe-custom--checkbox-option', {",
          "170:               'is--checked': isChecked,",
          "171:               'is--indeterminate': isIndeterminate,",
          "172:               'is--disabled': isDisabled",
          "173:             }],",
          "174:             attrs: {",
          "175:               title: colTitle",
          "176:             },",
          "177:             on: {",
          "178:               click: () => {",
          "179:                 if (!isDisabled) {",
          "180:                   _vm.changeCustomOption(column)",
          "181:                 }",
          "184:           }, [",
          "185:             h('span', {",
          "186:               class: ['vxe-checkbox--icon', isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "187:             }),",
          "188:             h('span', {",
          "189:               class: 'vxe-checkbox--label'",
          "190:             }, colTitle)",
          "191:           ]),",
          "192:           !parent && customOpts.allowFixed ? h('div', {",
          "193:             class: 'vxe-custom--fixed-option'",
          "194:           }, [",
          "195:             h('span', {",
          "196:               class: ['vxe-custom--fixed-left-option', column.fixed === 'left' ? GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_LEFT_ACTIVED : GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_LEFT, {",
          "197:                 'is--checked': column.fixed === 'left',",
          "198:                 'is--disabled': isMaxFixedColumn && !column.fixed",
          "199:               }],",
          "200:               attrs: {",
          "201:                 title: GlobalConfig.i18n(column.fixed === 'left' ? 'vxe.toolbar.cancelfixed' : 'vxe.toolbar.fixedLeft')",
          "202:               },",
          "203:               on: {",
          "204:                 click: () => {",
          "205:                   _vm.changeFixedOption(column, 'left')",
          "206:                 }",
          "207:               }",
          "208:             }),",
          "209:             h('span', {",
          "210:               class: ['vxe-custom--fixed-right-option', column.fixed === 'right' ? GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVED : GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_RIGHT, {",
          "211:                 'is--checked': column.fixed === 'right',",
          "212:                 'is--disabled': isMaxFixedColumn && !column.fixed",
          "213:               }],",
          "214:               attrs: {",
          "215:                 title: GlobalConfig.i18n(column.fixed === 'right' ? 'vxe.toolbar.cancelfixed' : 'vxe.toolbar.fixedRight')",
          "216:               },",
          "217:               on: {",
          "218:                 click: () => {",
          "219:                   _vm.changeFixedOption(column, 'right')",
          "220:                 }",
          "221:               }",
          "222:             })",
          "223:           ]) : null",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:         class: 'vxe-custom--header'",
          "212:       }, [",
          "213:         h('li', {",
          "224:         }, [",
          "231:         ])",
          "232:       ]),",
          "233:       h('ul', {",
          "234:         class: 'vxe-custom--body',",
          "235:         on: customWrapperOns",
          "236:       }, cols),",
          "238:         class: 'vxe-custom--footer'",
          "239:       }, [",
          "240:         h('button', {",
          "242:           on: {",
          "244:           }",
          "246:         h('button', {",
          "248:           on: {",
          "250:           }",
          "253:     ])",
          "254:   ])",
          "255: }",
          "",
          "[Removed Lines]",
          "214:           class: ['vxe-custom--option', {",
          "215:             'is--checked': isAllChecked,",
          "216:             'is--indeterminate': isAllIndeterminate",
          "217:           }],",
          "218:           attrs: {",
          "219:             title: GlobalConfig.i18n('vxe.table.allTitle')",
          "220:           },",
          "221:           on: {",
          "222:             click: _vm.allCustomEvent",
          "223:           }",
          "225:           h('span', {",
          "226:             class: ['vxe-checkbox--icon', isAllIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "227:           }),",
          "228:           h('span', {",
          "229:             class: 'vxe-checkbox--label'",
          "230:           }, GlobalConfig.i18n('vxe.toolbar.customAll'))",
          "237:       customOpts.isFooter === false ? null : h('div', {",
          "241:           class: 'btn--confirm',",
          "243:             click: _vm.confirmCustomEvent",
          "245:         }, GlobalConfig.i18n('vxe.toolbar.customConfirm')),",
          "247:           class: 'btn--reset',",
          "249:             click: _vm.resetCustomEvent",
          "251:         }, GlobalConfig.i18n('vxe.toolbar.customRestore'))",
          "252:       ])",
          "",
          "[Added Lines]",
          "253:           class: 'vxe-custom--option'",
          "255:           h('div', {",
          "256:             class: ['vxe-custom--checkbox-option', {",
          "257:               'is--checked': isAllChecked,",
          "258:               'is--indeterminate': isAllIndeterminate",
          "259:             }],",
          "260:             attrs: {",
          "261:               title: GlobalConfig.i18n('vxe.table.allTitle')",
          "262:             },",
          "263:             on: {",
          "264:               click: _vm.allCustomEvent",
          "265:             }",
          "266:           }, [",
          "267:             h('span', {",
          "268:               class: ['vxe-checkbox--icon', isAllIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "269:             }),",
          "270:             h('span', {",
          "271:               class: 'vxe-checkbox--label'",
          "272:             }, GlobalConfig.i18n('vxe.toolbar.customAll'))",
          "273:           ])",
          "280:       customOpts.showFooter || customOpts.isFooter ? h('div', {",
          "284:           class: 'btn--reset',",
          "286:             click: _vm.resetCustomEvent",
          "288:         }, customOpts.resetButtonText || GlobalConfig.i18n('vxe.toolbar.customRestore')),",
          "290:           class: 'btn--confirm',",
          "292:             click: _vm.confirmCustomEvent",
          "294:         }, customOpts.confirmButtonText || GlobalConfig.i18n('vxe.toolbar.customConfirm'))",
          "295:       ]) : null",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "493:       }",
          "494:       this.checkCustomStatus()",
          "495:     },",
          "496:     handleOptionCheck (column) {",
          "497:       const matchObj = XEUtils.findTree(this.columns, item => item === column)",
          "498:       if (matchObj && matchObj.parent) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539:     changeFixedOption (column, colFixed) {",
          "540:       const { $xetable } = this",
          "541:       if (column.fixed === colFixed) {",
          "542:         $xetable.clearColumnFixed(column)",
          "543:       } else {",
          "544:         if (!$xetable.isMaxFixedColumn || column.fixed) {",
          "545:           $xetable.setColumnFixed(column, colFixed)",
          "546:         }",
          "547:       }",
          "548:     },",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js": [
          "File: packages/v-x-e-table/src/conf.js -> packages/v-x-e-table/src/conf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:       showMessage: true,",
          "49:       message: 'default'",
          "50:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     columnConfig: {",
          "52:       maxFixedSize: 4",
          "53:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:     TOOLBAR_TOOLS_FULLSCREEN: iconPrefix + 'fullscreen',",
          "195:     TOOLBAR_TOOLS_MINIMIZE: iconPrefix + 'minimize',",
          "196:     TOOLBAR_TOOLS_CUSTOM: iconPrefix + 'custom-column',",
          "199:     FORM_PREFIX: iconPrefix + 'question-circle-fill',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:     TOOLBAR_TOOLS_FIXED_LEFT: iconPrefix + 'fixed-left',",
          "201:     TOOLBAR_TOOLS_FIXED_LEFT_ACTIVED: iconPrefix + 'fixed-left-fill',",
          "202:     TOOLBAR_TOOLS_FIXED_RIGHT: iconPrefix + 'fixed-right',",
          "203:     TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVED: iconPrefix + 'fixed-right-fill',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309:   },",
          "310:   button: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:     custom: {",
          "313:       allowFixed: true,",
          "314:       showFooter: true",
          "315:     }",
          "",
          "---------------"
        ],
        "styles/icon.scss||styles/icon.scss": [
          "File: styles/icon.scss -> styles/icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: @font-face {",
          "4:   font-family: \"vxeiconfont\";",
          "5:   src:",
          "7: }",
          "9: @keyframes rollCircle {",
          "",
          "[Removed Lines]",
          "6:        url('data:application/x-font-woff2;charset=utf-8;base64,') format('woff2');",
          "",
          "[Added Lines]",
          "6:        url('data:application/x-font-woff2;charset=utf-8;base64,') format('woff2');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "588:   content: \"\\e9ba\";",
          "589: }",
          "591: .vxe-icon-square:before {",
          "592:   content: \"\\e6d5\";",
          "593: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "591: .vxe-icon-fixed-left-fill:before {",
          "592:   content: \"\\e9b9\";",
          "593: }",
          "595: .vxe-icon-fixed-left:before {",
          "596:   content: \"\\e9ba\";",
          "597: }",
          "599: .vxe-icon-fixed-right-fill:before {",
          "600:   content: \"\\f290\";",
          "601: }",
          "603: .vxe-icon-fixed-right:before {",
          "604:   content: \"\\f291\";",
          "605: }",
          "607: .vxe-icon-swap-down:before {",
          "608:   content: \"\\f292\";",
          "609: }",
          "611: .vxe-icon-swap-up:before {",
          "612:   content: \"\\f293\";",
          "613: }",
          "",
          "---------------"
        ],
        "styles/table.scss||styles/table.scss": [
          "File: styles/table.scss -> styles/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1246:       position: relative;",
          "1247:       &:before {",
          "1248:         content: \"\";",
          "1251:         position: absolute;",
          "1252:         border-width: $vxe-table-cell-dirty-width;",
          "1253:         border-style: solid;",
          "",
          "[Removed Lines]",
          "1249:         top: $vxe-table-cell-dirty-width;",
          "1250:         left: $vxe-table-cell-dirty-width;",
          "",
          "[Added Lines]",
          "1249:         top: calc($vxe-table-cell-dirty-width * -1);",
          "1250:         left: calc($vxe-table-cell-dirty-width * -1);",
          "",
          "---------------"
        ],
        "styles/toolbar.scss||styles/toolbar.scss": [
          "File: styles/toolbar.scss -> styles/toolbar.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     .vxe-custom--header,",
          "119:     .vxe-custom--body {",
          "120:       & > li {",
          "123:         padding: 0.2em 1em 0.2em 1em;",
          "124:         @for $i from 2 through 8 {",
          "125:           $interval: $i - 1 + 0.2;",
          "",
          "[Removed Lines]",
          "121:         max-width: 16em;",
          "122:         min-width: 12.5em;",
          "",
          "[Added Lines]",
          "121:         max-width: 18em;",
          "122:         min-width: 14em;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:   }",
          "155: }",
          "157: .vxe-custom--option-wrapper .vxe-custom--header,",
          "158: .vxe-custom--option-wrapper .vxe-custom--body {",
          "159:   list-style-type: none;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: .vxe-custom--option {",
          "158:   display: flex;",
          "159:   flex-direction: row;",
          "160: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:   margin: 0;",
          "163:   padding: 0;",
          "164:   user-select: none;",
          "170: }",
          "173:   @extend %XECheckboxIcon;",
          "174: }",
          "176: .vxe-toolbar {",
          "",
          "[Removed Lines]",
          "165:   & > li {",
          "166:     overflow: hidden;",
          "167:     text-overflow: ellipsis;",
          "168:     white-space: nowrap;",
          "169:   }",
          "172: .vxe-custom--option {",
          "",
          "[Added Lines]",
          "172: .vxe-custom--checkbox-option {",
          "174:   overflow: hidden;",
          "175:   text-overflow: ellipsis;",
          "176:   white-space: nowrap;",
          "177:   flex-grow: 1;",
          "178: }",
          "180: .vxe-custom--fixed-option {",
          "181:   flex-shrink: 0;",
          "182:   padding-left: 0.5em;",
          "183:   display: flex;",
          "184:   flex-direction: row;",
          "185:   align-items: center;",
          "186:   .vxe-custom--fixed-left-option,",
          "187:   .vxe-custom--fixed-right-option {",
          "188:     line-height: 1.34em;",
          "189:     font-size: 1.1em;",
          "190:     padding: 0 0.2em;",
          "191:     cursor: pointer;",
          "192:     &.is--checked,",
          "193:     &:hover {",
          "194:       color: $vxe-primary-color;",
          "195:     }",
          "196:     &.is--disabled {",
          "197:       cursor: no-drop;",
          "198:       color: $vxe-input-disabled-color;",
          "199:     }",
          "200:   }",
          "",
          "---------------"
        ],
        "types/column.d.ts||types/column.d.ts": [
          "File: types/column.d.ts -> types/column.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:   halfChecked: boolean;",
          "348:   disabled: boolean;",
          "349:   order: string;",
          "350:   renderWidth: number;",
          "351:   renderHeight: number;",
          "352:   resizeWidth: number;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350:   sortTime: number",
          "351:   customOrder: number",
          "",
          "---------------"
        ],
        "types/toolbar.d.ts||types/toolbar.d.ts": [
          "File: types/toolbar.d.ts -> types/toolbar.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     immediate?: boolean;",
          "52:     storage?: boolean;",
          "53:     checkMethod?(params: { column: ColumnInfo }): boolean;",
          "55:     icon?: string;",
          "56:     [key: string]: any;",
          "57:   };",
          "",
          "[Removed Lines]",
          "54:     isFooter?: Boolean;",
          "",
          "[Added Lines]",
          "58:     showFooter?: boolean;",
          "64:     isFooter?: boolean",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     immediate?: boolean;",
          "111:     storage?: boolean;",
          "112:     checkMethod?(params: { column: ColumnInfo }): boolean;",
          "114:     icon?: string;",
          "115:     [key: string]: any;",
          "116:   };",
          "",
          "[Removed Lines]",
          "113:     isFooter?: Boolean;",
          "",
          "[Added Lines]",
          "124:     isFooter?: boolean;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:   [key: string]: any;",
          "131: }",
          "",
          "[Removed Lines]",
          "133: export interface ToolbarButtonsSlotParams extends GridRenderParams {}",
          "134: export interface ToolbarToolsSlotParams extends ToolbarButtonsSlotParams {}",
          "139: export interface ToolbarButtonRenderOptions extends RenderOptions {}",
          "140: export interface ToolbarToolRenderOptions extends RenderOptions {}",
          "",
          "[Added Lines]",
          "144: export type ToolbarButtonsSlotParams = GridRenderParams",
          "145: export type ToolbarToolsSlotParams = ToolbarButtonsSlotParams",
          "150: export type ToolbarButtonRenderOptions = RenderOptions",
          "151: export type ToolbarToolRenderOptions = RenderOptions",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2d45baedeec5ab8be96a7176cfeabf031bce549",
      "candidate_info": {
        "commit_hash": "a2d45baedeec5ab8be96a7176cfeabf031bce549",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/a2d45baedeec5ab8be96a7176cfeabf031bce549",
        "files": [
          "package.json",
          "packages/custom/src/mixin.js",
          "packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js",
          "packages/table/src/methods.js",
          "packages/table/src/table.js",
          "packages/toolbar/src/toolbar.js"
        ],
        "message": "\u4fee\u590d\u61d2\u52a0\u8f7d\u81ea\u5b9a\u4e49\u6a21\u5757\u8b66\u544a\u95ee\u9898",
        "before_after_code_files": [
          "packages/custom/src/mixin.js||packages/custom/src/mixin.js",
          "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "packages/toolbar/src/toolbar.js||packages/toolbar/src/toolbar.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/custom/src/mixin.js||packages/custom/src/mixin.js": [
          "File: packages/custom/src/mixin.js -> packages/custom/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export default {",
          "2:   methods: {",
          "3:     _openCustom () {",
          "5:       customStore.visible = true",
          "6:       this.checkCustomStatus()",
          "7:       this.calcMaxHeight()",
          "8:       return this.$nextTick().then(() => this.calcMaxHeight())",
          "",
          "[Removed Lines]",
          "4:       const { customStore } = this",
          "",
          "[Added Lines]",
          "4:       const { initStore, customStore } = this",
          "6:       initStore.custom = true",
          "",
          "---------------"
        ],
        "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js": [
          "File: packages/locale/lang/en-US.js -> packages/locale/lang/en-US.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:       impFields: 'Import failed, please check that the field name and data format are correct.',",
          "43:       treeNotImp: 'Tree table does not support import.'",
          "44:     },",
          "131:     table: {",
          "132:       emptyText: 'No Data',",
          "133:       allTitle: 'Select all / cancel',",
          "",
          "[Removed Lines]",
          "45:     renderer: {",
          "46:       search: 'Search',",
          "47:       cases: {",
          "48:         equal: 'Equal',",
          "49:         unequal: 'Not equal',",
          "50:         gt: 'Greater than',",
          "51:         ge: 'Greater than or equal',",
          "52:         lt: 'Less than',",
          "53:         le: 'Less than or equal',",
          "54:         begin: 'Beginning is',",
          "55:         notbegin: 'Beginning is not',",
          "56:         endin: 'End is',",
          "57:         notendin: 'End is not',",
          "58:         include: 'Include',",
          "59:         exclude: 'Exclusive',",
          "60:         between: 'Betweenness',",
          "61:         custom: 'Custom filter',",
          "62:         insensitive: 'Case insensitive',",
          "63:         isSensitive: 'Case sensitive'",
          "64:       },",
          "65:       combination: {",
          "66:         menus: {",
          "67:           clearSort: 'Clear sort',",
          "68:           sortAsc: 'Ascending order',",
          "69:           sortDesc: 'Descending order',",
          "70:           fixedColumn: 'Fixed column',",
          "71:           fixedGroup: 'Fixed group',",
          "72:           cancelFixed: 'Clear fixed',",
          "73:           fixedLeft: 'Fixed the left',",
          "74:           fixedRight: 'Fixed the right',",
          "75:           clearFilter: 'Clear filter',",
          "76:           textOption: 'Text filter',",
          "77:           numberOption: 'Number filter'",
          "78:         },",
          "79:         popup: {",
          "80:           title: 'Custom filtering',",
          "81:           currColumnTitle: 'Current column:',",
          "82:           and: 'And',",
          "83:           or: 'Or',",
          "84:           describeHtml: 'Use ? To represent a single character <br/> use * to represent any number of characters'",
          "85:         },",
          "86:         empty: '(Empty)',",
          "87:         notData: 'No data'",
          "88:       }",
          "89:     },",
          "90:     pro: {",
          "91:       area: {",
          "92:         mergeErr: 'The operation cannot be performed on merged cells',",
          "93:         multiErr: 'The operation cannot be performed on multiple selection areas',",
          "94:         extendErr: 'If the extended area contains merged cells, all merged cells need to be the same size',",
          "95:         pasteMultiErr: 'Cannot paste, copied area and pasted area of the same size are required to perform this operation'",
          "96:       },",
          "97:       fnr: {",
          "98:         title: 'Find and replace',",
          "99:         findLabel: 'Find',",
          "100:         replaceLabel: 'Replace',",
          "101:         findTitle: 'What to find:',",
          "102:         replaceTitle: 'Replace with:',",
          "103:         tabs: {",
          "104:           find: 'Find',",
          "105:           replace: 'Replace'",
          "106:         },",
          "107:         filter: {",
          "108:           re: 'Regular Expression',",
          "109:           whole: 'Whole word',",
          "110:           sensitive: 'Case sensitive'",
          "111:         },",
          "112:         btns: {",
          "113:           findNext: 'Find next',",
          "114:           findAll: 'Find all',",
          "115:           replace: 'Replace',",
          "116:           replaceAll: 'Replace all',",
          "117:           cancel: 'Cancel'",
          "118:         },",
          "119:         header: {",
          "120:           seq: '#',",
          "121:           cell: 'Cell',",
          "122:           value: 'Value'",
          "123:         },",
          "124:         empty: '(Empty)',",
          "125:         reError: 'Invalid regular expression',",
          "126:         recordCount: 'Found {0} cells',",
          "127:         notCell: 'No matching cells were found',",
          "128:         replaceSuccess: 'Successfully replaced {0} cells'",
          "129:       }",
          "130:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:       confirm: 'Confirm',",
          "189:       cancel: 'Cancel'",
          "190:     },",
          "191:     custom: {",
          "192:       cstmTitle: 'Column Settings',",
          "193:       cstmRestore: 'Restore default',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     filter: {",
          "106:       search: '\u641c\u7d22'",
          "107:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "332:           q4: 'Fourth quarter'",
          "333:         }",
          "334:       }",
          "335:     }",
          "336:   }",
          "337: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:     },",
          "257:     plugins: {",
          "258:       extendCellArea: {",
          "259:         area: {",
          "260:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "261:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "262:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "263:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "264:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "265:         },",
          "266:         fnr: {",
          "267:           title: '\u67e5\u627e\u548c\u66ff\u6362',",
          "268:           findLabel: '\u67e5\u627e',",
          "269:           replaceLabel: '\u66ff\u6362',",
          "270:           findTitle: '\u67e5\u627e\u5185\u5bb9\uff1a',",
          "271:           replaceTitle: '\u66ff\u6362\u4e3a\uff1a',",
          "272:           tabs: {",
          "273:             find: '\u67e5\u627e',",
          "274:             replace: '\u66ff\u6362'",
          "275:           },",
          "276:           filter: {",
          "277:             re: '\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "278:             whole: '\u5168\u8bcd\u5339\u914d',",
          "279:             sensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "280:           },",
          "281:           btns: {",
          "282:             findNext: '\u67e5\u627e\u4e0b\u4e00\u4e2a',",
          "283:             findAll: '\u67e5\u627e\u5168\u90e8',",
          "284:             replace: '\u66ff\u6362',",
          "285:             replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "286:             cancel: '\u53d6\u6d88'",
          "287:           },",
          "288:           header: {",
          "289:             seq: '#',",
          "290:             cell: '\u5355\u5143\u683c',",
          "291:             value: '\u503c'",
          "292:           },",
          "293:           empty: '(\u7a7a\u503c)',",
          "294:           reError: '\u65e0\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "295:           recordCount: '\u5df2\u627e\u5230 {0} \u4e2a\u5355\u5143\u683c',",
          "296:           notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5355\u5143\u683c',",
          "297:           replaceSuccess: '\u6210\u529f\u66ff\u6362 {0} \u4e2a\u5355\u5143\u683c'",
          "298:         }",
          "299:       },",
          "300:       filterComplexInput: {",
          "301:         menus: {",
          "302:           fixedColumn: '\u9501\u5b9a\u5217',",
          "303:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "304:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "305:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "306:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7'",
          "307:         },",
          "308:         cases: {",
          "309:           equal: '\u7b49\u4e8e',",
          "310:           gt: '\u5927\u4e8e',",
          "311:           lt: '\u5c0f\u4e8e',",
          "312:           begin: '\u5f00\u5934\u662f',",
          "313:           endin: '\u7ed3\u5c3e\u662f',",
          "314:           include: '\u5305\u542b',",
          "315:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "316:         }",
          "317:       },",
          "318:       filterCombination: {",
          "319:         menus: {",
          "320:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "321:           sortAsc: '\u5347\u5e8f',",
          "322:           sortDesc: '\u964d\u5e8f',",
          "323:           fixedColumn: '\u9501\u5b9a\u5217',",
          "324:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "325:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "326:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "327:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7',",
          "328:           clearFilter: '\u6e05\u9664\u7b5b\u9009',",
          "329:           textOption: '\u6587\u672c\u7b5b\u9009',",
          "330:           numberOption: '\u6570\u503c\u7b5b\u9009'",
          "331:         },",
          "332:         popup: {",
          "333:           title: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u7684\u65b9\u5f0f',",
          "334:           currColumnTitle: '\u5f53\u524d\u5217\uff1a',",
          "335:           and: '\u4e0e',",
          "336:           or: '\u6216',",
          "337:           describeHtml: '\u53ef\u7528 ? \u4ee3\u8868\u5355\u4e2a\u5b57\u7b26<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u4e2a\u5b57\u7b26'",
          "338:         },",
          "339:         cases: {",
          "340:           equal: '\u7b49\u4e8e',",
          "341:           unequal: '\u4e0d\u7b49\u4e8e',",
          "342:           gt: '\u5927\u4e8e',",
          "343:           ge: '\u5927\u4e8e\u6216\u7b49\u4e8e',",
          "344:           lt: '\u5c0f\u4e8e',",
          "345:           le: '\u5c0f\u4e8e\u6216\u7b49\u4e8e',",
          "346:           begin: '\u5f00\u5934\u662f',",
          "347:           notbegin: '\u5f00\u5934\u4e0d\u662f',",
          "348:           endin: '\u7ed3\u5c3e\u662f',",
          "349:           notendin: '\u7ed3\u5c3e\u4e0d\u662f',",
          "350:           include: '\u5305\u542b',",
          "351:           exclude: '\u4e0d\u5305\u542b',",
          "352:           between: '\u4ecb\u4e8e',",
          "353:           custom: '\u81ea\u5b9a\u4e49\u7b5b\u9009',",
          "354:           insensitive: '\u4e0d\u533a\u5206\u5927\u5c0f\u5199',",
          "355:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "356:         },",
          "357:         empty: '(\u7a7a\u767d)',",
          "358:         notData: '\u65e0\u5339\u914d\u9879'",
          "359:       }",
          "360:     },",
          "366:     renderer: {",
          "367:       search: 'Search',",
          "368:       cases: {",
          "369:         equal: 'Equal',",
          "370:         unequal: 'Not equal',",
          "371:         gt: 'Greater than',",
          "372:         ge: 'Greater than or equal',",
          "373:         lt: 'Less than',",
          "374:         le: 'Less than or equal',",
          "375:         begin: 'Beginning is',",
          "376:         notbegin: 'Beginning is not',",
          "377:         endin: 'End is',",
          "378:         notendin: 'End is not',",
          "379:         include: 'Include',",
          "380:         exclude: 'Exclusive',",
          "381:         between: 'Betweenness',",
          "382:         custom: 'Custom filter',",
          "383:         insensitive: 'Case insensitive',",
          "384:         isSensitive: 'Case sensitive'",
          "385:       },",
          "386:       combination: {",
          "387:         menus: {",
          "388:           clearSort: 'Clear sort',",
          "389:           sortAsc: 'Ascending order',",
          "390:           sortDesc: 'Descending order',",
          "391:           fixedColumn: 'Fixed column',",
          "392:           fixedGroup: 'Fixed group',",
          "393:           cancelFixed: 'Clear fixed',",
          "394:           fixedLeft: 'Fixed the left',",
          "395:           fixedRight: 'Fixed the right',",
          "396:           clearFilter: 'Clear filter',",
          "397:           textOption: 'Text filter',",
          "398:           numberOption: 'Number filter'",
          "399:         },",
          "400:         popup: {",
          "401:           title: 'Custom filtering',",
          "402:           currColumnTitle: 'Current column:',",
          "403:           and: 'And',",
          "404:           or: 'Or',",
          "405:           describeHtml: 'Use ? To represent a single character <br/> use * to represent any number of characters'",
          "406:         },",
          "407:         empty: '(Empty)',",
          "408:         notData: 'No data'",
          "409:       }",
          "410:     },",
          "411:     pro: {",
          "412:       area: {",
          "413:         mergeErr: 'The operation cannot be performed on merged cells',",
          "414:         multiErr: 'The operation cannot be performed on multiple selection areas',",
          "415:         extendErr: 'If the extended area contains merged cells, all merged cells need to be the same size',",
          "416:         pasteMultiErr: 'Cannot paste, copied area and pasted area of the same size are required to perform this operation'",
          "417:       },",
          "418:       fnr: {",
          "419:         title: 'Find and replace',",
          "420:         findLabel: 'Find',",
          "421:         replaceLabel: 'Replace',",
          "422:         findTitle: 'What to find:',",
          "423:         replaceTitle: 'Replace with:',",
          "424:         tabs: {",
          "425:           find: 'Find',",
          "426:           replace: 'Replace'",
          "427:         },",
          "428:         filter: {",
          "429:           re: 'Regular Expression',",
          "430:           whole: 'Whole word',",
          "431:           sensitive: 'Case sensitive'",
          "432:         },",
          "433:         btns: {",
          "434:           findNext: 'Find next',",
          "435:           findAll: 'Find all',",
          "436:           replace: 'Replace',",
          "437:           replaceAll: 'Replace all',",
          "438:           cancel: 'Cancel'",
          "439:         },",
          "440:         header: {",
          "441:           seq: '#',",
          "442:           cell: 'Cell',",
          "443:           value: 'Value'",
          "444:         },",
          "445:         empty: '(Empty)',",
          "446:         reError: 'Invalid regular expression',",
          "447:         recordCount: 'Found {0} cells',",
          "448:         notCell: 'No matching cells were found',",
          "449:         replaceSuccess: 'Successfully replaced {0} cells'",
          "450:       }",
          "",
          "---------------"
        ],
        "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js": [
          "File: packages/locale/lang/es-ES.js -> packages/locale/lang/es-ES.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:       impFields: 'Error de importaci\u00f3n, por favor revise que el nombre del campo y el formato de datos sean correctos.',",
          "43:       treeNotImp: 'La tabla de \u00e1rbol no soporta importaci\u00f3n.'",
          "44:     },",
          "131:     table: {",
          "132:       emptyText: 'No hay datos',",
          "133:       allTitle: 'Seleccionar todo / cancelar',",
          "",
          "[Removed Lines]",
          "45:     renderer: {",
          "46:       search: 'Buscar',",
          "47:       cases: {",
          "48:         equal: 'Igual',",
          "49:         unequal: 'Distinto que',",
          "50:         gt: 'Mayor que',",
          "51:         ge: 'Mayor o igual que',",
          "52:         lt: 'Menor que',",
          "53:         le: 'Menor o igual que',",
          "54:         begin: 'Empieza por',",
          "55:         notbegin: 'No empieza por',",
          "56:         endin: 'Termina con',",
          "57:         notendin: 'No termina con',",
          "58:         include: 'Incluye',",
          "59:         exclude: 'Excluye',",
          "60:         between: 'Entre',",
          "61:         custom: 'Filtro personalizado',",
          "62:         insensitive: 'No sensible a may\u00fasculas/min\u00fasculas',",
          "63:         isSensitive: 'Sensible a may\u00fasculas/min\u00fasculas'",
          "64:       },",
          "65:       combination: {",
          "66:         menus: {",
          "67:           clearSort: 'Limpiar ordenamiento',",
          "68:           sortAsc: 'Orden ascendente',",
          "69:           sortDesc: 'Orden descendente',",
          "70:           fixedColumn: 'Columna fija',",
          "71:           fixedGroup: 'Grupo fijo',",
          "72:           cancelFixed: 'Borrar fijado',",
          "73:           fixedLeft: 'Fijar a la izquierda',",
          "74:           fixedRight: 'Fijar a la derecha',",
          "75:           clearFilter: 'Limpiar filtro',",
          "76:           textOption: 'Filtro de texto',",
          "77:           numberOption: 'Filtro de n\u00famero'",
          "78:         },",
          "79:         popup: {",
          "80:           title: 'Filtro personalizado',",
          "81:           currColumnTitle: 'Columna actual:',",
          "82:           and: 'Y',",
          "83:           or: 'O',",
          "84:           describeHtml: 'Use ? para representar un solo car\u00e1cter <br/> use * para representar cualquier n\u00famero de caracteres'",
          "85:         },",
          "86:         empty: '(Vac\u00edo)',",
          "87:         notData: 'No hay datos'",
          "88:       }",
          "89:     },",
          "90:     pro: {",
          "91:       area: {",
          "92:         mergeErr: 'La operaci\u00f3n no se puede realizar en celdas combinadas',",
          "93:         multiErr: 'La operaci\u00f3n no se puede realizar en \u00e1reas de selecci\u00f3n m\u00faltiple',",
          "94:         extendErr: 'Si el \u00e1rea extendida contiene celdas combinadas, todas las celdas combinadas deben tener el mismo tama\u00f1o',",
          "95:         pasteMultiErr: 'No se puede pegar, se requieren \u00e1reas copiadas y pegadas del mismo tama\u00f1o para realizar esta operaci\u00f3n'",
          "96:       },",
          "97:       fnr: {",
          "98:         title: 'Buscar y reemplazar',",
          "99:         findLabel: 'Buscar',",
          "100:         replaceLabel: 'Reemplazar',",
          "101:         findTitle: 'Qu\u00e9 buscar:',",
          "102:         replaceTitle: 'Reemplazar con:',",
          "103:         tabs: {",
          "104:           find: 'Buscar',",
          "105:           replace: 'Reemplazar'",
          "106:         },",
          "107:         filter: {",
          "108:           re: 'Expresi\u00f3n regular',",
          "109:           whole: 'Palabra completa',",
          "110:           sensitive: 'Distinguir may\u00fasculas y min\u00fasculas'",
          "111:         },",
          "112:         btns: {",
          "113:           findNext: 'Buscar siguiente',",
          "114:           findAll: 'Buscar todo',",
          "115:           replace: 'Reemplazar',",
          "116:           replaceAll: 'Reemplazar todo',",
          "117:           cancel: 'Cancelar'",
          "118:         },",
          "119:         header: {",
          "120:           seq: '#',",
          "121:           cell: 'Celda',",
          "122:           value: 'Valor'",
          "123:         },",
          "124:         empty: '(Vac\u00edo)',",
          "125:         reError: 'Expresi\u00f3n regular inv\u00e1lida',",
          "126:         recordCount: 'Se encontraron {0} celdas',",
          "127:         notCell: 'No se encontraron celdas coincidentes',",
          "128:         replaceSuccess: 'Se reemplazaron {0} celdas con \u00e9xito'",
          "129:       }",
          "130:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:       confirm: 'Confirmar',",
          "181:       cancel: 'Cancelar'",
          "182:     },",
          "183:     custom: {",
          "184:       cstmTitle: 'Column Settings',",
          "185:       cstmRestore: 'Restore default',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     filter: {",
          "98:       search: '\u641c\u7d22'",
          "99:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:           q4: 'Cuarto trimestre'",
          "325:         }",
          "326:       }",
          "327:     }",
          "328:   }",
          "329: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:     },",
          "249:     plugins: {",
          "250:       extendCellArea: {",
          "251:         area: {",
          "252:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "253:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "254:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "255:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "256:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "257:         },",
          "258:         fnr: {",
          "259:           title: '\u67e5\u627e\u548c\u66ff\u6362',",
          "260:           findLabel: '\u67e5\u627e',",
          "261:           replaceLabel: '\u66ff\u6362',",
          "262:           findTitle: '\u67e5\u627e\u5185\u5bb9\uff1a',",
          "263:           replaceTitle: '\u66ff\u6362\u4e3a\uff1a',",
          "264:           tabs: {",
          "265:             find: '\u67e5\u627e',",
          "266:             replace: '\u66ff\u6362'",
          "267:           },",
          "268:           filter: {",
          "269:             re: '\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "270:             whole: '\u5168\u8bcd\u5339\u914d',",
          "271:             sensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "272:           },",
          "273:           btns: {",
          "274:             findNext: '\u67e5\u627e\u4e0b\u4e00\u4e2a',",
          "275:             findAll: '\u67e5\u627e\u5168\u90e8',",
          "276:             replace: '\u66ff\u6362',",
          "277:             replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "278:             cancel: '\u53d6\u6d88'",
          "279:           },",
          "280:           header: {",
          "281:             seq: '#',",
          "282:             cell: '\u5355\u5143\u683c',",
          "283:             value: '\u503c'",
          "284:           },",
          "285:           empty: '(\u7a7a\u503c)',",
          "286:           reError: '\u65e0\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "287:           recordCount: '\u5df2\u627e\u5230 {0} \u4e2a\u5355\u5143\u683c',",
          "288:           notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5355\u5143\u683c',",
          "289:           replaceSuccess: '\u6210\u529f\u66ff\u6362 {0} \u4e2a\u5355\u5143\u683c'",
          "290:         }",
          "291:       },",
          "292:       filterComplexInput: {",
          "293:         menus: {",
          "294:           fixedColumn: '\u9501\u5b9a\u5217',",
          "295:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "296:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "297:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "298:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7'",
          "299:         },",
          "300:         cases: {",
          "301:           equal: '\u7b49\u4e8e',",
          "302:           gt: '\u5927\u4e8e',",
          "303:           lt: '\u5c0f\u4e8e',",
          "304:           begin: '\u5f00\u5934\u662f',",
          "305:           endin: '\u7ed3\u5c3e\u662f',",
          "306:           include: '\u5305\u542b',",
          "307:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "308:         }",
          "309:       },",
          "310:       filterCombination: {",
          "311:         menus: {",
          "312:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "313:           sortAsc: '\u5347\u5e8f',",
          "314:           sortDesc: '\u964d\u5e8f',",
          "315:           fixedColumn: '\u9501\u5b9a\u5217',",
          "316:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "317:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "318:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "319:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7',",
          "320:           clearFilter: '\u6e05\u9664\u7b5b\u9009',",
          "321:           textOption: '\u6587\u672c\u7b5b\u9009',",
          "322:           numberOption: '\u6570\u503c\u7b5b\u9009'",
          "323:         },",
          "324:         popup: {",
          "325:           title: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u7684\u65b9\u5f0f',",
          "326:           currColumnTitle: '\u5f53\u524d\u5217\uff1a',",
          "327:           and: '\u4e0e',",
          "328:           or: '\u6216',",
          "329:           describeHtml: '\u53ef\u7528 ? \u4ee3\u8868\u5355\u4e2a\u5b57\u7b26<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u4e2a\u5b57\u7b26'",
          "330:         },",
          "331:         cases: {",
          "332:           equal: '\u7b49\u4e8e',",
          "333:           unequal: '\u4e0d\u7b49\u4e8e',",
          "334:           gt: '\u5927\u4e8e',",
          "335:           ge: '\u5927\u4e8e\u6216\u7b49\u4e8e',",
          "336:           lt: '\u5c0f\u4e8e',",
          "337:           le: '\u5c0f\u4e8e\u6216\u7b49\u4e8e',",
          "338:           begin: '\u5f00\u5934\u662f',",
          "339:           notbegin: '\u5f00\u5934\u4e0d\u662f',",
          "340:           endin: '\u7ed3\u5c3e\u662f',",
          "341:           notendin: '\u7ed3\u5c3e\u4e0d\u662f',",
          "342:           include: '\u5305\u542b',",
          "343:           exclude: '\u4e0d\u5305\u542b',",
          "344:           between: '\u4ecb\u4e8e',",
          "345:           custom: '\u81ea\u5b9a\u4e49\u7b5b\u9009',",
          "346:           insensitive: '\u4e0d\u533a\u5206\u5927\u5c0f\u5199',",
          "347:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "348:         },",
          "349:         empty: '(\u7a7a\u767d)',",
          "350:         notData: '\u65e0\u5339\u914d\u9879'",
          "351:       }",
          "352:     },",
          "358:     renderer: {",
          "359:       search: 'Buscar',",
          "360:       cases: {",
          "361:         equal: 'Igual',",
          "362:         unequal: 'Distinto que',",
          "363:         gt: 'Mayor que',",
          "364:         ge: 'Mayor o igual que',",
          "365:         lt: 'Menor que',",
          "366:         le: 'Menor o igual que',",
          "367:         begin: 'Empieza por',",
          "368:         notbegin: 'No empieza por',",
          "369:         endin: 'Termina con',",
          "370:         notendin: 'No termina con',",
          "371:         include: 'Incluye',",
          "372:         exclude: 'Excluye',",
          "373:         between: 'Entre',",
          "374:         custom: 'Filtro personalizado',",
          "375:         insensitive: 'No sensible a may\u00fasculas/min\u00fasculas',",
          "376:         isSensitive: 'Sensible a may\u00fasculas/min\u00fasculas'",
          "377:       },",
          "378:       combination: {",
          "379:         menus: {",
          "380:           clearSort: 'Limpiar ordenamiento',",
          "381:           sortAsc: 'Orden ascendente',",
          "382:           sortDesc: 'Orden descendente',",
          "383:           fixedColumn: 'Columna fija',",
          "384:           fixedGroup: 'Grupo fijo',",
          "385:           cancelFixed: 'Borrar fijado',",
          "386:           fixedLeft: 'Fijar a la izquierda',",
          "387:           fixedRight: 'Fijar a la derecha',",
          "388:           clearFilter: 'Limpiar filtro',",
          "389:           textOption: 'Filtro de texto',",
          "390:           numberOption: 'Filtro de n\u00famero'",
          "391:         },",
          "392:         popup: {",
          "393:           title: 'Filtro personalizado',",
          "394:           currColumnTitle: 'Columna actual:',",
          "395:           and: 'Y',",
          "396:           or: 'O',",
          "397:           describeHtml: 'Use ? para representar un solo car\u00e1cter <br/> use * para representar cualquier n\u00famero de caracteres'",
          "398:         },",
          "399:         empty: '(Vac\u00edo)',",
          "400:         notData: 'No hay datos'",
          "401:       }",
          "402:     },",
          "403:     pro: {",
          "404:       area: {",
          "405:         mergeErr: 'La operaci\u00f3n no se puede realizar en celdas combinadas',",
          "406:         multiErr: 'La operaci\u00f3n no se puede realizar en \u00e1reas de selecci\u00f3n m\u00faltiple',",
          "407:         extendErr: 'Si el \u00e1rea extendida contiene celdas combinadas, todas las celdas combinadas deben tener el mismo tama\u00f1o',",
          "408:         pasteMultiErr: 'No se puede pegar, se requieren \u00e1reas copiadas y pegadas del mismo tama\u00f1o para realizar esta operaci\u00f3n'",
          "409:       },",
          "410:       fnr: {",
          "411:         title: 'Buscar y reemplazar',",
          "412:         findLabel: 'Buscar',",
          "413:         replaceLabel: 'Reemplazar',",
          "414:         findTitle: 'Qu\u00e9 buscar:',",
          "415:         replaceTitle: 'Reemplazar con:',",
          "416:         tabs: {",
          "417:           find: 'Buscar',",
          "418:           replace: 'Reemplazar'",
          "419:         },",
          "420:         filter: {",
          "421:           re: 'Expresi\u00f3n regular',",
          "422:           whole: 'Palabra completa',",
          "423:           sensitive: 'Distinguir may\u00fasculas y min\u00fasculas'",
          "424:         },",
          "425:         btns: {",
          "426:           findNext: 'Buscar siguiente',",
          "427:           findAll: 'Buscar todo',",
          "428:           replace: 'Reemplazar',",
          "429:           replaceAll: 'Reemplazar todo',",
          "430:           cancel: 'Cancelar'",
          "431:         },",
          "432:         header: {",
          "433:           seq: '#',",
          "434:           cell: 'Celda',",
          "435:           value: 'Valor'",
          "436:         },",
          "437:         empty: '(Vac\u00edo)',",
          "438:         reError: 'Expresi\u00f3n regular inv\u00e1lida',",
          "439:         recordCount: 'Se encontraron {0} celdas',",
          "440:         notCell: 'No se encontraron celdas coincidentes',",
          "441:         replaceSuccess: 'Se reemplazaron {0} celdas con \u00e9xito'",
          "442:       }",
          "",
          "---------------"
        ],
        "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js": [
          "File: packages/locale/lang/ja-JP.js -> packages/locale/lang/ja-JP.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:       impFields: '\u30a4\u30f3\u30dd\u30fc\u30c8\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3068\u30c7\u30fc\u30bf\u5f62\u5f0f\u304c\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044',",
          "43:       treeNotImp: '\u30c4\u30ea\u30fc\u30c6\u30fc\u30d6\u30eb\u306f\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u305b\u3093'",
          "44:     },",
          "131:     table: {",
          "132:       emptyText: '\u30c7\u30fc\u30bf\u304c\u3042\u308a\u307e\u305b\u3093',",
          "133:       allTitle: '\u5168\u3066\u9078\u629e/\u53d6\u6d88',",
          "",
          "[Removed Lines]",
          "45:     renderer: {",
          "46:       search: '\u641c\u7d22',",
          "47:       cases: {",
          "48:         equal: '\u7b49\u4e8e',",
          "49:         unequal: '\u4e0d\u7b49\u4e8e',",
          "50:         gt: '\u5927\u4e8e',",
          "51:         ge: '\u5927\u4e8e\u6216\u7b49\u4e8e',",
          "52:         lt: '\u5c0f\u4e8e',",
          "53:         le: '\u5c0f\u4e8e\u6216\u7b49\u4e8e',",
          "54:         begin: '\u5f00\u5934\u662f',",
          "55:         notbegin: '\u5f00\u5934\u4e0d\u662f',",
          "56:         endin: '\u7ed3\u5c3e\u662f',",
          "57:         notendin: '\u7ed3\u5c3e\u4e0d\u662f',",
          "58:         include: '\u5305\u542b',",
          "59:         exclude: '\u4e0d\u5305\u542b',",
          "60:         between: '\u4ecb\u4e8e',",
          "61:         custom: '\u81ea\u5b9a\u4e49\u7b5b\u9009',",
          "62:         insensitive: '\u4e0d\u533a\u5206\u5927\u5c0f\u5199',",
          "63:         isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "64:       },",
          "65:       combination: {",
          "66:         menus: {",
          "67:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "68:           sortAsc: '\u5347\u5e8f',",
          "69:           sortDesc: '\u964d\u5e8f',",
          "70:           fixedColumn: '\u9501\u5b9a\u5217',",
          "71:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "72:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "73:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "74:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7',",
          "75:           clearFilter: '\u6e05\u9664\u7b5b\u9009',",
          "76:           textOption: '\u6587\u672c\u7b5b\u9009',",
          "77:           numberOption: '\u6570\u503c\u7b5b\u9009'",
          "78:         },",
          "79:         popup: {",
          "80:           title: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u7684\u65b9\u5f0f',",
          "81:           currColumnTitle: '\u5f53\u524d\u5217\uff1a',",
          "82:           and: '\u4e0e',",
          "83:           or: '\u6216',",
          "84:           describeHtml: '\u53ef\u7528 ? \u4ee3\u8868\u5355\u4e2a\u5b57\u7b26<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u4e2a\u5b57\u7b26'",
          "85:         },",
          "86:         empty: '(\u7a7a\u767d)',",
          "87:         notData: '\u65e0\u5339\u914d\u9879'",
          "88:       }",
          "89:     },",
          "90:     pro: {",
          "91:       area: {",
          "92:         mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "93:         multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "94:         extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "95:         pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c'",
          "96:       },",
          "97:       fnr: {",
          "98:         title: '\u67e5\u627e\u548c\u66ff\u6362',",
          "99:         findLabel: '\u67e5\u627e',",
          "100:         replaceLabel: '\u66ff\u6362',",
          "101:         findTitle: '\u67e5\u627e\u5185\u5bb9\uff1a',",
          "102:         replaceTitle: '\u66ff\u6362\u4e3a\uff1a',",
          "103:         tabs: {",
          "104:           find: '\u67e5\u627e',",
          "105:           replace: '\u66ff\u6362'",
          "106:         },",
          "107:         filter: {",
          "108:           re: '\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "109:           whole: '\u5168\u8bcd\u5339\u914d',",
          "110:           sensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "111:         },",
          "112:         btns: {",
          "113:           findNext: '\u67e5\u627e\u4e0b\u4e00\u4e2a',",
          "114:           findAll: '\u67e5\u627e\u5168\u90e8',",
          "115:           replace: '\u66ff\u6362',",
          "116:           replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "117:           cancel: '\u53d6\u6d88'",
          "118:         },",
          "119:         header: {",
          "120:           seq: '#',",
          "121:           cell: '\u5355\u5143\u683c',",
          "122:           value: '\u503c'",
          "123:         },",
          "124:         empty: '(\u7a7a\u503c)',",
          "125:         reError: '\u65e0\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "126:         recordCount: '\u5df2\u627e\u5230 {0} \u4e2a\u5355\u5143\u683c',",
          "127:         notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5355\u5143\u683c',",
          "128:         replaceSuccess: '\u6210\u529f\u66ff\u6362 {0} \u4e2a\u5355\u5143\u683c'",
          "129:       }",
          "130:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:       confirm: '\u5b8c\u4e86',",
          "189:       cancel: '\u30ad\u30e3\u30f3\u30bb\u30eb'",
          "190:     },",
          "191:     custom: {",
          "192:       cstmTitle: 'Column Settings',",
          "193:       cstmRestore: 'Restore default',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     filter: {",
          "106:       search: '\u641c\u7d22'",
          "107:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "331:           q4: '\u7b2c\u56db\u5b63\u5ea6'",
          "332:         }",
          "333:       }",
          "334:     }",
          "335:   }",
          "336: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:     },",
          "256:     plugins: {",
          "257:       extendCellArea: {",
          "258:         area: {",
          "259:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "260:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "261:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "262:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "263:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "264:         },",
          "265:         fnr: {",
          "266:           title: '\u67e5\u627e\u548c\u66ff\u6362',",
          "267:           findLabel: '\u67e5\u627e',",
          "268:           replaceLabel: '\u66ff\u6362',",
          "269:           findTitle: '\u67e5\u627e\u5185\u5bb9\uff1a',",
          "270:           replaceTitle: '\u66ff\u6362\u4e3a\uff1a',",
          "271:           tabs: {",
          "272:             find: '\u67e5\u627e',",
          "273:             replace: '\u66ff\u6362'",
          "274:           },",
          "275:           filter: {",
          "276:             re: '\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "277:             whole: '\u5168\u8bcd\u5339\u914d',",
          "278:             sensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "279:           },",
          "280:           btns: {",
          "281:             findNext: '\u67e5\u627e\u4e0b\u4e00\u4e2a',",
          "282:             findAll: '\u67e5\u627e\u5168\u90e8',",
          "283:             replace: '\u66ff\u6362',",
          "284:             replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "285:             cancel: '\u53d6\u6d88'",
          "286:           },",
          "287:           header: {",
          "288:             seq: '#',",
          "289:             cell: '\u5355\u5143\u683c',",
          "290:             value: '\u503c'",
          "291:           },",
          "292:           empty: '(\u7a7a\u503c)',",
          "293:           reError: '\u65e0\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "294:           recordCount: '\u5df2\u627e\u5230 {0} \u4e2a\u5355\u5143\u683c',",
          "295:           notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5355\u5143\u683c',",
          "296:           replaceSuccess: '\u6210\u529f\u66ff\u6362 {0} \u4e2a\u5355\u5143\u683c'",
          "297:         }",
          "298:       },",
          "299:       filterComplexInput: {",
          "300:         menus: {",
          "301:           fixedColumn: '\u9501\u5b9a\u5217',",
          "302:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "303:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "304:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "305:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7'",
          "306:         },",
          "307:         cases: {",
          "308:           equal: '\u7b49\u4e8e',",
          "309:           gt: '\u5927\u4e8e',",
          "310:           lt: '\u5c0f\u4e8e',",
          "311:           begin: '\u5f00\u5934\u662f',",
          "312:           endin: '\u7ed3\u5c3e\u662f',",
          "313:           include: '\u5305\u542b',",
          "314:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "315:         }",
          "316:       },",
          "317:       filterCombination: {",
          "318:         menus: {",
          "319:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "320:           sortAsc: '\u5347\u5e8f',",
          "321:           sortDesc: '\u964d\u5e8f',",
          "322:           fixedColumn: '\u9501\u5b9a\u5217',",
          "323:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "324:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "325:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "326:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7',",
          "327:           clearFilter: '\u6e05\u9664\u7b5b\u9009',",
          "328:           textOption: '\u6587\u672c\u7b5b\u9009',",
          "329:           numberOption: '\u6570\u503c\u7b5b\u9009'",
          "330:         },",
          "331:         popup: {",
          "332:           title: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u7684\u65b9\u5f0f',",
          "333:           currColumnTitle: '\u5f53\u524d\u5217\uff1a',",
          "334:           and: '\u4e0e',",
          "335:           or: '\u6216',",
          "336:           describeHtml: '\u53ef\u7528 ? \u4ee3\u8868\u5355\u4e2a\u5b57\u7b26<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u4e2a\u5b57\u7b26'",
          "337:         },",
          "338:         cases: {",
          "339:           equal: '\u7b49\u4e8e',",
          "340:           unequal: '\u4e0d\u7b49\u4e8e',",
          "341:           gt: '\u5927\u4e8e',",
          "342:           ge: '\u5927\u4e8e\u6216\u7b49\u4e8e',",
          "343:           lt: '\u5c0f\u4e8e',",
          "344:           le: '\u5c0f\u4e8e\u6216\u7b49\u4e8e',",
          "345:           begin: '\u5f00\u5934\u662f',",
          "346:           notbegin: '\u5f00\u5934\u4e0d\u662f',",
          "347:           endin: '\u7ed3\u5c3e\u662f',",
          "348:           notendin: '\u7ed3\u5c3e\u4e0d\u662f',",
          "349:           include: '\u5305\u542b',",
          "350:           exclude: '\u4e0d\u5305\u542b',",
          "351:           between: '\u4ecb\u4e8e',",
          "352:           custom: '\u81ea\u5b9a\u4e49\u7b5b\u9009',",
          "353:           insensitive: '\u4e0d\u533a\u5206\u5927\u5c0f\u5199',",
          "354:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "355:         },",
          "356:         empty: '(\u7a7a\u767d)',",
          "357:         notData: '\u65e0\u5339\u914d\u9879'",
          "358:       }",
          "359:     },",
          "365:     renderer: {",
          "366:       search: '\u641c\u7d22',",
          "367:       cases: {",
          "368:         equal: '\u7b49\u4e8e',",
          "369:         unequal: '\u4e0d\u7b49\u4e8e',",
          "370:         gt: '\u5927\u4e8e',",
          "371:         ge: '\u5927\u4e8e\u6216\u7b49\u4e8e',",
          "372:         lt: '\u5c0f\u4e8e',",
          "373:         le: '\u5c0f\u4e8e\u6216\u7b49\u4e8e',",
          "374:         begin: '\u5f00\u5934\u662f',",
          "375:         notbegin: '\u5f00\u5934\u4e0d\u662f',",
          "376:         endin: '\u7ed3\u5c3e\u662f',",
          "377:         notendin: '\u7ed3\u5c3e\u4e0d\u662f',",
          "378:         include: '\u5305\u542b',",
          "379:         exclude: '\u4e0d\u5305\u542b',",
          "380:         between: '\u4ecb\u4e8e',",
          "381:         custom: '\u81ea\u5b9a\u4e49\u7b5b\u9009',",
          "382:         insensitive: '\u4e0d\u533a\u5206\u5927\u5c0f\u5199',",
          "383:         isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "384:       },",
          "385:       combination: {",
          "386:         menus: {",
          "387:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "388:           sortAsc: '\u5347\u5e8f',",
          "389:           sortDesc: '\u964d\u5e8f',",
          "390:           fixedColumn: '\u9501\u5b9a\u5217',",
          "391:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "392:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "393:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "394:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7',",
          "395:           clearFilter: '\u6e05\u9664\u7b5b\u9009',",
          "396:           textOption: '\u6587\u672c\u7b5b\u9009',",
          "397:           numberOption: '\u6570\u503c\u7b5b\u9009'",
          "398:         },",
          "399:         popup: {",
          "400:           title: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u7684\u65b9\u5f0f',",
          "401:           currColumnTitle: '\u5f53\u524d\u5217\uff1a',",
          "402:           and: '\u4e0e',",
          "403:           or: '\u6216',",
          "404:           describeHtml: '\u53ef\u7528 ? \u4ee3\u8868\u5355\u4e2a\u5b57\u7b26<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u4e2a\u5b57\u7b26'",
          "405:         },",
          "406:         empty: '(\u7a7a\u767d)',",
          "407:         notData: '\u65e0\u5339\u914d\u9879'",
          "408:       }",
          "409:     },",
          "410:     pro: {",
          "411:       area: {",
          "412:         mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "413:         multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "414:         extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "415:         pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c'",
          "416:       },",
          "417:       fnr: {",
          "418:         title: '\u67e5\u627e\u548c\u66ff\u6362',",
          "419:         findLabel: '\u67e5\u627e',",
          "420:         replaceLabel: '\u66ff\u6362',",
          "421:         findTitle: '\u67e5\u627e\u5185\u5bb9\uff1a',",
          "422:         replaceTitle: '\u66ff\u6362\u4e3a\uff1a',",
          "423:         tabs: {",
          "424:           find: '\u67e5\u627e',",
          "425:           replace: '\u66ff\u6362'",
          "426:         },",
          "427:         filter: {",
          "428:           re: '\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "429:           whole: '\u5168\u8bcd\u5339\u914d',",
          "430:           sensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "431:         },",
          "432:         btns: {",
          "433:           findNext: '\u67e5\u627e\u4e0b\u4e00\u4e2a',",
          "434:           findAll: '\u67e5\u627e\u5168\u90e8',",
          "435:           replace: '\u66ff\u6362',",
          "436:           replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "437:           cancel: '\u53d6\u6d88'",
          "438:         },",
          "439:         header: {",
          "440:           seq: '#',",
          "441:           cell: '\u5355\u5143\u683c',",
          "442:           value: '\u503c'",
          "443:         },",
          "444:         empty: '(\u7a7a\u503c)',",
          "445:         reError: '\u65e0\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "446:         recordCount: '\u5df2\u627e\u5230 {0} \u4e2a\u5355\u5143\u683c',",
          "447:         notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5355\u5143\u683c',",
          "448:         replaceSuccess: '\u6210\u529f\u66ff\u6362 {0} \u4e2a\u5355\u5143\u683c'",
          "449:       }",
          "",
          "---------------"
        ],
        "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js": [
          "File: packages/locale/lang/pt-BR.js -> packages/locale/lang/pt-BR.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:       impFields: 'Falha na importa\u00e7\u00e3o, verifique se o nome do campo e o formato dos dados est\u00e3o corretos.',",
          "43:       treeNotImp: 'A tabela de \u00e1rvore n\u00e3o suporta importa\u00e7\u00e3o.'",
          "44:     },",
          "131:     table: {",
          "132:       emptyText: 'Sem dados',",
          "133:       allTitle: 'Selecionar todos / cancelar',",
          "",
          "[Removed Lines]",
          "45:     renderer: {",
          "46:       search: 'Buscar',",
          "47:       cases: {",
          "48:         equal: 'Igual',",
          "49:         unequal: 'N\u00e3o igual',",
          "50:         gt: 'Maior que',",
          "51:         ge: 'Maior ou igual a',",
          "52:         lt: 'Menor que',",
          "53:         le: 'Menor ou igual a',",
          "54:         begin: 'Come\u00e7a com',",
          "55:         notbegin: 'N\u00e3o come\u00e7a com',",
          "56:         endin: 'Termina com',",
          "57:         notendin: 'N\u00e3o termina com',",
          "58:         include: 'Inclui',",
          "59:         exclude: 'Exclusivo',",
          "60:         between: 'Entre',",
          "61:         custom: 'Filtro personalizado',",
          "62:         insensitive: 'Sem diferencia\u00e7\u00e3o de mai\u00fasculas e min\u00fasculas',",
          "63:         isSensitive: 'Diferencia\u00e7\u00e3o de mai\u00fasculas e min\u00fasculas'",
          "64:       },",
          "65:       combination: {",
          "66:         menus: {",
          "67:           clearSort: 'Limpar ordena\u00e7\u00e3o',",
          "68:           sortAsc: 'Ordem ascendente',",
          "69:           sortDesc: 'Ordem descendente',",
          "70:           fixedColumn: 'Coluna fixa',",
          "71:           fixedGroup: 'Grupo fixo',",
          "72:           cancelFixed: 'Limpar fixa\u00e7\u00e3o',",
          "73:           fixedLeft: 'Fixar \u00e0 esquerda',",
          "74:           fixedRight: 'Fixar \u00e0 direita',",
          "75:           clearFilter: 'Limpar filtro',",
          "76:           textOption: 'Filtro de texto',",
          "77:           numberOption: 'Filtro num\u00e9rico'",
          "78:         },",
          "79:         popup: {",
          "80:           title: 'Filtragem personalizada',",
          "81:           currColumnTitle: 'Coluna atual:',",
          "82:           and: 'E',",
          "83:           or: 'Ou',",
          "84:           describeHtml: 'Use ? para representar um \u00fanico caractere <br/> use * para representar qualquer n\u00famero de caracteres'",
          "85:         },",
          "86:         empty: '(Vazio)',",
          "87:         notData: 'Sem dados'",
          "88:       }",
          "89:     },",
          "90:     pro: {",
          "91:       area: {",
          "92:         mergeErr: 'A opera\u00e7\u00e3o n\u00e3o pode ser realizada em c\u00e9lulas mescladas',",
          "93:         multiErr: 'A opera\u00e7\u00e3o n\u00e3o pode ser realizada em \u00e1reas de sele\u00e7\u00e3o m\u00faltipla',",
          "94:         extendErr: 'Se a \u00e1rea estendida contiver c\u00e9lulas mescladas, todas as c\u00e9lulas mescladas devem ter o mesmo tamanho',",
          "95:         pasteMultiErr: 'N\u00e3o \u00e9 poss\u00edvel colar, \u00e9 necess\u00e1rio que a \u00e1rea copiada e a \u00e1rea colada tenham o mesmo tamanho para realizar esta opera\u00e7\u00e3o'",
          "96:       },",
          "97:       fnr: {",
          "98:         title: 'Localizar e substituir',",
          "99:         findLabel: 'Localizar',",
          "100:         replaceLabel: 'Substituir',",
          "101:         findTitle: 'O que localizar:',",
          "102:         replaceTitle: 'Substituir por:',",
          "103:         tabs: {",
          "104:           find: 'Localizar',",
          "105:           replace: 'Substituir'",
          "106:         },",
          "107:         filter: {",
          "108:           re: 'Express\u00e3o Regular',",
          "109:           whole: 'Palavra inteira',",
          "110:           sensitive: 'Diferenciar mai\u00fasculas e min\u00fasculas'",
          "111:         },",
          "112:         btns: {",
          "113:           findNext: 'Localizar pr\u00f3ximo',",
          "114:           findAll: 'Localizar todos',",
          "115:           replace: 'Substituir',",
          "116:           replaceAll: 'Substituir tudo',",
          "117:           cancel: 'Cancelar'",
          "118:         },",
          "119:         header: {",
          "120:           seq: '#',",
          "121:           cell: 'C\u00e9lula',",
          "122:           value: 'Valor'",
          "123:         },",
          "124:         empty: '(Vazio)',",
          "125:         reError: 'Express\u00e3o regular inv\u00e1lida',",
          "126:         recordCount: 'Encontradas {0} c\u00e9lulas',",
          "127:         notCell: 'N\u00e3o foram encontradas c\u00e9lulas correspondentes',",
          "128:         replaceSuccess: 'Substitu\u00eddo com sucesso {0} c\u00e9lulas'",
          "129:       }",
          "130:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:       confirm: 'Confirmar',",
          "181:       cancel: 'Cancelar'",
          "182:     },",
          "183:     custom: {",
          "184:       cstmTitle: 'Column Settings',",
          "185:       cstmRestore: 'Restore default',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     filter: {",
          "98:       search: '\u641c\u7d22'",
          "99:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:           q4: '4\u00ba trimestre'",
          "325:         }",
          "326:       }",
          "327:     }",
          "328:   }",
          "329: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:     },",
          "249:     plugins: {",
          "250:       extendCellArea: {",
          "251:         area: {",
          "252:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "253:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "254:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "255:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "256:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "257:         },",
          "258:         fnr: {",
          "259:           title: '\u67e5\u627e\u548c\u66ff\u6362',",
          "260:           findLabel: '\u67e5\u627e',",
          "261:           replaceLabel: '\u66ff\u6362',",
          "262:           findTitle: '\u67e5\u627e\u5185\u5bb9\uff1a',",
          "263:           replaceTitle: '\u66ff\u6362\u4e3a\uff1a',",
          "264:           tabs: {",
          "265:             find: '\u67e5\u627e',",
          "266:             replace: '\u66ff\u6362'",
          "267:           },",
          "268:           filter: {",
          "269:             re: '\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "270:             whole: '\u5168\u8bcd\u5339\u914d',",
          "271:             sensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "272:           },",
          "273:           btns: {",
          "274:             findNext: '\u67e5\u627e\u4e0b\u4e00\u4e2a',",
          "275:             findAll: '\u67e5\u627e\u5168\u90e8',",
          "276:             replace: '\u66ff\u6362',",
          "277:             replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "278:             cancel: '\u53d6\u6d88'",
          "279:           },",
          "280:           header: {",
          "281:             seq: '#',",
          "282:             cell: '\u5355\u5143\u683c',",
          "283:             value: '\u503c'",
          "284:           },",
          "285:           empty: '(\u7a7a\u503c)',",
          "286:           reError: '\u65e0\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "287:           recordCount: '\u5df2\u627e\u5230 {0} \u4e2a\u5355\u5143\u683c',",
          "288:           notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5355\u5143\u683c',",
          "289:           replaceSuccess: '\u6210\u529f\u66ff\u6362 {0} \u4e2a\u5355\u5143\u683c'",
          "290:         }",
          "291:       },",
          "292:       filterComplexInput: {",
          "293:         menus: {",
          "294:           fixedColumn: '\u9501\u5b9a\u5217',",
          "295:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "296:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "297:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "298:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7'",
          "299:         },",
          "300:         cases: {",
          "301:           equal: '\u7b49\u4e8e',",
          "302:           gt: '\u5927\u4e8e',",
          "303:           lt: '\u5c0f\u4e8e',",
          "304:           begin: '\u5f00\u5934\u662f',",
          "305:           endin: '\u7ed3\u5c3e\u662f',",
          "306:           include: '\u5305\u542b',",
          "307:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "308:         }",
          "309:       },",
          "310:       filterCombination: {",
          "311:         menus: {",
          "312:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "313:           sortAsc: '\u5347\u5e8f',",
          "314:           sortDesc: '\u964d\u5e8f',",
          "315:           fixedColumn: '\u9501\u5b9a\u5217',",
          "316:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "317:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "318:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "319:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7',",
          "320:           clearFilter: '\u6e05\u9664\u7b5b\u9009',",
          "321:           textOption: '\u6587\u672c\u7b5b\u9009',",
          "322:           numberOption: '\u6570\u503c\u7b5b\u9009'",
          "323:         },",
          "324:         popup: {",
          "325:           title: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u7684\u65b9\u5f0f',",
          "326:           currColumnTitle: '\u5f53\u524d\u5217\uff1a',",
          "327:           and: '\u4e0e',",
          "328:           or: '\u6216',",
          "329:           describeHtml: '\u53ef\u7528 ? \u4ee3\u8868\u5355\u4e2a\u5b57\u7b26<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u4e2a\u5b57\u7b26'",
          "330:         },",
          "331:         cases: {",
          "332:           equal: '\u7b49\u4e8e',",
          "333:           unequal: '\u4e0d\u7b49\u4e8e',",
          "334:           gt: '\u5927\u4e8e',",
          "335:           ge: '\u5927\u4e8e\u6216\u7b49\u4e8e',",
          "336:           lt: '\u5c0f\u4e8e',",
          "337:           le: '\u5c0f\u4e8e\u6216\u7b49\u4e8e',",
          "338:           begin: '\u5f00\u5934\u662f',",
          "339:           notbegin: '\u5f00\u5934\u4e0d\u662f',",
          "340:           endin: '\u7ed3\u5c3e\u662f',",
          "341:           notendin: '\u7ed3\u5c3e\u4e0d\u662f',",
          "342:           include: '\u5305\u542b',",
          "343:           exclude: '\u4e0d\u5305\u542b',",
          "344:           between: '\u4ecb\u4e8e',",
          "345:           custom: '\u81ea\u5b9a\u4e49\u7b5b\u9009',",
          "346:           insensitive: '\u4e0d\u533a\u5206\u5927\u5c0f\u5199',",
          "347:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "348:         },",
          "349:         empty: '(\u7a7a\u767d)',",
          "350:         notData: '\u65e0\u5339\u914d\u9879'",
          "351:       }",
          "352:     },",
          "358:     renderer: {",
          "359:       search: 'Buscar',",
          "360:       cases: {",
          "361:         equal: 'Igual',",
          "362:         unequal: 'N\u00e3o igual',",
          "363:         gt: 'Maior que',",
          "364:         ge: 'Maior ou igual a',",
          "365:         lt: 'Menor que',",
          "366:         le: 'Menor ou igual a',",
          "367:         begin: 'Come\u00e7a com',",
          "368:         notbegin: 'N\u00e3o come\u00e7a com',",
          "369:         endin: 'Termina com',",
          "370:         notendin: 'N\u00e3o termina com',",
          "371:         include: 'Inclui',",
          "372:         exclude: 'Exclusivo',",
          "373:         between: 'Entre',",
          "374:         custom: 'Filtro personalizado',",
          "375:         insensitive: 'Sem diferencia\u00e7\u00e3o de mai\u00fasculas e min\u00fasculas',",
          "376:         isSensitive: 'Diferencia\u00e7\u00e3o de mai\u00fasculas e min\u00fasculas'",
          "377:       },",
          "378:       combination: {",
          "379:         menus: {",
          "380:           clearSort: 'Limpar ordena\u00e7\u00e3o',",
          "381:           sortAsc: 'Ordem ascendente',",
          "382:           sortDesc: 'Ordem descendente',",
          "383:           fixedColumn: 'Coluna fixa',",
          "384:           fixedGroup: 'Grupo fixo',",
          "385:           cancelFixed: 'Limpar fixa\u00e7\u00e3o',",
          "386:           fixedLeft: 'Fixar \u00e0 esquerda',",
          "387:           fixedRight: 'Fixar \u00e0 direita',",
          "388:           clearFilter: 'Limpar filtro',",
          "389:           textOption: 'Filtro de texto',",
          "390:           numberOption: 'Filtro num\u00e9rico'",
          "391:         },",
          "392:         popup: {",
          "393:           title: 'Filtragem personalizada',",
          "394:           currColumnTitle: 'Coluna atual:',",
          "395:           and: 'E',",
          "396:           or: 'Ou',",
          "397:           describeHtml: 'Use ? para representar um \u00fanico caractere <br/> use * para representar qualquer n\u00famero de caracteres'",
          "398:         },",
          "399:         empty: '(Vazio)',",
          "400:         notData: 'Sem dados'",
          "401:       }",
          "402:     },",
          "403:     pro: {",
          "404:       area: {",
          "405:         mergeErr: 'A opera\u00e7\u00e3o n\u00e3o pode ser realizada em c\u00e9lulas mescladas',",
          "406:         multiErr: 'A opera\u00e7\u00e3o n\u00e3o pode ser realizada em \u00e1reas de sele\u00e7\u00e3o m\u00faltipla',",
          "407:         extendErr: 'Se a \u00e1rea estendida contiver c\u00e9lulas mescladas, todas as c\u00e9lulas mescladas devem ter o mesmo tamanho',",
          "408:         pasteMultiErr: 'N\u00e3o \u00e9 poss\u00edvel colar, \u00e9 necess\u00e1rio que a \u00e1rea copiada e a \u00e1rea colada tenham o mesmo tamanho para realizar esta opera\u00e7\u00e3o'",
          "409:       },",
          "410:       fnr: {",
          "411:         title: 'Localizar e substituir',",
          "412:         findLabel: 'Localizar',",
          "413:         replaceLabel: 'Substituir',",
          "414:         findTitle: 'O que localizar:',",
          "415:         replaceTitle: 'Substituir por:',",
          "416:         tabs: {",
          "417:           find: 'Localizar',",
          "418:           replace: 'Substituir'",
          "419:         },",
          "420:         filter: {",
          "421:           re: 'Express\u00e3o Regular',",
          "422:           whole: 'Palavra inteira',",
          "423:           sensitive: 'Diferenciar mai\u00fasculas e min\u00fasculas'",
          "424:         },",
          "425:         btns: {",
          "426:           findNext: 'Localizar pr\u00f3ximo',",
          "427:           findAll: 'Localizar todos',",
          "428:           replace: 'Substituir',",
          "429:           replaceAll: 'Substituir tudo',",
          "430:           cancel: 'Cancelar'",
          "431:         },",
          "432:         header: {",
          "433:           seq: '#',",
          "434:           cell: 'C\u00e9lula',",
          "435:           value: 'Valor'",
          "436:         },",
          "437:         empty: '(Vazio)',",
          "438:         reError: 'Express\u00e3o regular inv\u00e1lida',",
          "439:         recordCount: 'Encontradas {0} c\u00e9lulas',",
          "440:         notCell: 'N\u00e3o foram encontradas c\u00e9lulas correspondentes',",
          "441:         replaceSuccess: 'Substitu\u00eddo com sucesso {0} c\u00e9lulas'",
          "442:       }",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js": [
          "File: packages/locale/lang/zh-CN.js -> packages/locale/lang/zh-CN.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:       impFields: '\u5bfc\u5165\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u5b57\u6bb5\u540d\u548c\u6570\u636e\u683c\u5f0f\u662f\u5426\u6b63\u786e',",
          "43:       treeNotImp: '\u6811\u8868\u683c\u4e0d\u652f\u6301\u5bfc\u5165'",
          "44:     },",
          "131:     table: {",
          "132:       emptyText: '\u6682\u65e0\u6570\u636e',",
          "133:       allTitle: '\u5168\u9009/\u53d6\u6d88',",
          "",
          "[Removed Lines]",
          "45:     renderer: {",
          "46:       search: '\u641c\u7d22',",
          "47:       cases: {",
          "48:         equal: '\u7b49\u4e8e',",
          "49:         unequal: '\u4e0d\u7b49\u4e8e',",
          "50:         gt: '\u5927\u4e8e',",
          "51:         ge: '\u5927\u4e8e\u6216\u7b49\u4e8e',",
          "52:         lt: '\u5c0f\u4e8e',",
          "53:         le: '\u5c0f\u4e8e\u6216\u7b49\u4e8e',",
          "54:         begin: '\u5f00\u5934\u662f',",
          "55:         notbegin: '\u5f00\u5934\u4e0d\u662f',",
          "56:         endin: '\u7ed3\u5c3e\u662f',",
          "57:         notendin: '\u7ed3\u5c3e\u4e0d\u662f',",
          "58:         include: '\u5305\u542b',",
          "59:         exclude: '\u4e0d\u5305\u542b',",
          "60:         between: '\u4ecb\u4e8e',",
          "61:         custom: '\u81ea\u5b9a\u4e49\u7b5b\u9009',",
          "62:         insensitive: '\u4e0d\u533a\u5206\u5927\u5c0f\u5199',",
          "63:         isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "64:       },",
          "65:       combination: {",
          "66:         menus: {",
          "67:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "68:           sortAsc: '\u5347\u5e8f',",
          "69:           sortDesc: '\u964d\u5e8f',",
          "70:           fixedColumn: '\u9501\u5b9a\u5217',",
          "71:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "72:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "73:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "74:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7',",
          "75:           clearFilter: '\u6e05\u9664\u7b5b\u9009',",
          "76:           textOption: '\u6587\u672c\u7b5b\u9009',",
          "77:           numberOption: '\u6570\u503c\u7b5b\u9009'",
          "78:         },",
          "79:         popup: {",
          "80:           title: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u7684\u65b9\u5f0f',",
          "81:           currColumnTitle: '\u5f53\u524d\u5217\uff1a',",
          "82:           and: '\u4e0e',",
          "83:           or: '\u6216',",
          "84:           describeHtml: '\u53ef\u7528 ? \u4ee3\u8868\u5355\u4e2a\u5b57\u7b26<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u4e2a\u5b57\u7b26'",
          "85:         },",
          "86:         empty: '(\u7a7a\u767d)',",
          "87:         notData: '\u65e0\u5339\u914d\u9879'",
          "88:       }",
          "89:     },",
          "90:     pro: {",
          "91:       area: {",
          "92:         mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "93:         multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "94:         extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "95:         pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c'",
          "96:       },",
          "97:       fnr: {",
          "98:         title: '\u67e5\u627e\u548c\u66ff\u6362',",
          "99:         findLabel: '\u67e5\u627e',",
          "100:         replaceLabel: '\u66ff\u6362',",
          "101:         findTitle: '\u67e5\u627e\u5185\u5bb9\uff1a',",
          "102:         replaceTitle: '\u66ff\u6362\u4e3a\uff1a',",
          "103:         tabs: {",
          "104:           find: '\u67e5\u627e',",
          "105:           replace: '\u66ff\u6362'",
          "106:         },",
          "107:         filter: {",
          "108:           re: '\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "109:           whole: '\u5168\u8bcd\u5339\u914d',",
          "110:           sensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "111:         },",
          "112:         btns: {",
          "113:           findNext: '\u67e5\u627e\u4e0b\u4e00\u4e2a',",
          "114:           findAll: '\u67e5\u627e\u5168\u90e8',",
          "115:           replace: '\u66ff\u6362',",
          "116:           replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "117:           cancel: '\u53d6\u6d88'",
          "118:         },",
          "119:         header: {",
          "120:           seq: '#',",
          "121:           cell: '\u5355\u5143\u683c',",
          "122:           value: '\u503c'",
          "123:         },",
          "124:         empty: '(\u7a7a\u503c)',",
          "125:         reError: '\u65e0\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "126:         recordCount: '\u5df2\u627e\u5230 {0} \u4e2a\u5355\u5143\u683c',",
          "127:         notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5355\u5143\u683c',",
          "128:         replaceSuccess: '\u6210\u529f\u66ff\u6362 {0} \u4e2a\u5355\u5143\u683c'",
          "129:       }",
          "130:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:       confirm: '\u786e\u8ba4',",
          "189:       cancel: '\u53d6\u6d88'",
          "190:     },",
          "191:     custom: {",
          "192:       cstmTitle: '\u5217\u8bbe\u7f6e',",
          "193:       cstmRestore: '\u6062\u590d\u9ed8\u8ba4',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     filter: {",
          "106:       search: '\u641c\u7d22'",
          "107:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "332:           q4: '\u7b2c\u56db\u5b63\u5ea6'",
          "333:         }",
          "334:       }",
          "335:     }",
          "336:   }",
          "337: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:     },",
          "257:     plugins: {",
          "258:       extendCellArea: {",
          "259:         area: {",
          "260:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "261:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "262:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "263:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "264:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "265:         },",
          "266:         fnr: {",
          "267:           title: '\u67e5\u627e\u548c\u66ff\u6362',",
          "268:           findLabel: '\u67e5\u627e',",
          "269:           replaceLabel: '\u66ff\u6362',",
          "270:           findTitle: '\u67e5\u627e\u5185\u5bb9\uff1a',",
          "271:           replaceTitle: '\u66ff\u6362\u4e3a\uff1a',",
          "272:           tabs: {",
          "273:             find: '\u67e5\u627e',",
          "274:             replace: '\u66ff\u6362'",
          "275:           },",
          "276:           filter: {",
          "277:             re: '\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "278:             whole: '\u5168\u8bcd\u5339\u914d',",
          "279:             sensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "280:           },",
          "281:           btns: {",
          "282:             findNext: '\u67e5\u627e\u4e0b\u4e00\u4e2a',",
          "283:             findAll: '\u67e5\u627e\u5168\u90e8',",
          "284:             replace: '\u66ff\u6362',",
          "285:             replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "286:             cancel: '\u53d6\u6d88'",
          "287:           },",
          "288:           header: {",
          "289:             seq: '#',",
          "290:             cell: '\u5355\u5143\u683c',",
          "291:             value: '\u503c'",
          "292:           },",
          "293:           empty: '(\u7a7a\u503c)',",
          "294:           reError: '\u65e0\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "295:           recordCount: '\u5df2\u627e\u5230 {0} \u4e2a\u5355\u5143\u683c',",
          "296:           notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5355\u5143\u683c',",
          "297:           replaceSuccess: '\u6210\u529f\u66ff\u6362 {0} \u4e2a\u5355\u5143\u683c'",
          "298:         }",
          "299:       },",
          "300:       filterComplexInput: {",
          "301:         menus: {",
          "302:           fixedColumn: '\u9501\u5b9a\u5217',",
          "303:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "304:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "305:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "306:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7'",
          "307:         },",
          "308:         cases: {",
          "309:           equal: '\u7b49\u4e8e',",
          "310:           gt: '\u5927\u4e8e',",
          "311:           lt: '\u5c0f\u4e8e',",
          "312:           begin: '\u5f00\u5934\u662f',",
          "313:           endin: '\u7ed3\u5c3e\u662f',",
          "314:           include: '\u5305\u542b',",
          "315:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "316:         }",
          "317:       },",
          "318:       filterCombination: {",
          "319:         menus: {",
          "320:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "321:           sortAsc: '\u5347\u5e8f',",
          "322:           sortDesc: '\u964d\u5e8f',",
          "323:           fixedColumn: '\u9501\u5b9a\u5217',",
          "324:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "325:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "326:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "327:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7',",
          "328:           clearFilter: '\u6e05\u9664\u7b5b\u9009',",
          "329:           textOption: '\u6587\u672c\u7b5b\u9009',",
          "330:           numberOption: '\u6570\u503c\u7b5b\u9009'",
          "331:         },",
          "332:         popup: {",
          "333:           title: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u7684\u65b9\u5f0f',",
          "334:           currColumnTitle: '\u5f53\u524d\u5217\uff1a',",
          "335:           and: '\u4e0e',",
          "336:           or: '\u6216',",
          "337:           describeHtml: '\u53ef\u7528 ? \u4ee3\u8868\u5355\u4e2a\u5b57\u7b26<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u4e2a\u5b57\u7b26'",
          "338:         },",
          "339:         cases: {",
          "340:           equal: '\u7b49\u4e8e',",
          "341:           unequal: '\u4e0d\u7b49\u4e8e',",
          "342:           gt: '\u5927\u4e8e',",
          "343:           ge: '\u5927\u4e8e\u6216\u7b49\u4e8e',",
          "344:           lt: '\u5c0f\u4e8e',",
          "345:           le: '\u5c0f\u4e8e\u6216\u7b49\u4e8e',",
          "346:           begin: '\u5f00\u5934\u662f',",
          "347:           notbegin: '\u5f00\u5934\u4e0d\u662f',",
          "348:           endin: '\u7ed3\u5c3e\u662f',",
          "349:           notendin: '\u7ed3\u5c3e\u4e0d\u662f',",
          "350:           include: '\u5305\u542b',",
          "351:           exclude: '\u4e0d\u5305\u542b',",
          "352:           between: '\u4ecb\u4e8e',",
          "353:           custom: '\u81ea\u5b9a\u4e49\u7b5b\u9009',",
          "354:           insensitive: '\u4e0d\u533a\u5206\u5927\u5c0f\u5199',",
          "355:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "356:         },",
          "357:         empty: '(\u7a7a\u767d)',",
          "358:         notData: '\u65e0\u5339\u914d\u9879'",
          "359:       }",
          "360:     },",
          "366:     renderer: {",
          "367:       search: '\u641c\u7d22',",
          "368:       cases: {",
          "369:         equal: '\u7b49\u4e8e',",
          "370:         unequal: '\u4e0d\u7b49\u4e8e',",
          "371:         gt: '\u5927\u4e8e',",
          "372:         ge: '\u5927\u4e8e\u6216\u7b49\u4e8e',",
          "373:         lt: '\u5c0f\u4e8e',",
          "374:         le: '\u5c0f\u4e8e\u6216\u7b49\u4e8e',",
          "375:         begin: '\u5f00\u5934\u662f',",
          "376:         notbegin: '\u5f00\u5934\u4e0d\u662f',",
          "377:         endin: '\u7ed3\u5c3e\u662f',",
          "378:         notendin: '\u7ed3\u5c3e\u4e0d\u662f',",
          "379:         include: '\u5305\u542b',",
          "380:         exclude: '\u4e0d\u5305\u542b',",
          "381:         between: '\u4ecb\u4e8e',",
          "382:         custom: '\u81ea\u5b9a\u4e49\u7b5b\u9009',",
          "383:         insensitive: '\u4e0d\u533a\u5206\u5927\u5c0f\u5199',",
          "384:         isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "385:       },",
          "386:       combination: {",
          "387:         menus: {",
          "388:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "389:           sortAsc: '\u5347\u5e8f',",
          "390:           sortDesc: '\u964d\u5e8f',",
          "391:           fixedColumn: '\u9501\u5b9a\u5217',",
          "392:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "393:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "394:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "395:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7',",
          "396:           clearFilter: '\u6e05\u9664\u7b5b\u9009',",
          "397:           textOption: '\u6587\u672c\u7b5b\u9009',",
          "398:           numberOption: '\u6570\u503c\u7b5b\u9009'",
          "399:         },",
          "400:         popup: {",
          "401:           title: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u7684\u65b9\u5f0f',",
          "402:           currColumnTitle: '\u5f53\u524d\u5217\uff1a',",
          "403:           and: '\u4e0e',",
          "404:           or: '\u6216',",
          "405:           describeHtml: '\u53ef\u7528 ? \u4ee3\u8868\u5355\u4e2a\u5b57\u7b26<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u4e2a\u5b57\u7b26'",
          "406:         },",
          "407:         empty: '(\u7a7a\u767d)',",
          "408:         notData: '\u65e0\u5339\u914d\u9879'",
          "409:       }",
          "410:     },",
          "411:     pro: {",
          "412:       area: {",
          "413:         mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "414:         multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "415:         extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "416:         pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c'",
          "417:       },",
          "418:       fnr: {",
          "419:         title: '\u67e5\u627e\u548c\u66ff\u6362',",
          "420:         findLabel: '\u67e5\u627e',",
          "421:         replaceLabel: '\u66ff\u6362',",
          "422:         findTitle: '\u67e5\u627e\u5185\u5bb9\uff1a',",
          "423:         replaceTitle: '\u66ff\u6362\u4e3a\uff1a',",
          "424:         tabs: {",
          "425:           find: '\u67e5\u627e',",
          "426:           replace: '\u66ff\u6362'",
          "427:         },",
          "428:         filter: {",
          "429:           re: '\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "430:           whole: '\u5168\u8bcd\u5339\u914d',",
          "431:           sensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "432:         },",
          "433:         btns: {",
          "434:           findNext: '\u67e5\u627e\u4e0b\u4e00\u4e2a',",
          "435:           findAll: '\u67e5\u627e\u5168\u90e8',",
          "436:           replace: '\u66ff\u6362',",
          "437:           replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "438:           cancel: '\u53d6\u6d88'",
          "439:         },",
          "440:         header: {",
          "441:           seq: '#',",
          "442:           cell: '\u5355\u5143\u683c',",
          "443:           value: '\u503c'",
          "444:         },",
          "445:         empty: '(\u7a7a\u503c)',",
          "446:         reError: '\u65e0\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "447:         recordCount: '\u5df2\u627e\u5230 {0} \u4e2a\u5355\u5143\u683c',",
          "448:         notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5355\u5143\u683c',",
          "449:         replaceSuccess: '\u6210\u529f\u66ff\u6362 {0} \u4e2a\u5355\u5143\u683c'",
          "450:       }",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js": [
          "File: packages/locale/lang/zh-TC.js -> packages/locale/lang/zh-TC.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:       impFields: '\u5c0e\u5165\u5931\u6557\uff0c\u8acb\u6aa2\u67e5\u6b04\u4f4d\u540d\u548c\u6578\u64da\u683c\u5f0f\u662f\u5426\u6b63\u78ba',",
          "43:       treeNotImp: '\u6a39\u72c0\u8868\u683c\u4e0d\u652f\u6301\u5c0e\u5165'",
          "44:     },",
          "131:     table: {",
          "132:       emptyText: '\u66ab\u7121\u8cc7\u6599',",
          "133:       allTitle: '\u5168\u9078/\u53d6\u6d88',",
          "",
          "[Removed Lines]",
          "45:     renderer: {",
          "46:       search: '\u8490\u7d22',",
          "47:       cases: {",
          "48:         equal: '\u7b49\u65bc',",
          "49:         unequal: '\u4e0d\u7b49\u65bc',",
          "50:         gt: '\u5927\u65bc',",
          "51:         ge: '\u5927\u65bc\u6216\u7b49\u65bc',",
          "52:         lt: '\u5c0f\u65bc',",
          "53:         le: '\u5c0f\u65bc\u6216\u7b49\u65bc',",
          "54:         begin: '\u958b\u982d\u662f',",
          "55:         notbegin: '\u958b\u982d\u4e0d\u662f',",
          "56:         endin: '\u7d50\u5c3e\u662f',",
          "57:         notendin: '\u7d50\u5c3e\u4e0d\u662f',",
          "58:         include: '\u5305\u542b',",
          "59:         exclude: '\u4e0d\u5305\u542b',",
          "60:         between: '\u4ecb\u65bc',",
          "61:         custom: '\u81ea\u5b9a\u7fa9\u7be9\u9078',",
          "62:         insensitive: '\u4e0d\u5340\u5206\u5927\u5c0f\u5beb',",
          "63:         isSensitive: '\u5340\u5206\u5927\u5c0f\u5beb'",
          "64:       },",
          "65:       combination: {",
          "66:         menus: {",
          "67:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "68:           sortAsc: '\u6607\u51aa',",
          "69:           sortDesc: '\u964d\u5e8f',",
          "70:           fixedColumn: '\u9396\u5b9a\u5217',",
          "71:           fixedGroup: '\u9396\u5b9a\u7d44',",
          "72:           cancelFixed: '\u53d6\u6d88\u9396\u5b9a',",
          "73:           fixedLeft: '\u9396\u5b9a\u5de6\u5074',",
          "74:           fixedRight: '\u9396\u5b9a\u53f3\u5074',",
          "75:           clearFilter: '\u6e05\u9664\u7be9\u9078',",
          "76:           textOption: '\u6587\u5b57\u7be9\u9078',",
          "77:           numberOption: '\u6578\u503c\u7be9\u9078'",
          "78:         },",
          "79:         popup: {",
          "80:           title: '\u81ea\u5b9a\u7fa9\u7be9\u9078\u7684\u7ba1\u9053',",
          "81:           currColumnTitle: '\u7576\u524d\u5217\uff1a',",
          "82:           and: '\u8207',",
          "83:           or: '\u6216',",
          "84:           describeHtml: '\u7528 ? \u4ee3\u8868\u55ae\u500b\u5b57\u5143<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u500b\u5b57\u5143'",
          "85:         },",
          "86:         empty: '(\u7a7a\u767d)',",
          "87:         notData: '\u7121\u5339\u914d\u9805'",
          "88:       }",
          "89:     },",
          "90:     pro: {",
          "91:       area: {",
          "92:         mergeErr: '\u7121\u6cd5\u5c0d\u5408\u4f75\u5132\u5b58\u683c\u9032\u884c\u8a72\u64cd\u4f5c',",
          "93:         multiErr: '\u7121\u6cd5\u5c0d\u591a\u91cd\u9078\u64c7\u5340\u57df\u9032\u884c\u8a72\u64cd\u4f5c',",
          "94:         extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u5340\u57df\u5305\u542b\u88ab\u5408\u4f75\u7684\u5132\u5b58\u683c\uff0c\u6240\u6709\u5408\u4f75\u7684\u5132\u5b58\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "95:         pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c'",
          "96:       },",
          "97:       fnr: {",
          "98:         title: '\u67e5\u627e\u548c\u66ff\u63db',",
          "99:         findLabel: '\u67e5\u627e',",
          "100:         replaceLabel: '\u66ff\u63db',",
          "101:         findTitle: '\u67e5\u627e\u5167\u5bb9\uff1a',",
          "102:         replaceTitle: '\u66ff\u63db\u70ba\uff1a',",
          "103:         tabs: {",
          "104:           find: '\u67e5\u627e',",
          "105:           replace: '\u66ff\u63db'",
          "106:         },",
          "107:         filter: {",
          "108:           re: '\u898f\u5247\u904b\u7b97\u5f0f',",
          "109:           whole: '\u5168\u8a5e\u5339\u914d',",
          "110:           sensitive: '\u5340\u5206\u5927\u5c0f\u5beb'",
          "111:         },",
          "112:         btns: {",
          "113:           findNext: '\u67e5\u627e\u4e0b\u4e00\u500b',",
          "114:           findAll: '\u67e5\u627e\u5168\u90e8',",
          "115:           replace: '\u66ff\u6362',",
          "116:           replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "117:           cancel: '\u53d6\u6d88'",
          "118:         },",
          "119:         header: {",
          "120:           seq: '#',",
          "121:           cell: '\u5132\u5b58\u683c',",
          "122:           value: '\u503c'",
          "123:         },",
          "124:         empty: '(\u7a7a\u503c)',",
          "125:         reError: '\u7121\u6548\u7684\u898f\u5247\u904b\u7b97\u5f0f',",
          "126:         recordCount: '\u5df2\u627e\u5230 {0} \u500b\u5132\u5b58\u683c',",
          "127:         notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5132\u5b58\u683c',",
          "128:         replaceSuccess: '\u6210\u529f\u66ff\u63db {0} \u500b\u5132\u5b58\u683c'",
          "129:       }",
          "130:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:       confirm: '\u78ba\u8a8d',",
          "189:       cancel: '\u53d6\u6d88'",
          "190:     },",
          "191:     custom: {",
          "192:       cstmTitle: '\u5217\u8a2d\u5b9a',",
          "193:       cstmRestore: '\u6062\u5fa9\u9ed8\u8a8d',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     filter: {",
          "106:       search: '\u641c\u7d22'",
          "107:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "332:           q4: '\u7b2c\u56db\u5b63\u5ea6'",
          "333:         }",
          "334:       }",
          "335:     }",
          "336:   }",
          "337: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:     },",
          "257:     plugins: {",
          "258:       extendCellArea: {",
          "259:         area: {",
          "260:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "261:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "262:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "263:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "264:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "265:         },",
          "266:         fnr: {",
          "267:           title: '\u67e5\u627e\u548c\u66ff\u6362',",
          "268:           findLabel: '\u67e5\u627e',",
          "269:           replaceLabel: '\u66ff\u6362',",
          "270:           findTitle: '\u67e5\u627e\u5185\u5bb9\uff1a',",
          "271:           replaceTitle: '\u66ff\u6362\u4e3a\uff1a',",
          "272:           tabs: {",
          "273:             find: '\u67e5\u627e',",
          "274:             replace: '\u66ff\u6362'",
          "275:           },",
          "276:           filter: {",
          "277:             re: '\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "278:             whole: '\u5168\u8bcd\u5339\u914d',",
          "279:             sensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "280:           },",
          "281:           btns: {",
          "282:             findNext: '\u67e5\u627e\u4e0b\u4e00\u4e2a',",
          "283:             findAll: '\u67e5\u627e\u5168\u90e8',",
          "284:             replace: '\u66ff\u6362',",
          "285:             replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "286:             cancel: '\u53d6\u6d88'",
          "287:           },",
          "288:           header: {",
          "289:             seq: '#',",
          "290:             cell: '\u5355\u5143\u683c',",
          "291:             value: '\u503c'",
          "292:           },",
          "293:           empty: '(\u7a7a\u503c)',",
          "294:           reError: '\u65e0\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "295:           recordCount: '\u5df2\u627e\u5230 {0} \u4e2a\u5355\u5143\u683c',",
          "296:           notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5355\u5143\u683c',",
          "297:           replaceSuccess: '\u6210\u529f\u66ff\u6362 {0} \u4e2a\u5355\u5143\u683c'",
          "298:         }",
          "299:       },",
          "300:       filterComplexInput: {",
          "301:         menus: {",
          "302:           fixedColumn: '\u9501\u5b9a\u5217',",
          "303:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "304:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "305:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "306:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7'",
          "307:         },",
          "308:         cases: {",
          "309:           equal: '\u7b49\u4e8e',",
          "310:           gt: '\u5927\u4e8e',",
          "311:           lt: '\u5c0f\u4e8e',",
          "312:           begin: '\u5f00\u5934\u662f',",
          "313:           endin: '\u7ed3\u5c3e\u662f',",
          "314:           include: '\u5305\u542b',",
          "315:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "316:         }",
          "317:       },",
          "318:       filterCombination: {",
          "319:         menus: {",
          "320:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "321:           sortAsc: '\u5347\u5e8f',",
          "322:           sortDesc: '\u964d\u5e8f',",
          "323:           fixedColumn: '\u9501\u5b9a\u5217',",
          "324:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "325:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "326:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "327:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7',",
          "328:           clearFilter: '\u6e05\u9664\u7b5b\u9009',",
          "329:           textOption: '\u6587\u672c\u7b5b\u9009',",
          "330:           numberOption: '\u6570\u503c\u7b5b\u9009'",
          "331:         },",
          "332:         popup: {",
          "333:           title: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u7684\u65b9\u5f0f',",
          "334:           currColumnTitle: '\u5f53\u524d\u5217\uff1a',",
          "335:           and: '\u4e0e',",
          "336:           or: '\u6216',",
          "337:           describeHtml: '\u53ef\u7528 ? \u4ee3\u8868\u5355\u4e2a\u5b57\u7b26<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u4e2a\u5b57\u7b26'",
          "338:         },",
          "339:         cases: {",
          "340:           equal: '\u7b49\u4e8e',",
          "341:           unequal: '\u4e0d\u7b49\u4e8e',",
          "342:           gt: '\u5927\u4e8e',",
          "343:           ge: '\u5927\u4e8e\u6216\u7b49\u4e8e',",
          "344:           lt: '\u5c0f\u4e8e',",
          "345:           le: '\u5c0f\u4e8e\u6216\u7b49\u4e8e',",
          "346:           begin: '\u5f00\u5934\u662f',",
          "347:           notbegin: '\u5f00\u5934\u4e0d\u662f',",
          "348:           endin: '\u7ed3\u5c3e\u662f',",
          "349:           notendin: '\u7ed3\u5c3e\u4e0d\u662f',",
          "350:           include: '\u5305\u542b',",
          "351:           exclude: '\u4e0d\u5305\u542b',",
          "352:           between: '\u4ecb\u4e8e',",
          "353:           custom: '\u81ea\u5b9a\u4e49\u7b5b\u9009',",
          "354:           insensitive: '\u4e0d\u533a\u5206\u5927\u5c0f\u5199',",
          "355:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "356:         },",
          "357:         empty: '(\u7a7a\u767d)',",
          "358:         notData: '\u65e0\u5339\u914d\u9879'",
          "359:       }",
          "360:     },",
          "366:     renderer: {",
          "367:       search: '\u8490\u7d22',",
          "368:       cases: {",
          "369:         equal: '\u7b49\u65bc',",
          "370:         unequal: '\u4e0d\u7b49\u65bc',",
          "371:         gt: '\u5927\u65bc',",
          "372:         ge: '\u5927\u65bc\u6216\u7b49\u65bc',",
          "373:         lt: '\u5c0f\u65bc',",
          "374:         le: '\u5c0f\u65bc\u6216\u7b49\u65bc',",
          "375:         begin: '\u958b\u982d\u662f',",
          "376:         notbegin: '\u958b\u982d\u4e0d\u662f',",
          "377:         endin: '\u7d50\u5c3e\u662f',",
          "378:         notendin: '\u7d50\u5c3e\u4e0d\u662f',",
          "379:         include: '\u5305\u542b',",
          "380:         exclude: '\u4e0d\u5305\u542b',",
          "381:         between: '\u4ecb\u65bc',",
          "382:         custom: '\u81ea\u5b9a\u7fa9\u7be9\u9078',",
          "383:         insensitive: '\u4e0d\u5340\u5206\u5927\u5c0f\u5beb',",
          "384:         isSensitive: '\u5340\u5206\u5927\u5c0f\u5beb'",
          "385:       },",
          "386:       combination: {",
          "387:         menus: {",
          "388:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "389:           sortAsc: '\u6607\u51aa',",
          "390:           sortDesc: '\u964d\u5e8f',",
          "391:           fixedColumn: '\u9396\u5b9a\u5217',",
          "392:           fixedGroup: '\u9396\u5b9a\u7d44',",
          "393:           cancelFixed: '\u53d6\u6d88\u9396\u5b9a',",
          "394:           fixedLeft: '\u9396\u5b9a\u5de6\u5074',",
          "395:           fixedRight: '\u9396\u5b9a\u53f3\u5074',",
          "396:           clearFilter: '\u6e05\u9664\u7be9\u9078',",
          "397:           textOption: '\u6587\u5b57\u7be9\u9078',",
          "398:           numberOption: '\u6578\u503c\u7be9\u9078'",
          "399:         },",
          "400:         popup: {",
          "401:           title: '\u81ea\u5b9a\u7fa9\u7be9\u9078\u7684\u7ba1\u9053',",
          "402:           currColumnTitle: '\u7576\u524d\u5217\uff1a',",
          "403:           and: '\u8207',",
          "404:           or: '\u6216',",
          "405:           describeHtml: '\u7528 ? \u4ee3\u8868\u55ae\u500b\u5b57\u5143<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u500b\u5b57\u5143'",
          "406:         },",
          "407:         empty: '(\u7a7a\u767d)',",
          "408:         notData: '\u7121\u5339\u914d\u9805'",
          "409:       }",
          "410:     },",
          "411:     pro: {",
          "412:       area: {",
          "413:         mergeErr: '\u7121\u6cd5\u5c0d\u5408\u4f75\u5132\u5b58\u683c\u9032\u884c\u8a72\u64cd\u4f5c',",
          "414:         multiErr: '\u7121\u6cd5\u5c0d\u591a\u91cd\u9078\u64c7\u5340\u57df\u9032\u884c\u8a72\u64cd\u4f5c',",
          "415:         extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u5340\u57df\u5305\u542b\u88ab\u5408\u4f75\u7684\u5132\u5b58\u683c\uff0c\u6240\u6709\u5408\u4f75\u7684\u5132\u5b58\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "416:         pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c'",
          "417:       },",
          "418:       fnr: {",
          "419:         title: '\u67e5\u627e\u548c\u66ff\u63db',",
          "420:         findLabel: '\u67e5\u627e',",
          "421:         replaceLabel: '\u66ff\u63db',",
          "422:         findTitle: '\u67e5\u627e\u5167\u5bb9\uff1a',",
          "423:         replaceTitle: '\u66ff\u63db\u70ba\uff1a',",
          "424:         tabs: {",
          "425:           find: '\u67e5\u627e',",
          "426:           replace: '\u66ff\u63db'",
          "427:         },",
          "428:         filter: {",
          "429:           re: '\u898f\u5247\u904b\u7b97\u5f0f',",
          "430:           whole: '\u5168\u8a5e\u5339\u914d',",
          "431:           sensitive: '\u5340\u5206\u5927\u5c0f\u5beb'",
          "432:         },",
          "433:         btns: {",
          "434:           findNext: '\u67e5\u627e\u4e0b\u4e00\u500b',",
          "435:           findAll: '\u67e5\u627e\u5168\u90e8',",
          "436:           replace: '\u66ff\u6362',",
          "437:           replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "438:           cancel: '\u53d6\u6d88'",
          "439:         },",
          "440:         header: {",
          "441:           seq: '#',",
          "442:           cell: '\u5132\u5b58\u683c',",
          "443:           value: '\u503c'",
          "444:         },",
          "445:         empty: '(\u7a7a\u503c)',",
          "446:         reError: '\u7121\u6548\u7684\u898f\u5247\u904b\u7b97\u5f0f',",
          "447:         recordCount: '\u5df2\u627e\u5230 {0} \u500b\u5132\u5b58\u683c',",
          "448:         notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5132\u5b58\u683c',",
          "449:         replaceSuccess: '\u6210\u529f\u66ff\u63db {0} \u500b\u5132\u5b58\u683c'",
          "450:       }",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5296:       if (!this[`_${name}`]) {",
          "5297:         if ('openExport,openPrint,exportData,openImport,importData,saveFile,readFile,importByFile,print'.split(',').includes(name)) {",
          "5298:           errLog('vxe.error.reqModule', ['VxeTableExportModule'])",
          "5300:           errLog('vxe.error.reqModule', ['VxeTableValidatorModule'])",
          "5301:         } else if ('setFilter,openFilter,clearFilter,getCheckedFilters'.split(',').includes(name)) {",
          "5302:           errLog('vxe.error.reqModule', ['VxeTableFilterModule'])",
          "5304:           errLog('vxe.error.reqModule', ['VxeTableEditModule'])",
          "5308:           errLog('vxe.error.reqModule', ['VxeTableCustomModule'])",
          "5309:         }",
          "5310:       }",
          "",
          "[Removed Lines]",
          "5299:         } else if ('clearValidate,fullValidate,validate'.split(',').includes(name)) {",
          "5303:         } else if ('insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell'.split(',').includes(name)) {",
          "5305:         } else if ('closeMenu'.split(',').includes(name)) {",
          "5306:           errLog('vxe.error.reqModule', ['VxeTableMenuModule'])",
          "5307:         } else if ('openCustom,closeCustom'.split(',').includes(name)) {",
          "",
          "[Added Lines]",
          "5299:         } else if ('fullValidate,validate'.split(',').includes(name)) {",
          "5303:         } else if ('insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell'.split(',').includes(name)) {",
          "5305:         } else if ('openCustom'.split(',').includes(name)) {",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:       initStore: {",
          "338:         filter: false,",
          "339:         import: false,",
          "341:       },",
          "343:       upDataFlag: 0,",
          "",
          "[Removed Lines]",
          "340:         export: false",
          "",
          "[Added Lines]",
          "340:         export: false,",
          "341:         custom: false",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1186:         ref: 'customWrapper',",
          "1187:         props: {",
          "1188:           customStore",
          "1189:         }",
          "",
          "[Removed Lines]",
          "1185:       h('vxe-table-custom-panel', {",
          "1190:       }),",
          "",
          "[Added Lines]",
          "1186:       initStore.custom ? h('vxe-table-custom-panel', {",
          "1191:       }) : _e(),",
          "",
          "---------------"
        ],
        "packages/toolbar/src/toolbar.js||packages/toolbar/src/toolbar.js": [
          "File: packages/toolbar/src/toolbar.js -> packages/toolbar/src/toolbar.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:       }",
          "289:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "290:         if (customOpts.isFooter) {",
          "292:         }",
          "293:         if (customOpts.showFooter) {",
          "295:         }",
          "296:         if (customOpts.immediate) {",
          "298:         }",
          "299:         if (customOpts.trigger) {",
          "301:         }",
          "302:         if (this.buttons) {",
          "303:           this.buttons.forEach(item => {",
          "",
          "[Removed Lines]",
          "291:           warnLog('vxe.error.delProp', ['custom.isFooter', 'custom-config.showFooter'])",
          "294:           warnLog('vxe.error.delProp', ['custom.showFooter', 'custom-config.showFooter'])",
          "297:           warnLog('vxe.error.delProp', ['custom.immediate', 'custom-config.immediate'])",
          "300:           warnLog('vxe.error.delProp', ['custom.trigger', 'custom-config.trigger'])",
          "",
          "[Added Lines]",
          "291:           warnLog('vxe.error.delProp', ['toolbar.custom.isFooter', 'table.custom-config.showFooter'])",
          "294:           warnLog('vxe.error.delProp', ['toolbar.custom.showFooter', 'table.custom-config.showFooter'])",
          "297:           warnLog('vxe.error.delProp', ['toolbar.custom.immediate', 'table.custom-config.immediate'])",
          "300:           warnLog('vxe.error.delProp', ['toolbar.custom.trigger', 'table.custom-config.trigger'])",
          "",
          "---------------"
        ]
      }
    }
  ]
}