{
  "cve_id": "CVE-2022-24614",
  "cve_desc": "When reading a specially crafted JPEG file, metadata-extractor up to 2.16.0 can be made to allocate large amounts of memory that finally leads to an out-of-memory error even for very small inputs. This could be used to mount a denial of service attack against services that use metadata-extractor library.",
  "repo": "drewnoakes/metadata-extractor",
  "patch_hash": "85ec243df54133a87f9d928d2278595f52b07519",
  "patch_info": {
    "commit_hash": "85ec243df54133a87f9d928d2278595f52b07519",
    "repo": "drewnoakes/metadata-extractor",
    "commit_url": "https://github.com/drewnoakes/metadata-extractor/commit/85ec243df54133a87f9d928d2278595f52b07519",
    "files": [
      "Source/com/drew/lang/SequentialByteArrayReader.java",
      "Source/com/drew/lang/StreamReader.java",
      "Tests/com/drew/lang/SequentialAccessTestBase.java"
    ],
    "message": "Merge pull request #570 from cniles/master\n\nFix integer addition overflow.",
    "before_after_code_files": [
      "Source/com/drew/lang/SequentialByteArrayReader.java||Source/com/drew/lang/SequentialByteArrayReader.java",
      "Source/com/drew/lang/StreamReader.java||Source/com/drew/lang/StreamReader.java",
      "Tests/com/drew/lang/SequentialAccessTestBase.java||Tests/com/drew/lang/SequentialAccessTestBase.java"
    ]
  },
  "patch_diff": {
    "Source/com/drew/lang/SequentialByteArrayReader.java||Source/com/drew/lang/SequentialByteArrayReader.java": [
      "File: Source/com/drew/lang/SequentialByteArrayReader.java -> Source/com/drew/lang/SequentialByteArrayReader.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "70:     @Override",
      "71:     public byte[] getBytes(int count) throws IOException",
      "72:     {",
      "74:             throw new EOFException(\"End of data reached.\");",
      "75:         }",
      "",
      "[Removed Lines]",
      "73:         if (_index + count > _bytes.length) {",
      "",
      "[Added Lines]",
      "73:         if ((long)_index + count > _bytes.length) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:     @Override",
      "85:     public void getBytes(@NotNull byte[] buffer, int offset, int count) throws IOException",
      "86:     {",
      "88:             throw new EOFException(\"End of data reached.\");",
      "89:         }",
      "",
      "[Removed Lines]",
      "87:         if (_index + count > _bytes.length) {",
      "",
      "[Added Lines]",
      "87:         if ((long)_index + count > _bytes.length) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "113:             throw new IllegalArgumentException(\"n must be zero or greater.\");",
      "114:         }",
      "119:             _index = _bytes.length;",
      "120:             return false;",
      "121:         }",
      "123:         return true;",
      "124:     }",
      "",
      "[Removed Lines]",
      "116:         _index += n;",
      "118:         if (_index > _bytes.length) {",
      "",
      "[Added Lines]",
      "116:         if (_index + n > _bytes.length)  {",
      "121:         _index += n;",
      "",
      "---------------"
    ],
    "Source/com/drew/lang/StreamReader.java||Source/com/drew/lang/StreamReader.java": [
      "File: Source/com/drew/lang/StreamReader.java -> Source/com/drew/lang/StreamReader.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:     @Override",
      "69:     public byte[] getBytes(int count) throws IOException",
      "70:     {",
      "74:     }",
      "76:     @Override",
      "",
      "[Removed Lines]",
      "71:         byte[] bytes = new byte[count];",
      "72:         getBytes(bytes, 0, count);",
      "73:         return bytes;",
      "",
      "[Added Lines]",
      "71:         try {",
      "72:             byte[] bytes = new byte[count];",
      "73:             getBytes(bytes, 0, count);",
      "74:             return bytes;",
      "75:         } catch (OutOfMemoryError e) {",
      "76:             throw new EOFException(\"End of data reached.\");",
      "77:         }",
      "",
      "---------------"
    ],
    "Tests/com/drew/lang/SequentialAccessTestBase.java||Tests/com/drew/lang/SequentialAccessTestBase.java": [
      "File: Tests/com/drew/lang/SequentialAccessTestBase.java -> Tests/com/drew/lang/SequentialAccessTestBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:     @Test",
      "41:     public void testDefaultEndianness()",
      "42:     {",
      "44:     }",
      "46:     @Test",
      "",
      "[Removed Lines]",
      "43:         assertEquals(true, createReader(new byte[1]).isMotorolaByteOrder());",
      "",
      "[Added Lines]",
      "43:         assertTrue(createReader(new byte[1]).isMotorolaByteOrder());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "269:     @Test",
      "270:     public void testOverflowBoundsCalculation()",
      "271:     {",
      "274:         try {",
      "275:             reader.getBytes(15);",
      "276:         } catch (IOException e) {",
      "277:             assertEquals(\"End of data reached.\", e.getMessage());",
      "278:         }",
      "279:     }",
      "281:     @Test",
      "",
      "[Removed Lines]",
      "272:         SequentialReader reader = createReader(new byte[10]);",
      "",
      "[Added Lines]",
      "273:             SequentialReader reader = createReader(new byte[10]);",
      "279:         try {",
      "280:             SequentialReader reader = createReader(new byte[10]);",
      "281:             reader.getBytes(5);",
      "282:             reader.getBytes(Integer.MAX_VALUE);",
      "283:         } catch (IOException e) {",
      "284:             assertEquals(\"End of data reached.\", e.getMessage());",
      "285:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "325:             reader.skip(1);",
      "326:             fail(\"Expecting exception\");",
      "327:         } catch (EOFException ignored) {}",
      "328:     }",
      "330:     @Test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336:         try {",
      "337:             reader = createReader(new byte[100]);",
      "338:             reader.skip(50);",
      "339:             reader.skip(Integer.MAX_VALUE);",
      "340:             fail(\"Expecting exception\");",
      "341:         } catch (EOFException ignored) {}",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "336:         assertTrue(reader.trySkip(1));",
      "337:         assertTrue(reader.trySkip(1));",
      "338:         assertFalse(reader.trySkip(1));",
      "339:     }",
      "340: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "354:         reader = createReader(new byte[100]);",
      "355:         reader.getBytes(50);",
      "356:         assertFalse(reader.trySkip(Integer.MAX_VALUE));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ecff9b496c31cff7f6772e6bb398e3a3320fdd46",
      "candidate_info": {
        "commit_hash": "ecff9b496c31cff7f6772e6bb398e3a3320fdd46",
        "repo": "drewnoakes/metadata-extractor",
        "commit_url": "https://github.com/drewnoakes/metadata-extractor/commit/ecff9b496c31cff7f6772e6bb398e3a3320fdd46",
        "files": [
          "Source/com/drew/lang/SequentialByteArrayReader.java",
          "Source/com/drew/lang/StreamReader.java",
          "Tests/com/drew/lang/SequentialAccessTestBase.java"
        ],
        "message": "Fix integer addition overflow.\n\n    An integer overflow can occur when extending the index, preventing guard statements from catching indices outside the expected buffer range and resulting in OutOfMemory exceptions from array allocation.",
        "before_after_code_files": [
          "Source/com/drew/lang/SequentialByteArrayReader.java||Source/com/drew/lang/SequentialByteArrayReader.java",
          "Source/com/drew/lang/StreamReader.java||Source/com/drew/lang/StreamReader.java",
          "Tests/com/drew/lang/SequentialAccessTestBase.java||Tests/com/drew/lang/SequentialAccessTestBase.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/drewnoakes/metadata-extractor/pull/570"
        ],
        "olp_code_files": {
          "patch": [
            "Source/com/drew/lang/SequentialByteArrayReader.java||Source/com/drew/lang/SequentialByteArrayReader.java",
            "Source/com/drew/lang/StreamReader.java||Source/com/drew/lang/StreamReader.java",
            "Tests/com/drew/lang/SequentialAccessTestBase.java||Tests/com/drew/lang/SequentialAccessTestBase.java"
          ],
          "candidate": [
            "Source/com/drew/lang/SequentialByteArrayReader.java||Source/com/drew/lang/SequentialByteArrayReader.java",
            "Source/com/drew/lang/StreamReader.java||Source/com/drew/lang/StreamReader.java",
            "Tests/com/drew/lang/SequentialAccessTestBase.java||Tests/com/drew/lang/SequentialAccessTestBase.java"
          ]
        }
      },
      "candidate_diff": {
        "Source/com/drew/lang/SequentialByteArrayReader.java||Source/com/drew/lang/SequentialByteArrayReader.java": [
          "File: Source/com/drew/lang/SequentialByteArrayReader.java -> Source/com/drew/lang/SequentialByteArrayReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     @Override",
          "71:     public byte[] getBytes(int count) throws IOException",
          "72:     {",
          "74:             throw new EOFException(\"End of data reached.\");",
          "75:         }",
          "",
          "[Removed Lines]",
          "73:         if (_index + count > _bytes.length) {",
          "",
          "[Added Lines]",
          "73:         if ((long)_index + count > _bytes.length) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     @Override",
          "85:     public void getBytes(@NotNull byte[] buffer, int offset, int count) throws IOException",
          "86:     {",
          "88:             throw new EOFException(\"End of data reached.\");",
          "89:         }",
          "",
          "[Removed Lines]",
          "87:         if (_index + count > _bytes.length) {",
          "",
          "[Added Lines]",
          "87:         if ((long)_index + count > _bytes.length) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:             throw new IllegalArgumentException(\"n must be zero or greater.\");",
          "114:         }",
          "119:             _index = _bytes.length;",
          "120:             return false;",
          "121:         }",
          "123:         return true;",
          "124:     }",
          "",
          "[Removed Lines]",
          "116:         _index += n;",
          "118:         if (_index > _bytes.length) {",
          "",
          "[Added Lines]",
          "116:         if (_index + n > _bytes.length)  {",
          "121:         _index += n;",
          "",
          "---------------"
        ],
        "Source/com/drew/lang/StreamReader.java||Source/com/drew/lang/StreamReader.java": [
          "File: Source/com/drew/lang/StreamReader.java -> Source/com/drew/lang/StreamReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     @Override",
          "69:     public byte[] getBytes(int count) throws IOException",
          "70:     {",
          "74:     }",
          "76:     @Override",
          "",
          "[Removed Lines]",
          "71:         byte[] bytes = new byte[count];",
          "72:         getBytes(bytes, 0, count);",
          "73:         return bytes;",
          "",
          "[Added Lines]",
          "71:         try {",
          "72:             byte[] bytes = new byte[count];",
          "73:             getBytes(bytes, 0, count);",
          "74:             return bytes;",
          "75:         } catch (OutOfMemoryError e) {",
          "76:             throw new EOFException(\"End of data reached.\");",
          "77:         }",
          "",
          "---------------"
        ],
        "Tests/com/drew/lang/SequentialAccessTestBase.java||Tests/com/drew/lang/SequentialAccessTestBase.java": [
          "File: Tests/com/drew/lang/SequentialAccessTestBase.java -> Tests/com/drew/lang/SequentialAccessTestBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     @Test",
          "41:     public void testDefaultEndianness()",
          "42:     {",
          "44:     }",
          "46:     @Test",
          "",
          "[Removed Lines]",
          "43:         assertEquals(true, createReader(new byte[1]).isMotorolaByteOrder());",
          "",
          "[Added Lines]",
          "43:         assertTrue(createReader(new byte[1]).isMotorolaByteOrder());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:     @Test",
          "270:     public void testOverflowBoundsCalculation()",
          "271:     {",
          "274:         try {",
          "275:             reader.getBytes(15);",
          "276:         } catch (IOException e) {",
          "277:             assertEquals(\"End of data reached.\", e.getMessage());",
          "278:         }",
          "279:     }",
          "281:     @Test",
          "",
          "[Removed Lines]",
          "272:         SequentialReader reader = createReader(new byte[10]);",
          "",
          "[Added Lines]",
          "273:             SequentialReader reader = createReader(new byte[10]);",
          "279:         try {",
          "280:             SequentialReader reader = createReader(new byte[10]);",
          "281:             reader.getBytes(5);",
          "282:             reader.getBytes(Integer.MAX_VALUE);",
          "283:         } catch (IOException e) {",
          "284:             assertEquals(\"End of data reached.\", e.getMessage());",
          "285:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "325:             reader.skip(1);",
          "326:             fail(\"Expecting exception\");",
          "327:         } catch (EOFException ignored) {}",
          "328:     }",
          "330:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:         try {",
          "337:             reader = createReader(new byte[100]);",
          "338:             reader.skip(50);",
          "339:             reader.skip(Integer.MAX_VALUE);",
          "340:             fail(\"Expecting exception\");",
          "341:         } catch (EOFException ignored) {}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "336:         assertTrue(reader.trySkip(1));",
          "337:         assertTrue(reader.trySkip(1));",
          "338:         assertFalse(reader.trySkip(1));",
          "339:     }",
          "340: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354:         reader = createReader(new byte[100]);",
          "355:         reader.getBytes(50);",
          "356:         assertFalse(reader.trySkip(Integer.MAX_VALUE));",
          "",
          "---------------"
        ]
      }
    }
  ]
}