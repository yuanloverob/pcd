{
  "cve_id": "CVE-2024-32866",
  "cve_desc": "Conform, a type-safe form validation library, allows the parsing of nested objects in the form of `object.property`. Due to an improper implementation of this feature in versions prior to 1.1.1, an attacker can exploit the feature to trigger prototype pollution by passing a crafted input to `parseWith...` functions. Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability. Version 1.1.1 contains a patch for the issue.\n",
  "repo": "edmundhung/conform",
  "patch_hash": "4819d51b5a53fd5486fc85c17cdc148eb160e3de",
  "patch_info": {
    "commit_hash": "4819d51b5a53fd5486fc85c17cdc148eb160e3de",
    "repo": "edmundhung/conform",
    "commit_url": "https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de",
    "files": [
      "packages/conform-dom/formdata.ts"
    ],
    "message": "Merge pull request from GHSA-624g-8qjg-8qxf",
    "before_after_code_files": [
      "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts"
    ]
  },
  "patch_diff": {
    "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts": [
      "File: packages/conform-dom/formdata.ts -> packages/conform-dom/formdata.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:  return name",
      "39:   .split(/\\.|(\\[\\d*\\])/)",
      "40:   .reduce<Array<string | number>>((result, segment) => {",
      "42:     if (segment.startsWith('[') && segment.endsWith(']')) {",
      "43:      const index = segment.slice(1, -1);",
      "",
      "[Removed Lines]",
      "41:    if (typeof segment !== 'undefined' && segment !== '') {",
      "",
      "[Added Lines]",
      "41:    if (",
      "42:     typeof segment !== 'undefined' &&",
      "43:     segment !== '' &&",
      "44:     segment !== '__proto__' &&",
      "45:     segment !== 'constructor' &&",
      "46:     segment !== 'prototype'",
      "47:    ) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "114:   const nextKey = paths[index + 1];",
      "115:   const newValue =",
      "116:    index != lastIndex",
      "118:     : valueFn(pointer[key]);",
      "120:   pointer[key] = newValue;",
      "",
      "[Removed Lines]",
      "117:     ? pointer[key] ?? (typeof nextKey === 'number' ? [] : {})",
      "",
      "[Added Lines]",
      "123:     ? Object.hasOwn(pointer, key)",
      "124:      ? pointer[key]",
      "125:      : typeof nextKey === 'number'",
      "126:      ? []",
      "127:      : {}",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "133:    break;",
      "134:   }",
      "136:   if (isPlainObject(pointer) && typeof path === 'string') {",
      "137:    pointer = pointer[path];",
      "138:   } else if (Array.isArray(pointer) && typeof path === 'number') {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "146:   if (!Object.hasOwn(pointer, path)) {",
      "147:    return;",
      "148:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3caf74dc98f77a87f1aa54540d9ff589667a1ea9",
      "candidate_info": {
        "commit_hash": "3caf74dc98f77a87f1aa54540d9ff589667a1ea9",
        "repo": "edmundhung/conform",
        "commit_url": "https://github.com/edmundhung/conform/commit/3caf74dc98f77a87f1aa54540d9ff589667a1ea9",
        "files": [
          ".github/ISSUE_TEMPLATE/bug_report.yml",
          ".github/ISSUE_TEMPLATE/config.yml",
          ".prettierrc",
          ".prettierrc.json",
          "docs/integration/nextjs.md",
          "docs/ja/integration/nextjs.md",
          "docs/tutorial.md",
          "examples/chakra-ui/public/index.html",
          "examples/headless-ui/public/index.html",
          "examples/headless-ui/src/App.tsx",
          "examples/material-ui/public/index.html",
          "examples/radix-ui/.eslintrc.cjs",
          "examples/radix-ui/index.html",
          "examples/react-router/index.html",
          "examples/shadcn-ui/.eslintrc.cjs",
          "examples/shadcn-ui/index.html",
          "guide/app/styles.css",
          "package.json",
          "packages/conform-dom/form.ts",
          "packages/conform-dom/formdata.ts",
          "packages/conform-dom/submission.ts",
          "packages/conform-react/context.tsx",
          "packages/conform-react/integrations.ts",
          "packages/conform-validitystate/index.ts",
          "packages/conform-zod/parse.ts",
          "playground/app/routes/input-event.tsx",
          "playground/app/routes/recursive-list.tsx",
          "pnpm-lock.yaml",
          "tests/conform-zod.spec.ts",
          "tests/integrations/metadata.spec.ts"
        ],
        "message": "chore: upgrade prettier (#644)",
        "before_after_code_files": [
          "examples/chakra-ui/public/index.html||examples/chakra-ui/public/index.html",
          "examples/headless-ui/public/index.html||examples/headless-ui/public/index.html",
          "examples/headless-ui/src/App.tsx||examples/headless-ui/src/App.tsx",
          "examples/material-ui/public/index.html||examples/material-ui/public/index.html",
          "examples/radix-ui/.eslintrc.cjs||examples/radix-ui/.eslintrc.cjs",
          "examples/radix-ui/index.html||examples/radix-ui/index.html",
          "examples/react-router/index.html||examples/react-router/index.html",
          "examples/shadcn-ui/.eslintrc.cjs||examples/shadcn-ui/.eslintrc.cjs",
          "examples/shadcn-ui/index.html||examples/shadcn-ui/index.html",
          "guide/app/styles.css||guide/app/styles.css",
          "packages/conform-dom/form.ts||packages/conform-dom/form.ts",
          "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts",
          "packages/conform-dom/submission.ts||packages/conform-dom/submission.ts",
          "packages/conform-react/context.tsx||packages/conform-react/context.tsx",
          "packages/conform-react/integrations.ts||packages/conform-react/integrations.ts",
          "packages/conform-validitystate/index.ts||packages/conform-validitystate/index.ts",
          "packages/conform-zod/parse.ts||packages/conform-zod/parse.ts",
          "playground/app/routes/input-event.tsx||playground/app/routes/input-event.tsx",
          "playground/app/routes/recursive-list.tsx||playground/app/routes/recursive-list.tsx",
          "tests/conform-zod.spec.ts||tests/conform-zod.spec.ts",
          "tests/integrations/metadata.spec.ts||tests/integrations/metadata.spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts"
          ],
          "candidate": [
            "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts"
          ]
        }
      },
      "candidate_diff": {
        "examples/chakra-ui/public/index.html||examples/chakra-ui/public/index.html": [
          "File: examples/chakra-ui/public/index.html -> examples/chakra-ui/public/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <html lang=\"en\">",
          "8:       Notice the use of %PUBLIC_URL% in the tags above.",
          "9:       It will be replaced with the URL of the `public` folder during the build.",
          "10:       Only files inside the `public` folder can be referenced from the HTML.",
          "",
          "[Removed Lines]",
          "1: <!DOCTYPE html>",
          "3:   <head>",
          "4:     <meta charset=\"utf-8\" />",
          "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
          "6:     <meta name=\"theme-color\" content=\"#000000\" />",
          "7:     <!--",
          "",
          "[Added Lines]",
          "1: <!doctype html>",
          "3:  <head>",
          "4:   <meta charset=\"utf-8\" />",
          "5:   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
          "6:   <meta name=\"theme-color\" content=\"#000000\" />",
          "7:   <!--",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:       work correctly both with client-side routing and a non-root public URL.",
          "14:       Learn how to configure a non-root public URL by running `npm run build`.",
          "15:     -->",
          "22:       This HTML file is a template.",
          "23:       If you open it directly in the browser, you will see an empty page.",
          "",
          "[Removed Lines]",
          "16:     <title>Chakra UI - Conform Example</title>",
          "17:   </head>",
          "18:   <body>",
          "19:     <noscript>You need to enable JavaScript to run this app.</noscript>",
          "20:     <div id=\"root\"></div>",
          "21:     <!--",
          "",
          "[Added Lines]",
          "16:   <title>Chakra UI - Conform Example</title>",
          "17:  </head>",
          "18:  <body>",
          "19:   <noscript>You need to enable JavaScript to run this app.</noscript>",
          "20:   <div id=\"root\"></div>",
          "21:   <!--",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:       To begin the development, run `npm start` or `yarn start`.",
          "29:       To create a production bundle, use `npm run build` or `yarn build`.",
          "30:     -->",
          "32: </html>",
          "",
          "[Removed Lines]",
          "31:   </body>",
          "",
          "[Added Lines]",
          "31:  </body>",
          "",
          "---------------"
        ],
        "examples/headless-ui/public/index.html||examples/headless-ui/public/index.html": [
          "File: examples/headless-ui/public/index.html -> examples/headless-ui/public/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <html lang=\"en\">",
          "8:       Notice the use of %PUBLIC_URL% in the tags above.",
          "9:       It will be replaced with the URL of the `public` folder during the build.",
          "10:       Only files inside the `public` folder can be referenced from the HTML.",
          "",
          "[Removed Lines]",
          "1: <!DOCTYPE html>",
          "3:   <head>",
          "4:     <meta charset=\"utf-8\" />",
          "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
          "6:     <meta name=\"theme-color\" content=\"#000000\" />",
          "7:     <!--",
          "",
          "[Added Lines]",
          "1: <!doctype html>",
          "3:  <head>",
          "4:   <meta charset=\"utf-8\" />",
          "5:   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
          "6:   <meta name=\"theme-color\" content=\"#000000\" />",
          "7:   <!--",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:       work correctly both with client-side routing and a non-root public URL.",
          "14:       Learn how to configure a non-root public URL by running `npm run build`.",
          "15:     -->",
          "22:       This HTML file is a template.",
          "23:       If you open it directly in the browser, you will see an empty page.",
          "",
          "[Removed Lines]",
          "16:     <title>Headless UI - Conform Example</title>",
          "17:   </head>",
          "18:   <body>",
          "19:     <noscript>You need to enable JavaScript to run this app.</noscript>",
          "20:     <div id=\"root\"></div>",
          "21:     <!--",
          "",
          "[Added Lines]",
          "16:   <title>Headless UI - Conform Example</title>",
          "17:  </head>",
          "18:  <body>",
          "19:   <noscript>You need to enable JavaScript to run this app.</noscript>",
          "20:   <div id=\"root\"></div>",
          "21:   <!--",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:       To begin the development, run `npm start` or `yarn start`.",
          "29:       To create a production bundle, use `npm run build` or `yarn build`.",
          "30:     -->",
          "32: </html>",
          "",
          "[Removed Lines]",
          "31:   </body>",
          "",
          "[Added Lines]",
          "31:  </body>",
          "",
          "---------------"
        ],
        "examples/headless-ui/src/App.tsx||examples/headless-ui/src/App.tsx": [
          "File: examples/headless-ui/src/App.tsx -> examples/headless-ui/src/App.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:   ? people",
          "228:   : people.filter((person) =>",
          "229:     person.name.toLowerCase().includes(query.toLowerCase()),",
          "232:  return (",
          "233:   <Combobox",
          "",
          "[Removed Lines]",
          "230:     );",
          "",
          "[Added Lines]",
          "230:    );",
          "",
          "---------------"
        ],
        "examples/material-ui/public/index.html||examples/material-ui/public/index.html": [
          "File: examples/material-ui/public/index.html -> examples/material-ui/public/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <html lang=\"en\">",
          "8:       Notice the use of %PUBLIC_URL% in the tags above.",
          "9:       It will be replaced with the URL of the `public` folder during the build.",
          "10:       Only files inside the `public` folder can be referenced from the HTML.",
          "",
          "[Removed Lines]",
          "1: <!DOCTYPE html>",
          "3:   <head>",
          "4:     <meta charset=\"utf-8\" />",
          "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
          "6:     <meta name=\"theme-color\" content=\"#000000\" />",
          "7:     <!--",
          "",
          "[Added Lines]",
          "1: <!doctype html>",
          "3:  <head>",
          "4:   <meta charset=\"utf-8\" />",
          "5:   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
          "6:   <meta name=\"theme-color\" content=\"#000000\" />",
          "7:   <!--",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:       work correctly both with client-side routing and a non-root public URL.",
          "14:       Learn how to configure a non-root public URL by running `npm run build`.",
          "15:     -->",
          "22:       This HTML file is a template.",
          "23:       If you open it directly in the browser, you will see an empty page.",
          "",
          "[Removed Lines]",
          "16:     <title>Material UI - Conform Example</title>",
          "17:   </head>",
          "18:   <body>",
          "19:     <noscript>You need to enable JavaScript to run this app.</noscript>",
          "20:     <div id=\"root\"></div>",
          "21:     <!--",
          "",
          "[Added Lines]",
          "16:   <title>Material UI - Conform Example</title>",
          "17:  </head>",
          "18:  <body>",
          "19:   <noscript>You need to enable JavaScript to run this app.</noscript>",
          "20:   <div id=\"root\"></div>",
          "21:   <!--",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:       To begin the development, run `npm start` or `yarn start`.",
          "29:       To create a production bundle, use `npm run build` or `yarn build`.",
          "30:     -->",
          "32: </html>",
          "",
          "[Removed Lines]",
          "31:   </body>",
          "",
          "[Added Lines]",
          "31:  </body>",
          "",
          "---------------"
        ],
        "examples/radix-ui/.eslintrc.cjs||examples/radix-ui/.eslintrc.cjs": [
          "File: examples/radix-ui/.eslintrc.cjs -> examples/radix-ui/.eslintrc.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module.exports = {",
          "",
          "[Removed Lines]",
          "2:   root: true,",
          "3:   env: { browser: true, es2020: true },",
          "4:   extends: [",
          "5:     'eslint:recommended',",
          "6:     'plugin:@typescript-eslint/recommended',",
          "7:     'plugin:react-hooks/recommended',",
          "8:   ],",
          "9:   ignorePatterns: ['dist', '.eslintrc.cjs'],",
          "10:   parser: '@typescript-eslint/parser',",
          "11:   plugins: ['react-refresh'],",
          "12:   rules: {",
          "13:     'react-refresh/only-export-components': [",
          "14:       'warn',",
          "15:       { allowConstantExport: true },",
          "16:     ],",
          "17:   },",
          "18: }",
          "",
          "[Added Lines]",
          "2:  root: true,",
          "3:  env: { browser: true, es2020: true },",
          "4:  extends: [",
          "5:   'eslint:recommended',",
          "6:   'plugin:@typescript-eslint/recommended',",
          "7:   'plugin:react-hooks/recommended',",
          "8:  ],",
          "9:  ignorePatterns: ['dist', '.eslintrc.cjs'],",
          "10:  parser: '@typescript-eslint/parser',",
          "11:  plugins: ['react-refresh'],",
          "12:  rules: {",
          "13:   'react-refresh/only-export-components': [",
          "14:    'warn',",
          "15:    { allowConstantExport: true },",
          "16:   ],",
          "17:  },",
          "18: };",
          "",
          "---------------"
        ],
        "examples/radix-ui/index.html||examples/radix-ui/index.html": [
          "File: examples/radix-ui/index.html -> examples/radix-ui/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <html lang=\"en\">",
          "3:  <head>",
          "4:   <meta charset=\"UTF-8\" />",
          "",
          "[Removed Lines]",
          "1: <!DOCTYPE html>",
          "",
          "[Added Lines]",
          "1: <!doctype html>",
          "",
          "---------------"
        ],
        "examples/react-router/index.html||examples/react-router/index.html": [
          "File: examples/react-router/index.html -> examples/react-router/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <html lang=\"en\">",
          "",
          "[Removed Lines]",
          "1: <!DOCTYPE html>",
          "3:   <head>",
          "4:     <meta charset=\"UTF-8\" />",
          "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
          "6:     <title>Conform - React Router Example</title>",
          "7:   </head>",
          "8:   <body>",
          "9:     <div id=\"root\"></div>",
          "10:     <script type=\"module\" src=\"/src/main.tsx\"></script>",
          "11:   </body>",
          "12: </html>",
          "",
          "[Added Lines]",
          "1: <!doctype html>",
          "4:   <meta charset=\"UTF-8\" />",
          "5:   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
          "6:   <title>Conform - React Router Example</title>",
          "7:  </head>",
          "8:  <body>",
          "9:   <div id=\"root\"></div>",
          "10:   <script type=\"module\" src=\"/src/main.tsx\"></script>",
          "11:  </body>",
          "12: </html>",
          "",
          "---------------"
        ],
        "examples/shadcn-ui/.eslintrc.cjs||examples/shadcn-ui/.eslintrc.cjs": [
          "File: examples/shadcn-ui/.eslintrc.cjs -> examples/shadcn-ui/.eslintrc.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module.exports = {",
          "",
          "[Removed Lines]",
          "2:   root: true,",
          "3:   env: { browser: true, es2020: true },",
          "4:   extends: [",
          "5:     'eslint:recommended',",
          "6:     'plugin:@typescript-eslint/recommended',",
          "7:     'plugin:react-hooks/recommended',",
          "8:   ],",
          "9:   ignorePatterns: ['dist', '.eslintrc.cjs'],",
          "10:   parser: '@typescript-eslint/parser',",
          "11:   plugins: ['react-refresh'],",
          "12:   rules: {",
          "13:     'react-refresh/only-export-components': [",
          "14:       'warn',",
          "15:       { allowConstantExport: true },",
          "16:     ],",
          "17:   },",
          "18: }",
          "",
          "[Added Lines]",
          "2:  root: true,",
          "3:  env: { browser: true, es2020: true },",
          "4:  extends: [",
          "5:   'eslint:recommended',",
          "6:   'plugin:@typescript-eslint/recommended',",
          "7:   'plugin:react-hooks/recommended',",
          "8:  ],",
          "9:  ignorePatterns: ['dist', '.eslintrc.cjs'],",
          "10:  parser: '@typescript-eslint/parser',",
          "11:  plugins: ['react-refresh'],",
          "12:  rules: {",
          "13:   'react-refresh/only-export-components': [",
          "14:    'warn',",
          "15:    { allowConstantExport: true },",
          "16:   ],",
          "17:  },",
          "18: };",
          "",
          "---------------"
        ],
        "examples/shadcn-ui/index.html||examples/shadcn-ui/index.html": [
          "File: examples/shadcn-ui/index.html -> examples/shadcn-ui/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <!doctype html>",
          "2: <html lang=\"en\">",
          "13: </html>",
          "",
          "[Removed Lines]",
          "3:   <head>",
          "4:     <meta charset=\"UTF-8\" />",
          "5:     <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />",
          "6:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
          "7:     <title>Vite + React + TS</title>",
          "8:   </head>",
          "9:   <body>",
          "10:     <div id=\"root\"></div>",
          "11:     <script type=\"module\" src=\"/src/main.tsx\"></script>",
          "12:   </body>",
          "",
          "[Added Lines]",
          "3:  <head>",
          "4:   <meta charset=\"UTF-8\" />",
          "5:   <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />",
          "6:   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
          "7:   <title>Vite + React + TS</title>",
          "8:  </head>",
          "9:  <body>",
          "10:   <div id=\"root\"></div>",
          "11:   <script type=\"module\" src=\"/src/main.tsx\"></script>",
          "12:  </body>",
          "",
          "---------------"
        ],
        "guide/app/styles.css||guide/app/styles.css": [
          "File: guide/app/styles.css -> guide/app/styles.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   font-family: 'Ubuntu';",
          "13:   font-style: normal;",
          "14:   font-weight: 300;",
          "18:  }",
          "",
          "[Removed Lines]",
          "15:   src: local(''), url('/fonts/ubuntu-v20-latin-300.woff2') format('woff2'),",
          "",
          "[Added Lines]",
          "15:   src:",
          "16:    local(''),",
          "17:    url('/fonts/ubuntu-v20-latin-300.woff2') format('woff2'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:   font-family: 'Ubuntu';",
          "23:   font-style: normal;",
          "24:   font-weight: 400;",
          "28:  }",
          "",
          "[Removed Lines]",
          "25:   src: local(''), url('/fonts/ubuntu-v20-latin-regular.woff2') format('woff2'),",
          "",
          "[Added Lines]",
          "27:   src:",
          "28:    local(''),",
          "29:    url('/fonts/ubuntu-v20-latin-regular.woff2') format('woff2'),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:   font-family: 'Ubuntu';",
          "33:   font-style: normal;",
          "34:   font-weight: 500;",
          "38:  }",
          "",
          "[Removed Lines]",
          "35:   src: local(''), url('/fonts/ubuntu-v20-latin-500.woff2') format('woff2'),",
          "",
          "[Added Lines]",
          "39:   src:",
          "40:    local(''),",
          "41:    url('/fonts/ubuntu-v20-latin-500.woff2') format('woff2'),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "42:   font-family: 'Ubuntu';",
          "43:   font-style: normal;",
          "44:   font-weight: 700;",
          "48:  }",
          "",
          "[Removed Lines]",
          "45:   src: local(''), url('/fonts/ubuntu-v20-latin-700.woff2') format('woff2'),",
          "",
          "[Added Lines]",
          "51:   src:",
          "52:    local(''),",
          "53:    url('/fonts/ubuntu-v20-latin-700.woff2') format('woff2'),",
          "",
          "---------------"
        ],
        "packages/conform-dom/form.ts||packages/conform-dom/form.ts": [
          "File: packages/conform-dom/form.ts -> packages/conform-dom/form.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  | undefined",
          "53:  ? Schema | string | null | undefined",
          "54:  : Schema extends File",
          "62: export type FormValue<Schema> = Schema extends",
          "63:  | string",
          "",
          "[Removed Lines]",
          "55:  ? null | undefined",
          "56:  : Schema extends Array<infer Item>",
          "57:  ? Array<DefaultValue<Item>> | null | undefined",
          "58:  : Schema extends Record<string, any>",
          "59:  ? { [Key in keyof Schema]?: DefaultValue<Schema[Key]> } | null | undefined",
          "60:  : string | null | undefined;",
          "",
          "[Added Lines]",
          "55:   ? null | undefined",
          "56:   : Schema extends Array<infer Item>",
          "57:    ? Array<DefaultValue<Item>> | null | undefined",
          "58:    : Schema extends Record<string, any>",
          "59:     ?",
          "60:       | { [Key in keyof Schema]?: DefaultValue<Schema[Key]> }",
          "61:       | null",
          "62:       | undefined",
          "63:     : string | null | undefined;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:  | undefined",
          "70:  ? string | undefined",
          "71:  : Schema extends File",
          "81: const error = Symbol('error');",
          "82: const field = Symbol('field');",
          "",
          "[Removed Lines]",
          "72:  ? File | undefined",
          "73:  : Schema extends File[]",
          "74:  ? File | Array<File> | undefined",
          "75:  : Schema extends Array<infer Item>",
          "76:  ? string | Array<FormValue<Item>> | undefined",
          "77:  : Schema extends Record<string, any>",
          "78:  ? { [Key in keyof Schema]?: FormValue<Schema[Key]> } | null | undefined",
          "79:  : unknown;",
          "",
          "[Added Lines]",
          "75:   ? File | undefined",
          "76:   : Schema extends File[]",
          "77:    ? File | Array<File> | undefined",
          "78:    : Schema extends Array<infer Item>",
          "79:     ? string | Array<FormValue<Item>> | undefined",
          "80:     : Schema extends Record<string, any>",
          "81:      ?",
          "82:        | { [Key in keyof Schema]?: FormValue<Schema[Key]> }",
          "83:        | null",
          "84:        | undefined",
          "85:      : unknown;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:  >['payload']",
          "242:   ? (<FieldSchema = Schema>(",
          "243:     payload?: Extract<Intent<FieldSchema>, { type: Type }>['payload'],",
          "245:     getButtonProps<FieldSchema = Schema>(",
          "246:      payload?: Extract<Intent<FieldSchema>, { type: Type }>['payload'],",
          "247:     ): ControlButtonProps;",
          "249:   : (<FieldSchema = Schema>(",
          "250:     payload: Extract<Intent<FieldSchema>, { type: Type }>['payload'],",
          "252:     getButtonProps<FieldSchema = Schema>(",
          "253:      payload: Extract<Intent<FieldSchema>, { type: Type }>['payload'],",
          "254:     ): ControlButtonProps;",
          "256: };",
          "258: function createFormMeta<Schema, FormError, FormValue>(",
          "",
          "[Removed Lines]",
          "244:     ) => void) & {",
          "248:     }",
          "251:     ) => void) & {",
          "255:     };",
          "",
          "[Added Lines]",
          "250:    ) => void) & {",
          "254:    }",
          "257:    ) => void) & {",
          "261:    };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "278:    : {",
          "279:      '': generateId(),",
          "280:      ...getDefaultKey(defaultValue),",
          "284:   error: (lastResult?.error as Record<string, FormError>) ?? {},",
          "",
          "[Removed Lines]",
          "281:      },",
          "",
          "[Added Lines]",
          "287:     },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "655:    next.initialValue === next.defaultValue",
          "656:     ? defaultValue",
          "657:     : !state || prev.initialValue !== next.initialValue",
          "660:   const value =",
          "661:    next.value === next.initialValue",
          "662:     ? initialValue",
          "663:     : !state || prev.value !== next.value",
          "667:   return {",
          "668:    submissionStatus: next.submissionStatus,",
          "",
          "[Removed Lines]",
          "658:     ? createValueProxy(next.initialValue)",
          "659:     : state.initialValue;",
          "664:     ? createValueProxy(next.value)",
          "665:     : state.value;",
          "",
          "[Added Lines]",
          "664:      ? createValueProxy(next.initialValue)",
          "665:      : state.initialValue;",
          "670:      ? createValueProxy(next.value)",
          "671:      : state.value;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "689:        defaultValue,",
          "690:        value,",
          "691:        (key) => latestOptions.shouldDirtyConsider?.(key) ?? true,",
          "693:      : state.dirty,",
          "694:   };",
          "695:  }",
          "",
          "[Removed Lines]",
          "692:        )",
          "",
          "[Added Lines]",
          "698:       )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1053:      const element = isFieldElement(node)",
          "1054:       ? node",
          "1055:       : node instanceof HTMLElement",
          "1059:      if (element?.form === form) {",
          "1060:       updateFormValue(form);",
          "",
          "[Removed Lines]",
          "1056:       ? node.querySelector<FieldElement>('input,select,textarea')",
          "1057:       : null;",
          "",
          "[Added Lines]",
          "1062:        ? node.querySelector<FieldElement>('input,select,textarea')",
          "1063:        : null;",
          "",
          "---------------"
        ],
        "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts": [
          "File: packages/conform-dom/formdata.ts -> packages/conform-dom/formdata.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:   const newValue =",
          "122:    index != lastIndex",
          "123:     ? Object.prototype.hasOwnProperty.call(pointer, key) &&",
          "125:      ? pointer[key]",
          "126:      : typeof nextKey === 'number'",
          "129:     : valueFn(pointer[key]);",
          "131:   pointer[key] = newValue;",
          "",
          "[Removed Lines]",
          "124:       pointer[key] !== null",
          "127:      ? []",
          "128:      : {}",
          "",
          "[Added Lines]",
          "124:      pointer[key] !== null",
          "127:       ? []",
          "128:       : {}",
          "",
          "---------------"
        ],
        "packages/conform-dom/submission.ts||packages/conform-dom/submission.ts": [
          "File: packages/conform-dom/submission.ts -> packages/conform-dom/submission.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:    ? normalize<Record<string, FormError | null>>({",
          "276:      '': options.formErrors ?? null,",
          "277:      ...options.fieldErrors,",
          "279:    : null;",
          "280:  const error =",
          "281:   context.error || extraError",
          "282:    ? {",
          "283:      ...context.error,",
          "284:      ...extraError,",
          "286:    : undefined;",
          "288:  return {",
          "",
          "[Removed Lines]",
          "278:      })",
          "285:      }",
          "",
          "[Added Lines]",
          "278:     })",
          "285:     }",
          "",
          "---------------"
        ],
        "packages/conform-react/context.tsx||packages/conform-react/context.tsx": [
          "File: packages/conform-react/context.tsx -> packages/conform-react/context.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: > = [Schema] extends [Primitive]",
          "87:  ? {}",
          "88:  : [Schema] extends [Array<infer Item> | null | undefined]",
          "104: export type FieldMetadata<",
          "105:  Schema = unknown,",
          "",
          "[Removed Lines]",
          "89:  ? {",
          "90:    getFieldList: () => Array<FieldMetadata<Item, FormSchema, FormError>>;",
          "91:    }",
          "92:  : [Schema] extends [Record<string, any> | null | undefined]",
          "93:  ? {",
          "94:    getFieldset: () => Required<{",
          "95:     [Key in keyof Combine<Schema>]: FieldMetadata<",
          "96:      Combine<Schema>[Key],",
          "97:      FormSchema,",
          "98:      FormError",
          "99:     >;",
          "100:    }>;",
          "101:    }",
          "102:  : {};",
          "",
          "[Added Lines]",
          "89:   ? {",
          "90:     getFieldList: () => Array<FieldMetadata<Item, FormSchema, FormError>>;",
          "91:    }",
          "92:   : [Schema] extends [Record<string, any> | null | undefined]",
          "93:    ? {",
          "94:      getFieldset: () => Required<{",
          "95:       [Key in keyof Combine<Schema>]: FieldMetadata<",
          "96:        Combine<Schema>[Key],",
          "97:        FormSchema,",
          "98:        FormError",
          "99:       >;",
          "100:      }>;",
          "101:     }",
          "102:    : {};",
          "",
          "---------------"
        ],
        "packages/conform-react/integrations.ts||packages/conform-react/integrations.ts": [
          "File: packages/conform-react/integrations.ts -> packages/conform-react/integrations.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  const elements = !field",
          "20:   ? []",
          "21:   : field instanceof Element",
          "25:  return elements.filter(",
          "26:   (",
          "",
          "[Removed Lines]",
          "22:   ? [field]",
          "23:   : Array.from(field.values());",
          "",
          "[Added Lines]",
          "22:    ? [field]",
          "23:    : Array.from(field.values());",
          "",
          "---------------"
        ],
        "packages/conform-validitystate/index.ts||packages/conform-validitystate/index.ts": [
          "File: packages/conform-validitystate/index.ts -> packages/conform-validitystate/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:  [Key in keyof Schema]: Schema[Key] extends RequiredField<StringConstraint>",
          "129:   ? string",
          "130:   : Schema[Key] extends OptionalField<StringConstraint>",
          "153: };",
          "",
          "[Removed Lines]",
          "131:   ? string | undefined",
          "132:   : Schema[Key] extends RequiredField<StringArrayConstraint>",
          "133:   ? string[]",
          "134:   : Schema[Key] extends OptionalField<StringArrayConstraint>",
          "135:   ? string[] | undefined",
          "136:   : Schema[Key] extends RequiredField<NumberConstraint>",
          "137:   ? number",
          "138:   : Schema[Key] extends OptionalField<NumberConstraint>",
          "139:   ? number | undefined",
          "140:   : Schema[Key] extends RequiredField<FileConstraint>",
          "141:   ? File",
          "142:   : Schema[Key] extends OptionalField<BooleanConstraint>",
          "143:   ? File | undefined",
          "144:   : Schema[Key] extends RequiredField<FileArrayConstraint>",
          "145:   ? File[]",
          "146:   : Schema[Key] extends OptionalField<FileArrayConstraint>",
          "147:   ? File[] | undefined",
          "148:   : Schema[Key] extends",
          "149:     | RequiredField<BooleanConstraint>",
          "150:     | OptionalField<BooleanConstraint>",
          "151:   ? boolean",
          "152:   : any;",
          "",
          "[Added Lines]",
          "131:    ? string | undefined",
          "132:    : Schema[Key] extends RequiredField<StringArrayConstraint>",
          "133:     ? string[]",
          "134:     : Schema[Key] extends OptionalField<StringArrayConstraint>",
          "135:      ? string[] | undefined",
          "136:      : Schema[Key] extends RequiredField<NumberConstraint>",
          "137:       ? number",
          "138:       : Schema[Key] extends OptionalField<NumberConstraint>",
          "139:        ? number | undefined",
          "140:        : Schema[Key] extends RequiredField<FileConstraint>",
          "141:         ? File",
          "142:         : Schema[Key] extends OptionalField<BooleanConstraint>",
          "143:          ? File | undefined",
          "144:          : Schema[Key] extends RequiredField<FileArrayConstraint>",
          "145:           ? File[]",
          "146:           : Schema[Key] extends OptionalField<FileArrayConstraint>",
          "147:            ? File[] | undefined",
          "148:            : Schema[Key] extends",
          "149:               | RequiredField<BooleanConstraint>",
          "150:               | OptionalField<BooleanConstraint>",
          "151:             ? boolean",
          "152:             : any;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "530:       constraint.type === 'email'",
          "531:        ? isValidEmail(payload)",
          "532:        : constraint.type === 'url'",
          "535:      );",
          "536:      report('tooShort', payload.length >= (constraint.minLength ?? 0));",
          "537:      report(",
          "",
          "[Removed Lines]",
          "533:        ? isValidURL(payload)",
          "534:        : true,",
          "",
          "[Added Lines]",
          "533:         ? isValidURL(payload)",
          "534:         : true,",
          "",
          "---------------"
        ],
        "packages/conform-zod/parse.ts||packages/conform-zod/parse.ts": [
          "File: packages/conform-zod/parse.ts -> packages/conform-zod/parse.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:         result.error,",
          "120:         options.formatError ??",
          "121:          ((issues) => issues.map((issue) => issue.message)),",
          "123:       : undefined,",
          "124:     };",
          "125:    };",
          "",
          "[Removed Lines]",
          "122:         )",
          "",
          "[Added Lines]",
          "122:        )",
          "",
          "---------------"
        ],
        "playground/app/routes/input-event.tsx||playground/app/routes/input-event.tsx": [
          "File: playground/app/routes/input-event.tsx -> playground/app/routes/input-event.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     <div className=\"flex-1\">",
          "109:      base-input logs",
          "110:      <ul id=\"base-input\">",
          "114:      </ul>",
          "115:     </div>",
          "116:    </div>",
          "",
          "[Removed Lines]",
          "111:       {logsByName['base-input']?.map((log, i) => (",
          "112:        <li key={i}>{log}</li>",
          "113:       ))}",
          "",
          "[Added Lines]",
          "111:       {logsByName['base-input']?.map((log, i) => <li key={i}>{log}</li>)}",
          "",
          "---------------"
        ],
        "playground/app/routes/recursive-list.tsx||playground/app/routes/recursive-list.tsx": [
          "File: playground/app/routes/recursive-list.tsx -> playground/app/routes/recursive-list.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:        subcategories: [{ name: 'Subcategory 2.1' }],",
          "108:       },",
          "109:      ],",
          "111:    : undefined,",
          "112:   onValidate: !noClientValidate",
          "113:    ? ({ formData }) => parseWithZod(formData, { schema: categorySchema })",
          "",
          "[Removed Lines]",
          "110:      }",
          "",
          "[Added Lines]",
          "110:     }",
          "",
          "---------------"
        ],
        "tests/conform-zod.spec.ts||tests/conform-zod.spec.ts": [
          "File: tests/conform-zod.spec.ts -> tests/conform-zod.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:     test: z.number({ invalid_type_error: 'invalid' }),",
          "739:    });",
          "740:    const schemaWithCustomPreprocess = z.object({",
          "750:    });",
          "751:    const formData = createFormData([['test', '1,234.5']]);",
          "",
          "[Removed Lines]",
          "741:     test: z.preprocess((value) => {",
          "742:      if (typeof value !== 'string') {",
          "743:       return value;",
          "744:      } else if (value === '') {",
          "745:       return undefined;",
          "746:      } else {",
          "747:       return value.replace(/,/g, '');",
          "748:      }",
          "749:     }, z.number({ invalid_type_error: 'invalid' })),",
          "",
          "[Added Lines]",
          "741:     test: z.preprocess(",
          "742:      (value) => {",
          "743:       if (typeof value !== 'string') {",
          "744:        return value;",
          "745:       } else if (value === '') {",
          "746:        return undefined;",
          "747:       } else {",
          "748:        return value.replace(/,/g, '');",
          "749:       }",
          "750:      },",
          "751:      z.number({ invalid_type_error: 'invalid' }),",
          "752:     ),",
          "",
          "---------------"
        ],
        "tests/integrations/metadata.spec.ts||tests/integrations/metadata.spec.ts": [
          "File: tests/integrations/metadata.spec.ts -> tests/integrations/metadata.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:        },",
          "424:        null,",
          "425:       ],",
          "427:     : {",
          "428:       title: 'Test',",
          "429:       bookmarks: [null, null],",
          "431:    value: {",
          "432:     title: 'Projects',",
          "433:     bookmarks: [",
          "",
          "[Removed Lines]",
          "426:       }",
          "430:       },",
          "",
          "[Added Lines]",
          "426:      }",
          "430:      },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:        name: 'Conform',",
          "462:       },",
          "463:       null,",
          "465:     : [null, null],",
          "466:    value: [",
          "467:     {",
          "",
          "[Removed Lines]",
          "464:       ]",
          "",
          "[Added Lines]",
          "464:      ]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:        },",
          "530:        null,",
          "531:       ],",
          "533:     : {",
          "534:       title: 'Test',",
          "535:       bookmarks: [null, null],",
          "537:    value: {",
          "538:     title: 'Projects',",
          "539:     bookmarks: [",
          "",
          "[Removed Lines]",
          "532:       }",
          "536:       },",
          "",
          "[Added Lines]",
          "532:      }",
          "536:      },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "568:        url: 'https://conform.guide',",
          "569:       },",
          "570:       null,",
          "572:     : [null, null],",
          "573:    value: [",
          "574:     {",
          "",
          "[Removed Lines]",
          "571:       ]",
          "",
          "[Added Lines]",
          "571:      ]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "641:         url: 'https://conform.guide',",
          "642:        },",
          "643:       ],",
          "645:     : {",
          "646:       title: 'Test',",
          "647:       bookmarks: [null, null],",
          "649:    value: {",
          "650:     title: 'Projects',",
          "651:     bookmarks: [",
          "",
          "[Removed Lines]",
          "644:       }",
          "648:       },",
          "",
          "[Added Lines]",
          "644:      }",
          "648:      },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "685:        name: 'Super cool website',",
          "686:        url: 'https://conform.guide',",
          "687:       },",
          "689:     : [null, null],",
          "690:    value: [",
          "691:     {",
          "",
          "[Removed Lines]",
          "688:       ]",
          "",
          "[Added Lines]",
          "688:      ]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "764:         url: 'https://remix.guide',",
          "765:        },",
          "766:       ],",
          "768:     : {",
          "769:       title: 'Test',",
          "770:       bookmarks: [null, null],",
          "772:    value: {",
          "773:     title: 'Projects',",
          "774:     bookmarks: [",
          "",
          "[Removed Lines]",
          "767:       }",
          "771:       },",
          "",
          "[Added Lines]",
          "767:      }",
          "771:      },",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "807:        name: 'Super cool website',",
          "808:        url: 'https://remix.guide',",
          "809:       },",
          "811:     : [null, null],",
          "812:    value: [",
          "813:     {",
          "",
          "[Removed Lines]",
          "810:       ]",
          "",
          "[Added Lines]",
          "810:      ]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "889:         url: 'https://remix.guide',",
          "890:        },",
          "891:       ],",
          "893:     : {",
          "894:       title: 'Test',",
          "895:       bookmarks: [null, null],",
          "897:    value: {",
          "898:     title: 'Projects',",
          "899:     bookmarks: [",
          "",
          "[Removed Lines]",
          "892:       }",
          "896:       },",
          "",
          "[Added Lines]",
          "892:      }",
          "896:      },",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "932:        name: 'Super cool website',",
          "933:        url: 'https://remix.guide',",
          "934:       },",
          "936:     : [null, null],",
          "937:    value: [",
          "938:     {",
          "",
          "[Removed Lines]",
          "935:       ]",
          "",
          "[Added Lines]",
          "935:      ]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1006:         url: 'https://remix.guide',",
          "1007:        },",
          "1008:       ],",
          "1010:     : {",
          "1011:       title: 'Test',",
          "1012:       bookmarks: [null, null],",
          "1014:    value: {",
          "1015:     title: 'Projects',",
          "1016:     bookmarks: [",
          "",
          "[Removed Lines]",
          "1009:       }",
          "1013:       },",
          "",
          "[Added Lines]",
          "1009:      }",
          "1013:      },",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1050:        name: 'Super cool website',",
          "1051:        url: 'https://remix.guide',",
          "1052:       },",
          "1054:     : [null, null],",
          "1055:    value: [",
          "1056:     {",
          "",
          "[Removed Lines]",
          "1053:       ]",
          "",
          "[Added Lines]",
          "1053:      ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0055907f76cf4d9bc7583e09eb305afbb60a404",
      "candidate_info": {
        "commit_hash": "c0055907f76cf4d9bc7583e09eb305afbb60a404",
        "repo": "edmundhung/conform",
        "commit_url": "https://github.com/edmundhung/conform/commit/c0055907f76cf4d9bc7583e09eb305afbb60a404",
        "files": [
          "packages/conform-dom/formdata.ts"
        ],
        "message": "fix: setValue should work with null (#608)",
        "before_after_code_files": [
          "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts"
          ],
          "candidate": [
            "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts": [
          "File: packages/conform-dom/formdata.ts -> packages/conform-dom/formdata.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   const nextKey = paths[index + 1];",
          "121:   const newValue =",
          "122:    index != lastIndex",
          "124:      ? pointer[key]",
          "125:      : typeof nextKey === 'number'",
          "126:      ? []",
          "",
          "[Removed Lines]",
          "123:     ? Object.prototype.hasOwnProperty.call(pointer, key)",
          "",
          "[Added Lines]",
          "123:     ? Object.prototype.hasOwnProperty.call(pointer, key) &&",
          "124:       pointer[key] !== null",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ace2ef3fba2cfb76df94b403315931d714fe632",
      "candidate_info": {
        "commit_hash": "2ace2ef3fba2cfb76df94b403315931d714fe632",
        "repo": "edmundhung/conform",
        "commit_url": "https://github.com/edmundhung/conform/commit/2ace2ef3fba2cfb76df94b403315931d714fe632",
        "files": [
          "examples/remix/app/routes/login-fetcher.tsx",
          "packages/conform-dom/formdata.ts",
          "packages/conform-dom/parse.ts",
          "packages/conform-dom/tsconfig.json",
          "packages/conform-react/README.md",
          "packages/conform-react/hooks.ts",
          "packages/conform-react/tsconfig.json",
          "packages/conform-yup/index.ts",
          "packages/conform-yup/tsconfig.json",
          "packages/conform-zod/index.ts",
          "packages/conform-zod/tsconfig.json",
          "playground/app/components.tsx",
          "playground/app/routes/input-attributes.tsx",
          "playground/app/routes/login.tsx",
          "playground/app/routes/movie.tsx",
          "playground/app/routes/radio-buttons.tsx",
          "playground/app/routes/signup.tsx",
          "tests/conform-yup.spec.ts",
          "tests/conform-zod.spec.ts",
          "tests/react.spec.ts"
        ],
        "message": "feat(conform-react): make error array only (#229)",
        "before_after_code_files": [
          "examples/remix/app/routes/login-fetcher.tsx||examples/remix/app/routes/login-fetcher.tsx",
          "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts",
          "packages/conform-dom/parse.ts||packages/conform-dom/parse.ts",
          "packages/conform-react/hooks.ts||packages/conform-react/hooks.ts",
          "packages/conform-yup/index.ts||packages/conform-yup/index.ts",
          "packages/conform-zod/index.ts||packages/conform-zod/index.ts",
          "playground/app/components.tsx||playground/app/components.tsx",
          "playground/app/routes/input-attributes.tsx||playground/app/routes/input-attributes.tsx",
          "playground/app/routes/login.tsx||playground/app/routes/login.tsx",
          "playground/app/routes/movie.tsx||playground/app/routes/movie.tsx",
          "playground/app/routes/radio-buttons.tsx||playground/app/routes/radio-buttons.tsx",
          "playground/app/routes/signup.tsx||playground/app/routes/signup.tsx",
          "tests/conform-yup.spec.ts||tests/conform-yup.spec.ts",
          "tests/conform-zod.spec.ts||tests/conform-zod.spec.ts",
          "tests/react.spec.ts||tests/react.spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts"
          ],
          "candidate": [
            "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts"
          ]
        }
      },
      "candidate_diff": {
        "examples/remix/app/routes/login-fetcher.tsx||examples/remix/app/routes/login-fetcher.tsx": [
          "File: examples/remix/app/routes/login-fetcher.tsx -> examples/remix/app/routes/login-fetcher.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: function parseFormData(formData: FormData) {",
          "13:  return parse<SignupForm>(formData, {",
          "14:   resolve({ email, password, confirmPassword }) {",
          "17:    if (!email) {",
          "19:    } else if (!email.includes('@')) {",
          "21:    }",
          "23:    if (!password) {",
          "25:    }",
          "27:    if (!confirmPassword) {",
          "29:    } else if (confirmPassword !== password) {",
          "31:    }",
          "33:    if (error.email || error.password || error.confirmPassword) {",
          "",
          "[Removed Lines]",
          "15:    const error: Record<string, string> = {};",
          "18:     error.email = 'Email is required';",
          "20:     error.email = 'Email is invalid';",
          "24:     error.password = 'Password is required';",
          "28:     error.confirmPassword = 'Confirm password is required';",
          "30:     error.confirmPassword = 'Password does not match';",
          "",
          "[Added Lines]",
          "15:    const error: Record<string, string[]> = {};",
          "18:     error.email = ['Email is required'];",
          "20:     error.email = ['Email is invalid'];",
          "24:     error.password = ['Password is required'];",
          "28:     error.confirmPassword = ['Confirm password is required'];",
          "30:     error.confirmPassword = ['Password does not match'];",
          "",
          "---------------"
        ],
        "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts": [
          "File: packages/conform-dom/formdata.ts -> packages/conform-dom/formdata.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: export function getPaths(name: string): Array<string | number> {",
          "31:  if (!name) {",
          "32:   return [];",
          "33:  }",
          "48: }",
          "",
          "[Removed Lines]",
          "29:  const pattern = /(\\w*)\\[(\\d+)\\]/;",
          "35:  return name.split('.').flatMap((key) => {",
          "36:   const matches = pattern.exec(key);",
          "38:   if (!matches) {",
          "39:    return key;",
          "40:   }",
          "42:   if (matches[1] === '') {",
          "43:    return Number(matches[2]);",
          "44:   }",
          "46:   return [matches[1], Number(matches[2])];",
          "47:  });",
          "",
          "[Added Lines]",
          "33:  return name",
          "34:   .split(/\\.|(\\[\\d*\\])/)",
          "35:   .reduce<Array<string | number>>((result, segment) => {",
          "36:    if (typeof segment !== 'undefined' && segment !== '') {",
          "37:     if (segment.startsWith('[') && segment.endsWith(']')) {",
          "38:      const index = segment.slice(1, -1);",
          "40:      result.push(Number(index));",
          "41:     } else {",
          "42:      result.push(segment);",
          "43:     }",
          "44:    }",
          "45:    return result;",
          "46:   }, []);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: export function setValue(",
          "76:  name: string,",
          "77:  valueFn: (prev?: unknown) => any,",
          "78: ): void {",
          "82:  let index = -1;",
          "83:  let pointer = target;",
          "85:  while (pointer != null && ++index < length) {",
          "89:    index != lastIndex",
          "91:     : valueFn(pointer[key]);",
          "93:   pointer[key] = newValue;",
          "",
          "[Removed Lines]",
          "75:  target: any,",
          "79:  let paths = getPaths(name);",
          "80:  let length = paths.length;",
          "81:  let lastIndex = length - 1;",
          "86:   let key = paths[index];",
          "87:   let next = paths[index + 1];",
          "88:   let newValue =",
          "90:     ? pointer[key] ?? (typeof next === 'number' ? [] : {})",
          "",
          "[Added Lines]",
          "74:  target: Record<string, any>,",
          "78:  const paths = getPaths(name);",
          "79:  const length = paths.length;",
          "80:  const lastIndex = length - 1;",
          "86:   const key = paths[index] as string | number;",
          "87:   const nextKey = paths[index + 1];",
          "88:   const newValue =",
          "90:     ? pointer[key] ?? (typeof nextKey === 'number' ? [] : {})",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149: }",
          "154: export function getErrors(validationMessage: string | undefined): string[] {",
          "160: }",
          "",
          "[Removed Lines]",
          "147: export function getValidationMessage(errors?: string | string[]): string {",
          "148:  return ([] as string[]).concat(errors ?? []).join(String.fromCharCode(31));",
          "155:  if (!validationMessage) {",
          "156:   return [];",
          "157:  }",
          "159:  return validationMessage.split(String.fromCharCode(31));",
          "",
          "[Added Lines]",
          "147: export function getValidationMessage(errors?: string[]): string {",
          "148:  return errors?.join(String.fromCharCode(31)) ?? '';",
          "155:  return validationMessage?.split(String.fromCharCode(31)) ?? [];",
          "",
          "---------------"
        ],
        "packages/conform-dom/parse.ts||packages/conform-dom/parse.ts": [
          "File: packages/conform-dom/parse.ts -> packages/conform-dom/parse.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: export type Submission<Schema = any> = {",
          "5:  intent: string;",
          "6:  payload: Record<string, any>;",
          "8:  value?: Schema | null;",
          "9: };",
          "",
          "[Removed Lines]",
          "7:  error: Record<string, string | string[]>;",
          "",
          "[Added Lines]",
          "7:  error: Record<string, string[]>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:   resolve?: (",
          "19:    payload: Record<string, any>,",
          "20:    intent: string,",
          "22:   stripEmptyValue?: boolean;",
          "23:  },",
          "24: ): Submission<Schema>;",
          "",
          "[Removed Lines]",
          "21:   ) => { value?: Schema; error?: Record<string, string | string[]> };",
          "",
          "[Added Lines]",
          "21:   ) => { value?: Schema; error?: Record<string, string[]> };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:   resolve?: (",
          "29:    payload: Record<string, any>,",
          "30:    intent: string,",
          "32:   stripEmptyValue?: boolean;",
          "33:  },",
          "34: ): Promise<Submission<Schema>>;",
          "",
          "[Removed Lines]",
          "31:   ) => Promise<{ value?: Schema; error?: Record<string, string | string[]> }>;",
          "",
          "[Added Lines]",
          "31:   ) => Promise<{ value?: Schema; error?: Record<string, string[]> }>;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "39:    payload: Record<string, any>,",
          "40:    intent: string,",
          "41:   ) =>",
          "44:   stripEmptyValue?: boolean;",
          "45:  },",
          "46: ): Submission<Schema> | Promise<Submission<Schema>>;",
          "",
          "[Removed Lines]",
          "42:    | { value?: Schema; error?: Record<string, string | string[]> }",
          "43:    | Promise<{ value?: Schema; error?: Record<string, string | string[]> }>;",
          "",
          "[Added Lines]",
          "42:    | { value?: Schema; error?: Record<string, string[]> }",
          "43:    | Promise<{ value?: Schema; error?: Record<string, string[]> }>;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "51:    payload: Record<string, any>,",
          "52:    intent: string,",
          "53:   ) =>",
          "56:   stripEmptyValue?: boolean;",
          "57:  },",
          "58: ): Submission<Schema> | Promise<Submission<Schema>> {",
          "",
          "[Removed Lines]",
          "54:    | { value?: Schema; error?: Record<string, string | string[]> }",
          "55:    | Promise<{ value?: Schema; error?: Record<string, string | string[]> }>;",
          "",
          "[Added Lines]",
          "54:    | { value?: Schema; error?: Record<string, string[]> }",
          "55:    | Promise<{ value?: Schema; error?: Record<string, string[]> }>;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "84:  const result = options.resolve(submission.payload, submission.intent);",
          "85:  const mergeResolveResult = (resolved: {",
          "87:   value?: Schema;",
          "88:  }) => {",
          "89:   return {",
          "",
          "[Removed Lines]",
          "86:   error?: Record<string, string | string[]>;",
          "",
          "[Added Lines]",
          "86:   error?: Record<string, string[]>;",
          "",
          "---------------"
        ],
        "packages/conform-react/hooks.ts||packages/conform-react/hooks.ts": [
          "File: packages/conform-react/hooks.ts -> packages/conform-react/hooks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:  id?: string;",
          "44:  name: string;",
          "45:  defaultValue?: FieldValue<Schema>;",
          "47:  form?: string;",
          "48:  descriptionId?: string;",
          "49:  errorId?: string;",
          "",
          "[Removed Lines]",
          "46:  initialError?: Record<string, string | string[]>;",
          "",
          "[Added Lines]",
          "46:  initialError?: Record<string, string[]>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179: interface Form {",
          "180:  id?: string;",
          "181:  errorId?: string;",
          "183:  errors: string[];",
          "184:  ref: RefObject<HTMLFormElement>;",
          "185:  props: FormProps;",
          "186: }",
          "200: function useNoValidate(",
          "201:  defaultNoValidate: boolean | undefined,",
          "202:  validateBeforeHydrate: boolean | undefined,",
          "",
          "[Removed Lines]",
          "182:  error: string;",
          "191: function normalizeError(error: string | string[] | undefined): string[] {",
          "192:  if (!error) {",
          "194:   return [];",
          "195:  }",
          "197:  return ([] as string[]).concat(error);",
          "198: }",
          "",
          "[Added Lines]",
          "182:  error: string | undefined;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278: function useFormError(",
          "279:  ref: RefObject<HTMLFormElement | HTMLFieldSetElement>,",
          "280:  config: {",
          "282:   name?: string;",
          "283:  },",
          "284: ) {",
          "",
          "[Removed Lines]",
          "281:   initialError: Record<string, string | string[] | undefined> | undefined;",
          "",
          "[Added Lines]",
          "269:   initialError: Record<string, string[] | undefined> | undefined;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "290:   const result: Record<string | number, string[] | undefined> = {};",
          "292:   for (const [name, message] of Object.entries(config.initialError)) {",
          "297:    }",
          "298:   }",
          "",
          "[Removed Lines]",
          "293:    const paths = getPaths(name);",
          "295:    if (paths.length === 1) {",
          "296:     result[paths[0]] = normalizeError(message);",
          "",
          "[Added Lines]",
          "281:    const [path, ...restPaths] = getPaths(name);",
          "283:    if (typeof path !== 'undefined' && restPaths.length === 0) {",
          "284:     result[path] = message;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "304:   const handleInvalid = (event: Event) => {",
          "305:    const form = getFormElement(ref.current);",
          "306:    const element = event.target;",
          "308:    if (",
          "309:     !isFieldElement(element) ||",
          "310:     element.form !== form ||",
          "311:     !element.dataset.conformTouched",
          "312:    ) {",
          "313:     return;",
          "314:    }",
          "334:    }",
          "336:    setError((prev) => {",
          "338:      return prev;",
          "339:     }",
          "341:     return {",
          "342:      ...prev,",
          "344:     };",
          "345:    });",
          "",
          "[Removed Lines]",
          "316:    let key: string | number = element.name;",
          "318:    if (config.name) {",
          "319:     const scopePaths = getPaths(config.name);",
          "320:     const fieldPaths = getPaths(element.name);",
          "322:     for (let i = 0; i <= scopePaths.length; i++) {",
          "323:      const path = fieldPaths[i];",
          "325:      if (i < scopePaths.length) {",
          "327:       if (path !== scopePaths[i]) {",
          "328:        return;",
          "329:       }",
          "330:      } else {",
          "331:       key = path;",
          "332:      }",
          "333:     }",
          "337:     if (element.validationMessage === getValidationMessage(prev[key])) {",
          "343:      [key]: getErrors(element.validationMessage),",
          "",
          "[Added Lines]",
          "295:    const prefix = config.name ?? '';",
          "300:     !element.name.startsWith(prefix) ||",
          "306:    const name = element.name.slice(prefix.length);",
          "307:    const [path, ...restPaths] = getPaths(name);",
          "309:    if (typeof path === 'undefined' || restPaths.length > 0) {",
          "310:     return;",
          "314:     if (element.validationMessage === getValidationMessage(prev[path])) {",
          "320:      [path]: getErrors(element.validationMessage),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "380:  const ref = useFormRef(config.ref);",
          "381:  const noValidate = useNoValidate(config.noValidate, config.fallbackNative);",
          "382:  const report = useFormReporter(ref, config.lastSubmission);",
          "385:  );",
          "386:  const initialError = useMemo(() => {",
          "387:   const submission = config.lastSubmission;",
          "",
          "[Removed Lines]",
          "383:  const [errors, setErrors] = useState<string[]>(() =>",
          "384:   normalizeError(config.lastSubmission?.error['']),",
          "",
          "[Added Lines]",
          "360:  const [errors, setErrors] = useState<string[]>(",
          "361:   () => config.lastSubmission?.error[''] ?? [],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "393:   const intent = parseIntent(submission.intent);",
          "394:   const scope = getScope(intent);",
          "399:  }, [config.lastSubmission]);",
          "",
          "[Removed Lines]",
          "396:   return scope === null",
          "397:    ? submission.error",
          "398:    : { [scope]: submission.error[scope] };",
          "",
          "[Added Lines]",
          "373:   if (typeof scope !== 'string') {",
          "374:    return submission.error;",
          "375:   }",
          "377:   return { [scope]: submission.error[scope] ?? [] };",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "515:       submission.error,",
          "516:      ).reduce<{ errors: string[]; shouldServerValidate: boolean }>(",
          "517:       (result, [, error]) => {",
          "519:         if (message === VALIDATION_UNDEFINED) {",
          "520:          result.shouldServerValidate = true;",
          "521:         } else if (message !== VALIDATION_SKIPPED) {",
          "",
          "[Removed Lines]",
          "518:        for (const message of normalizeError(error)) {",
          "",
          "[Added Lines]",
          "497:        for (const message of error) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "601:  initialError?: Record<string, string | string[]>;",
          "",
          "[Added Lines]",
          "580:  initialError?: Record<string, string[]>;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "659:      }",
          "661:      return result;",
          "663:     const field: FieldConfig<any> = {",
          "664:      ...constraint,",
          "665:      name: fieldsetConfig.name ? `${fieldsetConfig.name}.${key}` : key,",
          "",
          "[Removed Lines]",
          "662:     }, {} as Record<string, string | string[]>);",
          "",
          "[Added Lines]",
          "641:     }, {} as Record<string, string[]>);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "728:    }",
          "730:    setEntries((entries) => {",
          "733:     switch (intent.payload.operation) {",
          "734:      case 'append':",
          "",
          "[Removed Lines]",
          "731:     let list = [...entries];",
          "",
          "[Added Lines]",
          "710:     const list = [...entries];",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "738:        ...intent.payload,",
          "739:        defaultValue: [",
          "742:         intent.payload.defaultValue,",
          "743:        ],",
          "744:       });",
          "",
          "[Removed Lines]",
          "741:         crypto.getRandomValues(new Uint32Array(1))[0].toString(36),",
          "",
          "[Added Lines]",
          "720:         getUniqueKey(),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "806:     return result;",
          "807:    },",
          "809:   );",
          "810:   const fieldConfig: FieldConfig<",
          "811:    Schema extends Array<infer Item> ? Item : never",
          "",
          "[Removed Lines]",
          "808:    {} as Record<string, string | string[]>,",
          "",
          "[Added Lines]",
          "787:    {} as Record<string, string[]>,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "846:  blur: () => void;",
          "847: }",
          "",
          "[Removed Lines]",
          "849: export function useEventListeners(type: string, ref: RefObject<FieldElement>) {",
          "850:  useSafeLayoutEffect(() => {",
          "851:   const listener = (event: Event) => {};",
          "853:   document.addEventListener(type, listener);",
          "855:   return () => {",
          "856:    document.removeEventListener(type, listener);",
          "857:   };",
          "858:  }, [type, ref]);",
          "859: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1092:   options?.formatMessages ?? (({ defaultErrors }) => defaultErrors);",
          "1094:  return parse(formData, {",
          "1097:    const constraintPattern = /^constraint[A-Z][^A-Z]*$/;",
          "1098:    for (const element of options.form.elements) {",
          "1099:     if (isFieldElement(element)) {",
          "",
          "[Removed Lines]",
          "1095:   resolve(payload, intent) {",
          "1096:    const error: Record<string, string | string[]> = {};",
          "",
          "[Added Lines]",
          "1062:   resolve() {",
          "1063:    const error: Record<string, string[]> = {};",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1141:  });",
          "1142: }",
          "1144: export function reportSubmission(",
          "1145:  form: HTMLFormElement,",
          "1146:  submission: SubmissionResult,",
          "1147: ): void {",
          "1148:  for (const [name, message] of Object.entries(submission.error)) {",
          "1151:    continue;",
          "1152:   }",
          "",
          "[Removed Lines]",
          "1150:   if (message === '') {",
          "",
          "[Added Lines]",
          "1111: export function getUniqueKey() {",
          "1112:  const [value] = crypto.getRandomValues(new Uint32Array(1));",
          "1114:  if (!value) {",
          "1115:   throw new Error('Fail to generate an unique key');",
          "1116:  }",
          "1118:  return value.toString(36);",
          "1119: }",
          "1127:   if (message.length === 0) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1184:  for (const element of getFormControls(form)) {",
          "1185:   const elementName =",
          "1186:    element.name !== FORM_ERROR_ELEMENT_NAME ? element.name : '';",
          "1189:   if (scope === null || scope === elementName) {",
          "1190:    element.dataset.conformTouched = 'true';",
          "",
          "[Removed Lines]",
          "1187:   const messages = normalizeError(submission.error[elementName]);",
          "",
          "[Added Lines]",
          "1164:   const messages = submission.error[elementName] ?? [];",
          "",
          "---------------"
        ],
        "packages/conform-yup/index.ts||packages/conform-yup/index.ts": [
          "File: packages/conform-yup/index.ts -> packages/conform-yup/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:    const resolveError = (error: unknown) => {",
          "121:     if (error instanceof yup.ValidationError) {",
          "122:      return {",
          "140:      };",
          "141:     }",
          "",
          "[Removed Lines]",
          "123:       error: error.inner.reduce<Record<string, string | string[]>>(",
          "124:        (result, e) => {",
          "125:         const name = e.path ?? '';",
          "127:         if (typeof result[name] === 'undefined') {",
          "128:          result[name] = e.message;",
          "129:         } else {",
          "130:          result[name] = ([] as string[]).concat(",
          "131:           result[name],",
          "132:           e.message,",
          "133:          );",
          "134:         }",
          "136:         return result;",
          "137:        },",
          "138:        {},",
          "139:       ),",
          "",
          "[Added Lines]",
          "123:       error: error.inner.reduce<Record<string, string[]>>((result, e) => {",
          "124:        const name = e.path ?? '';",
          "126:        result[name] = [...(result[name] ?? []), e.message];",
          "128:        return result;",
          "129:       }, {}),",
          "",
          "---------------"
        ],
        "packages/conform-zod/index.ts||packages/conform-zod/index.ts": [
          "File: packages/conform-zod/index.ts -> packages/conform-zod/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:      : config.schema;",
          "207:    const resolveResult = (",
          "208:     result: z.SafeParseReturnType<z.input<Schema>, z.output<Schema>>,",
          "212:     if (result.success) {",
          "213:      return {",
          "214:       value: result.data,",
          "",
          "[Removed Lines]",
          "209:    ):",
          "210:     | { value: z.output<Schema> }",
          "211:     | { error: Record<string, string | string[]> } => {",
          "",
          "[Added Lines]",
          "210:    ): { value: z.output<Schema> } | { error: Record<string, string[]> } => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:     }",
          "218:     return {",
          "220:       (result, e) => {",
          "221:        const name = getName(e.path);",
          "229:        return result;",
          "230:       },",
          "",
          "[Removed Lines]",
          "219:      error: result.error.errors.reduce<Record<string, string | string[]>>(",
          "223:        if (typeof result[name] === 'undefined') {",
          "224:         result[name] = e.message;",
          "225:        } else {",
          "226:         result[name] = ([] as string[]).concat(result[name], e.message);",
          "227:        }",
          "",
          "[Added Lines]",
          "218:      error: result.error.errors.reduce<Record<string, string[]>>(",
          "222:        result[name] = [...(result[name] ?? []), e.message];",
          "",
          "---------------"
        ],
        "playground/app/components.tsx||playground/app/components.tsx": [
          "File: playground/app/components.tsx -> playground/app/components.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: interface PlaygroundProps<",
          "6:  Submission extends {",
          "8:  },",
          "9: > {",
          "10:  title: string;",
          "",
          "[Removed Lines]",
          "7:   error: Record<string, string | string[]> | null;",
          "",
          "[Added Lines]",
          "7:   error: Record<string, string[]> | null;",
          "",
          "---------------"
        ],
        "playground/app/routes/input-attributes.tsx||playground/app/routes/input-attributes.tsx": [
          "File: playground/app/routes/input-attributes.tsx -> playground/app/routes/input-attributes.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  return json({",
          "28:   ...submission,",
          "29:   error: {",
          "31:   },",
          "32:  });",
          "33: }",
          "",
          "[Removed Lines]",
          "30:    '': 'Submitted',",
          "",
          "[Added Lines]",
          "30:    '': ['Submitted'],",
          "",
          "---------------"
        ],
        "playground/app/routes/login.tsx||playground/app/routes/login.tsx": [
          "File: playground/app/routes/login.tsx -> playground/app/routes/login.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: function parseLoginForm(formData: FormData) {",
          "14:  return parse<Login>(formData, {",
          "15:   resolve({ email, password }) {",
          "18:    if (!email) {",
          "20:    }",
          "22:    if (!password) {",
          "24:    }",
          "26:    if (error.email || error.password) {",
          "",
          "[Removed Lines]",
          "16:    const error: Partial<Record<keyof Login, string>> = {};",
          "19:     error.email = 'Email is required';",
          "23:     error.password = 'Password is required';",
          "",
          "[Added Lines]",
          "16:    const error: Partial<Record<keyof Login, string[]>> = {};",
          "19:     error.email = ['Email is required'];",
          "23:     error.password = ['Password is required'];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   (submission.value.email !== 'me@edmund.dev' ||",
          "51:    submission.value.password !== '$eCreTP@ssWord')",
          "52:  ) {",
          "54:  }",
          "56:  return json({",
          "",
          "[Removed Lines]",
          "53:   submission.error[''] = 'The provided email or password is not valid';",
          "",
          "[Added Lines]",
          "53:   submission.error[''] = ['The provided email or password is not valid'];",
          "",
          "---------------"
        ],
        "playground/app/routes/movie.tsx||playground/app/routes/movie.tsx": [
          "File: playground/app/routes/movie.tsx -> playground/app/routes/movie.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  const formData = await request.formData();",
          "20:  const submission = parse(formData, {",
          "21:   resolve({ title, description, genre, rating }) {",
          "24:    if (!title) {",
          "26:    } else if (!title.match(/[0-9a-zA-Z ]{1,20}/)) {",
          "28:    }",
          "30:    if (description && description.length < 30) {",
          "32:    }",
          "34:    if (genre === '') {",
          "36:    }",
          "38:    if (rating && Number(rating) % 0.5 !== 0) {",
          "40:    }",
          "42:    if (error.title || error.description || error.genre || error.rating) {",
          "",
          "[Removed Lines]",
          "22:    const error: Record<string, string> = {};",
          "25:     error.title = 'Title is required';",
          "27:     error.title = 'Please enter a valid title';",
          "31:     error.description = 'Please provides more details';",
          "35:     error.genre = 'Genre is required';",
          "39:     error.rating = 'The provided rating is invalid';",
          "",
          "[Added Lines]",
          "22:    const error: Record<string, string[]> = {};",
          "25:     error.title = ['Title is required'];",
          "27:     error.title = ['Please enter a valid title'];",
          "31:     error.description = ['Please provides more details'];",
          "35:     error.genre = ['Genre is required'];",
          "39:     error.rating = ['The provided rating is invalid'];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:    ? ({ form, formData }) => {",
          "94:      const submission = parse(formData, {",
          "95:       resolve({ title, description, genre, rating }) {",
          "98:        for (const element of form.elements) {",
          "99:         if (!isFieldElement(element)) {",
          "",
          "[Removed Lines]",
          "96:        const error: Record<string, string> = {};",
          "",
          "[Added Lines]",
          "96:        const error: Record<string, string[]> = {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:         switch (element.name) {",
          "104:          case 'title':",
          "105:           if (element.validity.valueMissing) {",
          "107:           } else if (element.validity.patternMismatch) {",
          "109:           }",
          "110:           break;",
          "111:          case 'description':",
          "112:           if (element.validity.tooShort) {",
          "114:           }",
          "115:           break;",
          "116:          case 'genre':",
          "117:           if (element.validity.valueMissing) {",
          "119:           }",
          "120:           break;",
          "121:          case 'rating':",
          "122:           if (element.validity.stepMismatch) {",
          "124:           }",
          "125:           break;",
          "126:         }",
          "",
          "[Removed Lines]",
          "106:            error[element.name] = 'Title is required';",
          "108:            error[element.name] = 'Please enter a valid title';",
          "113:            error[element.name] = 'Please provides more details';",
          "118:            error[element.name] = 'Genre is required';",
          "123:            error[element.name] = 'The provided rating is invalid';",
          "",
          "[Added Lines]",
          "106:            error[element.name] = ['Title is required'];",
          "108:            error[element.name] = ['Please enter a valid title'];",
          "113:            error[element.name] = ['Please provides more details'];",
          "118:            error[element.name] = ['Genre is required'];",
          "123:            error[element.name] = ['The provided rating is invalid'];",
          "",
          "---------------"
        ],
        "playground/app/routes/radio-buttons.tsx||playground/app/routes/radio-buttons.tsx": [
          "File: playground/app/routes/radio-buttons.tsx -> playground/app/routes/radio-buttons.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: function parseForm(formData: FormData) {",
          "11:  return parse(formData, {",
          "12:   resolve({ answer }) {",
          "15:    if (!answer) {",
          "17:    }",
          "19:    if (error.answer) {",
          "",
          "[Removed Lines]",
          "13:    const error: Record<string, string> = {};",
          "16:     error.answer = 'Required';",
          "",
          "[Added Lines]",
          "13:    const error: Record<string, string[]> = {};",
          "16:     error.answer = ['Required'];",
          "",
          "---------------"
        ],
        "playground/app/routes/signup.tsx||playground/app/routes/signup.tsx": [
          "File: playground/app/routes/signup.tsx -> playground/app/routes/signup.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: function parseSignupForm(formData: FormData) {",
          "14:  return parse(formData, {",
          "15:   resolve({ email, password, confirmPassword }) {",
          "18:    if (!email) {",
          "20:    } else if (",
          "21:     typeof email !== 'string' ||",
          "22:     !email.match(/^[^()@\\s]+@[\\w\\d.]+$/)",
          "23:    ) {",
          "25:    }",
          "27:    if (!password) {",
          "29:    } else if (typeof password === 'string' && password.length < 8) {",
          "31:    }",
          "33:    if (!confirmPassword) {",
          "35:    } else if (confirmPassword !== password) {",
          "37:    }",
          "39:    if (error.email || error.password || error.confirmPassword) {",
          "",
          "[Removed Lines]",
          "16:    const error: Record<string, string> = {};",
          "19:     error.email = 'Email is required';",
          "24:     error.email = 'Email is invalid';",
          "28:     error.password = 'Password is required';",
          "30:     error.password = 'Password is too short';",
          "34:     error.confirmPassword = 'Confirm password is required';",
          "36:     error.confirmPassword = 'The password provided does not match';",
          "",
          "[Added Lines]",
          "16:    const error: Record<string, string[]> = {};",
          "19:     error.email = ['Email is required'];",
          "24:     error.email = ['Email is invalid'];",
          "28:     error.password = ['Password is required'];",
          "30:     error.password = ['Password is too short'];",
          "34:     error.confirmPassword = ['Confirm password is required'];",
          "36:     error.confirmPassword = ['The password provided does not match'];",
          "",
          "---------------"
        ],
        "tests/conform-yup.spec.ts||tests/conform-yup.spec.ts": [
          "File: tests/conform-yup.spec.ts -> tests/conform-yup.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  const error = {",
          "65:   text: ['min', 'regex'],",
          "66:   tag: ['required', 'invalid'],",
          "77:  };",
          "79:  test('getFieldsetConstraint', () => {",
          "",
          "[Removed Lines]",
          "67:   number: 'max',",
          "68:   timestamp: 'min',",
          "69:   'options[1]': 'invalid',",
          "70:   options: 'min',",
          "71:   'nested.key': 'required',",
          "72:   nested: 'error',",
          "73:   'list[0].key': 'required',",
          "74:   'list[0]': 'error',",
          "75:   list: 'max',",
          "76:   '': 'error',",
          "",
          "[Added Lines]",
          "67:   number: ['max'],",
          "68:   timestamp: ['min'],",
          "69:   'options[1]': ['invalid'],",
          "70:   options: ['min'],",
          "71:   'nested.key': ['required'],",
          "72:   nested: ['error'],",
          "73:   'list[0].key': ['required'],",
          "74:   'list[0]': ['error'],",
          "75:   list: ['max'],",
          "76:   '': ['error'],",
          "",
          "---------------"
        ],
        "tests/conform-zod.spec.ts||tests/conform-zod.spec.ts": [
          "File: tests/conform-zod.spec.ts -> tests/conform-zod.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:   };",
          "214:   const error = {",
          "215:    text: ['min', 'regex', 'refine'],",
          "226:   };",
          "228:   expect(parse(formData, { schema, stripEmptyValue: true })).toEqual({",
          "",
          "[Removed Lines]",
          "216:    number: 'step',",
          "217:    timestamp: 'min',",
          "218:    options: 'min',",
          "219:    'options[0]': 'refine',",
          "220:    'options[1]': 'refine',",
          "221:    'nested.key': 'refine',",
          "222:    files: 'required',",
          "223:    nested: 'refine',",
          "224:    list: 'max',",
          "225:    'list[0].key': 'required',",
          "",
          "[Added Lines]",
          "216:    number: ['step'],",
          "217:    timestamp: ['min'],",
          "218:    options: ['min'],",
          "219:    'options[0]': ['refine'],",
          "220:    'options[1]': ['refine'],",
          "221:    'nested.key': ['refine'],",
          "222:    files: ['required'],",
          "223:    nested: ['refine'],",
          "224:    list: ['max'],",
          "225:    'list[0].key': ['required'],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:   };",
          "259:   const error = {",
          "260:    text: ['min', 'regex', 'refine'],",
          "272:   };",
          "274:   expect(parse(formData, { schema, stripEmptyValue: false })).toEqual({",
          "",
          "[Removed Lines]",
          "261:    number: 'step',",
          "262:    timestamp: 'min',",
          "263:    options: 'min',",
          "264:    'options[0]': 'refine',",
          "265:    'options[1]': 'refine',",
          "266:    'nested.key': 'refine',",
          "267:    nested: 'refine',",
          "268:    list: 'max',",
          "269:    'list[0].key': 'refine',",
          "270:    'list[0]': 'refine',",
          "271:    '': 'refine',",
          "",
          "[Added Lines]",
          "261:    number: ['step'],",
          "262:    timestamp: ['min'],",
          "263:    options: ['min'],",
          "264:    'options[0]': ['refine'],",
          "265:    'options[1]': ['refine'],",
          "266:    'nested.key': ['refine'],",
          "267:    nested: ['refine'],",
          "268:    list: ['max'],",
          "269:    'list[0].key': ['refine'],",
          "270:    'list[0]': ['refine'],",
          "271:    '': ['refine'],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "302:     text: 'abc',",
          "303:    },",
          "304:    error: {",
          "306:    },",
          "307:   });",
          "308:  });",
          "",
          "[Removed Lines]",
          "305:     text: 'The field is too short',",
          "",
          "[Added Lines]",
          "305:     text: ['The field is too short'],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "335:   expect(parse(formData, { schema: createSchema() })).toEqual({",
          "336:    ...submission,",
          "337:    error: {",
          "339:    },",
          "340:   });",
          "341:   expect(parse(formData, { schema: createSchema(() => false) })).toEqual({",
          "342:    ...submission,",
          "343:    error: {",
          "345:    },",
          "346:   });",
          "347:   expect(parse(formData, { schema: createSchema(() => true) })).toEqual({",
          "",
          "[Removed Lines]",
          "338:     email: '__undefined__',",
          "344:     email: 'Email is invalid',",
          "",
          "[Added Lines]",
          "338:     email: ['__undefined__'],",
          "344:     email: ['Email is invalid'],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "354:   ).toEqual({",
          "355:    ...submission,",
          "356:    error: {",
          "358:    },",
          "359:   });",
          "360:   expect(",
          "",
          "[Removed Lines]",
          "357:     email: '__skipped__',",
          "",
          "[Added Lines]",
          "357:     email: ['__skipped__'],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "362:   ).toEqual({",
          "363:    ...submission,",
          "364:    error: {",
          "366:    },",
          "367:   });",
          "368:   expect(",
          "",
          "[Removed Lines]",
          "365:     email: '__skipped__',",
          "",
          "[Added Lines]",
          "365:     email: ['__skipped__'],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "370:   ).toEqual({",
          "371:    ...submission,",
          "372:    error: {",
          "374:    },",
          "375:   });",
          "376:   expect(parse(formData, { schema: createSchema(() => true, true) })).toEqual(",
          "",
          "[Removed Lines]",
          "373:     email: 'Email is invalid',",
          "",
          "[Added Lines]",
          "373:     email: ['Email is invalid'],",
          "",
          "---------------"
        ],
        "tests/react.spec.ts||tests/react.spec.ts": [
          "File: tests/react.spec.ts -> tests/react.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:     email: '',",
          "330:    },",
          "331:    error: {",
          "334:    },",
          "335:   });",
          "",
          "[Removed Lines]",
          "332:     email: 'Email is required',",
          "333:     password: 'Password is required',",
          "",
          "[Added Lines]",
          "332:     email: ['Email is required'],",
          "333:     password: ['Password is required'],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344:     email: 'invalid email',",
          "345:    },",
          "346:    error: {",
          "348:    },",
          "349:   });",
          "350:  });",
          "",
          "[Removed Lines]",
          "347:     password: 'Password is required',",
          "",
          "[Added Lines]",
          "347:     password: ['Password is required'],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "995d9ec4a57c4a9db2748160d2ce60e78721b3b8",
      "candidate_info": {
        "commit_hash": "995d9ec4a57c4a9db2748160d2ce60e78721b3b8",
        "repo": "edmundhung/conform",
        "commit_url": "https://github.com/edmundhung/conform/commit/995d9ec4a57c4a9db2748160d2ce60e78721b3b8",
        "files": [
          "packages/conform-dom/dom.ts",
          "packages/conform-dom/formdata.ts",
          "packages/conform-dom/index.ts",
          "packages/conform-dom/intent.ts",
          "packages/conform-dom/parse.ts",
          "packages/conform-dom/types.ts",
          "packages/conform-react/helpers.ts",
          "packages/conform-react/hooks.ts",
          "packages/conform-react/index.ts",
          "playground/app/routes/validate-constraint.tsx",
          "tests/conform-validitystate.spec.ts"
        ],
        "message": "refactor(conform-dom,conform-react): simplify dom utilities (#138)",
        "before_after_code_files": [
          "packages/conform-dom/dom.ts||packages/conform-dom/dom.ts",
          "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts",
          "packages/conform-dom/index.ts||packages/conform-dom/index.ts",
          "packages/conform-dom/intent.ts||packages/conform-dom/intent.ts",
          "packages/conform-dom/parse.ts||packages/conform-dom/parse.ts",
          "packages/conform-dom/types.ts||packages/conform-dom/types.ts",
          "packages/conform-react/helpers.ts||packages/conform-react/helpers.ts",
          "packages/conform-react/hooks.ts||packages/conform-react/hooks.ts",
          "packages/conform-react/index.ts||packages/conform-react/index.ts",
          "playground/app/routes/validate-constraint.tsx||playground/app/routes/validate-constraint.tsx",
          "tests/integrations/validitystate.spec.ts||tests/conform-validitystate.spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts"
          ],
          "candidate": [
            "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/conform-dom/dom.ts||packages/conform-dom/dom.ts": [
          "File: packages/conform-dom/dom.ts -> packages/conform-dom/dom.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export type FormControl =",
          "2:  | HTMLInputElement",
          "3:  | HTMLSelectElement",
          "4:  | HTMLTextAreaElement",
          "5:  | HTMLButtonElement;",
          "7: export type Submitter = HTMLInputElement | HTMLButtonElement;",
          "13: export function isFormControl(element: unknown): element is FormControl {",
          "14:  return (",
          "15:   element instanceof Element &&",
          "16:   (element.tagName === 'INPUT' ||",
          "17:    element.tagName === 'SELECT' ||",
          "18:    element.tagName === 'TEXTAREA' ||",
          "19:    element.tagName === 'BUTTON')",
          "20:  );",
          "21: }",
          "26: export function isFocusableFormControl(",
          "27:  element: unknown,",
          "28: ): element is FormControl {",
          "29:  return (",
          "30:   isFormControl(element) && element.willValidate && element.type !== 'submit'",
          "31:  );",
          "32: }",
          "37: export function getFormAction(event: SubmitEvent): string {",
          "38:  const form = event.target as HTMLFormElement;",
          "39:  const submitter = event.submitter as Submitter | null;",
          "41:  return (",
          "42:   submitter?.getAttribute('formaction') ??",
          "43:   form.getAttribute('action') ??",
          "44:   `${location.pathname}${location.search}`",
          "45:  );",
          "46: }",
          "51: export function getFormEncType(",
          "52:  event: SubmitEvent,",
          "53: ): 'application/x-www-form-urlencoded' | 'multipart/form-data' {",
          "54:  const form = event.target as HTMLFormElement;",
          "55:  const submitter = event.submitter as Submitter | null;",
          "56:  const encType = submitter?.getAttribute('formenctype') ?? form.enctype;",
          "58:  if (",
          "59:   ['application/x-www-form-urlencoded', 'multipart/form-data'].includes(",
          "60:    encType,",
          "61:   )",
          "62:  ) {",
          "63:   return encType as any;",
          "64:  }",
          "66:  return 'application/x-www-form-urlencoded';",
          "67: }",
          "72: export function getFormMethod(",
          "73:  event: SubmitEvent,",
          "74: ): 'get' | 'post' | 'put' | 'patch' | 'delete' {",
          "75:  const form = event.target as HTMLFormElement;",
          "76:  const submitter = event.submitter as Submitter | null;",
          "77:  const method =",
          "78:   submitter?.getAttribute('formmethod') ?? form.getAttribute('method');",
          "80:  if (['get', 'post', 'put', 'patch', 'delete'].includes(method as string)) {",
          "81:   return method as any;",
          "82:  }",
          "84:  return 'get';",
          "85: }",
          "90: export function getFormElement(",
          "91:  element:",
          "92:   | HTMLFormElement",
          "93:   | HTMLFieldSetElement",
          "94:   | HTMLInputElement",
          "95:   | HTMLSelectElement",
          "96:   | HTMLTextAreaElement",
          "97:   | HTMLButtonElement",
          "98:   | null,",
          "99: ): HTMLFormElement | null {",
          "100:  const form = element instanceof HTMLFormElement ? element : element?.form;",
          "102:  if (!form) {",
          "103:   return null;",
          "104:  }",
          "106:  return form;",
          "107: }",
          "112: export function getFormControls(form: HTMLFormElement): FormControl[] {",
          "113:  const formControls: FormControl[] = [];",
          "115:  for (const element of form.elements) {",
          "116:   if (isFormControl(element)) {",
          "117:    formControls.push(element);",
          "118:   }",
          "119:  }",
          "121:  return formControls;",
          "122: }",
          "127: export function createSubmitter(config: {",
          "128:  name: string;",
          "129:  value: string;",
          "130:  hidden?: boolean;",
          "131:  formAction?: string;",
          "132:  formEnctype?: ReturnType<typeof getFormEncType>;",
          "133:  formMethod?: ReturnType<typeof getFormMethod>;",
          "134:  formNoValidate?: boolean;",
          "135: }): HTMLButtonElement {",
          "136:  const button = document.createElement('button');",
          "138:  button.name = config.name;",
          "139:  button.value = config.value;",
          "141:  if (config.hidden) {",
          "142:   button.hidden = true;",
          "143:  }",
          "145:  if (config.formAction) {",
          "146:   button.formAction = config.formAction;",
          "147:  }",
          "149:  if (config.formEnctype) {",
          "150:   button.formEnctype = config.formEnctype;",
          "151:  }",
          "153:  if (config.formMethod) {",
          "154:   button.formMethod = config.formMethod;",
          "155:  }",
          "157:  if (config.formNoValidate) {",
          "158:   button.formNoValidate = true;",
          "159:  }",
          "161:  return button;",
          "162: }",
          "167: export function requestSubmit(",
          "168:  form: HTMLFormElement,",
          "169:  submitter: Submitter | null,",
          "170: ): void {",
          "171:  let shouldRemoveSubmitter = false;",
          "173:  if (submitter && !submitter.isConnected) {",
          "174:   shouldRemoveSubmitter = true;",
          "175:   form.appendChild(submitter);",
          "176:  }",
          "178:  if (typeof form.requestSubmit === 'function') {",
          "179:   form.requestSubmit(submitter);",
          "180:  } else {",
          "181:   const event = new SubmitEvent('submit', {",
          "182:    bubbles: true,",
          "183:    cancelable: true,",
          "184:    submitter,",
          "185:   });",
          "187:   form.dispatchEvent(event);",
          "188:  }",
          "190:  if (submitter && shouldRemoveSubmitter) {",
          "191:   form.removeChild(submitter);",
          "192:  }",
          "193: }",
          "198: export function focusFirstInvalidControl(form: HTMLFormElement) {",
          "199:  for (const element of form.elements) {",
          "200:   if (isFocusableFormControl(element) && !element.validity.valid) {",
          "201:    element.focus();",
          "202:    break;",
          "203:   }",
          "204:  }",
          "205: }",
          "210: export function focusFormControl(form: HTMLFormElement, name: string): void {",
          "211:  let element: unknown = form.elements.namedItem(name);",
          "213:  if (!element) {",
          "214:   return;",
          "215:  }",
          "217:  if (element instanceof RadioNodeList) {",
          "218:   element = element.item(0);",
          "219:  }",
          "221:  if (isFocusableFormControl(element)) {",
          "222:   element.focus();",
          "223:  }",
          "224: }",
          "",
          "---------------"
        ],
        "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts": [
          "File: packages/conform-dom/formdata.ts -> packages/conform-dom/formdata.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: export function getFormData(",
          "9:  form: HTMLFormElement,",
          "10:  submitter?: HTMLInputElement | HTMLButtonElement | null,",
          "11: ): FormData {",
          "12:  const payload = new FormData(form);",
          "14:  if (submitter && submitter.type === 'submit' && submitter.name !== '') {",
          "15:   payload.append(submitter.name, submitter.value);",
          "16:  }",
          "18:  return payload;",
          "19: }",
          "28: export function getPaths(name: string): Array<string | number> {",
          "29:  const pattern = /(\\w*)\\[(\\d+)\\]/;",
          "31:  if (!name) {",
          "32:   return [];",
          "33:  }",
          "35:  return name.split('.').flatMap((key) => {",
          "36:   const matches = pattern.exec(key);",
          "38:   if (!matches) {",
          "39:    return key;",
          "40:   }",
          "42:   if (matches[1] === '') {",
          "43:    return Number(matches[2]);",
          "44:   }",
          "46:   return [matches[1], Number(matches[2])];",
          "47:  });",
          "48: }",
          "57: export function formatPaths(paths: Array<string | number>): string {",
          "58:  return paths.reduce<string>((name, path) => {",
          "59:   if (typeof path === 'number') {",
          "60:    return `${name}[${path}]`;",
          "61:   }",
          "63:   if (name === '' || path === '') {",
          "64:    return [name, path].join('');",
          "65:   }",
          "67:   return [name, path].join('.');",
          "68:  }, '');",
          "69: }",
          "74: export function setValue(",
          "75:  target: any,",
          "76:  name: string,",
          "77:  valueFn: (prev?: unknown) => any,",
          "78: ): void {",
          "79:  let paths = getPaths(name);",
          "80:  let length = paths.length;",
          "81:  let lastIndex = length - 1;",
          "82:  let index = -1;",
          "83:  let pointer = target;",
          "85:  while (pointer != null && ++index < length) {",
          "86:   let key = paths[index];",
          "87:   let next = paths[index + 1];",
          "88:   let newValue =",
          "89:    index != lastIndex",
          "90:     ? pointer[key] ?? (typeof next === 'number' ? [] : {})",
          "91:     : valueFn(pointer[key]);",
          "93:   pointer[key] = newValue;",
          "94:   pointer = pointer[key];",
          "95:  }",
          "96: }",
          "101: export function resolve(payload: FormData | URLSearchParams) {",
          "102:  const data = {};",
          "104:  for (let [name, value] of payload.entries()) {",
          "105:   setValue(data, name, (prev) => {",
          "106:    if (!prev) {",
          "107:     return value;",
          "108:    } else if (Array.isArray(prev)) {",
          "109:     return prev.concat(value);",
          "110:    } else {",
          "111:     return [prev, value];",
          "112:    }",
          "113:   });",
          "114:  }",
          "116:  return data;",
          "117: }",
          "122: export function getValidationMessage(errors?: string | string[]): string {",
          "123:  return ([] as string[]).concat(errors ?? []).join(String.fromCharCode(31));",
          "124: }",
          "129: export function getErrors(validationMessage: string | undefined): string[] {",
          "130:  if (!validationMessage) {",
          "131:   return [];",
          "132:  }",
          "134:  return validationMessage.split(String.fromCharCode(31));",
          "135: }",
          "",
          "---------------"
        ],
        "packages/conform-dom/index.ts||packages/conform-dom/index.ts": [
          "File: packages/conform-dom/index.ts -> packages/conform-dom/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: export type Primitive = null | undefined | string | number | boolean | Date;",
          "3: export type FieldElement =",
          "4:  | HTMLInputElement",
          "5:  | HTMLSelectElement",
          "6:  | HTMLTextAreaElement",
          "7:  | HTMLButtonElement;",
          "9: export interface FieldConfig<Schema = unknown> extends FieldConstraint<Schema> {",
          "10:  id?: string;",
          "11:  name: string;",
          "12:  defaultValue?: FieldValue<Schema>;",
          "13:  initialError?: Record<string, string | string[]>;",
          "14:  form?: string;",
          "15:  descriptionId?: string;",
          "16:  errorId?: string;",
          "21:  error?: string;",
          "26:  errors?: string[];",
          "27: }",
          "29: export type FieldValue<Schema> = Schema extends Primitive",
          "30:  ? string",
          "31:  : Schema extends File",
          "32:  ? File",
          "33:  : Schema extends Array<infer InnerType>",
          "34:  ? Array<FieldValue<InnerType>>",
          "35:  : Schema extends Record<string, any>",
          "36:  ? { [Key in keyof Schema]?: FieldValue<Schema[Key]> }",
          "37:  : any;",
          "39: export type FieldConstraint<Schema = any> = {",
          "40:  required?: boolean;",
          "41:  minLength?: number;",
          "42:  maxLength?: number;",
          "43:  min?: Schema extends number ? number : string | number;",
          "44:  max?: Schema extends number ? number : string | number;",
          "45:  step?: Schema extends number ? number : string | number;",
          "46:  multiple?: boolean;",
          "47:  pattern?: string;",
          "48: };",
          "50: export type FieldsetConstraint<Schema extends Record<string, any>> = {",
          "51:  [Key in keyof Schema]?: FieldConstraint<Schema[Key]>;",
          "52: };",
          "54: export type Submission<Schema extends Record<string, any> | unknown = unknown> =",
          "55:  unknown extends Schema",
          "56:   ? {",
          "57:     intent: string;",
          "58:     payload: Record<string, any>;",
          "59:     error: Record<string, string | string[]>;",
          "60:     }",
          "61:   : {",
          "62:     intent: string;",
          "63:     payload: Record<string, any>;",
          "64:     value?: Schema;",
          "65:     error: Record<string, string | string[]>;",
          "66:     toJSON(): Submission;",
          "67:     };",
          "69: export interface IntentButtonProps {",
          "70:  name: typeof INTENT;",
          "71:  value: string;",
          "72:  formNoValidate?: boolean;",
          "73: }",
          "78: export function isFieldElement(element: unknown): element is FieldElement {",
          "79:  return (",
          "80:   element instanceof Element &&",
          "81:   (element.tagName === 'INPUT' ||",
          "82:    element.tagName === 'SELECT' ||",
          "83:    element.tagName === 'TEXTAREA' ||",
          "84:    element.tagName === 'BUTTON')",
          "85:  );",
          "86: }",
          "93: export function getPaths(name: string): Array<string | number> {",
          "94:  const pattern = /(\\w*)\\[(\\d+)\\]/;",
          "96:  if (!name) {",
          "97:   return [];",
          "98:  }",
          "100:  return name.split('.').flatMap((key) => {",
          "101:   const matches = pattern.exec(key);",
          "103:   if (!matches) {",
          "104:    return key;",
          "105:   }",
          "107:   if (matches[1] === '') {",
          "108:    return Number(matches[2]);",
          "109:   }",
          "111:   return [matches[1], Number(matches[2])];",
          "112:  });",
          "113: }",
          "115: export function getFormData(",
          "116:  form: HTMLFormElement,",
          "117:  submitter?: HTMLInputElement | HTMLButtonElement | null,",
          "118: ): FormData {",
          "119:  const payload = new FormData(form);",
          "121:  if (submitter?.name) {",
          "122:   payload.append(submitter.name, submitter.value);",
          "123:  }",
          "125:  return payload;",
          "126: }",
          "128: export type FormMethod = 'get' | 'post' | 'put' | 'patch' | 'delete';",
          "129: export type FormEncType =",
          "130:  | 'application/x-www-form-urlencoded'",
          "131:  | 'multipart/form-data';",
          "133: export function getFormAttributes(",
          "134:  form: HTMLFormElement,",
          "135:  submitter?: HTMLInputElement | HTMLButtonElement | null,",
          "136: ): {",
          "137:  action: string;",
          "138:  encType: FormEncType;",
          "139:  method: FormMethod;",
          "140: } {",
          "141:  const enforce = <Type extends string>(value: string, list: Type[]): Type =>",
          "142:   list.includes(value as Type) ? (value as Type) : list[0];",
          "143:  const action =",
          "144:   submitter?.getAttribute('formaction') ??",
          "145:   form.getAttribute('action') ??",
          "146:   `${location.pathname}${location.search}`;",
          "147:  const method =",
          "148:   submitter?.getAttribute('formmethod') ??",
          "149:   form.getAttribute('method') ??",
          "150:   'get';",
          "151:  const encType = submitter?.getAttribute('formenctype') ?? form.enctype;",
          "153:  return {",
          "154:   action,",
          "155:   encType: enforce<FormEncType>(encType, [",
          "156:    'application/x-www-form-urlencoded',",
          "157:    'multipart/form-data',",
          "158:   ]),",
          "159:   method: enforce<FormMethod>(method, [",
          "160:    'get',",
          "161:    'post',",
          "162:    'put',",
          "163:    'patch',",
          "164:    'delete',",
          "165:   ]),",
          "166:  };",
          "167: }",
          "169: export function getName(paths: Array<string | number>): string {",
          "170:  return paths.reduce<string>((name, path) => {",
          "171:   if (typeof path === 'number') {",
          "172:    return `${name}[${path}]`;",
          "173:   }",
          "175:   if (name === '' || path === '') {",
          "176:    return [name, path].join('');",
          "177:   }",
          "179:   return [name, path].join('.');",
          "180:  }, '');",
          "181: }",
          "183: export function getScope(intent: string): string | null {",
          "184:  const [type, ...rest] = intent.split('/');",
          "186:  switch (type) {",
          "187:   case 'validate':",
          "188:    return rest.length > 0 ? rest.join('/') : null;",
          "189:   case 'list':",
          "190:    return parseListCommand(intent)?.scope ?? null;",
          "191:   default:",
          "192:    return null;",
          "193:  }",
          "194: }",
          "196: export function isFocusedOnIntentButton(",
          "197:  form: HTMLFormElement,",
          "198:  intent: string,",
          "199: ): boolean {",
          "200:  const element = document.activeElement;",
          "202:  return (",
          "203:   isFieldElement(element) &&",
          "204:   element.tagName === 'BUTTON' &&",
          "205:   element.form === form &&",
          "206:   element.name === INTENT &&",
          "207:   element.value === intent",
          "208:  );",
          "209: }",
          "211: export function getValidationMessage(errors?: string | string[]): string {",
          "212:  return ([] as string[]).concat(errors ?? []).join(String.fromCharCode(31));",
          "213: }",
          "215: export function getErrors(message: string | undefined): string[] {",
          "216:  if (!message) {",
          "217:   return [];",
          "218:  }",
          "220:  return message.split(String.fromCharCode(31));",
          "221: }",
          "223: export const FORM_ERROR_ELEMENT_NAME = '__form__';",
          "224: export const INTENT = '__intent__';",
          "225: export const VALIDATION_UNDEFINED = '__undefined__';",
          "226: export const VALIDATION_SKIPPED = '__skipped__';",
          "228: export function reportSubmission(",
          "229:  form: HTMLFormElement,",
          "230:  submission: Submission,",
          "231: ): void {",
          "232:  for (const [name, message] of Object.entries(submission.error)) {",
          "234:   if (message === '') {",
          "235:    continue;",
          "236:   }",
          "240:   const elementName = name ? name : FORM_ERROR_ELEMENT_NAME;",
          "241:   const item = form.elements.namedItem(elementName);",
          "243:   if (item instanceof RadioNodeList) {",
          "244:    for (const field of item) {",
          "245:     if ((field as FieldElement).type !== 'radio') {",
          "246:      console.warn('Repeated field name is not supported.');",
          "247:      continue;",
          "248:     }",
          "249:    }",
          "250:   }",
          "252:   if (item === null) {",
          "254:    const button = document.createElement('button');",
          "256:    button.name = elementName;",
          "257:    button.hidden = true;",
          "258:    button.dataset.conformTouched = 'true';",
          "260:    form.appendChild(button);",
          "261:   }",
          "262:  }",
          "264:  let focusedFirstInvalidField = false;",
          "265:  const scope = getScope(submission.intent);",
          "266:  const isSubmitting =",
          "267:   submission.intent.slice(0, submission.intent.indexOf('/')) !== 'validate' &&",
          "268:   parseListCommand(submission.intent) === null;",
          "270:  for (const element of form.elements) {",
          "271:   if (isFieldElement(element) && element.willValidate) {",
          "272:    const elementName =",
          "273:     element.name !== FORM_ERROR_ELEMENT_NAME ? element.name : '';",
          "274:    const messages = ([] as string[]).concat(",
          "275:     submission.error[elementName] ?? [],",
          "276:    );",
          "277:    const shouldValidate = scope === null || scope === elementName;",
          "279:    if (shouldValidate) {",
          "280:     element.dataset.conformTouched = 'true';",
          "281:    }",
          "283:    if (",
          "284:     !messages.includes(VALIDATION_SKIPPED) &&",
          "285:     !messages.includes(VALIDATION_UNDEFINED)",
          "286:    ) {",
          "287:     const invalidEvent = new Event('invalid', { cancelable: true });",
          "289:     element.setCustomValidity(getValidationMessage(messages));",
          "290:     element.dispatchEvent(invalidEvent);",
          "291:    }",
          "293:    if (",
          "294:     !focusedFirstInvalidField &&",
          "295:     (isSubmitting || isFocusedOnIntentButton(form, submission.intent)) &&",
          "296:     shouldValidate &&",
          "297:     element.tagName !== 'BUTTON' &&",
          "298:     !element.validity.valid",
          "299:    ) {",
          "300:     element.focus();",
          "301:     focusedFirstInvalidField = true;",
          "302:    }",
          "303:   }",
          "304:  }",
          "305: }",
          "307: export function setValue<T>(",
          "308:  target: any,",
          "309:  paths: Array<string | number>,",
          "310:  valueFn: (prev?: T) => T,",
          "311: ): void {",
          "312:  let length = paths.length;",
          "313:  let lastIndex = length - 1;",
          "314:  let index = -1;",
          "315:  let pointer = target;",
          "317:  while (pointer != null && ++index < length) {",
          "318:   let key = paths[index];",
          "319:   let next = paths[index + 1];",
          "320:   let newValue =",
          "321:    index != lastIndex",
          "322:     ? pointer[key] ?? (typeof next === 'number' ? [] : {})",
          "323:     : valueFn(pointer[key]);",
          "325:   pointer[key] = newValue;",
          "326:   pointer = pointer[key];",
          "327:  }",
          "328: }",
          "333: export function requestIntent(",
          "334:  form: HTMLFormElement | undefined,",
          "335:  buttonProps: {",
          "336:   value: string;",
          "337:   formNoValidate?: boolean;",
          "338:  },",
          "339: ): void {",
          "340:  if (!form) {",
          "341:   console.warn('No form element is provided');",
          "342:   return;",
          "343:  }",
          "345:  const button = document.createElement('button');",
          "347:  button.name = INTENT;",
          "348:  button.value = buttonProps.value;",
          "349:  button.hidden = true;",
          "351:  if (buttonProps.formNoValidate) {",
          "352:   button.formNoValidate = true;",
          "353:  }",
          "355:  form.appendChild(button);",
          "356:  button.click();",
          "357:  form.removeChild(button);",
          "358: }",
          "365: export function validate(field?: string): IntentButtonProps {",
          "366:  return {",
          "367:   name: INTENT,",
          "368:   value: field ? `validate/${field}` : 'validate',",
          "369:   formNoValidate: true,",
          "370:  };",
          "371: }",
          "373: export function getFormElement(",
          "374:  element:",
          "375:   | HTMLFormElement",
          "376:   | HTMLFieldSetElement",
          "377:   | HTMLInputElement",
          "378:   | HTMLSelectElement",
          "379:   | HTMLTextAreaElement",
          "380:   | HTMLButtonElement",
          "381:   | null,",
          "382: ): HTMLFormElement | null {",
          "383:  const form = element instanceof HTMLFormElement ? element : element?.form;",
          "385:  if (!form) {",
          "386:   return null;",
          "387:  }",
          "389:  return form;",
          "390: }",
          "392: export function parse(payload: FormData | URLSearchParams): Submission;",
          "393: export function parse<Schema>(",
          "394:  payload: FormData | URLSearchParams,",
          "395:  options?: {",
          "396:   resolve?: (",
          "397:    payload: Record<string, any>,",
          "398:    intent: string,",
          "399:   ) => { value: Schema } | { error: Record<string, string | string[]> };",
          "400:  },",
          "401: ): Submission<Schema>;",
          "402: export function parse<Schema>(",
          "403:  payload: FormData | URLSearchParams,",
          "404:  options?: {",
          "405:   resolve?: (",
          "406:    payload: Record<string, any>,",
          "407:    intent: string,",
          "408:   ) => Promise<",
          "409:    { value: Schema } | { error: Record<string, string | string[]> }",
          "410:   >;",
          "411:  },",
          "412: ): Promise<Submission<Schema>>;",
          "413: export function parse<Schema>(",
          "414:  payload: FormData | URLSearchParams,",
          "415:  options?: {",
          "416:   resolve?: (",
          "417:    payload: Record<string, any>,",
          "418:    intent: string,",
          "419:   ) =>",
          "420:    | ({ value: Schema } | { error: Record<string, string | string[]> })",
          "421:    | Promise<",
          "422:      { value: Schema } | { error: Record<string, string | string[]> }",
          "423:      >;",
          "424:  },",
          "425: ): Submission<Schema> | Promise<Submission<Schema>>;",
          "426: export function parse<Schema>(",
          "427:  payload: FormData | URLSearchParams,",
          "428:  options?: {",
          "429:   resolve?: (",
          "430:    payload: Record<string, any>,",
          "431:    intent: string,",
          "432:   ) =>",
          "433:    | ({ value: Schema } | { error: Record<string, string | string[]> })",
          "434:    | Promise<",
          "435:      { value: Schema } | { error: Record<string, string | string[]> }",
          "436:      >;",
          "437:  },",
          "438: ): Submission | Submission<Schema> | Promise<Submission<Schema>> {",
          "439:  const submission: Submission = {",
          "440:   intent: 'submit',",
          "441:   payload: {},",
          "442:   error: {},",
          "443:  };",
          "445:  for (let [name, value] of payload.entries()) {",
          "446:   if (name === INTENT) {",
          "447:    if (typeof value !== 'string' || submission.intent !== 'submit') {",
          "448:     throw new Error('The intent could only be set on a button');",
          "449:    }",
          "451:    submission.intent = value;",
          "452:   } else {",
          "453:    const paths = getPaths(name);",
          "455:    setValue(submission.payload, paths, (prev) => {",
          "456:     if (!prev) {",
          "457:      return value;",
          "458:     } else if (Array.isArray(prev)) {",
          "459:      return prev.concat(value);",
          "460:     } else {",
          "461:      return [prev, value];",
          "462:     }",
          "463:    });",
          "464:   }",
          "465:  }",
          "467:  const command = parseListCommand(submission.intent);",
          "469:  if (command) {",
          "470:   const paths = getPaths(command.scope);",
          "472:   setValue(submission.payload, paths, (list) => {",
          "473:    if (typeof list !== 'undefined' && !Array.isArray(list)) {",
          "474:     throw new Error('The list command can only be applied to a list');",
          "475:    }",
          "477:    return updateList(list ?? [], command);",
          "478:   });",
          "479:  }",
          "481:  if (typeof options?.resolve === 'undefined') {",
          "482:   return submission;",
          "483:  }",
          "485:  const result = options.resolve(submission.payload, submission.intent);",
          "486:  const mergeResolveResult = (",
          "487:   resolved: { error: Record<string, string | string[]> } | { value: Schema },",
          "488:  ) => {",
          "489:   const result = {",
          "490:    ...submission,",
          "491:    ...resolved,",
          "492:    toJSON() {",
          "493:     return {",
          "494:      intent: this.intent,",
          "495:      payload: this.payload,",
          "496:      error: this.error,",
          "497:     };",
          "498:    },",
          "499:   };",
          "501:   return result;",
          "502:  };",
          "504:  if (result instanceof Promise) {",
          "505:   return result.then<Submission<Schema>>(mergeResolveResult);",
          "506:  }",
          "508:  return mergeResolveResult(result);",
          "509: }",
          "511: export type ListCommand<Schema = unknown> =",
          "512:  | { type: 'prepend'; scope: string; payload: { defaultValue: Schema } }",
          "513:  | { type: 'append'; scope: string; payload: { defaultValue: Schema } }",
          "514:  | {",
          "515:    type: 'replace';",
          "516:    scope: string;",
          "517:    payload: { defaultValue: Schema; index: number };",
          "518:    }",
          "519:  | { type: 'remove'; scope: string; payload: { index: number } }",
          "520:  | { type: 'reorder'; scope: string; payload: { from: number; to: number } };",
          "522: export function parseListCommand<Schema = unknown>(",
          "523:  intent: string,",
          "524: ): ListCommand<Schema> | null {",
          "525:  try {",
          "526:   const [group, type, scope, json] = intent.split('/');",
          "528:   if (",
          "529:    group !== 'list' ||",
          "530:    !['prepend', 'append', 'replace', 'remove', 'reorder'].includes(type) ||",
          "531:    !scope",
          "532:   ) {",
          "533:    return null;",
          "534:   }",
          "536:   const payload = JSON.parse(json);",
          "538:   return {",
          "540:    type,",
          "541:    scope,",
          "542:    payload,",
          "543:   };",
          "544:  } catch (error) {",
          "545:   return null;",
          "546:  }",
          "547: }",
          "549: export function updateList<Schema>(",
          "550:  list: Array<Schema>,",
          "551:  command: ListCommand<Schema>,",
          "552: ): Array<Schema> {",
          "553:  switch (command.type) {",
          "554:   case 'prepend': {",
          "555:    list.unshift(command.payload.defaultValue);",
          "556:    break;",
          "557:   }",
          "558:   case 'append': {",
          "559:    list.push(command.payload.defaultValue);",
          "560:    break;",
          "561:   }",
          "562:   case 'replace': {",
          "563:    list.splice(command.payload.index, 1, command.payload.defaultValue);",
          "564:    break;",
          "565:   }",
          "566:   case 'remove':",
          "567:    list.splice(command.payload.index, 1);",
          "568:    break;",
          "569:   case 'reorder':",
          "570:    list.splice(",
          "571:     command.payload.to,",
          "572:     0,",
          "573:     ...list.splice(command.payload.from, 1),",
          "574:    );",
          "575:    break;",
          "576:   default:",
          "577:    throw new Error('Unknown list command received');",
          "578:  }",
          "580:  return list;",
          "581: }",
          "583: export interface ListCommandButtonBuilder {",
          "584:  append<Schema>(",
          "585:   name: string,",
          "586:   payload?: { defaultValue: Schema },",
          "587:  ): IntentButtonProps;",
          "588:  prepend<Schema>(",
          "589:   name: string,",
          "590:   payload?: { defaultValue: Schema },",
          "591:  ): IntentButtonProps;",
          "592:  replace<Schema>(",
          "593:   name: string,",
          "594:   payload: { defaultValue: Schema; index: number },",
          "595:  ): IntentButtonProps;",
          "596:  remove(name: string, payload: { index: number }): IntentButtonProps;",
          "597:  reorder(",
          "598:   name: string,",
          "599:   payload: { from: number; to: number },",
          "600:  ): IntentButtonProps;",
          "601: }",
          "608: export const list = new Proxy({} as ListCommandButtonBuilder, {",
          "609:  get(_target, type: any) {",
          "610:   switch (type) {",
          "611:    case 'append':",
          "612:    case 'prepend':",
          "613:    case 'replace':",
          "614:    case 'remove':",
          "615:    case 'reorder':",
          "616:     return (scope: string, payload = {}): IntentButtonProps => {",
          "617:      return {",
          "618:       name: INTENT,",
          "619:       value: `list/${type}/${scope}/${JSON.stringify(payload)}`,",
          "620:       formNoValidate: true,",
          "621:      };",
          "622:     };",
          "623:   }",
          "624:  },",
          "625: });",
          "631: export function validateConstraint(options: {",
          "632:  form: HTMLFormElement;",
          "633:  formData?: FormData;",
          "634:  constraint?: Record<",
          "635:   Lowercase<string>,",
          "636:   (",
          "637:    value: string,",
          "638:    context: { formData: FormData; attributeValue: string },",
          "639:   ) => boolean",
          "640:  >;",
          "641:  acceptMultipleErrors?: ({",
          "642:   name,",
          "643:   intent,",
          "644:   payload,",
          "645:  }: {",
          "646:   name: string;",
          "647:   intent: string;",
          "648:   payload: Record<string, any>;",
          "649:  }) => boolean;",
          "650:  formatMessages?: ({",
          "651:   name,",
          "652:   validity,",
          "653:   constraint,",
          "654:   defaultErrors,",
          "655:  }: {",
          "656:   name: string;",
          "657:   validity: ValidityState;",
          "658:   constraint: Record<string, boolean>;",
          "659:   defaultErrors: string[];",
          "660:  }) => string[];",
          "661: }): Submission {",
          "662:  const formData = options?.formData ?? new FormData(options.form);",
          "663:  const getDefaultErrors = (",
          "664:   validity: ValidityState,",
          "665:   result: Record<string, boolean>,",
          "666:  ) => {",
          "667:   const errors: Array<string> = [];",
          "669:   if (validity.valueMissing) errors.push('required');",
          "670:   if (validity.typeMismatch || validity.badInput) errors.push('type');",
          "671:   if (validity.tooShort) errors.push('minLength');",
          "672:   if (validity.rangeUnderflow) errors.push('min');",
          "673:   if (validity.stepMismatch) errors.push('step');",
          "674:   if (validity.tooLong) errors.push('maxLength');",
          "675:   if (validity.rangeOverflow) errors.push('max');",
          "676:   if (validity.patternMismatch) errors.push('pattern');",
          "678:   for (const [constraintName, valid] of Object.entries(result)) {",
          "679:    if (!valid) {",
          "680:     errors.push(constraintName);",
          "681:    }",
          "682:   }",
          "684:   return errors;",
          "685:  };",
          "686:  const formatMessages =",
          "687:   options?.formatMessages ?? (({ defaultErrors }) => defaultErrors);",
          "689:  return parse(formData, {",
          "690:   resolve(payload, intent) {",
          "691:    const error: Record<string, string | string[]> = {};",
          "692:    const constraintPattern = /^constraint[A-Z][^A-Z]*$/;",
          "693:    for (const element of options.form.elements) {",
          "694:     if (isFieldElement(element)) {",
          "695:      const name =",
          "696:       element.name !== FORM_ERROR_ELEMENT_NAME ? element.name : '';",
          "697:      const constraint = Object.entries(element.dataset).reduce<",
          "698:       Record<string, boolean>",
          "699:      >((result, [name, attributeValue = '']) => {",
          "700:       if (constraintPattern.test(name)) {",
          "701:        const constraintName = name",
          "702:         .slice(10)",
          "703:         .toLowerCase() as Lowercase<string>;",
          "704:        const validate = options.constraint?.[constraintName];",
          "706:        if (typeof validate === 'function') {",
          "707:         result[constraintName] = validate(element.value, {",
          "708:          formData,",
          "709:          attributeValue,",
          "710:         });",
          "711:        } else {",
          "712:         console.warn(",
          "713:          `Found an \"${constraintName}\" constraint with undefined definition; Please specify it on the validateConstraint API.`,",
          "714:         );",
          "715:        }",
          "716:       }",
          "718:       return result;",
          "719:      }, {});",
          "720:      const errors = formatMessages({",
          "721:       name,",
          "722:       validity: element.validity,",
          "723:       constraint,",
          "724:       defaultErrors: getDefaultErrors(element.validity, constraint),",
          "725:      });",
          "726:      const shouldAcceptMultipleErrors =",
          "727:       options?.acceptMultipleErrors?.({",
          "728:        name,",
          "729:        payload,",
          "730:        intent,",
          "731:       }) ?? false;",
          "733:      if (errors.length > 0) {",
          "734:       error[name] = shouldAcceptMultipleErrors ? errors : errors[0];",
          "735:      }",
          "736:     }",
          "737:    }",
          "739:    return { error };",
          "740:   },",
          "741:  });",
          "742: }",
          "",
          "[Added Lines]",
          "1: export {",
          "2:  type FormControl as FieldElement,",
          "3:  isFormControl as isFieldElement,",
          "4:  isFocusableFormControl,",
          "5:  getFormAction,",
          "6:  getFormControls,",
          "7:  getFormElement,",
          "8:  getFormEncType,",
          "9:  getFormMethod,",
          "10:  focusFirstInvalidControl,",
          "11:  focusFormControl,",
          "12:  createSubmitter,",
          "13:  requestSubmit,",
          "14: } from './dom';",
          "16: export {",
          "17:  formatPaths as getName,",
          "18:  getPaths,",
          "19:  getFormData,",
          "20:  getValidationMessage,",
          "21:  getErrors,",
          "22: } from './formdata';",
          "24: export {",
          "25:  type ListCommand,",
          "26:  INTENT,",
          "27:  getScope,",
          "28:  isSubmitting,",
          "29:  validate,",
          "30:  list,",
          "31:  parseListCommand,",
          "32:  updateList,",
          "33:  requestIntent,",
          "34: } from './intent';",
          "36: export { type Submission, parse } from './parse';",
          "38: export { type FieldConstraint, type FieldsetConstraint } from './types';",
          "",
          "---------------"
        ],
        "packages/conform-dom/intent.ts||packages/conform-dom/intent.ts": [
          "File: packages/conform-dom/intent.ts -> packages/conform-dom/intent.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { createSubmitter, requestSubmit } from './dom';",
          "3: export interface IntentButtonProps {",
          "4:  name: typeof INTENT;",
          "5:  value: string;",
          "6:  formNoValidate?: boolean;",
          "7: }",
          "9: export type ListCommand<Schema = unknown> =",
          "10:  | { type: 'prepend'; scope: string; payload: { defaultValue: Schema } }",
          "11:  | { type: 'append'; scope: string; payload: { defaultValue: Schema } }",
          "12:  | {",
          "13:    type: 'replace';",
          "14:    scope: string;",
          "15:    payload: { defaultValue: Schema; index: number };",
          "16:    }",
          "17:  | { type: 'remove'; scope: string; payload: { index: number } }",
          "18:  | { type: 'reorder'; scope: string; payload: { from: number; to: number } };",
          "20: export interface ListCommandButtonBuilder {",
          "21:  append<Schema>(",
          "22:   name: string,",
          "23:   payload?: { defaultValue: Schema },",
          "24:  ): IntentButtonProps;",
          "25:  prepend<Schema>(",
          "26:   name: string,",
          "27:   payload?: { defaultValue: Schema },",
          "28:  ): IntentButtonProps;",
          "29:  replace<Schema>(",
          "30:   name: string,",
          "31:   payload: { defaultValue: Schema; index: number },",
          "32:  ): IntentButtonProps;",
          "33:  remove(name: string, payload: { index: number }): IntentButtonProps;",
          "34:  reorder(",
          "35:   name: string,",
          "36:   payload: { from: number; to: number },",
          "37:  ): IntentButtonProps;",
          "38: }",
          "40: export const INTENT = '__intent__';",
          "47: export function getIntent(payload: FormData | URLSearchParams): string {",
          "48:  if (!payload.has(INTENT)) {",
          "49:   return 'submit';",
          "50:  }",
          "52:  const [intent, ...rest] = payload.getAll(INTENT);",
          "54:  if (typeof intent !== 'string' || rest.length > 0) {",
          "55:   throw new Error('The intent could only be set on a button');",
          "56:  }",
          "58:  payload.delete(INTENT);",
          "60:  return intent;",
          "61: }",
          "68: export function validate(field?: string): IntentButtonProps {",
          "69:  return {",
          "70:   name: INTENT,",
          "71:   value: field ? `validate/${field}` : 'validate',",
          "72:   formNoValidate: true,",
          "73:  };",
          "74: }",
          "76: export function requestIntent(",
          "77:  form: HTMLFormElement | undefined,",
          "78:  buttonProps: {",
          "79:   value: string;",
          "80:   formNoValidate?: boolean;",
          "81:  },",
          "82: ): void {",
          "83:  if (!form) {",
          "84:   console.warn('No form element is provided');",
          "85:   return;",
          "86:  }",
          "88:  const submitter = createSubmitter({",
          "89:   name: INTENT,",
          "90:   value: buttonProps.value,",
          "91:   hidden: true,",
          "92:   formNoValidate: buttonProps.formNoValidate,",
          "93:  });",
          "95:  requestSubmit(form, submitter);",
          "96: }",
          "103: export const list = new Proxy({} as ListCommandButtonBuilder, {",
          "104:  get(_target, type: any) {",
          "105:   return (scope: string, payload = {}): IntentButtonProps => ({",
          "106:    name: INTENT,",
          "107:    value: `list/${type}/${scope}/${JSON.stringify(payload)}`,",
          "108:    formNoValidate: true,",
          "109:   });",
          "110:  },",
          "111: });",
          "113: export function isSubmitting(intent: string): boolean {",
          "114:  return (",
          "115:   intent.slice(0, intent.indexOf('/')) !== 'validate' &&",
          "116:   parseListCommand(intent) === null",
          "117:  );",
          "118: }",
          "120: export function getScope(intent: string): string | null {",
          "121:  const [type, ...rest] = intent.split('/');",
          "123:  switch (type) {",
          "124:   case 'validate':",
          "125:    return rest.length > 0 ? rest.join('/') : null;",
          "126:   case 'list':",
          "127:    return parseListCommand(intent)?.scope ?? null;",
          "128:   default:",
          "129:    return null;",
          "130:  }",
          "131: }",
          "133: export function parseListCommand<Schema = unknown>(",
          "134:  intent: string,",
          "135: ): ListCommand<Schema> | null {",
          "136:  try {",
          "137:   const [group, type, scope, json] = intent.split('/');",
          "139:   if (",
          "140:    group !== 'list' ||",
          "141:    !['prepend', 'append', 'replace', 'remove', 'reorder'].includes(type) ||",
          "142:    !scope",
          "143:   ) {",
          "144:    return null;",
          "145:   }",
          "147:   const payload = JSON.parse(json);",
          "149:   return {",
          "151:    type,",
          "152:    scope,",
          "153:    payload,",
          "154:   };",
          "155:  } catch (error) {",
          "156:   return null;",
          "157:  }",
          "158: }",
          "160: export function updateList<Schema>(",
          "161:  list: Array<Schema>,",
          "162:  command: ListCommand<Schema>,",
          "163: ): Array<Schema> {",
          "164:  switch (command.type) {",
          "165:   case 'prepend':",
          "166:    list.unshift(command.payload.defaultValue);",
          "167:    break;",
          "168:   case 'append':",
          "169:    list.push(command.payload.defaultValue);",
          "170:    break;",
          "171:   case 'replace':",
          "172:    list.splice(command.payload.index, 1, command.payload.defaultValue);",
          "173:    break;",
          "174:   case 'remove':",
          "175:    list.splice(command.payload.index, 1);",
          "176:    break;",
          "177:   case 'reorder':",
          "178:    list.splice(",
          "179:     command.payload.to,",
          "180:     0,",
          "181:     ...list.splice(command.payload.from, 1),",
          "182:    );",
          "183:    break;",
          "184:   default:",
          "185:    throw new Error('Unknown list command received');",
          "186:  }",
          "188:  return list;",
          "189: }",
          "",
          "---------------"
        ],
        "packages/conform-dom/parse.ts||packages/conform-dom/parse.ts": [
          "File: packages/conform-dom/parse.ts -> packages/conform-dom/parse.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { resolve, setValue } from './formdata';",
          "2: import { getIntent, parseListCommand, updateList } from './intent';",
          "4: export type Submission<Schema extends Record<string, any> | unknown = unknown> =",
          "5:  unknown extends Schema",
          "6:   ? {",
          "7:     intent: string;",
          "8:     payload: Record<string, any>;",
          "9:     error: Record<string, string | string[]>;",
          "10:     }",
          "11:   : {",
          "12:     intent: string;",
          "13:     payload: Record<string, any>;",
          "14:     value?: Schema;",
          "15:     error: Record<string, string | string[]>;",
          "16:     toJSON(): Submission;",
          "17:     };",
          "19: export function parse(payload: FormData | URLSearchParams): Submission;",
          "20: export function parse<Schema>(",
          "21:  payload: FormData | URLSearchParams,",
          "22:  options?: {",
          "23:   resolve?: (",
          "24:    payload: Record<string, any>,",
          "25:    intent: string,",
          "26:   ) => { value: Schema } | { error: Record<string, string | string[]> };",
          "27:  },",
          "28: ): Submission<Schema>;",
          "29: export function parse<Schema>(",
          "30:  payload: FormData | URLSearchParams,",
          "31:  options?: {",
          "32:   resolve?: (",
          "33:    payload: Record<string, any>,",
          "34:    intent: string,",
          "35:   ) => Promise<",
          "36:    { value: Schema } | { error: Record<string, string | string[]> }",
          "37:   >;",
          "38:  },",
          "39: ): Promise<Submission<Schema>>;",
          "40: export function parse<Schema>(",
          "41:  payload: FormData | URLSearchParams,",
          "42:  options?: {",
          "43:   resolve?: (",
          "44:    payload: Record<string, any>,",
          "45:    intent: string,",
          "46:   ) =>",
          "47:    | ({ value: Schema } | { error: Record<string, string | string[]> })",
          "48:    | Promise<",
          "49:      { value: Schema } | { error: Record<string, string | string[]> }",
          "50:      >;",
          "51:  },",
          "52: ): Submission<Schema> | Promise<Submission<Schema>>;",
          "53: export function parse<Schema>(",
          "54:  payload: FormData | URLSearchParams,",
          "55:  options?: {",
          "56:   resolve?: (",
          "57:    payload: Record<string, any>,",
          "58:    intent: string,",
          "59:   ) =>",
          "60:    | ({ value: Schema } | { error: Record<string, string | string[]> })",
          "61:    | Promise<",
          "62:      { value: Schema } | { error: Record<string, string | string[]> }",
          "63:      >;",
          "64:  },",
          "65: ): Submission | Submission<Schema> | Promise<Submission<Schema>> {",
          "66:  const submission: Submission = {",
          "67:   intent: getIntent(payload),",
          "68:   payload: resolve(payload),",
          "69:   error: {},",
          "70:  };",
          "72:  const command = parseListCommand(submission.intent);",
          "74:  if (command) {",
          "75:   setValue(submission.payload, command.scope, (list) => {",
          "76:    if (typeof list !== 'undefined' && !Array.isArray(list)) {",
          "77:     throw new Error('The list command can only be applied to a list');",
          "78:    }",
          "80:    return updateList(list ?? [], command);",
          "81:   });",
          "82:  }",
          "84:  if (typeof options?.resolve === 'undefined') {",
          "85:   return submission;",
          "86:  }",
          "88:  const result = options.resolve(submission.payload, submission.intent);",
          "89:  const mergeResolveResult = (",
          "90:   resolved: { error: Record<string, string | string[]> } | { value: Schema },",
          "91:  ) => {",
          "92:   const result = {",
          "93:    ...submission,",
          "94:    ...resolved,",
          "95:    toJSON() {",
          "96:     return {",
          "97:      intent: this.intent,",
          "98:      payload: this.payload,",
          "99:      error: this.error,",
          "100:     };",
          "101:    },",
          "102:   };",
          "104:   return result;",
          "105:  };",
          "107:  if (result instanceof Promise) {",
          "108:   return result.then<Submission<Schema>>(mergeResolveResult);",
          "109:  }",
          "111:  return mergeResolveResult(result);",
          "112: }",
          "",
          "---------------"
        ],
        "packages/conform-dom/types.ts||packages/conform-dom/types.ts": [
          "File: packages/conform-dom/types.ts -> packages/conform-dom/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export type FieldConstraint<Schema = any> = {",
          "2:  required?: boolean;",
          "3:  minLength?: number;",
          "4:  maxLength?: number;",
          "5:  min?: Schema extends number ? number : string | number;",
          "6:  max?: Schema extends number ? number : string | number;",
          "7:  step?: Schema extends number ? number : string | number;",
          "8:  multiple?: boolean;",
          "9:  pattern?: string;",
          "10: };",
          "12: export type FieldsetConstraint<Schema extends Record<string, any>> = {",
          "13:  [Key in keyof Schema]?: FieldConstraint<Schema[Key]>;",
          "14: };",
          "",
          "---------------"
        ],
        "packages/conform-react/helpers.ts||packages/conform-react/helpers.ts": [
          "File: packages/conform-react/helpers.ts -> packages/conform-react/helpers.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {",
          "2:  type FieldConfig,",
          "3:  type Primitive,",
          "4:  VALIDATION_UNDEFINED,",
          "5:  VALIDATION_SKIPPED,",
          "8: import type { CSSProperties, HTMLInputTypeAttribute } from 'react';",
          "10: interface FormControlProps {",
          "",
          "[Removed Lines]",
          "6:  INTENT,",
          "7: } from '@conform-to/dom';",
          "",
          "[Added Lines]",
          "1: import { INTENT } from '@conform-to/dom';",
          "7: } from './hooks';",
          "",
          "---------------"
        ],
        "packages/conform-react/hooks.ts||packages/conform-react/hooks.ts": [
          "File: packages/conform-react/hooks.ts -> packages/conform-react/hooks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {",
          "3:  type FieldElement,",
          "5:  type FieldsetConstraint,",
          "8:  type ListCommand,",
          "9:  type Submission,",
          "10:  getFormData,",
          "",
          "[Removed Lines]",
          "2:  type FieldConfig,",
          "4:  type FieldValue,",
          "6:  type FormMethod,",
          "7:  type FormEncType,",
          "",
          "[Added Lines]",
          "2:  type FieldConstraint,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:  parse,",
          "16:  parseListCommand,",
          "17:  updateList,",
          "19:  validate,",
          "20:  requestIntent,",
          "21:  getValidationMessage,",
          "22:  getErrors,",
          "24:  getScope,",
          "27: } from '@conform-to/dom';",
          "28: import {",
          "29:  type FormEvent,",
          "",
          "[Removed Lines]",
          "18:  reportSubmission,",
          "23:  getFormAttributes,",
          "25:  VALIDATION_UNDEFINED,",
          "26:  FORM_ERROR_ELEMENT_NAME,",
          "",
          "[Added Lines]",
          "20:  getFormAction,",
          "21:  getFormEncType,",
          "22:  getFormMethod,",
          "23:  getFormControls,",
          "24:  focusFirstInvalidControl,",
          "25:  isFocusableFormControl,",
          "26:  isSubmitting,",
          "27:  focusFormControl,",
          "28:  INTENT,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:  useEffect,",
          "34:  useLayoutEffect,",
          "35:  useMemo,",
          "36: } from 'react';",
          "38: export interface FormConfig<",
          "39:  Schema extends Record<string, any>,",
          "40:  ClientSubmission extends Submission | Submission<Schema> = Submission,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:  useCallback,",
          "41: export type Primitive = null | undefined | string | number | boolean | Date;",
          "43: export interface FieldConfig<Schema = unknown> extends FieldConstraint<Schema> {",
          "44:  id?: string;",
          "45:  name: string;",
          "46:  defaultValue?: FieldValue<Schema>;",
          "47:  initialError?: Record<string, string | string[]>;",
          "48:  form?: string;",
          "49:  descriptionId?: string;",
          "50:  errorId?: string;",
          "55:  error?: string;",
          "60:  errors?: string[];",
          "61: }",
          "63: export type FieldValue<Schema> = Schema extends Primitive",
          "64:  ? string",
          "65:  : Schema extends File",
          "66:  ? File",
          "67:  : Schema extends Array<infer InnerType>",
          "68:  ? Array<FieldValue<InnerType>>",
          "69:  : Schema extends Record<string, any>",
          "70:  ? { [Key in keyof Schema]?: FieldValue<Schema[Key]> }",
          "71:  : any;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:    formData: FormData;",
          "122:    submission: ClientSubmission;",
          "123:    action: string;",
          "126:   },",
          "127:  ) => void;",
          "128: }",
          "",
          "[Removed Lines]",
          "124:    encType: FormEncType;",
          "125:    method: FormMethod;",
          "",
          "[Added Lines]",
          "159:    encType: ReturnType<typeof getFormEncType>;",
          "160:    method: ReturnType<typeof getFormMethod>;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149: }",
          "165:  );",
          "205:  useSafeLayoutEffect(() => {",
          "207:  });",
          "209:  useEffect(() => {",
          "213:  useEffect(() => {",
          "214:   const form = ref.current;",
          "217:   if (!form || !submission) {",
          "218:    return;",
          "219:   }",
          "229:   }",
          "239:   }",
          "244:  useEffect(() => {",
          "259:     return;",
          "260:    }",
          "268:    }",
          "269:   };",
          "271:    const field = event.target;",
          "272:    const form = ref.current;",
          "274:    const {",
          "275:     initialReport = 'onSubmit',",
          "276:     shouldValidate = initialReport === 'onChange'",
          "277:      ? 'onInput'",
          "278:      : initialReport,",
          "279:     shouldRevalidate = 'onInput',",
          "283:     return;",
          "284:    }",
          "286:    if (",
          "287:     field.dataset.conformTouched",
          "290:    ) {",
          "291:     requestIntent(form, validate(field.name));",
          "292:    }",
          "",
          "[Removed Lines]",
          "157: export function useForm<",
          "158:  Schema extends Record<string, any>,",
          "159:  ClientSubmission extends Submission | Submission<Schema> = Submission,",
          "160: >(config: FormConfig<Schema, ClientSubmission> = {}): [Form, Fieldset<Schema>] {",
          "161:  const configRef = useRef(config);",
          "162:  const formRef = useRef<HTMLFormElement>(null);",
          "163:  const [lastSubmission, setLastSubmission] = useState(",
          "164:   config.lastSubmission ?? null,",
          "166:  const [errors, setErrors] = useState<string[]>(() => {",
          "167:   if (!config.lastSubmission) {",
          "168:    return [];",
          "169:   }",
          "171:   return ([] as string[]).concat(config.lastSubmission.error['']);",
          "172:  });",
          "173:  const initialError = useMemo(() => {",
          "174:   const submission = config.lastSubmission;",
          "176:   if (!submission) {",
          "177:    return {};",
          "178:   }",
          "180:   const scope = getScope(submission.intent);",
          "182:   return Object.entries(submission.error).reduce<",
          "183:    Record<string, string | string[]>",
          "184:   >((result, [name, message]) => {",
          "185:    if (name !== '' && (scope === null || scope === name)) {",
          "186:     result[name] = message;",
          "187:    }",
          "189:    return result;",
          "190:   }, {});",
          "191:  }, [config.lastSubmission]);",
          "192:  const ref = config.ref ?? formRef;",
          "193:  const fieldset = useFieldset(ref, {",
          "194:   defaultValue:",
          "195:    (config.lastSubmission?.payload as FieldValue<Schema>) ??",
          "196:    config.defaultValue,",
          "197:   initialError,",
          "198:   constraint: config.constraint,",
          "199:   form: config.id,",
          "200:  });",
          "201:  const [noValidate, setNoValidate] = useState(",
          "202:   config.noValidate || !config.fallbackNative,",
          "203:  );",
          "206:   configRef.current = config;",
          "210:   setNoValidate(true);",
          "211:  }, []);",
          "215:   const submission = config.lastSubmission;",
          "221:   const listCommand = parseListCommand(submission.intent);",
          "223:   if (listCommand) {",
          "224:    form.dispatchEvent(",
          "225:     new CustomEvent('conform/list', {",
          "226:      detail: submission.intent,",
          "227:     }),",
          "228:    );",
          "231:   setLastSubmission(submission);",
          "232:  }, [ref, config.lastSubmission]);",
          "234:  useEffect(() => {",
          "235:   const form = ref.current;",
          "237:   if (!form || !lastSubmission) {",
          "238:    return;",
          "241:   reportSubmission(form, lastSubmission);",
          "242:  }, [ref, lastSubmission]);",
          "246:   const handleInput = (event: Event) => {",
          "247:    const field = event.target;",
          "248:    const form = ref.current;",
          "249:    const formConfig = configRef.current;",
          "250:    const {",
          "251:     initialReport = 'onSubmit',",
          "252:     shouldValidate = initialReport === 'onChange'",
          "253:      ? 'onInput'",
          "254:      : initialReport,",
          "255:     shouldRevalidate = 'onInput',",
          "256:    } = formConfig;",
          "258:    if (!form || !isFieldElement(field) || field.form !== form) {",
          "262:    if (",
          "263:     field.dataset.conformTouched",
          "264:      ? shouldRevalidate === 'onInput'",
          "265:      : shouldValidate === 'onInput'",
          "266:    ) {",
          "267:     requestIntent(form, validate(field.name));",
          "270:   const handleBlur = (event: FocusEvent) => {",
          "273:    const formConfig = configRef.current;",
          "280:    } = formConfig;",
          "282:    if (!form || !isFieldElement(field) || field.form !== form) {",
          "288:      ? shouldRevalidate === 'onBlur'",
          "289:      : shouldValidate === 'onBlur'",
          "",
          "[Added Lines]",
          "189: function normalizeError(error: string | string[] | undefined): string[] {",
          "190:  if (!error) {",
          "192:   return [];",
          "193:  }",
          "195:  return ([] as string[]).concat(error);",
          "196: }",
          "198: function useNoValidate(",
          "199:  defaultNoValidate: boolean | undefined,",
          "200:  validateBeforeHydrate: boolean | undefined,",
          "201: ): boolean {",
          "202:  const [noValidate, setNoValidate] = useState(",
          "203:   defaultNoValidate || !validateBeforeHydrate,",
          "206:  useEffect(() => {",
          "207:   setNoValidate(true);",
          "208:  }, []);",
          "210:  return noValidate;",
          "211: }",
          "213: function useFormRef(userProvidedRef: RefObject<HTMLFormElement> | undefined) {",
          "214:  const formRef = useRef<HTMLFormElement>(null);",
          "216:  return userProvidedRef ?? formRef;",
          "217: }",
          "219: function useConfigRef<Config>(config: Config) {",
          "220:  const ref = useRef(config);",
          "223:   ref.current = config;",
          "226:  return ref;",
          "227: }",
          "229: function useFormReporter(",
          "230:  ref: RefObject<HTMLFormElement>,",
          "231:  lastSubmission: Submission | undefined,",
          "232: ) {",
          "233:  const [submission, setSubmission] = useState(lastSubmission);",
          "234:  const report = useCallback(",
          "235:   (form: HTMLFormElement, submission: Submission) => {",
          "236:    const event = new CustomEvent('conform', { detail: submission.intent });",
          "238:    form.dispatchEvent(event);",
          "239:    setSubmission(submission);",
          "240:   },",
          "241:   [],",
          "242:  );",
          "245:   const form = ref.current;",
          "247:   if (!form || !lastSubmission) {",
          "248:    return;",
          "249:   }",
          "251:   report(form, lastSubmission);",
          "252:  }, [ref, lastSubmission, report]);",
          "261:   reportSubmission(form, submission);",
          "262:  }, [ref, submission]);",
          "264:  return report;",
          "265: }",
          "267: function useFormError(",
          "268:  ref: RefObject<HTMLFormElement | HTMLFieldSetElement>,",
          "269:  config: {",
          "270:   initialError: Record<string, string | string[] | undefined> | undefined;",
          "271:   name?: string;",
          "272:  },",
          "273: ) {",
          "274:  const [error, setError] = useState(() => {",
          "275:   if (!config.initialError) {",
          "276:    return {};",
          "279:   const result: Record<string | number, string[] | undefined> = {};",
          "281:   for (const [name, message] of Object.entries(config.initialError)) {",
          "282:    const paths = getPaths(name);",
          "284:    if (paths.length === 1) {",
          "285:     result[paths[0]] = normalizeError(message);",
          "286:    }",
          "289:   return result;",
          "290:  });",
          "293:   const handleInvalid = (event: Event) => {",
          "294:    const form = getFormElement(ref.current);",
          "295:    const element = event.target;",
          "297:    if (",
          "298:     !isFieldElement(element) ||",
          "299:     element.form !== form ||",
          "300:     !element.dataset.conformTouched",
          "301:    ) {",
          "305:    let key: string | number = element.name;",
          "307:    if (config.name) {",
          "308:     const scopePaths = getPaths(config.name);",
          "309:     const fieldPaths = getPaths(element.name);",
          "311:     for (let i = 0; i <= scopePaths.length; i++) {",
          "312:      const path = fieldPaths[i];",
          "314:      if (i < scopePaths.length) {",
          "316:       if (path !== scopePaths[i]) {",
          "317:        return;",
          "318:       }",
          "319:      } else {",
          "320:       key = path;",
          "321:      }",
          "322:     }",
          "325:    setError((prev) => {",
          "326:     if (element.validationMessage === getValidationMessage(prev[key])) {",
          "327:      return prev;",
          "328:     }",
          "330:     return {",
          "331:      ...prev,",
          "332:      [key]: getErrors(element.validationMessage),",
          "333:     };",
          "334:    });",
          "336:    event.preventDefault();",
          "338:   const handleReset = (event: Event) => {",
          "339:    const form = getFormElement(ref.current);",
          "341:    if (form && event.target === form) {",
          "342:     setError({});",
          "343:    }",
          "344:   };",
          "346:   document.addEventListener('reset', handleReset);",
          "347:   document.addEventListener('invalid', handleInvalid, true);",
          "349:   return () => {",
          "350:    document.removeEventListener('reset', handleReset);",
          "351:    document.removeEventListener('invalid', handleInvalid, true);",
          "352:   };",
          "353:  }, [ref, config.name]);",
          "355:  return [error, setError] as const;",
          "356: }",
          "364: export function useForm<",
          "365:  Schema extends Record<string, any>,",
          "366:  ClientSubmission extends Submission | Submission<Schema> = Submission,",
          "367: >(config: FormConfig<Schema, ClientSubmission> = {}): [Form, Fieldset<Schema>] {",
          "368:  const configRef = useConfigRef(config);",
          "369:  const ref = useFormRef(config.ref);",
          "370:  const noValidate = useNoValidate(config.noValidate, config.fallbackNative);",
          "371:  const report = useFormReporter(ref, config.lastSubmission);",
          "372:  const [errors, setErrors] = useState<string[]>(() =>",
          "373:   normalizeError(config.lastSubmission?.error['']),",
          "374:  );",
          "375:  const initialError = useMemo(() => {",
          "376:   const submission = config.lastSubmission;",
          "378:   if (!submission) {",
          "379:    return {};",
          "380:   }",
          "382:   const scope = getScope(submission.intent);",
          "383:   return scope === null",
          "384:    ? submission.error",
          "385:    : { [scope]: submission.error[scope] };",
          "386:  }, [config.lastSubmission]);",
          "387:  const fieldset = useFieldset(ref, {",
          "388:   defaultValue:",
          "389:    (config.lastSubmission?.payload as FieldValue<Schema>) ??",
          "390:    config.defaultValue,",
          "391:   initialError,",
          "392:   constraint: config.constraint,",
          "393:   form: config.id,",
          "394:  });",
          "396:  useEffect(() => {",
          "398:   const createValidateHandler = (name: string) => (event: Event) => {",
          "407:    } = configRef.current;",
          "409:    if (!form || !isFocusableFormControl(field) || field.form !== form) {",
          "415:      ? shouldRevalidate === name",
          "416:      : shouldValidate === name",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "318:    }",
          "326:    }",
          "328:    setErrors([]);",
          "329:   };",
          "331:   document.addEventListener('input', handleInput, true);",
          "332:   document.addEventListener('blur', handleBlur, true);",
          "333:   document.addEventListener('invalid', handleInvalid, true);",
          "",
          "[Removed Lines]",
          "321:    for (const field of form.elements) {",
          "322:     if (isFieldElement(field)) {",
          "323:      delete field.dataset.conformTouched;",
          "324:      field.setCustomValidity('');",
          "325:     }",
          "",
          "[Added Lines]",
          "448:    for (const element of getFormControls(form)) {",
          "449:     delete element.dataset.conformTouched;",
          "450:     element.setCustomValidity('');",
          "456:   const handleInput = createValidateHandler('onInput');",
          "457:   const handleBlur = createValidateHandler('onBlur');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "339:    document.removeEventListener('invalid', handleInvalid, true);",
          "340:    document.removeEventListener('reset', handleReset);",
          "341:   };",
          "344:  const form: Form = {",
          "345:   ref,",
          "",
          "[Removed Lines]",
          "342:  }, [ref]);",
          "",
          "[Added Lines]",
          "470:  }, [ref, configRef]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "363:     try {",
          "364:      const formData = getFormData(form, submitter);",
          "370:      if (",
          "389:      ) {",
          "401:       event.preventDefault();",
          "402:      } else {",
          "403:       config.onSubmit?.(event, {",
          "404:        formData,",
          "405:        submission,",
          "407:       });",
          "408:      }",
          "409:     } catch (e) {",
          "",
          "[Removed Lines]",
          "365:      const getSubmission =",
          "366:       config.onValidate ??",
          "367:       ((context) => parse(context.formData) as ClientSubmission);",
          "368:      const submission = getSubmission({ form, formData });",
          "371:       (!config.noValidate &&",
          "372:        !submitter?.formNoValidate &&",
          "373:        Object.entries(submission.error).some(",
          "374:         ([, message]) =>",
          "375:          message !== '' &&",
          "376:          !([] as string[])",
          "377:           .concat(message)",
          "378:           .includes(VALIDATION_UNDEFINED),",
          "379:        )) ||",
          "380:       (typeof config.onValidate !== 'undefined' &&",
          "381:        (submission.intent.startsWith('validate') ||",
          "382:         submission.intent.startsWith('list')) &&",
          "383:        Object.entries(submission.error).every(",
          "384:         ([, message]) =>",
          "385:          !([] as string[])",
          "386:           .concat(message)",
          "387:           .includes(VALIDATION_UNDEFINED),",
          "388:        ))",
          "390:       const listCommand = parseListCommand(submission.intent);",
          "392:       if (listCommand) {",
          "393:        form.dispatchEvent(",
          "394:         new CustomEvent('conform/list', {",
          "395:          detail: submission.intent,",
          "396:         }),",
          "397:        );",
          "398:       }",
          "400:       setLastSubmission(submission);",
          "406:        ...getFormAttributes(form, submitter),",
          "",
          "[Added Lines]",
          "493:      const submission =",
          "494:       config.onValidate?.({ form, formData }) ??",
          "495:       (parse(formData) as ClientSubmission);",
          "496:      const messages = Object.entries(submission.error).reduce<string[]>(",
          "497:       (messages, [, message]) => messages.concat(normalizeError(message)),",
          "498:       [],",
          "499:      );",
          "500:      const shouldValidate =",
          "501:       !config.noValidate && !submitter?.formNoValidate;",
          "502:      const shouldFallbackToServer =",
          "503:       messages.includes(VALIDATION_UNDEFINED);",
          "504:      const hasClientValidation = typeof config.onValidate !== 'undefined';",
          "505:      const isValid = messages.length === 0;",
          "508:       hasClientValidation &&",
          "509:       (isSubmitting(submission.intent)",
          "510:        ? shouldValidate && !isValid",
          "511:        : !shouldFallbackToServer)",
          "513:       report(form, submission);",
          "519:        action: getFormAction(nativeEvent),",
          "520:        encType: getFormEncType(nativeEvent),",
          "521:        method: getFormMethod(nativeEvent),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "478:  ref: RefObject<HTMLFormElement | HTMLFieldSetElement>,",
          "479:  config: FieldsetConfig<Schema> | FieldConfig<Schema>,",
          "480: ): Fieldset<Schema> {",
          "506:  });",
          "",
          "[Removed Lines]",
          "481:  const configRef = useRef(config);",
          "482:  const [error, setError] = useState<Record<string, string[] | undefined>>(",
          "483:   () => {",
          "484:    const initialError = config?.initialError;",
          "486:    if (!initialError) {",
          "487:     return {};",
          "488:    }",
          "490:    const result: Record<string, string[]> = {};",
          "492:    for (const [name, message] of Object.entries(initialError)) {",
          "493:     const [key, ...paths] = getPaths(name);",
          "495:     if (typeof key === 'string' && paths.length === 0) {",
          "496:      result[key] = ([] as string[]).concat(message ?? []);",
          "497:     }",
          "498:    }",
          "500:    return result;",
          "501:   },",
          "502:  );",
          "504:  useSafeLayoutEffect(() => {",
          "505:   configRef.current = config;",
          "508:  useEffect(() => {",
          "509:   const invalidHandler = (event: Event) => {",
          "510:    const form = getFormElement(ref.current);",
          "511:    const field = event.target;",
          "512:    const fieldsetName = configRef.current.name ?? '';",
          "514:    if (",
          "515:     !form ||",
          "516:     !isFieldElement(field) ||",
          "517:     field.form !== form ||",
          "518:     !field.name.startsWith(fieldsetName)",
          "519:    ) {",
          "520:     return;",
          "521:    }",
          "523:    const [key, ...paths] = getPaths(",
          "524:     fieldsetName.length > 0",
          "525:      ? field.name.slice(fieldsetName.length + 1)",
          "526:      : field.name,",
          "527:    );",
          "530:    if (typeof key === 'string' && paths.length === 0) {",
          "531:     if (field.dataset.conformTouched) {",
          "532:      setError((prev) => {",
          "533:       const prevMessage = getValidationMessage(prev?.[key]);",
          "535:       if (prevMessage === field.validationMessage) {",
          "536:        return prev;",
          "537:       }",
          "539:       return {",
          "540:        ...prev,",
          "541:        [key]: getErrors(field.validationMessage),",
          "542:       };",
          "543:      });",
          "544:     }",
          "546:     event.preventDefault();",
          "547:    }",
          "548:   };",
          "549:   const resetHandler = (event: Event) => {",
          "550:    const form = getFormElement(ref.current);",
          "552:    if (!form || event.target !== form) {",
          "553:     return;",
          "554:    }",
          "556:    setError({});",
          "557:   };",
          "560:   document.addEventListener('invalid', invalidHandler, true);",
          "561:   document.addEventListener('reset', resetHandler);",
          "563:   return () => {",
          "564:    document.removeEventListener('invalid', invalidHandler, true);",
          "565:    document.removeEventListener('reset', resetHandler);",
          "566:   };",
          "567:  }, [ref]);",
          "",
          "[Added Lines]",
          "596:  const [error] = useFormError(ref, {",
          "597:   initialError: config.initialError,",
          "598:   name: config.name,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "625:  ref: RefObject<HTMLFormElement | HTMLFieldSetElement>,",
          "626:  config: FieldConfig<Array<Payload>>,",
          "627: ): Array<{ key: string } & FieldConfig<Payload>> {",
          "641:  });",
          "642:  const [entries, setEntries] = useState<",
          "643:   Array<[string, FieldValue<Payload> | undefined]>",
          "644:  >(() => Object.entries(config.defaultValue ?? [undefined]));",
          "650:  useEffect(() => {",
          "691:    const form = getFormElement(ref.current);",
          "693:    if (!form || event.target !== form) {",
          "",
          "[Removed Lines]",
          "628:  const configRef = useRef(config);",
          "629:  const [error, setError] = useState(() => {",
          "630:   const initialError: Array<string[] | undefined> = [];",
          "632:   for (const [name, message] of Object.entries(config?.initialError ?? {})) {",
          "633:    const [index, ...paths] = getPaths(name);",
          "635:    if (typeof index === 'number' && paths.length === 0) {",
          "636:     initialError[index] = ([] as string[]).concat(message ?? []);",
          "637:    }",
          "638:   }",
          "640:   return initialError;",
          "646:  useSafeLayoutEffect(() => {",
          "647:   configRef.current = config;",
          "648:  });",
          "651:   const invalidHandler = (event: Event) => {",
          "652:    const form = getFormElement(ref.current);",
          "653:    const field = event.target;",
          "654:    const prefix = configRef.current.name ?? '';",
          "656:    if (",
          "657:     !form ||",
          "658:     !isFieldElement(field) ||",
          "659:     field.form !== form ||",
          "660:     !field.name.startsWith(prefix)",
          "661:    ) {",
          "662:     return;",
          "663:    }",
          "665:    const [index, ...paths] = getPaths(",
          "666:     prefix.length > 0 ? field.name.slice(prefix.length) : field.name,",
          "667:    );",
          "670:    if (typeof index === 'number' && paths.length === 0) {",
          "671:     if (field.dataset.conformTouched) {",
          "672:      setError((prev) => {",
          "673:       const prevMessage = getValidationMessage(prev?.[index]);",
          "675:       if (prevMessage === field.validationMessage) {",
          "676:        return prev;",
          "677:       }",
          "679:       return [",
          "680:        ...prev.slice(0, index),",
          "681:        getErrors(field.validationMessage),",
          "682:        ...prev.slice(index + 1),",
          "683:       ];",
          "684:      });",
          "685:     }",
          "687:     event.preventDefault();",
          "688:    }",
          "689:   };",
          "690:   const listHandler = (event: CustomEvent) => {",
          "",
          "[Added Lines]",
          "660:  const configRef = useConfigRef(config);",
          "661:  const [error, setError] = useFormError(ref, {",
          "662:   initialError: config.initialError,",
          "663:   name: config.name,",
          "670:   const conformHandler = (event: CustomEvent) => {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "725:     }",
          "726:    });",
          "727:    setError((error) => {",
          "728:     switch (command.type) {",
          "729:      case 'append':",
          "730:      case 'prepend':",
          "731:      case 'replace':",
          "733:        ...command,",
          "734:        payload: {",
          "735:         ...command.payload,",
          "736:         defaultValue: undefined,",
          "737:        },",
          "738:       } as ListCommand<string[] | undefined>);",
          "739:      default: {",
          "741:      }",
          "742:     }",
          "743:    });",
          "744:   };",
          "745:   const resetHandler = (event: Event) => {",
          "",
          "[Removed Lines]",
          "732:       return updateList([...error], {",
          "740:       return updateList([...error], command);",
          "",
          "[Added Lines]",
          "708:     let errorList: Array<string[] | undefined> = [];",
          "710:     for (const [key, messages] of Object.entries(error)) {",
          "711:      if (typeof key === 'number') {",
          "712:       errorList[key] = messages;",
          "713:      }",
          "714:     }",
          "720:       errorList = updateList(errorList, {",
          "727:       break;",
          "729:       errorList = updateList(errorList, command);",
          "730:       break;",
          "734:     return Object.assign({}, errorList) as any;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "750:    }",
          "752:    setEntries(Object.entries(configRef.current.defaultValue ?? [undefined]));",
          "754:   };",
          "759:   document.addEventListener('reset', resetHandler);",
          "761:   return () => {",
          "765:    document.removeEventListener('reset', resetHandler);",
          "766:   };",
          "769:  return entries.map(([key, defaultValue], index) => {",
          "770:   const errors = error[index];",
          "",
          "[Removed Lines]",
          "753:    setError([]);",
          "757:   document.addEventListener('conform/list', listHandler, true);",
          "758:   document.addEventListener('invalid', invalidHandler, true);",
          "763:    document.removeEventListener('conform/list', listHandler, true);",
          "764:    document.removeEventListener('invalid', invalidHandler, true);",
          "767:  }, [ref]);",
          "",
          "[Added Lines]",
          "748:   document.addEventListener('conform', conformHandler, true);",
          "753:    document.removeEventListener('conform', conformHandler, true);",
          "756:  }, [ref, configRef, setError]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "868:  onReset?: (event: Event) => void;",
          "869: }): [RefObject<RefShape>, InputControl] {",
          "870:  const ref = useRef<RefShape>(null);",
          "872:  const changeDispatched = useRef(false);",
          "873:  const focusDispatched = useRef(false);",
          "874:  const blurDispatched = useRef(false);",
          "880:  useSafeLayoutEffect(() => {",
          "881:   const getInputElement = () =>",
          "882:    (optionsRef.current?.getElement?.(ref.current) ?? ref.current) as",
          "",
          "[Removed Lines]",
          "871:  const optionsRef = useRef(options);",
          "876:  useSafeLayoutEffect(() => {",
          "877:   optionsRef.current = options;",
          "878:  });",
          "",
          "[Added Lines]",
          "860:  const optionsRef = useConfigRef(options);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1027:     blurDispatched.current = false;",
          "1028:    },",
          "1029:   };",
          "1032:  return [ref, control];",
          "1033: }",
          "",
          "[Removed Lines]",
          "1030:  }, []);",
          "",
          "[Added Lines]",
          "1015:  }, [optionsRef]);",
          "1020: export const VALIDATION_UNDEFINED = '__undefined__';",
          "1021: export const VALIDATION_SKIPPED = '__skipped__';",
          "1022: export const FORM_ERROR_ELEMENT_NAME = '__form__';",
          "1028: export function validateConstraint(options: {",
          "1029:  form: HTMLFormElement;",
          "1030:  formData?: FormData;",
          "1031:  constraint?: Record<",
          "1032:   Lowercase<string>,",
          "1033:   (",
          "1034:    value: string,",
          "1035:    context: { formData: FormData; attributeValue: string },",
          "1036:   ) => boolean",
          "1037:  >;",
          "1038:  acceptMultipleErrors?: ({",
          "1039:   name,",
          "1040:   intent,",
          "1041:   payload,",
          "1042:  }: {",
          "1043:   name: string;",
          "1044:   intent: string;",
          "1045:   payload: Record<string, any>;",
          "1046:  }) => boolean;",
          "1047:  formatMessages?: ({",
          "1048:   name,",
          "1049:   validity,",
          "1050:   constraint,",
          "1051:   defaultErrors,",
          "1052:  }: {",
          "1053:   name: string;",
          "1054:   validity: ValidityState;",
          "1055:   constraint: Record<string, boolean>;",
          "1056:   defaultErrors: string[];",
          "1057:  }) => string[];",
          "1058: }): Submission {",
          "1059:  const formData = options?.formData ?? new FormData(options.form);",
          "1060:  const getDefaultErrors = (",
          "1061:   validity: ValidityState,",
          "1062:   result: Record<string, boolean>,",
          "1063:  ) => {",
          "1064:   const errors: Array<string> = [];",
          "1066:   if (validity.valueMissing) errors.push('required');",
          "1067:   if (validity.typeMismatch || validity.badInput) errors.push('type');",
          "1068:   if (validity.tooShort) errors.push('minLength');",
          "1069:   if (validity.rangeUnderflow) errors.push('min');",
          "1070:   if (validity.stepMismatch) errors.push('step');",
          "1071:   if (validity.tooLong) errors.push('maxLength');",
          "1072:   if (validity.rangeOverflow) errors.push('max');",
          "1073:   if (validity.patternMismatch) errors.push('pattern');",
          "1075:   for (const [constraintName, valid] of Object.entries(result)) {",
          "1076:    if (!valid) {",
          "1077:     errors.push(constraintName);",
          "1078:    }",
          "1079:   }",
          "1081:   return errors;",
          "1082:  };",
          "1083:  const formatMessages =",
          "1084:   options?.formatMessages ?? (({ defaultErrors }) => defaultErrors);",
          "1086:  return parse(formData, {",
          "1087:   resolve(payload, intent) {",
          "1088:    const error: Record<string, string | string[]> = {};",
          "1089:    const constraintPattern = /^constraint[A-Z][^A-Z]*$/;",
          "1090:    for (const element of options.form.elements) {",
          "1091:     if (isFieldElement(element)) {",
          "1092:      const name =",
          "1093:       element.name !== FORM_ERROR_ELEMENT_NAME ? element.name : '';",
          "1094:      const constraint = Object.entries(element.dataset).reduce<",
          "1095:       Record<string, boolean>",
          "1096:      >((result, [name, attributeValue = '']) => {",
          "1097:       if (constraintPattern.test(name)) {",
          "1098:        const constraintName = name",
          "1099:         .slice(10)",
          "1100:         .toLowerCase() as Lowercase<string>;",
          "1101:        const validate = options.constraint?.[constraintName];",
          "1103:        if (typeof validate === 'function') {",
          "1104:         result[constraintName] = validate(element.value, {",
          "1105:          formData,",
          "1106:          attributeValue,",
          "1107:         });",
          "1108:        } else {",
          "1109:         console.warn(",
          "1110:          `Found an \"${constraintName}\" constraint with undefined definition; Please specify it on the validateConstraint API.`,",
          "1111:         );",
          "1112:        }",
          "1113:       }",
          "1115:       return result;",
          "1116:      }, {});",
          "1117:      const errors = formatMessages({",
          "1118:       name,",
          "1119:       validity: element.validity,",
          "1120:       constraint,",
          "1121:       defaultErrors: getDefaultErrors(element.validity, constraint),",
          "1122:      });",
          "1123:      const shouldAcceptMultipleErrors =",
          "1124:       options?.acceptMultipleErrors?.({",
          "1125:        name,",
          "1126:        payload,",
          "1127:        intent,",
          "1128:       }) ?? false;",
          "1130:      if (errors.length > 0) {",
          "1131:       error[name] = shouldAcceptMultipleErrors ? errors : errors[0];",
          "1132:      }",
          "1133:     }",
          "1134:    }",
          "1136:    return { error };",
          "1137:   },",
          "1138:  });",
          "1139: }",
          "1141: export function reportSubmission(",
          "1142:  form: HTMLFormElement,",
          "1143:  submission: Submission,",
          "1144: ): void {",
          "1145:  for (const [name, message] of Object.entries(submission.error)) {",
          "1147:   if (message === '') {",
          "1148:    continue;",
          "1149:   }",
          "1153:   const elementName = name ? name : FORM_ERROR_ELEMENT_NAME;",
          "1154:   const item = form.elements.namedItem(elementName);",
          "1156:   if (item instanceof RadioNodeList) {",
          "1157:    for (const field of item) {",
          "1158:     if ((field as FieldElement).type !== 'radio') {",
          "1159:      console.warn('Repeated field name is not supported.');",
          "1160:      continue;",
          "1161:     }",
          "1162:    }",
          "1163:   }",
          "1165:   if (item === null) {",
          "1167:    const button = document.createElement('button');",
          "1169:    button.name = elementName;",
          "1170:    button.hidden = true;",
          "1171:    button.dataset.conformTouched = 'true';",
          "1173:    form.appendChild(button);",
          "1174:   }",
          "1175:  }",
          "1177:  const scope = getScope(submission.intent);",
          "1179:  for (const element of getFormControls(form)) {",
          "1180:   const elementName =",
          "1181:    element.name !== FORM_ERROR_ELEMENT_NAME ? element.name : '';",
          "1182:   const messages = normalizeError(submission.error[elementName]);",
          "1184:   if (scope === null || scope === elementName) {",
          "1185:    element.dataset.conformTouched = 'true';",
          "1186:   }",
          "1188:   if (",
          "1189:    !messages.includes(VALIDATION_SKIPPED) &&",
          "1190:    !messages.includes(VALIDATION_UNDEFINED)",
          "1191:   ) {",
          "1192:    const invalidEvent = new Event('invalid', { cancelable: true });",
          "1194:    element.setCustomValidity(getValidationMessage(messages));",
          "1195:    element.dispatchEvent(invalidEvent);",
          "1196:   }",
          "1197:  }",
          "1199:  if (",
          "1200:   isSubmitting(submission.intent) ||",
          "1201:   isFocusedOnIntentButton(form, submission.intent)",
          "1202:  ) {",
          "1203:   if (scope) {",
          "1204:    focusFormControl(form, scope);",
          "1205:   } else {",
          "1206:    focusFirstInvalidControl(form);",
          "1207:   }",
          "1208:  }",
          "1209: }",
          "1214: export function isFocusedOnIntentButton(",
          "1215:  form: HTMLFormElement,",
          "1216:  intent: string,",
          "1217: ): boolean {",
          "1218:  const element = document.activeElement;",
          "1220:  return (",
          "1221:   isFieldElement(element) &&",
          "1222:   element.type === 'submit' &&",
          "1223:   element.form === form &&",
          "1224:   element.name === INTENT &&",
          "1225:   element.value === intent",
          "1226:  );",
          "1227: }",
          "",
          "---------------"
        ],
        "packages/conform-react/index.ts||packages/conform-react/index.ts": [
          "File: packages/conform-react/index.ts -> packages/conform-react/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export {",
          "3:  type FieldsetConstraint,",
          "4:  type Submission,",
          "5:  parse,",
          "7:  list,",
          "8:  validate,",
          "9:  requestIntent,",
          "",
          "[Removed Lines]",
          "2:  type FieldConfig,",
          "6:  validateConstraint,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: } from '@conform-to/dom';",
          "12: export {",
          "13:  type Fieldset,",
          "14:  type FieldsetConfig,",
          "15:  type FormConfig,",
          "16:  useForm,",
          "17:  useFieldset,",
          "18:  useFieldList,",
          "19:  useInputEvent,",
          "20: } from './hooks';",
          "21: export * as conform from './helpers';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  type FieldConfig,",
          "19:  validateConstraint,",
          "",
          "---------------"
        ],
        "playground/app/routes/validate-constraint.tsx||playground/app/routes/validate-constraint.tsx": [
          "File: playground/app/routes/validate-constraint.tsx -> playground/app/routes/validate-constraint.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { type LoaderArgs } from '@remix-run/node';",
          "4: import { Form, useLoaderData } from '@remix-run/react';",
          "5: import { useState } from 'react';",
          "",
          "[Removed Lines]",
          "1: import { validateConstraint } from '@conform-to/dom';",
          "2: import { type Submission, useForm } from '@conform-to/react';",
          "",
          "[Added Lines]",
          "1: import {",
          "2:  type Submission,",
          "3:  useForm,",
          "4:  validateConstraint,",
          "5: } from '@conform-to/react';",
          "",
          "---------------"
        ],
        "tests/integrations/validitystate.spec.ts||tests/conform-validitystate.spec.ts": [
          "File: tests/integrations/validitystate.spec.ts -> tests/conform-validitystate.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { type Page, test, expect } from '@playwright/test';",
          "4: async function setupField(page: Page, constraint: object, secret?: any) {",
          "5:  const playground = getPlayground(page);",
          "",
          "[Removed Lines]",
          "2: import { getPlayground } from '../helpers';",
          "",
          "[Added Lines]",
          "2: import { getPlayground } from './helpers';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d5912383bbd8ff1735618d0a6ff0c424308ecde",
      "candidate_info": {
        "commit_hash": "2d5912383bbd8ff1735618d0a6ff0c424308ecde",
        "repo": "edmundhung/conform",
        "commit_url": "https://github.com/edmundhung/conform/commit/2d5912383bbd8ff1735618d0a6ff0c424308ecde",
        "files": [
          "package.json",
          "packages/conform-dom/dom.ts",
          "packages/conform-dom/form.ts",
          "packages/conform-dom/formdata.ts",
          "packages/conform-dom/index.ts",
          "packages/conform-dom/submission.ts",
          "packages/conform-dom/util.ts",
          "packages/conform-react/context.tsx",
          "packages/conform-react/control.ts",
          "packages/conform-react/helpers.ts",
          "packages/conform-react/hooks.ts",
          "packages/conform-react/index.ts",
          "packages/conform-react/integrations.ts",
          "packages/conform-react/metadata.ts",
          "packages/conform-react/observer.ts",
          "packages/conform-react/util.ts",
          "packages/conform-zod/coercion.ts",
          "packages/conform-zod/index.ts",
          "packages/conform-zod/memorize.ts",
          "packages/conform-zod/parse.ts",
          "packages/conform-zod/resolve.ts",
          "playground/app/routes/api.ts",
          "playground/app/routes/experimental.tsx",
          "playground/package.json",
          "pnpm-lock.yaml"
        ],
        "message": "feat: v2 initial draft",
        "before_after_code_files": [
          "packages/conform-dom/dom.ts||packages/conform-dom/dom.ts",
          "packages/conform-dom/form.ts||packages/conform-dom/form.ts",
          "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts",
          "packages/conform-dom/index.ts||packages/conform-dom/index.ts",
          "packages/conform-dom/submission.ts||packages/conform-dom/submission.ts",
          "packages/conform-dom/util.ts||packages/conform-dom/util.ts",
          "packages/conform-react/context.tsx||packages/conform-react/context.tsx",
          "packages/conform-react/control.ts||packages/conform-react/control.ts",
          "packages/conform-react/helpers.ts||packages/conform-react/helpers.ts",
          "packages/conform-react/hooks.ts||packages/conform-react/hooks.ts",
          "packages/conform-react/index.ts||packages/conform-react/index.ts",
          "packages/conform-react/integrations.ts||packages/conform-react/integrations.ts",
          "packages/conform-react/metadata.ts||packages/conform-react/metadata.ts",
          "packages/conform-react/observer.ts||packages/conform-react/observer.ts",
          "packages/conform-react/util.ts||packages/conform-react/util.ts",
          "packages/conform-zod/coercion.ts||packages/conform-zod/coercion.ts",
          "packages/conform-zod/index.ts||packages/conform-zod/index.ts",
          "packages/conform-zod/memorize.ts||packages/conform-zod/memorize.ts",
          "packages/conform-zod/parse.ts||packages/conform-zod/parse.ts",
          "packages/conform-zod/resolve.ts||packages/conform-zod/resolve.ts",
          "playground/app/routes/api.ts||playground/app/routes/api.ts",
          "playground/app/routes/experimental.tsx||playground/app/routes/experimental.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts"
          ],
          "candidate": [
            "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/conform-dom/dom.ts||packages/conform-dom/dom.ts": [
          "File: packages/conform-dom/dom.ts -> packages/conform-dom/dom.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  return (",
          "46:  );",
          "47: }",
          "",
          "[Removed Lines]",
          "1: import { invariant } from './util';",
          "7: export type FieldElement =",
          "8:  | HTMLInputElement",
          "9:  | HTMLSelectElement",
          "10:  | HTMLTextAreaElement;",
          "16: export type FormControl = FieldElement | HTMLButtonElement;",
          "21: export type Submitter = HTMLInputElement | HTMLButtonElement;",
          "26: export function isFormControl(element: unknown): element is FormControl {",
          "28:   element instanceof Element &&",
          "29:   (element.tagName === 'INPUT' ||",
          "30:    element.tagName === 'SELECT' ||",
          "31:    element.tagName === 'TEXTAREA' ||",
          "32:    element.tagName === 'BUTTON')",
          "33:  );",
          "34: }",
          "40: export function isFieldElement(element: unknown): element is FieldElement {",
          "41:  return (",
          "42:   isFormControl(element) &&",
          "43:   element.type !== 'submit' &&",
          "44:   element.type !== 'button' &&",
          "45:   element.type !== 'reset'",
          "",
          "[Added Lines]",
          "8: export function isInput(",
          "9:  target: unknown,",
          "10:  formElement?: HTMLFormElement | null,",
          "11: ): target is HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement {",
          "13:   (target instanceof HTMLInputElement ||",
          "14:    target instanceof HTMLTextAreaElement ||",
          "15:    target instanceof HTMLSelectElement) &&",
          "16:   (formElement ? target.form === formElement : target.form !== null)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: export function getFormAction(event: SubmitEvent): string {",
          "54:  const form = event.target as HTMLFormElement;",
          "57:  return (",
          "58:   submitter?.getAttribute('formaction') ??",
          "",
          "[Removed Lines]",
          "55:  const submitter = event.submitter as Submitter | null;",
          "",
          "[Added Lines]",
          "26:  const submitter = event.submitter as",
          "27:   | HTMLInputElement",
          "28:   | HTMLButtonElement",
          "29:   | null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:  event: SubmitEvent,",
          "70: ): 'application/x-www-form-urlencoded' | 'multipart/form-data' {",
          "71:  const form = event.target as HTMLFormElement;",
          "73:  const encType = submitter?.getAttribute('formenctype') ?? form.enctype;",
          "75:  if (encType === 'multipart/form-data') {",
          "",
          "[Removed Lines]",
          "72:  const submitter = event.submitter as Submitter | null;",
          "",
          "[Added Lines]",
          "46:  const submitter = event.submitter as",
          "47:   | HTMLInputElement",
          "48:   | HTMLButtonElement",
          "49:   | null;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:  event: SubmitEvent,",
          "88: ): 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' {",
          "89:  const form = event.target as HTMLFormElement;",
          "91:  const method = (",
          "92:   submitter?.getAttribute('formmethod') ?? form.getAttribute('method')",
          "93:  )?.toUpperCase();",
          "",
          "[Removed Lines]",
          "90:  const submitter = event.submitter as Submitter | null;",
          "",
          "[Added Lines]",
          "67:  const submitter = event.submitter as",
          "68:   | HTMLInputElement",
          "69:   | HTMLButtonElement",
          "70:   | null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104: }",
          "113: ): void {",
          "121:  } else {",
          "129:  }",
          "130: }",
          "",
          "[Removed Lines]",
          "110: export function requestSubmit(",
          "111:  form: HTMLFormElement | null | undefined,",
          "112:  submitter: Submitter | null,",
          "114:  invariant(",
          "115:   !!form,",
          "116:   'Failed to submit the form. The element provided is null or undefined.',",
          "117:  );",
          "119:  if (typeof form.requestSubmit === 'function') {",
          "120:   form.requestSubmit(submitter);",
          "122:   const event = new SubmitEvent('submit', {",
          "123:    bubbles: true,",
          "124:    cancelable: true,",
          "125:    submitter,",
          "126:   });",
          "128:   form.dispatchEvent(event);",
          "",
          "[Added Lines]",
          "91: export function dispatchSubmitEvent(",
          "92:  formElement: HTMLFormElement,",
          "93:  submitter?: HTMLInputElement | HTMLButtonElement | null,",
          "95:  const event = new SubmitEvent('submit', {",
          "96:   bubbles: true,",
          "97:   cancelable: true,",
          "98:   submitter,",
          "99:  });",
          "101:  formElement.dispatchEvent(event);",
          "102: }",
          "110: export function requestSubmit(",
          "111:  formElement: HTMLFormElement,",
          "112:  submitter?: HTMLInputElement | HTMLButtonElement | null,",
          "113: ): void {",
          "114:  if (typeof formElement.requestSubmit === 'function') {",
          "115:   formElement.requestSubmit(submitter);",
          "117:   dispatchSubmitEvent(formElement, submitter);",
          "118:  }",
          "119: }",
          "127: export function requestIntent(",
          "128:  formElement: HTMLFormElement,",
          "129:  intentName: string,",
          "130:  intentValue: string,",
          "131: ): void {",
          "132:  const submitter = document.createElement('button');",
          "134:  submitter.name = intentName;",
          "135:  submitter.value = intentValue;",
          "136:  submitter.hidden = true;",
          "137:  submitter.formNoValidate = true;",
          "139:  formElement.appendChild(submitter);",
          "140:  requestSubmit(formElement, submitter);",
          "141:  formElement.removeChild(submitter);",
          "142: }",
          "151: export function getFormData(",
          "152:  form: HTMLFormElement,",
          "153:  submitter?: HTMLInputElement | HTMLButtonElement | null,",
          "154: ): FormData {",
          "155:  const payload = new FormData(form, submitter);",
          "157:  if (submitter && submitter.type === 'submit' && submitter.name !== '') {",
          "158:   const entries = payload.getAll(submitter.name);",
          "161:   if (!entries.includes(submitter.value)) {",
          "162:    payload.append(submitter.name, submitter.value);",
          "163:   }",
          "164:  }",
          "166:  return payload;",
          "167: }",
          "174: export function updateField(",
          "175:  element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement,",
          "176:  options: {",
          "177:   value?: string | string[];",
          "178:   defaultValue?: string | string[];",
          "179:   constraint?: {",
          "180:    required?: boolean;",
          "181:    minLength?: number;",
          "182:    maxLength?: number;",
          "183:    min?: string | number;",
          "184:    max?: string | number;",
          "185:    step?: string | number;",
          "186:    multiple?: boolean;",
          "187:    pattern?: string;",
          "188:   };",
          "189:  },",
          "190: ) {",
          "191:  const value =",
          "192:   typeof options.value === 'undefined'",
          "193:    ? null",
          "194:    : Array.isArray(options.value)",
          "195:     ? options.value",
          "196:     : [options.value];",
          "197:  const defaultValue =",
          "198:   typeof options.defaultValue === 'undefined'",
          "199:    ? null",
          "200:    : Array.isArray(options.defaultValue)",
          "201:     ? options.defaultValue",
          "202:     : [options.defaultValue];",
          "204:  if (options.constraint) {",
          "205:   const { constraint } = options;",
          "207:   if (",
          "208:    typeof constraint.required !== 'undefined' &&",
          "210:    !(",
          "211:     element.type === 'checkbox' &&",
          "212:     element.form?.elements.namedItem(element.name) instanceof RadioNodeList",
          "213:    )",
          "214:   ) {",
          "215:    element.required = constraint.required;",
          "216:   }",
          "218:   if (typeof constraint.multiple !== 'undefined' && 'multiple' in element) {",
          "219:    element.multiple = constraint.multiple;",
          "220:   }",
          "222:   if (typeof constraint.minLength !== 'undefined' && 'minLength' in element) {",
          "223:    element.minLength = constraint.minLength;",
          "224:   }",
          "226:   if (typeof constraint.maxLength !== 'undefined' && 'maxLength' in element) {",
          "227:    element.maxLength = constraint.maxLength;",
          "228:   }",
          "229:   if (typeof constraint.min !== 'undefined' && 'min' in element) {",
          "230:    element.min = `${constraint.min}`;",
          "231:   }",
          "233:   if (typeof constraint.max !== 'undefined' && 'max' in element) {",
          "234:    element.max = `${constraint.max}`;",
          "235:   }",
          "237:   if (typeof constraint.step !== 'undefined' && 'step' in element) {",
          "238:    element.step = `${constraint.step}`;",
          "239:   }",
          "241:   if (typeof constraint.pattern !== 'undefined' && 'pattern' in element) {",
          "242:    element.pattern = constraint.pattern;",
          "243:   }",
          "244:  }",
          "246:  if (element instanceof HTMLInputElement) {",
          "247:   switch (element.type) {",
          "248:    case 'checkbox':",
          "249:    case 'radio':",
          "250:     if (value) {",
          "251:      element.checked = value.includes(element.value);",
          "252:     }",
          "253:     if (defaultValue) {",
          "254:      element.defaultChecked = defaultValue.includes(element.value);",
          "255:     }",
          "256:     break;",
          "257:    case 'file':",
          "259:     break;",
          "260:    default:",
          "261:     if (value) {",
          "262:      element.value = value[0] ?? '';",
          "263:     }",
          "264:     if (defaultValue) {",
          "265:      element.defaultValue = defaultValue[0] ?? '';",
          "266:     }",
          "267:     break;",
          "268:   }",
          "269:  } else if (element instanceof HTMLSelectElement) {",
          "270:   for (const option of element.options) {",
          "271:    if (value) {",
          "272:     option.selected = value.includes(option.value);",
          "273:    }",
          "274:    if (defaultValue) {",
          "275:     option.defaultSelected = defaultValue.includes(option.value);",
          "276:    }",
          "277:   }",
          "278:  } else {",
          "279:   if (value) {",
          "280:    element.value = value[0] ?? '';",
          "281:   }",
          "282:   if (defaultValue) {",
          "283:    element.defaultValue = defaultValue[0] ?? '';",
          "284:   }",
          "",
          "---------------"
        ],
        "packages/conform-dom/form.ts||packages/conform-dom/form.ts": [
          "File: packages/conform-dom/form.ts -> packages/conform-dom/form.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/conform-dom/formdata.ts||packages/conform-dom/formdata.ts": [
          "File: packages/conform-dom/formdata.ts -> packages/conform-dom/formdata.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "8: export function getFormData(",
          "9:  form: HTMLFormElement,",
          "10:  submitter?: HTMLInputElement | HTMLButtonElement | null,",
          "11: ): FormData {",
          "12:  const payload = new FormData(form, submitter);",
          "14:  if (submitter && submitter.type === 'submit' && submitter.name !== '') {",
          "15:   const entries = payload.getAll(submitter.name);",
          "18:   if (!entries.includes(submitter.value)) {",
          "19:    payload.append(submitter.name, submitter.value);",
          "20:   }",
          "21:  }",
          "23:  return payload;",
          "24: }",
          "",
          "[Added Lines]",
          "1: import { isPlainObject } from './util';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: }",
          "133:  }",
          "134: }",
          "140:  let pointer = target;",
          "143:   if (typeof pointer === 'undefined' || pointer == null) {",
          "144:    break;",
          "145:   }",
          "",
          "[Removed Lines]",
          "84: export function formatName(prefix: string | undefined, path?: string | number) {",
          "85:  return typeof path !== 'undefined'",
          "86:   ? formatPaths([...getPaths(prefix), path])",
          "87:   : prefix ?? '';",
          "88: }",
          "93: export function isPrefix(name: string, prefix: string) {",
          "94:  const paths = getPaths(name);",
          "95:  const prefixPaths = getPaths(prefix);",
          "97:  return (",
          "98:   paths.length >= prefixPaths.length &&",
          "99:   prefixPaths.every((path, index) => paths[index] === path)",
          "100:  );",
          "101: }",
          "106: export function setValue(",
          "107:  target: Record<string, any>,",
          "108:  name: string,",
          "109:  valueFn: (currentValue?: unknown) => unknown,",
          "110: ) {",
          "111:  const paths = getPaths(name);",
          "112:  const length = paths.length;",
          "113:  const lastIndex = length - 1;",
          "115:  let index = -1;",
          "116:  let pointer = target;",
          "118:  while (pointer != null && ++index < length) {",
          "119:   const key = paths[index] as string | number;",
          "120:   const nextKey = paths[index + 1];",
          "121:   const newValue =",
          "122:    index != lastIndex",
          "123:     ? Object.prototype.hasOwnProperty.call(pointer, key) &&",
          "124:      pointer[key] !== null",
          "125:      ? pointer[key]",
          "126:      : typeof nextKey === 'number'",
          "127:       ? []",
          "128:       : {}",
          "129:     : valueFn(pointer[key]);",
          "131:   pointer[key] = newValue;",
          "132:   pointer = pointer[key];",
          "139: export function getValue(target: unknown, name: string): unknown {",
          "142:  for (const path of getPaths(name)) {",
          "",
          "[Added Lines]",
          "64: export function setValue<Data extends Record<string, any>>(",
          "65:  data: Data,",
          "66:  paths: Array<string | number>,",
          "67:  value: unknown | ((currentValue: unknown) => unknown),",
          "68:  handle: <Value>(value: Value) => Value = (i) => i,",
          "69: ): Data {",
          "70:  if (paths.length === 0) {",
          "71:   throw new Error('Setting value to the object root is not supported');",
          "72:  }",
          "75:  const remainingPaths = paths.slice();",
          "76:  const result = handle(data);",
          "78:  let target: any = result;",
          "80:  while (remainingPaths.length > 0) {",
          "81:   const path = remainingPaths.shift();",
          "82:   const nextPath = remainingPaths[0];",
          "84:   if (typeof path === 'undefined' || path in Object.prototype) {",
          "85:    break;",
          "86:   }",
          "88:   const nextValue = getValue(target, [path]);",
          "90:   if (typeof nextPath === 'undefined') {",
          "91:    target[path] = typeof value === 'function' ? value(nextValue) : value;",
          "92:   } else {",
          "93:    target[path] = handle(",
          "94:     nextValue ?? (typeof nextPath === 'number' ? [] : {}),",
          "95:    );",
          "96:   }",
          "98:   target = target[path];",
          "101:  return result;",
          "107: export function getValue(",
          "108:  target: unknown,",
          "109:  paths: Array<string | number>,",
          "110: ): unknown {",
          "113:  for (const path of paths) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153:   } else if (Array.isArray(pointer) && typeof path === 'number') {",
          "154:    pointer = pointer[path];",
          "155:   } else {",
          "157:   }",
          "158:  }",
          "160:  return pointer;",
          "161: }",
          "",
          "[Removed Lines]",
          "156:    return;",
          "166: export function isPlainObject(",
          "167:  obj: unknown,",
          "168: ): obj is Record<string | number | symbol, unknown> {",
          "169:  return (",
          "170:   !!obj &&",
          "171:   obj.constructor === Object &&",
          "172:   Object.getPrototypeOf(obj) === Object.prototype",
          "173:  );",
          "174: }",
          "179: export function isFile(obj: unknown): obj is File {",
          "181:  if (typeof File === 'undefined') {",
          "182:   return false;",
          "183:  }",
          "185:  return obj instanceof File;",
          "186: }",
          "191: export function normalize<Type extends Record<string, unknown>>(",
          "192:  value: Type,",
          "193:  acceptFile?: boolean,",
          "194: ): Type | undefined;",
          "195: export function normalize<Type extends Array<unknown>>(",
          "196:  value: Type,",
          "197:  acceptFile?: boolean,",
          "198: ): Type | undefined;",
          "199: export function normalize(",
          "200:  value: unknown,",
          "201:  acceptFile?: boolean,",
          "202: ): unknown | undefined;",
          "203: export function normalize<",
          "204:  Type extends Record<string, unknown> | Array<unknown>,",
          "205: >(",
          "206:  value: Type,",
          "207:  acceptFile = true,",
          "208: ): Record<string, unknown> | Array<unknown> | undefined {",
          "209:  if (isPlainObject(value)) {",
          "210:   const obj = Object.keys(value)",
          "211:    .sort()",
          "212:    .reduce<Record<string, unknown>>((result, key) => {",
          "213:     const data = normalize(value[key], acceptFile);",
          "215:     if (typeof data !== 'undefined') {",
          "216:      result[key] = data;",
          "217:     }",
          "219:     return result;",
          "220:    }, {});",
          "222:   if (Object.keys(obj).length === 0) {",
          "223:    return;",
          "224:   }",
          "226:   return obj;",
          "227:  }",
          "229:  if (Array.isArray(value)) {",
          "230:   if (value.length === 0) {",
          "231:    return undefined;",
          "232:   }",
          "234:   return value.map((item) => normalize(item, acceptFile));",
          "235:  }",
          "237:  if (",
          "238:   (typeof value === 'string' && value === '') ||",
          "239:   value === null ||",
          "240:   (isFile(value) && (!acceptFile || value.size === 0))",
          "241:  ) {",
          "242:   return;",
          "243:  }",
          "245:  return value;",
          "246: }",
          "251: export function flatten(",
          "252:  data: unknown,",
          "253:  options: {",
          "254:   resolve?: (data: unknown) => unknown;",
          "255:   prefix?: string;",
          "256:  } = {},",
          "257: ): Record<string, unknown> {",
          "258:  const result: Record<string, unknown> = {};",
          "259:  const resolve = options.resolve ?? ((data) => data);",
          "261:  function process(data: unknown, prefix: string) {",
          "262:   const value = normalize(resolve(data));",
          "264:   if (typeof value !== 'undefined') {",
          "265:    result[prefix] = value;",
          "266:   }",
          "268:   if (Array.isArray(data)) {",
          "269:    for (let i = 0; i < data.length; i++) {",
          "270:     process(data[i], `${prefix}[${i}]`);",
          "271:    }",
          "272:   } else if (isPlainObject(data)) {",
          "273:    for (const [key, value] of Object.entries(data)) {",
          "274:     process(value, prefix ? `${prefix}.${key}` : key);",
          "275:    }",
          "276:   }",
          "277:  }",
          "279:  if (data) {",
          "280:   process(data, options.prefix ?? '');",
          "281:  }",
          "283:  return result;",
          "284: }",
          "",
          "[Added Lines]",
          "127:    throw new Error(",
          "128:     `Failed to access the value; The path ${path} from ${name} is invalid`,",
          "129:    );",
          "",
          "---------------"
        ],
        "packages/conform-dom/index.ts||packages/conform-dom/index.ts": [
          "File: packages/conform-dom/index.ts -> packages/conform-dom/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export {",
          "17: export {",
          "18:  type Submission,",
          "25: } from './submission';",
          "",
          "[Removed Lines]",
          "2:  type Combine,",
          "3:  type Constraint,",
          "4:  type ControlButtonProps,",
          "5:  type FormId,",
          "6:  type FieldName,",
          "7:  type DefaultValue,",
          "8:  type FormValue,",
          "9:  type FormOptions,",
          "10:  type FormState,",
          "11:  type FormContext,",
          "12:  type SubscriptionSubject,",
          "13:  type SubscriptionScope,",
          "14:  createFormContext as unstable_createFormContext,",
          "15: } from './form';",
          "16: export { type FieldElement, isFieldElement } from './dom';",
          "19:  type SubmissionResult,",
          "20:  type Intent,",
          "21:  INTENT,",
          "22:  STATE,",
          "23:  serializeIntent,",
          "24:  parse,",
          "26: export { getPaths, formatPaths, isPrefix } from './formdata';",
          "",
          "[Added Lines]",
          "2:  isInput,",
          "3:  getFormData,",
          "4:  getFormAction,",
          "5:  getFormEncType,",
          "6:  getFormMethod,",
          "7:  dispatchSubmitEvent,",
          "8:  requestSubmit,",
          "9:  requestIntent,",
          "10:  updateField,",
          "11: } from './dom';",
          "14:  type FormValue,",
          "15:  type FormError,",
          "16:  DEFAULT_INTENT,",
          "17:  parseSubmission,",
          "18:  report,",
          "20: export { getPaths, formatPaths, getValue, setValue } from './formdata';",
          "21: export { isPlainObject } from './util';",
          "",
          "---------------"
        ],
        "packages/conform-dom/submission.ts||packages/conform-dom/submission.ts": [
          "File: packages/conform-dom/submission.ts -> packages/conform-dom/submission.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  | Entry",
          "29: };",
          "52: };",
          "90:  };",
          "99:   }",
          "111:  }",
          "114: }",
          "118:  options: {",
          "123:  },",
          "127:  options: {",
          "135:  },",
          "139:  options: {",
          "149:  },",
          "236:  return {",
          "367:  };",
          "574: }",
          "",
          "[Removed Lines]",
          "1: import type { DefaultValue, FieldName, FormValue } from './form';",
          "2: import {",
          "3:  normalize,",
          "4:  flatten,",
          "5:  isPlainObject,",
          "6:  setValue,",
          "7:  isPrefix,",
          "8:  getValue,",
          "9:  formatName,",
          "10: } from './formdata';",
          "11: import { invariant } from './util';",
          "13: export type SubmissionState = {",
          "14:  validated: Record<string, boolean>;",
          "15: };",
          "17: export type SubmissionPayload<Entry extends FormDataEntryValue> =",
          "19:  | SubmissionPayload<Entry>[]",
          "20:  | { [key: string]: SubmissionPayload<Entry> };",
          "22: export type SubmissionContext<Value = null, FormError = string[]> = {",
          "23:  intent: Intent | null;",
          "24:  payload: Record<string, SubmissionPayload<FormDataEntryValue>>;",
          "25:  fields: Set<string>;",
          "26:  value?: Value;",
          "27:  error?: Record<string, FormError | null> | null;",
          "28:  state?: SubmissionState;",
          "31: export type Submission<Schema, FormError = string[], FormValue = Schema> =",
          "32:  | {",
          "33:    status: 'success';",
          "34:    payload: Record<string, SubmissionPayload<FormDataEntryValue>>;",
          "35:    value: FormValue;",
          "36:    reply(options?: ReplyOptions<FormError>): SubmissionResult<FormError>;",
          "37:    }",
          "38:  | {",
          "39:    status: 'error' | undefined;",
          "40:    payload: Record<string, SubmissionPayload<FormDataEntryValue>>;",
          "41:    error: Record<string, FormError | null> | null;",
          "42:    reply(options?: ReplyOptions<FormError>): SubmissionResult<FormError>;",
          "43:    };",
          "45: export type SubmissionResult<FormError = string[]> = {",
          "46:  status?: 'error' | 'success';",
          "47:  intent?: Intent;",
          "48:  initialValue?: Record<string, SubmissionPayload<string>> | null;",
          "49:  fields?: string[];",
          "50:  error?: Record<string, FormError | null>;",
          "51:  state?: SubmissionState;",
          "54: export type ReplyOptions<FormError> =",
          "55:  | {",
          "56:    resetForm?: boolean;",
          "57:    }",
          "58:  | {",
          "59:    formErrors?: FormError;",
          "60:    fieldErrors?: Record<string, FormError>;",
          "61:    hideFields?: string[];",
          "62:    };",
          "67: export const INTENT = '__intent__';",
          "72: export const STATE = '__state__';",
          "74: export function getSubmissionContext(",
          "75:  body: FormData | URLSearchParams,",
          "76: ): SubmissionContext {",
          "77:  const intent = body.get(INTENT);",
          "78:  const state = body.get(STATE);",
          "80:  invariant(",
          "81:   (typeof intent === 'string' || intent === null) &&",
          "82:    (typeof state === 'string' || state === null),",
          "83:   `The input name \"${INTENT}\" and \"${STATE}\" are reserved by Conform. Please use another name for your input.`,",
          "84:  );",
          "86:  const context: SubmissionContext = {",
          "87:   payload: {},",
          "88:   fields: new Set(),",
          "89:   intent: getIntent(intent),",
          "92:  if (state) {",
          "93:   context.state = JSON.parse(state);",
          "94:  }",
          "96:  for (const [name, next] of body.entries()) {",
          "97:   if (name === INTENT || name === STATE) {",
          "98:    continue;",
          "101:   context.fields.add(name);",
          "102:   setValue(context.payload, name, (prev) => {",
          "103:    if (!prev) {",
          "104:     return next;",
          "105:    } else if (Array.isArray(prev)) {",
          "106:     return prev.concat(next);",
          "107:    } else {",
          "108:     return [prev, next];",
          "109:    }",
          "110:   });",
          "113:  return context;",
          "116: export function parse<FormValue, FormError>(",
          "117:  payload: FormData | URLSearchParams,",
          "119:   resolve: (",
          "120:    payload: Record<string, any>,",
          "121:    intent: Intent | null,",
          "122:   ) => { value?: FormValue; error?: Record<string, FormError | null> | null };",
          "124: ): Submission<FormValue, FormError>;",
          "125: export function parse<FormValue, FormError>(",
          "126:  payload: FormData | URLSearchParams,",
          "128:   resolve: (",
          "129:    payload: Record<string, any>,",
          "130:    intent: Intent | null,",
          "131:   ) => Promise<{",
          "132:    value?: FormValue;",
          "133:    error?: Record<string, FormError | null> | null;",
          "134:   }>;",
          "136: ): Promise<Submission<FormValue, FormError>>;",
          "137: export function parse<FormValue, FormError>(",
          "138:  payload: FormData | URLSearchParams,",
          "140:   resolve: (",
          "141:    payload: Record<string, any>,",
          "142:    intent: Intent | null,",
          "143:   ) =>",
          "144:    | { value?: FormValue; error?: Record<string, FormError | null> | null }",
          "145:    | Promise<{",
          "146:      value?: FormValue;",
          "147:      error?: Record<string, FormError | null> | null;",
          "148:      }>;",
          "150: ): Submission<FormValue, FormError> | Promise<Submission<FormValue, FormError>>;",
          "151: export function parse<FormValue, FormError>(",
          "152:  payload: FormData | URLSearchParams,",
          "153:  options: {",
          "154:   resolve: (",
          "155:    payload: Record<string, any>,",
          "156:    intent: Intent | null,",
          "157:   ) =>",
          "158:    | { value?: FormValue; error?: Record<string, FormError | null> | null }",
          "159:    | Promise<{",
          "160:      value?: FormValue;",
          "161:      error?: Record<string, FormError | null> | null;",
          "162:      }>;",
          "163:  },",
          "164: ):",
          "165:  | Submission<FormValue, FormError>",
          "166:  | Promise<Submission<FormValue, FormError>> {",
          "167:  const context = getSubmissionContext(payload);",
          "168:  const intent = context.intent;",
          "170:  if (intent) {",
          "171:   switch (intent.type) {",
          "172:    case 'update': {",
          "173:     const name = formatName(intent.payload.name, intent.payload.index);",
          "174:     const value = intent.payload.value;",
          "176:     if (typeof intent.payload.value !== 'undefined') {",
          "177:      if (name) {",
          "178:       setValue(context.payload, name, () => value);",
          "179:      } else {",
          "180:       context.payload = value;",
          "181:      }",
          "182:     }",
          "183:     break;",
          "184:    }",
          "185:    case 'reset': {",
          "186:     const name = formatName(intent.payload.name, intent.payload.index);",
          "188:     if (name) {",
          "189:      setValue(context.payload, name, () => undefined);",
          "190:     } else {",
          "191:      context.payload = {};",
          "192:     }",
          "193:     break;",
          "194:    }",
          "195:    case 'insert':",
          "196:    case 'remove':",
          "197:    case 'reorder': {",
          "198:     setListValue(context.payload, intent);",
          "199:     break;",
          "200:    }",
          "201:   }",
          "202:  }",
          "204:  const result = options.resolve(context.payload, intent);",
          "205:  const mergeResolveResult = (resolved: {",
          "206:   error?: Record<string, FormError | null> | null;",
          "207:   value?: FormValue;",
          "208:  }) =>",
          "209:   createSubmission({",
          "210:    ...context,",
          "211:    value: resolved.value,",
          "212:    error: resolved.error,",
          "213:   });",
          "215:  if (result instanceof Promise) {",
          "216:   return result.then(mergeResolveResult);",
          "217:  }",
          "219:  return mergeResolveResult(result);",
          "220: }",
          "222: export function createSubmission<FormValue, FormError>(",
          "223:  context: SubmissionContext<FormValue, FormError>,",
          "224: ): Submission<FormValue, FormError> {",
          "225:  if (context.intent || !context.value || context.error) {",
          "226:   return {",
          "227:    status: !context.intent ? 'error' : undefined,",
          "228:    payload: context.payload,",
          "229:    error: typeof context.error !== 'undefined' ? context.error : {},",
          "230:    reply(options) {",
          "231:     return replySubmission(context, options);",
          "232:    },",
          "233:   };",
          "234:  }",
          "237:   status: 'success',",
          "238:   payload: context.payload,",
          "239:   value: context.value,",
          "240:   reply(options) {",
          "241:    return replySubmission(context, options);",
          "242:   },",
          "243:  };",
          "244: }",
          "246: export function replySubmission<FormError>(",
          "247:  context: SubmissionContext<unknown, FormError>,",
          "248:  options: ReplyOptions<FormError> = {},",
          "249: ): SubmissionResult<FormError> {",
          "250:  if (",
          "251:   ('resetForm' in options && options.resetForm) ||",
          "252:   (context.intent?.type === 'reset' &&",
          "253:    (context.intent.payload.name ?? '') === '')",
          "254:  ) {",
          "255:   return { initialValue: null };",
          "256:  }",
          "258:  if ('hideFields' in options && options.hideFields) {",
          "259:   for (const name of options.hideFields) {",
          "260:    const value = getValue(context.payload, name);",
          "262:    if (typeof value !== 'undefined') {",
          "263:     setValue(context.payload, name, () => undefined);",
          "264:    }",
          "265:   }",
          "266:  }",
          "268:  const extraError =",
          "269:   'formErrors' in options || 'fieldErrors' in options",
          "270:    ? normalize<Record<string, FormError | null>>({",
          "271:      '': options.formErrors ?? null,",
          "272:      ...options.fieldErrors,",
          "273:     })",
          "274:    : null;",
          "275:  const error =",
          "276:   context.error || extraError",
          "277:    ? {",
          "278:      ...context.error,",
          "279:      ...extraError,",
          "280:     }",
          "281:    : undefined;",
          "283:  const initialValue =",
          "284:   (normalize(",
          "285:    context.payload,",
          "287:    typeof document !== 'undefined',",
          "291:   ) as Record<string, SubmissionPayload<string>>) ?? {};",
          "293:  return {",
          "294:   status: context.intent ? undefined : error ? 'error' : 'success',",
          "295:   intent: context.intent ? context.intent : undefined,",
          "296:   initialValue,",
          "297:   error,",
          "298:   state: context.state,",
          "299:   fields: Array.from(context.fields),",
          "300:  };",
          "301: }",
          "303: export type ValidateIntent<Schema = any> = {",
          "304:  type: 'validate';",
          "305:  payload: {",
          "306:   name?: FieldName<Schema>;",
          "307:  };",
          "308: };",
          "310: export type ResetIntent<Schema = any> = {",
          "311:  type: 'reset';",
          "312:  payload:",
          "313:   | {",
          "314:     name?: FieldName<Schema>;",
          "315:     index?: never;",
          "316:     }",
          "317:   | {",
          "318:     name: FieldName<Schema>;",
          "319:     index: Schema extends Array<unknown> ? number : never;",
          "320:     };",
          "321: };",
          "323: export type UpdateIntent<Schema = any> = {",
          "324:  type: 'update';",
          "325:  payload:",
          "326:   | {",
          "327:     name?: FieldName<Schema>;",
          "328:     index?: never;",
          "329:     value?: NonNullable<DefaultValue<Schema>>;",
          "330:     validated?: boolean;",
          "331:     }",
          "332:   | {",
          "333:     name: FieldName<Schema>;",
          "334:     index: Schema extends Array<unknown> ? number : never;",
          "335:     value?: Schema extends Array<infer Item>",
          "336:      ? NonNullable<DefaultValue<Item>>",
          "337:      : never;",
          "338:     validated?: boolean;",
          "339:     };",
          "340: };",
          "342: export type RemoveIntent<Schema = any> = {",
          "343:  type: 'remove';",
          "344:  payload: {",
          "345:   name: FieldName<Schema>;",
          "346:   index: number;",
          "347:  };",
          "348: };",
          "350: export type InsertIntent<Schema = any> = {",
          "351:  type: 'insert';",
          "352:  payload: {",
          "353:   name: FieldName<Schema>;",
          "354:   defaultValue?: Schema extends Array<infer Item>",
          "355:    ? DefaultValue<Item>",
          "356:    : never;",
          "357:   index?: number;",
          "358:  };",
          "359: };",
          "361: export type ReorderIntent<Schema = any> = {",
          "362:  type: 'reorder';",
          "363:  payload: {",
          "364:   name: FieldName<Schema>;",
          "365:   from: number;",
          "366:   to: number;",
          "368: };",
          "370: export type Intent<Schema = any> =",
          "371:  | ValidateIntent<Schema>",
          "372:  | ResetIntent<Schema>",
          "373:  | UpdateIntent<Schema>",
          "374:  | ReorderIntent<Schema>",
          "375:  | RemoveIntent<Schema>",
          "376:  | InsertIntent<Schema>;",
          "378: export function getIntent(",
          "379:  serializedIntent: string | null | undefined,",
          "380: ): Intent | null {",
          "381:  if (!serializedIntent) {",
          "382:   return null;",
          "383:  }",
          "385:  const control = JSON.parse(serializedIntent);",
          "387:  if (",
          "388:   typeof control.type !== 'string' ||",
          "389:   typeof control.payload === 'undefined'",
          "390:  ) {",
          "391:   throw new Error('Unknown form control intent');",
          "392:  }",
          "394:  return control;",
          "395: }",
          "397: export function serializeIntent<Schema>(intent: Intent<Schema>): string {",
          "398:  switch (intent.type) {",
          "399:   case 'insert':",
          "400:    return JSON.stringify({",
          "401:     type: intent.type,",
          "402:     payload: {",
          "403:      ...intent.payload,",
          "404:      defaultValue: serialize(intent.payload.defaultValue),",
          "405:     },",
          "406:    });",
          "407:   case 'update':",
          "408:    return JSON.stringify({",
          "409:     type: intent.type,",
          "410:     payload: {",
          "411:      ...intent.payload,",
          "412:      value: serialize(intent.payload.value),",
          "413:     },",
          "414:    });",
          "415:   default:",
          "416:    return JSON.stringify(intent);",
          "417:  }",
          "418: }",
          "420: export function updateList(",
          "421:  list: unknown,",
          "422:  intent: InsertIntent | RemoveIntent | ReorderIntent,",
          "423: ): void {",
          "424:  invariant(",
          "425:   Array.isArray(list),",
          "426:   `Failed to update list. The value is not an array.`,",
          "427:  );",
          "429:  switch (intent.type) {",
          "430:   case 'insert':",
          "431:    list.splice(",
          "432:     intent.payload.index ?? list.length,",
          "433:     0,",
          "434:     intent.payload.defaultValue,",
          "435:    );",
          "436:    break;",
          "437:   case 'remove':",
          "438:    list.splice(intent.payload.index, 1);",
          "439:    break;",
          "440:   case 'reorder':",
          "441:    list.splice(intent.payload.to, 0, ...list.splice(intent.payload.from, 1));",
          "442:    break;",
          "443:   default:",
          "444:    throw new Error('Unknown list intent received');",
          "445:  }",
          "446: }",
          "448: export function setListValue(",
          "449:  data: Record<string, unknown>,",
          "450:  intent: InsertIntent | RemoveIntent | ReorderIntent,",
          "451: ): void {",
          "452:  setValue(data, intent.payload.name, (value) => {",
          "453:   const list = value ?? [];",
          "455:   updateList(list, intent);",
          "457:   return list;",
          "458:  });",
          "459: }",
          "464: export const root = Symbol.for('root');",
          "466: export function setState(",
          "467:  state: Record<string, unknown>,",
          "468:  name: string,",
          "469:  valueFn: (value: unknown) => unknown,",
          "470: ): void {",
          "472:  const keys = Object.keys(state).sort((prev, next) =>",
          "473:   next.localeCompare(prev),",
          "474:  );",
          "475:  const target: Record<string, unknown> = {};",
          "477:  for (const key of keys) {",
          "478:   const value = state[key];",
          "480:   if (isPrefix(key, name) && key !== name) {",
          "481:    setValue(target, key, (currentValue) => {",
          "482:     if (typeof currentValue === 'undefined') {",
          "483:      return value;",
          "484:     }",
          "490:     currentValue[root] = value;",
          "492:     return currentValue;",
          "493:    });",
          "496:    delete state[key];",
          "497:   }",
          "498:  }",
          "500:  const result = valueFn(getValue(target, name));",
          "502:  Object.assign(",
          "503:   state,",
          "504:   flatten(result, {",
          "505:    resolve(data) {",
          "506:     if (isPlainObject(data) || Array.isArray(data)) {",
          "508:      return data[root] ?? null;",
          "509:     }",
          "511:     return data;",
          "512:    },",
          "513:    prefix: name,",
          "514:   }),",
          "515:  );",
          "516: }",
          "518: export function setListState(",
          "519:  state: Record<string, unknown>,",
          "520:  intent: InsertIntent | RemoveIntent | ReorderIntent,",
          "521:  getDefaultValue?: (defaultValue: any) => any,",
          "522: ): void {",
          "523:  setState(state, intent.payload.name, (value) => {",
          "524:   const list = value ?? [];",
          "526:   switch (intent.type) {",
          "527:    case 'insert':",
          "528:     updateList(list, {",
          "529:      type: intent.type,",
          "530:      payload: {",
          "531:       ...intent.payload,",
          "532:       defaultValue: getDefaultValue?.(intent.payload.defaultValue),",
          "533:      },",
          "534:     });",
          "535:     break;",
          "536:    default:",
          "537:     updateList(list, intent);",
          "538:     break;",
          "539:   }",
          "541:   return list;",
          "542:  });",
          "543: }",
          "545: export function serialize<Schema>(defaultValue: Schema): FormValue<Schema> {",
          "546:  if (isPlainObject(defaultValue)) {",
          "548:   return Object.entries(defaultValue).reduce<Record<string, unknown>>(",
          "549:    (result, [key, value]) => {",
          "550:     result[key] = serialize(value);",
          "551:     return result;",
          "552:    },",
          "553:    {},",
          "554:   );",
          "555:  } else if (Array.isArray(defaultValue)) {",
          "557:   return defaultValue.map(serialize);",
          "558:  } else if (defaultValue instanceof Date) {",
          "560:   return defaultValue.toISOString();",
          "561:  } else if (typeof defaultValue === 'boolean') {",
          "563:   return defaultValue ? 'on' : undefined;",
          "564:  } else if (",
          "565:   typeof defaultValue === 'number' ||",
          "566:   typeof defaultValue === 'bigint'",
          "567:  ) {",
          "569:   return defaultValue.toString();",
          "570:  } else {",
          "572:   return defaultValue ?? undefined;",
          "573:  }",
          "",
          "[Added Lines]",
          "1: import { setValue, getPaths } from './formdata';",
          "3: export type FormValue<Entry extends FormDataEntryValue = FormDataEntryValue> =",
          "5:  | FormValue<Entry>[]",
          "6:  | { [key: string]: FormValue<Entry> };",
          "8: export type FormError<Schema, ErrorShape> = {",
          "9:  formError: ErrorShape | null;",
          "10:  fieldError: Record<string, ErrorShape>;",
          "11:  '#schema'?: Schema;",
          "14: export type Submission<",
          "15:  Intent = string | null,",
          "16:  Schema = unknown,",
          "17:  ErrorShape = unknown,",
          "18:  FormValueType extends FormDataEntryValue = FormDataEntryValue,",
          "19: > = {",
          "20:  fields: string[];",
          "21:  value: Record<string, FormValue<FormValueType>> | null;",
          "22:  intent: Intent;",
          "23:  error?: FormError<Schema, ErrorShape> | null;",
          "26: export type Fallback<MainType, FallbackType> = unknown extends MainType",
          "27:  ? FallbackType",
          "28:  : MainType;",
          "30: export type SubmissionSchema<SubmissionType> =",
          "31:  SubmissionType extends Submission<any, infer Schema, any, any>",
          "32:   ? Schema",
          "33:   : unknown;",
          "35: export type SubmissionErrorShape<SubmissionType> =",
          "36:  SubmissionType extends Submission<any, any, infer ErrorShape, any>",
          "37:   ? ErrorShape",
          "38:   : unknown;",
          "43: export const DEFAULT_INTENT = '__intent__';",
          "45: export function parseSubmission(",
          "46:  formData: FormData | URLSearchParams,",
          "47:  options?: {",
          "48:   intentName: string;",
          "49:  },",
          "50: ): Submission<string | null> {",
          "51:  const { intentName = DEFAULT_INTENT } = options ?? {};",
          "52:  const initialValue: Record<string, any> = {};",
          "53:  const fields = new Set<string>();",
          "55:  for (const [name, value] of formData.entries()) {",
          "56:   if (name !== intentName) {",
          "57:    setValue(initialValue, getPaths(name), (currentValue: unknown) => {",
          "58:     if (typeof currentValue === 'undefined') {",
          "59:      return value;",
          "60:     } else if (Array.isArray(currentValue)) {",
          "61:      return currentValue.concat(value);",
          "62:     } else {",
          "63:      return [currentValue, value];",
          "64:     }",
          "65:    });",
          "66:    fields.add(name);",
          "67:   }",
          "68:  }",
          "70:  const submission: Submission<string | null> = {",
          "71:   value: initialValue,",
          "72:   fields: Array.from(fields),",
          "73:   intent: null,",
          "76:  if (intentName) {",
          "77:   const intent = formData.get(intentName);",
          "79:   if (typeof intent === 'string') {",
          "80:    submission.intent = intent;",
          "84:  return submission;",
          "87: export function report<",
          "88:  SubmissionType extends Submission<any, any, any>,",
          "89:  Schema,",
          "90:  ErrorShape = string[],",
          "91: >(",
          "92:  submission: SubmissionType,",
          "94:   error?: Partial<",
          "95:    FormError<",
          "96:     Fallback<SubmissionSchema<SubmissionType>, Schema>,",
          "97:     Fallback<SubmissionErrorShape<SubmissionType>, ErrorShape>",
          "98:    >",
          "99:   > | null;",
          "100:   keepFile: true;",
          "102: ): Submission<",
          "103:  SubmissionType extends Submission<infer Intent, any, any> ? Intent : unknown,",
          "104:  Fallback<SubmissionSchema<SubmissionType>, Schema>,",
          "105:  Fallback<SubmissionErrorShape<SubmissionType>, ErrorShape>,",
          "106:  SubmissionType extends Submission<any, any, any, infer FormValueType>",
          "107:   ? FormValueType",
          "108:   : FormDataEntryValue",
          "109: >;",
          "110: export function report<",
          "111:  SubmissionType extends Submission<any, any, any>,",
          "112:  Schema,",
          "113:  ErrorShape = string[],",
          "114: >(",
          "115:  submission: SubmissionType,",
          "117:   error?: Partial<",
          "118:    FormError<",
          "119:     Fallback<SubmissionSchema<SubmissionType>, Schema>,",
          "120:     Fallback<SubmissionErrorShape<SubmissionType>, ErrorShape>",
          "121:    >",
          "122:   > | null;",
          "123:   keepFile?: false;",
          "125: ): Submission<",
          "126:  SubmissionType extends Submission<infer Intent, any, any> ? Intent : unknown,",
          "127:  Fallback<SubmissionSchema<SubmissionType>, Schema>,",
          "128:  Fallback<SubmissionErrorShape<SubmissionType>, ErrorShape>,",
          "129:  string",
          "130: >;",
          "131: export function report<",
          "132:  SubmissionType extends Submission<any, any, any>,",
          "133:  Schema,",
          "134:  ErrorShape = string[],",
          "135: >(",
          "136:  submission: SubmissionType,",
          "138:   error?: Partial<",
          "139:    FormError<",
          "140:     Fallback<SubmissionSchema<SubmissionType>, Schema>,",
          "141:     Fallback<SubmissionErrorShape<SubmissionType>, ErrorShape>",
          "142:    >",
          "143:   > | null;",
          "144:   keepFile?: boolean;",
          "146: ): Submission<",
          "147:  SubmissionType extends Submission<infer Intent, any, any> ? Intent : unknown,",
          "148:  Fallback<SubmissionSchema<SubmissionType>, Schema>,",
          "149:  Fallback<SubmissionErrorShape<SubmissionType>, ErrorShape>,",
          "150:  SubmissionType extends Submission<any, any, any, infer FormValueType>",
          "151:   ? FormValueType",
          "152:   : FormDataEntryValue",
          "153: > {",
          "156:   value: options.keepFile ? submission.value : submission.value,",
          "157:   error:",
          "158:    typeof options.error === 'undefined'",
          "159:     ? submission.error",
          "160:     : options.error === null",
          "161:      ? null",
          "162:      : {",
          "163:        formError: options.error.formError ?? null,",
          "164:        fieldError: options.error.fieldError ?? {},",
          "165:       },",
          "166:   fields: submission.fields,",
          "167:   intent: submission.intent,",
          "",
          "---------------"
        ],
        "packages/conform-dom/util.ts||packages/conform-dom/util.ts": [
          "File: packages/conform-dom/util.ts -> packages/conform-dom/util.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  }",
          "8: }",
          "16: }",
          "",
          "[Removed Lines]",
          "10: export function generateId(): string {",
          "11:  return (Date.now() * Math.random()).toString(36);",
          "12: }",
          "14: export function clone<Data>(data: Data): Data {",
          "15:  return JSON.parse(JSON.stringify(data));",
          "",
          "[Added Lines]",
          "13: export function isPlainObject(",
          "14:  obj: unknown,",
          "15: ): obj is Record<string | number | symbol, unknown> {",
          "16:  return (",
          "17:   !!obj &&",
          "18:   obj.constructor === Object &&",
          "19:   Object.getPrototypeOf(obj) === Object.prototype",
          "20:  );",
          "",
          "---------------"
        ],
        "packages/conform-react/context.tsx||packages/conform-react/context.tsx": [
          "File: packages/conform-react/context.tsx -> packages/conform-react/context.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/conform-react/control.ts||packages/conform-react/control.ts": [
          "File: packages/conform-react/control.ts -> packages/conform-react/control.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { FormError, FormValue, Submission } from 'conform-dom';",
          "2: import {",
          "3:  isInput,",
          "4:  formatPaths,",
          "5:  getPaths,",
          "6:  getValue,",
          "7:  isPlainObject,",
          "8:  setValue,",
          "9:  updateField,",
          "10: } from 'conform-dom';",
          "11: import { getDefaultValue, defaultSerialize } from './metadata';",
          "12: import {",
          "13:  addItems,",
          "14:  configureListIndexUpdate,",
          "15:  formatName,",
          "16:  getList,",
          "17:  isNonNullable,",
          "18:  isNumber,",
          "19:  isOptionalNumber,",
          "20:  isOptionalString,",
          "21:  isString,",
          "22:  mapItems,",
          "23:  deepEqual,",
          "24:  flatten,",
          "25:  isPrefix,",
          "26:  mapKeys,",
          "27:  mergeObjects,",
          "28:  shallowClone,",
          "29:  updateObject,",
          "30: } from './util';",
          "32: export type DefaultValue<Schema> = Schema extends",
          "33:  | string",
          "34:  | number",
          "35:  | boolean",
          "36:  | Date",
          "37:  | File",
          "38:  | bigint",
          "39:  | null",
          "40:  | undefined",
          "41:  ? Schema | null | undefined",
          "42:  : Schema extends Array<infer Item> | null | undefined",
          "43:   ? Array<DefaultValue<Item>> | null | undefined",
          "44:   : Schema extends Record<string, any> | null | undefined",
          "45:    ? { [Key in keyof Schema]?: DefaultValue<Schema[Key]> } | null | undefined",
          "46:    : unknown;",
          "48: export type FormState<",
          "49:  Schema,",
          "50:  ErrorShape,",
          "51:  State extends Record<string, unknown> = {},",
          "52: > = {",
          "53:  defaultValue: DefaultValue<Schema> | null;",
          "54:  serverError: FormError<Schema, ErrorShape> | null;",
          "55:  clientError: FormError<Schema, ErrorShape> | null;",
          "56:  initialValue: Record<string, FormValue>;",
          "57:  submittedValue: Record<string, FormValue> | null;",
          "58:  touchedFields: string[];",
          "59:  keys: Record<string, string>;",
          "60: } & State;",
          "62: export function generateKey(): string {",
          "63:  return Math.floor(Date.now() * Math.random()).toString(36);",
          "64: }",
          "66: export function initializeElement(",
          "67:  element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement,",
          "68:  config: {",
          "69:   initialValue: Record<string, unknown>;",
          "70:   isResetting?: boolean;",
          "71:  },",
          "72: ): void {",
          "74:  if (!config.isResetting && element.dataset.conform) {",
          "75:   return;",
          "76:  }",
          "78:  const defaultValue = getDefaultValue(config.initialValue, element.name);",
          "80:  updateField(element, {",
          "81:   defaultValue,",
          "82:   value: !config.isResetting ? defaultValue : undefined,",
          "83:  });",
          "85:  element.dataset.conform = generateKey();",
          "86: }",
          "88: export function getKeys(",
          "89:  defaultValue: unknown,",
          "90:  prevkeys: Record<string, string> = {},",
          "91:  prefix: string = '',",
          "92: ): Record<string, string> {",
          "93:  const arrayByName = flatten(",
          "94:   defaultValue,",
          "95:   (value) => (Array.isArray(value) ? value : null),",
          "96:   prefix,",
          "97:  );",
          "98:  const result = Object.entries(arrayByName).reduce<Record<string, string>>(",
          "99:   (result, [name, array]) => {",
          "100:    const paths = getPaths(name);",
          "102:    for (let i = 0; i < array.length; i++) {",
          "103:     result[formatPaths(paths.concat(i))] = generateKey();",
          "104:    }",
          "106:    return result;",
          "107:   },",
          "108:   prefix",
          "109:    ? mapKeys(prevkeys, (key) => (!isPrefix(key, prefix) ? key : null))",
          "110:    : prevkeys,",
          "111:  );",
          "113:  return result;",
          "114: }",
          "116: export function modify<Data>(",
          "117:  data: Record<string, Data>,",
          "118:  name: string,",
          "119:  value: Data | Record<string, Data>,",
          "120:  overwrite = true,",
          "121: ): Record<string, Data> {",
          "122:  if (name === '') {",
          "123:   if (!isPlainObject(value)) {",
          "124:    throw new Error('The value must be an object');",
          "125:   }",
          "127:   return mergeObjects(data, value, overwrite);",
          "128:  }",
          "130:  const paths = getPaths(name);",
          "131:  const prevValue = getValue(data, paths);",
          "132:  const nextValue =",
          "133:   isPlainObject(prevValue) && isPlainObject(value)",
          "134:    ? mergeObjects(prevValue, value, overwrite)",
          "135:    : value;",
          "137:  if (deepEqual(prevValue, nextValue)) {",
          "138:   return data;",
          "139:  }",
          "141:  return setValue(data, paths, nextValue, shallowClone);",
          "142: }",
          "144: export type UnknownIntent = {",
          "145:  type: string;",
          "146:  payload?: unknown;",
          "147: };",
          "149: export type FormIntentHandler<",
          "150:  Intent extends UnknownIntent | null,",
          "151:  AdditionalState extends {} = {},",
          "152: > = {",
          "153:  isApplicable(intent: UnknownIntent | null): boolean;",
          "154:  updateState<Schema, ErrorShape>(",
          "155:   state: FormState<Schema, ErrorShape, AdditionalState>,",
          "156:   ctx: {",
          "157:    type: 'server' | 'client';",
          "158:    result: Submission<Intent, Schema, ErrorShape>;",
          "159:    reset: () => FormState<Schema, ErrorShape, AdditionalState>;",
          "160:   },",
          "161:  ): FormState<Schema, ErrorShape, AdditionalState>;",
          "162:  updateValue?: (",
          "163:   value: Record<string, FormValue>,",
          "164:   intent: Intent,",
          "165:  ) => Record<string, FormValue> | null;",
          "166:  sideEffect?: <Schema, ErrorShape>(",
          "167:   formElement: HTMLFormElement,",
          "168:   ctx: {",
          "169:    intent: Intent;",
          "170:    state: FormState<Schema, ErrorShape, AdditionalState>;",
          "171:   },",
          "172:  ) => void;",
          "173: };",
          "175: function getFields(submission: Submission<UnknownIntent | null>): string[] {",
          "176:  const fields = submission.fields;",
          "180:  if (submission.error) {",
          "181:   for (const name of Object.keys(submission.error.fieldError)) {",
          "184:    if (fields.find((field) => name !== field && isPrefix(name, field))) {",
          "185:     continue;",
          "186:    }",
          "189:    if (fields.every((field) => !isPrefix(field, name))) {",
          "190:     fields.push(name);",
          "191:    }",
          "192:   }",
          "193:  }",
          "195:  return fields;",
          "196: }",
          "198: export const validateIntentHandler: FormIntentHandler<{",
          "199:  type: 'validate';",
          "200:  payload?: string;",
          "201: } | null> = {",
          "202:  isApplicable(intent) {",
          "203:   return (",
          "204:    intent !== null &&",
          "205:    intent.type === 'validate' &&",
          "206:    isOptionalString(intent.payload)",
          "207:   );",
          "208:  },",
          "209:  updateState(state, { result }) {",
          "210:   const name = result.intent?.payload ?? '';",
          "212:   if (name === '') {",
          "213:    const fields = getFields(result);",
          "215:    return {",
          "216:     ...state,",
          "217:     touchedFields: deepEqual(state.touchedFields, fields)",
          "218:      ? state.touchedFields",
          "219:      : fields,",
          "220:    };",
          "221:   }",
          "223:   if (state.touchedFields.includes(name)) {",
          "224:    return state;",
          "225:   }",
          "227:   return {",
          "228:    ...state,",
          "229:    touchedFields: state.touchedFields.concat(name),",
          "230:   };",
          "231:  },",
          "232: };",
          "234: export const resetIntentHandler: FormIntentHandler<{ type: 'reset' }> = {",
          "235:  isApplicable(intent) {",
          "236:   return intent === null || intent.type === 'reset';",
          "237:  },",
          "238:  updateState(_, { reset }) {",
          "239:   return reset();",
          "240:  },",
          "241:  updateValue() {",
          "242:   return null;",
          "243:  },",
          "244:  sideEffect(formElement) {",
          "253:   formElement.reset();",
          "254:  },",
          "255: };",
          "257: export const updateIntentHandler: FormIntentHandler<{",
          "258:  type: 'update';",
          "259:  payload: {",
          "260:   name?: string;",
          "261:   index?: number;",
          "262:   value: FormValue<string>;",
          "263:  };",
          "264: }> = {",
          "265:  isApplicable(intent) {",
          "266:   return (",
          "267:    intent !== null &&",
          "268:    intent.type === 'update' &&",
          "269:    isPlainObject(intent.payload) &&",
          "270:    isOptionalString(intent.payload.name) &&",
          "271:    isNonNullable(intent.payload.value) &&",
          "272:    isOptionalNumber(intent.payload.index)",
          "273:   );",
          "274:  },",
          "275:  updateState(state, { type, result }) {",
          "276:   if (type === 'server') {",
          "277:    return state;",
          "278:   }",
          "280:   const intent = result.intent;",
          "281:   const initialValue = modify(",
          "282:    state.initialValue,",
          "283:    formatName(intent.payload.name, intent.payload.index),",
          "284:    intent.payload.value,",
          "285:    false,",
          "286:   );",
          "288:   if (state.initialValue === initialValue) {",
          "289:    return state;",
          "290:   }",
          "292:   return {",
          "293:    ...state,",
          "294:    initialValue,",
          "295:   };",
          "296:  },",
          "297:  updateValue(value, intent) {",
          "298:   return modify(",
          "299:    value,",
          "300:    formatName(intent.payload.name, intent.payload.index),",
          "301:    intent.payload.value,",
          "302:   );",
          "303:  },",
          "304:  sideEffect(formElement, { intent }) {",
          "305:   const flattenedValue = flatten(",
          "306:    intent.payload.value,",
          "307:    (value) => value,",
          "308:    formatName(intent.payload.name, intent.payload.index),",
          "309:   );",
          "311:   for (const element of formElement.elements) {",
          "312:    if (isInput(element)) {",
          "313:     updateField(element, {",
          "314:      value: defaultSerialize(flattenedValue[element.name]),",
          "315:     });",
          "318:     element.dataset.conform = generateKey();",
          "319:    }",
          "320:   }",
          "321:  },",
          "322: };",
          "324: export const listIntentHandler: FormIntentHandler<",
          "325:  | {",
          "326:    type: 'insert';",
          "327:    payload: {",
          "328:     name: string;",
          "329:     index?: number;",
          "330:     defaultValue?: unknown;",
          "331:    };",
          "332:    }",
          "333:  | {",
          "334:    type: 'remove';",
          "335:    payload: {",
          "336:     name: string;",
          "337:     index: number;",
          "338:    };",
          "339:    }",
          "340:  | {",
          "341:    type: 'reorder';",
          "342:    payload: {",
          "343:     name: string;",
          "344:     from: number;",
          "345:     to: number;",
          "346:    };",
          "347:    }",
          "348: > = {",
          "349:  isApplicable(intent) {",
          "350:   if (intent) {",
          "351:    switch (intent.type) {",
          "352:     case 'insert':",
          "353:      return (",
          "354:       isPlainObject(intent.payload) &&",
          "355:       isString(intent.payload.name) &&",
          "356:       isOptionalNumber(intent.payload.index)",
          "357:      );",
          "358:     case 'remove':",
          "359:      return (",
          "360:       isPlainObject(intent.payload) &&",
          "361:       isString(intent.payload.name) &&",
          "362:       isNumber(intent.payload.index)",
          "363:      );",
          "364:     case 'reorder':",
          "365:      return (",
          "366:       isPlainObject(intent.payload) &&",
          "367:       isString(intent.payload.name) &&",
          "368:       isNumber(intent.payload.from) &&",
          "369:       isNumber(intent.payload.to)",
          "370:      );",
          "371:    }",
          "372:   }",
          "374:   return false;",
          "375:  },",
          "376:  updateState(state, { type, result }) {",
          "377:   const intent = result.intent;",
          "379:   switch (intent.type) {",
          "380:    case 'insert': {",
          "381:     const list = getList(state.initialValue, intent.payload.name);",
          "382:     const index = intent.payload.index ?? list.length;",
          "383:     const updateListIndex = configureListIndexUpdate(",
          "384:      intent.payload.name,",
          "385:      (currentIndex) =>",
          "386:       index <= currentIndex ? currentIndex + 1 : currentIndex,",
          "387:     );",
          "388:     const touchedFields = addItems(",
          "389:      mapItems(state.touchedFields, updateListIndex),",
          "390:      [intent.payload.name],",
          "391:     );",
          "393:     if (type === 'server') {",
          "394:      return {",
          "395:       ...state,",
          "396:       touchedFields,",
          "397:      };",
          "398:     }",
          "400:     list.splice(index, 0, intent.payload.defaultValue);",
          "402:     const itemName = formatName(intent.payload.name, index);",
          "404:     return {",
          "405:      ...state,",
          "406:      keys: {",
          "407:       ...getKeys(",
          "408:        intent.payload.defaultValue,",
          "409:        mapKeys(state.keys, updateListIndex),",
          "410:        itemName,",
          "411:       ),",
          "412:       [itemName]: generateKey(),",
          "413:      },",
          "414:      initialValue: modify(",
          "415:       state.initialValue,",
          "416:       intent.payload.name,",
          "417:       list,",
          "418:       false,",
          "419:      ),",
          "420:      touchedFields,",
          "421:     };",
          "422:    }",
          "423:    case 'remove': {",
          "424:     const list = getList(state.initialValue, intent.payload.name);",
          "425:     const updateListIndex = configureListIndexUpdate(",
          "426:      intent.payload.name,",
          "427:      (currentIndex) => {",
          "428:       if (intent.payload.index === currentIndex) {",
          "429:        return null;",
          "430:       }",
          "432:       return intent.payload.index < currentIndex",
          "433:        ? currentIndex - 1",
          "434:        : currentIndex;",
          "435:      },",
          "436:     );",
          "437:     const touchedFields = addItems(",
          "438:      mapItems(state.touchedFields, updateListIndex),",
          "439:      [intent.payload.name],",
          "440:     );",
          "442:     if (type === 'server') {",
          "443:      return {",
          "444:       ...state,",
          "445:       touchedFields,",
          "446:      };",
          "447:     }",
          "449:     list.splice(intent.payload.index, 1);",
          "451:     return {",
          "452:      ...state,",
          "453:      keys: mapKeys(state.keys, updateListIndex),",
          "454:      initialValue: modify(",
          "455:       state.initialValue,",
          "456:       intent.payload.name,",
          "457:       list,",
          "458:       false,",
          "459:      ),",
          "460:      touchedFields,",
          "461:     };",
          "462:    }",
          "463:    case 'reorder': {",
          "464:     const list = getList(state.initialValue, intent.payload.name);",
          "465:     const updateListIndex = configureListIndexUpdate(",
          "466:      intent.payload.name,",
          "467:      (currentIndex) => {",
          "468:       if (intent.payload.from === intent.payload.to) {",
          "469:        return currentIndex;",
          "470:       }",
          "472:       if (currentIndex === intent.payload.from) {",
          "473:        return intent.payload.to;",
          "474:       }",
          "476:       if (intent.payload.from < intent.payload.to) {",
          "477:        return currentIndex > intent.payload.from &&",
          "478:         currentIndex <= intent.payload.to",
          "479:         ? currentIndex - 1",
          "480:         : currentIndex;",
          "481:       }",
          "483:       return currentIndex >= intent.payload.to &&",
          "484:        currentIndex < intent.payload.from",
          "485:        ? currentIndex + 1",
          "486:        : currentIndex;",
          "487:      },",
          "488:     );",
          "489:     const touchedFields = addItems(",
          "490:      mapItems(state.touchedFields, updateListIndex),",
          "491:      [intent.payload.name],",
          "492:     );",
          "494:     if (type === 'server') {",
          "495:      return {",
          "496:       ...state,",
          "497:       touchedFields,",
          "498:      };",
          "499:     }",
          "501:     list.splice(",
          "502:      intent.payload.to,",
          "503:      0,",
          "504:      ...list.splice(intent.payload.from, 1),",
          "505:     );",
          "507:     return {",
          "508:      ...state,",
          "509:      keys: mapKeys(state.keys, updateListIndex),",
          "510:      initialValue: modify(",
          "511:       state.initialValue,",
          "512:       intent.payload.name,",
          "513:       list,",
          "514:       false,",
          "515:      ),",
          "516:      touchedFields,",
          "517:     };",
          "518:    }",
          "519:   }",
          "520:  },",
          "521:  updateValue(value, intent) {",
          "522:   switch (intent.type) {",
          "523:    case 'insert': {",
          "524:     const list = getList(value, intent.payload.name);",
          "525:     list.splice(",
          "526:      intent.payload.index ?? list.length,",
          "527:      0,",
          "528:      intent.payload.defaultValue,",
          "529:     );",
          "531:     return modify(value, intent.payload.name, list);",
          "532:    }",
          "533:    case 'remove': {",
          "534:     const list = getList(value, intent.payload.name);",
          "535:     list.splice(intent.payload.index, 1);",
          "536:     return modify(value, intent.payload.name, list);",
          "537:    }",
          "538:    case 'reorder': {",
          "539:     const list = getList(value, intent.payload.name);",
          "540:     list.splice(",
          "541:      intent.payload.to,",
          "542:      0,",
          "543:      ...list.splice(intent.payload.from, 1),",
          "544:     );",
          "545:     return modify(value, intent.payload.name, list);",
          "546:    }",
          "547:   }",
          "548:  },",
          "549: };",
          "551: export function serializeIntent(intent: UnknownIntent): string {",
          "552:  if (!intent.payload) {",
          "553:   return intent.type;",
          "554:  }",
          "556:  return [intent.type, JSON.stringify(intent.payload)].join('/');",
          "557: }",
          "559: export function deserializeIntent(value: string): UnknownIntent {",
          "560:  const [type = value, stringifiedPayload] = value.split('/');",
          "562:  let payload = stringifiedPayload;",
          "564:  if (stringifiedPayload) {",
          "565:   try {",
          "566:    payload = JSON.parse(stringifiedPayload);",
          "567:   } catch {",
          "569:   }",
          "570:  }",
          "572:  return {",
          "573:   type,",
          "574:   payload,",
          "575:  };",
          "576: }",
          "578: export type FormControlIntent<Control extends FormControl<any>> =",
          "579:  Control extends FormControl<infer Intent, any> ? Intent : never;",
          "581: export type FormControlAdditionalState<Control extends FormControl<any>> =",
          "582:  Control extends FormControl<any, infer AdditionalState>",
          "583:   ? AdditionalState",
          "584:   : never;",
          "586: export type FormControl<",
          "587:  Intent extends UnknownIntent,",
          "588:  AdditionalState extends {} = {},",
          "589: > = {",
          "590:  initializeState<Schema, ErrorShape>(options: {",
          "591:   result?: Submission<UnknownIntent | null, Schema, ErrorShape> | null;",
          "592:   defaultValue?: DefaultValue<Schema>;",
          "593:  }): FormState<Schema, ErrorShape, AdditionalState>;",
          "594:  updateState<Schema, ErrorShape>(",
          "595:   state: FormState<Schema, ErrorShape, AdditionalState>,",
          "596:   ctx: {",
          "597:    type: 'server' | 'client';",
          "598:    result: Submission<UnknownIntent | null, Schema, ErrorShape>;",
          "599:    reset: () => FormState<Schema, ErrorShape, AdditionalState>;",
          "600:   },",
          "601:  ): FormState<Schema, ErrorShape, AdditionalState>;",
          "602:  serializeIntent(intent: UnknownIntent): string;",
          "603:  deserializeIntent(value: string): UnknownIntent;",
          "604:  parseIntent(intent: UnknownIntent): Intent | null;",
          "605:  updateValue(",
          "606:   value: Record<string, FormValue>,",
          "607:   intent: Intent,",
          "608:  ): Record<string, FormValue> | null;",
          "609:  hasSideEffect(intent: Intent): boolean;",
          "610:  applySideEffect<Schema, ErrorShape>(",
          "611:   formElement: HTMLFormElement,",
          "612:   intent: Intent,",
          "613:   state: FormState<Schema, ErrorShape, AdditionalState>,",
          "614:  ): void;",
          "615: };",
          "617: export function createFormControl<",
          "618:  Intent extends UnknownIntent,",
          "619:  AdditionalState extends Record<string, unknown> = {},",
          "620: >(",
          "621:  configure: () => FormControl<Intent, AdditionalState>,",
          "622: ): FormControl<Intent, AdditionalState> {",
          "623:  return configure();",
          "624: }",
          "626: export type DefaultFormIntent =",
          "627:  | {",
          "628:    type: 'validate';",
          "629:    payload?: string;",
          "630:    }",
          "631:  | {",
          "632:    type: 'update';",
          "633:    payload: {",
          "634:     name?: string;",
          "635:     index?: number;",
          "636:     value: FormValue<string>;",
          "637:    };",
          "638:    }",
          "639:  | {",
          "640:    type: 'reset';",
          "641:    }",
          "642:  | {",
          "643:    type: 'insert';",
          "644:    payload: {",
          "645:     name: string;",
          "646:     index?: number;",
          "647:     defaultValue?: unknown;",
          "648:    };",
          "649:    }",
          "650:  | {",
          "651:    type: 'remove';",
          "652:    payload: {",
          "653:     name: string;",
          "654:     index: number;",
          "655:    };",
          "656:    }",
          "657:  | {",
          "658:    type: 'reorder';",
          "659:    payload: {",
          "660:     name: string;",
          "661:     from: number;",
          "662:     to: number;",
          "663:    };",
          "664:    };",
          "666: export function applyIntent<Schema, ErrorShape>(",
          "667:  submission:",
          "668:   | Submission<string | null>",
          "669:   | Submission<string | null, Schema, ErrorShape>,",
          "670:  options?: {",
          "671:   control?: undefined;",
          "672:   pendingIntents?: Array<FormControlIntent<typeof defaultFormControl>>;",
          "673:  },",
          "674: ): Submission<",
          "675:  FormControlIntent<typeof defaultFormControl> | null,",
          "676:  Schema,",
          "677:  ErrorShape",
          "678: >;",
          "679: export function applyIntent<Intent extends UnknownIntent, Schema, ErrorShape>(",
          "680:  submission:",
          "681:   | Submission<string | null>",
          "682:   | Submission<string | null, Schema, ErrorShape>,",
          "683:  options: {",
          "684:   control: FormControl<Intent, any>;",
          "685:   pendingIntents?: Array<Intent>;",
          "686:  },",
          "687: ): Submission<Intent | null, Schema, ErrorShape>;",
          "688: export function applyIntent<Intent extends UnknownIntent, Schema, ErrorShape>(",
          "689:  submission:",
          "690:   | Submission<string | null>",
          "691:   | Submission<string | null, Schema, ErrorShape>,",
          "692:  options?: {",
          "693:   control?: FormControl<",
          "694:    Intent | FormControlIntent<typeof defaultFormControl>,",
          "695:    any",
          "696:   >;",
          "697:   pendingIntents?: Array<",
          "698:    Intent | FormControlIntent<typeof defaultFormControl>",
          "699:   >;",
          "700:  },",
          "701: ): Submission<",
          "702:  Intent | FormControlIntent<typeof defaultFormControl> | null,",
          "703:  Schema,",
          "704:  ErrorShape",
          "705: > {",
          "706:  const { control = defaultFormControl, pendingIntents = [] } = options ?? {};",
          "708:  const unknownIntent = submission.intent",
          "709:   ? control.deserializeIntent(submission.intent)",
          "710:   : null;",
          "711:  const intent = unknownIntent ? control.parseIntent(unknownIntent) : null;",
          "713:  let value: Record<string, FormValue> | null = submission.value;",
          "715:  for (const pendingIntent of pendingIntents.concat(intent ?? [])) {",
          "716:   if (value === null) {",
          "717:    break;",
          "718:   }",
          "720:   value = control.updateValue(value, pendingIntent);",
          "721:  }",
          "723:  return {",
          "724:   ...submission,",
          "725:   error: undefined,",
          "726:   value,",
          "727:   intent,",
          "728:  };",
          "729: }",
          "731: export const defaultFormControl = createFormControl<DefaultFormIntent>(() => {",
          "732:  const intentHandlers: Array<FormIntentHandler<any>> = [",
          "733:   validateIntentHandler,",
          "734:   resetIntentHandler,",
          "735:   updateIntentHandler,",
          "736:   listIntentHandler,",
          "737:  ];",
          "738:  return {",
          "739:   initializeState<Schema, ErrorShape>({",
          "740:    defaultValue,",
          "741:    result,",
          "742:   }: {",
          "743:    defaultValue?: DefaultValue<Schema>;",
          "744:    result?: Submission<DefaultFormIntent | null, Schema, ErrorShape>;",
          "745:   }) {",
          "746:    const initialValue = result?.value ?? defaultValue ?? {};",
          "748:    let state: FormState<Schema, ErrorShape> = {",
          "749:     keys: getKeys(initialValue),",
          "750:     defaultValue: defaultValue ?? null,",
          "751:     initialValue: initialValue,",
          "752:     submittedValue: result?.value ?? null,",
          "753:     serverError: result?.error ?? null,",
          "754:     clientError: null,",
          "755:     touchedFields: [],",
          "756:    };",
          "758:    if (!result) {",
          "759:     return state;",
          "760:    }",
          "762:    for (const handler of intentHandlers) {",
          "763:     if (handler.isApplicable(result.intent)) {",
          "764:      state = handler.updateState(state, {",
          "765:       type: 'server',",
          "766:       result,",
          "767:       reset: () => state,",
          "768:      });",
          "769:     }",
          "770:    }",
          "772:    return state;",
          "773:   },",
          "774:   updateState(state, { type, result, reset }) {",
          "775:    let newState = updateObject(state, {",
          "776:     clientError:",
          "777:      type === 'client' &&",
          "778:      typeof result.error !== 'undefined' &&",
          "779:      !deepEqual(state.clientError, result.error)",
          "780:       ? result.error",
          "781:       : state.clientError,",
          "782:     serverError:",
          "783:      type === 'client' &&",
          "784:      typeof result.error !== 'undefined' &&",
          "785:      !deepEqual(state.submittedValue, result.value)",
          "786:       ? null",
          "787:       : type === 'server' &&",
          "788:          typeof result.error !== 'undefined' &&",
          "789:          !deepEqual(state.serverError, result.error)",
          "790:        ? result.error",
          "791:        : state.serverError,",
          "792:     submittedValue: type === 'server' ? result.value : state.submittedValue,",
          "793:    });",
          "795:    if (type === 'server' || !result.intent) {",
          "796:     return newState;",
          "797:    }",
          "799:    for (const handler of intentHandlers) {",
          "800:     if (handler.isApplicable(result.intent)) {",
          "801:      newState = handler.updateState(newState, {",
          "802:       type,",
          "803:       result,",
          "804:       reset,",
          "805:      });",
          "806:     }",
          "807:    }",
          "809:    return updateObject(state, newState);",
          "810:   },",
          "811:   deserializeIntent(value) {",
          "812:    return deserializeIntent(value);",
          "813:   },",
          "814:   serializeIntent(intent) {",
          "815:    return serializeIntent(intent);",
          "816:   },",
          "817:   parseIntent(intent) {",
          "818:    for (const handler of intentHandlers) {",
          "819:     if (handler.isApplicable(intent)) {",
          "820:      return intent as DefaultFormIntent;",
          "821:     }",
          "822:    }",
          "824:    return null;",
          "825:   },",
          "826:   updateValue(value, intent) {",
          "827:    let result: Record<string, FormValue> = value;",
          "829:    for (const handler of intentHandlers) {",
          "830:     if (",
          "831:      typeof handler.updateValue === 'function' &&",
          "832:      handler.isApplicable(intent)",
          "833:     ) {",
          "834:      const nextValue = handler.updateValue(result, intent);",
          "836:      if (nextValue === null) {",
          "837:       return null;",
          "838:      }",
          "840:      result = nextValue;",
          "841:     }",
          "842:    }",
          "844:    return result;",
          "845:   },",
          "846:   hasSideEffect(intent) {",
          "847:    for (const handler of intentHandlers) {",
          "848:     if (",
          "849:      typeof handler.sideEffect === 'function' &&",
          "850:      handler.isApplicable(intent)",
          "851:     ) {",
          "852:      return true;",
          "853:     }",
          "854:    }",
          "856:    return false;",
          "857:   },",
          "858:   applySideEffect(formElement, intent, state) {",
          "859:    for (const handler of intentHandlers) {",
          "860:     if (",
          "861:      typeof handler.sideEffect === 'function' &&",
          "862:      handler.isApplicable(intent)",
          "863:     ) {",
          "864:      handler.sideEffect(formElement, { intent, state });",
          "865:     }",
          "866:    }",
          "867:   },",
          "868:  };",
          "869: });",
          "",
          "---------------"
        ],
        "packages/conform-react/helpers.ts||packages/conform-react/helpers.ts": [
          "File: packages/conform-react/helpers.ts -> packages/conform-react/helpers.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/conform-react/hooks.ts||packages/conform-react/hooks.ts": [
          "File: packages/conform-react/hooks.ts -> packages/conform-react/hooks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import {",
          "31: export function useNoValidate(defaultNoValidate = true): boolean {",
          "32:  const [noValidate, setNoValidate] = useState(defaultNoValidate);",
          "",
          "[Removed Lines]",
          "1: import { type FormId, type FieldName } from '@conform-to/dom';",
          "2: import { useEffect, useId, useState, useLayoutEffect } from 'react';",
          "4:  type FormMetadata,",
          "5:  type FieldMetadata,",
          "6:  type Pretty,",
          "7:  type FormOptions,",
          "8:  createFormContext,",
          "9:  useFormState,",
          "10:  useFormContext,",
          "11:  useSubjectRef,",
          "12:  getFieldMetadata,",
          "13:  getFormMetadata,",
          "14: } from './context';",
          "20: export const useSafeLayoutEffect =",
          "21:  typeof document === 'undefined' ? useEffect : useLayoutEffect;",
          "23: export function useFormId<Schema extends Record<string, unknown>, FormError>(",
          "24:  preferredId?: string,",
          "25: ): FormId<Schema, FormError> {",
          "26:  const id = useId();",
          "28:  return preferredId ?? id;",
          "29: }",
          "34:  useSafeLayoutEffect(() => {",
          "",
          "[Added Lines]",
          "2:  useCallback,",
          "3:  useEffect,",
          "4:  useMemo,",
          "5:  useRef,",
          "6:  useState,",
          "7:  useSyncExternalStore,",
          "8: } from 'react';",
          "9: import type { FormError, FormValue } from 'conform-dom';",
          "10: import {",
          "11:  DEFAULT_INTENT,",
          "12:  isInput,",
          "13:  parseSubmission,",
          "14:  requestIntent,",
          "15:  Submission,",
          "16: } from 'conform-dom';",
          "17: import type {",
          "18:  DefaultValue,",
          "19:  FormControl,",
          "20:  FormState,",
          "21:  DefaultFormIntent,",
          "22:  FormControlAdditionalState,",
          "23:  UnknownIntent,",
          "24: } from './control';",
          "25: import { applyIntent, defaultFormControl, initializeElement } from './control';",
          "26: import {",
          "27:  deepEqual,",
          "28:  FormRef,",
          "29:  getFormElement,",
          "30:  getSubmitEvent,",
          "31:  updateFieldValue,",
          "32:  updateObject,",
          "33: } from './util';",
          "34: import { formObserver } from './observer';",
          "39:  useEffect(() => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:  return noValidate;",
          "44: }",
          "46: export function useForm<",
          "50: >(",
          "74:  );",
          "82:   return () => {",
          "87:   };",
          "100: }",
          "117: }",
          "140:  );",
          "144: }",
          "",
          "[Removed Lines]",
          "47:  Schema extends Record<string, any>,",
          "48:  FormValue = Schema,",
          "49:  FormError = string[],",
          "51:  options: Pretty<",
          "52:   Omit<FormOptions<Schema, FormError, FormValue>, 'formId'> & {",
          "56:    id?: string;",
          "63:    defaultNoValidate?: boolean;",
          "64:   }",
          "65:  >,",
          "66: ): [",
          "67:  FormMetadata<Schema, FormError>,",
          "68:  ReturnType<FormMetadata<Schema, FormError>['getFieldset']>,",
          "69: ] {",
          "70:  const { id, ...formConfig } = options;",
          "71:  const formId = useFormId<Schema, FormError>(id);",
          "72:  const [context] = useState(() =>",
          "73:   createFormContext({ ...formConfig, formId }),",
          "76:  useSafeLayoutEffect(() => {",
          "77:   const disconnect = context.observe();",
          "78:   document.addEventListener('input', context.onInput);",
          "79:   document.addEventListener('focusout', context.onBlur);",
          "80:   document.addEventListener('reset', context.onReset);",
          "83:    disconnect();",
          "84:    document.removeEventListener('input', context.onInput);",
          "85:    document.removeEventListener('focusout', context.onBlur);",
          "86:    document.removeEventListener('reset', context.onReset);",
          "88:  }, [context]);",
          "90:  useSafeLayoutEffect(() => {",
          "91:   context.onUpdate({ ...formConfig, formId });",
          "92:  });",
          "94:  const subjectRef = useSubjectRef();",
          "95:  const stateSnapshot = useFormState(context, subjectRef);",
          "96:  const noValidate = useNoValidate(options.defaultNoValidate);",
          "97:  const form = getFormMetadata(context, subjectRef, stateSnapshot, noValidate);",
          "99:  return [form, form.getFieldset()];",
          "102: export function useFormMetadata<",
          "103:  Schema extends Record<string, any>,",
          "104:  FormError = string[],",
          "105: >(",
          "106:  formId?: FormId<Schema, FormError>,",
          "107:  options: {",
          "108:   defaultNoValidate?: boolean;",
          "109:  } = {},",
          "110: ): FormMetadata<Schema, FormError> {",
          "111:  const subjectRef = useSubjectRef();",
          "112:  const context = useFormContext(formId);",
          "113:  const stateSnapshot = useFormState(context, subjectRef);",
          "114:  const noValidate = useNoValidate(options.defaultNoValidate);",
          "116:  return getFormMetadata(context, subjectRef, stateSnapshot, noValidate);",
          "119: export function useField<",
          "120:  FieldSchema,",
          "121:  FormSchema extends Record<string, unknown> = Record<string, unknown>,",
          "122:  FormError = string[],",
          "123: >(",
          "124:  name: FieldName<FieldSchema, FormSchema, FormError>,",
          "125:  options: {",
          "126:   formId?: FormId<FormSchema, FormError>;",
          "127:  } = {},",
          "128: ): [",
          "129:  FieldMetadata<FieldSchema, FormSchema, FormError>,",
          "130:  FormMetadata<FormSchema, FormError>,",
          "131: ] {",
          "132:  const subjectRef = useSubjectRef();",
          "133:  const context = useFormContext(options.formId);",
          "134:  const stateSnapshot = useFormState(context, subjectRef);",
          "135:  const field = getFieldMetadata<FieldSchema, FormSchema, FormError>(",
          "136:   context,",
          "137:   subjectRef,",
          "138:   stateSnapshot,",
          "139:   name,",
          "141:  const form = getFormMetadata(context, subjectRef, stateSnapshot, false);",
          "143:  return [field, form];",
          "",
          "[Added Lines]",
          "51: export type IntentDispatcher<Intent extends UnknownIntent> = {",
          "52:  [Type in Intent['type']]: undefined extends Extract<",
          "53:   Intent,",
          "54:   { type: Type }",
          "55:  >['payload']",
          "56:   ? (payload?: Extract<Intent, { type: Type }>['payload']) => void",
          "57:   : (payload: Extract<Intent, { type: Type }>['payload']) => void;",
          "58: };",
          "61:  Schema,",
          "62:  ErrorShape,",
          "63:  Intent extends UnknownIntent,",
          "64:  AdditionalState extends Record<string, unknown> = {},",
          "65:  Value = unknown,",
          "67:  formRef: FormRef,",
          "68:  options: {",
          "69:   control: FormControl<Intent, AdditionalState>;",
          "70:   result?:",
          "71:    | Submission<Intent | null, Schema, ErrorShape>",
          "72:    | Submission<null, Schema, ErrorShape>",
          "73:    | null;",
          "74:   defaultValue?: DefaultValue<Schema>;",
          "75:   intentName?: string;",
          "76:   onValidate?: (",
          "77:    value: Record<string, FormValue>,",
          "78:    ctx: {",
          "79:     formElement: HTMLFormElement;",
          "80:    },",
          "81:   ) =>",
          "82:    | {",
          "83:      value?: Value;",
          "84:      error: FormError<Schema, ErrorShape> | null;",
          "85:      }",
          "86:    | Promise<{",
          "87:      value?: Value;",
          "88:      error: FormError<Schema, ErrorShape> | null;",
          "89:      }>",
          "90:    | undefined;",
          "91:   onSubmit?: (",
          "92:    event: React.FormEvent<HTMLFormElement>,",
          "93:    ctx: {",
          "94:     submission: Submission<Intent | null, Schema, ErrorShape>;",
          "95:     formData: FormData;",
          "96:     value: Value | undefined;",
          "97:    },",
          "98:   ) =>",
          "99:    | Promise<Submission<Intent | null, Schema, ErrorShape>>",
          "100:    | undefined",
          "101:    | void;",
          "102:  },",
          "103: ): {",
          "104:  state: FormState<Schema, ErrorShape, AdditionalState>;",
          "105:  handleSubmit(event: React.FormEvent<HTMLFormElement>): void;",
          "106:  intent: IntentDispatcher<Intent>;",
          "107: };",
          "108: export function useForm<Schema, ErrorShape = string[], Value = unknown>(",
          "109:  formRef: FormRef,",
          "110:  options?: {",
          "111:   control?: undefined;",
          "112:   result?:",
          "113:    | Submission<DefaultFormIntent | null, Schema, ErrorShape>",
          "114:    | Submission<null, Schema, ErrorShape>",
          "115:    | null;",
          "116:   defaultValue?: DefaultValue<Schema>;",
          "117:   intentName?: string;",
          "118:   onValidate?: (",
          "119:    value: Record<string, FormValue>,",
          "120:    ctx: {",
          "121:     formElement: HTMLFormElement;",
          "122:    },",
          "123:   ) =>",
          "124:    | {",
          "125:      value?: Value;",
          "126:      error: FormError<Schema, ErrorShape> | null;",
          "127:      }",
          "128:    | Promise<{",
          "129:      value?: Value;",
          "130:      error: FormError<Schema, ErrorShape> | null;",
          "131:      }>",
          "132:    | undefined;",
          "133:   onSubmit?: (",
          "134:    event: React.FormEvent<HTMLFormElement>,",
          "135:    ctx: {",
          "136:     submission: Submission<DefaultFormIntent | null, Schema, ErrorShape>;",
          "137:     formData: FormData;",
          "138:     value: Value | undefined;",
          "139:    },",
          "140:   ) =>",
          "141:    | Promise<Submission<DefaultFormIntent | null, Schema, ErrorShape>>",
          "142:    | undefined",
          "143:    | void;",
          "144:  },",
          "145: ): {",
          "146:  state: FormState<",
          "147:   Schema,",
          "148:   ErrorShape,",
          "149:   FormControlAdditionalState<typeof defaultFormControl>",
          "150:  >;",
          "151:  handleSubmit(event: React.FormEvent<HTMLFormElement>): void;",
          "152:  intent: IntentDispatcher<DefaultFormIntent>;",
          "153: };",
          "154: export function useForm<",
          "155:  Schema,",
          "156:  ErrorShape,",
          "157:  Intent extends UnknownIntent,",
          "158:  AdditionalState extends Record<string, unknown> = {},",
          "159:  Value = unknown,",
          "160: >(",
          "161:  formRef: FormRef,",
          "162:  options?: {",
          "163:   control?: FormControl<",
          "164:    Intent | DefaultFormIntent,",
          "165:    AdditionalState | FormControlAdditionalState<typeof defaultFormControl>",
          "166:   >;",
          "167:   result?:",
          "168:    | Submission<Intent | DefaultFormIntent | null, Schema, ErrorShape>",
          "169:    | Submission<null, Schema, ErrorShape>",
          "170:    | null;",
          "171:   defaultValue?: DefaultValue<Schema>;",
          "172:   intentName?: string;",
          "173:   onValidate?: (",
          "174:    value: Record<string, FormValue>,",
          "175:    ctx: {",
          "176:     formElement: HTMLFormElement;",
          "177:    },",
          "178:   ) =>",
          "179:    | {",
          "180:      value?: Value;",
          "181:      error: FormError<Schema, ErrorShape> | null;",
          "182:      }",
          "183:    | Promise<{",
          "184:      value?: Value;",
          "185:      error: FormError<Schema, ErrorShape> | null;",
          "186:      }>",
          "187:    | undefined;",
          "188:   onSubmit?: (",
          "189:    event: React.FormEvent<HTMLFormElement>,",
          "190:    ctx: {",
          "191:     submission: Submission<",
          "192:      Intent | DefaultFormIntent | null,",
          "193:      Schema,",
          "194:      ErrorShape",
          "195:     >;",
          "196:     formData: FormData;",
          "197:     value: Value | undefined;",
          "198:    },",
          "199:   ) =>",
          "200:    | Promise<",
          "201:      Submission<Intent | DefaultFormIntent | null, Schema, ErrorShape>",
          "202:      >",
          "203:    | undefined",
          "204:    | void;",
          "205:  },",
          "206: ): {",
          "207:  state: FormState<",
          "208:   Schema,",
          "209:   ErrorShape,",
          "210:   AdditionalState | FormControlAdditionalState<typeof defaultFormControl>",
          "211:  >;",
          "212:  handleSubmit(event: React.FormEvent<HTMLFormElement>): void;",
          "213:  intent: IntentDispatcher<Intent | DefaultFormIntent>;",
          "214: } {",
          "215:  const {",
          "216:   intentName = DEFAULT_INTENT,",
          "217:   control = defaultFormControl,",
          "218:   defaultValue,",
          "219:   result,",
          "220:  } = options ?? {};",
          "221:  const [{ state, sideEffects }, updateForm] = useState<{",
          "222:   state: FormState<Schema, ErrorShape, {} | AdditionalState>;",
          "223:   sideEffects: Array<{",
          "224:    intent: Intent | DefaultFormIntent;",
          "225:    state: FormState<Schema, ErrorShape, {} | AdditionalState>;",
          "226:   }>;",
          "227:  }>(() => ({",
          "228:   state: control.initializeState({",
          "229:    defaultValue,",
          "230:    result,",
          "231:   }),",
          "232:   sideEffects: [],",
          "233:  }));",
          "234:  const optionsRef = useRef(options);",
          "235:  const lastStateRef = useRef(state);",
          "236:  const lastResultRef = useRef(result);",
          "237:  const pendingIntentsRef = useRef<Array<Intent | DefaultFormIntent>>([]);",
          "238:  const lastAsyncResultRef = useRef<{",
          "239:   event: SubmitEvent;",
          "240:   value: Value | undefined;",
          "241:  } | null>(null);",
          "242:  const abortControllerRef = useRef<AbortController | null>(null);",
          "243:  const intent = useIntent(formRef, {",
          "244:   intentName,",
          "245:   control,",
          "246:  });",
          "247:  const handleSubmission = useCallback(",
          "248:   (",
          "249:    result: Submission<Intent | DefaultFormIntent | null, Schema, ErrorShape>,",
          "250:    options: {",
          "251:     type: 'server' | 'client';",
          "252:    },",
          "253:   ) => {",
          "254:    if (result === lastResultRef.current) {",
          "255:     return;",
          "256:    }",
          "258:    lastResultRef.current = result;",
          "260:    const { control = defaultFormControl, defaultValue } =",
          "261:     optionsRef.current ?? {};",
          "263:    const pendingIntents = pendingIntentsRef.current;",
          "266:    if (",
          "267:     options.type === 'client' &&",
          "268:     result.intent &&",
          "269:     control.hasSideEffect(result.intent)",
          "270:    ) {",
          "271:     pendingIntents.push(result.intent);",
          "272:    }",
          "274:    updateForm((form) => {",
          "275:     const state = control.updateState(form.state, {",
          "276:      type: options.type,",
          "277:      result,",
          "278:      reset() {",
          "279:       return control.initializeState<Schema, ErrorShape>({",
          "280:        defaultValue,",
          "281:       });",
          "282:      },",
          "283:     });",
          "285:     let sideEffects = form.sideEffects;",
          "288:     if (result.intent && pendingIntents.includes(result.intent)) {",
          "289:      sideEffects = sideEffects",
          "290:       .filter((sideEffect) => pendingIntents.includes(sideEffect.intent))",
          "291:       .concat({",
          "292:        intent: result.intent,",
          "293:        state,",
          "294:       });",
          "295:     }",
          "297:     return updateObject(form, {",
          "298:      state,",
          "299:      sideEffects,",
          "300:     });",
          "301:    });",
          "302:   },",
          "303:   [],",
          "306:  useEffect(() => {",
          "307:   optionsRef.current = options;",
          "308:   lastStateRef.current = state;",
          "309:  });",
          "311:  useEffect(() => {",
          "312:   const formElement = getFormElement(formRef);",
          "313:   const unsubscribe = formObserver.onInputMounted((element) =>",
          "314:    initializeElement(element, {",
          "315:     initialValue: lastStateRef.current.initialValue,",
          "316:    }),",
          "317:   );",
          "319:   if (formElement) {",
          "320:    for (const element of formElement.elements) {",
          "321:     if (isInput(element)) {",
          "322:      initializeElement(element, {",
          "323:       initialValue: lastStateRef.current.initialValue,",
          "324:      });",
          "325:     }",
          "326:    }",
          "327:   }",
          "331:    unsubscribe();",
          "333:    abortControllerRef.current?.abort('The component is unmounted');",
          "335:  }, []);",
          "337:  useEffect(() => {",
          "338:   if (result) {",
          "339:    handleSubmission(result, { type: 'server' });",
          "340:   }",
          "341:  }, [result, handleSubmission]);",
          "343:  useEffect(() => {",
          "344:   const formElement = getFormElement(formRef);",
          "346:   if (!formElement) {",
          "348:    console.error('Side effect failed; Form element is not found');",
          "349:    return;",
          "350:   }",
          "352:   const pendingIntents = pendingIntentsRef.current;",
          "354:   for (const sideEffect of sideEffects) {",
          "356:    if (!pendingIntents.includes(sideEffect.intent)) {",
          "357:     continue;",
          "358:    }",
          "360:    control.applySideEffect(formElement, sideEffect.intent, sideEffect.state);",
          "363:    pendingIntents.splice(pendingIntents.indexOf(sideEffect.intent), 1);",
          "364:   }",
          "365:  }, [formRef, sideEffects, control]);",
          "367:  return {",
          "368:   state,",
          "369:   handleSubmit(event: React.FormEvent<HTMLFormElement>) {",
          "370:    const abortController = new AbortController();",
          "373:    abortControllerRef.current?.abort('A new submission is made');",
          "374:    abortControllerRef.current = abortController;",
          "376:    const formElement = event.currentTarget;",
          "377:    const submitEvent = getSubmitEvent(event);",
          "378:    const formData = new FormData(formElement, submitEvent.submitter);",
          "379:    const submission = applyIntent<",
          "380:     Intent | DefaultFormIntent,",
          "381:     Schema,",
          "382:     ErrorShape",
          "383:    >(",
          "384:     parseSubmission(formData, {",
          "385:      intentName,",
          "386:     }),",
          "387:     {",
          "388:      control,",
          "389:      pendingIntents: pendingIntentsRef.current,",
          "390:     },",
          "391:    );",
          "393:    let value: Value | undefined;",
          "396:    if (event.nativeEvent === lastAsyncResultRef.current?.event) {",
          "397:     value = lastAsyncResultRef.current.value;",
          "398:     submission.error = null;",
          "399:    } else {",
          "400:     const validationResult =",
          "401:      submission.value !== null",
          "402:       ? optionsRef.current?.onValidate?.(submission.value, {",
          "403:         formElement,",
          "404:        })",
          "405:       : // Treat it as a valid submission if the value is null (form reset)",
          "406:        { error: null };",
          "409:     if (validationResult instanceof Promise) {",
          "411:      validationResult.then(({ value, error }) => {",
          "414:       if (!abortController.signal.aborted) {",
          "415:        handleSubmission(",
          "416:         { ...submission, error },",
          "417:         {",
          "418:          type: 'server',",
          "419:         },",
          "420:        );",
          "423:        if (error === null && !submission.intent) {",
          "424:         const event = new SubmitEvent('submit', {",
          "425:          bubbles: true,",
          "426:          cancelable: true,",
          "427:          submitter: submitEvent.submitter,",
          "428:         });",
          "431:         lastAsyncResultRef.current = {",
          "432:          event,",
          "433:          value,",
          "434:         };",
          "435:         formElement.dispatchEvent(event);",
          "436:        }",
          "437:       }",
          "438:      });",
          "439:     } else if (typeof validationResult !== 'undefined') {",
          "440:      submission.error = validationResult.error;",
          "441:      value = validationResult.value;",
          "442:     }",
          "444:     handleSubmission(submission, {",
          "445:      type: 'client',",
          "446:     });",
          "448:     if (",
          "450:      typeof validationResult !== 'undefined' &&",
          "452:      (submission.intent || validationResult !== null)",
          "453:     ) {",
          "454:      event.preventDefault();",
          "455:     }",
          "456:    }",
          "458:    if (!event.isDefaultPrevented()) {",
          "459:     const serverResult = optionsRef.current?.onSubmit?.(event, {",
          "460:      submission,",
          "461:      formData,",
          "462:      value,",
          "463:     });",
          "465:     if (serverResult) {",
          "466:      serverResult.then((result) => {",
          "467:       if (!abortController.signal.aborted) {",
          "468:        handleSubmission(result, {",
          "469:         type: 'server',",
          "470:        });",
          "471:       }",
          "472:      });",
          "473:     }",
          "474:    }",
          "475:   },",
          "476:   intent,",
          "477:  };",
          "480: export function useIntent<Intent extends UnknownIntent = DefaultFormIntent>(",
          "481:  formRef: FormRef,",
          "482:  options?: {",
          "483:   intentName?: string;",
          "484:   control?: FormControl<Intent | DefaultFormIntent>;",
          "485:  },",
          "486: ): IntentDispatcher<Intent> {",
          "487:  const { intentName = DEFAULT_INTENT, control = defaultFormControl } =",
          "488:   options ?? {};",
          "490:  return useMemo(",
          "491:   () =>",
          "492:    new Proxy<IntentDispatcher<Intent>>({} as any, {",
          "493:     get(target, type, receiver) {",
          "494:      if (typeof type === 'string') {",
          "496:       target[type] ??= (payload: unknown) => {",
          "497:        const formElement = getFormElement(formRef);",
          "499:        if (!formElement) {",
          "500:         throw new Error(",
          "501:          'Failed to dispatch intent; Form element is not found',",
          "502:         );",
          "503:        }",
          "505:        requestIntent(",
          "506:         formElement,",
          "507:         intentName,",
          "508:         control.serializeIntent({",
          "509:          type,",
          "510:          payload,",
          "511:         }),",
          "512:        );",
          "513:       };",
          "514:      }",
          "516:      return Reflect.get(target, type, receiver);",
          "517:     },",
          "518:    }),",
          "519:   [formRef, intentName, control],",
          "520:  );",
          "523: export function useFormData<Value>(",
          "524:  formRef: FormRef,",
          "525:  select: (formData: FormData, currentValue: Value | undefined) => Value,",
          "526: ): Value | undefined {",
          "527:  const valueRef = useRef<Value>();",
          "528:  const value = useSyncExternalStore(",
          "529:   useCallback(",
          "530:    (callback) =>",
          "531:     formObserver.onFormDataChanged(({ formElement }) => {",
          "532:      if (formElement === getFormElement(formRef)) {",
          "533:       callback();",
          "534:      }",
          "535:     }),",
          "536:    [],",
          "537:   ),",
          "538:   () => {",
          "539:    const formElement = getFormElement(formRef);",
          "541:    if (!formElement) {",
          "542:     return;",
          "543:    }",
          "545:    const formData = new FormData(formElement);",
          "547:    return select(formData, valueRef.current);",
          "548:   },",
          "549:   () => undefined,",
          "550:  );",
          "552:  valueRef.current = value;",
          "554:  return value;",
          "555: }",
          "557: export function useCustomInput(initialValue?: string | string[] | undefined): {",
          "558:  value: string | string[] | undefined;",
          "559:  changed(value: string | string[]): void;",
          "560:  focused(): void;",
          "561:  blurred(): void;",
          "562:  register: React.RefCallback<",
          "563:   HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined",
          "564:  >;",
          "565: };",
          "566: export function useCustomInput<Value extends string | string[]>(",
          "567:  initialValue: Value,",
          "568: ): {",
          "569:  value: Value;",
          "570:  changed(value: Value): void;",
          "571:  focused(): void;",
          "572:  blurred(): void;",
          "573:  register: React.RefCallback<",
          "574:   HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined",
          "575:  >;",
          "576: };",
          "577: export function useCustomInput(initialValue?: string | string[] | undefined): {",
          "578:  value: string | string[] | undefined;",
          "579:  changed(value: string | string[]): void;",
          "580:  focused(): void;",
          "581:  blurred(): void;",
          "582:  register: React.RefCallback<",
          "583:   HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined",
          "584:  >;",
          "585: } {",
          "586:  const inputRef = useRef<",
          "587:   | HTMLInputElement",
          "588:   | HTMLSelectElement",
          "589:   | HTMLTextAreaElement",
          "590:   | null",
          "591:   | undefined",
          "592:  >();",
          "593:  const previous = useRef<string | string[] | undefined>(initialValue);",
          "594:  const eventDispatched = useRef<Record<string, boolean>>({});",
          "595:  const value = useSyncExternalStore(",
          "596:   useCallback(",
          "597:    (callback) =>",
          "598:     formObserver.onInputChanged((inputElement) => {",
          "599:      if (inputElement === inputRef.current) {",
          "600:       callback();",
          "601:      }",
          "602:     }),",
          "603:    [],",
          "604:   ),",
          "605:   () => {",
          "606:    if (!inputRef.current) {",
          "608:     console.log(",
          "609:      'No input element is registered yet; Did you forget to call the `register` function?',",
          "610:     );",
          "611:     return initialValue;",
          "612:    }",
          "614:    const element = inputRef.current;",
          "615:    const prev = previous.current;",
          "616:    const isMultipleSelect =",
          "617:     element instanceof HTMLSelectElement && element.multiple;",
          "618:    const value = isMultipleSelect",
          "619:     ? Array.from(element.selectedOptions).map((option) => option.value)",
          "620:     : [element.value];",
          "621:    const needsArray =",
          "622:     typeof initialValue !== 'undefined'",
          "623:      ? Array.isArray(initialValue)",
          "624:      : isMultipleSelect;",
          "625:    const next = needsArray ? value : value[0];",
          "627:    if (deepEqual(prev, next)) {",
          "628:     return prev;",
          "629:    }",
          "631:    return next;",
          "632:   },",
          "633:   () => initialValue,",
          "636:  previous.current = value;",
          "638:  useEffect(() => {",
          "639:   const deduplicateEvent = (event: Event) => {",
          "640:    const element = inputRef.current;",
          "642:    if (element && event.target === element) {",
          "643:     eventDispatched.current[event.type] = true;",
          "644:    }",
          "645:   };",
          "647:   return () => {",
          "648:    document.removeEventListener('focusin', deduplicateEvent, true);",
          "649:    document.removeEventListener('focusout', deduplicateEvent, true);",
          "650:   };",
          "651:  }, []);",
          "653:  const control = useMemo<{",
          "654:   changed(value: string | string[]): void;",
          "655:   focused(): void;",
          "656:   blurred(): void;",
          "657:   register: React.RefCallback<",
          "658:    HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined",
          "659:   >;",
          "660:  }>(() => {",
          "661:   return {",
          "662:    register(element) {",
          "663:     inputRef.current = element;",
          "664:    },",
          "665:    changed(value) {",
          "666:     const element = inputRef.current;",
          "668:     if (element) {",
          "669:      updateFieldValue(element, value);",
          "670:     }",
          "671:    },",
          "672:    focused() {",
          "673:     if (!eventDispatched.current.focusin) {",
          "674:      return;",
          "675:     }",
          "677:     const element = inputRef.current;",
          "679:     if (element) {",
          "680:      element.dispatchEvent(",
          "681:       new FocusEvent('focusin', {",
          "682:        bubbles: true,",
          "683:       }),",
          "684:      );",
          "685:      element.dispatchEvent(new FocusEvent('focus'));",
          "686:     }",
          "688:     eventDispatched.current.focusin = false;",
          "689:    },",
          "690:    blurred() {",
          "691:     if (!eventDispatched.current.focusout) {",
          "692:      return;",
          "693:     }",
          "694:     const element = inputRef.current;",
          "696:     if (element) {",
          "697:      element.dispatchEvent(",
          "698:       new FocusEvent('focusout', {",
          "699:        bubbles: true,",
          "700:       }),",
          "701:      );",
          "702:      element.dispatchEvent(new FocusEvent('blur'));",
          "703:     }",
          "705:     eventDispatched.current.focusout = false;",
          "706:    },",
          "707:   };",
          "708:  }, []);",
          "710:  return {",
          "711:   value,",
          "712:   changed: control.changed,",
          "713:   focused: control.focused,",
          "714:   blurred: control.blurred,",
          "715:   register: control.register,",
          "716:  };",
          "",
          "---------------"
        ],
        "packages/conform-react/index.ts||packages/conform-react/index.ts": [
          "File: packages/conform-react/index.ts -> packages/conform-react/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export {",
          "2:  type Submission,",
          "10: export {",
          "17: export {",
          "",
          "[Removed Lines]",
          "3:  type SubmissionResult,",
          "4:  type DefaultValue,",
          "5:  type Intent,",
          "6:  type FormId,",
          "7:  type FieldName,",
          "8:  parse,",
          "9: } from '@conform-to/dom';",
          "11:  type FieldMetadata,",
          "12:  type FormMetadata,",
          "13:  FormProvider,",
          "14:  FormStateInput,",
          "15: } from './context';",
          "16: export { useForm, useFormMetadata, useField } from './hooks';",
          "18:  Control as unstable_Control,",
          "19:  useControl as unstable_useControl,",
          "20:  useInputControl,",
          "21: } from './integrations';",
          "22: export {",
          "23:  getFormProps,",
          "24:  getFieldsetProps,",
          "25:  getInputProps,",
          "26:  getSelectProps,",
          "27:  getTextareaProps,",
          "28:  getCollectionProps,",
          "29: } from './helpers';",
          "",
          "[Added Lines]",
          "3:  type FormError,",
          "4:  type FormValue,",
          "5:  parseSubmission,",
          "6:  report,",
          "7:  isInput,",
          "8: } from 'conform-dom';",
          "10:  validateIntentHandler,",
          "11:  resetIntentHandler,",
          "12:  updateIntentHandler,",
          "13:  listIntentHandler,",
          "14:  defaultFormControl,",
          "15:  applyIntent,",
          "16: } from './control';",
          "18:  defaultSerialize,",
          "19:  isTouched,",
          "20:  getFormMetadata,",
          "21:  getError,",
          "22:  getFieldset,",
          "23:  getListInitialValue,",
          "24:  getDefaultValue,",
          "25:  createFieldset,",
          "26: } from './metadata';",
          "27: export { useForm, useFormData, useIntent, useCustomInput } from './hooks';",
          "",
          "---------------"
        ],
        "packages/conform-react/integrations.ts||packages/conform-react/integrations.ts": [
          "File: packages/conform-react/integrations.ts -> packages/conform-react/integrations.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/conform-react/metadata.ts||packages/conform-react/metadata.ts": [
          "File: packages/conform-react/metadata.ts -> packages/conform-react/metadata.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { FormError } from 'conform-dom';",
          "2: import { getPaths, getValue, isPlainObject } from 'conform-dom';",
          "3: import type { DefaultValue, FormState } from './control';",
          "4: import { formatName, isPrefix } from './util';",
          "6: type BaseCombine<",
          "7:  T,",
          "8:  K extends PropertyKey = T extends unknown ? keyof T : never,",
          "9: > = T extends unknown ? T & Partial<Record<Exclude<K, keyof T>, never>> : never;",
          "11: export type Combine<T> = {",
          "12:  [K in keyof BaseCombine<T>]: BaseCombine<T>[K];",
          "13: };",
          "15: export type Field<Schema, Metadata extends Record<string, unknown>> = Metadata &",
          "16:  ([Schema] extends [Date | File]",
          "17:   ? {}",
          "18:   : [Schema] extends [Array<infer Item> | null | undefined]",
          "19:    ? {",
          "20:      getFieldList: () => Array<Field<Item, Metadata>>;",
          "21:     }",
          "22:    : [Schema] extends [Record<string, unknown> | null | undefined]",
          "23:     ? {",
          "24:       getFieldset: () => Fieldset<Schema, Metadata>;",
          "25:      }",
          "26:     : {});",
          "28: export type Fieldset<Schema, Metadata extends Record<string, unknown>> = {",
          "29:  [Key in keyof Combine<Schema>]-?: Field<Combine<Schema>[Key], Metadata>;",
          "30: };",
          "32: export type FormMetadata<Schema extends Record<string, unknown>, ErrorShape> = {",
          "33:  defaultValue: DefaultValue<Schema> | null;",
          "34:  touched: boolean;",
          "35:  error: ErrorShape | null;",
          "36:  fieldError: Record<string, ErrorShape> | null;",
          "37: };",
          "39: export function defaultSerialize(",
          "40:  value: unknown,",
          "41: ): string | string[] | undefined {",
          "42:  if (typeof value === 'string') {",
          "43:   return value;",
          "44:  } else if (isPlainObject(value)) {",
          "45:   return;",
          "46:  } else if (Array.isArray(value)) {",
          "47:   const result: string[] = [];",
          "49:   for (const item of value) {",
          "50:    const serializedItem = defaultSerialize(item);",
          "52:    if (typeof serializedItem !== 'string') {",
          "53:     return;",
          "54:    }",
          "56:    result.push(serializedItem);",
          "57:   }",
          "59:   return result;",
          "60:  } else if (value instanceof Date) {",
          "61:   return value.toISOString();",
          "62:  } else if (typeof value === 'boolean') {",
          "63:   return value ? 'on' : undefined;",
          "64:  } else if (typeof value === 'number' || typeof value === 'bigint') {",
          "65:   return value.toString();",
          "66:  }",
          "68:  return value?.toString();",
          "69: }",
          "77: export function isTouched(touchedFields: string[], name = '') {",
          "78:  if (touchedFields.includes(name)) {",
          "79:   return true;",
          "80:  }",
          "82:  return touchedFields.some((field) => isPrefix(field, name));",
          "83: }",
          "85: export function getFormMetadata<",
          "86:  Schema extends Record<string, unknown>,",
          "87:  ErrorShape,",
          "88: >(state: FormState<Schema, ErrorShape>): FormMetadata<Schema, ErrorShape> {",
          "89:  const error = state.serverError ?? state.clientError;",
          "91:  return {",
          "92:   defaultValue: state.defaultValue,",
          "93:   error: error?.formError ?? null,",
          "94:   fieldError: error?.fieldError ?? null,",
          "95:   get touched() {",
          "96:    return isTouched(state.touchedFields);",
          "97:   },",
          "98:  };",
          "99: }",
          "101: export function getDefaultValue(",
          "102:  initialValue: unknown,",
          "103:  name: string,",
          "104:  serialize: (",
          "105:   value: unknown,",
          "106:  ) => string | string[] | undefined = defaultSerialize,",
          "107: ): string | string[] | undefined {",
          "108:  const paths = getPaths(name);",
          "109:  const value = getValue(initialValue, paths);",
          "111:  return serialize(value);",
          "112: }",
          "114: export function getError<ErrorShape>(",
          "115:  error: FormError<unknown, ErrorShape> | null,",
          "116:  touchedFields: string[],",
          "117:  name?: string,",
          "118: ): ErrorShape | undefined {",
          "119:  if (!isTouched(touchedFields, name) || !error) {",
          "120:   return;",
          "121:  }",
          "123:  return (name ? error.fieldError[name] : error.formError) ?? undefined;",
          "124: }",
          "126: export function getListInitialValue(",
          "127:  initialValue: Record<string, unknown>,",
          "128:  name: string,",
          "129: ) {",
          "130:  const paths = getPaths(name);",
          "131:  const value = getValue(initialValue, paths) ?? [];",
          "133:  if (!Array.isArray(value)) {",
          "134:   throw new Error(`The value of \"${name}\" is not an array`);",
          "135:  }",
          "137:  return value;",
          "138: }",
          "140: export function createFieldset<",
          "141:  Schema,",
          "142:  Metadata extends Record<string, unknown>,",
          "143: >(",
          "144:  initialValue: Record<string, unknown>,",
          "145:  options: {",
          "146:   name?: string;",
          "147:   defineMetadata?: (name: string) => Metadata;",
          "148:  },",
          "149: ): Fieldset<Schema, Metadata> {",
          "150:  function createField(name: string) {",
          "151:   const metadata = options?.defineMetadata?.(name) ?? {};",
          "153:   return Object.assign(metadata, {",
          "154:    getFieldset() {",
          "155:     return createFieldset(initialValue, {",
          "156:      ...options,",
          "157:      name,",
          "158:     });",
          "159:    },",
          "160:    getFieldList() {",
          "161:     const list = getListInitialValue(initialValue, name);",
          "163:     return Array(list.length)",
          "164:      .fill(0)",
          "165:      .map((_, index) => createField(formatName(name, index)));",
          "166:    },",
          "167:   });",
          "168:  }",
          "170:  return new Proxy({} as any, {",
          "171:   get(target, key, receiver) {",
          "172:    if (typeof key !== 'string') {",
          "173:     return Reflect.get(target, key, receiver);",
          "174:    }",
          "176:    return createField(formatName(options?.name, key));",
          "177:   },",
          "178:  });",
          "179: }",
          "181: export function getFieldset<Schema, ErrorShape>(",
          "182:  state: FormState<Schema, ErrorShape>,",
          "183: ): Fieldset<",
          "184:  Schema,",
          "185:  Readonly<{",
          "186:   name: string;",
          "187:   key: string | undefined;",
          "188:   defaultValue: string | string[] | undefined;",
          "189:   touched: boolean;",
          "190:   error: ErrorShape | undefined;",
          "191:  }>",
          "192: > {",
          "193:  return createFieldset(state.initialValue, {",
          "194:   defineMetadata(name) {",
          "195:    const error = state.serverError ?? state.clientError;",
          "197:    return {",
          "198:     get name() {",
          "199:      return name;",
          "200:     },",
          "201:     get key() {",
          "202:      return state.keys[name];",
          "203:     },",
          "204:     get defaultValue() {",
          "205:      return getDefaultValue(state.initialValue, name);",
          "206:     },",
          "207:     get touched() {",
          "208:      return isTouched(state.touchedFields, name);",
          "209:     },",
          "210:     get error() {",
          "211:      return getError(error, state.touchedFields, name);",
          "212:     },",
          "213:    };",
          "214:   },",
          "215:  });",
          "216: }",
          "",
          "---------------"
        ],
        "packages/conform-react/observer.ts||packages/conform-react/observer.ts": [
          "File: packages/conform-react/observer.ts -> packages/conform-react/observer.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { isInput } from 'conform-dom';",
          "3: export type FormObserver = {",
          "10:  onInputMounted(",
          "11:   callback: (",
          "12:    inputElement: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement,",
          "13:   ) => void,",
          "14:  ): () => void;",
          "21:  onInputChanged(",
          "22:   callback: (",
          "23:    inputElement: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement,",
          "24:   ) => void,",
          "25:  ): () => void;",
          "33:  onFormDataChanged(",
          "34:   callback: (formElement: HTMLFormElement, formData: FormData) => void,",
          "35:  ): () => void;",
          "36: };",
          "38: export const formObserver = createFormObserver();",
          "40: export function createFormObserver(): FormObserver {",
          "41:  const inputMountedCallbacks = new Set<",
          "42:   Parameters<FormObserver['onInputMounted']>[0]",
          "43:  >();",
          "44:  const inputChangedCallbacks = new Set<",
          "45:   Parameters<FormObserver['onInputChanged']>[0]",
          "46:  >();",
          "47:  const formDataChangedCallbacks = new Set<",
          "48:   Parameters<FormObserver['onFormDataChanged']>[0]",
          "49:  >();",
          "51:  let observer: MutationObserver | null = null;",
          "53:  function handleInput(event: Event) {",
          "54:   const element = event.target;",
          "56:   if (isInput(element)) {",
          "57:    emitInputChanged(element);",
          "59:    if (element.form) {",
          "60:     emitFormDataChanged(element.form);",
          "61:    }",
          "62:   }",
          "63:  }",
          "65:  function handleReset(event: Event) {",
          "66:   if (event.target instanceof HTMLFormElement) {",
          "67:    emitFormDataChanged(event.target);",
          "68:   }",
          "69:  }",
          "71:  function handleSubmit(event: SubmitEvent): void {",
          "72:   if (event.target instanceof HTMLFormElement) {",
          "73:    emitFormDataChanged(event.target, event.submitter);",
          "74:   }",
          "75:  }",
          "77:  function handleMutation(mutations: MutationRecord[]): void {",
          "78:   const formDataChanged = new Set<HTMLFormElement>();",
          "79:   const inputElementMoutned = new Set<",
          "80:    HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement",
          "81:   >();",
          "82:   const inputElementChanged = new Set<",
          "83:    HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement",
          "84:   >();",
          "85:   const getInputs = (node: Node) => {",
          "86:    if (isInput(node)) {",
          "87:     return [node];",
          "88:    }",
          "90:    if (node instanceof Element) {",
          "91:     return Array.from(",
          "92:      node.querySelectorAll<",
          "93:       HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement",
          "94:      >('input,select,textarea'),",
          "95:     );",
          "96:    }",
          "98:    return [];",
          "99:   };",
          "100:   for (const mutation of mutations) {",
          "101:    switch (mutation.type) {",
          "102:     case 'childList':",
          "103:      for (const node of mutation.addedNodes) {",
          "104:       for (const input of getInputs(node)) {",
          "105:        if (input.form) {",
          "106:         inputElementMoutned.add(input);",
          "107:         formDataChanged.add(input.form);",
          "108:        }",
          "109:       }",
          "110:      }",
          "111:      for (const node of mutation.removedNodes) {",
          "112:       for (const input of getInputs(node)) {",
          "113:        if (input.form) {",
          "114:         formDataChanged.add(input.form);",
          "115:        }",
          "116:       }",
          "117:      }",
          "118:      break;",
          "119:     case 'attributes':",
          "120:      if (isInput(mutation.target)) {",
          "121:       inputElementChanged.add(mutation.target);",
          "123:       if (mutation.target.form) {",
          "124:        formDataChanged.add(mutation.target.form);",
          "125:       }",
          "126:      }",
          "127:      break;",
          "128:    }",
          "129:   }",
          "131:   for (const formElement of formDataChanged) {",
          "132:    emitFormDataChanged(formElement);",
          "133:   }",
          "135:   for (const inputElement of inputElementChanged) {",
          "136:    emitInputChanged(inputElement);",
          "137:   }",
          "139:   for (const inputElement of inputElementMoutned) {",
          "140:    emitInputMounted(inputElement);",
          "141:   }",
          "142:  }",
          "144:  function emitInputMounted(",
          "145:   inputElement: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement,",
          "146:  ) {",
          "147:   for (const callback of inputMountedCallbacks) {",
          "148:    callback(inputElement);",
          "149:   }",
          "150:  }",
          "152:  function emitInputChanged(",
          "153:   inputElement: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement,",
          "154:  ) {",
          "155:   for (const callback of inputChangedCallbacks) {",
          "156:    callback(inputElement);",
          "157:   }",
          "158:  }",
          "160:  function emitFormDataChanged(",
          "161:   formElement: HTMLFormElement,",
          "162:   submitter: HTMLElement | null = null,",
          "163:  ) {",
          "164:   const formData = new FormData(formElement, submitter);",
          "166:   for (const callback of formDataChangedCallbacks) {",
          "167:    callback(formElement, formData);",
          "168:   }",
          "169:  }",
          "171:  function initialize() {",
          "173:   if (",
          "174:    formDataChangedCallbacks.size === 0 &&",
          "175:    inputMountedCallbacks.size === 0",
          "176:   ) {",
          "178:    document.addEventListener('input', handleInput);",
          "179:    document.addEventListener('reset', handleReset);",
          "181:    document.addEventListener('submit', handleSubmit, true);",
          "184:    observer ??= new MutationObserver(handleMutation);",
          "185:    observer.observe(document.body, {",
          "186:     subtree: true,",
          "187:     childList: true,",
          "188:     attributeFilter: ['form', 'name', 'data-conform'],",
          "189:    });",
          "190:   }",
          "191:  }",
          "193:  function destroy() {",
          "195:   if (",
          "196:    formDataChangedCallbacks.size === 0 &&",
          "197:    inputMountedCallbacks.size === 0",
          "198:   ) {",
          "199:    document.removeEventListener('input', handleInput);",
          "200:    document.removeEventListener('reset', handleReset);",
          "201:    document.removeEventListener('submit', handleSubmit, true);",
          "202:    observer?.disconnect();",
          "203:   }",
          "204:  }",
          "206:  return {",
          "207:   onInputMounted(callback) {",
          "208:    initialize();",
          "209:    inputMountedCallbacks.add(callback);",
          "211:    return () => {",
          "212:     inputMountedCallbacks.delete(callback);",
          "213:     destroy();",
          "214:    };",
          "215:   },",
          "216:   onInputChanged(callback) {",
          "217:    initialize();",
          "218:    inputChangedCallbacks.add(callback);",
          "220:    return () => {",
          "221:     inputChangedCallbacks.delete(callback);",
          "222:     destroy();",
          "223:    };",
          "224:   },",
          "225:   onFormDataChanged(callback) {",
          "226:    initialize();",
          "227:    formDataChangedCallbacks.add(callback);",
          "229:    return () => {",
          "230:     formDataChangedCallbacks.delete(callback);",
          "231:     destroy();",
          "232:    };",
          "233:   },",
          "234:  };",
          "235: }",
          "",
          "---------------"
        ],
        "packages/conform-react/util.ts||packages/conform-react/util.ts": [
          "File: packages/conform-react/util.ts -> packages/conform-react/util.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:  formatPaths,",
          "3:  getPaths,",
          "4:  getValue,",
          "5:  isPlainObject,",
          "6:  setValue,",
          "7: } from 'conform-dom';",
          "9: export function isNonNullable<T>(value: T): value is NonNullable<T> {",
          "10:  return value !== null && value !== undefined;",
          "11: }",
          "13: export function isString(value: unknown): value is string {",
          "14:  return typeof value === 'string';",
          "15: }",
          "17: export function isNumber(value: unknown): value is number {",
          "18:  return typeof value === 'number';",
          "19: }",
          "21: export function isOptionalString(value: unknown): value is string | undefined {",
          "22:  return typeof value === 'undefined' || typeof value === 'string';",
          "23: }",
          "25: export function isOptionalNumber(value: unknown): value is number | undefined {",
          "26:  return typeof value === 'undefined' || typeof value === 'number';",
          "27: }",
          "29: export function getList(initialValue: unknown, name: string) {",
          "30:  const paths = getPaths(name);",
          "31:  const data = getValue(initialValue, paths) ?? [];",
          "33:  if (!Array.isArray(data)) {",
          "34:   throw new Error(",
          "35:    `Update state failed; The initialValue at \"${name}\" is not an array`,",
          "36:   );",
          "37:  }",
          "40:  return Array.from(data);",
          "41: }",
          "53: export function formatName(prefix: string | undefined, path?: string | number) {",
          "54:  return typeof path !== 'undefined'",
          "55:   ? formatPaths([...getPaths(prefix), path])",
          "56:   : prefix ?? '';",
          "57: }",
          "62: export function isPrefix(name: string, prefix: string) {",
          "63:  if (name === prefix) {",
          "64:   return true;",
          "65:  }",
          "67:  const paths = getPaths(name);",
          "68:  const prefixPaths = getPaths(prefix);",
          "70:  return (",
          "71:   paths.length > prefixPaths.length &&",
          "72:   prefixPaths.every((path, index) => paths[index] === path)",
          "73:  );",
          "74: }",
          "79: export function flatten<Value>(",
          "80:  data: unknown,",
          "82:  select: (value: unknown) => Value = identiy,",
          "83:  prefix?: string,",
          "84: ): Record<string, NonNullable<Value>> {",
          "85:  const result: Record<string, NonNullable<Value>> = {};",
          "87:  function process(data: unknown, prefix: string) {",
          "88:   const value = select(data);",
          "90:   if (typeof value !== 'undefined' && value !== null) {",
          "91:    result[prefix] = value;",
          "92:   }",
          "94:   if (Array.isArray(data)) {",
          "95:    for (let i = 0; i < data.length; i++) {",
          "96:     process(data[i], `${prefix}[${i}]`);",
          "97:    }",
          "98:   } else if (isPlainObject(data)) {",
          "99:    for (const [key, value] of Object.entries(data)) {",
          "100:     process(value, prefix ? `${prefix}.${key}` : key);",
          "101:    }",
          "102:   }",
          "103:  }",
          "105:  if (data) {",
          "106:   process(data, prefix ?? '');",
          "107:  }",
          "109:  return result;",
          "110: }",
          "112: export function configureListIndexUpdate(",
          "113:  listName: string,",
          "114:  update: (index: number) => number | null,",
          "115: ): (name: string) => string | null {",
          "116:  const listPaths = getPaths(listName);",
          "118:  return (name: string) => {",
          "119:   const paths = getPaths(name);",
          "121:   if (",
          "122:    paths.length > listPaths.length &&",
          "123:    listPaths.every((path, index) => paths[index] === path)",
          "124:   ) {",
          "125:    const currentIndex = paths[listPaths.length];",
          "127:    if (typeof currentIndex === 'number') {",
          "128:     const newIndex = update(currentIndex);",
          "130:     if (newIndex === null) {",
          "132:      return null;",
          "133:     }",
          "135:     if (newIndex !== currentIndex) {",
          "137:      paths.splice(listPaths.length, 1, newIndex);",
          "139:      return formatPaths(paths);",
          "140:     }",
          "141:    }",
          "142:   }",
          "144:   return name;",
          "145:  };",
          "146: }",
          "151: export function identiy<Value>(value: Value): Value {",
          "152:  return value;",
          "153: }",
          "155: export function deepEqual<Value>(prev: Value, next: Value): boolean {",
          "156:  if (prev === next) {",
          "157:   return true;",
          "158:  }",
          "160:  if (!prev || !next) {",
          "161:   return false;",
          "162:  }",
          "164:  if (Array.isArray(prev) && Array.isArray(next)) {",
          "165:   if (prev.length !== next.length) {",
          "166:    return false;",
          "167:   }",
          "169:   for (let i = 0; i < prev.length; i++) {",
          "170:    if (!deepEqual(prev[i], next[i])) {",
          "171:     return false;",
          "172:    }",
          "173:   }",
          "175:   return true;",
          "176:  }",
          "178:  if (isPlainObject(prev) && isPlainObject(next)) {",
          "179:   const prevKeys = Object.keys(prev);",
          "180:   const nextKeys = Object.keys(next);",
          "182:   if (prevKeys.length !== nextKeys.length) {",
          "183:    return false;",
          "184:   }",
          "186:   for (const key of prevKeys) {",
          "187:    if (",
          "188:     !Object.prototype.hasOwnProperty.call(next, key) ||",
          "190:     !deepEqual(prev[key], next[key])",
          "191:    ) {",
          "192:     return false;",
          "193:    }",
          "194:   }",
          "196:   return true;",
          "197:  }",
          "199:  return false;",
          "200: }",
          "202: export function mergeObjects<",
          "203:  Obj extends Record<string | number | symbol, unknown>,",
          "204: >(obj1: Obj, obj2: Obj, overwrite: boolean) {",
          "205:  let result = obj1;",
          "207:  for (const key in obj2) {",
          "208:   const val1 = obj1[key];",
          "209:   const val2 = obj2[key];",
          "211:   let value = val2;",
          "214:   if (Object.prototype.hasOwnProperty.call(obj1, key)) {",
          "215:    if (Array.isArray(val1) && Array.isArray(val2)) {",
          "216:     value = val2;",
          "217:    } else if (isPlainObject(val1) && isPlainObject(val2)) {",
          "218:     value = mergeObjects(val1, val2, overwrite);",
          "219:    } else {",
          "220:     value = overwrite ? val2 : val1;",
          "221:    }",
          "222:   }",
          "224:   if (result[key] !== value) {",
          "225:    if (result === obj1) {",
          "227:     result = setValue(obj1, [key], value, shallowClone);",
          "228:    } else {",
          "230:     result[key] = value;",
          "231:    }",
          "232:   }",
          "233:  }",
          "235:  return result;",
          "236: }",
          "242: export function shallowClone<Value>(value: Value): Value {",
          "243:  if (Array.isArray(value)) {",
          "244:   return value.slice() as Value;",
          "245:  } else if (isPlainObject(value)) {",
          "246:   return { ...value } as Value;",
          "247:  }",
          "249:  if (value && typeof value === 'object') {",
          "250:   throw new Error(`${value} is not supported`);",
          "251:  }",
          "253:  return value;",
          "254: }",
          "259: export function updateObject<Obj extends Record<string, any>>(",
          "260:  obj: Obj,",
          "261:  update: Partial<Obj>,",
          "262: ): Obj {",
          "263:  if (",
          "264:   obj === update ||",
          "265:   Object.entries(update).every(([key, value]) => obj[key] === value)",
          "266:  ) {",
          "267:   return obj;",
          "268:  }",
          "270:  return Object.assign({}, obj, update);",
          "271: }",
          "273: export function mapKeys<Value>(",
          "274:  obj: Record<string, Value>,",
          "275:  fn: (key: string) => string | null,",
          "276: ) {",
          "277:  const result: Record<string, Value> = {};",
          "278:  let hasNoChange = true;",
          "280:  for (const [key, value] of Object.entries(obj)) {",
          "281:   const name = fn(key);",
          "282:   if (name !== key) {",
          "283:    hasNoChange = false;",
          "284:   }",
          "286:   if (name !== null) {",
          "287:    result[name] = value;",
          "288:   }",
          "289:  }",
          "291:  if (hasNoChange) {",
          "292:   return obj;",
          "293:  }",
          "295:  return result;",
          "296: }",
          "298: export function addItems<Item>(list: Array<Item>, items: Array<Item>) {",
          "299:  return items.reduce((result, item) => {",
          "300:   if (result.includes(item)) {",
          "301:    return result;",
          "302:   }",
          "304:   return result.concat(item);",
          "305:  }, list);",
          "306: }",
          "308: export function mapItems<Item>(",
          "309:  list: Array<NonNullable<Item>>,",
          "310:  fn: (value: Item) => Item | null,",
          "311: ): Array<Item> {",
          "312:  let hasNoChange = true;",
          "313:  const updated = list.reduce<Array<Item>>((result, item) => {",
          "314:   const value = fn(item);",
          "316:   if (value !== item || value === null) {",
          "317:    hasNoChange = false;",
          "318:   }",
          "320:   if (value !== null) {",
          "321:    result.push(value);",
          "322:   }",
          "324:   return result;",
          "325:  }, []);",
          "327:  if (hasNoChange) {",
          "328:   return list;",
          "329:  }",
          "331:  return updated;",
          "332: }",
          "334: export function getSubmitEvent(",
          "335:  event: React.FormEvent<HTMLFormElement>,",
          "336: ): SubmitEvent {",
          "337:  if (event.type !== 'submit') {",
          "338:   throw new Error('The event is not a submit event');",
          "339:  }",
          "341:  return event.nativeEvent as SubmitEvent;",
          "342: }",
          "344: export type FormRef =",
          "345:  | React.RefObject<",
          "346:    | HTMLFormElement",
          "347:    | HTMLFieldSetElement",
          "348:    | HTMLInputElement",
          "349:    | HTMLSelectElement",
          "350:    | HTMLTextAreaElement",
          "351:    | HTMLButtonElement",
          "352:    >",
          "353:  | string;",
          "355: export function getFormElement(",
          "356:  formRef: FormRef | undefined,",
          "357: ): HTMLFormElement | null {",
          "358:  if (typeof formRef === 'string') {",
          "359:   return document.forms.namedItem(formRef);",
          "360:  }",
          "362:  const element = formRef?.current;",
          "364:  if (element instanceof HTMLFormElement) {",
          "365:   return element;",
          "366:  }",
          "368:  return element?.form ?? null;",
          "369: }",
          "371: export function updateFieldValue(",
          "372:  element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement,",
          "373:  value: string | string[],",
          "374: ): void {",
          "375:  if (",
          "376:   element instanceof HTMLInputElement &&",
          "377:   (element.type === 'checkbox' || element.type === 'radio')",
          "378:  ) {",
          "379:   const wasChecked = element.checked;",
          "380:   const willChecked = Array.isArray(value)",
          "381:    ? value.includes(element.value)",
          "382:    : element.value === value;",
          "384:   if (wasChecked !== willChecked) {",
          "385:    element.click();",
          "386:    return;",
          "387:   }",
          "388:  } else if (element instanceof HTMLSelectElement) {",
          "389:   let updated = false;",
          "390:   const selectedValue = Array.isArray(value) ? [...value] : [value];",
          "392:   for (const option of element.options) {",
          "393:    const index = selectedValue.indexOf(option.value);",
          "394:    const selected = index > -1;",
          "397:    if (option.selected !== selected) {",
          "398:     option.selected = selected;",
          "399:     updated = true;",
          "400:    }",
          "402:    if (selected) {",
          "403:     selectedValue.splice(index, 1);",
          "404:    }",
          "405:   }",
          "408:   for (const option of selectedValue) {",
          "409:    updated = true;",
          "411:    if (typeof option === 'string') {",
          "412:     element.options.add(new Option(option, option, false, true));",
          "413:    }",
          "414:   }",
          "416:   if (!updated) {",
          "417:    return;",
          "418:   }",
          "419:  } else {",
          "421:   if (element.value === value) {",
          "422:    return;",
          "423:   }",
          "431:   const { set: valueSetter } =",
          "432:    Object.getOwnPropertyDescriptor(element, 'value') || {};",
          "433:   const prototype = Object.getPrototypeOf(element);",
          "434:   const { set: prototypeValueSetter } =",
          "435:    Object.getOwnPropertyDescriptor(prototype, 'value') || {};",
          "437:   if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {",
          "438:    prototypeValueSetter.call(element, value);",
          "439:   } else {",
          "440:    if (valueSetter) {",
          "441:     valueSetter.call(element, value);",
          "442:    } else {",
          "443:     throw new Error('The given element does not have a value setter');",
          "444:    }",
          "445:   }",
          "446:  }",
          "449:  element.dispatchEvent(new InputEvent('input', { bubbles: true }));",
          "451:  element.dispatchEvent(new Event('change', { bubbles: true }));",
          "452: }",
          "",
          "---------------"
        ],
        "packages/conform-zod/coercion.ts||packages/conform-zod/coercion.ts": [
          "File: packages/conform-zod/coercion.ts -> packages/conform-zod/coercion.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:  );",
          "91: }",
          "105:  type: Schema,",
          "106:  cache = new Map<ZodTypeAny, ZodTypeAny>(),",
          "107: ): ZodType<output<Schema>> {",
          "",
          "[Removed Lines]",
          "96: export function ifNonEmptyString(fn: (text: string) => unknown) {",
          "97:  return (value: unknown) => coerceString(value, fn);",
          "98: }",
          "104: export function enableTypeCoercion<Schema extends ZodTypeAny>(",
          "",
          "[Added Lines]",
          "97: export function coerceZodFormData<Schema extends ZodTypeAny>(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:    .pipe(",
          "193:     new ZodArray({",
          "194:      ...def,",
          "196:     }),",
          "197:    );",
          "198:  } else if (def.typeName === 'ZodObject') {",
          "",
          "[Removed Lines]",
          "195:      type: enableTypeCoercion(def.type, cache),",
          "",
          "[Added Lines]",
          "188:      type: coerceZodFormData(def.type, cache),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:        Object.entries(def.shape()).map(([key, def]) => [",
          "214:         key,",
          "217:        ]),",
          "218:       ),",
          "219:     }),",
          "",
          "[Removed Lines]",
          "216:         enableTypeCoercion(def, cache),",
          "",
          "[Added Lines]",
          "209:         coerceZodFormData(def, cache),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "226:   } else {",
          "227:    schema = new ZodEffects({",
          "228:     ...def,",
          "230:    });",
          "231:   }",
          "232:  } else if (def.typeName === 'ZodOptional') {",
          "",
          "[Removed Lines]",
          "229:     schema: enableTypeCoercion(def.schema, cache),",
          "",
          "[Added Lines]",
          "222:     schema: coerceZodFormData(def.schema, cache),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "235:    .pipe(",
          "236:     new ZodOptional({",
          "237:      ...def,",
          "239:     }),",
          "240:    );",
          "241:  } else if (def.typeName === 'ZodDefault') {",
          "",
          "[Removed Lines]",
          "238:      innerType: enableTypeCoercion(def.innerType, cache),",
          "",
          "[Added Lines]",
          "231:      innerType: coerceZodFormData(def.innerType, cache),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "254:       return value;",
          "255:      },",
          "257:     }),",
          "258:    );",
          "259:  } else if (def.typeName === 'ZodCatch') {",
          "260:   schema = new ZodCatch({",
          "261:    ...def,",
          "263:   });",
          "264:  } else if (def.typeName === 'ZodIntersection') {",
          "265:   schema = new ZodIntersection({",
          "266:    ...def,",
          "269:   });",
          "270:  } else if (def.typeName === 'ZodUnion') {",
          "271:   schema = new ZodUnion({",
          "272:    ...def,",
          "273:    options: def.options.map((option: ZodTypeAny) =>",
          "275:    ),",
          "276:   });",
          "277:  } else if (def.typeName === 'ZodDiscriminatedUnion') {",
          "278:   schema = new ZodDiscriminatedUnion({",
          "279:    ...def,",
          "280:    options: def.options.map((option: ZodTypeAny) =>",
          "282:    ),",
          "283:    optionsMap: new Map(",
          "284:     Array.from(def.optionsMap.entries()).map(([discriminator, option]) => [",
          "285:      discriminator,",
          "287:     ]),",
          "288:    ),",
          "289:   });",
          "",
          "[Removed Lines]",
          "256:      innerType: enableTypeCoercion(def.innerType, cache),",
          "262:    innerType: enableTypeCoercion(def.innerType, cache),",
          "267:    left: enableTypeCoercion(def.left, cache),",
          "268:    right: enableTypeCoercion(def.right, cache),",
          "274:     enableTypeCoercion(option, cache),",
          "281:     enableTypeCoercion(option, cache),",
          "286:      enableTypeCoercion(option, cache) as ZodDiscriminatedUnionOption<any>,",
          "",
          "[Added Lines]",
          "249:      innerType: coerceZodFormData(def.innerType, cache),",
          "255:    innerType: coerceZodFormData(def.innerType, cache),",
          "260:    left: coerceZodFormData(def.left, cache),",
          "261:    right: coerceZodFormData(def.right, cache),",
          "267:     coerceZodFormData(option, cache),",
          "274:     coerceZodFormData(option, cache),",
          "279:      coerceZodFormData(option, cache) as ZodDiscriminatedUnionOption<any>,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "291:   schema = new ZodTuple({",
          "292:    ...def,",
          "293:    items: def.items.map((item: ZodTypeAny) =>",
          "295:    ),",
          "296:   });",
          "297:  } else if (def.typeName === 'ZodNullable') {",
          "298:   schema = new ZodNullable({",
          "299:    ...def,",
          "301:   });",
          "302:  } else if (def.typeName === 'ZodPipeline') {",
          "303:   schema = new ZodPipeline({",
          "304:    ...def,",
          "307:   });",
          "308:  } else if (def.typeName === 'ZodLazy') {",
          "309:   const inner = def.getter();",
          "311:  }",
          "313:  if (type !== schema) {",
          "",
          "[Removed Lines]",
          "294:     enableTypeCoercion(item, cache),",
          "300:    innerType: enableTypeCoercion(def.innerType, cache),",
          "305:    in: enableTypeCoercion(def.in, cache),",
          "306:    out: enableTypeCoercion(def.out, cache),",
          "310:   schema = lazy(() => enableTypeCoercion(inner, cache));",
          "",
          "[Added Lines]",
          "287:     coerceZodFormData(item, cache),",
          "293:    innerType: coerceZodFormData(def.innerType, cache),",
          "298:    in: coerceZodFormData(def.in, cache),",
          "299:    out: coerceZodFormData(def.out, cache),",
          "303:   schema = lazy(() => coerceZodFormData(inner, cache));",
          "",
          "---------------"
        ],
        "packages/conform-zod/index.ts||packages/conform-zod/index.ts": [
          "File: packages/conform-zod/index.ts -> packages/conform-zod/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export { getZodConstraint } from './constraint';",
          "",
          "[Removed Lines]",
          "2: export { parseWithZod, conformZodMessage } from './parse';",
          "",
          "[Added Lines]",
          "2: export { coerceZodFormData } from './coercion';",
          "3: export { resolveZodResult } from './resolve';",
          "4: export { memorize } from './memorize';",
          "",
          "---------------"
        ],
        "packages/conform-zod/memorize.ts||packages/conform-zod/memorize.ts": [
          "File: packages/conform-zod/memorize.ts -> packages/conform-zod/memorize.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export type Memorized<T extends (...args: any) => any> = {",
          "2:  (this: ThisParameterType<T>, ...args: Parameters<T>): ReturnType<T>;",
          "3:  clearCache: () => void;",
          "4: };",
          "6: export function memorize<T extends (...args: any) => any>(",
          "7:  fn: T,",
          "8:  isEqual: (",
          "9:   prevArgs: Parameters<T>,",
          "10:   nextArgs: Parameters<T>,",
          "11:  ) => boolean = Object.is,",
          "12: ): Memorized<T> {",
          "13:  let cache: {",
          "14:   this: ThisParameterType<T>;",
          "15:   args: Parameters<T>;",
          "16:   result: ReturnType<T>;",
          "17:  } | null = null;",
          "19:  function memorized(this: ThisParameterType<T>, ...args: Parameters<T>) {",
          "21:   if (cache && cache.this === this && isEqual(cache.args, args)) {",
          "22:    return cache.result;",
          "23:   }",
          "25:   let result = fn.apply(this, args);",
          "27:   if (result instanceof Promise) {",
          "28:    result = result.catch((e) => {",
          "30:     cache = null;",
          "33:     throw e;",
          "34:    });",
          "35:   }",
          "38:   cache = {",
          "39:    this: this,",
          "40:    args,",
          "41:    result,",
          "42:   };",
          "44:   return result;",
          "45:  }",
          "47:  memorized.clearCache = function clearCache() {",
          "48:   cache = null;",
          "49:  };",
          "51:  return memorized;",
          "52: }",
          "",
          "---------------"
        ],
        "packages/conform-zod/parse.ts||packages/conform-zod/parse.ts": [
          "File: packages/conform-zod/parse.ts -> packages/conform-zod/parse.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/conform-zod/resolve.ts||packages/conform-zod/resolve.ts": [
          "File: packages/conform-zod/resolve.ts -> packages/conform-zod/resolve.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { SafeParseReturnType, ZodIssue } from 'zod';",
          "2: import { formatPaths, type FormError } from 'conform-dom';",
          "4: export function resolveZodResult<Input, Output>(",
          "5:  result: SafeParseReturnType<Input, Output>,",
          "6: ): {",
          "7:  value?: Output;",
          "8:  error: FormError<Input, string[]> | null;",
          "9: };",
          "10: export function resolveZodResult<Input, Output, ErrorShape>(",
          "11:  result: SafeParseReturnType<Input, Output>,",
          "12:  formatIssues: (issue: ZodIssue[], name: string) => ErrorShape,",
          "13: ): {",
          "14:  value?: Output;",
          "15:  error: FormError<Input, ErrorShape> | null;",
          "16: };",
          "17: export function resolveZodResult<Input, Output, ErrorShape>(",
          "18:  result: SafeParseReturnType<Input, Output>,",
          "19:  formatIssues?: (issue: ZodIssue[], name: string) => ErrorShape,",
          "20: ): {",
          "21:  value?: Output;",
          "22:  error: FormError<Input, Array<string> | ErrorShape> | null;",
          "23: } {",
          "24:  if (result.success) {",
          "25:   return {",
          "26:    value: result.data,",
          "27:    error: null,",
          "28:   };",
          "29:  }",
          "31:  const error: Record<string, ZodIssue[]> = {};",
          "33:  for (const issue of result.error.issues) {",
          "34:   const name = formatPaths(issue.path);",
          "36:   error[name] ??= [];",
          "37:   error[name].push(issue);",
          "38:  }",
          "40:  const { '': formError = null, ...fieldError } = Object.entries(error).reduce<",
          "41:   Record<string, Array<string> | ErrorShape>",
          "42:  >((result, [name, issues]) => {",
          "43:   result[name] = formatIssues",
          "44:    ? formatIssues(issues, name)",
          "45:    : issues.map((issue) => issue.message);",
          "47:   return result;",
          "48:  }, {});",
          "50:  return {",
          "51:   error: {",
          "52:    formError,",
          "53:    fieldError,",
          "54:   },",
          "55:  };",
          "56: }",
          "",
          "---------------"
        ],
        "playground/app/routes/api.ts||playground/app/routes/api.ts": [
          "File: playground/app/routes/api.ts -> playground/app/routes/api.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { ActionFunctionArgs } from '@remix-run/node';",
          "3: export async function action({ request }: ActionFunctionArgs) {",
          "4:  const data = await request.json();",
          "6:  await new Promise((resolve) => {",
          "7:   const min = 200;",
          "8:   const max = 2000;",
          "9:   setTimeout(resolve, Math.floor(Math.random() * (max - min + 1)) + min);",
          "10:  });",
          "12:  return new Response(JSON.stringify(data));",
          "13: }",
          "",
          "---------------"
        ],
        "playground/app/routes/experimental.tsx||playground/app/routes/experimental.tsx": [
          "File: playground/app/routes/experimental.tsx -> playground/app/routes/experimental.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { type ActionFunctionArgs } from '@remix-run/node';",
          "2: import { z } from 'zod';",
          "3: import { coerceZodFormData, resolveZodResult, memorize } from 'conform-zod';",
          "4: import { Form, useActionData } from '@remix-run/react';",
          "5: import {",
          "6:  useCustomInput,",
          "7:  useFormData,",
          "8:  useForm,",
          "9:  getFormMetadata,",
          "10:  getFieldset,",
          "11:  parseSubmission,",
          "12:  isInput,",
          "13:  report,",
          "16:  applyIntent,",
          "17:  defaultFormControl,",
          "18: } from 'conform-react';",
          "19: import { useMemo, useRef } from 'react';",
          "21: function createSchema(constraint: {",
          "22:  isTitleUnique: (title: string) => Promise<boolean>;",
          "23: }) {",
          "24:  const schema = z.object({",
          "25:   title: z",
          "26:    .string({ required_error: 'Title is required' })",
          "27:    .min(4)",
          "28:    .regex(",
          "29:     /^[a-zA-Z0-9]+$/,",
          "30:     'Invalid title: only letters or numbers are allowed',",
          "31:    )",
          "32:    .pipe(",
          "33:     z.string().refine((title) => constraint.isTitleUnique(title), {",
          "34:      message: 'Title is already used',",
          "35:     }),",
          "36:    ),",
          "37:   content: z.string(),",
          "38:   tasks: z",
          "39:    .array(",
          "40:     z.object({",
          "41:      title: z.string().nonempty(),",
          "42:      done: z.boolean(),",
          "43:     }),",
          "44:    )",
          "45:    .min(1)",
          "46:    .max(3),",
          "47:  });",
          "49:  return coerceZodFormData(schema);",
          "50: }",
          "95: export async function action({ request }: ActionFunctionArgs) {",
          "96:  const formData = await request.formData();",
          "97:  const submission = applyIntent(",
          "98:   parseSubmission(formData, {",
          "99:    intentName: 'intent',",
          "100:   }),",
          "101:  );",
          "102:  const schema = createSchema({",
          "103:   isTitleUnique(title) {",
          "104:    return new Promise((resolve) => {",
          "105:     setTimeout(() => {",
          "106:      resolve(title === 'Test');",
          "107:     }, 1000);",
          "108:    });",
          "109:   },",
          "110:  });",
          "111:  const result = await schema.safeParseAsync(submission.value);",
          "113:  if (!result.success || submission.intent) {",
          "114:   return report(submission, resolveZodResult(result));",
          "115:  }",
          "117:  return report<typeof submission, z.input<typeof schema>>(submission, {",
          "118:   error: {",
          "119:    formError: ['Something went wrong'],",
          "120:   },",
          "121:  });",
          "122: }",
          "124: export default function Example() {",
          "125:  const result = useActionData<typeof action>();",
          "126:  const formRef = useRef<HTMLFormElement>(null);",
          "127:  const schema = useMemo(() => {",
          "128:   const isTitleUnique = memorize(async (title: string) => {",
          "129:    const response = await fetch('/api', {",
          "130:     method: 'POST',",
          "131:     body: JSON.stringify(title),",
          "132:    });",
          "133:    const result = await response.json();",
          "135:    return result === 'Test';",
          "136:   });",
          "138:   return createSchema({",
          "139:    isTitleUnique,",
          "140:   });",
          "141:  }, []);",
          "142:  const { state, handleSubmit, intent } = useForm(formRef, {",
          "143:   result,",
          "144:   intentName: 'intent',",
          "145:   defaultValue: {",
          "146:    title: 'Example',",
          "147:    content: 'Hello World!',",
          "148:    tasks: [{ title: 'Test', done: true }],",
          "149:   },",
          "150:   async onValidate(value) {",
          "151:    const result = await schema.safeParseAsync(value);",
          "153:    return resolveZodResult(result);",
          "154:   },",
          "155:   async onSubmit(event, { submission, formData }) {",
          "156:    event.preventDefault();",
          "158:    const response = await fetch(",
          "159:     '/experimental?_data=routes%2Fexperimental&custom',",
          "160:     {",
          "161:      method: 'POST',",
          "162:      body: formData,",
          "163:     },",
          "164:    );",
          "165:    const result = await response.json();",
          "167:    return report(submission, {",
          "168:     error: result.error,",
          "169:    });",
          "170:   },",
          "171:  });",
          "172:  const form = getFormMetadata(state);",
          "173:  const fields = getFieldset(state);",
          "174:  const title = useFormData(formRef, (formData) =>",
          "175:   formData.get(fields.title.name)?.toString(),",
          "176:  );",
          "177:  const taskFields = fields.tasks.getFieldList();",
          "178:  const titleControl = useCustomInput(fields.title.defaultValue);",
          "180:  return (",
          "181:   <Form",
          "182:    method=\"post\"",
          "183:    ref={formRef}",
          "184:    onSubmit={handleSubmit}",
          "185:    onInput={(event) => {",
          "186:     if (",
          "187:      isInput(event.target, formRef.current) &&",
          "188:      state.touchedFields.includes(event.target.name)",
          "189:     ) {",
          "190:      intent.validate(event.target.name);",
          "191:     }",
          "192:    }}",
          "193:    onBlur={(event) => {",
          "194:     if (",
          "195:      isInput(event.target, formRef.current) &&",
          "196:      !state.touchedFields.includes(event.target.name)",
          "197:     ) {",
          "198:      intent.validate(event.target.name);",
          "199:     }",
          "200:    }}",
          "201:   >",
          "202:    <div>{form.error}</div>",
          "203:    <div>",
          "204:     Title",
          "205:     <input",
          "206:      ref={titleControl.register}",
          "207:      name={fields.title.name}",
          "208:      defaultValue={fields.title.defaultValue}",
          "209:     />",
          "210:     <div>Control: {titleControl.value}</div>",
          "211:     <div>FormData: {title}</div>",
          "212:     <div>{fields.title.error}</div>",
          "213:    </div>",
          "214:    <div>",
          "215:     Content",
          "216:     <textarea",
          "217:      name={fields.content.name}",
          "218:      defaultValue={fields.content.defaultValue}",
          "219:     />",
          "220:     <div>Content Error: {fields.content.error}</div>",
          "221:    </div>",
          "222:    <div>Tasks error: {fields.tasks.error}</div>",
          "223:    {taskFields.map((taskField, index) => {",
          "224:     const task = taskField.getFieldset();",
          "225:     return (",
          "226:      <fieldset key={taskField.key}>",
          "227:       <input",
          "228:        name={task.title.name}",
          "229:        defaultValue={task.title.defaultValue}",
          "230:       />",
          "231:       <div>{task.title.error}</div>",
          "232:       <input",
          "233:        type=\"checkbox\"",
          "234:        name={task.done.name}",
          "235:        defaultChecked={task.done.defaultValue === 'on'}",
          "236:       />",
          "237:       <div>{task.done.error}</div>",
          "238:       <div>",
          "239:        <button",
          "240:         type=\"button\"",
          "241:         onClick={() => {",
          "242:          intent.remove({",
          "243:           name: fields.tasks.name,",
          "244:           index,",
          "245:          });",
          "246:         }}",
          "247:        >",
          "248:         Remove",
          "249:        </button>",
          "250:       </div>",
          "251:       <div>",
          "252:        <button",
          "253:         type=\"button\"",
          "254:         onClick={() => {",
          "255:          intent.reorder({",
          "256:           name: fields.tasks.name,",
          "257:           from: index,",
          "258:           to: 0,",
          "259:          });",
          "260:         }}",
          "261:        >",
          "262:         Move to top",
          "263:        </button>",
          "264:       </div>",
          "265:      </fieldset>",
          "266:     );",
          "267:    })}",
          "268:    <div>",
          "269:     <button",
          "270:      name=\"intent\"",
          "271:      value={defaultFormControl.serializeIntent({",
          "272:       type: 'insert',",
          "273:       payload: {",
          "274:        name: fields.tasks.name,",
          "275:        defaultValue: { title: 'Example' },",
          "276:       },",
          "277:      })}",
          "278:     >",
          "279:      Insert task",
          "280:     </button>",
          "281:    </div>",
          "282:    <div>",
          "283:     <button>Submit</button>",
          "284:    </div>",
          "285:    <div>",
          "286:     <button",
          "287:      type=\"button\"",
          "288:      onClick={() => {",
          "289:       intent.update({",
          "290:        name: fields.title.name,",
          "291:        value: 'Test',",
          "292:       });",
          "293:      }}",
          "294:     >",
          "295:      Update title",
          "296:     </button>",
          "297:    </div>",
          "299:    <div>",
          "300:     <button",
          "301:      name=\"intent\"",
          "302:      value={defaultFormControl.serializeIntent({",
          "303:       type: 'update',",
          "304:       payload: {",
          "305:        value: {",
          "306:         title: 'Update title',",
          "307:         content: 'And the content',",
          "308:        },",
          "309:       },",
          "310:      })}",
          "311:     >",
          "312:      Partial update",
          "313:     </button>",
          "314:    </div>",
          "315:    <div>",
          "316:     <button",
          "317:      type=\"button\"",
          "318:      onClick={() => {",
          "319:       intent.update({",
          "320:        name: fields.title.name,",
          "321:        value: 'Update title in one intent',",
          "322:       });",
          "323:       intent.update({",
          "324:        name: fields.content.name,",
          "325:        value: 'Update content in another intent',",
          "326:       });",
          "327:      }}",
          "328:     >",
          "329:      Multiple updates",
          "330:     </button>",
          "331:    </div>",
          "332:    <div>",
          "333:     <button>Submit</button>",
          "334:    </div>",
          "335:    <div>",
          "336:     <button",
          "337:      type=\"button\"",
          "338:      onClick={() => {",
          "339:       intent.reset();",
          "340:      }}",
          "341:     >",
          "342:      Reset form",
          "343:     </button>",
          "344:    </div>",
          "345:   </Form>",
          "346:  );",
          "347: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}