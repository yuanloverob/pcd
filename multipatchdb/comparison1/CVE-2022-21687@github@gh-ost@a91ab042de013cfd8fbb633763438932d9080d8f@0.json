{
  "cve_id": "CVE-2022-21687",
  "cve_desc": "gh-ost is a triggerless online schema migration solution for MySQL. Versions prior to 1.1.3 are subject to an arbitrary file read vulnerability. The attacker must have access to the target host or trick an administrator into executing a malicious gh-ost command on a host running gh-ost, plus network access from host running gh-ost to the attack's malicious MySQL server. The `-database` parameter does not properly sanitize user input which can lead to arbitrary file reads.",
  "repo": "github/gh-ost",
  "patch_hash": "a91ab042de013cfd8fbb633763438932d9080d8f",
  "patch_info": {
    "commit_hash": "a91ab042de013cfd8fbb633763438932d9080d8f",
    "repo": "github/gh-ost",
    "commit_url": "https://github.com/github/gh-ost/commit/a91ab042de013cfd8fbb633763438932d9080d8f",
    "files": [
      "build.sh",
      "go/cmd/gh-ost/main.go"
    ],
    "message": "Security: fix vulnerability where `-database` parameter accepts arbitrary DSN strings\n\n(cherry picked from commit 4dab3d5a689c6a5727174980071c7f9a563193f1)",
    "before_after_code_files": [
      "build.sh||build.sh",
      "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go"
    ]
  },
  "patch_diff": {
    "build.sh||build.sh": [
      "File: build.sh -> build.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "18:   GOOS=$3",
      "19:   GOARCH=$4",
      "22:     echo \"go version must be 1.15 or above\"",
      "23:     exit 1",
      "24:   fi",
      "",
      "[Removed Lines]",
      "21:   if ! go version | egrep -q 'go(1\\.1[56])' ; then",
      "",
      "[Added Lines]",
      "21:   if ! go version | egrep -q 'go1\\.(1[5-9]|[2-9][0-9]{1})' ; then",
      "",
      "---------------"
    ],
    "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go": [
      "File: go/cmd/gh-ost/main.go -> go/cmd/gh-ost/main.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import (",
      "9:  \"flag\"",
      "10:  \"fmt\"",
      "11:  \"os\"",
      "12:  \"os/signal\"",
      "13:  \"syscall\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11:  \"net/url\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:    log.Fatalf(\"--database must be provided and database name must not be empty, or --alter must specify database name\")",
      "189:   }",
      "190:  }",
      "191:  if migrationContext.OriginalTableName == \"\" {",
      "192:   if parser.HasExplicitTable() {",
      "193:    migrationContext.OriginalTableName = parser.GetExplicitTable()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "193:  if err := flag.Set(\"database\", url.QueryEscape(migrationContext.DatabaseName)); err != nil {",
      "194:   migrationContext.Log.Fatale(err)",
      "195:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a91ab042de013cfd8fbb633763438932d9080d8f",
      "candidate_info": {
        "commit_hash": "a91ab042de013cfd8fbb633763438932d9080d8f",
        "repo": "github/gh-ost",
        "commit_url": "https://github.com/github/gh-ost/commit/a91ab042de013cfd8fbb633763438932d9080d8f",
        "files": [
          "build.sh",
          "go/cmd/gh-ost/main.go"
        ],
        "message": "Security: fix vulnerability where `-database` parameter accepts arbitrary DSN strings\n\n(cherry picked from commit 4dab3d5a689c6a5727174980071c7f9a563193f1)",
        "before_after_code_files": [
          "build.sh||build.sh",
          "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "build.sh||build.sh",
            "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go"
          ],
          "candidate": [
            "build.sh||build.sh",
            "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go"
          ]
        }
      },
      "candidate_diff": {
        "build.sh||build.sh": [
          "File: build.sh -> build.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   GOOS=$3",
          "19:   GOARCH=$4",
          "22:     echo \"go version must be 1.15 or above\"",
          "23:     exit 1",
          "24:   fi",
          "",
          "[Removed Lines]",
          "21:   if ! go version | egrep -q 'go(1\\.1[56])' ; then",
          "",
          "[Added Lines]",
          "21:   if ! go version | egrep -q 'go1\\.(1[5-9]|[2-9][0-9]{1})' ; then",
          "",
          "---------------"
        ],
        "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go": [
          "File: go/cmd/gh-ost/main.go -> go/cmd/gh-ost/main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import (",
          "9:  \"flag\"",
          "10:  \"fmt\"",
          "11:  \"os\"",
          "12:  \"os/signal\"",
          "13:  \"syscall\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"net/url\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:    log.Fatalf(\"--database must be provided and database name must not be empty, or --alter must specify database name\")",
          "189:   }",
          "190:  }",
          "191:  if migrationContext.OriginalTableName == \"\" {",
          "192:   if parser.HasExplicitTable() {",
          "193:    migrationContext.OriginalTableName = parser.GetExplicitTable()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:  if err := flag.Set(\"database\", url.QueryEscape(migrationContext.DatabaseName)); err != nil {",
          "194:   migrationContext.Log.Fatale(err)",
          "195:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4dab3d5a689c6a5727174980071c7f9a563193f1",
      "candidate_info": {
        "commit_hash": "4dab3d5a689c6a5727174980071c7f9a563193f1",
        "repo": "github/gh-ost",
        "commit_url": "https://github.com/github/gh-ost/commit/4dab3d5a689c6a5727174980071c7f9a563193f1",
        "files": [
          "build.sh",
          "go/cmd/gh-ost/main.go"
        ],
        "message": "Security: fix vulnerability where `-database` parameter accepts arbitrary DSN strings",
        "before_after_code_files": [
          "build.sh||build.sh",
          "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "build.sh||build.sh",
            "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go"
          ],
          "candidate": [
            "build.sh||build.sh",
            "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go"
          ]
        }
      },
      "candidate_diff": {
        "build.sh||build.sh": [
          "File: build.sh -> build.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   GOOS=$3",
          "19:   GOARCH=$4",
          "22:     echo \"go version must be 1.15 or above\"",
          "23:     exit 1",
          "24:   fi",
          "",
          "[Removed Lines]",
          "21:   if ! go version | egrep -q 'go(1\\.1[56])' ; then",
          "",
          "[Added Lines]",
          "21:   if ! go version | egrep -q 'go1\\.(1[5-9]|[2-9][0-9]{1})' ; then",
          "",
          "---------------"
        ],
        "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go": [
          "File: go/cmd/gh-ost/main.go -> go/cmd/gh-ost/main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import (",
          "9:  \"flag\"",
          "10:  \"fmt\"",
          "11:  \"os\"",
          "12:  \"os/signal\"",
          "13:  \"syscall\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"net/url\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:    log.Fatalf(\"--database must be provided and database name must not be empty, or --alter must specify database name\")",
          "189:   }",
          "190:  }",
          "191:  if migrationContext.OriginalTableName == \"\" {",
          "192:   if parser.HasExplicitTable() {",
          "193:    migrationContext.OriginalTableName = parser.GetExplicitTable()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:  if err := flag.Set(\"database\", url.QueryEscape(migrationContext.DatabaseName)); err != nil {",
          "194:   migrationContext.Log.Fatale(err)",
          "195:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83413c339ec4601e5a4e0d3e3288bda9b6977170",
      "candidate_info": {
        "commit_hash": "83413c339ec4601e5a4e0d3e3288bda9b6977170",
        "repo": "github/gh-ost",
        "commit_url": "https://github.com/github/gh-ost/commit/83413c339ec4601e5a4e0d3e3288bda9b6977170",
        "files": [
          "build.sh",
          "go/cmd/gh-ost/main.go"
        ],
        "message": "Security: fix vulnerability where `-database` parameter accepts arbitrary DSN strings",
        "before_after_code_files": [
          "build.sh||build.sh",
          "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "build.sh||build.sh",
            "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go"
          ],
          "candidate": [
            "build.sh||build.sh",
            "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go"
          ]
        }
      },
      "candidate_diff": {
        "build.sh||build.sh": [
          "File: build.sh -> build.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   GOOS=$3",
          "19:   GOARCH=$4",
          "22:     echo \"go version must be 1.15 or above\"",
          "23:     exit 1",
          "24:   fi",
          "",
          "[Removed Lines]",
          "21:   if ! go version | egrep -q 'go(1\\.1[56])' ; then",
          "",
          "[Added Lines]",
          "21:   if ! go version | egrep -q 'go1\\.(1[5-9]|[2-9][0-9]{1})' ; then",
          "",
          "---------------"
        ],
        "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go": [
          "File: go/cmd/gh-ost/main.go -> go/cmd/gh-ost/main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import (",
          "9:  \"flag\"",
          "10:  \"fmt\"",
          "11:  \"os\"",
          "12:  \"os/signal\"",
          "13:  \"syscall\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"net/url\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:    log.Fatalf(\"--database must be provided and database name must not be empty, or --alter must specify database name\")",
          "189:   }",
          "190:  }",
          "191:  if migrationContext.OriginalTableName == \"\" {",
          "192:   if parser.HasExplicitTable() {",
          "193:    migrationContext.OriginalTableName = parser.GetExplicitTable()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:  if err := flag.Set(\"database\", url.QueryEscape(migrationContext.DatabaseName)); err != nil {",
          "194:   migrationContext.Log.Fatale(err)",
          "195:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8ccc1152ac0fa82cf9e56217de8452e6adce0b5",
      "candidate_info": {
        "commit_hash": "d8ccc1152ac0fa82cf9e56217de8452e6adce0b5",
        "repo": "github/gh-ost",
        "commit_url": "https://github.com/github/gh-ost/commit/d8ccc1152ac0fa82cf9e56217de8452e6adce0b5",
        "files": [
          "RELEASE_VERSION",
          "build.sh",
          "doc/command-line-flags.md",
          "doc/hooks.md",
          "doc/triggerless-design.md",
          "go/cmd/gh-ost/main.go",
          "script/bootstrap",
          "script/ensure-go-installed",
          "vendor/github.com/siddontang/go-mysql/client/resp.go",
          "vendor/github.com/siddontang/go-mysql/packet/conn.go"
        ],
        "message": "v1.1.3",
        "before_after_code_files": [
          "build.sh||build.sh",
          "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go",
          "vendor/github.com/siddontang/go-mysql/client/resp.go||vendor/github.com/siddontang/go-mysql/client/resp.go",
          "vendor/github.com/siddontang/go-mysql/packet/conn.go||vendor/github.com/siddontang/go-mysql/packet/conn.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "build.sh||build.sh",
            "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go"
          ],
          "candidate": [
            "build.sh||build.sh",
            "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go"
          ]
        }
      },
      "candidate_diff": {
        "build.sh||build.sh": [
          "File: build.sh -> build.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   GOOS=$3",
          "19:   GOARCH=$4",
          "22:     echo \"go version must be 1.15 or above\"",
          "23:     exit 1",
          "24:   fi",
          "",
          "[Removed Lines]",
          "21:   if ! go version | egrep -q 'go(1\\.1[56])' ; then",
          "",
          "[Added Lines]",
          "21:   if ! go version | egrep -q 'go1\\.(1[5-9]|[2-9][0-9]{1})' ; then",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     builddir=$(setuptree)",
          "42:     cp $buildpath/$target $builddir/gh-ost/usr/bin",
          "43:     cd $buildpath",
          "46:   fi",
          "47: }",
          "",
          "[Removed Lines]",
          "44:     fpm -v \"${RELEASE_VERSION}\" --epoch 1 -f -s dir -n gh-ost -m 'shlomi-noach <shlomi-noach+gh-ost-deb@github.com>' --description \"GitHub's Online Schema Migrations for MySQL \" --url \"https://github.com/github/gh-ost\" --vendor \"GitHub\" --license \"Apache 2.0\" -C $builddir/gh-ost --prefix=/ -t rpm --rpm-rpmbuild-define \"_build_id_links none\" .",
          "45:     fpm -v \"${RELEASE_VERSION}\" --epoch 1 -f -s dir -n gh-ost -m 'shlomi-noach <shlomi-noach+gh-ost-deb@github.com>' --description \"GitHub's Online Schema Migrations for MySQL \" --url \"https://github.com/github/gh-ost\" --vendor \"GitHub\" --license \"Apache 2.0\" -C $builddir/gh-ost --prefix=/ -t deb --deb-no-default-config-files .",
          "",
          "[Added Lines]",
          "44:     fpm -v \"${RELEASE_VERSION}\" --epoch 1 -f -s dir -n gh-ost -m 'GitHub' --description \"GitHub's Online Schema Migrations for MySQL \" --url \"https://github.com/github/gh-ost\" --vendor \"GitHub\" --license \"Apache 2.0\" -C $builddir/gh-ost --prefix=/ -t rpm --rpm-rpmbuild-define \"_build_id_links none\" .",
          "45:     fpm -v \"${RELEASE_VERSION}\" --epoch 1 -f -s dir -n gh-ost -m 'GitHub' --description \"GitHub's Online Schema Migrations for MySQL \" --url \"https://github.com/github/gh-ost\" --vendor \"GitHub\" --license \"Apache 2.0\" -C $builddir/gh-ost --prefix=/ -t deb --deb-no-default-config-files .",
          "46:     cd -",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:   mkdir -p ${buildpath}",
          "64:   rm -rf ${buildpath:?}/*",
          "65:   build GNU/Linux linux linux amd64",
          "68:   echo \"Binaries found in:\"",
          "69:   find $buildpath/gh-ost* -type f -maxdepth 1",
          "70: }",
          "72: main \"$@\"",
          "",
          "[Removed Lines]",
          "66:   # build macOS osx darwin amd64",
          "",
          "[Added Lines]",
          "67:   build macOS osx darwin amd64",
          "72:   echo \"Checksums:\"",
          "73:   (cd $buildpath && shasum -a256 gh-ost* 2>/dev/null)",
          "76: . script/bootstrap",
          "77: cd .gopath/src/github.com/github/gh-ost",
          "",
          "---------------"
        ],
        "go/cmd/gh-ost/main.go||go/cmd/gh-ost/main.go": [
          "File: go/cmd/gh-ost/main.go -> go/cmd/gh-ost/main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import (",
          "9:  \"flag\"",
          "10:  \"fmt\"",
          "11:  \"os\"",
          "12:  \"os/signal\"",
          "13:  \"syscall\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"net/url\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:  maxLoad := flag.String(\"max-load\", \"\", \"Comma delimited status-name=threshold. e.g: 'Threads_running=100,Threads_connected=500'. When status exceeds threshold, app throttles writes\")",
          "131:  criticalLoad := flag.String(\"critical-load\", \"\", \"Comma delimited status-name=threshold, same format as --max-load. When status exceeds threshold, app panics and quits\")",
          "132:  flag.Int64Var(&migrationContext.CriticalLoadIntervalMilliseconds, \"critical-load-interval-millis\", 0, \"When 0, migration immediately bails out upon meeting critical-load. When non-zero, a second check is done after given interval, and migration only bails out if 2nd check still meets critical load\")",
          "134:  quiet := flag.Bool(\"quiet\", false, \"quiet\")",
          "135:  verbose := flag.Bool(\"verbose\", false, \"verbose\")",
          "136:  debug := flag.Bool(\"debug\", false, \"debug mode (very verbose)\")",
          "",
          "[Removed Lines]",
          "133:  flag.Int64Var(&migrationContext.CriticalLoadHibernateSeconds, \"critical-load-hibernate-seconds\", 0, \"When nonzero, critical-load does not panic and bail out; instead, gh-ost goes into hibernate for the specified duration. It will not read/write anything to from/to any server\")",
          "",
          "[Added Lines]",
          "134:  flag.Int64Var(&migrationContext.CriticalLoadHibernateSeconds, \"critical-load-hibernate-seconds\", 0, \"When non-zero, critical-load does not panic and bail out; instead, gh-ost goes into hibernation for the specified duration. It will not read/write anything from/to any server\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:    log.Fatalf(\"--database must be provided and database name must not be empty, or --alter must specify database name\")",
          "189:   }",
          "190:  }",
          "191:  if migrationContext.OriginalTableName == \"\" {",
          "192:   if parser.HasExplicitTable() {",
          "193:    migrationContext.OriginalTableName = parser.GetExplicitTable()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:  if err := flag.Set(\"database\", url.QueryEscape(migrationContext.DatabaseName)); err != nil {",
          "194:   migrationContext.Log.Fatale(err)",
          "195:  }",
          "",
          "---------------"
        ],
        "vendor/github.com/siddontang/go-mysql/client/resp.go||vendor/github.com/siddontang/go-mysql/client/resp.go": [
          "File: vendor/github.com/siddontang/go-mysql/client/resp.go -> vendor/github.com/siddontang/go-mysql/client/resp.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package client",
          "4: import (",
          "5:  \"encoding/binary\"",
          "",
          "[Removed Lines]",
          "3: import \"C\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "vendor/github.com/siddontang/go-mysql/packet/conn.go||vendor/github.com/siddontang/go-mysql/packet/conn.go": [
          "File: vendor/github.com/siddontang/go-mysql/packet/conn.go -> vendor/github.com/siddontang/go-mysql/packet/conn.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package packet",
          "4: import (",
          "5:  \"bytes\"",
          "6:  \"io\"",
          "",
          "[Removed Lines]",
          "3: import \"C\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127: func (c *Conn) WriteClearAuthPacket(password string) error {",
          "129:  pktLen := len(password) + 1",
          "133:  copy(data[4:], password)",
          "",
          "[Removed Lines]",
          "130:  data := make([]byte, 4 + pktLen)",
          "",
          "[Added Lines]",
          "129:  data := make([]byte, 4+pktLen)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141: func (c *Conn) WritePublicKeyAuthPacket(password string, cipher []byte) error {",
          "144:  data[4] = 2 // cachingSha2PasswordRequestPublicKey",
          "145:  c.WritePacket(data)",
          "",
          "[Removed Lines]",
          "143:  data := make([]byte, 4 + 1)",
          "",
          "[Added Lines]",
          "142:  data := make([]byte, 4+1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163:  }",
          "164:  sha1v := sha1.New()",
          "165:  enc, _ := rsa.EncryptOAEP(sha1v, rand.Reader, pub.(*rsa.PublicKey), plain, nil)",
          "167:  copy(data[4:], enc)",
          "168:  return c.WritePacket(data)",
          "169: }",
          "",
          "[Removed Lines]",
          "166:  data = make([]byte, 4 + len(enc))",
          "",
          "[Added Lines]",
          "165:  data = make([]byte, 4+len(enc))",
          "",
          "---------------"
        ]
      }
    }
  ]
}