{
  "cve_id": "CVE-2020-35868",
  "cve_desc": "An issue was discovered in the rusqlite crate before 0.23.0 for Rust. Memory safety can be violated via UnlockNotification.",
  "repo": "rusqlite/rusqlite",
  "patch_hash": "45fd77ee43c38eea4d6f4e2e56c1667a55ec654f",
  "patch_info": {
    "commit_hash": "45fd77ee43c38eea4d6f4e2e56c1667a55ec654f",
    "repo": "rusqlite/rusqlite",
    "commit_url": "https://github.com/rusqlite/rusqlite/commit/45fd77ee43c38eea4d6f4e2e56c1667a55ec654f",
    "files": [
      "src/unlock_notify.rs"
    ],
    "message": "UnlockNotification should hold mutex when calling condvar",
    "before_after_code_files": [
      "src/unlock_notify.rs||src/unlock_notify.rs"
    ]
  },
  "patch_diff": {
    "src/unlock_notify.rs||src/unlock_notify.rs": [
      "File: src/unlock_notify.rs -> src/unlock_notify.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:         }",
      "27:     }",
      "31:         self.cond.notify_one();",
      "32:     }",
      "35:         let mut fired = self.mutex.lock().unwrap();",
      "36:         while !*fired {",
      "37:             fired = self.cond.wait(fired).unwrap();",
      "",
      "[Removed Lines]",
      "29:     fn fired(&mut self) {",
      "34:     fn wait(&mut self) {",
      "",
      "[Added Lines]",
      "29:     fn fired(&self) {",
      "30:         let mut flag = self.mutex.lock().unwrap();",
      "35:     fn wait(&self) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43: #[cfg(feature = \"unlock_notify\")]",
      "44: unsafe extern \"C\" fn unlock_notify_cb(ap_arg: *mut *mut c_void, n_arg: c_int) {",
      "45:     use std::slice::from_raw_parts;",
      "52:     }",
      "53: }",
      "",
      "[Removed Lines]",
      "46:     let args = from_raw_parts(ap_arg, n_arg as usize);",
      "47:     for arg in args {",
      "48:         let _ = catch_unwind(|| {",
      "49:             let un: &mut UnlockNotification = &mut *(*arg as *mut UnlockNotification);",
      "50:             un.fired()",
      "51:         });",
      "",
      "[Added Lines]",
      "47:     let args = from_raw_parts(ap_arg as *const &UnlockNotification, n_arg as usize);",
      "48:     for un in args {",
      "49:         let _ = catch_unwind(std::panic::AssertUnwindSafe(|| un.fired()));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "74: #[cfg(feature = \"unlock_notify\")]",
      "75: pub unsafe fn wait_for_unlock_notify(db: *mut ffi::sqlite3) -> c_int {",
      "78:     let rc = ffi::sqlite3_unlock_notify(",
      "79:         db,",
      "80:         Some(unlock_notify_cb),",
      "82:     );",
      "83:     debug_assert!(",
      "84:         rc == ffi::SQLITE_LOCKED || rc == ffi::SQLITE_LOCKED_SHAREDCACHE || rc == ffi::SQLITE_OK",
      "",
      "[Removed Lines]",
      "76:     let mut un = UnlockNotification::new();",
      "81:         &mut un as *mut UnlockNotification as *mut c_void,",
      "",
      "[Added Lines]",
      "74:     let un = UnlockNotification::new();",
      "79:         &un as *const UnlockNotification as *mut c_void,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "53c99f940e3c66e1ec0e7d54456925db1b4c5f07",
      "candidate_info": {
        "commit_hash": "53c99f940e3c66e1ec0e7d54456925db1b4c5f07",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/53c99f940e3c66e1ec0e7d54456925db1b4c5f07",
        "files": [
          "src/backup.rs",
          "src/error.rs",
          "src/hooks.rs",
          "src/inner_connection.rs",
          "src/raw_statement.rs",
          "src/statement.rs",
          "src/unlock_notify.rs"
        ],
        "message": "Fix up conventions around unsafe in internal functions",
        "before_after_code_files": [
          "src/backup.rs||src/backup.rs",
          "src/error.rs||src/error.rs",
          "src/hooks.rs||src/hooks.rs",
          "src/inner_connection.rs||src/inner_connection.rs",
          "src/raw_statement.rs||src/raw_statement.rs",
          "src/statement.rs||src/statement.rs",
          "src/unlock_notify.rs||src/unlock_notify.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unlock_notify.rs||src/unlock_notify.rs"
          ],
          "candidate": [
            "src/unlock_notify.rs||src/unlock_notify.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/backup.rs||src/backup.rs": [
          "File: src/backup.rs -> src/backup.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:         match r {",
          "79:             Done => Ok(()),",
          "82:             More => unreachable!(),",
          "83:         }",
          "84:     }",
          "",
          "[Removed Lines]",
          "80:             Busy => Err(error_from_handle(ptr::null_mut(), ffi::SQLITE_BUSY)),",
          "81:             Locked => Err(error_from_handle(ptr::null_mut(), ffi::SQLITE_LOCKED)),",
          "",
          "[Added Lines]",
          "80:             Busy => Err(unsafe { error_from_handle(ptr::null_mut(), ffi::SQLITE_BUSY) }),",
          "81:             Locked => Err(unsafe { error_from_handle(ptr::null_mut(), ffi::SQLITE_LOCKED) }),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:         match r {",
          "125:             Done => Ok(()),",
          "128:             More => unreachable!(),",
          "129:         }",
          "130:     }",
          "",
          "[Removed Lines]",
          "126:             Busy => Err(error_from_handle(ptr::null_mut(), ffi::SQLITE_BUSY)),",
          "127:             Locked => Err(error_from_handle(ptr::null_mut(), ffi::SQLITE_LOCKED)),",
          "",
          "[Added Lines]",
          "126:             Busy => Err(unsafe { error_from_handle(ptr::null_mut(), ffi::SQLITE_BUSY) }),",
          "127:             Locked => Err(unsafe { error_from_handle(ptr::null_mut(), ffi::SQLITE_LOCKED) }),",
          "",
          "---------------"
        ],
        "src/error.rs||src/error.rs": [
          "File: src/error.rs -> src/error.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:     Error::SqliteFailure(ffi::Error::new(code), message)",
          "358: }",
          "361:     let message = if db.is_null() {",
          "362:         None",
          "363:     } else {",
          "365:     };",
          "366:     error_from_sqlite_code(code, message)",
          "367: }",
          "",
          "[Removed Lines]",
          "360: pub fn error_from_handle(db: *mut ffi::sqlite3, code: c_int) -> Error {",
          "364:         Some(unsafe { errmsg_to_string(ffi::sqlite3_errmsg(db)) })",
          "",
          "[Added Lines]",
          "360: pub unsafe fn error_from_handle(db: *mut ffi::sqlite3, code: c_int) -> Error {",
          "364:         Some(errmsg_to_string(ffi::sqlite3_errmsg(db)))",
          "",
          "---------------"
        ],
        "src/hooks.rs||src/hooks.rs": [
          "File: src/hooks.rs -> src/hooks.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:         let free_commit_hook = if hook.is_some() {",
          "106:         } else {",
          "107:             None",
          "108:         };",
          "",
          "[Removed Lines]",
          "105:             Some(free_boxed_hook::<F> as fn(*mut c_void))",
          "",
          "[Added Lines]",
          "105:             Some(free_boxed_hook::<F> as unsafe fn(*mut c_void))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:         };",
          "123:         if !previous_hook.is_null() {",
          "124:             if let Some(free_boxed_hook) = self.free_commit_hook {",
          "126:             }",
          "127:         }",
          "128:         self.free_commit_hook = free_commit_hook;",
          "",
          "[Removed Lines]",
          "125:                 free_boxed_hook(previous_hook);",
          "",
          "[Added Lines]",
          "125:                 unsafe { free_boxed_hook(previous_hook) };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:         }",
          "145:         let free_rollback_hook = if hook.is_some() {",
          "147:         } else {",
          "148:             None",
          "149:         };",
          "",
          "[Removed Lines]",
          "146:             Some(free_boxed_hook::<F> as fn(*mut c_void))",
          "",
          "[Added Lines]",
          "146:             Some(free_boxed_hook::<F> as unsafe fn(*mut c_void))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163:         };",
          "164:         if !previous_hook.is_null() {",
          "165:             if let Some(free_boxed_hook) = self.free_rollback_hook {",
          "167:             }",
          "168:         }",
          "169:         self.free_rollback_hook = free_rollback_hook;",
          "",
          "[Removed Lines]",
          "166:                 free_boxed_hook(previous_hook);",
          "",
          "[Added Lines]",
          "166:                 unsafe { free_boxed_hook(previous_hook) };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "202:         }",
          "204:         let free_update_hook = if hook.is_some() {",
          "206:         } else {",
          "207:             None",
          "208:         };",
          "",
          "[Removed Lines]",
          "205:             Some(free_boxed_hook::<F> as fn(*mut c_void))",
          "",
          "[Added Lines]",
          "205:             Some(free_boxed_hook::<F> as unsafe fn(*mut c_void))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "222:         };",
          "223:         if !previous_hook.is_null() {",
          "224:             if let Some(free_boxed_hook) = self.free_update_hook {",
          "226:             }",
          "227:         }",
          "228:         self.free_update_hook = free_update_hook;",
          "229:     }",
          "230: }",
          "234: }",
          "236: #[cfg(test)]",
          "",
          "[Removed Lines]",
          "225:                 free_boxed_hook(previous_hook);",
          "232: fn free_boxed_hook<F>(p: *mut c_void) {",
          "233:     drop(unsafe { Box::from_raw(p as *mut F) });",
          "",
          "[Added Lines]",
          "225:                 unsafe { free_boxed_hook(previous_hook) };",
          "232: unsafe fn free_boxed_hook<F>(p: *mut c_void) {",
          "233:     drop(Box::from_raw(p as *mut F));",
          "",
          "---------------"
        ],
        "src/inner_connection.rs||src/inner_connection.rs": [
          "File: src/inner_connection.rs -> src/inner_connection.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     interrupt_lock: Arc<Mutex<*mut ffi::sqlite3>>,",
          "29:     #[cfg(feature = \"hooks\")]",
          "31:     #[cfg(feature = \"hooks\")]",
          "33:     #[cfg(feature = \"hooks\")]",
          "35:     owned: bool,",
          "36: }",
          "38: impl InnerConnection {",
          "39:     #[allow(clippy::mutex_atomic)]",
          "41:         InnerConnection {",
          "42:             db,",
          "43:             interrupt_lock: Arc::new(Mutex::new(db)),",
          "",
          "[Removed Lines]",
          "30:     pub free_commit_hook: Option<fn(*mut ::std::os::raw::c_void)>,",
          "32:     pub free_rollback_hook: Option<fn(*mut ::std::os::raw::c_void)>,",
          "34:     pub free_update_hook: Option<fn(*mut ::std::os::raw::c_void)>,",
          "40:     pub fn new(db: *mut ffi::sqlite3, owned: bool) -> InnerConnection {",
          "",
          "[Added Lines]",
          "30:     pub free_commit_hook: Option<unsafe fn(*mut ::std::os::raw::c_void)>,",
          "32:     pub free_rollback_hook: Option<unsafe fn(*mut ::std::os::raw::c_void)>,",
          "34:     pub free_update_hook: Option<unsafe fn(*mut ::std::os::raw::c_void)>,",
          "40:     pub unsafe fn new(db: *mut ffi::sqlite3, owned: bool) -> InnerConnection {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:     }",
          "129:     pub fn decode_result(&mut self, code: c_int) -> Result<()> {",
          "131:     }",
          "134:         if code == ffi::SQLITE_OK {",
          "135:             Ok(())",
          "136:         } else {",
          "",
          "[Removed Lines]",
          "130:         InnerConnection::decode_result_raw(self.db(), code)",
          "133:     fn decode_result_raw(db: *mut ffi::sqlite3, code: c_int) -> Result<()> {",
          "",
          "[Added Lines]",
          "130:         unsafe { InnerConnection::decode_result_raw(self.db(), code) }",
          "133:     unsafe fn decode_result_raw(db: *mut ffi::sqlite3, code: c_int) -> Result<()> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "229:     }",
          "231:     pub fn prepare<'a>(&mut self, conn: &'a Connection, sql: &str) -> Result<Statement<'a>> {",
          "233:         let (c_sql, len, _) = str_for_sqlite(sql.as_bytes())?;",
          "235:         let r = unsafe {",
          "236:             if cfg!(feature = \"unlock_notify\") {",
          "237:                 let mut rc;",
          "",
          "[Removed Lines]",
          "232:         let mut c_stmt = MaybeUninit::uninit();",
          "234:         let mut c_tail = MaybeUninit::uninit();",
          "",
          "[Added Lines]",
          "232:         let mut c_stmt = ptr::null_mut();",
          "234:         let mut c_tail = ptr::null();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240:                         self.db(),",
          "241:                         c_sql,",
          "242:                         len,",
          "245:                     );",
          "246:                     if !unlock_notify::is_locked(self.db, rc) {",
          "247:                         break;",
          "",
          "[Removed Lines]",
          "243:                         c_stmt.as_mut_ptr(),",
          "244:                         c_tail.as_mut_ptr(),",
          "",
          "[Added Lines]",
          "243:                         &mut c_stmt as *mut *mut ffi::sqlite3_stmt,",
          "244:                         &mut c_tail as *mut *const c_char,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "257:                     self.db(),",
          "258:                     c_sql,",
          "259:                     len,",
          "262:                 )",
          "263:             }",
          "264:         };",
          "",
          "[Removed Lines]",
          "260:                     c_stmt.as_mut_ptr(),",
          "261:                     c_tail.as_mut_ptr(),",
          "",
          "[Added Lines]",
          "260:                     &mut c_stmt as *mut *mut ffi::sqlite3_stmt,",
          "261:                     &mut c_tail as *mut *const c_char,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "266:         self.decode_result(r)?;",
          "272:         let tail = !c_tail.is_null() && unsafe { c_tail != c_sql.offset(len as isize) };",
          "274:     }",
          "276:     pub fn changes(&mut self) -> usize {",
          "",
          "[Removed Lines]",
          "269:         let c_stmt: *mut ffi::sqlite3_stmt = unsafe { c_stmt.assume_init() };",
          "270:         let c_tail: *const c_char = unsafe { c_tail.assume_init() };",
          "273:         Ok(Statement::new(conn, RawStatement::new(c_stmt, tail)))",
          "",
          "[Added Lines]",
          "269:         let c_stmt: *mut ffi::sqlite3_stmt = c_stmt;",
          "270:         let c_tail: *const c_char = c_tail;",
          "273:         Ok(Statement::new(conn, unsafe {",
          "274:             RawStatement::new(c_stmt, tail)",
          "275:         }))",
          "",
          "---------------"
        ],
        "src/raw_statement.rs||src/raw_statement.rs": [
          "File: src/raw_statement.rs -> src/raw_statement.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: pub struct RawStatement(*mut ffi::sqlite3_stmt, bool);",
          "12: impl RawStatement {",
          "14:         RawStatement(stmt, tail)",
          "15:     }",
          "",
          "[Removed Lines]",
          "13:     pub fn new(stmt: *mut ffi::sqlite3_stmt, tail: bool) -> RawStatement {",
          "",
          "[Added Lines]",
          "13:     pub unsafe fn new(stmt: *mut ffi::sqlite3_stmt, tail: bool) -> RawStatement {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:             let mut rc;",
          "65:             loop {",
          "66:                 rc = unsafe { ffi::sqlite3_step(self.0) };",
          "68:                     break;",
          "69:                 }",
          "71:                 if rc != ffi::SQLITE_OK {",
          "72:                     break;",
          "73:                 }",
          "",
          "[Removed Lines]",
          "67:                 if !unlock_notify::is_locked(db, rc) {",
          "70:                 rc = unlock_notify::wait_for_unlock_notify(db);",
          "",
          "[Added Lines]",
          "67:                 if unsafe { !unlock_notify::is_locked(db, rc) } {",
          "70:                 rc = unsafe { unlock_notify::wait_for_unlock_notify(db) };",
          "",
          "---------------"
        ],
        "src/statement.rs||src/statement.rs": [
          "File: src/statement.rs -> src/statement.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "619:     }",
          "621:     fn finalize_(&mut self) -> Result<()> {",
          "623:         mem::swap(&mut stmt, &mut self.stmt);",
          "624:         self.conn.decode_result(stmt.finalize())",
          "625:     }",
          "",
          "[Removed Lines]",
          "622:         let mut stmt = RawStatement::new(ptr::null_mut(), false);",
          "",
          "[Added Lines]",
          "622:         let mut stmt = unsafe { RawStatement::new(ptr::null_mut(), false) };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "711: impl Into<RawStatement> for Statement<'_> {",
          "712:     fn into(mut self) -> RawStatement {",
          "714:         mem::swap(&mut stmt, &mut self.stmt);",
          "715:         stmt",
          "716:     }",
          "",
          "[Removed Lines]",
          "713:         let mut stmt = RawStatement::new(ptr::null_mut(), false);",
          "",
          "[Added Lines]",
          "713:         let mut stmt = unsafe { RawStatement::new(ptr::null_mut(), false) };",
          "",
          "---------------"
        ],
        "src/unlock_notify.rs||src/unlock_notify.rs": [
          "File: src/unlock_notify.rs -> src/unlock_notify.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: }",
          "55: #[cfg(feature = \"unlock_notify\")]",
          "57:     rc == ffi::SQLITE_LOCKED_SHAREDCACHE",
          "58:         || (rc & 0xFF) == ffi::SQLITE_LOCKED",
          "60: }",
          "",
          "[Removed Lines]",
          "56: pub fn is_locked(db: *mut ffi::sqlite3, rc: c_int) -> bool {",
          "59:             && unsafe { ffi::sqlite3_extended_errcode(db) } == ffi::SQLITE_LOCKED_SHAREDCACHE",
          "",
          "[Added Lines]",
          "56: pub unsafe fn is_locked(db: *mut ffi::sqlite3, rc: c_int) -> bool {",
          "59:             && ffi::sqlite3_extended_errcode(db) == ffi::SQLITE_LOCKED_SHAREDCACHE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: #[cfg(feature = \"unlock_notify\")]",
          "76:     let mut un = UnlockNotification::new();",
          "85:     debug_assert!(",
          "86:         rc == ffi::SQLITE_LOCKED || rc == ffi::SQLITE_LOCKED_SHAREDCACHE || rc == ffi::SQLITE_OK",
          "87:     );",
          "",
          "[Removed Lines]",
          "75: pub fn wait_for_unlock_notify(db: *mut ffi::sqlite3) -> c_int {",
          "78:     let rc = unsafe {",
          "79:         ffi::sqlite3_unlock_notify(",
          "80:             db,",
          "81:             Some(unlock_notify_cb),",
          "82:             &mut un as *mut UnlockNotification as *mut c_void,",
          "83:         )",
          "84:     };",
          "",
          "[Added Lines]",
          "75: pub unsafe fn wait_for_unlock_notify(db: *mut ffi::sqlite3) -> c_int {",
          "78:     let rc = ffi::sqlite3_unlock_notify(",
          "79:         db,",
          "80:         Some(unlock_notify_cb),",
          "81:         &mut un as *mut UnlockNotification as *mut c_void,",
          "82:     );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92: }",
          "94: #[cfg(not(feature = \"unlock_notify\"))]",
          "96:     unreachable!()",
          "97: }",
          "99: #[cfg(not(feature = \"unlock_notify\"))]",
          "101:     unreachable!()",
          "102: }",
          "",
          "[Removed Lines]",
          "95: pub fn is_locked(_db: *mut ffi::sqlite3, _rc: c_int) -> bool {",
          "100: pub fn wait_for_unlock_notify(_db: *mut ffi::sqlite3) -> c_int {",
          "",
          "[Added Lines]",
          "93: pub unsafe fn is_locked(_db: *mut ffi::sqlite3, _rc: c_int) -> bool {",
          "98: pub unsafe fn wait_for_unlock_notify(_db: *mut ffi::sqlite3) -> c_int {",
          "",
          "---------------"
        ]
      }
    }
  ]
}