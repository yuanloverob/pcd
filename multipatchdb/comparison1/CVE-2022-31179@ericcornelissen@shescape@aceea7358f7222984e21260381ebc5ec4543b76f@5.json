{
  "cve_id": "CVE-2022-31179",
  "cve_desc": "Shescape is a simple shell escape package for JavaScript. Versions prior to 1.5.8 were found to be subject to code injection on windows. This impacts users that use Shescape (any API function) to escape arguments for cmd.exe on Windows An attacker can omit all arguments following their input by including a line feed character (`'\\n'`) in the payload. This bug has been patched in [v1.5.8] which you can upgrade to now. No further changes are required. Alternatively, line feed characters (`'\\n'`) can be stripped out manually or the user input can be made the last argument (this only limits the impact).",
  "repo": "ericcornelissen/shescape",
  "patch_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
  "patch_info": {
    "commit_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
    "repo": "ericcornelissen/shescape",
    "commit_url": "https://github.com/ericcornelissen/shescape/commit/aceea7358f7222984e21260381ebc5ec4543b76f",
    "files": [
      "CHANGELOG.md",
      "src/unix.js",
      "src/win.js",
      "test/fixtures/unix.cjs",
      "test/fixtures/win.cjs",
      "test/fuzz/_common.cjs",
      "test/fuzz/corpus/036053b103374e82177446b4e083ccb6a22da06e0375582d622632775c8a938a",
      "test/fuzz/corpus/31ed7643aba69fe2d776af3aee587bb7899165af5ed3846c6f70327f2eec4713",
      "test/fuzz/corpus/7ef6c55f814adceff17a05c032ba6ec89483e37addcfd96bd13281f5de6716fa",
      "test/fuzz/corpus/dece2a606846120af17949c2d758b7df475449689d043a04a1ba63953326e5bb",
      "test/fuzz/corpus/f1d97ce94d0c9dd109dc27538786781da634bbed1df58877cac3c44e4344f3dd",
      "test/fuzz/corpus/f28febc41472c437122c2a44b66ccf7dcefdd19876fe4d9370ece44b5b2deb13",
      "test/fuzz/corpus/faf3c25ec7c017c2cc21a5af0f5584557d8a0c7340c68249076a86a2c4ce74fb",
      "test/fuzz/exec.test.cjs",
      "test/unit/_macros.js"
    ],
    "message": "Improve testing and escaping of newlines (#332)\n\n* Don't ignore newlines when fuzzing\n\nUpdate the fuzzing logic to not ignore newline characters anymore. For\nBash, Dash, PowerShell, and Zsh this is reflected by the removal of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nfrom the `exec.test.cjs` fuzz target. For CMD it is (additionally) the\nremoval of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nin the `_common.cjs` fuzz logic.\n\nThe inclusion of newlines in input arguments required some changes to\nthe `getExpectedOutput` function to account for the individual shell's\nhandling of these characters, typically removing them from the start and\nend of the input. (Note: not all changes to `getExpectedOutput` are due\nto this.)\n\n* Update the fuzz corpus\n\n- `31ed764`: contains a trailing forward slash ('\\\\') character that\n  was echod as a double quote ('\"') character by CMD due to carriage\n  return ('\\r') characters not being escaped.\n- `dece2a6`: contains a line feed ('\\n') character and a tilde where the\n  tilde should be escaped but wasn't for Bash.\n- `f28febc`: contains a carriage return ('\\r') character and a tilde\n  where the tilde should be escaped but wasn't for Bash.\n- `faf3c25`: contains a line feed ('\\n') character inside of curly\n  braces where the opening curly bracket should be escaped but wasn't\n  for bash.\n\nThe remaining new items in the fuzz corpus (`036053b`, `71ef6c5`, and\n`f1d97ce`) we're added based on fuzzing with whitespace for PowerShell.\n\n* Update macro for executing fixtures\n\nUpdate the macro for executing fixtures to properly display all the\nwhitespace characters as distinct characters. This is required because\notherwise test names will be considered duplicates.\n\nWhitespace characters with common shorthands are display using that\nshorthand (e.g. '\\n' for line feed). Other characters will be displayed\nby their unicode index (similar to the null character). This has been\nnormalized to the `\\u{hhhh}` notation for consistency where the curly\nbraces are included to improve readability of the test title (clearly\ndemarcating the end of the unicode index from any characters that might\nfollow it).\n\n* Escape newlines for PowerShell\n\nFor PowerShell only line feed ('\\n') and carriage return ('\\r')\ncharacters need to be escaped, and only when `interpolation` is `true`.\nThis is supported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that all character except\nfor line feed ('\\n'), carriage return ('\\r'), and '\\uFEFF' are converted\nto a normal space by PowerShell so it isn't necessary to escape them.\nFor '\\uFEFF', it was found that it is interpreted as is and doesn't\ncause any problems.\n\nThe test fixtures for PowerShell were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for CMD\n\nFor CMD only line feed ('\\n') and carriage return ('\\r') characters need\nto be escaped, but those need to be escaped always. This is supported by\nmanual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n')\ncharacters cause CMD to omit the remaining input;  carriage return\n('\\r') could change the interpretation of certain characters; tab ('\\t')\ncharacters are converted to normal spaces; and all other whitespace\ncharacters are interpreted as is.\n\nThe test fixtures for CMD were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for Bash, Dash, and Zsh\n\nFor the supported Unix shells only the line feed ('\\n') character needs\nto be escaped, and only when `interpolation` is `true`. This is\nsupported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n') and\ncharacters cause the whatever follows it to be interpreted as a new\ncommand; tab ('\\t') characters are converted to normal spaces; and all\nother whitespace characters are interpreted as is.\n\nThe test fixtures for Bash, Dash, and Zsh were updated to include\nexamples where whitespace characters need or need not be escaped.\n\n* Improve escaping of tilde for Bash\n\nFor Bash escape the tilde ('~') character if a line terminating\ncharacter ('\\n', '\\r', '\\u2028', or '\\u2029') appears between and\n\"opening\" equals sign ('=') and a \"closing\" colon-tilde (\":~\"). This\ncase was missed previously because the regular expression `/./` does not\nindeed match all characters, but only those that are not line\nterminating characters (even with the multiline flag). From [1]:\n\n> Note that the m multiline flag doesn't change the dot behavior. So to\n> match a pattern across multiple lines, the character class `[^]` can\n> be used - it will match any character including newlines.\n\nThe test fixtures for Bash were updated to include examples where the\ntilde character should have been escaped but wasn't.\n\n* Improve escaping of curly braces for Bash\n\nFor Bash escape the opening curly brace ('}') character if a line\nterminating character ('\\n', '\\r', '\\u2028', or '\\u2029') appears\nbetween and opening curly brace ('{') and closing curly brace ('}').\nAgain, this case was missed previously because the regular expression\n`/./` does match _all_ characters - instead `/[^]/` is used.\n\nThe test fixtures for Bash were updated to include examples where the\nopening curly brace should have been escaped but wasn't.\n\n* Update CHANGELOG\n\nInclude the fixed bugs in the CHANGELOG.\n\n---\n\n1. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide-\n   /Regular_Expressions/Character_Classes\n2. Sample of a script used for manual testing:\n\n    import { execSync } from \"node:child_process\";\n    import assert from \"node:assert\";\n    import * as shescape from \"shescape\";\n\n    const options = {\n      shell: \"powershell.exe\", // <-- set shell to test here\n      interpolation: true,     // <-- change depending on test\n      encoding: \"utf8\",\n    };\n\n    const whitespaceChars = [\n      \"\\u0009\", \"\\u000A\", \"\\u000B\", \"\\u000C\", \"\\u000D\", \" \", \"\\u0085\",\n      \"\\u00A0\", \"\\u1680\", \"\\u2000\", \"\\u2001\", \"\\u2002\", \"\\u2003\",\n      \"\\u2004\", \"\\u2005\", \"\\u2006\", \"\\u2007\", \"\\u2008\", \"\\u2009\",\n      \"\\u200A\", \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\",\n      \"\\uFEFF\",\n    ];\n\n    for (const char of whitespaceChars) {\n      const userInput = `foo${char}bar`;\n\n      const escapeOutput = execSync(\n        `node test/_echo.js ${shescape.escape(userInput, options)}`,\n        options\n      );\n      // Use this if you don't expect the escaped output to equal the\n      // quote output.\n      //assert.strictEqual(escapeOutput, \"some string\");\n\n      const quoteOutput = execSync(\n        `node test/_echo.js ${shescape.quote(userInput, options)}`,\n        options\n      );\n      assert.strictEqual(escapeOutput, quoteOutput);\n    }",
    "before_after_code_files": [
      "src/unix.js||src/unix.js",
      "src/win.js||src/win.js",
      "test/fixtures/unix.cjs||test/fixtures/unix.cjs",
      "test/fixtures/win.cjs||test/fixtures/win.cjs",
      "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
      "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs",
      "test/unit/_macros.js||test/unit/_macros.js"
    ]
  },
  "patch_diff": {
    "src/unix.js||src/unix.js": [
      "File: src/unix.js -> src/unix.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:   if (interpolation) {",
      "47:     result = result",
      "48:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "49:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "50:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "51:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "52:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "53:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "56:   } else if (quoted) {",
      "57:     result = result.replace(/'/g, `'\\\\''`);",
      "58:   }",
      "",
      "[Removed Lines]",
      "54:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\")",
      "55:       .replace(/(?<=\\=(?:.*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "[Added Lines]",
      "49:       .replace(/\\n/g, \" \")",
      "55:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\")",
      "56:       .replace(/(?<=\\=(?:[^]*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:   if (interpolation) {",
      "75:     result = result",
      "76:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "77:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "78:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "79:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "80:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "81:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "83:   } else if (quoted) {",
      "84:     result = result.replace(/'/g, `'\\\\''`);",
      "85:   }",
      "",
      "[Removed Lines]",
      "82:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\");",
      "",
      "[Added Lines]",
      "78:       .replace(/\\n/g, \" \")",
      "84:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   if (interpolation) {",
      "102:     result = result",
      "103:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "104:       .replace(/(^|\\s)(~|#|=)/g, \"$1\\\\$2\")",
      "105:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "106:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:       .replace(/\\n/g, \" \")",
      "",
      "---------------"
    ],
    "src/win.js||src/win.js": [
      "File: src/win.js -> src/win.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: function escapeArgCmd(arg, interpolation, quoted) {",
      "38:   if (interpolation) {",
      "39:     result = result",
      "",
      "[Removed Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\");",
      "",
      "[Added Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\").replace(/\\n|\\r/g, \" \");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:   if (interpolation) {",
      "66:     result = result",
      "67:       .replace(/(^|\\s)((?:\\*|[1-6])?)(>)/g, \"$1$2`$3\")",
      "68:       .replace(/(^|\\s)(<|@|#|-|\\:|\\])/g, \"$1`$2\")",
      "69:       .replace(/(,|\\;|\\&|\\|)/g, \"`$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:       .replace(/\\n|\\r/g, \" \")",
      "",
      "---------------"
    ],
    "test/fixtures/unix.cjs||test/fixtures/unix.cjs": [
      "File: test/fixtures/unix.cjs -> test/fixtures/unix.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u2000bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u2000bar\",",
      "76:           noInterpolation: \"foo\\u2000bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2001bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2001bar\",",
      "83:           noInterpolation: \"foo\\u2001bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2002bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2002bar\",",
      "90:           noInterpolation: \"foo\\u2002bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2003bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2003bar\",",
      "97:           noInterpolation: \"foo\\u2003bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2004bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2004bar\",",
      "104:           noInterpolation: \"foo\\u2004bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2005bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2005bar\",",
      "111:           noInterpolation: \"foo\\u2005bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2006bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2006bar\",",
      "118:           noInterpolation: \"foo\\u2006bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2007bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2007bar\",",
      "125:           noInterpolation: \"foo\\u2007bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2008bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2008bar\",",
      "132:           noInterpolation: \"foo\\u2008bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2009bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2009bar\",",
      "139:           noInterpolation: \"foo\\u2009bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u200Abar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u200Abar\",",
      "146:           noInterpolation: \"foo\\u200Abar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u2028bar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u2028bar\",",
      "153:           noInterpolation: \"foo\\u2028bar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2029bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2029bar\",",
      "160:           noInterpolation: \"foo\\u2029bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u202Fbar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u202Fbar\",",
      "167:           noInterpolation: \"foo\\u202Fbar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u205Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u205Fbar\",",
      "174:           noInterpolation: \"foo\\u205Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u3000bar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u3000bar\",",
      "181:           noInterpolation: \"foo\\u3000bar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\uFEFFbar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\uFEFFbar\",",
      "188:           noInterpolation: \"foo\\uFEFFbar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\n\\rbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo \\rbar\",",
      "195:           noInterpolation: \"foo\\n\\rbar\",",
      "196:         },",
      "197:       },",
      "198:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "137:         input: \"a=b:~:\",",
      "138:         expected: { interpolation: \"a=b:\\\\~:\", noInterpolation: \"a=b:~:\" },",
      "139:       },",
      "140:       {",
      "141:         input: \"a=b:~:c\",",
      "142:         expected: { interpolation: \"a=b:\\\\~:c\", noInterpolation: \"a=b:~:c\" },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306:       {",
      "307:         input: \"a=\\r:~:\",",
      "308:         expected: { interpolation: \"a=\\r:\\\\~:\", noInterpolation: \"a=\\r:~:\" },",
      "309:       },",
      "310:       {",
      "311:         input: \"a=\\u2028:~:\",",
      "312:         expected: {",
      "313:           interpolation: \"a=\\u2028:\\\\~:\",",
      "314:           noInterpolation: \"a=\\u2028:~:\",",
      "315:         },",
      "316:       },",
      "317:       {",
      "318:         input: \"a=\\u2029:~:\",",
      "319:         expected: {",
      "320:           interpolation: \"a=\\u2029:\\\\~:\",",
      "321:           noInterpolation: \"a=\\u2029:~:\",",
      "322:         },",
      "323:       },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "391:         input: \"a{0..2}b\",",
      "392:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "393:       },",
      "394:     ],",
      "395:     \"angle brackets ('<', '>')\": [",
      "396:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "578:       {",
      "579:         input: \"a{\\u000Db,c}d\",",
      "580:         expected: {",
      "581:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "582:           noInterpolation: \"a{\\u000Db,c}d\",",
      "583:         },",
      "584:       },",
      "585:       {",
      "586:         input: \"a{\\u2028b,c}d\",",
      "587:         expected: {",
      "588:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "589:           noInterpolation: \"a{\\u2028b,c}d\",",
      "590:         },",
      "591:       },",
      "592:       {",
      "593:         input: \"a{\\u2029b,c}d\",",
      "594:         expected: {",
      "595:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "596:           noInterpolation: \"a{\\u2029b,c}d\",",
      "597:         },",
      "598:       },",
      "599:       {",
      "600:         input: \"a{b,c\\u000D}d\",",
      "601:         expected: {",
      "602:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "603:           noInterpolation: \"a{b,c\\u000D}d\",",
      "604:         },",
      "605:       },",
      "606:       {",
      "607:         input: \"a{b,c\\u2028}d\",",
      "608:         expected: {",
      "609:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "610:           noInterpolation: \"a{b,c\\u2028}d\",",
      "611:         },",
      "612:       },",
      "613:       {",
      "614:         input: \"a{b,c\\u2029}d\",",
      "615:         expected: {",
      "616:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "617:           noInterpolation: \"a{b,c\\u2029}d\",",
      "618:         },",
      "619:       },",
      "620:       {",
      "621:         input: \"a{\\u000D0..2}b\",",
      "622:         expected: {",
      "623:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "624:           noInterpolation: \"a{\\u000D0..2}b\",",
      "625:         },",
      "626:       },",
      "627:       {",
      "628:         input: \"a{\\u20280..2}b\",",
      "629:         expected: {",
      "630:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "631:           noInterpolation: \"a{\\u20280..2}b\",",
      "632:         },",
      "633:       },",
      "634:       {",
      "635:         input: \"a{\\u20290..2}b\",",
      "636:         expected: {",
      "637:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "638:           noInterpolation: \"a{\\u20290..2}b\",",
      "639:         },",
      "640:       },",
      "641:       {",
      "642:         input: \"a{0..2\\u000D}b\",",
      "643:         expected: {",
      "644:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "645:           noInterpolation: \"a{0..2\\u000D}b\",",
      "646:         },",
      "647:       },",
      "648:       {",
      "649:         input: \"a{0..2\\u2028}b\",",
      "650:         expected: {",
      "651:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "652:           noInterpolation: \"a{0..2\\u2028}b\",",
      "653:         },",
      "654:       },",
      "655:       {",
      "656:         input: \"a{0..2\\u2029}b\",",
      "657:         expected: {",
      "658:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "659:           noInterpolation: \"a{0..2\\u2029}b\",",
      "660:         },",
      "661:       },",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "439:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "440:       },",
      "441:     ],",
      "442:     'single quotes (\"\\'\")': [",
      "443:       {",
      "444:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "710:     \"whitespace (\\\\s)\": [",
      "711:       {",
      "712:         input: \"foo bar\",",
      "713:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "714:       },",
      "715:       {",
      "716:         input: \"foo\\nbar\",",
      "717:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\vbar\",",
      "721:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "722:       },",
      "723:       {",
      "724:         input: \"foo\\fbar\",",
      "725:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "726:       },",
      "727:       {",
      "728:         input: \"foo\\rbar\",",
      "729:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "730:       },",
      "731:       {",
      "732:         input: \"foo bar\",",
      "733:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "734:       },",
      "735:       {",
      "736:         input: \"foo\\u0085bar\",",
      "737:         expected: {",
      "738:           interpolation: \"foo\\u0085bar\",",
      "739:           noInterpolation: \"foo\\u0085bar\",",
      "740:         },",
      "741:       },",
      "742:       {",
      "743:         input: \"foo\\u00A0bar\",",
      "744:         expected: {",
      "745:           interpolation: \"foo\\u00A0bar\",",
      "746:           noInterpolation: \"foo\\u00A0bar\",",
      "747:         },",
      "748:       },",
      "749:       {",
      "750:         input: \"foo\\u2000bar\",",
      "751:         expected: {",
      "752:           interpolation: \"foo\\u2000bar\",",
      "753:           noInterpolation: \"foo\\u2000bar\",",
      "754:         },",
      "755:       },",
      "756:       {",
      "757:         input: \"foo\\u2001bar\",",
      "758:         expected: {",
      "759:           interpolation: \"foo\\u2001bar\",",
      "760:           noInterpolation: \"foo\\u2001bar\",",
      "761:         },",
      "762:       },",
      "763:       {",
      "764:         input: \"foo\\u2002bar\",",
      "765:         expected: {",
      "766:           interpolation: \"foo\\u2002bar\",",
      "767:           noInterpolation: \"foo\\u2002bar\",",
      "768:         },",
      "769:       },",
      "770:       {",
      "771:         input: \"foo\\u2003bar\",",
      "772:         expected: {",
      "773:           interpolation: \"foo\\u2003bar\",",
      "774:           noInterpolation: \"foo\\u2003bar\",",
      "775:         },",
      "776:       },",
      "777:       {",
      "778:         input: \"foo\\u2004bar\",",
      "779:         expected: {",
      "780:           interpolation: \"foo\\u2004bar\",",
      "781:           noInterpolation: \"foo\\u2004bar\",",
      "782:         },",
      "783:       },",
      "784:       {",
      "785:         input: \"foo\\u2005bar\",",
      "786:         expected: {",
      "787:           interpolation: \"foo\\u2005bar\",",
      "788:           noInterpolation: \"foo\\u2005bar\",",
      "789:         },",
      "790:       },",
      "791:       {",
      "792:         input: \"foo\\u2006bar\",",
      "793:         expected: {",
      "794:           interpolation: \"foo\\u2006bar\",",
      "795:           noInterpolation: \"foo\\u2006bar\",",
      "796:         },",
      "797:       },",
      "798:       {",
      "799:         input: \"foo\\u2007bar\",",
      "800:         expected: {",
      "801:           interpolation: \"foo\\u2007bar\",",
      "802:           noInterpolation: \"foo\\u2007bar\",",
      "803:         },",
      "804:       },",
      "805:       {",
      "806:         input: \"foo\\u2008bar\",",
      "807:         expected: {",
      "808:           interpolation: \"foo\\u2008bar\",",
      "809:           noInterpolation: \"foo\\u2008bar\",",
      "810:         },",
      "811:       },",
      "812:       {",
      "813:         input: \"foo\\u2009bar\",",
      "814:         expected: {",
      "815:           interpolation: \"foo\\u2009bar\",",
      "816:           noInterpolation: \"foo\\u2009bar\",",
      "817:         },",
      "818:       },",
      "819:       {",
      "820:         input: \"foo\\u200Abar\",",
      "821:         expected: {",
      "822:           interpolation: \"foo\\u200Abar\",",
      "823:           noInterpolation: \"foo\\u200Abar\",",
      "824:         },",
      "825:       },",
      "826:       {",
      "827:         input: \"foo\\u2028bar\",",
      "828:         expected: {",
      "829:           interpolation: \"foo\\u2028bar\",",
      "830:           noInterpolation: \"foo\\u2028bar\",",
      "831:         },",
      "832:       },",
      "833:       {",
      "834:         input: \"foo\\u2029bar\",",
      "835:         expected: {",
      "836:           interpolation: \"foo\\u2029bar\",",
      "837:           noInterpolation: \"foo\\u2029bar\",",
      "838:         },",
      "839:       },",
      "840:       {",
      "841:         input: \"foo\\u202Fbar\",",
      "842:         expected: {",
      "843:           interpolation: \"foo\\u202Fbar\",",
      "844:           noInterpolation: \"foo\\u202Fbar\",",
      "845:         },",
      "846:       },",
      "847:       {",
      "848:         input: \"foo\\u205Fbar\",",
      "849:         expected: {",
      "850:           interpolation: \"foo\\u205Fbar\",",
      "851:           noInterpolation: \"foo\\u205Fbar\",",
      "852:         },",
      "853:       },",
      "854:       {",
      "855:         input: \"foo\\u3000bar\",",
      "856:         expected: {",
      "857:           interpolation: \"foo\\u3000bar\",",
      "858:           noInterpolation: \"foo\\u3000bar\",",
      "859:         },",
      "860:       },",
      "861:       {",
      "862:         input: \"foo\\uFEFFbar\",",
      "863:         expected: {",
      "864:           interpolation: \"foo\\uFEFFbar\",",
      "865:           noInterpolation: \"foo\\uFEFFbar\",",
      "866:         },",
      "867:       },",
      "868:       {",
      "869:         input: \"foo\\n\\rbar\",",
      "870:         expected: {",
      "871:           interpolation: \"foo \\rbar\",",
      "872:           noInterpolation: \"foo\\n\\rbar\",",
      "873:         },",
      "874:       },",
      "875:     ],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "800:         input: \"a{0..2}b\",",
      "801:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "802:       },",
      "803:     ],",
      "804:     \"angle brackets ('<', '>')\": [",
      "805:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1237:       {",
      "1238:         input: \"a{\\u000Db,c}d\",",
      "1239:         expected: {",
      "1240:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "1241:           noInterpolation: \"a{\\u000Db,c}d\",",
      "1242:         },",
      "1243:       },",
      "1244:       {",
      "1245:         input: \"a{\\u2028b,c}d\",",
      "1246:         expected: {",
      "1247:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "1248:           noInterpolation: \"a{\\u2028b,c}d\",",
      "1249:         },",
      "1250:       },",
      "1251:       {",
      "1252:         input: \"a{\\u2029b,c}d\",",
      "1253:         expected: {",
      "1254:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "1255:           noInterpolation: \"a{\\u2029b,c}d\",",
      "1256:         },",
      "1257:       },",
      "1258:       {",
      "1259:         input: \"a{b,c\\u000D}d\",",
      "1260:         expected: {",
      "1261:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "1262:           noInterpolation: \"a{b,c\\u000D}d\",",
      "1263:         },",
      "1264:       },",
      "1265:       {",
      "1266:         input: \"a{b,c\\u2028}d\",",
      "1267:         expected: {",
      "1268:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "1269:           noInterpolation: \"a{b,c\\u2028}d\",",
      "1270:         },",
      "1271:       },",
      "1272:       {",
      "1273:         input: \"a{b,c\\u2029}d\",",
      "1274:         expected: {",
      "1275:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "1276:           noInterpolation: \"a{b,c\\u2029}d\",",
      "1277:         },",
      "1278:       },",
      "1279:       {",
      "1280:         input: \"a{\\u000D0..2}b\",",
      "1281:         expected: {",
      "1282:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "1283:           noInterpolation: \"a{\\u000D0..2}b\",",
      "1284:         },",
      "1285:       },",
      "1286:       {",
      "1287:         input: \"a{\\u20280..2}b\",",
      "1288:         expected: {",
      "1289:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "1290:           noInterpolation: \"a{\\u20280..2}b\",",
      "1291:         },",
      "1292:       },",
      "1293:       {",
      "1294:         input: \"a{\\u20290..2}b\",",
      "1295:         expected: {",
      "1296:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "1297:           noInterpolation: \"a{\\u20290..2}b\",",
      "1298:         },",
      "1299:       },",
      "1300:       {",
      "1301:         input: \"a{0..2\\u000D}b\",",
      "1302:         expected: {",
      "1303:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "1304:           noInterpolation: \"a{0..2\\u000D}b\",",
      "1305:         },",
      "1306:       },",
      "1307:       {",
      "1308:         input: \"a{0..2\\u2028}b\",",
      "1309:         expected: {",
      "1310:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "1311:           noInterpolation: \"a{0..2\\u2028}b\",",
      "1312:         },",
      "1313:       },",
      "1314:       {",
      "1315:         input: \"a{0..2\\u2029}b\",",
      "1316:         expected: {",
      "1317:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "1318:           noInterpolation: \"a{0..2\\u2029}b\",",
      "1319:         },",
      "1320:       },",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "848:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "849:       },",
      "850:     ],",
      "851:     'single quotes (\"\\'\")': [",
      "852:       {",
      "853:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1369:     \"whitespace (\\\\s)\": [",
      "1370:       {",
      "1371:         input: \"foo bar\",",
      "1372:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1373:       },",
      "1374:       {",
      "1375:         input: \"foo\\nbar\",",
      "1376:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "1377:       },",
      "1378:       {",
      "1379:         input: \"foo\\vbar\",",
      "1380:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "1381:       },",
      "1382:       {",
      "1383:         input: \"foo\\fbar\",",
      "1384:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "1385:       },",
      "1386:       {",
      "1387:         input: \"foo\\rbar\",",
      "1388:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "1389:       },",
      "1390:       {",
      "1391:         input: \"foo bar\",",
      "1392:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1393:       },",
      "1394:       {",
      "1395:         input: \"foo\\u0085bar\",",
      "1396:         expected: {",
      "1397:           interpolation: \"foo\\u0085bar\",",
      "1398:           noInterpolation: \"foo\\u0085bar\",",
      "1399:         },",
      "1400:       },",
      "1401:       {",
      "1402:         input: \"foo\\u00A0bar\",",
      "1403:         expected: {",
      "1404:           interpolation: \"foo\\u00A0bar\",",
      "1405:           noInterpolation: \"foo\\u00A0bar\",",
      "1406:         },",
      "1407:       },",
      "1408:       {",
      "1409:         input: \"foo\\u2000bar\",",
      "1410:         expected: {",
      "1411:           interpolation: \"foo\\u2000bar\",",
      "1412:           noInterpolation: \"foo\\u2000bar\",",
      "1413:         },",
      "1414:       },",
      "1415:       {",
      "1416:         input: \"foo\\u2001bar\",",
      "1417:         expected: {",
      "1418:           interpolation: \"foo\\u2001bar\",",
      "1419:           noInterpolation: \"foo\\u2001bar\",",
      "1420:         },",
      "1421:       },",
      "1422:       {",
      "1423:         input: \"foo\\u2002bar\",",
      "1424:         expected: {",
      "1425:           interpolation: \"foo\\u2002bar\",",
      "1426:           noInterpolation: \"foo\\u2002bar\",",
      "1427:         },",
      "1428:       },",
      "1429:       {",
      "1430:         input: \"foo\\u2003bar\",",
      "1431:         expected: {",
      "1432:           interpolation: \"foo\\u2003bar\",",
      "1433:           noInterpolation: \"foo\\u2003bar\",",
      "1434:         },",
      "1435:       },",
      "1436:       {",
      "1437:         input: \"foo\\u2004bar\",",
      "1438:         expected: {",
      "1439:           interpolation: \"foo\\u2004bar\",",
      "1440:           noInterpolation: \"foo\\u2004bar\",",
      "1441:         },",
      "1442:       },",
      "1443:       {",
      "1444:         input: \"foo\\u2005bar\",",
      "1445:         expected: {",
      "1446:           interpolation: \"foo\\u2005bar\",",
      "1447:           noInterpolation: \"foo\\u2005bar\",",
      "1448:         },",
      "1449:       },",
      "1450:       {",
      "1451:         input: \"foo\\u2006bar\",",
      "1452:         expected: {",
      "1453:           interpolation: \"foo\\u2006bar\",",
      "1454:           noInterpolation: \"foo\\u2006bar\",",
      "1455:         },",
      "1456:       },",
      "1457:       {",
      "1458:         input: \"foo\\u2007bar\",",
      "1459:         expected: {",
      "1460:           interpolation: \"foo\\u2007bar\",",
      "1461:           noInterpolation: \"foo\\u2007bar\",",
      "1462:         },",
      "1463:       },",
      "1464:       {",
      "1465:         input: \"foo\\u2008bar\",",
      "1466:         expected: {",
      "1467:           interpolation: \"foo\\u2008bar\",",
      "1468:           noInterpolation: \"foo\\u2008bar\",",
      "1469:         },",
      "1470:       },",
      "1471:       {",
      "1472:         input: \"foo\\u2009bar\",",
      "1473:         expected: {",
      "1474:           interpolation: \"foo\\u2009bar\",",
      "1475:           noInterpolation: \"foo\\u2009bar\",",
      "1476:         },",
      "1477:       },",
      "1478:       {",
      "1479:         input: \"foo\\u200Abar\",",
      "1480:         expected: {",
      "1481:           interpolation: \"foo\\u200Abar\",",
      "1482:           noInterpolation: \"foo\\u200Abar\",",
      "1483:         },",
      "1484:       },",
      "1485:       {",
      "1486:         input: \"foo\\u2028bar\",",
      "1487:         expected: {",
      "1488:           interpolation: \"foo\\u2028bar\",",
      "1489:           noInterpolation: \"foo\\u2028bar\",",
      "1490:         },",
      "1491:       },",
      "1492:       {",
      "1493:         input: \"foo\\u2029bar\",",
      "1494:         expected: {",
      "1495:           interpolation: \"foo\\u2029bar\",",
      "1496:           noInterpolation: \"foo\\u2029bar\",",
      "1497:         },",
      "1498:       },",
      "1499:       {",
      "1500:         input: \"foo\\u202Fbar\",",
      "1501:         expected: {",
      "1502:           interpolation: \"foo\\u202Fbar\",",
      "1503:           noInterpolation: \"foo\\u202Fbar\",",
      "1504:         },",
      "1505:       },",
      "1506:       {",
      "1507:         input: \"foo\\u205Fbar\",",
      "1508:         expected: {",
      "1509:           interpolation: \"foo\\u205Fbar\",",
      "1510:           noInterpolation: \"foo\\u205Fbar\",",
      "1511:         },",
      "1512:       },",
      "1513:       {",
      "1514:         input: \"foo\\u3000bar\",",
      "1515:         expected: {",
      "1516:           interpolation: \"foo\\u3000bar\",",
      "1517:           noInterpolation: \"foo\\u3000bar\",",
      "1518:         },",
      "1519:       },",
      "1520:       {",
      "1521:         input: \"foo\\uFEFFbar\",",
      "1522:         expected: {",
      "1523:           interpolation: \"foo\\uFEFFbar\",",
      "1524:           noInterpolation: \"foo\\uFEFFbar\",",
      "1525:         },",
      "1526:       },",
      "1527:       {",
      "1528:         input: \"foo\\n\\rbar\",",
      "1529:         expected: {",
      "1530:           interpolation: \"foo \\rbar\",",
      "1531:           noInterpolation: \"foo\\n\\rbar\",",
      "1532:         },",
      "1533:       },",
      "1534:     ],",
      "",
      "---------------"
    ],
    "test/fixtures/win.cjs||test/fixtures/win.cjs": [
      "File: test/fixtures/win.cjs -> test/fixtures/win.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u1680bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u1680bar\",",
      "76:           noInterpolation: \"foo\\u1680bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2000bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2000bar\",",
      "83:           noInterpolation: \"foo\\u2000bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2001bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2001bar\",",
      "90:           noInterpolation: \"foo\\u2001bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2002bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2002bar\",",
      "97:           noInterpolation: \"foo\\u2002bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2003bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2003bar\",",
      "104:           noInterpolation: \"foo\\u2003bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2004bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2004bar\",",
      "111:           noInterpolation: \"foo\\u2004bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2005bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2005bar\",",
      "118:           noInterpolation: \"foo\\u2005bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2006bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2006bar\",",
      "125:           noInterpolation: \"foo\\u2006bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2007bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2007bar\",",
      "132:           noInterpolation: \"foo\\u2007bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2008bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2008bar\",",
      "139:           noInterpolation: \"foo\\u2008bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u2009bar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u2009bar\",",
      "146:           noInterpolation: \"foo\\u2009bar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u200Abar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u200Abar\",",
      "153:           noInterpolation: \"foo\\u200Abar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2028bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2028bar\",",
      "160:           noInterpolation: \"foo\\u2028bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u2029bar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u2029bar\",",
      "167:           noInterpolation: \"foo\\u2029bar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u202Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u202Fbar\",",
      "174:           noInterpolation: \"foo\\u202Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u205Fbar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u205Fbar\",",
      "181:           noInterpolation: \"foo\\u205Fbar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\u3000bar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\u3000bar\",",
      "188:           noInterpolation: \"foo\\u3000bar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\uFEFFbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo\\uFEFFbar\",",
      "195:           noInterpolation: \"foo\\uFEFFbar\",",
      "196:         },",
      "197:       },",
      "198:       {",
      "199:         input: \"foo\\n\\rbar\",",
      "200:         expected: {",
      "201:           interpolation: \"foo  bar\",",
      "202:           noInterpolation: \"foo  bar\",",
      "203:         },",
      "204:       },",
      "205:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "399:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "400:       },",
      "401:     ],",
      "402:     'single quotes (\"\\'\")': [",
      "403:       {",
      "404:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "575:     \"whitespace (\\\\s)\": [",
      "576:       {",
      "577:         input: \"foo bar\",",
      "578:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "579:       },",
      "580:       {",
      "581:         input: \"foo\\nbar\",",
      "582:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "583:       },",
      "584:       {",
      "585:         input: \"foo\\vbar\",",
      "586:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "587:       },",
      "588:       {",
      "589:         input: \"foo\\fbar\",",
      "590:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "591:       },",
      "592:       {",
      "593:         input: \"foo\\rbar\",",
      "594:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\rbar\" },",
      "595:       },",
      "596:       {",
      "597:         input: \"foo bar\",",
      "598:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "599:       },",
      "600:       {",
      "601:         input: \"foo\\u0085bar\",",
      "602:         expected: {",
      "603:           interpolation: \"foo\\u0085bar\",",
      "604:           noInterpolation: \"foo\\u0085bar\",",
      "605:         },",
      "606:       },",
      "607:       {",
      "608:         input: \"foo\\u00A0bar\",",
      "609:         expected: {",
      "610:           interpolation: \"foo\\u00A0bar\",",
      "611:           noInterpolation: \"foo\\u00A0bar\",",
      "612:         },",
      "613:       },",
      "614:       {",
      "615:         input: \"foo\\u1680bar\",",
      "616:         expected: {",
      "617:           interpolation: \"foo\\u1680bar\",",
      "618:           noInterpolation: \"foo\\u1680bar\",",
      "619:         },",
      "620:       },",
      "621:       {",
      "622:         input: \"foo\\u2000bar\",",
      "623:         expected: {",
      "624:           interpolation: \"foo\\u2000bar\",",
      "625:           noInterpolation: \"foo\\u2000bar\",",
      "626:         },",
      "627:       },",
      "628:       {",
      "629:         input: \"foo\\u2001bar\",",
      "630:         expected: {",
      "631:           interpolation: \"foo\\u2001bar\",",
      "632:           noInterpolation: \"foo\\u2001bar\",",
      "633:         },",
      "634:       },",
      "635:       {",
      "636:         input: \"foo\\u2002bar\",",
      "637:         expected: {",
      "638:           interpolation: \"foo\\u2002bar\",",
      "639:           noInterpolation: \"foo\\u2002bar\",",
      "640:         },",
      "641:       },",
      "642:       {",
      "643:         input: \"foo\\u2003bar\",",
      "644:         expected: {",
      "645:           interpolation: \"foo\\u2003bar\",",
      "646:           noInterpolation: \"foo\\u2003bar\",",
      "647:         },",
      "648:       },",
      "649:       {",
      "650:         input: \"foo\\u2004bar\",",
      "651:         expected: {",
      "652:           interpolation: \"foo\\u2004bar\",",
      "653:           noInterpolation: \"foo\\u2004bar\",",
      "654:         },",
      "655:       },",
      "656:       {",
      "657:         input: \"foo\\u2005bar\",",
      "658:         expected: {",
      "659:           interpolation: \"foo\\u2005bar\",",
      "660:           noInterpolation: \"foo\\u2005bar\",",
      "661:         },",
      "662:       },",
      "663:       {",
      "664:         input: \"foo\\u2006bar\",",
      "665:         expected: {",
      "666:           interpolation: \"foo\\u2006bar\",",
      "667:           noInterpolation: \"foo\\u2006bar\",",
      "668:         },",
      "669:       },",
      "670:       {",
      "671:         input: \"foo\\u2007bar\",",
      "672:         expected: {",
      "673:           interpolation: \"foo\\u2007bar\",",
      "674:           noInterpolation: \"foo\\u2007bar\",",
      "675:         },",
      "676:       },",
      "677:       {",
      "678:         input: \"foo\\u2008bar\",",
      "679:         expected: {",
      "680:           interpolation: \"foo\\u2008bar\",",
      "681:           noInterpolation: \"foo\\u2008bar\",",
      "682:         },",
      "683:       },",
      "684:       {",
      "685:         input: \"foo\\u2009bar\",",
      "686:         expected: {",
      "687:           interpolation: \"foo\\u2009bar\",",
      "688:           noInterpolation: \"foo\\u2009bar\",",
      "689:         },",
      "690:       },",
      "691:       {",
      "692:         input: \"foo\\u200Abar\",",
      "693:         expected: {",
      "694:           interpolation: \"foo\\u200Abar\",",
      "695:           noInterpolation: \"foo\\u200Abar\",",
      "696:         },",
      "697:       },",
      "698:       {",
      "699:         input: \"foo\\u2028bar\",",
      "700:         expected: {",
      "701:           interpolation: \"foo\\u2028bar\",",
      "702:           noInterpolation: \"foo\\u2028bar\",",
      "703:         },",
      "704:       },",
      "705:       {",
      "706:         input: \"foo\\u2029bar\",",
      "707:         expected: {",
      "708:           interpolation: \"foo\\u2029bar\",",
      "709:           noInterpolation: \"foo\\u2029bar\",",
      "710:         },",
      "711:       },",
      "712:       {",
      "713:         input: \"foo\\u202Fbar\",",
      "714:         expected: {",
      "715:           interpolation: \"foo\\u202Fbar\",",
      "716:           noInterpolation: \"foo\\u202Fbar\",",
      "717:         },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\u205Fbar\",",
      "721:         expected: {",
      "722:           interpolation: \"foo\\u205Fbar\",",
      "723:           noInterpolation: \"foo\\u205Fbar\",",
      "724:         },",
      "725:       },",
      "726:       {",
      "727:         input: \"foo\\u3000bar\",",
      "728:         expected: {",
      "729:           interpolation: \"foo\\u3000bar\",",
      "730:           noInterpolation: \"foo\\u3000bar\",",
      "731:         },",
      "732:       },",
      "733:       {",
      "734:         input: \"foo\\uFEFFbar\",",
      "735:         expected: {",
      "736:           interpolation: \"foo\\uFEFFbar\",",
      "737:           noInterpolation: \"foo\\uFEFFbar\",",
      "738:         },",
      "739:       },",
      "740:       {",
      "741:         input: \"foo\\n\\rbar\",",
      "742:         expected: {",
      "743:           interpolation: \"foo  bar\",",
      "744:           noInterpolation: \"foo\\n\\rbar\",",
      "745:         },",
      "746:       },",
      "747:     ],",
      "",
      "---------------"
    ],
    "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
      "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: }",
      "27: function getExpectedOutput({ arg, shell }, normalizeWhitespace) {",
      "32:   arg = arg.replace(/\\u{0}/gu, \"\"); // Remove null characters, like Shescape",
      "34:   if (normalizeWhitespace) {",
      "37:     if (isShellPowerShell(shell)) {",
      "39:     } else {",
      "41:     }",
      "44:     if (isShellPowerShell(shell)) {",
      "46:     } else {",
      "48:     }",
      "49:   }",
      "",
      "[Removed Lines]",
      "28:   if (isShellCmd(shell)) {",
      "29:     arg = arg.replace(/[\\n\\r]+/g, \"\"); // Remove newline characters, like prep",
      "30:   }",
      "38:       arg = arg.replace(/^[\\s\\u0085]+|[\\s\\u0085]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t]+|[ \\t]+$/g, \"\");",
      "45:       arg = arg.replace(/(\\s|\\u0085)+/g, \" \");",
      "47:       arg = arg.replace(/[ \\t]+/g, \" \");",
      "",
      "[Added Lines]",
      "33:       arg = arg.replace(",
      "34:         /^[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+|[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+$/g,",
      "35:         \"\"",
      "36:       );",
      "37:     } else if (isShellCmd(shell)) {",
      "38:       arg = arg.replace(/^[ \\t\\n\\r]+|[ \\t\\n\\r]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t\\n]+|[ \\t\\n]+$/g, \"\");",
      "45:       arg = arg.replace(",
      "46:         /[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+/g,",
      "47:         \" \"",
      "48:       );",
      "49:     } else if (isShellCmd(shell)) {",
      "50:       arg = arg.replace(/[ \\t\\n\\r]+/g, \" \");",
      "52:       arg = arg.replace(/[ \\t\\n]+/g, \" \");",
      "53:     }",
      "54:   } else {",
      "55:     if (isShellCmd(shell)) {",
      "56:       arg = arg.replace(/[\\n\\r]/g, \" \"); // Change newlines to spaces, like Shescape",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57: }",
      "59: function prepareArg({ arg, quoted, shell }, disableExtraWindowsPreparations) {",
      "66:   if (isWindows() && !disableExtraWindowsPreparations) {",
      "68:     if (isShellCmd(shell)) {",
      "",
      "[Removed Lines]",
      "60:   if (isShellCmd(shell)) {",
      "63:     arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "64:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs": [
      "File: test/fuzz/exec.test.cjs -> test/fuzz/exec.test.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: }",
      "45: function checkWithoutShellUsingInterpolation(arg) {",
      "48:   const argInfo = { arg, shell: undefined, quoted: false };",
      "50:   const preparedArg = common.prepareArg(argInfo);",
      "",
      "[Removed Lines]",
      "46:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60: }",
      "62: function checkWithShellUsingInterpolation(arg) {",
      "65:   const shell = common.getFuzzShell() || true;",
      "66:   const argInfo = { arg, shell, quoted: false };",
      "67:   const execOptions = { shell };",
      "",
      "[Removed Lines]",
      "63:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/unit/_macros.js||test/unit/_macros.js": [
      "File: test/unit/_macros.js -> test/unit/_macros.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:     t.is(actual, expected);",
      "29:   },",
      "30:   title(_, { input, interpolation, quoted, shellName }) {",
      "32:     interpolation = interpolation ? \"interpolation\" : \"no interpolation\";",
      "33:     quoted = quoted ? \"quoted\" : \"not quoted\";",
      "",
      "[Removed Lines]",
      "31:     input = input.replace(/\\u{0}/gu, \"\\\\x00\").replace(/\\t/g, \"\\\\t\");",
      "",
      "[Added Lines]",
      "31:     input = input",
      "32:       .replace(/\\u0000/g, \"\\\\u{0000}\")",
      "33:       .replace(/\\u0009/g, \"\\\\t\")",
      "34:       .replace(/\\u000A/g, \"\\\\n\")",
      "35:       .replace(/\\u000B/g, \"\\\\v\")",
      "36:       .replace(/\\u000C/g, \"\\\\f\")",
      "37:       .replace(/\\u000D/g, \"\\\\r\")",
      "38:       .replace(/\\u0085/g, \"\\\\u{0085}\")",
      "39:       .replace(/\\u00A0/g, \"\\\\u{00A0}\")",
      "40:       .replace(/\\u1680/g, \"\\\\u{1680}\")",
      "41:       .replace(/\\u2000/g, \"\\\\u{2000}\")",
      "42:       .replace(/\\u2001/g, \"\\\\u{2001}\")",
      "43:       .replace(/\\u2002/g, \"\\\\u{2002}\")",
      "44:       .replace(/\\u2003/g, \"\\\\u{2003}\")",
      "45:       .replace(/\\u2004/g, \"\\\\u{2004}\")",
      "46:       .replace(/\\u2005/g, \"\\\\u{2005}\")",
      "47:       .replace(/\\u2006/g, \"\\\\u{2006}\")",
      "48:       .replace(/\\u2007/g, \"\\\\u{2007}\")",
      "49:       .replace(/\\u2008/g, \"\\\\u{2008}\")",
      "50:       .replace(/\\u2009/g, \"\\\\u{2009}\")",
      "51:       .replace(/\\u200A/g, \"\\\\u{200A}\")",
      "52:       .replace(/\\u2028/g, \"\\\\u{2028}\")",
      "53:       .replace(/\\u2029/g, \"\\\\u{2029}\")",
      "54:       .replace(/\\u202F/g, \"\\\\u{202F}\")",
      "55:       .replace(/\\u205F/g, \"\\\\u{205F}\")",
      "56:       .replace(/\\u3000/g, \"\\\\u{3000}\")",
      "57:       .replace(/\\uFEFF/g, \"\\\\u{FEFF}\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "91f1aa9054efef1fcbfa140ed5b81a04ff155310",
      "candidate_info": {
        "commit_hash": "91f1aa9054efef1fcbfa140ed5b81a04ff155310",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/91f1aa9054efef1fcbfa140ed5b81a04ff155310",
        "files": [
          ".eslintrc.yml",
          "package-lock.json",
          "package.json",
          "src/main.js",
          "src/unix.js",
          "src/win.js",
          "test/integration/_macros.js"
        ],
        "message": "Bump eslint-plugin-jsdoc from 40.3.0 to 41.1.1 (#808)\n\n* Bump eslint-plugin-jsdoc from 40.3.0 to 41.1.1\n\nBumps [eslint-plugin-jsdoc](https://github.com/gajus/eslint-plugin-jsdoc) from 40.3.0 to 41.1.1.\n- [Release notes](https://github.com/gajus/eslint-plugin-jsdoc/releases)\n- [Changelog](https://github.com/gajus/eslint-plugin-jsdoc/blob/main/.releaserc)\n- [Commits](https://github.com/gajus/eslint-plugin-jsdoc/compare/v40.3.0...v41.1.1)\n\n---\nupdated-dependencies:\n- dependency-name: eslint-plugin-jsdoc\n  dependency-type: direct:development\n  update-type: version-update:semver-major\n...\n\n* Update ESLint configuration\n\nEnable the in 41.1.0 of eslint-plugin-jsdoc rule `informative-docs` [1]\nwhich aims to detect and report on documentation that's trivial/does not\nadd anything beyond the names in the source code. It has been enabled\nwith the goal of having better documentation. It has been configured\nexplicitly to allow for easier adjustment based on need in the future.\n\n* Improve documentation based on `jsdoc/informative-docs` violations\n\nNote: all documentation changes are internal. This does not affect end\nusers so does not need to be recorded in the changelog.\n\n---------\n\n1. https://github.com/gajus/eslint-plugin-jsdoc/tree/cd01546#informative-docs\n\n---------\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\nCo-authored-by: Eric Cornelissen <ericornelissen@gmail.com>",
        "before_after_code_files": [
          "src/main.js||src/main.js",
          "src/unix.js||src/unix.js",
          "src/win.js||src/win.js",
          "test/integration/_macros.js||test/integration/_macros.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js"
          ]
        }
      },
      "candidate_diff": {
        "src/main.js||src/main.js": [
          "File: src/main.js -> src/main.js"
        ],
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js"
        ],
        "test/integration/_macros.js||test/integration/_macros.js": [
          "File: test/integration/_macros.js -> test/integration/_macros.js"
        ]
      }
    },
    {
      "candidate_hash": "7a4fa93db29f5e19a23ecf9cfb802fc69dbbf7bf",
      "candidate_info": {
        "commit_hash": "7a4fa93db29f5e19a23ecf9cfb802fc69dbbf7bf",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/7a4fa93db29f5e19a23ecf9cfb802fc69dbbf7bf",
        "files": [
          "test/fuzz/_common.cjs",
          "test/fuzz/corpus/377f0b03272b8e006a7ba3fb993328a87e7914075caae18209c7c8c1be205e14",
          "test/fuzz/corpus/38af29e913078ad07fc8d4156c2dfa3942e159bfcebe18e7e562ea3d82fce781",
          "test/fuzz/corpus/74cd192a0b85f46497a85e0b229630c55c306ce8904ca3d7e362c0ad81fa1088",
          "test/fuzz/corpus/bb9310963784ca202fd80f96f12a3cd13ee11f96a226d7cff5a921902a6b6324",
          "test/fuzz/corpus/cb41f974ee87bf382bc82a4e275bea2ffb99d9bb8d502826f5b6d231250e20b7",
          "test/fuzz/corpus/ec246439c059f17f708aa39f76f88ec8d8eaee7ccca2f07d4c09ef57ae6503d8",
          "test/fuzz/corpus/f5520c691959b1105525b46c01e6055916ea029f439a5ccefd17b03742adef64",
          "test/fuzz/exec.test.cjs",
          "test/fuzz/execFile.test.cjs",
          "test/fuzz/fork.test.cjs",
          "test/fuzz/spawn.test.cjs"
        ],
        "message": "Improve fuzz targets (#318)\n\n* Stop not dealing with newlines for most fuzzing\n\nUpdate most fuzz targets so that they now try out arguments containing\nnewlines. The exceptions to this are the fuzz targets with interpolation\nset to true, these still ignore newlines (this is because in this\nscenario newlines are not handled well yet, further work required); and\nwhenever fuzzing with cmd.exe (this is because cmd.exe does not handle\nnewlines well even when arguments are quoted, further work required) (a\nitem, \"ec246439...\", was added to the fuzz corpus for this).\n\n* Align exec fuzz target with exec/execSync recipes\n\nExpand the fuzz target for child_process.exec to include a check for\nusage without having a shell specified (both with and without the\ninterpolation option set). Also, be more methodical about the checks,\nfollowing the \"design\" of the other fuzz targets.\n\n* Fix incorrect argument preparation and expected output\n\nUpdate the `prepareArg` and `getExpectedOutput` to take more inputs to\nbetter understand how to respond. In particular, the inclusion of the\n`shell` value ensures the correct return value is provided when a shell\n**is** configured for fuzzing, but the particular fuzz check intents to\ntest without specifying a shell.\n\n* Stop not dealing with (most) whitespace for most fuzzing interpolation\n\nUpdate the fuzz checks that set interpolation to true to mostly start\nfuzzing with whitespace, except for newline (see first paragraph). This\nrequired some changes to the implementation (fixed in other branches\nmerged prior to this one). Multiple fuzz targets where added as a result\nof this, namely:\n\n- Related to whitespace between arguments\n  - \"377f0b03272b8e006a7ba3fb993328a87e7914075caae18209c7c8c1be205e14\"\n  - \"38af29e913078ad07fc8d4156c2dfa3942e159bfcebe18e7e562ea3d82fce781\"\n  - \"cb41f974ee87bf382bc82a4e275bea2ffb99d9bb8d502826f5b6d231250e20b7\"\n- Related to (shell-dependent) special characters after whitespace\n  - \"74cd192a0b85f46497a85e0b229630c55c306ce8904ca3d7e362c0ad81fa1088\"\n  - \"ec246439c059f17f708aa39f76f88ec8d8eaee7ccca2f07d4c09ef57ae6503d8\"\n- Related to trimming whitespace at the start and end of the argumens\n  - \"bb9310963784ca202fd80f96f12a3cd13ee11f96a226d7cff5a921902a6b6324\"\n  - \"f5520c691959b1105525b46c01e6055916ea029f439a5ccefd17b03742adef64\"",
        "before_after_code_files": [
          "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
          "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs",
          "test/fuzz/execFile.test.cjs||test/fuzz/execFile.test.cjs",
          "test/fuzz/fork.test.cjs||test/fuzz/fork.test.cjs",
          "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
            "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs"
          ],
          "candidate": [
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
            "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs"
          ]
        }
      },
      "candidate_diff": {
        "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: const constants = require(\"../_constants.cjs\");",
          "13: const ECHO_SCRIPT = constants.echoScript;",
          "23: }",
          "25: function getFuzzShell() {",
          "26:   return process.env.FUZZ_SHELL;",
          "27: }",
          "38:   if (isWindows() && !disableExtraWindowsPreparations) {",
          "42:       if (quoted) {",
          "46:       } else {",
          "52:       }",
          "64:       } else {",
          "73:       }",
          "74:     }",
          "75:   }",
          "78: }",
          "80: module.exports = {",
          "81:   ECHO_SCRIPT,",
          "83:   getExpectedOutput,",
          "84:   getFuzzShell,",
          "85:   prepareArg,",
          "",
          "[Removed Lines]",
          "14: const WHITESPACE_REGEX = /\\s|\\u0085/gu;",
          "16: function getExpectedOutput(arg) {",
          "17:   return (",
          "18:     arg",
          "19:       .replace(/[\\n\\r]+/g, \"\") // Avoid dealing with newlines",
          "20:       .replace(/\\u{0}/gu, \"\") + // Remove null characters",
          "21:     \"\\n\" // Append a newline, like the echo script",
          "22:   );",
          "29: function prepareArg(arg, quoted, disableExtraWindowsPreparations) {",
          "30:   WHITESPACE_REGEX.lastIndex = 0;",
          "32:   const shell = getFuzzShell();",
          "33:   const isWindows = () => os.platform() === \"win32\";",
          "34:   const isShellCmd = () => shell === undefined || /cmd\\.exe$/.test(shell);",
          "35:   const isShellPowerShell = () => /powershell\\.exe$/.test(shell);",
          "37:   let result = arg.replace(/[\\n\\r]+/g, \"\"); // Avoid dealing with newlines",
          "40:     if (isShellCmd()) {",
          "45:         result = result.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*(\"|$))/gu, \"$1$1\");",
          "48:         result = result.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*\")/gu, \"$1$1\");",
          "51:         result = result.replace(/\"/g, `\\\\\"`);",
          "53:     } else if (isShellPowerShell()) {",
          "56:       if (WHITESPACE_REGEX.test(result)) {",
          "59:         result = result.replace(/\"/g, `\"\"`);",
          "63:         result = result.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*(\"|$))/gu, \"$1$1\");",
          "68:         result = result.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*(\"))/gu, \"$1$1\");",
          "72:         result = result.replace(/\"/g, `\\\\\"`);",
          "77:   return result;",
          "82:   WHITESPACE_REGEX,",
          "",
          "[Added Lines]",
          "15: function isWindows() {",
          "16:   return os.platform() === \"win32\";",
          "17: }",
          "19: function isShellCmd(shell) {",
          "20:   return (isWindows() && shell === undefined) || /cmd\\.exe$/.test(shell);",
          "21: }",
          "23: function isShellPowerShell(shell) {",
          "24:   return /powershell\\.exe$/.test(shell);",
          "25: }",
          "27: function getExpectedOutput({ arg, shell }, normalizeWhitespace) {",
          "28:   if (isShellCmd(shell)) {",
          "29:     arg = arg.replace(/[\\n\\r]+/g, \"\"); // Remove newline characters, like prep",
          "30:   }",
          "32:   arg = arg.replace(/\\u{0}/gu, \"\"); // Remove null characters, like Shescape",
          "34:   if (normalizeWhitespace) {",
          "37:     if (isShellPowerShell(shell)) {",
          "38:       arg = arg.replace(/^[\\s\\u0085]+|[\\s\\u0085]+$/g, \"\");",
          "39:     } else {",
          "40:       arg = arg.replace(/^[ \\t]+|[ \\t]+$/g, \"\");",
          "41:     }",
          "44:     if (isShellPowerShell(shell)) {",
          "45:       arg = arg.replace(/(\\s|\\u0085)+/g, \" \");",
          "46:     } else {",
          "47:       arg = arg.replace(/[ \\t]+/g, \" \");",
          "48:     }",
          "49:   }",
          "51:   arg = `${arg}\\n`; // Append a newline, like the echo script",
          "52:   return arg;",
          "59: function prepareArg({ arg, quoted, shell }, disableExtraWindowsPreparations) {",
          "60:   if (isShellCmd(shell)) {",
          "63:     arg = arg.replace(/[\\n\\r]+/g, \"\");",
          "64:   }",
          "68:     if (isShellCmd(shell)) {",
          "73:         arg = arg.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*(\"|$))/gu, \"$1$1\");",
          "76:         arg = arg.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*\")/gu, \"$1$1\");",
          "79:         arg = arg.replace(/\"/g, `\\\\\"`);",
          "81:     } else if (isShellPowerShell(shell)) {",
          "84:       if (/\\s|\\u0085/g.test(arg) && quoted) {",
          "87:         arg = arg.replace(/\"/g, `\"\"`);",
          "91:         arg = arg.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*(\"|$))/gu, \"$1$1\");",
          "96:         arg = arg.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*(\"))/gu, \"$1$1\");",
          "100:         arg = arg.replace(/\"/g, `\\\\\"`);",
          "105:   return arg;",
          "",
          "---------------"
        ],
        "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs": [
          "File: test/fuzz/exec.test.cjs -> test/fuzz/exec.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: const shescape = require(\"../../index.cjs\");",
          "18:   const escapedArg = shescape.escape(preparedArg, {",
          "20:     interpolation: true,",
          "21:   });",
          "25:   const result = stdout.toString();",
          "27:   assert.strictEqual(result, expected);",
          "28: }",
          "34:   });",
          "38:   const result = stdout.toString();",
          "40:   assert.strictEqual(result, expected);",
          "41: }",
          "43: function fuzz(buf) {",
          "44:   const arg = buf.toString();",
          "51: }",
          "53: module.exports = {",
          "",
          "[Removed Lines]",
          "14: function checkEscapesCorrectly(arg, options) {",
          "15:   arg = arg.replace(common.WHITESPACE_REGEX, \"\");",
          "17:   const preparedArg = common.prepareArg(arg, false);",
          "19:     ...options,",
          "23:   const stdout = execSync(`node ${common.ECHO_SCRIPT} ${escapedArg}`, options);",
          "26:   const expected = common.getExpectedOutput(arg);",
          "30: function checkQuotesAndEscapesCorrectly(arg, options) {",
          "31:   const preparedArg = common.prepareArg(arg, true);",
          "32:   const quotedArg = shescape.quote(preparedArg, {",
          "33:     ...options,",
          "36:   const stdout = execSync(`node ${common.ECHO_SCRIPT} ${quotedArg}`, options);",
          "39:   const expected = common.getExpectedOutput(arg);",
          "45:   const options = {",
          "46:     shell: common.getFuzzShell(),",
          "47:   };",
          "49:   checkEscapesCorrectly(arg, options);",
          "50:   checkQuotesAndEscapesCorrectly(arg, options);",
          "",
          "[Added Lines]",
          "14: function checkWithoutShell(arg) {",
          "15:   const argInfo = { arg, shell: undefined, quoted: true };",
          "17:   const preparedArg = common.prepareArg(argInfo);",
          "18:   const quotedArg = shescape.quote(preparedArg);",
          "20:   const stdout = execSync(`node ${common.ECHO_SCRIPT} ${quotedArg}`);",
          "22:   const result = stdout.toString();",
          "23:   const expected = common.getExpectedOutput(argInfo);",
          "24:   assert.strictEqual(result, expected);",
          "25: }",
          "27: function checkWithShell(arg) {",
          "28:   const shell = common.getFuzzShell() || true;",
          "29:   const argInfo = { arg, shell, quoted: true };",
          "30:   const execOptions = { shell };",
          "32:   const preparedArg = common.prepareArg(argInfo);",
          "33:   const quotedArg = shescape.quote(preparedArg, execOptions);",
          "35:   const stdout = execSync(",
          "36:     `node ${common.ECHO_SCRIPT} ${quotedArg}`,",
          "37:     execOptions",
          "38:   );",
          "40:   const result = stdout.toString();",
          "41:   const expected = common.getExpectedOutput(argInfo);",
          "42:   assert.strictEqual(result, expected);",
          "43: }",
          "45: function checkWithoutShellUsingInterpolation(arg) {",
          "46:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
          "48:   const argInfo = { arg, shell: undefined, quoted: false };",
          "50:   const preparedArg = common.prepareArg(argInfo);",
          "55:   const stdout = execSync(`node ${common.ECHO_SCRIPT} ${escapedArg}`);",
          "58:   const expected = common.getExpectedOutput(argInfo, true);",
          "62: function checkWithShellUsingInterpolation(arg) {",
          "63:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
          "65:   const shell = common.getFuzzShell() || true;",
          "66:   const argInfo = { arg, shell, quoted: false };",
          "67:   const execOptions = { shell };",
          "69:   const preparedArg = common.prepareArg(argInfo);",
          "70:   const escapedArg = shescape.escape(preparedArg, {",
          "71:     ...execOptions,",
          "72:     interpolation: true,",
          "75:   const stdout = execSync(",
          "76:     `node ${common.ECHO_SCRIPT} ${escapedArg}`,",
          "77:     execOptions",
          "78:   );",
          "81:   const expected = common.getExpectedOutput(argInfo, true);",
          "88:   checkWithoutShell(arg);",
          "89:   checkWithShell(arg);",
          "90:   checkWithoutShellUsingInterpolation(arg);",
          "91:   checkWithShellUsingInterpolation(arg);",
          "",
          "---------------"
        ],
        "test/fuzz/execFile.test.cjs||test/fuzz/execFile.test.cjs": [
          "File: test/fuzz/execFile.test.cjs -> test/fuzz/execFile.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: const shescape = require(\"../../index.cjs\");",
          "14: function checkWithoutShell(arg) {",
          "17:   const stdout = execFileSync(",
          "18:     \"node\",",
          "",
          "[Removed Lines]",
          "15:   const preparedArg = common.prepareArg(arg, false, true);",
          "",
          "[Added Lines]",
          "15:   const argInfo = { arg, shell: undefined, quoted: false };",
          "17:   const preparedArg = common.prepareArg(argInfo, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:   );",
          "22:   const result = stdout.toString();",
          "24:   assert.strictEqual(result, expected);",
          "25: }",
          "27: function checkWithShell(arg) {",
          "34:   const stdout = execFileSync(",
          "35:     \"node\",",
          "",
          "[Removed Lines]",
          "23:   const expected = common.getExpectedOutput(arg);",
          "28:   const spawnOptions = {",
          "29:     shell: common.getFuzzShell() || true,",
          "30:   };",
          "32:   const preparedArg = common.prepareArg(arg, true, true);",
          "",
          "[Added Lines]",
          "25:   const expected = common.getExpectedOutput(argInfo);",
          "30:   const shell = common.getFuzzShell() || true;",
          "31:   const argInfo = { arg, shell, quoted: true };",
          "32:   const spawnOptions = { shell };",
          "34:   const preparedArg = common.prepareArg(argInfo, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:   );",
          "40:   const result = stdout.toString();",
          "42:   assert.strictEqual(result, expected);",
          "43: }",
          "",
          "[Removed Lines]",
          "41:   const expected = common.getExpectedOutput(arg);",
          "",
          "[Added Lines]",
          "43:   const expected = common.getExpectedOutput(argInfo);",
          "",
          "---------------"
        ],
        "test/fuzz/fork.test.cjs||test/fuzz/fork.test.cjs": [
          "File: test/fuzz/fork.test.cjs -> test/fuzz/fork.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: const shescape = require(\"../../index.cjs\");",
          "14: function check(arg) {",
          "17:   return new Promise((resolve, reject) => {",
          "18:     const echo = fork(common.ECHO_SCRIPT, shescape.escapeAll([preparedArg]), {",
          "",
          "[Removed Lines]",
          "15:   const preparedArg = common.prepareArg(arg, false, true);",
          "",
          "[Added Lines]",
          "15:   const argInfo = { arg, shell: undefined, quoted: false };",
          "17:   const preparedArg = common.prepareArg(argInfo, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     echo.stdout.on(\"data\", (data) => {",
          "23:       const result = data.toString();",
          "25:       try {",
          "26:         assert.strictEqual(result, expected);",
          "27:         resolve();",
          "",
          "[Removed Lines]",
          "24:       const expected = common.getExpectedOutput(arg);",
          "",
          "[Added Lines]",
          "26:       const expected = common.getExpectedOutput(argInfo);",
          "",
          "---------------"
        ],
        "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs": [
          "File: test/fuzz/spawn.test.cjs -> test/fuzz/spawn.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: const shescape = require(\"../../index.cjs\");",
          "14: function checkWithoutShell(arg) {",
          "17:   const child = spawnSync(",
          "18:     \"node\",",
          "",
          "[Removed Lines]",
          "15:   const preparedArg = common.prepareArg(arg, false, true);",
          "",
          "[Added Lines]",
          "15:   const argInfo = { arg, shell: undefined, quoted: false };",
          "17:   const preparedArg = common.prepareArg(argInfo, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:   );",
          "22:   const result = child.stdout.toString();",
          "24:   assert.strictEqual(result, expected);",
          "25: }",
          "27: function checkWithShell(arg) {",
          "34:   const child = spawnSync(",
          "35:     \"node\",",
          "",
          "[Removed Lines]",
          "23:   const expected = common.getExpectedOutput(arg);",
          "28:   const spawnOptions = {",
          "29:     shell: common.getFuzzShell() || true,",
          "30:   };",
          "32:   const preparedArg = common.prepareArg(arg, true);",
          "",
          "[Added Lines]",
          "25:   const expected = common.getExpectedOutput(argInfo);",
          "30:   const shell = common.getFuzzShell() || true;",
          "31:   const argInfo = { arg, shell, quoted: true };",
          "32:   const spawnOptions = { shell };",
          "34:   const preparedArg = common.prepareArg(argInfo);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:   );",
          "40:   const result = child.stdout.toString();",
          "42:   assert.strictEqual(result, expected);",
          "43: }",
          "",
          "[Removed Lines]",
          "41:   const expected = common.getExpectedOutput(arg);",
          "",
          "[Added Lines]",
          "43:   const expected = common.getExpectedOutput(argInfo);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bfdc632b075109456a54b6b1e2a0d9fa81775cf",
      "candidate_info": {
        "commit_hash": "7bfdc632b075109456a54b6b1e2a0d9fa81775cf",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/7bfdc632b075109456a54b6b1e2a0d9fa81775cf",
        "files": [
          "src/unix.js",
          "src/win.js",
          "test/fuzz/_common.cjs"
        ],
        "message": "Update and align newline replacements (#631)\n\nUpdate escaping for Bash, Dash, PowerShell, and Zsh to make it easier to\nunderstand how newlines (`\\n` and `\\r`) are escaped.\n\nUpdate the `getExpectedOutput` function for fuzzing accordingly.",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "src/win.js||src/win.js",
          "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: function escapeArgBash(arg, { interpolation, quoted }) {",
          "47:   if (interpolation) {",
          "48:     result = result",
          "49:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "51:       .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")",
          "52:       .replace(/([\"$&'()*;<>?`{|])/gu, \"\\\\$1\")",
          "53:       .replace(/(?<=[:=])(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\")",
          "",
          "[Removed Lines]",
          "45:   let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");",
          "50:       .replace(/\\n/gu, \" \")",
          "",
          "[Added Lines]",
          "45:   let result = arg",
          "46:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "47:     .replace(/\\r(?!\\n)/gu, \"\");",
          "52:       .replace(/\\r?\\n/gu, \" \")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     result = result.replace(/'/gu, `'\\\\''`);",
          "57:   }",
          "61:   return result;",
          "62: }",
          "",
          "[Removed Lines]",
          "59:   result = result.replace(/\\r(?!\\n)/gu, \"\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73: function escapeArgDash(arg, { interpolation, quoted }) {",
          "76:   if (interpolation) {",
          "77:     result = result",
          "78:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "80:       .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")",
          "81:       .replace(/([\"$&'()*;<>?`|])/gu, \"\\\\$1\")",
          "82:       .replace(/([\\t\\n ])/gu, \"\\\\$1\");",
          "",
          "[Removed Lines]",
          "74:   let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");",
          "79:       .replace(/\\n/gu, \" \")",
          "",
          "[Added Lines]",
          "74:   let result = arg",
          "75:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "76:     .replace(/\\r(?!\\n)/gu, \"\");",
          "81:       .replace(/\\r?\\n/gu, \" \")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:     result = result.replace(/'/gu, `'\\\\''`);",
          "85:   }",
          "89:   return result;",
          "90: }",
          "",
          "[Removed Lines]",
          "87:   result = result.replace(/\\r(?!\\n)/gu, \"\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101: function escapeArgZsh(arg, { interpolation, quoted }) {",
          "104:   if (interpolation) {",
          "105:     result = result",
          "106:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "108:       .replace(/(^|\\s)([#=~])/gu, \"$1\\\\$2\")",
          "109:       .replace(/([\"$&'()*;<>?[\\]`{|}])/gu, \"\\\\$1\")",
          "110:       .replace(/([\\t ])/gu, \"\\\\$1\");",
          "",
          "[Removed Lines]",
          "102:   let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");",
          "107:       .replace(/\\n/gu, \" \")",
          "",
          "[Added Lines]",
          "102:   let result = arg",
          "103:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "104:     .replace(/\\r(?!\\n)/gu, \"\");",
          "109:       .replace(/\\r?\\n/gu, \" \")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "112:     result = result.replace(/'/gu, `'\\\\''`);",
          "113:   }",
          "117:   return result;",
          "118: }",
          "",
          "[Removed Lines]",
          "115:   result = result.replace(/\\r(?!\\n)/gu, \"\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   if (interpolation) {",
          "67:     result = result",
          "69:       .replace(/(^|[\\s\\u0085])([*1-6]?)(>)/gu, \"$1$2`$3\")",
          "70:       .replace(/(^|[\\s\\u0085])([#\\-:<@\\]])/gu, \"$1`$2\")",
          "71:       .replace(/([\"&'(),;{|}\u2018\u2019\u201a\u201b\u201c\u201d\u201e])/gu, \"`$1\")",
          "",
          "[Removed Lines]",
          "68:       .replace(/\\r?\\n|\\r/gu, \" \")",
          "",
          "[Added Lines]",
          "68:       .replace(/\\r?\\n/gu, \" \")",
          "",
          "---------------"
        ],
        "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   if (normalizeWhitespace) {",
          "66:     if (!isShellCmd(shell)) {",
          "68:     }",
          "",
          "[Removed Lines]",
          "67:       arg = arg.replace(/\\r?\\n|\\r/gu, \" \");",
          "",
          "[Added Lines]",
          "67:       arg = arg.replace(/\\r?\\n/gu, \" \");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb3d517751ea432e0f73ac8f3ce075f0de67568f",
      "candidate_info": {
        "commit_hash": "cb3d517751ea432e0f73ac8f3ce075f0de67568f",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/cb3d517751ea432e0f73ac8f3ce075f0de67568f",
        "files": [
          "CHANGELOG.md",
          "src/unix.js",
          "src/win.js"
        ],
        "message": "Refactor replacements (#457)\n\n* Combine similar replacements for Unix and Windows\n\nRefactor unix.js and win.js to combine replacements where the\nexpression and replacement string are similar into one call to\n`.replace()`.\n\nThis is a very minor performance improvement. In the worst case scenario\nthe number of steps doesn't change (all characters in the input string\nare evaluated against all characters in the regular expression), but in\na better case scenario there are fewer comparisons because escaped\ncharacters from regex $i aren't evaluated against the replacements\nprior.\n\nIt also avoid any ambiguity about the order of these replacements as\nwell as to which replacement regex a particular character belongs.\n\n* Update CHANGELOG",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "src/win.js||src/win.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "49:       .replace(/\\n/gu, \" \")",
          "50:       .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")",
          "55:       .replace(/(?<!\\{)\\{+(?=(?:[^{][^,.]*)?[,.][^}]*\\})/gu, (curlyBraces) =>",
          "56:         curlyBraces.replace(/\\{/gu, \"\\\\{\")",
          "57:       )",
          "",
          "[Removed Lines]",
          "51:       .replace(/([*?])/gu, \"\\\\$1\")",
          "52:       .replace(/([$&;|])/gu, \"\\\\$1\")",
          "53:       .replace(/([()<>])/gu, \"\\\\$1\")",
          "54:       .replace(/([\"'`])/gu, \"\\\\$1\")",
          "",
          "[Added Lines]",
          "51:       .replace(/([\"$&'()*;<>?`|])/gu, \"\\\\$1\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "80:       .replace(/\\n/gu, \" \")",
          "81:       .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")",
          "86:   } else if (quoted) {",
          "87:     result = result.replace(/'/gu, `'\\\\''`);",
          "88:   }",
          "",
          "[Removed Lines]",
          "82:       .replace(/([*?])/gu, \"\\\\$1\")",
          "83:       .replace(/([$&;|])/gu, \"\\\\$1\")",
          "84:       .replace(/([()<>])/gu, \"\\\\$1\")",
          "85:       .replace(/([\"'`])/gu, \"\\\\$1\");",
          "",
          "[Added Lines]",
          "79:       .replace(/([\"$&'()*;<>?`|])/gu, \"\\\\$1\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "107:       .replace(/\\n/gu, \" \")",
          "108:       .replace(/(^|\\s)([#=~])/gu, \"$1\\\\$2\")",
          "114:   } else if (quoted) {",
          "115:     result = result.replace(/'/gu, `'\\\\''`);",
          "116:   }",
          "",
          "[Removed Lines]",
          "109:       .replace(/([*?])/gu, \"\\\\$1\")",
          "110:       .replace(/([$&;|])/gu, \"\\\\$1\")",
          "111:       .replace(/([()<>])/gu, \"\\\\$1\")",
          "112:       .replace(/([\"'`])/gu, \"\\\\$1\")",
          "113:       .replace(/([[\\]{}])/gu, \"\\\\$1\");",
          "",
          "[Added Lines]",
          "103:       .replace(/([\"$&'()*;<>?[\\]`{|}])/gu, \"\\\\$1\");",
          "",
          "---------------"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   let result = arg.replace(/\\0/gu, \"\").replace(/[\\n\\r]/gu, \" \");",
          "38:   if (interpolation) {",
          "44:   } else if (quoted) {",
          "45:     result = result.replace(/\"/gu, `\"\"`);",
          "46:   }",
          "",
          "[Removed Lines]",
          "39:     result = result",
          "40:       .replace(/\\^/gu, \"^^\")",
          "41:       .replace(/([<>])/gu, \"^$1\")",
          "42:       .replace(/(\")/gu, \"^$1\")",
          "43:       .replace(/([&|])/gu, \"^$1\");",
          "",
          "[Added Lines]",
          "39:     result = result.replace(/\\^/gu, \"^^\").replace(/([\"&<>|])/gu, \"^$1\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:       .replace(/[\\n\\r]/gu, \" \")",
          "68:       .replace(/(^|[\\s\\u0085])([*1-6]?)(>)/gu, \"$1$2`$3\")",
          "69:       .replace(/(^|[\\s\\u0085])([#\\-:<@\\]])/gu, \"$1`$2\")",
          "74:   } else if (quoted) {",
          "75:     result = result.replace(/([\"\u201c\u201d\u201e])/gu, \"$1$1\");",
          "76:   }",
          "",
          "[Removed Lines]",
          "70:       .replace(/([&,;|])/gu, \"`$1\")",
          "71:       .replace(/([(){}])/gu, \"`$1\")",
          "72:       .replace(/(['\u2018\u2019\u201a\u201b])/gu, \"`$1\")",
          "73:       .replace(/([\"\u201c\u201d\u201e])/gu, \"`$1\");",
          "",
          "[Added Lines]",
          "66:       .replace(/([\"&'(),;{|}\u2018\u2019\u201a\u201b\u201c\u201d\u201e])/gu, \"`$1\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcba4eee83b53dee0e4060f8e84e4ea02d51efde",
      "candidate_info": {
        "commit_hash": "fcba4eee83b53dee0e4060f8e84e4ea02d51efde",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/fcba4eee83b53dee0e4060f8e84e4ea02d51efde",
        "files": [
          "CHANGELOG.md",
          "README.md",
          "index.d.ts",
          "index.js",
          "src/main.js",
          "src/unix.js",
          "src/win.js",
          "test/common.js",
          "test/fuzz/corpus/109adf645551522f1b4ae343782eb8734ceddcaaea4ae5279a1c9bbd8599dbc3",
          "test/fuzz/corpus/1e37238c1a5f6c736d4b8c23bfc2a79734e73379ecd7ae4b91b5c19b0bce54fb",
          "test/fuzz/corpus/21830eadbd638794eacc8fcc6e2561fcc80eb831461d55878365a462f3200f33",
          "test/fuzz/corpus/262ef9ba0ad8d7558feed09b6890d260f18f0aee5f75c55b030cbd1588e30041",
          "test/fuzz/corpus/266755dd5469c485f454d8323853c5de1afc8237ad3148e87da136f57fe98817",
          "test/fuzz/corpus/34a5350b0725a631179b60adc4bbabd576bd4bf0e66b29d060a54708f088927e",
          "test/fuzz/corpus/38fcad1918902cf43fd0b4b5075beac8212600729df7fcf3678669ea16e5efe2",
          "test/fuzz/corpus/3b60b38594678116b32f8ce69cc2adc067cf4cb47db7b0542807eb710e1b4382",
          "test/fuzz/corpus/3ed325d1d68d7671458659f3ee7aa2f023ab307cb4c6b0a1a50970bc1cfa9ed4",
          "test/fuzz/corpus/6d3c3a670acc0f1c11c97805e4aad6c9d5a5223aae37f0fa25d8cc0482339f60",
          "test/fuzz/corpus/720fb50e541a9b37787812a1aa27063f35abf5f0ad7a2b25226679955e24453b",
          "test/fuzz/corpus/7ace431cb61584cb9b8dc7ec08cf38ac0a2d649660be86d349fb43108b542fa4",
          "test/fuzz/corpus/7af61f03a9bc5bac6b46555a60182ff1eb0ea509758aa0ce12611e7d629b2d8b",
          "test/fuzz/corpus/934fa52640ce75ee7ac58f1bf0772bc97735ae6d42ca5fc47173e5002b8f299a",
          "test/fuzz/corpus/958c9df7f1fc53b0ba36c3042b416e212c4f5a3c5b845d486d4fd9c306462bee",
          "test/fuzz/corpus/a95606bd226e5874b431b611f302846fe02611a0bc9d6b333bbdc4da6f4256e8",
          "test/fuzz/corpus/bbdb728a2f5faaea7302082081e63c5ff130832767bf482b638b38195edec56b",
          "test/fuzz/corpus/c45811bde034f7ea476dabde191e6a633314f450fc697f7740bb607419f58fc7",
          "test/fuzz/corpus/c7bcdc8f379205c62e7e1e06b1de96fab9b2c2cea649510374be9d309ad63dbe",
          "test/fuzz/corpus/cacfe0fdeb3b9f6be474735b6881266da931367bdfe29406a7b9551e77a09340",
          "test/fuzz/corpus/cdbcae15105d6b781e620813c79c7e868740d4e9cc53ce6f5fcbbc12387adf4b",
          "test/fuzz/corpus/cfa73e24623488703e1e1a5f9002f63ba74d624cc22063ce60e4e586918079ee",
          "test/fuzz/corpus/cfab074bdcae4ce4a18ea61959b5ce04024e7e31360b06324e263efd7af0e7e1",
          "test/fuzz/corpus/e87ed9941d75ac1b46da9d20915705a75e9f5ca6bed48123b2d46a0b80df7f2d",
          "test/fuzz/corpus/e9ce945769b352dbf4550f08e15ac066e8ce84f2c2befbcbe8c5188888ca8e48",
          "test/fuzz/corpus/fac29151619609f07c3b649a22c353abe89a6ea1709d7e79f27e62abad201e07",
          "test/index.fuzz.cjs",
          "test/main.test.js",
          "test/unix.test.js",
          "test/win.test.js"
        ],
        "message": "Fuzz the `escape` function, add escaping for interpolation characters (#152)\n\n* Fuzz `escape` function on unix\n\nUpdate the fuzz target to test both the `quote()` and `escape()`\nfunctions (instead of just `quote()`). Fuzzing the `escape()` function\nis roughly identical to fuzzing the `quote()` function, except that the\nprovided buffer is stripped of whitespace before echoing to ensure all\ncharacters in the string are part of the first argument.\n\n* Refactor index.fuzz.cjs to reduce duplication and fix Windows args\n\n- Define `WHITESPACE_REGEX` to avoid rewriting the regular expression to\n  (really) capture all whitespace.\n- Update the error message for unexpected output so it's different for\n  the two tested functions.\n- Define the `options` for `quote()` and `escape()` prior to the resp.\n  fuzz function as the value is the same for both.\n-  Fix `prepareArg` for Windows cmd.exe when quoted=false\n\n* Update unix escaping based on fuzzing\n\nUpdate escaping for unix platforms based on the existing fuzz corpus.\nThe unix escape logic now expects a boolean value indicating whether\ninterpolation is enabled and if so will escape more characters. This is\nneeded when the `escape()` API functions is used because the result may\nbe used in a context where interpolation is enabled. Hence, main assumes\ninterpolation is enabled unless specified otherwise.\n\n* Escape \")\" for unix with interpolation\n\nThis escape relates to the escaping of \"(\" in that shells (tested Zsh) on\nunix with interpolation interpret parenthesis in a special way.\n\n* Escape \"<\" and \">\" for unix with interpolation\n\nThese characters are used for redirecting input/output streams so should\nbe escaped.\n\n* Escape \"#\" at the start of args for unix with interpolation\n\nThe \"#\" character has a special meaning at the start of an argument.\n\n* Escape \"|\" in args for unix with interpolation\n\nThe \"|\" character means a logical or.\n\n* Escape \";\" in args for unix with interpolation\n\nThe \";\" character denotes the end of a singular command, after which a\nnew command starts.\n\n* Escape \"&\" in args for unix with interpolation\n\nThe \"&\" character means a logical and.\n\n* Escape \"*\" and \"?\" in args for unix with interpolation\n\nThe characters  \"*\" and \"?\" can be used for string expansion if\nthere are no quotes.\n\nIn Zsh these characters are always expanded (if unsuccessful the\ncommand will error). On bash and dash these characters will only\nbe expanded if possible (otherwise they will appear literally). As\nthe context in which Shescape operates is unknown, for both shell\nstyles the characters always need to be escaped.\n\n* Escape leading \"~\" in args for unix with interpolation\n\nThe \"~\" character has a special meaning (the home directory) either:\n1. as the only character in the argument (bash, dash)\n2. at the start of an argument (Zsh)\nBoth cases can be efficiently escaped by prefix \"~\" with a backslash,\nthis works regardless of whether or not the argument is more than one\nstring in bash and dash.\n\n* Escape \"[\" and \"]\" for Zsh with interpolation\n\nSpecifically in Zsh, \"[\" and \"]\" can be used for string expansion if\nthere are no quotes. So, the err on the safe side, they will always be\nescaped when `interpolation` is true.\n\n* Escape leading \"=\" for Zsh with interpolation\n\nThe \"=\" character has a special meaning at the start of an argument in\nZsh.\n\n* Escape \"{\" and \"}\" for Zsh with interpolation\n\nSpecifically in Zsh, \"{\" and \"}\" can be used for string expansion if\nthere are no quotes. So, the err on the safe side, they will always be\nescaped when `interpolation` is true.\n\n* Fuzz `escape` function on PowerShell\n\nRun the fuzz target with the existing corpus on PowerShell and fix all\nproblems that are uncovered.\n\n* Escape single quote variants in PowerShell on Windows\n\nEscape the following characters for PowerShell on Windows because it\nwill interpret these as regular single quotes.\n\n- U+2018 (Left Single Quotation Mark)\n- U+2019 (Right Single Quotation Mark)\n- U+201B (Single High-Reversed-9 Quotation Mark)\n- U+201A (Single Low-9 Quotation Mark)\n\n* Escape \"<\" and \">\" for Windows PowerShell with interpolation\n\nThese characters have special meaning when they appear at the beginning\nof an argument. In the case of \">\", it also has this meaning when it is\nprefixed by \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", or \"*\".\n\n* Escape \"@\" for Windows PowerShell with interpolation\n\nThis character has special meaning when it appears at the beginning of\nan argument.\n\n* Escape \"]\" for Windows PowerShell with interpolation\n\nThis character has a special meaning when it appears at the beginning of\nan argument.\n\n* Escape \",\" for Windows PowerShell with interpolation\n\nThis character is used to separate commands on PowerShell.\n\n* Escape leading \"-\" in PowerShell on Windows\n\nIf \"-\" is the first character in an argument in PowerShell on Windows it\nhas a special meaning, so it's always escaped.\n\n* Escape leading \":\" in PowerShell on Windows\n\nIf \":\" is the first character in an argument in PowerShell on Windows it\nhas a special meaning, so it's always escaped if it is the first\ncharacter.\n\n* Fuzz `escape`  function on cmd.exe\n\nRun the fuzz target with the existing corpus on cmd.exe and fix all\nproblems that are uncovered.\n\n* Escape \"^\" for Windows cmd.exe with interpolation\n\nThis character is used for escaping, so it must be escaped itself. As it\nis used for escaping, it should be escaped first to prevent escaping the\n\"^\" instances inserted to escape other characters.\n\n* Update unit test suites for changes to unix.js and win.js\n\n* Update unit test suites for changes to main.js\n\n* Update TypeScript type definitions\n\n* Update documentation for `escape` and `escapeAll`\n\n* Update CHANGELOG",
        "before_after_code_files": [
          "index.d.ts||index.d.ts",
          "index.js||index.js",
          "src/main.js||src/main.js",
          "src/unix.js||src/unix.js",
          "src/win.js||src/win.js",
          "test/common.js||test/common.js",
          "test/index.fuzz.cjs||test/index.fuzz.cjs",
          "test/main.test.js||test/main.test.js",
          "test/unix.test.js||test/unix.test.js",
          "test/win.test.js||test/win.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js"
          ]
        }
      },
      "candidate_diff": {
        "index.d.ts||index.d.ts": [
          "File: index.d.ts -> index.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   readonly shell?: boolean | string;",
          "9: }",
          "",
          "[Removed Lines]",
          "7: interface Options {",
          "11: export function escape(arg: string, options?: Options): string;",
          "13: export function escapeAll(arg: string[], options?: Options): string[];",
          "15: export function quote(arg: string, options?: Options): string;",
          "17: export function quoteAll(arg: string[], options?: Options): string[];",
          "",
          "[Added Lines]",
          "7: interface EscapeOptions {",
          "8:   readonly interpolation?: boolean;",
          "12: interface QuoteOptions {",
          "13:   readonly shell?: boolean | string;",
          "14: }",
          "16: export function escape(arg: string, options?: EscapeOptions): string;",
          "18: export function escapeAll(arg: string[], options?: EscapeOptions): string[];",
          "20: export function quote(arg: string, options?: QuoteOptions): string;",
          "22: export function quoteAll(arg: string[], options?: QuoteOptions): string[];",
          "",
          "---------------"
        ],
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: export function escape(arg, options = {}) {",
          "34:   const env = process.env;",
          "35:   const platform = os.platform();",
          "37: }",
          "",
          "[Removed Lines]",
          "33:   const shell = options.shell;",
          "36:   return main.escapeShellArgByPlatform(arg, platform, env, shell);",
          "",
          "[Added Lines]",
          "34:   const { interpolation, shell } = options;",
          "37:   return main.escapeShellArgByPlatform(",
          "38:     arg,",
          "39:     platform,",
          "40:     env,",
          "41:     shell,",
          "42:     interpolation",
          "43:   );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: export function escapeAll(args, options = {}) {",
          "54:   if (!Array.isArray(args)) args = [args];",
          "57:   const env = process.env;",
          "58:   const platform = os.platform();",
          "59:   const result = [];",
          "60:   for (const arg of args) {",
          "62:     result.push(safeArg);",
          "63:   }",
          "",
          "[Removed Lines]",
          "56:   const shell = options.shell;",
          "61:     const safeArg = main.escapeShellArgByPlatform(arg, platform, env, shell);",
          "",
          "[Added Lines]",
          "64:   const { interpolation, shell } = options;",
          "69:     const safeArg = main.escapeShellArgByPlatform(",
          "70:       arg,",
          "71:       platform,",
          "72:       env,",
          "73:       shell,",
          "74:       interpolation",
          "75:     );",
          "",
          "---------------"
        ],
        "src/main.js||src/main.js": [
          "File: src/main.js -> src/main.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   if (!isStringable(arg)) {",
          "61:     throw new TypeError(typeError);",
          "62:   }",
          "",
          "[Removed Lines]",
          "59: export function escapeShellArgByPlatform(arg, platform, env, shell) {",
          "",
          "[Added Lines]",
          "60: export function escapeShellArgByPlatform(",
          "61:   arg,",
          "62:   platform,",
          "63:   env,",
          "64:   shell,",
          "65:   interpolation = false",
          "66: ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:   const argAsString = arg.toString();",
          "66:   switch (platform) {",
          "67:     case win32:",
          "69:     default:",
          "71:   }",
          "72: }",
          "",
          "[Removed Lines]",
          "68:       return win.escapeShellArg(argAsString, shell);",
          "70:       return unix.escapeShellArg(argAsString, shell);",
          "",
          "[Added Lines]",
          "75:       return win.escapeShellArg(argAsString, shell, interpolation);",
          "77:       return unix.escapeShellArg(argAsString, shell, interpolation);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87: export function quoteShellArgByPlatform(arg, platform, env, shell) {",
          "89:   switch (platform) {",
          "90:     case win32:",
          "91:       return `\"${safeArg}\"`;",
          "",
          "[Removed Lines]",
          "88:   const safeArg = escapeShellArgByPlatform(arg, platform, env, shell);",
          "",
          "[Added Lines]",
          "95:   const safeArg = escapeShellArgByPlatform(arg, platform, env, shell, false);",
          "",
          "---------------"
        ],
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import { shellRequiredError } from \"./constants.js\";",
          "17:   if (shell === undefined) throw new TypeError(shellRequiredError);",
          "20: }",
          "",
          "[Removed Lines]",
          "16: export function escapeShellArg(arg, shell) {",
          "19:   return arg.replace(/\\u{0}/gu, \"\").replace(/'/g, `'\\\\''`);",
          "",
          "[Added Lines]",
          "16: function escapeShellArgNoInterpolation(arg) {",
          "17:   return arg.replace(/\\u{0}/gu, \"\").replace(/'/g, `'\\\\''`);",
          "18: }",
          "28: function escapeShellArgWithInterpolation(arg, shell) {",
          "29:   let result = arg",
          "30:     .replace(/\\u{0}/gu, \"\")",
          "31:     .replace(/\\\\/g, \"\\\\\\\\\")",
          "32:     .replace(/^(~|#)/g, \"\\\\$1\")",
          "33:     .replace(/(\\*|\\?)/gu, \"\\\\$1\")",
          "34:     .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
          "35:     .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
          "36:     .replace(/(\"|'|`)/g, \"\\\\$1\");",
          "38:   if (shell.endsWith(\"zsh\")) {",
          "39:     result = result.replace(/^=/gu, \"\\\\=\").replace(/(\\[|\\]|\\{|\\})/g, \"\\\\$1\");",
          "40:   }",
          "42:   return result;",
          "43: }",
          "53: export function escapeShellArg(arg, shell, interpolation) {",
          "56:   if (interpolation) {",
          "57:     return escapeShellArgWithInterpolation(arg, shell);",
          "58:   } else {",
          "59:     return escapeShellArgNoInterpolation(arg);",
          "60:   }",
          "",
          "---------------"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: }",
          "27:     .replace(/\\u{0}/gu, \"\")",
          "29:     .replace(/`/g, \"``\")",
          "30:     .replace(/\\$/g, \"`$\");",
          "31: }",
          "",
          "[Removed Lines]",
          "15: function escapeShellArgsForCmd(arg) {",
          "16:   return arg.replace(/\\u{0}/gu, \"\").replace(/\"/g, `\"\"`);",
          "25: function escapeShellArgsForPowerShell(arg) {",
          "26:   return arg",
          "28:     .replace(/(\"|\u201c|\u201d|\u201e)/g, `$1$1`)",
          "",
          "[Added Lines]",
          "16: function escapeShellArgsForCmd(arg, interpolation) {",
          "17:   let result = arg.replace(/\\u{0}/gu, \"\");",
          "19:   if (interpolation) {",
          "20:     result = result",
          "21:       .replace(/\\^/g, \"^^\")",
          "22:       .replace(/(<|>)/g, \"^$1\")",
          "23:       .replace(/(\")/g, \"^$1\")",
          "24:       .replace(/(\\&|\\|)/g, \"^$1\");",
          "25:   } else {",
          "26:     result = result.replace(/\"/g, `\"\"`);",
          "27:   }",
          "29:   return result;",
          "39: function escapeShellArgsForPowerShell(arg, interpolation) {",
          "40:   let result = arg",
          "45:   if (interpolation) {",
          "46:     result = result",
          "47:       .replace(/^((?:\\*|[1-6])?)(>)/g, \"$1`$2\")",
          "48:       .replace(/^(<|@|#|-|\\:|\\])/g, \"`$1\")",
          "49:       .replace(/(,|\\;|\\&|\\|)/g, \"`$1\")",
          "50:       .replace(/(\\(|\\)|\\{|\\})/g, \"`$1\")",
          "51:       .replace(/('|\u2019|\u2018|\u201b|\u201a)/g, \"`$1\")",
          "52:       .replace(/(\"|\u201c|\u201d|\u201e)/g, \"`$1\");",
          "53:   } else {",
          "54:     result = result.replace(/(\"|\u201c|\u201d|\u201e)/g, \"$1$1\");",
          "55:   }",
          "57:   return result;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:   if (shell === undefined) throw new TypeError(shellRequiredError);",
          "43:   if (regexpPowerShell.test(shell)) {",
          "45:   } else {",
          "47:   }",
          "48: }",
          "",
          "[Removed Lines]",
          "40: export function escapeShellArg(arg, shell) {",
          "44:     return escapeShellArgsForPowerShell(arg);",
          "46:     return escapeShellArgsForCmd(arg);",
          "",
          "[Added Lines]",
          "68: export function escapeShellArg(arg, shell, interpolation) {",
          "72:     return escapeShellArgsForPowerShell(arg, interpolation);",
          "74:     return escapeShellArgsForCmd(arg, interpolation);",
          "",
          "---------------"
        ],
        "test/common.js||test/common.js": [
          "File: test/common.js -> test/common.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: export const binSh = \"/bin/sh\";",
          "8: export const binBash = \"/bin/bash\";",
          "11: export const unixEnv = {};",
          "",
          "[Removed Lines]",
          "9: export const unixShells = [undefined, binSh, binBash];",
          "",
          "[Added Lines]",
          "9: export const binZsh = \"/bin/zsh\";",
          "10: export const unixShells = [undefined, binSh, binBash, binZsh];",
          "",
          "---------------"
        ],
        "test/index.fuzz.cjs||test/index.fuzz.cjs": [
          "File: test/index.fuzz.cjs -> test/index.fuzz.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: require(\"dotenv\").config();",
          "14: function getFuzzShell() {",
          "15:   return process.env.FUZZ_SHELL;",
          "16: }",
          "19:   const shell = getFuzzShell();",
          "20:   const isWindows = () => os.platform() === \"win32\";",
          "21:   const isShellCmd = () => shell === undefined || /cmd\\.exe$/.test(shell);",
          "",
          "[Removed Lines]",
          "18: function prepareArg(arg) {",
          "",
          "[Added Lines]",
          "14: const WHITESPACE_REGEX = /\\s|\\u0085/gu;",
          "20: function prepareArg(arg, quoted) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:   if (isWindows()) {",
          "27:     if (isShellCmd()) {",
          "31:     } else if (isShellPowerShell()) {",
          "37:         result = result.replace(/\"/g, `\"\"`);",
          "",
          "[Removed Lines]",
          "30:       result = result.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*(\"|$))/gu, \"$1$1\");",
          "34:       if (/\\s|\\u0085/u.test(result)) {",
          "",
          "[Added Lines]",
          "31:       if (quoted) {",
          "34:         result = result.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*(\"|$))/gu, \"$1$1\");",
          "35:       } else {",
          "37:         result = result.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*\")/gu, \"$1$1\");",
          "40:         result = result.replace(/\"/g, `\\\\\"`);",
          "41:       }",
          "45:       if (WHITESPACE_REGEX.test(result)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     .replace(/\\u{0}/gu, \"\"); // Remove null characters",
          "62: }",
          "70:   const quotedArg = shescape.quote(preparedArg, options);",
          "71:   const cmd = `node test/fuzz/echo.js ${quotedArg}`;",
          "",
          "[Removed Lines]",
          "64: function checkQuotesAndEscapesCorrectly(arg) {",
          "65:   const options = {",
          "66:     shell: getFuzzShell(),",
          "67:   };",
          "69:   const preparedArg = prepareArg(arg);",
          "",
          "[Added Lines]",
          "75: function checkEscapesCorrectly(arg, options) {",
          "76:   arg = arg.replace(WHITESPACE_REGEX, \"\");",
          "77:   const preparedArg = prepareArg(arg, false);",
          "78:   const escapedArg = shescape.escape(preparedArg, {",
          "79:     ...options,",
          "80:     interpolation: true,",
          "81:   });",
          "82:   const cmd = `node test/fuzz/echo.js ${escapedArg}`;",
          "84:   const result = cp.execSync(cmd, options).toString();",
          "85:   const expected = getExpectedOutput(arg);",
          "86:   if (expected !== result) {",
          "87:     throw new Error(",
          "88:       \"Unexpected output after escaping (- got, + expected):\\n\" +",
          "89:         `- ${result}\\n` +",
          "90:         `+ ${expected}`",
          "91:     );",
          "92:   }",
          "93: }",
          "95: function checkQuotesAndEscapesCorrectly(arg, options) {",
          "96:   const preparedArg = prepareArg(arg, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:   const expected = getExpectedOutput(arg);",
          "75:   if (expected !== result) {",
          "76:     throw new Error(",
          "78:         `- ${result}\\n` +",
          "79:         `+ ${expected}`",
          "80:     );",
          "",
          "[Removed Lines]",
          "77:       \"Unexpected output (- got, + expected):\\n\" +",
          "",
          "[Added Lines]",
          "104:       \"Unexpected output after quoting and escaping (- got, + expected):\\n\" +",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84: function fuzz(buf) {",
          "85:   const arg = buf.toString();",
          "87: }",
          "89: module.exports = {",
          "",
          "[Removed Lines]",
          "86:   checkQuotesAndEscapesCorrectly(arg);",
          "",
          "[Added Lines]",
          "113:   const options = {",
          "114:     shell: getFuzzShell(),",
          "115:   };",
          "117:   checkEscapesCorrectly(arg, options);",
          "118:   checkQuotesAndEscapesCorrectly(arg, options);",
          "",
          "---------------"
        ],
        "test/main.test.js||test/main.test.js": [
          "File: test/main.test.js -> test/main.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:       const platform = unixPlatform;",
          "46:       const defaultShell = unix.getDefaultShell();",
          "49:         for (const shell of unixShells) {",
          "50:           for (const input of stringInputs) {",
          "51:             const targetShell = shell || defaultShell;",
          "55:             const output = escapeShellArgByPlatform(",
          "56:               input,",
          "",
          "[Removed Lines]",
          "48:       it(`calls the unix escape function`, function () {",
          "53:             const expected = unix.escapeShellArg(input, targetShell);",
          "",
          "[Added Lines]",
          "48:       it(`calls the unix escape function, with interpolation`, function () {",
          "53:             const expected = unix.escapeShellArg(input, targetShell, true);",
          "55:             const output = escapeShellArgByPlatform(",
          "56:               input,",
          "57:               platform,",
          "58:               env,",
          "59:               shell,",
          "60:               true",
          "61:             );",
          "62:             assert.strictEqual(output, expected);",
          "63:           }",
          "64:         }",
          "65:       });",
          "67:       it(`calls the unix escape function, without interpolation`, function () {",
          "68:         for (const shell of unixShells) {",
          "69:           for (const input of stringInputs) {",
          "70:             const targetShell = shell || defaultShell;",
          "72:             const expected = unix.escapeShellArg(input, targetShell, false);",
          "74:             const output = escapeShellArgByPlatform(",
          "75:               input,",
          "76:               platform,",
          "77:               env,",
          "78:               shell,",
          "79:               false",
          "80:             );",
          "81:             assert.strictEqual(output, expected);",
          "82:           }",
          "83:         }",
          "86:         for (const shell of unixShells) {",
          "87:           for (const input of stringInputs) {",
          "88:             const targetShell = shell || defaultShell;",
          "90:             const expected = unix.escapeShellArg(input, targetShell, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:       const env = winEnv;",
          "102:       const platform = winPlatform;",
          "105:         for (const ComSpec of winShells.filter(isDefined)) {",
          "106:           for (const shell of winShells) {",
          "107:             for (const input of stringInputs) {",
          "",
          "[Removed Lines]",
          "104:       it(`calls the windows escape function`, function () {",
          "",
          "[Added Lines]",
          "141:       it(`calls the windows escape function, with interpolation`, function () {",
          "142:         for (const ComSpec of winShells.filter(isDefined)) {",
          "143:           for (const shell of winShells) {",
          "144:             for (const input of stringInputs) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:               const defaultShell = win.getDefaultShell(customEnv);",
          "110:               const targetShell = shell || defaultShell;",
          "114:               const output = escapeShellArgByPlatform(",
          "115:                 input,",
          "",
          "[Removed Lines]",
          "112:               const expected = win.escapeShellArg(input, targetShell);",
          "",
          "[Added Lines]",
          "146:               const defaultShell = win.getDefaultShell(customEnv);",
          "147:               const targetShell = shell || defaultShell;",
          "149:               const expected = win.escapeShellArg(input, targetShell, true);",
          "151:               const output = escapeShellArgByPlatform(",
          "152:                 input,",
          "153:                 platform,",
          "154:                 customEnv,",
          "155:                 shell,",
          "156:                 true",
          "157:               );",
          "158:               assert.strictEqual(output, expected);",
          "159:             }",
          "160:           }",
          "161:         }",
          "162:       });",
          "164:       it(`calls the windows escape function, no interpolation`, function () {",
          "172:               const expected = win.escapeShellArg(input, targetShell, false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:             }",
          "122:           }",
          "123:         }",
          "124:       });",
          "126:       it(`works for boolean values`, function () {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:         for (const ComSpec of winShells.filter(isDefined)) {",
          "187:           for (const shell of winShells) {",
          "188:             for (const input of stringInputs) {",
          "189:               const customEnv = { ...env, ComSpec };",
          "190:               const defaultShell = win.getDefaultShell(customEnv);",
          "191:               const targetShell = shell || defaultShell;",
          "193:               const expected = win.escapeShellArg(input, targetShell, false);",
          "195:               const output = escapeShellArgByPlatform(",
          "196:                 input,",
          "197:                 platform,",
          "198:                 customEnv,",
          "199:                 shell,",
          "200:                 false",
          "201:               );",
          "202:               assert.strictEqual(output, expected);",
          "203:             }",
          "204:           }",
          "205:         }",
          "",
          "---------------"
        ],
        "test/unix.test.js||test/unix.test.js": [
          "File: test/unix.test.js -> test/unix.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import assert from \"assert\";",
          "11: import { escapeShellArg, getDefaultShell } from \"../src/unix.js\";",
          "",
          "[Removed Lines]",
          "9: import { binSh, nullChar } from \"./common.js\";",
          "",
          "[Added Lines]",
          "9: import { binSh, binZsh, nullChar } from \"./common.js\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     describe(\"/bin/sh\", function () {",
          "21:       const shell = binSh;",
          "27:       });",
          "34:         });",
          "40:         });",
          "41:       });",
          "48:         });",
          "54:         });",
          "55:       });",
          "56:     });",
          "",
          "[Removed Lines]",
          "23:       it(\"returns the input if nothing has to be escaped\", function () {",
          "24:         const input = `Hello world!`;",
          "25:         const output = escapeShellArg(input, shell);",
          "26:         assert.strictEqual(output, input);",
          "29:       describe(\"escape single quotes\", function () {",
          "30:         it(\"escapes one single quote\", function () {",
          "31:           const input = `' & ls -al`;",
          "32:           const output = escapeShellArg(input, shell);",
          "33:           assert.strictEqual(output, `'\\\\'' & ls -al`);",
          "36:         it(\"escapes two single quotes\", function () {",
          "37:           const input = `' & echo 'Hello world!'`;",
          "38:           const output = escapeShellArg(input, shell);",
          "39:           assert.strictEqual(output, `'\\\\'' & echo '\\\\''Hello world!'\\\\''`);",
          "43:       describe(\"null characters\", function () {",
          "44:         it(\"removes one null character\", function () {",
          "45:           const input = `foo' && ls${nullChar} -al ; echo 'bar`;",
          "46:           const output = escapeShellArg(input, shell);",
          "47:           assert.strictEqual(output, `foo'\\\\'' && ls -al ; echo '\\\\''bar`);",
          "50:         it(\"removes multiple null characters\", function () {",
          "51:           const input = `foo'${nullChar}&&ls -al${nullChar};echo 'bar`;",
          "52:           const output = escapeShellArg(input, shell);",
          "53:           assert.strictEqual(output, `foo'\\\\''&&ls -al;echo '\\\\''bar`);",
          "",
          "[Added Lines]",
          "23:       describe(\"No interpolation\", function () {",
          "24:         const interpolation = false;",
          "26:         it(\"returns the input if nothing has to be escaped\", function () {",
          "27:           const input = `Hello world!`;",
          "28:           const output = escapeShellArg(input, shell, interpolation);",
          "29:           assert.strictEqual(output, input);",
          "30:         });",
          "32:         describe(\"null characters\", function () {",
          "33:           it(\"removes one null character\", function () {",
          "34:             const input = `foo ls${nullChar} -al bar`;",
          "35:             const output = escapeShellArg(input, shell, interpolation);",
          "36:             assert.strictEqual(output, `foo ls -al bar`);",
          "37:           });",
          "39:           it(\"removes multiple null characters\", function () {",
          "40:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "41:             const output = escapeShellArg(input, shell, interpolation);",
          "42:             assert.strictEqual(output, `foo ls -al bar`);",
          "43:           });",
          "44:         });",
          "46:         describe('single quotes (\"\\'\")', function () {",
          "47:           it(\"escapes one single quote\", function () {",
          "48:             const input = `' ls -al`;",
          "49:             const output = escapeShellArg(input, shell, interpolation);",
          "50:             assert.strictEqual(output, `'\\\\'' ls -al`);",
          "51:           });",
          "53:           it(\"escapes multiple single quotes\", function () {",
          "54:             const input = `' echo 'Hello world!'`;",
          "55:             const output = escapeShellArg(input, shell, interpolation);",
          "56:             assert.strictEqual(output, `'\\\\'' echo '\\\\''Hello world!'\\\\''`);",
          "57:           });",
          "58:         });",
          "60:         describe(\"double quotes ('\\\"')\", function () {",
          "61:           it(\"does nothing to one double quote\", function () {",
          "62:             const input = `\" ls -al`;",
          "63:             const output = escapeShellArg(input, shell, interpolation);",
          "64:             assert.strictEqual(output, input);",
          "65:           });",
          "67:           it(\"does nothing to multiple double quotes\", function () {",
          "68:             const input = `\" echo \"Hello world!\"`;",
          "69:             const output = escapeShellArg(input, shell, interpolation);",
          "70:             assert.strictEqual(output, input);",
          "71:           });",
          "72:         });",
          "74:         describe(\"backticks ('`')\", function () {",
          "75:           it(\"does nothing to one backtick\", function () {",
          "76:             const input = \"` ls -al\";",
          "77:             const output = escapeShellArg(input, shell, interpolation);",
          "78:             assert.strictEqual(output, input);",
          "79:           });",
          "81:           it(\"does nothing to multiple backticks\", function () {",
          "82:             const input = \"` echo `Hello world!`\";",
          "83:             const output = escapeShellArg(input, shell, interpolation);",
          "84:             assert.strictEqual(output, input);",
          "85:           });",
          "86:         });",
          "88:         describe(\"backslashes ('\\\\')\", function () {",
          "89:           it(\"does nothing to one backslash\", function () {",
          "90:             const input = \"foo\\\\bar\";",
          "91:             const output = escapeShellArg(input, shell, interpolation);",
          "92:             assert.strictEqual(output, input);",
          "93:           });",
          "95:           it(\"does nothing to multiple backslashes\", function () {",
          "96:             const input = \"praise\\\\the\\\\sun\";",
          "97:             const output = escapeShellArg(input, shell, interpolation);",
          "98:             assert.strictEqual(output, input);",
          "99:           });",
          "100:         });",
          "102:         describe(\"tilde ('~')\", function () {",
          "103:           it(\"does nothing to one tilde\", function () {",
          "104:             const input = \"~foobar\";",
          "105:             const output = escapeShellArg(input, shell, interpolation);",
          "106:             assert.strictEqual(output, input);",
          "107:           });",
          "109:           it(\"does nothing to multiple tildes\", function () {",
          "110:             const input = \"~foo~bar\";",
          "111:             const output = escapeShellArg(input, shell, interpolation);",
          "112:             assert.strictEqual(output, input);",
          "113:           });",
          "114:         });",
          "116:         describe(\"hashtags ('#')\", function () {",
          "117:           it(\"does nothing to one hashtag\", function () {",
          "118:             const input = \"#foobar\";",
          "119:             const output = escapeShellArg(input, shell, interpolation);",
          "120:             assert.strictEqual(output, input);",
          "121:           });",
          "123:           it(\"does nothing to multiple hashtags\", function () {",
          "124:             const input = \"#foo#bar\";",
          "125:             const output = escapeShellArg(input, shell, interpolation);",
          "126:             assert.strictEqual(output, input);",
          "127:           });",
          "128:         });",
          "130:         describe(\"dollar signs ('$')\", function () {",
          "131:           it(\"does nothing to one dollar sign\", function () {",
          "132:             const input = \"foo$bar\";",
          "133:             const output = escapeShellArg(input, shell, interpolation);",
          "134:             assert.strictEqual(output, input);",
          "135:           });",
          "137:           it(\"does nothing to multiple dollar signs\", function () {",
          "138:             const input = \"praise$the$sun\";",
          "139:             const output = escapeShellArg(input, shell, interpolation);",
          "140:             assert.strictEqual(output, input);",
          "141:           });",
          "142:         });",
          "144:         describe(\"semicolons (';')\", function () {",
          "145:           it(\"does nothing to one semicolon\", function () {",
          "146:             const input = \"foo;bar\";",
          "147:             const output = escapeShellArg(input, shell, interpolation);",
          "148:             assert.strictEqual(output, input);",
          "149:           });",
          "151:           it(\"does nothing to multiple semicolons\", function () {",
          "152:             const input = \"praise;the;sun\";",
          "153:             const output = escapeShellArg(input, shell, interpolation);",
          "154:             assert.strictEqual(output, input);",
          "155:           });",
          "156:         });",
          "158:         describe(\"ampersands ('&')\", function () {",
          "159:           it(\"does nothing to one ampersand\", function () {",
          "160:             const input = \"foo&bar\";",
          "161:             const output = escapeShellArg(input, shell, interpolation);",
          "162:             assert.strictEqual(output, input);",
          "163:           });",
          "165:           it(\"does nothing to multiple ampersands\", function () {",
          "166:             const input = \"praise&the&sun\";",
          "167:             const output = escapeShellArg(input, shell, interpolation);",
          "168:             assert.strictEqual(output, input);",
          "169:           });",
          "170:         });",
          "172:         describe(\"pipes ('|')\", function () {",
          "173:           it(\"does nothing to one pipe\", function () {",
          "174:             const input = \"foo|bar\";",
          "175:             const output = escapeShellArg(input, shell, interpolation);",
          "176:             assert.strictEqual(output, input);",
          "177:           });",
          "179:           it(\"does nothing to multiple pipes\", function () {",
          "180:             const input = \"praise|the|sun\";",
          "181:             const output = escapeShellArg(input, shell, interpolation);",
          "182:             assert.strictEqual(output, input);",
          "183:           });",
          "184:         });",
          "186:         describe(\"asterisks ('*')\", function () {",
          "187:           it(\"does nothing to one asterisk\", function () {",
          "188:             const input = \"foo*bar\";",
          "189:             const output = escapeShellArg(input, shell, interpolation);",
          "190:             assert.strictEqual(output, input);",
          "191:           });",
          "193:           it(\"does nothing to multiple asterisks\", function () {",
          "194:             const input = \"praise*the*sun\";",
          "195:             const output = escapeShellArg(input, shell, interpolation);",
          "196:             assert.strictEqual(output, input);",
          "197:           });",
          "198:         });",
          "200:         describe(\"question marks ('?')\", function () {",
          "201:           it(\"does nothing to one question mark\", function () {",
          "202:             const input = \"foo?bar\";",
          "203:             const output = escapeShellArg(input, shell, interpolation);",
          "204:             assert.strictEqual(output, input);",
          "205:           });",
          "207:           it(\"does nothing to multiple question marks\", function () {",
          "208:             const input = \"praise?the?sun\";",
          "209:             const output = escapeShellArg(input, shell, interpolation);",
          "210:             assert.strictEqual(output, input);",
          "211:           });",
          "212:         });",
          "214:         describe(\"equals sign ('=')\", function () {",
          "215:           it(\"does nothing to an equals sign at the start\", function () {",
          "216:             const input = \"=foobar\";",
          "217:             const output = escapeShellArg(input, shell, interpolation);",
          "218:             assert.strictEqual(output, input);",
          "219:           });",
          "221:           it(\"does nothing to an equals sign not at the start\", function () {",
          "222:             const input = \"foo=bar\";",
          "223:             const output = escapeShellArg(input, shell, interpolation);",
          "224:             assert.strictEqual(output, input);",
          "225:           });",
          "227:           it(\"does nothing to escapes the equals sign at the start\", function () {",
          "228:             const input = \"=foo=bar\";",
          "229:             const output = escapeShellArg(input, shell, interpolation);",
          "230:             assert.strictEqual(output, input);",
          "231:           });",
          "232:         });",
          "234:         describe(\"parentheses ('(', ')')\", function () {",
          "235:           it(\"does nothing to one opening parenthesis\", function () {",
          "236:             const input = \"foo(bar\";",
          "237:             const output = escapeShellArg(input, shell, interpolation);",
          "238:             assert.strictEqual(output, input);",
          "239:           });",
          "241:           it(\"does nothing to multiple opening parentheses\", function () {",
          "242:             const input = \"praise(the(sun\";",
          "243:             const output = escapeShellArg(input, shell, interpolation);",
          "244:             assert.strictEqual(output, input);",
          "245:           });",
          "247:           it(\"does nothing to one closing parenthesis\", function () {",
          "248:             const input = \"foo(bar\";",
          "249:             const output = escapeShellArg(input, shell, interpolation);",
          "250:             assert.strictEqual(output, input);",
          "251:           });",
          "253:           it(\"does nothing to multiple closing parentheses\", function () {",
          "254:             const input = \"praise(the(sun\";",
          "255:             const output = escapeShellArg(input, shell, interpolation);",
          "256:             assert.strictEqual(output, input);",
          "257:           });",
          "259:           it(\"does nothing to a pair of parentheses\", function () {",
          "260:             const input = \"praise(the)sun\";",
          "261:             const output = escapeShellArg(input, shell, interpolation);",
          "262:             assert.strictEqual(output, input);",
          "263:           });",
          "264:         });",
          "266:         describe(\"square brackets ('[', ']')\", function () {",
          "267:           it(\"does nothing to one opening square bracket\", function () {",
          "268:             const input = \"foo[bar\";",
          "269:             const output = escapeShellArg(input, shell, interpolation);",
          "270:             assert.strictEqual(output, input);",
          "271:           });",
          "273:           it(\"does nothing to multiple opening square brackets\", function () {",
          "274:             const input = \"praise[the[sun\";",
          "275:             const output = escapeShellArg(input, shell, interpolation);",
          "276:             assert.strictEqual(output, input);",
          "277:           });",
          "279:           it(\"does nothing to one closing square bracket\", function () {",
          "280:             const input = \"foo]bar\";",
          "281:             const output = escapeShellArg(input, shell, interpolation);",
          "282:             assert.strictEqual(output, input);",
          "283:           });",
          "285:           it(\"does nothing to multiple closing square brackets\", function () {",
          "286:             const input = \"praise]the]sun\";",
          "287:             const output = escapeShellArg(input, shell, interpolation);",
          "288:             assert.strictEqual(output, input);",
          "289:           });",
          "291:           it(\"does nothing to a pair of square brackets\", function () {",
          "292:             const input = \"praise[the]sun\";",
          "293:             const output = escapeShellArg(input, shell, interpolation);",
          "294:             assert.strictEqual(output, input);",
          "295:           });",
          "296:         });",
          "298:         describe(\"curly brackets ('{', '}')\", function () {",
          "299:           it(\"does nothing to one opening curly bracket\", function () {",
          "300:             const input = \"foo{bar\";",
          "301:             const output = escapeShellArg(input, shell, interpolation);",
          "302:             assert.strictEqual(output, input);",
          "303:           });",
          "305:           it(\"does nothing to multiple opening curly brackets\", function () {",
          "306:             const input = \"praise{the{sun\";",
          "307:             const output = escapeShellArg(input, shell, interpolation);",
          "308:             assert.strictEqual(output, input);",
          "309:           });",
          "311:           it(\"does nothing to one closing curly bracket\", function () {",
          "312:             const input = \"foo}bar\";",
          "313:             const output = escapeShellArg(input, shell, interpolation);",
          "314:             assert.strictEqual(output, input);",
          "315:           });",
          "317:           it(\"does nothing to multiple closing curly brackets\", function () {",
          "318:             const input = \"praise}the}sun\";",
          "319:             const output = escapeShellArg(input, shell, interpolation);",
          "320:             assert.strictEqual(output, input);",
          "321:           });",
          "323:           it(\"does nothing to a pair of curly brackets\", function () {",
          "324:             const input = \"praise{the}sun\";",
          "325:             const output = escapeShellArg(input, shell, interpolation);",
          "326:             assert.strictEqual(output, input);",
          "327:           });",
          "328:         });",
          "330:         describe(\"angle brackets ('<', '>')\", function () {",
          "331:           it(\"does nothing to one left-angle bracket\", function () {",
          "332:             const input = \"foo<bar\";",
          "333:             const output = escapeShellArg(input, shell, interpolation);",
          "334:             assert.strictEqual(output, input);",
          "335:           });",
          "337:           it(\"does nothing to multiple left-angle brackets\", function () {",
          "338:             const input = \"praise<the<sun\";",
          "339:             const output = escapeShellArg(input, shell, interpolation);",
          "340:             assert.strictEqual(output, input);",
          "341:           });",
          "343:           it(\"does nothing to one right-angle bracket\", function () {",
          "344:             const input = \"foo>bar\";",
          "345:             const output = escapeShellArg(input, shell, interpolation);",
          "346:             assert.strictEqual(output, input);",
          "347:           });",
          "349:           it(\"does nothing to multiple right-angle brackets\", function () {",
          "350:             const input = \"praise>the>sun\";",
          "351:             const output = escapeShellArg(input, shell, interpolation);",
          "352:             assert.strictEqual(output, input);",
          "353:           });",
          "354:         });",
          "355:       });",
          "357:       describe(\"With interpolation\", function () {",
          "358:         const interpolation = true;",
          "360:         it(\"returns the input if nothing has to be escaped\", function () {",
          "361:           const input = `Hello world!`;",
          "362:           const output = escapeShellArg(input, shell, interpolation);",
          "363:           assert.strictEqual(output, input);",
          "364:         });",
          "366:         describe(\"null characters\", function () {",
          "367:           it(\"removes one null character\", function () {",
          "368:             const input = `foo ls${nullChar} -al bar`;",
          "369:             const output = escapeShellArg(input, shell, interpolation);",
          "370:             assert.strictEqual(output, `foo ls -al bar`);",
          "371:           });",
          "373:           it(\"removes multiple null characters\", function () {",
          "374:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "375:             const output = escapeShellArg(input, shell, interpolation);",
          "376:             assert.strictEqual(output, `foo ls -al bar`);",
          "377:           });",
          "378:         });",
          "380:         describe('single quotes (\"\\'\")', function () {",
          "381:           it(\"escapes one single quote\", function () {",
          "382:             const input = `' ls -al`;",
          "383:             const output = escapeShellArg(input, shell, interpolation);",
          "384:             assert.strictEqual(output, `\\\\' ls -al`);",
          "385:           });",
          "387:           it(\"escapes multiple single quotes\", function () {",
          "388:             const input = `' echo 'Hello world!'`;",
          "389:             const output = escapeShellArg(input, shell, interpolation);",
          "390:             assert.strictEqual(output, `\\\\' echo \\\\'Hello world!\\\\'`);",
          "391:           });",
          "392:         });",
          "394:         describe(\"double quotes ('\\\"')\", function () {",
          "395:           it(\"escapes one double quote\", function () {",
          "396:             const input = `\" ls -al`;",
          "397:             const output = escapeShellArg(input, shell, interpolation);",
          "398:             assert.strictEqual(output, `\\\\\" ls -al`);",
          "399:           });",
          "401:           it(\"escapes multiple double quotes\", function () {",
          "402:             const input = `\" echo \"Hello world!\"`;",
          "403:             const output = escapeShellArg(input, shell, interpolation);",
          "404:             assert.strictEqual(output, `\\\\\" echo \\\\\"Hello world!\\\\\"`);",
          "405:           });",
          "406:         });",
          "408:         describe(\"backticks ('`')\", function () {",
          "409:           it(\"escapes one backtick\", function () {",
          "410:             const input = \"` ls -al\";",
          "411:             const output = escapeShellArg(input, shell, interpolation);",
          "412:             assert.strictEqual(output, \"\\\\` ls -al\");",
          "413:           });",
          "415:           it(\"escapes multiple backticks\", function () {",
          "416:             const input = \"` echo `Hello world!`\";",
          "417:             const output = escapeShellArg(input, shell, interpolation);",
          "418:             assert.strictEqual(output, \"\\\\` echo \\\\`Hello world!\\\\`\");",
          "419:           });",
          "420:         });",
          "422:         describe(\"backslashes ('\\\\')\", function () {",
          "423:           it(\"escapes one backslash\", function () {",
          "424:             const input = \"foo\\\\bar\";",
          "425:             const output = escapeShellArg(input, shell, interpolation);",
          "426:             assert.strictEqual(output, \"foo\\\\\\\\bar\");",
          "427:           });",
          "429:           it(\"escapes multiple backslashes\", function () {",
          "430:             const input = \"praise\\\\the\\\\sun\";",
          "431:             const output = escapeShellArg(input, shell, interpolation);",
          "432:             assert.strictEqual(output, \"praise\\\\\\\\the\\\\\\\\sun\");",
          "433:           });",
          "434:         });",
          "436:         describe(\"tilde ('~')\", function () {",
          "437:           it(\"escapes a tilde at the start\", function () {",
          "438:             const input = \"~foobar\";",
          "439:             const output = escapeShellArg(input, shell, interpolation);",
          "440:             assert.strictEqual(output, \"\\\\~foobar\");",
          "441:           });",
          "443:           it(\"does nothing to a tilde not at the start\", function () {",
          "444:             const input = \"foo~bar\";",
          "445:             const output = escapeShellArg(input, shell, interpolation);",
          "446:             assert.strictEqual(output, input);",
          "447:           });",
          "449:           it(\"only escapes the tilde at the start\", function () {",
          "450:             const input = \"~foo~bar\";",
          "451:             const output = escapeShellArg(input, shell, interpolation);",
          "452:             assert.strictEqual(output, \"\\\\~foo~bar\");",
          "453:           });",
          "454:         });",
          "456:         describe(\"hashtags ('#')\", function () {",
          "457:           it(\"escapes a hashtag at the start\", function () {",
          "458:             const input = \"#foobar\";",
          "459:             const output = escapeShellArg(input, shell, interpolation);",
          "460:             assert.strictEqual(output, \"\\\\#foobar\");",
          "461:           });",
          "463:           it(\"does nothing to a hashtag not at the start\", function () {",
          "464:             const input = \"foo#bar\";",
          "465:             const output = escapeShellArg(input, shell, interpolation);",
          "466:             assert.strictEqual(output, input);",
          "467:           });",
          "469:           it(\"only escapes the hashtag at the start\", function () {",
          "470:             const input = \"#foo#bar\";",
          "471:             const output = escapeShellArg(input, shell, interpolation);",
          "472:             assert.strictEqual(output, \"\\\\#foo#bar\");",
          "473:           });",
          "474:         });",
          "476:         describe(\"dollar signs ('$')\", function () {",
          "477:           it(\"escapes one dollar sign\", function () {",
          "478:             const input = \"foo$bar\";",
          "479:             const output = escapeShellArg(input, shell, interpolation);",
          "480:             assert.strictEqual(output, \"foo\\\\$bar\");",
          "481:           });",
          "483:           it(\"escapes multiple dollar signs\", function () {",
          "484:             const input = \"praise$the$sun\";",
          "485:             const output = escapeShellArg(input, shell, interpolation);",
          "486:             assert.strictEqual(output, \"praise\\\\$the\\\\$sun\");",
          "487:           });",
          "488:         });",
          "490:         describe(\"semicolons (';')\", function () {",
          "491:           it(\"escapes one semicolon\", function () {",
          "492:             const input = \"foo;bar\";",
          "493:             const output = escapeShellArg(input, shell, interpolation);",
          "494:             assert.strictEqual(output, \"foo\\\\;bar\");",
          "495:           });",
          "497:           it(\"escapes multiple semicolons\", function () {",
          "498:             const input = \"praise;the;sun\";",
          "499:             const output = escapeShellArg(input, shell, interpolation);",
          "500:             assert.strictEqual(output, \"praise\\\\;the\\\\;sun\");",
          "501:           });",
          "502:         });",
          "504:         describe(\"ampersands ('&')\", function () {",
          "505:           it(\"escapes one ampersand\", function () {",
          "506:             const input = \"foo&bar\";",
          "507:             const output = escapeShellArg(input, shell, interpolation);",
          "508:             assert.strictEqual(output, \"foo\\\\&bar\");",
          "509:           });",
          "511:           it(\"escapes multiple ampersands\", function () {",
          "512:             const input = \"praise&the&sun\";",
          "513:             const output = escapeShellArg(input, shell, interpolation);",
          "514:             assert.strictEqual(output, \"praise\\\\&the\\\\&sun\");",
          "515:           });",
          "516:         });",
          "518:         describe(\"pipes ('|')\", function () {",
          "519:           it(\"escapes one pipe\", function () {",
          "520:             const input = \"foo|bar\";",
          "521:             const output = escapeShellArg(input, shell, interpolation);",
          "522:             assert.strictEqual(output, \"foo\\\\|bar\");",
          "523:           });",
          "525:           it(\"escapes multiple pipes\", function () {",
          "526:             const input = \"praise|the|sun\";",
          "527:             const output = escapeShellArg(input, shell, interpolation);",
          "528:             assert.strictEqual(output, \"praise\\\\|the\\\\|sun\");",
          "529:           });",
          "530:         });",
          "532:         describe(\"asterisks ('*')\", function () {",
          "533:           it(\"escapes one asterisk\", function () {",
          "534:             const input = \"foo*bar\";",
          "535:             const output = escapeShellArg(input, shell, interpolation);",
          "536:             assert.strictEqual(output, \"foo\\\\*bar\");",
          "537:           });",
          "539:           it(\"escapes multiple asterisks\", function () {",
          "540:             const input = \"praise*the*sun\";",
          "541:             const output = escapeShellArg(input, shell, interpolation);",
          "542:             assert.strictEqual(output, \"praise\\\\*the\\\\*sun\");",
          "543:           });",
          "544:         });",
          "546:         describe(\"question marks ('?')\", function () {",
          "547:           it(\"escapes one question mark\", function () {",
          "548:             const input = \"foo?bar\";",
          "549:             const output = escapeShellArg(input, shell, interpolation);",
          "550:             assert.strictEqual(output, \"foo\\\\?bar\");",
          "551:           });",
          "553:           it(\"escapes multiple question marks\", function () {",
          "554:             const input = \"praise?the?sun\";",
          "555:             const output = escapeShellArg(input, shell, interpolation);",
          "556:             assert.strictEqual(output, \"praise\\\\?the\\\\?sun\");",
          "557:           });",
          "558:         });",
          "560:         describe(\"equals sign ('=')\", function () {",
          "561:           it(\"does nothing to an equals sign at the start\", function () {",
          "562:             const input = \"=foobar\";",
          "563:             const output = escapeShellArg(input, shell, interpolation);",
          "564:             assert.strictEqual(output, input);",
          "565:           });",
          "567:           it(\"does nothing to an equals sign not at the start\", function () {",
          "568:             const input = \"foo=bar\";",
          "569:             const output = escapeShellArg(input, shell, interpolation);",
          "570:             assert.strictEqual(output, input);",
          "571:           });",
          "573:           it(\"does nothing to escapes the equals sign at the start\", function () {",
          "574:             const input = \"=foo=bar\";",
          "575:             const output = escapeShellArg(input, shell, interpolation);",
          "576:             assert.strictEqual(output, input);",
          "577:           });",
          "578:         });",
          "580:         describe(\"parentheses ('(', ')')\", function () {",
          "581:           it(\"escapes one opening parenthesis\", function () {",
          "582:             const input = \"foo(bar\";",
          "583:             const output = escapeShellArg(input, shell, interpolation);",
          "584:             assert.strictEqual(output, \"foo\\\\(bar\");",
          "585:           });",
          "587:           it(\"escapes multiple opening parentheses\", function () {",
          "588:             const input = \"praise(the(sun\";",
          "589:             const output = escapeShellArg(input, shell, interpolation);",
          "590:             assert.strictEqual(output, \"praise\\\\(the\\\\(sun\");",
          "591:           });",
          "593:           it(\"escapes one closing parenthesis\", function () {",
          "594:             const input = \"foo)bar\";",
          "595:             const output = escapeShellArg(input, shell, interpolation);",
          "596:             assert.strictEqual(output, \"foo\\\\)bar\");",
          "597:           });",
          "599:           it(\"escapes multiple closing parentheses\", function () {",
          "600:             const input = \"praise)the)sun\";",
          "601:             const output = escapeShellArg(input, shell, interpolation);",
          "602:             assert.strictEqual(output, \"praise\\\\)the\\\\)sun\");",
          "603:           });",
          "605:           it(\"escapes a pair of parentheses\", function () {",
          "606:             const input = \"praise(the)sun\";",
          "607:             const output = escapeShellArg(input, shell, interpolation);",
          "608:             assert.strictEqual(output, \"praise\\\\(the\\\\)sun\");",
          "609:           });",
          "610:         });",
          "612:         describe(\"square brackets ('[', ']')\", function () {",
          "613:           it(\"does nothing to one opening square bracket\", function () {",
          "614:             const input = \"foo[bar\";",
          "615:             const output = escapeShellArg(input, shell, interpolation);",
          "616:             assert.strictEqual(output, input);",
          "617:           });",
          "619:           it(\"does nothing to multiple opening square brackets\", function () {",
          "620:             const input = \"praise[the[sun\";",
          "621:             const output = escapeShellArg(input, shell, interpolation);",
          "622:             assert.strictEqual(output, input);",
          "623:           });",
          "625:           it(\"does nothing to one closing square bracket\", function () {",
          "626:             const input = \"foo]bar\";",
          "627:             const output = escapeShellArg(input, shell, interpolation);",
          "628:             assert.strictEqual(output, input);",
          "629:           });",
          "631:           it(\"does nothing to multiple closing square brackets\", function () {",
          "632:             const input = \"praise]the]sun\";",
          "633:             const output = escapeShellArg(input, shell, interpolation);",
          "634:             assert.strictEqual(output, input);",
          "635:           });",
          "637:           it(\"does nothing to a pair of square brackets\", function () {",
          "638:             const input = \"praise[the]sun\";",
          "639:             const output = escapeShellArg(input, shell, interpolation);",
          "640:             assert.strictEqual(output, input);",
          "641:           });",
          "642:         });",
          "644:         describe(\"curly brackets ('{', '}')\", function () {",
          "645:           it(\"does nothing to one opening curly bracket\", function () {",
          "646:             const input = \"foo{bar\";",
          "647:             const output = escapeShellArg(input, shell, interpolation);",
          "648:             assert.strictEqual(output, input);",
          "649:           });",
          "651:           it(\"does nothing to multiple opening curly brackets\", function () {",
          "652:             const input = \"praise{the{sun\";",
          "653:             const output = escapeShellArg(input, shell, interpolation);",
          "654:             assert.strictEqual(output, input);",
          "655:           });",
          "657:           it(\"does nothing to one closing curly bracket\", function () {",
          "658:             const input = \"foo}bar\";",
          "659:             const output = escapeShellArg(input, shell, interpolation);",
          "660:             assert.strictEqual(output, input);",
          "661:           });",
          "663:           it(\"does nothing to multiple closing curly brackets\", function () {",
          "664:             const input = \"praise}the}sun\";",
          "665:             const output = escapeShellArg(input, shell, interpolation);",
          "666:             assert.strictEqual(output, input);",
          "667:           });",
          "669:           it(\"does nothing to a pair of curly brackets\", function () {",
          "670:             const input = \"praise{the}sun\";",
          "671:             const output = escapeShellArg(input, shell, interpolation);",
          "672:             assert.strictEqual(output, input);",
          "673:           });",
          "674:         });",
          "676:         describe(\"angle brackets ('<', '>')\", function () {",
          "677:           it(\"escapes one left-angle bracket\", function () {",
          "678:             const input = \"foo<bar\";",
          "679:             const output = escapeShellArg(input, shell, interpolation);",
          "680:             assert.strictEqual(output, \"foo\\\\<bar\");",
          "681:           });",
          "683:           it(\"escapes multiple left-angle brackets\", function () {",
          "684:             const input = \"praise<the<sun\";",
          "685:             const output = escapeShellArg(input, shell, interpolation);",
          "686:             assert.strictEqual(output, \"praise\\\\<the\\\\<sun\");",
          "687:           });",
          "689:           it(\"escapes one right-angle bracket\", function () {",
          "690:             const input = \"foo>bar\";",
          "691:             const output = escapeShellArg(input, shell, interpolation);",
          "692:             assert.strictEqual(output, \"foo\\\\>bar\");",
          "693:           });",
          "695:           it(\"escapes multiple right-angle brackets\", function () {",
          "696:             const input = \"praise>the>sun\";",
          "697:             const output = escapeShellArg(input, shell, interpolation);",
          "698:             assert.strictEqual(output, \"praise\\\\>the\\\\>sun\");",
          "699:           });",
          "700:         });",
          "702:     });",
          "704:     describe(\"/bin/zsh\", function () {",
          "705:       const shell = binZsh;",
          "707:       describe(\"No interpolation\", function () {",
          "708:         const interpolation = false;",
          "710:         it(\"returns the input if nothing has to be escaped\", function () {",
          "711:           const input = `Hello world!`;",
          "712:           const output = escapeShellArg(input, shell, interpolation);",
          "713:           assert.strictEqual(output, input);",
          "714:         });",
          "716:         describe(\"null characters\", function () {",
          "717:           it(\"removes one null character\", function () {",
          "718:             const input = `foo ls${nullChar} -al bar`;",
          "719:             const output = escapeShellArg(input, shell, interpolation);",
          "720:             assert.strictEqual(output, `foo ls -al bar`);",
          "721:           });",
          "723:           it(\"removes multiple null characters\", function () {",
          "724:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "725:             const output = escapeShellArg(input, shell, interpolation);",
          "726:             assert.strictEqual(output, `foo ls -al bar`);",
          "727:           });",
          "730:         describe('single quotes (\"\\'\")', function () {",
          "731:           it(\"escapes one single quote\", function () {",
          "732:             const input = `' ls -al`;",
          "733:             const output = escapeShellArg(input, shell, interpolation);",
          "734:             assert.strictEqual(output, `'\\\\'' ls -al`);",
          "735:           });",
          "737:           it(\"escapes multiple single quotes\", function () {",
          "738:             const input = `' echo 'Hello world!'`;",
          "739:             const output = escapeShellArg(input, shell, interpolation);",
          "740:             assert.strictEqual(output, `'\\\\'' echo '\\\\''Hello world!'\\\\''`);",
          "741:           });",
          "742:         });",
          "744:         describe(\"double quotes ('\\\"')\", function () {",
          "745:           it(\"does nothing to one double quote\", function () {",
          "746:             const input = `\" ls -al`;",
          "747:             const output = escapeShellArg(input, shell, interpolation);",
          "748:             assert.strictEqual(output, input);",
          "749:           });",
          "751:           it(\"does nothing to multiple double quotes\", function () {",
          "752:             const input = `\" echo \"Hello world!\"`;",
          "753:             const output = escapeShellArg(input, shell, interpolation);",
          "754:             assert.strictEqual(output, input);",
          "755:           });",
          "756:         });",
          "758:         describe(\"backticks ('`')\", function () {",
          "759:           it(\"does nothing to one backtick\", function () {",
          "760:             const input = \"` ls -al\";",
          "761:             const output = escapeShellArg(input, shell, interpolation);",
          "762:             assert.strictEqual(output, input);",
          "763:           });",
          "765:           it(\"does nothing to multiple backticks\", function () {",
          "766:             const input = \"` echo `Hello world!`\";",
          "767:             const output = escapeShellArg(input, shell, interpolation);",
          "768:             assert.strictEqual(output, input);",
          "769:           });",
          "770:         });",
          "772:         describe(\"backslashes ('\\\\')\", function () {",
          "773:           it(\"does nothing to one backslash\", function () {",
          "774:             const input = \"foo\\\\bar\";",
          "775:             const output = escapeShellArg(input, shell, interpolation);",
          "776:             assert.strictEqual(output, input);",
          "777:           });",
          "779:           it(\"does nothing to multiple backslashes\", function () {",
          "780:             const input = \"praise\\\\the\\\\sun\";",
          "781:             const output = escapeShellArg(input, shell, interpolation);",
          "782:             assert.strictEqual(output, input);",
          "783:           });",
          "784:         });",
          "786:         describe(\"tilde ('~')\", function () {",
          "787:           it(\"does nothing to one tilde\", function () {",
          "788:             const input = \"~foobar\";",
          "789:             const output = escapeShellArg(input, shell, interpolation);",
          "790:             assert.strictEqual(output, input);",
          "791:           });",
          "793:           it(\"does nothing to multiple tildes\", function () {",
          "794:             const input = \"~foo~bar\";",
          "795:             const output = escapeShellArg(input, shell, interpolation);",
          "796:             assert.strictEqual(output, input);",
          "797:           });",
          "798:         });",
          "800:         describe(\"hashtags ('#')\", function () {",
          "801:           it(\"does nothing to one hashtag\", function () {",
          "802:             const input = \"#foobar\";",
          "803:             const output = escapeShellArg(input, shell, interpolation);",
          "804:             assert.strictEqual(output, input);",
          "805:           });",
          "807:           it(\"does nothing to multiple hashtags\", function () {",
          "808:             const input = \"#foo#bar\";",
          "809:             const output = escapeShellArg(input, shell, interpolation);",
          "810:             assert.strictEqual(output, input);",
          "811:           });",
          "812:         });",
          "814:         describe(\"dollar signs ('$')\", function () {",
          "815:           it(\"does nothing to one dollar sign\", function () {",
          "816:             const input = \"foo$bar\";",
          "817:             const output = escapeShellArg(input, shell, interpolation);",
          "818:             assert.strictEqual(output, input);",
          "819:           });",
          "821:           it(\"does nothing to multiple dollar signs\", function () {",
          "822:             const input = \"praise$the$sun\";",
          "823:             const output = escapeShellArg(input, shell, interpolation);",
          "824:             assert.strictEqual(output, input);",
          "825:           });",
          "826:         });",
          "828:         describe(\"semicolons (';')\", function () {",
          "829:           it(\"does nothing to one semicolon\", function () {",
          "830:             const input = \"foo;bar\";",
          "831:             const output = escapeShellArg(input, shell, interpolation);",
          "832:             assert.strictEqual(output, input);",
          "833:           });",
          "835:           it(\"does nothing to multiple semicolons\", function () {",
          "836:             const input = \"praise;the;sun\";",
          "837:             const output = escapeShellArg(input, shell, interpolation);",
          "838:             assert.strictEqual(output, input);",
          "839:           });",
          "840:         });",
          "842:         describe(\"ampersands ('&')\", function () {",
          "843:           it(\"does nothing to one ampersand\", function () {",
          "844:             const input = \"foo&bar\";",
          "845:             const output = escapeShellArg(input, shell, interpolation);",
          "846:             assert.strictEqual(output, input);",
          "847:           });",
          "849:           it(\"does nothing to multiple ampersands\", function () {",
          "850:             const input = \"praise&the&sun\";",
          "851:             const output = escapeShellArg(input, shell, interpolation);",
          "852:             assert.strictEqual(output, input);",
          "853:           });",
          "854:         });",
          "856:         describe(\"pipes ('|')\", function () {",
          "857:           it(\"does nothing to one pipe\", function () {",
          "858:             const input = \"foo|bar\";",
          "859:             const output = escapeShellArg(input, shell, interpolation);",
          "860:             assert.strictEqual(output, input);",
          "861:           });",
          "863:           it(\"does nothing to multiple pipes\", function () {",
          "864:             const input = \"praise|the|sun\";",
          "865:             const output = escapeShellArg(input, shell, interpolation);",
          "866:             assert.strictEqual(output, input);",
          "867:           });",
          "868:         });",
          "870:         describe(\"asterisks ('*')\", function () {",
          "871:           it(\"does nothing to one asterisk\", function () {",
          "872:             const input = \"foo*bar\";",
          "873:             const output = escapeShellArg(input, shell, interpolation);",
          "874:             assert.strictEqual(output, input);",
          "875:           });",
          "877:           it(\"does nothing to multiple asterisks\", function () {",
          "878:             const input = \"praise*the*sun\";",
          "879:             const output = escapeShellArg(input, shell, interpolation);",
          "880:             assert.strictEqual(output, input);",
          "881:           });",
          "882:         });",
          "884:         describe(\"question marks ('?')\", function () {",
          "885:           it(\"does nothing to one question mark\", function () {",
          "886:             const input = \"foo?bar\";",
          "887:             const output = escapeShellArg(input, shell, interpolation);",
          "888:             assert.strictEqual(output, input);",
          "889:           });",
          "891:           it(\"does nothing to multiple question marks\", function () {",
          "892:             const input = \"praise?the?sun\";",
          "893:             const output = escapeShellArg(input, shell, interpolation);",
          "894:             assert.strictEqual(output, input);",
          "895:           });",
          "896:         });",
          "898:         describe(\"equals sign ('=')\", function () {",
          "899:           it(\"does nothing to an equals sign at the start\", function () {",
          "900:             const input = \"=foobar\";",
          "901:             const output = escapeShellArg(input, shell, interpolation);",
          "902:             assert.strictEqual(output, input);",
          "903:           });",
          "905:           it(\"does nothing to an equals sign not at the start\", function () {",
          "906:             const input = \"foo=bar\";",
          "907:             const output = escapeShellArg(input, shell, interpolation);",
          "908:             assert.strictEqual(output, input);",
          "909:           });",
          "911:           it(\"does nothing to escapes the equals sign at the start\", function () {",
          "912:             const input = \"=foo=bar\";",
          "913:             const output = escapeShellArg(input, shell, interpolation);",
          "914:             assert.strictEqual(output, input);",
          "915:           });",
          "916:         });",
          "918:         describe(\"parentheses ('(', ')')\", function () {",
          "919:           it(\"does nothing to one opening parenthesis\", function () {",
          "920:             const input = \"foo(bar\";",
          "921:             const output = escapeShellArg(input, shell, interpolation);",
          "922:             assert.strictEqual(output, input);",
          "923:           });",
          "925:           it(\"does nothing to multiple opening parentheses\", function () {",
          "926:             const input = \"praise(the(sun\";",
          "927:             const output = escapeShellArg(input, shell, interpolation);",
          "928:             assert.strictEqual(output, input);",
          "929:           });",
          "931:           it(\"does nothing to one closing parenthesis\", function () {",
          "932:             const input = \"foo(bar\";",
          "933:             const output = escapeShellArg(input, shell, interpolation);",
          "934:             assert.strictEqual(output, input);",
          "935:           });",
          "937:           it(\"does nothing to multiple closing parentheses\", function () {",
          "938:             const input = \"praise(the(sun\";",
          "939:             const output = escapeShellArg(input, shell, interpolation);",
          "940:             assert.strictEqual(output, input);",
          "941:           });",
          "943:           it(\"does nothing to a pair of parentheses\", function () {",
          "944:             const input = \"praise(the)sun\";",
          "945:             const output = escapeShellArg(input, shell, interpolation);",
          "946:             assert.strictEqual(output, input);",
          "947:           });",
          "948:         });",
          "950:         describe(\"square brackets ('[', ']')\", function () {",
          "951:           it(\"does nothing to one opening square bracket\", function () {",
          "952:             const input = \"foo[bar\";",
          "953:             const output = escapeShellArg(input, shell, interpolation);",
          "954:             assert.strictEqual(output, input);",
          "955:           });",
          "957:           it(\"does nothing to multiple opening square brackets\", function () {",
          "958:             const input = \"praise[the[sun\";",
          "959:             const output = escapeShellArg(input, shell, interpolation);",
          "960:             assert.strictEqual(output, input);",
          "961:           });",
          "963:           it(\"does nothing to one closing square bracket\", function () {",
          "964:             const input = \"foo]bar\";",
          "965:             const output = escapeShellArg(input, shell, interpolation);",
          "966:             assert.strictEqual(output, input);",
          "967:           });",
          "969:           it(\"does nothing to multiple closing square brackets\", function () {",
          "970:             const input = \"praise]the]sun\";",
          "971:             const output = escapeShellArg(input, shell, interpolation);",
          "972:             assert.strictEqual(output, input);",
          "973:           });",
          "975:           it(\"does nothing to a pair of square brackets\", function () {",
          "976:             const input = \"praise[the]sun\";",
          "977:             const output = escapeShellArg(input, shell, interpolation);",
          "978:             assert.strictEqual(output, input);",
          "979:           });",
          "980:         });",
          "982:         describe(\"curly brackets ('{', '}')\", function () {",
          "983:           it(\"does nothing to one opening curly bracket\", function () {",
          "984:             const input = \"foo{bar\";",
          "985:             const output = escapeShellArg(input, shell, interpolation);",
          "986:             assert.strictEqual(output, input);",
          "987:           });",
          "989:           it(\"does nothing to multiple opening curly brackets\", function () {",
          "990:             const input = \"praise{the{sun\";",
          "991:             const output = escapeShellArg(input, shell, interpolation);",
          "992:             assert.strictEqual(output, input);",
          "993:           });",
          "995:           it(\"does nothing to one closing curly bracket\", function () {",
          "996:             const input = \"foo}bar\";",
          "997:             const output = escapeShellArg(input, shell, interpolation);",
          "998:             assert.strictEqual(output, input);",
          "999:           });",
          "1001:           it(\"does nothing to multiple closing curly brackets\", function () {",
          "1002:             const input = \"praise}the}sun\";",
          "1003:             const output = escapeShellArg(input, shell, interpolation);",
          "1004:             assert.strictEqual(output, input);",
          "1005:           });",
          "1007:           it(\"does nothing to a pair of curly brackets\", function () {",
          "1008:             const input = \"praise{the}sun\";",
          "1009:             const output = escapeShellArg(input, shell, interpolation);",
          "1010:             assert.strictEqual(output, input);",
          "1011:           });",
          "1012:         });",
          "1014:         describe(\"angle brackets ('<', '>')\", function () {",
          "1015:           it(\"does nothing to one left-angle bracket\", function () {",
          "1016:             const input = \"foo<bar\";",
          "1017:             const output = escapeShellArg(input, shell, interpolation);",
          "1018:             assert.strictEqual(output, input);",
          "1019:           });",
          "1021:           it(\"does nothing to multiple left-angle brackets\", function () {",
          "1022:             const input = \"praise<the<sun\";",
          "1023:             const output = escapeShellArg(input, shell, interpolation);",
          "1024:             assert.strictEqual(output, input);",
          "1025:           });",
          "1027:           it(\"does nothing to one right-angle bracket\", function () {",
          "1028:             const input = \"foo>bar\";",
          "1029:             const output = escapeShellArg(input, shell, interpolation);",
          "1030:             assert.strictEqual(output, input);",
          "1031:           });",
          "1033:           it(\"does nothing to multiple right-angle brackets\", function () {",
          "1034:             const input = \"praise>the>sun\";",
          "1035:             const output = escapeShellArg(input, shell, interpolation);",
          "1036:             assert.strictEqual(output, input);",
          "1037:           });",
          "1041:       describe(\"With interpolation\", function () {",
          "1042:         const interpolation = true;",
          "1044:         it(\"returns the input if nothing has to be escaped\", function () {",
          "1045:           const input = `Hello world!`;",
          "1046:           const output = escapeShellArg(input, shell, interpolation);",
          "1047:           assert.strictEqual(output, input);",
          "1048:         });",
          "1050:         describe(\"null characters\", function () {",
          "1051:           it(\"removes one null character\", function () {",
          "1052:             const input = `foo ls${nullChar} -al bar`;",
          "1053:             const output = escapeShellArg(input, shell, interpolation);",
          "1054:             assert.strictEqual(output, `foo ls -al bar`);",
          "1055:           });",
          "1057:           it(\"removes multiple null characters\", function () {",
          "1058:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "1059:             const output = escapeShellArg(input, shell, interpolation);",
          "1060:             assert.strictEqual(output, `foo ls -al bar`);",
          "1061:           });",
          "1062:         });",
          "1064:         describe('single quotes (\"\\'\")', function () {",
          "1065:           it(\"escapes one single quote\", function () {",
          "1066:             const input = `' ls -al`;",
          "1067:             const output = escapeShellArg(input, shell, interpolation);",
          "1068:             assert.strictEqual(output, `\\\\' ls -al`);",
          "1069:           });",
          "1071:           it(\"escapes multiple single quotes\", function () {",
          "1072:             const input = `' echo 'Hello world!'`;",
          "1073:             const output = escapeShellArg(input, shell, interpolation);",
          "1074:             assert.strictEqual(output, `\\\\' echo \\\\'Hello world!\\\\'`);",
          "1075:           });",
          "1076:         });",
          "1078:         describe(\"double quotes ('\\\"')\", function () {",
          "1079:           it(\"escapes one double quote\", function () {",
          "1080:             const input = `\" ls -al`;",
          "1081:             const output = escapeShellArg(input, shell, interpolation);",
          "1082:             assert.strictEqual(output, `\\\\\" ls -al`);",
          "1083:           });",
          "1085:           it(\"escapes multiple double quotes\", function () {",
          "1086:             const input = `\" echo \"Hello world!\"`;",
          "1087:             const output = escapeShellArg(input, shell, interpolation);",
          "1088:             assert.strictEqual(output, `\\\\\" echo \\\\\"Hello world!\\\\\"`);",
          "1089:           });",
          "1090:         });",
          "1092:         describe(\"backticks ('`')\", function () {",
          "1093:           it(\"escapes one backtick\", function () {",
          "1094:             const input = \"` ls -al\";",
          "1095:             const output = escapeShellArg(input, shell, interpolation);",
          "1096:             assert.strictEqual(output, \"\\\\` ls -al\");",
          "1097:           });",
          "1099:           it(\"escapes multiple backticks\", function () {",
          "1100:             const input = \"` echo `Hello world!`\";",
          "1101:             const output = escapeShellArg(input, shell, interpolation);",
          "1102:             assert.strictEqual(output, \"\\\\` echo \\\\`Hello world!\\\\`\");",
          "1103:           });",
          "1104:         });",
          "1106:         describe(\"backslashes ('\\\\')\", function () {",
          "1107:           it(\"escapes one backslash\", function () {",
          "1108:             const input = \"foo\\\\bar\";",
          "1109:             const output = escapeShellArg(input, shell, interpolation);",
          "1110:             assert.strictEqual(output, \"foo\\\\\\\\bar\");",
          "1111:           });",
          "1113:           it(\"escapes multiple backslashes\", function () {",
          "1114:             const input = \"praise\\\\the\\\\sun\";",
          "1115:             const output = escapeShellArg(input, shell, interpolation);",
          "1116:             assert.strictEqual(output, \"praise\\\\\\\\the\\\\\\\\sun\");",
          "1117:           });",
          "1118:         });",
          "1120:         describe(\"tilde ('~')\", function () {",
          "1121:           it(\"escapes a tilde at the start\", function () {",
          "1122:             const input = \"~foobar\";",
          "1123:             const output = escapeShellArg(input, shell, interpolation);",
          "1124:             assert.strictEqual(output, \"\\\\~foobar\");",
          "1125:           });",
          "1127:           it(\"does nothing to a tilde not at the start\", function () {",
          "1128:             const input = \"foo~bar\";",
          "1129:             const output = escapeShellArg(input, shell, interpolation);",
          "1130:             assert.strictEqual(output, input);",
          "1131:           });",
          "1133:           it(\"only escapes the tilde at the start\", function () {",
          "1134:             const input = \"~foo~bar\";",
          "1135:             const output = escapeShellArg(input, shell, interpolation);",
          "1136:             assert.strictEqual(output, \"\\\\~foo~bar\");",
          "1137:           });",
          "1138:         });",
          "1140:         describe(\"hashtags ('#')\", function () {",
          "1141:           it(\"escapes a hashtag at the start\", function () {",
          "1142:             const input = \"#foobar\";",
          "1143:             const output = escapeShellArg(input, shell, interpolation);",
          "1144:             assert.strictEqual(output, \"\\\\#foobar\");",
          "1145:           });",
          "1147:           it(\"does nothing to a hashtag not at the start\", function () {",
          "1148:             const input = \"foo#bar\";",
          "1149:             const output = escapeShellArg(input, shell, interpolation);",
          "1150:             assert.strictEqual(output, input);",
          "1151:           });",
          "1153:           it(\"only escapes the hashtag at the start\", function () {",
          "1154:             const input = \"#foo#bar\";",
          "1155:             const output = escapeShellArg(input, shell, interpolation);",
          "1156:             assert.strictEqual(output, \"\\\\#foo#bar\");",
          "1157:           });",
          "1158:         });",
          "1160:         describe(\"dollar signs ('$')\", function () {",
          "1161:           it(\"escapes one dollar sign\", function () {",
          "1162:             const input = \"foo$bar\";",
          "1163:             const output = escapeShellArg(input, shell, interpolation);",
          "1164:             assert.strictEqual(output, \"foo\\\\$bar\");",
          "1165:           });",
          "1167:           it(\"escapes multiple dollar signs\", function () {",
          "1168:             const input = \"praise$the$sun\";",
          "1169:             const output = escapeShellArg(input, shell, interpolation);",
          "1170:             assert.strictEqual(output, \"praise\\\\$the\\\\$sun\");",
          "1171:           });",
          "1172:         });",
          "1174:         describe(\"semicolons (';')\", function () {",
          "1175:           it(\"escapes one semicolon\", function () {",
          "1176:             const input = \"foo;bar\";",
          "1177:             const output = escapeShellArg(input, shell, interpolation);",
          "1178:             assert.strictEqual(output, \"foo\\\\;bar\");",
          "1179:           });",
          "1181:           it(\"escapes multiple semicolons\", function () {",
          "1182:             const input = \"praise;the;sun\";",
          "1183:             const output = escapeShellArg(input, shell, interpolation);",
          "1184:             assert.strictEqual(output, \"praise\\\\;the\\\\;sun\");",
          "1185:           });",
          "1186:         });",
          "1188:         describe(\"ampersands ('&')\", function () {",
          "1189:           it(\"escapes one ampersand\", function () {",
          "1190:             const input = \"foo&bar\";",
          "1191:             const output = escapeShellArg(input, shell, interpolation);",
          "1192:             assert.strictEqual(output, \"foo\\\\&bar\");",
          "1193:           });",
          "1195:           it(\"escapes multiple ampersands\", function () {",
          "1196:             const input = \"praise&the&sun\";",
          "1197:             const output = escapeShellArg(input, shell, interpolation);",
          "1198:             assert.strictEqual(output, \"praise\\\\&the\\\\&sun\");",
          "1199:           });",
          "1202:         describe(\"pipes ('|')\", function () {",
          "1203:           it(\"escapes one pipe\", function () {",
          "1204:             const input = \"foo|bar\";",
          "1205:             const output = escapeShellArg(input, shell, interpolation);",
          "1206:             assert.strictEqual(output, \"foo\\\\|bar\");",
          "1207:           });",
          "1209:           it(\"escapes multiple pipes\", function () {",
          "1210:             const input = \"praise|the|sun\";",
          "1211:             const output = escapeShellArg(input, shell, interpolation);",
          "1212:             assert.strictEqual(output, \"praise\\\\|the\\\\|sun\");",
          "1213:           });",
          "1214:         });",
          "1216:         describe(\"asterisks ('*')\", function () {",
          "1217:           it(\"escapes one asterisk\", function () {",
          "1218:             const input = \"foo*bar\";",
          "1219:             const output = escapeShellArg(input, shell, interpolation);",
          "1220:             assert.strictEqual(output, \"foo\\\\*bar\");",
          "1221:           });",
          "1223:           it(\"escapes multiple asterisks\", function () {",
          "1224:             const input = \"praise*the*sun\";",
          "1225:             const output = escapeShellArg(input, shell, interpolation);",
          "1226:             assert.strictEqual(output, \"praise\\\\*the\\\\*sun\");",
          "1227:           });",
          "1228:         });",
          "1230:         describe(\"question marks ('?')\", function () {",
          "1231:           it(\"escapes one question mark\", function () {",
          "1232:             const input = \"foo?bar\";",
          "1233:             const output = escapeShellArg(input, shell, interpolation);",
          "1234:             assert.strictEqual(output, \"foo\\\\?bar\");",
          "1235:           });",
          "1237:           it(\"escapes multiple question marks\", function () {",
          "1238:             const input = \"praise?the?sun\";",
          "1239:             const output = escapeShellArg(input, shell, interpolation);",
          "1240:             assert.strictEqual(output, \"praise\\\\?the\\\\?sun\");",
          "1241:           });",
          "1242:         });",
          "1244:         describe(\"equals sign ('=')\", function () {",
          "1245:           it(\"escapes an equals sign at the start\", function () {",
          "1246:             const input = \"=foobar\";",
          "1247:             const output = escapeShellArg(input, shell, interpolation);",
          "1248:             assert.strictEqual(output, \"\\\\=foobar\");",
          "1249:           });",
          "1251:           it(\"does nothing to an equals sign not at the start\", function () {",
          "1252:             const input = \"foo=bar\";",
          "1253:             const output = escapeShellArg(input, shell, interpolation);",
          "1254:             assert.strictEqual(output, input);",
          "1255:           });",
          "1257:           it(\"only escapes the equals sign at the start\", function () {",
          "1258:             const input = \"=foo=bar\";",
          "1259:             const output = escapeShellArg(input, shell, interpolation);",
          "1260:             assert.strictEqual(output, \"\\\\=foo=bar\");",
          "1261:           });",
          "1262:         });",
          "1264:         describe(\"parentheses ('(', ')')\", function () {",
          "1265:           it(\"escapes one opening parenthesis\", function () {",
          "1266:             const input = \"foo(bar\";",
          "1267:             const output = escapeShellArg(input, shell, interpolation);",
          "1268:             assert.strictEqual(output, \"foo\\\\(bar\");",
          "1269:           });",
          "1271:           it(\"escapes multiple opening parentheses\", function () {",
          "1272:             const input = \"praise(the(sun\";",
          "1273:             const output = escapeShellArg(input, shell, interpolation);",
          "1274:             assert.strictEqual(output, \"praise\\\\(the\\\\(sun\");",
          "1275:           });",
          "1277:           it(\"escapes one closing parenthesis\", function () {",
          "1278:             const input = \"foo)bar\";",
          "1279:             const output = escapeShellArg(input, shell, interpolation);",
          "1280:             assert.strictEqual(output, \"foo\\\\)bar\");",
          "1281:           });",
          "1283:           it(\"escapes multiple closing parentheses\", function () {",
          "1284:             const input = \"praise)the)sun\";",
          "1285:             const output = escapeShellArg(input, shell, interpolation);",
          "1286:             assert.strictEqual(output, \"praise\\\\)the\\\\)sun\");",
          "1287:           });",
          "1289:           it(\"escapes a pair of parentheses\", function () {",
          "1290:             const input = \"praise(the)sun\";",
          "1291:             const output = escapeShellArg(input, shell, interpolation);",
          "1292:             assert.strictEqual(output, \"praise\\\\(the\\\\)sun\");",
          "1293:           });",
          "1294:         });",
          "1296:         describe(\"square brackets ('[', ']')\", function () {",
          "1297:           it(\"escapes one opening square bracket\", function () {",
          "1298:             const input = \"foo[bar\";",
          "1299:             const output = escapeShellArg(input, shell, interpolation);",
          "1300:             assert.strictEqual(output, \"foo\\\\[bar\");",
          "1301:           });",
          "1303:           it(\"escapes multiple opening square brackets\", function () {",
          "1304:             const input = \"praise[the[sun\";",
          "1305:             const output = escapeShellArg(input, shell, interpolation);",
          "1306:             assert.strictEqual(output, \"praise\\\\[the\\\\[sun\");",
          "1307:           });",
          "1309:           it(\"escapes one closing square bracket\", function () {",
          "1310:             const input = \"foo]bar\";",
          "1311:             const output = escapeShellArg(input, shell, interpolation);",
          "1312:             assert.strictEqual(output, \"foo\\\\]bar\");",
          "1313:           });",
          "1315:           it(\"escapes multiple closing square brackets\", function () {",
          "1316:             const input = \"praise]the]sun\";",
          "1317:             const output = escapeShellArg(input, shell, interpolation);",
          "1318:             assert.strictEqual(output, \"praise\\\\]the\\\\]sun\");",
          "1319:           });",
          "1321:           it(\"escapes a pair of square brackets\", function () {",
          "1322:             const input = \"praise[the]sun\";",
          "1323:             const output = escapeShellArg(input, shell, interpolation);",
          "1324:             assert.strictEqual(output, \"praise\\\\[the\\\\]sun\");",
          "1325:           });",
          "1326:         });",
          "1328:         describe(\"curly brackets ('{', '}')\", function () {",
          "1329:           it(\"escapes one opening curly bracket\", function () {",
          "1330:             const input = \"foo{bar\";",
          "1331:             const output = escapeShellArg(input, shell, interpolation);",
          "1332:             assert.strictEqual(output, \"foo\\\\{bar\");",
          "1333:           });",
          "1335:           it(\"escapes multiple opening curly brackets\", function () {",
          "1336:             const input = \"praise{the{sun\";",
          "1337:             const output = escapeShellArg(input, shell, interpolation);",
          "1338:             assert.strictEqual(output, \"praise\\\\{the\\\\{sun\");",
          "1339:           });",
          "1341:           it(\"escapes one closing curly bracket\", function () {",
          "1342:             const input = \"foo}bar\";",
          "1343:             const output = escapeShellArg(input, shell, interpolation);",
          "1344:             assert.strictEqual(output, \"foo\\\\}bar\");",
          "1345:           });",
          "1347:           it(\"escapes multiple closing curly brackets\", function () {",
          "1348:             const input = \"praise}the}sun\";",
          "1349:             const output = escapeShellArg(input, shell, interpolation);",
          "1350:             assert.strictEqual(output, \"praise\\\\}the\\\\}sun\");",
          "1351:           });",
          "1353:           it(\"escapes a pair of curly brackets\", function () {",
          "1354:             const input = \"praise{the}sun\";",
          "1355:             const output = escapeShellArg(input, shell, interpolation);",
          "1356:             assert.strictEqual(output, \"praise\\\\{the\\\\}sun\");",
          "1357:           });",
          "1358:         });",
          "1360:         describe(\"angle brackets ('<', '>')\", function () {",
          "1361:           it(\"escapes one left-angle bracket\", function () {",
          "1362:             const input = \"foo<bar\";",
          "1363:             const output = escapeShellArg(input, shell, interpolation);",
          "1364:             assert.strictEqual(output, \"foo\\\\<bar\");",
          "1365:           });",
          "1367:           it(\"escapes multiple left-angle brackets\", function () {",
          "1368:             const input = \"praise<the<sun\";",
          "1369:             const output = escapeShellArg(input, shell, interpolation);",
          "1370:             assert.strictEqual(output, \"praise\\\\<the\\\\<sun\");",
          "1371:           });",
          "1373:           it(\"escapes one right-angle bracket\", function () {",
          "1374:             const input = \"foo>bar\";",
          "1375:             const output = escapeShellArg(input, shell, interpolation);",
          "1376:             assert.strictEqual(output, \"foo\\\\>bar\");",
          "1377:           });",
          "1379:           it(\"escapes multiple right-angle brackets\", function () {",
          "1380:             const input = \"praise>the>sun\";",
          "1381:             const output = escapeShellArg(input, shell, interpolation);",
          "1382:             assert.strictEqual(output, \"praise\\\\>the\\\\>sun\");",
          "1383:           });",
          "",
          "---------------"
        ],
        "test/win.test.js||test/win.test.js": [
          "File: test/win.test.js -> test/win.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     describe(\"cmd.exe\", function () {",
          "21:       const shell = cmdExe;",
          "34:         });",
          "40:         });",
          "48:         });",
          "54:         });",
          "62:         });",
          "68:         });",
          "76:         });",
          "82:         });",
          "90:         });",
          "96:         });",
          "104:         });",
          "110:         });",
          "111:       });",
          "118:         });",
          "124:         });",
          "125:       });",
          "126:     });",
          "",
          "[Removed Lines]",
          "23:       it(\"should return the input if nothing has to be escaped\", function () {",
          "24:         const input = `Hello world!`;",
          "25:         const output = escapeShellArg(input, shell);",
          "26:         assert.strictEqual(output, input);",
          "27:       });",
          "29:       describe(\"double quotes\", function () {",
          "30:         it(\"escapes one double quote\", function () {",
          "31:           const input = `\" & ls -al`;",
          "32:           const output = escapeShellArg(input, shell);",
          "33:           assert.strictEqual(output, `\"\" & ls -al`);",
          "36:         it(\"escapes multiple double quotes\", function () {",
          "37:           const input = `\" & echo \"Hello world!`;",
          "38:           const output = escapeShellArg(input, shell);",
          "39:           assert.strictEqual(output, `\"\" & echo \"\"Hello world!`);",
          "41:       });",
          "43:       describe(\"backticks\", function () {",
          "44:         it(\"does nothing to one backtick\", function () {",
          "45:           const input = \"foo`bar\";",
          "46:           const output = escapeShellArg(input, shell);",
          "47:           assert.strictEqual(output, \"foo`bar\");",
          "50:         it(\"does nothing to multiple backticks\", function () {",
          "51:           const input = \"Praise`the`sun\";",
          "52:           const output = escapeShellArg(input, shell);",
          "53:           assert.strictEqual(output, \"Praise`the`sun\");",
          "55:       });",
          "57:       describe(\"null characters\", function () {",
          "58:         it(\"removes one null character\", function () {",
          "59:           const input = `foo\" && ls${nullChar} -al ; echo \"bar`;",
          "60:           const output = escapeShellArg(input, shell);",
          "61:           assert.strictEqual(output, `foo\"\" && ls -al ; echo \"\"bar`);",
          "64:         it(\"removes multiple null characters\", function () {",
          "65:           const input = `foo\"${nullChar}&&ls -al${nullChar};echo \"bar`;",
          "66:           const output = escapeShellArg(input, shell);",
          "67:           assert.strictEqual(output, `foo\"\"&&ls -al;echo \"\"bar`);",
          "69:       });",
          "71:       describe(\"dollar signs\", function () {",
          "72:         it(\"does nothing to one dollar sign\", function () {",
          "73:           const input = \"foo$bar\";",
          "74:           const output = escapeShellArg(input, shell);",
          "75:           assert.strictEqual(output, \"foo$bar\");",
          "78:         it(\"does nothing to multiple dollar signs\", function () {",
          "79:           const input = \"Praise$the$sun\";",
          "80:           const output = escapeShellArg(input, shell);",
          "81:           assert.strictEqual(output, \"Praise$the$sun\");",
          "83:       });",
          "85:       describe(\"left double quotation mark\", function () {",
          "86:         it(\"does nothing to one\", function () {",
          "87:           const input = \"foo\u201cbar\";",
          "88:           const output = escapeShellArg(input, shell);",
          "89:           assert.strictEqual(output, \"foo\u201cbar\");",
          "92:         it(\"does nothing to multiple\", function () {",
          "93:           const input = \"Praise\u201cthe\u201csun\";",
          "94:           const output = escapeShellArg(input, shell);",
          "95:           assert.strictEqual(output, \"Praise\u201cthe\u201csun\");",
          "97:       });",
          "99:       describe(\"right double quotation mark\", function () {",
          "100:         it(\"does nothing to one\", function () {",
          "101:           const input = \"foo\u201dbar\";",
          "102:           const output = escapeShellArg(input, shell);",
          "103:           assert.strictEqual(output, \"foo\u201dbar\");",
          "106:         it(\"does nothing to multiple\", function () {",
          "107:           const input = \"Praise\u201dthe\u201dsun\";",
          "108:           const output = escapeShellArg(input, shell);",
          "109:           assert.strictEqual(output, \"Praise\u201dthe\u201dsun\");",
          "113:       describe(\"double low-9 quotation mark\", function () {",
          "114:         it(\"does nothing to one\", function () {",
          "115:           const input = \"foo\u201ebar\";",
          "116:           const output = escapeShellArg(input, shell);",
          "117:           assert.strictEqual(output, \"foo\u201ebar\");",
          "120:         it(\"does nothing to multiple\", function () {",
          "121:           const input = \"Praise\u201ethe\u201esun\";",
          "122:           const output = escapeShellArg(input, shell);",
          "123:           assert.strictEqual(output, \"Praise\u201ethe\u201esun\");",
          "",
          "[Added Lines]",
          "23:       describe(\"No interpolation\", function () {",
          "24:         const interpolation = false;",
          "26:         it(\"should return the input if nothing has to be escaped\", function () {",
          "27:           const input = `Hello world!`;",
          "28:           const output = escapeShellArg(input, shell, interpolation);",
          "29:           assert.strictEqual(output, input);",
          "32:         describe(\"null characters\", function () {",
          "33:           it(\"removes one null character\", function () {",
          "34:             const input = `foo ls${nullChar} -al bar`;",
          "35:             const output = escapeShellArg(input, shell, interpolation);",
          "36:             assert.strictEqual(output, `foo ls -al bar`);",
          "37:           });",
          "39:           it(\"removes multiple null characters\", function () {",
          "40:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "41:             const output = escapeShellArg(input, shell, interpolation);",
          "42:             assert.strictEqual(output, `foo ls -al bar`);",
          "43:           });",
          "46:         describe(\"double quotes ('\\\"')\", function () {",
          "47:           it(\"escapes one double quote\", function () {",
          "48:             const input = `\" ls -al`;",
          "49:             const output = escapeShellArg(input, shell, interpolation);",
          "50:             assert.strictEqual(output, `\"\" ls -al`);",
          "51:           });",
          "53:           it(\"escapes multiple double quotes\", function () {",
          "54:             const input = `\" echo \"Hello world!`;",
          "55:             const output = escapeShellArg(input, shell, interpolation);",
          "56:             assert.strictEqual(output, `\"\" echo \"\"Hello world!`);",
          "57:           });",
          "60:         describe(\"backticks ('`')\", function () {",
          "61:           it(\"does nothing to one backtick\", function () {",
          "62:             const input = \"foo`bar\";",
          "63:             const output = escapeShellArg(input, shell, interpolation);",
          "64:             assert.strictEqual(output, \"foo`bar\");",
          "65:           });",
          "67:           it(\"does nothing to multiple backticks\", function () {",
          "68:             const input = \"Praise`the`sun\";",
          "69:             const output = escapeShellArg(input, shell, interpolation);",
          "70:             assert.strictEqual(output, \"Praise`the`sun\");",
          "71:           });",
          "74:         describe(\"comma (',')\", function () {",
          "75:           it(\"does nothing to one comma\", function () {",
          "76:             const input = \"foo,bar\";",
          "77:             const output = escapeShellArg(input, shell, interpolation);",
          "78:             assert.strictEqual(output, input);",
          "79:           });",
          "81:           it(\"does nothing to multiple commas\", function () {",
          "82:             const input = \"Praise,the,sun\";",
          "83:             const output = escapeShellArg(input, shell, interpolation);",
          "84:             assert.strictEqual(output, input);",
          "85:           });",
          "88:         describe(\"hashtags ('#')\", function () {",
          "89:           it(\"does nothing to one hashtag\", function () {",
          "90:             const input = \"#foobar\";",
          "91:             const output = escapeShellArg(input, shell, interpolation);",
          "92:             assert.strictEqual(output, input);",
          "93:           });",
          "95:           it(\"does nothing to multiple hashtags\", function () {",
          "96:             const input = \"#foo#bar\";",
          "97:             const output = escapeShellArg(input, shell, interpolation);",
          "98:             assert.strictEqual(output, input);",
          "99:           });",
          "102:         describe(\"at-signs ('@')\", function () {",
          "103:           it(\"does nothing to one at-sign\", function () {",
          "104:             const input = \"foo@bar\";",
          "105:             const output = escapeShellArg(input, shell, interpolation);",
          "106:             assert.strictEqual(output, input);",
          "107:           });",
          "109:           it(\"does nothing to multiple at-signs\", function () {",
          "110:             const input = \"@foo@bar\";",
          "111:             const output = escapeShellArg(input, shell, interpolation);",
          "112:             assert.strictEqual(output, input);",
          "113:           });",
          "116:         describe(\"hyphens ('-')\", function () {",
          "117:           it(\"does nothing to one hyphen\", function () {",
          "118:             const input = \"-foobar\";",
          "119:             const output = escapeShellArg(input, shell, interpolation);",
          "120:             assert.strictEqual(output, input);",
          "121:           });",
          "123:           it(\"does nothing to multiple hyphens\", function () {",
          "124:             const input = \"-foo-bar\";",
          "125:             const output = escapeShellArg(input, shell, interpolation);",
          "126:             assert.strictEqual(output, input);",
          "127:           });",
          "130:         describe(\"carets ('^')\", function () {",
          "131:           it(\"does nothing to one caret\", function () {",
          "132:             const input = \"foo^bar\";",
          "133:             const output = escapeShellArg(input, shell, interpolation);",
          "134:             assert.strictEqual(output, input);",
          "135:           });",
          "137:           it(\"does nothing to multiple carets\", function () {",
          "138:             const input = \"Praise^the^sun\";",
          "139:             const output = escapeShellArg(input, shell, interpolation);",
          "140:             assert.strictEqual(output, input);",
          "141:           });",
          "144:         describe(\"dollar signs ('$')\", function () {",
          "145:           it(\"does nothing to one dollar sign\", function () {",
          "146:             const input = \"foo$bar\";",
          "147:             const output = escapeShellArg(input, shell, interpolation);",
          "148:             assert.strictEqual(output, \"foo$bar\");",
          "149:           });",
          "151:           it(\"does nothing to multiple dollar signs\", function () {",
          "152:             const input = \"Praise$the$sun\";",
          "153:             const output = escapeShellArg(input, shell, interpolation);",
          "154:             assert.strictEqual(output, \"Praise$the$sun\");",
          "155:           });",
          "156:         });",
          "158:         describe(\"colons (':')\", function () {",
          "159:           it(\"does nothing to one colon\", function () {",
          "160:             const input = \"foo:bar\";",
          "161:             const output = escapeShellArg(input, shell, interpolation);",
          "162:             assert.strictEqual(output, input);",
          "163:           });",
          "165:           it(\"does nothing to multiple colons\", function () {",
          "166:             const input = \"praise:the:sun\";",
          "167:             const output = escapeShellArg(input, shell, interpolation);",
          "168:             assert.strictEqual(output, input);",
          "169:           });",
          "170:         });",
          "172:         describe(\"semicolons (';')\", function () {",
          "173:           it(\"does nothing to one semicolon\", function () {",
          "174:             const input = \"foo;bar\";",
          "175:             const output = escapeShellArg(input, shell, interpolation);",
          "176:             assert.strictEqual(output, input);",
          "177:           });",
          "179:           it(\"does nothing to multiple semicolons\", function () {",
          "180:             const input = \"praise;the;sun\";",
          "181:             const output = escapeShellArg(input, shell, interpolation);",
          "182:             assert.strictEqual(output, input);",
          "183:           });",
          "184:         });",
          "186:         describe(\"ampersands ('&')\", function () {",
          "187:           it(\"does nothing to one ampersand\", function () {",
          "188:             const input = \"foo&bar\";",
          "189:             const output = escapeShellArg(input, shell, interpolation);",
          "190:             assert.strictEqual(output, input);",
          "191:           });",
          "193:           it(\"does nothing to multiple ampersands\", function () {",
          "194:             const input = \"praise&the&sun\";",
          "195:             const output = escapeShellArg(input, shell, interpolation);",
          "196:             assert.strictEqual(output, input);",
          "197:           });",
          "198:         });",
          "200:         describe(\"pipes ('|')\", function () {",
          "201:           it(\"does nothing to one pipe\", function () {",
          "202:             const input = \"foo|bar\";",
          "203:             const output = escapeShellArg(input, shell, interpolation);",
          "204:             assert.strictEqual(output, input);",
          "205:           });",
          "207:           it(\"does nothing to multiple pipes\", function () {",
          "208:             const input = \"praise|the|sun\";",
          "209:             const output = escapeShellArg(input, shell, interpolation);",
          "210:             assert.strictEqual(output, input);",
          "211:           });",
          "212:         });",
          "214:         describe(\"parentheses ('(', ')')\", function () {",
          "215:           it(\"does nothing to one opening parenthesis\", function () {",
          "216:             const input = \"foo(bar\";",
          "217:             const output = escapeShellArg(input, shell, interpolation);",
          "218:             assert.strictEqual(output, input);",
          "219:           });",
          "221:           it(\"does nothing to multiple opening parentheses\", function () {",
          "222:             const input = \"praise(the(sun\";",
          "223:             const output = escapeShellArg(input, shell, interpolation);",
          "224:             assert.strictEqual(output, input);",
          "225:           });",
          "227:           it(\"does nothing to one closing parenthesis\", function () {",
          "228:             const input = \"foo(bar\";",
          "229:             const output = escapeShellArg(input, shell, interpolation);",
          "230:             assert.strictEqual(output, input);",
          "231:           });",
          "233:           it(\"does nothing to multiple closing parentheses\", function () {",
          "234:             const input = \"praise(the(sun\";",
          "235:             const output = escapeShellArg(input, shell, interpolation);",
          "236:             assert.strictEqual(output, input);",
          "237:           });",
          "239:           it(\"does nothing to a pair of parentheses\", function () {",
          "240:             const input = \"praise(the)sun\";",
          "241:             const output = escapeShellArg(input, shell, interpolation);",
          "242:             assert.strictEqual(output, input);",
          "243:           });",
          "244:         });",
          "246:         describe(\"square brackets ('[', ']')\", function () {",
          "247:           it(\"does nothing to one opening square bracket\", function () {",
          "248:             const input = \"foo[bar\";",
          "249:             const output = escapeShellArg(input, shell, interpolation);",
          "250:             assert.strictEqual(output, input);",
          "251:           });",
          "253:           it(\"does nothing to multiple opening square brackets\", function () {",
          "254:             const input = \"praise[the[sun\";",
          "255:             const output = escapeShellArg(input, shell, interpolation);",
          "256:             assert.strictEqual(output, input);",
          "257:           });",
          "259:           it(\"does nothing to one closing square bracket\", function () {",
          "260:             const input = \"foo]bar\";",
          "261:             const output = escapeShellArg(input, shell, interpolation);",
          "262:             assert.strictEqual(output, input);",
          "263:           });",
          "265:           it(\"does nothing to multiple closing square brackets\", function () {",
          "266:             const input = \"praise]the]sun\";",
          "267:             const output = escapeShellArg(input, shell, interpolation);",
          "268:             assert.strictEqual(output, input);",
          "269:           });",
          "271:           it(\"does nothing to a pair of square brackets\", function () {",
          "272:             const input = \"praise[the]sun\";",
          "273:             const output = escapeShellArg(input, shell, interpolation);",
          "274:             assert.strictEqual(output, input);",
          "275:           });",
          "278:         describe(\"curly brackets ('{', '}')\", function () {",
          "279:           it(\"does nothing to one opening curly bracket\", function () {",
          "280:             const input = \"foo{bar\";",
          "281:             const output = escapeShellArg(input, shell, interpolation);",
          "282:             assert.strictEqual(output, input);",
          "283:           });",
          "285:           it(\"does nothing to multiple opening curly brackets\", function () {",
          "286:             const input = \"praise{the{sun\";",
          "287:             const output = escapeShellArg(input, shell, interpolation);",
          "288:             assert.strictEqual(output, input);",
          "289:           });",
          "291:           it(\"does nothing to one closing curly bracket\", function () {",
          "292:             const input = \"foo}bar\";",
          "293:             const output = escapeShellArg(input, shell, interpolation);",
          "294:             assert.strictEqual(output, input);",
          "295:           });",
          "297:           it(\"does nothing to multiple closing curly brackets\", function () {",
          "298:             const input = \"praise}the}sun\";",
          "299:             const output = escapeShellArg(input, shell, interpolation);",
          "300:             assert.strictEqual(output, input);",
          "301:           });",
          "303:           it(\"does nothing to a pair of curly brackets\", function () {",
          "304:             const input = \"praise{the}sun\";",
          "305:             const output = escapeShellArg(input, shell, interpolation);",
          "306:             assert.strictEqual(output, input);",
          "307:           });",
          "308:         });",
          "310:         describe(\"angle brackets ('<', '>')\", function () {",
          "311:           it(\"does nothing to one left-angle bracket\", function () {",
          "312:             const input = \"foo<bar\";",
          "313:             const output = escapeShellArg(input, shell, interpolation);",
          "314:             assert.strictEqual(output, input);",
          "315:           });",
          "317:           it(\"does nothing to multiple left-angle brackets\", function () {",
          "318:             const input = \"Praise<the<sun\";",
          "319:             const output = escapeShellArg(input, shell, interpolation);",
          "320:             assert.strictEqual(output, input);",
          "321:           });",
          "323:           it(\"does nothing to one right-angle bracket\", function () {",
          "324:             const input = \"foo>bar\";",
          "325:             const output = escapeShellArg(input, shell, interpolation);",
          "326:             assert.strictEqual(output, input);",
          "327:           });",
          "329:           it(\"does nothing to multiple right-angle brackets\", function () {",
          "330:             const input = \"Praise>the>sun\";",
          "331:             const output = escapeShellArg(input, shell, interpolation);",
          "332:             assert.strictEqual(output, input);",
          "333:           });",
          "334:         });",
          "336:         describe(\"left double quotation mark ('\u201c')\", function () {",
          "337:           it(\"does nothing to one\", function () {",
          "338:             const input = \"foo\u201cbar\";",
          "339:             const output = escapeShellArg(input, shell, interpolation);",
          "340:             assert.strictEqual(output, \"foo\u201cbar\");",
          "341:           });",
          "343:           it(\"does nothing to multiple\", function () {",
          "344:             const input = \"Praise\u201cthe\u201csun\";",
          "345:             const output = escapeShellArg(input, shell, interpolation);",
          "346:             assert.strictEqual(output, \"Praise\u201cthe\u201csun\");",
          "347:           });",
          "348:         });",
          "350:         describe(\"right double quotation mark ('\u201d')\", function () {",
          "351:           it(\"does nothing to one\", function () {",
          "352:             const input = \"foo\u201dbar\";",
          "353:             const output = escapeShellArg(input, shell, interpolation);",
          "354:             assert.strictEqual(output, \"foo\u201dbar\");",
          "355:           });",
          "357:           it(\"does nothing to multiple\", function () {",
          "358:             const input = \"Praise\u201dthe\u201dsun\";",
          "359:             const output = escapeShellArg(input, shell, interpolation);",
          "360:             assert.strictEqual(output, \"Praise\u201dthe\u201dsun\");",
          "361:           });",
          "364:         describe(\"double low-9 quotation mark ('\u201e')\", function () {",
          "365:           it(\"does nothing to one\", function () {",
          "366:             const input = \"foo\u201ebar\";",
          "367:             const output = escapeShellArg(input, shell, interpolation);",
          "368:             assert.strictEqual(output, \"foo\u201ebar\");",
          "369:           });",
          "371:           it(\"does nothing to multiple\", function () {",
          "372:             const input = \"Praise\u201ethe\u201esun\";",
          "373:             const output = escapeShellArg(input, shell, interpolation);",
          "374:             assert.strictEqual(output, \"Praise\u201ethe\u201esun\");",
          "375:           });",
          "376:         });",
          "378:         describe(\"left single quotation mark ('\u2018')\", function () {",
          "379:           it(\"does nothing to one\", function () {",
          "380:             const input = \"foo\u2018bar\";",
          "381:             const output = escapeShellArg(input, shell, interpolation);",
          "382:             assert.strictEqual(output, input);",
          "383:           });",
          "385:           it(\"does nothing to multiple\", function () {",
          "386:             const input = \"Praise\u2018the\u2018sun\";",
          "387:             const output = escapeShellArg(input, shell, interpolation);",
          "388:             assert.strictEqual(output, input);",
          "389:           });",
          "390:         });",
          "392:         describe(\"right single quotation mark ('\u2019')\", function () {",
          "393:           it(\"does nothing to one\", function () {",
          "394:             const input = \"foo\u2019bar\";",
          "395:             const output = escapeShellArg(input, shell, interpolation);",
          "396:             assert.strictEqual(output, input);",
          "397:           });",
          "399:           it(\"does nothing to multiple\", function () {",
          "400:             const input = \"Praise\u2019the\u2019sun\";",
          "401:             const output = escapeShellArg(input, shell, interpolation);",
          "402:             assert.strictEqual(output, input);",
          "403:           });",
          "404:         });",
          "406:         describe(\"single low-9 quotation mark ('\u201a')\", function () {",
          "407:           it(\"does nothing to one\", function () {",
          "408:             const input = \"foo\u201abar\";",
          "409:             const output = escapeShellArg(input, shell, interpolation);",
          "410:             assert.strictEqual(output, input);",
          "411:           });",
          "413:           it(\"does nothing to multiple\", function () {",
          "414:             const input = \"Praise\u201athe\u201asun\";",
          "415:             const output = escapeShellArg(input, shell, interpolation);",
          "416:             assert.strictEqual(output, input);",
          "417:           });",
          "418:         });",
          "420:         describe(\"single high-reversed-9 quotation mark ('\u201b')\", function () {",
          "421:           it(\"does nothing to one\", function () {",
          "422:             const input = \"foo\u201bbar\";",
          "423:             const output = escapeShellArg(input, shell, interpolation);",
          "424:             assert.strictEqual(output, input);",
          "425:           });",
          "427:           it(\"does nothing to multiple\", function () {",
          "428:             const input = \"Praise\u201bthe\u201bsun\";",
          "429:             const output = escapeShellArg(input, shell, interpolation);",
          "430:             assert.strictEqual(output, input);",
          "431:           });",
          "435:       describe(\"With interpolation\", function () {",
          "436:         const interpolation = true;",
          "438:         it(\"should return the input if nothing has to be escaped\", function () {",
          "439:           const input = `Hello world!`;",
          "440:           const output = escapeShellArg(input, shell, interpolation);",
          "441:           assert.strictEqual(output, input);",
          "442:         });",
          "444:         describe(\"null characters\", function () {",
          "445:           it(\"removes one null character\", function () {",
          "446:             const input = `foo ls${nullChar} -al bar`;",
          "447:             const output = escapeShellArg(input, shell, interpolation);",
          "448:             assert.strictEqual(output, `foo ls -al bar`);",
          "449:           });",
          "451:           it(\"removes multiple null characters\", function () {",
          "452:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "453:             const output = escapeShellArg(input, shell, interpolation);",
          "454:             assert.strictEqual(output, `foo ls -al bar`);",
          "455:           });",
          "456:         });",
          "458:         describe(\"double quotes ('\\\"')\", function () {",
          "459:           it(\"escapes one double quote\", function () {",
          "460:             const input = `\" ls -al`;",
          "461:             const output = escapeShellArg(input, shell, interpolation);",
          "462:             assert.strictEqual(output, `^\" ls -al`);",
          "463:           });",
          "465:           it(\"escapes multiple double quotes\", function () {",
          "466:             const input = `\" echo \"Hello world!`;",
          "467:             const output = escapeShellArg(input, shell, interpolation);",
          "468:             assert.strictEqual(output, `^\" echo ^\"Hello world!`);",
          "469:           });",
          "470:         });",
          "472:         describe(\"backticks ('`')\", function () {",
          "473:           it(\"does nothing to one backtick\", function () {",
          "474:             const input = \"foo`bar\";",
          "475:             const output = escapeShellArg(input, shell, interpolation);",
          "476:             assert.strictEqual(output, \"foo`bar\");",
          "477:           });",
          "479:           it(\"does nothing to multiple backticks\", function () {",
          "480:             const input = \"Praise`the`sun\";",
          "481:             const output = escapeShellArg(input, shell, interpolation);",
          "482:             assert.strictEqual(output, \"Praise`the`sun\");",
          "483:           });",
          "484:         });",
          "486:         describe(\"comma (',')\", function () {",
          "487:           it(\"does nothing to one comma\", function () {",
          "488:             const input = \"foo,bar\";",
          "489:             const output = escapeShellArg(input, shell, interpolation);",
          "490:             assert.strictEqual(output, input);",
          "491:           });",
          "493:           it(\"does nothing to multiple commas\", function () {",
          "494:             const input = \"Praise,the,sun\";",
          "495:             const output = escapeShellArg(input, shell, interpolation);",
          "496:             assert.strictEqual(output, input);",
          "497:           });",
          "498:         });",
          "500:         describe(\"hashtags ('#')\", function () {",
          "501:           it(\"does nothing to one hashtag\", function () {",
          "502:             const input = \"#foobar\";",
          "503:             const output = escapeShellArg(input, shell, interpolation);",
          "504:             assert.strictEqual(output, input);",
          "505:           });",
          "507:           it(\"does nothing to multiple hashtags\", function () {",
          "508:             const input = \"#foo#bar\";",
          "509:             const output = escapeShellArg(input, shell, interpolation);",
          "510:             assert.strictEqual(output, input);",
          "511:           });",
          "512:         });",
          "514:         describe(\"at-signs ('@')\", function () {",
          "515:           it(\"does nothing to one at-sign\", function () {",
          "516:             const input = \"foo@bar\";",
          "517:             const output = escapeShellArg(input, shell, interpolation);",
          "518:             assert.strictEqual(output, input);",
          "519:           });",
          "521:           it(\"does nothing to multiple at-signs\", function () {",
          "522:             const input = \"@foo@bar\";",
          "523:             const output = escapeShellArg(input, shell, interpolation);",
          "524:             assert.strictEqual(output, input);",
          "525:           });",
          "526:         });",
          "528:         describe(\"hyphens ('-')\", function () {",
          "529:           it(\"does nothing to one hyphen\", function () {",
          "530:             const input = \"-foobar\";",
          "531:             const output = escapeShellArg(input, shell, interpolation);",
          "532:             assert.strictEqual(output, input);",
          "533:           });",
          "535:           it(\"does nothing to multiple hyphens\", function () {",
          "536:             const input = \"-foo-bar\";",
          "537:             const output = escapeShellArg(input, shell, interpolation);",
          "538:             assert.strictEqual(output, input);",
          "539:           });",
          "540:         });",
          "542:         describe(\"carets ('^')\", function () {",
          "543:           it(\"escapes one caret\", function () {",
          "544:             const input = \"foo^bar\";",
          "545:             const output = escapeShellArg(input, shell, interpolation);",
          "546:             assert.strictEqual(output, \"foo^^bar\");",
          "547:           });",
          "549:           it(\"escapes multiple carets\", function () {",
          "550:             const input = \"Praise^the^sun\";",
          "551:             const output = escapeShellArg(input, shell, interpolation);",
          "552:             assert.strictEqual(output, \"Praise^^the^^sun\");",
          "553:           });",
          "554:         });",
          "556:         describe(\"dollar signs ('$')\", function () {",
          "557:           it(\"does nothing to one dollar sign\", function () {",
          "558:             const input = \"foo$bar\";",
          "559:             const output = escapeShellArg(input, shell, interpolation);",
          "560:             assert.strictEqual(output, \"foo$bar\");",
          "561:           });",
          "563:           it(\"does nothing to multiple dollar signs\", function () {",
          "564:             const input = \"Praise$the$sun\";",
          "565:             const output = escapeShellArg(input, shell, interpolation);",
          "566:             assert.strictEqual(output, \"Praise$the$sun\");",
          "567:           });",
          "568:         });",
          "570:         describe(\"colons (':')\", function () {",
          "571:           it(\"does nothing to one colon\", function () {",
          "572:             const input = \"foo:bar\";",
          "573:             const output = escapeShellArg(input, shell, interpolation);",
          "574:             assert.strictEqual(output, input);",
          "575:           });",
          "577:           it(\"does nothing to multiple colons\", function () {",
          "578:             const input = \"praise:the:sun\";",
          "579:             const output = escapeShellArg(input, shell, interpolation);",
          "580:             assert.strictEqual(output, input);",
          "581:           });",
          "582:         });",
          "584:         describe(\"semicolons (';')\", function () {",
          "585:           it(\"does nothing to one semicolon\", function () {",
          "586:             const input = \"foo;bar\";",
          "587:             const output = escapeShellArg(input, shell, interpolation);",
          "588:             assert.strictEqual(output, input);",
          "589:           });",
          "591:           it(\"does nothing to multiple semicolons\", function () {",
          "592:             const input = \"praise;the;sun\";",
          "593:             const output = escapeShellArg(input, shell, interpolation);",
          "594:             assert.strictEqual(output, input);",
          "595:           });",
          "596:         });",
          "598:         describe(\"ampersands ('&')\", function () {",
          "599:           it(\"escapes one ampersand\", function () {",
          "600:             const input = \"foo&bar\";",
          "601:             const output = escapeShellArg(input, shell, interpolation);",
          "602:             assert.strictEqual(output, \"foo^&bar\");",
          "603:           });",
          "605:           it(\"escapes multiple ampersands\", function () {",
          "606:             const input = \"praise&the&sun\";",
          "607:             const output = escapeShellArg(input, shell, interpolation);",
          "608:             assert.strictEqual(output, \"praise^&the^&sun\");",
          "609:           });",
          "610:         });",
          "612:         describe(\"pipes ('|')\", function () {",
          "613:           it(\"escapes one pipe\", function () {",
          "614:             const input = \"foo|bar\";",
          "615:             const output = escapeShellArg(input, shell, interpolation);",
          "616:             assert.strictEqual(output, \"foo^|bar\");",
          "617:           });",
          "619:           it(\"escapes multiple pipes\", function () {",
          "620:             const input = \"praise|the|sun\";",
          "621:             const output = escapeShellArg(input, shell, interpolation);",
          "622:             assert.strictEqual(output, \"praise^|the^|sun\");",
          "623:           });",
          "624:         });",
          "626:         describe(\"parentheses ('(', ')')\", function () {",
          "627:           it(\"does nothing to one opening parenthesis\", function () {",
          "628:             const input = \"foo(bar\";",
          "629:             const output = escapeShellArg(input, shell, interpolation);",
          "630:             assert.strictEqual(output, input);",
          "631:           });",
          "633:           it(\"does nothing to multiple opening parentheses\", function () {",
          "634:             const input = \"praise(the(sun\";",
          "635:             const output = escapeShellArg(input, shell, interpolation);",
          "636:             assert.strictEqual(output, input);",
          "637:           });",
          "639:           it(\"does nothing to one closing parenthesis\", function () {",
          "640:             const input = \"foo(bar\";",
          "641:             const output = escapeShellArg(input, shell, interpolation);",
          "642:             assert.strictEqual(output, input);",
          "643:           });",
          "645:           it(\"does nothing to multiple closing parentheses\", function () {",
          "646:             const input = \"praise(the(sun\";",
          "647:             const output = escapeShellArg(input, shell, interpolation);",
          "648:             assert.strictEqual(output, input);",
          "649:           });",
          "651:           it(\"does nothing to a pair of parentheses\", function () {",
          "652:             const input = \"praise(the)sun\";",
          "653:             const output = escapeShellArg(input, shell, interpolation);",
          "654:             assert.strictEqual(output, input);",
          "655:           });",
          "656:         });",
          "658:         describe(\"square brackets ('[', ']')\", function () {",
          "659:           it(\"does nothing to one opening square bracket\", function () {",
          "660:             const input = \"foo[bar\";",
          "661:             const output = escapeShellArg(input, shell, interpolation);",
          "662:             assert.strictEqual(output, input);",
          "663:           });",
          "665:           it(\"does nothing to multiple opening square brackets\", function () {",
          "666:             const input = \"praise[the[sun\";",
          "667:             const output = escapeShellArg(input, shell, interpolation);",
          "668:             assert.strictEqual(output, input);",
          "669:           });",
          "671:           it(\"does nothing to one closing square bracket\", function () {",
          "672:             const input = \"foo]bar\";",
          "673:             const output = escapeShellArg(input, shell, interpolation);",
          "674:             assert.strictEqual(output, input);",
          "675:           });",
          "677:           it(\"does nothing to multiple closing square brackets\", function () {",
          "678:             const input = \"praise]the]sun\";",
          "679:             const output = escapeShellArg(input, shell, interpolation);",
          "680:             assert.strictEqual(output, input);",
          "681:           });",
          "683:           it(\"does nothing to a pair of square brackets\", function () {",
          "684:             const input = \"praise[the]sun\";",
          "685:             const output = escapeShellArg(input, shell, interpolation);",
          "686:             assert.strictEqual(output, input);",
          "687:           });",
          "688:         });",
          "690:         describe(\"curly brackets ('{', '}')\", function () {",
          "691:           it(\"does nothing to one opening curly bracket\", function () {",
          "692:             const input = \"foo{bar\";",
          "693:             const output = escapeShellArg(input, shell, interpolation);",
          "694:             assert.strictEqual(output, input);",
          "695:           });",
          "697:           it(\"does nothing to multiple opening curly brackets\", function () {",
          "698:             const input = \"praise{the{sun\";",
          "699:             const output = escapeShellArg(input, shell, interpolation);",
          "700:             assert.strictEqual(output, input);",
          "701:           });",
          "703:           it(\"does nothing to one closing curly bracket\", function () {",
          "704:             const input = \"foo}bar\";",
          "705:             const output = escapeShellArg(input, shell, interpolation);",
          "706:             assert.strictEqual(output, input);",
          "707:           });",
          "709:           it(\"does nothing to multiple closing curly brackets\", function () {",
          "710:             const input = \"praise}the}sun\";",
          "711:             const output = escapeShellArg(input, shell, interpolation);",
          "712:             assert.strictEqual(output, input);",
          "713:           });",
          "715:           it(\"does nothing to a pair of curly brackets\", function () {",
          "716:             const input = \"praise{the}sun\";",
          "717:             const output = escapeShellArg(input, shell, interpolation);",
          "718:             assert.strictEqual(output, input);",
          "719:           });",
          "720:         });",
          "722:         describe(\"angle brackets ('<', '>')\", function () {",
          "723:           it(\"escapes one left-angle bracket\", function () {",
          "724:             const input = \"foo<bar\";",
          "725:             const output = escapeShellArg(input, shell, interpolation);",
          "726:             assert.strictEqual(output, \"foo^<bar\");",
          "727:           });",
          "729:           it(\"escapes multiple left-angle brackets\", function () {",
          "730:             const input = \"Praise<the<sun\";",
          "731:             const output = escapeShellArg(input, shell, interpolation);",
          "732:             assert.strictEqual(output, \"Praise^<the^<sun\");",
          "733:           });",
          "735:           it(\"does nothing to one right-angle bracket\", function () {",
          "736:             const input = \"foo>bar\";",
          "737:             const output = escapeShellArg(input, shell, interpolation);",
          "738:             assert.strictEqual(output, \"foo^>bar\");",
          "739:           });",
          "741:           it(\"does nothing to multiple right-angle brackets\", function () {",
          "742:             const input = \"Praise>the>sun\";",
          "743:             const output = escapeShellArg(input, shell, interpolation);",
          "744:             assert.strictEqual(output, \"Praise^>the^>sun\");",
          "745:           });",
          "746:         });",
          "748:         describe(\"left double quotation mark ('\u201c')\", function () {",
          "749:           it(\"does nothing to one\", function () {",
          "750:             const input = \"foo\u201cbar\";",
          "751:             const output = escapeShellArg(input, shell, interpolation);",
          "752:             assert.strictEqual(output, \"foo\u201cbar\");",
          "753:           });",
          "755:           it(\"does nothing to multiple\", function () {",
          "756:             const input = \"Praise\u201cthe\u201csun\";",
          "757:             const output = escapeShellArg(input, shell, interpolation);",
          "758:             assert.strictEqual(output, \"Praise\u201cthe\u201csun\");",
          "759:           });",
          "762:         describe(\"right double quotation mark ('\u201d')\", function () {",
          "763:           it(\"does nothing to one\", function () {",
          "764:             const input = \"foo\u201dbar\";",
          "765:             const output = escapeShellArg(input, shell, interpolation);",
          "766:             assert.strictEqual(output, \"foo\u201dbar\");",
          "767:           });",
          "769:           it(\"does nothing to multiple\", function () {",
          "770:             const input = \"Praise\u201dthe\u201dsun\";",
          "771:             const output = escapeShellArg(input, shell, interpolation);",
          "772:             assert.strictEqual(output, \"Praise\u201dthe\u201dsun\");",
          "773:           });",
          "774:         });",
          "776:         describe(\"double low-9 quotation mark ('\u201e')\", function () {",
          "777:           it(\"does nothing to one\", function () {",
          "778:             const input = \"foo\u201ebar\";",
          "779:             const output = escapeShellArg(input, shell, interpolation);",
          "780:             assert.strictEqual(output, \"foo\u201ebar\");",
          "781:           });",
          "783:           it(\"does nothing to multiple\", function () {",
          "784:             const input = \"Praise\u201ethe\u201esun\";",
          "785:             const output = escapeShellArg(input, shell, interpolation);",
          "786:             assert.strictEqual(output, \"Praise\u201ethe\u201esun\");",
          "787:           });",
          "788:         });",
          "790:         describe(\"left single quotation mark ('\u2018')\", function () {",
          "791:           it(\"does nothing to one\", function () {",
          "792:             const input = \"foo\u2018bar\";",
          "793:             const output = escapeShellArg(input, shell, interpolation);",
          "794:             assert.strictEqual(output, input);",
          "795:           });",
          "797:           it(\"does nothing to multiple\", function () {",
          "798:             const input = \"Praise\u2018the\u2018sun\";",
          "799:             const output = escapeShellArg(input, shell, interpolation);",
          "800:             assert.strictEqual(output, input);",
          "801:           });",
          "802:         });",
          "804:         describe(\"right single quotation mark ('\u2019')\", function () {",
          "805:           it(\"does nothing to one\", function () {",
          "806:             const input = \"foo\u2019bar\";",
          "807:             const output = escapeShellArg(input, shell, interpolation);",
          "808:             assert.strictEqual(output, input);",
          "809:           });",
          "811:           it(\"does nothing to multiple\", function () {",
          "812:             const input = \"Praise\u2019the\u2019sun\";",
          "813:             const output = escapeShellArg(input, shell, interpolation);",
          "814:             assert.strictEqual(output, input);",
          "815:           });",
          "816:         });",
          "818:         describe(\"single low-9 quotation mark ('\u201a')\", function () {",
          "819:           it(\"does nothing to one\", function () {",
          "820:             const input = \"foo\u201abar\";",
          "821:             const output = escapeShellArg(input, shell, interpolation);",
          "822:             assert.strictEqual(output, input);",
          "823:           });",
          "825:           it(\"does nothing to multiple\", function () {",
          "826:             const input = \"Praise\u201athe\u201asun\";",
          "827:             const output = escapeShellArg(input, shell, interpolation);",
          "828:             assert.strictEqual(output, input);",
          "829:           });",
          "830:         });",
          "832:         describe(\"single high-reversed-9 quotation mark ('\u201b')\", function () {",
          "833:           it(\"does nothing to one\", function () {",
          "834:             const input = \"foo\u201bbar\";",
          "835:             const output = escapeShellArg(input, shell, interpolation);",
          "836:             assert.strictEqual(output, input);",
          "837:           });",
          "839:           it(\"does nothing to multiple\", function () {",
          "840:             const input = \"Praise\u201bthe\u201bsun\";",
          "841:             const output = escapeShellArg(input, shell, interpolation);",
          "842:             assert.strictEqual(output, input);",
          "843:           });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     describe(\"powershell.exe\", function () {",
          "129:       const shell = powershellExe;",
          "142:         });",
          "148:         });",
          "156:         });",
          "162:         });",
          "170:         });",
          "176:         });",
          "184:         });",
          "190:         });",
          "198:         });",
          "204:         });",
          "212:         });",
          "218:         });",
          "219:       });",
          "226:         });",
          "232:         });",
          "233:       });",
          "234:     });",
          "",
          "[Removed Lines]",
          "131:       it(\"returns the input if nothing has to be escaped\", function () {",
          "132:         const input = `Hello world!`;",
          "133:         const output = escapeShellArg(input, shell);",
          "134:         assert.strictEqual(output, input);",
          "135:       });",
          "137:       describe(\"double quotes\", function () {",
          "138:         it(\"escapes one double quote\", function () {",
          "139:           const input = `\" & ls -al`;",
          "140:           const output = escapeShellArg(input, shell);",
          "141:           assert.strictEqual(output, `\"\" & ls -al`);",
          "144:         it(\"escapes multiple double quotes\", function () {",
          "145:           const input = `\" & echo \"Hello world!`;",
          "146:           const output = escapeShellArg(input, shell);",
          "147:           assert.strictEqual(output, `\"\" & echo \"\"Hello world!`);",
          "149:       });",
          "151:       describe(\"backticks\", function () {",
          "152:         it(\"escapes one backtick\", function () {",
          "153:           const input = \"foo`bar\";",
          "154:           const output = escapeShellArg(input, shell);",
          "155:           assert.strictEqual(output, \"foo``bar\");",
          "158:         it(\"escapes multiple backticks\", function () {",
          "159:           const input = \"Praise`the`sun\";",
          "160:           const output = escapeShellArg(input, shell);",
          "161:           assert.strictEqual(output, \"Praise``the``sun\");",
          "163:       });",
          "165:       describe(\"null characters\", function () {",
          "166:         it(\"removes one null character\", function () {",
          "167:           const input = `foo\" && ls${nullChar} -al ; echo \"bar`;",
          "168:           const output = escapeShellArg(input, shell);",
          "169:           assert.strictEqual(output, `foo\"\" && ls -al ; echo \"\"bar`);",
          "172:         it(\"removes multiple null characters\", function () {",
          "173:           const input = `foo\"${nullChar}&&ls -al${nullChar};echo \"bar`;",
          "174:           const output = escapeShellArg(input, shell);",
          "175:           assert.strictEqual(output, `foo\"\"&&ls -al;echo \"\"bar`);",
          "177:       });",
          "179:       describe(\"dollar signs\", function () {",
          "180:         it(\"escapes one dollar sign\", function () {",
          "181:           const input = \"foo$bar\";",
          "182:           const output = escapeShellArg(input, shell);",
          "183:           assert.strictEqual(output, \"foo`$bar\");",
          "186:         it(\"escapes multiple dollar signs\", function () {",
          "187:           const input = \"Praise$the$sun\";",
          "188:           const output = escapeShellArg(input, shell);",
          "189:           assert.strictEqual(output, \"Praise`$the`$sun\");",
          "191:       });",
          "193:       describe(\"left double quotation mark\", function () {",
          "194:         it(\"escapes one\", function () {",
          "195:           const input = \"foo\u201cbar\";",
          "196:           const output = escapeShellArg(input, shell);",
          "197:           assert.strictEqual(output, \"foo\u201c\u201cbar\");",
          "200:         it(\"escapes multiple\", function () {",
          "201:           const input = \"Praise\u201cthe\u201csun\";",
          "202:           const output = escapeShellArg(input, shell);",
          "203:           assert.strictEqual(output, \"Praise\u201c\u201cthe\u201c\u201csun\");",
          "205:       });",
          "207:       describe(\"right double quotation mark\", function () {",
          "208:         it(\"escapes one\", function () {",
          "209:           const input = \"foo\u201dbar\";",
          "210:           const output = escapeShellArg(input, shell);",
          "211:           assert.strictEqual(output, \"foo\u201d\u201dbar\");",
          "214:         it(\"escapes multiple\", function () {",
          "215:           const input = \"Praise\u201dthe\u201dsun\";",
          "216:           const output = escapeShellArg(input, shell);",
          "217:           assert.strictEqual(output, \"Praise\u201d\u201dthe\u201d\u201dsun\");",
          "221:       describe(\"double low-9 quotation mark\", function () {",
          "222:         it(\"escapes one\", function () {",
          "223:           const input = \"foo\u201ebar\";",
          "224:           const output = escapeShellArg(input, shell);",
          "225:           assert.strictEqual(output, \"foo\u201e\u201ebar\");",
          "228:         it(\"escapes multiple\", function () {",
          "229:           const input = \"Praise\u201ethe\u201esun\";",
          "230:           const output = escapeShellArg(input, shell);",
          "231:           assert.strictEqual(output, \"Praise\u201e\u201ethe\u201e\u201esun\");",
          "",
          "[Added Lines]",
          "851:       describe(\"No interpolation\", function () {",
          "852:         const interpolation = false;",
          "854:         it(\"returns the input if nothing has to be escaped\", function () {",
          "855:           const input = `Hello world!`;",
          "856:           const output = escapeShellArg(input, shell, interpolation);",
          "857:           assert.strictEqual(output, input);",
          "860:         describe(\"null characters\", function () {",
          "861:           it(\"removes one null character\", function () {",
          "862:             const input = `foo ls${nullChar} -al bar`;",
          "863:             const output = escapeShellArg(input, shell, interpolation);",
          "864:             assert.strictEqual(output, `foo ls -al bar`);",
          "865:           });",
          "867:           it(\"removes multiple null characters\", function () {",
          "868:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "869:             const output = escapeShellArg(input, shell, interpolation);",
          "870:             assert.strictEqual(output, `foo ls -al bar`);",
          "871:           });",
          "874:         describe(\"double quotes ('\\\"')\", function () {",
          "875:           it(\"escapes one double quote\", function () {",
          "876:             const input = `\" ls -al`;",
          "877:             const output = escapeShellArg(input, shell, interpolation);",
          "878:             assert.strictEqual(output, `\"\" ls -al`);",
          "879:           });",
          "881:           it(\"escapes multiple double quotes\", function () {",
          "882:             const input = `\" echo \"Hello world!`;",
          "883:             const output = escapeShellArg(input, shell, interpolation);",
          "884:             assert.strictEqual(output, `\"\" echo \"\"Hello world!`);",
          "885:           });",
          "888:         describe(\"backticks ('`')\", function () {",
          "889:           it(\"escapes one backtick\", function () {",
          "890:             const input = \"foo`bar\";",
          "891:             const output = escapeShellArg(input, shell, interpolation);",
          "892:             assert.strictEqual(output, \"foo``bar\");",
          "893:           });",
          "895:           it(\"escapes multiple backticks\", function () {",
          "896:             const input = \"Praise`the`sun\";",
          "897:             const output = escapeShellArg(input, shell, interpolation);",
          "898:             assert.strictEqual(output, \"Praise``the``sun\");",
          "899:           });",
          "902:         describe(\"comma (',')\", function () {",
          "903:           it(\"does nothing to one comma\", function () {",
          "904:             const input = \"foo,bar\";",
          "905:             const output = escapeShellArg(input, shell, interpolation);",
          "906:             assert.strictEqual(output, input);",
          "907:           });",
          "909:           it(\"does nothing to multiple commas\", function () {",
          "910:             const input = \"Praise,the,sun\";",
          "911:             const output = escapeShellArg(input, shell, interpolation);",
          "912:             assert.strictEqual(output, input);",
          "913:           });",
          "916:         describe(\"hashtags ('#')\", function () {",
          "917:           it(\"does nothing to one hashtag\", function () {",
          "918:             const input = \"#foobar\";",
          "919:             const output = escapeShellArg(input, shell, interpolation);",
          "920:             assert.strictEqual(output, input);",
          "921:           });",
          "923:           it(\"does nothing to multiple hashtags\", function () {",
          "924:             const input = \"#foo#bar\";",
          "925:             const output = escapeShellArg(input, shell, interpolation);",
          "926:             assert.strictEqual(output, input);",
          "927:           });",
          "930:         describe(\"at-signs ('@')\", function () {",
          "931:           it(\"does nothing to one at-sign\", function () {",
          "932:             const input = \"foo@bar\";",
          "933:             const output = escapeShellArg(input, shell, interpolation);",
          "934:             assert.strictEqual(output, input);",
          "935:           });",
          "937:           it(\"does nothing to multiple at-signs\", function () {",
          "938:             const input = \"@foo@bar\";",
          "939:             const output = escapeShellArg(input, shell, interpolation);",
          "940:             assert.strictEqual(output, input);",
          "941:           });",
          "944:         describe(\"hyphens ('-')\", function () {",
          "945:           it(\"does nothing to one hyphen\", function () {",
          "946:             const input = \"-foobar\";",
          "947:             const output = escapeShellArg(input, shell, interpolation);",
          "948:             assert.strictEqual(output, input);",
          "949:           });",
          "951:           it(\"does nothing to multiple hyphens\", function () {",
          "952:             const input = \"-foo-bar\";",
          "953:             const output = escapeShellArg(input, shell, interpolation);",
          "954:             assert.strictEqual(output, input);",
          "955:           });",
          "958:         describe(\"carets ('^')\", function () {",
          "959:           it(\"does nothing to one caret\", function () {",
          "960:             const input = \"foo^bar\";",
          "961:             const output = escapeShellArg(input, shell, interpolation);",
          "962:             assert.strictEqual(output, input);",
          "963:           });",
          "965:           it(\"does nothing to multiple carets\", function () {",
          "966:             const input = \"Praise^the^sun\";",
          "967:             const output = escapeShellArg(input, shell, interpolation);",
          "968:             assert.strictEqual(output, input);",
          "969:           });",
          "972:         describe(\"dollar signs ('$')\", function () {",
          "973:           it(\"escapes one dollar sign\", function () {",
          "974:             const input = \"foo$bar\";",
          "975:             const output = escapeShellArg(input, shell, interpolation);",
          "976:             assert.strictEqual(output, \"foo`$bar\");",
          "977:           });",
          "979:           it(\"escapes multiple dollar signs\", function () {",
          "980:             const input = \"Praise$the$sun\";",
          "981:             const output = escapeShellArg(input, shell, interpolation);",
          "982:             assert.strictEqual(output, \"Praise`$the`$sun\");",
          "983:           });",
          "986:         describe(\"colons (':')\", function () {",
          "987:           it(\"does nothing to one colon\", function () {",
          "988:             const input = \"foo:bar\";",
          "989:             const output = escapeShellArg(input, shell, interpolation);",
          "990:             assert.strictEqual(output, input);",
          "991:           });",
          "993:           it(\"does nothing to multiple colons\", function () {",
          "994:             const input = \"praise:the:sun\";",
          "995:             const output = escapeShellArg(input, shell, interpolation);",
          "996:             assert.strictEqual(output, input);",
          "997:           });",
          "998:         });",
          "1000:         describe(\"semicolons (';')\", function () {",
          "1001:           it(\"does nothing to one semicolon\", function () {",
          "1002:             const input = \"foo;bar\";",
          "1003:             const output = escapeShellArg(input, shell, interpolation);",
          "1004:             assert.strictEqual(output, input);",
          "1005:           });",
          "1007:           it(\"does nothing to multiple semicolons\", function () {",
          "1008:             const input = \"praise;the;sun\";",
          "1009:             const output = escapeShellArg(input, shell, interpolation);",
          "1010:             assert.strictEqual(output, input);",
          "1011:           });",
          "1012:         });",
          "1014:         describe(\"ampersands ('&')\", function () {",
          "1015:           it(\"does nothing to one ampersand\", function () {",
          "1016:             const input = \"foo&bar\";",
          "1017:             const output = escapeShellArg(input, shell, interpolation);",
          "1018:             assert.strictEqual(output, input);",
          "1019:           });",
          "1021:           it(\"does nothing to multiple ampersands\", function () {",
          "1022:             const input = \"praise&the&sun\";",
          "1023:             const output = escapeShellArg(input, shell, interpolation);",
          "1024:             assert.strictEqual(output, input);",
          "1025:           });",
          "1026:         });",
          "1028:         describe(\"pipes ('|')\", function () {",
          "1029:           it(\"does nothing to one pipe\", function () {",
          "1030:             const input = \"foo|bar\";",
          "1031:             const output = escapeShellArg(input, shell, interpolation);",
          "1032:             assert.strictEqual(output, input);",
          "1033:           });",
          "1035:           it(\"does nothing to multiple pipes\", function () {",
          "1036:             const input = \"praise|the|sun\";",
          "1037:             const output = escapeShellArg(input, shell, interpolation);",
          "1038:             assert.strictEqual(output, input);",
          "1039:           });",
          "1040:         });",
          "1042:         describe(\"parentheses ('(', ')')\", function () {",
          "1043:           it(\"does nothing to one opening parenthesis\", function () {",
          "1044:             const input = \"foo(bar\";",
          "1045:             const output = escapeShellArg(input, shell, interpolation);",
          "1046:             assert.strictEqual(output, input);",
          "1047:           });",
          "1049:           it(\"does nothing to multiple opening parentheses\", function () {",
          "1050:             const input = \"praise(the(sun\";",
          "1051:             const output = escapeShellArg(input, shell, interpolation);",
          "1052:             assert.strictEqual(output, input);",
          "1053:           });",
          "1055:           it(\"does nothing to one closing parenthesis\", function () {",
          "1056:             const input = \"foo(bar\";",
          "1057:             const output = escapeShellArg(input, shell, interpolation);",
          "1058:             assert.strictEqual(output, input);",
          "1059:           });",
          "1061:           it(\"does nothing to multiple closing parentheses\", function () {",
          "1062:             const input = \"praise(the(sun\";",
          "1063:             const output = escapeShellArg(input, shell, interpolation);",
          "1064:             assert.strictEqual(output, input);",
          "1065:           });",
          "1067:           it(\"does nothing to a pair of parentheses\", function () {",
          "1068:             const input = \"praise(the)sun\";",
          "1069:             const output = escapeShellArg(input, shell, interpolation);",
          "1070:             assert.strictEqual(output, input);",
          "1071:           });",
          "1072:         });",
          "1074:         describe(\"square brackets ('[', ']')\", function () {",
          "1075:           it(\"does nothing to one opening square bracket\", function () {",
          "1076:             const input = \"foo[bar\";",
          "1077:             const output = escapeShellArg(input, shell, interpolation);",
          "1078:             assert.strictEqual(output, input);",
          "1079:           });",
          "1081:           it(\"does nothing to multiple opening square brackets\", function () {",
          "1082:             const input = \"praise[the[sun\";",
          "1083:             const output = escapeShellArg(input, shell, interpolation);",
          "1084:             assert.strictEqual(output, input);",
          "1085:           });",
          "1087:           it(\"does nothing to one closing square bracket\", function () {",
          "1088:             const input = \"foo]bar\";",
          "1089:             const output = escapeShellArg(input, shell, interpolation);",
          "1090:             assert.strictEqual(output, input);",
          "1091:           });",
          "1093:           it(\"does nothing to multiple closing square brackets\", function () {",
          "1094:             const input = \"praise]the]sun\";",
          "1095:             const output = escapeShellArg(input, shell, interpolation);",
          "1096:             assert.strictEqual(output, input);",
          "1097:           });",
          "1099:           it(\"does nothing to a pair of square brackets\", function () {",
          "1100:             const input = \"praise[the]sun\";",
          "1101:             const output = escapeShellArg(input, shell, interpolation);",
          "1102:             assert.strictEqual(output, input);",
          "1103:           });",
          "1104:         });",
          "1106:         describe(\"curly brackets ('{', '}')\", function () {",
          "1107:           it(\"does nothing to one opening curly bracket\", function () {",
          "1108:             const input = \"foo{bar\";",
          "1109:             const output = escapeShellArg(input, shell, interpolation);",
          "1110:             assert.strictEqual(output, input);",
          "1111:           });",
          "1113:           it(\"does nothing to multiple opening curly brackets\", function () {",
          "1114:             const input = \"praise{the{sun\";",
          "1115:             const output = escapeShellArg(input, shell, interpolation);",
          "1116:             assert.strictEqual(output, input);",
          "1117:           });",
          "1119:           it(\"does nothing to one closing curly bracket\", function () {",
          "1120:             const input = \"foo}bar\";",
          "1121:             const output = escapeShellArg(input, shell, interpolation);",
          "1122:             assert.strictEqual(output, input);",
          "1123:           });",
          "1125:           it(\"does nothing to multiple closing curly brackets\", function () {",
          "1126:             const input = \"praise}the}sun\";",
          "1127:             const output = escapeShellArg(input, shell, interpolation);",
          "1128:             assert.strictEqual(output, input);",
          "1129:           });",
          "1131:           it(\"does nothing to a pair of curly brackets\", function () {",
          "1132:             const input = \"praise{the}sun\";",
          "1133:             const output = escapeShellArg(input, shell, interpolation);",
          "1134:             assert.strictEqual(output, input);",
          "1135:           });",
          "1136:         });",
          "1138:         describe(\"angle brackets ('<', '>')\", function () {",
          "1139:           it(\"does nothing to one left-angle bracket\", function () {",
          "1140:             const input = \"foo<bar\";",
          "1141:             const output = escapeShellArg(input, shell, interpolation);",
          "1142:             assert.strictEqual(output, input);",
          "1143:           });",
          "1145:           it(\"does nothing to multiple left-angle brackets\", function () {",
          "1146:             const input = \"<foo<bar\";",
          "1147:             const output = escapeShellArg(input, shell, interpolation);",
          "1148:             assert.strictEqual(output, input);",
          "1149:           });",
          "1151:           it(\"does nothing to one right-angle bracket\", function () {",
          "1152:             const input = \"foo>bar\";",
          "1153:             const output = escapeShellArg(input, shell, interpolation);",
          "1154:             assert.strictEqual(output, input);",
          "1155:           });",
          "1157:           it(\"does nothing to multiple right-angle brackets\", function () {",
          "1158:             const input = \">foo>bar\";",
          "1159:             const output = escapeShellArg(input, shell, interpolation);",
          "1160:             assert.strictEqual(output, input);",
          "1161:           });",
          "1162:         });",
          "1164:         describe(\"left double quotation mark ('\u201c')\", function () {",
          "1165:           it(\"escapes one\", function () {",
          "1166:             const input = \"foo\u201cbar\";",
          "1167:             const output = escapeShellArg(input, shell, interpolation);",
          "1168:             assert.strictEqual(output, \"foo\u201c\u201cbar\");",
          "1169:           });",
          "1171:           it(\"escapes multiple\", function () {",
          "1172:             const input = \"Praise\u201cthe\u201csun\";",
          "1173:             const output = escapeShellArg(input, shell, interpolation);",
          "1174:             assert.strictEqual(output, \"Praise\u201c\u201cthe\u201c\u201csun\");",
          "1175:           });",
          "1176:         });",
          "1178:         describe(\"right double quotation mark ('\u201d')\", function () {",
          "1179:           it(\"escapes one\", function () {",
          "1180:             const input = \"foo\u201dbar\";",
          "1181:             const output = escapeShellArg(input, shell, interpolation);",
          "1182:             assert.strictEqual(output, \"foo\u201d\u201dbar\");",
          "1183:           });",
          "1185:           it(\"escapes multiple\", function () {",
          "1186:             const input = \"Praise\u201dthe\u201dsun\";",
          "1187:             const output = escapeShellArg(input, shell, interpolation);",
          "1188:             assert.strictEqual(output, \"Praise\u201d\u201dthe\u201d\u201dsun\");",
          "1189:           });",
          "1190:         });",
          "1192:         describe(\"double low-9 quotation mark ('\u201e')\", function () {",
          "1193:           it(\"escapes one\", function () {",
          "1194:             const input = \"foo\u201ebar\";",
          "1195:             const output = escapeShellArg(input, shell, interpolation);",
          "1196:             assert.strictEqual(output, \"foo\u201e\u201ebar\");",
          "1197:           });",
          "1199:           it(\"escapes multiple\", function () {",
          "1200:             const input = \"Praise\u201ethe\u201esun\";",
          "1201:             const output = escapeShellArg(input, shell, interpolation);",
          "1202:             assert.strictEqual(output, \"Praise\u201e\u201ethe\u201e\u201esun\");",
          "1203:           });",
          "1204:         });",
          "1206:         describe(\"left single quotation mark ('\u2018')\", function () {",
          "1207:           it(\"does nothing to one\", function () {",
          "1208:             const input = \"foo\u2018bar\";",
          "1209:             const output = escapeShellArg(input, shell, interpolation);",
          "1210:             assert.strictEqual(output, input);",
          "1211:           });",
          "1213:           it(\"does nothing to multiple\", function () {",
          "1214:             const input = \"Praise\u2018the\u2018sun\";",
          "1215:             const output = escapeShellArg(input, shell, interpolation);",
          "1216:             assert.strictEqual(output, input);",
          "1217:           });",
          "1218:         });",
          "1220:         describe(\"right single quotation mark ('\u2019')\", function () {",
          "1221:           it(\"does nothing to one\", function () {",
          "1222:             const input = \"foo\u2019bar\";",
          "1223:             const output = escapeShellArg(input, shell, interpolation);",
          "1224:             assert.strictEqual(output, input);",
          "1225:           });",
          "1227:           it(\"does nothing to multiple\", function () {",
          "1228:             const input = \"Praise\u2019the\u2019sun\";",
          "1229:             const output = escapeShellArg(input, shell, interpolation);",
          "1230:             assert.strictEqual(output, input);",
          "1231:           });",
          "1234:         describe(\"single low-9 quotation mark ('\u201a')\", function () {",
          "1235:           it(\"does nothing to one\", function () {",
          "1236:             const input = \"foo\u201abar\";",
          "1237:             const output = escapeShellArg(input, shell, interpolation);",
          "1238:             assert.strictEqual(output, input);",
          "1239:           });",
          "1241:           it(\"does nothing to multiple\", function () {",
          "1242:             const input = \"Praise\u201athe\u201asun\";",
          "1243:             const output = escapeShellArg(input, shell, interpolation);",
          "1244:             assert.strictEqual(output, input);",
          "1245:           });",
          "1246:         });",
          "1248:         describe(\"single high-reversed-9 quotation mark ('\u201b')\", function () {",
          "1249:           it(\"does nothing to one\", function () {",
          "1250:             const input = \"foo\u201bbar\";",
          "1251:             const output = escapeShellArg(input, shell, interpolation);",
          "1252:             assert.strictEqual(output, input);",
          "1253:           });",
          "1255:           it(\"does nothing to multiple\", function () {",
          "1256:             const input = \"Praise\u201bthe\u201bsun\";",
          "1257:             const output = escapeShellArg(input, shell, interpolation);",
          "1258:             assert.strictEqual(output, input);",
          "1259:           });",
          "1263:       describe(\"With interpolation\", function () {",
          "1264:         const interpolation = true;",
          "1266:         it(\"returns the input if nothing has to be escaped\", function () {",
          "1267:           const input = `Hello world!`;",
          "1268:           const output = escapeShellArg(input, shell, interpolation);",
          "1269:           assert.strictEqual(output, input);",
          "1270:         });",
          "1272:         describe(\"null characters\", function () {",
          "1273:           it(\"removes one null character\", function () {",
          "1274:             const input = `foo ls${nullChar} -al bar`;",
          "1275:             const output = escapeShellArg(input, shell, interpolation);",
          "1276:             assert.strictEqual(output, `foo ls -al bar`);",
          "1277:           });",
          "1279:           it(\"removes multiple null characters\", function () {",
          "1280:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "1281:             const output = escapeShellArg(input, shell, interpolation);",
          "1282:             assert.strictEqual(output, `foo ls -al bar`);",
          "1283:           });",
          "1284:         });",
          "1286:         describe(\"double quotes ('\\\"')\", function () {",
          "1287:           it(\"escapes one double quote\", function () {",
          "1288:             const input = `\" ls -al`;",
          "1289:             const output = escapeShellArg(input, shell, interpolation);",
          "1290:             assert.strictEqual(output, '`\" ls -al');",
          "1291:           });",
          "1293:           it(\"escapes multiple double quotes\", function () {",
          "1294:             const input = `\" echo \"Hello world!`;",
          "1295:             const output = escapeShellArg(input, shell, interpolation);",
          "1296:             assert.strictEqual(output, '`\" echo `\"Hello world!');",
          "1297:           });",
          "1298:         });",
          "1300:         describe(\"backticks ('`')\", function () {",
          "1301:           it(\"escapes one backtick\", function () {",
          "1302:             const input = \"foo`bar\";",
          "1303:             const output = escapeShellArg(input, shell, interpolation);",
          "1304:             assert.strictEqual(output, \"foo``bar\");",
          "1305:           });",
          "1307:           it(\"escapes multiple backticks\", function () {",
          "1308:             const input = \"Praise`the`sun\";",
          "1309:             const output = escapeShellArg(input, shell, interpolation);",
          "1310:             assert.strictEqual(output, \"Praise``the``sun\");",
          "1311:           });",
          "1312:         });",
          "1314:         describe(\"comma (',')\", function () {",
          "1315:           it(\"escapes one comma\", function () {",
          "1316:             const input = \"foo,bar\";",
          "1317:             const output = escapeShellArg(input, shell, interpolation);",
          "1318:             assert.strictEqual(output, \"foo`,bar\");",
          "1319:           });",
          "1321:           it(\"escapes multiple commas\", function () {",
          "1322:             const input = \"Praise,the,sun\";",
          "1323:             const output = escapeShellArg(input, shell, interpolation);",
          "1324:             assert.strictEqual(output, \"Praise`,the`,sun\");",
          "1325:           });",
          "1326:         });",
          "1328:         describe(\"hashtags ('#')\", function () {",
          "1329:           it(\"escapes a hashtag at the start\", function () {",
          "1330:             const input = \"#foobar\";",
          "1331:             const output = escapeShellArg(input, shell, interpolation);",
          "1332:             assert.strictEqual(output, \"`#foobar\");",
          "1333:           });",
          "1335:           it(\"does nothing to a hashtag not at the start\", function () {",
          "1336:             const input = \"foo#bar\";",
          "1337:             const output = escapeShellArg(input, shell, interpolation);",
          "1338:             assert.strictEqual(output, input);",
          "1339:           });",
          "1341:           it(\"only escapes the hashtag at the start\", function () {",
          "1342:             const input = \"#foo#bar\";",
          "1343:             const output = escapeShellArg(input, shell, interpolation);",
          "1344:             assert.strictEqual(output, \"`#foo#bar\");",
          "1345:           });",
          "1346:         });",
          "1348:         describe(\"at-signs ('@')\", function () {",
          "1349:           it(\"escapes an at-sign at the start\", function () {",
          "1350:             const input = \"@foobar\";",
          "1351:             const output = escapeShellArg(input, shell, interpolation);",
          "1352:             assert.strictEqual(output, \"`@foobar\");",
          "1353:           });",
          "1355:           it(\"does nothing to an at-sign not at the start\", function () {",
          "1356:             const input = \"foo@bar\";",
          "1357:             const output = escapeShellArg(input, shell, interpolation);",
          "1358:             assert.strictEqual(output, input);",
          "1359:           });",
          "1361:           it(\"only escapes the at-sign at the start\", function () {",
          "1362:             const input = \"@foo@bar\";",
          "1363:             const output = escapeShellArg(input, shell, interpolation);",
          "1364:             assert.strictEqual(output, \"`@foo@bar\");",
          "1365:           });",
          "1366:         });",
          "1368:         describe(\"hyphens ('-')\", function () {",
          "1369:           it(\"escapes a hyphen at the start\", function () {",
          "1370:             const input = \"-foobar\";",
          "1371:             const output = escapeShellArg(input, shell, interpolation);",
          "1372:             assert.strictEqual(output, \"`-foobar\");",
          "1373:           });",
          "1375:           it(\"does nothing to a hyphen not at the start\", function () {",
          "1376:             const input = \"foo-bar\";",
          "1377:             const output = escapeShellArg(input, shell, interpolation);",
          "1378:             assert.strictEqual(output, input);",
          "1379:           });",
          "1381:           it(\"only escapes the hyphen at the start\", function () {",
          "1382:             const input = \"-foo-bar\";",
          "1383:             const output = escapeShellArg(input, shell, interpolation);",
          "1384:             assert.strictEqual(output, \"`-foo-bar\");",
          "1385:           });",
          "1386:         });",
          "1388:         describe(\"carets ('^')\", function () {",
          "1389:           it(\"does nothing to one caret\", function () {",
          "1390:             const input = \"foo^bar\";",
          "1391:             const output = escapeShellArg(input, shell, interpolation);",
          "1392:             assert.strictEqual(output, input);",
          "1393:           });",
          "1395:           it(\"does nothing to multiple carets\", function () {",
          "1396:             const input = \"Praise^the^sun\";",
          "1397:             const output = escapeShellArg(input, shell, interpolation);",
          "1398:             assert.strictEqual(output, input);",
          "1399:           });",
          "1400:         });",
          "1402:         describe(\"dollar signs ('$')\", function () {",
          "1403:           it(\"escapes one dollar sign\", function () {",
          "1404:             const input = \"foo$bar\";",
          "1405:             const output = escapeShellArg(input, shell, interpolation);",
          "1406:             assert.strictEqual(output, \"foo`$bar\");",
          "1407:           });",
          "1409:           it(\"escapes multiple dollar signs\", function () {",
          "1410:             const input = \"Praise$the$sun\";",
          "1411:             const output = escapeShellArg(input, shell, interpolation);",
          "1412:             assert.strictEqual(output, \"Praise`$the`$sun\");",
          "1413:           });",
          "1414:         });",
          "1416:         describe(\"colons (':')\", function () {",
          "1417:           it(\"escapes a colon at the start\", function () {",
          "1418:             const input = \":foobar\";",
          "1419:             const output = escapeShellArg(input, shell, interpolation);",
          "1420:             assert.strictEqual(output, \"`:foobar\");",
          "1421:           });",
          "1423:           it(\"does nothing to a colon not at the start\", function () {",
          "1424:             const input = \"foo:bar\";",
          "1425:             const output = escapeShellArg(input, shell, interpolation);",
          "1426:             assert.strictEqual(output, input);",
          "1427:           });",
          "1429:           it(\"only escapes the colon at the start\", function () {",
          "1430:             const input = \":foo:bar\";",
          "1431:             const output = escapeShellArg(input, shell, interpolation);",
          "1432:             assert.strictEqual(output, \"`:foo:bar\");",
          "1433:           });",
          "1434:         });",
          "1436:         describe(\"semicolons (';')\", function () {",
          "1437:           it(\"escapes one semicolon\", function () {",
          "1438:             const input = \"foo;bar\";",
          "1439:             const output = escapeShellArg(input, shell, interpolation);",
          "1440:             assert.strictEqual(output, \"foo`;bar\");",
          "1441:           });",
          "1443:           it(\"escapes multiple semicolons\", function () {",
          "1444:             const input = \"praise;the;sun\";",
          "1445:             const output = escapeShellArg(input, shell, interpolation);",
          "1446:             assert.strictEqual(output, \"praise`;the`;sun\");",
          "1447:           });",
          "1448:         });",
          "1450:         describe(\"ampersands ('&')\", function () {",
          "1451:           it(\"escapes one ampersand\", function () {",
          "1452:             const input = \"foo&bar\";",
          "1453:             const output = escapeShellArg(input, shell, interpolation);",
          "1454:             assert.strictEqual(output, \"foo`&bar\");",
          "1455:           });",
          "1457:           it(\"escapes multiple ampersands\", function () {",
          "1458:             const input = \"praise&the&sun\";",
          "1459:             const output = escapeShellArg(input, shell, interpolation);",
          "1460:             assert.strictEqual(output, \"praise`&the`&sun\");",
          "1461:           });",
          "1462:         });",
          "1464:         describe(\"pipes ('|')\", function () {",
          "1465:           it(\"escapes one pipe\", function () {",
          "1466:             const input = \"foo|bar\";",
          "1467:             const output = escapeShellArg(input, shell, interpolation);",
          "1468:             assert.strictEqual(output, \"foo`|bar\");",
          "1469:           });",
          "1471:           it(\"escapes multiple pipes\", function () {",
          "1472:             const input = \"praise|the|sun\";",
          "1473:             const output = escapeShellArg(input, shell, interpolation);",
          "1474:             assert.strictEqual(output, \"praise`|the`|sun\");",
          "1475:           });",
          "1476:         });",
          "1478:         describe(\"parentheses ('(', ')')\", function () {",
          "1479:           it(\"escapes one opening parenthesis\", function () {",
          "1480:             const input = \"foo(bar\";",
          "1481:             const output = escapeShellArg(input, shell, interpolation);",
          "1482:             assert.strictEqual(output, \"foo`(bar\");",
          "1483:           });",
          "1485:           it(\"escapes multiple opening parentheses\", function () {",
          "1486:             const input = \"praise(the(sun\";",
          "1487:             const output = escapeShellArg(input, shell, interpolation);",
          "1488:             assert.strictEqual(output, \"praise`(the`(sun\");",
          "1489:           });",
          "1491:           it(\"escapes one closing parenthesis\", function () {",
          "1492:             const input = \"foo)bar\";",
          "1493:             const output = escapeShellArg(input, shell, interpolation);",
          "1494:             assert.strictEqual(output, \"foo`)bar\");",
          "1495:           });",
          "1497:           it(\"escapes multiple closing parentheses\", function () {",
          "1498:             const input = \"praise)the)sun\";",
          "1499:             const output = escapeShellArg(input, shell, interpolation);",
          "1500:             assert.strictEqual(output, \"praise`)the`)sun\");",
          "1501:           });",
          "1503:           it(\"escapes a pair of parentheses\", function () {",
          "1504:             const input = \"praise(the)sun\";",
          "1505:             const output = escapeShellArg(input, shell, interpolation);",
          "1506:             assert.strictEqual(output, \"praise`(the`)sun\");",
          "1507:           });",
          "1508:         });",
          "1510:         describe(\"square brackets ('[', ']')\", function () {",
          "1511:           it(\"does nothing to one opening square bracket\", function () {",
          "1512:             const input = \"foo[bar\";",
          "1513:             const output = escapeShellArg(input, shell, interpolation);",
          "1514:             assert.strictEqual(output, input);",
          "1515:           });",
          "1517:           it(\"does nothing to multiple opening square brackets\", function () {",
          "1518:             const input = \"praise[the[sun\";",
          "1519:             const output = escapeShellArg(input, shell, interpolation);",
          "1520:             assert.strictEqual(output, input);",
          "1521:           });",
          "1523:           it(\"escapes a leading closing square bracket\", function () {",
          "1524:             const input = \"]foobar\";",
          "1525:             const output = escapeShellArg(input, shell, interpolation);",
          "1526:             assert.strictEqual(output, \"`]foobar\");",
          "1527:           });",
          "1529:           it(\"does nothing to one closing square bracket\", function () {",
          "1530:             const input = \"foo]bar\";",
          "1531:             const output = escapeShellArg(input, shell, interpolation);",
          "1532:             assert.strictEqual(output, input);",
          "1533:           });",
          "1535:           it(\"does nothing to multiple closing square brackets\", function () {",
          "1536:             const input = \"praise]the]sun\";",
          "1537:             const output = escapeShellArg(input, shell, interpolation);",
          "1538:             assert.strictEqual(output, input);",
          "1539:           });",
          "1541:           it(\"does nothing to a pair of square brackets\", function () {",
          "1542:             const input = \"praise[the]sun\";",
          "1543:             const output = escapeShellArg(input, shell, interpolation);",
          "1544:             assert.strictEqual(output, input);",
          "1545:           });",
          "1548:         describe(\"curly brackets ('{', '}')\", function () {",
          "1549:           it(\"escapes one opening parenthesis\", function () {",
          "1550:             const input = \"foo{bar\";",
          "1551:             const output = escapeShellArg(input, shell, interpolation);",
          "1552:             assert.strictEqual(output, \"foo`{bar\");",
          "1553:           });",
          "1555:           it(\"escapes multiple opening parentheses\", function () {",
          "1556:             const input = \"praise{the{sun\";",
          "1557:             const output = escapeShellArg(input, shell, interpolation);",
          "1558:             assert.strictEqual(output, \"praise`{the`{sun\");",
          "1559:           });",
          "1561:           it(\"escapes one closing parenthesis\", function () {",
          "1562:             const input = \"foo}bar\";",
          "1563:             const output = escapeShellArg(input, shell, interpolation);",
          "1564:             assert.strictEqual(output, \"foo`}bar\");",
          "1565:           });",
          "1567:           it(\"escapes multiple closing parentheses\", function () {",
          "1568:             const input = \"praise}the}sun\";",
          "1569:             const output = escapeShellArg(input, shell, interpolation);",
          "1570:             assert.strictEqual(output, \"praise`}the`}sun\");",
          "1571:           });",
          "1573:           it(\"escapes a pair of parentheses\", function () {",
          "1574:             const input = \"praise{the}sun\";",
          "1575:             const output = escapeShellArg(input, shell, interpolation);",
          "1576:             assert.strictEqual(output, \"praise`{the`}sun\");",
          "1577:           });",
          "1578:         });",
          "1580:         describe(\"angle brackets ('<', '>')\", function () {",
          "1581:           it(\"escapes a leading left-angle angle bracket\", function () {",
          "1582:             const input = \"<foobar\";",
          "1583:             const output = escapeShellArg(input, shell, interpolation);",
          "1584:             assert.strictEqual(output, \"`<foobar\");",
          "1585:           });",
          "1587:           it(\"escapes a leading right-angle angle bracket\", function () {",
          "1588:             const input = \">foobar\";",
          "1589:             const output = escapeShellArg(input, shell, interpolation);",
          "1590:             assert.strictEqual(output, \"`>foobar\");",
          "1591:           });",
          "1593:           it(\"escapes a right-angle angle bracket prefixed with 1\", function () {",
          "1594:             const input = \"1>foobar\";",
          "1595:             const output = escapeShellArg(input, shell, interpolation);",
          "1596:             assert.strictEqual(output, \"1`>foobar\");",
          "1597:           });",
          "1599:           it(\"escapes a right-angle angle bracket prefixed with 2\", function () {",
          "1600:             const input = \"2>foobar\";",
          "1601:             const output = escapeShellArg(input, shell, interpolation);",
          "1602:             assert.strictEqual(output, \"2`>foobar\");",
          "1603:           });",
          "1605:           it(\"escapes a right-angle angle bracket prefixed with 3\", function () {",
          "1606:             const input = \"3>foobar\";",
          "1607:             const output = escapeShellArg(input, shell, interpolation);",
          "1608:             assert.strictEqual(output, \"3`>foobar\");",
          "1609:           });",
          "1611:           it(\"escapes a right-angle angle bracket prefixed with 4\", function () {",
          "1612:             const input = \"4>foobar\";",
          "1613:             const output = escapeShellArg(input, shell, interpolation);",
          "1614:             assert.strictEqual(output, \"4`>foobar\");",
          "1615:           });",
          "1617:           it(\"escapes a right-angle angle bracket prefixed with 5\", function () {",
          "1618:             const input = \"5>foobar\";",
          "1619:             const output = escapeShellArg(input, shell, interpolation);",
          "1620:             assert.strictEqual(output, \"5`>foobar\");",
          "1621:           });",
          "1623:           it(\"escapes a right-angle angle bracket prefixed with 6\", function () {",
          "1624:             const input = \"6>foobar\";",
          "1625:             const output = escapeShellArg(input, shell, interpolation);",
          "1626:             assert.strictEqual(output, \"6`>foobar\");",
          "1627:           });",
          "1629:           it(\"escapes a right-angle angle bracket prefixed with *\", function () {",
          "1630:             const input = \"*>foobar\";",
          "1631:             const output = escapeShellArg(input, shell, interpolation);",
          "1632:             assert.strictEqual(output, \"*`>foobar\");",
          "1633:           });",
          "1635:           it(\"does nothing to one left-angle bracket\", function () {",
          "1636:             const input = \"foo<bar\";",
          "1637:             const output = escapeShellArg(input, shell, interpolation);",
          "1638:             assert.strictEqual(output, input);",
          "1639:           });",
          "1641:           it(\"does nothing to multiple left-angle brackets\", function () {",
          "1642:             const input = \"praise<the<sun\";",
          "1643:             const output = escapeShellArg(input, shell, interpolation);",
          "1644:             assert.strictEqual(output, input);",
          "1645:           });",
          "1647:           it(\"does nothing to one right-angle bracket\", function () {",
          "1648:             const input = \"foo>bar\";",
          "1649:             const output = escapeShellArg(input, shell, interpolation);",
          "1650:             assert.strictEqual(output, input);",
          "1651:           });",
          "1653:           it(\"does nothing to multiple right-angle brackets\", function () {",
          "1654:             const input = \"praise>the>sun\";",
          "1655:             const output = escapeShellArg(input, shell, interpolation);",
          "1656:             assert.strictEqual(output, input);",
          "1657:           });",
          "1658:         });",
          "1660:         describe(\"left double quotation mark ('\u201c')\", function () {",
          "1661:           it(\"escapes one\", function () {",
          "1662:             const input = \"foo\u201cbar\";",
          "1663:             const output = escapeShellArg(input, shell, interpolation);",
          "1664:             assert.strictEqual(output, \"foo`\u201cbar\");",
          "1665:           });",
          "1667:           it(\"escapes multiple\", function () {",
          "1668:             const input = \"Praise\u201cthe\u201csun\";",
          "1669:             const output = escapeShellArg(input, shell, interpolation);",
          "1670:             assert.strictEqual(output, \"Praise`\u201cthe`\u201csun\");",
          "1671:           });",
          "1672:         });",
          "1674:         describe(\"right double quotation mark ('\u201d')\", function () {",
          "1675:           it(\"escapes one\", function () {",
          "1676:             const input = \"foo\u201dbar\";",
          "1677:             const output = escapeShellArg(input, shell, interpolation);",
          "1678:             assert.strictEqual(output, \"foo`\u201dbar\");",
          "1679:           });",
          "1681:           it(\"escapes multiple\", function () {",
          "1682:             const input = \"Praise\u201dthe\u201dsun\";",
          "1683:             const output = escapeShellArg(input, shell, interpolation);",
          "1684:             assert.strictEqual(output, \"Praise`\u201dthe`\u201dsun\");",
          "1685:           });",
          "1686:         });",
          "1688:         describe(\"double low-9 quotation mark ('\u201e')\", function () {",
          "1689:           it(\"escapes one\", function () {",
          "1690:             const input = \"foo\u201ebar\";",
          "1691:             const output = escapeShellArg(input, shell, interpolation);",
          "1692:             assert.strictEqual(output, \"foo`\u201ebar\");",
          "1693:           });",
          "1695:           it(\"escapes multiple\", function () {",
          "1696:             const input = \"Praise\u201ethe\u201esun\";",
          "1697:             const output = escapeShellArg(input, shell, interpolation);",
          "1698:             assert.strictEqual(output, \"Praise`\u201ethe`\u201esun\");",
          "1699:           });",
          "1700:         });",
          "1702:         describe(\"left single quotation mark ('\u2018')\", function () {",
          "1703:           it(\"escapes one\", function () {",
          "1704:             const input = \"foo\u2018bar\";",
          "1705:             const output = escapeShellArg(input, shell, interpolation);",
          "1706:             assert.strictEqual(output, \"foo`\u2018bar\");",
          "1707:           });",
          "1709:           it(\"escapes multiple\", function () {",
          "1710:             const input = \"Praise\u2018the\u2018sun\";",
          "1711:             const output = escapeShellArg(input, shell, interpolation);",
          "1712:             assert.strictEqual(output, \"Praise`\u2018the`\u2018sun\");",
          "1713:           });",
          "1714:         });",
          "1716:         describe(\"right single quotation mark ('\u2019')\", function () {",
          "1717:           it(\"escapes one\", function () {",
          "1718:             const input = \"foo\u2019bar\";",
          "1719:             const output = escapeShellArg(input, shell, interpolation);",
          "1720:             assert.strictEqual(output, \"foo`\u2019bar\");",
          "1721:           });",
          "1723:           it(\"escapes multiple\", function () {",
          "1724:             const input = \"Praise\u2019the\u2019sun\";",
          "1725:             const output = escapeShellArg(input, shell, interpolation);",
          "1726:             assert.strictEqual(output, \"Praise`\u2019the`\u2019sun\");",
          "1727:           });",
          "1728:         });",
          "1730:         describe(\"single low-9 quotation mark ('\u201a')\", function () {",
          "1731:           it(\"escapes one\", function () {",
          "1732:             const input = \"foo\u201abar\";",
          "1733:             const output = escapeShellArg(input, shell, interpolation);",
          "1734:             assert.strictEqual(output, \"foo`\u201abar\");",
          "1735:           });",
          "1737:           it(\"escapes multiple\", function () {",
          "1738:             const input = \"Praise\u201athe\u201asun\";",
          "1739:             const output = escapeShellArg(input, shell, interpolation);",
          "1740:             assert.strictEqual(output, \"Praise`\u201athe`\u201asun\");",
          "1741:           });",
          "1742:         });",
          "1744:         describe(\"single high-reversed-9 quotation mark ('\u201b')\", function () {",
          "1745:           it(\"escapes one\", function () {",
          "1746:             const input = \"foo\u201bbar\";",
          "1747:             const output = escapeShellArg(input, shell, interpolation);",
          "1748:             assert.strictEqual(output, \"foo`\u201bbar\");",
          "1749:           });",
          "1751:           it(\"escapes multiple\", function () {",
          "1752:             const input = \"Praise\u201bthe\u201bsun\";",
          "1753:             const output = escapeShellArg(input, shell, interpolation);",
          "1754:             assert.strictEqual(output, \"Praise`\u201bthe`\u201bsun\");",
          "1755:           });",
          "",
          "---------------"
        ]
      }
    }
  ]
}