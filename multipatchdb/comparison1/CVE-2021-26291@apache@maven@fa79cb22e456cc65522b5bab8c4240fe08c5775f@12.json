{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
  "patch_info": {
    "commit_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ],
    "message": "[MNG-7116] add support for mirrorOf external:http:*",
    "before_after_code_files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ]
  },
  "patch_diff": {
    "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java": [
      "File: maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java -> maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "44:     public Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "45:     {",
      "46:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "115:                     result = true;",
      "117:                 }",
      "118:                 else if ( WILDCARD.equals( repo ) )",
      "119:                 {",
      "120:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "127:                 {",
      "128:                     result = true;",
      "130:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "136:         try",
      "137:         {",
      "138:             URL url = new URL( originalRepository.getUrl() );",
      "141:         }",
      "142:         catch ( MalformedURLException e )",
      "143:         {",
      "",
      "[Removed Lines]",
      "139:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "140:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "152:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "153:         }",
      "154:         catch ( MalformedURLException e )",
      "155:         {",
      "157:             return false;",
      "158:         }",
      "159:     }",
      "161:     private static boolean isLocal( String host )",
      "162:     {",
      "163:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "164:     }",
      "172:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "173:     {",
      "174:         try",
      "175:         {",
      "176:             URL url = new URL( originalRepository.getUrl() );",
      "177:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "178:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "179:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "146:         }",
      "147:     }",
      "150:     {",
      "151:         return matchesLayout( RepositoryUtils.getLayout( repository ), mirror.getMirrorOfLayouts() );",
      "152:     }",
      "",
      "[Removed Lines]",
      "149:     static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "[Added Lines]",
      "188:    static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "---------------"
    ],
    "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java": [
      "File: maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java -> maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "711:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "713:     public static Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "714:     {",
      "715:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "713:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "782:                     result = true;",
      "784:                 }",
      "785:                 else if ( WILDCARD.equals( repo ) )",
      "786:                 {",
      "787:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "794:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "795:                 {",
      "796:                     result = true;",
      "798:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "803:         try",
      "804:         {",
      "805:             URL url = new URL( originalRepository.getUrl() );",
      "808:         }",
      "809:         catch ( MalformedURLException e )",
      "810:         {",
      "",
      "[Removed Lines]",
      "806:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "807:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "820:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "821:         }",
      "822:         catch ( MalformedURLException e )",
      "823:         {",
      "825:             return false;",
      "826:         }",
      "827:     }",
      "829:     private static boolean isLocal( String host )",
      "830:     {",
      "831:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "832:     }",
      "840:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "841:     {",
      "842:         try",
      "843:         {",
      "844:             URL url = new URL( originalRepository.getUrl() );",
      "845:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "846:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "847:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "383cabf9e4992eeff36c9b5731d95bafa72398d3",
      "candidate_info": {
        "commit_hash": "383cabf9e4992eeff36c9b5731d95bafa72398d3",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/383cabf9e4992eeff36c9b5731d95bafa72398d3",
        "files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "maven-core/src/test/resources/projects/modelsourcebasedir/pom.xml",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ],
        "message": "[MNG-7216] [Regression] Revert MNG-7170\n\nThis reverts commit 5a8997312680a4b9c69a129801524691bc546c08.\n\nThis closes #524",
        "before_after_code_files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.apache.maven.model.Plugin;",
          "40: import org.apache.maven.model.building.FileModelSource;",
          "41: import org.apache.maven.model.building.ModelBuildingRequest;",
          "44: import org.apache.maven.model.building.ModelSource;",
          "45: import org.apache.maven.shared.utils.io.FileUtils;",
          "",
          "[Removed Lines]",
          "42: import org.apache.maven.model.building.ModelProblem;",
          "43: import org.apache.maven.model.building.ModelProblem.Severity;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:         assertNotNull( result.getProject().getParentFile() );",
          "86:     }",
          "112:     public void testVersionlessManagedDependency()",
          "113:         throws Exception",
          "114:     {",
          "",
          "[Removed Lines]",
          "88:     public void testBuildFromModelSourceResolvesBasedir()",
          "89:         throws Exception",
          "90:     {",
          "91:         File pomFile = new File( \"src/test/resources/projects/modelsourcebasedir/pom.xml\" );",
          "92:         MavenSession mavenSession = createMavenSession( null );",
          "93:         ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();",
          "94:         configuration.setRepositorySession( mavenSession.getRepositorySession() );",
          "95:         ModelSource modelSource = new FileModelSource( pomFile );",
          "96:         ProjectBuildingResult result =",
          "97:             getContainer().lookup( org.apache.maven.project.ProjectBuilder.class ).build( modelSource, configuration );",
          "99:         assertEquals( pomFile.getAbsoluteFile(), result.getProject().getModel().getPomFile().getAbsoluteFile() );",
          "100:         int errors = 0;",
          "101:         for ( ModelProblem p : result.getProblems() )",
          "102:         {",
          "103:             if ( p.getSeverity() == Severity.ERROR )",
          "104:             {",
          "105:                 errors++;",
          "106:             }",
          "107:         }",
          "108:         assertEquals( 0, errors );",
          "109:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:             throw problems.newModelBuildingException();",
          "625:         }",
          "636:         problems.setSource( model );",
          "637:         modelValidator.validateRawModel( model, request, problems );",
          "",
          "[Removed Lines]",
          "627:         if ( pomFile != null )",
          "628:         {",
          "629:             model.setPomFile( pomFile );",
          "630:         }",
          "631:         else if ( modelSource instanceof FileModelSource )",
          "632:         {",
          "633:             model.setPomFile( ( (FileModelSource) modelSource ).getFile() );",
          "634:         }",
          "",
          "[Added Lines]",
          "627:         model.setPomFile( pomFile );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "268f9565746175f5900670e372092e0c071d85bd",
      "candidate_info": {
        "commit_hash": "268f9565746175f5900670e372092e0c071d85bd",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/268f9565746175f5900670e372092e0c071d85bd",
        "files": [
          "apache-maven/src/bin/mvn.cmd",
          "maven-core/src/test/projects/project-builder/it0063/jdk/jre/placeholder.txt",
          "maven-core/src/test/projects/project-dependencies-resolver/it0063/jdk/jre/placeholder.txt"
        ],
        "message": "Use proper term: directory",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: set MAVEN_CMD_LINE_ARGS=%*",
          "78: @REM Fallback to current working directory if not found.",
          "80: set \"MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\"",
          "",
          "[Removed Lines]",
          "77: @REM Find the project basedir, i.e., the directory that contains the folder \".mvn\".",
          "",
          "[Added Lines]",
          "77: @REM Find the project basedir, i.e., the directory that contains the directory \".mvn\".",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c66edc0417f37540b3a6ef4b266ff88bdbd8327",
      "candidate_info": {
        "commit_hash": "8c66edc0417f37540b3a6ef4b266ff88bdbd8327",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8c66edc0417f37540b3a6ef4b266ff88bdbd8327",
        "files": [
          "apache-maven/pom.xml",
          "apache-maven/src/bin/mvn",
          "apache-maven/src/bin/mvn.cmd",
          "apache-maven/src/lib/jansi-native/README.txt",
          "apache-maven/src/main/assembly/.component.xml.swp",
          "apache-maven/src/main/assembly/component.xml"
        ],
        "message": "[MNG-7254] Expand Windows native libraries for Jansi due to JDK-8195129 (workaround)\n\nThis closes #542",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   -classpath %CLASSWORLDS_JAR% ^",
          "175:   \"-Dclassworlds.conf=%MAVEN_HOME%\\bin\\m2.conf\" ^",
          "176:   \"-Dmaven.home=%MAVEN_HOME%\" ^",
          "177:   \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" ^",
          "178:   %CLASSWORLDS_LAUNCHER% %MAVEN_CMD_LINE_ARGS%",
          "179: if ERRORLEVEL 1 goto error",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:   \"-Dlibrary.jansi.path=%MAVEN_HOME%\\lib\\jansi-native\" ^",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9adb3aedf21ca9a49560957e0e1b9125266bb401",
      "candidate_info": {
        "commit_hash": "9adb3aedf21ca9a49560957e0e1b9125266bb401",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/9adb3aedf21ca9a49560957e0e1b9125266bb401",
        "files": [
          "doap_Maven.rdf"
        ],
        "message": "Document Maven 3.8.1 and 3.8.2 releases",
        "before_after_code_files": [
          "doap_Maven.rdf||doap_Maven.rdf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "doap_Maven.rdf||doap_Maven.rdf": [
          "File: doap_Maven.rdf -> doap_Maven.rdf",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     <release>",
          "34:       <Version>",
          "35:         <name>Latest stable release</name>",
          "36:         <created>2019-08-27</created>",
          "37:         <revision>3.6.2</revision>",
          "38:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.zip</file-release>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:         <created>2021-08-04</created>",
          "37:         <revision>3.8.2</revision>",
          "38:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.zip</file-release>",
          "39:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.tar.gz</file-release>",
          "40:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.2/source/apache-maven-3.8.2-src.zip</file-release>",
          "41:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.2/source/apache-maven-3.8.2-src.tar.gz</file-release>",
          "42:       </Version>",
          "43:       <Version>",
          "44:         <name>Latest stable release</name>",
          "45:         <created>2021-04-04</created>",
          "46:         <revision>3.8.1</revision>",
          "47:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.zip</file-release>",
          "48:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz</file-release>",
          "49:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.1/source/apache-maven-3.8.1-src.zip</file-release>",
          "50:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.1/source/apache-maven-3.8.1-src.tar.gz</file-release>",
          "51:       </Version>",
          "52:       <Version>",
          "53:         <name>Apache Maven 3.6.2</name>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "547dfddb2ef02f44d9f2d0730348eaedfcd2e126",
      "candidate_info": {
        "commit_hash": "547dfddb2ef02f44d9f2d0730348eaedfcd2e126",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/547dfddb2ef02f44d9f2d0730348eaedfcd2e126",
        "files": [
          "apache-maven/pom.xml",
          "apache-maven/src/main/appended-resources/META-INF/LICENSE.vm",
          "apache-maven/src/main/appended-resources/licenses/ASL-2.0.txt",
          "apache-maven/src/main/appended-resources/licenses/Apache-2.0.txt",
          "apache-maven/src/main/assembly/component.xml"
        ],
        "message": "Improve license handling\n\n* Stream line the output of the license listing\n* Exclude jsoup from final distribution since we only need its license information\n* Use proper SPDX ID for our license\n\nThis closes #317",
        "before_after_code_files": [
          "apache-maven/src/main/appended-resources/META-INF/LICENSE.vm||apache-maven/src/main/appended-resources/META-INF/LICENSE.vm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/main/appended-resources/META-INF/LICENSE.vm||apache-maven/src/main/appended-resources/META-INF/LICENSE.vm": [
          "File: apache-maven/src/main/appended-resources/META-INF/LICENSE.vm -> apache-maven/src/main/appended-resources/META-INF/LICENSE.vm",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: ##",
          "24: ##",
          "25: #set ( $apacheMavenGroupIds = [ \"org.apache.maven\", \"org.apache.maven.wagon\", \"org.apache.maven.resolver\",",
          "26:                                 \"org.apache.maven.shared\" ] )",
          "27: #set ( $MITLicenseNames = [ \"MIT License\", \"MIT license\", \"The MIT License\" ] )",
          "28: #foreach ( $project in $projects )",
          "30: #*  *##set ( $groupId = $project.artifact.groupId )",
          "31: #*  *##set ( $directory = 'lib' )",
          "32: #*  *##if ( !$apacheMavenGroupIds.contains( $groupId ) )",
          "33: #*    *### advertise about each non-Maven dependency",
          "34: #*    *###",
          "36: #*    *##if ( $license.name == \"COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\" )",
          "37: #*      *##set ( $spdx = 'CDDL-1.0' )",
          "38: #*    *##elseif ( $MITLicenseNames.contains( $license.name ) )",
          "",
          "[Removed Lines]",
          "21: Apache Maven includes a number of components and libraries with separate",
          "22: copyright notices and license terms. Your use of those components are",
          "23: subject to the terms and conditions of the following licenses:",
          "29: #**##foreach ( $license in $project.licenses)",
          "35: #*    *### infer SPDX license code",
          "",
          "[Added Lines]",
          "21: Apache Maven includes a number of components and libraries with separate",
          "22: copyright notices and license terms. Your use of those components are",
          "23: subject to the terms and conditions of the following licenses:",
          "29: #**##foreach ( $license in $project.licenses )",
          "35: #*    *### infer SPDX license id",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: #*    *##elseif ( $license.name == \"Eclipse Public License, Version 1.0\" )",
          "41: #*      *##set ( $spdx = 'EPL-1.0' )",
          "42: #*    *##elseif ( $license.url.contains( \"www.apache.org/licenses/LICENSE-2.0\" ) )",
          "44: #*    *##else",
          "45: #*      *### unrecognized license will require analysis to know obligations",
          "46: #*      *##set ( $spdx = 'unrecognized' )",
          "",
          "[Removed Lines]",
          "43: #*      *##set ( $spdx = 'ASL-2.0' )",
          "",
          "[Added Lines]",
          "43: #*      *##set ( $spdx = 'Apache-2.0' )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68: #*    *##else",
          "69: #*      *##set ( $downloaded = $locator.getResourceAsFile( \"licenses/${spdx}.txt\", \"licenses/${licFile}\" ) )",
          "70: #*    *##end",
          "71: #*    *### add dependency info to output",
          "73: - $directory/${project.artifact.artifactId}-${project.artifact.version}.jar: $project.artifact.toString().replace( ':eclipse-plugin:', ':jar:' )",
          "75:     #if ( $project.url )Project URL: ${project.url}#end",
          "79: #*  *##end",
          "80: #**##end",
          "",
          "[Removed Lines]",
          "74:     $project.name",
          "77:     License: $license.name#if ( $spdx ) ($spdx)#end  $license.url ($licFile)",
          "",
          "[Added Lines]",
          "75:     Project: $project.name",
          "78:     License: $license.name#if ( $spdx ) ($spdx)#end",
          "80:     License URL: $license.url ($licFile)",
          "",
          "---------------"
        ]
      }
    }
  ]
}