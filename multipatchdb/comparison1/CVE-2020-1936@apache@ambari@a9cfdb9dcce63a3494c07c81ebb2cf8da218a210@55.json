{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f35b251d5cc32cd0a2101140e19f7ef5b9543e90",
      "candidate_info": {
        "commit_hash": "f35b251d5cc32cd0a2101140e19f7ef5b9543e90",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f35b251d5cc32cd0a2101140e19f7ef5b9543e90",
        "files": [
          "ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/configuration/atlas-env.xml",
          "ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/params.py",
          "ambari-server/src/main/resources/stacks/HDP/2.5/services/ATLAS/configuration/atlas-env.xml"
        ],
        "message": "AMBARI-24570. Atlas should handle a customized Zookeeper service principal name (amagyar) (#2210)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/params.py||ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/params.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/params.py||ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/params.py": [
          "File: ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/params.py -> ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: java_version = expect(\"/ambariLevelParams/java_version\", int)",
          "92: zk_root = default('/configurations/application-properties/atlas.server.ha.zookeeper.zkroot', '/apache_atlas')",
          "93: stack_supports_zk_security = check_stack_feature(StackFeature.SECURE_ZOOKEEPER, version_for_stack_feature_checks)",
          "94: atlas_kafka_group_id = default('/configurations/application-properties/atlas.kafka.hook.group.id', None)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: zk_principal_name = default(\"/configurations/zookeeper-env/zookeeper_principal_name\", \"zookeeper/_HOST@EXAMPLE.COM\")",
          "93: zk_principal_user = zk_principal_name.split('/')[0]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59caf726c376edcecba2b799e48cf0ce1a60c44c",
      "candidate_info": {
        "commit_hash": "59caf726c376edcecba2b799e48cf0ce1a60c44c",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/59caf726c376edcecba2b799e48cf0ce1a60c44c",
        "files": [
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js"
        ],
        "message": "AMBARI-24252 Can't register HDP 3.0.0.0 version and \"Use Local Repository\"",
        "before_after_code_files": [
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js -> ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:       $scope.osList.forEach(function(os) {",
          "276:         if (os.repositories && os.selected) {",
          "277:           os.repositories.forEach(function(repo) {",
          "279:               validBaseUrlsExist = false;",
          "280:             }",
          "281:           })",
          "",
          "[Removed Lines]",
          "278:             if (repo.invalidBaseUrl) {",
          "",
          "[Added Lines]",
          "278:             if (repo.invalidBaseUrl && $scope.showRepo(repo)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2dbaddb2ca7e75a28d41992dae0767748cc50c45",
      "candidate_info": {
        "commit_hash": "2dbaddb2ca7e75a28d41992dae0767748cc50c45",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/2dbaddb2ca7e75a28d41992dae0767748cc50c45",
        "files": [
          "ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py",
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_interactive_thrift_port.py",
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_thrift_port.py",
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py",
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/service_check.py"
        ],
        "message": "AMBARI-25399 Add hive PAM support for service check and alerts (ihorlukianov)",
        "before_after_code_files": [
          "ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py||ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py",
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_interactive_thrift_port.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_interactive_thrift_port.py",
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_thrift_port.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_thrift_port.py",
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py",
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/service_check.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/service_check.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py||ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py -> ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: def check_thrift_port_sasl(address, port, hive_auth=\"NOSASL\", key=None, kinitcmd=None, smokeuser='ambari-qa',",
          "29:                            hive_user='hive', transport_mode=\"binary\", http_endpoint=\"cliservice\",",
          "30:                            ssl=False, ssl_keystore=None, ssl_password=None, check_command_timeout=30,",
          "32:   \"\"\"",
          "33:   Hive thrift SASL port check",
          "34:   \"\"\"",
          "",
          "[Removed Lines]",
          "31:                            ldap_username=\"\", ldap_password=\"\"):",
          "",
          "[Added Lines]",
          "31:                            ldap_username=\"\", ldap_password=\"\", pam_username=\"\", pam_password=\"\"):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     quoted_ldap_password = quote_bash_args(ldap_password)",
          "61:     credential_str = \"-n {ldap_username} -p {quoted_ldap_password!p}\"",
          "63:   # append url according to ssl configuration",
          "64:   if ssl and ssl_keystore is not None and ssl_password is not None:",
          "65:     beeline_url.extend(['ssl={ssl_str}', 'sslTrustStore={ssl_keystore}', 'trustStorePassword={ssl_password!p}'])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:   # append username and password for PAM",
          "64:   if hive_auth == \"PAM\":",
          "65:     # password might contain special characters that need to be escaped",
          "66:     quoted_pam_password = quote_bash_args(pam_password)",
          "67:     credential_str = \"-n '{pam_username}' -p '{quoted_pam_password!p}'\"",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_interactive_thrift_port.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_interactive_thrift_port.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_interactive_thrift_port.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_interactive_thrift_port.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: HIVE_SSL_KEYSTORE_PASSWORD = '{{hive-interactive-site/hive.server2.keystore.password}}'",
          "49: HIVE_LDAP_USERNAME = '{{hive-env/alert_ldap_username}}'",
          "50: HIVE_LDAP_PASSWORD = '{{hive-env/alert_ldap_password}}'",
          "52: # The configured Kerberos executable search paths, if any",
          "53: KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY = '{{kerberos-env/executable_search_paths}}'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: HIVE_PAM_USERNAME = '{{hive-env/alert_pam_username}}'",
          "52: HIVE_PAM_PASSWORD = '{{hive-env/alert_pam_password}}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:           HIVE_SERVER_INTERACTIVE_THRIFT_HTTP_PORT_KEY, HIVE_SERVER_INTERACTIVE_TRANSPORT_MODE_KEY,",
          "90:           HIVE_SERVER_TRANSPORT_MODE_KEY, KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY, HIVE_SSL,",
          "91:           HIVE_SSL_KEYSTORE_PATH, HIVE_SSL_KEYSTORE_PASSWORD, HIVE_LDAP_USERNAME, HIVE_LDAP_PASSWORD,",
          "95: @OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)",
          "",
          "[Removed Lines]",
          "92:           HIVE_USER_KEY)",
          "",
          "[Added Lines]",
          "94:           HIVE_USER_KEY, HIVE_PAM_USERNAME, HIVE_PAM_PASSWORD)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:   if HIVE_LDAP_PASSWORD in configurations:",
          "179:     ldap_password = configurations[HIVE_LDAP_PASSWORD]",
          "181:   result_code = None",
          "183:   if security_enabled:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:   pam_username = \"\"",
          "184:   pam_password = \"\"",
          "185:   if HIVE_PAM_USERNAME in configurations:",
          "186:     pam_username = configurations[HIVE_PAM_USERNAME]",
          "187:   if HIVE_PAM_PASSWORD in configurations:",
          "188:     pam_password = configurations[HIVE_PAM_PASSWORD]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:                                         kinitcmd, smokeuser, hive_user = hive_user, transport_mode=transport_mode, ssl=hive_ssl,",
          "212:                                         ssl_keystore=hive_ssl_keystore_path, ssl_password=hive_ssl_keystore_password,",
          "213:                                         check_command_timeout=int(check_command_timeout), ldap_username=ldap_username,",
          "215:       result_code = 'OK'",
          "216:       total_time = time.time() - start_time",
          "217:       label = OK_MESSAGE.format(total_time, port)",
          "",
          "[Removed Lines]",
          "214:                                         ldap_password=ldap_password)",
          "",
          "[Added Lines]",
          "223:                                         ldap_password=ldap_password, pam_username=pam_username, pam_password=pam_password)",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_thrift_port.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_thrift_port.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_thrift_port.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/alerts/alert_hive_thrift_port.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: HIVE_SSL_KEYSTORE_PASSWORD = '{{hive-site/hive.server2.keystore.password}}'",
          "48: HIVE_LDAP_USERNAME = '{{hive-env/alert_ldap_username}}'",
          "49: HIVE_LDAP_PASSWORD = '{{hive-env/alert_ldap_password}}'",
          "52: # The configured Kerberos executable search paths, if any",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: HIVE_PAM_USERNAME = '{{hive-env/alert_pam_username}}'",
          "51: HIVE_PAM_PASSWORD = '{{hive-env/alert_pam_password}}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:           SMOKEUSER_KEYTAB_KEY, SMOKEUSER_PRINCIPAL_KEY, HIVE_SERVER_THRIFT_HTTP_PORT_KEY,",
          "89:           HIVE_SERVER_TRANSPORT_MODE_KEY, KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY, HIVE_SSL,",
          "90:           HIVE_SSL_KEYSTORE_PATH, HIVE_SSL_KEYSTORE_PASSWORD, HIVE_LDAP_USERNAME, HIVE_LDAP_PASSWORD,",
          "94: @OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)",
          "",
          "[Removed Lines]",
          "91:           HIVE_USER_KEY)",
          "",
          "[Added Lines]",
          "93:           HIVE_USER_KEY, HIVE_PAM_USERNAME, HIVE_PAM_PASSWORD)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:   if HIVE_LDAP_PASSWORD in configurations:",
          "173:     ldap_password = configurations[HIVE_LDAP_PASSWORD]",
          "175:   result_code = None",
          "177:   if security_enabled:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:   pam_username = \"\"",
          "178:   pam_password = \"\"",
          "179:   if HIVE_PAM_USERNAME in configurations:",
          "180:     pam_username = configurations[HIVE_PAM_USERNAME]",
          "181:   if HIVE_PAM_PASSWORD in configurations:",
          "182:     pam_password = configurations[HIVE_PAM_PASSWORD]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "205:                                         kinitcmd, smokeuser, hive_user = hive_user, transport_mode=transport_mode, ssl=hive_ssl,",
          "206:                                         ssl_keystore=hive_ssl_keystore_path, ssl_password=hive_ssl_keystore_password,",
          "207:                                         check_command_timeout=int(check_command_timeout),ldap_username=ldap_username,",
          "209:       result_code = 'OK'",
          "210:       total_time = time.time() - start_time",
          "211:       label = OK_MESSAGE.format(total_time, port)",
          "",
          "[Removed Lines]",
          "208:                                         ldap_password=ldap_password)",
          "",
          "[Added Lines]",
          "217:                                         ldap_password=ldap_password,pam_username=pam_username,pam_password=pam_password)",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "868: # For ldap - hive_check",
          "869: hive_ldap_user= config['configurations']['hive-env'].get('alert_ldap_username','')",
          "870: hive_ldap_passwd=config['configurations']['hive-env'].get('alert_ldap_password','')",
          "871: # For druid metadata password",
          "872: druid_metadata_password = \"\"",
          "873: if 'druid-common' in config['configurations'] \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872: # For pam - hive_check",
          "873: hive_pam_username = config['configurations']['hive-env'].get('alert_pam_username','')",
          "874: hive_pam_password = config['configurations']['hive-env'].get('alert_pam_password','')",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/service_check.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/service_check.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/service_check.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/service_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:                                transport_mode=params.hive_transport_mode, http_endpoint=params.hive_http_endpoint,",
          "125:                                ssl=params.hive_ssl, ssl_keystore=ssl_keystore,",
          "126:                                ssl_password=ssl_password, ldap_username=params.hive_ldap_user,",
          "128:         Logger.info(\"Successfully connected to {0} on port {1}\".format(address, server_port))",
          "129:         workable_server_available = True",
          "130:       except:",
          "",
          "[Removed Lines]",
          "127:                                ldap_password=params.hive_ldap_passwd)",
          "",
          "[Added Lines]",
          "127:                                ldap_password=params.hive_ldap_passwd, pam_username=params.hive_pam_username,",
          "128:                                pam_password=params.hive_pam_password)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f903f2cf9f1d38d9940ea6d138f5226a7a5157d",
      "candidate_info": {
        "commit_hash": "3f903f2cf9f1d38d9940ea6d138f5226a7a5157d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/3f903f2cf9f1d38d9940ea6d138f5226a7a5157d",
        "files": [
          "ambari-common/src/main/python/resource_management/libraries/functions/constants.py"
        ],
        "message": "AMBARI-25183 Need a stack feature constant for add zoneName field in collection used for Ranger plugin audit (#2852)",
        "before_after_code_files": [
          "ambari-common/src/main/python/resource_management/libraries/functions/constants.py||ambari-common/src/main/python/resource_management/libraries/functions/constants.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/resource_management/libraries/functions/constants.py||ambari-common/src/main/python/resource_management/libraries/functions/constants.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/functions/constants.py -> ambari-common/src/main/python/resource_management/libraries/functions/constants.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   AMS_LEGACY_HADOOP_SINK = \"ams_legacy_hadoop_sink\"",
          "127:   RANGER_ALL_ADMIN_CHANGE_DEFAULT_PASSWORD = 'ranger_all_admin_change_default_password'",
          "128:   KAFKA_ENV_INCLUDE_RANGER_SCRIPT='kafka_env_include_ranger_script'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:   RANGER_SUPPORT_SECURITY_ZONE_FEATURE = 'ranger_support_security_zone_feature'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26a48eac0cc06c534da51c057d71d895465919e1",
      "candidate_info": {
        "commit_hash": "26a48eac0cc06c534da51c057d71d895465919e1",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/26a48eac0cc06c534da51c057d71d895465919e1",
        "files": [
          "ambari-web/app/data/configs/services/ranger_properties.js",
          "ambari-web/app/models/stack_service.js"
        ],
        "message": "AMBARI-24378 Updating LDAPSettings section for Ranger in Advanced config section. (mugdha) (#1917)",
        "before_after_code_files": [
          "ambari-web/app/data/configs/services/ranger_properties.js||ambari-web/app/data/configs/services/ranger_properties.js",
          "ambari-web/app/models/stack_service.js||ambari-web/app/models/stack_service.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/data/configs/services/ranger_properties.js||ambari-web/app/data/configs/services/ranger_properties.js": [
          "File: ambari-web/app/data/configs/services/ranger_properties.js -> ambari-web/app/data/configs/services/ranger_properties.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: module.exports = [",
          "62:   {",
          "63:     \"category\": \"RANGER_ADMIN\",",
          "64:     \"filename\": \"ranger-env.xml\",",
          "",
          "[Removed Lines]",
          "20:   {",
          "21:     \"category\": \"SolrKerberosSettings\",",
          "22:     \"filename\": \"ranger-admin-site.xml\",",
          "23:     \"name\": \"xasecure.audit.jaas.Client.option.principal\",",
          "24:     \"serviceName\": \"RANGER\"",
          "25:   },",
          "26:   {",
          "27:     \"category\": \"SolrKerberosSettings\",",
          "28:     \"filename\": \"ranger-admin-site.xml\",",
          "29:     \"name\": \"xasecure.audit.jaas.Client.option.keyTab\",",
          "30:     \"serviceName\": \"RANGER\"",
          "31:   },",
          "32:   {",
          "33:     \"category\": \"SolrKerberosSettings\",",
          "34:     \"filename\": \"ranger-admin-site.xml\",",
          "35:     \"name\": \"xasecure.audit.jaas.Client.loginModuleName\",",
          "36:     \"serviceName\": \"RANGER\"",
          "37:   },",
          "38:   {",
          "39:     \"category\": \"SolrKerberosSettings\",",
          "40:     \"filename\": \"ranger-admin-site.xml\",",
          "41:     \"name\": \"xasecure.audit.jaas.Client.loginModuleControlFlag\",",
          "42:     \"serviceName\": \"RANGER\"",
          "43:   },",
          "44:   {",
          "45:     \"category\": \"SolrKerberosSettings\",",
          "46:     \"filename\": \"ranger-admin-site.xml\",",
          "47:     \"name\": \"xasecure.audit.jaas.Client.option.useKeyTab\",",
          "48:     \"serviceName\": \"RANGER\"",
          "49:   },",
          "50:   {",
          "51:     \"category\": \"SolrKerberosSettings\",",
          "52:     \"filename\": \"ranger-admin-site.xml\",",
          "53:     \"name\": \"xasecure.audit.jaas.Client.option.storeKey\",",
          "54:     \"serviceName\": \"RANGER\"",
          "55:   },",
          "56:   {",
          "57:     \"category\": \"SolrKerberosSettings\",",
          "58:     \"filename\": \"ranger-admin-site.xml\",",
          "59:     \"name\": \"xasecure.audit.jaas.Client.option.serviceName\",",
          "60:     \"serviceName\": \"RANGER\"",
          "61:   },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:           \"ranger.ldap.bind.dn\",",
          "121:           \"ranger.ldap.bind.password\",",
          "122:           \"ranger.ldap.referral\",",
          "124:         ]",
          "125:       },",
          "126:       {",
          "",
          "[Removed Lines]",
          "123:           \"ranger.ldap.user.searchfilter\"",
          "",
          "[Added Lines]",
          "81:           \"ranger.ldap.user.searchfilter\",",
          "82:           \"ranger.ldap.group.searchbase\",",
          "83:           \"ranger.ldap.group.searchfilter\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "286:     \"category\": \"ADSettings\",",
          "287:     \"filename\": \"ranger-admin-site.xml\",",
          "288:     \"name\": \"ranger.ldap.ad.domain\",",
          "289:     \"serviceName\": \"RANGER\"",
          "290:   },",
          "291:   {",
          "292:     \"category\": \"ADSettings\",",
          "293:     \"filename\": \"ranger-admin-site.xml\",",
          "294:     \"name\": \"ranger.ldap.ad.url\",",
          "295:     \"serviceName\": \"RANGER\"",
          "296:   },",
          "297:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:     \"index\": 4,",
          "256:     \"index\": 1,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "304:     \"category\": \"ADSettings\",",
          "305:     \"filename\": \"ranger-admin-site.xml\",",
          "306:     \"name\": \"ranger.ldap.ad.bind.dn\",",
          "307:     \"serviceName\": \"RANGER\"",
          "308:   },",
          "309:   {",
          "310:     \"category\": \"ADSettings\",",
          "311:     \"filename\": \"ranger-admin-site.xml\",",
          "312:     \"name\": \"ranger.ldap.ad.bind.password\",",
          "313:     \"serviceName\": \"RANGER\"",
          "314:   },",
          "315:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:     \"index\": 2,",
          "276:     \"index\": 3,",
          "",
          "---------------"
        ],
        "ambari-web/app/models/stack_service.js||ambari-web/app/models/stack_service.js": [
          "File: ambari-web/app/models/stack_service.js -> ambari-web/app/models/stack_service.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:         App.ServiceConfigCategory.create({ name: 'UnixAuthenticationSettings', displayName: 'Unix Authentication Settings'}),",
          "478:         App.ServiceConfigCategory.create({ name: 'ADSettings', displayName: 'AD Settings'}),",
          "479:         App.ServiceConfigCategory.create({ name: 'LDAPSettings', displayName: 'LDAP Settings'}),",
          "482:       ]);",
          "483:       break;",
          "484:     case 'ACCUMULO':",
          "",
          "[Removed Lines]",
          "480:         App.ServiceConfigCategory.create({ name: 'KnoxSSOSettings', displayName: 'Knox SSO Settings'}),",
          "481:         App.ServiceConfigCategory.create({ name: 'SolrKerberosSettings', displayName: 'Solr Kerberos Settings'})",
          "",
          "[Added Lines]",
          "480:         App.ServiceConfigCategory.create({ name: 'KnoxSSOSettings', displayName: 'Knox SSO Settings'})",
          "",
          "---------------"
        ]
      }
    }
  ]
}