{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "62448a39c108d8849733efe4a8b047669afc0a1c",
      "candidate_info": {
        "commit_hash": "62448a39c108d8849733efe4a8b047669afc0a1c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/62448a39c108d8849733efe4a8b047669afc0a1c",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"
        ],
        "message": "PDFBOX-4421: use getters/setters for encryptionKey, as suggested by Christian Appl\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881844 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:             }",
          "274:         }",
          "275:         catch (CMSException e)",
          "276:         {",
          "",
          "[Removed Lines]",
          "272:             encryptionKey = new byte[getKeyLength() / 8];",
          "273:             System.arraycopy(mdResult, 0, encryptionKey, 0, getKeyLength() / 8);",
          "",
          "[Added Lines]",
          "272:             setEncryptionKey(new byte[getKeyLength() / 8]);",
          "273:             System.arraycopy(mdResult, 0, getEncryptionKey(), 0, getKeyLength() / 8);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397:                     break;",
          "398:             }",
          "403:             doc.setEncryptionDictionary(dictionary);",
          "404:             doc.getDocument().setEncryptionDictionary(dictionary.getCOSObject());",
          "",
          "[Removed Lines]",
          "400:             this.encryptionKey = new byte[getKeyLength() / 8];",
          "401:             System.arraycopy(mdResult, 0, this.encryptionKey, 0, getKeyLength() / 8);",
          "",
          "[Added Lines]",
          "400:             setEncryptionKey(new byte[getKeyLength() / 8]);",
          "401:             System.arraycopy(mdResult, 0, getEncryptionKey(), 0, getKeyLength() / 8);",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "734:         this.protectionPolicy = protectionPolicy;",
          "735:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:     public byte[] getEncryptionKey()",
          "743:     {",
          "744:         return encryptionKey;",
          "745:     }",
          "752:     public void setEncryptionKey(byte[] encryptionKey)",
          "753:     {",
          "754:         this.encryptionKey = encryptionKey;",
          "755:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:                         ownerKey, dicRevision, dicLength );",
          "208:             }",
          "211:                 computeEncryptedKey(",
          "212:                     computedPassword,",
          "213:                     ownerKey, userKey, oe, ue,",
          "",
          "[Removed Lines]",
          "210:             encryptionKey =",
          "",
          "[Added Lines]",
          "210:             setEncryptionKey(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:                     documentIDBytes,",
          "216:                     dicRevision,",
          "217:                     dicLength,",
          "219:         }",
          "220:         else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,",
          "221:                            dicPermissions, documentIDBytes, dicRevision,",
          "",
          "[Removed Lines]",
          "218:                     encryptMetadata, true );",
          "",
          "[Added Lines]",
          "218:                     encryptMetadata, true));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:             currentAccessPermission.setReadOnly();",
          "226:             setCurrentAccessPermission(currentAccessPermission);",
          "229:                 computeEncryptedKey(",
          "230:                     password.getBytes(passwordCharset),",
          "231:                     ownerKey, userKey, oe, ue,",
          "",
          "[Removed Lines]",
          "228:             encryptionKey =",
          "",
          "[Added Lines]",
          "228:             setEncryptionKey(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:                     documentIDBytes,",
          "234:                     dicRevision,",
          "235:                     dicLength,",
          "237:         }",
          "238:         else",
          "239:         {",
          "",
          "[Removed Lines]",
          "236:                     encryptMetadata, false );",
          "",
          "[Added Lines]",
          "236:                     encryptMetadata, false));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "289:             Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");",
          "291:             byte[] perms = cipher.doFinal(encryption.getPerms());",
          "",
          "[Removed Lines]",
          "290:             cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(encryptionKey, \"AES\"));",
          "",
          "[Added Lines]",
          "290:             cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(getEncryptionKey(), \"AES\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "397:             Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");",
          "404:             byte[] userPasswordBytes = truncate127(userPassword.getBytes(Charsets.UTF_8));",
          "",
          "[Removed Lines]",
          "400:             encryptionKey = new byte[32];",
          "401:             rnd.nextBytes(encryptionKey);",
          "",
          "[Added Lines]",
          "400:             setEncryptionKey(new byte[32]);",
          "401:             rnd.nextBytes(getEncryptionKey());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "415:                     userPasswordBytes, null);",
          "416:             cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(hashUE, \"AES\"),",
          "417:                     new IvParameterSpec(new byte[16]));",
          "421:             byte[] ownerPasswordBytes = truncate127(ownerPassword.getBytes(Charsets.UTF_8));",
          "",
          "[Removed Lines]",
          "418:             byte[] ue = cipher.doFinal(encryptionKey);",
          "",
          "[Added Lines]",
          "418:             byte[] ue = cipher.doFinal(getEncryptionKey());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "432:                     ownerPasswordBytes, u);",
          "433:             cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(hashOE, \"AES\"),",
          "434:                     new IvParameterSpec(new byte[16]));",
          "438:             encryptionDictionary.setUserKey(u);",
          "",
          "[Removed Lines]",
          "435:             byte[] oe = cipher.doFinal(encryptionKey);",
          "",
          "[Added Lines]",
          "435:             byte[] oe = cipher.doFinal(getEncryptionKey());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "461:                 perms[i] = (byte) rnd.nextInt();",
          "462:             }",
          "465:                     new IvParameterSpec(new byte[16]));",
          "467:             byte[] permsEnc = cipher.doFinal(perms);",
          "",
          "[Removed Lines]",
          "464:             cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(encryptionKey, \"AES\"),",
          "",
          "[Added Lines]",
          "464:             cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(getEncryptionKey(), \"AES\"),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "511:                 userPassword.getBytes(Charsets.ISO_8859_1),",
          "512:                 ownerBytes, permissionInt, id.getBytes(), revision, length, true);",
          "517:         encryptionDictionary.setOwnerKey(ownerBytes);",
          "518:         encryptionDictionary.setUserKey(userBytes);",
          "",
          "[Removed Lines]",
          "514:         encryptionKey = computeEncryptedKey(userPassword.getBytes(Charsets.ISO_8859_1), ownerBytes,",
          "515:                 null, null, null, permissionInt, id.getBytes(), revision, length, true, false);",
          "",
          "[Added Lines]",
          "514:         setEncryptionKey(computeEncryptedKey(userPassword.getBytes(Charsets.ISO_8859_1), ownerBytes,",
          "515:                 null, null, null, permissionInt, id.getBytes(), revision, length, true, false));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a85de4093b93b1c33513b2b817e6661c2d0522a9",
      "candidate_info": {
        "commit_hash": "a85de4093b93b1c33513b2b817e6661c2d0522a9",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a85de4093b93b1c33513b2b817e6661c2d0522a9",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java",
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawerParameters.java"
        ],
        "message": "PDFBOX-4928: fix typo\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884244 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java",
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawerParameters.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawerParameters.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     private static boolean kcmsLogged = false;",
          "",
          "[Removed Lines]",
          "79:     private float imageDownscalingOptimizationThreshhold = 0.5f;",
          "",
          "[Added Lines]",
          "79:     private float imageDownscalingOptimizationThreshold = 0.5f;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:     {",
          "192:     }",
          "203:     {",
          "205:     }",
          "",
          "[Removed Lines]",
          "189:     public float getImageDownscalingOptimizationThreshhold()",
          "191:         return imageDownscalingOptimizationThreshhold;",
          "202:     public void setImageDownscalingOptimizationThreshhold(float imageDownscalingOptimizationThreshhold)",
          "204:         this.imageDownscalingOptimizationThreshhold = imageDownscalingOptimizationThreshhold;",
          "",
          "[Added Lines]",
          "189:     public float getImageDownscalingOptimizationThreshold()",
          "191:         return imageDownscalingOptimizationThreshold;",
          "202:     public void setImageDownscalingOptimizationThreshold(float imageDownscalingOptimizationThreshold)",
          "204:         this.imageDownscalingOptimizationThreshold = imageDownscalingOptimizationThreshold;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "342:                 renderingHints == null ? createDefaultRenderingHints(g) : renderingHints;",
          "343:         PageDrawerParameters parameters =",
          "344:                 new PageDrawerParameters(this, page, subsamplingAllowed, destination,",
          "346:         PageDrawer drawer = createPageDrawer(parameters);",
          "347:         drawer.drawPage(g, page.getCropBox());",
          "",
          "[Removed Lines]",
          "345:                         actualRenderingHints, imageDownscalingOptimizationThreshhold);",
          "",
          "[Added Lines]",
          "345:                         actualRenderingHints, imageDownscalingOptimizationThreshold);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "453:                 renderingHints == null ? createDefaultRenderingHints(graphics) : renderingHints;",
          "454:         PageDrawerParameters parameters =",
          "455:                 new PageDrawerParameters(this, page, subsamplingAllowed, destination,",
          "457:         PageDrawer drawer = createPageDrawer(parameters);",
          "458:         drawer.drawPage(graphics, cropBox);",
          "459:     }",
          "",
          "[Removed Lines]",
          "456:                         actualRenderingHints, imageDownscalingOptimizationThreshhold);",
          "",
          "[Added Lines]",
          "456:                         actualRenderingHints, imageDownscalingOptimizationThreshold);",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:     private final RenderDestination destination;",
          "165:     private final RenderingHints renderingHints;",
          "168:     static final int JAVA_VERSION = PageDrawer.getJavaVersion();",
          "",
          "[Removed Lines]",
          "166:     private final float imageDownscalingOptimizationThreshhold;",
          "",
          "[Added Lines]",
          "166:     private final float imageDownscalingOptimizationThreshold;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:         this.subsamplingAllowed = parameters.isSubsamplingAllowed();",
          "193:         this.destination = parameters.getDestination();",
          "194:         this.renderingHints = parameters.getRenderingHints();",
          "197:     }",
          "",
          "[Removed Lines]",
          "195:         this.imageDownscalingOptimizationThreshhold =",
          "196:                 parameters.getImageDownscalingOptimizationThreshhold();",
          "",
          "[Added Lines]",
          "195:         this.imageDownscalingOptimizationThreshold =",
          "196:                 parameters.getImageDownscalingOptimizationThreshold();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1256:             float scaleX = Math.abs(imageTransformMatrix.getScalingFactorX() * graphicsTransformMatrix.getScalingFactorX());",
          "1257:             float scaleY = Math.abs(imageTransformMatrix.getScalingFactorY() * graphicsTransformMatrix.getScalingFactorY());",
          "1260:                 RenderingHints.VALUE_RENDER_QUALITY.equals(graphics.getRenderingHint(RenderingHints.KEY_RENDERING)) &&",
          "1261:                 RenderingHints.VALUE_INTERPOLATION_BICUBIC.equals(graphics.getRenderingHint(RenderingHints.KEY_INTERPOLATION)))",
          "1262:             {",
          "",
          "[Removed Lines]",
          "1259:             if ((scaleX < imageDownscalingOptimizationThreshhold || scaleY < imageDownscalingOptimizationThreshhold) &&",
          "",
          "[Added Lines]",
          "1259:             if ((scaleX < imageDownscalingOptimizationThreshold || scaleY < imageDownscalingOptimizationThreshold) &&",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawerParameters.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawerParameters.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawerParameters.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawerParameters.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     private final boolean subsamplingAllowed;",
          "36:     private final RenderDestination destination;",
          "37:     private final RenderingHints renderingHints;",
          "43:     PageDrawerParameters(PDFRenderer renderer, PDPage page, boolean subsamplingAllowed,",
          "44:                          RenderDestination destination, RenderingHints renderingHints,",
          "46:     {",
          "47:         this.renderer = renderer;",
          "48:         this.page = page;",
          "49:         this.subsamplingAllowed = subsamplingAllowed;",
          "50:         this.destination = destination;",
          "51:         this.renderingHints = renderingHints;",
          "53:     }",
          "",
          "[Removed Lines]",
          "38:     private final float imageDownscalingOptimizationThreshhold;",
          "45:                          float imageDownscalingOptimizationThreshhold)",
          "52:         this.imageDownscalingOptimizationThreshhold = imageDownscalingOptimizationThreshhold;",
          "",
          "[Added Lines]",
          "38:     private final float imageDownscalingOptimizationThreshold;",
          "45:                          float imageDownscalingOptimizationThreshold)",
          "52:         this.imageDownscalingOptimizationThreshold = imageDownscalingOptimizationThreshold;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:     {",
          "103:     }",
          "104: }",
          "",
          "[Removed Lines]",
          "100:     public float getImageDownscalingOptimizationThreshhold()",
          "102:         return imageDownscalingOptimizationThreshhold;",
          "",
          "[Added Lines]",
          "100:     public float getImageDownscalingOptimizationThreshold()",
          "102:         return imageDownscalingOptimizationThreshold;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38bc6cf775a994ab0d0910627806282a58ff4889",
      "candidate_info": {
        "commit_hash": "38bc6cf775a994ab0d0910627806282a58ff4889",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/38bc6cf775a994ab0d0910627806282a58ff4889",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/ui/MenuBase.java"
        ],
        "message": "PDFBOX-4892: fix typo, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887706 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/ui/MenuBase.java||debugger/src/main/java/org/apache/pdfbox/debugger/ui/MenuBase.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/ui/MenuBase.java||debugger/src/main/java/org/apache/pdfbox/debugger/ui/MenuBase.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/ui/MenuBase.java -> debugger/src/main/java/org/apache/pdfbox/debugger/ui/MenuBase.java"
        ]
      }
    },
    {
      "candidate_hash": "6426900c3eab28b3d2950cca603ce3d9cffff448",
      "candidate_info": {
        "commit_hash": "6426900c3eab28b3d2950cca603ce3d9cffff448",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6426900c3eab28b3d2950cca603ce3d9cffff448",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java"
        ],
        "message": "PDFBOX-4892: improve performance, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887877 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:         {",
          "226:             final float scale = fontSize/FONTSCALE;",
          "227:             float calculatedWidth = 0f;",
          "228:             for (Word word : words)",
          "229:             {",
          "230:                 calculatedWidth = calculatedWidth +",
          "231:                         (Float) word.getAttributes().getIterator().getAttribute(TextAttribute.WIDTH);",
          "232:                 String text = word.getText();",
          "234:                 {",
          "235:                     float whitespaceWidth = font.getStringWidth(text.substring(text.length()-1)) * scale;",
          "236:                     calculatedWidth = calculatedWidth - whitespaceWidth;",
          "237:                 }",
          "238:             }",
          "239:             return calculatedWidth;",
          "240:         }",
          "",
          "[Removed Lines]",
          "233:                 if (words.indexOf(word) == words.size() -1 && Character.isWhitespace(text.charAt(text.length()-1)))",
          "",
          "[Added Lines]",
          "228:             int indexOfWord = 0;",
          "234:                 if (indexOfWord == words.size() -1 && Character.isWhitespace(text.charAt(text.length()-1)))",
          "239:                 ++indexOfWord;",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:         {",
          "264:             final float scale = fontSize/FONTSCALE;",
          "265:             float calculatedWidth = 0f;",
          "266:             for (Word word : words)",
          "267:             {",
          "268:                 calculatedWidth = calculatedWidth +",
          "269:                         (Float) word.getAttributes().getIterator().getAttribute(TextAttribute.WIDTH);",
          "270:                 String text = word.getText();",
          "272:                 {",
          "273:                     float whitespaceWidth = font.getStringWidth(text.substring(text.length()-1)) * scale;",
          "274:                     calculatedWidth = calculatedWidth - whitespaceWidth;",
          "275:                 }",
          "276:             }",
          "277:             return calculatedWidth;",
          "278:         }",
          "",
          "[Removed Lines]",
          "271:                 if (words.indexOf(word) == words.size() -1 && Character.isWhitespace(text.charAt(text.length()-1)))",
          "",
          "[Added Lines]",
          "266:             int indexOfWord = 0;",
          "272:                 if (indexOfWord == words.size() -1 && Character.isWhitespace(text.charAt(text.length()-1)))",
          "277:                 ++indexOfWord;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "529f0d875e5d24a2c45e368dd24450a608624840",
      "candidate_info": {
        "commit_hash": "529f0d875e5d24a2c45e368dd24450a608624840",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/529f0d875e5d24a2c45e368dd24450a608624840",
        "files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java"
        ],
        "message": "PDFBOX-4421: improve error message\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881906 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java||preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java||preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java -> preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     {",
          "108:         if (value == null || !(value.equals(\"A\") || value.equals(\"B\")))",
          "109:         {",
          "111:         }",
          "112:     }",
          "",
          "[Removed Lines]",
          "110:             ve.add(new ValidationError(ERROR_METADATA_INVALID_PDFA_CONFORMANCE));",
          "",
          "[Added Lines]",
          "110:             ve.add(new ValidationError(ERROR_METADATA_INVALID_PDFA_CONFORMANCE,",
          "111:                     \"conformance level must be A or B\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:     {",
          "116:         if (value != 1)",
          "117:         {",
          "119:         }",
          "120:     }",
          "121: }",
          "",
          "[Removed Lines]",
          "118:             ve.add(new ValidationError(ERROR_METADATA_INVALID_PDFA_VERSION_ID));",
          "",
          "[Added Lines]",
          "119:             ve.add(new ValidationError(ERROR_METADATA_INVALID_PDFA_VERSION_ID, \"part must be 1\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}