{
  "cve_id": "CVE-2023-4316",
  "cve_desc": "Zod in versions 3.21.0 up to and including 3.22.3 allows an attacker to perform a denial of service while validating emails.",
  "repo": "colinhacks/zod",
  "patch_hash": "2ba00fe2377f4d53947a84b8cdb314a63bbd6dd4",
  "patch_info": {
    "commit_hash": "2ba00fe2377f4d53947a84b8cdb314a63bbd6dd4",
    "repo": "colinhacks/zod",
    "commit_url": "https://github.com/colinhacks/zod/commit/2ba00fe2377f4d53947a84b8cdb314a63bbd6dd4",
    "files": [
      "deno/lib/README.md",
      "deno/lib/__tests__/string.test.ts",
      "deno/lib/types.ts",
      "src/__tests__/string.test.ts",
      "src/types.ts"
    ],
    "message": "[2609] fix ReDoS vulnerability in email regex (#2824)",
    "before_after_code_files": [
      "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
      "deno/lib/types.ts||deno/lib/types.ts",
      "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
      "src/types.ts||src/types.ts"
    ]
  },
  "patch_diff": {
    "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts": [
      "File: deno/lib/__tests__/string.test.ts -> deno/lib/__tests__/string.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "146:     `gbacher0@[IPv6:bc37:4d3f:5048:2e26:37cc:248e:df8e:2f7f:af]`,",
      "147:     `invalid@[IPv6:5348:4ed3:5d38:67fb:e9b:acd2:c13:192.168.256.1]`,",
      "148:     `test@.com`,",
      "149:   ];",
      "150:   const emailSchema = z.string().email();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "149:     `aaaaaaaaaaaaaaalongemailthatcausesregexDoSvulnerability@test.c`",
      "",
      "---------------"
    ],
    "deno/lib/types.ts||deno/lib/types.ts": [
      "File: deno/lib/types.ts -> deno/lib/types.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "567: const emailRegex =",
      "",
      "[Removed Lines]",
      "568:   /^([A-Z0-9_+-]+\\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
      "",
      "[Added Lines]",
      "568:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
      "",
      "---------------"
    ],
    "src/__tests__/string.test.ts||src/__tests__/string.test.ts": [
      "File: src/__tests__/string.test.ts -> src/__tests__/string.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "145:     `gbacher0@[IPv6:bc37:4d3f:5048:2e26:37cc:248e:df8e:2f7f:af]`,",
      "146:     `invalid@[IPv6:5348:4ed3:5d38:67fb:e9b:acd2:c13:192.168.256.1]`,",
      "147:     `test@.com`,",
      "148:   ];",
      "149:   const emailSchema = z.string().email();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:     `aaaaaaaaaaaaaaalongemailthatcausesregexDoSvulnerability@test.c`",
      "",
      "---------------"
    ],
    "src/types.ts||src/types.ts": [
      "File: src/types.ts -> src/types.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "567: const emailRegex =",
      "",
      "[Removed Lines]",
      "568:   /^([A-Z0-9_+-]+\\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
      "",
      "[Added Lines]",
      "568:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0b62f8c0c1722a15bd8afbc003e78fe7a177b2a2",
      "candidate_info": {
        "commit_hash": "0b62f8c0c1722a15bd8afbc003e78fe7a177b2a2",
        "repo": "colinhacks/zod",
        "commit_url": "https://github.com/colinhacks/zod/commit/0b62f8c0c1722a15bd8afbc003e78fe7a177b2a2",
        "files": [
          "deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts",
          "playground.ts",
          "src/__tests__/string.test.ts",
          "src/types.ts"
        ],
        "message": "Revert email regex changes",
        "before_after_code_files": [
          "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts||deno/lib/types.ts",
          "playground.ts||playground.ts",
          "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
          "src/types.ts||src/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ],
          "candidate": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ]
        }
      },
      "candidate_diff": {
        "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts": [
          "File: deno/lib/__tests__/string.test.ts -> deno/lib/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   expect(() => email.parse(\"@lkjasdf.com\")).toThrow();",
          "40:   expect(() => email.parse(\"asdf@sdf.\")).toThrow();",
          "41:   expect(() => email.parse(\"asdf@asdf.com-\")).toThrow();",
          "43: });",
          "45: test(\"more email validations\", () => {",
          "",
          "[Removed Lines]",
          "42:   expect(() => email.parse(\"asdf@-asdf.com\")).toThrow();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deno/lib/types.ts||deno/lib/types.ts": [
          "File: deno/lib/types.ts -> deno/lib/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "517: const emailRegex =",
          "",
          "[Removed Lines]",
          "518:   /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})(?<!-)$/i;",
          "",
          "[Added Lines]",
          "518:   /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;",
          "",
          "---------------"
        ],
        "playground.ts||playground.ts": [
          "File: playground.ts -> playground.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: console.log(z.coerce.boolean().parse(0)); // => false",
          "10: console.log(z.coerce.boolean().parse(undefined)); // => false",
          "11: console.log(z.coerce.boolean().parse(null)); // => false",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: z.object({",
          "14:   first: z.string(),",
          "15:   last: z.string(),",
          "16: }).transform((val) => ({",
          "17:   ...val,",
          "18:   full: `${val.first} ${val.last}`,",
          "19: }));",
          "21: z.number().catch(() => (Array.isArray(e) ? e.length : -1));",
          "",
          "---------------"
        ],
        "src/__tests__/string.test.ts||src/__tests__/string.test.ts": [
          "File: src/__tests__/string.test.ts -> src/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   expect(() => email.parse(\"@lkjasdf.com\")).toThrow();",
          "39:   expect(() => email.parse(\"asdf@sdf.\")).toThrow();",
          "40:   expect(() => email.parse(\"asdf@asdf.com-\")).toThrow();",
          "42: });",
          "44: test(\"more email validations\", () => {",
          "",
          "[Removed Lines]",
          "41:   expect(() => email.parse(\"asdf@-asdf.com\")).toThrow();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/types.ts||src/types.ts": [
          "File: src/types.ts -> src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "517: const emailRegex =",
          "",
          "[Removed Lines]",
          "518:   /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})(?<!-)$/i;",
          "",
          "[Added Lines]",
          "518:   /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16beeb598039b33bc5a209956042d858abacca34",
      "candidate_info": {
        "commit_hash": "16beeb598039b33bc5a209956042d858abacca34",
        "repo": "colinhacks/zod",
        "commit_url": "https://github.com/colinhacks/zod/commit/16beeb598039b33bc5a209956042d858abacca34",
        "files": [
          "README.md",
          "deno/lib/README.md",
          "deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts",
          "src/__tests__/string.test.ts",
          "src/types.ts"
        ],
        "message": "lowercase method for ZodString (#2038)\n\n* lowercase method for ZodString\n\n* Rename to toLowerCase. Add toUpperCase.:\n\n* Update readme\n\n---------\n\nCo-authored-by: Colin McDonnell <colinmcd94@gmail.com>",
        "before_after_code_files": [
          "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts||deno/lib/types.ts",
          "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
          "src/types.ts||src/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ],
          "candidate": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ]
        }
      },
      "candidate_diff": {
        "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts": [
          "File: deno/lib/__tests__/string.test.ts -> deno/lib/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:   expect(() => z.string().trim().min(2).parse(\" 1 \")).toThrow();",
          "310: });",
          "312: test(\"datetime\", () => {",
          "313:   const a = z.string().datetime({});",
          "314:   expect(a.isDatetime).toEqual(true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312: test(\"lowerCase\", () => {",
          "313:   expect(z.string().toLowerCase().parse(\"ASDF\")).toEqual(\"asdf\");",
          "314:   expect(z.string().toUpperCase().parse(\"asdf\")).toEqual(\"ASDF\");",
          "315: });",
          "",
          "---------------"
        ],
        "deno/lib/types.ts||deno/lib/types.ts": [
          "File: deno/lib/types.ts -> deno/lib/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:   | { kind: \"endsWith\"; value: string; message?: string }",
          "502:   | { kind: \"regex\"; regex: RegExp; message?: string }",
          "503:   | { kind: \"trim\"; message?: string }",
          "504:   | {",
          "505:       kind: \"datetime\";",
          "506:       offset: boolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504:   | { kind: \"toLowerCase\"; message?: string }",
          "505:   | { kind: \"toUpperCase\"; message?: string }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "529: const emailRegex =",
          "530:   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;",
          "533: const ipv4Regex =",
          "534:   /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534: const emojiRegex = /^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "536: const ipv6Regex =",
          "537:   /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;",
          "542: const datetimeRegex = (args: { precision: number | null; offset: boolean }) => {",
          "543:   if (args.precision) {",
          "",
          "[Removed Lines]",
          "539: const emojiRegex = /^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "735:         }",
          "736:       } else if (check.kind === \"trim\") {",
          "737:         input.data = input.data.trim();",
          "738:       } else if (check.kind === \"startsWith\") {",
          "739:         if (!(input.data as string).startsWith(check.value)) {",
          "740:           ctx = this._getOrReturnCtx(input, ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:       } else if (check.kind === \"toLowerCase\") {",
          "740:         input.data = input.data.toLowerCase();",
          "741:       } else if (check.kind === \"toUpperCase\") {",
          "742:         input.data = input.data.toUpperCase();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "913:       checks: [...this._def.checks, { kind: \"trim\" }],",
          "914:     });",
          "916:   get isDatetime() {",
          "917:     return !!this._def.checks.find((ch) => ch.kind === \"datetime\");",
          "918:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "921:   toLowerCase = () =>",
          "922:     new ZodString({",
          "923:       ...this._def,",
          "924:       checks: [...this._def.checks, { kind: \"toLowerCase\" }],",
          "925:     });",
          "927:   toUpperCase = () =>",
          "928:     new ZodString({",
          "929:       ...this._def,",
          "930:       checks: [...this._def.checks, { kind: \"toUpperCase\" }],",
          "931:     });",
          "",
          "---------------"
        ],
        "src/__tests__/string.test.ts||src/__tests__/string.test.ts": [
          "File: src/__tests__/string.test.ts -> src/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:   expect(() => z.string().trim().min(2).parse(\" 1 \")).toThrow();",
          "309: });",
          "311: test(\"datetime\", () => {",
          "312:   const a = z.string().datetime({});",
          "313:   expect(a.isDatetime).toEqual(true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: test(\"lowerCase\", () => {",
          "312:   expect(z.string().toLowerCase().parse(\"ASDF\")).toEqual(\"asdf\");",
          "313:   expect(z.string().toUpperCase().parse(\"asdf\")).toEqual(\"ASDF\");",
          "314: });",
          "",
          "---------------"
        ],
        "src/types.ts||src/types.ts": [
          "File: src/types.ts -> src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:   | { kind: \"endsWith\"; value: string; message?: string }",
          "502:   | { kind: \"regex\"; regex: RegExp; message?: string }",
          "503:   | { kind: \"trim\"; message?: string }",
          "504:   | {",
          "505:       kind: \"datetime\";",
          "506:       offset: boolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504:   | { kind: \"toLowerCase\"; message?: string }",
          "505:   | { kind: \"toUpperCase\"; message?: string }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531: const emojiRegex = /^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u;",
          "",
          "[Removed Lines]",
          "529: const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;",
          "",
          "[Added Lines]",
          "531: const emailRegex =",
          "532:   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "733:         }",
          "734:       } else if (check.kind === \"trim\") {",
          "735:         input.data = input.data.trim();",
          "736:       } else if (check.kind === \"startsWith\") {",
          "737:         if (!(input.data as string).startsWith(check.value)) {",
          "738:           ctx = this._getOrReturnCtx(input, ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:       } else if (check.kind === \"toLowerCase\") {",
          "740:         input.data = input.data.toLowerCase();",
          "741:       } else if (check.kind === \"toUpperCase\") {",
          "742:         input.data = input.data.toUpperCase();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "911:       checks: [...this._def.checks, { kind: \"trim\" }],",
          "912:     });",
          "914:   get isDatetime() {",
          "915:     return !!this._def.checks.find((ch) => ch.kind === \"datetime\");",
          "916:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "921:   toLowerCase = () =>",
          "922:     new ZodString({",
          "923:       ...this._def,",
          "924:       checks: [...this._def.checks, { kind: \"toLowerCase\" }],",
          "925:     });",
          "927:   toUpperCase = () =>",
          "928:     new ZodString({",
          "929:       ...this._def,",
          "930:       checks: [...this._def.checks, { kind: \"toUpperCase\" }],",
          "931:     });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9894ce3140440bc7d2c53b213d016c751f08c6ec",
      "candidate_info": {
        "commit_hash": "9894ce3140440bc7d2c53b213d016c751f08c6ec",
        "repo": "colinhacks/zod",
        "commit_url": "https://github.com/colinhacks/zod/commit/9894ce3140440bc7d2c53b213d016c751f08c6ec",
        "files": [
          "deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts",
          "src/__tests__/string.test.ts",
          "src/types.ts"
        ],
        "message": "fix: escape hyphen in regex (#3286)",
        "before_after_code_files": [
          "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts||deno/lib/types.ts",
          "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
          "src/types.ts||src/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ],
          "candidate": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ]
        }
      },
      "candidate_diff": {
        "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts": [
          "File: deno/lib/__tests__/string.test.ts -> deno/lib/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     `\" \"@example.org`,",
          "83:     `\"john..doe\"@example.org`,",
          "84:     `\"very.(),:;<>[]\\\".VERY.\\\"very@\\\\ \\\"very\\\".unusual\"@strange.example.com`,",
          "87:     `email@123.123.123.123`,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     `a,b@domain.com`,",
          "",
          "---------------"
        ],
        "deno/lib/types.ts||deno/lib/types.ts": [
          "File: deno/lib/types.ts -> deno/lib/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "594: const emailRegex =",
          "595:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595: <<<<<<< HEAD",
          "597: =======",
          "598:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "599: >>>>>>> f5b65ff (fix: escape hyphen in regex)",
          "",
          "---------------"
        ],
        "src/__tests__/string.test.ts||src/__tests__/string.test.ts": [
          "File: src/__tests__/string.test.ts -> src/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     `\" \"@example.org`,",
          "82:     `\"john..doe\"@example.org`,",
          "83:     `\"very.(),:;<>[]\\\".VERY.\\\"very@\\\\ \\\"very\\\".unusual\"@strange.example.com`,",
          "86:     `email@123.123.123.123`,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     `a,b@domain.com`,",
          "",
          "---------------"
        ],
        "src/types.ts||src/types.ts": [
          "File: src/types.ts -> src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "594: const emailRegex =",
          "",
          "[Removed Lines]",
          "595:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "",
          "[Added Lines]",
          "595:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dabd5ac5634a63f2940aaed0ed86106ed22f0c07",
      "candidate_info": {
        "commit_hash": "dabd5ac5634a63f2940aaed0ed86106ed22f0c07",
        "repo": "colinhacks/zod",
        "commit_url": "https://github.com/colinhacks/zod/commit/dabd5ac5634a63f2940aaed0ed86106ed22f0c07",
        "files": [
          "deno/lib/README.md",
          "deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts",
          "src/__tests__/string.test.ts",
          "src/types.ts"
        ],
        "message": "fix: #1638 and Redundant character escape '\\' in RegExp (#1648)",
        "before_after_code_files": [
          "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
          "deno/lib/types.ts||deno/lib/types.ts",
          "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
          "src/types.ts||src/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ],
          "candidate": [
            "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts",
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/__tests__/string.test.ts||src/__tests__/string.test.ts",
            "src/types.ts||src/types.ts"
          ]
        }
      },
      "candidate_diff": {
        "deno/lib/__tests__/string.test.ts||deno/lib/__tests__/string.test.ts": [
          "File: deno/lib/__tests__/string.test.ts -> deno/lib/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   expect(() => email.parse(\"asdf\")).toThrow();",
          "39:   expect(() => email.parse(\"@lkjasdf.com\")).toThrow();",
          "40:   expect(() => email.parse(\"asdf@sdf.\")).toThrow();",
          "41: });",
          "43: test(\"more email validations\", () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:   expect(() => email.parse(\"asdf@asdf.com-\")).toThrow();",
          "42:   expect(() => email.parse(\"asdf@-asdf.com\")).toThrow();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     `\"\ud83c\udf7a\ud83d\udd7a\ud83c\udf89\"@domain.com`,",
          "49:     `poop@\ud83d\udca9.la`,",
          "50:     `\"\ud83c\udf2e\"@i\u2764\ufe0ftacos.ws`,",
          "51:   ];",
          "52:   const email = z.string().email();",
          "53:   for (const datum of data) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     \"sss--asd@i\u2764\ufe0ftacos.ws\"",
          "",
          "---------------"
        ],
        "deno/lib/types.ts||deno/lib/types.ts": [
          "File: deno/lib/types.ts -> deno/lib/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "517: const emailRegex =",
          "",
          "[Removed Lines]",
          "518:   /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;",
          "",
          "[Added Lines]",
          "518:   /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})(?<!-)$/i;",
          "",
          "---------------"
        ],
        "src/__tests__/string.test.ts||src/__tests__/string.test.ts": [
          "File: src/__tests__/string.test.ts -> src/__tests__/string.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   expect(() => email.parse(\"asdf\")).toThrow();",
          "38:   expect(() => email.parse(\"@lkjasdf.com\")).toThrow();",
          "39:   expect(() => email.parse(\"asdf@sdf.\")).toThrow();",
          "40: });",
          "42: test(\"more email validations\", () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   expect(() => email.parse(\"asdf@asdf.com-\")).toThrow();",
          "41:   expect(() => email.parse(\"asdf@-asdf.com\")).toThrow();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     `\"\ud83c\udf7a\ud83d\udd7a\ud83c\udf89\"@domain.com`,",
          "48:     `poop@\ud83d\udca9.la`,",
          "49:     `\"\ud83c\udf2e\"@i\u2764\ufe0ftacos.ws`,",
          "50:   ];",
          "51:   const email = z.string().email();",
          "52:   for (const datum of data) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     \"sss--asd@i\u2764\ufe0ftacos.ws\"",
          "",
          "---------------"
        ],
        "src/types.ts||src/types.ts": [
          "File: src/types.ts -> src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "517: const emailRegex =",
          "",
          "[Removed Lines]",
          "518:   /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;",
          "",
          "[Added Lines]",
          "518:   /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})(?<!-)$/i;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2ed20cd703321466fbf499986245c42eae02900",
      "candidate_info": {
        "commit_hash": "b2ed20cd703321466fbf499986245c42eae02900",
        "repo": "colinhacks/zod",
        "commit_url": "https://github.com/colinhacks/zod/commit/b2ed20cd703321466fbf499986245c42eae02900",
        "files": [
          "deno/lib/types.ts",
          "src/types.ts"
        ],
        "message": "Allow external validators in z.custom",
        "before_after_code_files": [
          "deno/lib/types.ts||deno/lib/types.ts",
          "src/types.ts||src/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/types.ts||src/types.ts"
          ],
          "candidate": [
            "deno/lib/types.ts||deno/lib/types.ts",
            "src/types.ts||src/types.ts"
          ]
        }
      },
      "candidate_diff": {
        "deno/lib/types.ts||deno/lib/types.ts": [
          "File: deno/lib/types.ts -> deno/lib/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "594: const emailRegex =",
          "",
          "[Removed Lines]",
          "595: <<<<<<< HEAD",
          "596:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "597: =======",
          "598:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "599: >>>>>>> f5b65ff (fix: escape hyphen in regex)",
          "",
          "[Added Lines]",
          "595:   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5017: type CustomParams = CustomErrorParams & { fatal?: boolean };",
          "5020:   params: string | CustomParams | ((input: any) => CustomParams) = {},",
          "",
          "[Removed Lines]",
          "5018: export const custom = <T>(",
          "5019:   check?: (data: unknown) => any,",
          "",
          "[Added Lines]",
          "5014: export function custom<T>(",
          "5015:   check?: (data: any) => any,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5031:   fatal?: boolean",
          "5033:   if (check)",
          "5034:     return ZodAny.create().superRefine((data, ctx) => {",
          "5035:       if (!check(data)) {",
          "",
          "[Removed Lines]",
          "5032: ): ZodType<T> => {",
          "",
          "[Added Lines]",
          "5028: ): ZodType<T> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5045:       }",
          "5046:     });",
          "5047:   return ZodAny.create();",
          "5050: export { ZodType as Schema, ZodType as ZodSchema };",
          "",
          "[Removed Lines]",
          "5048: };",
          "",
          "[Added Lines]",
          "5044: }",
          "",
          "---------------"
        ],
        "src/types.ts||src/types.ts": [
          "File: src/types.ts -> src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5013: type CustomParams = CustomErrorParams & { fatal?: boolean };",
          "5016:   params: string | CustomParams | ((input: any) => CustomParams) = {},",
          "",
          "[Removed Lines]",
          "5014: export const custom = <T>(",
          "5015:   check?: (data: unknown) => any,",
          "",
          "[Added Lines]",
          "5014: export function custom<T>(",
          "5015:   check?: (data: any) => any,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5027:   fatal?: boolean",
          "5029:   if (check)",
          "5030:     return ZodAny.create().superRefine((data, ctx) => {",
          "5031:       if (!check(data)) {",
          "",
          "[Removed Lines]",
          "5028: ): ZodType<T> => {",
          "",
          "[Added Lines]",
          "5028: ): ZodType<T> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5041:       }",
          "5042:     });",
          "5043:   return ZodAny.create();",
          "5046: export { ZodType as Schema, ZodType as ZodSchema };",
          "",
          "[Removed Lines]",
          "5044: };",
          "",
          "[Added Lines]",
          "5044: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}