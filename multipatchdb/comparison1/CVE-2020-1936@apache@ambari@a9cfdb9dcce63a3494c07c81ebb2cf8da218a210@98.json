{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1fa854123fe8fda8cc6126a11f17a4c24daf06d2",
      "candidate_info": {
        "commit_hash": "1fa854123fe8fda8cc6126a11f17a4c24daf06d2",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/1fa854123fe8fda8cc6126a11f17a4c24daf06d2",
        "files": [
          "ambari-web/app/controllers/main/service/reassign/step1_controller.js",
          "ambari-web/app/controllers/main/service/reassign/step4_controller.js"
        ],
        "message": "AMBARI-25227 Unable to move Hive metastore from one node to another. (ababiichuk)",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/service/reassign/step1_controller.js||ambari-web/app/controllers/main/service/reassign/step1_controller.js",
          "ambari-web/app/controllers/main/service/reassign/step4_controller.js||ambari-web/app/controllers/main/service/reassign/step4_controller.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/service/reassign/step1_controller.js||ambari-web/app/controllers/main/service/reassign/step1_controller.js": [
          "File: ambari-web/app/controllers/main/service/reassign/step1_controller.js -> ambari-web/app/controllers/main/service/reassign/step1_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   dbPropertyMap: {",
          "29:     'HIVE_SERVER': {",
          "32:     },",
          "33:     'HIVE_METASTORE': {",
          "36:     },",
          "37:     'OOZIE_SERVER': {",
          "38:       type: 'oozie-site',",
          "",
          "[Removed Lines]",
          "30:       type: 'hive-site',",
          "31:       name: 'javax.jdo.option.ConnectionDriverName'",
          "34:       type: 'hive-site',",
          "35:       name: 'javax.jdo.option.ConnectionDriverName'",
          "",
          "[Added Lines]",
          "30:       type: 'hive-env',",
          "31:       name: 'hive_database_type'",
          "34:       type: 'hive-env',",
          "35:       name: 'hive_database_type'",
          "",
          "---------------"
        ],
        "ambari-web/app/controllers/main/service/reassign/step4_controller.js||ambari-web/app/controllers/main/service/reassign/step4_controller.js": [
          "File: ambari-web/app/controllers/main/service/reassign/step4_controller.js -> ambari-web/app/controllers/main/service/reassign/step4_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   dependentHostComponents: [],",
          "",
          "[Removed Lines]",
          "75:   dbPropertyMap: {",
          "76:     'HIVE_SERVER': {",
          "77:       type: 'hive-site',",
          "78:       name: 'javax.jdo.option.ConnectionDriverName'",
          "79:     },",
          "80:     'HIVE_METASTORE': {",
          "81:       type: 'hive-site',",
          "82:       name: 'javax.jdo.option.ConnectionDriverName'",
          "83:     },",
          "84:     'OOZIE_SERVER': {",
          "85:       type: 'oozie-site',",
          "86:       name: 'oozie.service.JPAService.jdbc.url'",
          "87:     }",
          "88:   },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "659:     return propertiesMap[this.get('content.reassign.service_id')];",
          "660:   }.property(),",
          "680:   prepareDBCheckAction: function() {",
          "681:     var params = this.get('preparedDBProperties');",
          "683:     var ambariProperties = App.router.get('clusterController.ambariProperties');",
          "686:     params['jdk_location'] = ambariProperties['jdk_location'];",
          "687:     params['jdk_name'] = ambariProperties['jdk.name'];",
          "688:     params['java_home'] = ambariProperties['java.home'];",
          "",
          "[Removed Lines]",
          "662:   dbType: function() {",
          "663:     var databaseTypes = /MySQL|PostgreS|Oracle|Derby|MSSQL|Anywhere/gi,",
          "664:       dbPropertyMapItem = Em.getWithDefault(this.get('dbPropertyMap'), this.get('content.reassign.component_name'), null),",
          "665:       databasePropMatch,",
          "666:       databaseProp,",
          "667:       result;",
          "669:     if (dbPropertyMapItem) {",
          "670:       databaseProp = Em.getWithDefault(this.get('content.configs'), dbPropertyMapItem.type, {})[dbPropertyMapItem.name];",
          "671:       databasePropMatch = databaseProp && databaseProp.match(databaseTypes);",
          "672:       if (databasePropMatch) {",
          "673:         result = databasePropMatch[0];",
          "674:       }",
          "675:     }",
          "677:     return result;",
          "678:   }.property(),",
          "685:     params['db_name'] = this.get('dbType');",
          "",
          "[Added Lines]",
          "652:     params['db_name'] = this.get('content.databaseType');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "775:   testDBRetryTooltip: function() {",
          "776:     var db_host = this.get('content.serviceProperties.database_hostname');",
          "778:     var db_props = this.get('preparedDBProperties');",
          "780:     return Em.I18n.t('services.reassign.step4.tasks.testDBConnection.tooltip').format(",
          "",
          "[Removed Lines]",
          "777:     var db_type = this.get('dbType');",
          "",
          "[Added Lines]",
          "744:     var db_type = this.get('content.databaseType');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14a6f80382c577deaec33b3ca574e07b77af5ecf",
      "candidate_info": {
        "commit_hash": "14a6f80382c577deaec33b3ca574e07b77af5ecf",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/14a6f80382c577deaec33b3ca574e07b77af5ecf",
        "files": [
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java"
        ],
        "message": "AMBARI-24950 - Logsearch: use os timezone in Logfeeder (#2968)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logfeeder.loglevelfilter;",
          "22: import org.apache.ambari.logfeeder.common.LogFeederConstants;",
          "23: import org.apache.ambari.logfeeder.conf.LogFeederProps;",
          "24: import org.apache.ambari.logfeeder.plugin.input.InputMarker;",
          "",
          "[Removed Lines]",
          "21: import com.google.gson.Gson;",
          "",
          "[Added Lines]",
          "21: import java.text.DateFormat;",
          "22: import java.text.SimpleDateFormat;",
          "23: import java.util.Date;",
          "24: import java.util.List;",
          "25: import java.util.Map;",
          "26: import java.util.TreeMap;",
          "27: import java.util.concurrent.ConcurrentHashMap;",
          "29: import javax.annotation.PostConstruct;",
          "30: import javax.inject.Inject;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: import org.slf4j.Logger;",
          "38: import org.slf4j.LoggerFactory;",
          "51: public class LogLevelFilterHandler implements LogLevelFilterMonitor {",
          "52:   private static final Logger LOG = LoggerFactory.getLogger(LogLevelFilterHandler.class);",
          "55:   private static final String DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";",
          "57:   private static final boolean DEFAULT_VALUE = true;",
          "67:   @Inject",
          "68:   private LogFeederProps logFeederProps;",
          "",
          "[Removed Lines]",
          "40: import javax.annotation.PostConstruct;",
          "41: import javax.inject.Inject;",
          "42: import java.text.DateFormat;",
          "43: import java.text.SimpleDateFormat;",
          "44: import java.util.Date;",
          "45: import java.util.List;",
          "46: import java.util.Map;",
          "47: import java.util.TimeZone;",
          "48: import java.util.TreeMap;",
          "49: import java.util.concurrent.ConcurrentHashMap;",
          "54:   private static final String TIMEZONE = \"GMT\";",
          "59:   private static ThreadLocal<DateFormat> formatter = new ThreadLocal<DateFormat>() {",
          "60:     protected DateFormat initialValue() {",
          "61:       SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);",
          "62:       dateFormat.setTimeZone(TimeZone.getTimeZone(TIMEZONE));",
          "63:       return dateFormat;",
          "64:     }",
          "65:   };",
          "",
          "[Added Lines]",
          "50: import com.google.gson.Gson;",
          "59:   private static ThreadLocal<DateFormat> formatter = ThreadLocal.withInitial(() -> new SimpleDateFormat(DATE_FORMAT));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:   @PostConstruct",
          "82:   public void init() throws Exception {",
          "84:     if (logFeederProps.isZkFilterStorage() && logFeederProps.isUseLocalConfigs()) {",
          "85:       LogLevelFilterManagerZK filterManager = (LogLevelFilterManagerZK) config.getLogLevelFilterManager();",
          "86:       CuratorFramework client = filterManager.getClient();",
          "",
          "[Removed Lines]",
          "83:     TimeZone.setDefault(TimeZone.getTimeZone(TIMEZONE));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95bc266a0c4853234ecfd62cd7a7b9e6076447ed",
      "candidate_info": {
        "commit_hash": "95bc266a0c4853234ecfd62cd7a7b9e6076447ed",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/95bc266a0c4853234ecfd62cd7a7b9e6076447ed",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHost.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java"
        ],
        "message": "AMBARI-24669. Component status can stuck in starting/stopping status on heartbeat lost. (mpapirkovskyy) (#2518)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java||ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHost.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHost.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java||ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:           LOG.warn(\"Setting component state to UNKNOWN for component \" + sc.getName() + \" on \" + host);",
          "346:           State oldState = sch.getState();",
          "347:           sch.setState(State.UNKNOWN);",
          "349:         }",
          "350:       }",
          "351:     }",
          "",
          "[Removed Lines]",
          "348:           sch.setLastValidState(oldState);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   @Column(name = \"current_state\", nullable = false, insertable = true, updatable = true)",
          "101:   private State currentState = State.INIT;",
          "107:   @Enumerated(value = EnumType.STRING)",
          "108:   @Column(name = \"upgrade_state\", nullable = false, insertable = true, updatable = true)",
          "109:   private UpgradeState upgradeState = UpgradeState.NONE;",
          "",
          "[Removed Lines]",
          "103:   @Enumerated(value = EnumType.STRING)",
          "104:   @Column(name = \"last_live_state\", nullable = true, insertable = true, updatable = true)",
          "105:   private State lastLiveState = State.INIT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:     this.currentState = currentState;",
          "164:   }",
          "174:   public UpgradeState getUpgradeState() {",
          "175:     return upgradeState;",
          "176:   }",
          "",
          "[Removed Lines]",
          "166:   public State getLastLiveState() {",
          "167:     return lastLiveState;",
          "168:   }",
          "170:   public void setLastLiveState(State lastLiveState) {",
          "171:     this.lastLiveState = lastLiveState;",
          "172:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:       return false;",
          "218:     }",
          "225:     if (upgradeState != null ? !upgradeState.equals(that.upgradeState)",
          "226:         : that.upgradeState != null) {",
          "227:       return false;",
          "",
          "[Removed Lines]",
          "220:     if (lastLiveState != null ? !lastLiveState.equals(that.lastLiveState)",
          "221:         : that.lastLiveState != null) {",
          "222:       return false;",
          "223:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "249:     result = 31 * result + (hostEntity != null ? hostEntity.hashCode() : 0);",
          "250:     result = 31 * result + (componentName != null ? componentName.hashCode() : 0);",
          "251:     result = 31 * result + (currentState != null ? currentState.hashCode() : 0);",
          "253:     result = 31 * result + (upgradeState != null ? upgradeState.hashCode() : 0);",
          "254:     result = 31 * result + (serviceName != null ? serviceName.hashCode() : 0);",
          "255:     result = 31 * result + (version != null ? version.hashCode() : 0);",
          "",
          "[Removed Lines]",
          "252:     result = 31 * result + (lastLiveState != null ? lastLiveState.hashCode() : 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHost.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHost.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHost.java -> ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHost.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:   void setState(State state);",
          "",
          "[Removed Lines]",
          "99:   State getLastValidState();",
          "101:   void setLastValidState(State state);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: import org.apache.ambari.server.state.HostHealthStatus.HealthStatus;",
          "72: import org.apache.ambari.server.state.HostState;",
          "73: import org.apache.ambari.server.state.MaintenanceState;",
          "76: import org.apache.ambari.server.state.ServiceComponentHost;",
          "77: import org.apache.ambari.server.state.StackId;",
          "79: import org.apache.ambari.server.state.UpgradeState;",
          "80: import org.apache.ambari.server.state.configgroup.ConfigGroup;",
          "81: import org.apache.ambari.server.state.fsm.InvalidStateTransitionException;",
          "",
          "[Removed Lines]",
          "74: import org.apache.ambari.server.state.Service;",
          "75: import org.apache.ambari.server.state.ServiceComponent;",
          "78: import org.apache.ambari.server.state.State;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:       }",
          "364:       host.topologyManager.onHostRegistered(host, associatedWithCluster);",
          "371:       host.updateHostTimestamps(e);",
          "372:     }",
          "",
          "[Removed Lines]",
          "365:       try {",
          "366:         host.restoreComponentsStatuses();",
          "367:       } catch (AmbariException e1) {",
          "368:         LOG.error(\"Unable to restore last valid host components status for host\", e1);",
          "369:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1212:     return false;",
          "1213:   }",
          "1237:   @Override",
          "1238:   public void calculateHostStatus(Long clusterId) throws AmbariException {",
          "",
          "[Removed Lines]",
          "1215:   public void restoreComponentsStatuses() throws AmbariException {",
          "1216:     Long clusterId = null;",
          "1217:     for (Cluster cluster : clusters.getClustersForHost(getHostName())) {",
          "1218:       clusterId = cluster.getClusterId();",
          "1219:       for (ServiceComponentHost sch : cluster.getServiceComponentHosts(getHostName())) {",
          "1220:         Service s = cluster.getService(sch.getServiceName());",
          "1221:         ServiceComponent sc = s.getServiceComponent(sch.getServiceComponentName());",
          "1222:         if (!sc.isClientComponent() &&",
          "1223:             sch.getState().equals(State.UNKNOWN)) {",
          "1224:           State lastValidState = sch.getLastValidState();",
          "1225:           LOG.warn(\"Restore component state to last valid state for component \" + sc.getName() + \" on \" +",
          "1226:               getHostName() + \" to \" + lastValidState);",
          "1227:           sch.setState(lastValidState);",
          "1228:         }",
          "1229:       }",
          "1230:     }",
          "1232:     if (clusterId != null) {",
          "1233:       calculateHostStatus(clusterId);",
          "1234:     }",
          "1235:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "913:     HostComponentStateEntity stateEntity = getStateEntity();",
          "914:     if (stateEntity != null) {",
          "915:       stateEntity.setCurrentState(state);",
          "919:       stateEntity = hostComponentStateDAO.merge(stateEntity);",
          "920:       if (!oldState.equals(state)) {",
          "921:         STOMPUpdatePublisher.publish(new HostComponentsUpdateEvent(Collections.singletonList(",
          "",
          "[Removed Lines]",
          "916:       if (state != State.UNKNOWN) {",
          "917:         stateEntity.setLastLiveState(state);",
          "918:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "928:     }",
          "929:   }",
          "956:   @Override",
          "957:   public String getVersion() {",
          "958:     HostComponentStateEntity stateEntity = getStateEntity();",
          "",
          "[Removed Lines]",
          "931:   @Override",
          "932:   public State getLastValidState() {",
          "933:     HostComponentStateEntity stateEntity = getStateEntity();",
          "934:     if (stateEntity != null) {",
          "935:       return stateEntity.getLastLiveState();",
          "936:     }",
          "937:     return State.UNKNOWN;",
          "938:   }",
          "940:   @Override",
          "941:   public void setLastValidState(State state) {",
          "942:     if (state == State.UNKNOWN) {",
          "943:       return;",
          "944:     }",
          "945:     HostComponentStateEntity stateEntity = getStateEntity();",
          "946:     if (stateEntity != null) {",
          "947:       stateEntity.setLastLiveState(state);",
          "948:       hostComponentStateDAO.merge(stateEntity);",
          "949:     } else {",
          "950:       LOG.warn(\"Setting a member on an entity object that may have been \"",
          "951:           + \"previously deleted, serviceName = \" + getServiceName() + \", \" + \"componentName = \"",
          "952:           + getServiceComponentName() + \", \" + \"hostName = \" + getHostName());",
          "953:     }",
          "954:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1058:     setStatusOfStagesAndRequests();",
          "1059:     updateLogSearchConfigs();",
          "1060:     updateKerberosConfigurations();",
          "1062:     moveAmbariPropertiesToAmbariConfiguration();",
          "1063:     createRoleAuthorizations();",
          "1064:     addUserAuthenticationSequence();",
          "",
          "[Removed Lines]",
          "1061:     updateHostComponentLastStateTable();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1776:     return map;",
          "1777:   }",
          "1797:   protected void updateSolrConfigurations() throws AmbariException {",
          "1798:     AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);",
          "1799:     Clusters clusters = ambariManagementController.getClusters();",
          "",
          "[Removed Lines]",
          "1779:   protected void updateHostComponentLastStateTable() throws SQLException {",
          "1780:     executeInTransaction(new Runnable() {",
          "1781:       @Override",
          "1782:       public void run() {",
          "1783:         try {",
          "1784:           HostComponentStateDAO hostComponentStateDAO = injector.getInstance(HostComponentStateDAO.class);",
          "1785:           List<HostComponentStateEntity> hostComponentStateEntities = hostComponentStateDAO.findAll();",
          "1786:           for (HostComponentStateEntity hostComponentStateEntity : hostComponentStateEntities) {",
          "1787:             hostComponentStateEntity.setLastLiveState(hostComponentStateEntity.getCurrentState());",
          "1788:             hostComponentStateDAO.merge(hostComponentStateEntity);",
          "1789:           }",
          "1790:         } catch (Exception e) {",
          "1791:           LOG.warn(\"Setting status for stages and Requests threw exception. \", e);",
          "1792:         }",
          "1793:       }",
          "1794:     });",
          "1795:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:       AMBARI_CONFIGURATION_PROPERTY_NAME_COLUMN, LDAP_CONFIGURATION_CORRECT_COLLISION_BEHAVIOR_PROPERTY_NAME, AMBARI_CONFIGURATION_CATEGORY_NAME_COLUMN,",
          "51:       LDAP_CONFIGURATION.getCategoryName(), AMBARI_CONFIGURATION_PROPERTY_NAME_COLUMN, LDAP_CONFIGURATION_WRONG_COLLISION_BEHAVIOR_PROPERTY_NAME);",
          "52:   protected static final String HOST_COMPONENT_DESIRED_STATE_TABLE = \"hostcomponentdesiredstate\";",
          "53:   protected static final String CLUSTERS_TABLE = \"clusters\";",
          "54:   protected static final String BLUEPRINT_PROVISIONING_STATE_COLUMN = \"blueprint_provisioning_state\";",
          "56:   @Inject",
          "57:   public UpgradeCatalog272(Injector injector) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   protected static final String HOST_COMPONENT_STATE_TABLE = \"hostcomponentstate\";",
          "56:   protected static final String LAST_LIVE_STATE_COLUMN = \"last_live_state\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   @Override",
          "72:   protected void executeDDLUpdates() throws AmbariException, SQLException {",
          "73:     moveBlueprintProvisioningState();",
          "74:   }",
          "76:   @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     removeLastValidState();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:         new DBAccessor.DBColumnInfo(BLUEPRINT_PROVISIONING_STATE_COLUMN, String.class, 255,",
          "110:             BlueprintProvisioningState.NONE, true));",
          "111:   }",
          "112: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:   protected void removeLastValidState() throws SQLException {",
          "117:     dbAccessor.dropColumn(HOST_COMPONENT_STATE_TABLE, LAST_LIVE_STATE_COLUMN);",
          "118:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:     Method setStatusOfStagesAndRequests = UpgradeCatalog270.class.getDeclaredMethod(\"setStatusOfStagesAndRequests\");",
          "321:     Method updateLogSearchConfigs = UpgradeCatalog270.class.getDeclaredMethod(\"updateLogSearchConfigs\");",
          "322:     Method updateKerberosConfigurations = UpgradeCatalog270.class.getDeclaredMethod(\"updateKerberosConfigurations\");",
          "324:     Method upgradeLdapConfiguration = UpgradeCatalog270.class.getDeclaredMethod(\"moveAmbariPropertiesToAmbariConfiguration\");",
          "325:     Method createRoleAuthorizations = UpgradeCatalog270.class.getDeclaredMethod(\"createRoleAuthorizations\");",
          "326:     Method addUserAuthenticationSequence = UpgradeCatalog270.class.getDeclaredMethod(\"addUserAuthenticationSequence\");",
          "",
          "[Removed Lines]",
          "323:     Method updateHostComponentLastStateTable = UpgradeCatalog270.class.getDeclaredMethod(\"updateHostComponentLastStateTable\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:         .addMockedMethod(setStatusOfStagesAndRequests)",
          "338:         .addMockedMethod(updateLogSearchConfigs)",
          "339:         .addMockedMethod(updateKerberosConfigurations)",
          "341:         .addMockedMethod(upgradeLdapConfiguration)",
          "342:         .addMockedMethod(createRoleAuthorizations)",
          "343:         .addMockedMethod(addUserAuthenticationSequence)",
          "",
          "[Removed Lines]",
          "340:         .addMockedMethod(updateHostComponentLastStateTable)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "363:     expectLastCall().once();",
          "365:     upgradeCatalog270.updateLogSearchConfigs();",
          "369:     upgradeCatalog270.updateKerberosConfigurations();",
          "370:     expectLastCall().once();",
          "",
          "[Removed Lines]",
          "366:     upgradeCatalog270.updateHostComponentLastStateTable();",
          "367:     expectLastCall().once();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.apache.ambari.server.upgrade.UpgradeCatalog272.BLUEPRINT_PROVISIONING_STATE_COLUMN;",
          "22: import static org.apache.ambari.server.upgrade.UpgradeCatalog272.CLUSTERS_TABLE;",
          "23: import static org.apache.ambari.server.upgrade.UpgradeCatalog272.HOST_COMPONENT_DESIRED_STATE_TABLE;",
          "24: import static org.apache.ambari.server.upgrade.UpgradeCatalog272.RENAME_COLLISION_BEHAVIOR_PROPERTY_SQL;",
          "25: import static org.easymock.EasyMock.capture;",
          "26: import static org.easymock.EasyMock.createMockBuilder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import static org.apache.ambari.server.upgrade.UpgradeCatalog272.HOST_COMPONENT_STATE_TABLE;",
          "25: import static org.apache.ambari.server.upgrade.UpgradeCatalog272.LAST_LIVE_STATE_COLUMN;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:     dbAccessor.addColumn(eq(HOST_COMPONENT_DESIRED_STATE_TABLE), capture(blueprintProvisioningStateColumnCapture));",
          "66:     expectLastCall().once();",
          "68:     replay(dbAccessor, injector);",
          "70:     UpgradeCatalog272 upgradeCatalog272 = new UpgradeCatalog272(injector);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     dbAccessor.dropColumn(eq(HOST_COMPONENT_STATE_TABLE), eq(LAST_LIVE_STATE_COLUMN));",
          "71:     expectLastCall().once();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d563b971a730d40ae9b63e60ec2f0abe8701b04",
      "candidate_info": {
        "commit_hash": "6d563b971a730d40ae9b63e60ec2f0abe8701b04",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/6d563b971a730d40ae9b63e60ec2f0abe8701b04",
        "files": [
          "ambari-web/app/styles/application.less"
        ],
        "message": "AMBARI-24482 Overlapping text in Recommendations in Configurations page while UI installer. (ababiichuk)",
        "before_after_code_files": [
          "ambari-web/app/styles/application.less||ambari-web/app/styles/application.less"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/styles/application.less||ambari-web/app/styles/application.less": [
          "File: ambari-web/app/styles/application.less -> ambari-web/app/styles/application.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "2180:     table-layout: fixed;",
          "2181:     td, th {",
          "2182:       &.issue-type-cell {",
          "2184:       }",
          "2185:       &.service-name-cell {",
          "2186:         width: 15%;",
          "2187:       }",
          "2188:       &.property-name-cell {",
          "2190:       }",
          "2191:       &.property-value-cell {",
          "2192:         width: 25%;",
          "",
          "[Removed Lines]",
          "2183:         width: 5%;",
          "2189:         width: 15%;",
          "",
          "[Added Lines]",
          "2183:         width: 8%;",
          "2189:         width: 20%;",
          "2190:         overflow: hidden;",
          "2191:         overflow-wrap: break-word;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2194:         overflow-wrap: break-word;",
          "2195:       }",
          "2196:       &.property-description-cell {",
          "2198:       }",
          "2199:     }",
          "2200:     tbody{",
          "",
          "[Removed Lines]",
          "2197:         width: 40%;",
          "",
          "[Added Lines]",
          "2199:         width: 32%;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89a1a3d3cb37750a0d4886b1e8e2fb02469dbcc8",
      "candidate_info": {
        "commit_hash": "89a1a3d3cb37750a0d4886b1e8e2fb02469dbcc8",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/89a1a3d3cb37750a0d4886b1e8e2fb02469dbcc8",
        "files": [
          "ambari-web/app/controllers/wizard/step7_controller.js"
        ],
        "message": "AMBARI-24315. Clicking on password warnings doesn't update the service tab navigation (akovalenko)",
        "before_after_code_files": [
          "ambari-web/app/controllers/wizard/step7_controller.js||ambari-web/app/controllers/wizard/step7_controller.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/wizard/step7_controller.js||ambari-web/app/controllers/wizard/step7_controller.js": [
          "File: ambari-web/app/controllers/wizard/step7_controller.js -> ambari-web/app/controllers/wizard/step7_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1904:   },",
          "1906:   selectService: function (event) {",
          "1907:     this.set('selectedService', event.context);",
          "1908:     var activeTabs = this.get('tabs').findProperty('isActive', true);",
          "1909:     if (activeTabs) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1907:     event.context.set('isActive', true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2079:     Em.run.next(this, function () {",
          "2080:       this.set('filter', propertyName);",
          "2081:     });",
          "2082:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2084:     this.get('stepConfigs').setEach('isActive', false);",
          "2085:     stepConfig.set('isActive', true);",
          "",
          "---------------"
        ]
      }
    }
  ]
}