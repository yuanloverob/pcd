{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e1856d055ec1d8451563de5b0b10317227f044b2",
      "candidate_info": {
        "commit_hash": "e1856d055ec1d8451563de5b0b10317227f044b2",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/e1856d055ec1d8451563de5b0b10317227f044b2",
        "files": [
          "src/resources/js/pages/activity-log/browse.vue",
          "src/resources/js/pages/crud-management/browse.vue",
          "src/resources/js/pages/database-management/browse.vue",
          "src/resources/js/pages/role-management/browse.vue",
          "src/resources/js/pages/user-management/browse.vue"
        ],
        "message": "add featrure export core menu",
        "before_after_code_files": [
          "src/resources/js/pages/activity-log/browse.vue||src/resources/js/pages/activity-log/browse.vue",
          "src/resources/js/pages/crud-management/browse.vue||src/resources/js/pages/crud-management/browse.vue",
          "src/resources/js/pages/database-management/browse.vue||src/resources/js/pages/database-management/browse.vue",
          "src/resources/js/pages/role-management/browse.vue||src/resources/js/pages/role-management/browse.vue",
          "src/resources/js/pages/user-management/browse.vue||src/resources/js/pages/user-management/browse.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/resources/js/pages/activity-log/browse.vue||src/resources/js/pages/activity-log/browse.vue": [
          "File: src/resources/js/pages/activity-log/browse.vue -> src/resources/js/pages/activity-log/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <template>",
          "2:   <div>",
          "4:       <template slot=\"action\">",
          "14:       </template>",
          "16:     <vs-row v-if=\"$helper.isAllowed('browse_activitylogs')\">",
          "17:       <vs-col vs-lg=\"12\">",
          "18:         <vs-card>",
          "",
          "[Removed Lines]",
          "3:     <badaso-breadcrumb-row>",
          "5:         <vs-button",
          "6:           color=\"danger\"",
          "7:           type=\"relief\"",
          "8:           v-if=\"selected.length > 0 && $helper.isAllowed('delete_activitylogs')\"",
          "9:           @click.stop",
          "10:           @click=\"confirmDeleteMultiple\"",
          "11:           ><vs-icon icon=\"delete_sweep\"></vs-icon>",
          "12:           {{ $t(\"action.bulkDelete\") }}</vs-button",
          "13:         >",
          "15:     </badaso-breadcrumb-row>",
          "",
          "[Added Lines]",
          "3:     <badaso-breadcrumb-hover full>",
          "5:         <download-excel",
          "6:             :data=\"activitylogs\"",
          "7:             :fields=\"fieldsForExcel\"",
          "8:             :worksheet=\"'Activity Log Management'\"",
          "9:             :name=\"'Activity Log Management '+ '.xls'\"",
          "10:             class=\"crud-generated__excel-button\"",
          "11:           >",
          "12:             <badaso-dropdown-item",
          "13:               icon=\"file_upload\"",
          "14:             >",
          "15:               {{ $t(\"action.exportToExcel\") }}",
          "16:             </badaso-dropdown-item>",
          "17:           </download-excel>",
          "18:           <badaso-dropdown-item",
          "19:             icon=\"file_upload\"",
          "20:             @click=\"generatePdf\"",
          "21:           >",
          "22:             {{ $t(\"action.exportToPdf\") }}",
          "23:           </badaso-dropdown-item>",
          "24:           <badaso-dropdown-item",
          "25:             icon=\"delete_sweep\"",
          "26:             v-if=\"selected.length > 0 && $helper.isAllowed('delete_roles')\"",
          "27:             @click.stop",
          "28:             @click=\"confirmDeleteMultiple\"",
          "29:           >",
          "30:             {{ $t(\"action.bulkDelete\") }}",
          "31:           </badaso-dropdown-item>",
          "33:     </badaso-breadcrumb-hover>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112: <script>",
          "114: import moment from \"moment\";",
          "116: export default {",
          "117:   name: \"ActivityLogBrowse\",",
          "119:   data: () => ({",
          "120:     data: {},",
          "121:     selected: [],",
          "",
          "[Removed Lines]",
          "118:   components: {},",
          "",
          "[Added Lines]",
          "133: import * as _ from \"lodash\";",
          "134: import downloadExcel from \"vue-json-excel\";",
          "135: import jsPDF from \"jspdf\";",
          "136: import \"jspdf-autotable\";",
          "139:   components: { downloadExcel },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:     filter: \"\",",
          "129:     orderField: \"\",",
          "130:     orderDirection: \"\",",
          "131:   }),",
          "132:   mounted() {",
          "133:     this.getActivityLogList();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     fieldsForExcel: {},",
          "153:     fieldsForPdf: [],",
          "154:     dataType: {",
          "155:       fields: ['log_name', \"description\", \"created_at\", \"causer_name\"]",
          "156:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "177:             response.data.total > 0",
          "178:               ? Math.ceil(response.data.total / this.limit)",
          "179:               : 1;",
          "180:         })",
          "181:         .catch((error) => {",
          "182:           this.$closeLoader();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:           this.prepareExcelExporter()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "187:           });",
          "188:         });",
          "189:     },",
          "190:   },",
          "191: };",
          "192: </script>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:     prepareExcelExporter() {",
          "218:       for (const iterator of this.dataType.fields) {",
          "219:         const field = iterator;",
          "220:         if (field.includes(\"_\")) {",
          "221:           field = field.split(\"_\");",
          "222:           field = field[0].charAt(0).toUpperCase() + field[0].slice(1) + \" \" + field[1].charAt(0).toUpperCase() + field[1].slice(1);",
          "223:         }",
          "224:         field = field.charAt(0).toUpperCase() + field.slice(1);",
          "226:         this.fieldsForExcel[field] = this.$caseConvert.stringSnakeToCamel(iterator);",
          "227:       }",
          "229:       for (const iterator of this.dataType.fields) {",
          "230:         if (iterator.includes(\"_\")) {",
          "231:           iterator = iterator.split(\"_\");",
          "232:           iterator = iterator[0] + \" \" + iterator[1].charAt(0).toUpperCase() + iterator[1].slice(1);",
          "233:         }",
          "235:         const string = this.$caseConvert.stringSnakeToCamel(iterator);",
          "236:         this.fieldsForPdf.push(",
          "237:           string.charAt(0).toUpperCase() + string.slice(1)",
          "238:         );",
          "239:       }",
          "240:     },",
          "241:     generatePdf() {",
          "243:       let data = this.activitylogs;",
          "245:       let fields = [];",
          "247:       for (const iterator in this.dataType.fields){",
          "248:         const string = this.$caseConvert.stringSnakeToCamel(this.dataType.fields[iterator]);",
          "249:         fields.push(string);",
          "250:       }",
          "252:       data.map((value) => {",
          "253:         for (const iterator in value) {",
          "254:           if (!fields.includes(iterator)) {",
          "255:             delete value[iterator]",
          "256:           }",
          "257:         }",
          "258:         return value;",
          "259:       })",
          "261:       const result = data.map(Object.values);",
          "264:       const doc = new jsPDF(\"l\");",
          "267:       doc.setFont(\"helvetica\", \"bold\");",
          "268:       doc.setFontSize(28);",
          "269:       doc.text(this.$t(\"activityLog.title\"), 149, 20, \"center\");",
          "272:       doc.autoTable({",
          "273:         head: [this.fieldsForPdf],",
          "274:         body: result,",
          "275:         startY: 30,",
          "277:         styles: { valign: \"middle\" },",
          "278:         headStyles: { fillColor: [6, 187, 211] },",
          "280:         columnStyles: { text: { cellWidth: \"wrap\" } },",
          "281:       });",
          "284:       const output = doc.output(\"blob\");",
          "285:       data = window.URL.createObjectURL(output);",
          "286:       window.open(data, \"_blank\");",
          "288:       setTimeout(function () {",
          "290:         window.URL.revokeObjectURL(data);",
          "291:       }, 100);",
          "292:     },",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-management/browse.vue||src/resources/js/pages/crud-management/browse.vue": [
          "File: src/resources/js/pages/crud-management/browse.vue -> src/resources/js/pages/crud-management/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <template>",
          "2:   <div>",
          "4:     <vs-row v-if=\"$helper.isAllowed('browse_crud_data')\">",
          "5:       <vs-col vs-lg=\"12\">",
          "6:         <vs-card>",
          "",
          "[Removed Lines]",
          "3:     <badaso-breadcrumb-row></badaso-breadcrumb-row>",
          "",
          "[Added Lines]",
          "3:     <badaso-breadcrumb-hover full>",
          "4:       <template slot=\"action\">",
          "5:         <download-excel",
          "6:             :data=\"tables\"",
          "7:             :fields=\"fieldsForExcel\"",
          "8:             :worksheet=\"'CRUD Management'\"",
          "9:             :name=\"'CRUD Management '+ '.xls'\"",
          "10:             class=\"crud-generated__excel-button\"",
          "11:           >",
          "12:             <badaso-dropdown-item",
          "13:               icon=\"file_upload\"",
          "14:             >",
          "15:               {{ $t(\"action.exportToExcel\") }}",
          "16:             </badaso-dropdown-item>",
          "17:           </download-excel>",
          "18:           <badaso-dropdown-item",
          "19:             icon=\"file_upload\"",
          "20:             @click=\"generatePdf\"",
          "21:           >",
          "22:             {{ $t(\"action.exportToPdf\") }}",
          "23:           </badaso-dropdown-item>",
          "24:       </template>",
          "25:     </badaso-breadcrumb-hover>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: </template>",
          "119: <script>",
          "120: export default {",
          "122:   name: \"CrudManagementBrowse\",",
          "123:   data: () => ({",
          "124:     descriptionItems: [10, 50, 100],",
          "125:     selected: [],",
          "126:     tables: [],",
          "127:     willDeleteId: null,",
          "128:   }),",
          "129:   mounted() {",
          "130:     this.getTableList();",
          "",
          "[Removed Lines]",
          "121:   components: {},",
          "",
          "[Added Lines]",
          "142: import * as _ from \"lodash\";",
          "143: import downloadExcel from \"vue-json-excel\";",
          "144: import jsPDF from \"jspdf\";",
          "145: import \"jspdf-autotable\";",
          "147:   components: { downloadExcel },",
          "154:     fieldsForExcel: {},",
          "155:     fieldsForPdf: [],",
          "156:     dataType: {",
          "157:       fields: [\"table_name\"]",
          "158:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152:         .then((response) => {",
          "153:           this.$closeLoader();",
          "154:           this.tables = response.data.tablesWithCrudData;",
          "155:         })",
          "156:         .catch((error) => {",
          "157:           this.$closeLoader();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:           this.prepareExcelExporter()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "182:           });",
          "183:         });",
          "184:     },",
          "185:   },",
          "186: };",
          "187: </script>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:     prepareExcelExporter() {",
          "218:       for (const iterator of this.dataType.fields) {",
          "219:         const field = iterator;",
          "220:         if (field.includes(\"_\")) {",
          "221:           field = field.split(\"_\");",
          "223:           field = 'Name';",
          "224:         }",
          "225:         field = field.charAt(0).toUpperCase() + field.slice(1);",
          "227:         this.fieldsForExcel[field] = this.$caseConvert.stringSnakeToCamel(iterator);",
          "228:       }",
          "230:       for (const iterator of this.dataType.fields) {",
          "231:         if (iterator.includes(\"_\")) {",
          "232:           iterator = iterator.split(\"_\");",
          "234:           iterator = 'Name'",
          "235:         }",
          "237:         const string = this.$caseConvert.stringSnakeToCamel(iterator);",
          "238:         this.fieldsForPdf.push(",
          "239:           string.charAt(0).toUpperCase() + string.slice(1)",
          "240:         );",
          "241:       }",
          "242:     },",
          "243:     generatePdf() {",
          "245:       let data = this.tables;",
          "256:       const result = data.map(Object.values);",
          "259:       const doc = new jsPDF(\"l\");",
          "262:       doc.setFont(\"helvetica\", \"bold\");",
          "263:       doc.setFontSize(28);",
          "264:       doc.text(this.$t(\"crud.title\"), 149, 20, \"center\");",
          "267:       doc.autoTable({",
          "268:         head: [this.fieldsForPdf],",
          "269:         body: result,",
          "270:         startY: 30,",
          "272:         styles: { valign: \"middle\" },",
          "273:         headStyles: { fillColor: [6, 187, 211] },",
          "275:         columnStyles: { text: { cellWidth: \"wrap\" } },",
          "276:       });",
          "279:       const output = doc.output(\"blob\");",
          "280:       data = window.URL.createObjectURL(output);",
          "281:       window.open(data, \"_blank\");",
          "283:       setTimeout(function () {",
          "285:         window.URL.revokeObjectURL(data);",
          "286:       }, 100);",
          "287:     },",
          "",
          "---------------"
        ],
        "src/resources/js/pages/database-management/browse.vue||src/resources/js/pages/database-management/browse.vue": [
          "File: src/resources/js/pages/database-management/browse.vue -> src/resources/js/pages/database-management/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <template>",
          "2:   <div>",
          "4:       <template slot=\"action\">",
          "5:         <vs-button",
          "6:           color=\"primary\"",
          "",
          "[Removed Lines]",
          "3:     <badaso-breadcrumb-row>",
          "",
          "[Added Lines]",
          "3:     <badaso-breadcrumb-hover full>",
          "4:       <template slot=\"action\">",
          "5:          <download-excel",
          "6:             :data=\"tables\"",
          "7:             :fields=\"fieldsForExcel\"",
          "8:             :worksheet=\"'Database Management'\"",
          "9:             :name=\"'Database Management '+ '.xls'\"",
          "10:             class=\"crud-generated__excel-button\"",
          "11:           >",
          "12:             <badaso-dropdown-item",
          "13:               icon=\"file_upload\"",
          "14:             >",
          "15:               {{ $t(\"action.exportToExcel\") }}",
          "16:             </badaso-dropdown-item>",
          "17:           </download-excel>",
          "18:           <badaso-dropdown-item",
          "19:             icon=\"file_upload\"",
          "20:             @click=\"generatePdf\"",
          "21:           >",
          "22:             {{ $t(\"action.exportToPdf\") }}",
          "23:           </badaso-dropdown-item>",
          "24:           <badaso-dropdown-item",
          "25:             icon=\"add\"",
          "26:             :to=\"{ name: 'DatabaseManagementAdd' }\"",
          "27:           >",
          "28:             {{ $t(\"database.browse.addButton\") }}",
          "29:           </badaso-dropdown-item>",
          "30:           <badaso-dropdown-item",
          "31:             icon=\"refresh\"",
          "32:             @click=\"openRollbackDialog()\"",
          "33:             v-if=\"$helper.isAllowed('rollback_database')\"",
          "34:           >",
          "35:             {{ $t(\"database.browse.rollbackButton\") }}",
          "36:           </badaso-dropdown-item>",
          "37:       </template>",
          "38:     </badaso-breadcrumb-hover>",
          "39:     <!-- <badaso-breadcrumb-row>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:           {{ $t(\"database.browse.rollbackButton\") }}</vs-button",
          "20:         >",
          "21:       </template>",
          "24:     <vs-popup",
          "25:       :title=\"$t('database.browse.warning.title')\"",
          "",
          "[Removed Lines]",
          "22:     </badaso-breadcrumb-row>",
          "",
          "[Added Lines]",
          "58:     </badaso-breadcrumb-row> -->",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274: <script>",
          "275: import { required } from \"vuelidate/lib/validators\";",
          "277: export default {",
          "279:   name: \"DatabaseManagementBrowse\",",
          "280:   data: () => ({",
          "281:     descriptionItems: [10, 50, 100],",
          "",
          "[Removed Lines]",
          "278:   components: {},",
          "",
          "[Added Lines]",
          "312: import * as _ from \"lodash\";",
          "313: import downloadExcel from \"vue-json-excel\";",
          "314: import jsPDF from \"jspdf\";",
          "315: import \"jspdf-autotable\";",
          "317:   components: { downloadExcel },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "294:     isDeleteFile: false,",
          "295:     errorDatabase: false,",
          "296:     errorTable: \"\",",
          "297:   }),",
          "298:   validations: {",
          "299:     willRollbackFile: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:     fieldsForExcel: {},",
          "337:     fieldsForPdf: [],",
          "338:     dataType: {",
          "339:       fields: [\"table_name\"]",
          "340:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "358:             return value;",
          "359:           });",
          "360:         })",
          "361:         .catch((error) => {",
          "362:           this.$closeLoader();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:           this.prepareExcelExporter()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "583:       this.getTableList();",
          "584:       this.getStatusMigration();",
          "585:     },",
          "586:   },",
          "587: };",
          "588: </script>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "631:     prepareExcelExporter() {",
          "632:       for (const iterator of this.dataType.fields) {",
          "633:         const field = iterator;",
          "634:         if (field.includes(\"_\")) {",
          "635:           field = field.split(\"_\");",
          "637:           field = 'Table';",
          "638:         }",
          "641:         this.fieldsForExcel[field] = this.$caseConvert.stringSnakeToCamel(iterator);",
          "642:       }",
          "644:       for (const iterator of this.dataType.fields) {",
          "645:         if (iterator.includes(\"_\")) {",
          "646:           iterator = iterator.split(\"_\");",
          "648:           iterator = 'Table'",
          "649:         }",
          "651:         const string = this.$caseConvert.stringSnakeToCamel(iterator);",
          "652:         this.fieldsForPdf.push(",
          "653:           string.charAt(0).toUpperCase() + string.slice(1)",
          "654:         );",
          "655:       }",
          "656:     },",
          "657:     generatePdf() {",
          "659:       let data = this.tables;",
          "670:       const result = data.map(Object.values);",
          "673:       const doc = new jsPDF(\"l\");",
          "676:       doc.setFont(\"helvetica\", \"bold\");",
          "677:       doc.setFontSize(28);",
          "678:       doc.text(this.$t(\"database.browse.title\"), 149, 20, \"center\");",
          "681:       doc.autoTable({",
          "682:         head: [this.fieldsForPdf],",
          "683:         body: result,",
          "684:         startY: 30,",
          "686:         styles: { valign: \"middle\" },",
          "687:         headStyles: { fillColor: [6, 187, 211] },",
          "689:         columnStyles: { text: { cellWidth: \"wrap\" } },",
          "690:       });",
          "693:       const output = doc.output(\"blob\");",
          "694:       data = window.URL.createObjectURL(output);",
          "695:       window.open(data, \"_blank\");",
          "697:       setTimeout(function () {",
          "699:         window.URL.revokeObjectURL(data);",
          "700:       }, 100);",
          "701:     },",
          "",
          "---------------"
        ],
        "src/resources/js/pages/role-management/browse.vue||src/resources/js/pages/role-management/browse.vue": [
          "File: src/resources/js/pages/role-management/browse.vue -> src/resources/js/pages/role-management/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <template>",
          "2:   <div>",
          "23:     <vs-row v-if=\"$helper.isAllowed('browse_roles')\">",
          "24:       <vs-col vs-lg=\"12\">",
          "25:         <vs-card>",
          "",
          "[Removed Lines]",
          "3:     <badaso-breadcrumb-row>",
          "4:       <template slot=\"action\">",
          "5:         <vs-button",
          "6:           color=\"primary\"",
          "7:           type=\"relief\"",
          "8:           :to=\"{ name: 'RoleManagementAdd' }\"",
          "9:           v-if=\"$helper.isAllowed('add_roles')\"",
          "10:           ><vs-icon icon=\"add\"></vs-icon> {{ $t(\"action.add\") }}</vs-button",
          "11:         >",
          "12:         <vs-button",
          "13:           color=\"danger\"",
          "14:           type=\"relief\"",
          "15:           v-if=\"selected.length > 0 && $helper.isAllowed('delete_roles')\"",
          "16:           @click.stop",
          "17:           @click=\"confirmDeleteMultiple\"",
          "18:           ><vs-icon icon=\"delete_sweep\"></vs-icon>",
          "19:           {{ $t(\"action.bulkDelete\") }}</vs-button",
          "20:         >",
          "21:       </template>",
          "22:     </badaso-breadcrumb-row>",
          "",
          "[Added Lines]",
          "3:     <badaso-breadcrumb-hover full>",
          "4:         <template slot=\"action\">",
          "5:           <download-excel",
          "6:             :data=\"roles\"",
          "7:             :fields=\"fieldsForExcel\"",
          "8:             :worksheet=\"'Role Management'\"",
          "9:             :name=\"'Role Management '+ '.xls'\"",
          "10:             class=\"crud-generated__excel-button\"",
          "11:           >",
          "12:             <badaso-dropdown-item",
          "13:               icon=\"file_upload\"",
          "14:             >",
          "15:               {{ $t(\"action.exportToExcel\") }}",
          "16:             </badaso-dropdown-item>",
          "17:           </download-excel>",
          "18:           <badaso-dropdown-item",
          "19:             icon=\"file_upload\"",
          "20:             @click=\"generatePdf\"",
          "21:           >",
          "22:             {{ $t(\"action.exportToPdf\") }}",
          "23:           </badaso-dropdown-item>",
          "24:           <badaso-dropdown-item",
          "25:             icon=\"add\"",
          "26:             :to=\"{ name: 'RoleManagementAdd' }\"",
          "27:           >",
          "28:             {{ $t(\"action.add\") }}",
          "29:           </badaso-dropdown-item>",
          "30:           <badaso-dropdown-item",
          "31:             icon=\"delete_sweep\"",
          "32:             v-if=\"selected.length > 0 && $helper.isAllowed('delete_roles')\"",
          "33:             @click.stop",
          "34:             @click=\"confirmDeleteMultiple\"",
          "35:           >",
          "36:             {{ $t(\"action.bulkDelete\") }}",
          "37:           </badaso-dropdown-item>",
          "38:         </template>",
          "39:       </badaso-breadcrumb-hover>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:               :description-connector=\"$t('role.footer.descriptionConnector')\"",
          "42:               :description-body=\"$t('role.footer.descriptionBody')\"",
          "43:             >",
          "57:                   <vs-td :data=\"data[indextr].name\">",
          "58:                     {{ data[indextr].name }}",
          "59:                   </vs-td>",
          "",
          "[Removed Lines]",
          "44:               <template slot=\"thead\">",
          "45:                 <vs-th sort-key=\"name\"> {{ $t(\"role.header.name\") }} </vs-th>",
          "46:                 <vs-th sort-key=\"displayName\">",
          "47:                   {{ $t(\"role.header.displayName\") }}",
          "48:                 </vs-th>",
          "49:                 <vs-th sort-key=\"description\">",
          "50:                   {{ $t(\"role.header.description\") }}",
          "51:                 </vs-th>",
          "52:                 <vs-th> {{ $t(\"role.header.action\") }} </vs-th>",
          "53:               </template>",
          "55:               <template slot-scope=\"{ data }\">",
          "56:                 <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">",
          "",
          "[Added Lines]",
          "61:             <template slot=\"thead\">",
          "62:               <vs-th sort-key=\"name\"> {{ $t(\"role.header.name\") }} </vs-th>",
          "63:               <vs-th sort-key=\"displayName\">",
          "64:                 {{ $t(\"role.header.displayName\") }}",
          "65:               </vs-th>",
          "66:               <vs-th sort-key=\"description\">",
          "67:                 {{ $t(\"role.header.description\") }}",
          "68:               </vs-th>",
          "69:               <vs-th> {{ $t(\"role.header.action\") }} </vs-th>",
          "70:             </template>",
          "72:             <template slot-scope=\"{ data }\">",
          "73:               <vs-tr :data=\"tr\" :key=\"indextr\" v-for=\"(tr, indextr) in data\">",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131: </template>",
          "133: <script>",
          "134: export default {",
          "135:   name: \"RoleManagementBrowse\",",
          "137:   data: () => ({",
          "138:     selected: [],",
          "139:     descriptionItems: [10, 50, 100],",
          "140:     roles: [],",
          "141:     willDeleteId: null,",
          "142:   }),",
          "143:   mounted() {",
          "144:     this.getRoleList();",
          "",
          "[Removed Lines]",
          "136:   components: {},",
          "",
          "[Added Lines]",
          "151: import * as _ from \"lodash\";",
          "152: import downloadExcel from \"vue-json-excel\";",
          "153: import jsPDF from \"jspdf\";",
          "154: import \"jspdf-autotable\";",
          "157:   components: { downloadExcel },",
          "163:     fieldsForExcel:{},",
          "164:     fieldsForPdf:[],",
          "165:     dataType:{",
          "166:       fields : ['id', \"name\", \"display_name\", \"description\"]",
          "167:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:           this.$closeLoader();",
          "180:           this.selected = [];",
          "181:           this.roles = response.data.roles;",
          "182:         })",
          "183:         .catch((error) => {",
          "184:           this.$closeLoader();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:           this.prepareExcelExporter()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "228:           });",
          "229:         });",
          "230:     },",
          "231:   },",
          "232: };",
          "233: </script>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:     prepareExcelExporter() {",
          "259:       for (const iterator of this.dataType.fields) {",
          "260:         const field = iterator;",
          "261:         if (field.includes(\"_\")) {",
          "262:           field = field.split(\"_\");",
          "263:           field = field[0].charAt(0).toUpperCase() + field[0].slice(1) + \" \" + field[1].charAt(0).toUpperCase() + field[1].slice(1);",
          "264:         }",
          "267:         field = field.charAt(0).toUpperCase() + field.slice(1);",
          "268:         const string = this.$caseConvert.stringSnakeToCamel(iterator);",
          "270:         this.fieldsForExcel[field] = this.$caseConvert.stringSnakeToCamel(iterator);",
          "271:       }",
          "273:       for (const iterator of this.dataType.fields) {",
          "274:         if (iterator.includes(\"_\")) {",
          "275:           iterator = iterator.split(\"_\");",
          "276:           iterator = iterator[0] + \" \" + iterator[1].charAt(0).toUpperCase() + iterator[1].slice(1);",
          "277:         }",
          "279:         const string = this.$caseConvert.stringSnakeToCamel(iterator);",
          "280:         this.fieldsForPdf.push(",
          "281:           string.charAt(0).toUpperCase() + string.slice(1)",
          "282:         );",
          "283:       }",
          "284:     },",
          "285:     generatePdf() {",
          "287:       let data = this.roles;",
          "289:       let fields = [];",
          "291:       for (const iterator in this.dataType.fields) {",
          "292:         const string = this.$caseConvert.stringSnakeToCamel(this.dataType.fields[iterator]);",
          "293:         fields.push(string);",
          "294:       }",
          "296:       data.map((value) => {",
          "297:         for (const iterator in value) {",
          "298:           if (!fields.includes(iterator)) {",
          "299:             delete value[iterator]",
          "300:           }",
          "301:         }",
          "302:         return value;",
          "303:       })",
          "304:       const result = data.map(Object.values);",
          "307:       const doc = new jsPDF(\"l\");",
          "310:       doc.setFont(\"helvetica\", \"bold\");",
          "311:       doc.setFontSize(28);",
          "312:       doc.text(this.$t(\"role.title\"), 149, 20, \"center\");",
          "315:       doc.autoTable({",
          "316:         head: [this.fieldsForPdf],",
          "317:         body: result,",
          "318:         startY: 30,",
          "320:         styles: { valign: \"middle\" },",
          "321:         headStyles: { fillColor: [6, 187, 211] },",
          "323:         columnStyles: { text: { cellWidth: \"wrap\" } },",
          "324:       });",
          "327:       const output = doc.output(\"blob\");",
          "328:       data = window.URL.createObjectURL(output);",
          "329:       window.open(data, \"_blank\");",
          "331:       setTimeout(function () {",
          "333:         window.URL.revokeObjectURL(data);",
          "334:       }, 100);",
          "335:     },",
          "",
          "---------------"
        ],
        "src/resources/js/pages/user-management/browse.vue||src/resources/js/pages/user-management/browse.vue": [
          "File: src/resources/js/pages/user-management/browse.vue -> src/resources/js/pages/user-management/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <template>",
          "2:   <div>",
          "23:     <vs-row v-if=\"$helper.isAllowed('browse_users')\">",
          "24:       <vs-col vs-lg=\"12\">",
          "25:         <vs-card>",
          "",
          "[Removed Lines]",
          "3:     <badaso-breadcrumb-row>",
          "4:       <template slot=\"action\">",
          "5:         <vs-button",
          "6:           color=\"primary\"",
          "7:           type=\"relief\"",
          "8:           :to=\"{ name: 'UserManagementAdd' }\"",
          "9:           v-if=\"$helper.isAllowed('add_users')\"",
          "10:           ><vs-icon icon=\"add\"></vs-icon> {{ $t(\"action.add\") }}</vs-button",
          "11:         >",
          "12:         <vs-button",
          "13:           color=\"danger\"",
          "14:           type=\"relief\"",
          "15:           v-if=\"selected.length > 0 && $helper.isAllowed('delete_users')\"",
          "16:           @click.stop",
          "17:           @click=\"confirmDeleteMultiple\"",
          "18:           ><vs-icon icon=\"delete_sweep\"></vs-icon>",
          "19:           {{ $t(\"action.bulkDelete\") }}</vs-button",
          "20:         >",
          "21:       </template>",
          "22:     </badaso-breadcrumb-row>",
          "",
          "[Added Lines]",
          "3:     <badaso-breadcrumb-hover full>",
          "4:         <template slot=\"action\">",
          "5:           <download-excel",
          "6:             :data=\"users\"",
          "7:             :fields=\"fieldsForExcel\"",
          "8:             :worksheet=\"'User Management'\"",
          "9:             :name=\"'User Management'+ '.xls'\"",
          "10:             class=\"crud-generated__excel-button\"",
          "11:           >",
          "12:             <badaso-dropdown-item",
          "13:               icon=\"file_upload\"",
          "14:             >",
          "15:               {{ $t(\"action.exportToExcel\") }}",
          "16:             </badaso-dropdown-item>",
          "17:           </download-excel>",
          "18:           <badaso-dropdown-item",
          "19:             icon=\"file_upload\"",
          "20:             @click=\"generatePdf\"",
          "21:           >",
          "22:             {{ $t(\"action.exportToPdf\") }}",
          "23:           </badaso-dropdown-item>",
          "24:           <badaso-dropdown-item",
          "25:             icon=\"add\"",
          "26:             :to=\"{ name: 'UserManagementAdd' }\"",
          "27:           >",
          "28:             {{ $t(\"action.add\") }}",
          "29:           </badaso-dropdown-item>",
          "30:           <badaso-dropdown-item",
          "31:             icon=\"delete_sweep\"",
          "32:             v-if=\"selected.length > 0 && $helper.isAllowed('delete_roles')\"",
          "33:             @click.stop",
          "34:             @click=\"confirmDeleteMultiple\"",
          "35:           >",
          "36:             {{ $t(\"action.bulkDelete\") }}",
          "37:           </badaso-dropdown-item>",
          "38:         </template>",
          "39:       </badaso-breadcrumb-hover>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114: </template>",
          "116: <script>",
          "117: export default {",
          "118:   name: \"UserManagementBrowse\",",
          "120:   data: () => ({",
          "121:     selected: [],",
          "122:     descriptionItems: [10, 50, 100],",
          "123:     users: [],",
          "124:     willDeleteId: null,",
          "125:   }),",
          "126:   mounted() {",
          "127:     this.getUserList();",
          "",
          "[Removed Lines]",
          "119:   components: {},",
          "",
          "[Added Lines]",
          "134: import * as _ from \"lodash\";",
          "135: import downloadExcel from \"vue-json-excel\";",
          "136: import jsPDF from \"jspdf\";",
          "137: import \"jspdf-autotable\";",
          "140:   components: { downloadExcel },",
          "146:     willDeleteId: null,",
          "147:     fieldsForExcel: {},",
          "148:     fieldsForPdf: [],",
          "149:     dataType: {",
          "150:       fields: ['name', 'email']",
          "151:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:         .then((response) => {",
          "162:           this.$closeLoader();",
          "163:           this.selected = [];",
          "165:         })",
          "166:         .catch((error) => {",
          "167:           this.$closeLoader();",
          "",
          "[Removed Lines]",
          "164:           this.users = response.data.users;",
          "",
          "[Added Lines]",
          "191:           this.users = response.data.users;",
          "192:           this.prepareExcelExporter()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:           });",
          "212:         });",
          "213:     },",
          "214:   },",
          "215: };",
          "216: </script>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     prepareExcelExporter() {",
          "243:       for (const iterator of this.dataType.fields) {",
          "244:         const field = iterator;",
          "245:         if (field.includes(\"_\")) {",
          "246:           field = field.split(\"_\");",
          "247:           field = field[0].charAt(0).toUpperCase() + field[0].slice(1) + \" \" + field[1].charAt(0).toUpperCase() + field[1].slice(1);",
          "248:         }",
          "249:         field = field.charAt(0).toUpperCase() + field.slice(1);",
          "251:         this.fieldsForExcel[field] = this.$caseConvert.stringSnakeToCamel(iterator);",
          "252:       }",
          "254:       for (const iterator of this.dataType.fields) {",
          "255:         if (iterator.includes(\"_\")) {",
          "256:           iterator = iterator.split(\"_\");",
          "257:           iterator = iterator[0] + \" \" + iterator[1].charAt(0).toUpperCase() + iterator[1].slice(1);",
          "258:         }",
          "260:         const string = this.$caseConvert.stringSnakeToCamel(iterator);",
          "261:         this.fieldsForPdf.push(",
          "262:           string.charAt(0).toUpperCase() + string.slice(1)",
          "263:         );",
          "264:       }",
          "265:     },",
          "266:     generatePdf() {",
          "268:       let data = this.users;",
          "270:       let fields = [];",
          "272:       for (const iterator in this.dataType.fields) {",
          "273:         const string = this.$caseConvert.stringSnakeToCamel(this.dataType.fields[iterator]);",
          "274:         fields.push(string);",
          "275:       }",
          "277:       data.map((value) => {",
          "278:         for (const iterator in value) {",
          "279:           if (!fields.includes(iterator)) {",
          "280:             delete value[iterator]",
          "281:           }",
          "282:         }",
          "283:         return value;",
          "284:       })",
          "286:       const result = data.map(Object.values);",
          "289:       const doc = new jsPDF(\"l\");",
          "292:       doc.setFont(\"helvetica\", \"bold\");",
          "293:       doc.setFontSize(28);",
          "294:       doc.text(this.$t(\"user.title\"), 149, 20, \"center\");",
          "297:       doc.autoTable({",
          "298:         head: [this.fieldsForPdf],",
          "299:         body: result,",
          "300:         startY: 30,",
          "302:         styles: { valign: \"middle\" },",
          "303:         headStyles: { fillColor: [6, 187, 211] },",
          "305:         columnStyles: { text: { cellWidth: \"wrap\" } },",
          "306:       });",
          "309:       const output = doc.output(\"blob\");",
          "310:       data = window.URL.createObjectURL(output);",
          "311:       window.open(data, \"_blank\");",
          "313:       setTimeout(function () {",
          "315:         window.URL.revokeObjectURL(data);",
          "316:       }, 100);",
          "317:     },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b2f4972061beda99ba095384c05af66b1b02d0c",
      "candidate_info": {
        "commit_hash": "6b2f4972061beda99ba095384c05af66b1b02d0c",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/6b2f4972061beda99ba095384c05af66b1b02d0c",
        "files": [
          "phpstan-baseline.neon"
        ],
        "message": "test1",
        "before_after_code_files": [
          "phpstan-baseline.neon||phpstan-baseline.neon"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpstan-baseline.neon||phpstan-baseline.neon": [
          "File: phpstan-baseline.neon -> phpstan-baseline.neon",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:     ignoreErrors:",
          "5:     -",
          "6:         message: '#Call to an undefined static method Uasoft\\\\Badaso\\\\Models\\\\Role::[a-zA-Z0-9-()\\_]+.#'",
          "",
          "[Removed Lines]",
          "1: parameters:",
          "2:     excludes_analyse:",
          "3:     - src/Migrations",
          "",
          "[Added Lines]",
          "1: parameters:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:             - src/Models",
          "11:             - src/Seeder",
          "12:             - src/Widgets",
          "14:     - '#Call to an undefined static method Uasoft\\\\Badaso\\\\Models\\\\User::[a-zA-Z0-9-()\\_]+.#'",
          "15:     - '#Call to an undefined static method Spatie\\\\Activitylog\\\\Models\\\\Activity::[a-zA-Z0-9-()\\_]+.#'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:             - tests",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31:     - '#Call to an undefined static method Uasoft\\\\Badaso\\\\Database\\\\Schema\\\\SchemaManager::[a-zA-Z0-9-()\\_]+.#'",
          "32:     - '#Call to an undefined static method Illuminate\\\\Support\\\\Facades\\\\DB::[a-zA-Z0-9-()\\_]+.#'",
          "33:     - '#Call to an undefined static method Illuminate\\\\Support\\\\Facades\\\\Redis::[a-zA-Z0-9-()\\_]+.#'",
          "37:     - '#Call to static method [a-zA-Z0-9-()\\_]+ on an unknown class Route.#'",
          "38:     - '#Result of method [a-zA-Z0-9\\\\_]+::[a-zA-Z0-9-()\\_]+ [a-zA-Z0-9-()\\_]+ is used.#'",
          "39:     - '#Method [a-zA-Z0-9\\\\_]+::[a-zA-Z0-9-()\\_]+ should return int but return statement is missing.#'",
          "40:     - '#Call to sprintf contains 1 placeholder, 0 values given.#'",
          "42:     - '#Variable \\$custom_permissions might not be defined.#'",
          "43:     - '#Call to static method debug[()]+ on an unknown class Log.#'",
          "44:     - '#Call to static method first[()]+ on an unknown class Uasoft\\\\Badaso\\\\Models\\\\FirebaseServices.#'",
          "",
          "[Removed Lines]",
          "34:     - '#Class App\\\\Http\\\\Controllers\\\\Controller not found.#'",
          "35:     - '#Parameter $test_case of method Uasoft\\\\Badaso\\\\Helpers\\\\CallHelperTest::[a-zA-Z0-9-()\\_]+ has invalid type Tests\\\\TestCase.#'",
          "36:     - '#Method Uasoft\\\\Badaso\\\\Helpers\\\\CallHelperTest::[a-zA-Z0-9-()\\_]+ has invalid return type Tests\\\\TestCase. #'",
          "41:     - '#Class Tests\\\\TestCase not found.#'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a03c808e7e361f850122bb8d3e446a68672ab8a0",
      "candidate_info": {
        "commit_hash": "a03c808e7e361f850122bb8d3e446a68672ab8a0",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/a03c808e7e361f850122bb8d3e446a68672ab8a0",
        "files": [
          "src/Config/lfm.php"
        ],
        "message": "bugfix [v2] remove format svg",
        "before_after_code_files": [
          "src/Config/lfm.php||src/Config/lfm.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Config/lfm.php||src/Config/lfm.php": [
          "File: src/Config/lfm.php -> src/Config/lfm.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:                 'image/pjpeg',",
          "68:                 'image/png',",
          "69:                 'image/gif',",
          "71:             ],",
          "72:         ],",
          "73:     ],",
          "",
          "[Removed Lines]",
          "70:                 'image/svg+xml',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17bb92e4ee992545e82d5c070f6c75f6544573cf",
      "candidate_info": {
        "commit_hash": "17bb92e4ee992545e82d5c070f6c75f6544573cf",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/17bb92e4ee992545e82d5c070f6c75f6544573cf",
        "files": [
          "phpstan-baseline.neon"
        ],
        "message": "update phpstan",
        "before_after_code_files": [
          "phpstan-baseline.neon||phpstan-baseline.neon"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpstan-baseline.neon||phpstan-baseline.neon": [
          "File: phpstan-baseline.neon -> phpstan-baseline.neon",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:     - '#Call to an undefined static method [a-zA-Z0-9-()\\\\_]+::[a-zA-Z0-9-()\\_]+.#'",
          "4:     - '#Call to an undefined method [a-zA-Z0-9-()\\\\_]+::[a-zA-Z0-9-()\\_]+.#'",
          "5:     - '#Call to static method [a-zA-Z0-9-()\\_]+ on an unknown class [a-zA-Z0-9-()\\_]+.#'",
          "7:     - '#Result of method [a-zA-Z0-9\\\\_]+::[a-zA-Z0-9-()\\_]+ [a-zA-Z0-9-()\\_]+ is used.#'",
          "8:     - '#Method [a-zA-Z0-9\\\\_]+::[a-zA-Z0-9-()\\_]+ should return int but return statement is missing.#'",
          "9:     - '#Call to sprintf contains 1 placeholder, 0 values given.#'",
          "",
          "[Removed Lines]",
          "6:     - '#Call to static method [a-zA-Z0-9-()\\_]+ on an unknown class \\$[a-zA-Z0-9-()\\\\_]+.#'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3abf7c3c7e3c9155427e20ef25fbbdc03839f0bc",
      "candidate_info": {
        "commit_hash": "3abf7c3c7e3c9155427e20ef25fbbdc03839f0bc",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/3abf7c3c7e3c9155427e20ef25fbbdc03839f0bc",
        "files": [
          "src/Commands/BackupCommand.php",
          "src/Controllers/Controller.php",
          "src/Helpers/CaseConvert.php",
          "src/Helpers/GetData.php",
          "src/Swagger/swagger_models/auth.php",
          "src/Swagger/swagger_models/settings/badaso.php",
          "src/Swagger/swagger_models/upload-file.php",
          "src/Swagger/swagger_models/user.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Commands/BackupCommand.php||src/Commands/BackupCommand.php",
          "src/Controllers/Controller.php||src/Controllers/Controller.php",
          "src/Helpers/CaseConvert.php||src/Helpers/CaseConvert.php",
          "src/Helpers/GetData.php||src/Helpers/GetData.php",
          "src/Swagger/swagger_models/auth.php||src/Swagger/swagger_models/auth.php",
          "src/Swagger/swagger_models/settings/badaso.php||src/Swagger/swagger_models/settings/badaso.php",
          "src/Swagger/swagger_models/upload-file.php||src/Swagger/swagger_models/upload-file.php",
          "src/Swagger/swagger_models/user.php||src/Swagger/swagger_models/user.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Commands/BackupCommand.php||src/Commands/BackupCommand.php": [
          "File: src/Commands/BackupCommand.php -> src/Commands/BackupCommand.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:             default:",
          "75:                 $backup_done = false;",
          "76:                 $this->warn('Invalid Backup Target. Set to env one of [all, database, files]');",
          "78:         }",
          "80:         if ($backup_done) {",
          "",
          "[Removed Lines]",
          "77:             break;",
          "",
          "[Added Lines]",
          "77:                 break;",
          "",
          "---------------"
        ],
        "src/Controllers/Controller.php||src/Controllers/Controller.php": [
          "File: src/Controllers/Controller.php -> src/Controllers/Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "482:                         $sync_data['parentKey'],",
          "483:                         $sync_data['relatedKey']",
          "484:                     )->sync($sync_data['content']);",
          "486:             }",
          "487:         } else {",
          "488:             $new_data = [];",
          "",
          "[Removed Lines]",
          "485:                 } catch (Exception $e) {}",
          "",
          "[Added Lines]",
          "485:                 } catch (Exception $e) {",
          "486:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "536:                             }",
          "537:                         }",
          "538:                     }",
          "540:                     $table_destination = $data_row->relation['destination_table'];",
          "541:                     unset($data[$table_destination]);",
          "543:                     $table_destination = $data_row->relation['destination_table'];",
          "544:                     unset($data[$table_destination]);",
          "546:                     if (in_array($data_row->type, [",
          "547:                         'upload_image',",
          "548:                         'upload_image_multiple',",
          "",
          "[Removed Lines]",
          "539:                 }elseif(isset($data_row->relation) && $data_row->relation['relation_type'] == 'has_one'){",
          "542:                 }elseif (isset($data_row->relation) && $data_row->relation['relation_type'] == 'has_many') {",
          "545:                 }else {",
          "",
          "[Added Lines]",
          "540:                 } elseif (isset($data_row->relation) && $data_row->relation['relation_type'] == 'has_one') {",
          "543:                 } elseif (isset($data_row->relation) && $data_row->relation['relation_type'] == 'has_many') {",
          "546:                 } else {",
          "",
          "---------------"
        ],
        "src/Helpers/CaseConvert.php||src/Helpers/CaseConvert.php": [
          "File: src/Helpers/CaseConvert.php -> src/Helpers/CaseConvert.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     {",
          "50:         $result = '';",
          "51:         switch ($type) {",
          "60:                 }",
          "80:         }",
          "83:         return $result;",
          "84:     }",
          "",
          "[Removed Lines]",
          "52:       case 'SNAKE':",
          "53:         $strings = str_split($param, 1);",
          "54:         foreach ($strings as $key => $value) {",
          "55:             if ($key > 0) {",
          "56:                 if (ctype_upper($value)) {",
          "57:                     $result = $result.'_'.strtolower($value);",
          "58:                 } else {",
          "59:                     $result = $result.''.$value;",
          "61:             } else {",
          "62:                 $result = $result.''.strtolower($value);",
          "63:             }",
          "64:         }",
          "65:         break;",
          "66:       case 'PASCAL':",
          "67:         $strings = explode('_', $param);",
          "68:         foreach ($strings as $key => $value) {",
          "69:             $result = $result.''.ucfirst($value);",
          "70:         }",
          "71:         break;",
          "72:       default:",
          "73:         $strings = explode('_', $param);",
          "74:         foreach ($strings as $key => $value) {",
          "75:             if ($key > 0) {",
          "76:                 $result = $result.''.ucfirst($value);",
          "77:             } else {",
          "78:                 $result = $result.''.$value;",
          "79:             }",
          "81:     }",
          "",
          "[Added Lines]",
          "52:             case 'SNAKE':",
          "53:                 $strings = str_split($param, 1);",
          "54:                 foreach ($strings as $key => $value) {",
          "55:                     if ($key > 0) {",
          "56:                         if (ctype_upper($value)) {",
          "57:                             $result = $result.'_'.strtolower($value);",
          "58:                         } else {",
          "59:                             $result = $result.''.$value;",
          "60:                         }",
          "61:                     } else {",
          "62:                         $result = $result.''.strtolower($value);",
          "63:                     }",
          "64:                 }",
          "65:                 break;",
          "66:             case 'PASCAL':",
          "67:                 $strings = explode('_', $param);",
          "68:                 foreach ($strings as $key => $value) {",
          "69:                     $result = $result.''.ucfirst($value);",
          "70:                 }",
          "71:                 break;",
          "72:             default:",
          "73:                 $strings = explode('_', $param);",
          "74:                 foreach ($strings as $key => $value) {",
          "75:                     if ($key > 0) {",
          "76:                         $result = $result.''.ucfirst($value);",
          "77:                     } else {",
          "78:                         $result = $result.''.$value;",
          "79:                     }",
          "",
          "---------------"
        ],
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:                     $relation_datas = DB::table($destination_table)->select($arr_query_select)",
          "497:                     ->get();",
          "498:                     switch ($relation_type) {",
          "506:                                 }",
          "519:                                     }",
          "520:                                 }",
          "530:                                 }",
          "537:                 }",
          "538:             }",
          "539:         }",
          "",
          "[Removed Lines]",
          "499:                             case 'belongs_to':",
          "500:                                 if (isset($row->{$destination_table})) {",
          "501:                                     try {",
          "502:                                         array_push($row->{$destination_table}, collect($relation_datas)->first());",
          "503:                                     } catch (\\Throwable $th) {}",
          "504:                                 } else {",
          "505:                                     $row->{$destination_table} = collect($relation_datas)->toArray();",
          "507:                                 break;",
          "509:                             case 'has_many':",
          "510:                                 $row->{$destination_table} = [];",
          "511:                                 foreach ($relation_datas as $key => $relation_data) {",
          "512:                                     if ($relation_data->{$destination_table_column} == $row->id) {",
          "513:                                         try {",
          "514:                                             array_push($row->{$destination_table}, $relation_data);",
          "515:                                         } catch (\\Throwable $th) {",
          "516:                                             $model = DataType::where('slug', $destination_table)->pluck('model_name')->first();",
          "517:                                             $row->{$destination_table} = $model::where($destination_table_column, $row->id)->get();",
          "518:                                         }",
          "521:                                 break;",
          "523:                             case 'has_one':",
          "524:                                 $row->{$destination_table} = collect();",
          "525:                                 foreach ($relation_datas as $key => $relation_data) {",
          "526:                                     if($relation_data->{$destination_table_column} == $row->id){",
          "527:                                         $row->{$destination_table} = collect($relation_data);",
          "528:                                         break;",
          "529:                                     }",
          "531:                                 break;",
          "533:                             default:",
          "535:                                 break;",
          "536:                         }",
          "",
          "[Added Lines]",
          "499:                         case 'belongs_to':",
          "500:                             if (isset($row->{$destination_table})) {",
          "501:                                 try {",
          "502:                                     array_push($row->{$destination_table}, collect($relation_datas)->first());",
          "503:                                 } catch (\\Throwable $th) {",
          "505:                             } else {",
          "506:                                 $row->{$destination_table} = collect($relation_datas)->toArray();",
          "507:                             }",
          "508:                             break;",
          "510:                         case 'has_many':",
          "511:                             $row->{$destination_table} = [];",
          "512:                             foreach ($relation_datas as $key => $relation_data) {",
          "513:                                 if ($relation_data->{$destination_table_column} == $row->id) {",
          "514:                                     try {",
          "515:                                         array_push($row->{$destination_table}, $relation_data);",
          "516:                                     } catch (\\Throwable $th) {",
          "517:                                         $model = DataType::where('slug', $destination_table)->pluck('model_name')->first();",
          "518:                                         $row->{$destination_table} = $model::where($destination_table_column, $row->id)->get();",
          "521:                             }",
          "522:                             break;",
          "524:                         case 'has_one':",
          "525:                             $row->{$destination_table} = collect();",
          "526:                             foreach ($relation_datas as $key => $relation_data) {",
          "527:                                 if ($relation_data->{$destination_table_column} == $row->id) {",
          "528:                                     $row->{$destination_table} = collect($relation_data);",
          "529:                                     break;",
          "531:                             }",
          "532:                             break;",
          "534:                         default:",
          "536:                             break;",
          "537:                     }",
          "",
          "---------------"
        ],
        "src/Swagger/swagger_models/auth.php||src/Swagger/swagger_models/auth.php": [
          "File: src/Swagger/swagger_models/auth.php -> src/Swagger/swagger_models/auth.php"
        ],
        "src/Swagger/swagger_models/settings/badaso.php||src/Swagger/swagger_models/settings/badaso.php": [
          "File: src/Swagger/swagger_models/settings/badaso.php -> src/Swagger/swagger_models/settings/badaso.php"
        ],
        "src/Swagger/swagger_models/upload-file.php||src/Swagger/swagger_models/upload-file.php": [
          "File: src/Swagger/swagger_models/upload-file.php -> src/Swagger/swagger_models/upload-file.php"
        ],
        "src/Swagger/swagger_models/user.php||src/Swagger/swagger_models/user.php": [
          "File: src/Swagger/swagger_models/user.php -> src/Swagger/swagger_models/user.php"
        ]
      }
    }
  ]
}