{
  "cve_id": "CVE-2021-32783",
  "cve_desc": "Contour is a Kubernetes ingress controller using Envoy proxy. In Contour before version 1.17.1 a specially crafted ExternalName type Service may be used to access Envoy's admin interface, which Contour normally prevents from access outside the Envoy container. This can be used to shut down Envoy remotely (a denial of service), or to expose the existence of any Secret that Envoy is using for its configuration, including most notably TLS Keypairs. However, it *cannot* be used to get the *content* of those secrets. Since this attack allows access to the administration interface, a variety of administration options are available, such as shutting down the Envoy or draining traffic. In general, the Envoy admin interface cannot easily be used for making changes to the cluster, in-flight requests, or backend services, but it could be used to shut down or drain Envoy, change traffic routing, or to retrieve secret metadata, as mentioned above. The issue will be addressed in Contour v1.18.0 and a cherry-picked patch release, v1.17.1, has been released to cover users who cannot upgrade at this time. For more details refer to the linked GitHub Security Advisory.",
  "repo": "projectcontour/contour",
  "patch_hash": "b53a5c4fd927f4ea2c6cf02f1359d8e28bef852e",
  "patch_info": {
    "commit_hash": "b53a5c4fd927f4ea2c6cf02f1359d8e28bef852e",
    "repo": "projectcontour/contour",
    "commit_url": "https://github.com/projectcontour/contour/commit/b53a5c4fd927f4ea2c6cf02f1359d8e28bef852e",
    "files": [
      "cmd/contour/serve.go",
      "examples/contour/01-contour-config.yaml",
      "examples/render/contour-gateway.yaml",
      "examples/render/contour.yaml",
      "go.mod",
      "internal/dag/accessors.go",
      "internal/dag/accessors_test.go",
      "internal/dag/builder_test.go",
      "internal/dag/extension_processor.go",
      "internal/dag/gatewayapi_processor.go",
      "internal/dag/httpproxy_processor.go",
      "internal/dag/ingress_processor.go",
      "internal/dag/status_test.go",
      "internal/featuretests/v3/externalname_test.go",
      "internal/featuretests/v3/headerpolicy_test.go",
      "pkg/config/parameters.go",
      "site/content/docs/main/configuration.md",
      "test/e2e/httpproxy/018_external_name_test.go",
      "test/e2e/httpproxy/httpproxy_test.go"
    ],
    "message": "cherrypicks for v1.17.1 (#3909)\n\n* Merge pull request from GHSA-5ph6-qq5x-7jwc\n\nSigned-off-by: Nick Young <ynick@vmware.com>\n\n* Fix spelling and lint errors that slipped into the ExternalName PR (#3908)\n\nSigned-off-by: Nick Young <ynick@vmware.com>\n\nCo-authored-by: Nick Young <ynick@vmware.com>",
    "before_after_code_files": [
      "cmd/contour/serve.go||cmd/contour/serve.go",
      "go.mod||go.mod",
      "internal/dag/accessors.go||internal/dag/accessors.go",
      "internal/dag/accessors_test.go||internal/dag/accessors_test.go",
      "internal/dag/builder_test.go||internal/dag/builder_test.go",
      "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
      "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go",
      "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
      "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go",
      "internal/dag/status_test.go||internal/dag/status_test.go",
      "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go",
      "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go",
      "pkg/config/parameters.go||pkg/config/parameters.go",
      "test/e2e/httpproxy/018_external_name_test.go||test/e2e/httpproxy/018_external_name_test.go",
      "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go"
    ]
  },
  "patch_diff": {
    "cmd/contour/serve.go||cmd/contour/serve.go": [
      "File: cmd/contour/serve.go -> cmd/contour/serve.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "714:   responseHeadersPolicy.Remove = append(responseHeadersPolicy.Remove, ctx.Config.Policy.ResponseHeadersPolicy.Remove...)",
      "715:  }",
      "718:  dagProcessors := []dag.Processor{",
      "719:   &dag.IngressProcessor{",
      "722:   },",
      "723:   &dag.ExtensionServiceProcessor{",
      "724:    FieldLogger:       log.WithField(\"context\", \"ExtensionServiceProcessor\"),",
      "725:    ClientCertificate: clientCert,",
      "726:   },",
      "727:   &dag.HTTPProxyProcessor{",
      "734:   },",
      "735:  }",
      "737:  if ctx.Config.GatewayConfig != nil && clients.ResourcesExist(k8s.GatewayAPIResources()...) {",
      "738:   dagProcessors = append(dagProcessors, &dag.GatewayAPIProcessor{",
      "740:   })",
      "741:  }",
      "",
      "[Removed Lines]",
      "720:    FieldLogger:       log.WithField(\"context\", \"IngressProcessor\"),",
      "721:    ClientCertificate: clientCert,",
      "728:    DisablePermitInsecure: ctx.Config.DisablePermitInsecure,",
      "729:    FallbackCertificate:   fallbackCert,",
      "730:    DNSLookupFamily:       ctx.Config.Cluster.DNSLookupFamily,",
      "731:    ClientCertificate:     clientCert,",
      "732:    RequestHeadersPolicy:  &requestHeadersPolicy,",
      "733:    ResponseHeadersPolicy: &responseHeadersPolicy,",
      "739:    FieldLogger: log.WithField(\"context\", \"GatewayAPIProcessor\"),",
      "",
      "[Added Lines]",
      "717:  log.Debugf(\"EnableExternalNameService is set to %t\", ctx.Config.EnableExternalNameService)",
      "721:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
      "722:    FieldLogger:               log.WithField(\"context\", \"IngressProcessor\"),",
      "723:    ClientCertificate:         clientCert,",
      "732:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
      "733:    DisablePermitInsecure:     ctx.Config.DisablePermitInsecure,",
      "734:    FallbackCertificate:       fallbackCert,",
      "735:    DNSLookupFamily:           ctx.Config.Cluster.DNSLookupFamily,",
      "736:    ClientCertificate:         clientCert,",
      "737:    RequestHeadersPolicy:      &requestHeadersPolicy,",
      "738:    ResponseHeadersPolicy:     &responseHeadersPolicy,",
      "744:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
      "745:    FieldLogger:               log.WithField(\"context\", \"GatewayAPIProcessor\"),",
      "",
      "---------------"
    ],
    "go.mod||go.mod": [
      "File: go.mod -> go.mod",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: require (",
      "6:  github.com/ahmetb/gen-crd-api-reference-docs v0.3.0",
      "7:  github.com/bombsimon/logrusr v1.0.0",
      "8:  github.com/envoyproxy/go-control-plane v0.9.9-0.20210111201334-f1f47757da33",
      "9:  github.com/go-logr/logr v0.4.0",
      "10:  github.com/golang/protobuf v1.5.2",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8:  github.com/davecgh/go-spew v1.1.1 // indirect",
      "",
      "---------------"
    ],
    "internal/dag/accessors.go||internal/dag/accessors.go": [
      "File: internal/dag/accessors.go -> internal/dag/accessors.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:  svc, svcPort, err := cache.LookupService(meta, port)",
      "56:  if err != nil {",
      "57:   return nil, err",
      "58:  }",
      "60:  if dagSvc := dag.GetService(k8s.NamespacedNameOf(svc), svcPort.Port); dagSvc != nil {",
      "61:   return dagSvc, nil",
      "62:  }",
      "",
      "[Removed Lines]",
      "54: func (dag *DAG) EnsureService(meta types.NamespacedName, port intstr.IntOrString, cache *KubernetesCache) (*Service, error) {",
      "",
      "[Added Lines]",
      "54: func (dag *DAG) EnsureService(meta types.NamespacedName, port intstr.IntOrString, cache *KubernetesCache, enableExternalNameSvc bool) (*Service, error) {",
      "60:  err = validateExternalName(svc, enableExternalNameSvc)",
      "61:  if err != nil {",
      "62:   return nil, err",
      "63:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "78:  return dagSvc, nil",
      "79: }",
      "81: func upstreamProtocol(svc *v1.Service, port v1.ServicePort) string {",
      "82:  up := annotation.ParseUpstreamProtocols(svc.Annotations)",
      "83:  protocol := up[port.Name]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86: func validateExternalName(svc *v1.Service, enableExternalNameSvc bool) error {",
      "89:  en := externalName(svc)",
      "90:  if en == \"\" {",
      "91:   return nil",
      "92:  }",
      "95:  if !enableExternalNameSvc {",
      "96:   return fmt.Errorf(\"%s/%s is an ExternalName service, these are not currently enabled. See the config.enableExternalNameService config file setting\", svc.Namespace, svc.Name)",
      "97:  }",
      "104:  localhostNames := map[string]struct{}{",
      "105:   \"localhost\":               {},",
      "106:   \"localhost.localdomain\":   {},",
      "107:   \"local.projectcontour.io\": {},",
      "108:  }",
      "110:  _, localhost := localhostNames[en]",
      "111:  if localhost {",
      "112:   return fmt.Errorf(\"%s/%s is an ExternalName service that points to localhost, this is not allowed\", svc.Namespace, svc.Name)",
      "113:  }",
      "115:  return nil",
      "116: }",
      "",
      "---------------"
    ],
    "internal/dag/accessors_test.go||internal/dag/accessors_test.go": [
      "File: internal/dag/accessors_test.go -> internal/dag/accessors_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:    }},",
      "41:   },",
      "42:  }",
      "43:  services := map[types.NamespacedName]*v1.Service{",
      "45:  }",
      "47:  tests := map[string]struct {",
      "48:   types.NamespacedName",
      "52:  }{",
      "53:   \"lookup service by port number\": {",
      "54:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
      "",
      "[Removed Lines]",
      "44:   {Name: \"service1\", Namespace: \"default\"}: s1,",
      "49:   port    intstr.IntOrString",
      "50:   want    *Service",
      "51:   wantErr error",
      "",
      "[Added Lines]",
      "44:  externalNameValid := &v1.Service{",
      "45:   ObjectMeta: metav1.ObjectMeta{",
      "46:    Name:      \"externalnamevalid\",",
      "47:    Namespace: \"default\",",
      "48:   },",
      "49:   Spec: v1.ServiceSpec{",
      "50:    Type:         v1.ServiceTypeExternalName,",
      "51:    ExternalName: \"external.projectcontour.io\",",
      "52:    Ports: []v1.ServicePort{{",
      "53:     Name:       \"http\",",
      "54:     Protocol:   \"TCP\",",
      "55:     Port:       80,",
      "56:     TargetPort: intstr.FromInt(80),",
      "57:    }},",
      "58:   },",
      "59:  }",
      "61:  externalNameLocalhost := &v1.Service{",
      "62:   ObjectMeta: metav1.ObjectMeta{",
      "63:    Name:      \"externalnamelocalhost\",",
      "64:    Namespace: \"default\",",
      "65:   },",
      "66:   Spec: v1.ServiceSpec{",
      "67:    Type:         v1.ServiceTypeExternalName,",
      "68:    ExternalName: \"localhost\",",
      "69:    Ports: []v1.ServicePort{{",
      "70:     Name:       \"http\",",
      "71:     Protocol:   \"TCP\",",
      "72:     Port:       80,",
      "73:     TargetPort: intstr.FromInt(80),",
      "74:    }},",
      "75:   },",
      "76:  }",
      "79:   {Name: \"service1\", Namespace: \"default\"}:              s1,",
      "80:   {Name: \"externalnamevalid\", Namespace: \"default\"}:     externalNameValid,",
      "81:   {Name: \"externalnamelocalhost\", Namespace: \"default\"}: externalNameLocalhost,",
      "86:   port                  intstr.IntOrString",
      "87:   enableExternalNameSvc bool",
      "88:   want                  *Service",
      "89:   wantErr               error",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:    port:           intstr.FromString(\"9999\"),",
      "81:    wantErr:        errors.New(`port \"9999\" on service \"default/service1\" not matched`),",
      "82:   },",
      "83:  }",
      "85:  for name, tc := range tests {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:   \"When ExternalName Services are not disabled no error is returned\": {",
      "122:    NamespacedName: types.NamespacedName{Name: \"externalnamevalid\", Namespace: \"default\"},",
      "123:    port:           intstr.FromString(\"80\"),",
      "124:    want: &Service{",
      "125:     Weighted: WeightedService{",
      "126:      Weight:           1,",
      "127:      ServiceName:      \"externalnamevalid\",",
      "128:      ServiceNamespace: \"default\",",
      "129:      ServicePort: v1.ServicePort{",
      "130:       Name:       \"http\",",
      "131:       Protocol:   \"TCP\",",
      "132:       Port:       80,",
      "133:       TargetPort: intstr.FromInt(80),",
      "134:      },",
      "135:     },",
      "136:     ExternalName: \"external.projectcontour.io\",",
      "137:    },",
      "138:    enableExternalNameSvc: true,",
      "139:   },",
      "140:   \"When ExternalName Services are disabled an error is returned\": {",
      "141:    NamespacedName: types.NamespacedName{Name: \"externalnamevalid\", Namespace: \"default\"},",
      "142:    port:           intstr.FromString(\"80\"),",
      "143:    wantErr:        errors.New(`default/externalnamevalid is an ExternalName service, these are not currently enabled. See the config.enableExternalNameService config file setting`),",
      "144:   },",
      "145:   \"When ExternalName Services are enabled but a localhost ExternalName is used an error is returned\": {",
      "146:    NamespacedName:        types.NamespacedName{Name: \"externalnamelocalhost\", Namespace: \"default\"},",
      "147:    port:                  intstr.FromString(\"80\"),",
      "148:    wantErr:               errors.New(`default/externalnamelocalhost is an ExternalName service that points to localhost, this is not allowed`),",
      "149:    enableExternalNameSvc: true,",
      "150:   },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "94:    var dag DAG",
      "97:    assert.Equal(t, tc.want, got)",
      "98:    assert.Equal(t, tc.wantErr, gotErr)",
      "99:   })",
      "",
      "[Removed Lines]",
      "96:    got, gotErr := dag.EnsureService(tc.NamespacedName, tc.port, &b.Source)",
      "",
      "[Added Lines]",
      "164:    got, gotErr := dag.EnsureService(tc.NamespacedName, tc.port, &b.Source, tc.enableExternalNameSvc)",
      "",
      "---------------"
    ],
    "internal/dag/builder_test.go||internal/dag/builder_test.go": [
      "File: internal/dag/builder_test.go -> internal/dag/builder_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "6536:   },",
      "6537:  }",
      "6539:  proxyExternalNameService := &contour_api_v1.HTTPProxy{",
      "6540:   ObjectMeta: metav1.ObjectMeta{",
      "6541:    Name:      \"example-com\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6539:  ingressExternalNameService := &networking_v1.Ingress{",
      "6540:   ObjectMeta: metav1.ObjectMeta{",
      "6541:    Name:      \"externalname\",",
      "6542:    Namespace: \"default\",",
      "6543:   },",
      "6544:   Spec: networking_v1.IngressSpec{",
      "6545:    Rules: []networking_v1.IngressRule{{",
      "6546:     Host: \"example.com\",",
      "6547:     IngressRuleValue: networking_v1.IngressRuleValue{",
      "6548:      HTTP: &networking_v1.HTTPIngressRuleValue{",
      "6549:       Paths: []networking_v1.HTTPIngressPath{{",
      "6550:        Backend: *backendv1(s14.GetName(), intstr.FromInt(80)),",
      "6551:       }},",
      "6552:      },",
      "6553:     },",
      "6554:    }},",
      "6555:   },",
      "6556:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6582:  tests := map[string]struct {",
      "6583:   objs                         []interface{}",
      "6584:   disablePermitInsecure        bool",
      "6585:   fallbackCertificateName      string",
      "6586:   fallbackCertificateNamespace string",
      "6587:   want                         []Vertex",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6604:   enableExternalNameSvc        bool",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "8980:     },",
      "8981:    ),",
      "8982:   },",
      "8983:   \"insert proxy with externalName service\": {",
      "8984:    objs: []interface{}{",
      "8985:     proxyExternalNameService,",
      "8986:     s14,",
      "8987:    },",
      "8988:    want: listeners(",
      "8989:     &Listener{",
      "8990:      Port: 80,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9003:   \"insert ingress with externalName service\": {",
      "9004:    objs: []interface{}{",
      "9005:     ingressExternalNameService,",
      "9006:     s14,",
      "9007:    },",
      "9008:    enableExternalNameSvc: true,",
      "9009:    want: listeners(",
      "9010:     &Listener{",
      "9011:      Port: 80,",
      "9012:      VirtualHosts: virtualhosts(",
      "9013:       virtualhost(\"example.com\", &Route{",
      "9014:        PathMatchCondition: prefixString(\"/\"),",
      "9015:        Clusters: []*Cluster{{",
      "9016:         Upstream: &Service{",
      "9017:          ExternalName: \"externalservice.io\",",
      "9018:          Weighted: WeightedService{",
      "9019:           Weight:           1,",
      "9020:           ServiceName:      s14.Name,",
      "9021:           ServiceNamespace: s14.Namespace,",
      "9022:           ServicePort:      s14.Spec.Ports[0],",
      "9023:          },",
      "9024:         },",
      "9025:        }},",
      "9026:       }),",
      "9027:      ),",
      "9028:     },",
      "9029:    ),",
      "9030:   },",
      "9031:   \"insert ingress with externalName service, but externalName services disabled\": {",
      "9032:    objs: []interface{}{",
      "9033:     ingressExternalNameService,",
      "9034:     s14,",
      "9035:    },",
      "9036:    enableExternalNameSvc: false,",
      "9037:    want:                  listeners(),",
      "9038:   },",
      "9044:    enableExternalNameSvc: true,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "9014:     s14,",
      "9015:     sec1,",
      "9016:    },",
      "9017:    want: listeners(",
      "9018:     &Listener{",
      "9019:      Port: 443,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9074:    enableExternalNameSvc: true,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "9073:     proxyReplaceHostHeaderRoute,",
      "9074:     s14,",
      "9075:    },",
      "9076:    want: listeners(",
      "9077:     &Listener{",
      "9078:      Port: 80,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9134:    enableExternalNameSvc: true,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9111:     proxyReplaceHostHeaderService,",
      "9112:     s14,",
      "9113:    },",
      "9115:   },",
      "9116:   \"insert proxy with response header policy - route - host header\": {",
      "9117:    objs: []interface{}{",
      "",
      "[Removed Lines]",
      "9114:    want: listeners(),",
      "",
      "[Added Lines]",
      "9173:    enableExternalNameSvc: true,",
      "9174:    want:                  listeners(),",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "9754:     },",
      "9755:     Processors: []Processor{",
      "9756:      &IngressProcessor{",
      "9758:      },",
      "9759:      &HTTPProxyProcessor{",
      "9761:       FallbackCertificate: &types.NamespacedName{",
      "9762:        Name:      tc.fallbackCertificateName,",
      "9763:        Namespace: tc.fallbackCertificateNamespace,",
      "",
      "[Removed Lines]",
      "9757:       FieldLogger: fixture.NewTestLogger(t),",
      "9760:       DisablePermitInsecure: tc.disablePermitInsecure,",
      "",
      "[Added Lines]",
      "9817:       FieldLogger:               fixture.NewTestLogger(t),",
      "9818:       EnableExternalNameService: tc.enableExternalNameSvc,",
      "9821:       EnableExternalNameService: tc.enableExternalNameSvc,",
      "9822:       DisablePermitInsecure:     tc.disablePermitInsecure,",
      "",
      "---------------"
    ],
    "internal/dag/extension_processor.go||internal/dag/extension_processor.go": [
      "File: internal/dag/extension_processor.go -> internal/dag/extension_processor.go"
    ],
    "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go": [
      "File: internal/dag/gatewayapi_processor.go -> internal/dag/gatewayapi_processor.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:  dag    *DAG",
      "49:  source *KubernetesCache",
      "50: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:  EnableExternalNameService bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "744:  meta := types.NamespacedName{Name: *serviceName, Namespace: namespace}",
      "748:  if err != nil {",
      "750:  }",
      "752:  return service, nil",
      "",
      "[Removed Lines]",
      "747:  service, err := p.dag.EnsureService(meta, intstr.FromInt(int(*port)), p.source)",
      "749:   return nil, fmt.Errorf(\"service %q does not exist\", meta.Name)",
      "",
      "[Added Lines]",
      "752:  service, err := p.dag.EnsureService(meta, intstr.FromInt(int(*port)), p.source, p.EnableExternalNameService)",
      "754:   return nil, fmt.Errorf(\"service %q is invalid: %s\", meta.Name, err)",
      "",
      "---------------"
    ],
    "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go": [
      "File: internal/dag/httpproxy_processor.go -> internal/dag/httpproxy_processor.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:  FallbackCertificate *types.NamespacedName",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:  EnableExternalNameService bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "563:     return nil",
      "564:    }",
      "565:    m := types.NamespacedName{Name: service.Name, Namespace: proxy.Namespace}",
      "567:    if err != nil {",
      "568:     validCond.AddErrorf(contour_api_v1.ConditionTypeServiceError, \"ServiceUnresolvedReference\",",
      "569:      \"Spec.Routes unresolved service reference: %s\", err)",
      "",
      "[Removed Lines]",
      "566:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
      "",
      "[Added Lines]",
      "571:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source, p.EnableExternalNameService)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "688:   var proxy TCPProxy",
      "689:   for _, service := range httpproxy.Spec.TCPProxy.Services {",
      "690:    m := types.NamespacedName{Name: service.Name, Namespace: httpproxy.Namespace}",
      "692:    if err != nil {",
      "694:      \"Spec.TCPProxy unresolved service reference: %s\", err)",
      "695:     return false",
      "696:    }",
      "",
      "[Removed Lines]",
      "691:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
      "693:     validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\",",
      "",
      "[Added Lines]",
      "696:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source, p.EnableExternalNameService)",
      "698:     validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\",",
      "",
      "---------------"
    ],
    "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go": [
      "File: internal/dag/ingress_processor.go -> internal/dag/ingress_processor.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:  ClientCertificate *types.NamespacedName",
      "40: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:  EnableExternalNameService bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "144:    port = intstr.FromInt(int(be.Service.Port.Number))",
      "145:   }",
      "148:   if err != nil {",
      "149:    p.WithError(err).",
      "150:     WithField(\"name\", ing.GetName()).",
      "",
      "[Removed Lines]",
      "147:   s, err := p.dag.EnsureService(m, port, p.source)",
      "",
      "[Added Lines]",
      "152:   s, err := p.dag.EnsureService(m, port, p.source, p.EnableExternalNameService)",
      "",
      "---------------"
    ],
    "internal/dag/status_test.go||internal/dag/status_test.go": [
      "File: internal/dag/status_test.go -> internal/dag/status_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1758:   objs: []interface{}{proxyTCPInvalidMissingService},",
      "1759:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
      "1760:    {Name: proxyTCPInvalidMissingService.Name, Namespace: proxyTCPInvalidMissingService.Namespace}: fixture.NewValidCondition().",
      "1762:   },",
      "1763:  })",
      "",
      "[Removed Lines]",
      "1761:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
      "",
      "[Added Lines]",
      "1761:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1787:   objs: []interface{}{proxyTCPInvalidPortNotMatched, fixture.ServiceRootsKuard},",
      "1788:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
      "1789:    {Name: proxyTCPInvalidPortNotMatched.Name, Namespace: proxyTCPInvalidPortNotMatched.Namespace}: fixture.NewValidCondition().",
      "1791:   },",
      "1792:  })",
      "",
      "[Removed Lines]",
      "1790:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
      "",
      "[Added Lines]",
      "1790:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2931:      Type:    string(status.ConditionResolvedRefs),",
      "2932:      Status:  contour_api_v1.ConditionFalse,",
      "2933:      Reason:  string(status.ReasonDegraded),",
      "2935:     },",
      "2936:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
      "2937:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
      "",
      "[Removed Lines]",
      "2934:      Message: \"service \\\"invalid-one\\\" does not exist, service \\\"invalid-two\\\" does not exist\",",
      "",
      "[Added Lines]",
      "2934:      Message: \"service \\\"invalid-one\\\" is invalid: service \\\"default/invalid-one\\\" not found, service \\\"invalid-two\\\" is invalid: service \\\"default/invalid-two\\\" not found\",",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3661:       Type:    string(status.ConditionResolvedRefs),",
      "3662:       Status:  contour_api_v1.ConditionFalse,",
      "3663:       Reason:  string(status.ReasonDegraded),",
      "3665:      },",
      "3666:      gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
      "3667:       Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
      "",
      "[Removed Lines]",
      "3664:       Message: \"service \\\"invalid-one\\\" does not exist, service \\\"invalid-two\\\" does not exist\",",
      "",
      "[Added Lines]",
      "3664:       Message: \"service \\\"invalid-one\\\" is invalid: service \\\"default/invalid-one\\\" not found, service \\\"invalid-two\\\" is invalid: service \\\"default/invalid-two\\\" not found\",",
      "",
      "---------------"
    ],
    "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go": [
      "File: internal/featuretests/v3/externalname_test.go -> internal/featuretests/v3/externalname_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: import (",
      "17:  \"testing\"",
      "19:  \"github.com/projectcontour/contour/internal/featuretests\"",
      "21:  envoy_cluster_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/cluster/v3\"",
      "22:  envoy_route_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19:  \"github.com/projectcontour/contour/internal/contour\"",
      "20:  \"github.com/projectcontour/contour/internal/dag\"",
      "22:  \"github.com/sirupsen/logrus\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39: func TestExternalNameService(t *testing.T) {",
      "41:  defer done()",
      "43:  s1 := fixture.NewService(\"kuard\").",
      "",
      "[Removed Lines]",
      "40:  rh, c, done := setup(t)",
      "",
      "[Added Lines]",
      "43:  rh, c, done := setup(t, enableExternalNameService(t))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "317:   ),",
      "318:  })",
      "319: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "324: func enableExternalNameService(t *testing.T) func(eh *contour.EventHandler) {",
      "325:  return func(eh *contour.EventHandler) {",
      "327:   log := fixture.NewTestLogger(t)",
      "328:   log.SetLevel(logrus.DebugLevel)",
      "330:   eh.Builder.Processors = []dag.Processor{",
      "331:    &dag.IngressProcessor{",
      "332:     EnableExternalNameService: true,",
      "333:     FieldLogger:               log.WithField(\"context\", \"IngressProcessor\"),",
      "334:    },",
      "335:    &dag.HTTPProxyProcessor{",
      "336:     EnableExternalNameService: true,",
      "337:    },",
      "338:    &dag.ExtensionServiceProcessor{",
      "339:     FieldLogger: log.WithField(\"context\", \"ExtensionServiceProcessor\"),",
      "340:    },",
      "341:    &dag.ListenerProcessor{},",
      "342:   }",
      "343:  }",
      "344: }",
      "",
      "---------------"
    ],
    "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go": [
      "File: internal/featuretests/v3/headerpolicy_test.go -> internal/featuretests/v3/headerpolicy_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: )",
      "32: func TestHeaderPolicy_ReplaceHeader_HTTProxy(t *testing.T) {",
      "34:  defer done()",
      "36:  rh.OnAdd(fixture.NewService(\"svc1\").",
      "",
      "[Removed Lines]",
      "33:  rh, c, done := setup(t)",
      "",
      "[Added Lines]",
      "36:  rh, c, done := setup(t, enableExternalNameService(t))",
      "",
      "---------------"
    ],
    "pkg/config/parameters.go||pkg/config/parameters.go": [
      "File: pkg/config/parameters.go -> pkg/config/parameters.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "537:  DisableAllowChunkedLength bool `yaml:\"disableAllowChunkedLength,omitempty\"`",
      "540:  LeaderElection LeaderElectionParameters `yaml:\"leaderelection,omitempty\"`",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "542:  EnableExternalNameService bool `yaml:\"enableExternalNameService,omitempty\"`",
      "",
      "---------------"
    ],
    "test/e2e/httpproxy/018_external_name_test.go||test/e2e/httpproxy/018_external_name_test.go": [
      "File: test/e2e/httpproxy/018_external_name_test.go -> test/e2e/httpproxy/018_external_name_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:     },",
      "80:    },",
      "81:   }",
      "84:   res, ok := f.HTTP.RequestUntil(&e2e.HTTPRequestOpts{",
      "85:    Host:      p.Spec.VirtualHost.Fqdn,",
      "",
      "[Removed Lines]",
      "82:   f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "",
      "[Added Lines]",
      "82:   proxy, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "83:   if !ok {",
      "84:    t.Fatalf(\"The HTTPProxy did not become valid, here are the Valid condition's Errors: %s\", httpProxyErrors(proxy))",
      "85:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "146:     },",
      "147:    },",
      "148:   }",
      "151:   res, ok := f.HTTP.RequestUntil(&e2e.HTTPRequestOpts{",
      "152:    Host:      p.Spec.VirtualHost.Fqdn,",
      "",
      "[Removed Lines]",
      "149:   f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "",
      "[Added Lines]",
      "152:   proxy, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "153:   if !ok {",
      "154:    t.Fatalf(\"The HTTPProxy did not become valid, here are the Valid condition's Errors: %s\", httpProxyErrors(proxy))",
      "155:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "159: func stringPtr(s string) *string {",
      "160:  return &s",
      "161: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169: func testExternalNameServiceLocalhostInvalid(namespace string) {",
      "170:  Specify(\"external name services with localhost are rejected\", func() {",
      "171:   t := f.T()",
      "173:   f.Fixtures.Echo.Deploy(namespace, \"ingress-conformance-echo\")",
      "175:   externalNameService := &corev1.Service{",
      "176:    ObjectMeta: metav1.ObjectMeta{",
      "177:     Namespace: namespace,",
      "178:     Name:      \"external-name-service-localhost\",",
      "179:    },",
      "180:    Spec: corev1.ServiceSpec{",
      "181:     Type: corev1.ServiceTypeExternalName,",
      "184:     ExternalName: \"localhost.localdomain\",",
      "185:     Ports: []corev1.ServicePort{",
      "186:      {",
      "187:       Name: \"http\",",
      "188:       Port: 80,",
      "189:      },",
      "190:     },",
      "191:    },",
      "192:   }",
      "193:   require.NoError(t, f.Client.Create(context.TODO(), externalNameService))",
      "195:   p := &contourv1.HTTPProxy{",
      "196:    ObjectMeta: metav1.ObjectMeta{",
      "197:     Namespace: namespace,",
      "198:     Name:      \"external-name-proxy\",",
      "199:    },",
      "200:    Spec: contourv1.HTTPProxySpec{",
      "201:     VirtualHost: &contourv1.VirtualHost{",
      "202:      Fqdn: \"externalnameservice.projectcontour.io\",",
      "203:     },",
      "204:     Routes: []contourv1.Route{",
      "205:      {",
      "206:       Services: []contourv1.Service{",
      "207:        {",
      "208:         Name: externalNameService.Name,",
      "209:         Port: 80,",
      "210:        },",
      "211:       },",
      "212:       RequestHeadersPolicy: &contourv1.HeadersPolicy{",
      "213:        Set: []contourv1.HeaderValue{",
      "214:         {",
      "215:          Name:  \"Host\",",
      "216:          Value: externalNameService.Spec.ExternalName,",
      "217:         },",
      "218:        },",
      "219:       },",
      "220:      },",
      "221:     },",
      "222:    },",
      "223:   }",
      "224:   _, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "225:   require.Falsef(t, ok, \"ExternalName with hostname %s was accepted by Contour.\", externalNameService.Spec.ExternalName)",
      "226:  })",
      "227: }",
      "",
      "---------------"
    ],
    "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go": [
      "File: test/e2e/httpproxy/httpproxy_test.go -> test/e2e/httpproxy/httpproxy_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "20:  \"fmt\"",
      "21:  \"testing\"",
      "23:  certmanagerv1 \"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1\"",
      "24:  certmanagermetav1 \"github.com/jetstack/cert-manager/pkg/apis/meta/v1\"",
      "25:  . \"github.com/onsi/ginkgo\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23:  \"github.com/davecgh/go-spew/spew\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:  f.NamespacedTest(\"017-host-header-rewrite\", testHostHeaderRewrite)",
      "221:  f.NamespacedTest(\"019-local-rate-limiting-vhost\", testLocalRateLimitingVirtualHost)",
      "223:  f.NamespacedTest(\"019-local-rate-limiting-route\", testLocalRateLimitingRoute)",
      "",
      "[Removed Lines]",
      "217:  f.NamespacedTest(\"018-external-name-service-insecure\", testExternalNameServiceInsecure)",
      "219:  f.NamespacedTest(\"018-external-name-service-tls\", testExternalNameServiceTLS)",
      "",
      "[Added Lines]",
      "218:  f.NamespacedTest(\"018-external-name-service-insecure\", func(namespace string) {",
      "219:   Context(\"with ExternalName Services enabled\", func() {",
      "220:    BeforeEach(func() {",
      "221:     contourConfig.EnableExternalNameService = true",
      "222:    })",
      "223:    testExternalNameServiceInsecure(namespace)",
      "224:   })",
      "225:  })",
      "227:  f.NamespacedTest(\"018-external-name-service-tls\", func(namespace string) {",
      "228:   Context(\"with ExternalName Services enabled\", func() {",
      "229:    BeforeEach(func() {",
      "230:     contourConfig.EnableExternalNameService = true",
      "231:    })",
      "232:    testExternalNameServiceTLS(namespace)",
      "233:   })",
      "234:  })",
      "236:  f.NamespacedTest(\"018-external-name-service-localhost\", func(namespace string) {",
      "237:   Context(\"with ExternalName Services enabled\", func() {",
      "238:    BeforeEach(func() {",
      "239:     contourConfig.EnableExternalNameService = true",
      "240:    })",
      "241:    testExternalNameServiceLocalhostInvalid(namespace)",
      "242:   })",
      "243:  })",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "280: func httpProxyValid(proxy *contourv1.HTTPProxy) bool {",
      "282: }",
      "",
      "[Removed Lines]",
      "281:  return proxy != nil && proxy.Status.CurrentStatus == \"valid\"",
      "",
      "[Added Lines]",
      "305:  if proxy == nil {",
      "306:   return false",
      "307:  }",
      "309:  if len(proxy.Status.Conditions) == 0 {",
      "310:   return false",
      "311:  }",
      "313:  cond := proxy.Status.GetConditionFor(\"Valid\")",
      "314:  return cond.Status == \"True\"",
      "316: }",
      "320: func httpProxyErrors(proxy *contourv1.HTTPProxy) string {",
      "321:  cond := proxy.Status.GetConditionFor(\"Valid\")",
      "322:  errors := cond.Errors",
      "323:  if len(errors) > 0 {",
      "324:   return spew.Sdump(errors)",
      "325:  }",
      "327:  return \"\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cb3808df7202982f8069bb48c29282966202285d",
      "candidate_info": {
        "commit_hash": "cb3808df7202982f8069bb48c29282966202285d",
        "repo": "projectcontour/contour",
        "commit_url": "https://github.com/projectcontour/contour/commit/cb3808df7202982f8069bb48c29282966202285d",
        "files": [
          "internal/dag/accessors.go",
          "internal/dag/accessors_test.go",
          "internal/dag/builder.go",
          "internal/dag/builder_test.go",
          "internal/dag/cache.go",
          "internal/dag/cache_test.go",
          "internal/dag/dag.go",
          "internal/dag/extension_processor.go",
          "internal/dag/httpproxy_processor.go",
          "internal/dag/ingress_processor.go",
          "internal/dag/listener_processor.go",
          "internal/featuretests/authorization_test.go"
        ],
        "message": "internal/dag: have processors operate directly on DAG (#2900)\n\n* internal/dag: have processors operate directly on DAG\n\nModifies DAG processors to operate directly on a DAG instead of\na DAG builder and its build caches. Adds visitors and associated\nexported functions to get objects out of a DAG for build purposes.\n\nSigned-off-by: Steve Kriss <krisss@vmware.com>",
        "before_after_code_files": [
          "internal/dag/accessors.go||internal/dag/accessors.go",
          "internal/dag/accessors_test.go||internal/dag/accessors_test.go",
          "internal/dag/builder.go||internal/dag/builder.go",
          "internal/dag/builder_test.go||internal/dag/builder_test.go",
          "internal/dag/cache.go||internal/dag/cache.go",
          "internal/dag/cache_test.go||internal/dag/cache_test.go",
          "internal/dag/dag.go||internal/dag/dag.go",
          "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
          "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
          "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go",
          "internal/dag/listener_processor.go||internal/dag/listener_processor.go",
          "internal/featuretests/authorization_test.go||internal/featuretests/authorization_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "internal/dag/accessors.go||internal/dag/accessors.go",
            "internal/dag/accessors_test.go||internal/dag/accessors_test.go",
            "internal/dag/builder_test.go||internal/dag/builder_test.go",
            "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
            "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
            "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go"
          ],
          "candidate": [
            "internal/dag/accessors.go||internal/dag/accessors.go",
            "internal/dag/accessors_test.go||internal/dag/accessors_test.go",
            "internal/dag/builder_test.go||internal/dag/builder_test.go",
            "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
            "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
            "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/dag/accessors.go||internal/dag/accessors.go": [
          "File: internal/dag/accessors.go -> internal/dag/accessors.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: package dag",
          "16: import (",
          "17:  \"fmt\"",
          "18:  \"strconv\"",
          "20:  \"github.com/projectcontour/contour/internal/annotation\"",
          "21:  \"github.com/projectcontour/contour/internal/k8s\"",
          "22:  v1 \"k8s.io/api/core/v1\"",
          "23:  \"k8s.io/apimachinery/pkg/types\"",
          "24:  \"k8s.io/apimachinery/pkg/util/intstr\"",
          "25: )",
          "28: type RouteServiceName struct {",
          "29:  Name      string",
          "30:  Namespace string",
          "31:  Port      int32",
          "32: }",
          "35: func (dag *DAG) GetServices() map[RouteServiceName]*Service {",
          "36:  getter := serviceGetter(map[RouteServiceName]*Service{})",
          "37:  dag.Visit(getter.visit)",
          "38:  return getter",
          "39: }",
          "43: func (dag *DAG) GetService(meta types.NamespacedName, port int32) *Service {",
          "44:  return dag.GetServices()[RouteServiceName{",
          "45:   Name:      meta.Name,",
          "46:   Namespace: meta.Namespace,",
          "47:   Port:      port,",
          "48:  }]",
          "49: }",
          "55: func (dag *DAG) EnsureService(meta types.NamespacedName, port intstr.IntOrString, cache *KubernetesCache) (*Service, error) {",
          "56:  svc, svcPort, err := cache.LookupService(meta, port)",
          "57:  if err != nil {",
          "58:   return nil, err",
          "59:  }",
          "61:  if dagSvc := dag.GetService(k8s.NamespacedNameOf(svc), svcPort.Port); dagSvc != nil {",
          "62:   return dagSvc, nil",
          "63:  }",
          "65:  dagSvc := &Service{",
          "66:   Weighted: WeightedService{",
          "67:    ServiceName:      svc.Name,",
          "68:    ServiceNamespace: svc.Namespace,",
          "69:    ServicePort:      svcPort,",
          "70:    Weight:           1,",
          "71:   },",
          "72:   Protocol:           upstreamProtocol(svc, svcPort),",
          "73:   MaxConnections:     annotation.MaxConnections(svc),",
          "74:   MaxPendingRequests: annotation.MaxPendingRequests(svc),",
          "75:   MaxRequests:        annotation.MaxRequests(svc),",
          "76:   MaxRetries:         annotation.MaxRetries(svc),",
          "77:   ExternalName:       externalName(svc),",
          "78:  }",
          "79:  dag.AddRoot(dagSvc)",
          "80:  return dagSvc, nil",
          "81: }",
          "83: func upstreamProtocol(svc *v1.Service, port v1.ServicePort) string {",
          "84:  up := annotation.ParseUpstreamProtocols(svc.Annotations)",
          "85:  protocol := up[port.Name]",
          "86:  if protocol == \"\" {",
          "87:   protocol = up[strconv.Itoa(int(port.Port))]",
          "88:  }",
          "89:  return protocol",
          "90: }",
          "92: func externalName(svc *v1.Service) string {",
          "93:  if svc.Spec.Type != v1.ServiceTypeExternalName {",
          "94:   return \"\"",
          "95:  }",
          "96:  return svc.Spec.ExternalName",
          "97: }",
          "101: type serviceGetter map[RouteServiceName]*Service",
          "103: func (s serviceGetter) visit(vertex Vertex) {",
          "104:  switch obj := vertex.(type) {",
          "105:  case *Service:",
          "106:   s[RouteServiceName{",
          "107:    Name:      obj.Weighted.ServiceName,",
          "108:    Namespace: obj.Weighted.ServiceNamespace,",
          "109:    Port:      obj.Weighted.ServicePort.Port,",
          "110:   }] = obj",
          "111:  default:",
          "112:   vertex.Visit(s.visit)",
          "113:  }",
          "114: }",
          "117: func (dag *DAG) GetSecureVirtualHosts() map[string]*SecureVirtualHost {",
          "118:  getter := svhostGetter(map[string]*SecureVirtualHost{})",
          "119:  dag.Visit(getter.visit)",
          "120:  return getter",
          "121: }",
          "126: func (dag *DAG) GetSecureVirtualHost(name string) *SecureVirtualHost {",
          "127:  return dag.GetSecureVirtualHosts()[name]",
          "128: }",
          "132: func (dag *DAG) EnsureSecureVirtualHost(name string) *SecureVirtualHost {",
          "133:  if svh := dag.GetSecureVirtualHost(name); svh != nil {",
          "134:   return svh",
          "135:  }",
          "137:  svh := &SecureVirtualHost{",
          "138:   VirtualHost: VirtualHost{",
          "139:    Name: name,",
          "140:   },",
          "141:  }",
          "142:  dag.AddRoot(svh)",
          "143:  return svh",
          "144: }",
          "148: type svhostGetter map[string]*SecureVirtualHost",
          "150: func (s svhostGetter) visit(vertex Vertex) {",
          "151:  switch obj := vertex.(type) {",
          "152:  case *SecureVirtualHost:",
          "153:   s[obj.Name] = obj",
          "154:  default:",
          "155:   vertex.Visit(s.visit)",
          "156:  }",
          "157: }",
          "160: func (dag *DAG) GetVirtualHosts() map[string]*VirtualHost {",
          "161:  getter := vhostGetter(map[string]*VirtualHost{})",
          "162:  dag.Visit(getter.visit)",
          "163:  return getter",
          "164: }",
          "168: func (dag *DAG) GetVirtualHost(name string) *VirtualHost {",
          "169:  return dag.GetVirtualHosts()[name]",
          "170: }",
          "174: func (dag *DAG) EnsureVirtualHost(name string) *VirtualHost {",
          "175:  if vhost := dag.GetVirtualHost(name); vhost != nil {",
          "176:   return vhost",
          "177:  }",
          "179:  vhost := &VirtualHost{",
          "180:   Name: name,",
          "181:  }",
          "182:  dag.AddRoot(vhost)",
          "183:  return vhost",
          "184: }",
          "188: type vhostGetter map[string]*VirtualHost",
          "190: func (v vhostGetter) visit(vertex Vertex) {",
          "191:  switch obj := vertex.(type) {",
          "192:  case *VirtualHost:",
          "193:   v[obj.Name] = obj",
          "194:  default:",
          "195:   vertex.Visit(v.visit)",
          "196:  }",
          "197: }",
          "200: func (dag *DAG) GetExtensionClusters() map[string]*ExtensionCluster {",
          "201:  getter := extensionClusterGetter(map[string]*ExtensionCluster{})",
          "202:  dag.Visit(getter.visit)",
          "203:  return getter",
          "204: }",
          "209: func (dag *DAG) GetExtensionCluster(name string) *ExtensionCluster {",
          "210:  return dag.GetExtensionClusters()[name]",
          "211: }",
          "215: type extensionClusterGetter map[string]*ExtensionCluster",
          "217: func (v extensionClusterGetter) visit(vertex Vertex) {",
          "218:  switch obj := vertex.(type) {",
          "219:  case *ExtensionCluster:",
          "220:   v[obj.Name] = obj",
          "221:  default:",
          "222:   vertex.Visit(v.visit)",
          "223:  }",
          "224: }",
          "227: func validSecret(s *v1.Secret) error {",
          "228:  if s.Type != v1.SecretTypeTLS {",
          "229:   return fmt.Errorf(\"Secret type is not %q\", v1.SecretTypeTLS)",
          "230:  }",
          "232:  if len(s.Data[v1.TLSCertKey]) == 0 {",
          "233:   return fmt.Errorf(\"empty %q key\", v1.TLSCertKey)",
          "234:  }",
          "236:  if len(s.Data[v1.TLSPrivateKeyKey]) == 0 {",
          "237:   return fmt.Errorf(\"empty %q key\", v1.TLSPrivateKeyKey)",
          "238:  }",
          "240:  return nil",
          "241: }",
          "",
          "---------------"
        ],
        "internal/dag/accessors_test.go||internal/dag/accessors_test.go": [
          "File: internal/dag/accessors_test.go -> internal/dag/accessors_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: package dag",
          "16: import (",
          "17:  \"errors\"",
          "18:  \"testing\"",
          "20:  \"github.com/projectcontour/contour/internal/fixture\"",
          "21:  \"github.com/stretchr/testify/assert\"",
          "22:  v1 \"k8s.io/api/core/v1\"",
          "23:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "24:  \"k8s.io/apimachinery/pkg/types\"",
          "25:  \"k8s.io/apimachinery/pkg/util/intstr\"",
          "26: )",
          "28: func TestBuilderLookupService(t *testing.T) {",
          "29:  s1 := &v1.Service{",
          "30:   ObjectMeta: metav1.ObjectMeta{",
          "31:    Name:      \"kuard\",",
          "32:    Namespace: \"default\",",
          "33:   },",
          "34:   Spec: v1.ServiceSpec{",
          "35:    Ports: []v1.ServicePort{{",
          "36:     Name:       \"http\",",
          "37:     Protocol:   \"TCP\",",
          "38:     Port:       8080,",
          "39:     TargetPort: intstr.FromInt(8080),",
          "40:    }},",
          "41:   },",
          "42:  }",
          "43:  services := map[types.NamespacedName]*v1.Service{",
          "44:   {Name: \"service1\", Namespace: \"default\"}: s1,",
          "45:  }",
          "47:  tests := map[string]struct {",
          "48:   types.NamespacedName",
          "49:   port    intstr.IntOrString",
          "50:   want    *Service",
          "51:   wantErr error",
          "52:  }{",
          "53:   \"lookup service by port number\": {",
          "54:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
          "55:    port:           intstr.FromInt(8080),",
          "56:    want:           service(s1),",
          "57:   },",
          "58:   \"lookup service by port name\": {",
          "59:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
          "60:    port:           intstr.FromString(\"http\"),",
          "61:    want:           service(s1),",
          "62:   },",
          "63:   \"lookup service by port number (as string)\": {",
          "64:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
          "65:    port:           intstr.Parse(\"8080\"),",
          "66:    want:           service(s1),",
          "67:   },",
          "68:   \"lookup service by port number (from string)\": {",
          "69:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
          "70:    port:           intstr.FromString(\"8080\"),",
          "71:    want:           service(s1),",
          "72:   },",
          "73:   \"when service does not exist an error is returned\": {",
          "74:    NamespacedName: types.NamespacedName{Name: \"nonexistent-service\", Namespace: \"default\"},",
          "75:    port:           intstr.FromString(\"8080\"),",
          "76:    wantErr:        errors.New(`service \"default/nonexistent-service\" not found`),",
          "77:   },",
          "78:   \"when port does not exist an error is returned\": {",
          "79:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
          "80:    port:           intstr.FromString(\"9999\"),",
          "81:    wantErr:        errors.New(`port \"9999\" on service \"default/service1\" not matched`),",
          "82:   },",
          "83:  }",
          "85:  for name, tc := range tests {",
          "86:   t.Run(name, func(t *testing.T) {",
          "87:    b := Builder{",
          "88:     Source: KubernetesCache{",
          "89:      services:    services,",
          "90:      FieldLogger: fixture.NewTestLogger(t),",
          "91:     },",
          "92:    }",
          "94:    var dag DAG",
          "96:    got, gotErr := dag.EnsureService(tc.NamespacedName, tc.port, &b.Source)",
          "97:    assert.Equal(t, tc.want, got)",
          "98:    assert.Equal(t, tc.wantErr, gotErr)",
          "99:   })",
          "100:  }",
          "101: }",
          "",
          "---------------"
        ],
        "internal/dag/builder.go||internal/dag/builder.go": [
          "File: internal/dag/builder.go -> internal/dag/builder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: package dag",
          "16: import (",
          "23:  \"k8s.io/apimachinery/pkg/types\"",
          "25: )",
          "31: }",
          "38: }",
          "",
          "[Removed Lines]",
          "17:  \"fmt\"",
          "18:  \"strconv\"",
          "20:  \"github.com/projectcontour/contour/internal/annotation\"",
          "21:  \"github.com/projectcontour/contour/internal/k8s\"",
          "22:  v1 \"k8s.io/api/core/v1\"",
          "24:  \"k8s.io/apimachinery/pkg/util/intstr\"",
          "27: type RouteServiceName struct {",
          "28:  Name      string",
          "29:  Namespace string",
          "30:  Port      int32",
          "35: type Processor interface {",
          "37:  Run(builder *Builder)",
          "",
          "[Added Lines]",
          "21: type Processor interface {",
          "23:  Run(dag *DAG, source *KubernetesCache)",
          "27: type ProcessorFunc func(*DAG, *KubernetesCache)",
          "29: func (pf ProcessorFunc) Run(dag *DAG, source *KubernetesCache) {",
          "30:  if pf != nil {",
          "31:   pf(dag, source)",
          "32:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  Processors []Processor",
          "57: }",
          "61: func (b *Builder) Build() *DAG {",
          "141:   },",
          "164:  }",
          "213:  }",
          "216: }",
          "",
          "[Removed Lines]",
          "50:  services           map[RouteServiceName]*Service",
          "51:  virtualhosts       map[string]*VirtualHost",
          "52:  securevirtualhosts map[string]*SecureVirtualHost",
          "53:  listeners          []*Listener",
          "54:  extensions         map[types.NamespacedName]*ExtensionCluster",
          "56:  StatusWriter",
          "62:  b.reset()",
          "64:  for _, p := range b.Processors {",
          "65:   p.Run(b)",
          "66:  }",
          "68:  var dag DAG",
          "70:  for i := range b.listeners {",
          "71:   dag.roots = append(dag.roots, b.listeners[i])",
          "72:  }",
          "74:  for i := range b.extensions {",
          "75:   dag.roots = append(dag.roots, b.extensions[i])",
          "76:  }",
          "78:  dag.statuses = b.statuses",
          "79:  return &dag",
          "80: }",
          "83: func (b *Builder) reset() {",
          "84:  b.services = make(map[RouteServiceName]*Service, len(b.services))",
          "85:  b.virtualhosts = make(map[string]*VirtualHost)",
          "86:  b.securevirtualhosts = make(map[string]*SecureVirtualHost)",
          "87:  b.listeners = []*Listener{}",
          "88:  b.extensions = map[types.NamespacedName]*ExtensionCluster{}",
          "90:  b.statuses = make(map[types.NamespacedName]Status, len(b.statuses))",
          "91: }",
          "95: func (b *Builder) lookupService(m types.NamespacedName, port intstr.IntOrString) (*Service, error) {",
          "96:  lookup := func() *Service {",
          "97:   if port.Type != intstr.Int {",
          "99:    return nil",
          "100:   }",
          "101:   return b.services[RouteServiceName{",
          "102:    Name:      m.Name,",
          "103:    Namespace: m.Namespace,",
          "104:    Port:      int32(port.IntValue()),",
          "105:   }]",
          "106:  }",
          "108:  s := lookup()",
          "109:  if s != nil {",
          "110:   return s, nil",
          "111:  }",
          "112:  svc, ok := b.Source.services[m]",
          "113:  if !ok {",
          "114:   return nil, fmt.Errorf(\"service %q not found\", m)",
          "115:  }",
          "117:  for i := range svc.Spec.Ports {",
          "118:   p := svc.Spec.Ports[i]",
          "119:   if int(p.Port) == port.IntValue() || port.String() == p.Name {",
          "120:    switch p.Protocol {",
          "121:    case \"\", v1.ProtocolTCP:",
          "122:    default:",
          "123:     return nil, fmt.Errorf(\"unsupported service protocol %q\", p.Protocol)",
          "124:    }",
          "126:    return b.addService(svc, p), nil",
          "127:   }",
          "128:  }",
          "130:  return nil, fmt.Errorf(\"port %q on service %q not matched\", port.String(), m)",
          "131: }",
          "133: func (b *Builder) addService(svc *v1.Service, port v1.ServicePort) *Service {",
          "134:  name := k8s.NamespacedNameOf(svc)",
          "135:  s := &Service{",
          "136:   Weighted: WeightedService{",
          "137:    ServiceName:      name.Name,",
          "138:    ServiceNamespace: name.Namespace,",
          "139:    ServicePort:      port,",
          "140:    Weight:           1,",
          "142:   Protocol:           upstreamProtocol(svc, port),",
          "143:   MaxConnections:     annotation.MaxConnections(svc),",
          "144:   MaxPendingRequests: annotation.MaxPendingRequests(svc),",
          "145:   MaxRequests:        annotation.MaxRequests(svc),",
          "146:   MaxRetries:         annotation.MaxRetries(svc),",
          "147:   ExternalName:       externalName(svc),",
          "148:  }",
          "150:  b.services[RouteServiceName{",
          "151:   Name:      name.Name,",
          "152:   Namespace: name.Namespace,",
          "153:   Port:      port.Port,",
          "154:  }] = s",
          "156:  return s",
          "157: }",
          "159: func upstreamProtocol(svc *v1.Service, port v1.ServicePort) string {",
          "160:  up := annotation.ParseUpstreamProtocols(svc.Annotations)",
          "161:  protocol := up[port.Name]",
          "162:  if protocol == \"\" {",
          "163:   protocol = up[strconv.Itoa(int(port.Port))]",
          "165:  return protocol",
          "166: }",
          "168: func (b *Builder) lookupVirtualHost(name string) *VirtualHost {",
          "169:  vh, ok := b.virtualhosts[name]",
          "170:  if !ok {",
          "171:   vh := &VirtualHost{",
          "172:    Name: name,",
          "173:   }",
          "174:   b.virtualhosts[vh.Name] = vh",
          "175:   return vh",
          "176:  }",
          "177:  return vh",
          "178: }",
          "180: func (b *Builder) lookupSecureVirtualHost(name string) *SecureVirtualHost {",
          "181:  svh, ok := b.securevirtualhosts[name]",
          "182:  if !ok {",
          "183:   svh := &SecureVirtualHost{",
          "184:    VirtualHost: VirtualHost{",
          "185:     Name: name,",
          "186:    },",
          "187:   }",
          "188:   b.securevirtualhosts[svh.VirtualHost.Name] = svh",
          "189:   return svh",
          "190:  }",
          "191:  return svh",
          "192: }",
          "194: func externalName(svc *v1.Service) string {",
          "195:  if svc.Spec.Type != v1.ServiceTypeExternalName {",
          "196:   return \"\"",
          "197:  }",
          "198:  return svc.Spec.ExternalName",
          "199: }",
          "202: func validSecret(s *v1.Secret) error {",
          "203:  if s.Type != v1.SecretTypeTLS {",
          "204:   return fmt.Errorf(\"Secret type is not %q\", v1.SecretTypeTLS)",
          "205:  }",
          "207:  if len(s.Data[v1.TLSCertKey]) == 0 {",
          "208:   return fmt.Errorf(\"empty %q key\", v1.TLSCertKey)",
          "209:  }",
          "211:  if len(s.Data[v1.TLSPrivateKeyKey]) == 0 {",
          "212:   return fmt.Errorf(\"empty %q key\", v1.TLSPrivateKeyKey)",
          "215:  return nil",
          "",
          "[Added Lines]",
          "49:  dag := DAG{",
          "50:   StatusWriter: StatusWriter{",
          "51:    statuses: map[types.NamespacedName]Status{},",
          "55:  for _, p := range b.Processors {",
          "56:   p.Run(&dag, &b.Source)",
          "58:  return &dag",
          "",
          "---------------"
        ],
        "internal/dag/builder_test.go||internal/dag/builder_test.go": [
          "File: internal/dag/builder_test.go -> internal/dag/builder_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6184:  }",
          "6185: }",
          "6261: func TestDAGRootNamespaces(t *testing.T) {",
          "6262:  proxy1 := &projcontour.HTTPProxy{",
          "6263:   ObjectMeta: metav1.ObjectMeta{",
          "",
          "[Removed Lines]",
          "6187: func TestBuilderLookupService(t *testing.T) {",
          "6188:  s1 := &v1.Service{",
          "6189:   ObjectMeta: metav1.ObjectMeta{",
          "6190:    Name:      \"kuard\",",
          "6191:    Namespace: \"default\",",
          "6192:   },",
          "6193:   Spec: v1.ServiceSpec{",
          "6194:    Ports: []v1.ServicePort{{",
          "6195:     Name:       \"http\",",
          "6196:     Protocol:   \"TCP\",",
          "6197:     Port:       8080,",
          "6198:     TargetPort: intstr.FromInt(8080),",
          "6199:    }},",
          "6200:   },",
          "6201:  }",
          "6202:  services := map[types.NamespacedName]*v1.Service{",
          "6203:   {Name: \"service1\", Namespace: \"default\"}: s1,",
          "6204:  }",
          "6206:  tests := map[string]struct {",
          "6207:   types.NamespacedName",
          "6208:   port    intstr.IntOrString",
          "6209:   want    *Service",
          "6210:   wantErr error",
          "6211:  }{",
          "6212:   \"lookup service by port number\": {",
          "6213:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
          "6214:    port:           intstr.FromInt(8080),",
          "6215:    want:           service(s1),",
          "6216:   },",
          "6217:   \"lookup service by port name\": {",
          "6218:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
          "6219:    port:           intstr.FromString(\"http\"),",
          "6220:    want:           service(s1),",
          "6221:   },",
          "6222:   \"lookup service by port number (as string)\": {",
          "6223:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
          "6224:    port:           intstr.Parse(\"8080\"),",
          "6225:    want:           service(s1),",
          "6226:   },",
          "6227:   \"lookup service by port number (from string)\": {",
          "6228:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
          "6229:    port:           intstr.FromString(\"8080\"),",
          "6230:    want:           service(s1),",
          "6231:   },",
          "6232:   \"when service does not exist an error is returned\": {",
          "6233:    NamespacedName: types.NamespacedName{Name: \"nonexistent-service\", Namespace: \"default\"},",
          "6234:    port:           intstr.FromString(\"8080\"),",
          "6235:    wantErr:        errors.New(`service \"default/nonexistent-service\" not found`),",
          "6236:   },",
          "6237:   \"when port does not exist an error is returned\": {",
          "6238:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
          "6239:    port:           intstr.FromString(\"9999\"),",
          "6240:    wantErr:        errors.New(`port \"9999\" on service \"default/service1\" not matched`),",
          "6241:   },",
          "6242:  }",
          "6244:  for name, tc := range tests {",
          "6245:   t.Run(name, func(t *testing.T) {",
          "6246:    b := Builder{",
          "6247:     Source: KubernetesCache{",
          "6248:      services:    services,",
          "6249:      FieldLogger: fixture.NewTestLogger(t),",
          "6250:     },",
          "6251:    }",
          "6252:    b.reset()",
          "6254:    got, gotErr := b.lookupService(tc.NamespacedName, tc.port)",
          "6255:    assert.Equal(t, tc.want, got)",
          "6256:    assert.Equal(t, tc.wantErr, gotErr)",
          "6257:   })",
          "6258:  }",
          "6259: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6684:  b := Builder{",
          "6685:   Processors: []Processor{",
          "6691:   },",
          "6692:  }",
          "",
          "[Removed Lines]",
          "6686:    &pluggableProcessor{runFunc: func(_ *Builder) { got = append(got, \"foo\") }},",
          "6687:    &pluggableProcessor{runFunc: func(_ *Builder) { got = append(got, \"bar\") }},",
          "6688:    &pluggableProcessor{runFunc: func(_ *Builder) { got = append(got, \"baz\") }},",
          "6689:    &pluggableProcessor{runFunc: func(_ *Builder) { got = append(got, \"abc\") }},",
          "6690:    &pluggableProcessor{runFunc: func(_ *Builder) { got = append(got, \"def\") }},",
          "",
          "[Added Lines]",
          "6612:    ProcessorFunc(func(*DAG, *KubernetesCache) { got = append(got, \"foo\") }),",
          "6613:    ProcessorFunc(func(*DAG, *KubernetesCache) { got = append(got, \"bar\") }),",
          "6614:    ProcessorFunc(func(*DAG, *KubernetesCache) { got = append(got, \"baz\") }),",
          "6615:    ProcessorFunc(func(*DAG, *KubernetesCache) { got = append(got, \"abc\") }),",
          "6616:    ProcessorFunc(func(*DAG, *KubernetesCache) { got = append(got, \"def\") }),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6696:  assert.Equal(t, []string{\"foo\", \"bar\", \"baz\", \"abc\", \"def\"}, got)",
          "6697: }",
          "6707: func routes(routes ...*Route) map[string]*Route {",
          "6708:  if len(routes) == 0 {",
          "6709:   return nil",
          "",
          "[Removed Lines]",
          "6699: type pluggableProcessor struct {",
          "6700:  runFunc func(builder *Builder)",
          "6701: }",
          "6703: func (p *pluggableProcessor) Run(builder *Builder) {",
          "6704:  p.runFunc(builder)",
          "6705: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "internal/dag/cache.go||internal/dag/cache.go": [
          "File: internal/dag/cache.go -> internal/dag/cache.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  v1 \"k8s.io/api/core/v1\"",
          "28:  \"k8s.io/api/networking/v1beta1\"",
          "29:  \"k8s.io/apimachinery/pkg/types\"",
          "30:  \"k8s.io/client-go/tools/cache\"",
          "31:  serviceapis \"sigs.k8s.io/service-apis/api/v1alpha1\"",
          "32: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:  \"k8s.io/apimachinery/pkg/util/intstr\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "519:  return nil",
          "520: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525: func (kc *KubernetesCache) LookupService(meta types.NamespacedName, port intstr.IntOrString) (*v1.Service, v1.ServicePort, error) {",
          "526:  svc, ok := kc.services[meta]",
          "527:  if !ok {",
          "528:   return nil, v1.ServicePort{}, fmt.Errorf(\"service %q not found\", meta)",
          "529:  }",
          "531:  for i := range svc.Spec.Ports {",
          "532:   p := svc.Spec.Ports[i]",
          "533:   if int(p.Port) == port.IntValue() || port.String() == p.Name {",
          "534:    switch p.Protocol {",
          "535:    case \"\", v1.ProtocolTCP:",
          "536:     return svc, p, nil",
          "537:    default:",
          "538:     return nil, v1.ServicePort{}, fmt.Errorf(\"unsupported service protocol %q\", p.Protocol)",
          "539:    }",
          "540:   }",
          "541:  }",
          "543:  return nil, v1.ServicePort{}, fmt.Errorf(\"port %q on service %q not matched\", port.String(), meta)",
          "544: }",
          "",
          "---------------"
        ],
        "internal/dag/cache_test.go||internal/dag/cache_test.go": [
          "File: internal/dag/cache_test.go -> internal/dag/cache_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: package dag",
          "16: import (",
          "17:  \"testing\"",
          "19:  projcontour \"github.com/projectcontour/contour/apis/projectcontour/v1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:  \"github.com/projectcontour/contour/internal/annotation\"",
          "22:  \"github.com/projectcontour/contour/internal/fixture\"",
          "23:  \"github.com/stretchr/testify/assert\"",
          "24:  v1 \"k8s.io/api/core/v1\"",
          "25:  \"k8s.io/api/networking/v1beta1\"",
          "26:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "27:  serviceapis \"sigs.k8s.io/service-apis/api/v1alpha1\"",
          "28: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:  \"github.com/stretchr/testify/require\"",
          "29:  \"k8s.io/apimachinery/pkg/types\"",
          "30:  \"k8s.io/apimachinery/pkg/util/intstr\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "955:   })",
          "956:  }",
          "957: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "963: func TestLookupService(t *testing.T) {",
          "964:  cache := func(objs ...interface{}) *KubernetesCache {",
          "965:   cache := KubernetesCache{",
          "966:    FieldLogger: fixture.NewTestLogger(t),",
          "967:   }",
          "968:   for _, o := range objs {",
          "969:    cache.Insert(o)",
          "970:   }",
          "971:   return &cache",
          "972:  }",
          "974:  service := func(ns, name string, ports ...v1.ServicePort) *v1.Service {",
          "975:   return &v1.Service{",
          "976:    ObjectMeta: metav1.ObjectMeta{",
          "977:     Name:      name,",
          "978:     Namespace: ns,",
          "979:    },",
          "980:    Spec: v1.ServiceSpec{",
          "981:     Ports: ports,",
          "982:    },",
          "983:   }",
          "984:  }",
          "986:  port := func(name string, port int32, protocol v1.Protocol) v1.ServicePort {",
          "987:   return v1.ServicePort{",
          "988:    Name:     name,",
          "989:    Port:     port,",
          "990:    Protocol: protocol,",
          "991:   }",
          "992:  }",
          "994:  tests := map[string]struct {",
          "995:   cache    *KubernetesCache",
          "996:   meta     types.NamespacedName",
          "997:   port     intstr.IntOrString",
          "998:   wantSvc  *v1.Service",
          "999:   wantPort v1.ServicePort",
          "1000:   wantErr  error",
          "1001:  }{",
          "1002:   \"service and port exist with valid service protocol, lookup by port num\": {",
          "1003:    cache:    cache(service(\"default\", \"service-1\", port(\"http\", 80, v1.ProtocolTCP))),",
          "1004:    meta:     types.NamespacedName{Namespace: \"default\", Name: \"service-1\"},",
          "1005:    port:     intstr.FromInt(80),",
          "1006:    wantSvc:  service(\"default\", \"service-1\", port(\"http\", 80, v1.ProtocolTCP)),",
          "1007:    wantPort: port(\"http\", 80, v1.ProtocolTCP),",
          "1008:   },",
          "1009:   \"service and port exist with valid service protocol, lookup by port name\": {",
          "1010:    cache:    cache(service(\"default\", \"service-1\", port(\"http\", 80, v1.ProtocolTCP))),",
          "1011:    meta:     types.NamespacedName{Namespace: \"default\", Name: \"service-1\"},",
          "1012:    port:     intstr.FromString(\"http\"),",
          "1013:    wantSvc:  service(\"default\", \"service-1\", port(\"http\", 80, v1.ProtocolTCP)),",
          "1014:    wantPort: port(\"http\", 80, v1.ProtocolTCP),",
          "1015:   },",
          "1016:   \"service and port exist with valid service protocol, lookup by wrong port num\": {",
          "1017:    cache:   cache(service(\"default\", \"service-1\", port(\"http\", 80, v1.ProtocolTCP))),",
          "1018:    meta:    types.NamespacedName{Namespace: \"default\", Name: \"service-1\"},",
          "1019:    port:    intstr.FromInt(9999),",
          "1020:    wantErr: errors.New(`port \"9999\" on service \"default/service-1\" not matched`),",
          "1021:   },",
          "1022:   \"service and port exist with valid service protocol, lookup by wrong port name\": {",
          "1023:    cache:   cache(service(\"default\", \"service-1\", port(\"http\", 80, v1.ProtocolTCP))),",
          "1024:    meta:    types.NamespacedName{Namespace: \"default\", Name: \"service-1\"},",
          "1025:    port:    intstr.FromString(\"wrong-port-name\"),",
          "1026:    wantErr: errors.New(`port \"wrong-port-name\" on service \"default/service-1\" not matched`),",
          "1027:   },",
          "1028:   \"service and port exist, invalid service protocol\": {",
          "1029:    cache:   cache(service(\"default\", \"service-1\", port(\"http\", 80, v1.ProtocolUDP))),",
          "1030:    meta:    types.NamespacedName{Namespace: \"default\", Name: \"service-1\"},",
          "1031:    port:    intstr.FromString(\"http\"),",
          "1032:    wantSvc: service(\"default\", \"service-1\", port(\"http\", 80, v1.ProtocolTCP)),",
          "1033:    wantErr: errors.New(`unsupported service protocol \"UDP\"`),",
          "1034:   },",
          "1035:   \"service does not exist\": {",
          "1036:    cache:   cache(service(\"default\", \"service-1\", port(\"http\", 80, v1.ProtocolTCP))),",
          "1037:    meta:    types.NamespacedName{Namespace: \"default\", Name: \"nonexistent-service\"},",
          "1038:    port:    intstr.FromInt(80),",
          "1039:    wantErr: errors.New(`service \"default/nonexistent-service\" not found`),",
          "1040:   },",
          "1041:  }",
          "1043:  for name, tc := range tests {",
          "1044:   t.Run(name, func(t *testing.T) {",
          "1045:    gotSvc, gotPort, gotErr := tc.cache.LookupService(tc.meta, tc.port)",
          "1047:    switch {",
          "1048:    case tc.wantErr != nil:",
          "1049:     require.Error(t, gotErr)",
          "1050:     assert.EqualError(t, tc.wantErr, gotErr.Error())",
          "1051:    default:",
          "1052:     assert.Nil(t, gotErr)",
          "1053:     assert.Equal(t, tc.wantSvc, gotSvc)",
          "1054:     assert.Equal(t, tc.wantPort, gotPort)",
          "1055:    }",
          "1056:   })",
          "1057:  }",
          "1058: }",
          "",
          "---------------"
        ],
        "internal/dag/dag.go||internal/dag/dag.go": [
          "File: internal/dag/dag.go -> internal/dag/dag.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: type DAG struct {",
          "72: }",
          "",
          "[Removed Lines]",
          "68:  roots []Vertex",
          "71:  statuses map[types.NamespacedName]Status",
          "",
          "[Added Lines]",
          "69:  StatusWriter",
          "72:  roots []Vertex",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:  return d.statuses",
          "85: }",
          "87: type MatchCondition interface {",
          "88:  fmt.Stringer",
          "89: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: func (d *DAG) AddRoot(root Vertex) {",
          "90:  d.roots = append(d.roots, root)",
          "91: }",
          "94: func (d *DAG) RemoveRoot(root Vertex) {",
          "95:  idx := -1",
          "96:  for i := range d.roots {",
          "97:   if d.roots[i] == root {",
          "98:    idx = i",
          "99:    break",
          "100:   }",
          "101:  }",
          "103:  if idx >= 0 {",
          "104:   d.roots = append(d.roots[:idx], d.roots[idx+1:]...)",
          "105:  }",
          "106: }",
          "",
          "---------------"
        ],
        "internal/dag/extension_processor.go||internal/dag/extension_processor.go": [
          "File: internal/dag/extension_processor.go -> internal/dag/extension_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: var _ Processor = &ExtensionServiceProcessor{}",
          "38:   }",
          "39:  }",
          "40: }",
          "46: func (p *ExtensionServiceProcessor) buildExtensionService(",
          "48:  ext *v1alpha1.ExtensionService,",
          "49: ) *ExtensionCluster {",
          "63:  extension := ExtensionCluster{",
          "65:   Upstream: ServiceCluster{",
          "66:    ClusterName: path.Join(",
          "67:     \"extension\",",
          "",
          "[Removed Lines]",
          "34: func (p *ExtensionServiceProcessor) Run(builder *Builder) {",
          "35:  for n, e := range builder.Source.extensions {",
          "36:   if ext := p.buildExtensionService(builder, e); ext != nil {",
          "37:    builder.extensions[n] = ext",
          "47:  builder *Builder,",
          "58:  nameOf := func(ext *v1alpha1.ExtensionService) string {",
          "59:   n := k8s.NamespacedNameOf(ext)",
          "60:   return strings.Join([]string{\"extension\", n.Namespace, n.Name}, \"/\")",
          "61:  }",
          "64:   Name: nameOf(ext),",
          "",
          "[Added Lines]",
          "34: func (p *ExtensionServiceProcessor) Run(dag *DAG, cache *KubernetesCache) {",
          "35:  for _, e := range cache.extensions {",
          "36:   if ext := p.buildExtensionService(cache, e); ext != nil {",
          "37:    dag.AddRoot(ext)",
          "50: func extensionClusterName(meta types.NamespacedName) string {",
          "51:  return strings.Join([]string{\"extension\", meta.Namespace, meta.Name}, \"/\")",
          "52: }",
          "59:  cache *KubernetesCache,",
          "63:   Name: extensionClusterName(k8s.NamespacedNameOf(ext)),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:  }",
          "92:  if v := ext.Spec.UpstreamValidation; v != nil {",
          "94:   if err != nil {",
          "96:    p.WithError(err).Error(\"failed to resolve upstream validation\")",
          "",
          "[Removed Lines]",
          "93:   uv, err := builder.Source.LookupUpstreamValidation(v, ext.GetNamespace())",
          "",
          "[Added Lines]",
          "92:   uv, err := cache.LookupUpstreamValidation(v, ext.GetNamespace())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:    Name:      target.Name,",
          "127:   }",
          "130:   if err != nil {",
          "132:    p.WithError(err).",
          "",
          "[Removed Lines]",
          "129:   svc, err := builder.lookupService(svcName, intstr.FromInt(target.Port))",
          "",
          "[Added Lines]",
          "128:   svc, port, err := cache.LookupService(svcName, intstr.FromInt(target.Port))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137:   }",
          "141:    p.WithError(err).",
          "142:     WithField(\"name\", svcName).",
          "143:     WithField(\"port\", target.Port).",
          "",
          "[Removed Lines]",
          "140:   if svc.ExternalName != \"\" {",
          "",
          "[Added Lines]",
          "139:   if svc.Spec.ExternalName != \"\" {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "145:    return nil",
          "146:   }",
          "149:  }",
          "151:  return &extension",
          "",
          "[Removed Lines]",
          "148:   extension.Upstream.AddWeightedService(target.Weight, svcName, svc.Weighted.ServicePort)",
          "",
          "[Added Lines]",
          "147:   extension.Upstream.AddWeightedService(target.Weight, svcName, port)",
          "",
          "---------------"
        ],
        "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go": [
          "File: internal/dag/httpproxy_processor.go -> internal/dag/httpproxy_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: }",
          "43: type HTTPProxyProcessor struct {",
          "45:  orphaned map[types.NamespacedName]bool",
          "",
          "[Removed Lines]",
          "44:  builder  *Builder",
          "",
          "[Added Lines]",
          "44:  dag      *DAG",
          "45:  source   *KubernetesCache",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: }",
          "61:  p.orphaned = make(map[types.NamespacedName]bool, len(p.orphaned))",
          "64:  defer func() {",
          "66:   p.orphaned = nil",
          "67:  }()",
          "71:  for meta := range p.orphaned {",
          "73:   if ok {",
          "75:    sw.WithValue(\"status\", k8s.StatusOrphaned).",
          "76:     WithValue(\"description\", \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\")",
          "77:    commit()",
          "",
          "[Removed Lines]",
          "59: func (p *HTTPProxyProcessor) Run(builder *Builder) {",
          "60:  p.builder = builder",
          "65:   p.builder = nil",
          "69:  p.computeHTTPProxies()",
          "72:   proxy, ok := p.builder.Source.httpproxies[meta]",
          "74:    sw, commit := p.builder.WithObject(proxy)",
          "",
          "[Added Lines]",
          "60: func (p *HTTPProxyProcessor) Run(dag *DAG, source *KubernetesCache) {",
          "61:  p.dag = dag",
          "62:  p.source = source",
          "67:   p.dag = nil",
          "68:   p.source = nil",
          "72:  for _, proxy := range p.validHTTPProxies() {",
          "73:   p.computeHTTPProxy(proxy)",
          "74:  }",
          "77:   proxy, ok := p.source.httpproxies[meta]",
          "79:    sw, commit := p.dag.WithObject(proxy)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:  }",
          "80: }",
          "88: func (p *HTTPProxyProcessor) computeHTTPProxy(proxy *projcontour.HTTPProxy) {",
          "90:  defer commit()",
          "92:  if proxy.Spec.VirtualHost == nil {",
          "",
          "[Removed Lines]",
          "82: func (p *HTTPProxyProcessor) computeHTTPProxies() {",
          "83:  for _, proxy := range p.validHTTPProxies() {",
          "84:   p.computeHTTPProxy(proxy)",
          "85:  }",
          "86: }",
          "89:  sw, commit := p.builder.WithObject(proxy)",
          "",
          "[Added Lines]",
          "88:  sw, commit := p.dag.WithObject(proxy)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:   if !tls.Passthrough {",
          "141:    secretName := k8s.NamespacedNameFrom(tls.SecretName, k8s.DefaultNamespace(proxy.Namespace))",
          "143:    if err != nil {",
          "144:     sw.SetInvalid(\"Spec.VirtualHost.TLS Secret %q is invalid: %s\", tls.SecretName, err)",
          "145:     return",
          "146:    }",
          "149:     sw.SetInvalid(\"Spec.VirtualHost.TLS Secret %q certificate delegation not permitted\", tls.SecretName)",
          "150:     return",
          "151:    }",
          "154:    svhost.Secret = sec",
          "155:    svhost.MinTLSVersion = annotation.MinTLSVersion(tls.MinimumProtocolVersion)",
          "",
          "[Removed Lines]",
          "142:    sec, err := p.builder.Source.LookupSecret(secretName, validSecret)",
          "148:    if !p.builder.Source.DelegationPermitted(secretName, proxy.Namespace) {",
          "153:    svhost := p.builder.lookupSecureVirtualHost(host)",
          "",
          "[Added Lines]",
          "141:    sec, err := p.source.LookupSecret(secretName, validSecret)",
          "147:    if !p.source.DelegationPermitted(secretName, proxy.Namespace) {",
          "152:    svhost := p.dag.EnsureSecureVirtualHost(host)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:      return",
          "178:     }",
          "181:     if err != nil {",
          "182:      sw.SetInvalid(\"Spec.Virtualhost.TLS Secret %q fallback certificate is invalid: %s\", p.FallbackCertificate, err)",
          "183:      return",
          "184:     }",
          "187:      sw.SetInvalid(\"Spec.VirtualHost.TLS fallback Secret %q is not configured for certificate delegation\", p.FallbackCertificate)",
          "188:      return",
          "189:     }",
          "",
          "[Removed Lines]",
          "180:     sec, err = p.builder.Source.LookupSecret(*p.FallbackCertificate, validSecret)",
          "186:     if !p.builder.Source.DelegationPermitted(*p.FallbackCertificate, proxy.Namespace) {",
          "",
          "[Added Lines]",
          "179:     sec, err = p.source.LookupSecret(*p.FallbackCertificate, validSecret)",
          "185:     if !p.source.DelegationPermitted(*p.FallbackCertificate, proxy.Namespace) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195:    if tls.ClientValidation != nil {",
          "197:     if err != nil {",
          "198:      sw.SetInvalid(\"Spec.VirtualHost.TLS client validation is invalid: %s\", err)",
          "199:      return",
          "",
          "[Removed Lines]",
          "196:     dv, err := p.builder.Source.LookupDownstreamValidation(tls.ClientValidation, proxy.Namespace)",
          "",
          "[Added Lines]",
          "195:     dv, err := p.source.LookupDownstreamValidation(tls.ClientValidation, proxy.Namespace)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "211:      return",
          "212:     }",
          "215:     extensionName := types.NamespacedName{",
          "216:      Name:      ref.Name,",
          "217:      Namespace: stringOrDefault(ref.Namespace, proxy.Namespace),",
          "218:     }",
          "223:       extensionName)",
          "224:      return",
          "225:     }",
          "",
          "[Removed Lines]",
          "220:     ext, ok := p.builder.extensions[extensionName]",
          "221:     if !ok {",
          "222:      sw.SetInvalid(\"Spec.Virtualhost.Authorization.ServiceRef support service %q not found\",",
          "",
          "[Added Lines]",
          "219:     ext := p.dag.GetExtensionCluster(extensionClusterName(extensionName))",
          "220:     if ext == nil {",
          "221:      sw.SetInvalid(\"Spec.Virtualhost.Authorization.ServiceRef extension service %q not found\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "242:  }",
          "244:  routes := p.computeRoutes(sw, proxy, proxy, nil, nil, tlsEnabled)",
          "246:  addRoutes(insecure, routes)",
          "250:  if tlsEnabled && proxy.Spec.TCPProxy == nil {",
          "252:   addRoutes(secure, routes)",
          "253:  }",
          "254: }",
          "",
          "[Removed Lines]",
          "245:  insecure := p.builder.lookupVirtualHost(host)",
          "251:   secure := p.builder.lookupSecureVirtualHost(host)",
          "",
          "[Added Lines]",
          "244:  insecure := p.dag.EnsureVirtualHost(host)",
          "250:   secure := p.dag.EnsureSecureVirtualHost(host)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "301:    namespace = proxy.Namespace",
          "302:   }",
          "305:   if !ok {",
          "306:    sw.SetInvalid(\"include %s/%s not found\", namespace, include.Name)",
          "307:    return nil",
          "",
          "[Removed Lines]",
          "304:   delegate, ok := p.builder.Source.httpproxies[types.NamespacedName{Name: include.Name, Namespace: namespace}]",
          "",
          "[Added Lines]",
          "303:   delegate, ok := p.source.httpproxies[types.NamespacedName{Name: include.Name, Namespace: namespace}]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "316:    return nil",
          "317:   }",
          "320:   routes = append(routes, p.computeRoutes(sw, rootProxy, delegate, append(conditions, include.Conditions...), visited, enforceTLS)...)",
          "321:   commit()",
          "",
          "[Removed Lines]",
          "319:   sw, commit := p.builder.WithObject(delegate)",
          "",
          "[Added Lines]",
          "318:   sw, commit := p.dag.WithObject(delegate)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "431:     return nil",
          "432:    }",
          "433:    m := types.NamespacedName{Name: service.Name, Namespace: proxy.Namespace}",
          "435:    if err != nil {",
          "436:     sw.SetInvalid(\"Spec.Routes unresolved service reference: %s\", err)",
          "437:     return nil",
          "",
          "[Removed Lines]",
          "434:    s, err := p.builder.lookupService(m, intstr.FromInt(service.Port))",
          "",
          "[Added Lines]",
          "433:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "447:    var uv *PeerValidationContext",
          "448:    if protocol == \"tls\" || protocol == \"h2\" {",
          "451:     if err != nil {",
          "452:      sw.SetInvalid(\"Service [%s:%d] TLS upstream validation policy error: %s\",",
          "453:       service.Name, service.Port, err)",
          "",
          "[Removed Lines]",
          "450:     uv, err = p.builder.Source.LookupUpstreamValidation(service.UpstreamValidation, proxy.Namespace)",
          "",
          "[Added Lines]",
          "449:     uv, err = p.source.LookupUpstreamValidation(service.UpstreamValidation, proxy.Namespace)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "528:   var proxy TCPProxy",
          "529:   for _, service := range httpproxy.Spec.TCPProxy.Services {",
          "530:    m := types.NamespacedName{Name: service.Name, Namespace: httpproxy.Namespace}",
          "532:    if err != nil {",
          "533:     sw.SetInvalid(\"Spec.TCPProxy unresolved service reference: %s\", err)",
          "534:     return false",
          "",
          "[Removed Lines]",
          "531:    s, err := p.builder.lookupService(m, intstr.FromInt(service.Port))",
          "",
          "[Added Lines]",
          "530:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "540:     TCPHealthCheckPolicy: tcpHealthCheckPolicy(tcpproxy.HealthCheckPolicy),",
          "541:    })",
          "542:   }",
          "544:   return true",
          "545:  }",
          "",
          "[Removed Lines]",
          "543:   p.builder.lookupSecureVirtualHost(host).TCPProxy = &proxy",
          "",
          "[Added Lines]",
          "542:   secure := p.dag.EnsureSecureVirtualHost(host)",
          "543:   secure.TCPProxy = &proxy",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "557:  }",
          "559:  m := types.NamespacedName{Name: tcpProxyInclude.Name, Namespace: namespace}",
          "561:  if !ok {",
          "562:   sw.SetInvalid(\"tcpproxy: include %s/%s not found\", m.Namespace, m.Name)",
          "563:   return false",
          "",
          "[Removed Lines]",
          "560:  dest, ok := p.builder.Source.httpproxies[m]",
          "",
          "[Added Lines]",
          "561:  dest, ok := p.source.httpproxies[m]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "602:  var valid []*projcontour.HTTPProxy",
          "603:  fqdnHTTPProxies := make(map[string][]*projcontour.HTTPProxy)",
          "605:   if proxy.Spec.VirtualHost == nil {",
          "606:    valid = append(valid, proxy)",
          "607:    continue",
          "",
          "[Removed Lines]",
          "604:  for _, proxy := range p.builder.Source.httpproxies {",
          "",
          "[Added Lines]",
          "605:  for _, proxy := range p.source.httpproxies {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "622:    sort.Strings(conflicting) // sort for test stability",
          "623:    msg := fmt.Sprintf(\"fqdn %q is used in multiple HTTPProxies: %s\", fqdn, strings.Join(conflicting, \", \"))",
          "624:    for _, proxy := range proxies {",
          "626:     sw.WithValue(\"vhost\", fqdn).SetInvalid(msg)",
          "627:     commit()",
          "628:    }",
          "",
          "[Removed Lines]",
          "625:     sw, commit := p.builder.WithObject(proxy)",
          "",
          "[Added Lines]",
          "626:     sw, commit := p.dag.WithObject(proxy)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "635: func (p *HTTPProxyProcessor) rootAllowed(namespace string) bool {",
          "637:   return true",
          "638:  }",
          "640:   if ns == namespace {",
          "641:    return true",
          "642:   }",
          "",
          "[Removed Lines]",
          "636:  if len(p.builder.Source.RootNamespaces) == 0 {",
          "639:  for _, ns := range p.builder.Source.RootNamespaces {",
          "",
          "[Added Lines]",
          "637:  if len(p.source.RootNamespaces) == 0 {",
          "640:  for _, ns := range p.source.RootNamespaces {",
          "",
          "---------------"
        ],
        "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go": [
          "File: internal/dag/ingress_processor.go -> internal/dag/ingress_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: )",
          "28: type IngressProcessor struct {",
          "29:  logrus.FieldLogger",
          "32: }",
          "40:  defer func() {",
          "42:  }()",
          "",
          "[Removed Lines]",
          "31:  builder *Builder",
          "36: func (p *IngressProcessor) Run(builder *Builder) {",
          "37:  p.builder = builder",
          "41:   p.builder = nil",
          "",
          "[Added Lines]",
          "31:  dag    *DAG",
          "32:  source *KubernetesCache",
          "37: func (p *IngressProcessor) Run(dag *DAG, source *KubernetesCache) {",
          "38:  p.dag = dag",
          "39:  p.source = source",
          "43:   p.dag = nil",
          "44:   p.source = nil",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: func (p *IngressProcessor) computeSecureVirtualhosts() {",
          "55:   for _, tls := range ing.Spec.TLS {",
          "56:    secretName := k8s.NamespacedNameFrom(tls.SecretName, k8s.DefaultNamespace(ing.GetNamespace()))",
          "58:    if err != nil {",
          "59:     p.WithError(err).",
          "60:      WithField(\"name\", ing.GetName()).",
          "",
          "[Removed Lines]",
          "54:  for _, ing := range p.builder.Source.ingresses {",
          "57:    sec, err := p.builder.Source.LookupSecret(secretName, validSecret)",
          "",
          "[Added Lines]",
          "57:  for _, ing := range p.source.ingresses {",
          "60:    sec, err := p.source.LookupSecret(secretName, validSecret)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:     continue",
          "65:    }",
          "68:     p.WithError(err).",
          "69:      WithField(\"name\", ing.GetName()).",
          "70:      WithField(\"namespace\", ing.GetNamespace()).",
          "",
          "[Removed Lines]",
          "67:    if !p.builder.Source.DelegationPermitted(secretName, ing.GetNamespace()) {",
          "",
          "[Added Lines]",
          "70:    if !p.source.DelegationPermitted(secretName, ing.GetNamespace()) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:    for _, host := range tls.Hosts {",
          "81:     svhost.Secret = sec",
          "82:     svhost.MinTLSVersion = annotation.MinTLSVersion(",
          "83:      annotation.CompatAnnotation(ing, \"tls-minimum-protocol-version\"))",
          "",
          "[Removed Lines]",
          "80:     svhost := p.builder.lookupSecureVirtualHost(host)",
          "",
          "[Added Lines]",
          "83:     svhost := p.dag.EnsureSecureVirtualHost(host)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "89: func (p *IngressProcessor) computeIngresses() {",
          "94:   rules := rulesFromSpec(ing.Spec)",
          "",
          "[Removed Lines]",
          "91:  for _, ing := range p.builder.Source.ingresses {",
          "",
          "[Added Lines]",
          "94:  for _, ing := range p.source.ingresses {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "112:   path := stringOrDefault(httppath.Path, \"/\")",
          "113:   be := httppath.Backend",
          "114:   m := types.NamespacedName{Name: be.ServiceName, Namespace: ing.Namespace}",
          "116:   if err != nil {",
          "117:    continue",
          "118:   }",
          "",
          "[Removed Lines]",
          "115:   s, err := p.builder.lookupService(m, be.ServicePort)",
          "",
          "[Added Lines]",
          "118:   s, err := p.dag.EnsureService(m, be.ServicePort, p.source)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "123:   if annotation.TLSRequired(ing) || annotation.HTTPAllowed(ing) {",
          "125:   }",
          "132:    svh.addRoute(r)",
          "133:   }",
          "134:  }",
          "",
          "[Removed Lines]",
          "124:    p.builder.lookupVirtualHost(host).addRoute(r)",
          "130:   svh, ok := p.builder.securevirtualhosts[host]",
          "131:   if ok && host != \"*\" {",
          "",
          "[Added Lines]",
          "127:    vhost := p.dag.EnsureVirtualHost(host)",
          "128:    vhost.addRoute(r)",
          "134:   if svh := p.dag.GetSecureVirtualHost(host); svh != nil && host != \"*\" {",
          "",
          "---------------"
        ],
        "internal/dag/listener_processor.go||internal/dag/listener_processor.go": [
          "File: internal/dag/listener_processor.go -> internal/dag/listener_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import \"sort\"",
          "45: }",
          "56:   }",
          "57:  }",
          "58:  sort.SliceStable(virtualhosts, func(i, j int) bool {",
          "59:   return virtualhosts[i].(*VirtualHost).Name < virtualhosts[j].(*VirtualHost).Name",
          "60:  })",
          "62:   Port:         80,",
          "63:   VirtualHosts: virtualhosts,",
          "64:  }",
          "65: }",
          "75:   }",
          "76:  }",
          "77:  sort.SliceStable(virtualhosts, func(i, j int) bool {",
          "78:   return virtualhosts[i].(*SecureVirtualHost).Name < virtualhosts[j].(*SecureVirtualHost).Name",
          "79:  })",
          "81:   Port:         443,",
          "82:   VirtualHosts: virtualhosts,",
          "83:  }",
          "84: }",
          "",
          "[Removed Lines]",
          "21: type ListenerProcessor struct {",
          "22:  builder *Builder",
          "23: }",
          "28: func (p *ListenerProcessor) Run(builder *Builder) {",
          "29:  p.builder = builder",
          "32:  defer func() {",
          "33:   p.builder = nil",
          "34:  }()",
          "36:  http := p.buildHTTPListener()",
          "37:  if len(http.VirtualHosts) > 0 {",
          "38:   p.builder.listeners = append(p.builder.listeners, http)",
          "39:  }",
          "41:  https := p.buildHTTPSListener()",
          "42:  if len(https.VirtualHosts) > 0 {",
          "43:   p.builder.listeners = append(p.builder.listeners, https)",
          "44:  }",
          "50: func (p *ListenerProcessor) buildHTTPListener() *Listener {",
          "51:  var virtualhosts = make([]Vertex, 0, len(p.builder.virtualhosts))",
          "53:  for _, vh := range p.builder.virtualhosts {",
          "54:   if vh.Valid() {",
          "55:    virtualhosts = append(virtualhosts, vh)",
          "61:  return &Listener{",
          "70: func (p *ListenerProcessor) buildHTTPSListener() *Listener {",
          "71:  var virtualhosts = make([]Vertex, 0, len(p.builder.securevirtualhosts))",
          "72:  for _, svh := range p.builder.securevirtualhosts {",
          "73:   if svh.Valid() {",
          "74:    virtualhosts = append(virtualhosts, svh)",
          "80:  return &Listener{",
          "",
          "[Added Lines]",
          "21: type ListenerProcessor struct{}",
          "26: func (p *ListenerProcessor) Run(dag *DAG, _ *KubernetesCache) {",
          "27:  p.buildHTTPListener(dag)",
          "28:  p.buildHTTPSListener(dag)",
          "34: func (p *ListenerProcessor) buildHTTPListener(dag *DAG) {",
          "35:  var virtualhosts []Vertex",
          "36:  var remove []Vertex",
          "38:  for _, root := range dag.roots {",
          "39:   switch obj := root.(type) {",
          "40:   case *VirtualHost:",
          "41:    remove = append(remove, obj)",
          "43:    if obj.Valid() {",
          "44:     virtualhosts = append(virtualhosts, obj)",
          "45:    }",
          "50:  for _, r := range remove {",
          "51:   dag.RemoveRoot(r)",
          "52:  }",
          "54:  if len(virtualhosts) == 0 {",
          "55:   return",
          "56:  }",
          "62:  http := &Listener{",
          "67:  dag.AddRoot(http)",
          "73: func (p *ListenerProcessor) buildHTTPSListener(dag *DAG) {",
          "74:  var virtualhosts []Vertex",
          "75:  var remove []Vertex",
          "77:  for _, root := range dag.roots {",
          "78:   switch obj := root.(type) {",
          "79:   case *SecureVirtualHost:",
          "80:    remove = append(remove, obj)",
          "82:    if obj.Valid() {",
          "83:     virtualhosts = append(virtualhosts, obj)",
          "84:    }",
          "89:  for _, r := range remove {",
          "90:   dag.RemoveRoot(r)",
          "91:  }",
          "93:  if len(virtualhosts) == 0 {",
          "94:   return",
          "95:  }",
          "101:  https := &Listener{",
          "106:  dag.AddRoot(https)",
          "",
          "---------------"
        ],
        "internal/featuretests/authorization_test.go||internal/featuretests/authorization_test.go": [
          "File: internal/featuretests/authorization_test.go -> internal/featuretests/authorization_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "443:   Resources: resources(t, staticListener()),",
          "444:  }).Status(invalid).Equals(projcontour.HTTPProxyStatus{",
          "445:   CurrentStatus: k8s.StatusInvalid,",
          "447:  })",
          "449:  invalid.Spec.VirtualHost.Authorization.ExtensionServiceRef = projcontour.ExtensionServiceReference{",
          "",
          "[Removed Lines]",
          "446:   Description:   `Spec.Virtualhost.Authorization.ServiceRef support service \"missing/extension\" not found`,",
          "",
          "[Added Lines]",
          "446:   Description:   `Spec.Virtualhost.Authorization.ServiceRef extension service \"missing/extension\" not found`,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72edf8beb1ebbc5dc17319b92b15fc474c85de30",
      "candidate_info": {
        "commit_hash": "72edf8beb1ebbc5dc17319b92b15fc474c85de30",
        "repo": "projectcontour/contour",
        "commit_url": "https://github.com/projectcontour/contour/commit/72edf8beb1ebbc5dc17319b92b15fc474c85de30",
        "files": [
          "_integration/testsuite/fixtures/ingress-conformance-echo.yaml",
          "_integration/testsuite/gatewayapi/008-tlsroute.yaml",
          "internal/dag/builder_test.go",
          "internal/dag/cache.go",
          "internal/dag/gatewayapi_processor.go",
          "internal/dag/gatewayapi_processor_test.go",
          "internal/dag/status_test.go",
          "internal/envoy/v3/listener.go",
          "internal/envoy/v3/listener_test.go",
          "internal/featuretests/v3/tlsroute_test.go",
          "internal/status/conditions.go"
        ],
        "message": "internal: Adds support for TLSRoute (#3627)\n\nAdd support for TLSRoute to enable Passthrough TCP Proxying to pods via SNI.\n\nUpdates #3440\n\nSigned-off-by: Steve Sloka <slokas@vmware.com>",
        "before_after_code_files": [
          "internal/dag/builder_test.go||internal/dag/builder_test.go",
          "internal/dag/cache.go||internal/dag/cache.go",
          "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go",
          "internal/dag/gatewayapi_processor_test.go||internal/dag/gatewayapi_processor_test.go",
          "internal/dag/status_test.go||internal/dag/status_test.go",
          "internal/envoy/v3/listener.go||internal/envoy/v3/listener.go",
          "internal/envoy/v3/listener_test.go||internal/envoy/v3/listener_test.go",
          "internal/featuretests/v3/tlsroute_test.go||internal/featuretests/v3/tlsroute_test.go",
          "internal/status/conditions.go||internal/status/conditions.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "internal/dag/builder_test.go||internal/dag/builder_test.go",
            "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go",
            "internal/dag/status_test.go||internal/dag/status_test.go"
          ],
          "candidate": [
            "internal/dag/builder_test.go||internal/dag/builder_test.go",
            "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go",
            "internal/dag/status_test.go||internal/dag/status_test.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/dag/builder_test.go||internal/dag/builder_test.go": [
          "File: internal/dag/builder_test.go -> internal/dag/builder_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2265:     },",
          "2266:    ),",
          "2267:   },",
          "2268:  }",
          "2270:  for name, tc := range tests {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2268:   \"basic TLSRoute\": {",
          "2269:    gateway: gatewayWithSelector,",
          "2270:    objs: []interface{}{",
          "2271:     kuardService,",
          "2272:     &gatewayapi_v1alpha1.TLSRoute{",
          "2273:      ObjectMeta: metav1.ObjectMeta{",
          "2274:       Name:      \"basic\",",
          "2275:       Namespace: \"projectcontour\",",
          "2276:       Labels: map[string]string{",
          "2277:        \"app\":  \"contour\",",
          "2278:        \"type\": \"controller\",",
          "2279:       },",
          "2280:      },",
          "2281:      Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "2282:       Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "2283:        Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "2284:         SNIs: []gatewayapi_v1alpha1.Hostname{",
          "2285:          \"tcp.projectcontour.io\",",
          "2286:         },",
          "2287:        }},",
          "2288:        ForwardTo: tcpRouteForwardTo(\"kuard\", 8080, 0),",
          "2289:       }},",
          "2290:      },",
          "2291:     },",
          "2292:    },",
          "2293:    want: listeners(",
          "2294:     &Listener{",
          "2295:      Port: 443,",
          "2296:      VirtualHosts: virtualhosts(",
          "2297:       &SecureVirtualHost{",
          "2298:        VirtualHost: VirtualHost{",
          "2299:         Name:         \"tcp.projectcontour.io\",",
          "2300:         ListenerName: \"ingress_https\",",
          "2301:        },",
          "2302:        TCPProxy: &TCPProxy{",
          "2303:         Clusters: clusters(service(kuardService)),",
          "2304:        },",
          "2305:       },",
          "2306:      ),",
          "2307:     },",
          "2308:    ),",
          "2309:   },",
          "2310:   \"TLSRoute with multiple SNIs\": {",
          "2311:    gateway: gatewayWithSelector,",
          "2312:    objs: []interface{}{",
          "2313:     kuardService,",
          "2314:     &gatewayapi_v1alpha1.TLSRoute{",
          "2315:      ObjectMeta: metav1.ObjectMeta{",
          "2316:       Name:      \"basic\",",
          "2317:       Namespace: \"projectcontour\",",
          "2318:       Labels: map[string]string{",
          "2319:        \"app\":  \"contour\",",
          "2320:        \"type\": \"controller\",",
          "2321:       },",
          "2322:      },",
          "2323:      Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "2324:       Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "2325:        Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "2326:         SNIs: []gatewayapi_v1alpha1.Hostname{",
          "2327:          \"tcp.projectcontour.io\",",
          "2328:          \"another.projectcontour.io\",",
          "2329:          \"thing.projectcontour.io\",",
          "2330:         },",
          "2331:        }},",
          "2332:        ForwardTo: tcpRouteForwardTo(\"kuard\", 8080, 0),",
          "2333:       }},",
          "2334:      },",
          "2335:     },",
          "2336:    },",
          "2337:    want: listeners(",
          "2338:     &Listener{",
          "2339:      Port: 443,",
          "2340:      VirtualHosts: virtualhosts(",
          "2341:       &SecureVirtualHost{",
          "2342:        VirtualHost: VirtualHost{",
          "2343:         Name:         \"another.projectcontour.io\",",
          "2344:         ListenerName: \"ingress_https\",",
          "2345:        },",
          "2346:        TCPProxy: &TCPProxy{",
          "2347:         Clusters: clusters(service(kuardService)),",
          "2348:        },",
          "2349:       },",
          "2350:       &SecureVirtualHost{",
          "2351:        VirtualHost: VirtualHost{",
          "2352:         Name:         \"tcp.projectcontour.io\",",
          "2353:         ListenerName: \"ingress_https\",",
          "2354:        },",
          "2355:        TCPProxy: &TCPProxy{",
          "2356:         Clusters: clusters(service(kuardService)),",
          "2357:        },",
          "2358:       },",
          "2359:       &SecureVirtualHost{",
          "2360:        VirtualHost: VirtualHost{",
          "2361:         Name:         \"thing.projectcontour.io\",",
          "2362:         ListenerName: \"ingress_https\",",
          "2363:        },",
          "2364:        TCPProxy: &TCPProxy{",
          "2365:         Clusters: clusters(service(kuardService)),",
          "2366:        },",
          "2367:       },",
          "2368:      ),",
          "2369:     },",
          "2370:    ),",
          "2371:   },",
          "2372:   \"TLSRoute with multiple SNIs, one is invalid\": {",
          "2373:    gateway: gatewayWithSelector,",
          "2374:    objs: []interface{}{",
          "2375:     kuardService,",
          "2376:     &gatewayapi_v1alpha1.TLSRoute{",
          "2377:      ObjectMeta: metav1.ObjectMeta{",
          "2378:       Name:      \"basic\",",
          "2379:       Namespace: \"projectcontour\",",
          "2380:       Labels: map[string]string{",
          "2381:        \"app\":  \"contour\",",
          "2382:        \"type\": \"controller\",",
          "2383:       },",
          "2384:      },",
          "2385:      Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "2386:       Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "2387:        Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "2388:         SNIs: []gatewayapi_v1alpha1.Hostname{",
          "2389:          \"tcp.projectcontour.io\",",
          "2390:          \"*.*.another.projectcontour.io\",",
          "2391:          \"thing.projectcontour.io\",",
          "2392:         },",
          "2393:        }},",
          "2394:        ForwardTo: tcpRouteForwardTo(\"kuard\", 8080, 0),",
          "2395:       }},",
          "2396:      },",
          "2397:     },",
          "2398:    },",
          "2399:    want: listeners(",
          "2400:     &Listener{",
          "2401:      Port: 443,",
          "2402:      VirtualHosts: virtualhosts(",
          "2403:       &SecureVirtualHost{",
          "2404:        VirtualHost: VirtualHost{",
          "2405:         Name:         \"tcp.projectcontour.io\",",
          "2406:         ListenerName: \"ingress_https\",",
          "2407:        },",
          "2408:        TCPProxy: &TCPProxy{",
          "2409:         Clusters: clusters(service(kuardService)),",
          "2410:        },",
          "2411:       },",
          "2412:       &SecureVirtualHost{",
          "2413:        VirtualHost: VirtualHost{",
          "2414:         Name:         \"thing.projectcontour.io\",",
          "2415:         ListenerName: \"ingress_https\",",
          "2416:        },",
          "2417:        TCPProxy: &TCPProxy{",
          "2418:         Clusters: clusters(service(kuardService)),",
          "2419:        },",
          "2420:       },",
          "2421:      ),",
          "2422:     },",
          "2423:    ),",
          "2424:   },",
          "2425:   \"TLSRoute with multiple SNIs, all are invalid\": {",
          "2426:    gateway: gatewayWithSelector,",
          "2427:    objs: []interface{}{",
          "2428:     kuardService,",
          "2429:     &gatewayapi_v1alpha1.TLSRoute{",
          "2430:      ObjectMeta: metav1.ObjectMeta{",
          "2431:       Name:      \"basic\",",
          "2432:       Namespace: \"projectcontour\",",
          "2433:       Labels: map[string]string{",
          "2434:        \"app\":  \"contour\",",
          "2435:        \"type\": \"controller\",",
          "2436:       },",
          "2437:      },",
          "2438:      Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "2439:       Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "2440:        Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "2441:         SNIs: []gatewayapi_v1alpha1.Hostname{",
          "2442:          \"tcp.*.projectcontour.io\",",
          "2443:          \"*.*.another.projectcontour.io\",",
          "2444:          \"!!thing.projectcontour.io\",",
          "2445:         },",
          "2446:        }},",
          "2447:        ForwardTo: tcpRouteForwardTo(\"kuard\", 8080, 0),",
          "2448:       }},",
          "2449:      },",
          "2450:     },",
          "2451:    },",
          "2452:    want: listeners(),",
          "2453:   },",
          "2454:   \"TLSRoute without any hostnames specified results in '*' match all\": {",
          "2455:    gateway: gatewayWithSelector,",
          "2456:    objs: []interface{}{",
          "2457:     kuardService,",
          "2458:     &gatewayapi_v1alpha1.TLSRoute{",
          "2459:      ObjectMeta: metav1.ObjectMeta{",
          "2460:       Name:      \"basic\",",
          "2461:       Namespace: \"projectcontour\",",
          "2462:       Labels: map[string]string{",
          "2463:        \"app\":  \"contour\",",
          "2464:        \"type\": \"controller\",",
          "2465:       },",
          "2466:      },",
          "2467:      Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "2468:       Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "2469:        Matches:   []gatewayapi_v1alpha1.TLSRouteMatch{{}},",
          "2470:        ForwardTo: tcpRouteForwardTo(\"kuard\", 8080, 0),",
          "2471:       }},",
          "2472:      },",
          "2473:     },",
          "2474:    },",
          "2475:    want: listeners(",
          "2476:     &Listener{",
          "2477:      Port: 443,",
          "2478:      VirtualHosts: virtualhosts(",
          "2479:       &SecureVirtualHost{",
          "2480:        VirtualHost: VirtualHost{",
          "2481:         Name:         \"*\",",
          "2482:         ListenerName: \"ingress_https\",",
          "2483:        },",
          "2484:        TCPProxy: &TCPProxy{",
          "2485:         Clusters: clusters(service(kuardService)),",
          "2486:        },",
          "2487:       },",
          "2488:      ),",
          "2489:     },",
          "2490:    ),",
          "2491:   },",
          "2492:   \"TLSRoute with missing forwardTo service\": {",
          "2493:    gateway: gatewayWithSelector,",
          "2494:    objs: []interface{}{",
          "2495:     &gatewayapi_v1alpha1.TLSRoute{",
          "2496:      ObjectMeta: metav1.ObjectMeta{",
          "2497:       Name:      \"basic\",",
          "2498:       Namespace: \"projectcontour\",",
          "2499:       Labels: map[string]string{",
          "2500:        \"app\":  \"contour\",",
          "2501:        \"type\": \"controller\",",
          "2502:       },",
          "2503:      },",
          "2504:      Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "2505:       Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "2506:        Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "2507:         SNIs: []gatewayapi_v1alpha1.Hostname{",
          "2508:          \"tcp.projectcontour.io\",",
          "2509:         },",
          "2510:        }},",
          "2511:        ForwardTo: tcpRouteForwardTo(\"kuard\", 8080, 0),",
          "2512:       }},",
          "2513:      },",
          "2514:     },",
          "2515:    },",
          "2516:    want: listeners(),",
          "2517:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9325:  }}",
          "9326: }",
          "9328: func prefixroute(prefix string, first *Service, rest ...*Service) *Route {",
          "9329:  services := append([]*Service{first}, rest...)",
          "9330:  return &Route{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9578: func tcpRouteForwardTo(serviceName string, port int, weight int32) []gatewayapi_v1alpha1.RouteForwardTo {",
          "9579:  return []gatewayapi_v1alpha1.RouteForwardTo{{",
          "9580:   ServiceName: pointer.StringPtr(serviceName),",
          "9581:   Port:        gatewayPort(port),",
          "9582:   Weight:      pointer.Int32Ptr(weight),",
          "9583:  }}",
          "9584: }",
          "",
          "---------------"
        ],
        "internal/dag/cache.go||internal/dag/cache.go": [
          "File: internal/dag/cache.go -> internal/dag/cache.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:   kc.udproutes[k8s.NamespacedNameOf(obj)] = obj",
          "240:   return true",
          "241:  case *gatewayapi_v1alpha1.TLSRoute:",
          "246:   kc.tlsroutes[k8s.NamespacedNameOf(obj)] = obj",
          "247:   return true",
          "248:  case *gatewayapi_v1alpha1.BackendPolicy:",
          "",
          "[Removed Lines]",
          "242:   m := k8s.NamespacedNameOf(obj)",
          "245:   kc.WithField(\"experimental\", \"gateway-api\").WithField(\"name\", m.Name).WithField(\"namespace\", m.Namespace).Debug(\"Adding TLSRoute\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:  case *gatewayapi_v1alpha1.TLSRoute:",
          "340:   m := k8s.NamespacedNameOf(obj)",
          "341:   _, ok := kc.tlsroutes[m]",
          "345:   delete(kc.tlsroutes, m)",
          "346:   return ok",
          "347:  case *gatewayapi_v1alpha1.BackendPolicy:",
          "",
          "[Removed Lines]",
          "344:   kc.WithField(\"experimental\", \"gateway-api\").WithField(\"name\", m.Name).WithField(\"namespace\", m.Namespace).Debug(\"Removing TLSRoute\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go": [
          "File: internal/dag/gatewayapi_processor.go -> internal/dag/gatewayapi_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: const (",
          "37:  KindHTTPRoute = \"HTTPRoute\"",
          "38: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:  KindTLSRoute  = \"TLSRoute\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:  for _, listener := range p.source.gateway.Spec.Listeners {",
          "76:   var listenerSecret *Secret",
          "79:   switch listener.Protocol {",
          "82:    if listener.TLS == nil {",
          "83:     p.Errorf(\"Listener.TLS is required when protocol is %q.\", listener.Protocol)",
          "84:     continue",
          "",
          "[Removed Lines]",
          "75:   var matchingRoutes []*gatewayapi_v1alpha1.HTTPRoute",
          "80:   case gatewayapi_v1alpha1.HTTPSProtocolType, gatewayapi_v1alpha1.TLSProtocolType:",
          "",
          "[Added Lines]",
          "76:   var matchingHTTPRoutes []*gatewayapi_v1alpha1.HTTPRoute",
          "77:   var matchingTLSRoutes []*gatewayapi_v1alpha1.TLSRoute",
          "82:   case gatewayapi_v1alpha1.HTTPSProtocolType:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:     continue",
          "92:    }",
          "94:    break",
          "95:   default:",
          "96:    p.Errorf(\"Listener.Protocol %q is not supported.\", listener.Protocol)",
          "",
          "[Removed Lines]",
          "93:   case gatewayapi_v1alpha1.HTTPProtocolType:",
          "",
          "[Added Lines]",
          "95:   case gatewayapi_v1alpha1.HTTPProtocolType, gatewayapi_v1alpha1.TLSProtocolType:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:   }",
          "110:    p.Errorf(\"Listener.Routes.Kind %q is not supported.\", listener.Routes.Kind)",
          "111:    continue",
          "112:   }",
          "",
          "[Removed Lines]",
          "109:   if listener.Routes.Kind != KindHTTPRoute {",
          "",
          "[Added Lines]",
          "111:   if listener.Routes.Kind != KindHTTPRoute && listener.Routes.Kind != KindTLSRoute {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "151:     if gatewayAllowMatches {",
          "154:     }",
          "155:    }",
          "156:   }",
          "160:    p.computeHTTPRoute(matchingRoute, listenerSecret)",
          "161:   }",
          "162:  }",
          "163: }",
          "",
          "[Removed Lines]",
          "153:      matchingRoutes = append(matchingRoutes, route)",
          "159:   for _, matchingRoute := range matchingRoutes {",
          "",
          "[Added Lines]",
          "155:      matchingHTTPRoutes = append(matchingHTTPRoutes, route)",
          "160:   for _, route := range p.source.tlsroutes {",
          "171:    nsMatches, err := p.namespaceMatches(listener.Routes.Namespaces, route.Namespace)",
          "172:    if err != nil {",
          "173:     p.Errorf(\"error validating namespaces against Listener.Routes.Namespaces: %s\", err)",
          "174:    }",
          "176:    selMatches, err := selectorMatches(listener.Routes.Selector, route.Labels)",
          "177:    if err != nil {",
          "178:     p.Errorf(\"error validating routes against Listener.Routes.Selector: %s\", err)",
          "179:    }",
          "181:    if selMatches && nsMatches {",
          "183:     matchingTLSRoutes = append(matchingTLSRoutes, route)",
          "184:    }",
          "185:   }",
          "188:   for _, matchingRoute := range matchingHTTPRoutes {",
          "193:   for _, matchingRoute := range matchingTLSRoutes {",
          "194:    p.computeTLSRoute(matchingRoute)",
          "195:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195:  return strings.ToLower(certificateRef.Kind) == \"secret\" && strings.ToLower(certificateRef.Group) == \"core\"",
          "196: }",
          "201:  var hosts []string",
          "202:  var errors []error",
          "204:   hosts = append(hosts, \"*\")",
          "205:   return hosts, nil",
          "206:  }",
          "210:   hostname := string(host)",
          "213:    continue",
          "214:   }",
          "226:   hosts = append(hosts, string(host))",
          "227:  }",
          "228:  return hosts, errors",
          "229: }",
          "233: func (p *GatewayAPIProcessor) namespaceMatches(namespaces *gatewayapi_v1alpha1.RouteNamespaces, namespace string) (bool, error) {",
          "",
          "[Removed Lines]",
          "198: func (p *GatewayAPIProcessor) computeHosts(route *gatewayapi_v1alpha1.HTTPRoute) ([]string, []error) {",
          "203:  if len(route.Spec.Hostnames) == 0 {",
          "208:  for _, host := range route.Spec.Hostnames {",
          "211:   if isIP := net.ParseIP(hostname) != nil; isIP {",
          "212:    errors = append(errors, fmt.Errorf(\"hostname %q must be a DNS name, not an IP address\", hostname))",
          "215:   if strings.Contains(hostname, \"*\") {",
          "216:    if errs := validation.IsWildcardDNS1123Subdomain(hostname); errs != nil {",
          "217:     errors = append(errors, fmt.Errorf(\"invalid hostname %q: %v\", hostname, errs))",
          "218:     continue",
          "219:    }",
          "220:   } else {",
          "221:    if errs := validation.IsDNS1123Subdomain(hostname); errs != nil {",
          "222:     errors = append(errors, fmt.Errorf(\"invalid listener hostname %q: %v\", hostname, errs))",
          "223:     continue",
          "224:    }",
          "225:   }",
          "",
          "[Added Lines]",
          "232: func (p *GatewayAPIProcessor) computeHosts(hostnames []gatewayapi_v1alpha1.Hostname) ([]string, []error) {",
          "237:  if len(hostnames) == 0 {",
          "242:  for _, host := range hostnames {",
          "245:   if err := validHostName(hostname); err != nil {",
          "246:    errors = append(errors, err)",
          "254: func validHostName(hostname string) error {",
          "255:  if isIP := net.ParseIP(hostname) != nil; isIP {",
          "256:   return fmt.Errorf(\"hostname %q must be a DNS name, not an IP address\", hostname)",
          "257:  }",
          "258:  if strings.Contains(hostname, \"*\") {",
          "259:   if errs := validation.IsWildcardDNS1123Subdomain(hostname); errs != nil {",
          "260:    return fmt.Errorf(\"invalid hostname %q: %v\", hostname, errs)",
          "261:   }",
          "262:  } else {",
          "263:   if errs := validation.IsDNS1123Subdomain(hostname); errs != nil {",
          "264:    return fmt.Errorf(\"invalid listener hostname %q: %v\", hostname, errs)",
          "265:   }",
          "266:  }",
          "267:  return nil",
          "268: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "315:  return true, nil",
          "316: }",
          "318: func (p *GatewayAPIProcessor) computeHTTPRoute(route *gatewayapi_v1alpha1.HTTPRoute, listenerSecret *Secret) {",
          "319:  routeAccessor, commit := p.dag.StatusCache.ConditionsAccessor(k8s.NamespacedNameOf(route), route.Generation, status.ResourceHTTPRoute, route.Status.Gateways)",
          "320:  defer commit()",
          "323:  for _, err := range errs {",
          "324:   routeAccessor.AddCondition(status.ConditionResolvedRefs, metav1.ConditionFalse, status.ReasonDegraded, err.Error())",
          "325:  }",
          "",
          "[Removed Lines]",
          "322:  hosts, errs := p.computeHosts(route)",
          "",
          "[Added Lines]",
          "357: func (p *GatewayAPIProcessor) computeTLSRoute(route *gatewayapi_v1alpha1.TLSRoute) {",
          "359:  routeAccessor, commit := p.dag.StatusCache.ConditionsAccessor(k8s.NamespacedNameOf(route), route.Generation, status.ResourceTLSRoute, route.Status.Gateways)",
          "360:  defer commit()",
          "362:  for _, rule := range route.Spec.Rules {",
          "363:   var hosts []string",
          "364:   var matchErrors []error",
          "365:   totalSnis := 0",
          "368:   for _, match := range rule.Matches {",
          "369:    for _, snis := range match.SNIs {",
          "370:     totalSnis++",
          "371:     if err := validHostName(string(snis)); err != nil {",
          "372:      matchErrors = append(matchErrors, err)",
          "373:      continue",
          "374:     }",
          "375:     hosts = append(hosts, string(snis))",
          "376:    }",
          "377:   }",
          "381:   for _, err := range matchErrors {",
          "382:    routeAccessor.AddCondition(status.ConditionResolvedRefs, metav1.ConditionFalse, status.ReasonDegraded, err.Error())",
          "383:   }",
          "387:   if len(matchErrors) != 0 && len(matchErrors) == totalSnis {",
          "388:    continue",
          "389:   }",
          "394:   if len(hosts) == 0 {",
          "395:    hosts = []string{\"*\"}",
          "396:   }",
          "398:   if len(rule.ForwardTo) == 0 {",
          "399:    routeAccessor.AddCondition(status.ConditionResolvedRefs, metav1.ConditionFalse, status.ReasonDegraded, \"At least one Spec.Rules.ForwardTo must be specified.\")",
          "400:    continue",
          "401:   }",
          "403:   var proxy TCPProxy",
          "404:   for _, forward := range rule.ForwardTo {",
          "406:    service, err := p.validateForwardTo(forward.ServiceName, forward.Port, route.Namespace)",
          "407:    if err != nil {",
          "408:     routeAccessor.AddCondition(status.ConditionResolvedRefs, metav1.ConditionFalse, status.ReasonDegraded, err.Error())",
          "409:     continue",
          "410:    }",
          "412:    proxy.Clusters = append(proxy.Clusters, &Cluster{",
          "413:     Upstream: service,",
          "414:     SNI:      service.ExternalName,",
          "415:    })",
          "416:   }",
          "418:   if len(proxy.Clusters) == 0 {",
          "420:    continue",
          "421:   }",
          "423:   for _, host := range hosts {",
          "424:    secure := p.dag.EnsureSecureVirtualHost(ListenerName{Name: host, ListenerName: \"ingress_https\"})",
          "425:    secure.TCPProxy = &proxy",
          "426:   }",
          "427:  }",
          "431:  switch len(routeAccessor.Conditions) {",
          "432:  case 0:",
          "433:   routeAccessor.AddCondition(gatewayapi_v1alpha1.ConditionRouteAdmitted, metav1.ConditionTrue, status.ReasonValid, \"Valid TLSRoute\")",
          "434:  default:",
          "435:   routeAccessor.AddCondition(gatewayapi_v1alpha1.ConditionRouteAdmitted, metav1.ConditionFalse, status.ReasonErrorsExist, \"Errors found, check other Conditions for details.\")",
          "436:  }",
          "437: }",
          "443:  hosts, errs := p.computeHosts(route.Spec.Hostnames)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "362:   totalWeight := uint32(0)",
          "363:   for _, forward := range rule.ForwardTo {",
          "381:    if err != nil {",
          "383:     continue",
          "384:    }",
          "",
          "[Removed Lines]",
          "366:    if forward.ServiceName == nil {",
          "367:     routeAccessor.AddCondition(status.ConditionResolvedRefs, metav1.ConditionFalse, status.ReasonDegraded, \"Spec.Rules.ForwardTo.ServiceName must be specified.\")",
          "368:     continue",
          "369:    }",
          "372:    if forward.Port == nil {",
          "373:     routeAccessor.AddCondition(status.ConditionResolvedRefs, metav1.ConditionFalse, status.ReasonDegraded, \"Spec.Rules.ForwardTo.ServicePort must be specified.\")",
          "374:     continue",
          "375:    }",
          "377:    meta := types.NamespacedName{Name: *forward.ServiceName, Namespace: route.Namespace}",
          "380:    service, err := p.dag.EnsureService(meta, intstr.FromInt(int(*forward.Port)), p.source)",
          "382:     routeAccessor.AddCondition(status.ConditionResolvedRefs, metav1.ConditionFalse, status.ReasonDegraded, fmt.Sprintf(\"Service %q does not exist\", meta.Name))",
          "",
          "[Added Lines]",
          "486:    service, err := p.validateForwardTo(forward.ServiceName, forward.Port, route.Namespace)",
          "488:     routeAccessor.AddCondition(status.ConditionResolvedRefs, metav1.ConditionFalse, status.ReasonDegraded, err.Error())",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "462:  }",
          "463: }",
          "465: func pathMatchCondition(mc *matchConditions, match *gatewayapi_v1alpha1.HTTPPathMatch) error {",
          "467:  if match == nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573: func (p *GatewayAPIProcessor) validateForwardTo(serviceName *string, port *gatewayapi_v1alpha1.PortNumber, namespace string) (*Service, error) {",
          "575:  if serviceName == nil {",
          "576:   return nil, fmt.Errorf(\"Spec.Rules.ForwardTo.ServiceName must be specified\")",
          "577:  }",
          "580:  if port == nil {",
          "581:   return nil, fmt.Errorf(\"Spec.Rules.ForwardTo.ServicePort must be specified\")",
          "582:  }",
          "584:  meta := types.NamespacedName{Name: *serviceName, Namespace: namespace}",
          "587:  service, err := p.dag.EnsureService(meta, intstr.FromInt(int(*port)), p.source)",
          "588:  if err != nil {",
          "589:   return nil, fmt.Errorf(\"service %q does not exist\", meta.Name)",
          "590:  }",
          "592:  return service, nil",
          "593: }",
          "",
          "---------------"
        ],
        "internal/dag/gatewayapi_processor_test.go||internal/dag/gatewayapi_processor_test.go": [
          "File: internal/dag/gatewayapi_processor_test.go -> internal/dag/gatewayapi_processor_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:     FieldLogger: fixture.NewTestLogger(t),",
          "198:    }",
          "201:    assert.Equal(t, tc.want, got)",
          "202:    assert.Equal(t, tc.wantError, gotError)",
          "203:   })",
          "",
          "[Removed Lines]",
          "200:    got, gotError := processor.computeHosts(tc.route)",
          "",
          "[Added Lines]",
          "200:    got, gotError := processor.computeHosts(tc.route.Spec.Hostnames)",
          "",
          "---------------"
        ],
        "internal/dag/status_test.go||internal/dag/status_test.go": [
          "File: internal/dag/status_test.go -> internal/dag/status_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2853:      Type:    string(status.ConditionResolvedRefs),",
          "2854:      Status:  contour_api_v1.ConditionFalse,",
          "2855:      Reason:  string(status.ReasonDegraded),",
          "2857:     },",
          "2858:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2859:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "",
          "[Removed Lines]",
          "2856:      Message: \"Spec.Rules.ForwardTo.ServiceName must be specified.\",",
          "",
          "[Added Lines]",
          "2856:      Message: \"Spec.Rules.ForwardTo.ServiceName must be specified\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2914:      Type:    string(status.ConditionResolvedRefs),",
          "2915:      Status:  contour_api_v1.ConditionFalse,",
          "2916:      Reason:  string(status.ReasonDegraded),",
          "2918:     },",
          "2919:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2920:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "",
          "[Removed Lines]",
          "2917:      Message: \"Service \\\"invalid-one\\\" does not exist, Service \\\"invalid-two\\\" does not exist\",",
          "",
          "[Added Lines]",
          "2917:      Message: \"service \\\"invalid-one\\\" does not exist, service \\\"invalid-two\\\" does not exist\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2960:      Type:    string(status.ConditionResolvedRefs),",
          "2961:      Status:  contour_api_v1.ConditionFalse,",
          "2962:      Reason:  string(status.ReasonDegraded),",
          "2964:     },",
          "2965:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2966:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "",
          "[Removed Lines]",
          "2963:      Message: \"Spec.Rules.ForwardTo.ServicePort must be specified.\",",
          "",
          "[Added Lines]",
          "2963:      Message: \"Spec.Rules.ForwardTo.ServicePort must be specified\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3378:    },",
          "3379:   }},",
          "3380:  })",
          "3381: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3382:  run(t, \"TLSRoute: spec.rules.forwardTo.serviceName not specified\", testcase{",
          "3383:   objs: []interface{}{",
          "3384:    kuardService,",
          "3385:    &gatewayapi_v1alpha1.TLSRoute{",
          "3386:     ObjectMeta: metav1.ObjectMeta{",
          "3387:      Name:      \"basic\",",
          "3388:      Namespace: \"default\",",
          "3389:      Labels: map[string]string{",
          "3390:       \"app\": \"contour\",",
          "3391:      },",
          "3392:     },",
          "3393:     Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "3394:      Gateways: &gatewayapi_v1alpha1.RouteGateways{",
          "3395:       Allow: gatewayAllowTypePtr(gatewayapi_v1alpha1.GatewayAllowAll),",
          "3396:      },",
          "3397:      Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "3398:       Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "3399:        SNIs: []gatewayapi_v1alpha1.Hostname{\"test.projectcontour.io\"},",
          "3400:       }},",
          "3401:       ForwardTo: []gatewayapi_v1alpha1.RouteForwardTo{{",
          "3402:        ServiceName: nil,",
          "3403:        Port:        gatewayPort(8080),",
          "3404:       }},",
          "3405:      }},",
          "3406:     },",
          "3407:    }},",
          "3408:   want: []*status.ConditionsUpdate{{",
          "3409:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3410:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3411:     status.ConditionResolvedRefs: {",
          "3412:      Type:    string(status.ConditionResolvedRefs),",
          "3413:      Status:  contour_api_v1.ConditionFalse,",
          "3414:      Reason:  string(status.ReasonDegraded),",
          "3415:      Message: \"Spec.Rules.ForwardTo.ServiceName must be specified\",",
          "3416:     },",
          "3417:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3418:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3419:      Status:  contour_api_v1.ConditionFalse,",
          "3420:      Reason:  \"ErrorsExist\",",
          "3421:      Message: \"Errors found, check other Conditions for details.\",",
          "3422:     },",
          "3423:    },",
          "3424:   }},",
          "3425:  })",
          "3427:  run(t, \"TLSRoute: spec.rules.forwardTo.serviceName invalid on two matches\", testcase{",
          "3428:   objs: []interface{}{",
          "3429:    &gatewayapi_v1alpha1.TLSRoute{",
          "3430:     ObjectMeta: metav1.ObjectMeta{",
          "3431:      Name:      \"basic\",",
          "3432:      Namespace: \"default\",",
          "3433:      Labels: map[string]string{",
          "3434:       \"app\": \"contour\",",
          "3435:      },",
          "3436:     },",
          "3437:     Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "3438:      Gateways: &gatewayapi_v1alpha1.RouteGateways{",
          "3439:       Allow: gatewayAllowTypePtr(gatewayapi_v1alpha1.GatewayAllowAll),",
          "3440:      },",
          "3441:      Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "3442:       Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "3443:        SNIs: []gatewayapi_v1alpha1.Hostname{\"test.projectcontour.io\"},",
          "3444:       }},",
          "3445:       ForwardTo: []gatewayapi_v1alpha1.RouteForwardTo{{",
          "3446:        ServiceName: pointer.StringPtr(\"invalid-one\"),",
          "3447:        Port:        gatewayPort(8080),",
          "3448:       }},",
          "3449:      }, {",
          "3450:       Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "3451:        SNIs: []gatewayapi_v1alpha1.Hostname{\"another.projectcontour.io\"},",
          "3452:       }},",
          "3453:       ForwardTo: []gatewayapi_v1alpha1.RouteForwardTo{{",
          "3454:        ServiceName: pointer.StringPtr(\"invalid-two\"),",
          "3455:        Port:        gatewayPort(8080),",
          "3456:       }},",
          "3457:      }},",
          "3458:     },",
          "3459:    }},",
          "3460:   want: []*status.ConditionsUpdate{{",
          "3461:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3462:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3463:     status.ConditionResolvedRefs: {",
          "3464:      Type:    string(status.ConditionResolvedRefs),",
          "3465:      Status:  contour_api_v1.ConditionFalse,",
          "3466:      Reason:  string(status.ReasonDegraded),",
          "3467:      Message: \"service \\\"invalid-one\\\" does not exist, service \\\"invalid-two\\\" does not exist\",",
          "3468:     },",
          "3469:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3470:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3471:      Status:  contour_api_v1.ConditionFalse,",
          "3472:      Reason:  \"ErrorsExist\",",
          "3473:      Message: \"Errors found, check other Conditions for details.\",",
          "3474:     },",
          "3475:    },",
          "3476:   }},",
          "3477:  })",
          "3479:  run(t, \"TLSRoute: spec.rules.forwardTo.servicePort not specified\", testcase{",
          "3480:   objs: []interface{}{",
          "3481:    kuardService,",
          "3482:    &gatewayapi_v1alpha1.TLSRoute{",
          "3483:     ObjectMeta: metav1.ObjectMeta{",
          "3484:      Name:      \"basic\",",
          "3485:      Namespace: \"default\",",
          "3486:      Labels: map[string]string{",
          "3487:       \"app\": \"contour\",",
          "3488:      },",
          "3489:     },",
          "3490:     Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "3491:      Gateways: &gatewayapi_v1alpha1.RouteGateways{",
          "3492:       Allow: gatewayAllowTypePtr(gatewayapi_v1alpha1.GatewayAllowAll),",
          "3493:      },",
          "3494:      Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "3495:       Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "3496:        SNIs: []gatewayapi_v1alpha1.Hostname{\"test.projectcontour.io\"},",
          "3497:       }},",
          "3498:       ForwardTo: []gatewayapi_v1alpha1.RouteForwardTo{{",
          "3499:        ServiceName: pointer.StringPtr(\"kuard\"),",
          "3500:        Port:        nil,",
          "3501:       }},",
          "3502:      }},",
          "3503:     },",
          "3504:    }},",
          "3505:   want: []*status.ConditionsUpdate{{",
          "3506:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3507:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3508:     status.ConditionResolvedRefs: {",
          "3509:      Type:    string(status.ConditionResolvedRefs),",
          "3510:      Status:  contour_api_v1.ConditionFalse,",
          "3511:      Reason:  string(status.ReasonDegraded),",
          "3512:      Message: \"Spec.Rules.ForwardTo.ServicePort must be specified\",",
          "3513:     },",
          "3514:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3515:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3516:      Status:  contour_api_v1.ConditionFalse,",
          "3517:      Reason:  \"ErrorsExist\",",
          "3518:      Message: \"Errors found, check other Conditions for details.\",",
          "3519:     },",
          "3520:    },",
          "3521:   }},",
          "3522:  })",
          "3524:  run(t, \"TLSRoute: spec.rules.forwardTo not specified\", testcase{",
          "3525:   objs: []interface{}{",
          "3526:    kuardService,",
          "3527:    &gatewayapi_v1alpha1.TLSRoute{",
          "3528:     ObjectMeta: metav1.ObjectMeta{",
          "3529:      Name:      \"basic\",",
          "3530:      Namespace: \"default\",",
          "3531:      Labels: map[string]string{",
          "3532:       \"app\": \"contour\",",
          "3533:      },",
          "3534:     },",
          "3535:     Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "3536:      Gateways: &gatewayapi_v1alpha1.RouteGateways{",
          "3537:       Allow: gatewayAllowTypePtr(gatewayapi_v1alpha1.GatewayAllowAll),",
          "3538:      },",
          "3539:      Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "3540:       Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "3541:        SNIs: []gatewayapi_v1alpha1.Hostname{\"test.projectcontour.io\"},",
          "3542:       }},",
          "3543:      }},",
          "3544:     },",
          "3545:    }},",
          "3546:   want: []*status.ConditionsUpdate{{",
          "3547:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3548:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3549:     status.ConditionResolvedRefs: {",
          "3550:      Type:    string(status.ConditionResolvedRefs),",
          "3551:      Status:  contour_api_v1.ConditionFalse,",
          "3552:      Reason:  string(status.ReasonDegraded),",
          "3553:      Message: \"At least one Spec.Rules.ForwardTo must be specified.\",",
          "3554:     },",
          "3555:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3556:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3557:      Status:  contour_api_v1.ConditionFalse,",
          "3558:      Reason:  \"ErrorsExist\",",
          "3559:      Message: \"Errors found, check other Conditions for details.\",",
          "3560:     },",
          "3561:    },",
          "3562:   }},",
          "3563:  })",
          "3565:  run(t, \"TLSRoute: spec.rules.hostname: invalid wildcard\", testcase{",
          "3566:   objs: []interface{}{",
          "3567:    kuardService,",
          "3568:    &gatewayapi_v1alpha1.TLSRoute{",
          "3569:     ObjectMeta: metav1.ObjectMeta{",
          "3570:      Name:      \"basic\",",
          "3571:      Namespace: \"default\",",
          "3572:      Labels: map[string]string{",
          "3573:       \"app\": \"contour\",",
          "3574:      },",
          "3575:     },",
          "3576:     Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "3577:      Gateways: &gatewayapi_v1alpha1.RouteGateways{",
          "3578:       Allow: gatewayAllowTypePtr(gatewayapi_v1alpha1.GatewayAllowAll),",
          "3579:      },",
          "3580:      Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "3581:       Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "3582:        SNIs: []gatewayapi_v1alpha1.Hostname{\"*.*.projectcontour.io\"},",
          "3583:       }},",
          "3584:       ForwardTo: []gatewayapi_v1alpha1.RouteForwardTo{{",
          "3585:        ServiceName: pointer.StringPtr(\"kuard\"),",
          "3586:        Port:        gatewayPort(8080),",
          "3587:       }},",
          "3588:      }},",
          "3589:     },",
          "3590:    }},",
          "3591:   want: []*status.ConditionsUpdate{{",
          "3592:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3593:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3594:     status.ConditionResolvedRefs: {",
          "3595:      Type:    string(status.ConditionResolvedRefs),",
          "3596:      Status:  contour_api_v1.ConditionFalse,",
          "3597:      Reason:  string(status.ReasonDegraded),",
          "3598:      Message: \"invalid hostname \\\"*.*.projectcontour.io\\\": [a wildcard DNS-1123 subdomain must start with '*.', followed by a valid DNS subdomain, which must consist of lower case alphanumeric characters, '-' or '.' and end with an alphanumeric character (e.g. '*.example.com', regex used for validation is '\\\\*\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*')]\",",
          "3599:     },",
          "3600:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3601:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3602:      Status:  contour_api_v1.ConditionFalse,",
          "3603:      Reason:  \"ErrorsExist\",",
          "3604:      Message: \"Errors found, check other Conditions for details.\",",
          "3605:     },",
          "3606:    },",
          "3607:   }},",
          "3608:  })",
          "3610:  run(t, \"TLSRoute: spec.rules.hostname: invalid hostname\", testcase{",
          "3611:   objs: []interface{}{",
          "3612:    kuardService,",
          "3613:    &gatewayapi_v1alpha1.TLSRoute{",
          "3614:     ObjectMeta: metav1.ObjectMeta{",
          "3615:      Name:      \"basic\",",
          "3616:      Namespace: \"default\",",
          "3617:      Labels: map[string]string{",
          "3618:       \"app\": \"contour\",",
          "3619:      },",
          "3620:     },",
          "3621:     Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "3622:      Gateways: &gatewayapi_v1alpha1.RouteGateways{",
          "3623:       Allow: gatewayAllowTypePtr(gatewayapi_v1alpha1.GatewayAllowAll),",
          "3624:      },",
          "3625:      Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "3626:       Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "3627:        SNIs: []gatewayapi_v1alpha1.Hostname{\"#projectcontour.io\"},",
          "3628:       }},",
          "3629:       ForwardTo: []gatewayapi_v1alpha1.RouteForwardTo{{",
          "3630:        ServiceName: pointer.StringPtr(\"kuard\"),",
          "3631:        Port:        gatewayPort(8080),",
          "3632:       }},",
          "3633:      }},",
          "3634:     },",
          "3635:    }},",
          "3636:   want: []*status.ConditionsUpdate{{",
          "3637:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3638:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3639:     status.ConditionResolvedRefs: {",
          "3640:      Type:    string(status.ConditionResolvedRefs),",
          "3641:      Status:  contour_api_v1.ConditionFalse,",
          "3642:      Reason:  string(status.ReasonDegraded),",
          "3643:      Message: \"invalid listener hostname \\\"#projectcontour.io\\\": [a lowercase RFC 1123 subdomain must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character (e.g. 'example.com', regex used for validation is '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*')]\",",
          "3644:     },",
          "3645:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3646:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3647:      Status:  contour_api_v1.ConditionFalse,",
          "3648:      Reason:  \"ErrorsExist\",",
          "3649:      Message: \"Errors found, check other Conditions for details.\",",
          "3650:     },",
          "3651:    },",
          "3652:   }},",
          "3653:  })",
          "3655:  run(t, \"TLSRoute: spec.rules.hostname: invalid hostname, ip address\", testcase{",
          "3656:   objs: []interface{}{",
          "3657:    kuardService,",
          "3658:    &gatewayapi_v1alpha1.TLSRoute{",
          "3659:     ObjectMeta: metav1.ObjectMeta{",
          "3660:      Name:      \"basic\",",
          "3661:      Namespace: \"default\",",
          "3662:      Labels: map[string]string{",
          "3663:       \"app\": \"contour\",",
          "3664:      },",
          "3665:     },",
          "3666:     Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "3667:      Gateways: &gatewayapi_v1alpha1.RouteGateways{",
          "3668:       Allow: gatewayAllowTypePtr(gatewayapi_v1alpha1.GatewayAllowAll),",
          "3669:      },",
          "3670:      Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "3671:       Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "3672:        SNIs: []gatewayapi_v1alpha1.Hostname{\"1.2.3.4\"},",
          "3673:       }},",
          "3674:       ForwardTo: []gatewayapi_v1alpha1.RouteForwardTo{{",
          "3675:        ServiceName: pointer.StringPtr(\"kuard\"),",
          "3676:        Port:        gatewayPort(8080),",
          "3677:       }},",
          "3678:      }},",
          "3679:     },",
          "3680:    }},",
          "3681:   want: []*status.ConditionsUpdate{{",
          "3682:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3683:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3684:     status.ConditionResolvedRefs: {",
          "3685:      Type:    string(status.ConditionResolvedRefs),",
          "3686:      Status:  contour_api_v1.ConditionFalse,",
          "3687:      Reason:  string(status.ReasonDegraded),",
          "3688:      Message: \"hostname \\\"1.2.3.4\\\" must be a DNS name, not an IP address\",",
          "3689:     },",
          "3690:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3691:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3692:      Status:  contour_api_v1.ConditionFalse,",
          "3693:      Reason:  \"ErrorsExist\",",
          "3694:      Message: \"Errors found, check other Conditions for details.\",",
          "3695:     },",
          "3696:    },",
          "3697:   }},",
          "3698:  })",
          "",
          "---------------"
        ],
        "internal/envoy/v3/listener.go||internal/envoy/v3/listener.go": [
          "File: internal/envoy/v3/listener.go -> internal/envoy/v3/listener.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "647: func FilterChainTLS(domain string, downstream *envoy_tls_v3.DownstreamTlsContext, filters []*envoy_listener_v3.Filter) *envoy_listener_v3.FilterChain {",
          "648:  fc := &envoy_listener_v3.FilterChain{",
          "649:   Filters: filters,",
          "651:    ServerNames: []string{domain},",
          "653:  }",
          "655:  if downstream != nil {",
          "656:   fc.TransportSocket = DownstreamTLSTransportSocket(downstream)",
          "",
          "[Removed Lines]",
          "650:   FilterChainMatch: &envoy_listener_v3.FilterChainMatch{",
          "652:   },",
          "",
          "[Added Lines]",
          "650:  }",
          "655:  if domain == \"*\" {",
          "656:   fc.FilterChainMatch = &envoy_listener_v3.FilterChainMatch{",
          "657:    TransportProtocol: \"tls\",",
          "658:   }",
          "659:  } else {",
          "660:   fc.FilterChainMatch = &envoy_listener_v3.FilterChainMatch{",
          "662:   }",
          "",
          "---------------"
        ],
        "internal/envoy/v3/listener_test.go||internal/envoy/v3/listener_test.go": [
          "File: internal/envoy/v3/listener_test.go -> internal/envoy/v3/listener_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1425:  }",
          "1426: }",
          "1430: func TestBuilderValidation(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1429: func TestFilterChainTLS_Match(t *testing.T) {",
          "1431:  tests := map[string]struct {",
          "1432:   domain     string",
          "1433:   downstream *envoy_tls_v3.DownstreamTlsContext",
          "1434:   filters    []*envoy_listener_v3.Filter",
          "1435:   want       *envoy_listener_v3.FilterChain",
          "1436:  }{",
          "1437:   \"SNI\": {",
          "1438:    domain: \"projectcontour.io\",",
          "1439:    want: &envoy_listener_v3.FilterChain{",
          "1440:     FilterChainMatch: &envoy_listener_v3.FilterChainMatch{",
          "1441:      ServerNames: []string{\"projectcontour.io\"},",
          "1442:     },",
          "1443:    },",
          "1444:   },",
          "1445:   \"No SNI\": {",
          "1446:    domain: \"*\",",
          "1447:    want: &envoy_listener_v3.FilterChain{",
          "1448:     FilterChainMatch: &envoy_listener_v3.FilterChainMatch{",
          "1449:      TransportProtocol: \"tls\",",
          "1450:     },",
          "1451:    },",
          "1452:   },",
          "1453:  }",
          "1455:  for name, tc := range tests {",
          "1456:   t.Run(name, func(t *testing.T) {",
          "1457:    got := FilterChainTLS(tc.domain, tc.downstream, tc.filters)",
          "1458:    protobuf.ExpectEqual(t, tc.want, got)",
          "1459:   })",
          "1460:  }",
          "1461: }",
          "",
          "---------------"
        ],
        "internal/featuretests/v3/tlsroute_test.go||internal/featuretests/v3/tlsroute_test.go": [
          "File: internal/featuretests/v3/tlsroute_test.go -> internal/featuretests/v3/tlsroute_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: package v3",
          "16: import (",
          "17:  \"testing\"",
          "19:  envoy_listener_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/listener/v3\"",
          "20:  envoy_discovery_v3 \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"",
          "21:  \"github.com/projectcontour/contour/internal/dag\"",
          "22:  envoy_v3 \"github.com/projectcontour/contour/internal/envoy/v3\"",
          "23:  \"github.com/projectcontour/contour/internal/fixture\"",
          "24:  v1 \"k8s.io/api/core/v1\"",
          "25:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "26:  \"k8s.io/apimachinery/pkg/util/intstr\"",
          "27:  \"k8s.io/utils/pointer\"",
          "28:  gatewayapi_v1alpha1 \"sigs.k8s.io/gateway-api/apis/v1alpha1\"",
          "29: )",
          "31: func TestTLSRoute(t *testing.T) {",
          "32:  rh, c, done := setup(t)",
          "33:  defer done()",
          "35:  svc := fixture.NewService(\"correct-backend\").",
          "36:   WithPorts(v1.ServicePort{Port: 80, TargetPort: intstr.FromInt(8080)})",
          "38:  svcAnother := fixture.NewService(\"another-backend\").",
          "39:   WithPorts(v1.ServicePort{Port: 80, TargetPort: intstr.FromInt(8080)})",
          "41:  rh.OnAdd(svc)",
          "42:  rh.OnAdd(svcAnother)",
          "44:  rh.OnAdd(&gatewayapi_v1alpha1.Gateway{",
          "45:   ObjectMeta: metav1.ObjectMeta{",
          "46:    Name:      \"contour\",",
          "47:    Namespace: \"projectcontour\",",
          "48:   },",
          "49:   Spec: gatewayapi_v1alpha1.GatewaySpec{",
          "50:    Listeners: []gatewayapi_v1alpha1.Listener{{",
          "51:     Port:     443,",
          "52:     Protocol: \"TLS\",",
          "53:     Routes: gatewayapi_v1alpha1.RouteBindingSelector{",
          "54:      Namespaces: &gatewayapi_v1alpha1.RouteNamespaces{",
          "55:       From: routeSelectTypePtr(gatewayapi_v1alpha1.RouteSelectAll),",
          "56:      },",
          "57:      Kind: dag.KindTLSRoute,",
          "58:     },",
          "59:    }},",
          "60:   },",
          "61:  })",
          "63:  route1 := &gatewayapi_v1alpha1.TLSRoute{",
          "64:   ObjectMeta: metav1.ObjectMeta{",
          "65:    Name:      \"basic\",",
          "66:    Namespace: \"default\",",
          "67:   },",
          "68:   Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "69:    Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "70:     Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "71:      SNIs: []gatewayapi_v1alpha1.Hostname{",
          "72:       \"tcp.projectcontour.io\",",
          "73:      },",
          "74:     }},",
          "75:     ForwardTo: []gatewayapi_v1alpha1.RouteForwardTo{{",
          "76:      ServiceName: pointer.StringPtr(\"correct-backend\"),",
          "77:      Port:        gatewayPort(80),",
          "78:     }},",
          "79:    }},",
          "80:   },",
          "81:  }",
          "83:  rh.OnAdd(route1)",
          "85:  c.Request(listenerType).Equals(&envoy_discovery_v3.DiscoveryResponse{",
          "86:   Resources: resources(t,",
          "87:    &envoy_listener_v3.Listener{",
          "88:     Name:    \"ingress_https\",",
          "89:     Address: envoy_v3.SocketAddress(\"0.0.0.0\", 8443),",
          "90:     FilterChains: []*envoy_listener_v3.FilterChain{{",
          "91:      Filters: envoy_v3.Filters(",
          "92:       tcpproxy(\"ingress_https\", \"default/correct-backend/80/da39a3ee5e\"),",
          "93:      ),",
          "94:      FilterChainMatch: &envoy_listener_v3.FilterChainMatch{",
          "95:       ServerNames: []string{\"tcp.projectcontour.io\"},",
          "96:      },",
          "97:     }},",
          "98:     ListenerFilters: envoy_v3.ListenerFilters(",
          "99:      envoy_v3.TLSInspector(),",
          "100:     ),",
          "101:     SocketOptions: envoy_v3.TCPKeepaliveSocketOptions(),",
          "102:    },",
          "103:    staticListener(),",
          "104:   ),",
          "105:   TypeUrl: listenerType,",
          "106:  })",
          "109:  c.Request(routeType).Equals(&envoy_discovery_v3.DiscoveryResponse{",
          "110:   Resources: resources(t,",
          "111:    envoy_v3.RouteConfiguration(\"ingress_http\"),",
          "112:   ),",
          "113:   TypeUrl: routeType,",
          "114:  })",
          "117:  route2 := &gatewayapi_v1alpha1.TLSRoute{",
          "118:   ObjectMeta: metav1.ObjectMeta{",
          "119:    Name:      \"basic\",",
          "120:    Namespace: \"default\",",
          "121:   },",
          "122:   Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "123:    Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "124:     ForwardTo: []gatewayapi_v1alpha1.RouteForwardTo{{",
          "125:      ServiceName: pointer.StringPtr(\"correct-backend\"),",
          "126:      Port:        gatewayPort(80),",
          "127:     }},",
          "128:    }},",
          "129:   },",
          "130:  }",
          "132:  rh.OnUpdate(route1, route2)",
          "134:  c.Request(listenerType).Equals(&envoy_discovery_v3.DiscoveryResponse{",
          "135:   Resources: resources(t,",
          "136:    &envoy_listener_v3.Listener{",
          "137:     Name:    \"ingress_https\",",
          "138:     Address: envoy_v3.SocketAddress(\"0.0.0.0\", 8443),",
          "139:     FilterChains: []*envoy_listener_v3.FilterChain{{",
          "140:      Filters: envoy_v3.Filters(",
          "141:       tcpproxy(\"ingress_https\", \"default/correct-backend/80/da39a3ee5e\"),",
          "142:      ),",
          "143:      FilterChainMatch: &envoy_listener_v3.FilterChainMatch{",
          "144:       TransportProtocol: \"tls\",",
          "145:      },",
          "146:     }},",
          "147:     ListenerFilters: envoy_v3.ListenerFilters(",
          "148:      envoy_v3.TLSInspector(),",
          "149:     ),",
          "150:     SocketOptions: envoy_v3.TCPKeepaliveSocketOptions(),",
          "151:    },",
          "152:    staticListener(),",
          "153:   ),",
          "154:   TypeUrl: listenerType,",
          "155:  })",
          "158:  c.Request(routeType).Equals(&envoy_discovery_v3.DiscoveryResponse{",
          "159:   Resources: resources(t,",
          "160:    envoy_v3.RouteConfiguration(\"ingress_http\"),",
          "161:   ),",
          "162:   TypeUrl: routeType,",
          "163:  })",
          "165:  route3 := &gatewayapi_v1alpha1.TLSRoute{",
          "166:   ObjectMeta: metav1.ObjectMeta{",
          "167:    Name:      \"basic\",",
          "168:    Namespace: \"default\",",
          "169:   },",
          "170:   Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "171:    Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "172:     Matches: []gatewayapi_v1alpha1.TLSRouteMatch{{",
          "173:      SNIs: []gatewayapi_v1alpha1.Hostname{",
          "174:       \"tcp.projectcontour.io\",",
          "175:      },",
          "176:     }},",
          "177:     ForwardTo: []gatewayapi_v1alpha1.RouteForwardTo{{",
          "178:      ServiceName: pointer.StringPtr(\"correct-backend\"),",
          "179:      Port:        gatewayPort(80),",
          "180:     }},",
          "181:    }},",
          "182:   },",
          "183:  }",
          "185:  route4 := &gatewayapi_v1alpha1.TLSRoute{",
          "186:   ObjectMeta: metav1.ObjectMeta{",
          "187:    Name:      \"basic-wildcard\",",
          "188:    Namespace: \"default\",",
          "189:   },",
          "190:   Spec: gatewayapi_v1alpha1.TLSRouteSpec{",
          "191:    Rules: []gatewayapi_v1alpha1.TLSRouteRule{{",
          "192:     ForwardTo: []gatewayapi_v1alpha1.RouteForwardTo{{",
          "193:      ServiceName: pointer.StringPtr(\"another-backend\"),",
          "194:      Port:        gatewayPort(80),",
          "195:     }},",
          "196:    }},",
          "197:   },",
          "198:  }",
          "200:  rh.OnUpdate(route2, route3)",
          "201:  rh.OnAdd(route4)",
          "205:  c.Request(listenerType).Equals(&envoy_discovery_v3.DiscoveryResponse{",
          "206:   Resources: resources(t,",
          "207:    &envoy_listener_v3.Listener{",
          "208:     Name:    \"ingress_https\",",
          "209:     Address: envoy_v3.SocketAddress(\"0.0.0.0\", 8443),",
          "210:     FilterChains: []*envoy_listener_v3.FilterChain{{",
          "211:      Filters: envoy_v3.Filters(",
          "212:       tcpproxy(\"ingress_https\", \"default/correct-backend/80/da39a3ee5e\"),",
          "213:      ),",
          "214:      FilterChainMatch: &envoy_listener_v3.FilterChainMatch{",
          "215:       ServerNames: []string{\"tcp.projectcontour.io\"},",
          "216:      },",
          "217:     }, {",
          "218:      Filters: envoy_v3.Filters(",
          "219:       tcpproxy(\"ingress_https\", \"default/another-backend/80/da39a3ee5e\"),",
          "220:      ),",
          "221:      FilterChainMatch: &envoy_listener_v3.FilterChainMatch{",
          "222:       TransportProtocol: \"tls\",",
          "223:      },",
          "224:     }},",
          "225:     ListenerFilters: envoy_v3.ListenerFilters(",
          "226:      envoy_v3.TLSInspector(),",
          "227:     ),",
          "228:     SocketOptions: envoy_v3.TCPKeepaliveSocketOptions(),",
          "229:    },",
          "230:    staticListener(),",
          "231:   ),",
          "232:   TypeUrl: listenerType,",
          "233:  })",
          "236:  c.Request(routeType).Equals(&envoy_discovery_v3.DiscoveryResponse{",
          "237:   Resources: resources(t,",
          "238:    envoy_v3.RouteConfiguration(\"ingress_http\"),",
          "239:   ),",
          "240:   TypeUrl: routeType,",
          "241:  })",
          "242: }",
          "",
          "---------------"
        ],
        "internal/status/conditions.go||internal/status/conditions.go": [
          "File: internal/status/conditions.go -> internal/status/conditions.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: )",
          "26: const ResourceHTTPRoute = \"httproutes\"",
          "28: const ConditionNotImplemented gatewayapi_v1alpha1.RouteConditionType = \"NotImplemented\"",
          "29: const ConditionResolvedRefs gatewayapi_v1alpha1.RouteConditionType = \"ResolvedRefs\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: const ResourceTLSRoute = \"tlsroutes\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: }",
          "98: func (routeUpdate *ConditionsUpdate) Mutate(obj interface{}) interface{} {",
          "108:  var gatewayStatuses []gatewayapi_v1alpha1.RouteGatewayStatus",
          "109:  var conditionsToWrite []metav1.Condition",
          "",
          "[Removed Lines]",
          "99:  o, ok := obj.(*gatewayapi_v1alpha1.HTTPRoute)",
          "100:  if !ok {",
          "101:   panic(fmt.Sprintf(\"Unsupported %T object %s/%s in ConditionsUpdate status mutator\",",
          "102:    obj, routeUpdate.FullName.Namespace, routeUpdate.FullName.Name,",
          "103:   ))",
          "104:  }",
          "106:  route := o.DeepCopy()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151:   Conditions: conditionsToWrite,",
          "152:  })",
          "157:   if rgs.GatewayRef.Name == routeUpdate.GatewayRef.Name && rgs.GatewayRef.Namespace == routeUpdate.GatewayRef.Namespace {",
          "158:    continue",
          "159:   } else {",
          "",
          "[Removed Lines]",
          "156:  for _, rgs := range route.Status.Gateways {",
          "",
          "[Added Lines]",
          "147:  switch o := obj.(type) {",
          "148:  case *gatewayapi_v1alpha1.HTTPRoute:",
          "149:   route := o.DeepCopy()",
          "152:   route.Status.RouteStatus.Gateways = append(gatewayStatuses, routeUpdate.combineConditions(route.Status.Gateways)...)",
          "153:   return route",
          "154:  case *gatewayapi_v1alpha1.TLSRoute:",
          "155:   route := o.DeepCopy()",
          "158:   route.Status.RouteStatus.Gateways = append(gatewayStatuses, routeUpdate.combineConditions(route.Status.Gateways)...)",
          "159:   return route",
          "160:  default:",
          "161:   panic(fmt.Sprintf(\"Unsupported %T object %s/%s in ConditionsUpdate status mutator\",",
          "162:    obj, routeUpdate.FullName.Namespace, routeUpdate.FullName.Name,",
          "163:   ))",
          "164:  }",
          "165: }",
          "167: func (routeUpdate *ConditionsUpdate) combineConditions(gwStatus []gatewayapi_v1alpha1.RouteGatewayStatus) []gatewayapi_v1alpha1.RouteGatewayStatus {",
          "169:  var gatewayStatuses []gatewayapi_v1alpha1.RouteGatewayStatus",
          "173:  for _, rgs := range gwStatus {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "161:   }",
          "162:  }",
          "168: }",
          "170: func (c *Cache) getGatewayConditions(gatewayStatus []gatewayapi_v1alpha1.RouteGatewayStatus) map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition {",
          "",
          "[Removed Lines]",
          "165:  route.Status.RouteStatus.Gateways = gatewayStatuses",
          "167:  return route",
          "",
          "[Added Lines]",
          "181:  return gatewayStatuses",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3c42bc815687e20159a676e21eaf2bf7c63126b",
      "candidate_info": {
        "commit_hash": "f3c42bc815687e20159a676e21eaf2bf7c63126b",
        "repo": "projectcontour/contour",
        "commit_url": "https://github.com/projectcontour/contour/commit/f3c42bc815687e20159a676e21eaf2bf7c63126b",
        "files": [
          "apis/projectcontour/v1/detailedconditions.go",
          "apis/projectcontour/v1/helpers.go",
          "apis/projectcontour/v1/helpers_test.go",
          "internal/contour/metrics.go",
          "internal/dag/extension_processor.go",
          "internal/dag/httpproxy_processor.go",
          "internal/dag/status_test.go",
          "internal/featuretests/v3/authorization_test.go",
          "internal/featuretests/v3/featuretests.go",
          "internal/featuretests/v3/replaceprefix_test.go",
          "internal/fixture/detailedcondition.go",
          "internal/status/cache.go",
          "internal/status/proxystatus.go"
        ],
        "message": "apis: Add error type constants to DetailedConditions (#3148)\n\nAdds error type string constants to be used for the conditionType passed\nwhen setting Error status on HTTPProxy resources.\n\nUpdates: #2988\n\nSigned-off-by: Steve Sloka <slokas@vmware.com>",
        "before_after_code_files": [
          "apis/projectcontour/v1/detailedconditions.go||apis/projectcontour/v1/detailedconditions.go",
          "apis/projectcontour/v1/helpers.go||apis/projectcontour/v1/helpers.go",
          "apis/projectcontour/v1/helpers_test.go||apis/projectcontour/v1/helpers_test.go",
          "internal/contour/metrics.go||internal/contour/metrics.go",
          "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
          "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
          "internal/dag/status_test.go||internal/dag/status_test.go",
          "internal/featuretests/v3/authorization_test.go||internal/featuretests/v3/authorization_test.go",
          "internal/featuretests/v3/featuretests.go||internal/featuretests/v3/featuretests.go",
          "internal/featuretests/v3/replaceprefix_test.go||internal/featuretests/v3/replaceprefix_test.go",
          "internal/fixture/detailedcondition.go||internal/fixture/detailedcondition.go",
          "internal/status/cache.go||internal/status/cache.go",
          "internal/status/proxystatus.go||internal/status/proxystatus.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
            "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
            "internal/dag/status_test.go||internal/dag/status_test.go"
          ],
          "candidate": [
            "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
            "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
            "internal/dag/status_test.go||internal/dag/status_test.go"
          ]
        }
      },
      "candidate_diff": {
        "apis/projectcontour/v1/detailedconditions.go||apis/projectcontour/v1/detailedconditions.go": [
          "File: apis/projectcontour/v1/detailedconditions.go -> apis/projectcontour/v1/detailedconditions.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:  Warnings []SubCondition `json:\"warnings,omitempty\"`",
          "114: }",
          "",
          "[Removed Lines]",
          "116: const ValidConditionType string = \"Valid\"",
          "",
          "[Added Lines]",
          "116: const (",
          "118:  ConditionTypeAuthError = \"AuthError\"",
          "121:  ConditionTypeCORSError = \"CORSError\"",
          "125:  ConditionTypeIncludeError = \"IncludeError\"",
          "129:  ConditionTypeOrphanedError = \"Orphaned\"",
          "133:  ConditionTypePrefixReplaceError = \"PrefixReplaceError\"",
          "137:  ConditionTypeRootNamespaceError = \"RootNamespaceError\"",
          "141:  ConditionTypeRouteError = \"RouteError\"",
          "145:  ConditionTypeServiceError = \"ServiceError\"",
          "149:  ConditionTypeSpecError = \"SpecError\"",
          "153:  ConditionTypeTCPProxyIncludeError = \"TCPProxyIncludeError\"",
          "157:  ConditionTypeTCPProxyError = \"TCPProxyError\"",
          "161:  ConditionTypeTLSError = \"TLSError\"",
          "164:  ConditionTypeValid = \"Valid\"",
          "168:  ConditionTypeVirtualHostError = \"VirtualHostError\"",
          "169: )",
          "",
          "---------------"
        ],
        "apis/projectcontour/v1/helpers.go||apis/projectcontour/v1/helpers.go": [
          "File: apis/projectcontour/v1/helpers.go -> apis/projectcontour/v1/helpers.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: func (dc *DetailedCondition) IsPositivePolarity() bool {",
          "171:  switch dc.Type {",
          "173:   return true",
          "174:  default:",
          "175:   return false",
          "",
          "[Removed Lines]",
          "172:  case ValidConditionType:",
          "",
          "[Added Lines]",
          "172:  case ConditionTypeValid:",
          "",
          "---------------"
        ],
        "apis/projectcontour/v1/helpers_test.go||apis/projectcontour/v1/helpers_test.go": [
          "File: apis/projectcontour/v1/helpers_test.go -> apis/projectcontour/v1/helpers_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:    },",
          "45:    subconditions: []subConditionDetails{",
          "46:     {",
          "48:      reason:   \"TestReason\",",
          "49:      message:  \"We had a straightforward error\",",
          "50:     },",
          "",
          "[Removed Lines]",
          "47:      condType: \"SimpleTest\",",
          "",
          "[Added Lines]",
          "47:      condType: ConditionTypeServiceError,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     },",
          "59:     Errors: []SubCondition{",
          "60:      {",
          "62:       Reason:  \"TestReason\",",
          "63:       Message: \"We had a straightforward error\",",
          "64:       Status:  ConditionTrue,",
          "",
          "[Removed Lines]",
          "61:       Type:    \"SimpleTest\",",
          "",
          "[Added Lines]",
          "61:       Type:    \"ServiceError\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:    },",
          "75:    subconditions: []subConditionDetails{",
          "76:     {",
          "78:      reason:   \"TestReason\",",
          "79:      message:  \"We had a straightforward error\",",
          "80:     },",
          "",
          "[Removed Lines]",
          "77:      condType: \"SimpleTest\",",
          "",
          "[Added Lines]",
          "77:      condType: ConditionTypeServiceError,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:     },",
          "89:     Errors: []SubCondition{",
          "90:      {",
          "92:       Reason:  \"TestReason\",",
          "93:       Message: \"We had a straightforward error\",",
          "94:       Status:  ConditionTrue,",
          "",
          "[Removed Lines]",
          "91:       Type:    \"SimpleTest\",",
          "",
          "[Added Lines]",
          "91:       Type:    \"ServiceError\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "105:    },",
          "106:    subconditions: []subConditionDetails{",
          "107:     {",
          "109:      reason:   \"TestReason\",",
          "110:      message:  \"We had a straightforward error\",",
          "111:     },",
          "112:     {",
          "114:      reason:   \"TestReason2\",",
          "115:      message:  \"We had an extra straightforward error\",",
          "116:     },",
          "",
          "[Removed Lines]",
          "108:      condType: \"SimpleTest\",",
          "113:      condType: \"SecondTest\",",
          "",
          "[Added Lines]",
          "108:      condType: ConditionTypeServiceError,",
          "113:      condType: ConditionTypeSpecError,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "124:     },",
          "125:     Errors: []SubCondition{",
          "126:      {",
          "128:       Reason:  \"TestReason\",",
          "129:       Message: \"We had a straightforward error\",",
          "130:       Status:  ConditionTrue,",
          "131:      },",
          "132:      {",
          "134:       Reason:  \"TestReason2\",",
          "135:       Message: \"We had an extra straightforward error\",",
          "136:       Status:  ConditionTrue,",
          "",
          "[Removed Lines]",
          "127:       Type:    \"SimpleTest\",",
          "133:       Type:    \"SecondTest\",",
          "",
          "[Added Lines]",
          "127:       Type:    \"ServiceError\",",
          "133:       Type:    \"SpecError\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "146:    },",
          "147:    subconditions: []subConditionDetails{",
          "148:     {",
          "150:      reason:   \"TestReason\",",
          "151:      message:  \"We had a straightforward error\",",
          "152:     },",
          "153:     {",
          "155:      reason:   \"TestReason\",",
          "156:      message:  \"We had an extra straightforward error\",",
          "157:     },",
          "",
          "[Removed Lines]",
          "149:      condType: \"SimpleTest\",",
          "154:      condType: \"SecondTest\",",
          "",
          "[Added Lines]",
          "149:      condType: ConditionTypeServiceError,",
          "154:      condType: ConditionTypeSpecError,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "165:     },",
          "166:     Errors: []SubCondition{",
          "167:      {",
          "169:       Reason:  \"TestReason\",",
          "170:       Message: \"We had a straightforward error\",",
          "171:       Status:  ConditionTrue,",
          "172:      },",
          "173:      {",
          "175:       Reason:  \"TestReason\",",
          "176:       Message: \"We had an extra straightforward error\",",
          "177:       Status:  ConditionTrue,",
          "",
          "[Removed Lines]",
          "168:       Type:    \"SimpleTest\",",
          "174:       Type:    \"SecondTest\",",
          "",
          "[Added Lines]",
          "168:       Type:    \"ServiceError\",",
          "174:       Type:    \"SpecError\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "187:    },",
          "188:    subconditions: []subConditionDetails{",
          "189:     {",
          "191:      reason:   \"TestReason\",",
          "192:      message:  \"We had a straightforward error\",",
          "193:     },",
          "194:     {",
          "196:      reason:   \"TestReason\",",
          "197:      message:  \"We had an extra straightforward error\",",
          "198:     },",
          "",
          "[Removed Lines]",
          "190:      condType: \"SimpleTest\",",
          "195:      condType: \"SimpleTest\",",
          "",
          "[Added Lines]",
          "190:      condType: ConditionTypeServiceError,",
          "195:      condType: ConditionTypeSpecError,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "206:     },",
          "207:     Errors: []SubCondition{",
          "208:      {",
          "210:       Reason:  \"TestReason\",",
          "211:       Message: \"We had a straightforward error\",",
          "212:       Status:  ConditionTrue,",
          "213:      },",
          "214:      {",
          "216:       Reason:  \"TestReason\",",
          "217:       Message: \"We had an extra straightforward error\",",
          "218:       Status:  ConditionTrue,",
          "",
          "[Removed Lines]",
          "209:       Type:    \"SimpleTest\",",
          "215:       Type:    \"SimpleTest\",",
          "",
          "[Added Lines]",
          "209:       Type:    \"ServiceError\",",
          "215:       Type:    \"SpecError\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "228:    },",
          "229:    subconditions: []subConditionDetails{",
          "230:     {",
          "232:      reason:   \"TestReason\",",
          "233:      message:  \"We had a straightforward error\",",
          "234:     },",
          "235:     {",
          "237:      reason:   \"TestReason2\",",
          "238:      message:  \"We had an extra straightforward error\",",
          "239:     },",
          "",
          "[Removed Lines]",
          "231:      condType: \"SimpleTest\",",
          "236:      condType: \"SimpleTest\",",
          "",
          "[Added Lines]",
          "231:      condType: ConditionTypeServiceError,",
          "236:      condType: ConditionTypeServiceError,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "247:     },",
          "248:     Errors: []SubCondition{",
          "249:      {",
          "251:       Reason:  \"TestReason\",",
          "252:       Message: \"We had a straightforward error\",",
          "253:       Status:  ConditionTrue,",
          "254:      },",
          "255:      {",
          "257:       Reason:  \"TestReason2\",",
          "258:       Message: \"We had an extra straightforward error\",",
          "259:       Status:  ConditionTrue,",
          "",
          "[Removed Lines]",
          "250:       Type:    \"SimpleTest\",",
          "256:       Type:    \"SimpleTest\",",
          "",
          "[Added Lines]",
          "250:       Type:    \"ServiceError\",",
          "256:       Type:    \"ServiceError\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "548:  dcWithErrors := &DetailedCondition{",
          "549:   Errors: []SubCondition{",
          "550:    {",
          "552:     Reason:  \"SimpleReason\",",
          "553:     Message: \"We had a simple error 1\",",
          "554:     Status:  ConditionTrue,",
          "555:    },",
          "562:   },",
          "563:  }",
          "565:  firstSubCond := SubCondition{",
          "567:   Reason:  \"SimpleReason\",",
          "568:   Message: \"We had a simple error 1\",",
          "569:   Status:  ConditionTrue,",
          "570:  }",
          "573:  assert.True(t, ok)",
          "574:  assert.Equal(t, firstSubCond, gotSubCond)",
          "580:  dcEmpty := &DetailedCondition{}",
          "582:  assert.False(t, ok)",
          "583:  assert.Equal(t, SubCondition{}, emptySubCond)",
          "",
          "[Removed Lines]",
          "551:     Type:    \"SimpleTest1\",",
          "556:    {",
          "557:     Type:    \"SimpleTest2\",",
          "558:     Reason:  \"SimpleReason\",",
          "559:     Message: \"We had a simple error 2\",",
          "560:     Status:  ConditionTrue,",
          "561:    },",
          "566:   Type:    \"SimpleTest1\",",
          "572:  gotSubCond, ok := dcWithErrors.GetError(\"SimpleTest1\")",
          "576:  nonExistentCond, ok := dcWithErrors.GetError(\"nonexistent\")",
          "577:  assert.False(t, ok)",
          "578:  assert.Equal(t, SubCondition{}, nonExistentCond)",
          "581:  emptySubCond, ok := dcEmpty.GetError(\"SimpleTest1\")",
          "",
          "[Added Lines]",
          "551:     Type:    \"ServiceError\",",
          "560:   Type:    \"ServiceError\",",
          "566:  gotSubCond, ok := dcWithErrors.GetError(ConditionTypeServiceError)",
          "571:  emptySubCond, ok := dcEmpty.GetError(ConditionTypeServiceError)",
          "",
          "---------------"
        ],
        "internal/contour/metrics.go||internal/contour/metrics.go": [
          "File: internal/contour/metrics.go -> internal/contour/metrics.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:  case contour_api_v1.ConditionTrue:",
          "117:   metricValid[metrics.Meta{VHost: u.Vhost, Namespace: u.Fullname.Namespace}]++",
          "118:  case contour_api_v1.ConditionFalse:",
          "120:    metricOrphaned[metrics.Meta{Namespace: u.Fullname.Namespace}]++",
          "121:   } else {",
          "122:    metricInvalid[metrics.Meta{VHost: u.Vhost, Namespace: u.Fullname.Namespace}]++",
          "",
          "[Removed Lines]",
          "119:   if _, ok := validCond.GetError(string(status.OrphanedConditionType)); ok {",
          "",
          "[Added Lines]",
          "119:   if _, ok := validCond.GetError(contour_api_v1.ConditionTypeOrphanedError); ok {",
          "",
          "---------------"
        ],
        "internal/dag/extension_processor.go||internal/dag/extension_processor.go": [
          "File: internal/dag/extension_processor.go -> internal/dag/extension_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: ) *ExtensionCluster {",
          "82:  tp, err := timeoutPolicy(ext.Spec.TimeoutPolicy)",
          "83:  if err != nil {",
          "85:    \"spec.timeoutPolicy failed to parse: %s\", err)",
          "86:  }",
          "",
          "[Removed Lines]",
          "84:   validCondition.AddErrorf(\"SpecError\", \"TimeoutPolicyNotValid\",",
          "",
          "[Added Lines]",
          "84:   validCondition.AddErrorf(contour_api_v1.ConditionTypeSpecError, \"TimeoutPolicyNotValid\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:  if p.ClientCertificate != nil {",
          "90:   clientCertSecret, err = cache.LookupSecret(*p.ClientCertificate, validSecret)",
          "91:   if err != nil {",
          "93:     \"tls.envoy-client-certificate Secret %q is invalid: %s\", p.ClientCertificate, err)",
          "94:   }",
          "95:  }",
          "",
          "[Removed Lines]",
          "92:    validCondition.AddErrorf(\"TLSError\", \"SecretNotValid\",",
          "",
          "[Added Lines]",
          "92:    validCondition.AddErrorf(contour_api_v1.ConditionTypeTLSError, \"SecretNotValid\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  if v := ext.Spec.UpstreamValidation; v != nil {",
          "129:   if uv, err := cache.LookupUpstreamValidation(v, ext.GetNamespace()); err != nil {",
          "131:     \"TLS upstream validation policy error: %s\", err.Error())",
          "132:   } else {",
          "133:    extension.UpstreamValidation = uv",
          "",
          "[Removed Lines]",
          "130:    validCondition.AddErrorf(\"SpecError\", \"TLSUpstreamValidation\",",
          "",
          "[Added Lines]",
          "130:    validCondition.AddErrorf(contour_api_v1.ConditionTypeSpecError, \"TLSUpstreamValidation\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:   }",
          "145:   if extension.Protocol != \"h2\" {",
          "147:     \"upstream TLS validation not supported for %q protocol\", extension.Protocol)",
          "148:   }",
          "149:  }",
          "",
          "[Removed Lines]",
          "146:    validCondition.AddErrorf(\"SpecError\", \"InconsistentProtocol\",",
          "",
          "[Added Lines]",
          "146:    validCondition.AddErrorf(contour_api_v1.ConditionTypeSpecError, \"InconsistentProtocol\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "161:   svc, port, err := cache.LookupService(svcName, intstr.FromInt(target.Port))",
          "162:   if err != nil {",
          "164:     \"unresolved service %q: %s\", svcName, err)",
          "165:    continue",
          "166:   }",
          "169:   if svc.Spec.ExternalName != \"\" {",
          "171:     \"Service %q is of unsupported type %q.\", svcName, corev1.ServiceTypeExternalName)",
          "172:    continue",
          "173:   }",
          "",
          "[Removed Lines]",
          "163:    validCondition.AddErrorf(\"ServiceError\", \"ServiceUnresolvedReference\",",
          "170:    validCondition.AddErrorf(\"ServiceError\", \"UnsupportedServiceType\",",
          "",
          "[Added Lines]",
          "163:    validCondition.AddErrorf(contour_api_v1.ConditionTypeServiceError, \"ServiceUnresolvedReference\",",
          "170:    validCondition.AddErrorf(contour_api_v1.ConditionTypeServiceError, \"UnsupportedServiceType\",",
          "",
          "---------------"
        ],
        "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go": [
          "File: internal/dag/httpproxy_processor.go -> internal/dag/httpproxy_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   proxy, ok := p.source.httpproxies[meta]",
          "94:   if ok {",
          "95:    pa, commit := p.dag.StatusCache.ProxyAccessor(proxy)",
          "97:     \"Orphaned\",",
          "98:     \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\")",
          "99:    commit()",
          "",
          "[Removed Lines]",
          "96:    pa.ConditionFor(status.ValidCondition).AddError(string(status.OrphanedConditionType),",
          "",
          "[Added Lines]",
          "96:    pa.ConditionFor(status.ValidCondition).AddError(contour_api_v1.ConditionTypeOrphanedError,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:  host := proxy.Spec.VirtualHost.Fqdn",
          "117:  if isBlank(host) {",
          "119:    \"Spec.VirtualHost.Fqdn must be specified\")",
          "120:   return",
          "121:  }",
          "",
          "[Removed Lines]",
          "118:   validCond.AddError(\"VirtualHostError\", \"FQDNNotSpecified\",",
          "",
          "[Added Lines]",
          "118:   validCond.AddError(contour_api_v1.ConditionTypeVirtualHostError, \"FQDNNotSpecified\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:  if !p.rootAllowed(proxy.Namespace) {",
          "128:    \"root HTTPProxy cannot be defined in this namespace\")",
          "129:   return",
          "130:  }",
          "132:  if strings.Contains(host, \"*\") {",
          "134:    \"Spec.VirtualHost.Fqdn %q cannot use wildcards\", host)",
          "135:   return",
          "136:  }",
          "138:  if len(proxy.Spec.Routes) == 0 && len(proxy.Spec.Includes) == 0 && proxy.Spec.TCPProxy == nil {",
          "140:    \"HTTPProxy.Spec must have at least one Route, Include, or a TCPProxy\")",
          "141:   return",
          "142:  }",
          "",
          "[Removed Lines]",
          "127:   validCond.AddError(\"RootNamespaceError\", \"RootProxyNotAllowedInNamespace\",",
          "133:   validCond.AddErrorf(\"VirtualHostError\", \"WildCardNotAllowed\",",
          "139:   validCond.AddError(\"SpecError\", \"NothingDefined\",",
          "",
          "[Added Lines]",
          "127:   validCond.AddError(contour_api_v1.ConditionTypeRootNamespaceError, \"RootProxyNotAllowedInNamespace\",",
          "133:   validCond.AddErrorf(contour_api_v1.ConditionTypeVirtualHostError, \"WildCardNotAllowed\",",
          "139:   validCond.AddError(contour_api_v1.ConditionTypeSpecError, \"NothingDefined\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:  var tlsEnabled bool",
          "145:  if tls := proxy.Spec.VirtualHost.TLS; tls != nil {",
          "146:   if !isBlank(tls.SecretName) && tls.Passthrough {",
          "148:     \"Spec.VirtualHost.TLS: both Passthrough and SecretName were specified\")",
          "149:    return",
          "150:   }",
          "152:   if isBlank(tls.SecretName) && !tls.Passthrough {",
          "154:     \"Spec.VirtualHost.TLS: neither Passthrough nor SecretName were specified\")",
          "155:    return",
          "156:   }",
          "158:   if tls.Passthrough && tls.ClientValidation != nil {",
          "160:     \"Spec.VirtualHost.TLS passthrough cannot be combined with tls.clientValidation\")",
          "161:    return",
          "162:   }",
          "",
          "[Removed Lines]",
          "147:    validCond.AddError(\"TLSError\", \"TLSConfigNotValid\",",
          "153:    validCond.AddError(\"TLSError\", \"TLSConfigNotValid\",",
          "159:    validCond.AddError(\"TLSError\", \"TLSIncompatibleFeatures\",",
          "",
          "[Added Lines]",
          "147:    validCond.AddError(contour_api_v1.ConditionTypeTLSError, \"TLSConfigNotValid\",",
          "153:    validCond.AddError(contour_api_v1.ConditionTypeTLSError, \"TLSConfigNotValid\",",
          "159:    validCond.AddError(contour_api_v1.ConditionTypeTLSError, \"TLSIncompatibleFeatures\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "168:    secretName := k8s.NamespacedNameFrom(tls.SecretName, k8s.DefaultNamespace(proxy.Namespace))",
          "169:    sec, err := p.source.LookupSecret(secretName, validSecret)",
          "170:    if err != nil {",
          "172:      \"Spec.VirtualHost.TLS Secret %q is invalid: %s\", tls.SecretName, err)",
          "173:     return",
          "174:    }",
          "176:    if !p.source.DelegationPermitted(secretName, proxy.Namespace) {",
          "178:      \"Spec.VirtualHost.TLS Secret %q certificate delegation not permitted\", tls.SecretName)",
          "179:     return",
          "180:    }",
          "",
          "[Removed Lines]",
          "171:     validCond.AddErrorf(\"TLSError\", \"SecretNotValid\",",
          "177:     validCond.AddErrorf(\"TLSError\", \"DelegationNotPermitted\",",
          "",
          "[Added Lines]",
          "171:     validCond.AddErrorf(contour_api_v1.ConditionTypeTLSError, \"SecretNotValid\",",
          "177:     validCond.AddErrorf(contour_api_v1.ConditionTypeTLSError, \"DelegationNotPermitted\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "188:    if tls.EnableFallbackCertificate && tls.ClientValidation != nil {",
          "190:      \"Spec.Virtualhost.TLS fallback & client validation are incompatible\")",
          "191:     return",
          "192:    }",
          "",
          "[Removed Lines]",
          "189:     validCond.AddError(\"TLSError\", \"TLSIncompatibleFeatures\",",
          "",
          "[Added Lines]",
          "189:     validCond.AddError(contour_api_v1.ConditionTypeTLSError, \"TLSIncompatibleFeatures\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "199:    if tls.EnableFallbackCertificate && proxy.Spec.VirtualHost.AuthorizationConfigured() {",
          "201:      \"Spec.Virtualhost.TLS fallback & client authorization are incompatible\")",
          "202:     return",
          "203:    }",
          "",
          "[Removed Lines]",
          "200:     validCond.AddError(\"TLSError\", \"TLSIncompatibleFeatures\",",
          "",
          "[Added Lines]",
          "200:     validCond.AddError(contour_api_v1.ConditionTypeTLSError, \"TLSIncompatibleFeatures\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "206:    if tls.EnableFallbackCertificate {",
          "207:     if p.FallbackCertificate == nil {",
          "209:       \"Spec.Virtualhost.TLS enabled fallback but the fallback Certificate Secret is not configured in Contour configuration file\")",
          "210:      return",
          "211:     }",
          "213:     sec, err = p.source.LookupSecret(*p.FallbackCertificate, validSecret)",
          "214:     if err != nil {",
          "216:       \"Spec.Virtualhost.TLS Secret %q fallback certificate is invalid: %s\", p.FallbackCertificate, err)",
          "217:      return",
          "218:     }",
          "220:     if !p.source.DelegationPermitted(*p.FallbackCertificate, proxy.Namespace) {",
          "222:       \"Spec.VirtualHost.TLS fallback Secret %q is not configured for certificate delegation\", p.FallbackCertificate)",
          "223:      return",
          "224:     }",
          "",
          "[Removed Lines]",
          "208:      validCond.AddError(\"TLSError\", \"FallbackNotPresent\",",
          "215:      validCond.AddErrorf(\"TLSError\", \"FallbackNotValid\",",
          "221:      validCond.AddErrorf(\"TLSError\", \"FallbackNotDelegated\",",
          "",
          "[Added Lines]",
          "208:      validCond.AddError(contour_api_v1.ConditionTypeTLSError, \"FallbackNotPresent\",",
          "215:      validCond.AddErrorf(contour_api_v1.ConditionTypeTLSError, \"FallbackNotValid\",",
          "221:      validCond.AddErrorf(contour_api_v1.ConditionTypeTLSError, \"FallbackNotDelegated\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "230:    if tls.ClientValidation != nil {",
          "231:     dv, err := p.source.LookupDownstreamValidation(tls.ClientValidation, proxy.Namespace)",
          "232:     if err != nil {",
          "234:       \"Spec.VirtualHost.TLS client validation is invalid: %s\", err)",
          "235:      return",
          "236:     }",
          "",
          "[Removed Lines]",
          "233:      validCond.AddErrorf(\"TLSError\", \"ClientValidationInvalid\",",
          "",
          "[Added Lines]",
          "233:      validCond.AddErrorf(contour_api_v1.ConditionTypeTLSError, \"ClientValidationInvalid\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "242:     ref := defaultExtensionRef(auth.ExtensionServiceRef)",
          "244:     if ref.APIVersion != contour_api_v1alpha1.GroupVersion.String() {",
          "246:       \"Spec.Virtualhost.Authorization.extensionRef specifies an unsupported resource version %q\", auth.ExtensionServiceRef.APIVersion)",
          "247:      return",
          "248:     }",
          "",
          "[Removed Lines]",
          "245:      validCond.AddErrorf(\"AuthError\", \"AuthBadResourceVersion\",",
          "",
          "[Added Lines]",
          "245:      validCond.AddErrorf(contour_api_v1.ConditionTypeAuthError, \"AuthBadResourceVersion\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "256:     ext := p.dag.GetExtensionCluster(extensionClusterName(extensionName))",
          "257:     if ext == nil {",
          "259:       \"Spec.Virtualhost.Authorization.ServiceRef extension service %q not found\", extensionName)",
          "260:      return",
          "261:     }",
          "",
          "[Removed Lines]",
          "258:      validCond.AddErrorf(\"AuthError\", \"ExtensionServiceNotFound\",",
          "",
          "[Added Lines]",
          "258:      validCond.AddErrorf(contour_api_v1.ConditionTypeAuthError, \"ExtensionServiceNotFound\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "266:     timeout, err := timeout.Parse(auth.ResponseTimeout)",
          "267:     if err != nil {",
          "269:       \"Spec.Virtualhost.Authorization.ResponseTimeout is invalid: %s\", err)",
          "270:      return",
          "271:     }",
          "",
          "[Removed Lines]",
          "268:      validCond.AddErrorf(\"AuthError\", \"AuthResponseTimeoutInvalid\",",
          "",
          "[Added Lines]",
          "268:      validCond.AddErrorf(contour_api_v1.ConditionTypeAuthError, \"AuthResponseTimeoutInvalid\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "282:  if proxy.Spec.TCPProxy != nil {",
          "283:   if !tlsEnabled {",
          "285:     \"Spec.TCPProxy requires that either Spec.TLS.Passthrough or Spec.TLS.SecretName be set\")",
          "286:    return",
          "287:   }",
          "",
          "[Removed Lines]",
          "284:    validCond.AddError(\"TCPProxyError\", \"TLSMustBeConfigured\",",
          "",
          "[Added Lines]",
          "284:    validCond.AddError(contour_api_v1.ConditionTypeTCPProxyError, \"TLSMustBeConfigured\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "294:  insecure := p.dag.EnsureVirtualHost(host)",
          "295:  cp, err := toCORSPolicy(proxy.Spec.VirtualHost.CORSPolicy)",
          "296:  if err != nil {",
          "298:    \"Spec.VirtualHost.CORSPolicy: %s\", err)",
          "299:   return",
          "300:  }",
          "",
          "[Removed Lines]",
          "297:   validCond.AddErrorf(\"CORSError\", \"PolicyDidNotParse\",",
          "",
          "[Added Lines]",
          "297:   validCond.AddErrorf(contour_api_v1.ConditionTypeCORSError, \"PolicyDidNotParse\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "337:   }",
          "338:   if v.Name == proxy.Name && v.Namespace == proxy.Namespace {",
          "339:    path = append(path, fmt.Sprintf(\"%s/%s\", proxy.Namespace, proxy.Name))",
          "341:     \"include creates an include cycle: %s\", strings.Join(path, \" -> \"))",
          "342:    return nil",
          "343:   }",
          "",
          "[Removed Lines]",
          "340:    validCond.AddErrorf(\"IncludeError\", \"IncludeCreatesCycle\",",
          "",
          "[Added Lines]",
          "340:    validCond.AddErrorf(contour_api_v1.ConditionTypeIncludeError, \"IncludeCreatesCycle\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "350:  if includeMatchConditionsIdentical(proxy.Spec.Includes) {",
          "352:    \"duplicate conditions defined on an include\")",
          "353:   return nil",
          "354:  }",
          "",
          "[Removed Lines]",
          "351:   validCond.AddError(\"IncludeError\", \"DuplicateMatchConditions\",",
          "",
          "[Added Lines]",
          "351:   validCond.AddError(contour_api_v1.ConditionTypeIncludeError, \"DuplicateMatchConditions\",",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "363:   includedProxy, ok := p.source.httpproxies[types.NamespacedName{Name: include.Name, Namespace: namespace}]",
          "364:   if !ok {",
          "366:     \"include %s/%s not found\", namespace, include.Name)",
          "367:    return nil",
          "368:   }",
          "369:   if includedProxy.Spec.VirtualHost != nil {",
          "371:     \"root httpproxy cannot include another root httpproxy\")",
          "372:    return nil",
          "373:   }",
          "375:   if err := pathMatchConditionsValid(include.Conditions); err != nil {",
          "377:     \"include: %s\", err)",
          "378:    return nil",
          "379:   }",
          "",
          "[Removed Lines]",
          "365:    validCond.AddErrorf(\"IncludeError\", \"IncludeNotFound\",",
          "370:    validCond.AddErrorf(\"IncludeError\", \"RootIncludesRoot\",",
          "376:    validCond.AddErrorf(\"IncludeError\", \"PathMatchConditionsNotValid\",",
          "",
          "[Added Lines]",
          "365:    validCond.AddErrorf(contour_api_v1.ConditionTypeIncludeError, \"IncludeNotFound\",",
          "370:    validCond.AddErrorf(contour_api_v1.ConditionTypeIncludeError, \"RootIncludesRoot\",",
          "376:    validCond.AddErrorf(contour_api_v1.ConditionTypeIncludeError, \"PathMatchConditionsNotValid\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "390:  for _, route := range proxy.Spec.Routes {",
          "391:   if err := pathMatchConditionsValid(route.Conditions); err != nil {",
          "393:     \"route: %s\", err)",
          "394:    return nil",
          "395:   }",
          "",
          "[Removed Lines]",
          "392:    validCond.AddErrorf(\"RouteError\", \"PathMatchConditionsNotValid\",",
          "",
          "[Added Lines]",
          "392:    validCond.AddErrorf(contour_api_v1.ConditionTypeRouteError, \"PathMatchConditionsNotValid\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "400:   if err := headerMatchConditionsValid(conds); err != nil {",
          "402:     err.Error())",
          "403:    return nil",
          "404:   }",
          "406:   reqHP, err := headersPolicyRoute(route.RequestHeadersPolicy, true /* allow Host */)",
          "407:   if err != nil {",
          "409:     \"%s on request headers\", err)",
          "410:    return nil",
          "411:   }",
          "413:   respHP, err := headersPolicyRoute(route.ResponseHeadersPolicy, false /* disallow Host */)",
          "414:   if err != nil {",
          "416:     \"%s on response headers\", err)",
          "417:    return nil",
          "418:   }",
          "420:   if len(route.Services) < 1 {",
          "422:     \"route.services must have at least one entry\")",
          "423:    return nil",
          "424:   }",
          "426:   tp, err := timeoutPolicy(route.TimeoutPolicy)",
          "427:   if err != nil {",
          "429:     \"route.timeoutPolicy failed to parse: %s\", err)",
          "430:    return nil",
          "431:   }",
          "",
          "[Removed Lines]",
          "401:    validCond.AddError(\"RouteError\", \"HeaderMatchConditionsNotValid\",",
          "408:    validCond.AddErrorf(\"RouteError\", \"RequestHeadersPolicyInvalid\",",
          "415:    validCond.AddErrorf(\"RouteError\", \"ResponseHeaderPolicyInvalid\",",
          "421:    validCond.AddError(\"RouteError\", \"NoServicesPresent\",",
          "428:    validCond.AddErrorf(\"RouteError\", \"TimeoutPolicyNotValid\",",
          "",
          "[Added Lines]",
          "401:    validCond.AddError(contour_api_v1.ConditionTypeRouteError, \"HeaderMatchConditionsNotValid\",",
          "408:    validCond.AddErrorf(contour_api_v1.ConditionTypeRouteError, \"RequestHeadersPolicyInvalid\",",
          "415:    validCond.AddErrorf(contour_api_v1.ConditionTypeRouteError, \"ResponseHeaderPolicyInvalid\",",
          "421:    validCond.AddError(contour_api_v1.ConditionTypeRouteError, \"NoServicesPresent\",",
          "428:    validCond.AddErrorf(contour_api_v1.ConditionTypeRouteError, \"TimeoutPolicyNotValid\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "466:   if len(route.GetPrefixReplacements()) > 0 {",
          "467:    if !r.HasPathPrefix() {",
          "469:      \"cannot specify prefix replacements without a prefix condition\")",
          "470:     return nil",
          "471:    }",
          "473:    if reason, err := prefixReplacementsAreValid(route.GetPrefixReplacements()); err != nil {",
          "475:     return nil",
          "476:    }",
          "",
          "[Removed Lines]",
          "468:     validCond.AddError(\"PrefixReplaceError\", \"MustHavePrefix\",",
          "474:     validCond.AddError(\"PrefixReplaceError\", reason, err.Error())",
          "",
          "[Added Lines]",
          "468:     validCond.AddError(contour_api_v1.ConditionTypePrefixReplaceError, \"MustHavePrefix\",",
          "474:     validCond.AddError(contour_api_v1.ConditionTypePrefixReplaceError, reason, err.Error())",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "504:   for _, service := range route.Services {",
          "505:    if service.Port < 1 || service.Port > 65535 {",
          "507:      \"service %q: port must be in the range 1-65535\", service.Name)",
          "508:     return nil",
          "509:    }",
          "510:    m := types.NamespacedName{Name: service.Name, Namespace: proxy.Namespace}",
          "511:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
          "512:    if err != nil {",
          "514:      \"Spec.Routes unresolved service reference: %s\", err)",
          "515:     return nil",
          "516:    }",
          "",
          "[Removed Lines]",
          "506:     validCond.AddErrorf(\"ServiceError\", \"ServicePortInvalid\",",
          "513:     validCond.AddErrorf(\"ServiceError\", \"ServiceUnresolvedReference\",",
          "",
          "[Added Lines]",
          "506:     validCond.AddErrorf(contour_api_v1.ConditionTypeServiceError, \"ServicePortInvalid\",",
          "513:     validCond.AddErrorf(contour_api_v1.ConditionTypeServiceError, \"ServiceUnresolvedReference\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "519:    protocol, err := getProtocol(service, s)",
          "520:    if err != nil {",
          "522:     return nil",
          "523:    }",
          "",
          "[Removed Lines]",
          "521:     validCond.AddError(\"ServiceError\", \"UnsupportedProtocol\", err.Error())",
          "",
          "[Added Lines]",
          "521:     validCond.AddError(contour_api_v1.ConditionTypeServiceError, \"UnsupportedProtocol\", err.Error())",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "528:     uv, err = p.source.LookupUpstreamValidation(service.UpstreamValidation, proxy.Namespace)",
          "529:     if err != nil {",
          "531:       \"Service [%s:%d] TLS upstream validation policy error: %s\", service.Name, service.Port, err)",
          "532:      return nil",
          "533:     }",
          "",
          "[Removed Lines]",
          "530:      validCond.AddErrorf(\"ServiceError\", \"TLSUpstreamValidation\",",
          "",
          "[Added Lines]",
          "530:      validCond.AddErrorf(contour_api_v1.ConditionTypeServiceError, \"TLSUpstreamValidation\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "536:    reqHP, err := headersPolicyService(service.RequestHeadersPolicy)",
          "537:    if err != nil {",
          "539:      \"%s on request headers\", err)",
          "540:     return nil",
          "541:    }",
          "543:    respHP, err := headersPolicyService(service.ResponseHeadersPolicy)",
          "544:    if err != nil {",
          "546:      \"%s on response headers\", err)",
          "547:     return nil",
          "548:    }",
          "",
          "[Removed Lines]",
          "538:     validCond.AddErrorf(\"ServiceError\", \"RequestHeadersPolicyInvalid\",",
          "545:     validCond.AddErrorf(\"ServiceError\", \"ResponseHeadersPolicyInvalid\",",
          "",
          "[Added Lines]",
          "538:     validCond.AddErrorf(contour_api_v1.ConditionTypeServiceError, \"RequestHeadersPolicyInvalid\",",
          "545:     validCond.AddErrorf(contour_api_v1.ConditionTypeServiceError, \"ResponseHeadersPolicyInvalid\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "551:    if p.ClientCertificate != nil {",
          "552:     clientCertSecret, err = p.source.LookupSecret(*p.ClientCertificate, validSecret)",
          "553:     if err != nil {",
          "555:       \"tls.envoy-client-certificate Secret %q is invalid: %s\", p.ClientCertificate, err)",
          "556:      return nil",
          "557:     }",
          "",
          "[Removed Lines]",
          "554:      validCond.AddErrorf(\"TLSError\", \"SecretNotValid\",",
          "",
          "[Added Lines]",
          "554:      validCond.AddErrorf(contour_api_v1.ConditionTypeTLSError, \"SecretNotValid\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "571:     ClientCertificate:     clientCertSecret,",
          "572:    }",
          "573:    if service.Mirror && r.MirrorPolicy != nil {",
          "575:      \"only one service per route may be nominated as mirror\")",
          "576:     return nil",
          "577:    }",
          "",
          "[Removed Lines]",
          "574:     validCond.AddError(\"ServiceError\", \"OnlyOneMirror\",",
          "",
          "[Added Lines]",
          "574:     validCond.AddError(contour_api_v1.ConditionTypeServiceError, \"OnlyOneMirror\",",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "612:  }",
          "614:  if len(tcpproxy.Services) > 0 && tcpProxyInclude != nil {",
          "616:    \"cannot specify services and include in the same httpproxy\")",
          "617:   return false",
          "618:  }",
          "",
          "[Removed Lines]",
          "615:   validCond.AddError(\"TCPProxyError\", \"NoServicesAndInclude\",",
          "",
          "[Added Lines]",
          "615:   validCond.AddError(contour_api_v1.ConditionTypeTCPProxyError, \"NoServicesAndInclude\",",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "623:    m := types.NamespacedName{Name: service.Name, Namespace: httpproxy.Namespace}",
          "624:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
          "625:    if err != nil {",
          "627:      \"Spec.TCPProxy unresolved service reference: %s\", err)",
          "628:     return false",
          "629:    }",
          "",
          "[Removed Lines]",
          "626:     validCond.AddErrorf(\"TCPProxyError\", \"UnresolvedServiceRef\",",
          "",
          "[Added Lines]",
          "626:     validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\",",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "643:  if tcpProxyInclude == nil {",
          "646:    \"either services or inclusion must be specified\")",
          "647:   return false",
          "648:  }",
          "",
          "[Removed Lines]",
          "645:   validCond.AddError(\"TCPProxyError\", \"NothingDefined\",",
          "",
          "[Added Lines]",
          "645:   validCond.AddError(contour_api_v1.ConditionTypeTCPProxyError, \"NothingDefined\",",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "656:  m := types.NamespacedName{Name: tcpProxyInclude.Name, Namespace: namespace}",
          "657:  dest, ok := p.source.httpproxies[m]",
          "658:  if !ok {",
          "660:    \"include %s/%s not found\", m.Namespace, m.Name)",
          "661:   return false",
          "662:  }",
          "664:  if dest.Spec.VirtualHost != nil {",
          "667:    \"root httpproxy cannot include another root httpproxy\")",
          "668:   return false",
          "669:  }",
          "",
          "[Removed Lines]",
          "659:   validCond.AddErrorf(\"TCPProxyIncludeError\", \"IncludeNotFound\",",
          "666:   validCond.AddErrorf(\"TCPProxyIncludeError\", \"RootIncludesRoot\",",
          "",
          "[Added Lines]",
          "659:   validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyIncludeError, \"IncludeNotFound\",",
          "666:   validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyIncludeError, \"RootIncludesRoot\",",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "679:  for _, hp := range visited {",
          "680:   if dest.Name == hp.Name && dest.Namespace == hp.Namespace {",
          "681:    path = append(path, fmt.Sprintf(\"%s/%s\", dest.Namespace, dest.Name))",
          "683:     \"include creates a cycle: %s\", strings.Join(path, \" -> \"))",
          "684:    return false",
          "685:   }",
          "",
          "[Removed Lines]",
          "682:    validCond.AddErrorf(\"TCPProxyIncludeError\", \"IncludeCreatesCycle\",",
          "",
          "[Added Lines]",
          "682:    validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyIncludeError, \"IncludeCreatesCycle\",",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "723:    for _, proxy := range proxies {",
          "724:     pa, commit := p.dag.StatusCache.ProxyAccessor(proxy)",
          "725:     pa.Vhost = fqdn",
          "727:      \"DuplicateVhost\",",
          "728:      msg)",
          "729:     commit()",
          "",
          "[Removed Lines]",
          "726:     pa.ConditionFor(status.ValidCondition).AddError(\"VirtualHostError\",",
          "",
          "[Added Lines]",
          "726:     pa.ConditionFor(status.ValidCondition).AddError(contour_api_v1.ConditionTypeVirtualHostError,",
          "",
          "---------------"
        ],
        "internal/dag/status_test.go||internal/dag/status_test.go": [
          "File: internal/dag/status_test.go -> internal/dag/status_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   objs: []interface{}{proxyNoFQDN},",
          "90:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "91:    {Name: proxyNoFQDN.Name, Namespace: proxyNoFQDN.Namespace}: fixture.NewValidCondition().WithGeneration(proxyNoFQDN.Generation).",
          "93:   },",
          "94:  })",
          "",
          "[Removed Lines]",
          "92:     WithError(\"VirtualHostError\", \"FQDNNotSpecified\", \"Spec.VirtualHost.Fqdn must be specified\"),",
          "",
          "[Added Lines]",
          "92:     WithError(contour_api_v1.ConditionTypeVirtualHostError, \"FQDNNotSpecified\", \"Spec.VirtualHost.Fqdn must be specified\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:     Valid(),",
          "208:    {Name: proxyChildInvalidBadPort.Name, Namespace: proxyChildInvalidBadPort.Namespace}: fixture.NewValidCondition().",
          "209:     WithGeneration(proxyChildInvalidBadPort.Generation).",
          "211:    {Name: proxyMultiIncludeOneInvalid.Name, Namespace: proxyMultiIncludeOneInvalid.Namespace}: fixture.NewValidCondition().",
          "212:     WithGeneration(proxyMultiIncludeOneInvalid.Generation).",
          "213:     Valid(),",
          "",
          "[Removed Lines]",
          "210:     WithError(\"ServiceError\", \"ServicePortInvalid\", `service \"foo3\": port must be in the range 1-65535`),",
          "",
          "[Added Lines]",
          "210:     WithError(contour_api_v1.ConditionTypeServiceError, \"ServicePortInvalid\", `service \"foo3\": port must be in the range 1-65535`),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "220:    {Name: proxyNoFQDN.Name, Namespace: proxyNoFQDN.Namespace}: fixture.NewValidCondition().",
          "221:     WithGeneration(proxyNoFQDN.Generation).",
          "223:    {Name: proxyChildValidFoo2.Name, Namespace: proxyChildValidFoo2.Namespace}: fixture.NewValidCondition().",
          "224:     WithGeneration(proxyChildValidFoo2.Generation).",
          "225:     Valid(),",
          "",
          "[Removed Lines]",
          "222:     WithError(\"VirtualHostError\", \"FQDNNotSpecified\", \"Spec.VirtualHost.Fqdn must be specified\"),",
          "",
          "[Added Lines]",
          "222:     WithError(contour_api_v1.ConditionTypeVirtualHostError, \"FQDNNotSpecified\", \"Spec.VirtualHost.Fqdn must be specified\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "310:    {Name: proxyDelegatedTCPTLS.Name, Namespace: proxyDelegatedTCPTLS.Namespace}: fixture.NewValidCondition().",
          "311:     WithGeneration(proxyDelegatedTCPTLS.Generation).",
          "313:   },",
          "314:  })",
          "",
          "[Removed Lines]",
          "312:     WithError(\"TLSError\", \"DelegationNotPermitted\", `Spec.VirtualHost.TLS Secret \"projectcontour/default-ssl-cert\" certificate delegation not permitted`),",
          "",
          "[Added Lines]",
          "312:     WithError(contour_api_v1.ConditionTypeTLSError, \"DelegationNotPermitted\", `Spec.VirtualHost.TLS Secret \"projectcontour/default-ssl-cert\" certificate delegation not permitted`),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "343:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "344:    {Name: proxyDelegatedTLS.Name, Namespace: proxyDelegatedTLS.Namespace}: fixture.NewValidCondition().",
          "345:     WithGeneration(proxyDelegatedTCPTLS.Generation).",
          "347:   },",
          "348:  })",
          "",
          "[Removed Lines]",
          "346:     WithError(\"TLSError\", \"DelegationNotPermitted\", `Spec.VirtualHost.TLS Secret \"projectcontour/default-ssl-cert\" certificate delegation not permitted`),",
          "",
          "[Added Lines]",
          "346:     WithError(contour_api_v1.ConditionTypeTLSError, \"DelegationNotPermitted\", `Spec.VirtualHost.TLS Secret \"projectcontour/default-ssl-cert\" certificate delegation not permitted`),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "501:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "502:    {Name: proxyInvalidNegativePortHomeService.Name, Namespace: proxyInvalidNegativePortHomeService.Namespace}: fixture.NewValidCondition().",
          "503:     WithGeneration(proxyInvalidNegativePortHomeService.Generation).",
          "505:   },",
          "506:  })",
          "",
          "[Removed Lines]",
          "504:     WithError(\"ServiceError\", \"ServicePortInvalid\", `service \"home\": port must be in the range 1-65535`),",
          "",
          "[Added Lines]",
          "504:     WithError(contour_api_v1.ConditionTypeServiceError, \"ServicePortInvalid\", `service \"home\": port must be in the range 1-65535`),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "532:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "533:    {Name: proxyInvalidOutsideRootNamespace.Name, Namespace: proxyInvalidOutsideRootNamespace.Namespace}: fixture.NewValidCondition().",
          "534:     WithGeneration(proxyInvalidNegativePortHomeService.Generation).",
          "536:   },",
          "537:  })",
          "",
          "[Removed Lines]",
          "535:     WithError(\"RootNamespaceError\", \"RootProxyNotAllowedInNamespace\", \"root HTTPProxy cannot be defined in this namespace\"),",
          "",
          "[Added Lines]",
          "535:     WithError(contour_api_v1.ConditionTypeRootNamespaceError, \"RootProxyNotAllowedInNamespace\", \"root HTTPProxy cannot be defined in this namespace\"),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "567:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "568:    {Name: proxyInvalidIncludeCycle.Name, Namespace: proxyInvalidIncludeCycle.Namespace}: fixture.NewValidCondition().",
          "569:     WithGeneration(proxyInvalidIncludeCycle.Generation).",
          "571:   },",
          "572:  })",
          "",
          "[Removed Lines]",
          "570:     WithError(\"IncludeError\", \"RootIncludesRoot\", \"root httpproxy cannot include another root httpproxy\"),",
          "",
          "[Added Lines]",
          "570:     WithError(contour_api_v1.ConditionTypeIncludeError, \"RootIncludesRoot\", \"root httpproxy cannot include another root httpproxy\"),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "614:     WithGeneration(proxyIncludesProxyWithIncludeCycle.Generation).Valid(),",
          "615:    {Name: proxyIncludedChildInvalidIncludeCycle.Name, Namespace: proxyIncludedChildInvalidIncludeCycle.Namespace}: fixture.NewValidCondition().",
          "616:     WithGeneration(proxyIncludedChildInvalidIncludeCycle.Generation).",
          "618:   },",
          "619:  })",
          "",
          "[Removed Lines]",
          "617:     WithError(\"IncludeError\", \"IncludeCreatesCycle\", \"include creates an include cycle: roots/parent -> roots/child -> roots/child\"),",
          "",
          "[Added Lines]",
          "617:     WithError(contour_api_v1.ConditionTypeIncludeError, \"IncludeCreatesCycle\", \"include creates an include cycle: roots/parent -> roots/child -> roots/child\"),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "665:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "666:    {Name: proxyNotRootIncludeRootProxy.Name, Namespace: proxyNotRootIncludeRootProxy.Namespace}: fixture.NewValidCondition().",
          "667:     WithGeneration(proxyNotRootIncludeRootProxy.Generation).",
          "669:    {Name: proxyIncludedChildValid.Name, Namespace: proxyIncludedChildValid.Namespace}: fixture.NewValidCondition().",
          "670:     WithGeneration(proxyIncludedChildValid.Generation).",
          "671:     Orphaned(),",
          "",
          "[Removed Lines]",
          "668:     WithError(\"VirtualHostError\", \"FQDNNotSpecified\", \"Spec.VirtualHost.Fqdn must be specified\"),",
          "",
          "[Added Lines]",
          "668:     WithError(contour_api_v1.ConditionTypeVirtualHostError, \"FQDNNotSpecified\", \"Spec.VirtualHost.Fqdn must be specified\"),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "699:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "700:    {Name: proxyWildCardFQDN.Name, Namespace: proxyWildCardFQDN.Namespace}: fixture.NewValidCondition().",
          "701:     WithGeneration(proxyWildCardFQDN.Generation).",
          "703:   },",
          "704:  })",
          "",
          "[Removed Lines]",
          "702:     WithError(\"VirtualHostError\", \"WildCardNotAllowed\", `Spec.VirtualHost.Fqdn \"example.*.com\" cannot use wildcards`),",
          "",
          "[Added Lines]",
          "702:     WithError(contour_api_v1.ConditionTypeVirtualHostError, \"WildCardNotAllowed\", `Spec.VirtualHost.Fqdn \"example.*.com\" cannot use wildcards`),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "730:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "731:    {Name: proxyInvalidServiceInvalid.Name, Namespace: proxyInvalidServiceInvalid.Namespace}: fixture.NewValidCondition().",
          "732:     WithGeneration(proxyInvalidServiceInvalid.Generation).",
          "734:   },",
          "735:  })",
          "",
          "[Removed Lines]",
          "733:     WithError(\"ServiceError\", \"ServiceUnresolvedReference\", `Spec.Routes unresolved service reference: service \"roots/invalid\" not found`),",
          "",
          "[Added Lines]",
          "733:     WithError(contour_api_v1.ConditionTypeServiceError, \"ServiceUnresolvedReference\", `Spec.Routes unresolved service reference: service \"roots/invalid\" not found`),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "761:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "762:    {Name: proxyInvalidServicePortInvalid.Name, Namespace: proxyInvalidServicePortInvalid.Namespace}: fixture.NewValidCondition().",
          "763:     WithGeneration(proxyInvalidServiceInvalid.Generation).",
          "765:   },",
          "766:  })",
          "",
          "[Removed Lines]",
          "764:     WithError(\"ServiceError\", \"ServiceUnresolvedReference\", `Spec.Routes unresolved service reference: port \"9999\" on service \"roots/home\" not matched`),",
          "",
          "[Added Lines]",
          "764:     WithError(contour_api_v1.ConditionTypeServiceError, \"ServiceUnresolvedReference\", `Spec.Routes unresolved service reference: port \"9999\" on service \"roots/home\" not matched`),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "809:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "810:    {Name: proxyValidExampleCom.Name, Namespace: proxyValidExampleCom.Namespace}: fixture.NewValidCondition().",
          "811:     WithGeneration(proxyValidExampleCom.Generation).",
          "813:    {Name: proxyValidReuseExampleCom.Name, Namespace: proxyValidReuseExampleCom.Namespace}: fixture.NewValidCondition().",
          "814:     WithGeneration(proxyValidReuseExampleCom.Generation).",
          "816:   },",
          "817:  })",
          "",
          "[Removed Lines]",
          "812:     WithError(\"VirtualHostError\", \"DuplicateVhost\", `fqdn \"example.com\" is used in multiple HTTPProxies: roots/example-com, roots/other-example`),",
          "815:     WithError(\"VirtualHostError\", \"DuplicateVhost\", `fqdn \"example.com\" is used in multiple HTTPProxies: roots/example-com, roots/other-example`),",
          "",
          "[Added Lines]",
          "812:     WithError(contour_api_v1.ConditionTypeVirtualHostError, \"DuplicateVhost\", `fqdn \"example.com\" is used in multiple HTTPProxies: roots/example-com, roots/other-example`),",
          "815:     WithError(contour_api_v1.ConditionTypeVirtualHostError, \"DuplicateVhost\", `fqdn \"example.com\" is used in multiple HTTPProxies: roots/example-com, roots/other-example`),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "864:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "865:    {Name: proxyRootIncludesRoot.Name, Namespace: proxyRootIncludesRoot.Namespace}: fixture.NewValidCondition().",
          "866:     WithGeneration(proxyRootIncludesRoot.Generation).",
          "868:    {Name: proxyRootIncludedByRoot.Name, Namespace: proxyRootIncludedByRoot.Namespace}: fixture.NewValidCondition().",
          "869:     WithGeneration(proxyRootIncludedByRoot.Generation).",
          "871:   },",
          "872:  })",
          "",
          "[Removed Lines]",
          "867:     WithError(\"VirtualHostError\", \"DuplicateVhost\", `fqdn \"blog.containersteve.com\" is used in multiple HTTPProxies: marketing/blog, roots/root-blog`),",
          "870:     WithError(\"VirtualHostError\", \"DuplicateVhost\", `fqdn \"blog.containersteve.com\" is used in multiple HTTPProxies: marketing/blog, roots/root-blog`),",
          "",
          "[Added Lines]",
          "867:     WithError(contour_api_v1.ConditionTypeVirtualHostError, \"DuplicateVhost\", `fqdn \"blog.containersteve.com\" is used in multiple HTTPProxies: marketing/blog, roots/root-blog`),",
          "870:     WithError(contour_api_v1.ConditionTypeVirtualHostError, \"DuplicateVhost\", `fqdn \"blog.containersteve.com\" is used in multiple HTTPProxies: marketing/blog, roots/root-blog`),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "913:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "914:    {Name: proxyIncludesRootDifferentFQDN.Name, Namespace: proxyIncludesRootDifferentFQDN.Namespace}: fixture.NewValidCondition().",
          "915:     WithGeneration(proxyIncludesRootDifferentFQDN.Generation).",
          "917:    {Name: proxyRootIncludedByRootDiffFQDN.Name, Namespace: proxyRootIncludedByRootDiffFQDN.Namespace}: fixture.NewValidCondition().",
          "918:     WithGeneration(proxyRootIncludedByRootDiffFQDN.Generation).",
          "919:     Valid(),",
          "",
          "[Removed Lines]",
          "916:     WithError(\"IncludeError\", \"RootIncludesRoot\", \"root httpproxy cannot include another root httpproxy\"),",
          "",
          "[Added Lines]",
          "916:     WithError(contour_api_v1.ConditionTypeIncludeError, \"RootIncludesRoot\", \"root httpproxy cannot include another root httpproxy\"),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1031:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1032:    {Name: proxyInvalidTwoMirrors.Name, Namespace: proxyInvalidTwoMirrors.Namespace}: fixture.NewValidCondition().",
          "1033:     WithGeneration(proxyInvalidTwoMirrors.Generation).",
          "1035:   },",
          "1036:  })",
          "",
          "[Removed Lines]",
          "1034:     WithError(\"ServiceError\", \"OnlyOneMirror\", \"only one service per route may be nominated as mirror\"),",
          "",
          "[Added Lines]",
          "1034:     WithError(contour_api_v1.ConditionTypeServiceError, \"OnlyOneMirror\", \"only one service per route may be nominated as mirror\"),",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1071:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1072:    {Name: proxyInvalidDuplicateMatchConditionHeaders.Name, Namespace: proxyInvalidDuplicateMatchConditionHeaders.Namespace}: fixture.NewValidCondition().",
          "1073:     WithGeneration(proxyInvalidDuplicateMatchConditionHeaders.Generation).",
          "1075:   },",
          "1076:  })",
          "",
          "[Removed Lines]",
          "1074:     WithError(\"RouteError\", \"HeaderMatchConditionsNotValid\", \"cannot specify duplicate header 'exact match' conditions in the same route\"),",
          "",
          "[Added Lines]",
          "1074:     WithError(contour_api_v1.ConditionTypeRouteError, \"HeaderMatchConditionsNotValid\", \"cannot specify duplicate header 'exact match' conditions in the same route\"),",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1133:    {Name: proxyValidDelegatedRoots.Name,",
          "1134:     Namespace: proxyValidDelegatedRoots.Namespace}: fixture.NewValidCondition().",
          "1135:     WithGeneration(proxyValidDelegatedRoots.Generation).",
          "1137:   },",
          "1138:  })",
          "",
          "[Removed Lines]",
          "1136:     WithError(\"RouteError\", \"HeaderMatchConditionsNotValid\", \"cannot specify duplicate header 'exact match' conditions in the same route\"),",
          "",
          "[Added Lines]",
          "1136:     WithError(contour_api_v1.ConditionTypeRouteError, \"HeaderMatchConditionsNotValid\", \"cannot specify duplicate header 'exact match' conditions in the same route\"),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1206:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1207:    {Name: proxyInvalidMultiplePrefixes.Name, Namespace: proxyInvalidMultiplePrefixes.Namespace}: fixture.NewValidCondition().",
          "1208:     WithGeneration(proxyInvalidMultiplePrefixes.Generation).",
          "1210:   },",
          "1211:  })",
          "",
          "[Removed Lines]",
          "1209:     WithError(\"RouteError\", \"PathMatchConditionsNotValid\", \"route: more than one prefix is not allowed in a condition block\"),",
          "",
          "[Added Lines]",
          "1209:     WithError(contour_api_v1.ConditionTypeRouteError, \"PathMatchConditionsNotValid\", \"route: more than one prefix is not allowed in a condition block\"),",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1259:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1260:    {Name: proxyInvalidTwoPrefixesWithInclude.Name, Namespace: proxyInvalidTwoPrefixesWithInclude.Namespace}: fixture.NewValidCondition().",
          "1261:     WithGeneration(proxyInvalidTwoPrefixesWithInclude.Generation).",
          "1263:    {Name: proxyValidChildTeamA.Name, Namespace: proxyValidChildTeamA.Namespace}: fixture.NewValidCondition().",
          "1264:     WithGeneration(proxyValidChildTeamA.Generation).",
          "1265:     Orphaned(),",
          "",
          "[Removed Lines]",
          "1262:     WithError(\"IncludeError\", \"PathMatchConditionsNotValid\", \"include: more than one prefix is not allowed in a condition block\"),",
          "",
          "[Added Lines]",
          "1262:     WithError(contour_api_v1.ConditionTypeIncludeError, \"PathMatchConditionsNotValid\", \"include: more than one prefix is not allowed in a condition block\"),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1294:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1295:    {Name: proxyInvalidPrefixNoSlash.Name, Namespace: proxyInvalidPrefixNoSlash.Namespace}: fixture.NewValidCondition().",
          "1296:     WithGeneration(proxyInvalidPrefixNoSlash.Generation).",
          "1298:   },",
          "1299:  })",
          "",
          "[Removed Lines]",
          "1297:     WithError(\"RouteError\", \"PathMatchConditionsNotValid\", \"route: prefix conditions must start with /, api was supplied\"),",
          "",
          "[Added Lines]",
          "1297:     WithError(contour_api_v1.ConditionTypeRouteError, \"PathMatchConditionsNotValid\", \"route: prefix conditions must start with /, api was supplied\"),",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1329:   objs: []interface{}{proxyInvalidIncludePrefixNoSlash, proxyValidChildTeamA, fixture.ServiceRootsKuard},",
          "1330:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1331:    {Name: proxyInvalidIncludePrefixNoSlash.Name, Namespace: proxyInvalidIncludePrefixNoSlash.Namespace}: fixture.NewValidCondition().",
          "1333:    {Name: proxyValidChildTeamA.Name, Namespace: proxyValidChildTeamA.Namespace}: fixture.NewValidCondition().",
          "1334:     Orphaned(),",
          "1335:   },",
          "",
          "[Removed Lines]",
          "1332:     WithError(\"IncludeError\", \"PathMatchConditionsNotValid\", \"include: prefix conditions must start with /, api was supplied\"),",
          "",
          "[Added Lines]",
          "1332:     WithError(contour_api_v1.ConditionTypeIncludeError, \"PathMatchConditionsNotValid\", \"include: prefix conditions must start with /, api was supplied\"),",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1364:   objs: []interface{}{proxyInvalidTCPProxyIncludeAndService, fixture.ServiceRootsKuard},",
          "1365:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1366:    {Name: proxyInvalidTCPProxyIncludeAndService.Name, Namespace: proxyInvalidTCPProxyIncludeAndService.Namespace}: fixture.NewValidCondition().",
          "1368:   },",
          "1369:  })",
          "",
          "[Removed Lines]",
          "1367:     WithError(\"TCPProxyError\", \"NoServicesAndInclude\", \"cannot specify services and include in the same httpproxy\"),",
          "",
          "[Added Lines]",
          "1367:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"NoServicesAndInclude\", \"cannot specify services and include in the same httpproxy\"),",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1388:   objs: []interface{}{proxyTCPNoServiceOrInclusion, fixture.ServiceRootsKuard},",
          "1389:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1390:    {Name: proxyTCPNoServiceOrInclusion.Name, Namespace: proxyTCPNoServiceOrInclusion.Namespace}: fixture.NewValidCondition().",
          "1392:   },",
          "1393:  })",
          "",
          "[Removed Lines]",
          "1391:     WithError(\"TCPProxyError\", \"NothingDefined\", \"either services or inclusion must be specified\"),",
          "",
          "[Added Lines]",
          "1391:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"NothingDefined\", \"either services or inclusion must be specified\"),",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1417:   objs: []interface{}{proxyTCPIncludesFoo, fixture.ServiceRootsKuard},",
          "1418:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1419:    {Name: proxyTCPIncludesFoo.Name, Namespace: proxyTCPIncludesFoo.Namespace}: fixture.NewValidCondition().",
          "1421:   },",
          "1422:  })",
          "",
          "[Removed Lines]",
          "1420:     WithError(\"TCPProxyIncludeError\", \"IncludeNotFound\", \"include roots/foo not found\"),",
          "",
          "[Added Lines]",
          "1420:     WithError(contour_api_v1.ConditionTypeTCPProxyIncludeError, \"IncludeNotFound\", \"include roots/foo not found\"),",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1446:   objs: []interface{}{proxyTCPIncludesFoo, proxyValidTCPRoot, fixture.ServiceRootsKuard},",
          "1447:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1448:    {Name: proxyTCPIncludesFoo.Name, Namespace: proxyTCPIncludesFoo.Namespace}: fixture.NewValidCondition().",
          "1450:    {Name: proxyValidTCPRoot.Name, Namespace: proxyValidTCPRoot.Namespace}: fixture.NewValidCondition().Valid(),",
          "1451:   },",
          "1452:  })",
          "",
          "[Removed Lines]",
          "1449:     WithError(\"TCPProxyIncludeError\", \"RootIncludesRoot\", \"root httpproxy cannot include another root httpproxy\"),",
          "",
          "[Added Lines]",
          "1449:     WithError(contour_api_v1.ConditionTypeTCPProxyIncludeError, \"RootIncludesRoot\", \"root httpproxy cannot include another root httpproxy\"),",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1549:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1550:    {Name: proxyInvalidConflictingIncludeConditions.Name,",
          "1551:     Namespace: proxyInvalidConflictingIncludeConditions.Namespace}: fixture.NewValidCondition().",
          "1553:    {Name: proxyValidBlogTeamA.Name, Namespace: proxyValidBlogTeamA.Namespace}: fixture.NewValidCondition().",
          "1554:     Orphaned(),",
          "1555:    {Name: proxyValidBlogTeamB.Name, Namespace: proxyValidBlogTeamB.Namespace}: fixture.NewValidCondition().",
          "",
          "[Removed Lines]",
          "1552:     WithError(\"IncludeError\", \"DuplicateMatchConditions\", \"duplicate conditions defined on an include\"),",
          "",
          "[Added Lines]",
          "1552:     WithError(contour_api_v1.ConditionTypeIncludeError, \"DuplicateMatchConditions\", \"duplicate conditions defined on an include\"),",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1602:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1603:    {Name: proxyInvalidConflictHeaderConditions.Name,",
          "1604:     Namespace: proxyInvalidConflictHeaderConditions.Namespace}: fixture.NewValidCondition().",
          "1606:    {Name: proxyValidBlogTeamA.Name,",
          "1607:     Namespace: proxyValidBlogTeamA.Namespace}: fixture.NewValidCondition().Orphaned(),",
          "1608:    {Name: proxyValidBlogTeamB.Name,",
          "",
          "[Removed Lines]",
          "1605:     WithError(\"IncludeError\", \"DuplicateMatchConditions\", \"duplicate conditions defined on an include\"),",
          "",
          "[Added Lines]",
          "1605:     WithError(contour_api_v1.ConditionTypeIncludeError, \"DuplicateMatchConditions\", \"duplicate conditions defined on an include\"),",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1657:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1658:    {Name: proxyInvalidDuplicateHeaderAndPathConditions.Name,",
          "1659:     Namespace: proxyInvalidDuplicateHeaderAndPathConditions.Namespace}: fixture.NewValidCondition().",
          "1661:    {Name: proxyValidBlogTeamA.Name,",
          "1662:     Namespace: proxyValidBlogTeamA.Namespace}: fixture.NewValidCondition().",
          "1663:     Orphaned(),",
          "",
          "[Removed Lines]",
          "1660:     WithError(\"IncludeError\", \"DuplicateMatchConditions\", \"duplicate conditions defined on an include\"),",
          "",
          "[Added Lines]",
          "1660:     WithError(contour_api_v1.ConditionTypeIncludeError, \"DuplicateMatchConditions\", \"duplicate conditions defined on an include\"),",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1686:   objs: []interface{}{proxyInvalidMissingInclude, fixture.ServiceRootsKuard},",
          "1687:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1688:    {Name: proxyInvalidMissingInclude.Name, Namespace: proxyInvalidMissingInclude.Namespace}: fixture.NewValidCondition().",
          "1690:   },",
          "1691:  })",
          "",
          "[Removed Lines]",
          "1689:     WithError(\"IncludeError\", \"IncludeNotFound\", \"include roots/child not found\"),",
          "",
          "[Added Lines]",
          "1689:     WithError(contour_api_v1.ConditionTypeIncludeError, \"IncludeNotFound\", \"include roots/child not found\"),",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1715:   objs: []interface{}{proxyTCPInvalidMissingService},",
          "1716:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1717:    {Name: proxyTCPInvalidMissingService.Name, Namespace: proxyTCPInvalidMissingService.Namespace}: fixture.NewValidCondition().",
          "1719:   },",
          "1720:  })",
          "",
          "[Removed Lines]",
          "1718:     WithError(\"TCPProxyError\", \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
          "",
          "[Added Lines]",
          "1718:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1744:   objs: []interface{}{proxyTCPInvalidPortNotMatched, fixture.ServiceRootsKuard},",
          "1745:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1746:    {Name: proxyTCPInvalidPortNotMatched.Name, Namespace: proxyTCPInvalidPortNotMatched.Namespace}: fixture.NewValidCondition().",
          "1748:   },",
          "1749:  })",
          "",
          "[Removed Lines]",
          "1747:     WithError(\"TCPProxyError\", \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
          "",
          "[Added Lines]",
          "1747:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1770:   objs: []interface{}{proxyTCPInvalidMissingTLS},",
          "1771:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1772:    {Name: proxyTCPInvalidMissingTLS.Name, Namespace: proxyTCPInvalidMissingTLS.Namespace}: fixture.NewValidCondition().",
          "1774:   },",
          "1775:  })",
          "",
          "[Removed Lines]",
          "1773:     WithError(\"TCPProxyError\", \"TLSMustBeConfigured\", \"Spec.TCPProxy requires that either Spec.TLS.Passthrough or Spec.TLS.SecretName be set\"),",
          "",
          "[Added Lines]",
          "1773:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"TLSMustBeConfigured\", \"Spec.TCPProxy requires that either Spec.TLS.Passthrough or Spec.TLS.SecretName be set\"),",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1804:   objs: []interface{}{fixture.SecretRootsCert, fixture.ServiceRootsKuard, proxyInvalidMissingServiceWithTCPProxy},",
          "1805:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1806:    {Name: proxyInvalidMissingServiceWithTCPProxy.Name, Namespace: proxyInvalidMissingServiceWithTCPProxy.Namespace}: fixture.NewValidCondition().",
          "1808:   },",
          "1809:  })",
          "",
          "[Removed Lines]",
          "1807:     WithError(\"ServiceError\", \"ServiceUnresolvedReference\", `Spec.Routes unresolved service reference: service \"roots/missing\" not found`),",
          "",
          "[Added Lines]",
          "1807:     WithError(contour_api_v1.ConditionTypeServiceError, \"ServiceUnresolvedReference\", `Spec.Routes unresolved service reference: service \"roots/missing\" not found`),",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1838:   objs: []interface{}{fixture.SecretRootsCert, fixture.ServiceRootsKuard, proxyRoutePortNotMatchedWithTCP},",
          "1839:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1840:    {Name: proxyRoutePortNotMatchedWithTCP.Name, Namespace: proxyRoutePortNotMatchedWithTCP.Namespace}: fixture.NewValidCondition().",
          "1842:   },",
          "1843:  })",
          "",
          "[Removed Lines]",
          "1841:     WithError(\"ServiceError\", \"ServiceUnresolvedReference\", `Spec.Routes unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
          "",
          "[Added Lines]",
          "1841:     WithError(contour_api_v1.ConditionTypeServiceError, \"ServiceUnresolvedReference\", `Spec.Routes unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1942:   objs: []interface{}{proxyInvalidNoServices, fixture.ServiceRootsKuard},",
          "1943:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1944:    {Name: proxyInvalidNoServices.Name, Namespace: proxyInvalidNoServices.Namespace}: fixture.NewValidCondition().",
          "1946:   },",
          "1947:  })",
          "",
          "[Removed Lines]",
          "1945:     WithError(\"RouteError\", \"NoServicesPresent\", \"route.services must have at least one entry\"),",
          "",
          "[Added Lines]",
          "1945:     WithError(contour_api_v1.ConditionTypeRouteError, \"NoServicesPresent\", \"route.services must have at least one entry\"),",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1980:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1981:    {Name: fallbackCertificate.Name,",
          "1982:     Namespace: fallbackCertificate.Namespace}: fixture.NewValidCondition().",
          "1984:   },",
          "1985:  })",
          "",
          "[Removed Lines]",
          "1983:     WithError(\"TLSError\", \"FallbackNotValid\", `Spec.Virtualhost.TLS Secret \"invalid/invalid\" fallback certificate is invalid: Secret not found`),",
          "",
          "[Added Lines]",
          "1983:     WithError(contour_api_v1.ConditionTypeTLSError, \"FallbackNotValid\", `Spec.Virtualhost.TLS Secret \"invalid/invalid\" fallback certificate is invalid: Secret not found`),",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1989:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1990:    {Name: fallbackCertificate.Name,",
          "1991:     Namespace: fallbackCertificate.Namespace}: fixture.NewValidCondition().",
          "1993:   },",
          "1994:  })",
          "",
          "[Removed Lines]",
          "1992:     WithError(\"TLSError\", \"FallbackNotPresent\", \"Spec.Virtualhost.TLS enabled fallback but the fallback Certificate Secret is not configured in Contour configuration file\"),",
          "",
          "[Added Lines]",
          "1992:     WithError(contour_api_v1.ConditionTypeTLSError, \"FallbackNotPresent\", \"Spec.Virtualhost.TLS enabled fallback but the fallback Certificate Secret is not configured in Contour configuration file\"),",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2026:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2027:    {Name: fallbackCertificateWithClientValidation.Name,",
          "2028:     Namespace: fallbackCertificateWithClientValidation.Namespace}: fixture.NewValidCondition().",
          "2030:   },",
          "2031:  })",
          "",
          "[Removed Lines]",
          "2029:     WithError(\"TLSError\", \"TLSIncompatibleFeatures\", \"Spec.Virtualhost.TLS fallback & client validation are incompatible\"),",
          "",
          "[Added Lines]",
          "2029:     WithError(contour_api_v1.ConditionTypeTLSError, \"TLSIncompatibleFeatures\", \"Spec.Virtualhost.TLS fallback & client validation are incompatible\"),",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2053:   objs: []interface{}{fixture.SecretRootsCert, tlsPassthroughAndValidation},",
          "2054:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2055:    {Name: tlsPassthroughAndValidation.Name, Namespace: tlsPassthroughAndValidation.Namespace}: fixture.NewValidCondition().",
          "2057:   },",
          "2058:  })",
          "",
          "[Removed Lines]",
          "2056:     WithError(\"TLSError\", \"TLSIncompatibleFeatures\", \"Spec.VirtualHost.TLS passthrough cannot be combined with tls.clientValidation\"),",
          "",
          "[Added Lines]",
          "2056:     WithError(contour_api_v1.ConditionTypeTLSError, \"TLSIncompatibleFeatures\", \"Spec.VirtualHost.TLS passthrough cannot be combined with tls.clientValidation\"),",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2081:   },",
          "2082:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2083:    {Name: \"invalid\", Namespace: fixture.ServiceRootsKuard.Namespace}: fixture.NewValidCondition().",
          "2085:   },",
          "2086:  })",
          "",
          "[Removed Lines]",
          "2084:     WithError(\"TLSError\", \"TLSConfigNotValid\", \"Spec.VirtualHost.TLS: both Passthrough and SecretName were specified\"),",
          "",
          "[Added Lines]",
          "2084:     WithError(contour_api_v1.ConditionTypeTLSError, \"TLSConfigNotValid\", \"Spec.VirtualHost.TLS: both Passthrough and SecretName were specified\"),",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2109:   },",
          "2110:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2111:    {Name: \"invalid\", Namespace: fixture.ServiceRootsKuard.Namespace}: fixture.NewValidCondition().",
          "2113:   },",
          "2114:  })",
          "",
          "[Removed Lines]",
          "2112:     WithError(\"TLSError\", \"TLSConfigNotValid\", \"Spec.VirtualHost.TLS: neither Passthrough nor SecretName were specified\"),",
          "",
          "[Added Lines]",
          "2112:     WithError(contour_api_v1.ConditionTypeTLSError, \"TLSConfigNotValid\", \"Spec.VirtualHost.TLS: neither Passthrough nor SecretName were specified\"),",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2129:   objs: []interface{}{emptyProxy},",
          "2130:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2131:    {Name: emptyProxy.Name, Namespace: emptyProxy.Namespace}: fixture.NewValidCondition().",
          "2133:   },",
          "2134:  })",
          "",
          "[Removed Lines]",
          "2132:     WithError(\"SpecError\", \"NothingDefined\", \"HTTPProxy.Spec must have at least one Route, Include, or a TCPProxy\"),",
          "",
          "[Added Lines]",
          "2132:     WithError(contour_api_v1.ConditionTypeSpecError, \"NothingDefined\", \"HTTPProxy.Spec must have at least one Route, Include, or a TCPProxy\"),",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2163:   objs: []interface{}{invalidRequestHeadersPolicyService, fixture.ServiceRootsKuard},",
          "2164:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2165:    {Name: invalidRequestHeadersPolicyService.Name, Namespace: invalidRequestHeadersPolicyService.Namespace}: fixture.NewValidCondition().",
          "2167:   },",
          "2168:  })",
          "",
          "[Removed Lines]",
          "2166:     WithError(\"ServiceError\", \"RequestHeadersPolicyInvalid\", `rewriting \"Host\" header is not supported on request headers`),",
          "",
          "[Added Lines]",
          "2166:     WithError(contour_api_v1.ConditionTypeServiceError, \"RequestHeadersPolicyInvalid\", `rewriting \"Host\" header is not supported on request headers`),",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2197:   objs: []interface{}{invalidResponseHeadersPolicyService, fixture.ServiceRootsKuard},",
          "2198:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2199:    {Name: invalidResponseHeadersPolicyService.Name, Namespace: invalidResponseHeadersPolicyService.Namespace}: fixture.NewValidCondition().",
          "2201:   },",
          "2202:  })",
          "",
          "[Removed Lines]",
          "2200:     WithError(\"ServiceError\", \"ResponseHeadersPolicyInvalid\", `rewriting \"Host\" header is not supported on response headers`),",
          "",
          "[Added Lines]",
          "2200:     WithError(contour_api_v1.ConditionTypeServiceError, \"ResponseHeadersPolicyInvalid\", `rewriting \"Host\" header is not supported on response headers`),",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2231:   objs: []interface{}{invalidResponseHeadersPolicyRoute, fixture.ServiceRootsKuard},",
          "2232:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2233:    {Name: invalidResponseHeadersPolicyRoute.Name, Namespace: invalidResponseHeadersPolicyRoute.Namespace}: fixture.NewValidCondition().",
          "2235:   },",
          "2236:  })",
          "",
          "[Removed Lines]",
          "2234:     WithError(\"RouteError\", \"ResponseHeaderPolicyInvalid\", `rewriting \"Host\" header is not supported on response headers`),",
          "",
          "[Added Lines]",
          "2234:     WithError(contour_api_v1.ConditionTypeRouteError, \"ResponseHeaderPolicyInvalid\", `rewriting \"Host\" header is not supported on response headers`),",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2259:   objs: []interface{}{fixture.SecretRootsCert, proxyAuthFallback},",
          "2260:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "2261:    {Name: proxyAuthFallback.Name, Namespace: proxyAuthFallback.Namespace}: fixture.NewValidCondition().",
          "2263:   },",
          "2264:  })",
          "",
          "[Removed Lines]",
          "2262:     WithError(\"TLSError\", \"TLSIncompatibleFeatures\", \"Spec.Virtualhost.TLS fallback & client authorization are incompatible\"),",
          "",
          "[Added Lines]",
          "2262:     WithError(contour_api_v1.ConditionTypeTLSError, \"TLSIncompatibleFeatures\", \"Spec.Virtualhost.TLS fallback & client authorization are incompatible\"),",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2293:    {",
          "2294:     Name:      invalidResponseTimeout.Name,",
          "2295:     Namespace: invalidResponseTimeout.Namespace,",
          "2297:     `route.timeoutPolicy failed to parse: error parsing response timeout: unable to parse timeout string \"invalid-val\": time: invalid duration \"invalid-val\"`),",
          "2298:   },",
          "2299:  })",
          "",
          "[Removed Lines]",
          "2296:    }: fixture.NewValidCondition().WithError(\"RouteError\", \"TimeoutPolicyNotValid\",",
          "",
          "[Added Lines]",
          "2296:    }: fixture.NewValidCondition().WithError(contour_api_v1.ConditionTypeRouteError, \"TimeoutPolicyNotValid\",",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2328:    {",
          "2329:     Name:      invalidIdleTimeout.Name,",
          "2330:     Namespace: invalidIdleTimeout.Namespace,",
          "2332:     `route.timeoutPolicy failed to parse: error parsing idle timeout: unable to parse timeout string \"invalid-val\": time: invalid duration \"invalid-val\"`),",
          "2333:   },",
          "2334:  })",
          "",
          "[Removed Lines]",
          "2331:    }: fixture.NewValidCondition().WithError(\"RouteError\", \"TimeoutPolicyNotValid\",",
          "",
          "[Added Lines]",
          "2331:    }: fixture.NewValidCondition().WithError(contour_api_v1.ConditionTypeRouteError, \"TimeoutPolicyNotValid\",",
          "",
          "---------------"
        ],
        "internal/featuretests/v3/authorization_test.go||internal/featuretests/v3/authorization_test.go": [
          "File: internal/featuretests/v3/authorization_test.go -> internal/featuretests/v3/authorization_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:  c.Request(listenerType).Equals(&envoy_discovery_v3.DiscoveryResponse{",
          "139:   TypeUrl:   listenerType,",
          "140:   Resources: resources(t, staticListener()),",
          "142: }",
          "144: func authzFailOpen(t *testing.T, rh cache.ResourceEventHandler, c *Contour) {",
          "",
          "[Removed Lines]",
          "141:  }).Status(p).HasError(\"AuthError\", \"AuthResponseTimeoutInvalid\", `Spec.Virtualhost.Authorization.ResponseTimeout is invalid: unable to parse timeout string \"invalid-timeout\": time: invalid duration \"invalid-timeout\"`)",
          "",
          "[Added Lines]",
          "141:  }).Status(p).HasError(contour_api_v1.ConditionTypeAuthError, \"AuthResponseTimeoutInvalid\", `Spec.Virtualhost.Authorization.ResponseTimeout is invalid: unable to parse timeout string \"invalid-timeout\": time: invalid duration \"invalid-timeout\"`)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:  c.Request(listenerType).Equals(&envoy_discovery_v3.DiscoveryResponse{",
          "225:   TypeUrl:   listenerType,",
          "226:   Resources: resources(t, staticListener()),",
          "228: }",
          "230: func authzOverrideDisabled(t *testing.T, rh cache.ResourceEventHandler, c *Contour) {",
          "",
          "[Removed Lines]",
          "227:  }).Status(p).HasError(\"TLSError\", \"TLSIncompatibleFeatures\", \"Spec.Virtualhost.TLS fallback & client authorization are incompatible\")",
          "",
          "[Added Lines]",
          "227:  }).Status(p).HasError(contour_api_v1.ConditionTypeTLSError, \"TLSIncompatibleFeatures\", \"Spec.Virtualhost.TLS fallback & client authorization are incompatible\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "454:  c.Request(listenerType).Equals(&envoy_discovery_v3.DiscoveryResponse{",
          "455:   TypeUrl:   listenerType,",
          "456:   Resources: resources(t, staticListener()),",
          "459:  invalid.Spec.VirtualHost.Authorization.ExtensionServiceRef = contour_api_v1.ExtensionServiceReference{",
          "460:   APIVersion: \"projectcontour.io/v1alpha1\",",
          "",
          "[Removed Lines]",
          "457:  }).Status(invalid).HasError(\"AuthError\", \"AuthBadResourceVersion\", `Spec.Virtualhost.Authorization.extensionRef specifies an unsupported resource version \"foo/bar\"`)",
          "",
          "[Added Lines]",
          "457:  }).Status(invalid).HasError(contour_api_v1.ConditionTypeAuthError, \"AuthBadResourceVersion\", `Spec.Virtualhost.Authorization.extensionRef specifies an unsupported resource version \"foo/bar\"`)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "468:  c.Request(listenerType).Equals(&envoy_discovery_v3.DiscoveryResponse{",
          "469:   TypeUrl:   listenerType,",
          "470:   Resources: resources(t, staticListener()),",
          "473:  invalid.Spec.VirtualHost.Authorization.ExtensionServiceRef = contour_api_v1.ExtensionServiceReference{",
          "474:   Namespace: \"auth\",",
          "",
          "[Removed Lines]",
          "471:  }).Status(invalid).HasError(\"AuthError\", \"ExtensionServiceNotFound\", `Spec.Virtualhost.Authorization.ServiceRef extension service \"missing/extension\" not found`)",
          "",
          "[Added Lines]",
          "471:  }).Status(invalid).HasError(contour_api_v1.ConditionTypeAuthError, \"ExtensionServiceNotFound\", `Spec.Virtualhost.Authorization.ServiceRef extension service \"missing/extension\" not found`)",
          "",
          "---------------"
        ],
        "internal/featuretests/v3/featuretests.go||internal/featuretests/v3/featuretests.go": [
          "File: internal/featuretests/v3/featuretests.go -> internal/featuretests/v3/featuretests.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:  assert.Equal(s.T, s.Have.CurrentStatus, string(status.ProxyStatusInvalid))",
          "320:  assert.Equal(s.T, s.Have.Description, `At least one error present, see Errors for details`)",
          "322:  assert.NotNil(s.T, validCond)",
          "324:  subCond, ok := validCond.GetError(condType)",
          "",
          "[Removed Lines]",
          "318: func (s *statusResult) HasError(condType, reason, message string) *Contour {",
          "321:  validCond := s.Have.GetConditionFor(contour_api_v1.ValidConditionType)",
          "",
          "[Added Lines]",
          "318: func (s *statusResult) HasError(condType string, reason, message string) *Contour {",
          "321:  validCond := s.Have.GetConditionFor(contour_api_v1.ConditionTypeValid)",
          "",
          "---------------"
        ],
        "internal/featuretests/v3/replaceprefix_test.go||internal/featuretests/v3/replaceprefix_test.go": [
          "File: internal/featuretests/v3/replaceprefix_test.go -> internal/featuretests/v3/replaceprefix_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:    envoy_v3.RouteConfiguration(\"ingress_http\"),",
          "103:   ),",
          "104:   TypeUrl: routeType,",
          "108:  vhost = update(rh, vhost,",
          "",
          "[Removed Lines]",
          "105:  }).Status(vhost).HasError(\"PrefixReplaceError\", \"AmbiguousReplacement\", \"ambiguous prefix replacement\")",
          "",
          "[Added Lines]",
          "105:  }).Status(vhost).HasError(contour_api_v1.ConditionTypePrefixReplaceError, \"AmbiguousReplacement\", \"ambiguous prefix replacement\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:    envoy_v3.RouteConfiguration(\"ingress_http\"),",
          "151:   ),",
          "152:   TypeUrl: routeType,",
          "156:  vhost = update(rh, vhost,",
          "",
          "[Removed Lines]",
          "153:  }).Status(vhost).HasError(\"PrefixReplaceError\", \"DuplicateReplacement\", \"duplicate replacement prefix '/foo'\")",
          "",
          "[Added Lines]",
          "153:  }).Status(vhost).HasError(contour_api_v1.ConditionTypePrefixReplaceError, \"DuplicateReplacement\", \"duplicate replacement prefix '/foo'\")",
          "",
          "---------------"
        ],
        "internal/fixture/detailedcondition.go||internal/fixture/detailedcondition.go": [
          "File: internal/fixture/detailedcondition.go -> internal/fixture/detailedcondition.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: func NewValidCondition() *DetailedConditionBuilder {",
          "25:  b := &DetailedConditionBuilder{",
          "26:   Condition: v1.Condition{",
          "28:   },",
          "29:  }",
          "",
          "[Removed Lines]",
          "27:    Type: v1.ValidConditionType,",
          "",
          "[Added Lines]",
          "27:    Type: v1.ConditionTypeValid,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: func (dcb *DetailedConditionBuilder) Orphaned() v1.DetailedCondition {",
          "51:  dc := (*v1.DetailedCondition)(dcb)",
          "54:  return *dc",
          "55: }",
          "59:  dc := (*v1.DetailedCondition)(dcb)",
          "60:  dc.AddError(errorType, reason, message)",
          "",
          "[Removed Lines]",
          "52:  dc.AddError(\"Orphaned\", \"Orphaned\", \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\")",
          "57: func (dcb *DetailedConditionBuilder) WithError(errorType, reason, message string) v1.DetailedCondition {",
          "",
          "[Added Lines]",
          "52:  dc.AddError(v1.ConditionTypeOrphanedError, \"Orphaned\", \"this HTTPProxy is not part of a delegation chain from a root HTTPProxy\")",
          "57: func (dcb *DetailedConditionBuilder) WithError(errorType string, reason, message string) v1.DetailedCondition {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64: }",
          "68:  dc := (*v1.DetailedCondition)(dcb)",
          "69:  dc.AddErrorf(errorType, reason, formatmsg, args...)",
          "",
          "[Removed Lines]",
          "66: func (dcb *DetailedConditionBuilder) WithErrorf(errorType, reason, formatmsg string, args ...interface{}) v1.DetailedCondition {",
          "",
          "[Added Lines]",
          "66: func (dcb *DetailedConditionBuilder) WithErrorf(errorType string, reason, formatmsg string, args ...interface{}) v1.DetailedCondition {",
          "",
          "---------------"
        ],
        "internal/status/cache.go||internal/status/cache.go": [
          "File: internal/status/cache.go -> internal/status/cache.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  ProxyStatusValid    ProxyStatus = \"valid\"",
          "31:  ProxyStatusInvalid  ProxyStatus = \"invalid\"",
          "32:  ProxyStatusOrphaned ProxyStatus = \"orphaned\"",
          "35: )",
          "",
          "[Removed Lines]",
          "34:  OrphanedConditionType ConditionType = \"Orphaned\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "internal/status/proxystatus.go||internal/status/proxystatus.go": [
          "File: internal/status/proxystatus.go -> internal/status/proxystatus.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:  switch validCond.Status {",
          "100:  case projectcontour.ConditionTrue:",
          "",
          "[Removed Lines]",
          "97:  validCond := proxy.Status.GetConditionFor(projectcontour.ValidConditionType)",
          "",
          "[Added Lines]",
          "97:  validCond := proxy.Status.GetConditionFor(projectcontour.ConditionTypeValid)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:   proxy.Status.CurrentStatus = string(ProxyStatusValid)",
          "103:   proxy.Status.Description = validCond.Message",
          "104:  case projectcontour.ConditionFalse:",
          "106:    proxy.Status.CurrentStatus = string(ProxyStatusOrphaned)",
          "107:    proxy.Status.Description = orphanCond.Message",
          "108:    break",
          "",
          "[Removed Lines]",
          "105:   if orphanCond, ok := validCond.GetError(string(OrphanedConditionType)); ok {",
          "",
          "[Added Lines]",
          "105:   if orphanCond, ok := validCond.GetError(projectcontour.ConditionTypeOrphanedError); ok {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce11ee30c44e075b898a61fe92da5f1ce9e18bab",
      "candidate_info": {
        "commit_hash": "ce11ee30c44e075b898a61fe92da5f1ce9e18bab",
        "repo": "projectcontour/contour",
        "commit_url": "https://github.com/projectcontour/contour/commit/ce11ee30c44e075b898a61fe92da5f1ce9e18bab",
        "files": [
          "cmd/contour/serve.go",
          "cmd/contour/serve_test.go"
        ],
        "message": "cmd/contour: extract getDAGBuilder helper function (#3512)\n\nExtracts all logic in doServe() related to constructing\nthe dag.Builder into a helper function.\n\nUpdates #3453.\n\nSigned-off-by: Steve Kriss <krisss@vmware.com>",
        "before_after_code_files": [
          "cmd/contour/serve.go||cmd/contour/serve.go",
          "cmd/contour/serve_test.go||cmd/contour/serve_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/contour/serve.go||cmd/contour/serve.go"
          ],
          "candidate": [
            "cmd/contour/serve.go||cmd/contour/serve.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/contour/serve.go||cmd/contour/serve.go": [
          "File: cmd/contour/serve.go -> cmd/contour/serve.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:   }",
          "225:  }",
          "236:  registry := prometheus.NewRegistry()",
          "237:  registry.MustRegister(prometheus.NewProcessCollector(prometheus.ProcessCollectorOpts{}))",
          "",
          "[Removed Lines]",
          "227:  var configuredSecretRefs []*types.NamespacedName",
          "228:  if fallbackCert != nil {",
          "229:   configuredSecretRefs = append(configuredSecretRefs, fallbackCert)",
          "230:  }",
          "231:  if clientCert != nil {",
          "232:   configuredSecretRefs = append(configuredSecretRefs, clientCert)",
          "233:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:   ctx.Config.Listener.ConnectionBalancer = \"\"",
          "280:  }",
          "306:  listenerConfig := xdscache_v3.ListenerConfig{",
          "307:   UseProxyProto: ctx.useProxyProto,",
          "308:   HTTPListeners: map[string]xdscache_v3.Listener{",
          "",
          "[Removed Lines]",
          "282:  var requestHeadersPolicy dag.HeadersPolicy",
          "283:  if ctx.Config.Policy.RequestHeadersPolicy.Set != nil {",
          "284:   requestHeadersPolicy.Set = make(map[string]string)",
          "285:   for k, v := range ctx.Config.Policy.RequestHeadersPolicy.Set {",
          "286:    requestHeadersPolicy.Set[k] = v",
          "287:   }",
          "288:  }",
          "289:  if ctx.Config.Policy.RequestHeadersPolicy.Remove != nil {",
          "290:   requestHeadersPolicy.Remove = make([]string, 0, len(ctx.Config.Policy.RequestHeadersPolicy.Remove))",
          "291:   requestHeadersPolicy.Remove = append(requestHeadersPolicy.Remove, ctx.Config.Policy.RequestHeadersPolicy.Remove...)",
          "292:  }",
          "294:  var responseHeadersPolicy dag.HeadersPolicy",
          "295:  if ctx.Config.Policy.ResponseHeadersPolicy.Set != nil {",
          "296:   responseHeadersPolicy.Set = make(map[string]string)",
          "297:   for k, v := range ctx.Config.Policy.ResponseHeadersPolicy.Set {",
          "298:    responseHeadersPolicy.Set[k] = v",
          "299:   }",
          "300:  }",
          "301:  if ctx.Config.Policy.ResponseHeadersPolicy.Remove != nil {",
          "302:   responseHeadersPolicy.Remove = make([]string, 0, len(ctx.Config.Policy.ResponseHeadersPolicy.Remove))",
          "303:   responseHeadersPolicy.Remove = append(responseHeadersPolicy.Remove, ctx.Config.Policy.ResponseHeadersPolicy.Remove...)",
          "304:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389:  endpointHandler.Observer = contour.ComposeObservers(snapshotHandler)",
          "412:  if fallbackCert != nil {",
          "413:   log.WithField(\"context\", \"fallback-certificate\").Infof(\"enabled fallback certificate with secret: %q\", fallbackCert)",
          "414:  }",
          "416:  if clientCert != nil {",
          "417:   log.WithField(\"context\", \"envoy-client-certificate\").Infof(\"enabled client certificate with secret: %q\", clientCert)",
          "418:  }",
          "433:  eventHandler := &contour.EventHandler{",
          "434:   HoldoffDelay:    100 * time.Millisecond,",
          "435:   HoldoffMaxDelay: 500 * time.Millisecond,",
          "436:   Observer:        dag.ComposeObservers(append(xdscache.ObserversOf(resources), snapshotHandler)...),",
          "454:  }",
          "",
          "[Removed Lines]",
          "392:  dagProcessors := []dag.Processor{",
          "393:   &dag.IngressProcessor{",
          "394:    FieldLogger:       log.WithField(\"context\", \"IngressProcessor\"),",
          "395:    ClientCertificate: clientCert,",
          "396:   },",
          "397:   &dag.ExtensionServiceProcessor{",
          "398:    FieldLogger:       log.WithField(\"context\", \"ExtensionServiceProcessor\"),",
          "399:    ClientCertificate: clientCert,",
          "400:   },",
          "401:   &dag.HTTPProxyProcessor{",
          "402:    DisablePermitInsecure: ctx.Config.DisablePermitInsecure,",
          "403:    FallbackCertificate:   fallbackCert,",
          "404:    DNSLookupFamily:       ctx.Config.Cluster.DNSLookupFamily,",
          "405:    ClientCertificate:     clientCert,",
          "406:    RequestHeadersPolicy:  &requestHeadersPolicy,",
          "407:    ResponseHeadersPolicy: &responseHeadersPolicy,",
          "408:   },",
          "409:  }",
          "420:  if clients.ResourcesExist(k8s.GatewayAPIResources()...) {",
          "421:   if ctx.Config.GatewayConfig != nil {",
          "422:    dagProcessors = append(dagProcessors, &dag.GatewayAPIProcessor{",
          "423:     FieldLogger: log.WithField(\"context\", \"GatewayAPIProcessor\"),",
          "424:    })",
          "425:   }",
          "426:  }",
          "430:  dagProcessors = append(dagProcessors, &dag.ListenerProcessor{})",
          "437:   Builder: dag.Builder{",
          "438:    Source: dag.KubernetesCache{",
          "439:     RootNamespaces:       ctx.proxyRootNamespaces(),",
          "440:     IngressClassName:     ctx.ingressClassName,",
          "441:     ConfiguredSecretRefs: configuredSecretRefs,",
          "442:     FieldLogger:          log.WithField(\"context\", \"KubernetesCache\"),",
          "443:    },",
          "444:    Processors: dagProcessors,",
          "445:   },",
          "446:   FieldLogger: log.WithField(\"context\", \"contourEventHandler\"),",
          "447:  }",
          "449:  if ctx.Config.GatewayConfig != nil {",
          "450:   eventHandler.Builder.Source.ConfiguredGateway = types.NamespacedName{",
          "451:    Name:      ctx.Config.GatewayConfig.Name,",
          "452:    Namespace: ctx.Config.GatewayConfig.Namespace,",
          "453:   }",
          "",
          "[Added Lines]",
          "372:   Builder:         getDAGBuilder(ctx, clients, clientCert, fallbackCert, log),",
          "373:   FieldLogger:     log.WithField(\"context\", \"contourEventHandler\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "741:  return g.Run(context.Background())",
          "742: }",
          "744: func contains(namespaces []string, ns string) bool {",
          "745:  for _, namespace := range namespaces {",
          "746:   if ns == namespace {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664: func getDAGBuilder(ctx *serveContext, clients *k8s.Clients, clientCert, fallbackCert *types.NamespacedName, log logrus.FieldLogger) dag.Builder {",
          "665:  var requestHeadersPolicy dag.HeadersPolicy",
          "666:  if ctx.Config.Policy.RequestHeadersPolicy.Set != nil {",
          "667:   requestHeadersPolicy.Set = make(map[string]string)",
          "668:   for k, v := range ctx.Config.Policy.RequestHeadersPolicy.Set {",
          "669:    requestHeadersPolicy.Set[k] = v",
          "670:   }",
          "671:  }",
          "672:  if ctx.Config.Policy.RequestHeadersPolicy.Remove != nil {",
          "673:   requestHeadersPolicy.Remove = make([]string, 0, len(ctx.Config.Policy.RequestHeadersPolicy.Remove))",
          "674:   requestHeadersPolicy.Remove = append(requestHeadersPolicy.Remove, ctx.Config.Policy.RequestHeadersPolicy.Remove...)",
          "675:  }",
          "677:  var responseHeadersPolicy dag.HeadersPolicy",
          "678:  if ctx.Config.Policy.ResponseHeadersPolicy.Set != nil {",
          "679:   responseHeadersPolicy.Set = make(map[string]string)",
          "680:   for k, v := range ctx.Config.Policy.ResponseHeadersPolicy.Set {",
          "681:    responseHeadersPolicy.Set[k] = v",
          "682:   }",
          "683:  }",
          "684:  if ctx.Config.Policy.ResponseHeadersPolicy.Remove != nil {",
          "685:   responseHeadersPolicy.Remove = make([]string, 0, len(ctx.Config.Policy.ResponseHeadersPolicy.Remove))",
          "686:   responseHeadersPolicy.Remove = append(responseHeadersPolicy.Remove, ctx.Config.Policy.ResponseHeadersPolicy.Remove...)",
          "687:  }",
          "690:  dagProcessors := []dag.Processor{",
          "691:   &dag.IngressProcessor{",
          "692:    FieldLogger:       log.WithField(\"context\", \"IngressProcessor\"),",
          "693:    ClientCertificate: clientCert,",
          "694:   },",
          "695:   &dag.ExtensionServiceProcessor{",
          "696:    FieldLogger:       log.WithField(\"context\", \"ExtensionServiceProcessor\"),",
          "697:    ClientCertificate: clientCert,",
          "698:   },",
          "699:   &dag.HTTPProxyProcessor{",
          "700:    DisablePermitInsecure: ctx.Config.DisablePermitInsecure,",
          "701:    FallbackCertificate:   fallbackCert,",
          "702:    DNSLookupFamily:       ctx.Config.Cluster.DNSLookupFamily,",
          "703:    ClientCertificate:     clientCert,",
          "704:    RequestHeadersPolicy:  &requestHeadersPolicy,",
          "705:    ResponseHeadersPolicy: &responseHeadersPolicy,",
          "706:   },",
          "707:  }",
          "709:  if ctx.Config.GatewayConfig != nil && clients.ResourcesExist(k8s.GatewayAPIResources()...) {",
          "710:   dagProcessors = append(dagProcessors, &dag.GatewayAPIProcessor{",
          "711:    FieldLogger: log.WithField(\"context\", \"GatewayAPIProcessor\"),",
          "712:   })",
          "713:  }",
          "717:  dagProcessors = append(dagProcessors, &dag.ListenerProcessor{})",
          "719:  var configuredSecretRefs []*types.NamespacedName",
          "720:  if fallbackCert != nil {",
          "721:   configuredSecretRefs = append(configuredSecretRefs, fallbackCert)",
          "722:  }",
          "723:  if clientCert != nil {",
          "724:   configuredSecretRefs = append(configuredSecretRefs, clientCert)",
          "725:  }",
          "727:  builder := dag.Builder{",
          "728:   Source: dag.KubernetesCache{",
          "729:    RootNamespaces:       ctx.proxyRootNamespaces(),",
          "730:    IngressClassName:     ctx.ingressClassName,",
          "731:    ConfiguredSecretRefs: configuredSecretRefs,",
          "732:    FieldLogger:          log.WithField(\"context\", \"KubernetesCache\"),",
          "733:   },",
          "734:   Processors: dagProcessors,",
          "735:  }",
          "737:  if ctx.Config.GatewayConfig != nil {",
          "738:   builder.Source.ConfiguredGateway = types.NamespacedName{",
          "739:    Name:      ctx.Config.GatewayConfig.Name,",
          "740:    Namespace: ctx.Config.GatewayConfig.Namespace,",
          "741:   }",
          "742:  }",
          "747:  return builder",
          "748: }",
          "",
          "---------------"
        ],
        "cmd/contour/serve_test.go||cmd/contour/serve_test.go": [
          "File: cmd/contour/serve_test.go -> cmd/contour/serve_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: package main",
          "16: import (",
          "17:  \"testing\"",
          "19:  \"github.com/projectcontour/contour/internal/dag\"",
          "20:  \"github.com/sirupsen/logrus\"",
          "21:  \"github.com/stretchr/testify/assert\"",
          "22:  \"github.com/stretchr/testify/require\"",
          "23:  \"k8s.io/apimachinery/pkg/types\"",
          "24: )",
          "26: func TestGetDAGBuilder(t *testing.T) {",
          "27:  commonAssertions := func(t *testing.T, builder *dag.Builder) {",
          "28:   t.Helper()",
          "33:   assert.Len(t, builder.Processors, 4)",
          "34:   assert.Equal(t, types.NamespacedName{}, builder.Source.ConfiguredGateway)",
          "36:   assert.IsType(t, &dag.ListenerProcessor{}, builder.Processors[len(builder.Processors)-1])",
          "37:  }",
          "39:  t.Run(\"all default options\", func(t *testing.T) {",
          "40:   got := getDAGBuilder(newServeContext(), nil, nil, nil, logrus.StandardLogger())",
          "41:   commonAssertions(t, &got)",
          "42:   assert.Empty(t, got.Source.ConfiguredSecretRefs)",
          "43:  })",
          "45:  t.Run(\"client cert specified\", func(t *testing.T) {",
          "46:   clientCert := &types.NamespacedName{Namespace: \"client-ns\", Name: \"client-name\"}",
          "48:   got := getDAGBuilder(newServeContext(), nil, clientCert, nil, logrus.StandardLogger())",
          "49:   commonAssertions(t, &got)",
          "50:   assert.ElementsMatch(t, got.Source.ConfiguredSecretRefs, []*types.NamespacedName{clientCert})",
          "51:  })",
          "53:  t.Run(\"fallback cert specified\", func(t *testing.T) {",
          "54:   fallbackCert := &types.NamespacedName{Namespace: \"fallback-ns\", Name: \"fallback-name\"}",
          "56:   got := getDAGBuilder(newServeContext(), nil, nil, fallbackCert, logrus.StandardLogger())",
          "57:   commonAssertions(t, &got)",
          "58:   assert.ElementsMatch(t, got.Source.ConfiguredSecretRefs, []*types.NamespacedName{fallbackCert})",
          "59:  })",
          "61:  t.Run(\"client and fallback certs specified\", func(t *testing.T) {",
          "62:   clientCert := &types.NamespacedName{Namespace: \"client-ns\", Name: \"client-name\"}",
          "63:   fallbackCert := &types.NamespacedName{Namespace: \"fallback-ns\", Name: \"fallback-name\"}",
          "65:   got := getDAGBuilder(newServeContext(), nil, clientCert, fallbackCert, logrus.StandardLogger())",
          "67:   commonAssertions(t, &got)",
          "68:   assert.ElementsMatch(t, got.Source.ConfiguredSecretRefs, []*types.NamespacedName{clientCert, fallbackCert})",
          "69:  })",
          "71:  t.Run(\"request and response headers policy specified\", func(t *testing.T) {",
          "72:   ctx := newServeContext()",
          "73:   ctx.Config.Policy.RequestHeadersPolicy.Set = map[string]string{",
          "74:    \"req-set-key-1\": \"req-set-val-1\",",
          "75:    \"req-set-key-2\": \"req-set-val-2\",",
          "76:   }",
          "77:   ctx.Config.Policy.RequestHeadersPolicy.Remove = []string{\"req-remove-key-1\", \"req-remove-key-2\"}",
          "78:   ctx.Config.Policy.ResponseHeadersPolicy.Set = map[string]string{",
          "79:    \"res-set-key-1\": \"res-set-val-1\",",
          "80:    \"res-set-key-2\": \"res-set-val-2\",",
          "81:   }",
          "82:   ctx.Config.Policy.ResponseHeadersPolicy.Remove = []string{\"res-remove-key-1\", \"res-remove-key-2\"}",
          "84:   got := getDAGBuilder(ctx, nil, nil, nil, logrus.StandardLogger())",
          "85:   commonAssertions(t, &got)",
          "87:   httpProxyProcessor := mustGetHTTPProxyProcessor(t, &got)",
          "88:   assert.EqualValues(t, ctx.Config.Policy.RequestHeadersPolicy.Set, httpProxyProcessor.RequestHeadersPolicy.Set)",
          "89:   assert.ElementsMatch(t, ctx.Config.Policy.RequestHeadersPolicy.Remove, httpProxyProcessor.RequestHeadersPolicy.Remove)",
          "90:   assert.EqualValues(t, ctx.Config.Policy.ResponseHeadersPolicy.Set, httpProxyProcessor.ResponseHeadersPolicy.Set)",
          "91:   assert.ElementsMatch(t, ctx.Config.Policy.ResponseHeadersPolicy.Remove, httpProxyProcessor.ResponseHeadersPolicy.Remove)",
          "92:  })",
          "95: }",
          "97: func mustGetHTTPProxyProcessor(t *testing.T, builder *dag.Builder) *dag.HTTPProxyProcessor {",
          "98:  t.Helper()",
          "99:  for i := range builder.Processors {",
          "100:   found, ok := builder.Processors[i].(*dag.HTTPProxyProcessor)",
          "101:   if ok {",
          "102:    return found",
          "103:   }",
          "104:  }",
          "106:  require.FailNow(t, \"HTTPProxyProcessor not found in list of DAG builder's processors\")",
          "107:  return nil",
          "108: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bba30c93bbab82d3f9639c00deb79e15835727fd",
      "candidate_info": {
        "commit_hash": "bba30c93bbab82d3f9639c00deb79e15835727fd",
        "repo": "projectcontour/contour",
        "commit_url": "https://github.com/projectcontour/contour/commit/bba30c93bbab82d3f9639c00deb79e15835727fd",
        "files": [
          "internal/dag/status_test.go"
        ],
        "message": "internal/status: Refactor status tests to allow for FullName to be validated (#3663)\n\nFollowing up to #3636, refactors the status tests to allow for the the FullName\nto be validated along with the Conditions so that if there are two different\nobjects, each will have a set of conditions to be asserted against.\n\nSigned-off-by: Steve Sloka <slokas@vmware.com>",
        "before_after_code_files": [
          "internal/dag/status_test.go||internal/dag/status_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "internal/dag/status_test.go||internal/dag/status_test.go"
          ],
          "candidate": [
            "internal/dag/status_test.go||internal/dag/status_test.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/dag/status_test.go||internal/dag/status_test.go": [
          "File: internal/dag/status_test.go -> internal/dag/status_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2488:  type testcase struct {",
          "2489:   objs []interface{}",
          "2491:  }",
          "2493:  run := func(t *testing.T, desc string, tc testcase) {",
          "",
          "[Removed Lines]",
          "2490:   want []metav1.Condition",
          "",
          "[Added Lines]",
          "2490:   want []*status.ConditionsUpdate",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2538:     builder.Source.Insert(o)",
          "2539:    }",
          "2540:    dag := builder.Build()",
          "2550:    ops := []cmp.Option{",
          "2551:     cmpopts.IgnoreFields(metav1.Condition{}, \"LastTransitionTime\"),",
          "2552:     cmpopts.SortSlices(func(i, j metav1.Condition) bool {",
          "2553:      return i.Message < j.Message",
          "2554:     }),",
          "2555:    }",
          "2558:     t.Fatalf(\"expected: %v, got %v\", tc.want, diff)",
          "2559:    }",
          "",
          "[Removed Lines]",
          "2541:    updates := dag.StatusCache.GetRouteUpdates()",
          "2543:    var gotConditions []metav1.Condition",
          "2544:    for _, u := range updates {",
          "2545:     for _, cond := range u.Conditions {",
          "2546:      gotConditions = append(gotConditions, cond)",
          "2547:     }",
          "2548:    }",
          "2557:    if diff := cmp.Diff(tc.want, gotConditions, ops...); diff != \"\" {",
          "",
          "[Added Lines]",
          "2541:    gotUpdates := dag.StatusCache.GetRouteUpdates()",
          "2545:     cmpopts.IgnoreFields(status.ConditionsUpdate{}, \"ExistingConditions\"),",
          "2546:     cmpopts.IgnoreFields(status.ConditionsUpdate{}, \"GatewayRef\"),",
          "2547:     cmpopts.IgnoreFields(status.ConditionsUpdate{}, \"Generation\"),",
          "2548:     cmpopts.IgnoreFields(status.ConditionsUpdate{}, \"TransitionTime\"),",
          "2549:     cmpopts.IgnoreFields(status.ConditionsUpdate{}, \"Resource\"),",
          "2555:    if diff := cmp.Diff(tc.want, gotUpdates, ops...); diff != \"\" {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2603:      }},",
          "2604:     },",
          "2605:    }},",
          "2611:   }},",
          "2612:  })",
          "",
          "[Removed Lines]",
          "2606:   want: []metav1.Condition{{",
          "2607:    Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2608:    Status:  contour_api_v1.ConditionTrue,",
          "2609:    Reason:  string(status.ValidCondition),",
          "2610:    Message: \"Valid HTTPRoute\",",
          "",
          "[Added Lines]",
          "2604:   want: []*status.ConditionsUpdate{{",
          "2605:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "2606:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "2607:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2608:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2609:      Status:  contour_api_v1.ConditionTrue,",
          "2610:      Reason:  string(status.ValidCondition),",
          "2611:      Message: \"Valid HTTPRoute\",",
          "2612:     },",
          "2613:    },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2643:      }},",
          "2644:     },",
          "2645:    }},",
          "2656:   }},",
          "2657:  })",
          "",
          "[Removed Lines]",
          "2646:   want: []metav1.Condition{{",
          "2647:    Type:    string(status.ConditionNotImplemented),",
          "2648:    Status:  contour_api_v1.ConditionTrue,",
          "2649:    Reason:  string(status.ReasonPathMatchType),",
          "2650:    Message: \"HTTPRoute.Spec.Rules.PathMatch: Only Prefix match type and Exact match type are supported.\",",
          "2651:   }, {",
          "2652:    Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2653:    Status:  contour_api_v1.ConditionFalse,",
          "2654:    Reason:  string(status.ReasonErrorsExist),",
          "2655:    Message: \"Errors found, check other Conditions for details.\",",
          "",
          "[Added Lines]",
          "2649:   want: []*status.ConditionsUpdate{{",
          "2650:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "2651:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "2652:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2653:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2654:      Status:  contour_api_v1.ConditionFalse,",
          "2655:      Reason:  string(status.ReasonErrorsExist),",
          "2656:      Message: \"Errors found, check other Conditions for details.\",",
          "2657:     },",
          "2658:     status.ConditionNotImplemented: {",
          "2659:      Type:    string(status.ConditionNotImplemented),",
          "2660:      Status:  contour_api_v1.ConditionTrue,",
          "2661:      Reason:  string(status.ReasonPathMatchType),",
          "2662:      Message: \"HTTPRoute.Spec.Rules.PathMatch: Only Prefix match type and Exact match type are supported.\",",
          "2663:     },",
          "2664:    },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2683:      }},",
          "2684:     },",
          "2685:    }},",
          "2696:   }},",
          "2697:  })",
          "",
          "[Removed Lines]",
          "2686:   want: []metav1.Condition{{",
          "2687:    Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2688:    Status:  contour_api_v1.ConditionFalse,",
          "2689:    Reason:  string(status.ReasonErrorsExist),",
          "2690:    Message: \"Errors found, check other Conditions for details.\",",
          "2691:   }, {",
          "2692:    Type:    string(status.ConditionNotImplemented),",
          "2693:    Status:  contour_api_v1.ConditionTrue,",
          "2694:    Reason:  string(status.ReasonPathMatchType),",
          "2695:    Message: \"HTTPRoute.Spec.Rules.PathMatch: Only Prefix match type and Exact match type are supported.\",",
          "",
          "[Added Lines]",
          "2695:   want: []*status.ConditionsUpdate{{",
          "2696:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "2697:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "2698:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2699:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2700:      Status:  contour_api_v1.ConditionFalse,",
          "2701:      Reason:  string(status.ReasonErrorsExist),",
          "2702:      Message: \"Errors found, check other Conditions for details.\",",
          "2703:     },",
          "2704:     status.ConditionNotImplemented: {",
          "2705:      Type:    string(status.ConditionNotImplemented),",
          "2706:      Status:  contour_api_v1.ConditionTrue,",
          "2707:      Reason:  string(status.ReasonPathMatchType),",
          "2708:      Message: \"HTTPRoute.Spec.Rules.PathMatch: Only Prefix match type and Exact match type are supported.\",",
          "2709:     },",
          "2710:    },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2732:      }},",
          "2733:     },",
          "2734:    }},",
          "2745:   }},",
          "2746:  })",
          "",
          "[Removed Lines]",
          "2735:   want: []metav1.Condition{{",
          "2736:    Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2737:    Status:  contour_api_v1.ConditionFalse,",
          "2738:    Reason:  string(status.ReasonErrorsExist),",
          "2739:    Message: \"Errors found, check other Conditions for details.\",",
          "2740:   }, {",
          "2741:    Type:    string(status.ConditionNotImplemented),",
          "2742:    Status:  contour_api_v1.ConditionTrue,",
          "2743:    Reason:  string(status.ReasonHeaderMatchType),",
          "2744:    Message: \"HTTPRoute.Spec.Rules.HeaderMatch: Only Exact match type is supported.\",",
          "",
          "[Added Lines]",
          "2750:   want: []*status.ConditionsUpdate{{",
          "2751:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "2752:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "2753:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2754:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2755:      Status:  contour_api_v1.ConditionFalse,",
          "2756:      Reason:  string(status.ReasonErrorsExist),",
          "2757:      Message: \"Errors found, check other Conditions for details.\",",
          "2758:     },",
          "2759:     status.ConditionNotImplemented: {",
          "2760:      Type:    string(status.ConditionNotImplemented),",
          "2761:      Status:  contour_api_v1.ConditionTrue,",
          "2762:      Reason:  string(status.ReasonHeaderMatchType),",
          "2763:      Message: \"HTTPRoute.Spec.Rules.HeaderMatch: Only Exact match type is supported.\",",
          "2764:     },",
          "2765:    },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2779:      }},",
          "2780:     },",
          "2781:    }},",
          "2792:   }},",
          "2793:  })",
          "",
          "[Removed Lines]",
          "2782:   want: []metav1.Condition{{",
          "2783:    Type:    string(status.ConditionNotImplemented),",
          "2784:    Status:  contour_api_v1.ConditionTrue,",
          "2785:    Reason:  string(status.ReasonNotImplemented),",
          "2786:    Message: \"HTTPRoute.Spec.TLS: Not yet implemented.\",",
          "2787:   }, {",
          "2788:    Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2789:    Status:  contour_api_v1.ConditionFalse,",
          "2790:    Reason:  string(status.ReasonErrorsExist),",
          "2791:    Message: \"Errors found, check other Conditions for details.\",",
          "",
          "[Added Lines]",
          "2803:   want: []*status.ConditionsUpdate{{",
          "2804:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "2805:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "2806:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2807:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2808:      Status:  contour_api_v1.ConditionFalse,",
          "2809:      Reason:  string(status.ReasonErrorsExist),",
          "2810:      Message: \"Errors found, check other Conditions for details.\",",
          "2811:     },",
          "2812:     status.ConditionNotImplemented: {",
          "2813:      Type:    string(status.ConditionNotImplemented),",
          "2814:      Status:  contour_api_v1.ConditionTrue,",
          "2815:      Reason:  string(status.ReasonNotImplemented),",
          "2816:      Message: \"HTTPRoute.Spec.TLS: Not yet implemented.\",",
          "2817:     },",
          "2818:    },",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2819:      }},",
          "2820:     },",
          "2821:    }},",
          "2832:   }},",
          "2833:  })",
          "",
          "[Removed Lines]",
          "2822:   want: []metav1.Condition{{",
          "2823:    Type:    string(status.ConditionResolvedRefs),",
          "2824:    Status:  contour_api_v1.ConditionFalse,",
          "2825:    Reason:  string(status.ReasonDegraded),",
          "2826:    Message: \"Spec.Rules.ForwardTo.ServiceName must be specified.\",",
          "2827:   }, {",
          "2828:    Type:    \"Admitted\",",
          "2829:    Status:  contour_api_v1.ConditionFalse,",
          "2830:    Reason:  \"ErrorsExist\",",
          "2831:    Message: \"Errors found, check other Conditions for details.\",",
          "",
          "[Added Lines]",
          "2849:   want: []*status.ConditionsUpdate{{",
          "2850:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "2851:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "2852:     status.ConditionResolvedRefs: {",
          "2853:      Type:    string(status.ConditionResolvedRefs),",
          "2854:      Status:  contour_api_v1.ConditionFalse,",
          "2855:      Reason:  string(status.ReasonDegraded),",
          "2856:      Message: \"Spec.Rules.ForwardTo.ServiceName must be specified.\",",
          "2857:     },",
          "2858:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2859:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2860:      Status:  contour_api_v1.ConditionFalse,",
          "2861:      Reason:  string(status.ReasonErrorsExist),",
          "2862:      Message: \"Errors found, check other Conditions for details.\",",
          "2863:     },",
          "2864:    },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2874:      }},",
          "2875:     },",
          "2876:    }},",
          "2887:   }},",
          "2888:  })",
          "",
          "[Removed Lines]",
          "2877:   want: []metav1.Condition{{",
          "2878:    Type:    string(status.ConditionResolvedRefs),",
          "2879:    Status:  contour_api_v1.ConditionFalse,",
          "2880:    Reason:  string(status.ReasonDegraded),",
          "2881:    Message: \"Service \\\"invalid-one\\\" does not exist, Service \\\"invalid-two\\\" does not exist\",",
          "2882:   }, {",
          "2883:    Type:    \"Admitted\",",
          "2884:    Status:  contour_api_v1.ConditionFalse,",
          "2885:    Reason:  \"ErrorsExist\",",
          "2886:    Message: \"Errors found, check other Conditions for details.\",",
          "",
          "[Added Lines]",
          "2910:   want: []*status.ConditionsUpdate{{",
          "2911:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "2912:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "2913:     status.ConditionResolvedRefs: {",
          "2914:      Type:    string(status.ConditionResolvedRefs),",
          "2915:      Status:  contour_api_v1.ConditionFalse,",
          "2916:      Reason:  string(status.ReasonDegraded),",
          "2917:      Message: \"Service \\\"invalid-one\\\" does not exist, Service \\\"invalid-two\\\" does not exist\",",
          "2918:     },",
          "2919:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2920:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2921:      Status:  contour_api_v1.ConditionFalse,",
          "2922:      Reason:  string(status.ReasonErrorsExist),",
          "2923:      Message: \"Errors found, check other Conditions for details.\",",
          "2924:     },",
          "2925:    },",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2914:      }},",
          "2915:     },",
          "2916:    }},",
          "2927:   }},",
          "2928:  })",
          "",
          "[Removed Lines]",
          "2917:   want: []metav1.Condition{{",
          "2918:    Type:    string(status.ConditionResolvedRefs),",
          "2919:    Status:  contour_api_v1.ConditionFalse,",
          "2920:    Reason:  string(status.ReasonDegraded),",
          "2921:    Message: \"Spec.Rules.ForwardTo.ServicePort must be specified.\",",
          "2922:   }, {",
          "2923:    Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2924:    Status:  contour_api_v1.ConditionFalse,",
          "2925:    Reason:  \"ErrorsExist\",",
          "2926:    Message: \"Errors found, check other Conditions for details.\",",
          "",
          "[Added Lines]",
          "2956:   want: []*status.ConditionsUpdate{{",
          "2957:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "2958:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "2959:     status.ConditionResolvedRefs: {",
          "2960:      Type:    string(status.ConditionResolvedRefs),",
          "2961:      Status:  contour_api_v1.ConditionFalse,",
          "2962:      Reason:  string(status.ReasonDegraded),",
          "2963:      Message: \"Spec.Rules.ForwardTo.ServicePort must be specified.\",",
          "2964:     },",
          "2965:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2966:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "2967:      Status:  contour_api_v1.ConditionFalse,",
          "2968:      Reason:  string(status.ReasonErrorsExist),",
          "2969:      Message: \"Errors found, check other Conditions for details.\",",
          "2970:     },",
          "2971:    },",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2950:      }},",
          "2951:     },",
          "2952:    }},",
          "2963:   }},",
          "2964:  })",
          "",
          "[Removed Lines]",
          "2953:   want: []metav1.Condition{{",
          "2954:    Type:    string(status.ConditionResolvedRefs),",
          "2955:    Status:  contour_api_v1.ConditionFalse,",
          "2956:    Reason:  string(status.ReasonDegraded),",
          "2957:    Message: \"At least one Spec.Rules.ForwardTo must be specified.\",",
          "2958:   }, {",
          "2959:    Type:    \"Admitted\",",
          "2960:    Status:  contour_api_v1.ConditionFalse,",
          "2961:    Reason:  \"ErrorsExist\",",
          "2962:    Message: \"Errors found, check other Conditions for details.\",",
          "",
          "[Added Lines]",
          "2998:   want: []*status.ConditionsUpdate{{",
          "2999:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3000:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3001:     status.ConditionResolvedRefs: {",
          "3002:      Type:    string(status.ConditionResolvedRefs),",
          "3003:      Status:  contour_api_v1.ConditionFalse,",
          "3004:      Reason:  string(status.ReasonDegraded),",
          "3005:      Message: \"At least one Spec.Rules.ForwardTo must be specified.\",",
          "3006:     },",
          "3007:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3008:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3009:      Status:  contour_api_v1.ConditionFalse,",
          "3010:      Reason:  string(status.ReasonErrorsExist),",
          "3011:      Message: \"Errors found, check other Conditions for details.\",",
          "3012:     },",
          "3013:    },",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2986:      }},",
          "2987:     },",
          "2988:    }},",
          "2999:   }},",
          "3000:  })",
          "",
          "[Removed Lines]",
          "2989:   want: []metav1.Condition{{",
          "2990:    Type:    string(status.ConditionResolvedRefs),",
          "2991:    Status:  contour_api_v1.ConditionFalse,",
          "2992:    Reason:  string(status.ReasonDegraded),",
          "2993:    Message: \"invalid hostname \\\"*.*.projectcontour.io\\\": [a wildcard DNS-1123 subdomain must start with '*.', followed by a valid DNS subdomain, which must consist of lower case alphanumeric characters, '-' or '.' and end with an alphanumeric character (e.g. '*.example.com', regex used for validation is '\\\\*\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*')]\",",
          "2994:   }, {",
          "2995:    Type:    \"Admitted\",",
          "2996:    Status:  contour_api_v1.ConditionFalse,",
          "2997:    Reason:  \"ErrorsExist\",",
          "2998:    Message: \"Errors found, check other Conditions for details.\",",
          "",
          "[Added Lines]",
          "3040:   want: []*status.ConditionsUpdate{{",
          "3041:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3042:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3043:     status.ConditionResolvedRefs: {",
          "3044:      Type:    string(status.ConditionResolvedRefs),",
          "3045:      Status:  contour_api_v1.ConditionFalse,",
          "3046:      Reason:  string(status.ReasonDegraded),",
          "3047:      Message: \"invalid hostname \\\"*.*.projectcontour.io\\\": [a wildcard DNS-1123 subdomain must start with '*.', followed by a valid DNS subdomain, which must consist of lower case alphanumeric characters, '-' or '.' and end with an alphanumeric character (e.g. '*.example.com', regex used for validation is '\\\\*\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*')]\",",
          "3048:     },",
          "3049:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3050:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3051:      Status:  contour_api_v1.ConditionFalse,",
          "3052:      Reason:  string(status.ReasonErrorsExist),",
          "3053:      Message: \"Errors found, check other Conditions for details.\",",
          "3054:     },",
          "3055:    },",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3022:      }},",
          "3023:     },",
          "3024:    }},",
          "3035:   }},",
          "3036:  })",
          "",
          "[Removed Lines]",
          "3025:   want: []metav1.Condition{{",
          "3026:    Type:    string(status.ConditionResolvedRefs),",
          "3027:    Status:  contour_api_v1.ConditionFalse,",
          "3028:    Reason:  string(status.ReasonDegraded),",
          "3029:    Message: \"invalid listener hostname \\\"#projectcontour.io\\\": [a lowercase RFC 1123 subdomain must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character (e.g. 'example.com', regex used for validation is '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*')]\",",
          "3030:   }, {",
          "3031:    Type:    \"Admitted\",",
          "3032:    Status:  contour_api_v1.ConditionFalse,",
          "3033:    Reason:  \"ErrorsExist\",",
          "3034:    Message: \"Errors found, check other Conditions for details.\",",
          "",
          "[Added Lines]",
          "3082:   want: []*status.ConditionsUpdate{{",
          "3083:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3084:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3085:     status.ConditionResolvedRefs: {",
          "3086:      Type:    string(status.ConditionResolvedRefs),",
          "3087:      Status:  contour_api_v1.ConditionFalse,",
          "3088:      Reason:  string(status.ReasonDegraded),",
          "3089:      Message: \"invalid listener hostname \\\"#projectcontour.io\\\": [a lowercase RFC 1123 subdomain must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character (e.g. 'example.com', regex used for validation is '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*')]\",",
          "3090:     },",
          "3091:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3092:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3093:      Status:  contour_api_v1.ConditionFalse,",
          "3094:      Reason:  string(status.ReasonErrorsExist),",
          "3095:      Message: \"Errors found, check other Conditions for details.\",",
          "3096:     },",
          "3097:    },",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3058:      }},",
          "3059:     },",
          "3060:    }},",
          "3071:   }},",
          "3072:  })",
          "",
          "[Removed Lines]",
          "3061:   want: []metav1.Condition{{",
          "3062:    Type:    string(status.ConditionResolvedRefs),",
          "3063:    Status:  contour_api_v1.ConditionFalse,",
          "3064:    Reason:  string(status.ReasonDegraded),",
          "3065:    Message: \"hostname \\\"1.2.3.4\\\" must be a DNS name, not an IP address\",",
          "3066:   }, {",
          "3067:    Type:    \"Admitted\",",
          "3068:    Status:  contour_api_v1.ConditionFalse,",
          "3069:    Reason:  \"ErrorsExist\",",
          "3070:    Message: \"Errors found, check other Conditions for details.\",",
          "",
          "[Added Lines]",
          "3124:   want: []*status.ConditionsUpdate{{",
          "3125:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3126:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3127:     status.ConditionResolvedRefs: {",
          "3128:      Type:    string(status.ConditionResolvedRefs),",
          "3129:      Status:  contour_api_v1.ConditionFalse,",
          "3130:      Reason:  string(status.ReasonDegraded),",
          "3131:      Message: \"hostname \\\"1.2.3.4\\\" must be a DNS name, not an IP address\",",
          "3132:     },",
          "3133:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3134:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3135:      Status:  contour_api_v1.ConditionFalse,",
          "3136:      Reason:  string(status.ReasonErrorsExist),",
          "3137:      Message: \"Errors found, check other Conditions for details.\",",
          "3138:     },",
          "3139:    },",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3101:      }},",
          "3102:     },",
          "3103:    }},",
          "3114:   }},",
          "3115:  })",
          "",
          "[Removed Lines]",
          "3104:   want: []metav1.Condition{{",
          "3105:    Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3106:    Status:  contour_api_v1.ConditionFalse,",
          "3107:    Reason:  string(status.ReasonErrorsExist),",
          "3108:    Message: \"Errors found, check other Conditions for details.\",",
          "3109:   }, {",
          "3110:    Type:    string(status.ConditionNotImplemented),",
          "3111:    Status:  contour_api_v1.ConditionTrue,",
          "3112:    Reason:  string(status.ReasonHTTPRouteFilterType),",
          "3113:    Message: \"HTTPRoute.Spec.Rules.Filters: Only RequestHeaderModifier type is supported.\",",
          "",
          "[Added Lines]",
          "3173:   want: []*status.ConditionsUpdate{{",
          "3174:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3175:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3176:     status.ConditionNotImplemented: {",
          "3177:      Type:    string(status.ConditionNotImplemented),",
          "3178:      Status:  contour_api_v1.ConditionTrue,",
          "3179:      Reason:  string(status.ReasonHTTPRouteFilterType),",
          "3180:      Message: \"HTTPRoute.Spec.Rules.Filters: Only RequestHeaderModifier type is supported.\",",
          "3181:     },",
          "3182:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3183:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3184:      Status:  contour_api_v1.ConditionFalse,",
          "3185:      Reason:  string(status.ReasonErrorsExist),",
          "3186:      Message: \"Errors found, check other Conditions for details.\",",
          "3187:     },",
          "3188:    },",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3145:      }},",
          "3146:     },",
          "3147:    }},",
          "3158:   }},",
          "3159:  })",
          "",
          "[Removed Lines]",
          "3148:   want: []metav1.Condition{{",
          "3149:    Type:    string(status.ConditionNotImplemented),",
          "3150:    Status:  contour_api_v1.ConditionTrue,",
          "3151:    Reason:  string(status.ReasonHTTPRouteFilterType),",
          "3152:    Message: \"HTTPRoute.Spec.Rules.ForwardTo.Filters: Only RequestHeaderModifier type is supported.\",",
          "3153:   }, {",
          "3154:    Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3155:    Status:  contour_api_v1.ConditionFalse,",
          "3156:    Reason:  string(status.ReasonErrorsExist),",
          "3157:    Message: \"Errors found, check other Conditions for details.\",",
          "",
          "[Added Lines]",
          "3223:   want: []*status.ConditionsUpdate{{",
          "3224:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3225:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3226:     status.ConditionNotImplemented: {",
          "3227:      Type:    string(status.ConditionNotImplemented),",
          "3228:      Status:  contour_api_v1.ConditionTrue,",
          "3229:      Reason:  string(status.ReasonHTTPRouteFilterType),",
          "3230:      Message: \"HTTPRoute.Spec.Rules.ForwardTo.Filters: Only RequestHeaderModifier type is supported.\",",
          "3231:     },",
          "3232:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3233:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3234:      Status:  contour_api_v1.ConditionFalse,",
          "3235:      Reason:  string(status.ReasonErrorsExist),",
          "3236:      Message: \"Errors found, check other Conditions for details.\",",
          "3237:     },",
          "3238:    },",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3191:      }},",
          "3192:     },",
          "3193:    }},",
          "3204:   }},",
          "3205:  })",
          "",
          "[Removed Lines]",
          "3194:   want: []metav1.Condition{{",
          "3195:    Type:    string(status.ConditionResolvedRefs),",
          "3196:    Status:  contour_api_v1.ConditionFalse,",
          "3197:    Reason:  string(status.ReasonDegraded),",
          "3198:    Message: \"duplicate header addition: \\\"Custom\\\" on request headers\",",
          "3199:   }, {",
          "3200:    Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3201:    Status:  contour_api_v1.ConditionFalse,",
          "3202:    Reason:  string(status.ReasonErrorsExist),",
          "3203:    Message: \"Errors found, check other Conditions for details.\",",
          "",
          "[Added Lines]",
          "3275:   want: []*status.ConditionsUpdate{{",
          "3276:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3277:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3278:     status.ConditionResolvedRefs: {",
          "3279:      Type:    string(status.ConditionResolvedRefs),",
          "3280:      Status:  contour_api_v1.ConditionFalse,",
          "3281:      Reason:  string(status.ReasonDegraded),",
          "3282:      Message: \"duplicate header addition: \\\"Custom\\\" on request headers\",",
          "3283:     },",
          "3284:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3285:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3286:      Status:  contour_api_v1.ConditionFalse,",
          "3287:      Reason:  string(status.ReasonErrorsExist),",
          "3288:      Message: \"Errors found, check other Conditions for details.\",",
          "3289:     },",
          "3290:    },",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3237:      }},",
          "3238:     },",
          "3239:    }},",
          "3250:   }},",
          "3251:  })",
          "",
          "[Removed Lines]",
          "3240:   want: []metav1.Condition{{",
          "3241:    Type:    string(status.ConditionResolvedRefs),",
          "3242:    Status:  contour_api_v1.ConditionFalse,",
          "3243:    Reason:  string(status.ReasonDegraded),",
          "3244:    Message: \"invalid set header \\\"!invalid-Header\\\": [a valid HTTP header must consist of alphanumeric characters or '-' (e.g. 'X-Header-Name', regex used for validation is '[-A-Za-z0-9]+')] on request headers\",",
          "3245:   }, {",
          "3246:    Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3247:    Status:  contour_api_v1.ConditionFalse,",
          "3248:    Reason:  string(status.ReasonErrorsExist),",
          "3249:    Message: \"Errors found, check other Conditions for details.\",",
          "",
          "[Added Lines]",
          "3327:   want: []*status.ConditionsUpdate{{",
          "3328:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3329:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3330:     status.ConditionResolvedRefs: {",
          "3331:      Type:    string(status.ConditionResolvedRefs),",
          "3332:      Status:  contour_api_v1.ConditionFalse,",
          "3333:      Reason:  string(status.ReasonDegraded),",
          "3334:      Message: \"invalid set header \\\"!invalid-Header\\\": [a valid HTTP header must consist of alphanumeric characters or '-' (e.g. 'X-Header-Name', regex used for validation is '[-A-Za-z0-9]+')] on request headers\",",
          "3335:     },",
          "3336:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3337:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3338:      Status:  contour_api_v1.ConditionFalse,",
          "3339:      Reason:  string(status.ReasonErrorsExist),",
          "3340:      Message: \"Errors found, check other Conditions for details.\",",
          "3341:     },",
          "3342:    },",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3273:      }},",
          "3274:     },",
          "3275:    }},",
          "3281:   }},",
          "3282:  })",
          "3283: }",
          "",
          "[Removed Lines]",
          "3276:   want: []metav1.Condition{{",
          "3277:    Type:    \"Admitted\",",
          "3278:    Status:  contour_api_v1.ConditionFalse,",
          "3279:    Reason:  \"GatewayAllowMismatch\",",
          "3280:    Message: \"Gateway RouteSelector matches, but GatewayAllow has mismatch.\",",
          "",
          "[Added Lines]",
          "3369:   want: []*status.ConditionsUpdate{{",
          "3370:    FullName: types.NamespacedName{Namespace: \"default\", Name: \"basic\"},",
          "3371:    Conditions: map[gatewayapi_v1alpha1.RouteConditionType]metav1.Condition{",
          "3372:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3373:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "3374:      Status:  contour_api_v1.ConditionFalse,",
          "3375:      Reason:  string(status.ReasonGatewayAllowMismatch),",
          "3376:      Message: \"Gateway RouteSelector matches, but GatewayAllow has mismatch.\",",
          "3377:     },",
          "3378:    },",
          "",
          "---------------"
        ]
      }
    }
  ]
}