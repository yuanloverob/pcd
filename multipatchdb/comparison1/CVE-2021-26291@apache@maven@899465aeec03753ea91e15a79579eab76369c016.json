{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "899465aeec03753ea91e15a79579eab76369c016",
  "patch_info": {
    "commit_hash": "899465aeec03753ea91e15a79579eab76369c016",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/899465aeec03753ea91e15a79579eab76369c016",
    "files": [
      "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "maven-settings/pom.xml",
      "maven-settings/src/main/mdo/settings.mdo"
    ],
    "message": "[MNG-7117] add support for blocked mirror",
    "before_after_code_files": [
      "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo"
    ]
  },
  "patch_diff": {
    "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java": [
      "File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java -> maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:         DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();",
      "178:         for ( Mirror mirror : request.getMirrors() )",
      "179:         {",
      "182:         }",
      "183:         session.setMirrorSelector( mirrorSelector );",
      "",
      "[Removed Lines]",
      "180:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),",
      "181:                                 mirror.getMirrorOfLayouts() );",
      "",
      "[Added Lines]",
      "180:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.isBlocked(),",
      "181:                                 mirror.getMirrorOf(), mirror.getMirrorOfLayouts() );",
      "",
      "---------------"
    ],
    "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo": [
      "File: maven-settings/src/main/mdo/settings.mdo -> maven-settings/src/main/mdo/settings.mdo",
      "--- Hunk 1 ---",
      "[Context before]",
      "633:             of the mirror to repositories with a matching layout (apart from a matching id). Since Maven 3.",
      "634:           </description>",
      "635:         </field>",
      "636:       </fields>",
      "637:       <codeSegments>",
      "638:         <codeSegment>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "636:         <field>",
      "637:           <name>blocked</name>",
      "638:           <version>1.2.0+</version>",
      "639:           <type>boolean</type>",
      "640:           <defaultValue>false</defaultValue>",
      "641:           <description>",
      "642:             Whether this mirror should be blocked from any download request but fail the download process, explaining why.",
      "643:           </description>",
      "644:         </field>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "648:         sb.append( \",mirrorOf=\" ).append( mirrorOf );",
      "649:         sb.append( \",url=\" ).append( this.url );",
      "650:         sb.append( \",name=\" ).append( this.name );",
      "651:         sb.append( \"]\" );",
      "652:         return sb.toString();",
      "653:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "660:         if ( isBlocked() )",
      "661:         {",
      "662:             sb.append( \",blocked\" );",
      "663:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a5a40c6d23bc4af7ab7945eaac0fa689d2c6143",
      "candidate_info": {
        "commit_hash": "3a5a40c6d23bc4af7ab7945eaac0fa689d2c6143",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/3a5a40c6d23bc4af7ab7945eaac0fa689d2c6143",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java"
        ],
        "message": "[MNG-7391] Fix MojosExecutionStrategy lookup to be able to look into the SessionScope (#692)",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import org.apache.maven.plugin.PluginManagerException;",
          "39: import org.apache.maven.plugin.descriptor.MojoDescriptor;",
          "40: import org.apache.maven.project.MavenProject;",
          "41: import org.codehaus.plexus.component.annotations.Component;",
          "42: import org.codehaus.plexus.component.annotations.Requirement;",
          "43: import org.codehaus.plexus.util.StringUtils;",
          "44: import org.eclipse.aether.SessionData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import org.codehaus.plexus.PlexusContainer;",
          "44: import org.codehaus.plexus.component.repository.exception.ComponentLookupException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     private final ReadWriteLock aggregatorLock = new ReentrantReadWriteLock();",
          "90:     @Requirement",
          "93:     public MojoExecutor()",
          "94:     {",
          "",
          "[Removed Lines]",
          "91:     private MojosExecutionStrategy mojosExecutionStrategy;",
          "",
          "[Added Lines]",
          "93:     private PlexusContainer container;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:         final PhaseRecorder phaseRecorder = new PhaseRecorder( session.getCurrentProject() );",
          "163:         {",
          "164:             @Override",
          "165:             public void run( MojoExecution mojoExecution ) throws LifecycleExecutionException",
          "",
          "[Removed Lines]",
          "162:         mojosExecutionStrategy.execute( mojoExecutions, session, new MojoExecutionRunner()",
          "",
          "[Added Lines]",
          "164:         MojosExecutionStrategy strategy;",
          "165:         try",
          "166:         {",
          "167:             strategy = container.lookup( MojosExecutionStrategy.class );",
          "168:         }",
          "169:         catch ( ComponentLookupException e )",
          "170:         {",
          "171:             throw new IllegalStateException( \"Unable to lookup MojosExecutionStrategy\", e );",
          "172:         }",
          "173:         strategy.execute( mojoExecutions, session, new MojoExecutionRunner()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5213f43df145479ef8714126ba320d51d3f8e470",
      "candidate_info": {
        "commit_hash": "5213f43df145479ef8714126ba320d51d3f8e470",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/5213f43df145479ef8714126ba320d51d3f8e470",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[maven-release-plugin] prepare for next development iteration",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "84cbe1ab2e22a12c2c108d1a0e5233f875475fff",
      "candidate_info": {
        "commit_hash": "84cbe1ab2e22a12c2c108d1a0e5233f875475fff",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/84cbe1ab2e22a12c2c108d1a0e5233f875475fff",
        "files": [
          "maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java"
        ],
        "message": "[MNG-7362] DefaultArtifactResolver has spurious \"Failure detected\" INFO log",
        "before_after_code_files": [
          "maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java||maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java||maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java": [
          "File: maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java -> maven-compat/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "511:         if ( result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations()",
          "512:             || result.hasCircularDependencyExceptions() )",
          "513:         {",
          "515:             return result;",
          "516:         }",
          "",
          "[Removed Lines]",
          "514:             logger.info( \"Failure detected.\" );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76d5f0d942f52650d3bdf775b6af42d23d69066b",
      "candidate_info": {
        "commit_hash": "76d5f0d942f52650d3bdf775b6af42d23d69066b",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/76d5f0d942f52650d3bdf775b6af42d23d69066b",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java"
        ],
        "message": "[MNG-6843] Parallel build fails due to missing JAR artifacts in compilePath\n\nSigned-off-by: rfscholte <rfscholte@apache.org>\n(cherry picked from commit 73e00ed85df84ba0c557dd020740812b2453f2d3)\n\nThis closes #482",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java -> maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     private Set<Artifact> resolvedArtifacts;",
          "118:     private Artifact parentArtifact;",
          "120:     private Set<Artifact> pluginArtifacts;",
          "",
          "[Removed Lines]",
          "114:     private ArtifactFilter artifactFilter;",
          "116:     private Set<Artifact> artifacts;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     private Artifact artifact;",
          "157:     private Model originalModel;",
          "",
          "[Removed Lines]",
          "155:     private Map<String, Artifact> artifactMap;",
          "",
          "[Added Lines]",
          "146:     private final ThreadLocal<ArtifactsHolder> threadLocalArtifactsHolder = new ThreadLocal()",
          "147:     {",
          "148:         protected ArtifactsHolder initialValue()",
          "149:         {",
          "150:             return new ArtifactsHolder();",
          "151:         }",
          "152:     };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "696:     public void setArtifacts( Set<Artifact> artifacts )",
          "697:     {",
          "702:     }",
          "",
          "[Removed Lines]",
          "698:         this.artifacts = artifacts;",
          "701:         artifactMap = null;",
          "",
          "[Added Lines]",
          "693:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "694:         artifactsHolder.artifacts = artifacts;",
          "697:         artifactsHolder.artifactMap = null;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "712:     public Set<Artifact> getArtifacts()",
          "713:     {",
          "715:         {",
          "717:             {",
          "719:             }",
          "720:             else",
          "721:             {",
          "723:                 for ( Artifact artifact : resolvedArtifacts )",
          "724:                 {",
          "726:                     {",
          "728:                     }",
          "729:                 }",
          "730:             }",
          "731:         }",
          "733:     }",
          "735:     public Map<String, Artifact> getArtifactMap()",
          "736:     {",
          "738:         {",
          "740:         }",
          "742:     }",
          "744:     public void setPluginArtifacts( Set<Artifact> pluginArtifacts )",
          "",
          "[Removed Lines]",
          "714:         if ( artifacts == null )",
          "716:             if ( artifactFilter == null || resolvedArtifacts == null )",
          "718:                 artifacts = new LinkedHashSet<>();",
          "722:                 artifacts = new LinkedHashSet<>( resolvedArtifacts.size() * 2 );",
          "725:                     if ( artifactFilter.include( artifact ) )",
          "727:                         artifacts.add( artifact );",
          "732:         return artifacts;",
          "737:         if ( artifactMap == null )",
          "739:             artifactMap = ArtifactUtils.artifactMapByVersionlessId( getArtifacts() );",
          "741:         return artifactMap;",
          "",
          "[Added Lines]",
          "710:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "711:         if ( artifactsHolder.artifacts == null )",
          "713:             if ( artifactsHolder.artifactFilter == null || resolvedArtifacts == null )",
          "715:                 artifactsHolder.artifacts = new LinkedHashSet<>();",
          "719:                 artifactsHolder.artifacts = new LinkedHashSet<>( resolvedArtifacts.size() * 2 );",
          "722:                     if ( artifactsHolder.artifactFilter.include( artifact ) )",
          "724:                         artifactsHolder.artifacts.add( artifact );",
          "729:         return artifactsHolder.artifacts;",
          "734:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "735:         if ( artifactsHolder.artifactMap == null )",
          "737:             artifactsHolder.artifactMap = ArtifactUtils.artifactMapByVersionlessId( getArtifacts() );",
          "739:         return artifactsHolder.artifactMap;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1433:     public void setResolvedArtifacts( Set<Artifact> artifacts )",
          "1434:     {",
          "1435:         this.resolvedArtifacts = ( artifacts != null ) ? artifacts : Collections.<Artifact>emptySet();",
          "1438:     }",
          "",
          "[Removed Lines]",
          "1436:         this.artifacts = null;",
          "1437:         this.artifactMap = null;",
          "",
          "[Added Lines]",
          "1434:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "1435:         artifactsHolder.artifacts = null;",
          "1436:         artifactsHolder.artifactMap = null;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1448:     public void setArtifactFilter( ArtifactFilter artifactFilter )",
          "1449:     {",
          "1453:     }",
          "",
          "[Removed Lines]",
          "1450:         this.artifactFilter = artifactFilter;",
          "1451:         this.artifacts = null;",
          "1452:         this.artifactMap = null;",
          "",
          "[Added Lines]",
          "1449:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "1450:         artifactsHolder.artifactFilter = artifactFilter;",
          "1451:         artifactsHolder.artifacts = null;",
          "1452:         artifactsHolder.artifactMap = null;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1991:     {",
          "1992:         this.projectBuilderConfiguration = projectBuildingRequest;",
          "1993:     }",
          "1994: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1993:     private static class ArtifactsHolder",
          "1994:     {",
          "1995:         private ArtifactFilter artifactFilter;",
          "1996:         private Set<Artifact> artifacts;",
          "1997:         private Map<String, Artifact> artifactMap;",
          "1998:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bb1228de60e805b2f864254a0b1efef7e2d7dde",
      "candidate_info": {
        "commit_hash": "2bb1228de60e805b2f864254a0b1efef7e2d7dde",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/2bb1228de60e805b2f864254a0b1efef7e2d7dde",
        "files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/DefaultModelVersionProcessor.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ModelVersionProcessor.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java"
        ],
        "message": "[MNG-7407] Introduce a ModelVersionProcessor component to make CI Friendly Versions pluggable\n\nThis closes #674",
        "before_after_code_files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/DefaultModelVersionProcessor.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/DefaultModelVersionProcessor.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ModelVersionProcessor.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ModelVersionProcessor.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java||maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java||maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java||maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.maven.model.composition.DependencyManagementImporter;",
          "25: import org.apache.maven.model.inheritance.DefaultInheritanceAssembler;",
          "26: import org.apache.maven.model.inheritance.InheritanceAssembler;",
          "27: import org.apache.maven.model.interpolation.ModelInterpolator;",
          "28: import org.apache.maven.model.interpolation.StringVisitorModelInterpolator;",
          "29: import org.apache.maven.model.io.DefaultModelReader;",
          "30: import org.apache.maven.model.io.ModelReader;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.maven.model.interpolation.DefaultModelVersionProcessor;",
          "29: import org.apache.maven.model.interpolation.ModelVersionProcessor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:     {",
          "134:         UrlNormalizer normalizer = newUrlNormalizer();",
          "135:         PathTranslator pathTranslator = newPathTranslator();",
          "137:     }",
          "139:     protected ModelValidator newModelValidator()",
          "140:     {",
          "142:     }",
          "144:     protected ModelNormalizer newModelNormalizer()",
          "",
          "[Removed Lines]",
          "136:         return new StringVisitorModelInterpolator().setPathTranslator( pathTranslator ).setUrlNormalizer( normalizer );",
          "141:         return new DefaultModelValidator();",
          "",
          "[Added Lines]",
          "138:         return new StringVisitorModelInterpolator().setPathTranslator( pathTranslator ).setUrlNormalizer( normalizer )",
          "139:                         .setVersionPropertiesProcessor( newModelVersionPropertiesProcessor() );",
          "140:     }",
          "142:     protected ModelVersionProcessor newModelVersionPropertiesProcessor()",
          "143:     {",
          "144:         return new DefaultModelVersionProcessor();",
          "149:         return new DefaultModelValidator( newModelVersionPropertiesProcessor() );",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java -> maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: public abstract class AbstractStringBasedModelInterpolator",
          "53:     implements ModelInterpolator",
          "54: {",
          "61:     private static final List<String> PROJECT_PREFIXES = Arrays.asList( \"pom.\", \"project.\" );",
          "63:     private static final Collection<String> TRANSLATED_PATH_EXPRESSIONS;",
          "",
          "[Removed Lines]",
          "55:     public static final String SHA1_PROPERTY = \"sha1\";",
          "57:     public static final String CHANGELIST_PROPERTY = \"changelist\";",
          "59:     public static final String REVISION_PROPERTY = \"revision\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     @Inject",
          "89:     private UrlNormalizer urlNormalizer;",
          "95:     public AbstractStringBasedModelInterpolator setPathTranslator( PathTranslator pathTranslator )",
          "96:     {",
          "",
          "[Removed Lines]",
          "91:     public AbstractStringBasedModelInterpolator()",
          "92:     {",
          "93:     }",
          "",
          "[Added Lines]",
          "85:     @Inject",
          "86:     private ModelVersionProcessor versionProcessor;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:         return this;",
          "105:     }",
          "107:     protected List<ValueSource> createValueSources( final Model model, final File projectDir,",
          "108:                                                     final ModelBuildingRequest config,",
          "109:                                                     final ModelProblemCollector problems )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     public AbstractStringBasedModelInterpolator setVersionPropertiesProcessor( ModelVersionProcessor processor )",
          "101:     {",
          "102:         this.versionProcessor = processor;",
          "103:         return this;",
          "104:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:         valueSources.add( new MapBasedValueSource( config.getUserProperties() ) );",
          "178:         valueSources.add( new MapBasedValueSource( modelProperties ) );",
          "180:         valueSources.add( new MapBasedValueSource( config.getSystemProperties() ) );",
          "",
          "[Removed Lines]",
          "166:         if ( config.getSystemProperties().containsKey( REVISION_PROPERTY ) )",
          "167:         {",
          "168:             modelProperties.put( REVISION_PROPERTY, config.getSystemProperties().get( REVISION_PROPERTY ) );",
          "169:         }",
          "170:         if ( config.getSystemProperties().containsKey( CHANGELIST_PROPERTY ) )",
          "171:         {",
          "172:             modelProperties.put( CHANGELIST_PROPERTY, config.getSystemProperties().get( CHANGELIST_PROPERTY ) );",
          "173:         }",
          "174:         if ( config.getSystemProperties().containsKey( SHA1_PROPERTY ) )",
          "175:         {",
          "176:             modelProperties.put( SHA1_PROPERTY, config.getSystemProperties().get( SHA1_PROPERTY ) );",
          "177:         }",
          "",
          "[Added Lines]",
          "165:         versionProcessor.overwriteModelProperties( modelProperties, config );",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/DefaultModelVersionProcessor.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/DefaultModelVersionProcessor.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/DefaultModelVersionProcessor.java -> maven-model-builder/src/main/java/org/apache/maven/model/interpolation/DefaultModelVersionProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.model.interpolation;",
          "22: import java.util.Properties;",
          "24: import javax.inject.Named;",
          "25: import javax.inject.Singleton;",
          "27: import org.apache.maven.model.building.ModelBuildingRequest;",
          "33: @Named",
          "34: @Singleton",
          "35: public class DefaultModelVersionProcessor",
          "36:     implements ModelVersionProcessor",
          "37: {",
          "39:     private static final String SHA1_PROPERTY = \"sha1\";",
          "41:     private static final String CHANGELIST_PROPERTY = \"changelist\";",
          "43:     private static final String REVISION_PROPERTY = \"revision\";",
          "45:     @Override",
          "46:     public boolean isValidProperty( String property )",
          "47:     {",
          "48:         return REVISION_PROPERTY.equals( property ) || CHANGELIST_PROPERTY.equals( property )",
          "49:             || SHA1_PROPERTY.equals( property );",
          "50:     }",
          "52:     @Override",
          "53:     public void overwriteModelProperties( Properties modelProperties, ModelBuildingRequest request )",
          "54:     {",
          "55:         if ( request.getSystemProperties().containsKey( REVISION_PROPERTY ) )",
          "56:         {",
          "57:             modelProperties.put( REVISION_PROPERTY, request.getSystemProperties().get( REVISION_PROPERTY ) );",
          "58:         }",
          "59:         if ( request.getSystemProperties().containsKey( CHANGELIST_PROPERTY ) )",
          "60:         {",
          "61:             modelProperties.put( CHANGELIST_PROPERTY, request.getSystemProperties().get( CHANGELIST_PROPERTY ) );",
          "62:         }",
          "63:         if ( request.getSystemProperties().containsKey( SHA1_PROPERTY ) )",
          "64:         {",
          "65:             modelProperties.put( SHA1_PROPERTY, request.getSystemProperties().get( SHA1_PROPERTY ) );",
          "66:         }",
          "68:     }",
          "69: }",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ModelVersionProcessor.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ModelVersionProcessor.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ModelVersionProcessor.java -> maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ModelVersionProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.model.interpolation;",
          "22: import java.util.Properties;",
          "24: import org.apache.maven.model.building.ModelBuildingRequest;",
          "30: public interface ModelVersionProcessor",
          "31: {",
          "37:     boolean isValidProperty( String property );",
          "45:     void overwriteModelProperties( Properties modelProperties, ModelBuildingRequest request );",
          "47: }",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java||maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java -> maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import org.apache.maven.model.building.ModelProblem.Version;",
          "45: import org.apache.maven.model.building.ModelProblemCollector;",
          "46: import org.apache.maven.model.building.ModelProblemCollectorRequest;",
          "48: import org.codehaus.plexus.util.StringUtils;",
          "50: import java.io.File;",
          "",
          "[Removed Lines]",
          "47: import org.apache.maven.model.interpolation.AbstractStringBasedModelInterpolator;",
          "",
          "[Added Lines]",
          "47: import org.apache.maven.model.interpolation.ModelVersionProcessor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: import java.util.regex.Matcher;",
          "59: import java.util.regex.Pattern;",
          "61: import javax.inject.Named;",
          "62: import javax.inject.Singleton;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: import javax.inject.Inject;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:     private static final Pattern CI_FRIENDLY_EXPRESSION = Pattern.compile( \"\\\\$\\\\{(.+?)\\\\}\" );",
          "80:     private static final String ILLEGAL_FS_CHARS = \"\\\\/:\\\"<>|?*\";",
          "82:     private static final String ILLEGAL_VERSION_CHARS = ILLEGAL_FS_CHARS;",
          "",
          "[Removed Lines]",
          "75:     private static final List<String> CI_FRIENDLY_POSSIBLE_PROPERTY_NAMES =",
          "76:         Arrays.asList( AbstractStringBasedModelInterpolator.REVISION_PROPERTY,",
          "77:                        AbstractStringBasedModelInterpolator.CHANGELIST_PROPERTY,",
          "78:                        AbstractStringBasedModelInterpolator.SHA1_PROPERTY );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:     private final Set<String> validIds = new HashSet<>();",
          "90:     @Override",
          "91:     public void validateRawModel( Model m, ModelBuildingRequest request, ModelProblemCollector problems )",
          "92:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     private ModelVersionProcessor versionProcessor;",
          "88:     @Inject",
          "89:     public DefaultModelValidator(  ModelVersionProcessor versionProcessor )",
          "90:     {",
          "91:         this.versionProcessor = versionProcessor;",
          "92:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "930:             return true;",
          "931:         }",
          "940:         Matcher m = CI_FRIENDLY_EXPRESSION.matcher( string.trim() );",
          "941:         while ( m.find() )",
          "942:         {",
          "944:             {",
          "945:                 addViolation( problems, severity, version, fieldName, null,",
          "946:                               \"contains an expression but should be a constant.\", tracker );",
          "948:                 return false;",
          "949:             }",
          "950:         }",
          "",
          "[Removed Lines]",
          "943:             if ( !CI_FRIENDLY_POSSIBLE_PROPERTY_NAMES.contains( m.group( 1 ) ) )",
          "",
          "[Added Lines]",
          "940:             String property = m.group( 1 );",
          "941:             if ( !versionProcessor.isValidProperty( property ) )",
          "",
          "---------------"
        ],
        "maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java||maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java": [
          "File: maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java -> maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         throws Exception",
          "55:     {",
          "56:         super.setUp();",
          "58:     }",
          "",
          "[Removed Lines]",
          "57:         interpolator = new StringSearchModelInterpolator();",
          "",
          "[Added Lines]",
          "57:         interpolator =",
          "58:             new StringSearchModelInterpolator().setVersionPropertiesProcessor( new DefaultModelVersionProcessor() );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "581:         SimpleProblemCollector problems = new SimpleProblemCollector();",
          "582:         StringSearchModelInterpolator interpolator = new StringSearchModelInterpolator();",
          "583:         interpolator.interpolateObject( new ClassWithFinalField(), new Model(), null, request, problems );",
          "585:         assertProblemFree(  problems );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584:         interpolator.setVersionPropertiesProcessor( new DefaultModelVersionProcessor() );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "606:         SimpleProblemCollector problems = new SimpleProblemCollector();",
          "607:         StringSearchModelInterpolator interpolator = new StringSearchModelInterpolator();",
          "608:         interpolator.interpolateObject( model, model, null, request, problems );",
          "610:         assertProblemFree( problems );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:         interpolator.setVersionPropertiesProcessor( new DefaultModelVersionProcessor() );",
          "",
          "---------------"
        ],
        "maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java||maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java": [
          "File: maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java -> maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.apache.maven.model.building.DefaultModelBuildingRequest;",
          "27: import org.apache.maven.model.building.ModelBuildingRequest;",
          "28: import org.apache.maven.model.building.SimpleProblemCollector;",
          "29: import org.apache.maven.model.io.xpp3.MavenXpp3Reader;",
          "31: import junit.framework.TestCase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.maven.model.interpolation.DefaultModelVersionProcessor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     {",
          "96:         super.setUp();",
          "99:     }",
          "101:     @Override",
          "",
          "[Removed Lines]",
          "98:         validator = new DefaultModelValidator();",
          "",
          "[Added Lines]",
          "99:         validator = new DefaultModelValidator(new DefaultModelVersionProcessor() );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ae1d95a581bbf07bab72aff7aa26b096a267615",
      "candidate_info": {
        "commit_hash": "9ae1d95a581bbf07bab72aff7aa26b096a267615",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/9ae1d95a581bbf07bab72aff7aa26b096a267615",
        "files": [
          "apache-maven/src/test/java/org/apache/maven/settings/GlobalSettingsTest.java",
          "maven-builder-support/src/main/java/org/apache/maven/building/StringSource.java",
          "maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java",
          "maven-compat/src/test/java/org/apache/maven/artifact/AbstractArtifactComponentTestCase.java",
          "maven-compat/src/test/java/org/apache/maven/repository/legacy/StringWagon.java",
          "maven-core/src/test/java/org/apache/maven/artifact/handler/ArtifactHandlerTest.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/DefaultLifecyclesStub.java",
          "maven-core/src/test/java/org/apache/maven/project/ExtensionDescriptorBuilderTest.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java"
        ],
        "message": "[MNG-6844] Use StandardCharsets and remove outdated @SuppressWarnings\n\nThis closes #312",
        "before_after_code_files": [
          "apache-maven/src/test/java/org/apache/maven/settings/GlobalSettingsTest.java||apache-maven/src/test/java/org/apache/maven/settings/GlobalSettingsTest.java",
          "maven-builder-support/src/main/java/org/apache/maven/building/StringSource.java||maven-builder-support/src/main/java/org/apache/maven/building/StringSource.java",
          "maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java||maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java",
          "maven-compat/src/test/java/org/apache/maven/artifact/AbstractArtifactComponentTestCase.java||maven-compat/src/test/java/org/apache/maven/artifact/AbstractArtifactComponentTestCase.java",
          "maven-compat/src/test/java/org/apache/maven/repository/legacy/StringWagon.java||maven-compat/src/test/java/org/apache/maven/repository/legacy/StringWagon.java",
          "maven-core/src/test/java/org/apache/maven/artifact/handler/ArtifactHandlerTest.java||maven-core/src/test/java/org/apache/maven/artifact/handler/ArtifactHandlerTest.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/DefaultLifecyclesStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/DefaultLifecyclesStub.java",
          "maven-core/src/test/java/org/apache/maven/project/ExtensionDescriptorBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ExtensionDescriptorBuilderTest.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/test/java/org/apache/maven/settings/GlobalSettingsTest.java||apache-maven/src/test/java/org/apache/maven/settings/GlobalSettingsTest.java": [
          "File: apache-maven/src/test/java/org/apache/maven/settings/GlobalSettingsTest.java -> apache-maven/src/test/java/org/apache/maven/settings/GlobalSettingsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.io.FileInputStream;",
          "27: import java.io.InputStreamReader;",
          "28: import java.io.Reader;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:         File globalSettingsFile = new File( basedir, \"src/conf/settings.xml\" );",
          "45:         assertTrue( globalSettingsFile.getAbsolutePath(), globalSettingsFile.isFile() );",
          "48:         {",
          "49:             new SettingsXpp3Reader().read( reader );",
          "50:         }",
          "",
          "[Removed Lines]",
          "47:         try ( Reader reader = new InputStreamReader( new FileInputStream( globalSettingsFile ), \"UTF-8\" ) )",
          "",
          "[Added Lines]",
          "48:         try ( Reader reader = new InputStreamReader( new FileInputStream( globalSettingsFile ), StandardCharsets.UTF_8) )",
          "",
          "---------------"
        ],
        "maven-builder-support/src/main/java/org/apache/maven/building/StringSource.java||maven-builder-support/src/main/java/org/apache/maven/building/StringSource.java": [
          "File: maven-builder-support/src/main/java/org/apache/maven/building/StringSource.java -> maven-builder-support/src/main/java/org/apache/maven/building/StringSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.ByteArrayInputStream;",
          "23: import java.io.IOException;",
          "24: import java.io.InputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     public InputStream getInputStream()",
          "63:         throws IOException",
          "64:     {",
          "66:     }",
          "68:     @Override",
          "",
          "[Removed Lines]",
          "65:         return new ByteArrayInputStream( content.getBytes( \"UTF-8\" ) );",
          "",
          "[Added Lines]",
          "66:         return new ByteArrayInputStream( content.getBytes( StandardCharsets.UTF_8 ) );",
          "",
          "---------------"
        ],
        "maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java||maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java": [
          "File: maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java -> maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     implements ModelInheritanceAssembler",
          "56: {",
          "59:     public void assembleBuildInheritance( Build childBuild, Build parentBuild, boolean handleAsInheritance )",
          "60:     {",
          "",
          "[Removed Lines]",
          "58:     @SuppressWarnings( \"unchecked\" )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:     }",
          "311:     private void assembleDependencyManagementInheritance( Model child, Model parent )",
          "312:     {",
          "313:         DependencyManagement parentDepMgmt = parent.getDependencyManagement();",
          "",
          "[Removed Lines]",
          "310:     @SuppressWarnings( \"unchecked\" )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "527:     }",
          "531:     private void assembleDependencyInheritance( Model child, Model parent )",
          "532:     {",
          "533:         Map<String, Dependency> depsMap = new LinkedHashMap<>();",
          "",
          "[Removed Lines]",
          "530:     @SuppressWarnings( \"unchecked\" )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-compat/src/test/java/org/apache/maven/artifact/AbstractArtifactComponentTestCase.java||maven-compat/src/test/java/org/apache/maven/artifact/AbstractArtifactComponentTestCase.java": [
          "File: maven-compat/src/test/java/org/apache/maven/artifact/AbstractArtifactComponentTestCase.java -> maven-compat/src/test/java/org/apache/maven/artifact/AbstractArtifactComponentTestCase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: import java.io.IOException;",
          "60: import java.io.OutputStreamWriter;",
          "61: import java.io.Writer;",
          "62: import java.util.ArrayList;",
          "63: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:         {",
          "294:             artifactFile.getParentFile().mkdirs();",
          "295:         }",
          "297:         {",
          "298:             writer.write( artifact.getId() );",
          "299:         }",
          "",
          "[Removed Lines]",
          "296:         try ( Writer writer = new OutputStreamWriter( new FileOutputStream( artifactFile ), \"ISO-8859-1\" ) )",
          "",
          "[Added Lines]",
          "297:         try ( Writer writer = new OutputStreamWriter( new FileOutputStream( artifactFile ), StandardCharsets.ISO_8859_1) )",
          "",
          "---------------"
        ],
        "maven-compat/src/test/java/org/apache/maven/repository/legacy/StringWagon.java||maven-compat/src/test/java/org/apache/maven/repository/legacy/StringWagon.java": [
          "File: maven-compat/src/test/java/org/apache/maven/repository/legacy/StringWagon.java -> maven-compat/src/test/java/org/apache/maven/repository/legacy/StringWagon.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.ByteArrayInputStream;",
          "23: import java.io.ByteArrayOutputStream;",
          "24: import java.io.UnsupportedEncodingException;",
          "25: import java.util.HashMap;",
          "26: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:             resource.setContentLength( content.length() );",
          "73:             resource.setLastModified( System.currentTimeMillis() );",
          "83:         }",
          "84:         else",
          "85:         {",
          "",
          "[Removed Lines]",
          "75:             try",
          "76:             {",
          "77:                 inputData.setInputStream( new ByteArrayInputStream( content.getBytes( \"UTF-8\" ) ) );",
          "78:             }",
          "79:             catch ( UnsupportedEncodingException e )",
          "80:             {",
          "81:                 throw new Error( \"broken JVM\", e );",
          "82:             }",
          "",
          "[Added Lines]",
          "76:             inputData.setInputStream( new ByteArrayInputStream( content.getBytes( StandardCharsets.UTF_8 ) ) );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/artifact/handler/ArtifactHandlerTest.java||maven-core/src/test/java/org/apache/maven/artifact/handler/ArtifactHandlerTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/artifact/handler/ArtifactHandlerTest.java -> maven-core/src/test/java/org/apache/maven/artifact/handler/ArtifactHandlerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     {",
          "34:         File apt = getTestFile( \"src/site/apt/artifact-handlers.apt\" );",
          "37:         List<String> lines = FileUtils.loadFile( apt );",
          "39:         for ( String line : lines )",
          "",
          "[Removed Lines]",
          "36:         @SuppressWarnings( \"unchecked\" )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/DefaultLifecyclesStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/DefaultLifecyclesStub.java": [
          "File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/DefaultLifecyclesStub.java -> maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/DefaultLifecyclesStub.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         List<String> stubSiteCycle =",
          "48:             Arrays.asList( PRE_SITE.getPhase(), SITE.getPhase(), POST_SITE.getPhase(), SITE_DEPLOY.getPhase() );",
          "51:         Iterator<List<String>> lcs = Arrays.asList( stubDefaultCycle, stubCleanCycle, stubSiteCycle ).iterator();",
          "53:         Map<String, Lifecycle> lifeCycles = new HashMap<>();",
          "",
          "[Removed Lines]",
          "50:         @SuppressWarnings( \"unchecked\" )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/project/ExtensionDescriptorBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ExtensionDescriptorBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/ExtensionDescriptorBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/ExtensionDescriptorBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.io.ByteArrayInputStream;",
          "27: import java.io.InputStream;",
          "29: import java.util.Arrays;",
          "31: import junit.framework.TestCase;",
          "",
          "[Removed Lines]",
          "28: import java.io.UnsupportedEncodingException;",
          "",
          "[Added Lines]",
          "28: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     private InputStream toStream( String xml )",
          "63:     {",
          "72:     }",
          "74:     public void testEmptyDescriptor()",
          "",
          "[Removed Lines]",
          "64:         try",
          "65:         {",
          "66:             return new ByteArrayInputStream( xml.getBytes( \"UTF-8\" ) );",
          "67:         }",
          "68:         catch ( UnsupportedEncodingException e )",
          "69:         {",
          "70:             throw new IllegalStateException( e );",
          "71:         }",
          "",
          "[Added Lines]",
          "64:         return new ByteArrayInputStream( xml.getBytes( StandardCharsets.UTF_8 ) );",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java -> maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     protected Options options;",
          "111:     public CLIManager()",
          "112:     {",
          "113:         options = new Options();",
          "",
          "[Removed Lines]",
          "110:     @SuppressWarnings( { \"static-access\", \"checkstyle:linelength\" } )",
          "",
          "[Added Lines]",
          "110:     @SuppressWarnings( \"checkstyle:linelength\" )",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java -> maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     }",
          "74:     @Override",
          "76:     public List getFeedback()",
          "77:     {",
          "78:         return valueSource.getFeedback();",
          "",
          "[Removed Lines]",
          "75:     @SuppressWarnings( \"unchecked\" )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a6f12fba14161e1e0f5b5b4aa44715c9e451129",
      "candidate_info": {
        "commit_hash": "0a6f12fba14161e1e0f5b5b4aa44715c9e451129",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/0a6f12fba14161e1e0f5b5b4aa44715c9e451129",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[maven-release-plugin] prepare for next development iteration",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "3a465e14779483c1c4f0be552298f5d2b232a29b",
      "candidate_info": {
        "commit_hash": "3a465e14779483c1c4f0be552298f5d2b232a29b",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/3a465e14779483c1c4f0be552298f5d2b232a29b",
        "files": [
          "apache-maven/src/bin/mvn.cmd"
        ],
        "message": "[MNG-6837] Simplify detection of the MAVEN_HOME and make it fully qualified on Windows\n\nThe removed 'stripMHome' recursive function is not needed anymore\n\nThis closes #307",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: goto error",
          "62: :chkMHome",
          "65: goto error",
          "72: :checkMCmd",
          "73: if exist \"%MAVEN_HOME%\\bin\\mvn.cmd\" goto init",
          "74: goto error",
          "",
          "[Removed Lines]",
          "63: set \"MAVEN_HOME=%~dp0..\"",
          "64: if not \"%MAVEN_HOME%\"==\"\" goto stripMHome",
          "67: :stripMHome",
          "68: if not \"_%MAVEN_HOME:~-1%\"==\"_\\\" goto checkMCmd",
          "69: set \"MAVEN_HOME=%MAVEN_HOME:~0,-1%\"",
          "70: goto stripMHome",
          "",
          "[Added Lines]",
          "63: set \"MAVEN_HOME=%~dp0\"",
          "64: set \"MAVEN_HOME=%MAVEN_HOME:~0,-5%\"",
          "65: if not \"%MAVEN_HOME%\"==\"\" goto checkMCmd",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8348d2bd0a22bf50bbbe7401ec4e848ff0f32da3",
      "candidate_info": {
        "commit_hash": "8348d2bd0a22bf50bbbe7401ec4e848ff0f32da3",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8348d2bd0a22bf50bbbe7401ec4e848ff0f32da3",
        "files": [
          "apache-maven/src/main/appended-resources/licenses/MIT-slf4j-api-1.7.32.txt"
        ],
        "message": "Fix SLF4J license link",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "8456294977b40660ce37db853de344f0d26ee46d",
      "candidate_info": {
        "commit_hash": "8456294977b40660ce37db853de344f0d26ee46d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8456294977b40660ce37db853de344f0d26ee46d",
        "files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java",
          "maven-embedder/src/main/mdo/core-extensions.mdo"
        ],
        "message": "[MNG-6326] Make the build fail if core extensions can not be loaded (#648)",
        "before_after_code_files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java||maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java||maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java",
          "maven-embedder/src/main/mdo/core-extensions.mdo||maven-embedder/src/main/mdo/core-extensions.mdo"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java -> maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "706:     private List<CoreExtensionEntry> loadCoreExtensions( CliRequest cliRequest, ClassRealm containerRealm,",
          "707:                                                          Set<String> providedArtifacts )",
          "708:     {",
          "709:         if ( cliRequest.multiModuleProjectDirectory == null )",
          "710:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:             throws Exception",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "717:             return Collections.emptyList();",
          "718:         }",
          "721:         {",
          "737:             {",
          "783:         }",
          "785:         {",
          "787:         }",
          "789:     }",
          "791:     private List<CoreExtension> readCoreExtensionsDescriptor( File extensionsFile )",
          "",
          "[Removed Lines]",
          "720:         try",
          "722:             List<CoreExtension> extensions = readCoreExtensionsDescriptor( extensionsFile );",
          "723:             if ( extensions.isEmpty() )",
          "724:             {",
          "725:                 return Collections.emptyList();",
          "726:             }",
          "728:             ContainerConfiguration cc = new DefaultContainerConfiguration() //",
          "729:                 .setClassWorld( cliRequest.classWorld ) //",
          "730:                 .setRealm( containerRealm ) //",
          "731:                 .setClassPathScanning( PlexusConstants.SCANNING_INDEX ) //",
          "732:                 .setAutoWiring( true ) //",
          "733:                 .setJSR250Lifecycle( true ) //",
          "734:                 .setName( \"maven\" );",
          "736:             DefaultPlexusContainer container = new DefaultPlexusContainer( cc, new AbstractModule()",
          "738:                 @Override",
          "739:                 protected void configure()",
          "740:                 {",
          "741:                     bind( ILoggerFactory.class ).toInstance( slf4jLoggerFactory );",
          "742:                 }",
          "743:             } );",
          "745:             try",
          "746:             {",
          "747:                 container.setLookupRealm( null );",
          "749:                 container.setLoggerManager( plexusLoggerManager );",
          "751:                 container.getLoggerManager().setThresholds( cliRequest.request.getLoggingLevel() );",
          "753:                 Thread.currentThread().setContextClassLoader( container.getContainerRealm() );",
          "755:                 executionRequestPopulator = container.lookup( MavenExecutionRequestPopulator.class );",
          "757:                 configurationProcessors = container.lookupMap( ConfigurationProcessor.class );",
          "759:                 configure( cliRequest );",
          "761:                 MavenExecutionRequest request = DefaultMavenExecutionRequest.copy( cliRequest.request );",
          "763:                 request = populateRequest( cliRequest, request );",
          "765:                 request = executionRequestPopulator.populateDefaults( request );",
          "767:                 BootstrapCoreExtensionManager resolver = container.lookup( BootstrapCoreExtensionManager.class );",
          "769:                 return Collections.unmodifiableList( resolver.loadCoreExtensions( request, providedArtifacts,",
          "770:                                                                                   extensions ) );",
          "772:             }",
          "773:             finally",
          "774:             {",
          "775:                 executionRequestPopulator = null;",
          "776:                 container.dispose();",
          "777:             }",
          "778:         }",
          "779:         catch ( RuntimeException e )",
          "780:         {",
          "782:             throw e;",
          "784:         catch ( Exception e )",
          "786:             slf4jLogger.warn( \"Failed to read extensions descriptor {}: {}\", extensionsFile, e.getMessage() );",
          "788:         return Collections.emptyList();",
          "",
          "[Added Lines]",
          "721:         List<CoreExtension> extensions = readCoreExtensionsDescriptor( extensionsFile );",
          "722:         if ( extensions.isEmpty() )",
          "724:             return Collections.emptyList();",
          "725:         }",
          "727:         ContainerConfiguration cc = new DefaultContainerConfiguration() //",
          "728:             .setClassWorld( cliRequest.classWorld ) //",
          "729:             .setRealm( containerRealm ) //",
          "730:             .setClassPathScanning( PlexusConstants.SCANNING_INDEX ) //",
          "731:             .setAutoWiring( true ) //",
          "732:             .setJSR250Lifecycle( true ) //",
          "733:             .setName( \"maven\" );",
          "735:         DefaultPlexusContainer container = new DefaultPlexusContainer( cc, new AbstractModule()",
          "736:         {",
          "737:             @Override",
          "738:             protected void configure()",
          "740:                 bind( ILoggerFactory.class ).toInstance( slf4jLoggerFactory );",
          "741:             }",
          "742:         } );",
          "744:         try",
          "745:         {",
          "746:             container.setLookupRealm( null );",
          "748:             container.setLoggerManager( plexusLoggerManager );",
          "750:             container.getLoggerManager().setThresholds( cliRequest.request.getLoggingLevel() );",
          "752:             Thread.currentThread().setContextClassLoader( container.getContainerRealm() );",
          "754:             executionRequestPopulator = container.lookup( MavenExecutionRequestPopulator.class );",
          "756:             configurationProcessors = container.lookupMap( ConfigurationProcessor.class );",
          "758:             configure( cliRequest );",
          "760:             MavenExecutionRequest request = DefaultMavenExecutionRequest.copy( cliRequest.request );",
          "762:             request = populateRequest( cliRequest, request );",
          "764:             request = executionRequestPopulator.populateDefaults( request );",
          "766:             BootstrapCoreExtensionManager resolver = container.lookup( BootstrapCoreExtensionManager.class );",
          "768:             return Collections.unmodifiableList( resolver.loadCoreExtensions( request, providedArtifacts,",
          "769:                                                                               extensions ) );",
          "772:         finally",
          "774:             executionRequestPopulator = null;",
          "775:             container.dispose();",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java||maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java -> maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     private List<Artifact> resolveExtension( CoreExtension extension, RepositorySystemSession repoSession,",
          "130:                                              List<RemoteRepository> repositories, DependencyFilter dependencyFilter )",
          "132:     {",
          "145:     }",
          "146: }",
          "",
          "[Removed Lines]",
          "131:         throws PluginResolutionException",
          "133:         Plugin plugin = new Plugin();",
          "134:         plugin.setGroupId( extension.getGroupId() );",
          "135:         plugin.setArtifactId( extension.getArtifactId() );",
          "136:         plugin.setVersion( extension.getVersion() );",
          "138:         DependencyNode root =",
          "139:             pluginDependenciesResolver.resolveCoreExtension( plugin, dependencyFilter, repositories, repoSession );",
          "140:         PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();",
          "141:         root.accept( nlg );",
          "142:         List<Artifact> artifacts = nlg.getArtifacts( false );",
          "144:         return artifacts;",
          "",
          "[Added Lines]",
          "131:         throws ExtensionResolutionException",
          "133:         try",
          "134:         {",
          "138:             Plugin plugin = new Plugin();",
          "139:             plugin.setGroupId( extension.getGroupId() );",
          "140:             plugin.setArtifactId( extension.getArtifactId() );",
          "141:             plugin.setVersion( extension.getVersion() );",
          "143:             DependencyNode root = pluginDependenciesResolver",
          "144:                     .resolveCoreExtension( plugin, dependencyFilter, repositories, repoSession );",
          "145:             PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();",
          "146:             root.accept( nlg );",
          "147:             List<Artifact> artifacts = nlg.getArtifacts( false );",
          "149:             return artifacts;",
          "150:         }",
          "151:         catch ( PluginResolutionException e )",
          "152:         {",
          "153:             throw new ExtensionResolutionException( extension, e.getCause() );",
          "154:         }",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java||maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java -> maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.cli.internal;",
          "22: import org.apache.maven.cli.internal.extension.model.CoreExtension;",
          "29: public class ExtensionResolutionException",
          "30:     extends Exception",
          "31: {",
          "33:     private final CoreExtension extension;",
          "35:     public ExtensionResolutionException( CoreExtension extension, Throwable cause )",
          "36:     {",
          "37:         super( \"Extension \" + extension.getId() + \" or one of its dependencies could not be resolved: \"",
          "38:                         + cause.getMessage(), cause );",
          "39:         this.extension = extension;",
          "40:     }",
          "42:     public CoreExtension getExtension()",
          "43:     {",
          "44:         return extension;",
          "45:     }",
          "47: }",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/mdo/core-extensions.mdo||maven-embedder/src/main/mdo/core-extensions.mdo": [
          "File: maven-embedder/src/main/mdo/core-extensions.mdo -> maven-embedder/src/main/mdo/core-extensions.mdo",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:           <type>String</type>",
          "84:         </field>",
          "85:       </fields>",
          "86:     </class>",
          "87:   </classes>",
          "88: </model>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:       <codeSegments>",
          "87:         <codeSegment>",
          "88:           <version>1.0.0+</version>",
          "89:           <code>",
          "90:             <![CDATA[",
          "96:     public String getId()",
          "97:     {",
          "98:         StringBuilder id = new StringBuilder( 128 );",
          "100:         id.append( ( getGroupId() == null ) ? \"[unknown-group-id]\" : getGroupId() );",
          "101:         id.append( \":\" );",
          "102:         id.append( ( getArtifactId() == null ) ? \"[unknown-artifact-id]\" : getArtifactId() );",
          "103:         id.append( \":\" );",
          "104:         id.append( ( getVersion() == null ) ? \"[unknown-version]\" : getVersion() );",
          "106:         return id.toString();",
          "107:     }",
          "108:             ]]>",
          "109:           </code>",
          "110:         </codeSegment>",
          "111:       </codeSegments>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8af0a674db7cf1199d62e1cba60e29f84a144129",
      "candidate_info": {
        "commit_hash": "8af0a674db7cf1199d62e1cba60e29f84a144129",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8af0a674db7cf1199d62e1cba60e29f84a144129",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[maven-release-plugin] prepare for next development iteration",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "5d6bb35b048d9d430c38cdf16f53b850a9ca9e4e",
      "candidate_info": {
        "commit_hash": "5d6bb35b048d9d430c38cdf16f53b850a9ca9e4e",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/5d6bb35b048d9d430c38cdf16f53b850a9ca9e4e",
        "files": [
          "maven-model/pom.xml"
        ],
        "message": "[MNG-6810] - Remove profiles in maven-model",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "6f141968464b4ad24e5d90f1389065141cda5e3b",
      "candidate_info": {
        "commit_hash": "6f141968464b4ad24e5d90f1389065141cda5e3b",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/6f141968464b4ad24e5d90f1389065141cda5e3b",
        "files": [
          "maven-core/src/main/java/org/apache/maven/DefaultMaven.java"
        ],
        "message": "[MNG-7400] Allow more WorkspaceReaders to participate\n\nThis closes #668",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/DefaultMaven.java||maven-core/src/main/java/org/apache/maven/DefaultMaven.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/DefaultMaven.java||maven-core/src/main/java/org/apache/maven/DefaultMaven.java": [
          "File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java -> maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:             return addExceptionToResult( result, e );",
          "233:         }",
          "236:         try",
          "237:         {",
          "239:         }",
          "240:         catch ( ComponentLookupException e )",
          "241:         {",
          "242:             return addExceptionToResult( result, e );",
          "243:         }",
          "255:         repoSession.setReadOnly();",
          "257:         ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();",
          "",
          "[Removed Lines]",
          "235:         WorkspaceReader reactorWorkspace;",
          "238:             reactorWorkspace = container.lookup( WorkspaceReader.class, ReactorReader.HINT );",
          "252:         repoSession.setWorkspaceReader( ChainedWorkspaceReader.newInstance( reactorWorkspace,",
          "253:                                                                             repoSession.getWorkspaceReader() ) );",
          "",
          "[Added Lines]",
          "237:             setupWorkspaceReader( session, repoSession );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:         return result;",
          "327:     }",
          "329:     private void afterSessionEnd( Collection<MavenProject> projects, MavenSession session )",
          "330:         throws MavenExecutionException",
          "331:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:     private void setupWorkspaceReader( MavenSession session, DefaultRepositorySystemSession repoSession )",
          "319:         throws ComponentLookupException",
          "320:     {",
          "322:         List<WorkspaceReader> workspaceReaders = new ArrayList<WorkspaceReader>();",
          "324:         workspaceReaders.add( container.lookup( WorkspaceReader.class, ReactorReader.HINT ) );",
          "326:         WorkspaceReader repoWorkspaceReader = repoSession.getWorkspaceReader();",
          "327:         if ( repoWorkspaceReader != null )",
          "328:         {",
          "329:             workspaceReaders.add( repoWorkspaceReader );",
          "330:         }",
          "332:         for ( WorkspaceReader workspaceReader : getProjectScopedExtensionComponents( session.getProjects(),",
          "333:                                                                                      WorkspaceReader.class ) )",
          "334:         {",
          "335:             if ( workspaceReaders.contains( workspaceReader ) )",
          "336:             {",
          "337:                 continue;",
          "338:             }",
          "339:             workspaceReaders.add( workspaceReader );",
          "340:         }",
          "341:         WorkspaceReader[] readers = workspaceReaders.toArray( new WorkspaceReader[0] );",
          "342:         repoSession.setWorkspaceReader( new ChainedWorkspaceReader( readers ) );",
          "344:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "369:     {",
          "370:         Collection<AbstractMavenLifecycleParticipant> lifecycleListeners = new LinkedHashSet<>();",
          "373:         try",
          "374:         {",
          "387:             for ( MavenProject project : projects )",
          "388:             {",
          "389:                 ClassLoader projectRealm = project.getClassRealm();",
          "391:                 if ( projectRealm != null && scannedRealms.add( projectRealm ) )",
          "392:                 {",
          "395:                     try",
          "396:                     {",
          "398:                     }",
          "399:                     catch ( ComponentLookupException e )",
          "400:                     {",
          "403:                     }",
          "404:                 }",
          "405:             }",
          "406:         }",
          "407:         finally",
          "408:         {",
          "410:         }",
          "413:     }",
          "415:     private MavenExecutionResult addExceptionToResult( MavenExecutionResult result, Throwable e )",
          "",
          "[Removed Lines]",
          "372:         ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();",
          "375:             try",
          "376:             {",
          "377:                 lifecycleListeners.addAll( container.lookupList( AbstractMavenLifecycleParticipant.class ) );",
          "378:             }",
          "379:             catch ( ComponentLookupException e )",
          "380:             {",
          "382:                 logger.warn( \"Failed to lookup lifecycle participants: \" + e.getMessage() );",
          "383:             }",
          "385:             Collection<ClassLoader> scannedRealms = new HashSet<>();",
          "393:                     Thread.currentThread().setContextClassLoader( projectRealm );",
          "397:                         lifecycleListeners.addAll( container.lookupList( AbstractMavenLifecycleParticipant.class ) );",
          "402:                         logger.warn( \"Failed to lookup lifecycle participants: \" + e.getMessage() );",
          "409:             Thread.currentThread().setContextClassLoader( originalClassLoader );",
          "412:         return lifecycleListeners;",
          "",
          "[Added Lines]",
          "391:             lifecycleListeners.addAll( container.lookupList( AbstractMavenLifecycleParticipant.class ) );",
          "392:         }",
          "393:         catch ( ComponentLookupException e )",
          "394:         {",
          "396:             logger.warn( \"Failed to lookup lifecycle participants: \" + e.getMessage() );",
          "397:         }",
          "399:         lifecycleListeners.addAll( getProjectScopedExtensionComponents( projects,",
          "400:                                                                         AbstractMavenLifecycleParticipant.class ) );",
          "402:         return lifecycleListeners;",
          "403:     }",
          "405:     protected <T> Collection<T> getProjectScopedExtensionComponents( Collection<MavenProject> projects, Class<T> role )",
          "406:     {",
          "408:         Collection<T> foundComponents = new LinkedHashSet<>();",
          "409:         Collection<ClassLoader> scannedRealms = new HashSet<>();",
          "411:         Thread currentThread = Thread.currentThread();",
          "412:         ClassLoader originalContextClassLoader = currentThread.getContextClassLoader();",
          "413:         try",
          "414:         {",
          "421:                     currentThread.setContextClassLoader( projectRealm );",
          "425:                         foundComponents.addAll( container.lookupList( role ) );",
          "430:                         logger.warn( \"Failed to lookup \" + role + \": \" + e.getMessage() );",
          "434:             return foundComponents;",
          "438:             currentThread.setContextClassLoader( originalContextClassLoader );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91894251505fe917b911885d565e6bc1c8bebadd",
      "candidate_info": {
        "commit_hash": "91894251505fe917b911885d565e6bc1c8bebadd",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/91894251505fe917b911885d565e6bc1c8bebadd",
        "files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java"
        ],
        "message": "[MNG-6967] Improve the command line output from maven-artifact.",
        "before_after_code_files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java||maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java||maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java": [
          "File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java -> maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:             }",
          "591:             return buffer.toString();",
          "592:         }",
          "593:     }",
          "595:     public ComparableVersion( String version )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:         private String toListString()",
          "598:         {",
          "599:             StringBuilder buffer = new StringBuilder();",
          "600:             buffer.append( \"[\" );",
          "601:             for ( Item item : this )",
          "602:             {",
          "603:                 if ( buffer.length() > 1 )",
          "604:                 {",
          "605:                     buffer.append( \", \" );",
          "606:                 }",
          "607:                 if ( item instanceof ListItem )",
          "608:                 {",
          "609:                     buffer.append( ( (ListItem ) item ).toListString() );",
          "610:                 }",
          "611:                 else",
          "612:                 {",
          "613:                     buffer.append( item );",
          "614:                 }",
          "615:             }",
          "616:             buffer.append( \"]\" );",
          "617:             return buffer.toString();",
          "618:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "777:     public static void main( String... args )",
          "778:     {",
          "780:         if ( args.length == 0 )",
          "781:         {",
          "782:             return;",
          "",
          "[Removed Lines]",
          "779:         System.out.println( \"Display parameters as parsed by Maven (in canonical form) and comparison result:\" );",
          "",
          "[Added Lines]",
          "804:         System.out.println( \"Display parameters as parsed by Maven (in canonical form and as a list of tokens) and\"",
          "805:                                 + \" comparison result:\" );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "795:                     + ( ( compare == 0 ) ? \"==\" : ( ( compare < 0 ) ? \"<\" : \">\" ) ) + ' ' + version );",
          "796:             }",
          "800:             prev = c;",
          "801:         }",
          "802:     }",
          "803: }",
          "",
          "[Removed Lines]",
          "798:             System.out.println( String.valueOf( i++ ) + \". \" + version + \" == \" + c.getCanonical() );",
          "",
          "[Added Lines]",
          "824:             System.out.println( ( i++ ) + \". \" + version + \" -> \" + c.getCanonical() + \"; tokens: \" + c.items.toListString() );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "842e7c88da3b310031d58325874c4b6b9a182c04",
      "candidate_info": {
        "commit_hash": "842e7c88da3b310031d58325874c4b6b9a182c04",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/842e7c88da3b310031d58325874c4b6b9a182c04",
        "files": [
          "maven-embedder/pom.xml",
          "pom.xml"
        ],
        "message": "[MNG-7186] Upgrade Guice to 4.2.2",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "1ea42b0371f1bc99a4e0629c3734ad4ccfc0dcbd",
      "candidate_info": {
        "commit_hash": "1ea42b0371f1bc99a4e0629c3734ad4ccfc0dcbd",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/1ea42b0371f1bc99a4e0629c3734ad4ccfc0dcbd",
        "files": [
          "apache-maven/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml"
        ],
        "message": "[MNG-7219] [Regression] plexus-cipher missing from transitive dependencies",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "e09baa8ac4fcef82baacba4a66386f7479c753d9",
      "candidate_info": {
        "commit_hash": "e09baa8ac4fcef82baacba4a66386f7479c753d9",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/e09baa8ac4fcef82baacba4a66386f7479c753d9",
        "files": [
          ".github/pull_request_template.md"
        ],
        "message": "Improve PR template",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "6f5c3d57a6024a5c1f1f4e501293c8d7ce3f8431",
      "candidate_info": {
        "commit_hash": "6f5c3d57a6024a5c1f1f4e501293c8d7ce3f8431",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/6f5c3d57a6024a5c1f1f4e501293c8d7ce3f8431",
        "files": [
          "maven-core/src/test/resources-project-builder/micromailer/pom.xml"
        ],
        "message": "[MNG-6872] - Found CVEs in your dependencies - plexus-utils (tests)",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "93f9e85955abb40bb090bad689f15fa9969ef9ba",
      "candidate_info": {
        "commit_hash": "93f9e85955abb40bb090bad689f15fa9969ef9ba",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/93f9e85955abb40bb090bad689f15fa9969ef9ba",
        "files": [
          "maven-core/src/main/resources/META-INF/maven/extension.xml",
          "pom.xml"
        ],
        "message": "[MNG-7045] Drop CDI API from Maven\n\nThis closes #540",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "0635e92665cbd247a4144c328321b0e9f058398e",
      "candidate_info": {
        "commit_hash": "0635e92665cbd247a4144c328321b0e9f058398e",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/0635e92665cbd247a4144c328321b0e9f058398e",
        "files": [
          "apache-maven/src/site/apt/index.apt.vm"
        ],
        "message": "[MNG-7184] document .mavenrc/mavenrc_pre.bat|cmd and MAVEN_SKIP_RC",
        "before_after_code_files": [
          "apache-maven/src/site/apt/index.apt.vm||apache-maven/src/site/apt/index.apt.vm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/site/apt/index.apt.vm||apache-maven/src/site/apt/index.apt.vm": [
          "File: apache-maven/src/site/apt/index.apt.vm -> apache-maven/src/site/apt/index.apt.vm",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ~~ Licensed to the Apache Software Foundation (ASF) under one",
          "2: ~~ or more contributor license agreements.  See the NOTICE file",
          "3: ~~ distributed with this work for additional information",
          "4: ~~ regarding copyright ownership.  The ASF licenses this file",
          "5: ~~ to you under the Apache License, Version 2.0 (the",
          "6: ~~ \"License\"); you may not use this file except in compliance",
          "7: ~~ with the License.  You may obtain a copy of the License at",
          "8: ~~",
          "9: ~~ http://www.apache.org/licenses/LICENSE-2.0",
          "10: ~~",
          "11: ~~ Unless required by applicable law or agreed to in writing,",
          "12: ~~ software distributed under the License is distributed on an",
          "13: ~~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: ~~ KIND, either express or implied.  See the License for the",
          "15: ~~ specific language governing permissions and limitations",
          "16: ~~ under the License.",
          "18:  -----",
          "19:  ${project.name}",
          "20:  -----",
          "21:  Herv\u00e9 Boutemy",
          "22:  -----",
          "23:  2021-07-11",
          "24:  -----",
          "26: ${project.name}",
          "28:  ${project.description}",
          "38:    []",
          "40:   and these scripts calls can be disabled by setting <<<MAVEN_SKIP_RC>>> environment variable.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22a8cfa05976b23284388675dcabd7e5e8037fb0",
      "candidate_info": {
        "commit_hash": "22a8cfa05976b23284388675dcabd7e5e8037fb0",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/22a8cfa05976b23284388675dcabd7e5e8037fb0",
        "files": [
          "apache-maven/src/bin/mvn.cmd"
        ],
        "message": "[MNG-6648] 'mavenrc_pre' script does not receive arguments like mavenrc in Bourne shell does\n\nThis closes #511",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: @REM Execute a user defined script before this one",
          "36: if not \"%MAVEN_SKIP_RC%\"==\"\" goto skipRcPre",
          "37: @REM check for pre script, once with legacy .bat ending and once with .cmd ending",
          "40: :skipRcPre",
          "42: @setlocal",
          "",
          "[Removed Lines]",
          "38: if exist \"%USERPROFILE%\\mavenrc_pre.bat\" call \"%USERPROFILE%\\mavenrc_pre.bat\"",
          "39: if exist \"%USERPROFILE%\\mavenrc_pre.cmd\" call \"%USERPROFILE%\\mavenrc_pre.cmd\"",
          "",
          "[Added Lines]",
          "38: if exist \"%USERPROFILE%\\mavenrc_pre.bat\" call \"%USERPROFILE%\\mavenrc_pre.bat\" %*",
          "39: if exist \"%USERPROFILE%\\mavenrc_pre.cmd\" call \"%USERPROFILE%\\mavenrc_pre.cmd\" %*",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "865dcaa6fffc8fbc679f190280e1f0f7b1d783b5",
      "candidate_info": {
        "commit_hash": "865dcaa6fffc8fbc679f190280e1f0f7b1d783b5",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/865dcaa6fffc8fbc679f190280e1f0f7b1d783b5",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[maven-release-plugin] prepare for next development iteration",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "e08834b79e9387811ece442f6e7b445b19110fcf",
      "candidate_info": {
        "commit_hash": "e08834b79e9387811ece442f6e7b445b19110fcf",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/e08834b79e9387811ece442f6e7b445b19110fcf",
        "files": [
          "apache-maven/src/main/appended-resources/META-INF/LICENSE.vm",
          "apache-maven/src/main/appended-resources/META-INF/NOTICE.vm",
          "apache-maven/src/main/appended-resources/licenses/CDDL-1.0.txt",
          "apache-maven/src/main/appended-resources/licenses/unrecognized-javax.annotation-api-1.2.txt",
          "maven-core/src/main/resources/META-INF/maven/extension.xml",
          "maven-embedder/pom.xml",
          "pom.xml"
        ],
        "message": "[MNG-7250] Upgrade Sisu Inject/Plexus to 0.3.5\n\nSince we have replaced the old JSR 250 library with javax.annotation library we\ngo straight to 1.2.\n\nThis closes #539",
        "before_after_code_files": [
          "apache-maven/src/main/appended-resources/META-INF/LICENSE.vm||apache-maven/src/main/appended-resources/META-INF/LICENSE.vm",
          "apache-maven/src/main/appended-resources/META-INF/NOTICE.vm||apache-maven/src/main/appended-resources/META-INF/NOTICE.vm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/main/appended-resources/META-INF/LICENSE.vm||apache-maven/src/main/appended-resources/META-INF/LICENSE.vm": [
          "File: apache-maven/src/main/appended-resources/META-INF/LICENSE.vm -> apache-maven/src/main/appended-resources/META-INF/LICENSE.vm",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #*    *### advertise about each non-Maven dependency",
          "34: #*    *###",
          "35: #*    *### infer SPDX license id",
          "39: #*      *##set ( $spdx = 'MIT' )",
          "40: #*    *##elseif ( $license.name == \"Eclipse Public License, Version 1.0\" )",
          "41: #*      *##set ( $spdx = 'EPL-1.0' )",
          "",
          "[Removed Lines]",
          "36: #*    *##if ( $license.name == \"COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\" )",
          "37: #*      *##set ( $spdx = 'CDDL-1.0' )",
          "38: #*    *##elseif ( $MITLicenseNames.contains( $license.name ) )",
          "",
          "[Added Lines]",
          "36: #*    *##if ( $MITLicenseNames.contains( $license.name ) )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: #*    *###",
          "63: #*    *### copy license file to lib/$artifactId.license",
          "64: #*    *##set ( $licFile = $directory + '/' + $project.artifact.artifactId + '.license' )",
          "66: #*      *### MIT license contains date and copyright that makes the file specific to each artifact",
          "67: #*      *##set ( $downloaded = $locator.getResourceAsFile( \"licenses/${spdx}-${project.artifact.artifactId}-${project.artifact.version}.txt\", \"licenses/${licFile}\" ) )",
          "68: #*    *##else",
          "",
          "[Removed Lines]",
          "65: #*    *##if ( $spdx == \"MIT\" )",
          "",
          "[Added Lines]",
          "63: #*    *##if ( $spdx == \"MIT\" || $spdx == \"unrecognized\" )",
          "",
          "---------------"
        ],
        "apache-maven/src/main/appended-resources/META-INF/NOTICE.vm||apache-maven/src/main/appended-resources/META-INF/NOTICE.vm": [
          "File: apache-maven/src/main/appended-resources/META-INF/NOTICE.vm -> apache-maven/src/main/appended-resources/META-INF/NOTICE.vm",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: This product includes software developed by",
          "37: Rome (https://rome.dev.java.net/).",
          "41: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"",
          "42:     \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
          "",
          "[Removed Lines]",
          "39: about.html in archive lib/org.eclipse.sisu.inject-0.3.4.jar",
          "",
          "[Added Lines]",
          "39: about.html in archive lib/org.eclipse.sisu.inject-0.3.5.jar",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7358b084b120e28f42b5ae37b1c298ba123e2a5e",
      "candidate_info": {
        "commit_hash": "7358b084b120e28f42b5ae37b1c298ba123e2a5e",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/7358b084b120e28f42b5ae37b1c298ba123e2a5e",
        "files": [
          ".gitignore"
        ],
        "message": "Add new ignores",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "a9f337fd63963b2017c7b057234f9a9e3e78be46",
      "candidate_info": {
        "commit_hash": "a9f337fd63963b2017c7b057234f9a9e3e78be46",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/a9f337fd63963b2017c7b057234f9a9e3e78be46",
        "files": [
          "maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java"
        ],
        "message": "[MNG-6937] StringSearchModelInterpolatorTest fails on symlinked paths\n\nDon't compare baseDir in a canonical form when the second comparing value\n(System.getProperty( \"user.dir\" )) is not canonicalized.\n\nThis closes #361",
        "before_after_code_files": [
          "maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java||maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java||maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java": [
          "File: maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java -> maven-model-builder/src/test/java/org/apache/maven/model/interpolation/StringSearchModelInterpolatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:         interpolator.interpolateObject( obj, model, new File( \".\" ), config, collector );",
          "366:         assertProblemFree( collector );",
          "369:         assertThat( obj.values.size(), is( 1 ) );",
          "370:         assertThat( (String) obj.values.get( \"key\" ), is( anyOf(",
          "371:                 is( System.getProperty( \"user.dir\" ) + File.separator + \"target\" ),",
          "",
          "[Removed Lines]",
          "368:         assertThat( baseDir.getCanonicalPath(), is( System.getProperty( \"user.dir\" ) ) );",
          "",
          "[Added Lines]",
          "368:         assertThat( baseDir.getAbsolutePath(), is( System.getProperty( \"user.dir\" ) ) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6c9614fa922027be8453c507c948f3727a91327",
      "candidate_info": {
        "commit_hash": "d6c9614fa922027be8453c507c948f3727a91327",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/d6c9614fa922027be8453c507c948f3727a91327",
        "files": [
          "maven-settings/src/site/apt/index.apt"
        ],
        "message": "[MNG-7117] update link to settings xsd for version 1.2.0",
        "before_after_code_files": [
          "maven-settings/src/site/apt/index.apt||maven-settings/src/site/apt/index.apt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-settings/src/site/apt/index.apt||maven-settings/src/site/apt/index.apt": [
          "File: maven-settings/src/site/apt/index.apt -> maven-settings/src/site/apt/index.apt"
        ]
      }
    },
    {
      "candidate_hash": "3645593bfa98b06f54eb8bc0874b871948651169",
      "candidate_info": {
        "commit_hash": "3645593bfa98b06f54eb8bc0874b871948651169",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/3645593bfa98b06f54eb8bc0874b871948651169",
        "files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "maven-core/src/test/projects/project-builder/MNG-6983/parent-pom.xml",
          "maven-core/src/test/projects/project-builder/MNG-6983/pom.xml",
          "maven-model/src/main/mdo/maven.mdo"
        ],
        "message": "[MNG-6983] Plugin key can get out of sync with artifactId and groupId\n\nThe plugin key is build as combination of artifactId and groupId but not\nupdated if either of these two ids change.\nThis can be a problem if artifactId or groupId is a variable. The calculated\nkey will likely contain the unresolved property and is not updated once the\nvariable is interpolated.\n\nThis closes #372",
        "before_after_code_files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "maven-model/src/main/mdo/maven.mdo||maven-model/src/main/mdo/maven.mdo"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.apache.maven.AbstractCoreMavenComponentTestCase;",
          "35: import org.apache.maven.artifact.InvalidArtifactRTException;",
          "36: import org.apache.maven.execution.MavenSession;",
          "37: import org.apache.maven.model.building.FileModelSource;",
          "38: import org.apache.maven.model.building.ModelBuildingRequest;",
          "39: import org.apache.maven.model.building.ModelSource;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.apache.maven.model.Plugin;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:         assertEquals( 1, project.getMailingLists().size() );",
          "329:         assertEquals( 1, project.getResources().size() );",
          "330:     }",
          "331: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333:     public void testPropertyInPluginManagementGroupId()",
          "334:             throws Exception",
          "335:     {",
          "336:         File pom = getProject( \"MNG-6983\" );",
          "338:         MavenSession session = createMavenSession( pom );",
          "339:         MavenProject project = session.getCurrentProject();",
          "341:         for (Plugin buildPlugin : project.getBuildPlugins()) {",
          "342:             assertNotNull( \"Missing version for build plugin \" + buildPlugin.getKey(), buildPlugin.getVersion() );",
          "343:         }",
          "344:     }",
          "",
          "---------------"
        ],
        "maven-model/src/main/mdo/maven.mdo||maven-model/src/main/mdo/maven.mdo": [
          "File: maven-model/src/main/mdo/maven.mdo -> maven-model/src/main/mdo/maven.mdo",
          "--- Hunk 1 ---",
          "[Context before]",
          "2314:         return id.toString();",
          "2315:     }",
          "2322:     public String getKey()",
          "2323:     {",
          "2329:     }",
          "",
          "[Removed Lines]",
          "2318:     private String key = null;",
          "2324:         if ( key == null )",
          "2325:         {",
          "2326:             key = constructKey( groupId, artifactId );",
          "2327:         }",
          "2328:         return key;",
          "",
          "[Added Lines]",
          "2322:         return constructKey( groupId, artifactId );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4fd031828c3cd6a6b8184d4ee0e914cd86009a0",
      "candidate_info": {
        "commit_hash": "f4fd031828c3cd6a6b8184d4ee0e914cd86009a0",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/f4fd031828c3cd6a6b8184d4ee0e914cd86009a0",
        "files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ],
        "message": "Fix checkstyle issue",
        "before_after_code_files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "498:             problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage(",
          "499:                     \"Failed to interpolate file location \" + path + \": \" + e.getMessage() ).setLocation(",
          "501:                     .setException( e ) );",
          "502:         }",
          "503:     }",
          "",
          "[Removed Lines]",
          "500:                     activationFile.getLocation( StringUtils.isNotEmpty( activationFile.getExists() ) ? \"exists\" : \"missing\"  ) )",
          "",
          "[Added Lines]",
          "500:                     activationFile.getLocation( StringUtils.isNotEmpty( activationFile.getExists() )",
          "501:                                                                         ? \"exists\" : \"missing\"  ) )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e5b3d55545e5f03f05ac7b0cd1b56689df36201",
      "candidate_info": {
        "commit_hash": "4e5b3d55545e5f03f05ac7b0cd1b56689df36201",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/4e5b3d55545e5f03f05ac7b0cd1b56689df36201",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java"
        ],
        "message": "[MNG-7251] Fix threadLocalArtifactsHolder leaking into cloned project\n\nThis closes #527",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java||maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java -> maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     private Artifact artifact;",
          "154:     private Model originalModel;",
          "",
          "[Removed Lines]",
          "146:     private final ThreadLocal<ArtifactsHolder> threadLocalArtifactsHolder = new ThreadLocal()",
          "147:     {",
          "148:         protected ArtifactsHolder initialValue()",
          "149:         {",
          "150:             return new ArtifactsHolder();",
          "151:         }",
          "152:     };",
          "",
          "[Added Lines]",
          "146:     private ThreadLocal<ArtifactsHolder> threadLocalArtifactsHolder = newThreadLocalArtifactsHolder();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:         setModel( model );",
          "189:     }",
          "191:     public MavenProject( Model model )",
          "192:     {",
          "193:         setModel( model );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:     private static ThreadLocal<ArtifactsHolder> newThreadLocalArtifactsHolder()",
          "186:     {",
          "187:         return new ThreadLocal<ArtifactsHolder>()",
          "188:         {",
          "189:             protected ArtifactsHolder initialValue()",
          "190:             {",
          "191:                 return new ArtifactsHolder();",
          "192:             }",
          "193:         };",
          "194:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1181:         {",
          "1182:             throw new UnsupportedOperationException( e );",
          "1183:         }",
          "1185:         clone.deepCopy( this );",
          "1187:         return clone;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1190:         clone.threadLocalArtifactsHolder = newThreadLocalArtifactsHolder();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1225:         file = project.file;",
          "1226:         basedir = project.basedir;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1233:         threadLocalArtifactsHolder.set( project.threadLocalArtifactsHolder.get().copy() );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1232:             setDependencyArtifacts( Collections.unmodifiableSet( project.getDependencyArtifacts() ) );",
          "1233:         }",
          "1240:         if ( project.getParentFile() != null )",
          "1241:         {",
          "1242:             parentFile = new File( project.getParentFile().getAbsolutePath() );",
          "",
          "[Removed Lines]",
          "1235:         if ( project.getArtifacts() != null )",
          "1236:         {",
          "1237:             setArtifacts( Collections.unmodifiableSet( project.getArtifacts() ) );",
          "1238:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1995:         private ArtifactFilter artifactFilter;",
          "1996:         private Set<Artifact> artifacts;",
          "1997:         private Map<String, Artifact> artifactMap;",
          "1998:     }",
          "1999: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1991:         ArtifactsHolder copy()",
          "1992:         {",
          "1993:            ArtifactsHolder copy = new ArtifactsHolder();",
          "1994:            copy.artifactFilter = artifactFilter;",
          "1995:            copy.artifacts = artifacts != null ? new LinkedHashSet<>( artifacts ) : null;",
          "1996:            copy.artifactMap = artifactMap != null ? new LinkedHashMap<>( artifactMap ) : null;",
          "1997:            return copy;",
          "1998:         }",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java||maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java -> maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.File;",
          "23: import java.io.IOException;",
          "24: import java.util.List;",
          "25: import java.util.Map;",
          "27: import org.apache.maven.model.DependencyManagement;",
          "28: import org.apache.maven.model.Model;",
          "29: import org.apache.maven.model.Parent;",
          "30: import org.apache.maven.model.Profile;",
          "32: public class MavenProjectTest",
          "33:     extends AbstractMavenProjectTestCase",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.Collections;",
          "27: import java.util.Set;",
          "28: import java.util.concurrent.atomic.AtomicReference;",
          "30: import org.apache.maven.artifact.Artifact;",
          "35: import org.mockito.Mockito;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:         assertEquals( \"Base directory is preserved across clone\", projectToClone.getBasedir(), clonedProject.getBasedir() );",
          "189:     }",
          "191:     public void testUndefinedOutputDirectory()",
          "192:         throws Exception",
          "193:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:     public void testCloneWithArtifacts()",
          "197:         throws InterruptedException",
          "198:     {",
          "199:         Artifact initialArtifact = Mockito.mock( Artifact.class, \"initialArtifact\" );",
          "200:         MavenProject originalProject = new MavenProject();",
          "201:         originalProject.setArtifacts( Collections.singleton( initialArtifact ) );",
          "202:         assertEquals( \"Sanity check: originalProject returns artifact that has just been set\",",
          "203:                       Collections.singleton( initialArtifact ), originalProject.getArtifacts() );",
          "205:         final MavenProject clonedProject = originalProject.clone();",
          "207:         assertEquals( \"Cloned project returns the artifact that was set for the original project\",",
          "208:                       Collections.singleton( initialArtifact ), clonedProject.getArtifacts() );",
          "210:         Artifact anotherArtifact = Mockito.mock( Artifact.class, \"anotherArtifact\" );",
          "211:         clonedProject.setArtifacts( Collections.singleton( anotherArtifact ) );",
          "212:         assertEquals( \"Sanity check: clonedProject returns artifact that has just been set\",",
          "213:                       Collections.singleton( anotherArtifact ), clonedProject.getArtifacts() );",
          "215:         assertEquals( \"Original project returns the artifact that was set initially (not the one for clonedProject)\",",
          "216:                       Collections.singleton( initialArtifact ), originalProject.getArtifacts() );",
          "218:         final AtomicReference<Set<Artifact>> artifactsFromThread = new AtomicReference<>();",
          "219:         Thread thread = new Thread( new Runnable()",
          "220:         {",
          "221:             @Override",
          "222:             public void run()",
          "223:             {",
          "224:                 artifactsFromThread.set( clonedProject.getArtifacts() );",
          "225:             }",
          "226:         } );",
          "227:         thread.start();",
          "228:         thread.join();",
          "230:         assertEquals( \"Another thread does not see the same artifacts\",",
          "231:                       Collections.emptySet(), artifactsFromThread.get() );",
          "232:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a96fd11b1fb9724d563cfde60288d17ddd22bf7e",
      "candidate_info": {
        "commit_hash": "a96fd11b1fb9724d563cfde60288d17ddd22bf7e",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/a96fd11b1fb9724d563cfde60288d17ddd22bf7e",
        "files": [
          "maven-model-builder/src/site/apt/index.apt"
        ],
        "message": "[MNG-3220] fix doc: dependencyManagement import require scope import",
        "before_after_code_files": [
          "maven-model-builder/src/site/apt/index.apt||maven-model-builder/src/site/apt/index.apt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/site/apt/index.apt||maven-model-builder/src/site/apt/index.apt": [
          "File: maven-model-builder/src/site/apt/index.apt -> maven-model-builder/src/site/apt/index.apt"
        ]
      }
    },
    {
      "candidate_hash": "05e96dae96030864cb2ab3a3ae877f6bb9e134f7",
      "candidate_info": {
        "commit_hash": "05e96dae96030864cb2ab3a3ae877f6bb9e134f7",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/05e96dae96030864cb2ab3a3ae877f6bb9e134f7",
        "files": [
          "maven-repository-metadata/pom.xml",
          "maven-repository-metadata/src/main/mdo/metadata.mdo",
          "maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java"
        ],
        "message": "[MNG-5180] Versioning's snapshot version list is not included in metadata merge\n\nCo-authored-by: Konrad Windszus <kwin@apache.org>\n\nThis closes #684",
        "before_after_code_files": [
          "maven-repository-metadata/src/main/mdo/metadata.mdo||maven-repository-metadata/src/main/mdo/metadata.mdo",
          "maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java||maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-repository-metadata/src/main/mdo/metadata.mdo||maven-repository-metadata/src/main/mdo/metadata.mdo": [
          "File: maven-repository-metadata/src/main/mdo/metadata.mdo -> maven-repository-metadata/src/main/mdo/metadata.mdo",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         <codeSegment>",
          "89:           <version>1.0.0+</version>",
          "90:           <code><![CDATA[",
          "91:     public boolean merge( Metadata sourceMetadata )",
          "92:     {",
          "93:         boolean changed = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:     private String getSnapshotVersionKey( SnapshotVersion sv )",
          "92:     {",
          "93:         return sv.getClassifier() + \":\" + sv.getExtension();",
          "94:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:                 Snapshot snapshot = versioning.getSnapshot();",
          "179:                 if ( snapshot != null )",
          "180:                 {",
          "181:                     if ( s == null )",
          "182:                     {",
          "183:                         s = new Snapshot();",
          "184:                         v.setSnapshot( s );",
          "185:                         changed = true;",
          "186:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:                     boolean updateSnapshotVersions = false;",
          "192:                         updateSnapshotVersions = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:                     {",
          "192:                         s.setTimestamp( snapshot.getTimestamp() );",
          "193:                         changed = true;",
          "194:                     }",
          "195:                     if ( s.getBuildNumber() != snapshot.getBuildNumber() )",
          "196:                     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:                         updateSnapshotVersions = true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:                         s.setLocalCopy( snapshot.isLocalCopy() );",
          "203:                         changed = true;",
          "204:                     }",
          "205:                 }",
          "206:             }",
          "207:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:                     if ( updateSnapshotVersions )",
          "214:                     {",
          "215:                         java.util.Map<String, SnapshotVersion> versions = new java.util.LinkedHashMap<>();",
          "217:                         if ( !v.getSnapshotVersions().isEmpty() )",
          "218:                         {",
          "219:                             for ( SnapshotVersion sv : versioning.getSnapshotVersions() )",
          "220:                             {",
          "221:                                 String key = getSnapshotVersionKey( sv );",
          "222:                                 versions.put( key, sv );",
          "223:                             }",
          "225:                             if ( !versions.isEmpty() )",
          "226:                             {",
          "227:                                 for ( SnapshotVersion sv : v.getSnapshotVersions() )",
          "228:                                 {",
          "229:                                     String key = getSnapshotVersionKey( sv );",
          "230:                                     if ( !versions.containsKey( key ) )",
          "231:                                     {",
          "232:                                         versions.put( key, sv );",
          "233:                                     }",
          "234:                                 }",
          "235:                             }",
          "236:                             v.setSnapshotVersions( new java.util.ArrayList<SnapshotVersion>( versions.values() ) );",
          "237:                         }",
          "239:                         changed = true;",
          "240:                     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "241:           <name>lastUpdated</name>",
          "242:           <version>1.0.0+</version>",
          "243:           <type>String</type>",
          "245:         </field>",
          "246:         <field xdoc.separator=\"blank\">",
          "247:           <name>snapshot</name>",
          "",
          "[Removed Lines]",
          "244:           <description>When the metadata was last updated (both \"groupId/artifactId\" and \"groupId/artifactId/version\" directories)</description>",
          "",
          "[Added Lines]",
          "280:           <description>When the metadata was last updated (both \"groupId/artifactId\" and \"groupId/artifactId/version\" directories). The timestamp is expressed using UTC in the format yyyyMMddHHmmss.</description>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "254:         <field>",
          "255:           <name>snapshotVersions</name>",
          "256:           <version>1.1.0+</version>",
          "258:           <association>",
          "259:             <type>SnapshotVersion</type>",
          "260:             <multiplicity>*</multiplicity>",
          "",
          "[Removed Lines]",
          "257:           <description>Information for each sub-artifact available in this artifact snapshot.</description>",
          "",
          "[Added Lines]",
          "293:           <description>Information for each sub-artifact available in this artifact snapshot. This is only the most recent SNAPSHOT for each unique extension/classifier combination.</description>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "289:         <field>",
          "290:           <name>timestamp</name>",
          "291:           <version>1.0.0+</version>",
          "293:           <type>String</type>",
          "294:         </field>",
          "295:         <field>",
          "",
          "[Removed Lines]",
          "292:           <description>The time it was deployed</description>",
          "",
          "[Added Lines]",
          "328:           <description>The timestamp when this version was deployed. The timestamp is expressed using UTC in the format yyyyMMdd.HHmmss.</description>",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "316:           <name>classifier</name>",
          "317:           <version>1.1.0+</version>",
          "318:           <type>String</type>",
          "320:           <defaultValue></defaultValue>",
          "321:         </field>",
          "322:         <field>",
          "323:           <name>extension</name>",
          "324:           <version>1.1.0+</version>",
          "325:           <type>String</type>",
          "327:         </field>",
          "328:         <field xml.tagName=\"value\">",
          "329:           <name>version</name>",
          "330:           <version>1.1.0+</version>",
          "331:           <type>String</type>",
          "332:           <description>The resolved snapshot version of the sub-artifact.</description>",
          "333:         </field>",
          "334:         <field>",
          "335:           <name>updated</name>",
          "336:           <version>1.1.0+</version>",
          "337:           <type>String</type>",
          "338:           <description>The timestamp when this version information was last updated. The timestamp is expressed using UTC in the format yyyyMMddHHmmss.</description>",
          "339:         </field>",
          "340:       </fields>",
          "341:     </class>",
          "",
          "[Removed Lines]",
          "319:           <description>The classifier of the sub-artifact.</description>",
          "326:           <description>The file extension of the sub-artifact.</description>",
          "",
          "[Added Lines]",
          "355:           <description>The classifier of the sub-artifact. Each classifier and extension pair may only appear once.</description>",
          "357:           <identifier>true</identifier>",
          "363:           <description>The file extension of the sub-artifact. Each classifier and extension pair may only appear once.</description>",
          "364:           <identifier>true</identifier>",
          "371:           <identifier>true</identifier>",
          "378:           <identifier>true</identifier>",
          "",
          "---------------"
        ],
        "maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java||maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java": [
          "File: maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java -> maven-repository-metadata/src/test/java/org/apache/maven/artifact/repository/metadata/MetadataTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.artifact.repository.metadata;",
          "23: import java.text.DateFormat;",
          "24: import java.text.SimpleDateFormat;",
          "25: import java.util.Date;",
          "26: import java.util.GregorianCalendar;",
          "27: import java.util.TimeZone;",
          "29: import org.eclipse.aether.artifact.Artifact;",
          "30: import org.eclipse.aether.artifact.DefaultArtifact;",
          "31: import org.junit.Before;",
          "32: import org.junit.Test;",
          "34: import static org.junit.Assert.assertEquals;",
          "35: import static org.junit.Assert.assertFalse;",
          "36: import static org.junit.Assert.assertTrue;",
          "38: public class MetadataTest",
          "39: {",
          "41:     Artifact artifact;",
          "43:     Metadata target;",
          "45:     @Before",
          "46:     public void before()",
          "47:     {",
          "48:         artifact = new DefaultArtifact( \"myGroup:myArtifact:1.0-SNAPSHOT\" );",
          "49:         target = createMetadataFromArtifact( artifact );",
          "50:     }",
          "53:     @Test",
          "54:     public void mergeEmptyMetadata()",
          "55:         throws Exception",
          "56:     {",
          "57:         Metadata metadata = new Metadata();",
          "58:         assertFalse( metadata.merge( new Metadata() ) );",
          "59:     }",
          "61:     @Test",
          "62:     public void mergeDifferentGAV()",
          "63:         throws Exception",
          "64:     {",
          "66:         Metadata source = new Metadata();",
          "67:         source.setArtifactId( \"source-artifact\" );",
          "68:         source.setGroupId( \"source-group\" );",
          "69:         source.setVersion( \"2.0\" );",
          "70:         assertFalse( target.merge( source ) );",
          "71:         assertEquals( \"myArtifact\", target.getArtifactId() );",
          "72:         assertEquals( \"myGroup\", target.getGroupId() );",
          "73:         assertEquals( \"1.0-SNAPSHOT\", target.getVersion() );",
          "74:     }",
          "78:     @Test",
          "79:     public void mergeSnapshotWithEmptyList()",
          "80:         throws Exception",
          "81:     {",
          "82:         Snapshot snapshot = new Snapshot();",
          "83:         snapshot.setBuildNumber( 3 );",
          "84:         snapshot.setTimestamp( \"20200710.072412\" );",
          "85:         target.getVersioning().setSnapshot( snapshot );",
          "86:         target.getVersioning().setLastUpdated( \"20200921071745\" );",
          "87:         SnapshotVersion sv = new SnapshotVersion();",
          "88:         sv.setClassifier( \"sources\" );",
          "89:         sv.setExtension( \"jar\" );",
          "90:         sv.setUpdated( \"20200710072412\" );",
          "91:         target.getVersioning().addSnapshotVersion( sv );",
          "93:         Metadata source = createMetadataFromArtifact( artifact );",
          "95:         assertTrue( target.merge( source ) );",
          "98:         assertEquals( \"20200921071745\", source.getVersioning().getLastUpdated() );",
          "100:         assertEquals( \"myArtifact\", target.getArtifactId() );",
          "101:         assertEquals( \"myGroup\", target.getGroupId() );",
          "103:         assertEquals( 3, target.getVersioning().getSnapshot().getBuildNumber() );",
          "104:         assertEquals( \"20200710.072412\", target.getVersioning().getSnapshot().getTimestamp() );",
          "106:         assertEquals( 1, target.getVersioning().getSnapshotVersions().size() );",
          "107:         assertEquals( \"sources\", target.getVersioning().getSnapshotVersions().get( 0 ).getClassifier() );",
          "108:         assertEquals( \"jar\", target.getVersioning().getSnapshotVersions().get( 0 ).getExtension() );",
          "109:         assertEquals( \"20200710072412\", target.getVersioning().getSnapshotVersions().get( 0 ).getUpdated() );",
          "110:     }",
          "112:     @Test",
          "113:     public void mergeWithSameSnapshotWithDifferentVersionsAndNewerLastUpdated()",
          "114:     {",
          "115:         Metadata source = createMetadataFromArtifact( artifact );",
          "116:         Date before = new Date( System.currentTimeMillis() - 5000 );",
          "117:         Date after = new Date( System.currentTimeMillis() );",
          "118:         addSnapshotVersion( target.getVersioning(), \"jar\", before, \"1\", 1 );",
          "119:         SnapshotVersion sv2 =",
          "120:             addSnapshotVersion( source.getVersioning(), \"jar\", after, \"1.0-\" + formatDate( after, true ) + \"-2\", 2 );",
          "121:         SnapshotVersion sv3 =",
          "122:             addSnapshotVersion( source.getVersioning(), \"pom\", after, \"1.0-\" + formatDate( after, true ) + \"-2\", 2 );",
          "123:         assertTrue( target.merge( source ) );",
          "124:         Versioning actualVersioning = target.getVersioning();",
          "125:         assertEquals( 2, actualVersioning.getSnapshotVersions().size() );",
          "126:         assertEquals( sv2, actualVersioning.getSnapshotVersions().get( 0 ) );",
          "127:         assertEquals( sv3, actualVersioning.getSnapshotVersions().get( 1 ) );",
          "128:         assertEquals( formatDate( after, false ), actualVersioning.getLastUpdated() );",
          "129:         assertEquals( formatDate( after, true ), actualVersioning.getSnapshot().getTimestamp() );",
          "130:         assertEquals( 2, actualVersioning.getSnapshot().getBuildNumber() );",
          "131:     }",
          "133:     @Test",
          "134:     public void mergeWithSameSnapshotWithDifferentVersionsAndOlderLastUpdated()",
          "135:     {",
          "136:         Metadata source = createMetadataFromArtifact( artifact );",
          "137:         Date before = new Date( System.currentTimeMillis() - 5000 );",
          "138:         Date after = new Date( System.currentTimeMillis() );",
          "139:         SnapshotVersion sv1 = addSnapshotVersion( target.getVersioning(), after, artifact );",
          "140:         addSnapshotVersion( source.getVersioning(), before, artifact );",
          "142:         assertFalse( target.merge( source ) );",
          "143:         assertEquals( 1, target.getVersioning().getSnapshotVersions().size() );",
          "144:         assertEquals( sv1, target.getVersioning().getSnapshotVersions().get( 0 ) );",
          "145:         assertEquals( formatDate( after, false ), target.getVersioning().getLastUpdated() );",
          "146:         assertEquals( formatDate( after, true ), target.getVersioning().getSnapshot().getTimestamp() );",
          "147:     }",
          "149:     @Test",
          "150:     public void mergeWithSameSnapshotWithSameVersionAndTimestamp()",
          "151:     {",
          "152:         Metadata source = createMetadataFromArtifact( artifact );",
          "153:         Date date = new Date();",
          "154:         addSnapshotVersion( target.getVersioning(), date, artifact );",
          "155:         SnapshotVersion sv1 = addSnapshotVersion( source.getVersioning(), date, artifact );",
          "158:         assertTrue( target.merge( source ) );",
          "159:         assertEquals( 1, target.getVersioning().getSnapshotVersions().size() );",
          "160:         assertEquals( sv1, target.getVersioning().getSnapshotVersions().get( 0 ) );",
          "161:         assertEquals( formatDate( date, false ), target.getVersioning().getLastUpdated() );",
          "162:         assertEquals( formatDate( date, true ), target.getVersioning().getSnapshot().getTimestamp() );",
          "163:     }",
          "165:     @Test",
          "166:     public void mergeLegacyWithSnapshotLegacy()",
          "167:     {",
          "168:         Metadata source = createMetadataFromArtifact( artifact );",
          "169:         Date before = new Date( System.currentTimeMillis() - 5000 );",
          "170:         Date after = new Date( System.currentTimeMillis() );",
          "172:         addSnapshotVersionLegacy( target.getVersioning(), before, 1 );",
          "173:         addSnapshotVersionLegacy( source.getVersioning(), after, 2 );",
          "176:         assertTrue( target.merge( source ) );",
          "177:         assertEquals( 0, target.getVersioning().getSnapshotVersions().size() );",
          "178:         assertEquals( formatDate( after, false ), target.getVersioning().getLastUpdated() );",
          "179:         assertEquals( formatDate( after, true ), target.getVersioning().getSnapshot().getTimestamp() );",
          "180:     }",
          "182:     @Test",
          "183:     public void mergeLegacyWithSnapshot()",
          "184:     {",
          "185:         Metadata source = createMetadataFromArtifact( artifact );",
          "186:         Date before = new Date( System.currentTimeMillis() - 5000 );",
          "187:         Date after = new Date( System.currentTimeMillis() );",
          "189:         addSnapshotVersionLegacy( target.getVersioning(), before, 1 );",
          "190:         addSnapshotVersion( source.getVersioning(), after, artifact );",
          "193:         assertTrue( target.merge( source ) );",
          "195:         assertEquals( 0, target.getVersioning().getSnapshotVersions().size() );",
          "196:         assertEquals( formatDate( after, false ), target.getVersioning().getLastUpdated() );",
          "197:         assertEquals( formatDate( after, true ), target.getVersioning().getSnapshot().getTimestamp() );",
          "198:     }",
          "200:     @Test",
          "201:     public void mergeWithSnapshotLegacy()",
          "202:     {",
          "203:         Metadata source = createMetadataFromArtifact( artifact );",
          "204:         Date before = new Date( System.currentTimeMillis() - 5000 );",
          "205:         Date after = new Date( System.currentTimeMillis() );",
          "206:         addSnapshotVersion( target.getVersioning(), before, artifact );",
          "208:         addSnapshotVersionLegacy( source.getVersioning(), after, 2 );",
          "211:         assertTrue( target.merge( source ) );",
          "213:         assertEquals( 0, target.getVersioning().getSnapshotVersions().size() );",
          "214:         assertEquals( formatDate( after, false ), target.getVersioning().getLastUpdated() );",
          "215:         assertEquals( formatDate( after, true ), target.getVersioning().getSnapshot().getTimestamp() );",
          "216:         assertEquals( 2, target.getVersioning().getSnapshot().getBuildNumber() );",
          "217:     }",
          "221:     private static final String SNAPSHOT = \"SNAPSHOT\";",
          "223:     private static final String DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT = \"yyyyMMdd.HHmmss\";",
          "225:     private static final String DEFAULT_DATE_FORMAT = \"yyyyMMddHHmmss\";",
          "227:     private static String formatDate( Date date, boolean forSnapshotTimestamp )",
          "228:     {",
          "230:         TimeZone timezone = TimeZone.getTimeZone( \"UTC\" );",
          "231:         DateFormat fmt =",
          "232:             new SimpleDateFormat( forSnapshotTimestamp ? DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT : DEFAULT_DATE_FORMAT );",
          "233:         fmt.setCalendar( new GregorianCalendar() );",
          "234:         fmt.setTimeZone( timezone );",
          "235:         return fmt.format( date );",
          "236:     }",
          "238:     private static Metadata createMetadataFromArtifact( Artifact artifact )",
          "239:     {",
          "240:         Metadata metadata = new Metadata();",
          "241:         metadata.setArtifactId( artifact.getArtifactId() );",
          "242:         metadata.setGroupId( artifact.getGroupId() );",
          "243:         metadata.setVersion( artifact.getVersion() );",
          "244:         metadata.setVersioning( new Versioning() );",
          "245:         return metadata;",
          "246:     }",
          "248:     private static SnapshotVersion addSnapshotVersion( Versioning versioning, Date timestamp, Artifact artifact )",
          "249:     {",
          "250:         int buildNumber = 1;",
          "253:         String version = artifact.getVersion();",
          "254:         String qualifier = formatDate( timestamp, true ) + '-' + buildNumber;",
          "255:         version = version.substring( 0, version.length() - SNAPSHOT.length() ) + qualifier;",
          "256:         return addSnapshotVersion( versioning, artifact.getExtension(), timestamp, version, buildNumber );",
          "257:     }",
          "259:     private static SnapshotVersion addSnapshotVersion( Versioning versioning, String extension, Date timestamp,",
          "260:                                                        String version, int buildNumber )",
          "261:     {",
          "262:         Snapshot snapshot = new Snapshot();",
          "263:         snapshot.setBuildNumber( buildNumber );",
          "264:         snapshot.setTimestamp( formatDate( timestamp, true ) );",
          "266:         SnapshotVersion sv = new SnapshotVersion();",
          "267:         sv.setExtension( extension );",
          "268:         sv.setVersion( version );",
          "269:         sv.setUpdated( formatDate( timestamp, false ) );",
          "270:         versioning.addSnapshotVersion( sv );",
          "273:         versioning.setSnapshot( snapshot );",
          "274:         versioning.setLastUpdatedTimestamp( timestamp );",
          "275:         return sv;",
          "276:     }",
          "280:     private static void addSnapshotVersionLegacy( Versioning versioning, Date timestamp, int buildNumber )",
          "281:     {",
          "282:         Snapshot snapshot = new Snapshot();",
          "283:         snapshot.setBuildNumber( buildNumber );",
          "284:         snapshot.setTimestamp( formatDate( timestamp, true ) );",
          "286:         versioning.setSnapshot( snapshot );",
          "287:         versioning.setLastUpdatedTimestamp( timestamp );",
          "288:     }",
          "290: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfeea9dac4c5a14c846382aa7a47a7d4e5f110f5",
      "candidate_info": {
        "commit_hash": "cfeea9dac4c5a14c846382aa7a47a7d4e5f110f5",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/cfeea9dac4c5a14c846382aa7a47a7d4e5f110f5",
        "files": [
          "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
        ],
        "message": "Remove unused imports",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [
            "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
          ],
          "candidate": [
            "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java": [
          "File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java -> maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: import javax.inject.Inject;",
          "56: import javax.inject.Named;",
          "59: import java.util.LinkedHashMap;",
          "60: import java.util.Map;",
          "",
          "[Removed Lines]",
          "57: import java.io.IOException;",
          "58: import java.io.InputStream;",
          "61: import java.util.Properties;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c36bf5ef78a162cefea47ccdaf0d28e01c1426c",
      "candidate_info": {
        "commit_hash": "5c36bf5ef78a162cefea47ccdaf0d28e01c1426c",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/5c36bf5ef78a162cefea47ccdaf0d28e01c1426c",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java"
        ],
        "message": "[MNG-7312] Revert ThreadLocal approach from MNG-6843 and MNG-7251\n\nRevert \"[MNG-7251] Fix threadLocalArtifactsHolder leaking into cloned project\"\n\nThis reverts commit 4e5b3d55545e5f03f05ac7b0cd1b56689df36201.\n\nRevert \"[MNG-6843] Parallel build fails due to missing JAR artifacts in compilePath\"\n\nThis reverts commit 76d5f0d942f52650d3bdf775b6af42d23d69066b.\n\n===\n\nThis closes #595",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java||maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java -> maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     private Set<Artifact> resolvedArtifacts;",
          "110:     private Artifact parentArtifact;",
          "112:     private Set<Artifact> pluginArtifacts;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     private ArtifactFilter artifactFilter;",
          "116:     private Set<Artifact> artifacts;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:     private Artifact artifact;",
          "148:     private Model originalModel;",
          "",
          "[Removed Lines]",
          "146:     private ThreadLocal<ArtifactsHolder> threadLocalArtifactsHolder = newThreadLocalArtifactsHolder();",
          "",
          "[Added Lines]",
          "155:     private Map<String, Artifact> artifactMap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:     public MavenProject()",
          "177:     {",
          "178:         Model model = new Model();",
          "179:         model.setGroupId( EMPTY_PROJECT_GROUP_ID );",
          "180:         model.setArtifactId( EMPTY_PROJECT_ARTIFACT_ID );",
          "181:         model.setVersion( EMPTY_PROJECT_VERSION );",
          "194:     }",
          "196:     public MavenProject( Model model )",
          "",
          "[Removed Lines]",
          "182:         setModel( model );",
          "183:     }",
          "185:     private static ThreadLocal<ArtifactsHolder> newThreadLocalArtifactsHolder()",
          "186:     {",
          "187:         return new ThreadLocal<ArtifactsHolder>()",
          "188:         {",
          "189:             protected ArtifactsHolder initialValue()",
          "190:             {",
          "191:                 return new ArtifactsHolder();",
          "192:             }",
          "193:         };",
          "",
          "[Added Lines]",
          "193:         setModel( model );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "696:     public void setArtifacts( Set<Artifact> artifacts )",
          "697:     {",
          "703:     }",
          "",
          "[Removed Lines]",
          "698:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "699:         artifactsHolder.artifacts = artifacts;",
          "702:         artifactsHolder.artifactMap = null;",
          "",
          "[Added Lines]",
          "698:         this.artifacts = artifacts;",
          "701:         artifactMap = null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "713:     public Set<Artifact> getArtifacts()",
          "714:     {",
          "717:         {",
          "719:             {",
          "721:             }",
          "722:             else",
          "723:             {",
          "725:                 for ( Artifact artifact : resolvedArtifacts )",
          "726:                 {",
          "728:                     {",
          "730:                     }",
          "731:                 }",
          "732:             }",
          "733:         }",
          "735:     }",
          "737:     public Map<String, Artifact> getArtifactMap()",
          "738:     {",
          "741:         {",
          "743:         }",
          "745:     }",
          "747:     public void setPluginArtifacts( Set<Artifact> pluginArtifacts )",
          "",
          "[Removed Lines]",
          "715:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "716:         if ( artifactsHolder.artifacts == null )",
          "718:             if ( artifactsHolder.artifactFilter == null || resolvedArtifacts == null )",
          "720:                 artifactsHolder.artifacts = new LinkedHashSet<>();",
          "724:                 artifactsHolder.artifacts = new LinkedHashSet<>( resolvedArtifacts.size() * 2 );",
          "727:                     if ( artifactsHolder.artifactFilter.include( artifact ) )",
          "729:                         artifactsHolder.artifacts.add( artifact );",
          "734:         return artifactsHolder.artifacts;",
          "739:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "740:         if ( artifactsHolder.artifactMap == null )",
          "742:             artifactsHolder.artifactMap = ArtifactUtils.artifactMapByVersionlessId( getArtifacts() );",
          "744:         return artifactsHolder.artifactMap;",
          "",
          "[Added Lines]",
          "714:         if ( artifacts == null )",
          "716:             if ( artifactFilter == null || resolvedArtifacts == null )",
          "718:                 artifacts = new LinkedHashSet<>();",
          "722:                 artifacts = new LinkedHashSet<>( resolvedArtifacts.size() * 2 );",
          "725:                     if ( artifactFilter.include( artifact ) )",
          "727:                         artifacts.add( artifact );",
          "732:         return artifacts;",
          "737:         if ( artifactMap == null )",
          "739:             artifactMap = ArtifactUtils.artifactMapByVersionlessId( getArtifacts() );",
          "741:         return artifactMap;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1186:         {",
          "1187:             throw new UnsupportedOperationException( e );",
          "1188:         }",
          "1191:         clone.deepCopy( this );",
          "1193:         return clone;",
          "",
          "[Removed Lines]",
          "1190:         clone.threadLocalArtifactsHolder = newThreadLocalArtifactsHolder();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1231:         file = project.file;",
          "1232:         basedir = project.basedir;",
          "",
          "[Removed Lines]",
          "1233:         threadLocalArtifactsHolder.set( project.threadLocalArtifactsHolder.get().copy() );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1239:             setDependencyArtifacts( Collections.unmodifiableSet( project.getDependencyArtifacts() ) );",
          "1240:         }",
          "1242:         if ( project.getParentFile() != null )",
          "1243:         {",
          "1244:             parentFile = new File( project.getParentFile().getAbsolutePath() );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1237:         if ( project.getArtifacts() != null )",
          "1238:         {",
          "1239:             setArtifacts( Collections.unmodifiableSet( project.getArtifacts() ) );",
          "1240:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1433:     public void setResolvedArtifacts( Set<Artifact> artifacts )",
          "1434:     {",
          "1435:         this.resolvedArtifacts = ( artifacts != null ) ? artifacts : Collections.<Artifact>emptySet();",
          "1439:     }",
          "",
          "[Removed Lines]",
          "1436:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "1437:         artifactsHolder.artifacts = null;",
          "1438:         artifactsHolder.artifactMap = null;",
          "",
          "[Added Lines]",
          "1436:         this.artifacts = null;",
          "1437:         this.artifactMap = null;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1449:     public void setArtifactFilter( ArtifactFilter artifactFilter )",
          "1450:     {",
          "1455:     }",
          "",
          "[Removed Lines]",
          "1451:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "1452:         artifactsHolder.artifactFilter = artifactFilter;",
          "1453:         artifactsHolder.artifacts = null;",
          "1454:         artifactsHolder.artifactMap = null;",
          "",
          "[Added Lines]",
          "1450:         this.artifactFilter = artifactFilter;",
          "1451:         this.artifacts = null;",
          "1452:         this.artifactMap = null;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1981:     {",
          "1982:         this.projectBuilderConfiguration = projectBuildingRequest;",
          "1983:     }",
          "2000: }",
          "",
          "[Removed Lines]",
          "1985:     private static class ArtifactsHolder",
          "1986:     {",
          "1987:         private ArtifactFilter artifactFilter;",
          "1988:         private Set<Artifact> artifacts;",
          "1989:         private Map<String, Artifact> artifactMap;",
          "1991:         ArtifactsHolder copy()",
          "1992:         {",
          "1993:            ArtifactsHolder copy = new ArtifactsHolder();",
          "1994:            copy.artifactFilter = artifactFilter;",
          "1995:            copy.artifacts = artifacts != null ? new LinkedHashSet<>( artifacts ) : null;",
          "1996:            copy.artifactMap = artifactMap != null ? new LinkedHashMap<>( artifactMap ) : null;",
          "1997:            return copy;",
          "1998:         }",
          "1999:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java||maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java -> maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.File;",
          "23: import java.io.IOException;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "31: import org.apache.maven.model.DependencyManagement;",
          "32: import org.apache.maven.model.Model;",
          "33: import org.apache.maven.model.Parent;",
          "34: import org.apache.maven.model.Profile;",
          "37: public class MavenProjectTest",
          "38:     extends AbstractMavenProjectTestCase",
          "",
          "[Removed Lines]",
          "24: import java.util.Collections;",
          "27: import java.util.Set;",
          "28: import java.util.concurrent.atomic.AtomicReference;",
          "30: import org.apache.maven.artifact.Artifact;",
          "35: import org.mockito.Mockito;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:         assertEquals( \"Base directory is preserved across clone\", projectToClone.getBasedir(), clonedProject.getBasedir() );",
          "194:     }",
          "234:     public void testUndefinedOutputDirectory()",
          "235:         throws Exception",
          "236:     {",
          "",
          "[Removed Lines]",
          "196:     public void testCloneWithArtifacts()",
          "197:         throws InterruptedException",
          "198:     {",
          "199:         Artifact initialArtifact = Mockito.mock( Artifact.class, \"initialArtifact\" );",
          "200:         MavenProject originalProject = new MavenProject();",
          "201:         originalProject.setArtifacts( Collections.singleton( initialArtifact ) );",
          "202:         assertEquals( \"Sanity check: originalProject returns artifact that has just been set\",",
          "203:                       Collections.singleton( initialArtifact ), originalProject.getArtifacts() );",
          "205:         final MavenProject clonedProject = originalProject.clone();",
          "207:         assertEquals( \"Cloned project returns the artifact that was set for the original project\",",
          "208:                       Collections.singleton( initialArtifact ), clonedProject.getArtifacts() );",
          "210:         Artifact anotherArtifact = Mockito.mock( Artifact.class, \"anotherArtifact\" );",
          "211:         clonedProject.setArtifacts( Collections.singleton( anotherArtifact ) );",
          "212:         assertEquals( \"Sanity check: clonedProject returns artifact that has just been set\",",
          "213:                       Collections.singleton( anotherArtifact ), clonedProject.getArtifacts() );",
          "215:         assertEquals( \"Original project returns the artifact that was set initially (not the one for clonedProject)\",",
          "216:                       Collections.singleton( initialArtifact ), originalProject.getArtifacts() );",
          "218:         final AtomicReference<Set<Artifact>> artifactsFromThread = new AtomicReference<>();",
          "219:         Thread thread = new Thread( new Runnable()",
          "220:         {",
          "221:             @Override",
          "222:             public void run()",
          "223:             {",
          "224:                 artifactsFromThread.set( clonedProject.getArtifacts() );",
          "225:             }",
          "226:         } );",
          "227:         thread.start();",
          "228:         thread.join();",
          "230:         assertEquals( \"Another thread does not see the same artifacts\",",
          "231:                       Collections.emptySet(), artifactsFromThread.get() );",
          "232:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8882a9c599013182e42f0c7c321396c23b84dbe0",
      "candidate_info": {
        "commit_hash": "8882a9c599013182e42f0c7c321396c23b84dbe0",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8882a9c599013182e42f0c7c321396c23b84dbe0",
        "files": [
          "maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java",
          "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java",
          "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java"
        ],
        "message": "[MNG-7164] Add constructor MojoExecutionException(Throwable)\n\nThis closes #474",
        "before_after_code_files": [
          "maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java||maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java",
          "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java||maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java",
          "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java||maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java||maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java": [
          "File: maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java -> maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         super( message, cause );",
          "42:     }",
          "44:     public String getLongMessage()",
          "45:     {",
          "46:         return longMessage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     public AbstractMojoExecutionException( Throwable cause )",
          "52:     {",
          "53:         super( cause );",
          "54:     }",
          "",
          "---------------"
        ],
        "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java||maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java": [
          "File: maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java -> maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     {",
          "77:         super( message );",
          "78:     }",
          "79: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:     public MojoExecutionException( Throwable cause )",
          "88:     {",
          "89:         super( cause );",
          "90:     }",
          "",
          "---------------"
        ],
        "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java||maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java": [
          "File: maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java -> maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     {",
          "66:         super( message, cause );",
          "67:     }",
          "68: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     public MojoFailureException( Throwable cause )",
          "77:     {",
          "78:         super( cause );",
          "79:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e820dbb24e22e12fa058c59c6b3cf555da07abb5",
      "candidate_info": {
        "commit_hash": "e820dbb24e22e12fa058c59c6b3cf555da07abb5",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/e820dbb24e22e12fa058c59c6b3cf555da07abb5",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-6878] Upgrade Guice to 4.2.3",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "02bc2a69fc8d1a14ff35645d9478b686a07cf29f",
      "candidate_info": {
        "commit_hash": "02bc2a69fc8d1a14ff35645d9478b686a07cf29f",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/02bc2a69fc8d1a14ff35645d9478b686a07cf29f",
        "files": [
          "apache-maven/pom.xml"
        ],
        "message": "Add versionlessMavenDist profile",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "b74199ed446c83282ad806afaf962a7f74eac0ea",
      "candidate_info": {
        "commit_hash": "b74199ed446c83282ad806afaf962a7f74eac0ea",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/b74199ed446c83282ad806afaf962a7f74eac0ea",
        "files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java"
        ],
        "message": "[MNG-7034] StackOverflowError thrown if a cycle exists in BOM imports\n\nThis closes #484",
        "before_after_code_files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java||maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:     @Override",
          "249:     public ModelBuildingResult build( ModelBuildingRequest request )",
          "250:         throws ModelBuildingException",
          "251:     {",
          "253:         DefaultModelBuildingResult result = new DefaultModelBuildingResult();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:     {",
          "252:         return build( request, new LinkedHashSet<String>() );",
          "253:     }",
          "255:     @SuppressWarnings( \"checkstyle:methodlength\" )",
          "256:     protected ModelBuildingResult build( ModelBuildingRequest request, Collection<String> importIds )",
          "257:         throws ModelBuildingException",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "428:         if ( !request.isTwoPhaseBuilding() )",
          "429:         {",
          "431:         }",
          "433:         return result;",
          "",
          "[Removed Lines]",
          "430:             build( request, result );",
          "",
          "[Added Lines]",
          "437:             build( request, result, importIds );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1303:                     final ModelBuildingResult importResult;",
          "1304:                     try",
          "1305:                     {",
          "1307:                     }",
          "1308:                     catch ( ModelBuildingException e )",
          "1309:                     {",
          "",
          "[Removed Lines]",
          "1306:                         importResult = build( importRequest );",
          "",
          "[Added Lines]",
          "1313:                         importResult = build( importRequest, importIds );",
          "",
          "---------------"
        ],
        "maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java||maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java": [
          "File: maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java -> maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.model.building;",
          "22: import org.apache.maven.model.Dependency;",
          "23: import org.apache.maven.model.Parent;",
          "24: import org.apache.maven.model.Repository;",
          "25: import org.apache.maven.model.resolution.InvalidRepositoryException;",
          "26: import org.apache.maven.model.resolution.ModelResolver;",
          "27: import org.apache.maven.model.resolution.UnresolvableModelException;",
          "28: import org.junit.Test;",
          "30: import static org.junit.Assert.assertNotNull;",
          "35: public class DefaultModelBuilderTest",
          "36: {",
          "38:     private static final String BASE1_ID = \"thegroup:base1:pom\";",
          "39:     private static final String BASE1_ID2 = \"thegroup:base1:1\";",
          "41:     private static final String BASE1 = \"<project>\\n\" +",
          "42:             \"  <modelVersion>4.0.0</modelVersion>\\n\" +",
          "43:             \"  <groupId>thegroup</groupId>\\n\" +",
          "44:             \"  <artifactId>base1</artifactId>\\n\" +",
          "45:             \"  <version>1</version>\\n\" +",
          "46:             \"  <packaging>pom</packaging>\\n\" +",
          "47:             \"  <dependencyManagement>\\n\" +",
          "48:             \"    <dependencies>\\n\" +",
          "49:             \"      <dependency>\\n\" +",
          "50:             \"        <groupId>thegroup</groupId>\\n\" +",
          "51:             \"        <artifactId>base2</artifactId>\\n\" +",
          "52:             \"        <version>1</version>\\n\" +",
          "53:             \"        <type>pom</type>\\n\" +",
          "54:             \"        <scope>import</scope>\\n\" +",
          "55:             \"      </dependency>\\n\" +",
          "56:             \"    </dependencies>\\n\" +",
          "57:             \"  </dependencyManagement>\\n\" +",
          "58:             \"</project>\\n\";",
          "60:     private static final String BASE2_ID = \"thegroup:base2:pom\";",
          "61:     private static final String BASE2_ID2 = \"thegroup:base2:1\";",
          "63:     private static final String BASE2 = \"<project>\\n\" +",
          "64:             \"  <modelVersion>4.0.0</modelVersion>\\n\" +",
          "65:             \"  <groupId>thegroup</groupId>\\n\" +",
          "66:             \"  <artifactId>base2</artifactId>\\n\" +",
          "67:             \"  <version>1</version>\\n\" +",
          "68:             \"  <packaging>pom</packaging>\\n\" +",
          "69:             \"  <dependencyManagement>\\n\" +",
          "70:             \"    <dependencies>\\n\" +",
          "71:             \"      <dependency>\\n\" +",
          "72:             \"        <groupId>thegroup</groupId>\\n\" +",
          "73:             \"        <artifactId>base1</artifactId>\\n\" +",
          "74:             \"        <version>1</version>\\n\" +",
          "75:             \"        <type>pom</type>\\n\" +",
          "76:             \"        <scope>import</scope>\\n\" +",
          "77:             \"      </dependency>\\n\" +",
          "78:             \"    </dependencies>\\n\" +",
          "79:             \"  </dependencyManagement>\\n\" +",
          "80:             \"</project>\\n\";",
          "82:     @Test( expected = ModelBuildingException.class )",
          "83:     public void testCycleInImports()",
          "84:             throws Exception",
          "85:     {",
          "86:         ModelBuilder builder = new DefaultModelBuilderFactory().newInstance();",
          "87:         assertNotNull( builder );",
          "89:         DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();",
          "90:         request.setModelSource( new StringModelSource( BASE1 ) );",
          "91:         request.setModelResolver( new CycleInImportsResolver() );",
          "93:         builder.build( request );",
          "94:     }",
          "96:     static class CycleInImportsResolver extends BaseModelResolver",
          "97:     {",
          "98:         @Override",
          "99:         public ModelSource resolveModel(Dependency dependency) throws UnresolvableModelException",
          "100:         {",
          "101:             switch ( dependency.getManagementKey() )",
          "102:             {",
          "103:                 case BASE1_ID: return new StringModelSource( BASE1 );",
          "104:                 case BASE2_ID: return new StringModelSource( BASE2 );",
          "105:             }",
          "106:             return null;",
          "107:         }",
          "108:     }",
          "110:     static class BaseModelResolver implements ModelResolver",
          "111:     {",
          "112:         @Override",
          "113:         public ModelSource resolveModel( String groupId, String artifactId, String version )",
          "114:                 throws UnresolvableModelException",
          "115:         {",
          "116:             switch ( groupId + \":\" + artifactId + \":\" + version )",
          "117:             {",
          "118:                 case BASE1_ID2: return new StringModelSource( BASE1 );",
          "119:                 case BASE2_ID2: return new StringModelSource( BASE2 );",
          "120:             }",
          "121:             return null;",
          "122:         }",
          "124:         @Override",
          "125:         public ModelSource resolveModel( Parent parent ) throws UnresolvableModelException",
          "126:         {",
          "127:             return null;",
          "128:         }",
          "130:         @Override",
          "131:         public ModelSource resolveModel( Dependency dependency ) throws UnresolvableModelException",
          "132:         {",
          "133:             return null;",
          "134:         }",
          "136:         @Override",
          "137:         public void addRepository( Repository repository ) throws InvalidRepositoryException",
          "138:         {",
          "139:         }",
          "141:         @Override",
          "142:         public void addRepository(Repository repository, boolean replace) throws InvalidRepositoryException",
          "143:         {",
          "144:         }",
          "146:         @Override",
          "147:         public ModelResolver newCopy()",
          "148:         {",
          "149:             return this;",
          "150:         }",
          "151:     }",
          "153: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea98e05a04480131370aa0c110b8c54cf726c06f",
      "candidate_info": {
        "commit_hash": "ea98e05a04480131370aa0c110b8c54cf726c06f",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/ea98e05a04480131370aa0c110b8c54cf726c06f",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[maven-release-plugin] prepare release maven-3.8.2",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "bfd7c491b86dfd26480fc6bb1b95df6dbea20945",
      "candidate_info": {
        "commit_hash": "bfd7c491b86dfd26480fc6bb1b95df6dbea20945",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/bfd7c491b86dfd26480fc6bb1b95df6dbea20945",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-7179] Upgrade Jansi to 2.3.3",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "09f77da9b0c39848fe763bdd4a392151eec0d8c3",
      "candidate_info": {
        "commit_hash": "09f77da9b0c39848fe763bdd4a392151eec0d8c3",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/09f77da9b0c39848fe763bdd4a392151eec0d8c3",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-7119] Upgrade Maven Wagon to 3.4.3",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "fb5f3f5b0f36d3232b0193c1d9b33fd0b36b9601",
      "candidate_info": {
        "commit_hash": "fb5f3f5b0f36d3232b0193c1d9b33fd0b36b9601",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/fb5f3f5b0f36d3232b0193c1d9b33fd0b36b9601",
        "files": [
          "apache-maven/src/bin/mvn"
        ],
        "message": "[MNG-7270] Switch to shell alternative to \"which\"\n\nIn some circumstances the init script calls `which`, which may or may not be\navailable on the host system. Instead, use `command -v`, which is nearly\nequivalent. One area it differs is if the command being queried is defined as\na shell alias. To avoid that, call `unset -f command` to avoid the situation\nwhere \"command\" has been re-defined as a shell function.\n\nSee here for more information on this approach:\n<https://pubs.opengroup.org/onlinepubs/009695399/utilities/command.html>\n\nTested with bash, sh (bash invoked as sh), posh, dash, zsh and mksh.\n\nThis closes #556",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "73f34c00d16c24edb0e5f9d7eb63bc0c730a72d1",
      "candidate_info": {
        "commit_hash": "73f34c00d16c24edb0e5f9d7eb63bc0c730a72d1",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/73f34c00d16c24edb0e5f9d7eb63bc0c730a72d1",
        "files": [
          "apache-maven/pom.xml",
          "apache-maven/src/bin/mvn",
          "apache-maven/src/bin/mvn.cmd",
          "apache-maven/src/lib/jansi-native/README.txt",
          "apache-maven/src/main/assembly/component.xml"
        ],
        "message": "[MNG-7172] Remove expansion of Jansi native libraries",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   -classpath %CLASSWORLDS_JAR% ^",
          "176:   \"-Dclassworlds.conf=%MAVEN_HOME%\\bin\\m2.conf\" ^",
          "177:   \"-Dmaven.home=%MAVEN_HOME%\" ^",
          "179:   \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" ^",
          "180:   %CLASSWORLDS_LAUNCHER% %MAVEN_CMD_LINE_ARGS%",
          "181: if ERRORLEVEL 1 goto error",
          "",
          "[Removed Lines]",
          "178:   \"-Dlibrary.jansi.path=%MAVEN_HOME%\\lib\\jansi-native\" ^",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f32eb09892686cba083f9f175b3c8eac0ac42ae7",
      "candidate_info": {
        "commit_hash": "f32eb09892686cba083f9f175b3c8eac0ac42ae7",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/f32eb09892686cba083f9f175b3c8eac0ac42ae7",
        "files": [
          "apache-maven/src/bin/mvn",
          "apache-maven/src/bin/mvn.cmd"
        ],
        "message": "[MNG-7010] Omit \"NB: JAVA_HOME should point to a JDK not a JRE\"\n\nThis closes #512",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: :checkJCmd",
          "55: if exist \"%JAVACMD%\" goto chkMHome",
          "60: goto error",
          "62: :chkMHome",
          "",
          "[Removed Lines]",
          "57: echo The JAVA_HOME environment variable is not defined correctly >&2",
          "58: echo This environment variable is needed to run this program >&2",
          "59: echo NB: JAVA_HOME should point to a JDK not a JRE >&2",
          "",
          "[Added Lines]",
          "57: echo The JAVA_HOME environment variable is not defined correctly, >&2",
          "58: echo this environment variable is needed to run this program. >&2",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25df095829bff8a1744db7dbf1ddd14aa1f8d43f",
      "candidate_info": {
        "commit_hash": "25df095829bff8a1744db7dbf1ddd14aa1f8d43f",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/25df095829bff8a1744db7dbf1ddd14aa1f8d43f",
        "files": [
          "apache-maven/src/bin/mvn"
        ],
        "message": "[MNG-7190] Load mavenrc from /usr/local/etc also in Bourne shell script",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "21e597ec777f0b74eed4e067b58b6eb8b0c9fad4",
      "candidate_info": {
        "commit_hash": "21e597ec777f0b74eed4e067b58b6eb8b0c9fad4",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/21e597ec777f0b74eed4e067b58b6eb8b0c9fad4",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[maven-release-plugin] prepare for next development iteration",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "0cda42477253cab11e7e0f340009da5f417d0775",
      "candidate_info": {
        "commit_hash": "0cda42477253cab11e7e0f340009da5f417d0775",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/0cda42477253cab11e7e0f340009da5f417d0775",
        "files": [
          "maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java",
          "maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java"
        ],
        "message": "[MNG-7386] Make sure the ModelMerger$MergingList can be serialized",
        "before_after_code_files": [
          "maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java||maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java",
          "maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java||maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java||maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java": [
          "File: maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java -> maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.AbstractList;",
          "23: import java.util.ArrayList;",
          "24: import java.util.Collection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.io.ObjectStreamException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2874:     {",
          "2875:         private final KeyComputer<V> keyComputer;",
          "2876:         private Map<Object, V> map;",
          "2877:         private List<V> list;",
          "",
          "[Removed Lines]",
          "2873:     private static class MergingList<V> extends AbstractList<V>",
          "",
          "[Added Lines]",
          "2874:     private static class MergingList<V> extends AbstractList<V> implements java.io.Serializable",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2882:             this.keyComputer = keyComputer;",
          "2883:         }",
          "2885:         @Override",
          "2886:         public Iterator<V> iterator()",
          "2887:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2887:         Object writeReplace() throws ObjectStreamException",
          "2888:         {",
          "2889:             return new ArrayList<>( this );",
          "2890:         }",
          "",
          "---------------"
        ],
        "maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java||maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java": [
          "File: maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java -> maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.model.merge;",
          "22: import java.io.ByteArrayOutputStream;",
          "23: import java.io.ObjectOutputStream;",
          "24: import java.util.ArrayList;",
          "26: import org.apache.maven.model.License;",
          "27: import org.apache.maven.model.Model;",
          "28: import org.junit.Test;",
          "30: public class ModelMergerTest {",
          "32:     @Test",
          "33:     public void testMergedModelSerialization() throws Exception {",
          "34:         Model target = new Model();",
          "35:         Model source = new Model();",
          "36:         target.setLicenses(new ArrayList<License>());",
          "37:         License lic1 = new License();",
          "38:         License lic2 = new License();",
          "39:         target.getLicenses().add(lic1);",
          "40:         source.setLicenses(new ArrayList<License>());",
          "41:         source.getLicenses().add(lic2);",
          "43:         new ModelMerger().mergeModel(target, source, false, null);",
          "45:         ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "46:         ObjectOutputStream oos = new ObjectOutputStream(baos);",
          "47:         oos.writeObject(target);",
          "48:     }",
          "49: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a46906806a31edb462b935e380a657b6efde6231",
      "candidate_info": {
        "commit_hash": "a46906806a31edb462b935e380a657b6efde6231",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/a46906806a31edb462b935e380a657b6efde6231",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "next version in branch 3.8.x is 3.8.1-SNAPSHOT",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "d29af9018b5c80177102aaab96bd37ed5fedf26c",
      "candidate_info": {
        "commit_hash": "d29af9018b5c80177102aaab96bd37ed5fedf26c",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/d29af9018b5c80177102aaab96bd37ed5fedf26c",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java"
        ],
        "message": "[MNG-7402] BuildListCalculator never detaches the classloader\n\nThis closes #683",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:             }",
          "58:             for ( MavenProject project : projects )",
          "59:             {",
          "64:             }",
          "65:         }",
          "66:         return new ProjectBuildList( projectBuilds );",
          "",
          "[Removed Lines]",
          "60:                 BuilderCommon.attachToThread( project ); // Not totally sure if this is needed for anything",
          "61:                 MavenSession copiedSession = session.clone();",
          "62:                 copiedSession.setCurrentProject( project );",
          "63:                 projectBuilds.add( new ProjectSegment( project, taskSegment, copiedSession ) );",
          "",
          "[Added Lines]",
          "60:                 ClassLoader tccl = Thread.currentThread().getContextClassLoader();",
          "61:                 try",
          "62:                 {",
          "63:                     BuilderCommon.attachToThread( project ); // Not totally sure if this is needed for anything",
          "64:                     MavenSession copiedSession = session.clone();",
          "65:                     copiedSession.setCurrentProject( project );",
          "66:                     projectBuilds.add( new ProjectSegment( project, taskSegment, copiedSession ) );",
          "67:                 }",
          "68:                 finally",
          "69:                 {",
          "70:                     Thread.currentThread().setContextClassLoader( tccl );",
          "71:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1aa1e1f0a891609256c60b2b7b5b8efaceea563",
      "candidate_info": {
        "commit_hash": "d1aa1e1f0a891609256c60b2b7b5b8efaceea563",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/d1aa1e1f0a891609256c60b2b7b5b8efaceea563",
        "files": [
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java",
          "maven-resolver-provider/pom.xml"
        ],
        "message": "[MNG-7252] Fix warnings issued by dependency:analyze\n\nThis closes #541",
        "before_after_code_files": [
          "maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java||maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java||maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java": [
          "File: maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java -> maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.IOException;",
          "23: import static junit.framework.TestCase.assertFalse;",
          "24: import static junit.framework.TestCase.assertTrue;",
          "26: import static org.junit.Assume.assumeTrue;",
          "27: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "25: import org.apache.commons.lang3.SystemUtils;",
          "",
          "[Added Lines]",
          "25: import org.codehaus.plexus.util.Os;;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     public void testWindowsPaths()",
          "54:             throws Exception",
          "55:     {",
          "58:         File upperCaseFile = createTempFile( \"TESTE\" );",
          "59:         String absolutePath = upperCaseFile.getAbsolutePath();",
          "",
          "[Removed Lines]",
          "56:         assumeTrue( SystemUtils.IS_OS_WINDOWS );",
          "",
          "[Added Lines]",
          "56:         assumeTrue( Os.isFamily( \"Windows\" ) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d173bf9cc5e6a4f550a9b50f99eca3561b1ca40e",
      "candidate_info": {
        "commit_hash": "d173bf9cc5e6a4f550a9b50f99eca3561b1ca40e",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/d173bf9cc5e6a4f550a9b50f99eca3561b1ca40e",
        "files": [
          ".gitignore"
        ],
        "message": "[MNG-7377] Add .vscode/ to .gitignore\n\nVS Code creates directories with configurations in project directories. This\nis usually fine, but triggers the `apache-rat` license alarms and future\nVS Code users might accidentally commit the directory.\n\nTo solve the alarm and avoid future issues, we add it to .gitignore.\n\nThis closes #646",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "83257bfde0dd5b4d391063412494957c1b7e15e8",
      "candidate_info": {
        "commit_hash": "83257bfde0dd5b4d391063412494957c1b7e15e8",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/83257bfde0dd5b4d391063412494957c1b7e15e8",
        "files": [
          "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java",
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java"
        ],
        "message": "[MNG-7349] Limit relocation warning message to direct dependencies only",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java",
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java -> maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:             pluginArtifact = result.getArtifact();",
          "111:             String requiredMavenVersion = (String) result.getProperties().get( \"prerequisites.maven\" );",
          "112:             if ( requiredMavenVersion != null )",
          "113:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:             if ( logger.isWarnEnabled() )",
          "112:             {",
          "113:                 if ( !result.getRelocations().isEmpty() )",
          "114:                 {",
          "115:                     String message = pluginArtifact instanceof org.apache.maven.repository.internal.RelocatedArtifact",
          "116:                             ? ( ( org.apache.maven.repository.internal.RelocatedArtifact ) pluginArtifact ).getMessage()",
          "117:                             : null;",
          "118:                     logger.warn( \"The artifact \" + result.getRelocations().get( 0 ) + \" has been relocated to \"",
          "119:                             + pluginArtifact + ( message != null ? \": \" + message : \"\" ) );",
          "120:                 }",
          "121:             }",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java -> maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:         depRequest.setRoot( node );",
          "184:         if ( logger.isDebugEnabled() )",
          "185:         {",
          "186:             node.accept( new GraphLogger( project ) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:         if ( logger.isWarnEnabled() )",
          "185:         {",
          "186:             for ( DependencyNode child : node.getChildren() )",
          "187:             {",
          "188:                 if ( !child.getRelocations().isEmpty() )",
          "189:                 {",
          "190:                     org.eclipse.aether.artifact.Artifact relocated = child.getDependency().getArtifact();",
          "191:                     String message = relocated instanceof org.apache.maven.repository.internal.RelocatedArtifact",
          "192:                             ? ( ( org.apache.maven.repository.internal.RelocatedArtifact ) relocated ).getMessage()",
          "193:                             : null;",
          "194:                     logger.warn( \"The artifact \" + child.getRelocations().get( 0 ) + \" has been relocated to \"",
          "195:                         + relocated + ( message != null ? \": \" + message : \"\" ) );",
          "196:                 }",
          "197:             }",
          "198:         }",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: import org.eclipse.aether.spi.locator.Service;",
          "69: import org.eclipse.aether.spi.locator.ServiceLocator;",
          "70: import org.eclipse.aether.transfer.ArtifactNotFoundException;",
          "",
          "[Removed Lines]",
          "71: import org.slf4j.Logger;",
          "72: import org.slf4j.LoggerFactory;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: public class DefaultArtifactDescriptorReader",
          "80:     implements ArtifactDescriptorReader, Service",
          "81: {",
          "84:     private RemoteRepositoryManager remoteRepositoryManager;",
          "86:     private VersionResolver versionResolver;",
          "",
          "[Removed Lines]",
          "82:     private static final Logger LOGGER = LoggerFactory.getLogger( DefaultArtifactDescriptorReader.class );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "320:             if ( relocation != null )",
          "321:             {",
          "322:                 result.addRelocation( a );",
          "324:                     new RelocatedArtifact( a, relocation.getGroupId(), relocation.getArtifactId(),",
          "337:             }",
          "338:             else",
          "339:             {",
          "",
          "[Removed Lines]",
          "323:                 Artifact relocatedArtifact =",
          "325:                                            relocation.getVersion() );",
          "326:                 if ( LOGGER.isWarnEnabled() )",
          "327:                 {",
          "328:                     String message = \"The artifact \" + a + \" has been relocated to \" + relocatedArtifact;",
          "329:                     if ( relocation.getMessage() != null )",
          "330:                     {",
          "331:                         message += \": \" + relocation.getMessage();",
          "332:                     }",
          "333:                     LOGGER.warn( message );",
          "334:                 }",
          "335:                 result.setArtifact( relocatedArtifact );",
          "336:                 a = relocatedArtifact;",
          "",
          "[Added Lines]",
          "319:                 a =",
          "321:                                            relocation.getVersion(), relocation.getMessage() );",
          "322:                 result.setArtifact( a );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     extends AbstractArtifact",
          "34: {",
          "",
          "[Removed Lines]",
          "32: final class RelocatedArtifact",
          "",
          "[Added Lines]",
          "32: public final class RelocatedArtifact",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     private final String version;",
          "45:     {",
          "46:         this.artifact = Objects.requireNonNull( artifact, \"artifact cannot be null\" );",
          "48:         this.groupId = ( groupId != null && groupId.length() > 0 ) ? groupId : null;",
          "49:         this.artifactId = ( artifactId != null && artifactId.length() > 0 ) ? artifactId : null;",
          "50:         this.version = ( version != null && version.length() > 0 ) ? version : null;",
          "51:     }",
          "53:     public String getGroupId()",
          "",
          "[Removed Lines]",
          "44:     RelocatedArtifact( Artifact artifact, String groupId, String artifactId, String version )",
          "",
          "[Added Lines]",
          "44:     private final String message;",
          "46:     RelocatedArtifact( Artifact artifact, String groupId, String artifactId, String version, String message )",
          "53:         this.message = ( message != null && message.length() > 0 ) ? message : null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:          {",
          "96:              return this;",
          "97:          }",
          "99:     }",
          "101:     @Override",
          "",
          "[Removed Lines]",
          "98:         return new RelocatedArtifact( artifact, groupId, artifactId, version );",
          "",
          "[Added Lines]",
          "101:         return new RelocatedArtifact( artifact, groupId, artifactId, version, message );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:         {",
          "107:              return this;",
          "108:         }",
          "110:     }",
          "112:     @Override",
          "",
          "[Removed Lines]",
          "109:         return new RelocatedArtifact( artifact.setFile( file ), groupId, artifactId, version );",
          "",
          "[Added Lines]",
          "112:         return new RelocatedArtifact( artifact.setFile( file ), groupId, artifactId, version, message );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117:         {",
          "118:              return this;",
          "119:         }",
          "121:     }",
          "123:     public String getClassifier()",
          "",
          "[Removed Lines]",
          "120:         return new RelocatedArtifact( artifact.setProperties( properties ), groupId, artifactId, version );",
          "",
          "[Added Lines]",
          "123:         return new RelocatedArtifact( artifact.setProperties( properties ), groupId, artifactId, version, message );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "145:         return artifact.getProperties();",
          "146:     }",
          "148: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:     public String getMessage()",
          "152:     {",
          "153:         return message;",
          "154:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef74a62451684c8c60cc9db4b6720c8edb89a165",
      "candidate_info": {
        "commit_hash": "ef74a62451684c8c60cc9db4b6720c8edb89a165",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/ef74a62451684c8c60cc9db4b6720c8edb89a165",
        "files": [
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java"
        ],
        "message": "[MNG-7374] Mutating RelocatedArtifact does not retain type\n\nThis closes #641",
        "before_after_code_files": [
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:         }",
          "87:     }",
          "89:     public String getClassifier()",
          "90:     {",
          "91:         return artifact.getClassifier();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     @Override",
          "91:     public Artifact setVersion( String version )",
          "92:     {",
          "93:          String current = getVersion();",
          "94:          if ( current.equals( version ) || ( version == null && current.length() <= 0 ) )",
          "95:          {",
          "96:              return this;",
          "97:          }",
          "98:         return new RelocatedArtifact( artifact, groupId, artifactId, version );",
          "99:     }",
          "101:     @Override",
          "102:     public Artifact setFile( File file )",
          "103:     {",
          "104:         File current = getFile();",
          "105:         if ( Objects.equals( current, file ) )",
          "106:         {",
          "107:              return this;",
          "108:         }",
          "109:         return new RelocatedArtifact( artifact.setFile( file ), groupId, artifactId, version );",
          "110:     }",
          "112:     @Override",
          "113:     public Artifact setProperties( Map<String, String> properties )",
          "114:     {",
          "115:         Map<String, String> current = getProperties();",
          "116:         if ( current.equals( properties ) || ( properties == null && current.isEmpty() ) )",
          "117:         {",
          "118:              return this;",
          "119:         }",
          "120:         return new RelocatedArtifact( artifact.setProperties( properties ), groupId, artifactId, version );",
          "121:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d295dc362fe7d7b189b4976a5742a17362eb51a1",
      "candidate_info": {
        "commit_hash": "d295dc362fe7d7b189b4976a5742a17362eb51a1",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/d295dc362fe7d7b189b4976a5742a17362eb51a1",
        "files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java",
          "maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java",
          "maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java",
          "maven-core/src/main/java/org/apache/maven/RepositoryUtils.java",
          "maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java",
          "maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java",
          "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
        ],
        "message": "[MNG-7128] keep blocked attribute from mirrors in artifact repositories",
        "before_after_code_files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java||maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java",
          "maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java||maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java",
          "maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java||maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java",
          "maven-core/src/main/java/org/apache/maven/RepositoryUtils.java||maven-core/src/main/java/org/apache/maven/RepositoryUtils.java",
          "maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java||maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java",
          "maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java||maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java",
          "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java||maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java": [
          "File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java -> maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepository.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     @Deprecated",
          "74:     void setBlacklisted( boolean blackListed );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     boolean isBlocked();",
          "80:     void setBlocked( boolean blocked );",
          "",
          "---------------"
        ],
        "maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java||maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java": [
          "File: maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java -> maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     private List<ArtifactRepository> mirroredRepositories = Collections.emptyList();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:     private boolean blocked;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:         }",
          "265:     }",
          "267: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:     public boolean isBlocked()",
          "270:     {",
          "271:         return blocked;",
          "272:     }",
          "274:     public void setBlocked( boolean blocked )",
          "275:     {",
          "276:         this.blocked = blocked;",
          "277:     }",
          "",
          "---------------"
        ],
        "maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java||maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java": [
          "File: maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java -> maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "447:             effectiveRepository.setMirroredRepositories( mirroredRepos );",
          "449:             effectiveRepositories.add( effectiveRepository );",
          "450:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "449:             effectiveRepository.setBlocked( aliasedRepo.isBlocked() );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:                     mirror.setId( repo.getId() );",
          "503:                     mirror.setUrl( repo.getUrl() );",
          "504:                     mirror.setLayout( repo.getContentType() );",
          "505:                     return mirror;",
          "506:                 }",
          "507:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:                     mirror.setBlocked( repo.isBlocked() );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "538:             {",
          "539:                 repository.setLayout( getLayout( mirror.getLayout() ) );",
          "540:             }",
          "541:         }",
          "542:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545:             repository.setBlocked( mirror.isBlocked() );",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/RepositoryUtils.java||maven-core/src/main/java/org/apache/maven/RepositoryUtils.java": [
          "File: maven-core/src/main/java/org/apache/maven/RepositoryUtils.java -> maven-core/src/main/java/org/apache/maven/RepositoryUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:             builder.setAuthentication( toAuthentication( repo.getAuthentication() ) );",
          "211:             builder.setProxy( toProxy( repo.getProxy() ) );",
          "212:             builder.setMirroredRepositories( toRepos( repo.getMirroredRepositories() ) );",
          "213:             result = builder.build();",
          "214:         }",
          "215:         return result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:             builder.setBlocked( repo.isBlocked() );",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java||maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java": [
          "File: maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java -> maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:         {",
          "428:         }",
          "430:     }",
          "432: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:         public boolean isBlocked()",
          "431:         {",
          "432:             return false;",
          "433:         }",
          "435:         public void setBlocked( boolean blocked )",
          "436:         {",
          "437:         }",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java||maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java": [
          "File: maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java -> maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     private List<ArtifactRepository> mirroredRepositories = Collections.emptyList();",
          "60:     public MavenArtifactRepository()",
          "61:     {",
          "62:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     private boolean blocked;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:             sb.append( \", update => \" ).append( releases.getUpdatePolicy() ).append( \"]\\n\" );",
          "161:         }",
          "163:         return sb.toString();",
          "164:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:         sb.append( \"   blocked: \" ).append( isBlocked() ).append( '\\n' );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "414:         }",
          "415:     }",
          "417: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "421:     public boolean isBlocked()",
          "422:     {",
          "423:         return blocked;",
          "424:     }",
          "426:     public void setBlocked( boolean blocked )",
          "427:     {",
          "428:         this.blocked = blocked;",
          "429:     }",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java": [
          "File: maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java -> maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:                     mirror.setId( repo.getId() );",
          "191:                     mirror.setUrl( repo.getUrl() );",
          "192:                     mirror.setLayout( repo.getContentType() );",
          "193:                     return mirror;",
          "194:                 }",
          "195:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:                     mirror.setBlocked( repo.isBlocked() );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:             {",
          "227:                 repository.setLayout( getLayout( mirror.getLayout() ) );",
          "228:             }",
          "229:         }",
          "230:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             repository.setBlocked( mirror.isBlocked() );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "672:             effectiveRepository.setMirroredRepositories( mirroredRepos );",
          "674:             effectiveRepositories.add( effectiveRepository );",
          "675:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677:             effectiveRepository.setBlocked( aliasedRepo.isBlocked() );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67ff80544866aa9256624d34a6e4178c3b913996",
      "candidate_info": {
        "commit_hash": "67ff80544866aa9256624d34a6e4178c3b913996",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/67ff80544866aa9256624d34a6e4178c3b913996",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java"
        ],
        "message": "[MNG-7381] Shorten parallel builder thread name to artifactId, conditionally with groupId\n\nThis closes #663",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "24: import java.util.concurrent.Callable;",
          "25: import java.util.concurrent.CompletionService;",
          "26: import java.util.concurrent.ExecutionException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.HashSet;",
          "25: import java.util.Set;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:                                                        ThreadOutputMuxer muxer )",
          "128:     {",
          "131:         for ( MavenProject mavenProject : analyzer.getRootSchedulableBuilds() )",
          "132:         {",
          "133:             ProjectSegment projectSegment = projectBuildList.get( mavenProject );",
          "134:             logger.debug( \"Scheduling: \" + projectSegment.getProject() );",
          "135:             Callable<ProjectSegment> cb =",
          "137:             service.submit( cb );",
          "138:         }",
          "",
          "[Removed Lines]",
          "136:                 createBuildCallable( rootSession, projectSegment, reactorContext, taskSegment, muxer );",
          "",
          "[Added Lines]",
          "133:         Set<String> duplicateArtifactIds = gatherDuplicateArtifactIds( projectBuildList.keySet() );",
          "141:                 createBuildCallable( rootSession, projectSegment, reactorContext, taskSegment, muxer,",
          "142:                                      duplicateArtifactIds );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:                         ProjectSegment scheduledDependent = projectBuildList.get( mavenProject );",
          "159:                         logger.debug( \"Scheduling: \" + scheduledDependent );",
          "160:                         Callable<ProjectSegment> cb =",
          "162:                         service.submit( cb );",
          "163:                     }",
          "164:                 }",
          "",
          "[Removed Lines]",
          "161:                             createBuildCallable( rootSession, scheduledDependent, reactorContext, taskSegment, muxer );",
          "",
          "[Added Lines]",
          "167:                             createBuildCallable( rootSession, scheduledDependent, reactorContext, taskSegment, muxer,",
          "168:                                                  duplicateArtifactIds );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:     private Callable<ProjectSegment> createBuildCallable( final MavenSession rootSession,",
          "181:                                                           final ProjectSegment projectBuild,",
          "182:                                                           final ReactorContext reactorContext,",
          "184:     {",
          "185:         return new Callable<ProjectSegment>()",
          "186:         {",
          "",
          "[Removed Lines]",
          "183:                                                           final TaskSegment taskSegment, final ThreadOutputMuxer muxer )",
          "",
          "[Added Lines]",
          "190:                                                           final TaskSegment taskSegment,",
          "191:                                                           final ThreadOutputMuxer muxer,",
          "192:                                                           final Set<String> duplicateArtifactIds )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "188:             {",
          "189:                 final Thread currentThread = Thread.currentThread();",
          "190:                 final String originalThreadName = currentThread.getName();",
          "193:                 try",
          "194:                 {",
          "196:                     lifecycleModuleBuilder.buildProject( projectBuild.getSession(), rootSession, reactorContext,",
          "200:                     return projectBuild;",
          "",
          "[Removed Lines]",
          "191:                 currentThread.setName( \"mvn-builder-\" + projectBuild.getProject().getId() );",
          "197:                                                          projectBuild.getProject(), taskSegment );",
          "",
          "[Added Lines]",
          "200:                 final MavenProject project = projectBuild.getProject();",
          "202:                 final String threadNameSuffix = duplicateArtifactIds.contains( project.getArtifactId() )",
          "203:                         ? project.getGroupId() + \":\" + project.getArtifactId()",
          "204:                         : project.getArtifactId();",
          "205:                 currentThread.setName( \"mvn-builder-\" + threadNameSuffix );",
          "211:                                                          project, taskSegment );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "206:             }",
          "207:         };",
          "208:     }",
          "209: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:     private Set<String> gatherDuplicateArtifactIds( Set<MavenProject> projects )",
          "225:     {",
          "226:         Set<String> artifactIds = new HashSet<>( projects.size() );",
          "227:         Set<String> duplicateArtifactIds = new HashSet<>();",
          "228:         for ( MavenProject project : projects )",
          "229:         {",
          "230:             if ( !artifactIds.add( project.getArtifactId() ) )",
          "231:             {",
          "232:                 duplicateArtifactIds.add( project.getArtifactId() );",
          "233:             }",
          "234:         }",
          "235:         return duplicateArtifactIds;",
          "236:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40f1082cfaf14bd9f0276f21b9211c1ff8f7cc92",
      "candidate_info": {
        "commit_hash": "40f1082cfaf14bd9f0276f21b9211c1ff8f7cc92",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/40f1082cfaf14bd9f0276f21b9211c1ff8f7cc92",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-6874] - Upgrade Maven Parent to 34",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "39254860d60f0165cd691e6ce269a6377e7b7f3c",
      "candidate_info": {
        "commit_hash": "39254860d60f0165cd691e6ce269a6377e7b7f3c",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/39254860d60f0165cd691e6ce269a6377e7b7f3c",
        "files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java"
        ],
        "message": "[MNG-7032] Evaluate --help and --version after configuring the logging/color",
        "before_after_code_files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java||maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java -> maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:     private Map<String, ConfigurationProcessor> configurationProcessors;",
          "169:     public MavenCli()",
          "170:     {",
          "171:         this( null );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:     private CLIManager cliManager;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:             cli( cliRequest );",
          "279:             properties( cliRequest );",
          "280:             logging( cliRequest );",
          "281:             version( cliRequest );",
          "282:             localContainer = container( cliRequest );",
          "283:             commands( cliRequest );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:             informativeCommands( cliRequest );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:         slf4jLogger = new Slf4jStdoutLogger();",
          "372:         List<String> args = new ArrayList<>();",
          "373:         CommandLine mavenConfig = null;",
          "",
          "[Removed Lines]",
          "370:         CLIManager cliManager = new CLIManager();",
          "",
          "[Added Lines]",
          "373:         cliManager = new CLIManager();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417:             cliManager.displayHelp( System.out );",
          "418:             throw e;",
          "419:         }",
          "421:         if ( cliRequest.commandLine.hasOption( CLIManager.HELP ) )",
          "422:         {",
          "423:             cliManager.displayHelp( System.out );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423:     }",
          "425:     private void informativeCommands( CliRequest cliRequest ) throws ExitException",
          "426:     {",
          "",
          "---------------"
        ],
        "maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java||maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java": [
          "File: maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java -> maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import static org.mockito.Mockito.mock;",
          "30: import static org.mockito.Mockito.times;",
          "32: import java.io.File;",
          "34: import org.apache.commons.cli.ParseException;",
          "35: import org.apache.maven.Maven;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import java.io.ByteArrayOutputStream;",
          "34: import java.io.PrintStream;",
          "35: import java.nio.charset.StandardCharsets;",
          "36: import java.util.Collections;",
          "37: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:         orderdEventSpyDispatcherMock.verify(eventSpyDispatcherMock, times(1)).onEvent(any(ToolchainsBuildingResult.class));",
          "332:     }",
          "334: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343:     @Test",
          "344:     public void testVersionStringWithoutAnsi() throws Exception",
          "345:     {",
          "348:         CliRequest cliRequest = new CliRequest( new String[] {",
          "349:                 \"--version\",",
          "350:                 \"--batch-mode\"",
          "351:         }, null );",
          "352:         ByteArrayOutputStream systemOut = new ByteArrayOutputStream();",
          "353:         PrintStream oldOut = System.out;",
          "354:         System.setOut( new PrintStream( systemOut ) );",
          "357:         try {",
          "358:             cli.cli( cliRequest );",
          "359:         } catch ( MavenCli.ExitException exitException ) {",
          "361:         } finally {",
          "363:             System.setOut( oldOut );",
          "364:         }",
          "365:         String versionOut = new String( systemOut.toByteArray(), StandardCharsets.UTF_8 );",
          "368:         assertEquals( MessageUtils.stripAnsiCodes( versionOut ), versionOut );",
          "369:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f32c3dba9495e3b7d4a73de6d303ae2eedb769f5",
      "candidate_info": {
        "commit_hash": "f32c3dba9495e3b7d4a73de6d303ae2eedb769f5",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/f32c3dba9495e3b7d4a73de6d303ae2eedb769f5",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java"
        ],
        "message": "[MNG-6471] Parallel builder should use the module name as thread name\n\nThis closes #177",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:         {",
          "187:             public ProjectSegment call()",
          "188:             {",
          "195:             }",
          "196:         };",
          "197:     }",
          "",
          "[Removed Lines]",
          "190:                 lifecycleModuleBuilder.buildProject( projectBuild.getSession(), rootSession, reactorContext,",
          "191:                                                      projectBuild.getProject(), taskSegment );",
          "194:                 return projectBuild;",
          "",
          "[Added Lines]",
          "189:                 final Thread currentThread = Thread.currentThread();",
          "190:                 final String originalThreadName = currentThread.getName();",
          "191:                 currentThread.setName( \"mvn-builder-\" + projectBuild.getProject().getId() );",
          "193:                 try",
          "194:                 {",
          "196:                     lifecycleModuleBuilder.buildProject( projectBuild.getSession(), rootSession, reactorContext,",
          "197:                                                          projectBuild.getProject(), taskSegment );",
          "200:                     return projectBuild;",
          "201:                 }",
          "202:                 finally",
          "203:                 {",
          "204:                      currentThread.setName( originalThreadName );",
          "205:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5bc395fd08719f221e10998db13475110d510651",
      "candidate_info": {
        "commit_hash": "5bc395fd08719f221e10998db13475110d510651",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/5bc395fd08719f221e10998db13475110d510651",
        "files": [
          ".github/workflows/maven.yml"
        ],
        "message": "Add github checks to maven-3.8.x branch",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "f0caf9c9b31e31abb91ca986fe8168867cd0ded2",
      "candidate_info": {
        "commit_hash": "f0caf9c9b31e31abb91ca986fe8168867cd0ded2",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/f0caf9c9b31e31abb91ca986fe8168867cd0ded2",
        "files": [
          "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
        ],
        "message": "[MNG-6960] Use RuntimeInformation instead of reading properties",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [
            "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
          ],
          "candidate": [
            "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java": [
          "File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java -> maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.maven.eventspy.internal.EventSpyDispatcher;",
          "26: import org.apache.maven.execution.MavenExecutionRequest;",
          "27: import org.apache.maven.repository.internal.MavenRepositorySystemUtils;",
          "28: import org.apache.maven.settings.Mirror;",
          "29: import org.apache.maven.settings.Proxy;",
          "30: import org.apache.maven.settings.Server;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.maven.rtinfo.RuntimeInformation;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     @Inject",
          "94:     MavenRepositorySystem mavenRepositorySystem;",
          "96:     public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )",
          "97:     {",
          "98:         DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     @Inject",
          "98:     private RuntimeInformation runtimeInformation;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:     private String getUserAgent()",
          "246:     {",
          "248:             + System.getProperty( \"os.name\" ) + \" \" + System.getProperty( \"os.version\" ) + \")\";",
          "249:     }",
          "271: }",
          "",
          "[Removed Lines]",
          "247:         return \"Apache-Maven/\" + getMavenVersion() + \" (Java \" + System.getProperty( \"java.version\" ) + \"; \"",
          "251:     private String getMavenVersion()",
          "252:     {",
          "253:         Properties props = new Properties();",
          "255:         try ( InputStream is = getClass().getResourceAsStream(",
          "256:             \"/META-INF/maven/org.apache.maven/maven-core/pom.properties\" ) )",
          "257:         {",
          "258:             if ( is != null )",
          "259:             {",
          "260:                 props.load( is );",
          "261:             }",
          "262:         }",
          "263:         catch ( IOException e )",
          "264:         {",
          "265:             logger.debug( \"Failed to read Maven version\", e );",
          "266:         }",
          "268:         return props.getProperty( \"version\", \"unknown-version\" );",
          "269:     }",
          "",
          "[Added Lines]",
          "251:         String version = runtimeInformation.getMavenVersion();",
          "252:         version = version.isEmpty() ? version : \"/\" + version;",
          "253:         return \"Apache-Maven\" + version + \" (Java \" + System.getProperty( \"java.version\" ) + \"; \"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5ee58338127ed9f8e775d9ea5c547469b9a5484",
      "candidate_info": {
        "commit_hash": "b5ee58338127ed9f8e775d9ea5c547469b9a5484",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/b5ee58338127ed9f8e775d9ea5c547469b9a5484",
        "files": [
          "maven-core/pom.xml"
        ],
        "message": "[MNG-6859] Build not reproducible when built from source release\n\nThis closes #322",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "42c99b45e45224810ee2f914b238123cbf599a96",
      "candidate_info": {
        "commit_hash": "42c99b45e45224810ee2f914b238123cbf599a96",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/42c99b45e45224810ee2f914b238123cbf599a96",
        "files": [
          "apache-maven/src/bin/mvn.cmd"
        ],
        "message": "[MNG-6850] Prevent printing the EXEC_DIR when it's just a disk letter\n\nThis fixes following bug and also consistent with another 'cd /d \"%EXEC_DIR%\"' a few lines above.\nWhen you're on the root of some disk running mvn.cmd prints an extra line with current dir before the correct output\n\nCloses #304",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: :baseDirNotFound",
          "157: if \"_%EXEC_DIR:~-1%\"==\"_\\\" set \"EXEC_DIR=%EXEC_DIR:~0,-1%\"",
          "158: set \"MAVEN_PROJECTBASEDIR=%EXEC_DIR%\"",
          "161: :endDetectBaseDir",
          "",
          "[Removed Lines]",
          "159: cd \"%EXEC_DIR%\"",
          "",
          "[Added Lines]",
          "159: cd /d \"%EXEC_DIR%\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbec4e7b3dbd68905d29b61e7c72019850b92da3",
      "candidate_info": {
        "commit_hash": "fbec4e7b3dbd68905d29b61e7c72019850b92da3",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/fbec4e7b3dbd68905d29b61e7c72019850b92da3",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-7152] Upgrade Maven Resolver to 1.6.3",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "8b693cc992ff4a5947babecd222fbebf7516e677",
      "candidate_info": {
        "commit_hash": "8b693cc992ff4a5947babecd222fbebf7516e677",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8b693cc992ff4a5947babecd222fbebf7516e677",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ],
        "message": "Document hacks as such",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java||maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java||maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java -> maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ]
      }
    },
    {
      "candidate_hash": "863f9193e615f474cce402535948002138af4dae",
      "candidate_info": {
        "commit_hash": "863f9193e615f474cce402535948002138af4dae",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/863f9193e615f474cce402535948002138af4dae",
        "files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java"
        ],
        "message": "[MNG-6842] ProjectBuilderTest uses Guava, but Guava is not defined in dependencies\n\nThis closes #311",
        "before_after_code_files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import static org.junit.Assert.assertThat;",
          "28: import java.io.File;",
          "29: import java.util.ArrayList;",
          "30: import java.util.Collections;",
          "31: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import java.nio.file.Files;",
          "30: import java.nio.file.Path;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import org.apache.maven.model.building.ModelSource;",
          "41: import org.apache.maven.shared.utils.io.FileUtils;",
          "45: public class ProjectBuilderTest",
          "46:     extends AbstractCoreMavenComponentTestCase",
          "",
          "[Removed Lines]",
          "43: import com.google.common.io.Files;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:         String initialValue = System.setProperty( DefaultProjectBuilder.DISABLE_GLOBAL_MODEL_CACHE_SYSTEM_PROPERTY, Boolean.toString( true ) );",
          "148:         try",
          "149:         {",
          "150:             MavenSession mavenSession = createMavenSession( null );",
          "151:             ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();",
          "152:             configuration.setRepositorySession( mavenSession.getRepositorySession() );",
          "153:             org.apache.maven.project.ProjectBuilder projectBuilder = lookup( org.apache.maven.project.ProjectBuilder.class );",
          "156:             projectBuilder.build( child, configuration );",
          "159:             String parentContent = FileUtils.fileRead( parent );",
          "160:             parentContent = parentContent.replaceAll( \"<packaging>pom</packaging>\",",
          "161:               \"<packaging>pom</packaging><properties><addedProperty>addedValue</addedProperty></properties>\" );",
          "",
          "[Removed Lines]",
          "146:         File tempDir = Files.createTempDir();",
          "147:         FileUtils.copyDirectoryStructure (new File( \"src/test/resources/projects/grandchild-check\"), tempDir );",
          "154:             File child = new File( tempDir, \"child/pom.xml\" );",
          "158:             File parent = new File( tempDir, \"pom.xml\" );",
          "",
          "[Added Lines]",
          "148:         Path tempDir = Files.createTempDirectory( null );",
          "149:         FileUtils.copyDirectoryStructure ( new File( \"src/test/resources/projects/grandchild-check\" ), tempDir.toFile() );",
          "156:             File child = new File( tempDir.toFile(), \"child/pom.xml\" );",
          "160:             File parent = new File( tempDir.toFile(), \"pom.xml\" );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:             {",
          "175:                 System.setProperty( DefaultProjectBuilder.DISABLE_GLOBAL_MODEL_CACHE_SYSTEM_PROPERTY, initialValue );",
          "176:             }",
          "178:         }",
          "179:     }",
          "",
          "[Removed Lines]",
          "177:             FileUtils.deleteDirectory( tempDir );",
          "",
          "[Added Lines]",
          "179:             FileUtils.deleteDirectory( tempDir.toFile() );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "304:         return null;",
          "305:     }",
          "308:     {",
          "309:         for ( ProjectBuildingResult result : results )",
          "310:         {",
          "",
          "[Removed Lines]",
          "307:     private void assertResultShowNoError(List<ProjectBuildingResult> results)",
          "",
          "[Added Lines]",
          "309:     private void assertResultShowNoError( List<ProjectBuildingResult> results )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "321:         ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();",
          "322:         configuration.setRepositorySession( mavenSession.getRepositorySession() );",
          "323:         configuration.setResolveDependencies( true );",
          "327:         assertEquals( 1, project.getTestCompileSourceRoots().size() );",
          "328:         assertEquals( 1, project.getCompileSourceRoots().size() );",
          "",
          "[Removed Lines]",
          "324:         List<ProjectBuildingResult> result = projectBuilder.build( Collections.singletonList(file), true, configuration );",
          "325:         MavenProject project = result.get(0).getProject();",
          "",
          "[Added Lines]",
          "326:         List<ProjectBuildingResult> result = projectBuilder.build( Collections.singletonList( file ), true, configuration );",
          "327:         MavenProject project = result.get( 0 ).getProject();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98a9d089bda8870fd658208d98bdc73a5f039b0f",
      "candidate_info": {
        "commit_hash": "98a9d089bda8870fd658208d98bdc73a5f039b0f",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/98a9d089bda8870fd658208d98bdc73a5f039b0f",
        "files": [
          "maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java"
        ],
        "message": "[MNG-7236] The DefaultPluginVersionResolver should cache results for the session",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java||maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java||maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java -> maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.util.LinkedHashMap;",
          "26: import java.util.List;",
          "27: import java.util.Map;",
          "28: import java.util.TreeSet;",
          "30: import org.apache.maven.artifact.repository.metadata.Metadata;",
          "31: import org.apache.maven.artifact.repository.metadata.Versioning;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import java.util.Objects;",
          "30: import java.util.concurrent.ConcurrentHashMap;",
          "31: import java.util.concurrent.ConcurrentMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: import org.eclipse.aether.RepositorySystem;",
          "50: import org.eclipse.aether.RepositorySystemSession;",
          "51: import org.eclipse.aether.RequestTrace;",
          "52: import org.eclipse.aether.metadata.DefaultMetadata;",
          "53: import org.eclipse.aether.repository.ArtifactRepository;",
          "54: import org.eclipse.aether.repository.RemoteRepository;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: import org.eclipse.aether.SessionData;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:     private static final String REPOSITORY_CONTEXT = \"plugin\";",
          "75:     @Requirement",
          "76:     private Logger logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     private static final Object CACHE_KEY = new Object();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:         if ( result == null )",
          "93:         {",
          "97:             {",
          "100:             }",
          "101:         }",
          "102:         else if ( logger.isDebugEnabled() )",
          "",
          "[Removed Lines]",
          "94:             result = resolveFromRepository( request );",
          "96:             if ( logger.isDebugEnabled() )",
          "98:                 logger.debug( \"Resolved plugin version for \" + request.getGroupId() + \":\" + request.getArtifactId()",
          "99:                     + \" to \" + result.getVersion() + \" from repository \" + result.getRepository() );",
          "",
          "[Added Lines]",
          "100:             ConcurrentMap<Key, PluginVersionResult> cache = getCache( request.getRepositorySession().getData() );",
          "101:             Key key = getKey( request );",
          "102:             result = cache.get( key );",
          "104:             if ( result == null )",
          "106:                 result = resolveFromRepository( request );",
          "108:                 if ( logger.isDebugEnabled() )",
          "109:                 {",
          "110:                     logger.debug( \"Resolved plugin version for \" + request.getGroupId() + \":\" + request.getArtifactId()",
          "111:                         + \" to \" + result.getVersion() + \" from repository \" + result.getRepository() );",
          "112:                 }",
          "114:                 cache.putIfAbsent( key, result );",
          "115:             }",
          "116:             else if ( logger.isDebugEnabled() )",
          "117:             {",
          "118:                 logger.debug( \"Reusing cached resolved plugin version for \" + request.getGroupId() + \":\"",
          "119:                         + request.getArtifactId() + \" to \" + result.getVersion() + \" from POM \" + request.getPom() );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "384:         return null;",
          "385:     }",
          "387:     static class Versions",
          "388:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     @SuppressWarnings( \"unchecked\" )",
          "408:     private ConcurrentMap<Key, PluginVersionResult> getCache( SessionData data )",
          "409:     {",
          "410:         ConcurrentMap<Key, PluginVersionResult> cache =",
          "411:                 ( ConcurrentMap<Key, PluginVersionResult> ) data.get( CACHE_KEY );",
          "412:         while ( cache == null )",
          "413:         {",
          "414:             cache = new ConcurrentHashMap<>( 256 );",
          "415:             if ( data.set( CACHE_KEY, null, cache ) )",
          "416:             {",
          "417:                 break;",
          "418:             }",
          "419:             cache = ( ConcurrentMap<Key, PluginVersionResult> ) data.get( CACHE_KEY );",
          "420:         }",
          "421:         return cache;",
          "422:     }",
          "424:     private static Key getKey( PluginVersionRequest request )",
          "425:     {",
          "426:         return new Key( request.getGroupId(), request.getArtifactId(), request.getRepositories() );",
          "427:     }",
          "429:     static class Key",
          "430:     {",
          "431:         final String groupId;",
          "432:         final String artifactId;",
          "433:         final List<RemoteRepository> repositories;",
          "434:         final int hash;",
          "436:         Key( String groupId, String artifactId, List<RemoteRepository> repositories )",
          "437:         {",
          "438:             this.groupId = groupId;",
          "439:             this.artifactId = artifactId;",
          "440:             this.repositories = repositories;",
          "441:             this.hash = Objects.hash( groupId, artifactId, repositories );",
          "442:         }",
          "444:         @Override",
          "445:         public boolean equals( Object o )",
          "446:         {",
          "447:             if ( this == o )",
          "448:             {",
          "449:                 return true;",
          "450:             }",
          "451:             if ( o == null || getClass() != o.getClass() )",
          "452:             {",
          "453:                 return false;",
          "454:             }",
          "455:             Key key = ( Key ) o;",
          "456:             return groupId.equals( key.groupId )",
          "457:                     && artifactId.equals( key.artifactId )",
          "458:                     && repositories.equals( key.repositories );",
          "459:         }",
          "461:         @Override",
          "462:         public int hashCode()",
          "463:         {",
          "464:             return hash;",
          "465:         }",
          "466:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78ca83e2a4271421aa3fc4f8153f8f061b09d52f",
      "candidate_info": {
        "commit_hash": "78ca83e2a4271421aa3fc4f8153f8f061b09d52f",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/78ca83e2a4271421aa3fc4f8153f8f061b09d52f",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "Bump version to 3.9.0-SNAPSHOT",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "14ca7234380f81e54a5643082816048f3b6b67cf",
      "candidate_info": {
        "commit_hash": "14ca7234380f81e54a5643082816048f3b6b67cf",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/14ca7234380f81e54a5643082816048f3b6b67cf",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java",
          "maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java"
        ],
        "message": "[MNG-7350] Introduce a factory for ModelCache",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java",
          "maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java||maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java -> maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import org.apache.maven.model.building.ModelBuildingException;",
          "57: import org.apache.maven.model.building.ModelBuildingRequest;",
          "58: import org.apache.maven.model.building.ModelBuildingResult;",
          "59: import org.apache.maven.model.building.ModelProblem;",
          "60: import org.apache.maven.model.building.ModelProcessor;",
          "61: import org.apache.maven.model.building.ModelSource;",
          "62: import org.apache.maven.model.building.StringModelSource;",
          "63: import org.apache.maven.model.resolution.ModelResolver;",
          "64: import org.apache.maven.repository.internal.ArtifactDescriptorUtils;",
          "65: import org.codehaus.plexus.component.annotations.Component;",
          "66: import org.codehaus.plexus.component.annotations.Requirement;",
          "67: import org.codehaus.plexus.logging.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import org.apache.maven.model.building.ModelCache;",
          "66: import org.apache.maven.repository.internal.ModelCacheFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     @Requirement",
          "112:     private ProjectDependenciesResolver dependencyResolver;",
          "",
          "[Removed Lines]",
          "114:     private final ReactorModelCache modelCache = new ReactorModelCache();",
          "",
          "[Added Lines]",
          "116:     @Requirement",
          "117:     private ModelCacheFactory modelCacheFactory;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:         throws ProjectBuildingException",
          "123:     {",
          "124:         return build( pomFile, new FileModelSource( pomFile ),",
          "126:     }",
          "128:     private boolean useGlobalModelCache()",
          "",
          "[Removed Lines]",
          "125:                 new InternalConfig( request, null, useGlobalModelCache() ? getModelCache() : null ) );",
          "",
          "[Added Lines]",
          "128:                 new InternalConfig( request, null,",
          "129:                         useGlobalModelCache() ? createModelCache( request.getRepositorySession() ) : null ) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:         throws ProjectBuildingException",
          "136:     {",
          "137:         return build( null, modelSource,",
          "139:     }",
          "141:     private ProjectBuildingResult build( File pomFile, ModelSource modelSource, InternalConfig config )",
          "",
          "[Removed Lines]",
          "138:                  new InternalConfig( request, null, useGlobalModelCache() ? getModelCache() : null ) );",
          "",
          "[Added Lines]",
          "142:                  new InternalConfig( request, null,",
          "143:                          useGlobalModelCache() ? createModelCache( request.getRepositorySession() ) : null ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "306:         org.eclipse.aether.artifact.Artifact pomArtifact = RepositoryUtils.toArtifact( artifact );",
          "307:         pomArtifact = ArtifactDescriptorUtils.toPomArtifact( pomArtifact );",
          "311:         boolean localProject;",
          "",
          "[Removed Lines]",
          "309:         InternalConfig config = new InternalConfig( request, null, useGlobalModelCache() ? getModelCache() : null );",
          "",
          "[Added Lines]",
          "314:         InternalConfig config = new InternalConfig( request, null,",
          "315:                 useGlobalModelCache() ? createModelCache( request.getRepositorySession() ) : null );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "369:         ReactorModelPool modelPool = new ReactorModelPool();",
          "371:         InternalConfig config = new InternalConfig( request, modelPool,",
          "374:         Map<String, MavenProject> projectIndex = new HashMap<>( 256 );",
          "",
          "[Removed Lines]",
          "372:                 useGlobalModelCache() ? getModelCache() : new ReactorModelCache() );",
          "",
          "[Added Lines]",
          "378:                 useGlobalModelCache() ? createModelCache( request.getRepositorySession() ) : new ReactorModelCache() );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1059:         private final ReactorModelPool modelPool;",
          "1064:         {",
          "1065:             this.request = request;",
          "1066:             this.modelPool = modelPool;",
          "",
          "[Removed Lines]",
          "1061:         private final ReactorModelCache modelCache;",
          "1063:         InternalConfig( ProjectBuildingRequest request, ReactorModelPool modelPool, ReactorModelCache modelCache )",
          "",
          "[Added Lines]",
          "1067:         private final ModelCache modelCache;",
          "1069:         InternalConfig( ProjectBuildingRequest request, ReactorModelPool modelPool, ModelCache modelCache )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1074:     }",
          "1077:     {",
          "1079:     }",
          "1081: }",
          "",
          "[Removed Lines]",
          "1076:     private ReactorModelCache getModelCache()",
          "1078:         return this.modelCache;",
          "",
          "[Added Lines]",
          "1082:     private ModelCache createModelCache( RepositorySystemSession session )",
          "1084:         return modelCacheFactory.createCache( session );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java||maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java": [
          "File: maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java -> maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:             .setSystemProperties( executionProperties )",
          "147:             .setUserProperties( new Properties() );",
          "149:         List<MavenProject> projects = new ArrayList<>();",
          "151:         if ( pom != null )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:         initRepoSession( configuration );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:             projects.add( project );",
          "175:         }",
          "179:         MavenSession session =",
          "180:             new MavenSession( getContainer(), configuration.getRepositorySession(), request,",
          "181:                               new DefaultMavenExecutionResult() );",
          "",
          "[Removed Lines]",
          "177:         initRepoSession( configuration );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     private ModelBuilder modelBuilder;",
          "92:     public DefaultArtifactDescriptorReader()",
          "93:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:     private ModelCacheFactory modelCacheFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     @Inject",
          "98:     DefaultArtifactDescriptorReader( RemoteRepositoryManager remoteRepositoryManager, VersionResolver versionResolver,",
          "99:                                      VersionRangeResolver versionRangeResolver, ArtifactResolver artifactResolver,",
          "101:     {",
          "102:         setRemoteRepositoryManager( remoteRepositoryManager );",
          "103:         setVersionResolver( versionResolver );",
          "",
          "[Removed Lines]",
          "100:                                      ModelBuilder modelBuilder, RepositoryEventDispatcher repositoryEventDispatcher )",
          "",
          "[Added Lines]",
          "102:                                      ModelBuilder modelBuilder, RepositoryEventDispatcher repositoryEventDispatcher,",
          "103:                                      ModelCacheFactory modelCacheFactory )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:         setArtifactResolver( artifactResolver );",
          "106:         setModelBuilder( modelBuilder );",
          "107:         setRepositoryEventDispatcher( repositoryEventDispatcher );",
          "108:     }",
          "110:     public void initService( ServiceLocator locator )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:         setModelCacheFactory( modelCacheFactory );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:             setModelBuilder( new DefaultModelBuilderFactory().newInstance() );",
          "120:         }",
          "121:         setRepositoryEventDispatcher( locator.getService( RepositoryEventDispatcher.class ) );",
          "122:     }",
          "124:     public DefaultArtifactDescriptorReader setRemoteRepositoryManager( RemoteRepositoryManager remoteRepositoryManager )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:         setModelCacheFactory( locator.getService( ModelCacheFactory.class ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:         return this;",
          "163:     }",
          "165:     public ArtifactDescriptorResult readArtifactDescriptor( RepositorySystemSession session,",
          "166:                                                             ArtifactDescriptorRequest request )",
          "167:         throws ArtifactDescriptorException",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:     public DefaultArtifactDescriptorReader setModelCacheFactory( ModelCacheFactory modelCacheFactory )",
          "171:     {",
          "172:         this.modelCacheFactory = Objects.requireNonNull( modelCacheFactory,",
          "173:                 \"modelCacheFactory cannot be null\" );",
          "174:         return this;",
          "175:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "276:                 modelRequest.setTwoPhaseBuilding( false );",
          "277:                 modelRequest.setSystemProperties( toProperties( session.getSystemProperties() ) );",
          "278:                 modelRequest.setUserProperties( toProperties( session.getUserProperties() ) );",
          "280:                 modelRequest.setModelResolver( new DefaultModelResolver( session, trace.newChild( modelRequest ),",
          "281:                                                                          request.getRequestContext(), artifactResolver,",
          "282:                                                                          versionRangeResolver, remoteRepositoryManager,",
          "",
          "[Removed Lines]",
          "279:                 modelRequest.setModelCache( DefaultModelCache.newInstance( session ) );",
          "",
          "[Added Lines]",
          "291:                 modelRequest.setModelCache( modelCacheFactory.createCache( session ) );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.repository.internal;",
          "22: import javax.inject.Named;",
          "23: import javax.inject.Singleton;",
          "25: import org.apache.maven.model.building.ModelCache;",
          "26: import org.eclipse.aether.RepositorySystemSession;",
          "31: @Singleton",
          "32: @Named",
          "33: public class DefaultModelCacheFactory implements ModelCacheFactory",
          "34: {",
          "35:     @Override",
          "36:     public ModelCache createCache( RepositorySystemSession session )",
          "37:     {",
          "38:         return DefaultModelCache.newInstance( session );",
          "39:     }",
          "41: }",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         locator.addService( VersionRangeResolver.class, DefaultVersionRangeResolver.class );",
          "80:         locator.addService( MetadataGeneratorFactory.class, SnapshotMetadataGeneratorFactory.class );",
          "81:         locator.addService( MetadataGeneratorFactory.class, VersionsMetadataGeneratorFactory.class );",
          "82:         return locator;",
          "83:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:         locator.addService( ModelCacheFactory.class, DefaultModelCacheFactory.class );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:             .to( VersionsMetadataGeneratorFactory.class ).in( Singleton.class );",
          "58:         bind( ModelBuilder.class ).toInstance( new DefaultModelBuilderFactory().newInstance() );",
          "59:     }",
          "61:     @Provides",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:         bind( ModelCacheFactory.class ).to( DefaultModelCacheFactory.class ).in( Singleton.class );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.repository.internal;",
          "22: import org.apache.maven.model.building.ModelCache;",
          "23: import org.eclipse.aether.RepositorySystemSession;",
          "28: public interface ModelCacheFactory",
          "29: {",
          "31:     ModelCache createCache( RepositorySystemSession session );",
          "33: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a659ade9a0ec831137d1ba415a76cc467c6e0f01",
      "candidate_info": {
        "commit_hash": "a659ade9a0ec831137d1ba415a76cc467c6e0f01",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/a659ade9a0ec831137d1ba415a76cc467c6e0f01",
        "files": [
          "maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java",
          "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java",
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java"
        ],
        "message": "[MNG-6827] Replace deprecated StringUtils#defaultString() from Plexus Utils\n\nThis closes #302",
        "before_after_code_files": [
          "maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java||maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java",
          "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java",
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java||maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java||maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java": [
          "File: maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java -> maven-compat/src/test/java/org/apache/maven/artifact/testutils/TestFileManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import java.util.Iterator;",
          "45: import java.util.List;",
          "49: import org.codehaus.plexus.util.FileUtils;",
          "51: public class TestFileManager",
          "52: {",
          "",
          "[Removed Lines]",
          "47: import junit.framework.Assert;",
          "",
          "[Added Lines]",
          "48: import org.junit.Assert;",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java -> maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.LinkedHashMap;",
          "24: import java.util.List;",
          "25: import java.util.Map;",
          "27: import org.apache.maven.RepositoryUtils;",
          "28: import org.apache.maven.model.Dependency;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:                 {",
          "259:                     final String premanagedScope = DependencyManagerUtils.getPremanagedScope( node );",
          "260:                     buffer.append( \" (scope managed from \" );",
          "262:                     buffer.append( ')' );",
          "263:                 }",
          "",
          "[Removed Lines]",
          "261:                     buffer.append( StringUtils.defaultString( premanagedScope, \"default\" ) );",
          "",
          "[Added Lines]",
          "262:                     buffer.append( Objects.toString( premanagedScope, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "266:                 {",
          "267:                     final String premanagedVersion = DependencyManagerUtils.getPremanagedVersion( node );",
          "268:                     buffer.append( \" (version managed from \" );",
          "270:                     buffer.append( ')' );",
          "271:                 }",
          "",
          "[Removed Lines]",
          "269:                     buffer.append( StringUtils.defaultString( premanagedVersion, \"default\" ) );",
          "",
          "[Added Lines]",
          "270:                     buffer.append( Objects.toString( premanagedVersion, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:                 {",
          "275:                     final Boolean premanagedOptional = DependencyManagerUtils.getPremanagedOptional( node );",
          "276:                     buffer.append( \" (optionality managed from \" );",
          "278:                     buffer.append( ')' );",
          "279:                 }",
          "",
          "[Removed Lines]",
          "277:                     buffer.append( StringUtils.defaultString( premanagedOptional, \"default\" ) );",
          "",
          "[Added Lines]",
          "278:                     buffer.append( Objects.toString( premanagedOptional, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "285:                         DependencyManagerUtils.getPremanagedExclusions( node );",
          "287:                     buffer.append( \" (exclusions managed from \" );",
          "289:                     buffer.append( ')' );",
          "290:                 }",
          "",
          "[Removed Lines]",
          "288:                     buffer.append( StringUtils.defaultString( premanagedExclusions, \"default\" ) );",
          "",
          "[Added Lines]",
          "289:                     buffer.append( Objects.toString( premanagedExclusions, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "296:                         DependencyManagerUtils.getPremanagedProperties( node );",
          "298:                     buffer.append( \" (properties managed from \" );",
          "300:                     buffer.append( ')' );",
          "301:                 }",
          "302:             }",
          "",
          "[Removed Lines]",
          "299:                     buffer.append( StringUtils.defaultString( premanagedProperties, \"default\" ) );",
          "",
          "[Added Lines]",
          "300:                     buffer.append( Objects.toString( premanagedProperties, \"default\" ) );",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java -> maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.HashMap;",
          "24: import java.util.List;",
          "25: import java.util.Map;",
          "27: import org.apache.maven.RepositoryUtils;",
          "28: import org.apache.maven.artifact.Artifact;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:                 {",
          "270:                     final String premanagedScope = DependencyManagerUtils.getPremanagedScope( node );",
          "271:                     buffer.append( \" (scope managed from \" );",
          "273:                     buffer.append( ')' );",
          "274:                 }",
          "",
          "[Removed Lines]",
          "272:                     buffer.append( StringUtils.defaultString( premanagedScope, \"default\" ) );",
          "",
          "[Added Lines]",
          "273:                     buffer.append( Objects.toString( premanagedScope, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277:                 {",
          "278:                     final String premanagedVersion = DependencyManagerUtils.getPremanagedVersion( node );",
          "279:                     buffer.append( \" (version managed from \" );",
          "281:                     buffer.append( ')' );",
          "282:                 }",
          "",
          "[Removed Lines]",
          "280:                     buffer.append( StringUtils.defaultString( premanagedVersion, \"default\" ) );",
          "",
          "[Added Lines]",
          "281:                     buffer.append( Objects.toString( premanagedVersion, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "285:                 {",
          "286:                     final Boolean premanagedOptional = DependencyManagerUtils.getPremanagedOptional( node );",
          "287:                     buffer.append( \" (optionality managed from \" );",
          "289:                     buffer.append( ')' );",
          "290:                 }",
          "",
          "[Removed Lines]",
          "288:                     buffer.append( StringUtils.defaultString( premanagedOptional, \"default\" ) );",
          "",
          "[Added Lines]",
          "289:                     buffer.append( Objects.toString( premanagedOptional, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "296:                         DependencyManagerUtils.getPremanagedExclusions( node );",
          "298:                     buffer.append( \" (exclusions managed from \" );",
          "300:                     buffer.append( ')' );",
          "301:                 }",
          "",
          "[Removed Lines]",
          "299:                     buffer.append( StringUtils.defaultString( premanagedExclusions, \"default\" ) );",
          "",
          "[Added Lines]",
          "300:                     buffer.append( Objects.toString( premanagedExclusions, \"default\" ) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "307:                         DependencyManagerUtils.getPremanagedProperties( node );",
          "309:                     buffer.append( \" (properties managed from \" );",
          "311:                     buffer.append( ')' );",
          "312:                 }",
          "313:             }",
          "",
          "[Removed Lines]",
          "310:                     buffer.append( StringUtils.defaultString( premanagedProperties, \"default\" ) );",
          "",
          "[Added Lines]",
          "311:                     buffer.append( Objects.toString( premanagedProperties, \"default\" ) );",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java||maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java -> maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: import java.util.HashSet;",
          "54: import java.util.List;",
          "55: import java.util.Map;",
          "56: import java.util.Set;",
          "57: import java.util.regex.Matcher;",
          "58: import java.util.regex.Pattern;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:                 if ( equals( existing.getVersion(), dependency.getVersion() ) )",
          "528:                 {",
          "529:                     msg = \"duplicate declaration of version \"",
          "531:                 }",
          "532:                 else",
          "533:                 {",
          "536:                 }",
          "538:                 addViolation( problems, errOn31, Version.V20, prefix + prefix2 + \"(groupId:artifactId:type:classifier)\",",
          "",
          "[Removed Lines]",
          "530:                         + StringUtils.defaultString( dependency.getVersion(), \"(?)\" );",
          "534:                     msg = \"version \" + StringUtils.defaultString( existing.getVersion(), \"(?)\" ) + \" vs \"",
          "535:                         + StringUtils.defaultString( dependency.getVersion(), \"(?)\" );",
          "",
          "[Added Lines]",
          "531:                         + Objects.toString( dependency.getVersion(), \"(?)\" );",
          "535:                     msg = \"version \" + Objects.toString( existing.getVersion(), \"(?)\" ) + \" vs \"",
          "536:                         + Objects.toString( dependency.getVersion(), \"(?)\" );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "803c2155548f7d985e2f7afeb36f29761b5b1b49",
      "candidate_info": {
        "commit_hash": "803c2155548f7d985e2f7afeb36f29761b5b1b49",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/803c2155548f7d985e2f7afeb36f29761b5b1b49",
        "files": [
          ".github/workflows/maven.yml"
        ],
        "message": "Fix github checks",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "0c3fe074bbd3272a7b46c28683c6ed50d0daede7",
      "candidate_info": {
        "commit_hash": "0c3fe074bbd3272a7b46c28683c6ed50d0daede7",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/0c3fe074bbd3272a7b46c28683c6ed50d0daede7",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-6818] - Upgrade plexus-utils 3.3.0",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "0a6bbb8301717d386e6588a7ea32e3e2451c7060",
      "candidate_info": {
        "commit_hash": "0a6bbb8301717d386e6588a7ea32e3e2451c7060",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/0a6bbb8301717d386e6588a7ea32e3e2451c7060",
        "files": [
          "maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java"
        ],
        "message": "[MNG-7235] Speed improvements when calculating the sorted project graph\n\nThis closes #530",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java||maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java||maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java": [
          "File: maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java -> maven-core/src/main/java/org/apache/maven/graph/DefaultProjectDependencyGraph.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.ArrayList;",
          "23: import java.util.Collection;",
          "24: import java.util.Collections;",
          "25: import java.util.HashSet;",
          "26: import java.util.List;",
          "27: import java.util.Objects;",
          "28: import java.util.Set;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.Comparator;",
          "26: import java.util.HashMap;",
          "29: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     implements ProjectDependencyGraph",
          "43: {",
          "",
          "[Removed Lines]",
          "45:     private ProjectSorter sorter;",
          "47:     private List<MavenProject> allProjects;",
          "",
          "[Added Lines]",
          "48:     private final ProjectSorter sorter;",
          "50:     private final List<MavenProject> allProjects;",
          "52:     private final Map<MavenProject, Integer> order;",
          "54:     private final Map<String, MavenProject> projects;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         super();",
          "60:         this.allProjects = Collections.unmodifiableList( new ArrayList<>( projects ) );",
          "61:         this.sorter = new ProjectSorter( projects );",
          "62:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:         List<MavenProject> sorted = this.sorter.getSortedProjects();",
          "70:         this.order = new HashMap<>( sorted.size() );",
          "71:         this.projects = new HashMap<>( sorted.size() );",
          "72:         int index = 0;",
          "73:         for ( MavenProject project : sorted )",
          "74:         {",
          "75:             String id = ProjectSorter.getId( project );",
          "76:             this.projects.put( id, project );",
          "77:             this.order.put( project, index++ );",
          "78:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:         super();",
          "79:         this.allProjects = Collections.unmodifiableList( new ArrayList<>( allProjects ) );",
          "80:         this.sorter = new ProjectSorter( projects );",
          "81:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:         List<MavenProject> sorted = this.sorter.getSortedProjects();",
          "99:         this.order = new HashMap<>( sorted.size() );",
          "100:         this.projects = new HashMap<>( sorted.size() );",
          "101:         int index = 0;",
          "102:         for ( MavenProject project : sorted )",
          "103:         {",
          "104:             String id = ProjectSorter.getId( project );",
          "105:             this.projects.put( id, project );",
          "106:             this.order.put( project, index++ );",
          "107:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:     private List<MavenProject> getSortedProjects( Set<String> projectIds )",
          "141:     {",
          "142:         List<MavenProject> result = new ArrayList<>( projectIds.size() );",
          "145:         {",
          "150:         }",
          "152:         return result;",
          "153:     }",
          "",
          "[Removed Lines]",
          "144:         for ( MavenProject mavenProject : sorter.getSortedProjects() )",
          "146:             if ( projectIds.contains( ProjectSorter.getId( mavenProject ) ) )",
          "147:             {",
          "148:                 result.add( mavenProject );",
          "149:             }",
          "",
          "[Added Lines]",
          "170:         for ( String projectId : projectIds )",
          "172:             result.add( projects.get( projectId ) );",
          "175:         Collections.sort( result, new MavenProjectComparator() );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "158:         return sorter.getSortedProjects().toString();",
          "159:     }",
          "161: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:     private class MavenProjectComparator implements Comparator<MavenProject>",
          "187:     {",
          "188:         @Override",
          "189:         public int compare( MavenProject o1, MavenProject o2 )",
          "190:         {",
          "191:             return order.get( o1 ) - order.get( o2 );",
          "192:         }",
          "193:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66a43813770cd7dee9eb1ed0372e3f784ba0c541",
      "candidate_info": {
        "commit_hash": "66a43813770cd7dee9eb1ed0372e3f784ba0c541",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/66a43813770cd7dee9eb1ed0372e3f784ba0c541",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java"
        ],
        "message": "[MNG-5868] No duplicate artifacts in attached artifacts if attached artifacts already contains the artifact remove it and add the new one\n\nSigned-off-by: olivier lamy <olamy@apache.org>",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java||maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java -> maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: import org.codehaus.plexus.util.xml.Xpp3Dom;",
          "73: import org.eclipse.aether.graph.DependencyFilter;",
          "74: import org.eclipse.aether.repository.RemoteRepository;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: import org.slf4j.Logger;",
          "76: import org.slf4j.LoggerFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: public class MavenProject",
          "91:     implements Cloneable",
          "92: {",
          "93:     public static final String EMPTY_PROJECT_GROUP_ID = \"unknown\";",
          "95:     public static final String EMPTY_PROJECT_ARTIFACT_ID = \"empty-project\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     private static final Logger LOGGER = LoggerFactory.getLogger( MavenProject.class );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     private List<RemoteRepository> remotePluginRepositories;",
          "127:     private MavenProject executionProject;",
          "",
          "[Removed Lines]",
          "125:     private List<Artifact> attachedArtifacts;",
          "",
          "[Added Lines]",
          "130:     private List<Artifact> attachedArtifacts = new ArrayList<>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "926:     public void addAttachedArtifact( Artifact artifact )",
          "927:         throws DuplicateArtifactAttachmentException",
          "928:     {",
          "930:     }",
          "932:     public List<Artifact> getAttachedArtifacts()",
          "",
          "[Removed Lines]",
          "929:         getAttachedArtifacts().add( artifact );",
          "",
          "[Added Lines]",
          "936:         int index = attachedArtifacts.indexOf( artifact );",
          "937:         if ( index >= 0 )",
          "938:         {",
          "939:             LOGGER.warn( \"artifact {} already attached, replace previous instance\", artifact );",
          "940:             attachedArtifacts.set( index, artifact );",
          "941:         }",
          "942:         else",
          "943:         {",
          "944:             attachedArtifacts.add( artifact );",
          "945:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "935:         {",
          "936:             attachedArtifacts = new ArrayList<>();",
          "937:         }",
          "939:     }",
          "941:     public Xpp3Dom getGoalConfiguration( String pluginGroupId, String pluginArtifactId, String executionId,",
          "",
          "[Removed Lines]",
          "938:         return attachedArtifacts;",
          "",
          "[Added Lines]",
          "954:         return Collections.unmodifiableList( attachedArtifacts );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java||maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java -> maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.apache.maven;",
          "3: import org.apache.maven.execution.MavenExecutionRequest;",
          "4: import org.apache.maven.execution.MavenExecutionResult;",
          "6: import static java.util.Arrays.asList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import org.apache.maven.artifact.Artifact;",
          "4: import org.apache.maven.artifact.DefaultArtifact;",
          "7: import org.apache.maven.project.MavenProject;",
          "8: import org.apache.maven.project.MavenProjectHelper;",
          "10: import java.io.File;",
          "11: import java.nio.file.Files;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     public void testThatErrorDuringProjectDependencyGraphCreationAreStored()",
          "29:             throws Exception",
          "",
          "[Removed Lines]",
          "26: public class DefaultMavenTest extends AbstractCoreMavenComponentTestCase{",
          "",
          "[Added Lines]",
          "33: public class DefaultMavenTest",
          "34:     extends AbstractCoreMavenComponentTestCase",
          "35: {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:         return \"src/test/projects/default-maven\";",
          "43:     }",
          "45: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     public void testMavenProjectNoDuplicateArtifacts()",
          "56:         throws Exception",
          "57:     {",
          "58:         MavenProjectHelper mavenProjectHelper = lookup( MavenProjectHelper.class );",
          "59:         MavenProject mavenProject = new MavenProject();",
          "60:         mavenProject.setArtifact( new DefaultArtifact( \"g\", \"a\", \"1.0\", Artifact.SCOPE_TEST, \"jar\", \"\", null ) );",
          "61:         File artifactFile = Files.createTempFile( \"foo\", \"tmp\").toFile();",
          "62:         try",
          "63:         {",
          "64:             mavenProjectHelper.attachArtifact( mavenProject, \"sources\", artifactFile );",
          "65:             assertEquals( 1, mavenProject.getAttachedArtifacts().size() );",
          "66:             mavenProjectHelper.attachArtifact( mavenProject, \"sources\", artifactFile );",
          "67:             assertEquals( 1, mavenProject.getAttachedArtifacts().size() );",
          "68:         } finally",
          "69:         {",
          "70:             Files.deleteIfExists( artifactFile.toPath() );",
          "71:         }",
          "72:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d79485ff23c9017d47424ff24da1d6dd3c414a60",
      "candidate_info": {
        "commit_hash": "d79485ff23c9017d47424ff24da1d6dd3c414a60",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/d79485ff23c9017d47424ff24da1d6dd3c414a60",
        "files": [
          "maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java",
          "maven-core/src/test/resources/projects/parent-version-range-external-child-pom-parent-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-external-child-pom-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-external-child-project-parent-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-external-child-project-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-external-child-revision-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-external-child-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-project-parent-version-expression/child/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-project-parent-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-project-version-expression/child/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-project-version-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-revision-expression/child/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-revision-expression/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-version-expression/child/pom.xml",
          "maven-core/src/test/resources/projects/parent-version-range-local-child-version-expression/pom.xml",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ],
        "message": "[MNG-6727] Using version range in parent and CI Friendly Version fails",
        "before_after_code_files": [
          "maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/DefaultMavenProjectBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:     {",
          "303:         File f1 =",
          "304:             getTestFile(",
          "307:         try",
          "308:         {",
          "",
          "[Removed Lines]",
          "301:     public void testBuildParentVersionRangeLocallyWithChildVersionExpression() throws Exception",
          "305:                 \"src/test/resources/projects/parent-version-range-local-child-version-expression/child/pom.xml\" );",
          "",
          "[Added Lines]",
          "301:     public void testBuildParentVersionRangeLocallyWithChildProjectVersionExpression() throws Exception",
          "305:                 \"src/test/resources/projects/parent-version-range-local-child-project-version-expression/child/pom.xml\" );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "315:             assertThat( e.getMessage(), containsString( \"Version must be a constant\" ) );",
          "316:         }",
          "317:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:     public void testBuildParentVersionRangeLocallyWithChildProjectParentVersionExpression() throws Exception",
          "325:     {",
          "326:         File f1 =",
          "327:             getTestFile(",
          "328:                 \"src/test/resources/projects/parent-version-range-local-child-project-parent-version-expression/child/pom.xml\" );",
          "330:         try",
          "331:         {",
          "332:             getProject( f1 );",
          "333:             fail( \"Expected 'ProjectBuildingException' not thrown.\" );",
          "334:         }",
          "335:         catch ( final ProjectBuildingException e )",
          "336:         {",
          "337:             assertNotNull( e.getMessage() );",
          "338:             assertThat( e.getMessage(), containsString( \"Version must be a constant\" ) );",
          "339:         }",
          "340:     }",
          "347:     public void testBuildParentVersionRangeLocallyWithChildRevisionExpression() throws Exception",
          "348:     {",
          "349:         File f1 =",
          "350:             getTestFile(",
          "351:                 \"src/test/resources/projects/parent-version-range-local-child-revision-expression/child/pom.xml\" );",
          "353:         MavenProject mp =  this.getProjectFromRemoteRepository( f1 );",
          "355:         assertEquals(\"1.0-SNAPSHOT\", mp.getVersion());",
          "357:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "367:     {",
          "368:         File f1 =",
          "369:             getTestFile(",
          "372:         try",
          "373:         {",
          "",
          "[Removed Lines]",
          "366:     public void testBuildParentVersionRangeExternallyWithChildVersionExpression() throws Exception",
          "370:                 \"src/test/resources/projects/parent-version-range-external-child-version-expression/pom.xml\" );",
          "",
          "[Added Lines]",
          "406:     public void testBuildParentVersionRangeExternallyWithChildProjectVersionExpression() throws Exception",
          "410:                 \"src/test/resources/projects/parent-version-range-external-child-project-version-expression/pom.xml\" );",
          "412:         try",
          "413:         {",
          "414:             this.getProjectFromRemoteRepository( f1 );",
          "415:             fail( \"Expected 'ProjectBuildingException' not thrown.\" );",
          "416:         }",
          "417:         catch ( final ProjectBuildingException e )",
          "418:         {",
          "419:             assertNotNull( e.getMessage() );",
          "420:             assertThat( e.getMessage(), containsString( \"Version must be a constant\" ) );",
          "421:         }",
          "422:     }",
          "429:     public void testBuildParentVersionRangeExternallyWithChildPomVersionExpression() throws Exception",
          "430:     {",
          "431:         File f1 =",
          "432:                 getTestFile(",
          "433:                         \"src/test/resources/projects/parent-version-range-external-child-pom-version-expression/pom.xml\" );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "381:         }",
          "382:     }",
          "384: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452:     public void testBuildParentVersionRangeExternallyWithChildPomParentVersionExpression() throws Exception",
          "453:     {",
          "454:         File f1 =",
          "455:                 getTestFile(",
          "456:                         \"src/test/resources/projects/parent-version-range-external-child-pom-parent-version-expression/pom.xml\" );",
          "458:         try",
          "459:         {",
          "460:             this.getProjectFromRemoteRepository( f1 );",
          "461:             fail( \"Expected 'ProjectBuildingException' not thrown.\" );",
          "462:         }",
          "463:         catch ( final ProjectBuildingException e )",
          "464:         {",
          "465:             assertNotNull( e.getMessage() );",
          "466:             assertThat( e.getMessage(), containsString( \"Version must be a constant\" ) );",
          "467:         }",
          "468:     }",
          "475:     public void testBuildParentVersionRangeExternallyWithChildProjectParentVersionExpression() throws Exception",
          "476:     {",
          "477:         File f1 =",
          "478:             getTestFile(",
          "479:                 \"src/test/resources/projects/parent-version-range-external-child-project-parent-version-expression/pom.xml\" );",
          "481:         try",
          "482:         {",
          "483:             this.getProjectFromRemoteRepository( f1 );",
          "484:             fail( \"Expected 'ProjectBuildingException' not thrown.\" );",
          "485:         }",
          "486:         catch ( final ProjectBuildingException e )",
          "487:         {",
          "488:             assertNotNull( e.getMessage() );",
          "489:             assertThat( e.getMessage(), containsString( \"Version must be a constant\" ) );",
          "490:         }",
          "491:     }",
          "498:     public void testBuildParentVersionRangeExternallyWithChildRevisionExpression() throws Exception",
          "499:     {",
          "500:         File f1 =",
          "501:             getTestFile(",
          "502:                 \"src/test/resources/projects/parent-version-range-external-child-revision-expression/pom.xml\" );",
          "505:         MavenProject mp =  this.getProjectFromRemoteRepository( f1 );",
          "507:         assertEquals(\"1.0-SNAPSHOT\", mp.getVersion());",
          "510:     }",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1057:                 }",
          "1061:                 {",
          "1063:                     problems.add( new ModelProblemCollectorRequest( Severity.FATAL, Version.V31 )",
          "",
          "[Removed Lines]",
          "1060:                 if ( childModel.getVersion() == null )",
          "",
          "[Added Lines]",
          "1060:                 String rawChildModelVersion = childModel.getVersion();",
          "1062:                 if ( rawChildModelVersion == null )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1066:                 }",
          "1067:                 else",
          "1068:                 {",
          "1070:                     {",
          "1072:                         problems.add( new ModelProblemCollectorRequest( Severity.FATAL, Version.V31 )",
          "",
          "[Removed Lines]",
          "1069:                     if ( childModel.getVersion().contains( \"${\" ) )",
          "",
          "[Added Lines]",
          "1071:                     if ( rawChildVersionReferencesParent( rawChildModelVersion ) )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1099:         return parentData;",
          "1100:     }",
          "1102:     private ModelSource getParentPomFile( Model childModel, ModelSource source )",
          "1103:     {",
          "1104:         if ( !( source instanceof ModelSource2 ) )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:     private boolean rawChildVersionReferencesParent( String rawChildModelVersion )",
          "1105:     {",
          "1106:         return rawChildModelVersion.equals( \"${pom.version}\" )",
          "1107:                 || rawChildModelVersion.equals( \"${project.version}\" )",
          "1108:                 || rawChildModelVersion.equals( \"${pom.parent.version}\" )",
          "1109:                 || rawChildModelVersion.equals( \"${project.parent.version}\" );",
          "1110:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1188:         if ( !parent.getVersion().equals( version ) )",
          "1189:         {",
          "1191:             {",
          "1193:                 problems.add( new ModelProblemCollectorRequest( Severity.FATAL, Version.V31 )",
          "",
          "[Removed Lines]",
          "1190:             if ( childModel.getVersion() == null )",
          "",
          "[Added Lines]",
          "1200:             String rawChildModelVersion = childModel.getVersion();",
          "1202:             if ( rawChildModelVersion == null )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1196:             }",
          "1197:             else",
          "1198:             {",
          "1200:                 {",
          "1202:                     problems.add( new ModelProblemCollectorRequest( Severity.FATAL, Version.V31 )",
          "",
          "[Removed Lines]",
          "1199:                 if ( childModel.getVersion().contains( \"${\" ) )",
          "",
          "[Added Lines]",
          "1211:                 if ( rawChildVersionReferencesParent( rawChildModelVersion )  )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5acd3ec6095ea2ff50191576c33685c1d038c1f",
      "candidate_info": {
        "commit_hash": "a5acd3ec6095ea2ff50191576c33685c1d038c1f",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/a5acd3ec6095ea2ff50191576c33685c1d038c1f",
        "files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java"
        ],
        "message": "[MNG-7395] Support interpolation in extensions.xml\n\nThis adds support for property interpolation in extensions.xml to allow\nadvanced use cases where one wants to contribute certain things via the\ncommandline.\n\nThis closes #673",
        "before_after_code_files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java||maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java||maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java -> maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import org.codehaus.plexus.PlexusContainer;",
          "41: import org.codehaus.plexus.classworlds.ClassWorld;",
          "42: import org.codehaus.plexus.classworlds.realm.ClassRealm;",
          "43: import org.codehaus.plexus.logging.Logger;",
          "44: import org.eclipse.aether.RepositorySystemSession;",
          "45: import org.eclipse.aether.artifact.Artifact;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.codehaus.plexus.interpolation.InterpolationException;",
          "44: import org.codehaus.plexus.interpolation.Interpolator;",
          "45: import org.codehaus.plexus.interpolation.MapBasedValueSource;",
          "46: import org.codehaus.plexus.interpolation.StringSearchInterpolator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     {",
          "84:         RepositorySystemSession repoSession = repositorySystemSessionFactory.newRepositorySession( request );",
          "85:         List<RemoteRepository> repositories = RepositoryUtils.toRepos( request.getPluginArtifactRepositories() );",
          "88:     }",
          "90:     private List<CoreExtensionEntry> resolveCoreExtensions( RepositorySystemSession repoSession,",
          "91:                                                             List<RemoteRepository> repositories,",
          "92:                                                             Set<String> providedArtifacts,",
          "94:         throws Exception",
          "95:     {",
          "96:         List<CoreExtensionEntry> extensions = new ArrayList<>();",
          "",
          "[Removed Lines]",
          "87:         return resolveCoreExtensions( repoSession, repositories, providedArtifacts, extensions );",
          "93:                                                             List<CoreExtension> configuration )",
          "",
          "[Added Lines]",
          "90:         Interpolator interpolator = createInterpolator( request );",
          "92:         return resolveCoreExtensions( repoSession, repositories, providedArtifacts, extensions, interpolator );",
          "98:                                                             List<CoreExtension> configuration,",
          "99:                                                             Interpolator interpolator )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:         for ( CoreExtension extension : configuration )",
          "101:         {",
          "103:             if ( !artifacts.isEmpty() )",
          "104:             {",
          "105:                 extensions.add( createExtension( extension, artifacts ) );",
          "",
          "[Removed Lines]",
          "102:             List<Artifact> artifacts = resolveExtension( extension, repoSession, repositories, dependencyFilter );",
          "",
          "[Added Lines]",
          "108:             List<Artifact> artifacts = resolveExtension( extension, repoSession, repositories,",
          "109:                                                          dependencyFilter, interpolator );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:     }",
          "129:     private List<Artifact> resolveExtension( CoreExtension extension, RepositorySystemSession repoSession,",
          "131:         throws ExtensionResolutionException",
          "132:     {",
          "133:         try",
          "134:         {",
          "138:             Plugin plugin = new Plugin();",
          "143:             DependencyNode root = pluginDependenciesResolver",
          "144:                     .resolveCoreExtension( plugin, dependencyFilter, repositories, repoSession );",
          "",
          "[Removed Lines]",
          "130:                                              List<RemoteRepository> repositories, DependencyFilter dependencyFilter )",
          "139:             plugin.setGroupId( extension.getGroupId() );",
          "140:             plugin.setArtifactId( extension.getArtifactId() );",
          "141:             plugin.setVersion( extension.getVersion() );",
          "",
          "[Added Lines]",
          "137:                                              List<RemoteRepository> repositories, DependencyFilter dependencyFilter,",
          "138:                                              Interpolator interpolator )",
          "148:             plugin.setGroupId( interpolator.interpolate( extension.getGroupId() ) );",
          "149:             plugin.setArtifactId( interpolator.interpolate( extension.getArtifactId() ) );",
          "150:             plugin.setVersion( interpolator.interpolate( extension.getVersion() ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "152:         {",
          "153:             throw new ExtensionResolutionException( extension, e.getCause() );",
          "154:         }",
          "155:     }",
          "157: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:         catch ( InterpolationException e )",
          "165:         {",
          "166:             throw new ExtensionResolutionException( extension, e );",
          "167:         }",
          "168:     }",
          "170:     private static Interpolator createInterpolator( MavenExecutionRequest request )",
          "171:     {",
          "172:         StringSearchInterpolator interpolator = new StringSearchInterpolator();",
          "173:         interpolator.addValueSource( new MapBasedValueSource( request.getUserProperties() ) );",
          "174:         interpolator.addValueSource( new MapBasedValueSource( request.getSystemProperties() ) );",
          "175:         return interpolator;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b7beb4db8ad15f1ed26c08df32d6ac1ae96ac0c",
      "candidate_info": {
        "commit_hash": "6b7beb4db8ad15f1ed26c08df32d6ac1ae96ac0c",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/6b7beb4db8ad15f1ed26c08df32d6ac1ae96ac0c",
        "files": [
          "maven-core/src/main/java/org/apache/maven/DefaultMaven.java"
        ],
        "message": "[MNG-7019] Notify also at start when profile is missing",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/DefaultMaven.java||maven-core/src/main/java/org/apache/maven/DefaultMaven.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/DefaultMaven.java||maven-core/src/main/java/org/apache/maven/DefaultMaven.java": [
          "File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java -> maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:             validatePrerequisitesForNonMavenPluginProjects( session.getProjects() );",
          "294:             lifecycleStarter.execute( session );",
          "296:             validateActivatedProfiles( session.getProjects(), request.getActiveProfiles() );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:             validateActivatedProfiles( session.getProjects(), request.getActiveProfiles() );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed3279809cad6c77cd8e5c217230c612d1222d9a",
      "candidate_info": {
        "commit_hash": "ed3279809cad6c77cd8e5c217230c612d1222d9a",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/ed3279809cad6c77cd8e5c217230c612d1222d9a",
        "files": [
          "doap_Maven.rdf"
        ],
        "message": "Update DOAP with Maven 3.8.3 release",
        "before_after_code_files": [
          "doap_Maven.rdf||doap_Maven.rdf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "doap_Maven.rdf||doap_Maven.rdf": [
          "File: doap_Maven.rdf -> doap_Maven.rdf",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     <release>",
          "34:       <Version>",
          "35:         <name>Latest stable release</name>",
          "36:         <created>2021-08-04</created>",
          "37:         <revision>3.8.2</revision>",
          "38:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.zip</file-release>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:         <created>2021-09-27</created>",
          "37:         <revision>3.8.3</revision>",
          "38:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.zip</file-release>",
          "39:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.tar.gz</file-release>",
          "40:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.3/source/apache-maven-3.8.3-src.zip</file-release>",
          "41:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.3/source/apache-maven-3.8.3-src.tar.gz</file-release>",
          "42:       </Version>",
          "43:       <Version>",
          "44:         <name>Apache Maven 3.8.2</name>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05b748ff6aa15aa63a9c9d5f9f5679f47bf9e83d",
      "candidate_info": {
        "commit_hash": "05b748ff6aa15aa63a9c9d5f9f5679f47bf9e83d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/05b748ff6aa15aa63a9c9d5f9f5679f47bf9e83d",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java"
        ],
        "message": "[MNG-5561] Plugin relocation loses configuration\n\nPreviously, to locate plugin configuration in the project the plugin descriptor\nwas read and the GA were extracted. This always worked because the GA from the\nmodel and the GA from plugin descriptor (plugin.xml) were identical. When a\nplugin is relocated the target artifact is read, thus its plugin descriptor as\nwell. Naturally, the GA of new (relocated) does not correspond to the old\n(static) one in the model. Therefore, the configuration is not found.\nNew approach is to use the original plugin GA to locate the configuration in\nthe model regardless of relocation.",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     @Override",
          "42:     public void configure( MavenProject project, MojoExecution mojoExecution, boolean allowPluginLevelConfig )",
          "43:     {",
          "48:         Plugin plugin = findPlugin( g, a, project.getBuildPlugins() );",
          "",
          "[Removed Lines]",
          "44:         String g = mojoExecution.getGroupId();",
          "46:         String a = mojoExecution.getArtifactId();",
          "",
          "[Added Lines]",
          "44:         String g = mojoExecution.getPlugin().getGroupId();",
          "46:         String a = mojoExecution.getPlugin().getArtifactId();",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java": [
          "File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java -> maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     public MojoDescriptor getMojoDescriptor( Plugin plugin, String goal, List<RemoteRepository> repositories,",
          "43:                                              RepositorySystemSession session )",
          "44:     {",
          "46:     }",
          "48:     public ClassRealm getPluginRealm( MavenSession session, PluginDescriptor pluginDescriptor )",
          "",
          "[Removed Lines]",
          "45:         return MojoExecutorStub.createMojoDescriptor( plugin.getKey() );",
          "",
          "[Added Lines]",
          "45:         return MojoExecutorStub.createMojoDescriptor( plugin );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java": [
          "File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java -> maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.maven.lifecycle.internal.MojoExecutor;",
          "22: import org.apache.maven.lifecycle.internal.PhaseRecorder;",
          "23: import org.apache.maven.lifecycle.internal.ProjectIndex;",
          "24: import org.apache.maven.plugin.MojoExecution;",
          "25: import org.apache.maven.plugin.descriptor.MojoDescriptor;",
          "26: import org.apache.maven.plugin.descriptor.PluginDescriptor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import org.apache.maven.model.Plugin;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:     }",
          "58:     {",
          "59:         final PluginDescriptor descriptor = new PluginDescriptor();",
          "61:         final MojoDescriptor mojoDescriptor = new MojoDescriptor();",
          "63:         mojoDescriptor.setPluginDescriptor( descriptor );",
          "64:         return mojoDescriptor;",
          "65:     }",
          "",
          "[Removed Lines]",
          "57:     public static MojoDescriptor createMojoDescriptor( String mojoDescription )",
          "60:         descriptor.setArtifactId( mojoDescription );",
          "62:         mojoDescriptor.setDescription( mojoDescription );",
          "",
          "[Added Lines]",
          "58:     public static MojoDescriptor createMojoDescriptor( Plugin plugin )",
          "61:         descriptor.setGroupId( plugin.getGroupId() );",
          "62:         descriptor.setArtifactId( plugin.getArtifactId() );",
          "63:         descriptor.setPlugin( plugin );",
          "64:         descriptor.setVersion( plugin.getVersion() );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8edac61ae51029ce73f5f4cabd2b5652556d5090",
      "candidate_info": {
        "commit_hash": "8edac61ae51029ce73f5f4cabd2b5652556d5090",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8edac61ae51029ce73f5f4cabd2b5652556d5090",
        "files": [
          "apache-maven/src/bin/mvnDebug",
          "apache-maven/src/bin/mvnDebug.cmd"
        ],
        "message": "[MNG-7149] Introduce MAVEN_DEBUG_ADDRESS in mvnDebug scripts\n\nmvnDebug socket now binds by default on 8000. set MAVEN_DEBUG_ADDRESS\nenvironment variable to choose another address (host:port).\n\nThis closes #469",
        "before_after_code_files": [
          "apache-maven/src/bin/mvnDebug.cmd||apache-maven/src/bin/mvnDebug.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvnDebug.cmd||apache-maven/src/bin/mvnDebug.cmd": [
          "File: apache-maven/src/bin/mvnDebug.cmd -> apache-maven/src/bin/mvnDebug.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: @REM",
          "21: @REM Environment Variable Prerequisites",
          "22: @REM",
          "28: @REM -----------------------------------------------------------------------------",
          "30: @setlocal",
          "33: @call \"%~dp0\"mvn.cmd %*",
          "",
          "[Removed Lines]",
          "23: @REM   JAVA_HOME          Must point at your Java Development Kit installation.",
          "24: @REM   MAVEN_BATCH_ECHO  (Optional) Set to 'on' to enable the echoing of the batch commands.",
          "25: @REM   MAVEN_BATCH_PAUSE (Optional) set to 'on' to wait for a key stroke before ending.",
          "26: @REM   MAVEN_OPTS        (Optional) Java runtime options used when Maven is executed.",
          "27: @REM   MAVEN_SKIP_RC     (Optional) Flag to disable loading of mavenrc files.",
          "31: @set MAVEN_DEBUG_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000",
          "",
          "[Added Lines]",
          "23: @REM   JAVA_HOME           Must point at your Java Development Kit installation.",
          "24: @REM   MAVEN_BATCH_ECHO    (Optional) Set to 'on' to enable the echoing of the batch commands.",
          "25: @REM   MAVEN_BATCH_PAUSE   (Optional) set to 'on' to wait for a key stroke before ending.",
          "26: @REM   MAVEN_OPTS          (Optional) Java runtime options used when Maven is executed.",
          "27: @REM   MAVEN_SKIP_RC       (Optional) Flag to disable loading of mavenrc files.",
          "28: @REM   MAVEN_DEBUG_ADDRESS (Optional) Set the debug address. Default value is 8000",
          "31: @REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'",
          "32: @echo off",
          "33: @REM set title of command window",
          "34: title %0",
          "35: @REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'",
          "36: @if \"%MAVEN_BATCH_ECHO%\"==\"on\" echo %MAVEN_BATCH_ECHO%",
          "40: IF \"%MAVEN_DEBUG_ADDRESS%\"==\"\" @set MAVEN_DEBUG_ADDRESS=8000",
          "42: @set MAVEN_DEBUG_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=%MAVEN_DEBUG_ADDRESS%",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff8e977a158738155dc465c6a97ffaf31982d739",
      "candidate_info": {
        "commit_hash": "ff8e977a158738155dc465c6a97ffaf31982d739",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/ff8e977a158738155dc465c6a97ffaf31982d739",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[maven-release-plugin] prepare release maven-3.8.3",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "b5056e418824d9e074d45285d3a6242c4de55c05",
      "candidate_info": {
        "commit_hash": "b5056e418824d9e074d45285d3a6242c4de55c05",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/b5056e418824d9e074d45285d3a6242c4de55c05",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java"
        ],
        "message": "[MNG-6828] DependencyResolutionException breaks serialization",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java||maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java||maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java -> maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     extends Exception",
          "27: {",
          "31:     public DependencyResolutionException( DependencyResolutionResult result, String message, Throwable cause )",
          "32:     {",
          "",
          "[Removed Lines]",
          "29:     private DependencyResolutionResult result;",
          "",
          "[Added Lines]",
          "29:     private final transient DependencyResolutionResult result;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a55300a588d3694966fd797323304e1ed0bc6de1",
      "candidate_info": {
        "commit_hash": "a55300a588d3694966fd797323304e1ed0bc6de1",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/a55300a588d3694966fd797323304e1ed0bc6de1",
        "files": [
          "maven-core/src/main/resources/META-INF/maven/extension.xml"
        ],
        "message": "[MNG-6972] Allow access to org.apache.maven.graph\n\nThis is, for example, needed for rebuilding the dependency graph during build\nextension execution after changing dependencies.\n\nThis closes #368",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "05c21c65bdfed0f71a2f2ada8b84da59348c4c5d",
      "candidate_info": {
        "commit_hash": "05c21c65bdfed0f71a2f2ada8b84da59348c4c5d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/05c21c65bdfed0f71a2f2ada8b84da59348c4c5d",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[maven-release-plugin] prepare release maven-3.8.1",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "ce27f0ec6184cdee40609817a2796c768d0df261",
      "candidate_info": {
        "commit_hash": "ce27f0ec6184cdee40609817a2796c768d0df261",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/ce27f0ec6184cdee40609817a2796c768d0df261",
        "files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java",
          "maven-artifact/src/test/java/org/apache/maven/artifact/versioning/ComparableVersionTest.java"
        ],
        "message": "[MNG-6964] Maven version sorting is internally inconsistent.",
        "before_after_code_files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java||maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java",
          "maven-artifact/src/test/java/org/apache/maven/artifact/versioning/ComparableVersionTest.java||maven-artifact/src/test/java/org/apache/maven/artifact/versioning/ComparableVersionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java||maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java": [
          "File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java -> maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:                 {",
          "531:                     return 0; // 1-0 = 1- (normalize) = 1",
          "532:                 }",
          "535:             }",
          "536:             switch ( item.getType() )",
          "537:             {",
          "",
          "[Removed Lines]",
          "533:                 Item first = get( 0 );",
          "534:                 return first.compareTo( null );",
          "",
          "[Added Lines]",
          "534:                 for ( Item i : this )",
          "535:                 {",
          "536:                     int result = i.compareTo( null );",
          "537:                     if ( result != 0 )",
          "538:                     {",
          "539:                         return result;",
          "540:                     }",
          "541:                 }",
          "542:                 return 0;",
          "",
          "---------------"
        ],
        "maven-artifact/src/test/java/org/apache/maven/artifact/versioning/ComparableVersionTest.java||maven-artifact/src/test/java/org/apache/maven/artifact/versioning/ComparableVersionTest.java": [
          "File: maven-artifact/src/test/java/org/apache/maven/artifact/versioning/ComparableVersionTest.java -> maven-artifact/src/test/java/org/apache/maven/artifact/versioning/ComparableVersionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:         checkVersionsArrayEqual( arr );",
          "296:     }",
          "298:     public void testLocaleIndependent()",
          "299:     {",
          "300:         Locale orig = Locale.getDefault();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:     public void testMng6964()",
          "303:     {",
          "304:         String a = \"1-0.alpha\";",
          "305:         String b = \"1-0.beta\";",
          "306:         String c = \"1\";",
          "308:         checkVersionsOrder( a, c ); // Now a < c, but before MNG-6964 they were equal",
          "309:         checkVersionsOrder( b, c ); // Now b < c, but before MNG-6964 they were equal",
          "310:         checkVersionsOrder( a, b ); // Should still be true",
          "311:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a2392f15e3cbdc7a7c8a453a4cbed314947a036",
      "candidate_info": {
        "commit_hash": "2a2392f15e3cbdc7a7c8a453a4cbed314947a036",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/2a2392f15e3cbdc7a7c8a453a4cbed314947a036",
        "files": [
          "maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java",
          "maven-core/src/test/projects/lifecycle-executor/project-with-inheritance/pom.xml",
          "maven-core/src/test/projects/plugin-manager/project-with-inheritance/pom.xml",
          "maven-core/src/test/resources-project-builder/dependency-inheritance/pom.xml",
          "maven-core/src/test/resources-project-builder/dependency-inheritance/sub/pom.xml",
          "maven-core/src/test/resources-project-builder/micromailer/pom.xml",
          "maven-core/src/test/resources/org/apache/maven/lifecycle/pom.xml",
          "maven-embedder/src/examples/simple-project/pom.xml"
        ],
        "message": "[MNG-6873] Align JUnit version to 4.13\n\nCloses #331",
        "before_after_code_files": [
          "maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java||maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java||maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java -> maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "975:     {",
          "976:         PomTestWrapper pom = buildPom( \"dependency-inheritance/sub\" );",
          "977:         assertEquals( 1, ( (List<?>) pom.getValue( \"dependencies\" ) ).size() );",
          "979:     }",
          "",
          "[Removed Lines]",
          "978:         assertEquals( \"4.4\", pom.getValue( \"dependencies[1]/version\" ) );",
          "",
          "[Added Lines]",
          "978:         assertEquals( \"4.13\", pom.getValue( \"dependencies[1]/version\" ) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4259ba8afd22240314555a31dd03602ad91514ac",
      "candidate_info": {
        "commit_hash": "4259ba8afd22240314555a31dd03602ad91514ac",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/4259ba8afd22240314555a31dd03602ad91514ac",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-6884] - Cleanup POM File after version upgrade",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "72c483b52702687f5a4160e1fd317b01c03988d3",
      "candidate_info": {
        "commit_hash": "72c483b52702687f5a4160e1fd317b01c03988d3",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/72c483b52702687f5a4160e1fd317b01c03988d3",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-7384] Upgrade Maven JAR Plugin to 3.2.2",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "0a118d6e244e17cf27654ce6e17b1d3140c0967e",
      "candidate_info": {
        "commit_hash": "0a118d6e244e17cf27654ce6e17b1d3140c0967e",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/0a118d6e244e17cf27654ce6e17b1d3140c0967e",
        "files": [
          "maven-model/src/main/mdo/maven.mdo"
        ],
        "message": "[MNG-7408] explain Maven 3 reporting plugin version selection",
        "before_after_code_files": [
          "maven-model/src/main/mdo/maven.mdo||maven-model/src/main/mdo/maven.mdo"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model/src/main/mdo/maven.mdo||maven-model/src/main/mdo/maven.mdo": [
          "File: maven-model/src/main/mdo/maven.mdo -> maven-model/src/main/mdo/maven.mdo",
          "--- Hunk 1 ---",
          "[Context before]",
          "2835:         <field>",
          "2836:           <name>version</name>",
          "2837:           <version>4.0.0+</version>",
          "2839:           <type>String</type>",
          "2840:         </field>",
          "2841:         <field>",
          "",
          "[Removed Lines]",
          "2838:           <description>The version of the reporting plugin to be used.</description>",
          "",
          "[Added Lines]",
          "2838:           <description>",
          "2839:             <![CDATA[",
          "2840:             The version of the reporting plugin to be used. Starting with Maven 3, if no version is defined explicitely,",
          "2841:             version is searched in <code>build/plugins</code> then in <code>build/pluginManagement</code>.",
          "2842:             ]]>",
          "2843:           </description>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4ad077ef5c440d86f3c9110e96ae00cf7d246bf",
      "candidate_info": {
        "commit_hash": "d4ad077ef5c440d86f3c9110e96ae00cf7d246bf",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/d4ad077ef5c440d86f3c9110e96ae00cf7d246bf",
        "files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java",
          "maven-compat/src/main/java/org/apache/maven/project/validation/ModelValidationResult.java",
          "maven-compat/src/test/java/org/apache/maven/artifact/resolver/ArtifactResolutionExceptionTest.java",
          "maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java",
          "maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java",
          "maven-core/src/test/java/org/apache/maven/toolchain/building/ToolchainsBuildingExceptionTest.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/UnsupportedSlf4jBindingConfiguration.java",
          "maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java"
        ],
        "message": "[MNG-6816] Prefer System.lineSeparator() over system properties\n\nThis closes #300",
        "before_after_code_files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java||maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java",
          "maven-compat/src/main/java/org/apache/maven/project/validation/ModelValidationResult.java||maven-compat/src/main/java/org/apache/maven/project/validation/ModelValidationResult.java",
          "maven-compat/src/test/java/org/apache/maven/artifact/resolver/ArtifactResolutionExceptionTest.java||maven-compat/src/test/java/org/apache/maven/artifact/resolver/ArtifactResolutionExceptionTest.java",
          "maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java||maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java",
          "maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java||maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java",
          "maven-core/src/test/java/org/apache/maven/toolchain/building/ToolchainsBuildingExceptionTest.java||maven-core/src/test/java/org/apache/maven/toolchain/building/ToolchainsBuildingExceptionTest.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/UnsupportedSlf4jBindingConfiguration.java||maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/UnsupportedSlf4jBindingConfiguration.java",
          "maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java||maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java||maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java": [
          "File: maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java -> maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     private final String path;",
          "57:     @SuppressWarnings( \"checkstyle:parameternumber\" )",
          "58:     protected AbstractArtifactResolutionException( String message,",
          "",
          "[Removed Lines]",
          "55:     static final String LS = System.getProperty( \"line.separator\" );",
          "",
          "[Added Lines]",
          "55:     static final String LS = System.lineSeparator();",
          "",
          "---------------"
        ],
        "maven-compat/src/main/java/org/apache/maven/project/validation/ModelValidationResult.java||maven-compat/src/main/java/org/apache/maven/project/validation/ModelValidationResult.java": [
          "File: maven-compat/src/main/java/org/apache/maven/project/validation/ModelValidationResult.java -> maven-compat/src/main/java/org/apache/maven/project/validation/ModelValidationResult.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: {",
          "36:     private List<String> messages;",
          "",
          "[Removed Lines]",
          "33:     private static final String NEWLINE = System.getProperty( \"line.separator\" );",
          "",
          "[Added Lines]",
          "33:     private static final String LS = System.lineSeparator();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:         for ( int i = 0; i < messages.size(); i++ )",
          "87:         {",
          "88:             message.append( indentation ).append( '[' ).append( i ).append( \"]  \" ).append( messages.get( i ) ).append(",
          "90:         }",
          "92:         return message.toString();",
          "",
          "[Removed Lines]",
          "89:                 NEWLINE );",
          "",
          "[Added Lines]",
          "89:                 LS );",
          "",
          "---------------"
        ],
        "maven-compat/src/test/java/org/apache/maven/artifact/resolver/ArtifactResolutionExceptionTest.java||maven-compat/src/test/java/org/apache/maven/artifact/resolver/ArtifactResolutionExceptionTest.java": [
          "File: maven-compat/src/test/java/org/apache/maven/artifact/resolver/ArtifactResolutionExceptionTest.java -> maven-compat/src/test/java/org/apache/maven/artifact/resolver/ArtifactResolutionExceptionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: public class ArtifactResolutionExceptionTest",
          "33:     extends TestCase",
          "34: {",
          "37:     public void testMissingArtifactMessageFormat()",
          "38:     {",
          "",
          "[Removed Lines]",
          "35:     private static final String LS = System.getProperty( \"line.separator\" );",
          "",
          "[Added Lines]",
          "35:     private static final String LS = System.lineSeparator();",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java||maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java -> maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: public class PluginParameterExpressionEvaluatorTest",
          "54:     extends AbstractCoreMavenComponentTestCase",
          "55: {",
          "58:     private RepositorySystem factory;",
          "",
          "[Removed Lines]",
          "56:     private static final String FS = System.getProperty( \"file.separator\" );",
          "",
          "[Added Lines]",
          "56:     private static final String FS = File.separator;",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java||maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java -> maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: public class DefaultToolchainsBuilderTest",
          "49: {",
          "52:     @Spy",
          "53:     private DefaultToolchainsReader toolchainsReader;",
          "",
          "[Removed Lines]",
          "50:     private static final String LS = System.getProperty( \"line.separator\" );",
          "",
          "[Added Lines]",
          "50:     private static final String LS = System.lineSeparator();",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/toolchain/building/ToolchainsBuildingExceptionTest.java||maven-core/src/test/java/org/apache/maven/toolchain/building/ToolchainsBuildingExceptionTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/toolchain/building/ToolchainsBuildingExceptionTest.java -> maven-core/src/test/java/org/apache/maven/toolchain/building/ToolchainsBuildingExceptionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: public class ToolchainsBuildingExceptionTest",
          "32: {",
          "35:     @Test",
          "36:     public void testNoProblems()",
          "",
          "[Removed Lines]",
          "33:     private static final String LS = System.getProperty( \"line.separator\" );",
          "",
          "[Added Lines]",
          "33:     private static final String LS = System.lineSeparator();",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java -> maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     public static String showVersion()",
          "57:     {",
          "59:         Properties properties = getBuildProperties();",
          "60:         StringBuilder version = new StringBuilder( 256 );",
          "61:         version.append( buffer().strong( createMavenVersionString( properties ) ) ).append( ls );",
          "",
          "[Removed Lines]",
          "58:         final String ls = System.getProperty( \"line.separator\" );",
          "",
          "[Added Lines]",
          "58:         final String ls = System.lineSeparator();",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/UnsupportedSlf4jBindingConfiguration.java||maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/UnsupportedSlf4jBindingConfiguration.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/UnsupportedSlf4jBindingConfiguration.java -> maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/UnsupportedSlf4jBindingConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         logger.warn( \"The SLF4J binding actually used is not supported by Maven: {}\", slf4jBinding );",
          "55:         logger.warn( \"Maven supported bindings are:\" );",
          "59:         for ( Map.Entry<URL, Set<Object>> entry : supported.entrySet() )",
          "60:         {",
          "",
          "[Removed Lines]",
          "57:         String ls = System.getProperty( \"line.separator\" );",
          "",
          "[Added Lines]",
          "57:         String ls = System.lineSeparator();",
          "",
          "---------------"
        ],
        "maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java||maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java": [
          "File: maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java -> maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: public class CLIManagerDocumentationTest",
          "40:     extends TestCase",
          "41: {",
          "44:     private static class OptionComparator",
          "45:         implements Comparator<Option>",
          "",
          "[Removed Lines]",
          "42:     private final static String LS = System.getProperty( \"line.separator\" );",
          "",
          "[Added Lines]",
          "42:     private final static String LS = System.lineSeparator();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3599d3414f046de2324203b78ddcf9b5e4388aa0",
      "candidate_info": {
        "commit_hash": "3599d3414f046de2324203b78ddcf9b5e4388aa0",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/3599d3414f046de2324203b78ddcf9b5e4388aa0",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[maven-release-plugin] prepare release maven-3.8.5",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "453c17371319e985d3a6caba84ae240bb33d6870",
      "candidate_info": {
        "commit_hash": "453c17371319e985d3a6caba84ae240bb33d6870",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/453c17371319e985d3a6caba84ae240bb33d6870",
        "files": [
          "apache-maven/src/main/appended-resources/licenses/unrecognized-javax.annotation-api-1.2.txt",
          "apache-maven/src/main/appended-resources/licenses/unrecognized-javax.annotation-api-1.3.2.txt",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenAetherModule.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java",
          "pom.xml"
        ],
        "message": "[MNG-7247] Upgrade Maven Resolver to 1.7.2",
        "before_after_code_files": [
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenAetherModule.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenAetherModule.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.eclipse.aether.SyncContext;",
          "29: import org.eclipse.aether.impl.MetadataResolver;",
          "30: import org.eclipse.aether.impl.RepositoryEventDispatcher;",
          "32: import org.eclipse.aether.impl.VersionRangeResolver;",
          "33: import org.eclipse.aether.metadata.DefaultMetadata;",
          "34: import org.eclipse.aether.metadata.Metadata;",
          "",
          "[Removed Lines]",
          "31: import org.eclipse.aether.impl.SyncContextFactory;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import org.eclipse.aether.resolution.VersionRangeResult;",
          "43: import org.eclipse.aether.spi.locator.Service;",
          "44: import org.eclipse.aether.spi.locator.ServiceLocator;",
          "45: import org.eclipse.aether.util.version.GenericVersionScheme;",
          "46: import org.eclipse.aether.version.InvalidVersionSpecificationException;",
          "47: import org.eclipse.aether.version.Version;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import org.eclipse.aether.spi.synccontext.SyncContextFactory;",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import org.eclipse.aether.artifact.Artifact;",
          "34: import org.eclipse.aether.impl.MetadataResolver;",
          "35: import org.eclipse.aether.impl.RepositoryEventDispatcher;",
          "37: import org.eclipse.aether.impl.VersionResolver;",
          "38: import org.eclipse.aether.metadata.DefaultMetadata;",
          "39: import org.eclipse.aether.metadata.Metadata;",
          "",
          "[Removed Lines]",
          "36: import org.eclipse.aether.impl.SyncContextFactory;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: import org.eclipse.aether.resolution.VersionResult;",
          "50: import org.eclipse.aether.spi.locator.Service;",
          "51: import org.eclipse.aether.spi.locator.ServiceLocator;",
          "52: import org.eclipse.aether.util.ConfigUtils;",
          "54: import javax.inject.Inject;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.eclipse.aether.spi.synccontext.SyncContextFactory;",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenAetherModule.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenAetherModule.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenAetherModule.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenAetherModule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     public static DefaultServiceLocator newServiceLocator()",
          "73:     {",
          "74:         DefaultServiceLocator locator = new DefaultServiceLocator();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     @Deprecated",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52b718614ab379dd909e70e4db3b00da54b91263",
      "candidate_info": {
        "commit_hash": "52b718614ab379dd909e70e4db3b00da54b91263",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/52b718614ab379dd909e70e4db3b00da54b91263",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-6399] Lift JDK minimum to JDK 8",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "01780c0ff371cb8590c5ede3d6d191836baf8476",
      "candidate_info": {
        "commit_hash": "01780c0ff371cb8590c5ede3d6d191836baf8476",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/01780c0ff371cb8590c5ede3d6d191836baf8476",
        "files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java",
          "maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java",
          "maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java"
        ],
        "message": "[MNG-6853] - Don't box primitives where it's not needed\n\nCloses #318",
        "before_after_code_files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java||maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java",
          "maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java||maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java",
          "maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java||maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java||maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java": [
          "File: maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java -> maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:         else if ( updatePolicy.startsWith( UPDATE_POLICY_INTERVAL ) )",
          "139:         {",
          "140:             String s = updatePolicy.substring( UPDATE_POLICY_INTERVAL.length() + 1 );",
          "142:             Calendar cal = Calendar.getInstance();",
          "143:             cal.add( Calendar.MINUTE, -minutes );",
          "144:             if ( cal.getTime().after( lastModified ) )",
          "",
          "[Removed Lines]",
          "141:             int minutes = Integer.valueOf( s );",
          "",
          "[Added Lines]",
          "141:             int minutes = Integer.parseInt( s );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:         else if ( policy != null && policy.startsWith( ArtifactRepositoryPolicy.UPDATE_POLICY_INTERVAL ) )",
          "213:         {",
          "214:             String s = policy.substring( UPDATE_POLICY_INTERVAL.length() + 1 );",
          "216:         }",
          "217:         else",
          "218:         {",
          "",
          "[Removed Lines]",
          "215:             return Integer.valueOf( s );",
          "",
          "[Added Lines]",
          "215:             return Integer.parseInt( s );",
          "",
          "---------------"
        ],
        "maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java||maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java": [
          "File: maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java -> maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:                     String inherited = plugin.getInherited();",
          "80:                     {",
          "81:                         it.remove();",
          "82:                     }",
          "",
          "[Removed Lines]",
          "79:                     if ( ( inherited != null ) && !Boolean.valueOf( inherited ) )",
          "",
          "[Added Lines]",
          "79:                     if ( ( inherited != null ) && !Boolean.parseBoolean( inherited ) )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:                 if ( !handleAsInheritance || ( parentInherited == null )",
          "101:                 {",
          "102:                     Plugin childPlugin = childPlugins.get( parentPlugin.getKey() );",
          "",
          "[Removed Lines]",
          "100:                     || Boolean.valueOf( parentInherited ) )",
          "",
          "[Added Lines]",
          "100:                     || Boolean.parseBoolean( parentInherited ) )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:         String parentInherited = parent.getInherited();",
          "222:         List<PluginExecution> parentExecutions = parent.getExecutions();",
          "",
          "[Removed Lines]",
          "220:         boolean parentIsInherited = ( parentInherited == null ) || Boolean.valueOf( parentInherited );",
          "",
          "[Added Lines]",
          "220:         boolean parentIsInherited = ( parentInherited == null ) || Boolean.parseBoolean( parentInherited );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:                 String inherited = parentExecution.getInherited();",
          "236:                 boolean parentExecInherited =",
          "239:                 if ( !handleAsInheritance || parentExecInherited )",
          "240:                 {",
          "",
          "[Removed Lines]",
          "237:                     parentIsInherited && ( ( inherited == null ) || Boolean.valueOf( inherited ) );",
          "",
          "[Added Lines]",
          "237:                     parentIsInherited && ( ( inherited == null ) || Boolean.parseBoolean( inherited ) );",
          "",
          "---------------"
        ],
        "maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java||maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java": [
          "File: maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java -> maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "386:             {",
          "387:                 String parentInherited = parentPlugin.getInherited();",
          "390:                 {",
          "392:                     ReportPlugin assembledPlugin = parentPlugin;",
          "",
          "[Removed Lines]",
          "389:                 if ( !handleAsInheritance || ( parentInherited == null ) || Boolean.valueOf( parentInherited ) )",
          "",
          "[Added Lines]",
          "389:                 if ( !handleAsInheritance || ( parentInherited == null ) || Boolean.parseBoolean( parentInherited ) )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475:         String parentInherited = parent.getInherited();",
          "479:         List<ReportSet> parentReportSets = parent.getReportSets();",
          "",
          "[Removed Lines]",
          "477:         boolean parentIsInherited = ( parentInherited == null ) || Boolean.valueOf( parentInherited );",
          "",
          "[Added Lines]",
          "477:         boolean parentIsInherited = ( parentInherited == null ) || Boolean.parseBoolean( parentInherited );",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java -> maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:             msg += ( rev != null ? rev : \"\" );",
          "97:             if ( StringUtils.isNotBlank( timestamp ) )",
          "98:             {",
          "100:                 msg += ( rev != null ? \"; \" : \"\" ) + ts;",
          "101:             }",
          "102:             msg += \")\";",
          "",
          "[Removed Lines]",
          "99:                 String ts = formatTimestamp( Long.valueOf( timestamp ) );",
          "",
          "[Added Lines]",
          "99:                 String ts = formatTimestamp( Long.parseLong( timestamp ) );",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java -> maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1600:             }",
          "1601:             else",
          "1602:             {",
          "1604:             }",
          "1605:         }",
          "",
          "[Removed Lines]",
          "1603:                 request.setDegreeOfConcurrency( Integer.valueOf( threadConfiguration ) );",
          "",
          "[Added Lines]",
          "1603:                 request.setDegreeOfConcurrency( Integer.parseInt( threadConfiguration ) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1618:     int calculateDegreeOfConcurrencyWithCoreMultiplier( String threadConfiguration )",
          "1619:     {",
          "1620:         int procs = Runtime.getRuntime().availableProcessors();",
          "1622:     }",
          "",
          "[Removed Lines]",
          "1621:         return (int) ( Float.valueOf( threadConfiguration.replace( \"C\", \"\" ) ) * procs );",
          "",
          "[Added Lines]",
          "1621:         return (int) ( Float.parseFloat( threadConfiguration.replace( \"C\", \"\" ) ) * procs );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19c3b917b3604f93fef0583a08e70f8695d3a359",
      "candidate_info": {
        "commit_hash": "19c3b917b3604f93fef0583a08e70f8695d3a359",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/19c3b917b3604f93fef0583a08e70f8695d3a359",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-7331] Upgrade Jansi to 2.4.0",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "51f6d8b8525d8bf218f70100ec99a7ae97097923",
      "candidate_info": {
        "commit_hash": "51f6d8b8525d8bf218f70100ec99a7ae97097923",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/51f6d8b8525d8bf218f70100ec99a7ae97097923",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-7196] Upgrade Jansi to 2.3.4",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "dad8a3e1c55f34b7949945bc622f26447ddbf4f9",
      "candidate_info": {
        "commit_hash": "dad8a3e1c55f34b7949945bc622f26447ddbf4f9",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/dad8a3e1c55f34b7949945bc622f26447ddbf4f9",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[maven-release-plugin] prepare for next development iteration",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "b6186e2c7714158b5a2709f4af9d40b194c53f55",
      "candidate_info": {
        "commit_hash": "b6186e2c7714158b5a2709f4af9d40b194c53f55",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/b6186e2c7714158b5a2709f4af9d40b194c53f55",
        "files": [
          "apache-maven/src/main/assembly/.component.xml.swp"
        ],
        "message": "Remove swap file",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "c395ca976dc9eaed65dcdc0037508d1edbfb57f3",
      "candidate_info": {
        "commit_hash": "c395ca976dc9eaed65dcdc0037508d1edbfb57f3",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/c395ca976dc9eaed65dcdc0037508d1edbfb57f3",
        "files": [
          "apache-maven/src/site/apt/index.apt.vm"
        ],
        "message": "[MNG-7190] add /usr/local/etc/mavenrc to reference documentation",
        "before_after_code_files": [
          "apache-maven/src/site/apt/index.apt.vm||apache-maven/src/site/apt/index.apt.vm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/site/apt/index.apt.vm||apache-maven/src/site/apt/index.apt.vm": [
          "File: apache-maven/src/site/apt/index.apt.vm -> apache-maven/src/site/apt/index.apt.vm"
        ]
      }
    },
    {
      "candidate_hash": "b476b28ecbf521d8c4b0d0ce601a68efa03908d1",
      "candidate_info": {
        "commit_hash": "b476b28ecbf521d8c4b0d0ce601a68efa03908d1",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/b476b28ecbf521d8c4b0d0ce601a68efa03908d1",
        "files": [
          "maven-repository-metadata/src/main/mdo/metadata.mdo"
        ],
        "message": "[MNG-7000] metadata.mdo contains invalid link to schema",
        "before_after_code_files": [
          "maven-repository-metadata/src/main/mdo/metadata.mdo||maven-repository-metadata/src/main/mdo/metadata.mdo"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-repository-metadata/src/main/mdo/metadata.mdo||maven-repository-metadata/src/main/mdo/metadata.mdo": [
          "File: maven-repository-metadata/src/main/mdo/metadata.mdo -> maven-repository-metadata/src/main/mdo/metadata.mdo",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: <model xmlns=\"http://codehaus-plexus.github.io/MODELLO/1.4.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
          "21:   xsi:schemaLocation=\"http://codehaus-plexus.github.io/MODELLO/1.4.0 http://codehaus-plexus.github.io/modello/xsd/modello-1.4.0.xsd\"",
          "22:   xsd.namespace=\"http://maven.apache.org/METADATA/${version}\"",
          "24:   <id>repository-metadata</id>",
          "25:   <name>Metadata</name>",
          "26:   <description><![CDATA[",
          "",
          "[Removed Lines]",
          "23:   xml.schemaLocation=\"http://maven.apache.org/xsd/metadata-${version}.xsd\">",
          "",
          "[Added Lines]",
          "23:   xml.schemaLocation=\"https://maven.apache.org/xsd/repository-metadata-${version}.xsd\">",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c76c9d9116b4626c20abe26c025623797249f997",
      "candidate_info": {
        "commit_hash": "c76c9d9116b4626c20abe26c025623797249f997",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/c76c9d9116b4626c20abe26c025623797249f997",
        "files": [
          "maven-core/src/test/projects/lifecycle-executor/project-with-inheritance/pom.xml",
          "maven-core/src/test/projects/plugin-manager/project-with-inheritance/pom.xml",
          "maven-core/src/test/resources/org/apache/maven/lifecycle/pom.xml",
          "maven-embedder/pom.xml",
          "maven-settings-builder/pom.xml",
          "pom.xml"
        ],
        "message": "[MNG-7246] Upgrade Plexus Cipher and Sec Dispatcher to 2.0\n\nBoth plexus-cipher and plexus-sec-dispatcher have had a\ngroupId change, but plexus-cipher change was implemented\nfor 1.8 version.\n\nLatest versions of artifacts are 2.0. This PR\nups plexus-cipher version and adds proper changes\nfor plexus-sec-dispatcher groupId change.\n\nThis closes #534",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "4ff27db4f9111fbd4268d66b8f18dd44b61df0ee",
      "candidate_info": {
        "commit_hash": "4ff27db4f9111fbd4268d66b8f18dd44b61df0ee",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/4ff27db4f9111fbd4268d66b8f18dd44b61df0ee",
        "files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java"
        ],
        "message": "[MNG-7156][MNG-7285] Fix typo in test",
        "before_after_code_files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:         assertEquals( 1, mavenProject.getArtifacts().size() );",
          "124:         final MavenProject project = mavenProject;",
          "126:         Thread t = new Thread(new Runnable() {",
          "127:             @Override",
          "128:             public void run() {",
          "130:             }",
          "131:         });",
          "132:         t.start();",
          "133:         t.join();",
          "135:     }",
          "137:     public void testDontResolveDependencies()",
          "",
          "[Removed Lines]",
          "125:         final AtomicInteger artifactsResultInAnotherThead = new AtomicInteger();",
          "129:                 artifactsResultInAnotherThead.set(project.getArtifacts().size());",
          "134:         assertEquals( project.getArtifacts().size(), artifactsResultInAnotherThead.get() );",
          "",
          "[Added Lines]",
          "125:         final AtomicInteger artifactsResultInAnotherThread = new AtomicInteger();",
          "129:                 artifactsResultInAnotherThread.set(project.getArtifacts().size());",
          "134:         assertEquals( project.getArtifacts().size(), artifactsResultInAnotherThread.get() );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3907fcb2b541d80852611b68494965f10b828f2",
      "candidate_info": {
        "commit_hash": "a3907fcb2b541d80852611b68494965f10b828f2",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/a3907fcb2b541d80852611b68494965f10b828f2",
        "files": [
          "maven-compat/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java",
          "maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ReleaseArtifactTransformation.java",
          "maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/SnapshotTransformation.java",
          "maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/AbstractRepositoryMetadata.java",
          "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadata.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenMetadata.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenSnapshotMetadata.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadata.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java",
          "maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataTest.java"
        ],
        "message": "[MNG-6754] Set the same timestamp in multi module builds\n\nReuse MavenExecutionRequest#getStartTime() throughout for snapshot versions,\nlast updated fields in metadata consistently for local and remote repositories\nfor the entire reactor and its modules.\n\nThis closes #381",
        "before_after_code_files": [
          "maven-compat/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java||maven-compat/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java",
          "maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ReleaseArtifactTransformation.java||maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ReleaseArtifactTransformation.java",
          "maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/SnapshotTransformation.java||maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/SnapshotTransformation.java",
          "maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/AbstractRepositoryMetadata.java||maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/AbstractRepositoryMetadata.java",
          "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadata.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadata.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenMetadata.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenMetadata.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenSnapshotMetadata.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenSnapshotMetadata.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadata.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadata.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java",
          "maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataTest.java||maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [
            "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
          ],
          "candidate": [
            "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "maven-compat/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java||maven-compat/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java": [
          "File: maven-compat/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java -> maven-compat/src/main/java/org/apache/maven/artifact/installer/DefaultArtifactInstaller.java"
        ],
        "maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ReleaseArtifactTransformation.java||maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ReleaseArtifactTransformation.java": [
          "File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ReleaseArtifactTransformation.java -> maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ReleaseArtifactTransformation.java"
        ],
        "maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/SnapshotTransformation.java||maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/SnapshotTransformation.java": [
          "File: maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/SnapshotTransformation.java -> maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/SnapshotTransformation.java"
        ],
        "maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/AbstractRepositoryMetadata.java||maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/AbstractRepositoryMetadata.java": [
          "File: maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/AbstractRepositoryMetadata.java -> maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/AbstractRepositoryMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:     {",
          "166:         Versioning versioning = new Versioning();",
          "167:         versioning.setSnapshot( snapshot );",
          "169:         return versioning;",
          "170:     }",
          "",
          "[Removed Lines]",
          "168:         versioning.updateTimestamp();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java": [
          "File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java -> maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:         Map<Object, Object> configProps = new LinkedHashMap<>();",
          "103:         configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );",
          "104:         configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );",
          "105:         configProps.putAll( request.getSystemProperties() );",
          "106:         configProps.putAll( request.getUserProperties() );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:         configProps.put( \"maven.startTime\", request.getStartTime() );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadata.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadata.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadata.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.File;",
          "23: import java.util.ArrayList;",
          "24: import java.util.Collection;",
          "25: import java.util.LinkedHashMap;",
          "26: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.Date;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     private final boolean legacyFormat;",
          "46:     {",
          "48:         this.legacyFormat = legacyFormat;",
          "49:     }",
          "52:     {",
          "54:         this.legacyFormat = legacyFormat;",
          "55:     }",
          "",
          "[Removed Lines]",
          "45:     LocalSnapshotMetadata( Artifact artifact, boolean legacyFormat )",
          "47:         super( createMetadata( artifact, legacyFormat ), null );",
          "51:     LocalSnapshotMetadata( Metadata metadata, File file, boolean legacyFormat )",
          "53:         super( metadata, file );",
          "",
          "[Added Lines]",
          "46:     LocalSnapshotMetadata( Artifact artifact, boolean legacyFormat, Date timestamp )",
          "48:         super( createMetadata( artifact, legacyFormat ), null, timestamp );",
          "52:     LocalSnapshotMetadata( Metadata metadata, File file, boolean legacyFormat, Date timestamp )",
          "54:         super( metadata, file, timestamp );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:     public MavenMetadata setFile( File file )",
          "84:     {",
          "86:     }",
          "88:     public Object getKey()",
          "",
          "[Removed Lines]",
          "85:         return new LocalSnapshotMetadata( metadata, file, legacyFormat );",
          "",
          "[Added Lines]",
          "86:         return new LocalSnapshotMetadata( metadata, file, legacyFormat, timestamp );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:     @Override",
          "99:     protected void merge( Metadata recessive )",
          "100:     {",
          "103:         if ( !legacyFormat )",
          "104:         {",
          "",
          "[Removed Lines]",
          "101:         metadata.getVersioning().updateTimestamp();",
          "",
          "[Added Lines]",
          "102:         metadata.getVersioning().setLastUpdatedTimestamp( timestamp );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:         return Nature.SNAPSHOT;",
          "161:     }",
          "",
          "[Removed Lines]",
          "163: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.Collection;",
          "23: import java.util.Collections;",
          "24: import java.util.LinkedHashMap;",
          "25: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.Date;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     private final boolean legacyFormat;",
          "45:     LocalSnapshotMetadataGenerator( RepositorySystemSession session, InstallRequest request )",
          "46:     {",
          "47:         legacyFormat = ConfigUtils.getBoolean( session.getConfigProperties(), false, \"maven.metadata.legacy\" );",
          "49:         snapshots = new LinkedHashMap<>();",
          "50:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     private final Date timestamp;",
          "52:         timestamp = (Date) ConfigUtils.getObject( session, new Date(), \"maven.startTime\" );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:                 LocalSnapshotMetadata snapshotMetadata = snapshots.get( key );",
          "60:                 if ( snapshotMetadata == null )",
          "61:                 {",
          "63:                     snapshots.put( key, snapshotMetadata );",
          "64:                 }",
          "65:                 snapshotMetadata.bind( artifact );",
          "",
          "[Removed Lines]",
          "62:                     snapshotMetadata = new LocalSnapshotMetadata( artifact, legacyFormat );",
          "",
          "[Added Lines]",
          "67:                     snapshotMetadata = new LocalSnapshotMetadata( artifact, legacyFormat, timestamp );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenMetadata.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenMetadata.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenMetadata.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import java.io.Reader;",
          "35: import java.io.Writer;",
          "36: import java.util.Collections;",
          "37: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import java.util.Date;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     static final String MAVEN_METADATA_XML = \"maven-metadata.xml\";",
          "49:     private final File file;",
          "53:     private boolean merged;",
          "56:     {",
          "57:         this.metadata = metadata;",
          "58:         this.file = file;",
          "59:     }",
          "61:     public String getType()",
          "",
          "[Removed Lines]",
          "51:     protected Metadata metadata;",
          "55:     protected MavenMetadata( Metadata metadata, File file )",
          "",
          "[Added Lines]",
          "50:     protected Metadata metadata;",
          "54:     protected final Date timestamp;",
          "58:     protected MavenMetadata( Metadata metadata, File file, Date timestamp )",
          "62:         this.timestamp = timestamp;",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenSnapshotMetadata.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenSnapshotMetadata.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenSnapshotMetadata.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenSnapshotMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.File;",
          "23: import java.util.ArrayList;",
          "24: import java.util.Collection;",
          "26: import org.apache.maven.artifact.repository.metadata.Metadata;",
          "27: import org.eclipse.aether.artifact.Artifact;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.Date;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     protected final boolean legacyFormat;",
          "42:     {",
          "44:         this.legacyFormat = legacyFormat;",
          "45:     }",
          "",
          "[Removed Lines]",
          "41:     protected MavenSnapshotMetadata( Metadata metadata, File file, boolean legacyFormat )",
          "43:         super( metadata, file );",
          "",
          "[Added Lines]",
          "42:     protected MavenSnapshotMetadata( Metadata metadata, File file, boolean legacyFormat, Date timestamp )",
          "44:         super( metadata, file, timestamp );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     private final Map<String, SnapshotVersion> versions = new LinkedHashMap<>();",
          "51:     {",
          "53:     }",
          "56:     {",
          "58:     }",
          "60:     public MavenMetadata setFile( File file )",
          "61:     {",
          "63:     }",
          "65:     public String getExpandedVersion( Artifact artifact )",
          "",
          "[Removed Lines]",
          "50:     RemoteSnapshotMetadata( Artifact artifact, boolean legacyFormat )",
          "52:         super( createRepositoryMetadata( artifact, legacyFormat ), null, legacyFormat );",
          "55:     private RemoteSnapshotMetadata( Metadata metadata, File file, boolean legacyFormat )",
          "57:         super( metadata, file, legacyFormat );",
          "62:         return new RemoteSnapshotMetadata( metadata, file, legacyFormat );",
          "",
          "[Added Lines]",
          "50:     RemoteSnapshotMetadata( Artifact artifact, boolean legacyFormat, Date timestamp )",
          "52:         super( createRepositoryMetadata( artifact, legacyFormat ), null, legacyFormat, timestamp );",
          "55:     private RemoteSnapshotMetadata( Metadata metadata, File file, boolean legacyFormat, Date timestamp )",
          "57:         super( metadata, file, legacyFormat, timestamp );",
          "62:         return new RemoteSnapshotMetadata( metadata, file, legacyFormat, timestamp );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:             snapshot = new Snapshot();",
          "84:             snapshot.setBuildNumber( getBuildNumber( recessive ) + 1 );",
          "87:             Versioning versioning = new Versioning();",
          "88:             versioning.setSnapshot( snapshot );",
          "90:             lastUpdated = versioning.getLastUpdated();",
          "92:             metadata.setVersioning( versioning );",
          "",
          "[Removed Lines]",
          "85:             snapshot.setTimestamp( utcDateFormatter.format( new Date() ) );",
          "89:             versioning.setLastUpdated( snapshot.getTimestamp().replace( \".\", \"\" ) );",
          "",
          "[Added Lines]",
          "85:             snapshot.setTimestamp( utcDateFormatter.format( timestamp ) );",
          "89:             versioning.setLastUpdatedTimestamp( timestamp );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.Collection;",
          "23: import java.util.Collections;",
          "24: import java.util.LinkedHashMap;",
          "25: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.Date;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     private final boolean legacyFormat;",
          "45:     RemoteSnapshotMetadataGenerator( RepositorySystemSession session, DeployRequest request )",
          "46:     {",
          "49:         snapshots = new LinkedHashMap<>();",
          "",
          "[Removed Lines]",
          "47:         legacyFormat = ConfigUtils.getBoolean( session.getConfigProperties(), false, \"maven.metadata.legacy\" );",
          "",
          "[Added Lines]",
          "46:     private final Date timestamp;",
          "50:         legacyFormat = ConfigUtils.getBoolean( session, false, \"maven.metadata.legacy\" );",
          "52:         timestamp = (Date) ConfigUtils.getObject( session, new Date(), \"maven.startTime\" );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:                 RemoteSnapshotMetadata snapshotMetadata = snapshots.get( key );",
          "75:                 if ( snapshotMetadata == null )",
          "76:                 {",
          "78:                     snapshots.put( key, snapshotMetadata );",
          "79:                 }",
          "80:                 snapshotMetadata.bind( artifact );",
          "",
          "[Removed Lines]",
          "77:                     snapshotMetadata = new RemoteSnapshotMetadata( artifact, legacyFormat );",
          "",
          "[Added Lines]",
          "82:                     snapshotMetadata = new RemoteSnapshotMetadata( artifact, legacyFormat, timestamp );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadata.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadata.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadata.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.File;",
          "23: import java.util.ArrayList;",
          "24: import java.util.Collection;",
          "25: import java.util.LinkedHashSet;",
          "27: import org.apache.maven.artifact.repository.metadata.Metadata;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.Date;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     private final Artifact artifact;",
          "42:     {",
          "44:         this.artifact = artifact;",
          "45:     }",
          "48:     {",
          "50:         this.artifact = artifact;",
          "51:     }",
          "",
          "[Removed Lines]",
          "41:     VersionsMetadata( Artifact artifact )",
          "43:         super( createRepositoryMetadata( artifact ), null );",
          "47:     VersionsMetadata( Artifact artifact, File file )",
          "49:         super( createRepositoryMetadata( artifact ), file );",
          "",
          "[Added Lines]",
          "42:     VersionsMetadata( Artifact artifact, Date timestamp )",
          "44:         super( createRepositoryMetadata( artifact ), null, timestamp );",
          "48:     VersionsMetadata( Artifact artifact, File file, Date timestamp )",
          "50:         super( createRepositoryMetadata( artifact ), file, timestamp );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:     protected void merge( Metadata recessive )",
          "77:     {",
          "78:         Versioning versioning = metadata.getVersioning();",
          "81:         if ( recessive.getVersioning() != null )",
          "82:         {",
          "",
          "[Removed Lines]",
          "79:         versioning.updateTimestamp();",
          "",
          "[Added Lines]",
          "80:         versioning.setLastUpdatedTimestamp( timestamp );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:     public MavenMetadata setFile( File file )",
          "109:     {",
          "111:     }",
          "113:     public String getGroupId()",
          "",
          "[Removed Lines]",
          "110:         return new VersionsMetadata( artifact, file );",
          "",
          "[Added Lines]",
          "111:         return new VersionsMetadata( artifact, file, timestamp );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.Collection;",
          "23: import java.util.Collections;",
          "24: import java.util.Iterator;",
          "25: import java.util.LinkedHashMap;",
          "26: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.Date;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import org.eclipse.aether.impl.MetadataGenerator;",
          "32: import org.eclipse.aether.installation.InstallRequest;",
          "33: import org.eclipse.aether.metadata.Metadata;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import org.eclipse.aether.util.ConfigUtils;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:     private Map<Object, VersionsMetadata> processedVersions;",
          "46:     VersionsMetadataGenerator( RepositorySystemSession session, InstallRequest request )",
          "47:     {",
          "48:         this( session, request.getMetadata() );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     private final Date timestamp;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "57:     {",
          "58:         versions = new LinkedHashMap<>();",
          "59:         processedVersions = new LinkedHashMap<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:         timestamp = (Date) ConfigUtils.getObject( session, new Date(), \"maven.startTime\" );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "96:                 VersionsMetadata versionsMetadata = versions.get( key );",
          "97:                 if ( versionsMetadata == null )",
          "98:                 {",
          "100:                     versions.put( key, versionsMetadata );",
          "101:                 }",
          "102:             }",
          "",
          "[Removed Lines]",
          "99:                     versionsMetadata = new VersionsMetadata( artifact );",
          "",
          "[Added Lines]",
          "104:                     versionsMetadata = new VersionsMetadata( artifact, timestamp );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataTest.java||maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataTest.java": [
          "File: maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataTest.java -> maven-resolver-provider/src/test/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         String dateBefore = gregorianDate();",
          "68:         RemoteSnapshotMetadata metadata = new RemoteSnapshotMetadata(",
          "70:         metadata.merge( new Metadata() );",
          "72:         String dateAfter = gregorianDate();",
          "",
          "[Removed Lines]",
          "69:                 new DefaultArtifact( \"a:b:1-SNAPSHOT\" ), false);",
          "",
          "[Added Lines]",
          "69:                 new DefaultArtifact( \"a:b:1-SNAPSHOT\" ), false, new Date() );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "383cabf9e4992eeff36c9b5731d95bafa72398d3",
      "candidate_info": {
        "commit_hash": "383cabf9e4992eeff36c9b5731d95bafa72398d3",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/383cabf9e4992eeff36c9b5731d95bafa72398d3",
        "files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "maven-core/src/test/resources/projects/modelsourcebasedir/pom.xml",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ],
        "message": "[MNG-7216] [Regression] Revert MNG-7170\n\nThis reverts commit 5a8997312680a4b9c69a129801524691bc546c08.\n\nThis closes #524",
        "before_after_code_files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.apache.maven.model.Plugin;",
          "40: import org.apache.maven.model.building.FileModelSource;",
          "41: import org.apache.maven.model.building.ModelBuildingRequest;",
          "44: import org.apache.maven.model.building.ModelSource;",
          "45: import org.apache.maven.shared.utils.io.FileUtils;",
          "",
          "[Removed Lines]",
          "42: import org.apache.maven.model.building.ModelProblem;",
          "43: import org.apache.maven.model.building.ModelProblem.Severity;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:         assertNotNull( result.getProject().getParentFile() );",
          "86:     }",
          "112:     public void testVersionlessManagedDependency()",
          "113:         throws Exception",
          "114:     {",
          "",
          "[Removed Lines]",
          "88:     public void testBuildFromModelSourceResolvesBasedir()",
          "89:         throws Exception",
          "90:     {",
          "91:         File pomFile = new File( \"src/test/resources/projects/modelsourcebasedir/pom.xml\" );",
          "92:         MavenSession mavenSession = createMavenSession( null );",
          "93:         ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();",
          "94:         configuration.setRepositorySession( mavenSession.getRepositorySession() );",
          "95:         ModelSource modelSource = new FileModelSource( pomFile );",
          "96:         ProjectBuildingResult result =",
          "97:             getContainer().lookup( org.apache.maven.project.ProjectBuilder.class ).build( modelSource, configuration );",
          "99:         assertEquals( pomFile.getAbsoluteFile(), result.getProject().getModel().getPomFile().getAbsoluteFile() );",
          "100:         int errors = 0;",
          "101:         for ( ModelProblem p : result.getProblems() )",
          "102:         {",
          "103:             if ( p.getSeverity() == Severity.ERROR )",
          "104:             {",
          "105:                 errors++;",
          "106:             }",
          "107:         }",
          "108:         assertEquals( 0, errors );",
          "109:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:             throw problems.newModelBuildingException();",
          "625:         }",
          "636:         problems.setSource( model );",
          "637:         modelValidator.validateRawModel( model, request, problems );",
          "",
          "[Removed Lines]",
          "627:         if ( pomFile != null )",
          "628:         {",
          "629:             model.setPomFile( pomFile );",
          "630:         }",
          "631:         else if ( modelSource instanceof FileModelSource )",
          "632:         {",
          "633:             model.setPomFile( ( (FileModelSource) modelSource ).getFile() );",
          "634:         }",
          "",
          "[Added Lines]",
          "627:         model.setPomFile( pomFile );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "268f9565746175f5900670e372092e0c071d85bd",
      "candidate_info": {
        "commit_hash": "268f9565746175f5900670e372092e0c071d85bd",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/268f9565746175f5900670e372092e0c071d85bd",
        "files": [
          "apache-maven/src/bin/mvn.cmd",
          "maven-core/src/test/projects/project-builder/it0063/jdk/jre/placeholder.txt",
          "maven-core/src/test/projects/project-dependencies-resolver/it0063/jdk/jre/placeholder.txt"
        ],
        "message": "Use proper term: directory",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: set MAVEN_CMD_LINE_ARGS=%*",
          "78: @REM Fallback to current working directory if not found.",
          "80: set \"MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\"",
          "",
          "[Removed Lines]",
          "77: @REM Find the project basedir, i.e., the directory that contains the folder \".mvn\".",
          "",
          "[Added Lines]",
          "77: @REM Find the project basedir, i.e., the directory that contains the directory \".mvn\".",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c66edc0417f37540b3a6ef4b266ff88bdbd8327",
      "candidate_info": {
        "commit_hash": "8c66edc0417f37540b3a6ef4b266ff88bdbd8327",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8c66edc0417f37540b3a6ef4b266ff88bdbd8327",
        "files": [
          "apache-maven/pom.xml",
          "apache-maven/src/bin/mvn",
          "apache-maven/src/bin/mvn.cmd",
          "apache-maven/src/lib/jansi-native/README.txt",
          "apache-maven/src/main/assembly/.component.xml.swp",
          "apache-maven/src/main/assembly/component.xml"
        ],
        "message": "[MNG-7254] Expand Windows native libraries for Jansi due to JDK-8195129 (workaround)\n\nThis closes #542",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   -classpath %CLASSWORLDS_JAR% ^",
          "175:   \"-Dclassworlds.conf=%MAVEN_HOME%\\bin\\m2.conf\" ^",
          "176:   \"-Dmaven.home=%MAVEN_HOME%\" ^",
          "177:   \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" ^",
          "178:   %CLASSWORLDS_LAUNCHER% %MAVEN_CMD_LINE_ARGS%",
          "179: if ERRORLEVEL 1 goto error",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:   \"-Dlibrary.jansi.path=%MAVEN_HOME%\\lib\\jansi-native\" ^",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9adb3aedf21ca9a49560957e0e1b9125266bb401",
      "candidate_info": {
        "commit_hash": "9adb3aedf21ca9a49560957e0e1b9125266bb401",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/9adb3aedf21ca9a49560957e0e1b9125266bb401",
        "files": [
          "doap_Maven.rdf"
        ],
        "message": "Document Maven 3.8.1 and 3.8.2 releases",
        "before_after_code_files": [
          "doap_Maven.rdf||doap_Maven.rdf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "doap_Maven.rdf||doap_Maven.rdf": [
          "File: doap_Maven.rdf -> doap_Maven.rdf",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     <release>",
          "34:       <Version>",
          "35:         <name>Latest stable release</name>",
          "36:         <created>2019-08-27</created>",
          "37:         <revision>3.6.2</revision>",
          "38:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.zip</file-release>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:         <created>2021-08-04</created>",
          "37:         <revision>3.8.2</revision>",
          "38:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.zip</file-release>",
          "39:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.tar.gz</file-release>",
          "40:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.2/source/apache-maven-3.8.2-src.zip</file-release>",
          "41:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.2/source/apache-maven-3.8.2-src.tar.gz</file-release>",
          "42:       </Version>",
          "43:       <Version>",
          "44:         <name>Latest stable release</name>",
          "45:         <created>2021-04-04</created>",
          "46:         <revision>3.8.1</revision>",
          "47:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.zip</file-release>",
          "48:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz</file-release>",
          "49:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.1/source/apache-maven-3.8.1-src.zip</file-release>",
          "50:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.1/source/apache-maven-3.8.1-src.tar.gz</file-release>",
          "51:       </Version>",
          "52:       <Version>",
          "53:         <name>Apache Maven 3.6.2</name>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b656c72d54e5bacbed989b64718c159fe39b537",
      "candidate_info": {
        "commit_hash": "9b656c72d54e5bacbed989b64718c159fe39b537",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/9b656c72d54e5bacbed989b64718c159fe39b537",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[maven-release-plugin] prepare release maven-3.8.4",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "547dfddb2ef02f44d9f2d0730348eaedfcd2e126",
      "candidate_info": {
        "commit_hash": "547dfddb2ef02f44d9f2d0730348eaedfcd2e126",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/547dfddb2ef02f44d9f2d0730348eaedfcd2e126",
        "files": [
          "apache-maven/pom.xml",
          "apache-maven/src/main/appended-resources/META-INF/LICENSE.vm",
          "apache-maven/src/main/appended-resources/licenses/ASL-2.0.txt",
          "apache-maven/src/main/appended-resources/licenses/Apache-2.0.txt",
          "apache-maven/src/main/assembly/component.xml"
        ],
        "message": "Improve license handling\n\n* Stream line the output of the license listing\n* Exclude jsoup from final distribution since we only need its license information\n* Use proper SPDX ID for our license\n\nThis closes #317",
        "before_after_code_files": [
          "apache-maven/src/main/appended-resources/META-INF/LICENSE.vm||apache-maven/src/main/appended-resources/META-INF/LICENSE.vm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/main/appended-resources/META-INF/LICENSE.vm||apache-maven/src/main/appended-resources/META-INF/LICENSE.vm": [
          "File: apache-maven/src/main/appended-resources/META-INF/LICENSE.vm -> apache-maven/src/main/appended-resources/META-INF/LICENSE.vm",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: ##",
          "24: ##",
          "25: #set ( $apacheMavenGroupIds = [ \"org.apache.maven\", \"org.apache.maven.wagon\", \"org.apache.maven.resolver\",",
          "26:                                 \"org.apache.maven.shared\" ] )",
          "27: #set ( $MITLicenseNames = [ \"MIT License\", \"MIT license\", \"The MIT License\" ] )",
          "28: #foreach ( $project in $projects )",
          "30: #*  *##set ( $groupId = $project.artifact.groupId )",
          "31: #*  *##set ( $directory = 'lib' )",
          "32: #*  *##if ( !$apacheMavenGroupIds.contains( $groupId ) )",
          "33: #*    *### advertise about each non-Maven dependency",
          "34: #*    *###",
          "36: #*    *##if ( $license.name == \"COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\" )",
          "37: #*      *##set ( $spdx = 'CDDL-1.0' )",
          "38: #*    *##elseif ( $MITLicenseNames.contains( $license.name ) )",
          "",
          "[Removed Lines]",
          "21: Apache Maven includes a number of components and libraries with separate",
          "22: copyright notices and license terms. Your use of those components are",
          "23: subject to the terms and conditions of the following licenses:",
          "29: #**##foreach ( $license in $project.licenses)",
          "35: #*    *### infer SPDX license code",
          "",
          "[Added Lines]",
          "21: Apache Maven includes a number of components and libraries with separate",
          "22: copyright notices and license terms. Your use of those components are",
          "23: subject to the terms and conditions of the following licenses:",
          "29: #**##foreach ( $license in $project.licenses )",
          "35: #*    *### infer SPDX license id",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: #*    *##elseif ( $license.name == \"Eclipse Public License, Version 1.0\" )",
          "41: #*      *##set ( $spdx = 'EPL-1.0' )",
          "42: #*    *##elseif ( $license.url.contains( \"www.apache.org/licenses/LICENSE-2.0\" ) )",
          "44: #*    *##else",
          "45: #*      *### unrecognized license will require analysis to know obligations",
          "46: #*      *##set ( $spdx = 'unrecognized' )",
          "",
          "[Removed Lines]",
          "43: #*      *##set ( $spdx = 'ASL-2.0' )",
          "",
          "[Added Lines]",
          "43: #*      *##set ( $spdx = 'Apache-2.0' )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68: #*    *##else",
          "69: #*      *##set ( $downloaded = $locator.getResourceAsFile( \"licenses/${spdx}.txt\", \"licenses/${licFile}\" ) )",
          "70: #*    *##end",
          "71: #*    *### add dependency info to output",
          "73: - $directory/${project.artifact.artifactId}-${project.artifact.version}.jar: $project.artifact.toString().replace( ':eclipse-plugin:', ':jar:' )",
          "75:     #if ( $project.url )Project URL: ${project.url}#end",
          "79: #*  *##end",
          "80: #**##end",
          "",
          "[Removed Lines]",
          "74:     $project.name",
          "77:     License: $license.name#if ( $spdx ) ($spdx)#end  $license.url ($licFile)",
          "",
          "[Added Lines]",
          "75:     Project: $project.name",
          "78:     License: $license.name#if ( $spdx ) ($spdx)#end",
          "80:     License URL: $license.url ($licFile)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab54d17dc2ec355c1e002e8751739edd9a96fcc3",
      "candidate_info": {
        "commit_hash": "ab54d17dc2ec355c1e002e8751739edd9a96fcc3",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/ab54d17dc2ec355c1e002e8751739edd9a96fcc3",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ],
        "message": "[MNG-7253] Display relocation message defined in model\n\nMove logging to DefaultArtifactDescriptorReader\n\nThis closes #544",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java -> maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:         depRequest.setRoot( node );",
          "196:         if ( logger.isDebugEnabled() )",
          "197:         {",
          "198:             node.accept( new GraphLogger( project ) );",
          "",
          "[Removed Lines]",
          "184:         if ( logger.isWarnEnabled() )",
          "185:         {",
          "186:             for ( DependencyNode child : node.getChildren() )",
          "187:             {",
          "188:                 if ( !child.getRelocations().isEmpty() )",
          "189:                 {",
          "190:                     logger.warn( \"The artifact \" + child.getRelocations().get( 0 ) + \" has been relocated to \"",
          "191:                         + child.getDependency().getArtifact() );",
          "192:                 }",
          "193:             }",
          "194:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: import org.eclipse.aether.spi.locator.Service;",
          "69: import org.eclipse.aether.spi.locator.ServiceLocator;",
          "70: import org.eclipse.aether.transfer.ArtifactNotFoundException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: import org.slf4j.Logger;",
          "72: import org.slf4j.LoggerFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: public class DefaultArtifactDescriptorReader",
          "78:     implements ArtifactDescriptorReader, Service",
          "79: {",
          "80:     private RemoteRepositoryManager remoteRepositoryManager;",
          "82:     private VersionResolver versionResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     private static final Logger LOGGER = LoggerFactory.getLogger( DefaultArtifactDescriptorReader.class );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316:             if ( relocation != null )",
          "317:             {",
          "318:                 result.addRelocation( a );",
          "320:                     new RelocatedArtifact( a, relocation.getGroupId(), relocation.getArtifactId(),",
          "321:                                            relocation.getVersion() );",
          "323:             }",
          "324:             else",
          "325:             {",
          "",
          "[Removed Lines]",
          "319:                 a =",
          "322:                 result.setArtifact( a );",
          "",
          "[Added Lines]",
          "323:                 Artifact relocatedArtifact =",
          "326:                 if ( LOGGER.isWarnEnabled() )",
          "327:                 {",
          "328:                     String message = \"The artifact \" + a + \" has been relocated to \" + relocatedArtifact;",
          "329:                     if ( relocation.getMessage() != null )",
          "330:                     {",
          "331:                         message += \": \" + relocation.getMessage();",
          "332:                     }",
          "333:                     LOGGER.warn( message );",
          "334:                 }",
          "335:                 result.setArtifact( relocatedArtifact );",
          "336:                 a = relocatedArtifact;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1b46e233930b46f83bc47c373beb41681bb6972",
      "candidate_info": {
        "commit_hash": "e1b46e233930b46f83bc47c373beb41681bb6972",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/e1b46e233930b46f83bc47c373beb41681bb6972",
        "files": [
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-resolver-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[MNG-7068] Active dependency management for Google Guice/Guava\n\nThis closes #462",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "10a72f30f7bdd19e803820a215383b975a5283ce",
      "candidate_info": {
        "commit_hash": "10a72f30f7bdd19e803820a215383b975a5283ce",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/10a72f30f7bdd19e803820a215383b975a5283ce",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java"
        ],
        "message": "[MNG-7156][MNG-7285] Add locking in MojoExecutor (#628)",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.codehaus.plexus.component.annotations.Component;",
          "40: import org.codehaus.plexus.component.annotations.Requirement;",
          "41: import org.codehaus.plexus.util.StringUtils;",
          "43: import java.util.ArrayList;",
          "44: import java.util.Arrays;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import org.eclipse.aether.SessionData;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: import java.util.Map;",
          "49: import java.util.Set;",
          "50: import java.util.TreeSet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import java.util.concurrent.ConcurrentHashMap;",
          "53: import java.util.concurrent.ConcurrentMap;",
          "54: import java.util.concurrent.locks.Lock;",
          "55: import java.util.concurrent.locks.ReadWriteLock;",
          "56: import java.util.concurrent.locks.ReentrantLock;",
          "57: import java.util.concurrent.locks.ReentrantReadWriteLock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:     @Requirement",
          "77:     private ExecutionEventCatapult eventCatapult;",
          "79:     public MojoExecutor()",
          "80:     {",
          "81:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     private final ReadWriteLock aggregatorLock = new ReentrantReadWriteLock();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:             }",
          "198:         }",
          "200:         List<MavenProject> forkedProjects = executeForkedExecutions( mojoExecution, session, projectIndex );",
          "202:         ensureDependenciesAreResolved( mojoDescriptor, session, dependencyContext );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:         try ( ProjectLock lock = new ProjectLock( session, mojoDescriptor, aggregatorLock ) )",
          "210:         {",
          "211:             doExecute( session, mojoExecution, projectIndex, dependencyContext );",
          "212:         }",
          "213:     }",
          "223:     private static class ProjectLock implements AutoCloseable",
          "224:     {",
          "225:         final Lock acquiredAggregatorLock;",
          "226:         final Lock acquiredProjectLock;",
          "228:         ProjectLock( MavenSession session, MojoDescriptor mojoDescriptor, ReadWriteLock aggregatorLock )",
          "229:         {",
          "230:             if ( session.getRequest().getDegreeOfConcurrency() > 1 )",
          "231:             {",
          "232:                 boolean aggregator = mojoDescriptor.isAggregator();",
          "233:                 acquiredAggregatorLock = aggregator ? aggregatorLock.writeLock() : aggregatorLock.readLock();",
          "234:                 acquiredProjectLock = getProjectLock( session );",
          "235:                 acquiredAggregatorLock.lock();",
          "236:                 acquiredProjectLock.lock();",
          "237:             }",
          "238:             else",
          "239:             {",
          "240:                 acquiredAggregatorLock = null;",
          "241:                 acquiredProjectLock = null;",
          "242:             }",
          "243:         }",
          "245:         @Override",
          "246:         public void close()",
          "247:         {",
          "249:             if ( acquiredProjectLock != null )",
          "250:             {",
          "251:                 acquiredProjectLock.unlock();",
          "252:             }",
          "253:             if ( acquiredAggregatorLock != null )",
          "254:             {",
          "255:                 acquiredAggregatorLock.unlock();",
          "256:             }",
          "257:         }",
          "259:         @SuppressWarnings( { \"unchecked\", \"rawtypes\" } )",
          "260:         private Lock getProjectLock( MavenSession session )",
          "261:         {",
          "262:             SessionData data = session.getRepositorySession().getData();",
          "263:             ConcurrentMap<MavenProject, Lock> locks = ( ConcurrentMap ) data.get( ProjectLock.class );",
          "265:             if ( locks == null )",
          "266:             {",
          "268:                 data.set( ProjectLock.class, null, new ConcurrentHashMap<>() );",
          "269:                 locks = ( ConcurrentMap ) data.get( ProjectLock.class );",
          "270:             }",
          "271:             Lock acquiredProjectLock = locks.get( session.getCurrentProject() );",
          "272:             if ( acquiredProjectLock == null )",
          "273:             {",
          "274:                 acquiredProjectLock = new ReentrantLock();",
          "275:                 Lock prev = locks.putIfAbsent( session.getCurrentProject(), acquiredProjectLock );",
          "276:                 if ( prev != null )",
          "277:                 {",
          "278:                     acquiredProjectLock = prev;",
          "279:                 }",
          "280:             }",
          "281:             return acquiredProjectLock;",
          "282:         }",
          "283:     }",
          "285:     private void doExecute( MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex,",
          "286:                             DependencyContext dependencyContext )",
          "287:             throws LifecycleExecutionException",
          "288:     {",
          "289:         MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import java.util.Collections;",
          "33: import java.util.List;",
          "34: import java.util.Properties;",
          "36: import org.apache.maven.AbstractCoreMavenComponentTestCase;",
          "37: import org.apache.maven.artifact.InvalidArtifactRTException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import java.util.concurrent.atomic.AtomicInteger;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:         assertEquals( 1, results.size() );",
          "120:         MavenProject mavenProject = results.get( 0 ).getProject();",
          "121:         assertEquals( 1, mavenProject.getArtifacts().size() );",
          "122:     }",
          "124:     public void testDontResolveDependencies()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:         final MavenProject project = mavenProject;",
          "125:         final AtomicInteger artifactsResultInAnotherThead = new AtomicInteger();",
          "126:         Thread t = new Thread(new Runnable() {",
          "127:             @Override",
          "128:             public void run() {",
          "129:                 artifactsResultInAnotherThead.set(project.getArtifacts().size());",
          "130:             }",
          "131:         });",
          "132:         t.start();",
          "133:         t.join();",
          "134:         assertEquals( project.getArtifacts().size(), artifactsResultInAnotherThead.get() );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "572d5260b9040bd063b3dc84ce51684b8379df10",
      "candidate_info": {
        "commit_hash": "572d5260b9040bd063b3dc84ce51684b8379df10",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/572d5260b9040bd063b3dc84ce51684b8379df10",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-7428] Upgrade Maven Parent to 35",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "395411fe3184b9692ed16bafa578b40cc0051784",
      "candidate_info": {
        "commit_hash": "395411fe3184b9692ed16bafa578b40cc0051784",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/395411fe3184b9692ed16bafa578b40cc0051784",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
          "maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java",
          "maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ],
        "message": "[MNG-7417] Several classes do not set properties properly for building requests\n\nThis closes #306",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java||maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
          "maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java||maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java",
          "maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java||maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java||maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java -> maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:                     configuration.setProcessPlugins( false );",
          "588:                     configuration.setRepositoryMerging( ProjectBuildingRequest.RepositoryMerging.REQUEST_DOMINANT );",
          "589:                     configuration.setSystemProperties( getSystemProperties() );",
          "590:                     configuration.setRepositorySession( legacySupport.getRepositorySession() );",
          "592:                     project = getProjectBuilder().build( pomArtifact, configuration ).getProject();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:                     configuration.setUserProperties( new Properties() );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java||maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java": [
          "File: maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java -> maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:             .setLocalRepository( request.getLocalRepository() )",
          "144:             .setRemoteRepositories( request.getRemoteRepositories() )",
          "145:             .setPluginArtifactRepositories( request.getPluginArtifactRepositories() )",
          "148:         List<MavenProject> projects = new ArrayList<>();",
          "",
          "[Removed Lines]",
          "146:             .setSystemProperties( executionProperties );",
          "",
          "[Added Lines]",
          "146:             .setSystemProperties( executionProperties )",
          "147:             .setUserProperties( new Properties() );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java||maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java -> maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:     public void testDuplicateDependenciesCauseLastDeclarationToBePickedInLenientMode()",
          "255:         throws Exception",
          "256:     {",
          "258:         assertEquals( 1, ( (List<?>) pom.getValue( \"dependencies\" ) ).size() );",
          "259:         assertEquals( \"0.2\", pom.getValue( \"dependencies[1]/version\" ) );",
          "260:     }",
          "",
          "[Removed Lines]",
          "257:         PomTestWrapper pom = buildPom( \"unique-dependency-key/deps\", true, null );",
          "",
          "[Added Lines]",
          "257:         PomTestWrapper pom = buildPom( \"unique-dependency-key/deps\", true, null, null );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1437:         Properties props = new Properties();",
          "1438:         props.put( \"java.version\", \"1.5.0_15\" );",
          "1441:         assertEquals( 3, pom.getMavenProject().getActiveProfiles().size() );",
          "1442:         assertEquals( \"PASSED\", pom.getValue( \"properties/jdkProperty3\" ) );",
          "1443:         assertEquals( \"PASSED\", pom.getValue( \"properties/jdkProperty2\" ) );",
          "",
          "[Removed Lines]",
          "1440:         PomTestWrapper pom = buildPom( \"jdk-activation\", props );",
          "",
          "[Added Lines]",
          "1440:         PomTestWrapper pom = buildPom( \"jdk-activation\", props, null );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1534:     {",
          "1535:         Properties sysProps = new Properties();",
          "1536:         sysProps.setProperty( \"system.property\", \"PASSED\" );",
          "1538:         assertEquals( \"PASSED\", pom.getValue( \"name\" ) );",
          "1539:     }",
          "",
          "[Removed Lines]",
          "1537:         PomTestWrapper pom = buildPom( \"system-property-interpolation\", sysProps );",
          "",
          "[Added Lines]",
          "1537:         PomTestWrapper pom = buildPom( \"system-property-interpolation\", sysProps, null );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1681:     {",
          "1682:         Properties props = new Properties();",
          "1683:         props.setProperty( \"testProperty\", \"PASSED\" );",
          "1686:         assertEquals( \"PASSED\", pom.getValue( \"properties/interpolatedProperty\" ) );",
          "1687:     }",
          "",
          "[Removed Lines]",
          "1684:         PomTestWrapper pom = buildPom( \"interpolation-cli-wins\", props );",
          "",
          "[Added Lines]",
          "1684:         PomTestWrapper pom = buildPom( \"interpolation-cli-wins\", null, props );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1838:     private PomTestWrapper buildPom( String pomPath, String... profileIds )",
          "1839:         throws Exception",
          "1840:     {",
          "1842:     }",
          "1845:         throws Exception",
          "1846:     {",
          "1848:     }",
          "1852:         throws Exception",
          "1853:     {",
          "1854:         File pomFile = new File( testDirectory, pomPath );",
          "",
          "[Removed Lines]",
          "1841:         return buildPom( pomPath, null, profileIds );",
          "1844:     private PomTestWrapper buildPom( String pomPath, Properties executionProperties, String... profileIds )",
          "1847:         return buildPom( pomPath, false, executionProperties, profileIds );",
          "1850:     private PomTestWrapper buildPom( String pomPath, boolean lenientValidation, Properties executionProperties,",
          "1851:                                      String... profileIds )",
          "",
          "[Added Lines]",
          "1841:         return buildPom( pomPath, null, null, profileIds );",
          "1844:     private PomTestWrapper buildPom( String pomPath, Properties systemProperties, Properties userProperties, String... profileIds )",
          "1847:         return buildPom( pomPath, false, systemProperties, userProperties, profileIds );",
          "1850:     private PomTestWrapper buildPom( String pomPath, boolean lenientValidation, Properties systemProperties,",
          "1851:                                      Properties userProperties, String... profileIds )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1864:         localRepoUrl = \"file://\" + localRepoUrl;",
          "1865:         config.setLocalRepository( repositorySystem.createArtifactRepository( \"local\", localRepoUrl, new DefaultRepositoryLayout(), null, null ) );",
          "1866:         config.setActiveProfileIds( Arrays.asList( profileIds ) );",
          "1869:         config.setValidationLevel( lenientValidation ? ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0",
          "1870:                         : ModelBuildingRequest.VALIDATION_LEVEL_STRICT );",
          "",
          "[Removed Lines]",
          "1867:         config.setSystemProperties( executionProperties );",
          "1868:         config.setUserProperties( executionProperties );",
          "",
          "[Added Lines]",
          "1867:         config.setSystemProperties( systemProperties );",
          "1868:         config.setUserProperties( userProperties );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:                 modelRequest.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );",
          "275:                 modelRequest.setProcessPlugins( false );",
          "276:                 modelRequest.setTwoPhaseBuilding( false );",
          "279:                 modelRequest.setModelCache( DefaultModelCache.newInstance( session ) );",
          "280:                 modelRequest.setModelResolver( new DefaultModelResolver( session, trace.newChild( modelRequest ),",
          "281:                                                                          request.getRequestContext(), artifactResolver,",
          "",
          "[Removed Lines]",
          "277:                 modelRequest.setSystemProperties( toProperties( session.getUserProperties(),",
          "278:                                                                 session.getSystemProperties() ) );",
          "",
          "[Added Lines]",
          "277:                 modelRequest.setSystemProperties( toProperties( session.getSystemProperties() ) );",
          "278:                 modelRequest.setUserProperties( toProperties( session.getUserProperties() ) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:         }",
          "329:     }",
          "332:     {",
          "333:         Properties props = new Properties();",
          "342:         return props;",
          "343:     }",
          "",
          "[Removed Lines]",
          "331:     private Properties toProperties( Map<String, String> dominant, Map<String, String> recessive )",
          "334:         if ( recessive != null )",
          "335:         {",
          "336:             props.putAll( recessive );",
          "337:         }",
          "338:         if ( dominant != null )",
          "339:         {",
          "340:             props.putAll( dominant );",
          "341:         }",
          "",
          "[Added Lines]",
          "331:     private Properties toProperties( Map<String, String> map )",
          "334:         props.putAll( map );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a8997312680a4b9c69a129801524691bc546c08",
      "candidate_info": {
        "commit_hash": "5a8997312680a4b9c69a129801524691bc546c08",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/5a8997312680a4b9c69a129801524691bc546c08",
        "files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "maven-core/src/test/resources/projects/modelsourcebasedir/pom.xml",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ],
        "message": "[MNG-7170] Allow to associate pomFile/${basedir} with DefaultProjectBuilder.build(ModelSource, ...)\n\nActually a subset backport of MNG-5669 (5cdb8332f99a36e5a1da202da43e3c7dfbb49322)\n\nAlso-By: rfscholte <rfscholte@apache.org>\n\nThis closes #478",
        "before_after_code_files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.apache.maven.model.Plugin;",
          "40: import org.apache.maven.model.building.FileModelSource;",
          "41: import org.apache.maven.model.building.ModelBuildingRequest;",
          "42: import org.apache.maven.model.building.ModelSource;",
          "43: import org.apache.maven.shared.utils.io.FileUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import org.apache.maven.model.building.ModelProblem;",
          "43: import org.apache.maven.model.building.ModelProblem.Severity;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:         assertNotNull( result.getProject().getParentFile() );",
          "84:     }",
          "86:     public void testVersionlessManagedDependency()",
          "87:         throws Exception",
          "88:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     public void testBuildFromModelSourceResolvesBasedir()",
          "89:         throws Exception",
          "90:     {",
          "91:         File pomFile = new File( \"src/test/resources/projects/modelsourcebasedir/pom.xml\" );",
          "92:         MavenSession mavenSession = createMavenSession( null );",
          "93:         ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();",
          "94:         configuration.setRepositorySession( mavenSession.getRepositorySession() );",
          "95:         ModelSource modelSource = new FileModelSource( pomFile );",
          "96:         ProjectBuildingResult result =",
          "97:             getContainer().lookup( org.apache.maven.project.ProjectBuilder.class ).build( modelSource, configuration );",
          "99:         assertEquals( pomFile.getAbsoluteFile(), result.getProject().getModel().getPomFile().getAbsoluteFile() );",
          "100:         int errors = 0;",
          "101:         for ( ModelProblem p : result.getProblems() )",
          "102:         {",
          "103:             if ( p.getSeverity() == Severity.ERROR )",
          "104:             {",
          "105:                 errors++;",
          "106:             }",
          "107:         }",
          "108:         assertEquals( 0, errors );",
          "109:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:             File parent = new File( tempDir.toFile(), \"pom.xml\" );",
          "161:             String parentContent = FileUtils.fileRead( parent );",
          "162:             parentContent = parentContent.replaceAll( \"<packaging>pom</packaging>\",",
          "164:             FileUtils.fileWrite( parent, \"UTF-8\", parentContent );",
          "166:             ProjectBuildingResult result = projectBuilder.build( child, configuration );",
          "",
          "[Removed Lines]",
          "163:               \"<packaging>pom</packaging><properties><addedProperty>addedValue</addedProperty></properties>\" );",
          "",
          "[Added Lines]",
          "189:                     \"<packaging>pom</packaging><properties><addedProperty>addedValue</addedProperty></properties>\" );",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:             throw problems.newModelBuildingException();",
          "618:         }",
          "622:         problems.setSource( model );",
          "623:         modelValidator.validateRawModel( model, request, problems );",
          "",
          "[Removed Lines]",
          "620:         model.setPomFile( pomFile );",
          "",
          "[Added Lines]",
          "620:         if ( pomFile != null )",
          "621:         {",
          "622:             model.setPomFile( pomFile );",
          "623:         }",
          "624:         else if ( modelSource instanceof FileModelSource )",
          "625:         {",
          "626:             model.setPomFile( ( (FileModelSource) modelSource ).getFile() );",
          "627:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d862fdd8418f5c27090776f43a14b6cecd3f2f99",
      "candidate_info": {
        "commit_hash": "d862fdd8418f5c27090776f43a14b6cecd3f2f99",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/d862fdd8418f5c27090776f43a14b6cecd3f2f99",
        "files": [
          "apache-maven/src/main/appended-resources/licenses/MIT-slf4j-api-1.7.30.txt",
          "pom.xml"
        ],
        "message": "[MNG-6993] Upgrade SLF4J to 1.7.30\n\nThis closes #380",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "99de6b49ee066c102737e4cb99af4be3edb257df",
      "candidate_info": {
        "commit_hash": "99de6b49ee066c102737e4cb99af4be3edb257df",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/99de6b49ee066c102737e4cb99af4be3edb257df",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java"
        ],
        "message": "[MNG-7380] Don't log non-threadsafe warning if only building a single module\n\nThis closes #655",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         lifecycleDebugLogger.debugProjectPlan( project, executionPlan );",
          "102:         {",
          "103:             final Set<Plugin> unsafePlugins = executionPlan.getNonThreadSafePlugins();",
          "104:             if ( !unsafePlugins.isEmpty() )",
          "",
          "[Removed Lines]",
          "101:         if ( session.getRequest().getDegreeOfConcurrency() > 1 )",
          "",
          "[Added Lines]",
          "101:         if ( session.getRequest().getDegreeOfConcurrency() > 1 && session.getProjects().size() > 1 )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a8acdd8e66de81b4f7f918905976191837bf147",
      "candidate_info": {
        "commit_hash": "7a8acdd8e66de81b4f7f918905976191837bf147",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/7a8acdd8e66de81b4f7f918905976191837bf147",
        "files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java"
        ],
        "message": "[MNG-7181] Make --version support -q",
        "before_after_code_files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java -> maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         return version.toString();",
          "76:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     public static String showVersionMinimal()",
          "79:     {",
          "80:         Properties properties = getBuildProperties();",
          "81:         String version = reduce( properties.getProperty( BUILD_VERSION_PROPERTY ) );",
          "82:         return ( version != null ? version : \"<version unknown>\" );",
          "83:     }",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java -> maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:         if ( cliRequest.commandLine.hasOption( CLIManager.VERSION ) )",
          "435:         {",
          "437:             throw new ExitException( 0 );",
          "438:         }",
          "439:     }",
          "",
          "[Removed Lines]",
          "436:             System.out.println( CLIReportingUtils.showVersion() );",
          "",
          "[Added Lines]",
          "436:             if ( cliRequest.commandLine.hasOption( CLIManager.QUIET ) )",
          "437:             {",
          "438:                 System.out.println( CLIReportingUtils.showVersionMinimal() );",
          "439:             }",
          "440:             else",
          "441:             {",
          "442:                 System.out.println( CLIReportingUtils.showVersion() );",
          "443:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5f6634e17362387282b3867c9b23d4b54fea871",
      "candidate_info": {
        "commit_hash": "e5f6634e17362387282b3867c9b23d4b54fea871",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/e5f6634e17362387282b3867c9b23d4b54fea871",
        "files": [
          "pom.xml"
        ],
        "message": "use Maven Resolver 1.6.2",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "176b272f30c4fbd62013b4702ab28518c21628ac",
      "candidate_info": {
        "commit_hash": "176b272f30c4fbd62013b4702ab28518c21628ac",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/176b272f30c4fbd62013b4702ab28518c21628ac",
        "files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java"
        ],
        "message": "[MNG-7185] Describe explicit and recommended version for VersionRange.createFromVersionSpec()\n\nThis closes #487",
        "before_after_code_files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java||maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java||maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java": [
          "File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java -> maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java"
        ]
      }
    },
    {
      "candidate_hash": "6ddb75138dd6bb41b77fae6d5b3ae789a0c4377d",
      "candidate_info": {
        "commit_hash": "6ddb75138dd6bb41b77fae6d5b3ae789a0c4377d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/6ddb75138dd6bb41b77fae6d5b3ae789a0c4377d",
        "files": [
          "pom.xml"
        ],
        "message": "Remove unnecessary plugin dependency",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "2f144dec13b53d619cf2242448fbf6f9d93db583",
      "candidate_info": {
        "commit_hash": "2f144dec13b53d619cf2242448fbf6f9d93db583",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/2f144dec13b53d619cf2242448fbf6f9d93db583",
        "files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java"
        ],
        "message": "[MNG-6819] Fix NullPointerException in StringVisitorModelInterpolator\n\nCloses #301",
        "before_after_code_files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java -> maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:                 String interpolated = ctx.interpolate( value );",
          "373:                 {",
          "374:                     field.set( target, interpolated );",
          "375:                 }",
          "",
          "[Removed Lines]",
          "372:                 if ( !interpolated.equals( value ) )",
          "",
          "[Added Lines]",
          "372:                 if ( interpolated != null && !interpolated.equals( value ) )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "463:                     {",
          "464:                         String interpolated = ctx.interpolate( (String) value );",
          "467:                         {",
          "468:                             try",
          "469:                             {",
          "",
          "[Removed Lines]",
          "466:                         if ( !interpolated.equals( value ) )",
          "",
          "[Added Lines]",
          "466:                         if ( interpolated != null && !interpolated.equals( value ) )",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java -> maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1424:                     {",
          "1425:                         String value = (String) v;",
          "1426:                         String inter = interpolate( value );",
          "1428:                         {",
          "1429:                             entry.setValue( inter );",
          "1430:                         }",
          "",
          "[Removed Lines]",
          "1427:                         if ( value != inter )",
          "",
          "[Added Lines]",
          "1427:                         if ( value != inter && inter != null )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccafe8bf46ad874ca0cfba6ea5961b34f1630f82",
      "candidate_info": {
        "commit_hash": "ccafe8bf46ad874ca0cfba6ea5961b34f1630f82",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/ccafe8bf46ad874ca0cfba6ea5961b34f1630f82",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-6841] update plexus-interpolation to 1.26",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "b4518b5fe416a552a59e5201b4569a9bc0af3153",
      "candidate_info": {
        "commit_hash": "b4518b5fe416a552a59e5201b4569a9bc0af3153",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/b4518b5fe416a552a59e5201b4569a9bc0af3153",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java",
          "maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java",
          "maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java"
        ],
        "message": "[MNG-7347] SessionScoped beans should be singletons for a given session (#653)",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java",
          "maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java||maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java",
          "maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java||maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:         try",
          "96:         {",
          "",
          "[Removed Lines]",
          "93:         sessionScope.enter( reactorContext.getSessionScopeMemento() );",
          "94:         sessionScope.seed( MavenSession.class, session );",
          "",
          "[Added Lines]",
          "93:         final boolean scoped = session != rootSession;",
          "94:         if ( scoped )",
          "95:         {",
          "96:             sessionScope.enter();",
          "97:             sessionScope.seed( MavenSession.class, session );",
          "98:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:         }",
          "146:         finally",
          "147:         {",
          "150:             session.setCurrentProject( null );",
          "",
          "[Removed Lines]",
          "148:             sessionScope.exit();",
          "",
          "[Added Lines]",
          "152:             if ( scoped )",
          "153:             {",
          "154:                 sessionScope.exit();",
          "155:             }",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:             ClassLoader oldContextClassLoader = Thread.currentThread().getContextClassLoader();",
          "108:             ReactorBuildStatus reactorBuildStatus = new ReactorBuildStatus( session.getProjectDependencyGraph() );",
          "109:             reactorContext =",
          "113:             String builderId = session.getRequest().getBuilderId();",
          "114:             Builder builder = builders.get( builderId );",
          "",
          "[Removed Lines]",
          "110:                 new ReactorContext( result, projectIndex, oldContextClassLoader, reactorBuildStatus,",
          "111:                                     sessionScope.memento() );",
          "",
          "[Added Lines]",
          "110:                 new ReactorContext( result, projectIndex, oldContextClassLoader, reactorBuildStatus );",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.apache.maven.execution.MavenExecutionResult;",
          "",
          "[Removed Lines]",
          "23: import org.apache.maven.session.scope.internal.SessionScope;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     private final ReactorBuildStatus reactorBuildStatus;",
          "45:     public ReactorContext( MavenExecutionResult result, ProjectIndex projectIndex,",
          "48:     {",
          "49:         this.result = result;",
          "50:         this.projectIndex = projectIndex;",
          "51:         this.originalContextClassLoader = originalContextClassLoader;",
          "52:         this.reactorBuildStatus = reactorBuildStatus;",
          "54:     }",
          "56:     public ReactorBuildStatus getReactorBuildStatus()",
          "",
          "[Removed Lines]",
          "43:     private final SessionScope.Memento sessionScope;",
          "46:                            ClassLoader originalContextClassLoader, ReactorBuildStatus reactorBuildStatus,",
          "47:                            SessionScope.Memento sessionScope )",
          "53:         this.sessionScope = sessionScope;",
          "",
          "[Added Lines]",
          "43:                            ClassLoader originalContextClassLoader, ReactorBuildStatus reactorBuildStatus )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         return originalContextClassLoader;",
          "74:     }",
          "83: }",
          "",
          "[Removed Lines]",
          "79:     public SessionScope.Memento getSessionScopeMemento()",
          "80:     {",
          "81:         return sessionScope;",
          "82:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java||maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java": [
          "File: maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java -> maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import com.google.inject.Key;",
          "28: import com.google.inject.OutOfScopeException;",
          "29: import com.google.inject.Provider;",
          "30: import com.google.inject.Scope;",
          "",
          "[Removed Lines]",
          "22: import java.util.Collections;",
          "23: import java.util.HashMap;",
          "24: import java.util.LinkedList;",
          "25: import java.util.Map;",
          "31: import com.google.inject.util.Providers;",
          "",
          "[Added Lines]",
          "22: import java.util.Collection;",
          "23: import java.util.List;",
          "24: import java.util.concurrent.ConcurrentHashMap;",
          "25: import java.util.concurrent.ConcurrentMap;",
          "26: import java.util.concurrent.CopyOnWriteArrayList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: public class SessionScope",
          "37:     implements Scope",
          "38: {",
          "52:     private static final Provider<Object> SEEDED_KEY_PROVIDER = new Provider<Object>()",
          "53:     {",
          "",
          "[Removed Lines]",
          "42:     public static class Memento",
          "43:     {",
          "44:         final Map<Key<?>, Provider<?>> seeded;",
          "46:         Memento( final Map<Key<?>, Provider<?>> seeded )",
          "47:         {",
          "48:             this.seeded = Collections.unmodifiableMap( new HashMap<>( seeded ) );",
          "49:         }",
          "50:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:     {",
          "76:         {",
          "79:         }",
          "81:     }",
          "87:     {",
          "90:     }",
          "93:     {",
          "96:         {",
          "98:         }",
          "100:     }",
          "102:     public void exit()",
          "103:     {",
          "106:         {",
          "107:             throw new IllegalStateException();",
          "108:         }",
          "123:     }",
          "125:     public <T> void seed( Class<T> clazz, Provider<T> value )",
          "126:     {",
          "128:     }",
          "130:     public <T> void seed( Class<T> clazz, final T value )",
          "131:     {",
          "133:     }",
          "135:     public <T> Provider<T> scope( final Key<T> key, final Provider<T> unscoped )",
          "136:     {",
          "137:         return new Provider<T>()",
          "138:         {",
          "140:             public T get()",
          "141:             {",
          "159:                 {",
          "162:                 }",
          "165:             }",
          "167:     }",
          "169:     @SuppressWarnings( { \"unchecked\" } )",
          "",
          "[Removed Lines]",
          "63:     private static final class ScopeState",
          "65:         private final Map<Key<?>, Provider<?>> seeded = new HashMap<>();",
          "67:         private final Map<Key<?>, Object> provided = new HashMap<>();",
          "68:     }",
          "70:     private final ThreadLocal<LinkedList<ScopeState>> values = new ThreadLocal<>();",
          "72:     public void enter()",
          "73:     {",
          "74:         LinkedList<ScopeState> stack = values.get();",
          "75:         if ( stack == null )",
          "77:             stack = new LinkedList<>();",
          "78:             values.set( stack );",
          "80:         stack.addFirst( new ScopeState() );",
          "86:     public void enter( Memento memento )",
          "88:         enter();",
          "89:         getScopeState().seeded.putAll( memento.seeded );",
          "92:     private ScopeState getScopeState()",
          "94:         LinkedList<ScopeState> stack = values.get();",
          "95:         if ( stack == null || stack.isEmpty() )",
          "97:             throw new IllegalStateException();",
          "99:         return stack.getFirst();",
          "104:         final LinkedList<ScopeState> stack = values.get();",
          "105:         if ( stack == null || stack.isEmpty() )",
          "109:         stack.removeFirst();",
          "110:         if ( stack.isEmpty() )",
          "111:         {",
          "112:             values.remove();",
          "113:         }",
          "114:     }",
          "119:     public Memento memento()",
          "120:     {",
          "121:         LinkedList<ScopeState> stack = values.get();",
          "122:         return new Memento( stack != null ? stack.getFirst().seeded : Collections.<Key<?>, Provider<?>>emptyMap() );",
          "127:         getScopeState().seeded.put( Key.get( clazz ), value );",
          "132:         getScopeState().seeded.put( Key.get( clazz ), Providers.of( value ) );",
          "139:             @SuppressWarnings( \"unchecked\" )",
          "142:                 LinkedList<ScopeState> stack = values.get();",
          "143:                 if ( stack == null || stack.isEmpty() )",
          "144:                 {",
          "145:                     throw new OutOfScopeException( \"Cannot access \" + key + \" outside of a scoping block\" );",
          "146:                 }",
          "148:                 ScopeState state = stack.getFirst();",
          "150:                 Provider<?> seeded = state.seeded.get( key );",
          "152:                 if ( seeded != null )",
          "153:                 {",
          "154:                     return (T) seeded.get();",
          "155:                 }",
          "157:                 T provided = (T) state.provided.get( key );",
          "158:                 if ( provided == null && unscoped != null )",
          "160:                     provided = unscoped.get();",
          "161:                     state.provided.put( key, provided );",
          "164:                 return provided;",
          "166:         };",
          "",
          "[Added Lines]",
          "51:     protected static final class ScopeState",
          "53:         private final ConcurrentMap<Key<?>, CachingProvider<?>> provided = new ConcurrentHashMap<>();",
          "55:         public <T> void seed( Class<T> clazz, Provider<T> value )",
          "56:         {",
          "57:             provided.put( Key.get( clazz ), new CachingProvider<>( value ) );",
          "58:         }",
          "60:         @SuppressWarnings( \"unchecked\" )",
          "61:         public <T> Provider<T> scope( Key<T> key, final Provider<T> unscoped )",
          "62:         {",
          "63:             Provider<?> provider = provided.get( key );",
          "64:             if ( provider == null )",
          "65:             {",
          "66:                 CachingProvider<?> newValue = new CachingProvider<>( unscoped );",
          "67:                 provider = provided.putIfAbsent( key, newValue );",
          "68:                 if ( provider == null )",
          "69:                 {",
          "70:                     provider = newValue;",
          "71:                 }",
          "72:             }",
          "73:             return ( Provider<T> ) provider;",
          "74:         }",
          "76:         public Collection<CachingProvider<?>> providers()",
          "78:             return provided.values();",
          "83:     private final List<ScopeState> values = new CopyOnWriteArrayList<>();",
          "85:     public void enter()",
          "87:         values.add( 0, new ScopeState() );",
          "90:     protected ScopeState getScopeState()",
          "92:         if ( values.isEmpty() )",
          "94:             throw new OutOfScopeException( \"Cannot access session scope outside of a scoping block\" );",
          "96:         return values.get( 0 );",
          "101:         if ( values.isEmpty() )",
          "105:         values.remove( 0 );",
          "110:         getScopeState().seed( clazz, value );",
          "115:         seed( clazz, new Provider<T>()",
          "116:         {",
          "117:             @Override",
          "118:             public T get()",
          "119:             {",
          "120:                 return value;",
          "121:             }",
          "122:         } );",
          "130:             @Override",
          "133:                 return getScopeState().scope( key, unscoped ).get();",
          "134:             }",
          "135:         };",
          "136:     }",
          "142:     protected static class CachingProvider<T> implements Provider<T>",
          "143:     {",
          "144:         private final Provider<T> provider;",
          "145:         private volatile T value;",
          "147:         CachingProvider( Provider<T> provider )",
          "148:         {",
          "149:             this.provider = provider;",
          "150:         }",
          "152:         public T value()",
          "153:         {",
          "154:             return value;",
          "155:         }",
          "157:         @Override",
          "158:         public T get()",
          "159:         {",
          "160:             if ( value == null )",
          "161:             {",
          "162:                 synchronized ( this )",
          "164:                     if ( value == null )",
          "165:                     {",
          "166:                         value = provider.get();",
          "167:                     }",
          "170:             return value;",
          "171:         }",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java||maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java -> maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.session.scope.internal;",
          "22: import javax.inject.Provider;",
          "24: import com.google.inject.Key;",
          "25: import com.google.inject.OutOfScopeException;",
          "26: import org.apache.maven.model.locator.DefaultModelLocator;",
          "27: import org.apache.maven.model.locator.ModelLocator;",
          "28: import org.apache.maven.plugin.DefaultPluginRealmCache;",
          "29: import org.apache.maven.plugin.PluginRealmCache;",
          "30: import org.junit.Test;",
          "32: import static org.junit.Assert.assertNotNull;",
          "33: import static org.junit.Assert.assertNotSame;",
          "34: import static org.junit.Assert.assertSame;",
          "35: import static org.junit.Assert.fail;",
          "37: public class SessionScopeTest {",
          "39:     @Test",
          "40:     public void testScope() throws Exception",
          "41:     {",
          "42:         SessionScope scope = new SessionScope();",
          "44:         try",
          "45:         {",
          "46:             scope.seed( ModelLocator.class, new DefaultModelLocator() );",
          "47:             fail( \"Expected a \" + OutOfScopeException.class.getName() + \" exception to be thrown\" );",
          "48:         }",
          "49:         catch ( OutOfScopeException e )",
          "50:         {",
          "52:         }",
          "54:         Provider<ModelLocator> pml = scope.scope( Key.get( ModelLocator.class), new DefaultModelLocatorProvider() );",
          "55:         assertNotNull( pml );",
          "56:         try",
          "57:         {",
          "58:             pml.get();",
          "59:             fail( \"Expected a \" + OutOfScopeException.class.getName() + \" exception to be thrown\" );",
          "60:         }",
          "61:         catch ( OutOfScopeException e )",
          "62:         {",
          "64:         }",
          "66:         Provider<PluginRealmCache> pmst = scope.scope( Key.get( PluginRealmCache.class ), new DefaultPluginRealmCacheProvider() );",
          "67:         assertNotNull( pmst );",
          "69:         scope.enter();",
          "71:         final DefaultModelLocator dml1 = new DefaultModelLocator();",
          "72:         scope.seed( ModelLocator.class, dml1 );",
          "74:         assertSame( dml1, pml.get() );",
          "76:         PluginRealmCache mst1 = pmst.get();",
          "77:         assertSame( mst1, pmst.get() );",
          "78:         Provider<PluginRealmCache> pmst1 = scope.scope( Key.get( PluginRealmCache.class ), new DefaultPluginRealmCacheProvider() );",
          "79:         assertNotNull( pmst1 );",
          "80:         assertSame( mst1, pmst1.get() );",
          "82:         scope.enter();",
          "84:         pmst1 = scope.scope( Key.get( PluginRealmCache.class ), new DefaultPluginRealmCacheProvider() );",
          "85:         assertNotNull( pmst1 );",
          "86:         assertNotSame( mst1, pmst1.get() );",
          "88:         scope.exit();",
          "90:         assertSame( mst1, pmst.get() );",
          "92:         scope.exit();",
          "94:         try",
          "95:         {",
          "96:             pmst.get();",
          "97:             fail( \"Expected a \" + OutOfScopeException.class.getName() + \" exception to be thrown\" );",
          "98:         }",
          "99:         catch ( OutOfScopeException e )",
          "100:         {",
          "102:         }",
          "103:         try",
          "104:         {",
          "105:             scope.seed( ModelLocator.class, new DefaultModelLocator() );",
          "106:             fail( \"Expected a \" + OutOfScopeException.class.getName() + \" exception to be thrown\" );",
          "107:         }",
          "108:         catch ( OutOfScopeException e )",
          "109:         {",
          "111:         }",
          "112:     }",
          "114:     private static class DefaultPluginRealmCacheProvider implements com.google.inject.Provider<PluginRealmCache>",
          "115:     {",
          "116:         @Override",
          "117:         public PluginRealmCache get()",
          "118:         {",
          "119:             return new DefaultPluginRealmCache();",
          "120:         }",
          "121:     }",
          "123:     private static class DefaultModelLocatorProvider implements com.google.inject.Provider<ModelLocator>",
          "124:     {",
          "125:         @Override",
          "126:         public ModelLocator get()",
          "127:         {",
          "128:             return new DefaultModelLocator();",
          "129:         }",
          "130:     }",
          "132: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ae4f7e2c54113192fdd4b7efe8404088f21539f",
      "candidate_info": {
        "commit_hash": "6ae4f7e2c54113192fdd4b7efe8404088f21539f",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/6ae4f7e2c54113192fdd4b7efe8404088f21539f",
        "files": [
          "Jenkinsfile"
        ],
        "message": "Bump Java to 17",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "4dc115967a9ac1522fe01d33de1a3279d52a559a",
      "candidate_info": {
        "commit_hash": "4dc115967a9ac1522fe01d33de1a3279d52a559a",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/4dc115967a9ac1522fe01d33de1a3279d52a559a",
        "files": [
          "doap_Maven.rdf"
        ],
        "message": "Fix DOAP",
        "before_after_code_files": [
          "doap_Maven.rdf||doap_Maven.rdf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "doap_Maven.rdf||doap_Maven.rdf": [
          "File: doap_Maven.rdf -> doap_Maven.rdf",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.2/source/apache-maven-3.8.2-src.tar.gz</file-release>",
          "42:       </Version>",
          "43:       <Version>",
          "45:         <created>2021-04-04</created>",
          "46:         <revision>3.8.1</revision>",
          "47:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.zip</file-release>",
          "",
          "[Removed Lines]",
          "44:         <name>Latest stable release</name>",
          "",
          "[Added Lines]",
          "44:         <name>Apache Maven 3.8.1</name>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68e02c27e167352028ab0f3433fffbbe26bd99c0",
      "candidate_info": {
        "commit_hash": "68e02c27e167352028ab0f3433fffbbe26bd99c0",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/68e02c27e167352028ab0f3433fffbbe26bd99c0",
        "files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/ResolveFile.java"
        ],
        "message": "[MNG-6071] Normalize relative paths for working directory",
        "before_after_code_files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/ResolveFile.java||maven-embedder/src/main/java/org/apache/maven/cli/ResolveFile.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/main/java/org/apache/maven/cli/ResolveFile.java||maven-embedder/src/main/java/org/apache/maven/cli/ResolveFile.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/ResolveFile.java -> maven-embedder/src/main/java/org/apache/maven/cli/ResolveFile.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.File;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.nio.file.Paths;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:         }",
          "44:         else",
          "45:         {",
          "47:         }",
          "48:     }",
          "49: }",
          "",
          "[Removed Lines]",
          "46:             return new File( baseDirectory, file.getPath() ).getAbsoluteFile();",
          "",
          "[Added Lines]",
          "47:             return Paths.get( baseDirectory, file.getPath() ).normalize().toFile();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14ff5dd0dad46169ae2439253ab00e01bca8584c",
      "candidate_info": {
        "commit_hash": "14ff5dd0dad46169ae2439253ab00e01bca8584c",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/14ff5dd0dad46169ae2439253ab00e01bca8584c",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-7177] Upgrade Maven Shared Utils to 3.3.4",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "5060349e676f2133219950f0d670997dacfbad69",
      "candidate_info": {
        "commit_hash": "5060349e676f2133219950f0d670997dacfbad69",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/5060349e676f2133219950f0d670997dacfbad69",
        "files": [
          "maven-embedder/pom.xml"
        ],
        "message": "[MNG-6811] - Remove unnecessary filtering configuration",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "907d53ad3264718f66ff15e1363d76b07dd0c05f",
      "candidate_info": {
        "commit_hash": "907d53ad3264718f66ff15e1363d76b07dd0c05f",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/907d53ad3264718f66ff15e1363d76b07dd0c05f",
        "files": [
          "apache-maven/src/conf/settings.xml"
        ],
        "message": "[MNG-7118] block HTTP repositories by default",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "6aa1f4acf5d6323e9aa08b763cb9933dc96749b9",
      "candidate_info": {
        "commit_hash": "6aa1f4acf5d6323e9aa08b763cb9933dc96749b9",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/6aa1f4acf5d6323e9aa08b763cb9933dc96749b9",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "[maven-release-plugin] prepare release maven-3.8.0",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "8f58b85eaf724a98d1332cfbb3e0a3de58c9587b",
      "candidate_info": {
        "commit_hash": "8f58b85eaf724a98d1332cfbb3e0a3de58c9587b",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8f58b85eaf724a98d1332cfbb3e0a3de58c9587b",
        "files": [
          "apache-maven/src/conf/settings.xml"
        ],
        "message": "[MNG-7064] Use HTTPS for schema location in global settings.xml",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "f568170e361ee2f448227ec4c2bce5a2ab2aa99d",
      "candidate_info": {
        "commit_hash": "f568170e361ee2f448227ec4c2bce5a2ab2aa99d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/f568170e361ee2f448227ec4c2bce5a2ab2aa99d",
        "files": [
          "doap_Maven.rdf"
        ],
        "message": "Update DOAP with Maven 3.8.4 release",
        "before_after_code_files": [
          "doap_Maven.rdf||doap_Maven.rdf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "doap_Maven.rdf||doap_Maven.rdf": [
          "File: doap_Maven.rdf -> doap_Maven.rdf",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     <release>",
          "34:       <Version>",
          "35:         <name>Latest stable release</name>",
          "36:         <created>2021-09-27</created>",
          "37:         <revision>3.8.3</revision>",
          "38:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.zip</file-release>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:         <created>2021-11-14</created>",
          "37:         <revision>3.8.4</revision>",
          "38:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.zip</file-release>",
          "39:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz</file-release>",
          "40:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.4/source/apache-maven-3.8.4-src.zip</file-release>",
          "41:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.4/source/apache-maven-3.8.4-src.tar.gz</file-release>",
          "42:       </Version>",
          "43:       <Version>",
          "44:         <name>Apache Maven 3.8.3</name>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27755123e30d46a73ede29cef5b4c340fcdc3fab",
      "candidate_info": {
        "commit_hash": "27755123e30d46a73ede29cef5b4c340fcdc3fab",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/27755123e30d46a73ede29cef5b4c340fcdc3fab",
        "files": [
          "maven-artifact/src/main/java/org/apache/maven/repository/legacy/metadata/ArtifactMetadata.java",
          "maven-repository-metadata/src/main/mdo/metadata.mdo",
          "maven-repository-metadata/src/site/apt/index.apt"
        ],
        "message": "[MNG-7385] improve repository metadata documentation",
        "before_after_code_files": [
          "maven-artifact/src/main/java/org/apache/maven/repository/legacy/metadata/ArtifactMetadata.java||maven-artifact/src/main/java/org/apache/maven/repository/legacy/metadata/ArtifactMetadata.java",
          "maven-repository-metadata/src/main/mdo/metadata.mdo||maven-repository-metadata/src/main/mdo/metadata.mdo",
          "maven-repository-metadata/src/site/apt/index.apt||maven-repository-metadata/src/site/apt/index.apt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-artifact/src/main/java/org/apache/maven/repository/legacy/metadata/ArtifactMetadata.java||maven-artifact/src/main/java/org/apache/maven/repository/legacy/metadata/ArtifactMetadata.java": [
          "File: maven-artifact/src/main/java/org/apache/maven/repository/legacy/metadata/ArtifactMetadata.java -> maven-artifact/src/main/java/org/apache/maven/repository/legacy/metadata/ArtifactMetadata.java"
        ],
        "maven-repository-metadata/src/main/mdo/metadata.mdo||maven-repository-metadata/src/main/mdo/metadata.mdo": [
          "File: maven-repository-metadata/src/main/mdo/metadata.mdo -> maven-repository-metadata/src/main/mdo/metadata.mdo",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   <id>repository-metadata</id>",
          "25:   <name>Metadata</name>",
          "26:   <description><![CDATA[",
          "32:   </description>",
          "33:   <defaults>",
          "34:     <default>",
          "",
          "[Removed Lines]",
          "27:     <p>Per-directory repository metadata, for directories representing un-versioned artifact, snapshot artifact",
          "28:     or a group containing Maven plugins.</p>",
          "29:     <p>Notice that most metadata content has a meaning when the directory represents",
          "30:     an artifact (<code>groupId</code>, <code>artifactId</code>, <code>versioning</code>), but",
          "31:     <code>plugins</code> is used when the directory represents a group.</p>]]>",
          "",
          "[Added Lines]",
          "27:     <p>Per-directory repository metadata <code>repository-metadata.xml</code>.</p>",
          "28:     <p>A directory may represent 3 types of content: \"groupId\", \"groupId/artifactId\" or \"groupId/artifactId/version\".</p>",
          "29:     <p>Most metadata content has a meaning when the directory represents a \"groupId/artifactId\" (<code>groupId</code>, <code>artifactId</code>, <code>versioning</code>)<p>]]>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:           <name>groupId</name>",
          "52:           <version>1.0.0+</version>",
          "53:           <type>String</type>",
          "55:         </field>",
          "56:         <field>",
          "57:           <name>artifactId</name>",
          "58:           <version>1.0.0+</version>",
          "59:           <type>String</type>",
          "67:         </field>",
          "68:         <field>",
          "69:           <name>versioning</name>",
          "",
          "[Removed Lines]",
          "54:           <description>The groupId that this directory represents, if any.</description>",
          "60:           <description>The artifactId that this directory represents, if any.</description>",
          "61:         </field>",
          "62:         <field>",
          "63:           <name>version</name>",
          "64:           <version>1.0.0+</version>",
          "65:           <type>String</type>",
          "66:           <description>The version that this directory represents, if any. It is used for artifact snapshots only.</description>",
          "",
          "[Added Lines]",
          "52:           <description>The groupId when this directory represents \"groupId/artifactId\" or \"groupId/artifactId/version\".</description>",
          "58:           <description>The artifactId when this directory represents \"groupId/artifactId\" or \"groupId/artifactId/version\".</description>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:           <association>",
          "72:             <type>Versioning</type>",
          "73:           </association>",
          "75:         </field>",
          "76:         <field xdoc.separator=\"blank\">",
          "77:           <name>plugins</name>",
          "78:           <version>1.0.0+</version>",
          "80:           <association>",
          "81:             <type>Plugin</type>",
          "82:             <multiplicity>*</multiplicity>",
          "",
          "[Removed Lines]",
          "74:           <description>Versioning information for the artifact.</description>",
          "79:           <description>The set of plugin mappings for the group represented by this directory</description>",
          "",
          "[Added Lines]",
          "66:           <description>Versioning information when this directory represents \"groupId/artifactId\" or \"groupId/artifactId/version\".</description>",
          "67:         </field>",
          "68:         <field>",
          "69:           <name>version</name>",
          "70:           <version>1.0.0+</version>",
          "71:           <type>String</type>",
          "72:           <description><![CDATA[The base version (ie. ending in <code>-SNAPSHOT</code>) when this directory represents a \"groupId/artifactId/version\" for a SNAPSHOT.]]></description>",
          "77:           <description>The set of plugins when this directory represents a \"groupId\" (deprecated)</description>",
          "78:           <annotations>",
          "79:             <annotation>@Deprecated</annotation>",
          "80:           </annotations>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "213:     <class java.clone=\"deep\">",
          "214:       <name>Versioning</name>",
          "215:       <version>1.0.0+</version>",
          "217:       <fields>",
          "218:         <field>",
          "219:           <name>latest</name>",
          "220:           <version>1.0.0+</version>",
          "221:           <type>String</type>",
          "223:         </field>",
          "224:         <field>",
          "225:           <name>release</name>",
          "226:           <version>1.0.0+</version>",
          "227:           <type>String</type>",
          "237:         </field>",
          "238:         <field>",
          "239:           <name>versions</name>",
          "240:           <version>1.0.0+</version>",
          "242:           <association>",
          "243:             <type>String</type>",
          "244:             <multiplicity>*</multiplicity>",
          "245:           </association>",
          "246:         </field>",
          "248:           <name>lastUpdated</name>",
          "249:           <version>1.0.0+</version>",
          "250:           <type>String</type>",
          "252:         </field>",
          "253:         <field>",
          "254:           <name>snapshotVersions</name>",
          "",
          "[Removed Lines]",
          "216:       <description>Versioning information for an artifact (un-versioned or snapshot)</description>",
          "222:           <description>What the latest version in the directory is, including snapshots</description>",
          "228:           <description>What the latest version in the directory is, of the releases only</description>",
          "229:         </field>",
          "230:         <field>",
          "231:           <name>snapshot</name>",
          "232:           <version>1.0.0+</version>",
          "233:           <association>",
          "234:             <type>Snapshot</type>",
          "235:           </association>",
          "236:           <description>The current snapshot data in use for this version (artifact snapshots only)</description>",
          "241:           <description>Versions available of the artifact (both releases and snapshots)</description>",
          "247:         <field>",
          "251:           <description>When the metadata was last updated</description>",
          "",
          "[Added Lines]",
          "217:       <description>Versioning information for \"groupId/artifactId\" or \"groupId/artifactId/version\" SNAPSHOT</description>",
          "223:           <description>What the last version added to the directory is, including both releases and snapshots (\"groupId/artifactId\" directory only)</description>",
          "229:           <description>What the last version added to the directory is, for the releases only (\"groupId/artifactId\" directory only)</description>",
          "234:           <description>Versions available of the artifact (both releases and snapshots) (\"groupId/artifactId\" directory only)</description>",
          "240:         <field xdoc.separator=\"blank\">",
          "244:           <description>When the metadata was last updated (both \"groupId/artifactId\" and \"groupId/artifactId/version\" directories)</description>",
          "245:         </field>",
          "246:         <field xdoc.separator=\"blank\">",
          "247:           <name>snapshot</name>",
          "248:           <version>1.0.0+</version>",
          "249:           <association>",
          "250:             <type>Snapshot</type>",
          "251:           </association>",
          "252:           <description>The current snapshot data in use for this version (\"groupId/artifactId/version\" only)</description>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "283:     <class java.clone=\"deep\">",
          "284:       <name>Snapshot</name>",
          "285:       <version>1.0.0+</version>",
          "287:       <fields>",
          "288:         <field>",
          "289:           <name>timestamp</name>",
          "",
          "[Removed Lines]",
          "286:       <description>Snapshot data for the current artifact version</description>",
          "",
          "[Added Lines]",
          "287:       <description>Snapshot data for the last artifact corresponding to the SNAPSHOT base version</description>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "322:           <name>extension</name>",
          "323:           <version>1.1.0+</version>",
          "324:           <type>String</type>",
          "326:         </field>",
          "327:         <field xml.tagName=\"value\">",
          "328:           <name>version</name>",
          "",
          "[Removed Lines]",
          "325:           <description>The file extension of thesub-artifact.</description>",
          "",
          "[Added Lines]",
          "326:           <description>The file extension of the sub-artifact.</description>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "338:         </field>",
          "339:       </fields>",
          "340:     </class>",
          "341:     <class java.clone=\"deep\">",
          "342:       <name>Plugin</name>",
          "343:       <version>1.0.0+</version>",
          "345:       <comment>NOTE: plugin version is _NOT_ included here, since it is resolved using a separate algorithm in plugins' artifact.</comment>",
          "346:       <fields>",
          "347:         <field>",
          "",
          "[Removed Lines]",
          "344:       <description>Mapping information for a single plugin within this group</description>",
          "",
          "[Added Lines]",
          "346:       <description>Mapping information for a single plugin within this group (deprecated).</description>",
          "347:       <annotations>",
          "348:         <annotation>@Deprecated</annotation>",
          "349:       </annotations>",
          "",
          "---------------"
        ],
        "maven-repository-metadata/src/site/apt/index.apt||maven-repository-metadata/src/site/apt/index.apt": [
          "File: maven-repository-metadata/src/site/apt/index.apt -> maven-repository-metadata/src/site/apt/index.apt",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  This is strictly the model for Maven Repository Metadata, so really just plain objects.",
          "38:  []",
          "46:  []",
          "48:  The following are generated from this model:",
          "",
          "[Removed Lines]",
          "30:  Maven Repository Metadata is available in directories representing:",
          "32:  [[1]] an un-versioned artifact: it gives informations about available versions of the artifact,",
          "34:  [[2]] a snapshot artifact: it gives precise information on the snapshot,",
          "36:  [[3]] a group containing Maven plugins artifacts: it gives informations on plugins available in this group.",
          "40:  The metadata file name is:",
          "",
          "[Added Lines]",
          "30:  The metadata file name is:",
          "38:  Depending on what the directory represents (\"groupId\", \"groupId/artifactId\" or \"groupId/artifactId/version\"),",
          "39:  the Maven Repository Metadata file contains 3 different sets of metadata:",
          "41:  [[1]] in a \"groupId\" directory: a \"groupId\" directory may contain Maven plugins artifacts, which are described in metadata's <<<plugins>>> element,",
          "43:  [[2]] in a \"groupId/artifactId\" directory: metadata describes <<<groupId>>>, <<<artifactId>>> and <<<versioning>>> element that",
          "44:        gives data about available versions (<<<latest>>>, <<<release>>>, <<<versions>>> list and <<<lastUpdated>>>),",
          "46:  [[3]] in a \"groupId/artifactId/version\" snapshot artifact directory: metadata describes <<<groupId>>>, <<<artifactId>>>, <<<version>>> (base version, i.e. ending in <<<-SNAPSHOT>>>) and",
          "47:        <<<versioning>>> element that gives data about snaphot (<<<snapshot>>>, <<<lastUpdated>>> and <<<snapshotVersions>>> list). Notice that a",
          "48:        release artifact directory is not expected to provide metadata.",
          "58:  Notice: data about plugins in a directory representing a groupId is deprecated and will be removed in a future Maven version.",
          "59: ~~ logic behind this:",
          "60: ~~ 1. MNG-7266: maven-compat will be removed from future Maven version",
          "61: ~~ 2. this will remove the code that updates plugins data: see MNG-7375/MPLUGIN-384 https://maven.apache.org/ref/3.8.4/maven-compat/apidocs/org/apache/maven/artifact/repository/metadata/GroupRepositoryMetadata.html",
          "62: ~~ 3. this will lead to inconsistent data: removing it will be safer/more clear",
          "63: ~~ but this logic still remains to be confirmed by clear consensus of the whole team",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5220420212cd576725c19be09f8b351a9625d11a",
      "candidate_info": {
        "commit_hash": "5220420212cd576725c19be09f8b351a9625d11a",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/5220420212cd576725c19be09f8b351a9625d11a",
        "files": [
          "doap_Maven.rdf"
        ],
        "message": "Update DOAP with Maven 3.8.5 release",
        "before_after_code_files": [
          "doap_Maven.rdf||doap_Maven.rdf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "doap_Maven.rdf||doap_Maven.rdf": [
          "File: doap_Maven.rdf -> doap_Maven.rdf",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     <release>",
          "34:       <Version>",
          "35:         <name>Latest stable release</name>",
          "36:         <created>2021-11-14</created>",
          "37:         <revision>3.8.4</revision>",
          "38:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.zip</file-release>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:         <created>2022-03-05</created>",
          "37:         <revision>3.8.5</revision>",
          "38:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.5/binaries/apache-maven-3.8.5-bin.zip</file-release>",
          "39:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.5/binaries/apache-maven-3.8.5-bin.tar.gz</file-release>",
          "40:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.5/source/apache-maven-3.8.5-src.zip</file-release>",
          "41:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.5/source/apache-maven-3.8.5-src.tar.gz</file-release>",
          "42:       </Version>",
          "43:       <Version>",
          "44:         <name>Apache Maven 3.8.4</name>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41efc134a9067b58a5ab01e9b8b05d2bd84a94f0",
      "candidate_info": {
        "commit_hash": "41efc134a9067b58a5ab01e9b8b05d2bd84a94f0",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/41efc134a9067b58a5ab01e9b8b05d2bd84a94f0",
        "files": [
          "apache-maven/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "pom.xml"
        ],
        "message": "[MNG-6886] upgrade plexus-cipher to 1.8 and update changed groupId (#335)\n\nSigned-off-by: olivier lamy <olamy@apache.org>",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "484e502737a1de00776784516dcf5970734b53f9",
      "candidate_info": {
        "commit_hash": "484e502737a1de00776784516dcf5970734b53f9",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/484e502737a1de00776784516dcf5970734b53f9",
        "files": [
          "maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java"
        ],
        "message": "[MNG-7127] fix MavenCliTest.testStyleColors test in JDK 16\n\nThe MavenCliTest.testStyleColors is not failing when the build\nis under JDK 8 or JDK 11.\n\nAfter changing to JDK 16, the test fails, this commit is to fix\nthe NullPointerException.\n\nTested on JDK 8, 11 adn 16 with:\n\n`mvn clean verify`",
        "before_after_code_files": [
          "maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java||maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java||maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java": [
          "File: maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java -> maven-embedder/src/test/java/org/apache/maven/cli/MavenCliTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:         MessageUtils.setColorEnabled( true );",
          "270:         request = new CliRequest( new String[] { \"-l\", \"target/temp/mvn.log\" }, null );",
          "271:         cli.cli( request );",
          "272:         cli.properties( request );",
          "273:         cli.logging( request );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:         request.workingDirectory = \"target/temp\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "290:         MessageUtils.setColorEnabled( false );",
          "291:         request = new CliRequest( new String[] { \"-Dstyle.color=always\", \"-B\", \"-l\", \"target/temp/mvn.log\" }, null );",
          "292:         cli.cli( request );",
          "293:         cli.properties( request );",
          "294:         cli.logging( request );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:         request.workingDirectory = \"target/temp\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:         {",
          "299:             MessageUtils.setColorEnabled( false );",
          "300:             request = new CliRequest( new String[] { \"-Dstyle.color=maybe\", \"-B\", \"-l\", \"target/temp/mvn.log\" }, null );",
          "301:             cli.cli( request );",
          "302:             cli.properties( request );",
          "303:             cli.logging( request );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:             request.workingDirectory = \"target/temp\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f98e632108f2b9496e306dc4630fa24ca5ca45b9",
      "candidate_info": {
        "commit_hash": "f98e632108f2b9496e306dc4630fa24ca5ca45b9",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/f98e632108f2b9496e306dc4630fa24ca5ca45b9",
        "files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java"
        ],
        "message": "[MNG-7080] Add a --color option to simplify color support",
        "before_after_code_files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java||maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java -> maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     public static final String NO_TRANSFER_PROGRESS = \"ntp\";",
          "106:     protected Options options;",
          "108:     @SuppressWarnings( { \"static-access\", \"checkstyle:linelength\" } )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     public static final String COLOR = \"color\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:         options.addOption( Option.builder( \"cpu\" ).longOpt( \"check-plugin-updates\" ).desc( \"Ineffective, only kept for backward compatibility\" ).build() );",
          "150:         options.addOption( Option.builder( \"up\" ).longOpt( \"update-plugins\" ).desc( \"Ineffective, only kept for backward compatibility\" ).build() );",
          "151:         options.addOption( Option.builder( \"npu\" ).longOpt( \"no-plugin-updates\" ).desc( \"Ineffective, only kept for backward compatibility\" ).build() );",
          "152:     }",
          "154:     public CommandLine parse( String[] args )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:         options.addOption( Option.builder().longOpt( COLOR ).hasArg().desc( \"Defines the color mode of the output. Available options are auto/always/never\" ).build() );",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java -> maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: import java.util.regex.Matcher;",
          "114: import java.util.regex.Pattern;",
          "116: import static org.apache.maven.cli.ResolveFile.resolveFile;",
          "117: import static org.apache.maven.shared.utils.logging.MessageUtils.buffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: import static org.apache.maven.cli.CLIManager.COLOR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "506:         String styleColor = cliRequest.getUserProperties().getProperty( STYLE_COLOR_PROPERTY, \"auto\" );",
          "507:         if ( \"always\".equals( styleColor ) )",
          "508:         {",
          "509:             MessageUtils.setColorEnabled( true );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:         styleColor = cliRequest.commandLine.getOptionValue( COLOR, styleColor );",
          "",
          "---------------"
        ],
        "maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java||maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java": [
          "File: maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java -> maven-embedder/src/test/java/org/apache/maven/cli/CLIManagerDocumentationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     {",
          "47:         public int compare( Option opt1, Option opt2 )",
          "48:         {",
          "50:         }",
          "51:     }",
          "",
          "[Removed Lines]",
          "49:             return opt1.getOpt().compareToIgnoreCase( opt2.getOpt() );",
          "",
          "[Added Lines]",
          "49:             String s1 = opt1.getOpt() != null ? opt1.getOpt() : opt1.getLongOpt();",
          "50:             String s2 = opt2.getOpt() != null ? opt2.getOpt() : opt2.getLongOpt();",
          "51:             return s1.compareToIgnoreCase( s2 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f3c39b8ed1a875ec58ebe91b2b18ca8b64b2fd3",
      "candidate_info": {
        "commit_hash": "0f3c39b8ed1a875ec58ebe91b2b18ca8b64b2fd3",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/0f3c39b8ed1a875ec58ebe91b2b18ca8b64b2fd3",
        "files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java"
        ],
        "message": "[MNG-6802] FileProfileActivator changes FileProfileActivator.exists which lets flattened resolveCiFriendliesOnly depending fail activating profile\n\nCherry picked from 3fabb639a31d6076b1649c1a08828febabddf44a\n\nThis closes #649",
        "before_after_code_files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java||maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java||maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java||maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;",
          "25: import org.apache.maven.artifact.versioning.VersionRange;",
          "26: import org.apache.maven.model.Activation;",
          "27: import org.apache.maven.model.Build;",
          "28: import org.apache.maven.model.Dependency;",
          "29: import org.apache.maven.model.DependencyManagement;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.maven.model.ActivationFile;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.apache.maven.model.normalization.ModelNormalizer;",
          "47: import org.apache.maven.model.path.ModelPathTranslator;",
          "48: import org.apache.maven.model.path.ModelUrlNormalizer;",
          "49: import org.apache.maven.model.plugin.LifecycleBindingsInjector;",
          "50: import org.apache.maven.model.plugin.PluginConfigurationExpander;",
          "51: import org.apache.maven.model.plugin.ReportConfigurationExpander;",
          "52: import org.apache.maven.model.plugin.ReportingConverter;",
          "53: import org.apache.maven.model.profile.DefaultProfileActivationContext;",
          "54: import org.apache.maven.model.profile.ProfileInjector;",
          "55: import org.apache.maven.model.profile.ProfileSelector;",
          "56: import org.apache.maven.model.resolution.InvalidRepositoryException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: import org.apache.maven.model.path.ProfileActivationFilePathInterpolator;",
          "56: import org.apache.maven.model.profile.ProfileActivationContext;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59: import org.apache.maven.model.resolution.WorkspaceModelResolver;",
          "60: import org.apache.maven.model.superpom.SuperPomProvider;",
          "61: import org.apache.maven.model.validation.ModelValidator;",
          "62: import org.codehaus.plexus.interpolation.MapBasedValueSource;",
          "63: import org.codehaus.plexus.interpolation.StringSearchInterpolator;",
          "64: import org.eclipse.sisu.Nullable;",
          "66: import java.io.File;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: import org.codehaus.plexus.interpolation.InterpolationException;",
          "68: import org.codehaus.plexus.util.StringUtils;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:     @Inject",
          "143:     private ReportingConverter reportingConverter;",
          "145:     public DefaultModelBuilder setModelProcessor( ModelProcessor modelProcessor )",
          "146:     {",
          "147:         this.modelProcessor = modelProcessor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:     @Inject",
          "151:     private ProfileActivationFilePathInterpolator profileActivationFilePathInterpolator;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "244:         return this;",
          "245:     }",
          "247:     @SuppressWarnings( \"checkstyle:methodlength\" )",
          "248:     @Override",
          "249:     public ModelBuildingResult build( ModelBuildingRequest request )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:     public DefaultModelBuilder setProfileActivationFilePathInterpolator(",
          "256:             ProfileActivationFilePathInterpolator profileActivationFilePathInterpolator )",
          "257:     {",
          "258:         this.profileActivationFilePathInterpolator = profileActivationFilePathInterpolator;",
          "259:         return this;",
          "260:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "317:                                                                                  profileActivationContext, problems );",
          "318:             currentData.setActiveProfiles( activePomProfiles );",
          "321:             injectProfileActivations( tmpModel, interpolatedActivations );",
          "",
          "[Removed Lines]",
          "320:             Map<String, Activation> interpolatedActivations = getProfileActivations( rawModel, false );",
          "",
          "[Added Lines]",
          "335:             Map<String, Activation> interpolatedActivations = getInterpolatedActivations( rawModel,",
          "336:                                                                                           profileActivationContext,",
          "337:                                                                                           problems );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "440:         return result;",
          "441:     }",
          "443:     @Override",
          "444:     public ModelBuildingResult build( ModelBuildingRequest request, ModelBuildingResult result )",
          "445:         throws ModelBuildingException",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:     private Map<String, Activation> getInterpolatedActivations( Model rawModel,",
          "461:                                                                 DefaultProfileActivationContext context,",
          "462:                                                                 DefaultModelProblemCollector problems )",
          "463:     {",
          "464:         Map<String, Activation> interpolatedActivations = getProfileActivations( rawModel, true );",
          "465:         for ( Activation activation : interpolatedActivations.values() )",
          "466:         {",
          "467:             if ( activation.getFile() != null )",
          "468:             {",
          "469:                 replaceWithInterpolatedValue( activation.getFile(), context, problems );",
          "470:             }",
          "471:         }",
          "472:         return interpolatedActivations;",
          "473:     }",
          "475:     private void replaceWithInterpolatedValue( ActivationFile activationFile, ProfileActivationContext context,",
          "476:                                                DefaultModelProblemCollector problems  )",
          "477:     {",
          "478:         try",
          "479:         {",
          "480:             if ( StringUtils.isNotEmpty( activationFile.getExists() ) )",
          "481:             {",
          "482:                 String path = activationFile.getExists();",
          "483:                 String absolutePath = profileActivationFilePathInterpolator.interpolate( path, context );",
          "484:                 activationFile.setExists( absolutePath );",
          "485:             }",
          "486:             else if ( StringUtils.isNotEmpty( activationFile.getMissing() ) )",
          "487:             {",
          "488:                 String path = activationFile.getMissing();",
          "489:                 String absolutePath = profileActivationFilePathInterpolator.interpolate( path, context );",
          "490:                 activationFile.setMissing( absolutePath );",
          "491:             }",
          "492:         }",
          "493:         catch ( InterpolationException e )",
          "494:         {",
          "495:             String path = StringUtils.isNotEmpty(",
          "496:                     activationFile.getExists() ) ? activationFile.getExists() : activationFile.getMissing();",
          "498:             problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage(",
          "499:                     \"Failed to interpolate file location \" + path + \": \" + e.getMessage() ).setLocation(",
          "500:                     activationFile.getLocation( StringUtils.isNotEmpty( activationFile.getExists() ) ? \"exists\" : \"missing\"  ) )",
          "501:                     .setException( e ) );",
          "502:         }",
          "503:     }",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import org.apache.maven.model.path.ModelPathTranslator;",
          "44: import org.apache.maven.model.path.ModelUrlNormalizer;",
          "45: import org.apache.maven.model.path.PathTranslator;",
          "46: import org.apache.maven.model.path.UrlNormalizer;",
          "47: import org.apache.maven.model.plugin.DefaultPluginConfigurationExpander;",
          "48: import org.apache.maven.model.plugin.DefaultReportConfigurationExpander;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import org.apache.maven.model.path.ProfileActivationFilePathInterpolator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:     protected ProfileActivator[] newProfileActivators()",
          "110:     {",
          "111:         return new ProfileActivator[] { new JdkVersionProfileActivator(), new OperatingSystemProfileActivator(),",
          "113:     }",
          "115:     protected UrlNormalizer newUrlNormalizer()",
          "",
          "[Removed Lines]",
          "112:             new PropertyProfileActivator(), new FileProfileActivator().setPathTranslator( newPathTranslator() ) };",
          "",
          "[Added Lines]",
          "113:             new PropertyProfileActivator(), new FileProfileActivator()",
          "114:                         .setProfileActivationFilePathInterpolator( newProfileActivationFilePathInterpolator() ) };",
          "115:     }",
          "117:     protected ProfileActivationFilePathInterpolator newProfileActivationFilePathInterpolator()",
          "118:     {",
          "119:         return new ProfileActivationFilePathInterpolator().setPathTranslator( newPathTranslator() );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:         modelBuilder.setPluginConfigurationExpander( newPluginConfigurationExpander() );",
          "226:         modelBuilder.setReportConfigurationExpander( newReportConfigurationExpander() );",
          "227:         modelBuilder.setReportingConverter( newReportingConverter() );",
          "229:         return modelBuilder;",
          "230:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:         modelBuilder.setProfileActivationFilePathInterpolator( newProfileActivationFilePathInterpolator() );",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java -> maven-model-builder/src/main/java/org/apache/maven/model/path/ProfileActivationFilePathInterpolator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.model.path;",
          "22: import org.apache.maven.model.ActivationFile;",
          "23: import org.apache.maven.model.profile.ProfileActivationContext;",
          "24: import org.codehaus.plexus.interpolation.AbstractValueSource;",
          "25: import org.codehaus.plexus.interpolation.InterpolationException;",
          "26: import org.codehaus.plexus.interpolation.MapBasedValueSource;",
          "27: import org.codehaus.plexus.interpolation.RegexBasedInterpolator;",
          "29: import javax.inject.Inject;",
          "30: import javax.inject.Named;",
          "31: import javax.inject.Singleton;",
          "32: import java.io.File;",
          "39: @Named",
          "40: @Singleton",
          "41: public class ProfileActivationFilePathInterpolator",
          "42: {",
          "44:     @Inject",
          "45:     private PathTranslator pathTranslator;",
          "47:     public ProfileActivationFilePathInterpolator setPathTranslator( PathTranslator pathTranslator )",
          "48:     {",
          "49:         this.pathTranslator = pathTranslator;",
          "50:         return this;",
          "51:     }",
          "58:     public String interpolate( String path, ProfileActivationContext context ) throws InterpolationException",
          "59:     {",
          "60:         if ( path == null )",
          "61:         {",
          "62:             return null;",
          "63:         }",
          "65:         RegexBasedInterpolator interpolator = new RegexBasedInterpolator();",
          "67:         final File basedir = context.getProjectDirectory();",
          "69:         if ( basedir != null )",
          "70:         {",
          "71:             interpolator.addValueSource( new AbstractValueSource( false )",
          "72:             {",
          "73:                 @Override",
          "74:                 public Object getValue( String expression )",
          "75:                 {",
          "80:                     if ( \"basedir\".equals( expression ) )",
          "81:                     {",
          "82:                         return basedir.getAbsolutePath();",
          "83:                     }",
          "84:                     return null;",
          "85:                 }",
          "86:             } );",
          "87:         }",
          "88:         else if ( path.contains( \"${basedir}\" ) )",
          "89:         {",
          "90:             return null;",
          "91:         }",
          "93:         interpolator.addValueSource( new MapBasedValueSource( context.getProjectProperties() ) );",
          "95:         interpolator.addValueSource( new MapBasedValueSource( context.getUserProperties() ) );",
          "97:         interpolator.addValueSource( new MapBasedValueSource( context.getSystemProperties() ) );",
          "99:         String absolutePath = interpolator.interpolate( path, \"\" );",
          "101:         return pathTranslator.alignToBaseDirectory( absolutePath, basedir );",
          "102:     }",
          "103: }",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java||maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java -> maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.apache.maven.model.Activation;",
          "29: import org.apache.maven.model.ActivationFile;",
          "30: import org.apache.maven.model.Profile;",
          "32: import org.apache.maven.model.building.ModelProblem.Severity;",
          "33: import org.apache.maven.model.building.ModelProblem.Version;",
          "34: import org.apache.maven.model.building.ModelProblemCollectorRequest;",
          "36: import org.apache.maven.model.profile.ProfileActivationContext;",
          "40: import org.codehaus.plexus.util.StringUtils;",
          "",
          "[Removed Lines]",
          "31: import org.apache.maven.model.building.ModelProblemCollector;",
          "35: import org.apache.maven.model.path.PathTranslator;",
          "37: import org.codehaus.plexus.interpolation.AbstractValueSource;",
          "38: import org.codehaus.plexus.interpolation.MapBasedValueSource;",
          "39: import org.codehaus.plexus.interpolation.RegexBasedInterpolator;",
          "",
          "[Added Lines]",
          "33: import org.apache.maven.model.building.ModelProblemCollector;",
          "35: import org.apache.maven.model.path.ProfileActivationFilePathInterpolator;",
          "37: import org.codehaus.plexus.interpolation.InterpolationException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: {",
          "60:     @Inject",
          "64:     {",
          "66:         return this;",
          "67:     }",
          "",
          "[Removed Lines]",
          "61:     private PathTranslator pathTranslator;",
          "63:     public FileProfileActivator setPathTranslator( PathTranslator pathTranslator )",
          "65:         this.pathTranslator = pathTranslator;",
          "",
          "[Added Lines]",
          "59:     private ProfileActivationFilePathInterpolator profileActivationFilePathInterpolator;",
          "61:     public FileProfileActivator setProfileActivationFilePathInterpolator(",
          "62:             ProfileActivationFilePathInterpolator profileActivationFilePathInterpolator )",
          "64:         this.profileActivationFilePathInterpolator = profileActivationFilePathInterpolator;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:             return false;",
          "102:         }",
          "138:         try",
          "139:         {",
          "141:         }",
          "143:         {",
          "144:             problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )",
          "145:                     .setMessage( \"Failed to interpolate file location \" + path + \" for profile \" + profile.getId()",
          "147:                     .setLocation( file.getLocation( missing ? \"missing\" : \"exists\" ) )",
          "148:                     .setException( e ) );",
          "149:             return false;",
          "150:         }",
          "156:         {",
          "162:         }",
          "164:         File f = new File( path );",
          "",
          "[Removed Lines]",
          "104:         RegexBasedInterpolator interpolator = new RegexBasedInterpolator();",
          "106:         final File basedir = context.getProjectDirectory();",
          "108:         if ( basedir != null )",
          "109:         {",
          "110:             interpolator.addValueSource( new AbstractValueSource( false )",
          "111:             {",
          "112:                 @Override",
          "113:                 public Object getValue( String expression )",
          "114:                 {",
          "119:                     if ( \"basedir\".equals( expression ) )",
          "120:                     {",
          "121:                         return basedir.getAbsolutePath();",
          "122:                     }",
          "123:                     return null;",
          "124:                 }",
          "125:             } );",
          "126:         }",
          "127:         else if ( path.contains( \"${basedir}\" ) )",
          "128:         {",
          "129:             return false;",
          "130:         }",
          "132:         interpolator.addValueSource( new MapBasedValueSource( context.getProjectProperties() ) );",
          "134:         interpolator.addValueSource( new MapBasedValueSource( context.getUserProperties() ) );",
          "136:         interpolator.addValueSource( new MapBasedValueSource( context.getSystemProperties() ) );",
          "140:             path = interpolator.interpolate( path, \"\" );",
          "142:         catch ( Exception e )",
          "146:                                  + \": \" + e.getMessage() )",
          "152:         path = pathTranslator.alignToBaseDirectory( path, basedir );",
          "155:         if ( missing )",
          "157:             file.setMissing( path );",
          "158:         }",
          "159:         else",
          "160:         {",
          "161:             file.setExists( path );",
          "",
          "[Added Lines]",
          "105:             path = profileActivationFilePathInterpolator.interpolate( path, context );",
          "107:         catch ( InterpolationException e )",
          "111:                             + \": \" + e.getMessage() )",
          "117:         if ( path == null )",
          "119:             return false;",
          "",
          "---------------"
        ],
        "maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java||maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java": [
          "File: maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java -> maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderFactoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.File;",
          "24: import org.codehaus.plexus.util.xml.Xpp3Dom;",
          "26: import junit.framework.TestCase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.io.FileInputStream;",
          "24: import java.nio.file.Paths;",
          "26: import org.apache.maven.model.Model;",
          "27: import org.apache.maven.model.io.xpp3.MavenXpp3Reader;",
          "32: import org.junit.Test;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     extends TestCase",
          "33: {",
          "35:     private File getPom( String name )",
          "36:     {",
          "38:     }",
          "40:     public void testCompleteWiring()",
          "",
          "[Removed Lines]",
          "37:         return new File( \"src/test/resources/poms/factory/\" + name + \".xml\" ).getAbsoluteFile();",
          "",
          "[Added Lines]",
          "41:     private static final String BASE_DIR = Paths.get( \"src\", \"test\", \"resources\", \"poms\", \"factory\" ).toString();",
          "45:         return new File( Paths.get( BASE_DIR, name + \".xml\"  ).toString() ).getAbsoluteFile();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         assertEquals( \"  1.5  \", conf.getChild( \"target\" ).getValue() );",
          "57:     }",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     @Test",
          "68:     public void testPomChanges() throws Exception",
          "69:     {",
          "70:         ModelBuilder builder = new DefaultModelBuilderFactory().newInstance();",
          "71:         assertNotNull( builder );",
          "72:         File pom = getPom( \"simple\" );",
          "74:         String originalExists = readPom( pom ).getProfiles().get( 1 ).getActivation().getFile().getExists();",
          "76:         DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();",
          "77:         request.setProcessPlugins( true );",
          "78:         request.setPomFile( pom );",
          "79:         ModelBuildingResult result = builder.build( request );",
          "80:         String resultExists = result.getRawModel().getProfiles().get( 1 ).getActivation().getFile().getExists();",
          "82:         assertEquals( originalExists, resultExists );",
          "83:         assertTrue( result.getEffectiveModel().getProfiles().get( 1 ).getActivation().getFile().getExists()",
          "84:                 .contains( BASE_DIR ) );",
          "85:     }",
          "87:     private static Model readPom( File file ) throws Exception",
          "88:     {",
          "89:         MavenXpp3Reader reader = new MavenXpp3Reader();",
          "91:         return reader.read( new FileInputStream( file ) );",
          "92:     }",
          "",
          "---------------"
        ],
        "maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java||maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java": [
          "File: maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java -> maven-model-builder/src/test/java/org/apache/maven/model/profile/activation/FileProfileActivatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.model.profile.activation;",
          "22: import org.apache.maven.model.Activation;",
          "23: import org.apache.maven.model.ActivationFile;",
          "24: import org.apache.maven.model.Profile;",
          "25: import org.apache.maven.model.path.DefaultPathTranslator;",
          "26: import org.apache.maven.model.path.ProfileActivationFilePathInterpolator;",
          "27: import org.apache.maven.model.profile.DefaultProfileActivationContext;",
          "29: import org.junit.Before;",
          "30: import org.junit.Test;",
          "32: import java.nio.file.Files;",
          "33: import java.io.File;",
          "34: import java.io.IOException;",
          "35: import java.nio.file.Path;",
          "42: public class FileProfileActivatorTest extends AbstractProfileActivatorTest<FileProfileActivator>",
          "43: {",
          "44:     Path tempDir;",
          "46:     private final DefaultProfileActivationContext context = new DefaultProfileActivationContext();",
          "48:     public FileProfileActivatorTest()",
          "49:     {",
          "50:         super( FileProfileActivator.class );",
          "51:     }",
          "53:     @Before",
          "54:     public void setUp() throws Exception",
          "55:     {",
          "56:         super.setUp();",
          "58:         tempDir = Files.createTempDirectory( null );",
          "60:         activator.setProfileActivationFilePathInterpolator(",
          "61:                 new ProfileActivationFilePathInterpolator().setPathTranslator( new DefaultPathTranslator() ) );",
          "63:         context.setProjectDirectory( new File( tempDir.toString() ) );",
          "65:         File file = new File( tempDir.resolve( \"file.txt\" ).toString() );",
          "66:         if ( !file.createNewFile() )",
          "67:         {",
          "68:             throw new IOException( \"Can't create \" + file );",
          "69:         }",
          "70:     }",
          "72:     @Test",
          "73:     public void testIsActiveNoFile()",
          "74:     {",
          "75:         assertActivation( false, newExistsProfile( null ), context );",
          "76:         assertActivation( false, newExistsProfile( \"someFile.txt\" ), context );",
          "77:         assertActivation( false, newExistsProfile( \"${basedir}/someFile.txt\" ), context );",
          "79:         assertActivation( false, newMissingProfile( null ), context );",
          "80:         assertActivation( true, newMissingProfile( \"someFile.txt\" ), context );",
          "81:         assertActivation( true, newMissingProfile( \"${basedir}/someFile.txt\" ), context );",
          "82:     }",
          "84:     @Test",
          "85:     public void testIsActiveExistsFileExists()",
          "86:     {",
          "87:         assertActivation( true, newExistsProfile( \"file.txt\" ), context );",
          "88:         assertActivation( true, newExistsProfile( \"${basedir}\" ), context );",
          "89:         assertActivation( true, newExistsProfile( \"${basedir}/\" + \"file.txt\" ), context );",
          "91:         assertActivation( false, newMissingProfile( \"file.txt\" ), context );",
          "92:         assertActivation( false, newMissingProfile( \"${basedir}\" ), context );",
          "93:         assertActivation( false, newMissingProfile( \"${basedir}/\" + \"file.txt\" ), context );",
          "94:     }",
          "96:     @Test",
          "97:     public void testIsActiveExistsLeavesFileUnchanged()",
          "98:     {",
          "99:         Profile profile = newExistsProfile( \"file.txt\" );",
          "100:         assertEquals( \"file.txt\", profile.getActivation().getFile().getExists() );",
          "102:         assertActivation( true, profile, context );",
          "104:         assertEquals( \"file.txt\", profile.getActivation().getFile().getExists() );",
          "105:     }",
          "107:     private Profile newExistsProfile( String filePath )",
          "108:     {",
          "109:         ActivationFile activationFile = new ActivationFile();",
          "110:         activationFile.setExists( filePath );",
          "111:         return newProfile( activationFile );",
          "112:     }",
          "114:     private Profile newMissingProfile( String filePath )",
          "115:     {",
          "116:         ActivationFile activationFile = new ActivationFile();",
          "117:         activationFile.setMissing( filePath );",
          "118:         return newProfile( activationFile );",
          "119:     }",
          "121:     private Profile newProfile( ActivationFile activationFile )",
          "122:     {",
          "123:         Activation activation = new Activation();",
          "124:         activation.setFile( activationFile );",
          "126:         Profile profile = new Profile();",
          "127:         profile.setActivation( activation );",
          "129:         return profile;",
          "130:     }",
          "131: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "100b17e1d7163cd263b7ee6e372ab76b3f87dd08",
      "candidate_info": {
        "commit_hash": "100b17e1d7163cd263b7ee6e372ab76b3f87dd08",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/100b17e1d7163cd263b7ee6e372ab76b3f87dd08",
        "files": [
          "apache-maven/pom.xml",
          "apache-maven/src/main/appended-resources/licenses/MIT-jsoup-1.12.1.txt",
          "apache-maven/src/main/assembly/component.xml",
          "pom.xml"
        ],
        "message": "[MNG-7370] Upgrade Maven Wagon to 3.5.1\n\nThis closes #644",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "a27b4ee595ee48833fa659ee30ff463f26c4a50d",
      "candidate_info": {
        "commit_hash": "a27b4ee595ee48833fa659ee30ff463f26c4a50d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/a27b4ee595ee48833fa659ee30ff463f26c4a50d",
        "files": [
          "maven-model/src/main/mdo/maven.mdo"
        ],
        "message": "[MNG-6987] Reorder groupId before artifactId when writing an exclusion using maven-model\n\nIn most other places, we order the groupId before the artifactId.\nExclusion was the odd one out, so I changed it to be in line with\nthe others.\n\nThis closes #375",
        "before_after_code_files": [
          "maven-model/src/main/mdo/maven.mdo||maven-model/src/main/mdo/maven.mdo"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model/src/main/mdo/maven.mdo||maven-model/src/main/mdo/maven.mdo": [
          "File: maven-model/src/main/mdo/maven.mdo -> maven-model/src/main/mdo/maven.mdo",
          "--- Hunk 1 ---",
          "[Context before]",
          "1191:       </description>",
          "1192:       <fields>",
          "1193:         <field>",
          "1195:           <version>4.0.0+</version>",
          "1197:           <type>String</type>",
          "1198:           <required>true</required>",
          "1199:         </field>",
          "1200:         <field>",
          "1202:           <version>4.0.0+</version>",
          "1204:           <type>String</type>",
          "1205:           <required>true</required>",
          "1206:         </field>",
          "",
          "[Removed Lines]",
          "1194:           <name>artifactId</name>",
          "1196:           <description>The artifact ID of the project to exclude.</description>",
          "1201:           <name>groupId</name>",
          "1203:           <description>The group ID of the project to exclude.</description>",
          "",
          "[Added Lines]",
          "1194:           <name>groupId</name>",
          "1196:           <description>The group ID of the project to exclude.</description>",
          "1201:           <name>artifactId</name>",
          "1203:           <description>The artifact ID of the project to exclude.</description>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b355f72235c0bd26b872601b38a493ed1cc518b",
      "candidate_info": {
        "commit_hash": "7b355f72235c0bd26b872601b38a493ed1cc518b",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/7b355f72235c0bd26b872601b38a493ed1cc518b",
        "files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java"
        ],
        "message": "[MNG-7180] Make --color option behave more like BSD/GNU grep's --color option",
        "before_after_code_files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java -> maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:         options.addOption( Option.builder( \"up\" ).longOpt( \"update-plugins\" ).desc( \"Ineffective, only kept for backward compatibility\" ).build() );",
          "153:         options.addOption( Option.builder( \"npu\" ).longOpt( \"no-plugin-updates\" ).desc( \"Ineffective, only kept for backward compatibility\" ).build() );",
          "156:     }",
          "158:     public CommandLine parse( String[] args )",
          "",
          "[Removed Lines]",
          "155:         options.addOption( Option.builder().longOpt( COLOR ).hasArg().desc( \"Defines the color mode of the output. Available options are auto/always/never\" ).build() );",
          "",
          "[Added Lines]",
          "155:         options.addOption( Option.builder().longOpt( COLOR ).hasArg().optionalArg( true ).desc( \"Defines the color mode of the output. Supported are 'auto', 'always', 'never'.\" ).build() );",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java -> maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "507:         String styleColor = cliRequest.getUserProperties().getProperty( STYLE_COLOR_PROPERTY, \"auto\" );",
          "508:         styleColor = cliRequest.commandLine.getOptionValue( COLOR, styleColor );",
          "510:         {",
          "511:             MessageUtils.setColorEnabled( true );",
          "512:         }",
          "514:         {",
          "515:             MessageUtils.setColorEnabled( false );",
          "516:         }",
          "518:         {",
          "521:         }",
          "522:         else if ( cliRequest.commandLine.hasOption( CLIManager.BATCH_MODE )",
          "523:             || cliRequest.commandLine.hasOption( CLIManager.LOG_FILE ) )",
          "",
          "[Removed Lines]",
          "509:         if ( \"always\".equals( styleColor ) )",
          "513:         else if ( \"never\".equals( styleColor ) )",
          "517:         else if ( !\"auto\".equals( styleColor ) )",
          "519:             throw new IllegalArgumentException( \"Invalid color configuration option [\" + styleColor",
          "520:                 + \"]. Supported values are (auto|always|never).\" );",
          "",
          "[Added Lines]",
          "509:         if ( \"always\".equals( styleColor ) || \"yes\".equals( styleColor ) || \"force\".equals( styleColor ) )",
          "513:         else if ( \"never\".equals( styleColor ) || \"no\".equals( styleColor ) || \"none\".equals( styleColor ) )",
          "517:         else if ( !\"auto\".equals( styleColor ) && !\"tty\".equals( styleColor ) && !\"if-tty\".equals( styleColor ) )",
          "519:             throw new IllegalArgumentException( \"Invalid color configuration value '\" + styleColor",
          "520:                 + \"'. Supported are 'auto', 'always', 'never'.\" );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2891667dda38857ce0b269c0fb097408cca2eea",
      "candidate_info": {
        "commit_hash": "e2891667dda38857ce0b269c0fb097408cca2eea",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/e2891667dda38857ce0b269c0fb097408cca2eea",
        "files": [
          "apache-maven/pom.xml",
          "maven-artifact/pom.xml",
          "maven-builder-support/pom.xml",
          "maven-compat/pom.xml",
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/pom.xml",
          "maven-model/pom.xml",
          "maven-plugin-api/pom.xml",
          "maven-repository-metadata/pom.xml",
          "maven-resolver-provider/pom.xml",
          "maven-settings-builder/pom.xml",
          "maven-settings/pom.xml",
          "maven-slf4j-provider/pom.xml",
          "pom.xml"
        ],
        "message": "Bump version to 3.8.0-SNAPSHOT",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "cfe05372b76217f0439e153e5b29053620e591a0",
      "candidate_info": {
        "commit_hash": "cfe05372b76217f0439e153e5b29053620e591a0",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/cfe05372b76217f0439e153e5b29053620e591a0",
        "files": [
          "pom.xml"
        ],
        "message": "[MNG-7155] upgrade maven-source-plugin from 3.2.0 to 3.2.1",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "7d6f281fe3a4ccdc532c84d421c2680cfb79a68d",
      "candidate_info": {
        "commit_hash": "7d6f281fe3a4ccdc532c84d421c2680cfb79a68d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/7d6f281fe3a4ccdc532c84d421c2680cfb79a68d",
        "files": [
          "maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java"
        ],
        "message": "[MNG-6826] Remove condition check for JDK8+ in FileSizeFormatTest",
        "before_after_code_files": [
          "maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java||maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java||maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java": [
          "File: maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java -> maven-embedder/src/test/java/org/apache/maven/cli/transfer/FileSizeFormatTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.Locale;",
          "26: import org.apache.maven.cli.transfer.AbstractMavenTransferListener.FileSizeFormat;",
          "27: import org.apache.maven.cli.transfer.AbstractMavenTransferListener.FileSizeFormat.ScaleUnit;",
          "29: import static org.junit.Assert.assertEquals;",
          "32: public class FileSizeFormatTest {",
          "",
          "[Removed Lines]",
          "24: import org.apache.commons.lang3.JavaVersion;",
          "25: import org.apache.commons.lang3.SystemUtils;",
          "30: import org.junit.Test;",
          "",
          "[Added Lines]",
          "26: import org.junit.Test;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:         long _50_bytes = 50L;",
          "137:         assertEquals( \"50 B\", format.format( _50_bytes ) );",
          "138:         assertEquals( \"50 B\", format.format( _50_bytes, ScaleUnit.BYTE ) );",
          "143:         assertEquals( \"0 MB\", format.format( _50_bytes, ScaleUnit.MEGABYTE ) );",
          "144:         assertEquals( \"0 GB\", format.format( _50_bytes, ScaleUnit.GIGABYTE ) );",
          "",
          "[Removed Lines]",
          "139:         if ( SystemUtils.isJavaVersionAtLeast( JavaVersion.JAVA_1_8 ) )",
          "140:         {",
          "141:             assertEquals( \"0.1 kB\", format.format( _50_bytes, ScaleUnit.KILOBYTE ) );",
          "142:         }",
          "",
          "[Added Lines]",
          "137:         assertEquals( \"0.1 kB\", format.format( _50_bytes, ScaleUnit.KILOBYTE ) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:         assertEquals( \"50 kB\", format.format( _50_kilobytes ) );",
          "169:         assertEquals( \"50000 B\", format.format( _50_kilobytes, ScaleUnit.BYTE ) );",
          "170:         assertEquals( \"50 kB\", format.format( _50_kilobytes, ScaleUnit.KILOBYTE ) );",
          "175:         assertEquals( \"0 GB\", format.format( _50_kilobytes, ScaleUnit.GIGABYTE ) );",
          "177:         long _999_kilobytes = 999L * 1000L;",
          "",
          "[Removed Lines]",
          "171:         if ( SystemUtils.isJavaVersionAtLeast( JavaVersion.JAVA_1_8 ) )",
          "172:         {",
          "173:             assertEquals( \"0.1 MB\", format.format( _50_kilobytes, ScaleUnit.MEGABYTE ) );",
          "174:         }",
          "",
          "[Added Lines]",
          "166:         assertEquals( \"0.1 MB\", format.format( _50_kilobytes, ScaleUnit.MEGABYTE ) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "200:         assertEquals( \"50000000 B\", format.format( _50_megabytes, ScaleUnit.BYTE ) );",
          "201:         assertEquals( \"50000 kB\", format.format( _50_megabytes, ScaleUnit.KILOBYTE ) );",
          "202:         assertEquals( \"50 MB\", format.format( _50_megabytes, ScaleUnit.MEGABYTE ) );",
          "208:         long _999_megabytes = 999L * 1000L * 1000L;",
          "209:         assertEquals( \"999 MB\", format.format( _999_megabytes ) );",
          "",
          "[Removed Lines]",
          "203:         if ( SystemUtils.isJavaVersionAtLeast( JavaVersion.JAVA_1_8 ) )",
          "204:         {",
          "205:             assertEquals( \"0.1 GB\", format.format( _50_megabytes, ScaleUnit.GIGABYTE ) );",
          "206:         }",
          "",
          "[Added Lines]",
          "195:         assertEquals( \"0.1 GB\", format.format( _50_megabytes, ScaleUnit.GIGABYTE ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "310:          assertEquals( \"15 GB\", format.formatProgress( _15_gigabytes, _15_gigabytes ) );",
          "311:     }",
          "",
          "[Removed Lines]",
          "313: }",
          "",
          "[Added Lines]",
          "302: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ecdb3c970d71de3e48fe4de691388868ac03630",
      "candidate_info": {
        "commit_hash": "7ecdb3c970d71de3e48fe4de691388868ac03630",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/7ecdb3c970d71de3e48fe4de691388868ac03630",
        "files": [
          "apache-maven/src/main/appended-resources/licenses/MIT-slf4j-api-1.7.32.txt",
          "pom.xml"
        ],
        "message": "[MNG-7198] Upgrade SLF4J to 1.7.32",
        "before_after_code_files": []
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {}
    },
    {
      "candidate_hash": "1954d51ff2841045b4af8a515ad0719805269d8d",
      "candidate_info": {
        "commit_hash": "1954d51ff2841045b4af8a515ad0719805269d8d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/1954d51ff2841045b4af8a515ad0719805269d8d",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java",
          "maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java",
          "maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java",
          "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java"
        ],
        "message": "[MNG-7391] add execution strategy+runner required by Maven Build Cache",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java||maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java||maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java",
          "maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java||maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java",
          "maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java||maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java",
          "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java||maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java||maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java||maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java -> maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: @Component( role = DefaultLifecycles.class )",
          "44: public class DefaultLifecycles",
          "45: {",
          "",
          "[Removed Lines]",
          "46:     public static final String[] STANDARD_LIFECYCLES = { \"default\", \"clean\", \"site\" };",
          "",
          "[Added Lines]",
          "46:     public static final String[] STANDARD_LIFECYCLES = { \"clean\", \"default\", \"site\" };",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.codehaus.plexus.util.StringUtils;",
          "36: import org.codehaus.plexus.util.xml.Xpp3Dom;",
          "41: import java.util.HashSet;",
          "42: import java.util.LinkedHashMap;",
          "43: import java.util.List;",
          "",
          "[Removed Lines]",
          "38: import java.util.ArrayList;",
          "39: import java.util.Collections;",
          "40: import java.util.Comparator;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:         Map<Plugin, Plugin> plugins = new LinkedHashMap<>();",
          "102:         {",
          "103:             org.apache.maven.lifecycle.mapping.Lifecycle lifecycleConfiguration =",
          "104:                 lifecycleMappingForPackaging.getLifecycles().get( lifecycle.getId() );",
          "",
          "[Removed Lines]",
          "101:         for ( Lifecycle lifecycle : getOrderedLifecycles() )",
          "",
          "[Added Lines]",
          "98:         for ( Lifecycle lifecycle : defaultLifeCycles.getLifeCycles() )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:         return plugins.keySet();",
          "132:     }",
          "153:     private void parseLifecyclePhaseDefinitions( Map<Plugin, Plugin> plugins, String phase, LifecyclePhase goals )",
          "154:     {",
          "155:         String modelId = \"org.apache.maven:maven-core:\" + this.getClass().getPackage().getImplementationVersion()",
          "",
          "[Removed Lines]",
          "134:     private List<Lifecycle> getOrderedLifecycles()",
          "135:     {",
          "138:         List<Lifecycle> lifecycles = new ArrayList<>( defaultLifeCycles.getLifeCycles() );",
          "140:         Collections.sort( lifecycles, new Comparator<Lifecycle>()",
          "141:         {",
          "143:             public int compare( Lifecycle l1, Lifecycle l2 )",
          "144:             {",
          "145:                 return l1.getId().compareTo( l2.getId() );",
          "146:             }",
          "148:         } );",
          "150:         return lifecycles;",
          "151:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.maven.plugin.MavenPluginManager;",
          "31: import org.apache.maven.plugin.MojoExecution;",
          "32: import org.apache.maven.plugin.MojoExecutionException;",
          "33: import org.apache.maven.plugin.MojoFailureException;",
          "34: import org.apache.maven.plugin.PluginConfigurationException;",
          "35: import org.apache.maven.plugin.PluginIncompatibleException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.apache.maven.plugin.MojoExecutionRunner;",
          "34: import org.apache.maven.plugin.MojosExecutionStrategy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     private final ReadWriteLock aggregatorLock = new ReentrantReadWriteLock();",
          "88:     public MojoExecutor()",
          "89:     {",
          "90:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     @Requirement",
          "91:     private MojosExecutionStrategy mojosExecutionStrategy;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:         return Collections.unmodifiableCollection( scopes );",
          "145:     }",
          "148:         throws LifecycleExecutionException",
          "150:     {",
          "156:         {",
          "159:     }",
          "162:                          DependencyContext dependencyContext, PhaseRecorder phaseRecorder )",
          "163:         throws LifecycleExecutionException",
          "164:     {",
          "",
          "[Removed Lines]",
          "147:     public void execute( MavenSession session, List<MojoExecution> mojoExecutions, ProjectIndex projectIndex )",
          "151:         DependencyContext dependencyContext = newDependencyContext( session, mojoExecutions );",
          "153:         PhaseRecorder phaseRecorder = new PhaseRecorder( session.getCurrentProject() );",
          "155:         for ( MojoExecution mojoExecution : mojoExecutions )",
          "157:             execute( session, mojoExecution, projectIndex, dependencyContext, phaseRecorder );",
          "158:         }",
          "161:     public void execute( MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex,",
          "",
          "[Added Lines]",
          "152:     public void execute( final MavenSession session,",
          "153:                          final List<MojoExecution> mojoExecutions,",
          "154:                          final ProjectIndex projectIndex )",
          "158:         final DependencyContext dependencyContext = newDependencyContext( session, mojoExecutions );",
          "160:         final PhaseRecorder phaseRecorder = new PhaseRecorder( session.getCurrentProject() );",
          "162:         mojosExecutionStrategy.execute( mojoExecutions, session, new MojoExecutionRunner()",
          "164:             @Override",
          "165:             public void run( MojoExecution mojoExecution ) throws LifecycleExecutionException",
          "166:             {",
          "167:                 MojoExecutor.this.execute( session, mojoExecution, projectIndex, dependencyContext, phaseRecorder );",
          "168:             }",
          "169:         } );",
          "172:     private void execute( MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex,",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java||maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java -> maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.plugin;",
          "22: import org.apache.maven.execution.MavenSession;",
          "23: import org.apache.maven.lifecycle.LifecycleExecutionException;",
          "25: import javax.inject.Named;",
          "26: import javax.inject.Singleton;",
          "27: import java.util.List;",
          "32: @Named",
          "33: @Singleton",
          "34: public class DefaultMojosExecutionStrategy implements MojosExecutionStrategy",
          "35: {",
          "36:     @Override",
          "37:     public void execute( List<MojoExecution> mojos, MavenSession session, MojoExecutionRunner mojoRunner )",
          "38:             throws LifecycleExecutionException",
          "39:     {",
          "40:         for ( MojoExecution mojoExecution : mojos )",
          "41:         {",
          "42:             mojoRunner.run( mojoExecution );",
          "43:         }",
          "45:     }",
          "46: }",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java||maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java -> maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.plugin;",
          "22: import org.apache.maven.lifecycle.LifecycleExecutionException;",
          "27: public interface MojoExecutionRunner",
          "28: {",
          "35:     void run( MojoExecution execution ) throws LifecycleExecutionException;",
          "36: }",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java||maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java -> maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.plugin;",
          "22: import org.apache.maven.execution.MavenSession;",
          "23: import org.apache.maven.lifecycle.LifecycleExecutionException;",
          "25: import java.util.List;",
          "31: public interface MojosExecutionStrategy",
          "32: {",
          "42:     void execute( List<MojoExecution> mojos, MavenSession session, MojoExecutionRunner mojoExecutionRunner )",
          "43:             throws LifecycleExecutionException;",
          "45: }",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java||maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java -> maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "499:         ClassRealm pluginRealm = pluginDescriptor.getClassRealm();",
          "501:         if ( logger.isDebugEnabled() )",
          "502:         {",
          "503:             logger.debug( \"Configuring mojo \" + mojoDescriptor.getId() + \" from plugin realm \" + pluginRealm );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501:         if ( pluginRealm == null )",
          "502:         {",
          "503:             try",
          "504:             {",
          "505:                 setupPluginRealm( pluginDescriptor, session, null, null, null );",
          "506:             }",
          "507:             catch ( PluginResolutionException e )",
          "508:             {",
          "509:                 String msg = \"Cannot setup plugin realm [mojoDescriptor=\" + mojoDescriptor.getId()",
          "510:                         + \", pluginDescriptor=\" + pluginDescriptor.getId() + \"]\";",
          "511:                 throw new PluginConfigurationException( pluginDescriptor, msg, e );",
          "512:             }",
          "513:             pluginRealm = pluginDescriptor.getClassRealm();",
          "514:         }",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java||maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java -> maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     {",
          "51:         final List<Lifecycle> cycles = defaultLifeCycles.getLifeCycles();",
          "52:         assertNotNull( cycles );",
          "57:     }",
          "",
          "[Removed Lines]",
          "53:         final Lifecycle lifecycle = cycles.get( 0 );",
          "54:         assertEquals( \"default\", lifecycle.getId() );",
          "55:         assertEquals( 23, lifecycle.getPhases().size() );",
          "",
          "[Added Lines]",
          "53:         final Lifecycle lifecycle0 = cycles.get( 0 );",
          "54:         assertEquals( \"clean\", lifecycle0.getId() );",
          "55:         final Lifecycle lifecycle1 = cycles.get( 1 );",
          "56:         assertEquals( \"default\", lifecycle1.getId() );",
          "57:         assertEquals( 23, lifecycle1.getPhases().size() );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java": [
          "File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java -> maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import org.apache.maven.execution.MavenSession;",
          "19: import org.apache.maven.lifecycle.LifecycleExecutionException;",
          "21: import org.apache.maven.lifecycle.internal.MojoExecutor;",
          "23: import org.apache.maven.lifecycle.internal.ProjectIndex;",
          "24: import org.apache.maven.model.Plugin;",
          "25: import org.apache.maven.plugin.MojoExecution;",
          "26: import org.apache.maven.plugin.descriptor.MojoDescriptor;",
          "27: import org.apache.maven.plugin.descriptor.PluginDescriptor;",
          "29: import java.util.ArrayList;",
          "30: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "20: import org.apache.maven.lifecycle.internal.DependencyContext;",
          "22: import org.apache.maven.lifecycle.internal.PhaseRecorder;",
          "",
          "[Added Lines]",
          "26: import org.apache.maven.project.MavenProject;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     public List<MojoExecution> executions = Collections.synchronizedList( new ArrayList<MojoExecution>() );",
          "42:     @Override",
          "45:         throws LifecycleExecutionException",
          "46:     {",
          "48:     }",
          "50:     @Override",
          "53:     {",
          "55:     }",
          "",
          "[Removed Lines]",
          "43:     public void execute( MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex,",
          "44:                          DependencyContext dependencyContext, PhaseRecorder phaseRecorder )",
          "47:         executions.add( mojoExecution );",
          "51:     public void execute( MavenSession session, List<MojoExecution> mojoExecutions, ProjectIndex projectIndex )",
          "52:         throws LifecycleExecutionException",
          "54:         executions.addAll(mojoExecutions);",
          "",
          "[Added Lines]",
          "42:     public void execute( MavenSession session, List<MojoExecution> mojoExecutions, ProjectIndex projectIndex )",
          "45:         executions.addAll( mojoExecutions );",
          "49:     public List<MavenProject> executeForkedExecutions( MojoExecution mojoExecution, MavenSession session, ProjectIndex projectIndex ) throws LifecycleExecutionException",
          "51:         return null;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28b4ea92d38365d0f27a5bd044ac4927580147f8",
      "candidate_info": {
        "commit_hash": "28b4ea92d38365d0f27a5bd044ac4927580147f8",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/28b4ea92d38365d0f27a5bd044ac4927580147f8",
        "files": [
          "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
          "maven-settings/pom.xml",
          "maven-settings/src/main/mdo/settings.mdo"
        ],
        "message": "[MNG-7117] add support for blocked mirror",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
          "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
            "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo"
          ],
          "candidate": [
            "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
            "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo"
          ]
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java": [
          "File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java -> maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:         DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();",
          "189:         for ( Mirror mirror : request.getMirrors() )",
          "190:         {",
          "193:         }",
          "194:         session.setMirrorSelector( mirrorSelector );",
          "",
          "[Removed Lines]",
          "191:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),",
          "192:                                 mirror.getMirrorOfLayouts() );",
          "",
          "[Added Lines]",
          "191:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.isBlocked(),",
          "192:                                 mirror.getMirrorOf(), mirror.getMirrorOfLayouts() );",
          "",
          "---------------"
        ],
        "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo": [
          "File: maven-settings/src/main/mdo/settings.mdo -> maven-settings/src/main/mdo/settings.mdo",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:             of the mirror to repositories with a matching layout (apart from a matching id). Since Maven 3.",
          "634:           </description>",
          "635:         </field>",
          "636:       </fields>",
          "637:       <codeSegments>",
          "638:         <codeSegment>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:         <field>",
          "637:           <name>blocked</name>",
          "638:           <version>1.2.0+</version>",
          "639:           <type>boolean</type>",
          "640:           <defaultValue>false</defaultValue>",
          "641:           <description>",
          "642:             Whether this mirror should be blocked from any download request but fail the download process, explaining why.",
          "643:           </description>",
          "644:         </field>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "648:         sb.append( \",mirrorOf=\" ).append( mirrorOf );",
          "649:         sb.append( \",url=\" ).append( this.url );",
          "650:         sb.append( \",name=\" ).append( this.name );",
          "651:         sb.append( \"]\" );",
          "652:         return sb.toString();",
          "653:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "660:         if ( isBlocked() )",
          "661:         {",
          "662:             sb.append( \",blocked\" );",
          "663:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}