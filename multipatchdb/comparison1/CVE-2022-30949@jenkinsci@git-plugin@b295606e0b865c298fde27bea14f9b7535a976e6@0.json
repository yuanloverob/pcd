{
  "cve_id": "CVE-2022-30949",
  "cve_desc": "Jenkins REPO Plugin 1.14.0 and earlier allows attackers able to configure pipelines to check out some SCM repositories stored on the Jenkins controller's file system using local paths as SCM URLs, obtaining limited information about other projects' SCM contents.",
  "repo": "jenkinsci/git-plugin",
  "patch_hash": "b295606e0b865c298fde27bea14f9b7535a976e6",
  "patch_info": {
    "commit_hash": "b295606e0b865c298fde27bea14f9b7535a976e6",
    "repo": "jenkinsci/git-plugin",
    "commit_url": "https://github.com/jenkinsci/git-plugin/commit/b295606e0b865c298fde27bea14f9b7535a976e6",
    "files": [
      "src/main/java/hudson/plugins/git/GitSCM.java",
      "src/test/java/hudson/plugins/git/Security2478Test.java",
      "src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java",
      "src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java",
      "src/test/java/jenkins/plugins/git/GitSampleRepoRule.java",
      "src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java"
    ],
    "message": "\u201cSECURITY-2478\u201d",
    "before_after_code_files": [
      "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java",
      "src/test/java/hudson/plugins/git/Security2478Test.java||src/test/java/hudson/plugins/git/Security2478Test.java",
      "src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java||src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java",
      "src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java||src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java",
      "src/test/java/jenkins/plugins/git/GitSampleRepoRule.java||src/test/java/jenkins/plugins/git/GitSampleRepoRule.java",
      "src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java||src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java"
    ]
  },
  "patch_diff": {
    "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java": [
      "File: src/main/java/hudson/plugins/git/GitSCM.java -> src/main/java/hudson/plugins/git/GitSCM.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: import jenkins.model.Jenkins;",
      "53: import jenkins.plugins.git.GitSCMMatrixUtil;",
      "54: import jenkins.plugins.git.GitToolChooser;",
      "55: import net.sf.json.JSONObject;",
      "57: import org.eclipse.jgit.errors.MissingObjectException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "55: import jenkins.util.SystemProperties;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76: import java.io.PrintStream;",
      "77: import java.io.Serializable;",
      "78: import java.io.Writer;",
      "79: import java.text.MessageFormat;",
      "80: import java.util.AbstractList;",
      "81: import java.util.ArrayList;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: import java.nio.file.Files;",
      "81: import java.nio.file.Paths;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "85: import java.util.HashSet;",
      "86: import java.util.Iterator;",
      "87: import java.util.List;",
      "88: import java.util.Map;",
      "89: import java.util.Set;",
      "90: import java.util.logging.Level;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "91: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "120: public class GitSCM extends GitSCMBackwardCompatibility {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:     static final String ALLOW_LOCAL_CHECKOUT_PROPERTY = GitSCM.class.getName() + \".ALLOW_LOCAL_CHECKOUT\";",
      "127:     @SuppressFBWarnings(value = \"MS_SHOULD_BE_FINAL\")",
      "128:     public static /* not final */ boolean ALLOW_LOCAL_CHECKOUT =",
      "129:             SystemProperties.getBoolean(ALLOW_LOCAL_CHECKOUT_PROPERTY);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1269:     public void checkout(Run<?, ?> build, Launcher launcher, FilePath workspace, TaskListener listener, File changelogFile, SCMRevisionState baseline)",
      "1270:             throws IOException, InterruptedException {",
      "1272:         if (VERBOSE)",
      "1273:             listener.getLogger().println(\"Using checkout strategy: \" + getBuildChooser().getDisplayName());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1281:         if (!ALLOW_LOCAL_CHECKOUT && !workspace.isRemote()) {",
      "1282:             abortIfSourceIsLocal();",
      "1283:         }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1380:         }",
      "1381:     }",
      "1383:     private void printCommitMessageToLog(TaskListener listener, GitClient git, final Build revToBuild)",
      "1384:             throws IOException {",
      "1385:         try {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1396:     private void abortIfSourceIsLocal() throws AbortException {",
      "1397:         for (UserRemoteConfig userRemoteConfig: getUserRemoteConfigs()) {",
      "1398:             String remoteUrl = userRemoteConfig.getUrl();",
      "1399:             if (remoteUrl != null && (remoteUrl.toLowerCase(Locale.ENGLISH).startsWith(\"file://\") || Files.exists(Paths.get(remoteUrl)))) {",
      "1400:                 throw new AbortException(\"Checkout of Git remote '\" + remoteUrl + \"' aborted because it references a local directory, \" +",
      "1401:                         \"which may be insecure. You can allow local checkouts anyway by setting the system property '\" +",
      "1402:                         ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\");",
      "1403:             }",
      "1404:         }",
      "1405:     }",
      "",
      "---------------"
    ],
    "src/test/java/hudson/plugins/git/Security2478Test.java||src/test/java/hudson/plugins/git/Security2478Test.java": [
      "File: src/test/java/hudson/plugins/git/Security2478Test.java -> src/test/java/hudson/plugins/git/Security2478Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.plugins.git;",
      "3: import hudson.model.Result;",
      "4: import jenkins.plugins.git.GitSampleRepoRule;",
      "5: import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition;",
      "6: import org.jenkinsci.plugins.workflow.job.WorkflowJob;",
      "7: import org.jenkinsci.plugins.workflow.job.WorkflowRun;",
      "8: import org.junit.After;",
      "9: import org.junit.Before;",
      "10: import org.junit.Rule;",
      "11: import org.junit.Test;",
      "12: import org.jvnet.hudson.test.Issue;",
      "13: import org.jvnet.hudson.test.JenkinsRule;",
      "15: import java.io.File;",
      "17: import static org.junit.Assert.assertFalse;",
      "19: public class Security2478Test {",
      "21:     @Rule",
      "22:     public JenkinsRule rule = new JenkinsRule();",
      "24:     @Rule",
      "25:     public GitSampleRepoRule sampleRepo = new GitSampleRepoRule();",
      "28:     @Before",
      "29:     public void setUpAllowNonRemoteCheckout() {",
      "30:         GitSCM.ALLOW_LOCAL_CHECKOUT = false;",
      "31:     }",
      "33:     @After",
      "34:     public void disallowNonRemoteCheckout() {",
      "35:         GitSCM.ALLOW_LOCAL_CHECKOUT = false;",
      "36:     }",
      "38:     @Issue(\"SECURITY-2478\")",
      "39:     @Test",
      "40:     public void checkoutShouldNotAbortWhenLocalSourceAndRunningOnAgent() throws Exception {",
      "41:         assertFalse(\"Non Remote checkout should be disallowed\", GitSCM.ALLOW_LOCAL_CHECKOUT);",
      "42:         rule.createOnlineSlave();",
      "43:         sampleRepo.init();",
      "44:         sampleRepo.write(\"file\", \"v1\");",
      "45:         sampleRepo.git(\"commit\", \"--all\", \"--message=test commit\");",
      "46:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
      "48:         String script = \"node('slave0') {\\n\" +",
      "49:                 \"   checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: '\" + sampleRepo.fileUrl() + \"', credentialsId: '']]])\\n\" +",
      "50:                 \"}\";",
      "51:         p.setDefinition(new CpsFlowDefinition(script, true));",
      "52:         WorkflowRun run = rule.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0));",
      "53:         rule.assertLogNotContains(\"aborted because it references a local directory, which may be insecure. \" +",
      "54:                 \"You can allow local checkouts anyway by setting the system property 'hudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT' to true.\", run);",
      "55:     }",
      "57:     @Issue(\"SECURITY-2478\")",
      "58:     @Test",
      "59:     public void checkoutShouldAbortWhenSourceIsNonRemoteAndRunningOnController() throws Exception {",
      "60:         assertFalse(\"Non Remote checkout should be disallowed\", GitSCM.ALLOW_LOCAL_CHECKOUT);",
      "61:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
      "62:         String workspaceDir = rule.jenkins.getRootDir().getAbsolutePath();",
      "64:         String path = \"file://\" + workspaceDir + File.separator + \"jobName@script\" + File.separator + \"anyhmachash\";",
      "65:         String escapedPath = path.replace(\"\\\\\", \"\\\\\\\\\"); // for windows",
      "66:         String script = \"node {\\n\" +",
      "67:                 \"   checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[\" +",
      "68:                 \"url: '\" + escapedPath + \"',\" +",
      "69:                 \" credentialsId: '']]])\\n\" +",
      "70:                 \"}\";",
      "71:         p.setDefinition(new CpsFlowDefinition(script, true));",
      "72:         WorkflowRun run = rule.assertBuildStatus(Result.FAILURE, p.scheduleBuild2(0));",
      "73:         rule.assertLogContains(\"Checkout of Git remote '\" + path + \"' \" +",
      "74:                         \"aborted because it references a local directory, which may be insecure. \" +",
      "75:                         \"You can allow local checkouts anyway by setting the system property 'hudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT' to true.\", run);",
      "76:     }",
      "77: }",
      "",
      "---------------"
    ],
    "src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java||src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java": [
      "File: src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java -> src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: import hudson.plugins.git.GitSCM;",
      "6: import hudson.plugins.git.TestGitRepo;",
      "7: import hudson.util.StreamTaskListener;",
      "8: import org.junit.Before;",
      "9: import org.junit.ClassRule;",
      "10: import org.junit.Rule;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: import org.junit.After;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38:   before();",
      "39:  }",
      "41:  protected abstract void before() throws Exception;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42:  @Before",
      "43:  public void allowNonRemoteCheckout() {",
      "44:   GitSCM.ALLOW_LOCAL_CHECKOUT = true;",
      "45:  }",
      "47:  @After",
      "48:  public void disallowNonRemoteCheckout() {",
      "49:   GitSCM.ALLOW_LOCAL_CHECKOUT = false;",
      "50:  }",
      "",
      "---------------"
    ],
    "src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java||src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java": [
      "File: src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java -> src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: import java.util.logging.Level;",
      "29: import java.util.logging.Logger;",
      "31: import org.apache.commons.io.FileUtils;",
      "32: import org.jenkinsci.plugins.gitclient.GitClient;",
      "33: import org.jenkinsci.plugins.gitclient.TestCliGitAPIImpl;",
      "34: import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition;",
      "35: import org.jenkinsci.plugins.workflow.job.WorkflowJob;",
      "36: import org.jenkinsci.plugins.workflow.job.WorkflowRun;",
      "37: import org.junit.Assert;",
      "38: import org.junit.Before;",
      "39: import org.junit.Rule;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: import hudson.plugins.git.GitSCM;",
      "38: import org.junit.After;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "63:         listener = new LogTaskListener(Logger.getLogger(\"prune tags\"), Level.FINEST);",
      "64:     }",
      "66:     @Issue(\"JENKINS-61869\")",
      "67:     @Test",
      "68:     public void verify_that_local_tag_is_pruned_when_not_exist_on_remote_using_pipeline() throws Exception {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "68:     @Before",
      "69:     public void allowNonRemoteCheckout() {",
      "70:         GitSCM.ALLOW_LOCAL_CHECKOUT = true;",
      "71:     }",
      "73:     @After",
      "74:     public void disallowNonRemoteCheckout() {",
      "75:         GitSCM.ALLOW_LOCAL_CHECKOUT = false;",
      "76:     }",
      "",
      "---------------"
    ],
    "src/test/java/jenkins/plugins/git/GitSampleRepoRule.java||src/test/java/jenkins/plugins/git/GitSampleRepoRule.java": [
      "File: src/test/java/jenkins/plugins/git/GitSampleRepoRule.java -> src/test/java/jenkins/plugins/git/GitSampleRepoRule.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: import com.gargoylesoftware.htmlunit.util.NameValuePair;",
      "29: import hudson.Launcher;",
      "30: import hudson.model.TaskListener;",
      "31: import hudson.util.StreamTaskListener;",
      "32: import java.io.ByteArrayOutputStream;",
      "33: import java.io.File;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: import hudson.plugins.git.GitSCM;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "49:     private static final Logger LOGGER = Logger.getLogger(GitSampleRepoRule.class.getName());",
      "51:     public void git(String... cmds) throws Exception {",
      "52:         run(\"git\", cmds);",
      "53:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     protected void before() throws Throwable {",
      "53:         super.before();",
      "54:         GitSCM.ALLOW_LOCAL_CHECKOUT = true;",
      "55:     }",
      "57:     protected void after() {",
      "58:         super.after();",
      "59:         GitSCM.ALLOW_LOCAL_CHECKOUT = false;",
      "60:     }",
      "",
      "---------------"
    ],
    "src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java||src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java": [
      "File: src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java -> src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import hudson.model.Job;",
      "4: import hudson.model.Queue;",
      "5: import hudson.model.Run;",
      "6: import hudson.plugins.git.util.BuildData;",
      "7: import jenkins.model.ParameterizedJobMixIn;",
      "8: import org.jenkinsci.plugins.gitclient.Git;",
      "9: import org.jenkinsci.plugins.gitclient.GitClient;",
      "10: import org.junit.Before;",
      "11: import org.junit.Rule;",
      "12: import org.junit.Test;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import hudson.plugins.git.GitSCM;",
      "11: import org.junit.After;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:         repo.init();",
      "49:     }",
      "51:     @Test",
      "52:     public void commitWithoutTagShouldNotExportMessage() throws Exception {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53:     @Before",
      "54:     public void allowNonRemoteCheckout() {",
      "55:         GitSCM.ALLOW_LOCAL_CHECKOUT = true;",
      "56:     }",
      "58:     @After",
      "59:     public void disallowNonRemoteCheckout() {",
      "60:         GitSCM.ALLOW_LOCAL_CHECKOUT = false;",
      "61:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1ce443c6022759c55e8a9d0ffa1d748666fe004b",
      "candidate_info": {
        "commit_hash": "1ce443c6022759c55e8a9d0ffa1d748666fe004b",
        "repo": "jenkinsci/git-plugin",
        "commit_url": "https://github.com/jenkinsci/git-plugin/commit/1ce443c6022759c55e8a9d0ffa1d748666fe004b",
        "files": [
          "src/main/java/hudson/plugins/git/GitSCM.java",
          "src/test/java/hudson/plugins/git/GitSCMUnitTest.java"
        ],
        "message": "[JENKINS-68562] Add unit test for HTTPS remote URLs",
        "before_after_code_files": [
          "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java",
          "src/test/java/hudson/plugins/git/GitSCMUnitTest.java||src/test/java/hudson/plugins/git/GitSCMUnitTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java"
          ],
          "candidate": [
            "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java": [
          "File: src/main/java/hudson/plugins/git/GitSCM.java -> src/main/java/hudson/plugins/git/GitSCM.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1394:         }",
          "1395:     }",
          "1398:         for (UserRemoteConfig userRemoteConfig: getUserRemoteConfigs()) {",
          "1399:             String remoteUrl = userRemoteConfig.getUrl();",
          "1400:             if (!isRemoteUrlValid(remoteUrl)) {",
          "",
          "[Removed Lines]",
          "1397:     private void abortIfSourceIsLocal() throws AbortException {",
          "",
          "[Added Lines]",
          "1398:     void abortIfSourceIsLocal() throws AbortException {",
          "",
          "---------------"
        ],
        "src/test/java/hudson/plugins/git/GitSCMUnitTest.java||src/test/java/hudson/plugins/git/GitSCMUnitTest.java": [
          "File: src/test/java/hudson/plugins/git/GitSCMUnitTest.java -> src/test/java/hudson/plugins/git/GitSCMUnitTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.plugins.git;",
          "26: import hudson.EnvVars;",
          "27: import static hudson.plugins.git.GitSCM.createRepoList;",
          "28: import hudson.plugins.git.browser.GitRepositoryBrowser;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import hudson.AbortException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: import org.junit.Test;",
          "44: import static org.junit.Assert.assertFalse;",
          "45: import static org.junit.Assert.assertTrue;",
          "46: import static org.hamcrest.MatcherAssert.*;",
          "47: import static org.hamcrest.Matchers.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: import static org.junit.Assert.fail;",
          "48: import org.jvnet.hudson.test.Issue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "339:         assertFalse(gitSCM.getDoGenerateSubmoduleConfigurations());",
          "340:     }",
          "341: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:     @Issue(\"JENKINS-68562\")",
          "346:     @Test",
          "347:     public void testAbortIfSourceIsLocal() {",
          "348:         GitSCM gitSCM = new GitSCM(createRepoList(repoURL, null),",
          "349:                 Collections.singletonList(new BranchSpec(\"master\")),",
          "350:                 null, null, Collections.emptyList());",
          "351:         try {",
          "352:             gitSCM.abortIfSourceIsLocal();",
          "353:         } catch (AbortException e) {",
          "354:             fail(\"https remote URLs should always be valid\");",
          "355:         }",
          "356:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa42d69136b02f56bb667154f292b956c500d6d0",
      "candidate_info": {
        "commit_hash": "aa42d69136b02f56bb667154f292b956c500d6d0",
        "repo": "jenkinsci/git-plugin",
        "commit_url": "https://github.com/jenkinsci/git-plugin/commit/aa42d69136b02f56bb667154f292b956c500d6d0",
        "files": [
          "src/main/java/hudson/plugins/git/GitSCM.java"
        ],
        "message": "[JENKINS-68562] Fix Git checkouts for controllers running on Windows",
        "before_after_code_files": [
          "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java"
          ],
          "candidate": [
            "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java": [
          "File: src/main/java/hudson/plugins/git/GitSCM.java -> src/main/java/hudson/plugins/git/GitSCM.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: import hudson.Util;",
          "105: import hudson.plugins.git.extensions.impl.ScmName;",
          "106: import hudson.util.LogTaskListener;",
          "107: import java.util.Map.Entry;",
          "108: import java.util.regex.Matcher;",
          "109: import java.util.regex.Pattern;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107: import java.nio.file.InvalidPathException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1396:     private void abortIfSourceIsLocal() throws AbortException {",
          "1397:         for (UserRemoteConfig userRemoteConfig: getUserRemoteConfigs()) {",
          "1398:             String remoteUrl = userRemoteConfig.getUrl();",
          "1400:                 throw new AbortException(\"Checkout of Git remote '\" + remoteUrl + \"' aborted because it references a local directory, \" +",
          "1401:                         \"which may be insecure. You can allow local checkouts anyway by setting the system property '\" +",
          "1402:                         ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\");",
          "",
          "[Removed Lines]",
          "1399:             if (remoteUrl != null && (remoteUrl.toLowerCase(Locale.ENGLISH).startsWith(\"file://\") || Files.exists(Paths.get(remoteUrl)))) {",
          "",
          "[Added Lines]",
          "1400:             if (!isRemoteUrlValid(remoteUrl)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1404:         }",
          "1405:     }",
          "1407:     private void printCommitMessageToLog(TaskListener listener, GitClient git, final Build revToBuild)",
          "1408:             throws IOException {",
          "1409:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1408:     private static boolean isRemoteUrlValid(String remoteUrl) {",
          "1409:         if (remoteUrl == null) {",
          "1410:             return true;",
          "1411:         }",
          "1412:         if (remoteUrl.toLowerCase(Locale.ENGLISH).startsWith(\"file://\")) {",
          "1413:             return false;",
          "1414:         }",
          "1415:         try {",
          "1417:             return !Files.exists(Paths.get(remoteUrl));",
          "1418:         } catch (InvalidPathException e) {",
          "1419:             return true;",
          "1420:         }",
          "1421:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07e767b907f618f590fc264173a429da7bb5ec7e",
      "candidate_info": {
        "commit_hash": "07e767b907f618f590fc264173a429da7bb5ec7e",
        "repo": "jenkinsci/git-plugin",
        "commit_url": "https://github.com/jenkinsci/git-plugin/commit/07e767b907f618f590fc264173a429da7bb5ec7e",
        "files": [
          "src/main/java/hudson/plugins/git/GitSCM.java",
          "src/test/java/hudson/plugins/git/Security2478Test.java",
          "src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java",
          "src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java",
          "src/test/java/jenkins/plugins/git/GitSampleRepoRule.java",
          "src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java"
        ],
        "message": "\u201cSECURITY-2478\u201d",
        "before_after_code_files": [
          "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java",
          "src/test/java/hudson/plugins/git/Security2478Test.java||src/test/java/hudson/plugins/git/Security2478Test.java",
          "src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java||src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java",
          "src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java||src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java",
          "src/test/java/jenkins/plugins/git/GitSampleRepoRule.java||src/test/java/jenkins/plugins/git/GitSampleRepoRule.java",
          "src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java||src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java",
            "src/test/java/hudson/plugins/git/Security2478Test.java||src/test/java/hudson/plugins/git/Security2478Test.java",
            "src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java||src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java",
            "src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java||src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java",
            "src/test/java/jenkins/plugins/git/GitSampleRepoRule.java||src/test/java/jenkins/plugins/git/GitSampleRepoRule.java",
            "src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java||src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java"
          ],
          "candidate": [
            "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java",
            "src/test/java/hudson/plugins/git/Security2478Test.java||src/test/java/hudson/plugins/git/Security2478Test.java",
            "src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java||src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java",
            "src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java||src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java",
            "src/test/java/jenkins/plugins/git/GitSampleRepoRule.java||src/test/java/jenkins/plugins/git/GitSampleRepoRule.java",
            "src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java||src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/hudson/plugins/git/GitSCM.java||src/main/java/hudson/plugins/git/GitSCM.java": [
          "File: src/main/java/hudson/plugins/git/GitSCM.java -> src/main/java/hudson/plugins/git/GitSCM.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: import jenkins.model.Jenkins;",
          "54: import jenkins.plugins.git.GitSCMMatrixUtil;",
          "55: import jenkins.plugins.git.GitToolChooser;",
          "56: import net.sf.json.JSONObject;",
          "58: import org.eclipse.jgit.errors.MissingObjectException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: import jenkins.util.SystemProperties;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: import java.io.PrintStream;",
          "78: import java.io.Serializable;",
          "79: import java.io.Writer;",
          "80: import java.text.MessageFormat;",
          "81: import java.util.AbstractList;",
          "82: import java.util.ArrayList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: import java.nio.file.Files;",
          "82: import java.nio.file.Paths;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86: import java.util.HashSet;",
          "87: import java.util.Iterator;",
          "88: import java.util.List;",
          "89: import java.util.Map;",
          "90: import java.util.Set;",
          "91: import java.util.logging.Level;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: import java.util.Locale;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121: public class GitSCM extends GitSCMBackwardCompatibility {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     static final String ALLOW_LOCAL_CHECKOUT_PROPERTY = GitSCM.class.getName() + \".ALLOW_LOCAL_CHECKOUT\";",
          "128:     @SuppressFBWarnings(value = \"MS_SHOULD_BE_FINAL\")",
          "129:     public static /* not final */ boolean ALLOW_LOCAL_CHECKOUT =",
          "130:             SystemProperties.getBoolean(ALLOW_LOCAL_CHECKOUT_PROPERTY);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1277:     public void checkout(Run<?, ?> build, Launcher launcher, FilePath workspace, TaskListener listener, File changelogFile, SCMRevisionState baseline)",
          "1278:             throws IOException, InterruptedException {",
          "1280:         if (VERBOSE)",
          "1281:             listener.getLogger().println(\"Using checkout strategy: \" + getBuildChooser().getDisplayName());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1289:         if (!ALLOW_LOCAL_CHECKOUT && !workspace.isRemote()) {",
          "1290:             abortIfSourceIsLocal();",
          "1291:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1388:         }",
          "1389:     }",
          "1391:     private void printCommitMessageToLog(TaskListener listener, GitClient git, final Build revToBuild)",
          "1392:             throws IOException {",
          "1393:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1404:     private void abortIfSourceIsLocal() throws AbortException {",
          "1405:         for (UserRemoteConfig userRemoteConfig: getUserRemoteConfigs()) {",
          "1406:             String remoteUrl = userRemoteConfig.getUrl();",
          "1407:             if (remoteUrl != null && (remoteUrl.toLowerCase(Locale.ENGLISH).startsWith(\"file://\") || Files.exists(Paths.get(remoteUrl)))) {",
          "1408:                 throw new AbortException(\"Checkout of Git remote '\" + remoteUrl + \"' aborted because it references a local directory, \" +",
          "1409:                         \"which may be insecure. You can allow local checkouts anyway by setting the system property '\" +",
          "1410:                         ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\");",
          "1411:             }",
          "1412:         }",
          "1413:     }",
          "",
          "---------------"
        ],
        "src/test/java/hudson/plugins/git/Security2478Test.java||src/test/java/hudson/plugins/git/Security2478Test.java": [
          "File: src/test/java/hudson/plugins/git/Security2478Test.java -> src/test/java/hudson/plugins/git/Security2478Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.plugins.git;",
          "3: import hudson.model.Result;",
          "4: import jenkins.plugins.git.GitSampleRepoRule;",
          "5: import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition;",
          "6: import org.jenkinsci.plugins.workflow.job.WorkflowJob;",
          "7: import org.jenkinsci.plugins.workflow.job.WorkflowRun;",
          "8: import org.junit.After;",
          "9: import org.junit.Before;",
          "10: import org.junit.Rule;",
          "11: import org.junit.Test;",
          "12: import org.jvnet.hudson.test.Issue;",
          "13: import org.jvnet.hudson.test.JenkinsRule;",
          "15: import java.io.File;",
          "17: import static org.junit.Assert.assertFalse;",
          "19: public class Security2478Test {",
          "21:     @Rule",
          "22:     public JenkinsRule rule = new JenkinsRule();",
          "24:     @Rule",
          "25:     public GitSampleRepoRule sampleRepo = new GitSampleRepoRule();",
          "28:     @Before",
          "29:     public void setUpAllowNonRemoteCheckout() {",
          "30:         GitSCM.ALLOW_LOCAL_CHECKOUT = false;",
          "31:     }",
          "33:     @After",
          "34:     public void disallowNonRemoteCheckout() {",
          "35:         GitSCM.ALLOW_LOCAL_CHECKOUT = false;",
          "36:     }",
          "38:     @Issue(\"SECURITY-2478\")",
          "39:     @Test",
          "40:     public void checkoutShouldNotAbortWhenLocalSourceAndRunningOnAgent() throws Exception {",
          "41:         assertFalse(\"Non Remote checkout should be disallowed\", GitSCM.ALLOW_LOCAL_CHECKOUT);",
          "42:         rule.createOnlineSlave();",
          "43:         sampleRepo.init();",
          "44:         sampleRepo.write(\"file\", \"v1\");",
          "45:         sampleRepo.git(\"commit\", \"--all\", \"--message=test commit\");",
          "46:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
          "48:         String script = \"node('slave0') {\\n\" +",
          "49:                 \"   checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: '\" + sampleRepo.fileUrl() + \"', credentialsId: '']]])\\n\" +",
          "50:                 \"}\";",
          "51:         p.setDefinition(new CpsFlowDefinition(script, true));",
          "52:         WorkflowRun run = rule.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0));",
          "53:         rule.assertLogNotContains(\"aborted because it references a local directory, which may be insecure. \" +",
          "54:                 \"You can allow local checkouts anyway by setting the system property 'hudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT' to true.\", run);",
          "55:     }",
          "57:     @Issue(\"SECURITY-2478\")",
          "58:     @Test",
          "59:     public void checkoutShouldAbortWhenSourceIsNonRemoteAndRunningOnController() throws Exception {",
          "60:         assertFalse(\"Non Remote checkout should be disallowed\", GitSCM.ALLOW_LOCAL_CHECKOUT);",
          "61:         WorkflowJob p = rule.jenkins.createProject(WorkflowJob.class, \"pipeline\");",
          "62:         String workspaceDir = rule.jenkins.getRootDir().getAbsolutePath();",
          "64:         String path = \"file://\" + workspaceDir + File.separator + \"jobName@script\" + File.separator + \"anyhmachash\";",
          "65:         String escapedPath = path.replace(\"\\\\\", \"\\\\\\\\\"); // for windows",
          "66:         String script = \"node {\\n\" +",
          "67:                 \"   checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[\" +",
          "68:                 \"url: '\" + escapedPath + \"',\" +",
          "69:                 \" credentialsId: '']]])\\n\" +",
          "70:                 \"}\";",
          "71:         p.setDefinition(new CpsFlowDefinition(script, true));",
          "72:         WorkflowRun run = rule.assertBuildStatus(Result.FAILURE, p.scheduleBuild2(0));",
          "73:         rule.assertLogContains(\"Checkout of Git remote '\" + path + \"' \" +",
          "74:                         \"aborted because it references a local directory, which may be insecure. \" +",
          "75:                         \"You can allow local checkouts anyway by setting the system property 'hudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT' to true.\", run);",
          "76:     }",
          "77: }",
          "",
          "---------------"
        ],
        "src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java||src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java": [
          "File: src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java -> src/test/java/hudson/plugins/git/extensions/GitSCMExtensionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import hudson.plugins.git.GitSCM;",
          "6: import hudson.plugins.git.TestGitRepo;",
          "7: import hudson.util.StreamTaskListener;",
          "8: import org.junit.Before;",
          "9: import org.junit.ClassRule;",
          "10: import org.junit.Rule;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import org.junit.After;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   before();",
          "39:  }",
          "41:  protected abstract void before() throws Exception;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:  @Before",
          "43:  public void allowNonRemoteCheckout() {",
          "44:   GitSCM.ALLOW_LOCAL_CHECKOUT = true;",
          "45:  }",
          "47:  @After",
          "48:  public void disallowNonRemoteCheckout() {",
          "49:   GitSCM.ALLOW_LOCAL_CHECKOUT = false;",
          "50:  }",
          "",
          "---------------"
        ],
        "src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java||src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java": [
          "File: src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java -> src/test/java/hudson/plugins/git/extensions/impl/PruneStaleTagPipelineTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import java.util.logging.Level;",
          "29: import java.util.logging.Logger;",
          "31: import org.apache.commons.io.FileUtils;",
          "32: import org.jenkinsci.plugins.gitclient.GitClient;",
          "33: import org.jenkinsci.plugins.gitclient.TestCliGitAPIImpl;",
          "34: import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition;",
          "35: import org.jenkinsci.plugins.workflow.job.WorkflowJob;",
          "36: import org.jenkinsci.plugins.workflow.job.WorkflowRun;",
          "37: import org.junit.Assert;",
          "38: import org.junit.Before;",
          "39: import org.junit.Rule;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import hudson.plugins.git.GitSCM;",
          "38: import org.junit.After;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:         listener = new LogTaskListener(Logger.getLogger(\"prune tags\"), Level.FINEST);",
          "64:     }",
          "66:     @Issue(\"JENKINS-61869\")",
          "67:     @Test",
          "68:     public void verify_that_local_tag_is_pruned_when_not_exist_on_remote_using_pipeline() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     @Before",
          "69:     public void allowNonRemoteCheckout() {",
          "70:         GitSCM.ALLOW_LOCAL_CHECKOUT = true;",
          "71:     }",
          "73:     @After",
          "74:     public void disallowNonRemoteCheckout() {",
          "75:         GitSCM.ALLOW_LOCAL_CHECKOUT = false;",
          "76:     }",
          "",
          "---------------"
        ],
        "src/test/java/jenkins/plugins/git/GitSampleRepoRule.java||src/test/java/jenkins/plugins/git/GitSampleRepoRule.java": [
          "File: src/test/java/jenkins/plugins/git/GitSampleRepoRule.java -> src/test/java/jenkins/plugins/git/GitSampleRepoRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import com.gargoylesoftware.htmlunit.util.NameValuePair;",
          "29: import hudson.Launcher;",
          "30: import hudson.model.TaskListener;",
          "31: import hudson.util.StreamTaskListener;",
          "32: import java.io.ByteArrayOutputStream;",
          "33: import java.io.File;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import hudson.plugins.git.GitSCM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     private static final Logger LOGGER = Logger.getLogger(GitSampleRepoRule.class.getName());",
          "51:     public void git(String... cmds) throws Exception {",
          "52:         run(\"git\", cmds);",
          "53:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     protected void before() throws Throwable {",
          "53:         super.before();",
          "54:         GitSCM.ALLOW_LOCAL_CHECKOUT = true;",
          "55:     }",
          "57:     protected void after() {",
          "58:         super.after();",
          "59:         GitSCM.ALLOW_LOCAL_CHECKOUT = false;",
          "60:     }",
          "",
          "---------------"
        ],
        "src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java||src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java": [
          "File: src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java -> src/test/java/org/jenkinsci/plugins/gittagmessage/AbstractGitTagMessageExtensionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import hudson.model.Job;",
          "4: import hudson.model.Queue;",
          "5: import hudson.model.Run;",
          "6: import hudson.plugins.git.util.BuildData;",
          "7: import jenkins.model.ParameterizedJobMixIn;",
          "8: import org.jenkinsci.plugins.gitclient.Git;",
          "9: import org.jenkinsci.plugins.gitclient.GitClient;",
          "10: import org.junit.Before;",
          "11: import org.junit.Rule;",
          "12: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import hudson.plugins.git.GitSCM;",
          "11: import org.junit.After;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         repo.init();",
          "49:     }",
          "51:     @Test",
          "52:     public void commitWithoutTagShouldNotExportMessage() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     @Before",
          "54:     public void allowNonRemoteCheckout() {",
          "55:         GitSCM.ALLOW_LOCAL_CHECKOUT = true;",
          "56:     }",
          "58:     @After",
          "59:     public void disallowNonRemoteCheckout() {",
          "60:         GitSCM.ALLOW_LOCAL_CHECKOUT = false;",
          "61:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}