{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c7679ad865dc2aad54a61e06d7c8a648c613c13b",
      "candidate_info": {
        "commit_hash": "c7679ad865dc2aad54a61e06d7c8a648c613c13b",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/c7679ad865dc2aad54a61e06d7c8a648c613c13b",
        "files": [
          "website/content/api-docs/events.mdx",
          "website/content/api-docs/nodes.mdx"
        ],
        "message": "Backport of docs: update renamed attributes into release/1.9.x (#25268)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "website/content/api-docs/events.mdx||website/content/api-docs/events.mdx",
          "website/content/api-docs/nodes.mdx||website/content/api-docs/nodes.mdx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "website/content/api-docs/events.mdx||website/content/api-docs/events.mdx": [
          "File: website/content/api-docs/events.mdx -> website/content/api-docs/events.mdx",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:             \"kernel.name\": \"linux\",",
          "172:             \"kernel.version\": \"5.4.0-48-generic\",",
          "173:             \"memory.totalbytes\": \"16525733888\",",
          "175:             \"nomad.revision\": \"8c88f29bff0849720e33b0cc73af87495358f3b8\",",
          "176:             \"nomad.version\": \"0.13.0-dev\",",
          "177:             \"os.name\": \"ubuntu\",",
          "178:             \"os.signals\": \"SIGBUS,SIGFPE,SIGTRAP,SIGTTOU,SIGWINCH,SIGXFSZ,SIGHUP,SIGILL,SIGALRM,SIGCHLD,SIGSYS,SIGXCPU,SIGPROF,SIGQUIT,SIGTERM,SIGUSR2,SIGCONT,SIGIO,SIGSEGV,SIGTTIN,SIGIOT,SIGKILL,SIGPIPE,SIGABRT,SIGINT,SIGSTOP,SIGTSTP,SIGURG,SIGUSR1\",",
          "179:             \"os.version\": \"20.04\",",
          "180:             \"unique.cgroup.mountpoint\": \"/sys/fs/cgroup/systemd\",",
          "181:             \"unique.hostname\": \"x1c\",",
          "182:             \"unique.network.ip-address\": \"127.0.0.1\",",
          "",
          "[Removed Lines]",
          "174:             \"nomad.advertise.address\": \"127.0.0.1:4646\",",
          "",
          "[Added Lines]",
          "179:             \"unique.advertise.address\": \"127.0.0.1:4646\",",
          "",
          "---------------"
        ],
        "website/content/api-docs/nodes.mdx||website/content/api-docs/nodes.mdx": [
          "File: website/content/api-docs/nodes.mdx -> website/content/api-docs/nodes.mdx",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:     \"kernel.name\": \"linux\",",
          "209:     \"kernel.version\": \"4.19.56\",",
          "210:     \"memory.totalbytes\": \"16571674624\",",
          "212:     \"nomad.revision\": \"30da2b8f6c3aa860113c9d313c695a05eff5bb97+CHANGES\",",
          "213:     \"nomad.version\": \"1.1.0\",",
          "214:     \"os.name\": \"nixos\",",
          "215:     \"os.signals\": \"SIGTTOU,SIGTTIN,SIGSTOP,SIGSYS,SIGXCPU,SIGBUS,SIGKILL,SIGTERM,SIGIOT,SIGILL,SIGIO,SIGQUIT,SIGSEGV,SIGUSR1,SIGXFSZ,SIGCHLD,SIGUSR2,SIGURG,SIGFPE,SIGHUP,SIGINT,SIGPROF,SIGCONT,SIGALRM,SIGPIPE,SIGTRAP,SIGTSTP,SIGWINCH,SIGABRT\",",
          "216:     \"os.version\": \"\\\"19.03.173017.85f820d6e41 (Koi)\\\"\",",
          "217:     \"unique.cgroup.mountpoint\": \"/sys/fs/cgroup\",",
          "218:     \"unique.consul.name\": \"mew\",",
          "219:     \"unique.hostname\": \"mew\",",
          "",
          "[Removed Lines]",
          "211:     \"nomad.advertise.address\": \"127.0.0.1:4646\",",
          "",
          "[Added Lines]",
          "216:     \"unique.advertise.address\": \"127.0.0.1:4646\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41b9a91c433ea7a21e6f74f34749d0ac347ba19b",
      "candidate_info": {
        "commit_hash": "41b9a91c433ea7a21e6f74f34749d0ac347ba19b",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/41b9a91c433ea7a21e6f74f34749d0ac347ba19b",
        "files": [
          ".changelog/25294.txt",
          "jobspec2/hcl_conversions.go"
        ],
        "message": "backport of commit 69c2ed55d5c1c6b1574600210579c0dbfca62777 (#25299)\n\nCo-authored-by: Juana De La Cuesta <juanita.delacuestamorales@hashicorp.com>",
        "before_after_code_files": [
          "jobspec2/hcl_conversions.go||jobspec2/hcl_conversions.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "jobspec2/hcl_conversions.go||jobspec2/hcl_conversions.go": [
          "File: jobspec2/hcl_conversions.go -> jobspec2/hcl_conversions.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: func decodeDuration(expr hcl.Expression, ctx *hcl.EvalContext, val interface{}) hcl.Diagnostics {",
          "44:  srcVal, diags := expr.Value(ctx)",
          "46:  if srcVal.Type() == cty.String {",
          "47:   dur, err := time.ParseDuration(srcVal.AsString())",
          "48:   if err != nil {",
          "49:    diags = append(diags, &hcl.Diagnostic{",
          "50:     Severity: hcl.DiagError,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:  if srcVal.IsNull() {",
          "46:   diags = append(diags, &hcl.Diagnostic{",
          "47:    Severity: hcl.DiagError,",
          "48:    Summary:  \"Unsuitable value\",",
          "49:    Detail:   \"Unsuitable duration value: nil\",",
          "50:    Subject:  expr.StartRange().Ptr(),",
          "51:    Context:  expr.Range().Ptr(),",
          "52:   })",
          "53:   return diags",
          "54:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ffd5a2025b01275fffea69c655571ad2e88ab02",
      "candidate_info": {
        "commit_hash": "3ffd5a2025b01275fffea69c655571ad2e88ab02",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/3ffd5a2025b01275fffea69c655571ad2e88ab02",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "backport of commit b7f24793accfc30347d58f26194bbd6d27426a1d (#24583)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  github.com/creack/pty v1.1.24",
          "28:  github.com/distribution/reference v0.5.0",
          "29:  github.com/docker/cli v27.3.1+incompatible",
          "31:  github.com/docker/go-connections v0.4.0",
          "32:  github.com/docker/go-units v0.5.0",
          "33:  github.com/dustin/go-humanize v1.0.1",
          "",
          "[Removed Lines]",
          "30:  github.com/docker/docker v27.1.1+incompatible",
          "",
          "[Added Lines]",
          "30:  github.com/docker/docker v27.3.1+incompatible",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "386: github.com/docker/cli v27.3.1+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=",
          "387: github.com/docker/distribution v2.8.3+incompatible h1:AtKxIZ36LoNK51+Z6RpzLpddBirtxJnzDrHLEKxTAYk=",
          "388: github.com/docker/distribution v2.8.3+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=",
          "391: github.com/docker/docker-credential-helpers v0.7.0 h1:xtCHsjxogADNZcdv1pKUHXryefjlVRqWqIhk/uXJp0A=",
          "392: github.com/docker/docker-credential-helpers v0.7.0/go.mod h1:rETQfLdHNT3foU5kuNkFR1R1V12OJRRO5lzt2D1b5X0=",
          "393: github.com/docker/go-connections v0.4.0 h1:El9xVISelRB7BuFusrZozjnkIM5YnzCViNKohAFqRJQ=",
          "",
          "[Removed Lines]",
          "389: github.com/docker/docker v27.1.1+incompatible h1:hO/M4MtV36kzKldqnA37IWhebRA+LnqqcqDja6kVaKY=",
          "390: github.com/docker/docker v27.1.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=",
          "",
          "[Added Lines]",
          "389: github.com/docker/docker v27.3.1+incompatible h1:KttF0XoteNTicmUtBO0L2tP+J7FGRFTjaEF4k6WdhfI=",
          "390: github.com/docker/docker v27.3.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17515cc14ff612381e526288bcfabc67d27e7fcf",
      "candidate_info": {
        "commit_hash": "17515cc14ff612381e526288bcfabc67d27e7fcf",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/17515cc14ff612381e526288bcfabc67d27e7fcf",
        "files": [
          ".changelog/24214.txt",
          ".github/workflows/test-windows.yml",
          "drivers/rawexec/driver_test.go",
          "drivers/rawexec/driver_unix_test.go",
          "drivers/rawexec/driver_windows_test.go",
          "drivers/shared/executor/executor_test.go",
          "drivers/shared/executor/executor_windows.go",
          "drivers/shared/executor/executor_windows_test.go",
          "drivers/shared/executor/utils_test.go"
        ],
        "message": "Backport of windows: set job object for executor and children into release/1.9.x (#24226)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "drivers/rawexec/driver_test.go||drivers/rawexec/driver_test.go",
          "drivers/rawexec/driver_unix_test.go||drivers/rawexec/driver_unix_test.go",
          "drivers/rawexec/driver_windows_test.go||drivers/rawexec/driver_windows_test.go",
          "drivers/shared/executor/executor_test.go||drivers/shared/executor/executor_test.go",
          "drivers/shared/executor/executor_windows.go||drivers/shared/executor/executor_windows.go",
          "drivers/shared/executor/executor_windows_test.go||drivers/shared/executor/executor_windows_test.go",
          "drivers/shared/executor/utils_test.go||drivers/shared/executor/utils_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/rawexec/driver_test.go||drivers/rawexec/driver_test.go": [
          "File: drivers/rawexec/driver_test.go -> drivers/rawexec/driver_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  \"path/filepath\"",
          "13:  \"runtime\"",
          "14:  \"strconv\"",
          "16:  \"syscall\"",
          "17:  \"testing\"",
          "18:  \"time\"",
          "",
          "[Removed Lines]",
          "15:  \"sync\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:  require.NoError(harness.DestroyTask(task.ID, true))",
          "238: }",
          "337: func TestRawExecDriver_Start_Wait_AllocDir(t *testing.T) {",
          "338:  ci.Parallel(t)",
          "339:  require := require.New(t)",
          "",
          "[Removed Lines]",
          "240: func TestRawExecDriver_StartWaitRecoverWaitStop(t *testing.T) {",
          "241:  ci.Parallel(t)",
          "242:  require := require.New(t)",
          "244:  d := newEnabledRawExecDriver(t)",
          "245:  harness := dtestutil.NewDriverHarness(t, d)",
          "246:  defer harness.Kill()",
          "248:  config := &Config{Enabled: true}",
          "249:  var data []byte",
          "250:  require.NoError(basePlug.MsgPackEncode(&data, config))",
          "251:  bconfig := &basePlug.Config{",
          "252:   PluginConfig: data,",
          "253:   AgentConfig: &base.AgentConfig{",
          "254:    Driver: &base.ClientDriverConfig{",
          "255:     Topology: d.nomadConfig.Topology,",
          "256:    },",
          "257:   },",
          "258:  }",
          "259:  require.NoError(harness.SetConfig(bconfig))",
          "261:  allocID := uuid.Generate()",
          "262:  taskName := \"sleep\"",
          "263:  task := &drivers.TaskConfig{",
          "264:   AllocID:   allocID,",
          "265:   ID:        uuid.Generate(),",
          "266:   Name:      taskName,",
          "267:   Env:       defaultEnv(),",
          "268:   Resources: testResources(allocID, taskName),",
          "269:  }",
          "270:  tc := &TaskConfig{",
          "271:   Command: testtask.Path(),",
          "272:   Args:    []string{\"sleep\", \"100s\"},",
          "273:  }",
          "274:  require.NoError(task.EncodeConcreteDriverConfig(&tc))",
          "276:  testtask.SetTaskConfigEnv(task)",
          "278:  cleanup := harness.MkAllocDir(task, false)",
          "279:  defer cleanup()",
          "281:  harness.MakeTaskCgroup(allocID, taskName)",
          "283:  handle, _, err := harness.StartTask(task)",
          "284:  require.NoError(err)",
          "286:  ch, err := harness.WaitTask(context.Background(), task.ID)",
          "287:  require.NoError(err)",
          "289:  var waitDone bool",
          "290:  var wg sync.WaitGroup",
          "291:  wg.Add(1)",
          "292:  go func() {",
          "293:   defer wg.Done()",
          "294:   result := <-ch",
          "295:   require.Error(result.Err)",
          "296:   waitDone = true",
          "297:  }()",
          "299:  originalStatus, err := d.InspectTask(task.ID)",
          "300:  require.NoError(err)",
          "302:  d.tasks.Delete(task.ID)",
          "304:  wg.Wait()",
          "305:  require.True(waitDone)",
          "306:  _, err = d.InspectTask(task.ID)",
          "307:  require.Equal(drivers.ErrTaskNotFound, err)",
          "309:  err = d.RecoverTask(handle)",
          "310:  require.NoError(err)",
          "312:  status, err := d.InspectTask(task.ID)",
          "313:  require.NoError(err)",
          "314:  require.Exactly(originalStatus, status)",
          "316:  ch, err = harness.WaitTask(context.Background(), task.ID)",
          "317:  require.NoError(err)",
          "319:  wg.Add(1)",
          "320:  waitDone = false",
          "321:  go func() {",
          "322:   defer wg.Done()",
          "323:   result := <-ch",
          "324:   require.NoError(result.Err)",
          "325:   require.NotZero(result.ExitCode)",
          "326:   require.Equal(9, result.Signal)",
          "327:   waitDone = true",
          "328:  }()",
          "330:  time.Sleep(300 * time.Millisecond)",
          "331:  require.NoError(d.StopTask(task.ID, 0, \"SIGKILL\"))",
          "332:  wg.Wait()",
          "333:  require.NoError(d.DestroyTask(task.ID, false))",
          "334:  require.True(waitDone)",
          "335: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "drivers/rawexec/driver_unix_test.go||drivers/rawexec/driver_unix_test.go": [
          "File: drivers/rawexec/driver_unix_test.go -> drivers/rawexec/driver_unix_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  \"runtime\"",
          "15:  \"strconv\"",
          "16:  \"strings\"",
          "17:  \"syscall\"",
          "18:  \"testing\"",
          "19:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:  \"sync\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:  \"github.com/hashicorp/nomad/helper/testtask\"",
          "24:  \"github.com/hashicorp/nomad/helper/uuid\"",
          "25:  \"github.com/hashicorp/nomad/plugins/base\"",
          "26:  \"github.com/hashicorp/nomad/plugins/drivers\"",
          "27:  dtestutil \"github.com/hashicorp/nomad/plugins/drivers/testutils\"",
          "28:  \"github.com/hashicorp/nomad/testutil\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:  basePlug \"github.com/hashicorp/nomad/plugins/base\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "443:  require.Empty(t, stderr)",
          "444:  require.Contains(t, stdout, \"nobody\")",
          "445: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "449: func TestRawExecDriver_StartWaitRecoverWaitStop(t *testing.T) {",
          "450:  ci.Parallel(t)",
          "451:  require := require.New(t)",
          "453:  d := newEnabledRawExecDriver(t)",
          "454:  harness := dtestutil.NewDriverHarness(t, d)",
          "455:  defer harness.Kill()",
          "457:  config := &Config{Enabled: true}",
          "458:  var data []byte",
          "459:  require.NoError(basePlug.MsgPackEncode(&data, config))",
          "460:  bconfig := &basePlug.Config{",
          "461:   PluginConfig: data,",
          "462:   AgentConfig: &base.AgentConfig{",
          "463:    Driver: &base.ClientDriverConfig{",
          "464:     Topology: d.nomadConfig.Topology,",
          "465:    },",
          "466:   },",
          "467:  }",
          "468:  require.NoError(harness.SetConfig(bconfig))",
          "470:  allocID := uuid.Generate()",
          "471:  taskName := \"sleep\"",
          "472:  task := &drivers.TaskConfig{",
          "473:   AllocID:   allocID,",
          "474:   ID:        uuid.Generate(),",
          "475:   Name:      taskName,",
          "476:   Env:       defaultEnv(),",
          "477:   Resources: testResources(allocID, taskName),",
          "478:  }",
          "479:  tc := &TaskConfig{",
          "480:   Command: testtask.Path(),",
          "481:   Args:    []string{\"sleep\", \"100s\"},",
          "482:  }",
          "483:  require.NoError(task.EncodeConcreteDriverConfig(&tc))",
          "485:  testtask.SetTaskConfigEnv(task)",
          "487:  cleanup := harness.MkAllocDir(task, false)",
          "488:  defer cleanup()",
          "490:  harness.MakeTaskCgroup(allocID, taskName)",
          "492:  handle, _, err := harness.StartTask(task)",
          "493:  require.NoError(err)",
          "495:  ch, err := harness.WaitTask(context.Background(), task.ID)",
          "496:  require.NoError(err)",
          "498:  var waitDone bool",
          "499:  var wg sync.WaitGroup",
          "500:  wg.Add(1)",
          "501:  go func() {",
          "502:   defer wg.Done()",
          "503:   result := <-ch",
          "504:   require.Error(result.Err)",
          "505:   waitDone = true",
          "506:  }()",
          "508:  originalStatus, err := d.InspectTask(task.ID)",
          "509:  require.NoError(err)",
          "511:  d.tasks.Delete(task.ID)",
          "513:  wg.Wait()",
          "514:  require.True(waitDone)",
          "515:  _, err = d.InspectTask(task.ID)",
          "516:  require.Equal(drivers.ErrTaskNotFound, err)",
          "518:  err = d.RecoverTask(handle)",
          "519:  require.NoError(err)",
          "521:  status, err := d.InspectTask(task.ID)",
          "522:  require.NoError(err)",
          "523:  require.Exactly(originalStatus, status)",
          "525:  ch, err = harness.WaitTask(context.Background(), task.ID)",
          "526:  require.NoError(err)",
          "528:  wg.Add(1)",
          "529:  waitDone = false",
          "530:  go func() {",
          "531:   defer wg.Done()",
          "532:   result := <-ch",
          "533:   require.NoError(result.Err)",
          "534:   require.NotZero(result.ExitCode)",
          "535:   require.Equal(9, result.Signal)",
          "536:   waitDone = true",
          "537:  }()",
          "539:  time.Sleep(300 * time.Millisecond)",
          "540:  require.NoError(d.StopTask(task.ID, 0, \"SIGKILL\"))",
          "541:  wg.Wait()",
          "542:  require.NoError(d.DestroyTask(task.ID, false))",
          "543:  require.True(waitDone)",
          "544: }",
          "",
          "---------------"
        ],
        "drivers/rawexec/driver_windows_test.go||drivers/rawexec/driver_windows_test.go": [
          "File: drivers/rawexec/driver_windows_test.go -> drivers/rawexec/driver_windows_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: package rawexec",
          "8: import (",
          "9:  \"os\"",
          "10:  \"testing\"",
          "11:  \"time\"",
          "13:  \"github.com/hashicorp/nomad/ci\"",
          "14:  \"github.com/hashicorp/nomad/helper/uuid\"",
          "15:  \"github.com/hashicorp/nomad/plugins/base\"",
          "16:  \"github.com/hashicorp/nomad/plugins/drivers\"",
          "17:  dtestutil \"github.com/hashicorp/nomad/plugins/drivers/testutils\"",
          "18:  \"github.com/shoenig/test/must\"",
          "19: )",
          "23: func TestRawExecDriver_ExecutorKill(t *testing.T) {",
          "24:  ci.Parallel(t)",
          "26:  d := newEnabledRawExecDriver(t)",
          "27:  harness := dtestutil.NewDriverHarness(t, d)",
          "28:  t.Cleanup(harness.Kill)",
          "30:  config := &Config{Enabled: true}",
          "31:  var data []byte",
          "32:  must.NoError(t, base.MsgPackEncode(&data, config))",
          "33:  bconfig := &base.Config{",
          "34:   PluginConfig: data,",
          "35:   AgentConfig: &base.AgentConfig{",
          "36:    Driver: &base.ClientDriverConfig{",
          "37:     Topology: d.nomadConfig.Topology,",
          "38:    },",
          "39:   },",
          "40:  }",
          "41:  must.NoError(t, harness.SetConfig(bconfig))",
          "43:  allocID := uuid.Generate()",
          "44:  taskName := \"test\"",
          "45:  task := &drivers.TaskConfig{",
          "46:   AllocID:   allocID,",
          "47:   ID:        uuid.Generate(),",
          "48:   Name:      taskName,",
          "49:   Resources: testResources(allocID, taskName),",
          "50:  }",
          "52:  taskConfig := map[string]interface{}{}",
          "53:  taskConfig[\"command\"] = \"Powershell.exe\"",
          "54:  taskConfig[\"args\"] = []string{\"sleep\", \"100s\"}",
          "56:  must.NoError(t, task.EncodeConcreteDriverConfig(&taskConfig))",
          "58:  cleanup := harness.MkAllocDir(task, false)",
          "59:  t.Cleanup(cleanup)",
          "61:  handle, _, err := harness.StartTask(task)",
          "62:  must.NoError(t, err)",
          "64:  var taskState TaskState",
          "65:  must.NoError(t, handle.GetDriverState(&taskState))",
          "66:  must.NoError(t, harness.WaitUntilStarted(task.ID, 1*time.Second))",
          "69:  must.NotEq(t, taskState.ReattachConfig.Pid, taskState.Pid)",
          "70:  proc, err := os.FindProcess(taskState.ReattachConfig.Pid)",
          "71:  must.NoError(t, err)",
          "73:  taskProc, err := os.FindProcess(taskState.Pid)",
          "74:  must.NoError(t, err)",
          "76:  must.NoError(t, proc.Kill())",
          "77:  t.Logf(\"killed %d, waiting on %d to stop\", taskState.ReattachConfig.Pid, taskState.Pid)",
          "79:  t.Cleanup(func() {",
          "80:   if taskProc != nil {",
          "81:    taskProc.Kill()",
          "82:   }",
          "83:  })",
          "85:  done := make(chan struct{})",
          "86:  go func() {",
          "87:   taskProc.Wait()",
          "88:   close(done)",
          "89:  }()",
          "91:  select {",
          "92:  case <-time.After(5 * time.Second):",
          "93:   t.Fatal(\"expected child process to exit\")",
          "94:  case <-done:",
          "95:  }",
          "96: }",
          "",
          "---------------"
        ],
        "drivers/shared/executor/executor_test.go||drivers/shared/executor/executor_test.go": [
          "File: drivers/shared/executor/executor_test.go -> drivers/shared/executor/executor_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: package executor",
          "6: import (",
          "8:  \"context\"",
          "9:  \"fmt\"",
          "10:  \"io\"",
          "",
          "[Removed Lines]",
          "7:  \"bytes\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:  \"path/filepath\"",
          "13:  \"runtime\"",
          "14:  \"strings\"",
          "16:  \"syscall\"",
          "17:  \"testing\"",
          "18:  \"time\"",
          "",
          "[Removed Lines]",
          "15:  \"sync\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:  compute  = topology.Compute()",
          "60: )",
          "",
          "[Removed Lines]",
          "62: type testExecCmd struct {",
          "63:  command  *ExecCommand",
          "64:  allocDir *allocdir.AllocDir",
          "66:  stdout         *bytes.Buffer",
          "67:  stderr         *bytes.Buffer",
          "68:  outputCopyDone *sync.WaitGroup",
          "69: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123:  return testCmd",
          "124: }",
          "158: func TestExecutor_Start_Invalid(t *testing.T) {",
          "159:  ci.Parallel(t)",
          "160:  invalid := \"/bin/foobar\"",
          "",
          "[Removed Lines]",
          "129: func configureTLogging(t *testing.T, testcmd *testExecCmd) {",
          "130:  var stdout, stderr bytes.Buffer",
          "131:  var copyDone sync.WaitGroup",
          "133:  stdoutPr, stdoutPw, err := os.Pipe()",
          "134:  require.NoError(t, err)",
          "136:  stderrPr, stderrPw, err := os.Pipe()",
          "137:  require.NoError(t, err)",
          "139:  copyDone.Add(2)",
          "140:  go func() {",
          "141:   defer copyDone.Done()",
          "142:   io.Copy(&stdout, stdoutPr)",
          "143:  }()",
          "144:  go func() {",
          "145:   defer copyDone.Done()",
          "146:   io.Copy(&stderr, stderrPr)",
          "147:  }()",
          "149:  testcmd.stdout = &stdout",
          "150:  testcmd.stderr = &stderr",
          "151:  testcmd.outputCopyDone = &copyDone",
          "153:  testcmd.command.stdout = stdoutPw",
          "154:  testcmd.command.stderr = stderrPw",
          "155:  return",
          "156: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "drivers/shared/executor/executor_windows.go||drivers/shared/executor/executor_windows.go": [
          "File: drivers/shared/executor/executor_windows.go -> drivers/shared/executor/executor_windows.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"fmt\"",
          "10:  \"os\"",
          "11:  \"syscall\"",
          "13:  \"golang.org/x/sys/windows\"",
          "14: )",
          "17: func (e *UniversalExecutor) setNewProcessGroup() error {",
          "19:  if e.childCmd.SysProcAttr == nil {",
          "20:   e.childCmd.SysProcAttr = &syscall.SysProcAttr{}",
          "21:  }",
          "22:  e.childCmd.SysProcAttr.CreationFlags = syscall.CREATE_NEW_PROCESS_GROUP",
          "23:  return nil",
          "24: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  \"unsafe\"",
          "29:  job, err := windows.CreateJobObject(nil, nil)",
          "30:  if err != nil {",
          "31:   return fmt.Errorf(\"could not create Windows job object for executor: %w\", err)",
          "32:  }",
          "34:  info := windows.JOBOBJECT_EXTENDED_LIMIT_INFORMATION{",
          "35:   BasicLimitInformation: windows.JOBOBJECT_BASIC_LIMIT_INFORMATION{",
          "36:    LimitFlags: windows.JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE,",
          "37:   },",
          "38:  }",
          "39:  _, err = windows.SetInformationJobObject(",
          "40:   job,",
          "41:   windows.JobObjectExtendedLimitInformation,",
          "42:   uintptr(unsafe.Pointer(&info)),",
          "43:   uint32(unsafe.Sizeof(info)))",
          "44:  if err != nil {",
          "45:   return fmt.Errorf(\"could not configure Windows job object for executor: %w\", err)",
          "46:  }",
          "48:  handle := windows.CurrentProcess()",
          "49:  err = windows.AssignProcessToJobObject(job, handle)",
          "50:  if err != nil {",
          "51:   return fmt.Errorf(\"could not assign executor to Windows job object: %w\", err)",
          "52:  }",
          "",
          "---------------"
        ],
        "drivers/shared/executor/executor_windows_test.go||drivers/shared/executor/executor_windows_test.go": [
          "File: drivers/shared/executor/executor_windows_test.go -> drivers/shared/executor/executor_windows_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: package executor",
          "8: import (",
          "9:  \"context\"",
          "10:  \"os\"",
          "11:  \"testing\"",
          "12:  \"time\"",
          "14:  \"github.com/hashicorp/nomad/ci\"",
          "15:  \"github.com/hashicorp/nomad/client/allocdir\"",
          "16:  \"github.com/hashicorp/nomad/client/lib/numalib\"",
          "17:  \"github.com/hashicorp/nomad/client/taskenv\"",
          "18:  \"github.com/hashicorp/nomad/helper/testlog\"",
          "19:  \"github.com/hashicorp/nomad/nomad/mock\"",
          "20:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "21:  \"github.com/hashicorp/nomad/plugins/drivers\"",
          "22:  \"github.com/hashicorp/nomad/plugins/drivers/fsisolation\"",
          "23:  \"github.com/shoenig/test/must\"",
          "24: )",
          "27: func testExecutorCommand(t *testing.T) *testExecCmd {",
          "28:  alloc := mock.Alloc()",
          "29:  task := alloc.Job.TaskGroups[0].Tasks[0]",
          "30:  taskEnv := taskenv.NewBuilder(mock.Node(), alloc, task, \"global\").Build()",
          "32:  allocDir := allocdir.NewAllocDir(testlog.HCLogger(t), t.TempDir(), t.TempDir(), alloc.ID)",
          "33:  must.NoError(t, allocDir.Build())",
          "34:  t.Cleanup(func() { allocDir.Destroy() })",
          "36:  must.NoError(t, allocDir.NewTaskDir(task).Build(fsisolation.None, nil, task.User))",
          "37:  td := allocDir.TaskDirs[task.Name]",
          "38:  cmd := &ExecCommand{",
          "39:   Env:     taskEnv.List(),",
          "40:   TaskDir: td.Dir,",
          "41:   Resources: &drivers.Resources{",
          "42:    NomadResources: &structs.AllocatedTaskResources{",
          "43:     Cpu: structs.AllocatedCpuResources{",
          "44:      CpuShares: 500,",
          "45:     },",
          "46:     Memory: structs.AllocatedMemoryResources{",
          "47:      MemoryMB: 256,",
          "48:     },",
          "49:    },",
          "50:   },",
          "51:  }",
          "53:  testCmd := &testExecCmd{",
          "54:   command:  cmd,",
          "55:   allocDir: allocDir,",
          "56:  }",
          "57:  configureTLogging(t, testCmd)",
          "58:  return testCmd",
          "59: }",
          "61: func TestExecutor_ProcessExit(t *testing.T) {",
          "62:  ci.Parallel(t)",
          "64:  topology := numalib.Scan(numalib.PlatformScanners())",
          "65:  compute := topology.Compute()",
          "67:  cmd := testExecutorCommand(t)",
          "68:  cmd.command.Cmd = \"Powershell.exe\"",
          "69:  cmd.command.Args = []string{\"sleep\", \"30\"}",
          "70:  executor := NewExecutor(testlog.HCLogger(t), compute)",
          "72:  t.Cleanup(func() { executor.Shutdown(\"SIGKILL\", 0) })",
          "74:  childPs, err := executor.Launch(cmd.command)",
          "75:  must.NoError(t, err)",
          "76:  must.NonZero(t, childPs.Pid)",
          "78:  proc, err := os.FindProcess(childPs.Pid)",
          "79:  must.NoError(t, err)",
          "80:  must.NoError(t, proc.Kill())",
          "82:  ctx, cancel := context.WithTimeout(context.TODO(), 1*time.Second)",
          "83:  t.Cleanup(cancel)",
          "84:  waitPs, err := executor.Wait(ctx)",
          "85:  must.NoError(t, err)",
          "86:  must.Eq(t, 1, waitPs.ExitCode)",
          "87:  must.Eq(t, childPs.Pid, waitPs.Pid)",
          "88: }",
          "",
          "---------------"
        ],
        "drivers/shared/executor/utils_test.go||drivers/shared/executor/utils_test.go": [
          "File: drivers/shared/executor/utils_test.go -> drivers/shared/executor/utils_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: package executor",
          "6: import (",
          "7:  \"testing\"",
          "9:  \"github.com/stretchr/testify/require\"",
          "10: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"bytes\"",
          "8:  \"io\"",
          "9:  \"os\"",
          "10:  \"sync\"",
          "13:  \"github.com/hashicorp/nomad/client/allocdir\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:   require.Equal(t, tc.exp, result)",
          "30:  }",
          "31: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: type testExecCmd struct {",
          "39:  command  *ExecCommand",
          "40:  allocDir *allocdir.AllocDir",
          "42:  stdout         *bytes.Buffer",
          "43:  stderr         *bytes.Buffer",
          "44:  outputCopyDone *sync.WaitGroup",
          "45: }",
          "50: func configureTLogging(t *testing.T, testcmd *testExecCmd) {",
          "51:  t.Helper()",
          "52:  var stdout, stderr bytes.Buffer",
          "53:  var copyDone sync.WaitGroup",
          "55:  stdoutPr, stdoutPw, err := os.Pipe()",
          "56:  require.NoError(t, err)",
          "58:  stderrPr, stderrPw, err := os.Pipe()",
          "59:  require.NoError(t, err)",
          "61:  copyDone.Add(2)",
          "62:  go func() {",
          "63:   defer copyDone.Done()",
          "64:   io.Copy(&stdout, stdoutPr)",
          "65:  }()",
          "66:  go func() {",
          "67:   defer copyDone.Done()",
          "68:   io.Copy(&stderr, stderrPr)",
          "69:  }()",
          "71:  testcmd.stdout = &stdout",
          "72:  testcmd.stderr = &stderr",
          "73:  testcmd.outputCopyDone = &copyDone",
          "75:  testcmd.command.stdout = stdoutPw",
          "76:  testcmd.command.stderr = stderrPw",
          "77:  return",
          "78: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9042d0471bbfa13a41c0091898271362b6d4d0a7",
      "candidate_info": {
        "commit_hash": "9042d0471bbfa13a41c0091898271362b6d4d0a7",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/9042d0471bbfa13a41c0091898271362b6d4d0a7",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "backport of commit 48467ba5a877e6f4ab6749f86c2ea3c579af1301 (#24784)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:  golang.org/x/sync v0.10.0",
          "134:  golang.org/x/sys v0.28.0",
          "135:  golang.org/x/time v0.8.0",
          "138:  gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7",
          "139:  gopkg.in/tomb.v2 v2.0.0-20140626144623-14b3d72120e8",
          "140:  oss.indeed.com/go/libtime v1.6.0",
          "141: )",
          "143: require (",
          "149:  dario.cat/mergo v1.0.0 // indirect",
          "150:  github.com/Azure/azure-sdk-for-go v68.0.0+incompatible // indirect",
          "151:  github.com/Azure/azure-sdk-for-go/sdk/azcore v1.11.1 // indirect",
          "",
          "[Removed Lines]",
          "136:  google.golang.org/grpc v1.68.0",
          "137:  google.golang.org/protobuf v1.34.2",
          "144:  cloud.google.com/go v0.110.8 // indirect",
          "145:  cloud.google.com/go/compute/metadata v0.5.0 // indirect",
          "146:  cloud.google.com/go/iam v1.1.2 // indirect",
          "147:  cloud.google.com/go/kms v1.15.2 // indirect",
          "148:  cloud.google.com/go/storage v1.30.1 // indirect",
          "",
          "[Added Lines]",
          "136:  google.golang.org/grpc v1.69.2",
          "137:  google.golang.org/protobuf v1.35.2",
          "144:  cloud.google.com/go v0.112.2 // indirect",
          "145:  cloud.google.com/go/auth v0.13.0 // indirect",
          "146:  cloud.google.com/go/auth/oauth2adapt v0.2.6 // indirect",
          "147:  cloud.google.com/go/compute/metadata v0.6.0 // indirect",
          "148:  cloud.google.com/go/iam v1.1.6 // indirect",
          "149:  cloud.google.com/go/kms v1.15.7 // indirect",
          "150:  cloud.google.com/go/storage v1.39.1 // indirect",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:  github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect",
          "213:  github.com/google/btree v1.1.2 // indirect",
          "214:  github.com/google/go-querystring v0.0.0-20170111101155-53e6ce116135 // indirect",
          "216:  github.com/google/uuid v1.6.0 // indirect",
          "219:  github.com/gookit/color v1.3.1 // indirect",
          "220:  github.com/gophercloud/gophercloud v0.1.0 // indirect",
          "221:  github.com/gorilla/mux v1.8.1 // indirect",
          "",
          "[Removed Lines]",
          "215:  github.com/google/s2a-go v0.1.4 // indirect",
          "217:  github.com/googleapis/enterprise-certificate-proxy v0.2.4 // indirect",
          "218:  github.com/googleapis/gax-go/v2 v2.12.0 // indirect",
          "",
          "[Added Lines]",
          "217:  github.com/google/s2a-go v0.1.8 // indirect",
          "219:  github.com/googleapis/enterprise-certificate-proxy v0.3.4 // indirect",
          "220:  github.com/googleapis/gax-go/v2 v2.14.0 // indirect",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:  github.com/vmware/govmomi v0.18.0 // indirect",
          "291:  github.com/yusufpapurcu/wmi v1.2.4 // indirect",
          "292:  go.opencensus.io v0.24.0 // indirect",
          "293:  go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.55.0 // indirect",
          "295:  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.3.0 // indirect",
          "299:  golang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67 // indirect",
          "300:  golang.org/x/net v0.33.0 // indirect",
          "301:  golang.org/x/oauth2 v0.24.0 // indirect",
          "",
          "[Removed Lines]",
          "294:  go.opentelemetry.io/otel v1.30.0 // indirect",
          "296:  go.opentelemetry.io/otel/metric v1.30.0 // indirect",
          "297:  go.opentelemetry.io/otel/sdk v1.21.0 // indirect",
          "298:  go.opentelemetry.io/otel/trace v1.30.0 // indirect",
          "",
          "[Added Lines]",
          "295:  go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 // indirect",
          "297:  go.opentelemetry.io/otel v1.31.0 // indirect",
          "299:  go.opentelemetry.io/otel/metric v1.31.0 // indirect",
          "300:  go.opentelemetry.io/otel/trace v1.31.0 // indirect",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "303:  golang.org/x/text v0.21.0 // indirect",
          "304:  golang.org/x/tools v0.28.0 // indirect",
          "305:  golang.org/x/xerrors v0.0.0-20240903120638-7835f813f4da // indirect",
          "311:  gopkg.in/fsnotify.v1 v1.4.7 // indirect",
          "312:  gopkg.in/resty.v1 v1.12.0 // indirect",
          "313:  gopkg.in/yaml.v2 v2.4.0 // indirect",
          "",
          "[Removed Lines]",
          "306:  google.golang.org/api v0.128.0 // indirect",
          "307:  google.golang.org/appengine v1.6.8 // indirect",
          "308:  google.golang.org/genproto v0.0.0-20230920204549-e6e6cdab5c13 // indirect",
          "309:  google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 // indirect",
          "310:  google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 // indirect",
          "",
          "[Added Lines]",
          "308:  google.golang.org/api v0.214.0 // indirect",
          "309:  google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9 // indirect",
          "310:  google.golang.org/genproto/googleapis/api v0.0.0-20241104194629-dd2ea8efbc28 // indirect",
          "311:  google.golang.org/genproto/googleapis/rpc v0.0.0-20241209162323-e6fa225c2576 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: cloud.google.com/go v0.102.0/go.mod h1:oWcCzKlqJ5zgHQt9YsaeTY9KzIvjyy0ArmiBUgpQ+nc=",
          "31: cloud.google.com/go v0.102.1/go.mod h1:XZ77E9qnTEnrgEOvr4xzfdX5TRo7fB4T2F4O6+34hIU=",
          "32: cloud.google.com/go v0.104.0/go.mod h1:OO6xxXdJyvuJPcEPBLN9BJPD+jep5G1+2U5B5gkRYtA=",
          "35: cloud.google.com/go/aiplatform v1.22.0/go.mod h1:ig5Nct50bZlzV6NvKaTwmplLLddFx0YReh9WfTO5jKw=",
          "36: cloud.google.com/go/aiplatform v1.24.0/go.mod h1:67UUvRBKG6GTayHKV8DBv2RtR1t93YRu5B1P3x99mYY=",
          "37: cloud.google.com/go/analytics v0.11.0/go.mod h1:DjEWCu41bVbYcKyvlws9Er60YE4a//bK6mnhWvQeFNI=",
          "",
          "[Removed Lines]",
          "33: cloud.google.com/go v0.110.8 h1:tyNdfIxjzaWctIiLYOTalaLKZ17SI44SKFW26QbOhME=",
          "34: cloud.google.com/go v0.110.8/go.mod h1:Iz8AkXJf1qmxC3Oxoep8R1T36w8B92yU29PcBhHO5fk=",
          "",
          "[Added Lines]",
          "33: cloud.google.com/go v0.112.2 h1:ZaGT6LiG7dBzi6zNOvVZwacaXlmf3lRqnC4DQzqyRQw=",
          "34: cloud.google.com/go v0.112.2/go.mod h1:iEqjp//KquGIJV/m+Pk3xecgKNhV+ry+vVTsy4TbDms=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: cloud.google.com/go/assuredworkloads v1.5.0/go.mod h1:n8HOZ6pff6re5KYfBXcFvSViQjDwxFkAkmUFffJRbbY=",
          "47: cloud.google.com/go/assuredworkloads v1.6.0/go.mod h1:yo2YOk37Yc89Rsd5QMVECvjaMKymF9OP+QXWlKXUkXw=",
          "48: cloud.google.com/go/assuredworkloads v1.7.0/go.mod h1:z/736/oNmtGAyU47reJgGN+KVoYoxeLBoj4XkKYscNI=",
          "49: cloud.google.com/go/automl v1.5.0/go.mod h1:34EjfoFGMZ5sgJ9EoLsRtdPSNZLcfflJR39VbVNS2M0=",
          "50: cloud.google.com/go/automl v1.6.0/go.mod h1:ugf8a6Fx+zP0D59WLhqgTDsQI9w07o64uf/Is3Nh5p8=",
          "51: cloud.google.com/go/bigquery v1.0.1/go.mod h1:i/xbL2UlR5RvWAURpBYZTtm/cXjCha9lbfbpx4poX+o=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: cloud.google.com/go/auth v0.13.0 h1:8Fu8TZy167JkW8Tj3q7dIkr2v4cndv41ouecJx0PAHs=",
          "50: cloud.google.com/go/auth v0.13.0/go.mod h1:COOjD9gwfKNKz+IIduatIhYJQIc0mG3H102r/EMxX6Q=",
          "51: cloud.google.com/go/auth/oauth2adapt v0.2.6 h1:V6a6XDu2lTwPZWOawrAa9HUK+DB2zfJyTuciBG5hFkU=",
          "52: cloud.google.com/go/auth/oauth2adapt v0.2.6/go.mod h1:AlmsELtlEBnaNTL7jCj8VQFLy6mbZv0s4Q7NGBeQ5E8=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68: cloud.google.com/go/compute v1.6.1/go.mod h1:g85FgpzFvNULZ+S8AYq87axRKuf2Kh7deLqV/jJ3thU=",
          "69: cloud.google.com/go/compute v1.7.0/go.mod h1:435lt8av5oL9P3fv1OEzSbSUe+ybHXGMPQHHZWZxy9U=",
          "70: cloud.google.com/go/compute v1.10.0/go.mod h1:ER5CLbMxl90o2jtNbGSbtfOpQKR0t15FOtRsugnLrlU=",
          "73: cloud.google.com/go/containeranalysis v0.5.1/go.mod h1:1D92jd8gRR/c0fGMlymRgxWD3Qw9C1ff6/T7mLgVL8I=",
          "74: cloud.google.com/go/containeranalysis v0.6.0/go.mod h1:HEJoiEIu+lEXM+k7+qLCci0h33lX3ZqoYFdmPcoO7s4=",
          "75: cloud.google.com/go/datacatalog v1.3.0/go.mod h1:g9svFY6tuR+j+hrTw3J2dNcmI0dzmSiyOzm8kpLq0a0=",
          "",
          "[Removed Lines]",
          "71: cloud.google.com/go/compute/metadata v0.5.0 h1:Zr0eK8JbFv6+Wi4ilXAR8FJ3wyNdpxHKJNPos6LTZOY=",
          "72: cloud.google.com/go/compute/metadata v0.5.0/go.mod h1:aHnloV2TPI38yx4s9+wAZhHykWvVCfu7hQbF+9CWoiY=",
          "",
          "[Added Lines]",
          "75: cloud.google.com/go/compute/metadata v0.6.0 h1:A6hENjEsCDtC1k8byVsgwvVcioamEHvZ4j01OwKxG9I=",
          "76: cloud.google.com/go/compute/metadata v0.6.0/go.mod h1:FjyFAW1MW0C203CEOMDTu3Dk1FlqW3Rga40jzHL4hfg=",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107: cloud.google.com/go/grafeas v0.2.0/go.mod h1:KhxgtF2hb0P191HlY5besjYm6MqTSTj3LSI+M+ByZHc=",
          "108: cloud.google.com/go/iam v0.3.0/go.mod h1:XzJPvDayI+9zsASAFO68Hk07u3z+f+JrT2xXNdp4bnY=",
          "109: cloud.google.com/go/iam v0.5.0/go.mod h1:wPU9Vt0P4UmCux7mqtRu6jcpPAb74cP1fh50J3QpkUc=",
          "114: cloud.google.com/go/language v1.4.0/go.mod h1:F9dRpNFQmJbkaop6g0JhSBXCNlO90e1KWx5iDdxbWic=",
          "115: cloud.google.com/go/language v1.6.0/go.mod h1:6dJ8t3B+lUYfStgls25GusK04NLh3eDLQnWM3mdEbhI=",
          "116: cloud.google.com/go/lifesciences v0.5.0/go.mod h1:3oIKy8ycWGPUyZDR/8RNnTOYevhaMLqh5vLUXs9zvT8=",
          "",
          "[Removed Lines]",
          "110: cloud.google.com/go/iam v1.1.2 h1:gacbrBdWcoVmGLozRuStX45YKvJtzIjJdAolzUs1sm4=",
          "111: cloud.google.com/go/iam v1.1.2/go.mod h1:A5avdyVL2tCppe4unb0951eI9jreack+RJ0/d+KUZOU=",
          "112: cloud.google.com/go/kms v1.15.2 h1:lh6qra6oC4AyWe5fUUUBe/S27k12OHAleOOOw6KakdE=",
          "113: cloud.google.com/go/kms v1.15.2/go.mod h1:3hopT4+7ooWRCjc2DxgnpESFxhIraaI2IpAVUEhbT/w=",
          "",
          "[Added Lines]",
          "114: cloud.google.com/go/iam v1.1.6 h1:bEa06k05IO4f4uJonbB5iAgKTPpABy1ayxaIZV/GHVc=",
          "115: cloud.google.com/go/iam v1.1.6/go.mod h1:O0zxdPeGBoFdWW3HWmBxJsk0pfvNM/p/qa82rWOGTwI=",
          "116: cloud.google.com/go/kms v1.15.7 h1:7caV9K3yIxvlQPAcaFffhlT7d1qpxjB1wHBtjWa13SM=",
          "117: cloud.google.com/go/kms v1.15.7/go.mod h1:ub54lbsa6tDkUwnu4W7Yt1aAIFLnspgh0kPGToDukeI=",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "171: cloud.google.com/go/storage v1.22.1/go.mod h1:S8N1cAStu7BOeFfE8KAQzmyyLkK8p/vmRq6kuBTW58Y=",
          "172: cloud.google.com/go/storage v1.23.0/go.mod h1:vOEEDNFnciUMhBeT6hsJIn3ieU5cFRmzeLgDvXzfIXc=",
          "173: cloud.google.com/go/storage v1.27.0/go.mod h1:x9DOL8TK/ygDUMieqwfhdpQryTeEkhGKMi80i/iqR2s=",
          "176: cloud.google.com/go/talent v1.1.0/go.mod h1:Vl4pt9jiHKvOgF9KoZo6Kob9oV4lwd/ZD5Cto54zDRw=",
          "177: cloud.google.com/go/talent v1.2.0/go.mod h1:MoNF9bhFQbiJ6eFD3uSsg0uBALw4n4gaCaEjBw9zo8g=",
          "178: cloud.google.com/go/videointelligence v1.6.0/go.mod h1:w0DIDlVRKtwPCn/C4iwZIJdvC69yInhW0cfi+p546uU=",
          "",
          "[Removed Lines]",
          "174: cloud.google.com/go/storage v1.30.1 h1:uOdMxAs8HExqBlnLtnQyP0YkvbiDpdGShGKtx6U/oNM=",
          "175: cloud.google.com/go/storage v1.30.1/go.mod h1:NfxhC0UJE1aXSx7CIIbCf7y9HKT7BiccwkR7+P7gN8E=",
          "",
          "[Added Lines]",
          "178: cloud.google.com/go/storage v1.39.1 h1:MvraqHKhogCOTXTlct/9C3K3+Uy2jBmFYb3/Sp6dVtY=",
          "179: cloud.google.com/go/storage v1.39.1/go.mod h1:xK6xZmxZmo+fyP7+DEF6FhNc24/JAe95OLyOHCXFH1o=",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "572: github.com/google/pprof v0.0.0-20240424215950-a892ee059fd6 h1:k7nVchz72niMH6YLQNvHSdIE7iqsQxK1P41mySCvssg=",
          "573: github.com/google/pprof v0.0.0-20240424215950-a892ee059fd6/go.mod h1:kf6iHlnVGwgKolg33glAes7Yg/8iWP8ukqeldJSO7jw=",
          "574: github.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=",
          "577: github.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=",
          "578: github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=",
          "579: github.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=",
          "",
          "[Removed Lines]",
          "575: github.com/google/s2a-go v0.1.4 h1:1kZ/sQM3srePvKs3tXAvQzo66XfcReoqFpIpIccE7Oc=",
          "576: github.com/google/s2a-go v0.1.4/go.mod h1:Ej+mSEMGRnqRzjc7VtF+jdBwYG5fuJfiZ8ELkjEwM0A=",
          "",
          "[Added Lines]",
          "579: github.com/google/s2a-go v0.1.8 h1:zZDs9gcbt9ZPLV0ndSyQk6Kacx2g/X+SKYovpnz3SMM=",
          "580: github.com/google/s2a-go v0.1.8/go.mod h1:6iNWHTpQ+nfNRN5E00MSdfDwVesa8hhS32PhPO8deJA=",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "582: github.com/googleapis/enterprise-certificate-proxy v0.0.0-20220520183353-fd19c99a87aa/go.mod h1:17drOmN3MwGY7t0e+Ei9b45FFGA3fBs3x36SsCg1hq8=",
          "583: github.com/googleapis/enterprise-certificate-proxy v0.1.0/go.mod h1:17drOmN3MwGY7t0e+Ei9b45FFGA3fBs3x36SsCg1hq8=",
          "584: github.com/googleapis/enterprise-certificate-proxy v0.2.0/go.mod h1:8C0jb7/mgJe/9KK8Lm7X9ctZC2t60YyIpYEI16jx0Qg=",
          "587: github.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=",
          "588: github.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=",
          "589: github.com/googleapis/gax-go/v2 v2.1.0/go.mod h1:Q3nei7sK6ybPYH7twZdmQpAd1MKb7pfu6SK+H1/DsU0=",
          "",
          "[Removed Lines]",
          "585: github.com/googleapis/enterprise-certificate-proxy v0.2.4 h1:uGy6JWR/uMIILU8wbf+OkstIrNiMjGpEIyhx8f6W7s4=",
          "586: github.com/googleapis/enterprise-certificate-proxy v0.2.4/go.mod h1:AwSRAtLfXpU5Nm3pW+v7rGDHp09LsPtGY9MduiEsR9k=",
          "",
          "[Added Lines]",
          "589: github.com/googleapis/enterprise-certificate-proxy v0.3.4 h1:XYIDZApgAnrN1c855gTgghdIA6Stxb52D5RnLI1SLyw=",
          "590: github.com/googleapis/enterprise-certificate-proxy v0.3.4/go.mod h1:YKe7cfqYXjKGpGvmSg28/fFvhNzinZQm8DGnaburhGA=",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "593: github.com/googleapis/gax-go/v2 v2.4.0/go.mod h1:XOTVJ59hdnfJLIP/dh8n5CGryZR2LxK9wbMD5+iXC6c=",
          "594: github.com/googleapis/gax-go/v2 v2.5.1/go.mod h1:h6B0KMMFNtI2ddbGJn3T3ZbwkeT6yqEF02fYlzkUCyo=",
          "595: github.com/googleapis/gax-go/v2 v2.6.0/go.mod h1:1mjbznJAPHFpesgE5ucqfYEscaz5kMdcIDwU/6+DDoY=",
          "598: github.com/googleapis/gnostic v0.0.0-20170729233727-0c5108395e2d/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=",
          "599: github.com/googleapis/gnostic v0.1.0/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=",
          "600: github.com/googleapis/gnostic v0.2.0/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=",
          "",
          "[Removed Lines]",
          "596: github.com/googleapis/gax-go/v2 v2.12.0 h1:A+gCJKdRfqXkr+BIRGtZLibNXf0m1f9E4HG56etFpas=",
          "597: github.com/googleapis/gax-go/v2 v2.12.0/go.mod h1:y+aIqrI5eb1YGMVJfuV3185Ts/D7qKpsEkdD5+I6QGU=",
          "",
          "[Added Lines]",
          "600: github.com/googleapis/gax-go/v2 v2.14.0 h1:f+jMrjBPl+DL9nI4IQzLUxMq7XrAqFYB7hBPqMNIe8o=",
          "601: github.com/googleapis/gax-go/v2 v2.14.0/go.mod h1:lhBCnjdLrWRaPvLWhmc8IS24m9mr07qSYnHncrgo+zk=",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1112: go.opencensus.io v0.23.0/go.mod h1:XItmlyltB5F7CS4xOC1DcqMoFqwtC6OG2xF7mCv7P7E=",
          "1113: go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=",
          "1114: go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=",
          "1115: go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.55.0 h1:ZIg3ZT/aQ7AfKqdwp7ECpOK6vHqquXXuyTjIO8ZdmPs=",
          "1116: go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.55.0/go.mod h1:DQAwmETtZV00skUwgD6+0U89g80NKsJE3DCKeLLPQMI=",
          "1117: go.opentelemetry.io/otel v1.3.0/go.mod h1:PWIKzi6JCp7sM0k9yZ43VX+T345uNbAkDKwHVjb2PTs=",
          "1120: go.opentelemetry.io/otel/exporters/otlp/internal/retry v1.3.0 h1:R/OBkMoGgfy2fLhs2QhkCI1w4HLEQX92GCcJB6SSdNk=",
          "1121: go.opentelemetry.io/otel/exporters/otlp/internal/retry v1.3.0/go.mod h1:VpP4/RMn8bv8gNo9uK7/IMY4mtWLELsS+JIP0inH0h4=",
          "1122: go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.3.0 h1:giGm8w67Ja7amYNfYMdme7xSp2pIxThWopw8+QP51Yk=",
          "1123: go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.3.0/go.mod h1:hO1KLR7jcKaDDKDkvI9dP/FIhpmna5lkqPUQdEjFAM8=",
          "1124: go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.3.0 h1:Ydage/P0fRrSPpZeCVxzjqGcI6iVmG2xb43+IR8cjqM=",
          "1125: go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.3.0/go.mod h1:QNX1aly8ehqqX1LEa6YniTU7VY9I6R3X/oPxhGdTceE=",
          "1128: go.opentelemetry.io/otel/sdk v1.3.0/go.mod h1:rIo4suHNhQwBIPg9axF8V9CA72Wz2mKF1teNrup8yzs=",
          "1131: go.opentelemetry.io/otel/trace v1.3.0/go.mod h1:c/VDhno8888bvQYmbYLqe41/Ldmr/KKunbvWM4/fEjk=",
          "1134: go.opentelemetry.io/proto/otlp v0.7.0/go.mod h1:PqfVotwruBrMGOCsRd/89rSnXhoiJIqeYNgFYFoEGnI=",
          "1135: go.opentelemetry.io/proto/otlp v0.11.0 h1:cLDgIBTf4lLOlztkhzAEdQsJ4Lj+i5Wc9k6Nn0K1VyU=",
          "1136: go.opentelemetry.io/proto/otlp v0.11.0/go.mod h1:QpEjXPrNQzrFDZgoTo49dgHR9RYRSrg3NAKnUGl9YpQ=",
          "",
          "[Removed Lines]",
          "1118: go.opentelemetry.io/otel v1.30.0 h1:F2t8sK4qf1fAmY9ua4ohFS/K+FUuOPemHUIXHtktrts=",
          "1119: go.opentelemetry.io/otel v1.30.0/go.mod h1:tFw4Br9b7fOS+uEao81PJjVMjW/5fvNCbpsDIXqP0pc=",
          "1126: go.opentelemetry.io/otel/metric v1.30.0 h1:4xNulvn9gjzo4hjg+wzIKG7iNFEaBMX00Qd4QIZs7+w=",
          "1127: go.opentelemetry.io/otel/metric v1.30.0/go.mod h1:aXTfST94tswhWEb+5QjlSqG+cZlmyXy/u8jFpor3WqQ=",
          "1129: go.opentelemetry.io/otel/sdk v1.21.0 h1:FTt8qirL1EysG6sTQRZ5TokkU8d0ugCj8htOgThZXQ8=",
          "1130: go.opentelemetry.io/otel/sdk v1.21.0/go.mod h1:Nna6Yv7PWTdgJHVRD9hIYywQBRx7pbox6nwBnZIxl/E=",
          "1132: go.opentelemetry.io/otel/trace v1.30.0 h1:7UBkkYzeg3C7kQX8VAidWh2biiQbtAKjyIML8dQ9wmc=",
          "1133: go.opentelemetry.io/otel/trace v1.30.0/go.mod h1:5EyKqTzzmyqB9bwtCCq6pDLktPK6fmGf/Dph+8VI02o=",
          "",
          "[Added Lines]",
          "1119: go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 h1:r6I7RJCN86bpD/FQwedZ0vSixDpwuWREjW9oRMsmqDc=",
          "1120: go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0/go.mod h1:B9yO6b04uB80CzjedvewuqDhxJxi11s7/GtiGa8bAjI=",
          "1124: go.opentelemetry.io/otel v1.31.0 h1:NsJcKPIW0D0H3NgzPDHmo0WW6SptzPdqg/L1zsIm2hY=",
          "1125: go.opentelemetry.io/otel v1.31.0/go.mod h1:O0C14Yl9FgkjqcCZAsE053C13OaddMYr/hz6clDkEJE=",
          "1132: go.opentelemetry.io/otel/metric v1.31.0 h1:FSErL0ATQAmYHUIzSezZibnyVlft1ybhy4ozRPcF2fE=",
          "1133: go.opentelemetry.io/otel/metric v1.31.0/go.mod h1:C3dEloVbLuYoX41KpmAhOqNriGbA+qqH6PQ5E5mUfnY=",
          "1135: go.opentelemetry.io/otel/sdk v1.31.0 h1:xLY3abVHYZ5HSfOg3l2E5LUj2Cwva5Y7yGxnSW9H5Gk=",
          "1136: go.opentelemetry.io/otel/sdk v1.31.0/go.mod h1:TfRbMdhvxIIr/B2N2LQW2S5v9m3gOQ/08KsbbO5BPT0=",
          "1137: go.opentelemetry.io/otel/sdk/metric v1.31.0 h1:i9hxxLJF/9kkvfHppyLL55aW7iIJz4JjxTeYusH7zMc=",
          "1138: go.opentelemetry.io/otel/sdk/metric v1.31.0/go.mod h1:CRInTMVvNhUKgSAMbKyTMxqOBC0zgyxzW55lZzX43Y8=",
          "1140: go.opentelemetry.io/otel/trace v1.31.0 h1:ffjsj1aRouKewfr85U2aGagJ46+MvodynlQ1HYdmJys=",
          "1141: go.opentelemetry.io/otel/trace v1.31.0/go.mod h1:TXZkRk7SM2ZQLtR6eoAWQFIHPvzQ06FJAsO1tJg480A=",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1155: golang.org/x/crypto v0.0.0-20200820211705-5c72a883971a/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=",
          "1156: golang.org/x/crypto v0.0.0-20201002170205-7f63de1d35b0/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=",
          "1157: golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=",
          "1159: golang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=",
          "1160: golang.org/x/crypto v0.3.0/go.mod h1:hebNnKkNXi2UzZN1eVRvBB7co0a+JxK6XbPiWVs/3J4=",
          "1161: golang.org/x/crypto v0.6.0/go.mod h1:OFC/31mSvZgRz0V1QTNCzfAI1aIRzbiufJtkMIlEp58=",
          "",
          "[Removed Lines]",
          "1158: golang.org/x/crypto v0.0.0-20220314234659-1baeb1ce4c0b/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1428: golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=",
          "1429: golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=",
          "1430: golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=",
          "1432: golang.org/x/text v0.4.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=",
          "1433: golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=",
          "1434: golang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=",
          "",
          "[Removed Lines]",
          "1431: golang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1561: google.golang.org/api v0.97.0/go.mod h1:w7wJQLTM+wvQpNf5JyEcBoxK0RH7EDrh/L4qfsuJ13s=",
          "1562: google.golang.org/api v0.98.0/go.mod h1:w7wJQLTM+wvQpNf5JyEcBoxK0RH7EDrh/L4qfsuJ13s=",
          "1563: google.golang.org/api v0.100.0/go.mod h1:ZE3Z2+ZOr87Rx7dqFsdRQkRBk36kDtp/h+QpHbB7a70=",
          "1566: google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=",
          "1567: google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=",
          "1568: google.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=",
          "",
          "[Removed Lines]",
          "1564: google.golang.org/api v0.128.0 h1:RjPESny5CnQRn9V6siglged+DZCgfu9l6mO9dkX9VOg=",
          "1565: google.golang.org/api v0.128.0/go.mod h1:Y611qgqaE92On/7g65MQgxYul3c0rEB894kniWLY750=",
          "",
          "[Added Lines]",
          "1570: google.golang.org/api v0.214.0 h1:h2Gkq07OYi6kusGOaT/9rnNljuXmqPnaig7WGPmKbwA=",
          "1571: google.golang.org/api v0.214.0/go.mod h1:bYPpLG8AyeMWwDU6NXoB00xC0DFkikVvd5MfwoxjLqE=",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1570: google.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=",
          "1571: google.golang.org/appengine v1.6.6/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=",
          "1572: google.golang.org/appengine v1.6.7/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=",
          "1575: google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=",
          "1576: google.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=",
          "1577: google.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=",
          "",
          "[Removed Lines]",
          "1573: google.golang.org/appengine v1.6.8 h1:IhEN5q69dyKagZPYMSdIjS2HqprW324FRQZJcGqPAsM=",
          "1574: google.golang.org/appengine v1.6.8/go.mod h1:1jJ3jBArFh5pcgW8gCtRJnepW8FzD1V44FJffLiz/Ds=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1674: google.golang.org/genproto v0.0.0-20221014173430-6e2ab493f96b/go.mod h1:1vXfmgAz9N9Jx0QA82PqRVauvCz1SGSz739p0f183jM=",
          "1675: google.golang.org/genproto v0.0.0-20221014213838-99cd37c6964a/go.mod h1:1vXfmgAz9N9Jx0QA82PqRVauvCz1SGSz739p0f183jM=",
          "1676: google.golang.org/genproto v0.0.0-20221025140454-527a21cfbd71/go.mod h1:9qHF0xnpdSfF6knlcsnpzUu5y+rpwgbvsyGAZPBMg4s=",
          "1683: google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=",
          "1684: google.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=",
          "1685: google.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=",
          "",
          "[Removed Lines]",
          "1677: google.golang.org/genproto v0.0.0-20230920204549-e6e6cdab5c13 h1:vlzZttNJGVqTsRFU9AmdnrcO1Znh8Ew9kCD//yjigk0=",
          "1678: google.golang.org/genproto v0.0.0-20230920204549-e6e6cdab5c13/go.mod h1:CCviP9RmpZ1mxVr8MUjCnSiY09IbAXZxhLE6EhHIdPU=",
          "1679: google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 h1:hjSy6tcFQZ171igDaN5QHOw2n6vx40juYbC/x67CEhc=",
          "1680: google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:qpvKtACPCQhAdu3PyQgV4l3LMXZEtft7y8QcarRsp9I=",
          "1681: google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 h1:pPJltXNxVzT4pK9yD8vR9X75DaWYYmLGMsEvBfFQZzQ=",
          "1682: google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:UqMtugtsSgubUsoxbuAoiCXvqvErP7Gf0so0mK9tHxU=",
          "",
          "[Added Lines]",
          "1681: google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9 h1:9+tzLLstTlPTRyJTh+ah5wIMsBW5c4tQwGTN3thOW9Y=",
          "1682: google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9/go.mod h1:mqHbVIp48Muh7Ywss/AD6I5kNVKZMmAa/QEW58Gxp2s=",
          "1683: google.golang.org/genproto/googleapis/api v0.0.0-20241104194629-dd2ea8efbc28 h1:M0KvPgPmDZHPlbRbaNU1APr28TvwvvdUPlSv7PUvy8g=",
          "1684: google.golang.org/genproto/googleapis/api v0.0.0-20241104194629-dd2ea8efbc28/go.mod h1:dguCy7UOdZhTvLzDyt15+rOrawrpM4q7DD9dQ1P11P4=",
          "1685: google.golang.org/genproto/googleapis/rpc v0.0.0-20241209162323-e6fa225c2576 h1:8ZmaLZE4XWrtU3MyClkYqqtl6Oegr3235h7jxsDyqCY=",
          "1686: google.golang.org/genproto/googleapis/rpc v0.0.0-20241209162323-e6fa225c2576/go.mod h1:5uTbfoYQed2U9p3KIj2/Zzm02PYhndfdmML0qC3q3FU=",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1716: google.golang.org/grpc v1.49.0/go.mod h1:ZgQEeidpAuNRZ8iRrlBKXZQP1ghovWIVhdJRyCDK+GI=",
          "1717: google.golang.org/grpc v1.50.0/go.mod h1:ZgQEeidpAuNRZ8iRrlBKXZQP1ghovWIVhdJRyCDK+GI=",
          "1718: google.golang.org/grpc v1.50.1/go.mod h1:ZgQEeidpAuNRZ8iRrlBKXZQP1ghovWIVhdJRyCDK+GI=",
          "1721: google.golang.org/grpc/cmd/protoc-gen-go-grpc v1.1.0/go.mod h1:6Kw0yEErY5E/yWrBtf03jp27GLLJujG4z/JK95pnjjw=",
          "1722: google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=",
          "1723: google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=",
          "",
          "[Removed Lines]",
          "1719: google.golang.org/grpc v1.68.0 h1:aHQeeJbo8zAkAa3pRzrVjZlbz6uSfeOXlJNQM0RAbz0=",
          "1720: google.golang.org/grpc v1.68.0/go.mod h1:fmSPC5AsjSBCK54MyHRx48kpOti1/jRfOlwEWywNjWA=",
          "",
          "[Added Lines]",
          "1723: google.golang.org/grpc v1.69.2 h1:U3S9QEtbXC0bYNvRtcoklF3xGtLViumSYxWykJS+7AU=",
          "1724: google.golang.org/grpc v1.69.2/go.mod h1:vyjdE6jLBI76dgpDojsFGNaHlxdjXN9ghpnd2o7JGZ4=",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1734: google.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=",
          "1735: google.golang.org/protobuf v1.28.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=",
          "1736: google.golang.org/protobuf v1.28.1/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=",
          "1739: gopkg.in/airbrake/gobrake.v2 v2.0.9/go.mod h1:/h5ZAUhDkGaJfjzjKLSjv6zCL6O0LLBxU4K+aSYdM/U=",
          "1740: gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=",
          "1741: gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=",
          "",
          "[Removed Lines]",
          "1737: google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=",
          "1738: google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=",
          "",
          "[Added Lines]",
          "1741: google.golang.org/protobuf v1.35.2 h1:8Ar7bF+apOIoThw1EdZl0p1oWvMqTHmpA2fRTyZO8io=",
          "1742: google.golang.org/protobuf v1.35.2/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=",
          "",
          "---------------"
        ]
      }
    }
  ]
}