{
  "cve_id": "CVE-2020-2204",
  "cve_desc": "A missing permission check in Jenkins Fortify on Demand Plugin 5.0.1 and earlier allows attackers with Overall/Read permission to connect to the globally configured Fortify on Demand endpoint using attacker-specified credentials IDs.",
  "repo": "jenkinsci/fortify-on-demand-uploader-plugin",
  "patch_hash": "28932f7c5ff18f87d4b3a480225fb0827591776b",
  "patch_info": {
    "commit_hash": "28932f7c5ff18f87d4b3a480225fb0827591776b",
    "repo": "jenkinsci/fortify-on-demand-uploader-plugin",
    "commit_url": "https://github.com/jenkinsci/fortify-on-demand-uploader-plugin/commit/28932f7c5ff18f87d4b3a480225fb0827591776b",
    "files": [
      "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
      "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
      "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
      "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
      "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
      "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
      "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java"
    ],
    "message": "SECURITY-1690 and SECURITY-1691 fixes",
    "before_after_code_files": [
      "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java||src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
      "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
      "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
      "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
      "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
      "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
      "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java"
    ]
  },
  "patch_diff": {
    "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java||src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java": [
      "File: src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java -> src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package org.jenkinsci.plugins.fodupload;",
      "3: import hudson.Extension;",
      "4: import hudson.util.FormValidation;",
      "5: import hudson.util.ListBoxModel;",
      "6: import hudson.util.Secret;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import com.cloudbees.plugins.credentials.CredentialsProvider;",
      "5: import hudson.model.Item;",
      "6: import hudson.model.Job;",
      "7: import hudson.security.ACL;",
      "8: import hudson.security.Permission;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14: import jenkins.model.Jenkins;",
      "15: import org.jenkinsci.plugins.fodupload.models.FodEnums.GrantType;",
      "16: import org.kohsuke.stapler.verb.POST;",
      "18: @Extension",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: import org.jenkinsci.plugins.plaincredentials.StringCredentials;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "190:     @SuppressWarnings(\"unused\")",
      "191:     public ListBoxModel doFillClientIdItems() {",
      "193:     }",
      "195:     @SuppressWarnings(\"unused\")",
      "196:     public ListBoxModel doFillClientSecretItems() {",
      "198:     }",
      "200:     @SuppressWarnings(\"unused\")",
      "201:     public ListBoxModel doFillUsernameItems() {",
      "203:     }",
      "205:     @SuppressWarnings(\"unused\")",
      "206:     public ListBoxModel doFillPersonalAccessTokenItems() {",
      "208:     }",
      "210:     @SuppressWarnings(\"unused\")",
      "211:     public ListBoxModel doFillTenantIdItems() {",
      "213:     }",
      "215:     FodApiConnection createFodApiConnection() {",
      "",
      "[Removed Lines]",
      "192:         return SharedUploadBuildStep.doFillStringCredentialsItems();",
      "197:         return SharedUploadBuildStep.doFillStringCredentialsItems();",
      "202:         return SharedUploadBuildStep.doFillStringCredentialsItems();",
      "207:         return SharedUploadBuildStep.doFillStringCredentialsItems();",
      "212:         return SharedUploadBuildStep.doFillStringCredentialsItems();",
      "",
      "[Added Lines]",
      "198:         Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
      "199:         return doFillStringCredentialsItems();",
      "204:         Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
      "205:         return doFillStringCredentialsItems();",
      "210:         Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
      "211:         return doFillStringCredentialsItems();",
      "216:         Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
      "217:         return doFillStringCredentialsItems();",
      "222:         Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
      "223:         return doFillStringCredentialsItems();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "262:                 FormValidation.ok(\"Successfully authenticated to Fortify on Demand.\") :",
      "263:                 FormValidation.error(\"Invalid connection information. Please check your credentials and try again.\");",
      "264:     }",
      "267: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "277:     private ListBoxModel doFillStringCredentialsItems(){",
      "278:         ListBoxModel items = CredentialsProvider.listCredentials(",
      "279:                 StringCredentials.class,",
      "280:                 Jenkins.get(),",
      "281:                 ACL.SYSTEM,",
      "282:                 null,",
      "283:                 null",
      "284:                 );",
      "285:         return items;",
      "286:     }",
      "",
      "---------------"
    ],
    "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java": [
      "File: src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: import hudson.FilePath;",
      "8: import hudson.Launcher;",
      "9: import hudson.model.AbstractProject;",
      "10: import hudson.model.Result;",
      "11: import hudson.model.Run;",
      "12: import hudson.model.TaskListener;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: import hudson.model.Item;",
      "11: import hudson.model.Job;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: import org.kohsuke.stapler.verb.POST;",
      "37: import static org.jenkinsci.plugins.fodupload.SharedPollingBuildStep.*;",
      "39: @SuppressWarnings(\"unused\")",
      "40: public class PollingBuildStep extends Recorder implements SimpleBuildStep {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: import org.kohsuke.stapler.AncestorInPath;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "160:         @POST",
      "161:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(USERNAME) final String username,",
      "162:                                                                   @QueryParameter(PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
      "166:         }",
      "168:         @SuppressWarnings(\"unused\")",
      "",
      "[Removed Lines]",
      "163:                                                                   @QueryParameter(TENANT_ID) final String tenantId) {",
      "164:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
      "165:             return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
      "",
      "[Added Lines]",
      "166:                                                                   @QueryParameter(TENANT_ID) final String tenantId,",
      "167:                                                                   @AncestorInPath Job job) {",
      "168:             job.checkPermission(Item.CONFIGURE);",
      "169:             return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId, job);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "171:         }",
      "173:         @SuppressWarnings(\"unused\")",
      "176:         }",
      "178:         @SuppressWarnings(\"unused\")",
      "181:         }",
      "183:         @SuppressWarnings(\"unused\")",
      "186:         }",
      "187:     }",
      "188: }",
      "",
      "[Removed Lines]",
      "174:         public ListBoxModel doFillUsernameItems() {",
      "175:             return SharedPollingBuildStep.doFillStringCredentialsItems();",
      "179:         public ListBoxModel doFillPersonalAccessTokenItems() {",
      "180:             return SharedPollingBuildStep.doFillStringCredentialsItems();",
      "184:         public ListBoxModel doFillTenantIdItems() {",
      "185:             return SharedPollingBuildStep.doFillStringCredentialsItems();",
      "",
      "[Added Lines]",
      "178:         public ListBoxModel doFillUsernameItems(@AncestorInPath Job job) {",
      "179:             return SharedPollingBuildStep.doFillStringCredentialsItems(job);",
      "183:         public ListBoxModel doFillPersonalAccessTokenItems(@AncestorInPath Job job) {",
      "184:             return SharedPollingBuildStep.doFillStringCredentialsItems(job);",
      "188:         public ListBoxModel doFillTenantIdItems(@AncestorInPath Job job) {",
      "189:             return SharedPollingBuildStep.doFillStringCredentialsItems(job);",
      "",
      "---------------"
    ],
    "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java": [
      "File: src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
      "18: import hudson.FilePath;",
      "19: import hudson.Launcher;",
      "20: import hudson.model.Result;",
      "21: import hudson.model.Run;",
      "22: import hudson.model.TaskListener;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import hudson.model.Item;",
      "21: import hudson.model.Job;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25: import hudson.util.ListBoxModel;",
      "26: import jenkins.model.GlobalConfiguration;",
      "27: import jenkins.model.Jenkins;",
      "28: import org.kohsuke.stapler.verb.POST;",
      "30: public class SharedPollingBuildStep {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import org.kohsuke.stapler.AncestorInPath;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "123:     @POST",
      "124:     public static FormValidation doTestPersonalAccessTokenConnection(final String username,",
      "125:                                                                      final String personalAccessToken,",
      "128:         FodApiConnection testApi;",
      "129:         String baseUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getBaseUrl();",
      "130:         String apiUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getApiUrl();",
      "",
      "[Removed Lines]",
      "126:                                                                      final String tenantId) {",
      "127:         Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
      "",
      "[Added Lines]",
      "130:                                                                      final String tenantId,",
      "131:                                                                      @AncestorInPath Job job) {",
      "132:         job.checkPermission(Item.CONFIGURE);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "154:     }",
      "156:     @SuppressWarnings(\"unused\")",
      "158:         ListBoxModel items = CredentialsProvider.listCredentials(",
      "159:                 StringCredentials.class,",
      "160:                 Jenkins.get(),",
      "",
      "[Removed Lines]",
      "157:     public static ListBoxModel doFillStringCredentialsItems() {",
      "",
      "[Added Lines]",
      "163:     public static ListBoxModel doFillStringCredentialsItems(@AncestorInPath Job job) {",
      "164:         job.checkPermission(Item.CONFIGURE);",
      "",
      "---------------"
    ],
    "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java": [
      "File: src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import hudson.Launcher;",
      "22: import hudson.model.AbstractBuild;",
      "23: import hudson.model.BuildListener;",
      "24: import hudson.model.Result;",
      "25: import hudson.model.Run;",
      "26: import hudson.model.TaskListener;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import hudson.model.Item;",
      "25: import hudson.model.Job;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29: import hudson.util.ListBoxModel;",
      "30: import jenkins.model.GlobalConfiguration;",
      "31: import jenkins.model.Jenkins;",
      "32: import org.kohsuke.stapler.verb.POST;",
      "34: public class SharedUploadBuildStep {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: import org.kohsuke.stapler.AncestorInPath;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "113:     @POST",
      "114:     public static FormValidation doTestPersonalAccessTokenConnection(final String username,",
      "115:                                                                      final String personalAccessToken,",
      "118:         FodApiConnection testApi;",
      "119:         String baseUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getBaseUrl();",
      "120:         String apiUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getApiUrl();",
      "",
      "[Removed Lines]",
      "116:                                                                      final String tenantId) {",
      "117:         Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
      "",
      "[Added Lines]",
      "119:                                                                      final String tenantId,",
      "120:                                                                      @AncestorInPath Job job) {",
      "121:         job.checkPermission(Item.CONFIGURE);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "154:     }",
      "156:     @SuppressWarnings(\"unused\")",
      "158:         ListBoxModel items = CredentialsProvider.listCredentials(",
      "159:                 StringCredentials.class,",
      "160:                 Jenkins.get(),",
      "",
      "[Removed Lines]",
      "157:     public static ListBoxModel doFillStringCredentialsItems() {",
      "",
      "[Added Lines]",
      "161:     public static ListBoxModel doFillStringCredentialsItems(@AncestorInPath Job job) {",
      "162:         job.checkPermission(Item.CONFIGURE);",
      "",
      "---------------"
    ],
    "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java": [
      "File: src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: import hudson.model.AbstractBuild;",
      "8: import hudson.model.AbstractProject;",
      "9: import hudson.model.BuildListener;",
      "10: import hudson.model.Run;",
      "11: import hudson.model.TaskListener;",
      "12: import hudson.security.Permission;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: import hudson.model.Item;",
      "11: import hudson.model.Job;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32: import jenkins.model.Jenkins;",
      "33: import org.jenkinsci.plugins.fodupload.models.AuthenticationModel;",
      "34: import org.kohsuke.stapler.QueryParameter;",
      "35: import org.kohsuke.stapler.verb.POST;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: import org.kohsuke.stapler.AncestorInPath;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "196:         @POST",
      "197:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedUploadBuildStep.USERNAME) final String username,",
      "198:                                                                   @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
      "202:         }",
      "204:         @SuppressWarnings(\"unused\")",
      "",
      "[Removed Lines]",
      "199:                                                                   @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId) {",
      "200:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
      "201:             return SharedUploadBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
      "",
      "[Added Lines]",
      "202:                                                                   @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId,",
      "203:                                                                   @AncestorInPath Job job) {",
      "204:             job.checkPermission(Item.CONFIGURE);",
      "205:             return SharedUploadBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId,job);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "214:         @SuppressWarnings(\"unused\")",
      "218:         }",
      "220:         @SuppressWarnings(\"unused\")",
      "223:         }",
      "225:         @SuppressWarnings(\"unused\")",
      "228:         }",
      "230:         @SuppressWarnings(\"unused\")",
      "",
      "[Removed Lines]",
      "216:         public ListBoxModel doFillUsernameItems() {",
      "217:             return SharedUploadBuildStep.doFillStringCredentialsItems();",
      "221:         public ListBoxModel doFillPersonalAccessTokenItems() {",
      "222:             return SharedUploadBuildStep.doFillStringCredentialsItems();",
      "226:         public ListBoxModel doFillTenantIdItems() {",
      "227:             return SharedUploadBuildStep.doFillStringCredentialsItems();",
      "",
      "[Added Lines]",
      "220:         public ListBoxModel doFillUsernameItems(@AncestorInPath Job job) {",
      "221:             return SharedUploadBuildStep.doFillStringCredentialsItems(job);",
      "225:         public ListBoxModel doFillPersonalAccessTokenItems(@AncestorInPath Job job) {",
      "226:             return SharedUploadBuildStep.doFillStringCredentialsItems(job);",
      "230:         public ListBoxModel doFillTenantIdItems(@AncestorInPath Job job) {",
      "231:             return SharedUploadBuildStep.doFillStringCredentialsItems(job);",
      "",
      "---------------"
    ],
    "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java": [
      "File: src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java -> src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import hudson.Launcher;",
      "23: import hudson.model.AbstractBuild;",
      "24: import hudson.model.BuildListener;",
      "25: import hudson.model.Run;",
      "26: import hudson.model.TaskListener;",
      "27: import hudson.util.FormValidation;",
      "28: import hudson.util.ListBoxModel;",
      "29: import hudson.util.Secret;",
      "30: import org.kohsuke.stapler.verb.POST;",
      "32: @SuppressFBWarnings(\"unused\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: import hudson.model.Item;",
      "26: import hudson.model.Job;",
      "32: import org.kohsuke.stapler.AncestorInPath;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "193:         @POST",
      "194:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedPollingBuildStep.USERNAME) final String username,",
      "195:                                                                   @QueryParameter(SharedPollingBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
      "200:         }",
      "",
      "[Removed Lines]",
      "196:                                                                   @QueryParameter(SharedPollingBuildStep.TENANT_ID) final String tenantId) {",
      "197:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
      "198:             return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
      "",
      "[Added Lines]",
      "200:                                                                   @QueryParameter(SharedPollingBuildStep.TENANT_ID) final String tenantId,",
      "201:                                                                   @AncestorInPath Job job) {",
      "202:             job.checkPermission(Item.CONFIGURE);",
      "203:             return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId, job);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "205:         }",
      "207:         @SuppressWarnings(\"unused\")",
      "210:         }",
      "212:         @SuppressWarnings(\"unused\")",
      "215:         }",
      "217:         @SuppressWarnings(\"unused\")",
      "220:         }",
      "222:     }",
      "",
      "[Removed Lines]",
      "208:         public ListBoxModel doFillUsernameItems() {",
      "209:             return SharedPollingBuildStep.doFillStringCredentialsItems();",
      "213:         public ListBoxModel doFillPersonalAccessTokenItems() {",
      "214:             return SharedPollingBuildStep.doFillStringCredentialsItems();",
      "218:         public ListBoxModel doFillTenantIdItems() {",
      "219:             return SharedPollingBuildStep.doFillStringCredentialsItems();",
      "",
      "[Added Lines]",
      "214:         public ListBoxModel doFillUsernameItems(@AncestorInPath Job job) {",
      "215:             return SharedPollingBuildStep.doFillStringCredentialsItems(job);",
      "219:         public ListBoxModel doFillPersonalAccessTokenItems(@AncestorInPath Job job) {",
      "220:             return SharedPollingBuildStep.doFillStringCredentialsItems(job);",
      "224:         public ListBoxModel doFillTenantIdItems(@AncestorInPath Job job) {",
      "225:             return SharedPollingBuildStep.doFillStringCredentialsItems(job);",
      "",
      "---------------"
    ],
    "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java": [
      "File: src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java -> src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import hudson.Launcher;",
      "22: import hudson.model.AbstractBuild;",
      "23: import hudson.model.BuildListener;",
      "24: import hudson.model.Run;",
      "25: import hudson.model.TaskListener;",
      "26: import hudson.util.FormValidation;",
      "27: import hudson.util.ListBoxModel;",
      "28: import hudson.util.Secret;",
      "29: import org.kohsuke.stapler.verb.POST;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import hudson.model.Item;",
      "25: import hudson.model.Job;",
      "31: import org.kohsuke.stapler.AncestorInPath;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "211:         @POST",
      "212:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedUploadBuildStep.USERNAME) final String username,",
      "213:                                                                   @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
      "218:         }",
      "",
      "[Removed Lines]",
      "214:                                                                   @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId) {",
      "215:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
      "216:             return SharedUploadBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
      "",
      "[Added Lines]",
      "217:                                                                   @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId,",
      "218:                                                                   @AncestorInPath Job job) {",
      "219:             job.checkPermission(Item.CONFIGURE);",
      "220:             return SharedUploadBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId, job);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "228:         }",
      "230:         @SuppressWarnings(\"unused\")",
      "233:         }",
      "235:         @SuppressWarnings(\"unused\")",
      "238:         }",
      "240:         @SuppressWarnings(\"unused\")",
      "243:         }",
      "245:         @SuppressWarnings(\"unused\")",
      "",
      "[Removed Lines]",
      "231:         public ListBoxModel doFillUsernameItems() {",
      "232:             return SharedUploadBuildStep.doFillStringCredentialsItems();",
      "236:         public ListBoxModel doFillPersonalAccessTokenItems() {",
      "237:             return SharedUploadBuildStep.doFillStringCredentialsItems();",
      "241:         public ListBoxModel doFillTenantIdItems() {",
      "242:             return SharedUploadBuildStep.doFillStringCredentialsItems();",
      "",
      "[Added Lines]",
      "236:         public ListBoxModel doFillUsernameItems(@AncestorInPath Job job) {",
      "237:             return SharedUploadBuildStep.doFillStringCredentialsItems(job);",
      "241:         public ListBoxModel doFillPersonalAccessTokenItems(@AncestorInPath Job job) {",
      "242:             return SharedUploadBuildStep.doFillStringCredentialsItems(job);",
      "246:         public ListBoxModel doFillTenantIdItems(@AncestorInPath Job job) {",
      "247:             return SharedUploadBuildStep.doFillStringCredentialsItems(job);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee459738779198427a0adc1aaae88b5f5db1d6a6",
      "candidate_info": {
        "commit_hash": "ee459738779198427a0adc1aaae88b5f5db1d6a6",
        "repo": "jenkinsci/fortify-on-demand-uploader-plugin",
        "commit_url": "https://github.com/jenkinsci/fortify-on-demand-uploader-plugin/commit/ee459738779198427a0adc1aaae88b5f5db1d6a6",
        "files": [
          "src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/Utils.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/controllers/ReleaseController.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanController.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/FodEnums.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/JobModel.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/response/LookupItemsModel.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java"
        ],
        "message": "Reformatting files (#14)",
        "before_after_code_files": [
          "src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java||src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java||src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java||src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/Utils.java||src/main/java/org/jenkinsci/plugins/fodupload/Utils.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/controllers/ReleaseController.java||src/main/java/org/jenkinsci/plugins/fodupload/controllers/ReleaseController.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanController.java||src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanController.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java||src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java||src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/FodEnums.java||src/main/java/org/jenkinsci/plugins/fodupload/models/FodEnums.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/JobModel.java||src/main/java/org/jenkinsci/plugins/fodupload/models/JobModel.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/response/LookupItemsModel.java||src/main/java/org/jenkinsci/plugins/fodupload/models/response/LookupItemsModel.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java||src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java||src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java"
          ],
          "candidate": [
            "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java||src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java||src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java -> src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "24: package org.jenkinsci.plugins.fodupload;",
          "26: import jenkins.model.GlobalConfiguration;",
          "27: import org.jenkinsci.plugins.fodupload.FodApiConnection;",
          "28: import org.jenkinsci.plugins.fodupload.models.AuthenticationModel;",
          "29: import org.jenkinsci.plugins.fodupload.models.FodEnums;",
          "30: import org.jenkinsci.plugins.fodupload.models.JobModel;",
          "31: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "36: public class ApiConnectionFactory {",
          "38:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "39:     public static FodApiConnection createApiConnection(AuthenticationModel model) {",
          "40:         FodApiConnection apiConnection = null;",
          "41:         if(GlobalConfiguration.all() != null && GlobalConfiguration.all().get(FodGlobalDescriptor.class) != null){",
          "42:             if(model.getOverrideGlobalConfig())",
          "43:             {",
          "45:                     String baseUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getBaseUrl();",
          "46:                     String apiUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getApiUrl();",
          "47:                     if (Utils.isNullOrEmpty(baseUrl))",
          "48:                         throw new IllegalArgumentException(\"Base URL is null.\");",
          "49:                     if (Utils.isNullOrEmpty(apiUrl))",
          "50:                         throw new IllegalArgumentException(\"Api URL is null.\");",
          "51:                     apiConnection =  new FodApiConnection(model.getTenantId() + \"\\\\\" + model.getUsername(),",
          "52:                                                       model.getPersonalAccessToken(),",
          "53:                                                       baseUrl,",
          "54:                                                       apiUrl,",
          "55:                                                       FodEnums.GrantType.PASSWORD,",
          "56:                                                       \"api-tenant\");",
          "58:             }",
          "59:             else",
          "60:             {",
          "61:                 apiConnection = GlobalConfiguration.all().get(FodGlobalDescriptor.class).createFodApiConnection();",
          "62:             }",
          "63:         }",
          "64:         return apiConnection;",
          "65:     }",
          "67: }",
          "",
          "[Added Lines]",
          "24: package org.jenkinsci.plugins.fodupload;",
          "26: import jenkins.model.GlobalConfiguration;",
          "27: import org.jenkinsci.plugins.fodupload.FodApiConnection;",
          "28: import org.jenkinsci.plugins.fodupload.models.AuthenticationModel;",
          "29: import org.jenkinsci.plugins.fodupload.models.FodEnums;",
          "30: import org.jenkinsci.plugins.fodupload.models.JobModel;",
          "31: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "36: public class ApiConnectionFactory {",
          "38:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "39:     public static FodApiConnection createApiConnection(AuthenticationModel model) {",
          "40:         FodApiConnection apiConnection = null;",
          "41:         if (GlobalConfiguration.all() != null && GlobalConfiguration.all().get(FodGlobalDescriptor.class) != null) {",
          "42:             if (model.getOverrideGlobalConfig()) {",
          "44:                 String baseUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getBaseUrl();",
          "45:                 String apiUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getApiUrl();",
          "46:                 if (Utils.isNullOrEmpty(baseUrl))",
          "47:                     throw new IllegalArgumentException(\"Base URL is null.\");",
          "48:                 if (Utils.isNullOrEmpty(apiUrl))",
          "49:                     throw new IllegalArgumentException(\"Api URL is null.\");",
          "50:                 apiConnection = new FodApiConnection(model.getTenantId() + \"\\\\\" + model.getUsername(),",
          "51:                         model.getPersonalAccessToken(),",
          "52:                         baseUrl,",
          "53:                         apiUrl,",
          "54:                         FodEnums.GrantType.PASSWORD,",
          "55:                         \"api-tenant\");",
          "57:             } else {",
          "58:                 apiConnection = GlobalConfiguration.all().get(FodGlobalDescriptor.class).createFodApiConnection();",
          "59:             }",
          "60:         }",
          "61:         return apiConnection;",
          "62:     }",
          "64: }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java||src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java -> src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import java.io.IOException;",
          "11: import java.net.InetSocketAddress;",
          "12: import java.util.concurrent.TimeUnit;",
          "13: import org.jenkinsci.plugins.fodupload.models.FodEnums;",
          "14: import org.jenkinsci.plugins.fodupload.models.FodEnums.GrantType;",
          "16: public class FodApiConnection {",
          "18:     private final static int CONNECTION_TIMEOUT = 30; // seconds",
          "19:     private final static int WRITE_TIMEOUT = 30; // seconds",
          "20:     private final static int READ_TIMEOUT = 30; // seconds",
          "24:     private String baseUrl;",
          "25:     private String apiUrl;",
          "26:     private OkHttpClient client;",
          "",
          "[Removed Lines]",
          "21:     public final static int MAX_SIZE = 50;",
          "",
          "[Added Lines]",
          "19:     public final static int MAX_SIZE = 50;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:     public void authenticate() throws IOException {",
          "65:         RequestBody formBody = null;",
          "68:             formBody = new FormBody.Builder()",
          "87:         }",
          "89:         Request request = new Request.Builder()",
          "",
          "[Removed Lines]",
          "66:         if(grantType == GrantType.CLIENT_CREDENTIALS)",
          "67:         {",
          "69:                 .add(\"scope\", scope)",
          "70:                 .add(\"grant_type\", \"client_credentials\")",
          "71:                 .add(\"client_id\", id)",
          "72:                 .add(\"client_secret\", secret)",
          "73:                 .build();",
          "74:         }",
          "75:         else if(grantType == GrantType.PASSWORD)",
          "76:         {",
          "77:              formBody = new FormBody.Builder()",
          "78:                 .add(\"scope\", scope)",
          "79:                 .add(\"grant_type\", \"password\")",
          "80:                 .add(\"username\", id)",
          "81:                 .add(\"password\", secret)",
          "82:                 .build();",
          "83:         }",
          "84:         else",
          "85:         {",
          "86:             throw new IOException(\"Invalid Grant Type\" );",
          "",
          "[Added Lines]",
          "65:         if (grantType == GrantType.CLIENT_CREDENTIALS) {",
          "67:                     .add(\"scope\", scope)",
          "68:                     .add(\"grant_type\", \"client_credentials\")",
          "69:                     .add(\"client_id\", id)",
          "70:                     .add(\"client_secret\", secret)",
          "71:                     .build();",
          "72:         } else if (grantType == GrantType.PASSWORD) {",
          "73:             formBody = new FormBody.Builder()",
          "74:                     .add(\"scope\", scope)",
          "75:                     .add(\"grant_type\", \"password\")",
          "76:                     .add(\"username\", id)",
          "77:                     .add(\"password\", secret)",
          "78:                     .build();",
          "79:         } else {",
          "80:             throw new IOException(\"Invalid Grant Type\");",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java||src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java -> src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: package org.jenkinsci.plugins.fodupload;",
          "3: import hudson.Extension;",
          "4: import hudson.util.FormValidation;",
          "5: import jenkins.model.GlobalConfiguration;",
          "6: import net.sf.json.JSONObject;",
          "7: import org.kohsuke.stapler.QueryParameter;",
          "8: import org.kohsuke.stapler.StaplerRequest;",
          "10: import java.io.IOException;",
          "11: import jenkins.model.Jenkins;",
          "12: import org.jenkinsci.plugins.fodupload.models.FodEnums.GrantType;",
          "13: import org.kohsuke.stapler.verb.POST;",
          "15: @Extension",
          "16: public class FodGlobalDescriptor extends GlobalConfiguration {",
          "17:     private static final String CLIENT_ID = \"clientId\";",
          "18:     private static final String GLOBAL_AUTH_TYPE= \"globalAuthType\";",
          "19:     private static final String CLIENT_SECRET = \"clientSecret\";",
          "20:     private static final String USERNAME = \"username\";",
          "21:     private static final String PERSONAL_ACCESS_TOKEN = \"personalAccessToken\";",
          "22:     private static final String TENANT_ID = \"tenantId\";",
          "23:     private static final String BASE_URL = \"baseUrl\";",
          "24:     private static final String API_URL = \"apiUrl\";",
          "26:     private String globalAuthType;",
          "27:     private String clientId;",
          "28:     private String clientSecret;",
          "29:     private String username;",
          "30:     private String personalAccessToken;",
          "31:     private String tenantId;",
          "32:     private String baseUrl;",
          "33:     private String apiUrl;",
          "35:     public FodGlobalDescriptor() {",
          "36:         load();",
          "37:     }",
          "40:     @Override",
          "41:     public boolean configure(StaplerRequest req, JSONObject formData) throws FormException {",
          "42:         JSONObject globalAuthTypeObject = formData.getJSONObject(GLOBAL_AUTH_TYPE);",
          "43:         if(globalAuthTypeObject.size() > 0)",
          "44:         {",
          "45:             globalAuthType = globalAuthTypeObject.getString(\"value\");",
          "46:             if(globalAuthType.equals(\"apiKeyType\"))",
          "47:             {",
          "48:                 clientId = globalAuthTypeObject.getString(CLIENT_ID);",
          "49:                 clientSecret = globalAuthTypeObject.getString(CLIENT_SECRET);",
          "50:             }",
          "51:             else if (globalAuthType.equals(\"personalAccessTokenType\"))",
          "52:             {",
          "53:                 username = globalAuthTypeObject.getString(USERNAME);",
          "54:                 personalAccessToken = globalAuthTypeObject.getString(PERSONAL_ACCESS_TOKEN);",
          "55:                 tenantId = globalAuthTypeObject.getString(TENANT_ID);",
          "56:             }",
          "57:         }",
          "58:         baseUrl = formData.getString(BASE_URL);",
          "59:         apiUrl = formData.getString(API_URL);",
          "61:         save();",
          "63:         return super.configure(req, formData);",
          "64:     }",
          "69:     public String getDisplayName() {",
          "70:         return \"Fortify Uploader Plugin\";",
          "71:     }",
          "73:     @SuppressWarnings(\"unused\")",
          "74:     public String getGlobalAuthType() {",
          "75:         return globalAuthType;",
          "76:     }",
          "78:     @SuppressWarnings(\"unused\")",
          "79:     public String getClientId() {",
          "80:         return clientId;",
          "81:     }",
          "83:     @SuppressWarnings(\"unused\")",
          "84:     public String getClientSecret() {",
          "85:         return clientSecret;",
          "86:     }",
          "88:     @SuppressWarnings(\"unused\")",
          "89:     public String getUsername() {",
          "90:         return username;",
          "91:     }",
          "93:     @SuppressWarnings(\"unused\")",
          "94:     public String getPersonalAccessToken() {",
          "95:         return personalAccessToken;",
          "96:     }",
          "98:     @SuppressWarnings(\"unused\")",
          "99:     public String getTenantId() {",
          "100:         return tenantId;",
          "101:     }",
          "103:     @SuppressWarnings(\"unused\")",
          "104:     public String getBaseUrl() {",
          "105:         return baseUrl;",
          "106:     }",
          "108:     @SuppressWarnings(\"unused\")",
          "109:     public String getApiUrl() {",
          "110:         return apiUrl;",
          "111:     }",
          "113:     public boolean getAuthTypeIsApiKey()",
          "114:     {",
          "115:         return globalAuthType.equals(\"apiKeyType\");",
          "116:     }",
          "118:     public boolean getAuthTypeIsPersonalToken()",
          "119:     {",
          "120:         return globalAuthType.equals(\"personalAccessTokenType\");",
          "121:     }",
          "123:     @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "124:     @POST",
          "125:     public FormValidation doTestApiKeyConnection(@QueryParameter(CLIENT_ID) final String clientId,",
          "126:                                            @QueryParameter(CLIENT_SECRET) final String clientSecret,",
          "127:                                            @QueryParameter(BASE_URL) final String baseUrl,",
          "128:                                            @QueryParameter(API_URL) final String apiUrl)",
          "129:     {",
          "130:         Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "131:         FodApiConnection testApi;",
          "132:         if (Utils.isNullOrEmpty(baseUrl))",
          "133:             return FormValidation.error(\"Fortify on Demand URL is empty!\");",
          "134:         if (Utils.isNullOrEmpty(apiUrl))",
          "135:             return FormValidation.error(\"Fortify on Demand API URL is empty!\");",
          "136:         if (Utils.isNullOrEmpty(clientId))",
          "137:             return FormValidation.error(\"API Key is empty!\");",
          "138:         if (Utils.isNullOrEmpty(clientSecret))",
          "139:             return FormValidation.error(\"Secret Key is empty!\");",
          "140:         testApi = new FodApiConnection(clientId, clientSecret, baseUrl, apiUrl, GrantType.CLIENT_CREDENTIALS, \"api-tenant\");",
          "141:         return testConnection(testApi);",
          "142:     }",
          "145:     @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "146:     @POST",
          "147:     public FormValidation doTestPersonalAccessTokenConnection( @QueryParameter(USERNAME) final String username,",
          "148:                                            @QueryParameter(PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "149:                                            @QueryParameter(TENANT_ID) final String tenantId,",
          "150:                                            @QueryParameter(BASE_URL) final String baseUrl,",
          "151:                                            @QueryParameter(API_URL) final String apiUrl)",
          "152:     {",
          "153:         Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "154:         FodApiConnection testApi;",
          "155:         if (Utils.isNullOrEmpty(baseUrl))",
          "156:             return FormValidation.error(\"Fortify on Demand URL is empty!\");",
          "157:         if (Utils.isNullOrEmpty(apiUrl))",
          "158:             return FormValidation.error(\"Fortify on Demand API URL is empty!\");",
          "159:         if (Utils.isNullOrEmpty(username))",
          "160:             return FormValidation.error(\"Username is empty!\");",
          "161:         if (Utils.isNullOrEmpty(personalAccessToken))",
          "162:             return FormValidation.error(\"Personal Access Token is empty!\");",
          "163:         if (Utils.isNullOrEmpty(tenantId))",
          "164:             return FormValidation.error(\"Tenant ID is null.\");",
          "165:         testApi = new FodApiConnection(tenantId + \"\\\\\" + username, personalAccessToken, baseUrl, apiUrl, GrantType.PASSWORD, \"api-tenant\");",
          "166:         return testConnection(testApi);",
          "168:     }",
          "170:     FodApiConnection createFodApiConnection() {",
          "172:         if(!Utils.isNullOrEmpty(globalAuthType))",
          "173:         {",
          "175:             if (Utils.isNullOrEmpty(baseUrl))",
          "176:                 throw new IllegalArgumentException(\"Base URL is null.\");",
          "177:             if (Utils.isNullOrEmpty(apiUrl))",
          "178:                 throw new IllegalArgumentException(\"Api URL is null.\");",
          "180:             if(globalAuthType.equals(\"apiKeyType\"))",
          "181:             {",
          "182:                 if (Utils.isNullOrEmpty(clientId))",
          "183:                     throw new IllegalArgumentException(\"Client ID is null.\");",
          "184:                 if (Utils.isNullOrEmpty(clientSecret))",
          "185:                     throw new IllegalArgumentException(\"Client Secret is null.\");",
          "186:                 return new FodApiConnection(clientId, clientSecret, baseUrl, apiUrl, GrantType.CLIENT_CREDENTIALS, \"api-tenant\");",
          "187:             }",
          "188:             else if(globalAuthType.equals(\"personalAccessTokenType\"))",
          "189:             {",
          "190:                 if (Utils.isNullOrEmpty(username))",
          "191:                         throw new IllegalArgumentException(\"Username is null.\");",
          "192:                 if (Utils.isNullOrEmpty(personalAccessToken))",
          "193:                         throw new IllegalArgumentException(\"Personal Access Token is null.\");",
          "194:                  if (Utils.isNullOrEmpty(tenantId))",
          "195:                         throw new IllegalArgumentException(\"Tenant ID is null.\");",
          "196:                 return new FodApiConnection(tenantId + \"\\\\\" +username, personalAccessToken, baseUrl, apiUrl, GrantType.PASSWORD, \"api-tenant\");",
          "197:             }",
          "198:             else",
          "199:             {",
          "200:                 throw new IllegalArgumentException(\"Invalid authentication type\");",
          "201:             }",
          "203:         }",
          "204:         else",
          "205:         {",
          "206:             throw new IllegalArgumentException(\"No authentication method configured\");",
          "207:         }",
          "209:     }",
          "211:     public FormValidation testConnection(FodApiConnection testApi) {",
          "212:         try {",
          "213:             testApi.authenticate();",
          "214:         } catch (IOException e) {",
          "215:             return FormValidation.error(\"Unable to authenticate with Fortify on Demand\");",
          "216:         }",
          "218:         String token = testApi.getToken();",
          "220:         if (token == null) {",
          "221:             return FormValidation.error(\"Unable to retrieve authentication token.\");",
          "222:         }",
          "224:         return !token.isEmpty() ?",
          "225:                 FormValidation.ok(\"Successfully authenticated to Fortify on Demand.\") :",
          "226:                 FormValidation.error(\"Invalid connection information. Please check your credentials and try again.\");",
          "227:     }",
          "228: }",
          "",
          "[Added Lines]",
          "1: package org.jenkinsci.plugins.fodupload;",
          "3: import hudson.Extension;",
          "4: import hudson.util.FormValidation;",
          "5: import jenkins.model.GlobalConfiguration;",
          "6: import net.sf.json.JSONObject;",
          "7: import org.kohsuke.stapler.QueryParameter;",
          "8: import org.kohsuke.stapler.StaplerRequest;",
          "10: import java.io.IOException;",
          "12: import jenkins.model.Jenkins;",
          "13: import org.jenkinsci.plugins.fodupload.models.FodEnums.GrantType;",
          "14: import org.kohsuke.stapler.verb.POST;",
          "16: @Extension",
          "17: public class FodGlobalDescriptor extends GlobalConfiguration {",
          "18:     private static final String CLIENT_ID = \"clientId\";",
          "19:     private static final String GLOBAL_AUTH_TYPE = \"globalAuthType\";",
          "20:     private static final String CLIENT_SECRET = \"clientSecret\";",
          "21:     private static final String USERNAME = \"username\";",
          "22:     private static final String PERSONAL_ACCESS_TOKEN = \"personalAccessToken\";",
          "23:     private static final String TENANT_ID = \"tenantId\";",
          "24:     private static final String BASE_URL = \"baseUrl\";",
          "25:     private static final String API_URL = \"apiUrl\";",
          "27:     private String globalAuthType;",
          "28:     private String clientId;",
          "29:     private String clientSecret;",
          "30:     private String username;",
          "31:     private String personalAccessToken;",
          "32:     private String tenantId;",
          "33:     private String baseUrl;",
          "34:     private String apiUrl;",
          "36:     public FodGlobalDescriptor() {",
          "37:         load();",
          "38:     }",
          "41:     @Override",
          "42:     public boolean configure(StaplerRequest req, JSONObject formData) throws FormException {",
          "43:         JSONObject globalAuthTypeObject = formData.getJSONObject(GLOBAL_AUTH_TYPE);",
          "44:         if (globalAuthTypeObject.size() > 0) {",
          "45:             globalAuthType = globalAuthTypeObject.getString(\"value\");",
          "46:             if (globalAuthType.equals(\"apiKeyType\")) {",
          "47:                 clientId = globalAuthTypeObject.getString(CLIENT_ID);",
          "48:                 clientSecret = globalAuthTypeObject.getString(CLIENT_SECRET);",
          "49:             } else if (globalAuthType.equals(\"personalAccessTokenType\")) {",
          "50:                 username = globalAuthTypeObject.getString(USERNAME);",
          "51:                 personalAccessToken = globalAuthTypeObject.getString(PERSONAL_ACCESS_TOKEN);",
          "52:                 tenantId = globalAuthTypeObject.getString(TENANT_ID);",
          "53:             }",
          "54:         }",
          "55:         baseUrl = formData.getString(BASE_URL);",
          "56:         apiUrl = formData.getString(API_URL);",
          "58:         save();",
          "60:         return super.configure(req, formData);",
          "61:     }",
          "66:     public String getDisplayName() {",
          "67:         return \"Fortify Uploader Plugin\";",
          "68:     }",
          "70:     @SuppressWarnings(\"unused\")",
          "71:     public String getGlobalAuthType() {",
          "72:         return globalAuthType;",
          "73:     }",
          "75:     @SuppressWarnings(\"unused\")",
          "76:     public String getClientId() {",
          "77:         return clientId;",
          "78:     }",
          "80:     @SuppressWarnings(\"unused\")",
          "81:     public String getClientSecret() {",
          "82:         return clientSecret;",
          "83:     }",
          "85:     @SuppressWarnings(\"unused\")",
          "86:     public String getUsername() {",
          "87:         return username;",
          "88:     }",
          "90:     @SuppressWarnings(\"unused\")",
          "91:     public String getPersonalAccessToken() {",
          "92:         return personalAccessToken;",
          "93:     }",
          "95:     @SuppressWarnings(\"unused\")",
          "96:     public String getTenantId() {",
          "97:         return tenantId;",
          "98:     }",
          "100:     @SuppressWarnings(\"unused\")",
          "101:     public String getBaseUrl() {",
          "102:         return baseUrl;",
          "103:     }",
          "105:     @SuppressWarnings(\"unused\")",
          "106:     public String getApiUrl() {",
          "107:         return apiUrl;",
          "108:     }",
          "110:     public boolean getAuthTypeIsApiKey() {",
          "111:         return globalAuthType.equals(\"apiKeyType\");",
          "112:     }",
          "114:     public boolean getAuthTypeIsPersonalToken() {",
          "115:         return globalAuthType.equals(\"personalAccessTokenType\");",
          "116:     }",
          "118:     @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "119:     @POST",
          "120:     public FormValidation doTestApiKeyConnection(@QueryParameter(CLIENT_ID) final String clientId,",
          "121:                                                  @QueryParameter(CLIENT_SECRET) final String clientSecret,",
          "122:                                                  @QueryParameter(BASE_URL) final String baseUrl,",
          "123:                                                  @QueryParameter(API_URL) final String apiUrl) {",
          "124:         Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "125:         FodApiConnection testApi;",
          "126:         if (Utils.isNullOrEmpty(baseUrl))",
          "127:             return FormValidation.error(\"Fortify on Demand URL is empty!\");",
          "128:         if (Utils.isNullOrEmpty(apiUrl))",
          "129:             return FormValidation.error(\"Fortify on Demand API URL is empty!\");",
          "130:         if (Utils.isNullOrEmpty(clientId))",
          "131:             return FormValidation.error(\"API Key is empty!\");",
          "132:         if (Utils.isNullOrEmpty(clientSecret))",
          "133:             return FormValidation.error(\"Secret Key is empty!\");",
          "134:         testApi = new FodApiConnection(clientId, clientSecret, baseUrl, apiUrl, GrantType.CLIENT_CREDENTIALS, \"api-tenant\");",
          "135:         return testConnection(testApi);",
          "136:     }",
          "139:     @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "140:     @POST",
          "141:     public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(USERNAME) final String username,",
          "142:                                                               @QueryParameter(PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "143:                                                               @QueryParameter(TENANT_ID) final String tenantId,",
          "144:                                                               @QueryParameter(BASE_URL) final String baseUrl,",
          "145:                                                               @QueryParameter(API_URL) final String apiUrl) {",
          "146:         Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "147:         FodApiConnection testApi;",
          "148:         if (Utils.isNullOrEmpty(baseUrl))",
          "149:             return FormValidation.error(\"Fortify on Demand URL is empty!\");",
          "150:         if (Utils.isNullOrEmpty(apiUrl))",
          "151:             return FormValidation.error(\"Fortify on Demand API URL is empty!\");",
          "152:         if (Utils.isNullOrEmpty(username))",
          "153:             return FormValidation.error(\"Username is empty!\");",
          "154:         if (Utils.isNullOrEmpty(personalAccessToken))",
          "155:             return FormValidation.error(\"Personal Access Token is empty!\");",
          "156:         if (Utils.isNullOrEmpty(tenantId))",
          "157:             return FormValidation.error(\"Tenant ID is null.\");",
          "158:         testApi = new FodApiConnection(tenantId + \"\\\\\" + username, personalAccessToken, baseUrl, apiUrl, GrantType.PASSWORD, \"api-tenant\");",
          "159:         return testConnection(testApi);",
          "161:     }",
          "163:     FodApiConnection createFodApiConnection() {",
          "165:         if (!Utils.isNullOrEmpty(globalAuthType)) {",
          "167:             if (Utils.isNullOrEmpty(baseUrl))",
          "168:                 throw new IllegalArgumentException(\"Base URL is null.\");",
          "169:             if (Utils.isNullOrEmpty(apiUrl))",
          "170:                 throw new IllegalArgumentException(\"Api URL is null.\");",
          "172:             if (globalAuthType.equals(\"apiKeyType\")) {",
          "173:                 if (Utils.isNullOrEmpty(clientId))",
          "174:                     throw new IllegalArgumentException(\"Client ID is null.\");",
          "175:                 if (Utils.isNullOrEmpty(clientSecret))",
          "176:                     throw new IllegalArgumentException(\"Client Secret is null.\");",
          "177:                 return new FodApiConnection(clientId, clientSecret, baseUrl, apiUrl, GrantType.CLIENT_CREDENTIALS, \"api-tenant\");",
          "178:             } else if (globalAuthType.equals(\"personalAccessTokenType\")) {",
          "179:                 if (Utils.isNullOrEmpty(username))",
          "180:                     throw new IllegalArgumentException(\"Username is null.\");",
          "181:                 if (Utils.isNullOrEmpty(personalAccessToken))",
          "182:                     throw new IllegalArgumentException(\"Personal Access Token is null.\");",
          "183:                 if (Utils.isNullOrEmpty(tenantId))",
          "184:                     throw new IllegalArgumentException(\"Tenant ID is null.\");",
          "185:                 return new FodApiConnection(tenantId + \"\\\\\" + username, personalAccessToken, baseUrl, apiUrl, GrantType.PASSWORD, \"api-tenant\");",
          "186:             } else {",
          "187:                 throw new IllegalArgumentException(\"Invalid authentication type\");",
          "188:             }",
          "190:         } else {",
          "191:             throw new IllegalArgumentException(\"No authentication method configured\");",
          "192:         }",
          "194:     }",
          "196:     public FormValidation testConnection(FodApiConnection testApi) {",
          "197:         try {",
          "198:             testApi.authenticate();",
          "199:         } catch (IOException e) {",
          "200:             return FormValidation.error(\"Unable to authenticate with Fortify on Demand\");",
          "201:         }",
          "203:         String token = testApi.getToken();",
          "205:         if (token == null) {",
          "206:             return FormValidation.error(\"Unable to retrieve authentication token.\");",
          "207:         }",
          "209:         return !token.isEmpty() ?",
          "210:                 FormValidation.ok(\"Successfully authenticated to Fortify on Demand.\") :",
          "211:                 FormValidation.error(\"Invalid connection information. Please check your credentials and try again.\");",
          "212:     }",
          "213: }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: package org.jenkinsci.plugins.fodupload;",
          "3: import com.fortify.fod.parser.BsiToken;",
          "4: import com.fortify.fod.parser.BsiTokenParser;",
          "5: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "6: import hudson.Extension;",
          "7: import hudson.FilePath;",
          "8: import hudson.Launcher;",
          "9: import hudson.model.AbstractProject;",
          "10: import hudson.model.Result;",
          "11: import hudson.model.Run;",
          "12: import hudson.model.TaskListener;",
          "13: import hudson.tasks.BuildStepDescriptor;",
          "14: import hudson.tasks.BuildStepMonitor;",
          "15: import hudson.tasks.Publisher;",
          "16: import hudson.tasks.Recorder;",
          "17: import hudson.util.FormValidation;",
          "18: import hudson.util.ListBoxModel;",
          "19: import jenkins.model.GlobalConfiguration;",
          "20: import jenkins.tasks.SimpleBuildStep;",
          "21: import org.jenkinsci.plugins.fodupload.polling.PollReleaseStatusResult;",
          "22: import org.jenkinsci.plugins.fodupload.polling.ScanStatusPoller;",
          "23: import org.kohsuke.stapler.DataBoundConstructor;",
          "25: import javax.annotation.Nonnull;",
          "26: import java.io.IOException;",
          "27: import java.io.PrintStream;",
          "28: import java.net.URISyntaxException;",
          "29: import jenkins.model.Jenkins;",
          "30: import org.jenkinsci.plugins.fodupload.models.AuthenticationModel;",
          "31: import org.jenkinsci.plugins.fodupload.models.FodEnums;",
          "32: import org.kohsuke.stapler.QueryParameter;",
          "33: import org.kohsuke.stapler.verb.POST;",
          "35: import static org.jenkinsci.plugins.fodupload.SharedPollingBuildStep.*;",
          "37: @SuppressWarnings(\"unused\")",
          "38: public class PollingBuildStep extends Recorder implements SimpleBuildStep {",
          "40:     SharedPollingBuildStep sharedBuildStep;",
          "42:     @DataBoundConstructor",
          "43:     public PollingBuildStep(String bsiToken,",
          "44:                             boolean overrideGlobalConfig,",
          "45:                             int pollingInterval,",
          "46:                             int policyFailureBuildResultPreference,",
          "47:                             String clientId,",
          "48:                             String clientSecret,",
          "49:                             String username,",
          "50:                             String personalAccessToken,",
          "51:                             String tenantId) {",
          "53:         sharedBuildStep = new SharedPollingBuildStep(bsiToken,",
          "54:                 overrideGlobalConfig,pollingInterval,",
          "55:                 policyFailureBuildResultPreference, clientId, clientSecret,",
          "56:                 username, personalAccessToken, tenantId);",
          "57:     }",
          "59:     @Override",
          "60:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "61:     public void perform(@Nonnull Run<?, ?> run,",
          "62:                         @Nonnull FilePath filePath,",
          "63:                         @Nonnull Launcher launcher,",
          "64:                         @Nonnull TaskListener taskListener) throws InterruptedException, IOException {",
          "66:         sharedBuildStep.perform(run, filePath, launcher, taskListener);",
          "67:     }",
          "69:     @Override",
          "70:     public BuildStepMonitor getRequiredMonitorService() {",
          "71:         return BuildStepMonitor.NONE;",
          "72:     }",
          "74:     @SuppressWarnings(\"unused\")",
          "75:     public String getBsiToken() {",
          "76:         return sharedBuildStep.getBsiToken();",
          "77:     }",
          "79:     @SuppressWarnings({\"unused\", \"WeakerAccess\"})",
          "80:     public int getPollingInterval() {",
          "81:         return sharedBuildStep.getPollingInterval();",
          "82:     }",
          "84:     @SuppressWarnings(\"unused\")",
          "85:     public int getPolicyFailureBuildResultPreference() {",
          "86:         return sharedBuildStep.getPolicyFailureBuildResultPreference();",
          "87:     }",
          "89:     @SuppressWarnings(\"unused\")",
          "90:     public String getUsername() {",
          "91:         return sharedBuildStep.getAuthModel().getUsername();",
          "92:     }",
          "94:     @SuppressWarnings(\"unused\")",
          "95:     public String getPersonalAccessToken() {",
          "96:         return sharedBuildStep.getAuthModel().getPersonalAccessToken();",
          "97:     }",
          "99:     @SuppressWarnings(\"unused\")",
          "100:     public String getTenantId() {",
          "101:         return sharedBuildStep.getAuthModel().getTenantId();",
          "102:     }",
          "104:     @SuppressWarnings(\"unused\")",
          "105:     public boolean getOverrideGlobalConfig() {",
          "106:         return sharedBuildStep.getAuthModel().getOverrideGlobalConfig();",
          "107:     }",
          "112:     @Override",
          "113:     public PollingStepDescriptor getDescriptor() {",
          "114:         return (PollingStepDescriptor) super.getDescriptor();",
          "115:     }",
          "117:     @Extension",
          "118:     public static final class PollingStepDescriptor extends BuildStepDescriptor<Publisher> {",
          "120:         public PollingStepDescriptor() {",
          "121:             super();",
          "122:             load();",
          "123:         }",
          "125:         @Override",
          "126:         public boolean isApplicable(Class<? extends AbstractProject> aClass) {",
          "127:             return true;",
          "128:         }",
          "130:         @Override",
          "131:         public String getDisplayName() {",
          "132:             return \"Poll Fortify on Demand for Results\";",
          "133:         }",
          "135:         public FormValidation doCheckBsiToken(@QueryParameter String bsiToken)",
          "136:         {",
          "137:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "138:             return SharedPollingBuildStep.doCheckBsiToken(bsiToken);",
          "140:         }",
          "143:         public FormValidation doCheckPollingInterval(@QueryParameter String pollingInterval)",
          "144:         {",
          "145:             return SharedPollingBuildStep.doCheckPollingInterval(pollingInterval);",
          "146:         }",
          "149:         @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "150:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "151:         @POST",
          "152:         public FormValidation doTestPersonalAccessTokenConnection( @QueryParameter(USERNAME) final String username,",
          "153:                                                @QueryParameter(PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "154:                                                @QueryParameter(TENANT_ID) final String tenantId)",
          "155:         {",
          "156:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "157:             return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "158:         }",
          "160:         @SuppressWarnings(\"unused\")",
          "161:         public ListBoxModel doFillPolicyFailureBuildResultPreferenceItems() {",
          "162:             return SharedPollingBuildStep.doFillPolicyFailureBuildResultPreferenceItems();",
          "163:         }",
          "164:     }",
          "165: }",
          "",
          "[Added Lines]",
          "1: package org.jenkinsci.plugins.fodupload;",
          "3: import com.fortify.fod.parser.BsiToken;",
          "4: import com.fortify.fod.parser.BsiTokenParser;",
          "5: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "6: import hudson.Extension;",
          "7: import hudson.FilePath;",
          "8: import hudson.Launcher;",
          "9: import hudson.model.AbstractProject;",
          "10: import hudson.model.Result;",
          "11: import hudson.model.Run;",
          "12: import hudson.model.TaskListener;",
          "13: import hudson.tasks.BuildStepDescriptor;",
          "14: import hudson.tasks.BuildStepMonitor;",
          "15: import hudson.tasks.Publisher;",
          "16: import hudson.tasks.Recorder;",
          "17: import hudson.util.FormValidation;",
          "18: import hudson.util.ListBoxModel;",
          "19: import jenkins.model.GlobalConfiguration;",
          "20: import jenkins.tasks.SimpleBuildStep;",
          "21: import org.jenkinsci.plugins.fodupload.polling.PollReleaseStatusResult;",
          "22: import org.jenkinsci.plugins.fodupload.polling.ScanStatusPoller;",
          "23: import org.kohsuke.stapler.DataBoundConstructor;",
          "25: import javax.annotation.Nonnull;",
          "26: import java.io.IOException;",
          "27: import java.io.PrintStream;",
          "28: import java.net.URISyntaxException;",
          "30: import jenkins.model.Jenkins;",
          "31: import org.jenkinsci.plugins.fodupload.models.AuthenticationModel;",
          "32: import org.jenkinsci.plugins.fodupload.models.FodEnums;",
          "33: import org.kohsuke.stapler.QueryParameter;",
          "34: import org.kohsuke.stapler.verb.POST;",
          "36: import static org.jenkinsci.plugins.fodupload.SharedPollingBuildStep.*;",
          "38: @SuppressWarnings(\"unused\")",
          "39: public class PollingBuildStep extends Recorder implements SimpleBuildStep {",
          "41:     SharedPollingBuildStep sharedBuildStep;",
          "43:     @DataBoundConstructor",
          "44:     public PollingBuildStep(String bsiToken,",
          "45:                             boolean overrideGlobalConfig,",
          "46:                             int pollingInterval,",
          "47:                             int policyFailureBuildResultPreference,",
          "48:                             String clientId,",
          "49:                             String clientSecret,",
          "50:                             String username,",
          "51:                             String personalAccessToken,",
          "52:                             String tenantId) {",
          "54:         sharedBuildStep = new SharedPollingBuildStep(bsiToken,",
          "55:                 overrideGlobalConfig, pollingInterval,",
          "56:                 policyFailureBuildResultPreference, clientId, clientSecret,",
          "57:                 username, personalAccessToken, tenantId);",
          "58:     }",
          "60:     @Override",
          "61:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "62:     public void perform(@Nonnull Run<?, ?> run,",
          "63:                         @Nonnull FilePath filePath,",
          "64:                         @Nonnull Launcher launcher,",
          "65:                         @Nonnull TaskListener taskListener) throws InterruptedException, IOException {",
          "67:         sharedBuildStep.perform(run, filePath, launcher, taskListener);",
          "68:     }",
          "70:     @Override",
          "71:     public BuildStepMonitor getRequiredMonitorService() {",
          "72:         return BuildStepMonitor.NONE;",
          "73:     }",
          "75:     @SuppressWarnings(\"unused\")",
          "76:     public String getBsiToken() {",
          "77:         return sharedBuildStep.getBsiToken();",
          "78:     }",
          "80:     @SuppressWarnings({\"unused\", \"WeakerAccess\"})",
          "81:     public int getPollingInterval() {",
          "82:         return sharedBuildStep.getPollingInterval();",
          "83:     }",
          "85:     @SuppressWarnings(\"unused\")",
          "86:     public int getPolicyFailureBuildResultPreference() {",
          "87:         return sharedBuildStep.getPolicyFailureBuildResultPreference();",
          "88:     }",
          "90:     @SuppressWarnings(\"unused\")",
          "91:     public String getUsername() {",
          "92:         return sharedBuildStep.getAuthModel().getUsername();",
          "93:     }",
          "95:     @SuppressWarnings(\"unused\")",
          "96:     public String getPersonalAccessToken() {",
          "97:         return sharedBuildStep.getAuthModel().getPersonalAccessToken();",
          "98:     }",
          "100:     @SuppressWarnings(\"unused\")",
          "101:     public String getTenantId() {",
          "102:         return sharedBuildStep.getAuthModel().getTenantId();",
          "103:     }",
          "105:     @SuppressWarnings(\"unused\")",
          "106:     public boolean getOverrideGlobalConfig() {",
          "107:         return sharedBuildStep.getAuthModel().getOverrideGlobalConfig();",
          "108:     }",
          "113:     @Override",
          "114:     public PollingStepDescriptor getDescriptor() {",
          "115:         return (PollingStepDescriptor) super.getDescriptor();",
          "116:     }",
          "118:     @Extension",
          "119:     public static final class PollingStepDescriptor extends BuildStepDescriptor<Publisher> {",
          "121:         public PollingStepDescriptor() {",
          "122:             super();",
          "123:             load();",
          "124:         }",
          "126:         @Override",
          "127:         public boolean isApplicable(Class<? extends AbstractProject> aClass) {",
          "128:             return true;",
          "129:         }",
          "131:         @Override",
          "132:         public String getDisplayName() {",
          "133:             return \"Poll Fortify on Demand for Results\";",
          "134:         }",
          "136:         public FormValidation doCheckBsiToken(@QueryParameter String bsiToken) {",
          "137:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "138:             return SharedPollingBuildStep.doCheckBsiToken(bsiToken);",
          "140:         }",
          "143:         public FormValidation doCheckPollingInterval(@QueryParameter String pollingInterval) {",
          "144:             return SharedPollingBuildStep.doCheckPollingInterval(pollingInterval);",
          "145:         }",
          "148:         @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "149:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "150:         @POST",
          "151:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(USERNAME) final String username,",
          "152:                                                                   @QueryParameter(PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "153:                                                                   @QueryParameter(TENANT_ID) final String tenantId) {",
          "154:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "155:             return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "156:         }",
          "158:         @SuppressWarnings(\"unused\")",
          "159:         public ListBoxModel doFillPolicyFailureBuildResultPreferenceItems() {",
          "160:             return SharedPollingBuildStep.doFillPolicyFailureBuildResultPreferenceItems();",
          "161:         }",
          "162:     }",
          "163: }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: package org.jenkinsci.plugins.fodupload;",
          "3: import com.fortify.fod.parser.BsiToken;",
          "4: import com.fortify.fod.parser.BsiTokenParser;",
          "5: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "6: import hudson.FilePath;",
          "7: import hudson.Launcher;",
          "8: import hudson.model.Result;",
          "9: import hudson.model.Run;",
          "10: import hudson.model.TaskListener;",
          "11: import hudson.util.FormValidation;",
          "12: import hudson.util.ListBoxModel;",
          "13: import jenkins.model.GlobalConfiguration;",
          "14: import org.jenkinsci.plugins.fodupload.models.AuthenticationModel;",
          "15: import org.jenkinsci.plugins.fodupload.models.FodEnums;",
          "16: import org.jenkinsci.plugins.fodupload.polling.PollReleaseStatusResult;",
          "17: import org.jenkinsci.plugins.fodupload.polling.ScanStatusPoller;",
          "19: import java.io.IOException;",
          "20: import java.io.PrintStream;",
          "21: import java.net.URISyntaxException;",
          "23: public class SharedPollingBuildStep {",
          "25:     public static final BsiTokenParser tokenParser = new BsiTokenParser();",
          "26:     public static final String CLIENT_ID = \"clientId\";",
          "27:     public static final String CLIENT_SECRET = \"clientSecret\";",
          "28:     public static final String USERNAME = \"username\";",
          "29:     public static final String PERSONAL_ACCESS_TOKEN = \"personalAccessToken\";",
          "30:     public static final String TENANT_ID = \"tenantId\";",
          "32:     private String bsiToken;",
          "33:     private int pollingInterval;",
          "35:     private int policyFailureBuildResultPreference;",
          "37:     private AuthenticationModel authModel;",
          "39:     public SharedPollingBuildStep(String bsiToken,",
          "40:                             boolean overrideGlobalConfig,",
          "41:                             int pollingInterval,",
          "42:                             int policyFailureBuildResultPreference,",
          "43:                             String clientId,",
          "44:                             String clientSecret,",
          "45:                             String username,",
          "46:                             String personalAccessToken,",
          "47:                             String tenantId){",
          "49:         this.bsiToken = bsiToken;",
          "50:         this.pollingInterval = pollingInterval;",
          "51:         this.policyFailureBuildResultPreference = policyFailureBuildResultPreference;",
          "52:         authModel = new AuthenticationModel(overrideGlobalConfig,",
          "53:                 username,",
          "54:                 personalAccessToken,",
          "55:                 tenantId);",
          "56:     }",
          "58:     public void perform(Run<?, ?> run,",
          "59:                         FilePath filePath,",
          "60:                         Launcher launcher,",
          "61:                         TaskListener taskListener) throws InterruptedException, IOException {",
          "63:         final PrintStream logger = taskListener.getLogger();",
          "65:         Result currentResult = run.getResult();",
          "66:         if (Result.FAILURE.equals(currentResult)",
          "67:                 || Result.ABORTED.equals(currentResult)",
          "68:                 || Result.UNSTABLE.equals(currentResult)) {",
          "70:             logger.println(\"Error: Build Failed or Unstable.  No reason to poll Fortify on Demand for results.\");",
          "71:             return;",
          "72:         }",
          "74:         if (this.getPollingInterval() <= 0) {",
          "75:             logger.println(\"Error: Invalid polling interval (\" + this.getPollingInterval() + \" minutes)\");",
          "76:             run.setResult(Result.UNSTABLE);",
          "77:             return;",
          "78:         }",
          "80:         FodApiConnection apiConnection = ApiConnectionFactory.createApiConnection(getAuthModel());",
          "82:         try {",
          "84:             BsiToken token = tokenParser.parse(this.getBsiToken());",
          "85:             if(apiConnection != null)",
          "86:             {",
          "87:                 apiConnection.authenticate();",
          "88:                 ScanStatusPoller poller = new ScanStatusPoller(apiConnection, this.getPollingInterval(), logger);",
          "89:                 PollReleaseStatusResult result = poller.pollReleaseStatus(token.getProjectVersionId());",
          "92:                 if (!result.isPollingSuccessful()) {",
          "93:                     run.setResult(Result.FAILURE);",
          "94:                     return;",
          "95:                 }",
          "97:                 if (!result.isPassing()) {",
          "99:                     PolicyFailureBuildResultPreference pref = PolicyFailureBuildResultPreference.fromInt(this.getPolicyFailureBuildResultPreference());",
          "101:                     switch (pref) {",
          "103:                         case MarkFailure:",
          "104:                             run.setResult(Result.FAILURE);",
          "105:                             break;",
          "107:                         case MarkUnstable:",
          "108:                             run.setResult(Result.UNSTABLE);",
          "109:                             break;",
          "111:                         case None:",
          "112:                         default:",
          "113:                             break;",
          "114:                     }",
          "115:                 }",
          "116:             }else{",
          "117:                 logger.println(\"Failed to authenticate\");",
          "118:                 run.setResult(Result.FAILURE);",
          "119:             }",
          "121:         } catch (URISyntaxException e) {",
          "122:             logger.println(\"Failed to parse BSI.\");",
          "123:         } finally {",
          "124:             if (apiConnection != null) {",
          "125:                 apiConnection.retireToken();",
          "126:             }",
          "127:         }",
          "128:     }",
          "130:     public String getBsiToken() {",
          "131:         return bsiToken;",
          "132:     }",
          "134:     public int getPollingInterval() {",
          "135:         return pollingInterval;",
          "136:     }",
          "138:     public int getPolicyFailureBuildResultPreference() {",
          "139:         return policyFailureBuildResultPreference;",
          "140:     }",
          "142:     public AuthenticationModel getAuthModel() {",
          "143:         return authModel;",
          "144:     }",
          "147:     public static FormValidation doCheckBsiToken(String bsiToken)",
          "148:     {",
          "149:         if(bsiToken != null && !bsiToken.isEmpty() ){",
          "150:             BsiTokenParser tokenParser = new BsiTokenParser();",
          "151:             try{",
          "152:                 BsiToken testToken = tokenParser.parse(bsiToken);",
          "153:                 if(testToken != null){",
          "154:                     return FormValidation.ok();",
          "155:                 }",
          "156:             }",
          "157:             catch( Exception ex){",
          "158:                 return FormValidation.error(\"Could not parse BSI token.\");",
          "159:             }",
          "160:         }",
          "161:         else",
          "162:             return FormValidation.error(\"Please specify BSI Token\");",
          "163:         return FormValidation.error(\"Please specify BSI Token\");",
          "164:     }",
          "167:     public static FormValidation doCheckPollingInterval(String pollingInterval)",
          "168:     {",
          "169:         if(Utils.isNullOrEmpty(pollingInterval))",
          "170:             return FormValidation.error(\"Polling interval is required to perform this step.\");",
          "171:         try {",
          "172:             int pollingIntervalNumeric = Integer.parseInt(pollingInterval);",
          "173:             if(pollingIntervalNumeric <= 0)",
          "174:                 return FormValidation.error(\"Value must be greater than 0\");",
          "175:         }",
          "176:         catch (NumberFormatException ex)",
          "177:         {",
          "178:             return FormValidation.error(\"Value must be integer\");",
          "179:         }",
          "180:         return FormValidation.ok();",
          "181:     }",
          "184:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "185:     public static FormValidation doTestPersonalAccessTokenConnection(final String username,",
          "186:                                                                final String personalAccessToken,",
          "187:                                                                final String tenantId)",
          "188:     {",
          "189:         FodApiConnection testApi;",
          "190:         String baseUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getBaseUrl();",
          "191:         String apiUrl =  GlobalConfiguration.all().get(FodGlobalDescriptor.class).getApiUrl();",
          "192:         if (Utils.isNullOrEmpty(baseUrl))",
          "193:             return FormValidation.error(\"Fortify on Demand URL is empty!\");",
          "194:         if (Utils.isNullOrEmpty(apiUrl))",
          "195:             return FormValidation.error(\"Fortify on Demand API URL is empty!\");",
          "196:         if (Utils.isNullOrEmpty(username))",
          "197:             return FormValidation.error(\"Username is empty!\");",
          "198:         if (Utils.isNullOrEmpty(personalAccessToken))",
          "199:             return FormValidation.error(\"Personal Access Token is empty!\");",
          "200:         if (Utils.isNullOrEmpty(tenantId))",
          "201:             return FormValidation.error(\"Tenant ID is null.\");",
          "202:         testApi = new FodApiConnection(tenantId + \"\\\\\" + username, personalAccessToken, baseUrl, apiUrl, FodEnums.GrantType.PASSWORD, \"api-tenant\");",
          "203:         return GlobalConfiguration.all().get(FodGlobalDescriptor.class).testConnection(testApi);",
          "205:     }",
          "207:     public static ListBoxModel doFillPolicyFailureBuildResultPreferenceItems() {",
          "208:         ListBoxModel items = new ListBoxModel();",
          "209:         for (PolicyFailureBuildResultPreference preferenceType : PolicyFailureBuildResultPreference.values()) {",
          "210:             items.add(new ListBoxModel.Option(preferenceType.toString(), String.valueOf(preferenceType.getValue())));",
          "211:         }",
          "213:         return items;",
          "214:     }",
          "216:     public enum PolicyFailureBuildResultPreference {",
          "217:         None(0),",
          "218:         MarkUnstable(1),",
          "219:         MarkFailure(2);",
          "221:         private final int _val;",
          "223:         PolicyFailureBuildResultPreference(int val) {",
          "224:             this._val = val;",
          "225:         }",
          "227:         public int getValue() {",
          "228:             return this._val;",
          "229:         }",
          "231:         public String toString() {",
          "232:             switch (this._val) {",
          "233:                 case 2:",
          "234:                     return \"Mark Failure\";",
          "235:                 case 1:",
          "236:                     return \"Mark Unstable\";",
          "237:                 case 0:",
          "238:                 default:",
          "239:                     return \"Do nothing\";",
          "240:             }",
          "241:         }",
          "243:         public static PolicyFailureBuildResultPreference fromInt(int val) {",
          "244:             switch (val) {",
          "245:                 case 2:",
          "246:                     return MarkFailure;",
          "247:                 case 1:",
          "248:                     return MarkUnstable;",
          "249:                 case 0:",
          "250:                 default:",
          "251:                     return None;",
          "252:             }",
          "253:         }",
          "254:     }",
          "255: }",
          "",
          "[Added Lines]",
          "1: package org.jenkinsci.plugins.fodupload;",
          "3: import com.fortify.fod.parser.BsiToken;",
          "4: import com.fortify.fod.parser.BsiTokenParser;",
          "5: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "6: import hudson.FilePath;",
          "7: import hudson.Launcher;",
          "8: import hudson.model.Result;",
          "9: import hudson.model.Run;",
          "10: import hudson.model.TaskListener;",
          "11: import hudson.util.FormValidation;",
          "12: import hudson.util.ListBoxModel;",
          "13: import jenkins.model.GlobalConfiguration;",
          "14: import org.jenkinsci.plugins.fodupload.models.AuthenticationModel;",
          "15: import org.jenkinsci.plugins.fodupload.models.FodEnums;",
          "16: import org.jenkinsci.plugins.fodupload.polling.PollReleaseStatusResult;",
          "17: import org.jenkinsci.plugins.fodupload.polling.ScanStatusPoller;",
          "19: import java.io.IOException;",
          "20: import java.io.PrintStream;",
          "21: import java.net.URISyntaxException;",
          "23: public class SharedPollingBuildStep {",
          "25:     public static final BsiTokenParser tokenParser = new BsiTokenParser();",
          "26:     public static final String CLIENT_ID = \"clientId\";",
          "27:     public static final String CLIENT_SECRET = \"clientSecret\";",
          "28:     public static final String USERNAME = \"username\";",
          "29:     public static final String PERSONAL_ACCESS_TOKEN = \"personalAccessToken\";",
          "30:     public static final String TENANT_ID = \"tenantId\";",
          "32:     private String bsiToken;",
          "33:     private int pollingInterval;",
          "35:     private int policyFailureBuildResultPreference;",
          "37:     private AuthenticationModel authModel;",
          "39:     public SharedPollingBuildStep(String bsiToken,",
          "40:                                   boolean overrideGlobalConfig,",
          "41:                                   int pollingInterval,",
          "42:                                   int policyFailureBuildResultPreference,",
          "43:                                   String clientId,",
          "44:                                   String clientSecret,",
          "45:                                   String username,",
          "46:                                   String personalAccessToken,",
          "47:                                   String tenantId) {",
          "49:         this.bsiToken = bsiToken;",
          "50:         this.pollingInterval = pollingInterval;",
          "51:         this.policyFailureBuildResultPreference = policyFailureBuildResultPreference;",
          "52:         authModel = new AuthenticationModel(overrideGlobalConfig,",
          "53:                 username,",
          "54:                 personalAccessToken,",
          "55:                 tenantId);",
          "56:     }",
          "58:     public static FormValidation doCheckBsiToken(String bsiToken) {",
          "59:         if (bsiToken != null && !bsiToken.isEmpty()) {",
          "60:             BsiTokenParser tokenParser = new BsiTokenParser();",
          "61:             try {",
          "62:                 BsiToken testToken = tokenParser.parse(bsiToken);",
          "63:                 if (testToken != null) {",
          "64:                     return FormValidation.ok();",
          "65:                 }",
          "66:             } catch (Exception ex) {",
          "67:                 return FormValidation.error(\"Could not parse BSI token.\");",
          "68:             }",
          "69:         } else",
          "70:             return FormValidation.error(\"Please specify BSI Token\");",
          "71:         return FormValidation.error(\"Please specify BSI Token\");",
          "72:     }",
          "74:     public static FormValidation doCheckPollingInterval(String pollingInterval) {",
          "75:         if (Utils.isNullOrEmpty(pollingInterval))",
          "76:             return FormValidation.error(\"Polling interval is required to perform this step.\");",
          "77:         try {",
          "78:             int pollingIntervalNumeric = Integer.parseInt(pollingInterval);",
          "79:             if (pollingIntervalNumeric <= 0)",
          "80:                 return FormValidation.error(\"Value must be greater than 0\");",
          "81:         } catch (NumberFormatException ex) {",
          "82:             return FormValidation.error(\"Value must be integer\");",
          "83:         }",
          "84:         return FormValidation.ok();",
          "85:     }",
          "88:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "89:     public static FormValidation doTestPersonalAccessTokenConnection(final String username,",
          "90:                                                                      final String personalAccessToken,",
          "91:                                                                      final String tenantId) {",
          "92:         FodApiConnection testApi;",
          "93:         String baseUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getBaseUrl();",
          "94:         String apiUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getApiUrl();",
          "95:         if (Utils.isNullOrEmpty(baseUrl))",
          "96:             return FormValidation.error(\"Fortify on Demand URL is empty!\");",
          "97:         if (Utils.isNullOrEmpty(apiUrl))",
          "98:             return FormValidation.error(\"Fortify on Demand API URL is empty!\");",
          "99:         if (Utils.isNullOrEmpty(username))",
          "100:             return FormValidation.error(\"Username is empty!\");",
          "101:         if (Utils.isNullOrEmpty(personalAccessToken))",
          "102:             return FormValidation.error(\"Personal Access Token is empty!\");",
          "103:         if (Utils.isNullOrEmpty(tenantId))",
          "104:             return FormValidation.error(\"Tenant ID is null.\");",
          "105:         testApi = new FodApiConnection(tenantId + \"\\\\\" + username, personalAccessToken, baseUrl, apiUrl, FodEnums.GrantType.PASSWORD, \"api-tenant\");",
          "106:         return GlobalConfiguration.all().get(FodGlobalDescriptor.class).testConnection(testApi);",
          "108:     }",
          "110:     public static ListBoxModel doFillPolicyFailureBuildResultPreferenceItems() {",
          "111:         ListBoxModel items = new ListBoxModel();",
          "112:         for (PolicyFailureBuildResultPreference preferenceType : PolicyFailureBuildResultPreference.values()) {",
          "113:             items.add(new ListBoxModel.Option(preferenceType.toString(), String.valueOf(preferenceType.getValue())));",
          "114:         }",
          "116:         return items;",
          "117:     }",
          "119:     public void perform(Run<?, ?> run,",
          "120:                         FilePath filePath,",
          "121:                         Launcher launcher,",
          "122:                         TaskListener taskListener) throws InterruptedException, IOException {",
          "124:         final PrintStream logger = taskListener.getLogger();",
          "126:         Result currentResult = run.getResult();",
          "127:         if (Result.FAILURE.equals(currentResult)",
          "128:                 || Result.ABORTED.equals(currentResult)",
          "129:                 || Result.UNSTABLE.equals(currentResult)) {",
          "131:             logger.println(\"Error: Build Failed or Unstable.  No reason to poll Fortify on Demand for results.\");",
          "132:             return;",
          "133:         }",
          "135:         if (this.getPollingInterval() <= 0) {",
          "136:             logger.println(\"Error: Invalid polling interval (\" + this.getPollingInterval() + \" minutes)\");",
          "137:             run.setResult(Result.UNSTABLE);",
          "138:             return;",
          "139:         }",
          "141:         FodApiConnection apiConnection = ApiConnectionFactory.createApiConnection(getAuthModel());",
          "143:         try {",
          "145:             BsiToken token = tokenParser.parse(this.getBsiToken());",
          "146:             if (apiConnection != null) {",
          "147:                 apiConnection.authenticate();",
          "148:                 ScanStatusPoller poller = new ScanStatusPoller(apiConnection, this.getPollingInterval(), logger);",
          "149:                 PollReleaseStatusResult result = poller.pollReleaseStatus(token.getProjectVersionId());",
          "152:                 if (!result.isPollingSuccessful()) {",
          "153:                     run.setResult(Result.FAILURE);",
          "154:                     return;",
          "155:                 }",
          "157:                 if (!result.isPassing()) {",
          "159:                     PolicyFailureBuildResultPreference pref = PolicyFailureBuildResultPreference.fromInt(this.getPolicyFailureBuildResultPreference());",
          "161:                     switch (pref) {",
          "163:                         case MarkFailure:",
          "164:                             run.setResult(Result.FAILURE);",
          "165:                             break;",
          "167:                         case MarkUnstable:",
          "168:                             run.setResult(Result.UNSTABLE);",
          "169:                             break;",
          "171:                         case None:",
          "172:                         default:",
          "173:                             break;",
          "174:                     }",
          "175:                 }",
          "176:             } else {",
          "177:                 logger.println(\"Failed to authenticate\");",
          "178:                 run.setResult(Result.FAILURE);",
          "179:             }",
          "181:         } catch (URISyntaxException e) {",
          "182:             logger.println(\"Failed to parse BSI.\");",
          "183:         } finally {",
          "184:             if (apiConnection != null) {",
          "185:                 apiConnection.retireToken();",
          "186:             }",
          "187:         }",
          "188:     }",
          "190:     public String getBsiToken() {",
          "191:         return bsiToken;",
          "192:     }",
          "194:     public int getPollingInterval() {",
          "195:         return pollingInterval;",
          "196:     }",
          "198:     public int getPolicyFailureBuildResultPreference() {",
          "199:         return policyFailureBuildResultPreference;",
          "200:     }",
          "202:     public AuthenticationModel getAuthModel() {",
          "203:         return authModel;",
          "204:     }",
          "206:     public enum PolicyFailureBuildResultPreference {",
          "207:         None(0),",
          "208:         MarkUnstable(1),",
          "209:         MarkFailure(2);",
          "211:         private final int _val;",
          "213:         PolicyFailureBuildResultPreference(int val) {",
          "214:             this._val = val;",
          "215:         }",
          "217:         public static PolicyFailureBuildResultPreference fromInt(int val) {",
          "218:             switch (val) {",
          "219:                 case 2:",
          "220:                     return MarkFailure;",
          "221:                 case 1:",
          "222:                     return MarkUnstable;",
          "223:                 case 0:",
          "224:                 default:",
          "225:                     return None;",
          "226:             }",
          "227:         }",
          "229:         public int getValue() {",
          "230:             return this._val;",
          "231:         }",
          "233:         public String toString() {",
          "234:             switch (this._val) {",
          "235:                 case 2:",
          "236:                     return \"Mark Failure\";",
          "237:                 case 1:",
          "238:                     return \"Mark Unstable\";",
          "239:                 case 0:",
          "240:                 default:",
          "241:                     return \"Do nothing\";",
          "242:             }",
          "243:         }",
          "244:     }",
          "245: }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:                 tenantId);",
          "55:     }",
          "59:         final PrintStream logger = listener.getLogger();",
          "60:         if (model == null) {",
          "61:             logger.println(\"Unexpected Error\");",
          "",
          "[Removed Lines]",
          "57:     public boolean prebuild(AbstractBuild<?, ?> build, BuildListener listener)",
          "58:     {",
          "",
          "[Added Lines]",
          "57:     public static FormValidation doCheckBsiToken(String bsiToken) {",
          "58:         if (bsiToken != null && !bsiToken.isEmpty()) {",
          "59:             BsiTokenParser tokenParser = new BsiTokenParser();",
          "60:             try {",
          "61:                 BsiToken testToken = tokenParser.parse(bsiToken);",
          "62:                 if (testToken != null) {",
          "63:                     return FormValidation.ok();",
          "64:                 }",
          "65:             } catch (Exception ex) {",
          "66:                 return FormValidation.error(\"Could not parse BSI token.\");",
          "67:             }",
          "68:         } else",
          "69:             return FormValidation.error(\"Please specify BSI Token\");",
          "70:         return FormValidation.error(\"Please specify BSI Token\");",
          "71:     }",
          "73:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "74:     public static FormValidation doTestPersonalAccessTokenConnection(final String username,",
          "75:                                                                      final String personalAccessToken,",
          "76:                                                                      final String tenantId) {",
          "77:         FodApiConnection testApi;",
          "78:         String baseUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getBaseUrl();",
          "79:         String apiUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getApiUrl();",
          "80:         if (Utils.isNullOrEmpty(baseUrl))",
          "81:             return FormValidation.error(\"Fortify on Demand URL is empty!\");",
          "82:         if (Utils.isNullOrEmpty(apiUrl))",
          "83:             return FormValidation.error(\"Fortify on Demand API URL is empty!\");",
          "84:         if (Utils.isNullOrEmpty(username))",
          "85:             return FormValidation.error(\"Username is empty!\");",
          "86:         if (Utils.isNullOrEmpty(personalAccessToken))",
          "87:             return FormValidation.error(\"Personal Access Token is empty!\");",
          "88:         if (Utils.isNullOrEmpty(tenantId))",
          "89:             return FormValidation.error(\"Tenant ID is null.\");",
          "90:         testApi = new FodApiConnection(tenantId + \"\\\\\" + username, personalAccessToken, baseUrl, apiUrl, FodEnums.GrantType.PASSWORD, \"api-tenant\");",
          "91:         return GlobalConfiguration.all().get(FodGlobalDescriptor.class).testConnection(testApi);",
          "93:     }",
          "95:     @SuppressWarnings(\"unused\")",
          "96:     public static ListBoxModel doFillEntitlementPreferenceItems() {",
          "97:         ListBoxModel items = new ListBoxModel();",
          "98:         for (FodEnums.EntitlementPreferenceType preferenceType : FodEnums.EntitlementPreferenceType.values()) {",
          "99:             items.add(new ListBoxModel.Option(preferenceType.toString(), String.valueOf(preferenceType.toString())));",
          "100:         }",
          "102:         return items;",
          "103:     }",
          "105:     public boolean prebuild(AbstractBuild<?, ?> build, BuildListener listener) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:             return false;",
          "64:         }",
          "67:             logger.println(\"Invalid BSI Token\");",
          "68:             build.setResult(Result.FAILURE);",
          "69:             return false;",
          "",
          "[Removed Lines]",
          "66:         if(model.initializeBuildModel() == false){",
          "",
          "[Added Lines]",
          "113:         if (model.initializeBuildModel() == false) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:             logger.println(\"Starting FoD Upload.\");",
          "99:                 model.initializeBuildModel();",
          "100:             }",
          "102:             FilePath workspaceModified = new FilePath(workspace, model.getSrcLocation());",
          "104:             File payload = Utils.createZipFile(model.getBsiToken().getTechnologyStack(), workspaceModified, logger);",
          "",
          "[Removed Lines]",
          "98:             if (model.getBsiToken()==null){ // Hack because pipeline step doesn't call prebuild",
          "",
          "[Added Lines]",
          "145:             if (model.getBsiToken() == null) { // Hack because pipeline step doesn't call prebuild",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:             apiConnection = ApiConnectionFactory.createApiConnection(getAuthModel());",
          "123:                 apiConnection.authenticate();",
          "125:                 StaticScanController staticScanController = new StaticScanController(apiConnection, logger);",
          "",
          "[Removed Lines]",
          "122:             if(apiConnection != null){",
          "",
          "[Added Lines]",
          "169:             if (apiConnection != null) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:                     logger.println(\"Scan Uploaded Successfully.\");",
          "135:                 }",
          "136:                 build.setResult(success && deleted ? Result.SUCCESS : Result.UNSTABLE);",
          "140:                 logger.println(\"Failed to authenticate\");",
          "141:                 build.setResult(Result.FAILURE);",
          "142:             }",
          "",
          "[Removed Lines]",
          "137:             }",
          "138:             else",
          "139:             {",
          "",
          "[Added Lines]",
          "184:             } else {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "159:         }",
          "160:     }",
          "214:     public AuthenticationModel getAuthModel() {",
          "215:         return authModel;",
          "216:     }",
          "",
          "[Removed Lines]",
          "162:     public static FormValidation doCheckBsiToken(String bsiToken)",
          "163:     {",
          "164:         if(bsiToken != null && !bsiToken.isEmpty() ){",
          "165:             BsiTokenParser tokenParser = new BsiTokenParser();",
          "166:             try{",
          "167:                 BsiToken testToken = tokenParser.parse(bsiToken);",
          "168:                 if(testToken != null){",
          "169:                     return FormValidation.ok();",
          "170:                 }",
          "171:             }",
          "172:             catch( Exception ex){",
          "173:                 return FormValidation.error(\"Could not parse BSI token.\");",
          "174:             }",
          "175:         }",
          "176:         else",
          "177:             return FormValidation.error(\"Please specify BSI Token\");",
          "178:         return FormValidation.error(\"Please specify BSI Token\");",
          "179:     }",
          "181:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "182:     public static FormValidation doTestPersonalAccessTokenConnection(final String username,",
          "183:                                                                       final String personalAccessToken,",
          "184:                                                                       final String tenantId)",
          "185:     {",
          "186:         FodApiConnection testApi;",
          "187:         String baseUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getBaseUrl();",
          "188:         String apiUrl =  GlobalConfiguration.all().get(FodGlobalDescriptor.class).getApiUrl();",
          "189:         if (Utils.isNullOrEmpty(baseUrl))",
          "190:             return FormValidation.error(\"Fortify on Demand URL is empty!\");",
          "191:         if (Utils.isNullOrEmpty(apiUrl))",
          "192:             return FormValidation.error(\"Fortify on Demand API URL is empty!\");",
          "193:         if (Utils.isNullOrEmpty(username))",
          "194:             return FormValidation.error(\"Username is empty!\");",
          "195:         if (Utils.isNullOrEmpty(personalAccessToken))",
          "196:             return FormValidation.error(\"Personal Access Token is empty!\");",
          "197:         if (Utils.isNullOrEmpty(tenantId))",
          "198:             return FormValidation.error(\"Tenant ID is null.\");",
          "199:         testApi = new FodApiConnection(tenantId + \"\\\\\" + username, personalAccessToken, baseUrl, apiUrl, FodEnums.GrantType.PASSWORD, \"api-tenant\");",
          "200:         return GlobalConfiguration.all().get(FodGlobalDescriptor.class).testConnection(testApi);",
          "202:     }",
          "204:     @SuppressWarnings(\"unused\")",
          "205:     public static ListBoxModel doFillEntitlementPreferenceItems() {",
          "206:         ListBoxModel items = new ListBoxModel();",
          "207:         for (FodEnums.EntitlementPreferenceType preferenceType : FodEnums.EntitlementPreferenceType.values()) {",
          "208:             items.add(new ListBoxModel.Option(preferenceType.toString(), String.valueOf(preferenceType.toString())));",
          "209:         }",
          "211:         return items;",
          "212:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     }",
          "69:     @Override",
          "72:         return sharedBuildStep.prebuild(build, listener);",
          "73:     }",
          "",
          "[Removed Lines]",
          "70:     public boolean prebuild(AbstractBuild<?, ?> build, BuildListener listener)",
          "71:     {",
          "",
          "[Added Lines]",
          "70:     public boolean prebuild(AbstractBuild<?, ?> build, BuildListener listener) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:         return BuildStepMonitor.NONE;",
          "95:     }",
          "",
          "[Removed Lines]",
          "97:     @Extension",
          "99:     public static final class StaticAssessmentStepDescriptor extends BuildStepDescriptor<Publisher> {",
          "106:         public StaticAssessmentStepDescriptor() {",
          "107:             super();",
          "108:             load();",
          "109:         }",
          "111:         @Override",
          "112:         public boolean isApplicable(Class<? extends AbstractProject> aClass) {",
          "113:             return true;",
          "114:         }",
          "116:         public FormValidation doCheckBsiToken(@QueryParameter String bsiToken)",
          "117:         {",
          "118:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "119:             return SharedUploadBuildStep.doCheckBsiToken(bsiToken);",
          "120:         }",
          "122:         @Override",
          "123:         public String getDisplayName() {",
          "124:             return \"Fortify on Demand Static Assessment\";",
          "125:         }",
          "129:         @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "130:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "131:         @POST",
          "132:         public FormValidation doTestPersonalAccessTokenConnection( @QueryParameter(SharedUploadBuildStep.USERNAME) final String username,",
          "133:                                                                    @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "134:                                                                    @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId)",
          "135:         {",
          "136:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "137:             return SharedUploadBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "138:         }",
          "140:         @SuppressWarnings(\"unused\")",
          "141:         public ListBoxModel doFillEntitlementPreferenceItems() {",
          "142:             return SharedUploadBuildStep.doFillEntitlementPreferenceItems();",
          "143:         }",
          "146:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:     public String getInProgressScanActionType() {",
          "203:         return sharedBuildStep.getModel().getInProgressScanActionType();",
          "204:     }",
          "205: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:     @Extension",
          "156:     public static final class StaticAssessmentStepDescriptor extends BuildStepDescriptor<Publisher> {",
          "163:         public StaticAssessmentStepDescriptor() {",
          "164:             super();",
          "165:             load();",
          "166:         }",
          "168:         @Override",
          "169:         public boolean isApplicable(Class<? extends AbstractProject> aClass) {",
          "170:             return true;",
          "171:         }",
          "173:         public FormValidation doCheckBsiToken(@QueryParameter String bsiToken) {",
          "174:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "175:             return SharedUploadBuildStep.doCheckBsiToken(bsiToken);",
          "176:         }",
          "178:         @Override",
          "179:         public String getDisplayName() {",
          "180:             return \"Fortify on Demand Static Assessment\";",
          "181:         }",
          "185:         @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "186:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "187:         @POST",
          "188:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedUploadBuildStep.USERNAME) final String username,",
          "189:                                                                   @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "190:                                                                   @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId) {",
          "191:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "192:             return SharedUploadBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "193:         }",
          "195:         @SuppressWarnings(\"unused\")",
          "196:         public ListBoxModel doFillEntitlementPreferenceItems() {",
          "197:             return SharedUploadBuildStep.doFillEntitlementPreferenceItems();",
          "198:         }",
          "201:     }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/Utils.java||src/main/java/org/jenkinsci/plugins/fodupload/Utils.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/Utils.java -> src/main/java/org/jenkinsci/plugins/fodupload/Utils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: public class Utils {",
          "30:     private static final String TS_DOT_NET_KEY = \".NET\";",
          "31:     private static final String TS_JAVA_KEY = \"JAVA/J2EE\";",
          "32:     private static final String TS_RUBY_KEY = \"Ruby\";",
          "",
          "[Removed Lines]",
          "14:     public static int tryParseInt(String value) {",
          "15:         try {",
          "16:             return Integer.parseInt(value);",
          "17:         } catch (NumberFormatException nfe) {",
          "18:             return 0;",
          "19:         }",
          "20:     }",
          "22:     public static boolean isNullOrEmpty(List list) {",
          "23:         return list == null || list.isEmpty();",
          "24:     }",
          "26:     public static boolean isNullOrEmpty(String string) {",
          "27:         return string == null || string.isEmpty();",
          "28:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     private static final String TS_VB_SCRIPT_KEY = \"VBScript\";",
          "44:     private static final String TS_XML_HTML_KEY = \"XML/HTML\";",
          "46:     public static String getFileExpressionPatternString(String technologyStack) {",
          "47:         String constantFiles = \"|.*\\\\.html|.*\\\\.htm|.*\\\\.js|.*\\\\.xml|.*\\\\.xsd|.*\\\\.xmi|.*\\\\.wsdd|.*\\\\.config\" +",
          "48:                 \"|.*\\\\.settings|.*\\\\.cpx|.*\\\\.xcfg|.*\\\\.cscfg|.*\\\\.cscdef|.*\\\\.wadcfg|.*\\\\.appxmanifest\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:     public static int tryParseInt(String value) {",
          "31:         try {",
          "32:             return Integer.parseInt(value);",
          "33:         } catch (NumberFormatException nfe) {",
          "34:             return 0;",
          "35:         }",
          "36:     }",
          "38:     public static boolean isNullOrEmpty(List list) {",
          "39:         return list == null || list.isEmpty();",
          "40:     }",
          "42:     public static boolean isNullOrEmpty(String string) {",
          "43:         return string == null || string.isEmpty();",
          "44:     }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/controllers/ReleaseController.java||src/main/java/org/jenkinsci/plugins/fodupload/controllers/ReleaseController.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/controllers/ReleaseController.java -> src/main/java/org/jenkinsci/plugins/fodupload/controllers/ReleaseController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         Type t = new TypeToken<GenericListResponse<ReleaseDTO>>() {",
          "80:         }.getType();",
          "81:         GenericListResponse<ReleaseDTO> results = gson.fromJson(content, t);",
          "83:             return results.getItems().get(0);",
          "85:             return null;",
          "86:     }",
          "",
          "[Removed Lines]",
          "82:         if(results.getItems().size() > 0)",
          "84:         else",
          "",
          "[Added Lines]",
          "83:         if (results.getItems().size() > 0)",
          "85:         else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:         String content = IOUtils.toString(response.body().byteStream(), \"utf-8\");",
          "127:         response.body().close();",
          "130:         {",
          "131:             Gson gson = new Gson();",
          "",
          "[Removed Lines]",
          "129:         if(!Utils.isNullOrEmpty(content)) // check if any content is returned",
          "",
          "[Added Lines]",
          "131:         if (!Utils.isNullOrEmpty(content)) // check if any content is returned",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanController.java||src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanController.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanController.java -> src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:                     .addQueryParameter(\"inProgressScanActionType\", uploadRequest.getInProgressScanActionType())",
          "86:                     .addQueryParameter(\"scanMethodType\", \"CICD\")",
          "87:                     .addQueryParameter(\"scanTool\", \"Jenkins\")",
          "91:             if (!Utils.isNullOrEmpty(notes)) {",
          "",
          "[Removed Lines]",
          "88:                     .addQueryParameter(\"scanToolVersion\", projectVersion != null ? projectVersion : \"NotFound\");",
          "",
          "[Added Lines]",
          "88:                     .addQueryParameter(\"scanToolVersion\", projectVersion != null ? projectVersion : \"NotFound\");",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java||src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java -> src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java||src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java -> src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: package org.jenkinsci.plugins.fodupload.models;",
          "3: public class AuthenticationModel {",
          "4:     private boolean overrideGlobalConfig;",
          "5:     private String username;",
          "6:     private String personalAccessToken;",
          "7:     private String tenantId;",
          "9:     public AuthenticationModel( boolean overrideGlobalConfig,",
          "10:                                 String username,",
          "11:                                 String personalAccessToken,",
          "12:                                 String tenantId){",
          "13:         this.overrideGlobalConfig = overrideGlobalConfig;",
          "14:         this.username = username;",
          "15:         this.personalAccessToken = personalAccessToken;",
          "16:         this.tenantId = tenantId;",
          "17:     }",
          "19:     public boolean getOverrideGlobalConfig()",
          "20:     {",
          "21:         return overrideGlobalConfig;",
          "22:     }",
          "24:     public String getUsername()",
          "25:     {",
          "26:         return username;",
          "27:     }",
          "28:     public String getPersonalAccessToken()",
          "29:     {",
          "30:         return personalAccessToken;",
          "31:     }",
          "33:     public String getTenantId()",
          "34:     {",
          "35:         return tenantId;",
          "36:     }",
          "37: }",
          "",
          "[Added Lines]",
          "1: package org.jenkinsci.plugins.fodupload.models;",
          "3: public class AuthenticationModel {",
          "4:     private boolean overrideGlobalConfig;",
          "5:     private String username;",
          "6:     private String personalAccessToken;",
          "7:     private String tenantId;",
          "9:     public AuthenticationModel(boolean overrideGlobalConfig,",
          "10:                                String username,",
          "11:                                String personalAccessToken,",
          "12:                                String tenantId) {",
          "13:         this.overrideGlobalConfig = overrideGlobalConfig;",
          "14:         this.username = username;",
          "15:         this.personalAccessToken = personalAccessToken;",
          "16:         this.tenantId = tenantId;",
          "17:     }",
          "19:     public boolean getOverrideGlobalConfig() {",
          "20:         return overrideGlobalConfig;",
          "21:     }",
          "23:     public String getUsername() {",
          "24:         return username;",
          "25:     }",
          "27:     public String getPersonalAccessToken() {",
          "28:         return personalAccessToken;",
          "29:     }",
          "31:     public String getTenantId() {",
          "32:         return tenantId;",
          "33:     }",
          "34: }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/models/FodEnums.java||src/main/java/org/jenkinsci/plugins/fodupload/models/FodEnums.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/models/FodEnums.java -> src/main/java/org/jenkinsci/plugins/fodupload/models/FodEnums.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         DynamicScanWebServiceTypes",
          "37:     }",
          "41:     public enum EntitlementPreferenceType {",
          "42:         SubscriptionFirstThenSingleScan(4),",
          "43:         SingleScanFirstThenSubscription(3),",
          "",
          "[Removed Lines]",
          "39:     public enum GrantType {CLIENT_CREDENTIALS, PASSWORD};",
          "",
          "[Added Lines]",
          "39:     public enum GrantType {CLIENT_CREDENTIALS, PASSWORD}",
          "41:     ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:             this._val = val;",
          "51:         }",
          "53:         public int getValue() {",
          "54:             return this._val;",
          "55:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:         public static EntitlementPreferenceType fromInt(int val) {",
          "56:             switch (val) {",
          "57:                 case 4:",
          "58:                     return SubscriptionFirstThenSingleScan;",
          "59:                 case 3:",
          "60:                     return SingleScanFirstThenSubscription;",
          "61:                 case 2:",
          "62:                     return SubscriptionOnly;",
          "63:                 case 1:",
          "64:                     return SingleScanOnly;",
          "65:                 default:",
          "66:                     return null;",
          "67:             }",
          "68:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:                     return \"SingleScanOnly\";",
          "68:             }",
          "69:         }",
          "85:     }",
          "86: }",
          "",
          "[Removed Lines]",
          "71:         public static EntitlementPreferenceType fromInt(int val) {",
          "72:             switch (val) {",
          "73:                 case 4:",
          "74:                     return SubscriptionFirstThenSingleScan;",
          "75:                 case 3:",
          "76:                     return SingleScanFirstThenSubscription;",
          "77:                 case 2:",
          "78:                     return SubscriptionOnly;",
          "79:                 case 1:",
          "80:                     return SingleScanOnly;",
          "81:                 default:",
          "82:                     return null;",
          "83:             }",
          "84:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/models/JobModel.java||src/main/java/org/jenkinsci/plugins/fodupload/models/JobModel.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/models/JobModel.java -> src/main/java/org/jenkinsci/plugins/fodupload/models/JobModel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     private File payload;",
          "30:     public File getPayload() {",
          "31:         return payload;",
          "32:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:     public JobModel(String bsiToken,",
          "41:                     boolean purchaseEntitlements,",
          "42:                     String entitlementPreference,",
          "43:                     String srcLocation,",
          "44:                     String remediationScanPreferenceType,",
          "45:                     String inProgressScanActionType) {",
          "47:         this.bsiTokenOriginal = bsiToken;",
          "48:         this.entitlementPreference = entitlementPreference;",
          "49:         this.purchaseEntitlements = purchaseEntitlements;",
          "50:         this.srcLocation = srcLocation;",
          "51:         this.remediationScanPreferenceType = remediationScanPreferenceType;",
          "52:         this.inProgressScanActionType = inProgressScanActionType;",
          "53:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:         return inProgressScanActionType;",
          "68:     }",
          "95:     private Object readResolve() throws URISyntaxException, UnsupportedEncodingException {",
          "96:         bsiTokenCache = tokenParser.parse(bsiTokenOriginal);",
          "97:         return this;",
          "",
          "[Removed Lines]",
          "80:     public JobModel(String bsiToken,",
          "81:                     boolean purchaseEntitlements,",
          "82:                     String entitlementPreference,",
          "83:                     String srcLocation,",
          "84:                     String remediationScanPreferenceType,",
          "85:                     String inProgressScanActionType) {",
          "87:         this.bsiTokenOriginal = bsiToken;",
          "88:         this.entitlementPreference = entitlementPreference;",
          "89:         this.purchaseEntitlements = purchaseEntitlements;",
          "90:         this.srcLocation = srcLocation;",
          "91:         this.remediationScanPreferenceType = remediationScanPreferenceType;",
          "92:         this.inProgressScanActionType = inProgressScanActionType;",
          "93:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:     @Override",
          "101:     public String toString() {",
          "102:         return String.format(",
          "104:                         \"Assessment Type Id:                %s%n\" +",
          "105:                         \"Technology Stack:                  %s%n\" +",
          "106:                         \"Language Level:                    %s%n\" +",
          "",
          "[Removed Lines]",
          "103:                         \"Release Id:                        %s%n\" +",
          "",
          "[Added Lines]",
          "103:                 \"Release Id:                        %s%n\" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:                 inProgressScanActionType);",
          "117:     }",
          "121:         try {",
          "122:             this.bsiTokenCache = tokenParser.parse(bsiTokenOriginal);",
          "123:         } catch (Exception ex) {",
          "124:             return false;",
          "126:         return (this.bsiTokenCache != null);",
          "127:     }",
          "130:     public boolean validate(PrintStream logger) {",
          "132:         List<String> errors = new ArrayList<>();",
          "134:         if (bsiTokenCache.getAssessmentTypeId() == 0)",
          "",
          "[Removed Lines]",
          "119:     public boolean initializeBuildModel()",
          "120:     {",
          "125:         }",
          "",
          "[Added Lines]",
          "119:     public boolean initializeBuildModel() {",
          "124:         }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/models/response/LookupItemsModel.java||src/main/java/org/jenkinsci/plugins/fodupload/models/response/LookupItemsModel.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/models/response/LookupItemsModel.java -> src/main/java/org/jenkinsci/plugins/fodupload/models/response/LookupItemsModel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: package org.jenkinsci.plugins.fodupload.models.response;",
          "3: public class LookupItemsModel {",
          "4:     public LookupItemsModel(String value, String text, String group) {",
          "5:         this.value = value;",
          "6:         this.text = text;",
          "7:         this.group = group;",
          "8:     }",
          "10:     private String value;",
          "11:     private String text;",
          "12:     private String group;",
          "14:     public String getValue() {",
          "15:         return value;",
          "16:     }",
          "18:     public String getText() {",
          "19:         return text;",
          "20:     }",
          "22:     public String getGroup() {",
          "23:         return group;",
          "24:     }",
          "25: }",
          "",
          "[Added Lines]",
          "1: package org.jenkinsci.plugins.fodupload.models.response;",
          "3: public class LookupItemsModel {",
          "4:     private String value;",
          "5:     private String text;",
          "6:     private String group;",
          "7:     public LookupItemsModel(String value, String text, String group) {",
          "8:         this.value = value;",
          "9:         this.text = text;",
          "10:         this.group = group;",
          "11:     }",
          "13:     public String getValue() {",
          "14:         return value;",
          "15:     }",
          "17:     public String getText() {",
          "18:         return text;",
          "19:     }",
          "21:     public String getGroup() {",
          "22:         return group;",
          "23:     }",
          "24: }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java||src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java -> src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:                     if (statusString.equals(AnalysisStatusTypeEnum.Canceled.name())) {",
          "131:                         ScanSummaryDTO scanSummaryDTO = scanSummaryController.getReleaseScanSummary(release.getReleaseId(), release.getCurrentStaticScanId());",
          "133:                             logger.println(\"Scan summary is unavailable\");",
          "134:                         } else {",
          "135:                             printCancelMessages(scanSummaryDTO);",
          "",
          "[Removed Lines]",
          "132:                         if(scanSummaryDTO == null) {",
          "",
          "[Added Lines]",
          "132:                         if (scanSummaryDTO == null) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:     }",
          "173:     private void printCancelMessages(ScanSummaryDTO scanSummary) {",
          "175:             logger.println(\"Unable to retrieve scan summary data\");",
          "176:         } else {",
          "177:             logger.println(\"-------Scan Cancelled------- \");",
          "",
          "[Removed Lines]",
          "174:         if(scanSummary == null){",
          "",
          "[Added Lines]",
          "174:         if (scanSummary == null) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:     }",
          "188:     private void printPauseMessages(ScanSummaryDTO scanSummary) {",
          "190:             logger.println(\"Unable to retrieve scan summary data\");",
          "191:         } else {",
          "192:             logger.println(\"-------Scan Paused------- \");",
          "",
          "[Removed Lines]",
          "189:         if(scanSummary == null){",
          "",
          "[Added Lines]",
          "189:         if (scanSummary == null) {",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java -> src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: package org.jenkinsci.plugins.fodupload.steps;",
          "3: import com.google.common.collect.ImmutableSet;",
          "4: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "5: import hudson.Extension;",
          "6: import hudson.FilePath;",
          "7: import hudson.Launcher;",
          "8: import hudson.model.AbstractBuild;",
          "9: import hudson.model.BuildListener;",
          "10: import hudson.model.Run;",
          "11: import hudson.model.TaskListener;",
          "12: import hudson.util.FormValidation;",
          "13: import hudson.util.ListBoxModel;",
          "14: import org.jenkinsci.plugins.fodupload.SharedPollingBuildStep;",
          "15: import org.jenkinsci.plugins.workflow.steps.StepContext;",
          "16: import org.jenkinsci.plugins.workflow.steps.StepDescriptor;",
          "17: import org.jenkinsci.plugins.workflow.steps.StepExecution;",
          "18: import org.jenkinsci.plugins.workflow.steps.SynchronousNonBlockingStepExecution;",
          "19: import org.kohsuke.stapler.DataBoundConstructor;",
          "20: import org.kohsuke.stapler.DataBoundSetter;",
          "21: import org.kohsuke.stapler.QueryParameter;",
          "23: import java.io.IOException;",
          "24: import java.io.PrintStream;",
          "25: import java.util.Set;",
          "27: public class FortifyPollResults extends FortifyStep {",
          "29:     private String bsiToken;",
          "30:     private int pollingInterval;",
          "32:     private boolean overrideGlobalConfig;",
          "33:     private int policyFailureBuildResultPreference;",
          "34:     private String clientId;",
          "35:     private String clientSecret;",
          "36:     private String username;",
          "37:     private String personalAccessToken;",
          "38:     private String tenantId;",
          "40:     private SharedPollingBuildStep commonBuildStep;",
          "42:     @DataBoundConstructor",
          "43:     public FortifyPollResults(String bsiToken, int pollingInterval) {",
          "44:         super();",
          "45:         this.bsiToken = bsiToken != null ? bsiToken.trim() : \"\";",
          "46:         this.pollingInterval = pollingInterval;",
          "47:     }",
          "49:     public String getBsiToken() {",
          "50:         return this.bsiToken;",
          "51:     }",
          "53:     public int getPollingInterval() {",
          "54:         return this.pollingInterval;",
          "55:     }",
          "57:     public boolean getOverrideGlobalConfig() {",
          "58:         return overrideGlobalConfig;",
          "59:     }",
          "61:     @DataBoundSetter",
          "62:     public void setOverrideGlobalConfig(boolean overrideGlobalConfig) {",
          "63:         this.overrideGlobalConfig = overrideGlobalConfig;",
          "64:     }",
          "66:     public int getPolicyFailureBuildResultPreference() {",
          "67:         return policyFailureBuildResultPreference;",
          "68:     }",
          "70:     @DataBoundSetter",
          "71:     public void setPolicyFailureBuildResultPreference(int policyFailureBuildResultPreference) {",
          "72:         this.policyFailureBuildResultPreference = policyFailureBuildResultPreference;",
          "73:     }",
          "75:     public String getClientId() {",
          "76:         return clientId;",
          "77:     }",
          "79:     @DataBoundSetter",
          "80:     public void setClientId(String clientId) {",
          "81:         this.clientId = clientId;",
          "82:     }",
          "84:     public String getClientSecret() {",
          "85:         return clientSecret;",
          "86:     }",
          "88:     @DataBoundSetter",
          "89:     public void setClientSecret(String clientSecret) {",
          "90:         this.clientSecret = clientSecret;",
          "91:     }",
          "93:     public String getUsername() {",
          "94:         return username;",
          "95:     }",
          "97:     @DataBoundSetter",
          "98:     public void setUsername(String username) {",
          "99:         this.username = username;",
          "100:     }",
          "102:     public String getPersonalAccessToken() {",
          "103:         return personalAccessToken;",
          "104:     }",
          "106:     @DataBoundSetter",
          "107:     public void setPersonalAccessToken(String personalAccessToken) {",
          "108:         this.personalAccessToken = personalAccessToken;",
          "109:     }",
          "111:     public String getTenantId() {",
          "112:         return tenantId;",
          "113:     }",
          "115:     @DataBoundSetter",
          "116:     public void setTenantId(String tenantId) {",
          "117:         this.tenantId = tenantId;",
          "118:     }",
          "120:     @Override",
          "121:     public boolean prebuild(AbstractBuild<?, ?> build, BuildListener listener) {",
          "122:         PrintStream log = listener.getLogger();",
          "123:         log.println(\"Fortify on Demand Poll Results PreBuild Running...\");",
          "124:         commonBuildStep = new SharedPollingBuildStep(bsiToken,",
          "125:                 overrideGlobalConfig,",
          "126:                 pollingInterval,",
          "127:                 policyFailureBuildResultPreference,",
          "128:                 clientId,",
          "129:                 clientSecret,",
          "130:                 username,",
          "131:                 personalAccessToken,",
          "132:                 tenantId);",
          "134:         return true;",
          "135:     }",
          "137:     @Override",
          "138:     public StepExecution start(StepContext context) throws Exception {",
          "139:         return new FortifyPollResults.Execution(this, context);",
          "140:     }",
          "142:     @Override",
          "143:     public void perform(Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws InterruptedException, IOException {",
          "144:         PrintStream log = listener.getLogger();",
          "145:         log.println(\"Fortify on Demand Poll Results Running...\");",
          "146:         commonBuildStep = new SharedPollingBuildStep(bsiToken,",
          "147:                 overrideGlobalConfig,",
          "148:                 pollingInterval,",
          "149:                 policyFailureBuildResultPreference,",
          "150:                 clientId,",
          "151:                 clientSecret,",
          "152:                 username,",
          "153:                 personalAccessToken,",
          "154:                 tenantId);",
          "156:         commonBuildStep.perform(build, workspace, launcher, listener);",
          "157:     }",
          "159:     @Extension",
          "160:     public static class DescriptorImpl extends StepDescriptor {",
          "161:         @Override",
          "162:         public String getDisplayName() {",
          "163:             return \"Poll Fortify on Demand for Results\";",
          "164:         }",
          "166:         @Override",
          "167:         public String getFunctionName() {",
          "168:             return \"fodPollResults\";",
          "169:         }",
          "171:         @Override",
          "172:         public Set<? extends Class<?>> getRequiredContext() {",
          "173:             return ImmutableSet.of(Run.class, FilePath.class, Launcher.class, TaskListener.class);",
          "174:         }",
          "177:         @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "178:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "179:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedPollingBuildStep.USERNAME) final String username,",
          "180:                                                                   @QueryParameter(SharedPollingBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "181:                                                                   @QueryParameter(SharedPollingBuildStep.TENANT_ID) final String tenantId)",
          "182:         {",
          "183:             return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "185:         }",
          "187:         @SuppressWarnings(\"unused\")",
          "188:         public ListBoxModel doFillPolicyFailureBuildResultPreferenceItems() {",
          "189:             return SharedPollingBuildStep.doFillPolicyFailureBuildResultPreferenceItems();",
          "190:         }",
          "192:     }",
          "194:     private static class Execution extends SynchronousNonBlockingStepExecution<Void> {",
          "195:         private transient FortifyPollResults polling;",
          "197:         protected Execution(FortifyPollResults polling, StepContext context) {",
          "198:             super(context);",
          "199:             this.polling = polling;",
          "200:         }",
          "202:         @Override",
          "203:         protected Void run() throws Exception {",
          "204:             getContext().get(TaskListener.class).getLogger().println(\"Running fodPollResults step\");",
          "205:             polling.perform(getContext().get(Run.class), getContext().get(FilePath.class),",
          "206:                     getContext().get(Launcher.class), getContext().get(TaskListener.class));",
          "208:             return null;",
          "209:         }",
          "211:         private static final long serialVersionUID = 1L;",
          "212:     }",
          "213: }",
          "",
          "[Added Lines]",
          "1: package org.jenkinsci.plugins.fodupload.steps;",
          "3: import com.google.common.collect.ImmutableSet;",
          "4: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "5: import hudson.Extension;",
          "6: import hudson.FilePath;",
          "7: import hudson.Launcher;",
          "8: import hudson.model.AbstractBuild;",
          "9: import hudson.model.BuildListener;",
          "10: import hudson.model.Run;",
          "11: import hudson.model.TaskListener;",
          "12: import hudson.util.FormValidation;",
          "13: import hudson.util.ListBoxModel;",
          "14: import org.jenkinsci.plugins.fodupload.SharedPollingBuildStep;",
          "15: import org.jenkinsci.plugins.workflow.steps.StepContext;",
          "16: import org.jenkinsci.plugins.workflow.steps.StepDescriptor;",
          "17: import org.jenkinsci.plugins.workflow.steps.StepExecution;",
          "18: import org.jenkinsci.plugins.workflow.steps.SynchronousNonBlockingStepExecution;",
          "19: import org.kohsuke.stapler.DataBoundConstructor;",
          "20: import org.kohsuke.stapler.DataBoundSetter;",
          "21: import org.kohsuke.stapler.QueryParameter;",
          "23: import java.io.IOException;",
          "24: import java.io.PrintStream;",
          "25: import java.util.Set;",
          "27: public class FortifyPollResults extends FortifyStep {",
          "29:     private String bsiToken;",
          "30:     private int pollingInterval;",
          "32:     private boolean overrideGlobalConfig;",
          "33:     private int policyFailureBuildResultPreference;",
          "34:     private String clientId;",
          "35:     private String clientSecret;",
          "36:     private String username;",
          "37:     private String personalAccessToken;",
          "38:     private String tenantId;",
          "40:     private SharedPollingBuildStep commonBuildStep;",
          "42:     @DataBoundConstructor",
          "43:     public FortifyPollResults(String bsiToken, int pollingInterval) {",
          "44:         super();",
          "45:         this.bsiToken = bsiToken != null ? bsiToken.trim() : \"\";",
          "46:         this.pollingInterval = pollingInterval;",
          "47:     }",
          "49:     public String getBsiToken() {",
          "50:         return this.bsiToken;",
          "51:     }",
          "53:     public int getPollingInterval() {",
          "54:         return this.pollingInterval;",
          "55:     }",
          "57:     public boolean getOverrideGlobalConfig() {",
          "58:         return overrideGlobalConfig;",
          "59:     }",
          "61:     @DataBoundSetter",
          "62:     public void setOverrideGlobalConfig(boolean overrideGlobalConfig) {",
          "63:         this.overrideGlobalConfig = overrideGlobalConfig;",
          "64:     }",
          "66:     public int getPolicyFailureBuildResultPreference() {",
          "67:         return policyFailureBuildResultPreference;",
          "68:     }",
          "70:     @DataBoundSetter",
          "71:     public void setPolicyFailureBuildResultPreference(int policyFailureBuildResultPreference) {",
          "72:         this.policyFailureBuildResultPreference = policyFailureBuildResultPreference;",
          "73:     }",
          "75:     public String getClientId() {",
          "76:         return clientId;",
          "77:     }",
          "79:     @DataBoundSetter",
          "80:     public void setClientId(String clientId) {",
          "81:         this.clientId = clientId;",
          "82:     }",
          "84:     public String getClientSecret() {",
          "85:         return clientSecret;",
          "86:     }",
          "88:     @DataBoundSetter",
          "89:     public void setClientSecret(String clientSecret) {",
          "90:         this.clientSecret = clientSecret;",
          "91:     }",
          "93:     public String getUsername() {",
          "94:         return username;",
          "95:     }",
          "97:     @DataBoundSetter",
          "98:     public void setUsername(String username) {",
          "99:         this.username = username;",
          "100:     }",
          "102:     public String getPersonalAccessToken() {",
          "103:         return personalAccessToken;",
          "104:     }",
          "106:     @DataBoundSetter",
          "107:     public void setPersonalAccessToken(String personalAccessToken) {",
          "108:         this.personalAccessToken = personalAccessToken;",
          "109:     }",
          "111:     public String getTenantId() {",
          "112:         return tenantId;",
          "113:     }",
          "115:     @DataBoundSetter",
          "116:     public void setTenantId(String tenantId) {",
          "117:         this.tenantId = tenantId;",
          "118:     }",
          "120:     @Override",
          "121:     public boolean prebuild(AbstractBuild<?, ?> build, BuildListener listener) {",
          "122:         PrintStream log = listener.getLogger();",
          "123:         log.println(\"Fortify on Demand Poll Results PreBuild Running...\");",
          "124:         commonBuildStep = new SharedPollingBuildStep(bsiToken,",
          "125:                 overrideGlobalConfig,",
          "126:                 pollingInterval,",
          "127:                 policyFailureBuildResultPreference,",
          "128:                 clientId,",
          "129:                 clientSecret,",
          "130:                 username,",
          "131:                 personalAccessToken,",
          "132:                 tenantId);",
          "134:         return true;",
          "135:     }",
          "137:     @Override",
          "138:     public StepExecution start(StepContext context) throws Exception {",
          "139:         return new FortifyPollResults.Execution(this, context);",
          "140:     }",
          "142:     @Override",
          "143:     public void perform(Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws InterruptedException, IOException {",
          "144:         PrintStream log = listener.getLogger();",
          "145:         log.println(\"Fortify on Demand Poll Results Running...\");",
          "146:         commonBuildStep = new SharedPollingBuildStep(bsiToken,",
          "147:                 overrideGlobalConfig,",
          "148:                 pollingInterval,",
          "149:                 policyFailureBuildResultPreference,",
          "150:                 clientId,",
          "151:                 clientSecret,",
          "152:                 username,",
          "153:                 personalAccessToken,",
          "154:                 tenantId);",
          "156:         commonBuildStep.perform(build, workspace, launcher, listener);",
          "157:     }",
          "159:     @Extension",
          "160:     public static class DescriptorImpl extends StepDescriptor {",
          "161:         @Override",
          "162:         public String getDisplayName() {",
          "163:             return \"Poll Fortify on Demand for Results\";",
          "164:         }",
          "166:         @Override",
          "167:         public String getFunctionName() {",
          "168:             return \"fodPollResults\";",
          "169:         }",
          "171:         @Override",
          "172:         public Set<? extends Class<?>> getRequiredContext() {",
          "173:             return ImmutableSet.of(Run.class, FilePath.class, Launcher.class, TaskListener.class);",
          "174:         }",
          "177:         @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "178:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "179:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedPollingBuildStep.USERNAME) final String username,",
          "180:                                                                   @QueryParameter(SharedPollingBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "181:                                                                   @QueryParameter(SharedPollingBuildStep.TENANT_ID) final String tenantId) {",
          "182:             return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "184:         }",
          "186:         @SuppressWarnings(\"unused\")",
          "187:         public ListBoxModel doFillPolicyFailureBuildResultPreferenceItems() {",
          "188:             return SharedPollingBuildStep.doFillPolicyFailureBuildResultPreferenceItems();",
          "189:         }",
          "191:     }",
          "193:     private static class Execution extends SynchronousNonBlockingStepExecution<Void> {",
          "194:         private static final long serialVersionUID = 1L;",
          "195:         private transient FortifyPollResults polling;",
          "197:         protected Execution(FortifyPollResults polling, StepContext context) {",
          "198:             super(context);",
          "199:             this.polling = polling;",
          "200:         }",
          "202:         @Override",
          "203:         protected Void run() throws Exception {",
          "204:             getContext().get(TaskListener.class).getLogger().println(\"Running fodPollResults step\");",
          "205:             polling.perform(getContext().get(Run.class), getContext().get(FilePath.class),",
          "206:                     getContext().get(Launcher.class), getContext().get(TaskListener.class));",
          "208:             return null;",
          "209:         }",
          "210:     }",
          "211: }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java -> src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         return bsiToken;",
          "53:     }",
          "55:     @DataBoundSetter",
          "56:     public void setOverrideGlobalConfig(boolean overrideGlobalConfig) {",
          "57:         this.overrideGlobalConfig = overrideGlobalConfig;",
          "58:     }",
          "62:     }",
          "64:     @DataBoundSetter",
          "",
          "[Removed Lines]",
          "60:     public boolean getOverrideGlobalConfig() {",
          "61:         return overrideGlobalConfig;",
          "",
          "[Added Lines]",
          "55:     public boolean getOverrideGlobalConfig() {",
          "56:         return overrideGlobalConfig;",
          "57:     }",
          "64:     public String getUsername() {",
          "65:         return username;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:         this.username = username;",
          "67:     }",
          "71:     }",
          "73:     @DataBoundSetter",
          "",
          "[Removed Lines]",
          "69:     public String getUsername() {",
          "70:         return username;",
          "",
          "[Added Lines]",
          "73:     public String getPersonalAccessToken() {",
          "74:         return personalAccessToken;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:         this.personalAccessToken = personalAccessToken;",
          "76:     }",
          "80:     }",
          "82:     @DataBoundSetter",
          "",
          "[Removed Lines]",
          "78:     public String getPersonalAccessToken() {",
          "79:         return personalAccessToken;",
          "",
          "[Added Lines]",
          "82:     public String getTenantId() {",
          "83:         return tenantId;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:         this.tenantId = tenantId;",
          "85:     }",
          "89:     }",
          "91:     @DataBoundSetter",
          "92:     public void setPurchaseEntitlements(boolean purchaseEntitlements) {",
          "93:         this.purchaseEntitlements = purchaseEntitlements;",
          "94:     }",
          "97:     }",
          "99:     @DataBoundSetter",
          "100:     public void setEntitlementPreference(String entitlementPreference) {",
          "101:         this.entitlementPreference = entitlementPreference;",
          "102:     }",
          "105:     }",
          "107:     @DataBoundSetter",
          "",
          "[Removed Lines]",
          "87:     public String getTenantId() {",
          "88:         return tenantId;",
          "95:     public boolean getPurchaseEntitlements() {",
          "96:         return purchaseEntitlements;",
          "103:     public String getEntitlementPreference() {",
          "104:         return entitlementPreference;",
          "",
          "[Added Lines]",
          "91:     public boolean getPurchaseEntitlements() {",
          "92:         return purchaseEntitlements;",
          "100:     public String getEntitlementPreference() {",
          "101:         return entitlementPreference;",
          "109:     public String getSrcLocation() {",
          "110:         return srcLocation;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109:         this.srcLocation = srcLocation != null ? srcLocation.trim() : \"\";",
          "110:     }",
          "114:     }",
          "116:     @DataBoundSetter",
          "117:     public void setRemediationScanPreferenceType(String remediationScanPreferenceType) {",
          "118:         this.remediationScanPreferenceType = remediationScanPreferenceType;",
          "119:     }",
          "123:     }",
          "125:     @DataBoundSetter",
          "126:     public void setInProgressScanActionType(String inProgressScanActionType) {",
          "127:         this.inProgressScanActionType = inProgressScanActionType;",
          "128:     }",
          "134:     @Override",
          "135:     public boolean prebuild(AbstractBuild<?, ?> build, BuildListener listener) {",
          "",
          "[Removed Lines]",
          "112:     public String getSrcLocation() {",
          "113:         return srcLocation;",
          "121:     public String getRemediationScanPreferenceType() {",
          "122:         return remediationScanPreferenceType;",
          "130:     public String getInProgressScanActionType() {",
          "131:         return inProgressScanActionType;",
          "132:     }",
          "",
          "[Added Lines]",
          "118:     public String getRemediationScanPreferenceType() {",
          "119:         return remediationScanPreferenceType;",
          "127:     public String getInProgressScanActionType() {",
          "128:         return inProgressScanActionType;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "193:         @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "194:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "199:             return SharedUploadBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "201:         }",
          "",
          "[Removed Lines]",
          "195:         public FormValidation doTestPersonalAccessTokenConnection( @QueryParameter(SharedUploadBuildStep.USERNAME) final String username,",
          "196:                                                                    @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "197:                                                                    @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId)",
          "198:         {",
          "",
          "[Added Lines]",
          "197:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedUploadBuildStep.USERNAME) final String username,",
          "198:                                                                   @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "199:                                                                   @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "208:     }",
          "210:     private static class Execution extends SynchronousNonBlockingStepExecution<Void> {",
          "211:         private transient FortifyStaticAssessment upload;",
          "213:         protected Execution(FortifyStaticAssessment upload, StepContext context) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:         private static final long serialVersionUID = 1L;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "224:             return null;",
          "225:         }",
          "228:     }",
          "229: }",
          "",
          "[Removed Lines]",
          "227:         private static final long serialVersionUID = 1L;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java"
        ]
      }
    },
    {
      "candidate_hash": "51797bd9b2e01d20f55984003a393f7daf69f4ce",
      "candidate_info": {
        "commit_hash": "51797bd9b2e01d20f55984003a393f7daf69f4ce",
        "repo": "jenkinsci/fortify-on-demand-uploader-plugin",
        "commit_url": "https://github.com/jenkinsci/fortify-on-demand-uploader-plugin/commit/51797bd9b2e01d20f55984003a393f7daf69f4ce",
        "files": [
          "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/AnalysisStatusTypeEnum.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanPauseDetail.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanSummaryDTO.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java"
        ],
        "message": "US-292015 (#2)\n\n* Adding fields to display proper status\n\n* Adding functionality for displaying cancel and pause reasons\n\n* \"Updated verbiage and spacing\"",
        "before_after_code_files": [
          "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java||src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/AnalysisStatusTypeEnum.java||src/main/java/org/jenkinsci/plugins/fodupload/models/AnalysisStatusTypeEnum.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanPauseDetail.java||src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanPauseDetail.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanSummaryDTO.java||src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanSummaryDTO.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java||src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java"
          ],
          "candidate": [
            "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import com.fortify.fod.parser.BsiToken;",
          "4: import com.fortify.fod.parser.BsiTokenParser;",
          "5: import hudson.FilePath;",
          "6: import hudson.Launcher;",
          "7: import hudson.model.Result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:     }",
          "183:     public static FormValidation doTestPersonalAccessTokenConnection(final String username,",
          "184:                                                                final String personalAccessToken,",
          "185:                                                                final String tenantId)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import com.fortify.fod.parser.BsiToken;",
          "4: import com.fortify.fod.parser.BsiTokenParser;",
          "5: import hudson.FilePath;",
          "6: import hudson.Launcher;",
          "7: import hudson.model.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:         return FormValidation.error(\"Please specify BSI Token\");",
          "186:     }",
          "188:     public static FormValidation doTestPersonalAccessTokenConnection(final String username,",
          "189:                                                                       final String personalAccessToken,",
          "190:                                                                       final String tenantId)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java||src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java -> src/main/java/org/jenkinsci/plugins/fodupload/controllers/StaticScanSummaryController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.jenkinsci.plugins.fodupload.controllers;",
          "3: import com.google.gson.Gson;",
          "4: import com.google.gson.reflect.TypeToken;",
          "5: import okhttp3.HttpUrl;",
          "6: import okhttp3.Request;",
          "7: import okhttp3.Response;",
          "8: import org.apache.commons.httpclient.HttpStatus;",
          "9: import org.apache.commons.io.IOUtils;",
          "10: import org.jenkinsci.plugins.fodupload.FodApiConnection;",
          "12: import org.jenkinsci.plugins.fodupload.models.response.ScanSummaryDTO;",
          "14: import java.io.IOException;",
          "15: import java.io.PrintStream;",
          "16: import java.lang.reflect.Type;",
          "18: public class StaticScanSummaryController extends ControllerBase {",
          "19:     private PrintStream logger;",
          "22:     public StaticScanSummaryController(FodApiConnection apiConnection, PrintStream logger) {",
          "23:         super(apiConnection);",
          "24:         this.logger = logger;",
          "25:     }",
          "27:     public ScanSummaryDTO getReleaseScanSummary(final int releaseId, final int scanId) throws IOException {",
          "29:         if (apiConnection.getToken() == null)",
          "30:             apiConnection.authenticate();",
          "32:         HttpUrl.Builder builder = HttpUrl.parse(apiConnection.getApiUrl()).newBuilder()",
          "33:                 .addPathSegments(String.format(\"/api/v3/releases/%d/scans/%d\", releaseId, scanId));",
          "34:         logger.println(\"--------------------------\");",
          "35:         logger.println(\"Retrieving scan summary data\");",
          "36:         logger.println(String.format(\"ReleaseID: %s; ScanID: %s\", releaseId, scanId));",
          "37:         logger.println(\"--------------------------\");",
          "39:         String url = builder.build().toString();",
          "41:         Request request = new Request.Builder()",
          "42:                 .url(url)",
          "43:                 .addHeader(\"Authorization\", \"Bearer \" + apiConnection.getToken())",
          "44:                 .addHeader(\"Accept\", \"application/json\")",
          "45:                 .get()",
          "46:                 .build();",
          "47:         Response response = apiConnection.getClient().newCall(request).execute();",
          "49:         if (response.code() == HttpStatus.SC_FORBIDDEN) {",
          "51:             apiConnection.authenticate();",
          "52:             response = apiConnection.getClient().newCall(request).execute();",
          "53:         }",
          "56:         String content = IOUtils.toString(response.body().byteStream(), \"utf-8\");",
          "57:         response.body().close();",
          "59:         Gson gson = new Gson();",
          "61:         Type t = new TypeToken<ScanSummaryDTO>() {",
          "62:         }.getType();",
          "64:         ScanSummaryDTO results = gson.fromJson(content, t);",
          "66:         if (results != null) {",
          "67:             return results;",
          "68:         } else {",
          "69:             return null;",
          "70:         }",
          "71:     }",
          "73: }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/models/AnalysisStatusTypeEnum.java||src/main/java/org/jenkinsci/plugins/fodupload/models/AnalysisStatusTypeEnum.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/models/AnalysisStatusTypeEnum.java -> src/main/java/org/jenkinsci/plugins/fodupload/models/AnalysisStatusTypeEnum.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.jenkinsci.plugins.fodupload.models;",
          "3: public enum AnalysisStatusTypeEnum {",
          "4:     Completed,",
          "5:     InProgress,",
          "6:     Canceled,",
          "7:     Waiting",
          "8: }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanPauseDetail.java||src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanPauseDetail.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanPauseDetail.java -> src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanPauseDetail.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.jenkinsci.plugins.fodupload.models.response;",
          "3: public class ScanPauseDetail {",
          "4:     private String pausedOn = \"\";",
          "5:     private String reason = \"\";",
          "6:     private String notes = \"\";",
          "8:     public String getPausedOn() {",
          "9:         return pausedOn;",
          "10:     }",
          "12:     public String getReason() {",
          "13:         return reason;",
          "14:     }",
          "16:     public String getNotes() {",
          "17:         return notes;",
          "18:     }",
          "19: }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanSummaryDTO.java||src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanSummaryDTO.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanSummaryDTO.java -> src/main/java/org/jenkinsci/plugins/fodupload/models/response/ScanSummaryDTO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.jenkinsci.plugins.fodupload.models.response;",
          "3: public class ScanSummaryDTO {",
          "4:     private int applicationId;",
          "5:     private String applicationName;",
          "6:     private int releaseId;",
          "7:     private String releaseName;",
          "8:     private int scanId;",
          "9:     private int scanTypeId;",
          "10:     private String scanType;",
          "11:     private int assessmentTypeId;",
          "12:     private String assessmentTypeName;",
          "13:     private int analysisStatusTypeId;",
          "14:     private String analysisStatusType;",
          "15:     private String startedDatetime;",
          "16:     private String completedDateTime;",
          "17:     private int totalIssues;",
          "18:     private int issueCountCritical;",
          "19:     private int issueCountHigh;",
          "20:     private int issueCountMedium;",
          "21:     private int issueCountLow;",
          "22:     private int starRating;",
          "23:     private String notes;",
          "24:     private boolean isFalsePositiveChallenge;",
          "25:     private boolean isRemediationScan;",
          "26:     private int entitlementId;",
          "27:     private int entitlementUnitsConsumed;",
          "28:     private boolean isSubscriptionEntitlement;",
          "29:     private ScanPauseDetail[] pauseDetails;",
          "30:     private String cancelReason;",
          "31:     private String analysisStatusReasonNotes;",
          "32:     private int scanMethodTypeId;",
          "33:     private String scanMethodTypeName;",
          "34:     private String scanTool;",
          "35:     private String scanToolVersion;",
          "37:     public int getApplicationId() {",
          "38:         return applicationId;",
          "39:     }",
          "41:     public String getApplicationName() {",
          "42:         return applicationName;",
          "43:     }",
          "45:     public int getReleaseId() {",
          "46:         return releaseId;",
          "47:     }",
          "49:     public String getReleaseName() {",
          "50:         return releaseName;",
          "51:     }",
          "53:     public int getScanId() {",
          "54:         return scanId;",
          "55:     }",
          "57:     public int getScanTypeId() {",
          "58:         return scanTypeId;",
          "59:     }",
          "61:     public String getScanType() {",
          "62:         return scanType;",
          "63:     }",
          "65:     public int getAssessmentTypeId() {",
          "66:         return assessmentTypeId;",
          "67:     }",
          "69:     public String getAssessmentTypeName() {",
          "70:         return assessmentTypeName;",
          "71:     }",
          "73:     public int getAnalysisStatusTypeId() {",
          "74:         return analysisStatusTypeId;",
          "75:     }",
          "77:     public String getAnalysisStatusType() {",
          "78:         return analysisStatusType;",
          "79:     }",
          "81:     public String getStartedDatetime() {",
          "82:         return startedDatetime;",
          "83:     }",
          "85:     public String getCompletedDateTime() {",
          "86:         return completedDateTime;",
          "87:     }",
          "89:     public int getTotalIssues() {",
          "90:         return totalIssues;",
          "91:     }",
          "93:     public int getIssueCountCritical() {",
          "94:         return issueCountCritical;",
          "95:     }",
          "97:     public int getIssueCountHigh() {",
          "98:         return issueCountHigh;",
          "99:     }",
          "101:     public int getIssueCountMedium() {",
          "102:         return issueCountMedium;",
          "103:     }",
          "105:     public int getIssueCountLow() {",
          "106:         return issueCountLow;",
          "107:     }",
          "109:     public int getStarRating() {",
          "110:         return starRating;",
          "111:     }",
          "113:     public String getNotes() {",
          "114:         return notes;",
          "115:     }",
          "117:     public boolean getIsFalsePositiveChallenge() {",
          "118:         return isFalsePositiveChallenge;",
          "119:     }",
          "121:     public boolean getIsRemediationScan() {",
          "122:         return isRemediationScan;",
          "123:     }",
          "125:     public int getEntitlementId() {",
          "126:         return entitlementId;",
          "127:     }",
          "129:     public int getEntitlementUnitsConsumed() {",
          "130:         return entitlementUnitsConsumed;",
          "131:     }",
          "133:     public boolean getIsSubscriptionEntitlement() {",
          "134:         return isSubscriptionEntitlement;",
          "135:     }",
          "137:     public ScanPauseDetail[] getPauseDetails() {",
          "138:         ScanPauseDetail[] returnDetails = pauseDetails;",
          "139:         return returnDetails;",
          "140:     }",
          "142:     public String getCancelReason() {",
          "143:         return cancelReason;",
          "144:     }",
          "146:     public String getAnalysisStatusReasonNotes() {",
          "147:         return analysisStatusReasonNotes;",
          "148:     }",
          "150:     public int getScanMethodTypeId() {",
          "151:         return scanMethodTypeId;",
          "152:     }",
          "154:     public String getScanMethodTypeName() {",
          "155:         return scanMethodTypeName;",
          "156:     }",
          "158:     public String getScanTool() {",
          "159:         return scanTool;",
          "160:     }",
          "162:     public String getScanToolVersion() {",
          "163:         return scanToolVersion;",
          "164:     }",
          "165: }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java||src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java -> src/main/java/org/jenkinsci/plugins/fodupload/polling/ScanStatusPoller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import org.jenkinsci.plugins.fodupload.Utils;",
          "6: import org.jenkinsci.plugins.fodupload.controllers.LookupItemsController;",
          "7: import org.jenkinsci.plugins.fodupload.controllers.ReleaseController;",
          "8: import org.jenkinsci.plugins.fodupload.models.response.LookupItemsModel;",
          "9: import org.jenkinsci.plugins.fodupload.models.response.ReleaseDTO;",
          "11: import java.io.IOException;",
          "12: import java.io.PrintStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import org.jenkinsci.plugins.fodupload.controllers.StaticScanSummaryController;",
          "9: import org.jenkinsci.plugins.fodupload.models.AnalysisStatusTypeEnum;",
          "12: import org.jenkinsci.plugins.fodupload.models.response.ScanPauseDetail;",
          "13: import org.jenkinsci.plugins.fodupload.models.response.ScanSummaryDTO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:         LookupItemsController lookupItemsController = new LookupItemsController(this.apiConnection);",
          "51:         ReleaseController releaseController = new ReleaseController(this.apiConnection);",
          "52:         PollReleaseStatusResult result = new PollReleaseStatusResult();",
          "53:         List<LookupItemsModel> analysisStatusTypes = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:         StaticScanSummaryController scanSummaryController = new StaticScanSummaryController(this.apiConnection, logger);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:             counter++;",
          "68:             ReleaseDTO release = releaseController.getRelease(releaseId,",
          "71:             if (release == null) {",
          "72:                 failCount++;",
          "",
          "[Removed Lines]",
          "69:                     \"currentAnalysisStatusTypeId,isPassed,passFailReasonId,critical,high,medium,low,releaseId,rating,currentStaticScanId,releaseName\");",
          "",
          "[Added Lines]",
          "75:                     \"currentAnalysisStatusTypeId,isPassed,passFailReasonTypeId,passFailReasonType,critical,high,medium,low,releaseId,rating,currentStaticScanId,releaseName\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:                 List<String> complete = new ArrayList<>();",
          "89:                 for (LookupItemsModel item : analysisStatusTypes) {",
          "91:                         complete.add(item.getValue());",
          "92:                 }",
          "",
          "[Removed Lines]",
          "90:                     if (item.getText().equalsIgnoreCase(\"Completed\") || item.getText().equalsIgnoreCase((\"Canceled\")))",
          "",
          "[Added Lines]",
          "96:                     if (item.getText().equalsIgnoreCase(AnalysisStatusTypeEnum.Completed.name()) || item.getText().equalsIgnoreCase(AnalysisStatusTypeEnum.Canceled.name()))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "107:                 logger.println(counter + \") Poll Status: \" + statusString);",
          "109:                 if (finished) {",
          "110:                     result.setPassing(release.isPassed());",
          "111:                     result.setPollingSuccessful(true);",
          "112:                     if (!Utils.isNullOrEmpty(release.getPassFailReasonType()))",
          "113:                         result.setFailReason(release.getPassFailReasonType());",
          "115:                 }",
          "116:             } else {",
          "117:                 logger.println(String.format(\"Polling Failed %d times.  Terminating\", MAX_FAILS));",
          "",
          "[Removed Lines]",
          "114:                     printPassFail(release);",
          "",
          "[Added Lines]",
          "116:                 if (statusString.equals(AnalysisStatusTypeEnum.Waiting.name())) {",
          "117:                     ScanSummaryDTO scanSummaryDTO = scanSummaryController.getReleaseScanSummary(release.getReleaseId(), release.getCurrentStaticScanId());",
          "118:                     if (scanSummaryDTO.getPauseDetails() != null)",
          "119:                         printPauseMessages(scanSummaryDTO);",
          "120:                 }",
          "128:                     if (statusString.equals(AnalysisStatusTypeEnum.Canceled.name())) {",
          "129:                         ScanSummaryDTO scanSummaryDTO = scanSummaryController.getReleaseScanSummary(release.getReleaseId(), release.getCurrentStaticScanId());",
          "130:                         printCancelMessages(scanSummaryDTO);",
          "131:                     } else {",
          "132:                         printPassFail(release);",
          "133:                     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "144:             logger.println(\"Failure Reason:         \" + passFailReason);",
          "145:         }",
          "146:     }",
          "147: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     private void printCancelMessages(ScanSummaryDTO scanSummary) {",
          "168:         logger.println(\"-------Scan Cancelled------- \");",
          "169:         logger.println();",
          "170:         logger.println(String.format(\"Cancel reason:        %s\", scanSummary.getCancelReason()));",
          "171:         logger.println(String.format(\"Cancel reason notes:  %s\", scanSummary.getAnalysisStatusReasonNotes()));",
          "172:         logger.println();",
          "173:         logger.println(\"For application status details see the customer portal: \");",
          "174:         logger.println(String.format(\"%s/Redirect/Releases/%d\", apiConnection.getBaseUrl(), scanSummary.getReleaseId()));",
          "175:         logger.println();",
          "176:     }",
          "178:     private void printPauseMessages(ScanSummaryDTO scanSummary) {",
          "179:         logger.println(\"-------Scan Paused------- \");",
          "180:         logger.println();",
          "181:         logger.println(\"Review the last pause entry below\");",
          "182:         logger.println();",
          "183:         for (ScanPauseDetail spd : scanSummary.getPauseDetails()) {",
          "184:             logger.println(String.format(\"Pause reason:         %s\", spd.getReason()));",
          "185:             logger.println(String.format(\"Pause reason notes:   %s\", spd.getNotes()));",
          "186:             logger.println();",
          "187:         }",
          "188:     }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStep.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import java.util.Collection;",
          "5: import java.util.Collections;",
          "7: import org.jenkinsci.plugins.workflow.steps.Step;",
          "8: import org.jenkinsci.plugins.workflow.steps.StepContext;",
          "9: import org.jenkinsci.plugins.workflow.steps.StepExecution;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     protected Run<?, ?> lastBuild;",
          "24:     protected void setLastBuild(Run<?, ?> lastBuild) {",
          "25:         this.lastBuild = lastBuild;",
          "26:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     @SuppressFBWarnings(\"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46ab4f6b4cd1a30886777937ae9b07d13b9b7c9c",
      "candidate_info": {
        "commit_hash": "46ab4f6b4cd1a30886777937ae9b07d13b9b7c9c",
        "repo": "jenkinsci/fortify-on-demand-uploader-plugin",
        "commit_url": "https://github.com/jenkinsci/fortify-on-demand-uploader-plugin/commit/46ab4f6b4cd1a30886777937ae9b07d13b9b7c9c",
        "files": [
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java"
        ],
        "message": "[US-327040-V] Updating pipeline steps to encrypt/decrypt values when using script helper.",
        "before_after_code_files": [
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java"
          ],
          "candidate": [
            "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java -> src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import hudson.model.TaskListener;",
          "12: import hudson.util.FormValidation;",
          "13: import hudson.util.ListBoxModel;",
          "14: import org.jenkinsci.plugins.fodupload.SharedPollingBuildStep;",
          "15: import org.jenkinsci.plugins.workflow.steps.StepContext;",
          "16: import org.jenkinsci.plugins.workflow.steps.StepDescriptor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: import hudson.util.Secret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:     }",
          "75:     public String getClientId() {",
          "77:     }",
          "79:     @DataBoundSetter",
          "",
          "[Removed Lines]",
          "76:         return clientId;",
          "",
          "[Added Lines]",
          "78:         return Secret.fromString(clientId).getEncryptedValue().toString();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:     }",
          "84:     public String getClientSecret() {",
          "86:     }",
          "88:     @DataBoundSetter",
          "",
          "[Removed Lines]",
          "85:         return clientSecret;",
          "",
          "[Added Lines]",
          "87:         return Secret.fromString(clientSecret).getEncryptedValue().toString();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:     }",
          "93:     public String getUsername() {",
          "95:     }",
          "97:     @DataBoundSetter",
          "",
          "[Removed Lines]",
          "94:         return username;",
          "",
          "[Added Lines]",
          "96:         return Secret.fromString(username).getEncryptedValue().toString();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:     }",
          "102:     public String getPersonalAccessToken() {",
          "104:     }",
          "106:     @DataBoundSetter",
          "",
          "[Removed Lines]",
          "103:         return personalAccessToken;",
          "",
          "[Added Lines]",
          "105:         return Secret.fromString(personalAccessToken).getEncryptedValue().toString();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "109:     }",
          "111:     public String getTenantId() {",
          "113:     }",
          "115:     @DataBoundSetter",
          "",
          "[Removed Lines]",
          "112:         return tenantId;",
          "",
          "[Added Lines]",
          "114:         return Secret.fromString(tenantId).getEncryptedValue().toString();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "125:                 overrideGlobalConfig,",
          "126:                 pollingInterval,",
          "127:                 policyFailureBuildResultPreference,",
          "134:         return true;",
          "135:     }",
          "",
          "[Removed Lines]",
          "128:                 clientId,",
          "129:                 clientSecret,",
          "130:                 username,",
          "131:                 personalAccessToken,",
          "132:                 tenantId);",
          "",
          "[Added Lines]",
          "130:                 Secret.decrypt(clientId).getPlainText(),",
          "131:                 Secret.decrypt(clientSecret).getPlainText(),",
          "132:                 Secret.decrypt(username).getPlainText(),",
          "133:                 Secret.decrypt(personalAccessToken).getPlainText(),",
          "134:                 Secret.decrypt(tenantId).getPlainText());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "147:                 overrideGlobalConfig,",
          "148:                 pollingInterval,",
          "149:                 policyFailureBuildResultPreference,",
          "156:         commonBuildStep.perform(build, workspace, launcher, listener);",
          "157:     }",
          "",
          "[Removed Lines]",
          "150:                 clientId,",
          "151:                 clientSecret,",
          "152:                 username,",
          "153:                 personalAccessToken,",
          "154:                 tenantId);",
          "",
          "[Added Lines]",
          "152:                 Secret.decrypt(clientId).getPlainText(),",
          "153:                 Secret.decrypt(clientSecret).getPlainText(),",
          "154:                 Secret.decrypt(username).getPlainText(),",
          "155:                 Secret.decrypt(personalAccessToken).getPlainText(),",
          "156:                 Secret.decrypt(tenantId).getPlainText());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "177:         @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "178:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "184:         }",
          "",
          "[Removed Lines]",
          "179:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedPollingBuildStep.USERNAME) final String username,",
          "180:                                                                   @QueryParameter(SharedPollingBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "181:                                                                   @QueryParameter(SharedPollingBuildStep.TENANT_ID) final String tenantId) {",
          "182:             return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "",
          "[Added Lines]",
          "181:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedPollingBuildStep.USERNAME) final Secret username,",
          "182:                                                                   @QueryParameter(SharedPollingBuildStep.PERSONAL_ACCESS_TOKEN) final Secret personalAccessToken,",
          "183:                                                                   @QueryParameter(SharedPollingBuildStep.TENANT_ID) final Secret tenantId) {",
          "184:             return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(Secret.toString(username), Secret.toString(personalAccessToken), Secret.toString(tenantId));",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java -> src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import hudson.model.TaskListener;",
          "12: import hudson.util.FormValidation;",
          "13: import hudson.util.ListBoxModel;",
          "14: import org.jenkinsci.plugins.fodupload.SharedUploadBuildStep;",
          "15: import org.jenkinsci.plugins.workflow.steps.StepContext;",
          "16: import org.jenkinsci.plugins.workflow.steps.StepDescriptor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: import hudson.util.Secret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     }",
          "64:     public String getUsername() {",
          "66:     }",
          "68:     @DataBoundSetter",
          "",
          "[Removed Lines]",
          "65:         return username;",
          "",
          "[Added Lines]",
          "67:         return Secret.fromString(username).getEncryptedValue().toString();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     }",
          "73:     public String getPersonalAccessToken() {",
          "75:     }",
          "77:     @DataBoundSetter",
          "",
          "[Removed Lines]",
          "74:         return personalAccessToken;",
          "",
          "[Added Lines]",
          "76:         return Secret.fromString(personalAccessToken).getEncryptedValue().toString();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:     }",
          "82:     public String getTenantId() {",
          "84:     }",
          "86:     @DataBoundSetter",
          "",
          "[Removed Lines]",
          "83:         return tenantId;",
          "",
          "[Added Lines]",
          "85:         return Secret.fromString(tenantId).getEncryptedValue().toString();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:         log.println(\"Fortify on Demand Upload PreBuild Running...\");",
          "140:         commonBuildStep = new SharedUploadBuildStep(bsiToken,",
          "141:                 overrideGlobalConfig,",
          "145:                 purchaseEntitlements,",
          "146:                 entitlementPreference,",
          "147:                 srcLocation,",
          "",
          "[Removed Lines]",
          "142:                 username,",
          "143:                 personalAccessToken,",
          "144:                 tenantId,",
          "",
          "[Added Lines]",
          "144:                 Secret.decrypt(username).getPlainText(),",
          "145:                 Secret.decrypt(personalAccessToken).getPlainText(),",
          "146:                 Secret.decrypt(tenantId).getPlainText(),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "162:         log.println(\"Fortify on Demand Upload Running...\");",
          "163:         commonBuildStep = new SharedUploadBuildStep(bsiToken,",
          "164:                 overrideGlobalConfig,",
          "168:                 purchaseEntitlements,",
          "169:                 entitlementPreference,",
          "170:                 srcLocation,",
          "",
          "[Removed Lines]",
          "165:                 username,",
          "166:                 personalAccessToken,",
          "167:                 tenantId,",
          "",
          "[Added Lines]",
          "167:                 Secret.decrypt(username).getPlainText(),",
          "168:                 Secret.decrypt(personalAccessToken).getPlainText(),",
          "169:                 Secret.decrypt(tenantId).getPlainText(),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "195:         @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "196:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "202:         }",
          "",
          "[Removed Lines]",
          "197:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedUploadBuildStep.USERNAME) final String username,",
          "198:                                                                   @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "199:                                                                   @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId) {",
          "200:             return SharedUploadBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "",
          "[Added Lines]",
          "199:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedUploadBuildStep.USERNAME) final Secret username,",
          "200:                                                                   @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final Secret personalAccessToken,",
          "201:                                                                   @QueryParameter(SharedUploadBuildStep.TENANT_ID) final Secret tenantId) {",
          "202:             return SharedUploadBuildStep.doTestPersonalAccessTokenConnection(Secret.toString(username), Secret.toString(personalAccessToken), Secret.toString(tenantId));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf1269e3ae7db93e65abe1ed2be5e3cf43f10b2d",
      "candidate_info": {
        "commit_hash": "bf1269e3ae7db93e65abe1ed2be5e3cf43f10b2d",
        "repo": "jenkinsci/fortify-on-demand-uploader-plugin",
        "commit_url": "https://github.com/jenkinsci/fortify-on-demand-uploader-plugin/commit/bf1269e3ae7db93e65abe1ed2be5e3cf43f10b2d",
        "files": [
          "src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/Utils.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java"
        ],
        "message": "[D-313014] Added encryption f credentials",
        "before_after_code_files": [
          "src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java||src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java||src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java||src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/Utils.java||src/main/java/org/jenkinsci/plugins/fodupload/Utils.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java||src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
          "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java||src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java"
          ],
          "candidate": [
            "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java||src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
            "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java||src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java -> src/main/java/org/jenkinsci/plugins/fodupload/ApiConnectionFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:                     throw new IllegalArgumentException(\"Base URL is null.\");",
          "48:                 if (Utils.isNullOrEmpty(apiUrl))",
          "49:                     throw new IllegalArgumentException(\"Api URL is null.\");",
          "52:                         baseUrl,",
          "53:                         apiUrl,",
          "54:                         FodEnums.GrantType.PASSWORD,",
          "",
          "[Removed Lines]",
          "50:                 apiConnection = new FodApiConnection(model.getTenantId() + \"\\\\\" + model.getUsername(),",
          "51:                         model.getPersonalAccessToken(),",
          "",
          "[Added Lines]",
          "50:                 apiConnection = new FodApiConnection(Utils.decrypt(model.getTenantId()) + \"\\\\\" + Utils.decrypt(model.getUsername()),",
          "51:                         Utils.decrypt(model.getPersonalAccessToken()),",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java||src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java -> src/main/java/org/jenkinsci/plugins/fodupload/FodApiConnection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import com.google.gson.JsonObject;",
          "4: import com.google.gson.JsonParser;",
          "5: import hudson.ProxyConfiguration;",
          "7: import jenkins.model.Jenkins;",
          "8: import okhttp3.*;",
          "9: import org.apache.commons.io.IOUtils;",
          "",
          "[Removed Lines]",
          "6: import hudson.util.Secret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     private String scope;",
          "33:     private String id;",
          "36:     private ProxyConfiguration proxy = null;",
          "",
          "[Removed Lines]",
          "34:     private Secret secret;",
          "",
          "[Added Lines]",
          "33:     private String secret;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:         this.id = id;",
          "47:         this.secret = secret;",
          "48:         this.baseUrl = baseUrl;",
          "",
          "[Removed Lines]",
          "45:     FodApiConnection(final String id, final Secret secret, final String baseUrl, final String apiUrl, final GrantType grantType, final String scope) {",
          "",
          "[Added Lines]",
          "44:     FodApiConnection(final String id, final String secret, final String baseUrl, final String apiUrl, final GrantType grantType, final String scope) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:                     .add(\"scope\", scope)",
          "71:                     .add(\"grant_type\", \"client_credentials\")",
          "72:                     .add(\"client_id\", id)",
          "74:                     .build();",
          "75:         } else if (grantType == GrantType.PASSWORD) {",
          "76:             formBody = new FormBody.Builder()",
          "77:                     .add(\"scope\", scope)",
          "78:                     .add(\"grant_type\", \"password\")",
          "79:                     .add(\"username\", id)",
          "81:                     .build();",
          "82:         } else {",
          "83:             throw new IOException(\"Invalid Grant Type\");",
          "",
          "[Removed Lines]",
          "73:                     .add(\"client_secret\", Secret.toString(secret))",
          "80:                     .add(\"password\", Secret.toString(secret))",
          "",
          "[Added Lines]",
          "72:                     .add(\"client_secret\", secret)",
          "79:                     .add(\"password\", secret)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "159:         return id;",
          "160:     }",
          "163:         return secret;",
          "164:     }",
          "",
          "[Removed Lines]",
          "162:     public Secret getSecret() {",
          "",
          "[Added Lines]",
          "161:     public String getSecret() {",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java||src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java -> src/main/java/org/jenkinsci/plugins/fodupload/FodGlobalDescriptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     private String globalAuthType;",
          "29:     private String clientId;",
          "31:     private String username;",
          "33:     private String tenantId;",
          "34:     private String baseUrl;",
          "35:     private String apiUrl;",
          "",
          "[Removed Lines]",
          "30:     private Secret clientSecret;",
          "32:     private Secret personalAccessToken;",
          "",
          "[Added Lines]",
          "30:     private String clientSecret;",
          "32:     private String personalAccessToken;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:         if (globalAuthTypeObject.size() > 0) {",
          "46:             globalAuthType = globalAuthTypeObject.getString(\"value\");",
          "47:             if (globalAuthType.equals(\"apiKeyType\")) {",
          "50:             } else if (globalAuthType.equals(\"personalAccessTokenType\")) {",
          "54:             }",
          "55:         }",
          "56:         baseUrl = formData.getString(BASE_URL);",
          "",
          "[Removed Lines]",
          "48:                 clientId = globalAuthTypeObject.getString(CLIENT_ID);",
          "49:                 clientSecret = Secret.fromString(globalAuthTypeObject.getString(CLIENT_SECRET));",
          "51:                 username = globalAuthTypeObject.getString(USERNAME);",
          "52:                 personalAccessToken = Secret.fromString(globalAuthTypeObject.getString(PERSONAL_ACCESS_TOKEN));",
          "53:                 tenantId = globalAuthTypeObject.getString(TENANT_ID);",
          "",
          "[Added Lines]",
          "48:                 clientId = Utils.encrypt(globalAuthTypeObject.getString(CLIENT_ID));",
          "49:                 clientSecret = Utils.encrypt(globalAuthTypeObject.getString(CLIENT_SECRET));",
          "51:                 username = Utils.encrypt(globalAuthTypeObject.getString(USERNAME));",
          "52:                 personalAccessToken = Utils.encrypt(globalAuthTypeObject.getString(PERSONAL_ACCESS_TOKEN));",
          "53:                 tenantId = Utils.encrypt(globalAuthTypeObject.getString(TENANT_ID));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:     @SuppressWarnings(\"unused\")",
          "77:     public String getClientId() {",
          "79:     }",
          "81:     @SuppressWarnings(\"unused\")",
          "84:     }",
          "86:     @SuppressWarnings(\"unused\")",
          "87:     public String getUsername() {",
          "88:         return username;",
          "89:     }",
          "91:     @SuppressWarnings(\"unused\")",
          "94:     }",
          "96:     @SuppressWarnings(\"unused\")",
          "97:     public String getTenantId() {",
          "98:         return tenantId;",
          "99:     }",
          "",
          "[Removed Lines]",
          "78:         return clientId;",
          "82:     public Secret getClientSecret() {",
          "83:         return clientSecret;",
          "92:     public Secret getPersonalAccessToken() {",
          "93:         return personalAccessToken;",
          "",
          "[Added Lines]",
          "78:         return Utils.decrypt(clientId);",
          "81:     public String getOriginalClientId() {",
          "82:         return clientId;",
          "83:     }",
          "86:     public String getClientSecret() {",
          "87:         return Utils.decrypt(clientSecret);",
          "90:     public String getOriginalClientSecret() {",
          "91:         return clientSecret;",
          "92:     }",
          "96:         return Utils.decrypt(username);",
          "97:     }",
          "99:     @SuppressWarnings(\"unused\")",
          "100:     public String getOriginalUsername() {",
          "105:     public String getPersonalAccessToken() {",
          "106:         return Utils.decrypt(personalAccessToken);",
          "109:     @SuppressWarnings(\"unused\")",
          "110:     public String getOriginalPersonalAccessToken() {",
          "111:         return personalAccessToken;",
          "112:     }",
          "116:         return Utils.decrypt(tenantId);",
          "117:     }",
          "119:     @SuppressWarnings(\"unused\")",
          "120:     public String getOriginalTenantId() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:     @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "120:     @POST",
          "121:     public FormValidation doTestApiKeyConnection(@QueryParameter(CLIENT_ID) final String clientId,",
          "123:                                                  @QueryParameter(BASE_URL) final String baseUrl,",
          "124:                                                  @QueryParameter(API_URL) final String apiUrl) {",
          "125:         Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "",
          "[Removed Lines]",
          "122:                                                  @QueryParameter(CLIENT_SECRET) final Secret clientSecret,",
          "",
          "[Added Lines]",
          "145:                                                  @QueryParameter(CLIENT_SECRET) final String clientSecret,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:             return FormValidation.error(\"Fortify on Demand API URL is empty!\");",
          "131:         if (Utils.isNullOrEmpty(clientId))",
          "132:             return FormValidation.error(\"API Key is empty!\");",
          "134:             return FormValidation.error(\"Secret Key is empty!\");",
          "135:         testApi = new FodApiConnection(clientId, clientSecret, baseUrl, apiUrl, GrantType.CLIENT_CREDENTIALS, \"api-tenant\");",
          "136:         return testConnection(testApi);",
          "",
          "[Removed Lines]",
          "133:         if (Utils.isNullOrEmpty(Secret.toString(clientSecret)))",
          "",
          "[Added Lines]",
          "156:         if (Utils.isNullOrEmpty(clientSecret))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:     @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "141:     @POST",
          "142:     public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(USERNAME) final String username,",
          "144:                                                               @QueryParameter(TENANT_ID) final String tenantId,",
          "145:                                                               @QueryParameter(BASE_URL) final String baseUrl,",
          "146:                                                               @QueryParameter(API_URL) final String apiUrl) {",
          "",
          "[Removed Lines]",
          "143:                                                               @QueryParameter(PERSONAL_ACCESS_TOKEN) final Secret personalAccessToken,",
          "",
          "[Added Lines]",
          "166:                                                               @QueryParameter(PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "152:             return FormValidation.error(\"Fortify on Demand API URL is empty!\");",
          "153:         if (Utils.isNullOrEmpty(username))",
          "154:             return FormValidation.error(\"Username is empty!\");",
          "156:             return FormValidation.error(\"Personal Access Token is empty!\");",
          "157:         if (Utils.isNullOrEmpty(tenantId))",
          "158:             return FormValidation.error(\"Tenant ID is null.\");",
          "",
          "[Removed Lines]",
          "155:         if (Utils.isNullOrEmpty(Secret.toString(personalAccessToken)))",
          "",
          "[Added Lines]",
          "178:         if (Utils.isNullOrEmpty(personalAccessToken))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "173:             if (globalAuthType.equals(\"apiKeyType\")) {",
          "174:                 if (Utils.isNullOrEmpty(clientId))",
          "175:                     throw new IllegalArgumentException(\"Client ID is null.\");",
          "177:                     throw new IllegalArgumentException(\"Client Secret is null.\");",
          "179:             } else if (globalAuthType.equals(\"personalAccessTokenType\")) {",
          "180:                 if (Utils.isNullOrEmpty(username))",
          "181:                     throw new IllegalArgumentException(\"Username is null.\");",
          "183:                     throw new IllegalArgumentException(\"Personal Access Token is null.\");",
          "184:                 if (Utils.isNullOrEmpty(tenantId))",
          "185:                     throw new IllegalArgumentException(\"Tenant ID is null.\");",
          "187:             } else {",
          "188:                 throw new IllegalArgumentException(\"Invalid authentication type\");",
          "189:             }",
          "",
          "[Removed Lines]",
          "176:                 if (Utils.isNullOrEmpty(Secret.toString(clientSecret)))",
          "178:                 return new FodApiConnection(clientId, clientSecret, baseUrl, apiUrl, GrantType.CLIENT_CREDENTIALS, \"api-tenant\");",
          "182:                 if (Utils.isNullOrEmpty(Secret.toString(personalAccessToken)))",
          "186:                 return new FodApiConnection(tenantId + \"\\\\\" + username, personalAccessToken, baseUrl, apiUrl, GrantType.PASSWORD, \"api-tenant\");",
          "",
          "[Added Lines]",
          "199:                 if (Utils.isNullOrEmpty(clientSecret))",
          "201:                 return new FodApiConnection(Utils.decrypt(clientId), Utils.decrypt(clientSecret), baseUrl, apiUrl, GrantType.CLIENT_CREDENTIALS, \"api-tenant\");",
          "205:                 if (Utils.isNullOrEmpty(personalAccessToken))",
          "209:                 return new FodApiConnection(Utils.decrypt(tenantId) + \"\\\\\" + Utils.decrypt(username), Utils.decrypt(personalAccessToken), baseUrl, apiUrl, GrantType.PASSWORD, \"api-tenant\");",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/PollingBuildStep.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import hudson.tasks.Recorder;",
          "17: import hudson.util.FormValidation;",
          "18: import hudson.util.ListBoxModel;",
          "20: import jenkins.model.GlobalConfiguration;",
          "21: import jenkins.tasks.SimpleBuildStep;",
          "22: import org.jenkinsci.plugins.fodupload.polling.PollReleaseStatusResult;",
          "",
          "[Removed Lines]",
          "19: import hudson.util.Secret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:                             int pollingInterval,",
          "48:                             int policyFailureBuildResultPreference,",
          "49:                             String clientId,",
          "51:                             String username,",
          "53:                             String tenantId) {",
          "55:         sharedBuildStep = new SharedPollingBuildStep(bsiToken,",
          "",
          "[Removed Lines]",
          "50:                             Secret clientSecret,",
          "52:                             Secret personalAccessToken,",
          "",
          "[Added Lines]",
          "49:                             String clientSecret,",
          "51:                             String personalAccessToken,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:     }",
          "96:     @SuppressWarnings(\"unused\")",
          "98:         return sharedBuildStep.getAuthModel().getPersonalAccessToken();",
          "99:     }",
          "",
          "[Removed Lines]",
          "97:     public Secret getPersonalAccessToken() {",
          "",
          "[Added Lines]",
          "96:     public String getPersonalAccessToken() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "151:         @POST",
          "152:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(USERNAME) final String username,",
          "154:                                                                   @QueryParameter(TENANT_ID) final String tenantId) {",
          "155:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "156:             return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "",
          "[Removed Lines]",
          "153:                                                                   @QueryParameter(PERSONAL_ACCESS_TOKEN) final Secret personalAccessToken,",
          "",
          "[Added Lines]",
          "152:                                                                   @QueryParameter(PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/SharedPollingBuildStep.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import hudson.model.TaskListener;",
          "11: import hudson.util.FormValidation;",
          "12: import hudson.util.ListBoxModel;",
          "14: import jenkins.model.GlobalConfiguration;",
          "15: import org.jenkinsci.plugins.fodupload.models.AuthenticationModel;",
          "16: import org.jenkinsci.plugins.fodupload.models.FodEnums;",
          "",
          "[Removed Lines]",
          "13: import hudson.util.Secret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:                                   int pollingInterval,",
          "43:                                   int policyFailureBuildResultPreference,",
          "44:                                   String clientId,",
          "46:                                   String username,",
          "48:                                   String tenantId) {",
          "50:         this.bsiToken = bsiToken;",
          "51:         this.pollingInterval = pollingInterval;",
          "52:         this.policyFailureBuildResultPreference = policyFailureBuildResultPreference;",
          "53:         authModel = new AuthenticationModel(overrideGlobalConfig,",
          "54:                 username,",
          "55:                 personalAccessToken,",
          "",
          "[Removed Lines]",
          "45:                                   Secret clientSecret,",
          "47:                                   Secret personalAccessToken,",
          "",
          "[Added Lines]",
          "44:                                   String clientSecret,",
          "46:                                   String personalAccessToken,",
          "52:         username = Utils.encrypt(username);",
          "53:         personalAccessToken = Utils.encrypt(personalAccessToken);",
          "54:         tenantId = Utils.encrypt(tenantId);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "90:     public static FormValidation doTestPersonalAccessTokenConnection(final String username,",
          "92:                                                                      final String tenantId) {",
          "93:         FodApiConnection testApi;",
          "94:         String baseUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getBaseUrl();",
          "",
          "[Removed Lines]",
          "91:                                                                      final Secret personalAccessToken,",
          "",
          "[Added Lines]",
          "93:                                                                      final String personalAccessToken,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:             return FormValidation.error(\"Fortify on Demand API URL is empty!\");",
          "100:         if (Utils.isNullOrEmpty(username))",
          "101:             return FormValidation.error(\"Username is empty!\");",
          "103:             return FormValidation.error(\"Personal Access Token is empty!\");",
          "104:         if (Utils.isNullOrEmpty(tenantId))",
          "105:             return FormValidation.error(\"Tenant ID is null.\");",
          "",
          "[Removed Lines]",
          "102:         if (Utils.isNullOrEmpty(Secret.toString(personalAccessToken)))",
          "",
          "[Added Lines]",
          "104:         if (Utils.isNullOrEmpty(personalAccessToken))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117:         return items;",
          "118:     }",
          "120:     public void perform(Run<?, ?> run,",
          "121:                         FilePath filePath,",
          "122:                         Launcher launcher,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "125:         final PrintStream logger = taskListener.getLogger();",
          "127:         Result currentResult = run.getResult();",
          "128:         if (Result.FAILURE.equals(currentResult)",
          "129:                 || Result.ABORTED.equals(currentResult)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:         if(authModel != null)",
          "133:         {",
          "134:             if(authModel.getOverrideGlobalConfig() == true){",
          "135:                 if(!Utils.isEncrypted(authModel.getPersonalAccessToken()) ||",
          "136:                    !Utils.isEncrypted(authModel.getUsername()) ||",
          "137:                    !Utils.isEncrypted(authModel.getTenantId()))",
          "138:                 {",
          "139:                     run.setResult(Result.FAILURE);",
          "140:                     logger.println(\"Credentials saved in plaintext. Please resave to encrypt before starting scan.\");",
          "141:                     return ;",
          "142:                 }",
          "143:             }",
          "144:             else",
          "145:             {",
          "146:                 if(GlobalConfiguration.all().get(FodGlobalDescriptor.class).getAuthTypeIsApiKey())",
          "147:                 {",
          "148:                     if(!Utils.isEncrypted(GlobalConfiguration.all().get(FodGlobalDescriptor.class).getOriginalClientId()) ||",
          "149:                        !Utils.isEncrypted(GlobalConfiguration.all().get(FodGlobalDescriptor.class).getOriginalClientSecret()))",
          "150:                     {",
          "151:                         run.setResult(Result.FAILURE);",
          "152:                         logger.println(\"Credentials saved in plaintext. Please resave to encrypt before starting scan.\");",
          "153:                         return ;",
          "154:                     }",
          "155:                 }",
          "156:                 else",
          "157:                 {",
          "158:                      if(!Utils.isEncrypted(GlobalConfiguration.all().get(FodGlobalDescriptor.class).getOriginalTenantId()) ||",
          "159:                         !Utils.isEncrypted(GlobalConfiguration.all().get(FodGlobalDescriptor.class).getOriginalUsername()) ||",
          "160:                         !Utils.isEncrypted(GlobalConfiguration.all().get(FodGlobalDescriptor.class).getOriginalPersonalAccessToken()) )",
          "161:                     {",
          "162:                         run.setResult(Result.FAILURE);",
          "163:                         logger.println(\"Credentials saved in plaintext. Please resave to encrypt before starting scan.\");",
          "164:                         return ;",
          "165:                     }",
          "166:                 }",
          "167:             }",
          "168:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "201:     }",
          "203:     public AuthenticationModel getAuthModel() {",
          "205:     }",
          "207:     public enum PolicyFailureBuildResultPreference {",
          "",
          "[Removed Lines]",
          "204:         return authModel;",
          "",
          "[Added Lines]",
          "247:         AuthenticationModel displayModel = new AuthenticationModel(authModel.getOverrideGlobalConfig(),",
          "248:                                                                    Utils.decrypt(authModel.getUsername()),",
          "249:                                                                    Utils.decrypt(authModel.getPersonalAccessToken()),",
          "250:                                                                    Utils.decrypt(authModel.getTenantId()) );",
          "252:         return displayModel;",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/SharedUploadBuildStep.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     public static final ThreadLocal<TaskListener> taskListener = new ThreadLocal<>();",
          "25:     public static final String CLIENT_ID = \"clientId\";",
          "27:     public static final String USERNAME = \"username\";",
          "28:     public static final String PERSONAL_ACCESS_TOKEN = \"personalAccessToken\";",
          "29:     public static final String TENANT_ID = \"tenantId\";",
          "",
          "[Removed Lines]",
          "26:     public static final Secret CLIENT_SECRET = Secret.fromString(\"clientSecret\");",
          "",
          "[Added Lines]",
          "26:     public static final String CLIENT_SECRET = \"clientSecret\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     public SharedUploadBuildStep(String bsiToken,",
          "35:                                  boolean overrideGlobalConfig,",
          "36:                                  String username,",
          "38:                                  String tenantId,",
          "39:                                  boolean purchaseEntitlements,",
          "40:                                  String entitlementPreference,",
          "",
          "[Removed Lines]",
          "37:                                  Secret personalAccessToken,",
          "",
          "[Added Lines]",
          "37:                                  String personalAccessToken,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:                 remediationScanPreferenceType,",
          "50:                 inProgressScanActionType);",
          "52:         authModel = new AuthenticationModel(overrideGlobalConfig,",
          "53:                 username,",
          "54:                 personalAccessToken,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:         username = Utils.encrypt(username);",
          "53:         personalAccessToken = Utils.encrypt(personalAccessToken);",
          "54:         tenantId = Utils.encrypt(tenantId);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "75:     public static FormValidation doTestPersonalAccessTokenConnection(final String username,",
          "77:                                                                      final String tenantId) {",
          "78:         FodApiConnection testApi;",
          "79:         String baseUrl = GlobalConfiguration.all().get(FodGlobalDescriptor.class).getBaseUrl();",
          "",
          "[Removed Lines]",
          "76:                                                                      final Secret personalAccessToken,",
          "",
          "[Added Lines]",
          "80:                                                                      final String personalAccessToken,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:             return FormValidation.error(\"Fortify on Demand API URL is empty!\");",
          "85:         if (Utils.isNullOrEmpty(username))",
          "86:             return FormValidation.error(\"Username is empty!\");",
          "88:             return FormValidation.error(\"Personal Access Token is empty!\");",
          "89:         if (Utils.isNullOrEmpty(tenantId))",
          "90:             return FormValidation.error(\"Tenant ID is null.\");",
          "",
          "[Removed Lines]",
          "87:         if (Utils.isNullOrEmpty(Secret.toString(personalAccessToken)))",
          "",
          "[Added Lines]",
          "91:         if (Utils.isNullOrEmpty(personalAccessToken))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "130:             build.setResult(Result.FAILURE);",
          "131:             return false;",
          "132:         }",
          "133:         return true;",
          "134:     }",
          "136:     public void perform(Run<?, ?> build, FilePath workspace,",
          "137:                         Launcher launcher, TaskListener listener) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "141:         try {",
          "142:             taskListener.set(listener);",
          "144:             Result currentResult = build.getResult();",
          "145:             if (Result.FAILURE.equals(currentResult)",
          "146:                     || Result.ABORTED.equals(currentResult)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:             if(authModel != null)",
          "152:             {",
          "153:                 if(authModel.getOverrideGlobalConfig() == true){",
          "154:                     if(!Utils.isEncrypted(authModel.getPersonalAccessToken()) ||",
          "155:                        !Utils.isEncrypted(authModel.getUsername()) ||",
          "156:                        !Utils.isEncrypted(authModel.getTenantId()))",
          "157:                     {",
          "158:                         build.setResult(Result.FAILURE);",
          "159:                         logger.println(\"Credentials saved in plaintext. Please resave to encrypt before starting scan.\");",
          "160:                         return ;",
          "161:                     }",
          "162:                 }",
          "163:                 else",
          "164:                 {",
          "165:                     if(GlobalConfiguration.all().get(FodGlobalDescriptor.class).getAuthTypeIsApiKey())",
          "166:                     {",
          "167:                         if(!Utils.isEncrypted(GlobalConfiguration.all().get(FodGlobalDescriptor.class).getOriginalClientId()) ||",
          "168:                            !Utils.isEncrypted(GlobalConfiguration.all().get(FodGlobalDescriptor.class).getOriginalClientSecret()))",
          "169:                         {",
          "170:                             build.setResult(Result.FAILURE);",
          "171:                             logger.println(\"Credentials saved in plaintext. Please resave to encrypt before starting scan.\");",
          "172:                             return ;",
          "173:                         }",
          "174:                     }",
          "175:                     else",
          "176:                     {",
          "177:                          if(!Utils.isEncrypted(GlobalConfiguration.all().get(FodGlobalDescriptor.class).getOriginalTenantId()) ||",
          "178:                             !Utils.isEncrypted(GlobalConfiguration.all().get(FodGlobalDescriptor.class).getOriginalUsername()) ||",
          "179:                             !Utils.isEncrypted(GlobalConfiguration.all().get(FodGlobalDescriptor.class).getOriginalPersonalAccessToken()) )",
          "180:                         {",
          "181:                             build.setResult(Result.FAILURE);",
          "182:                             logger.println(\"Credentials saved in plaintext. Please resave to encrypt before starting scan.\");",
          "183:                             return ;",
          "184:                         }",
          "185:                     }",
          "186:                 }",
          "187:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "215:     }",
          "217:     public AuthenticationModel getAuthModel() {",
          "219:     }",
          "221:     public JobModel getModel() {",
          "",
          "[Removed Lines]",
          "218:         return authModel;",
          "",
          "[Added Lines]",
          "261:         AuthenticationModel displayModel = new AuthenticationModel(authModel.getOverrideGlobalConfig(),",
          "262:                                                                    Utils.decrypt(authModel.getUsername()),",
          "263:                                                                    Utils.decrypt(authModel.getPersonalAccessToken()),",
          "264:                                                                    Utils.decrypt(authModel.getTenantId()) );",
          "266:         return displayModel;",
          "267:     }",
          "269:     public AuthenticationModel setAuthModel(AuthenticationModel newAuthModel) {",
          "270:         return authModel = newAuthModel;",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java||src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java -> src/main/java/org/jenkinsci/plugins/fodupload/StaticAssessmentBuildStep.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import hudson.tasks.Recorder;",
          "16: import hudson.util.FormValidation;",
          "17: import hudson.util.ListBoxModel;",
          "19: import jenkins.tasks.SimpleBuildStep;",
          "20: import org.jenkinsci.plugins.fodupload.models.JobModel;",
          "21: import org.kohsuke.stapler.DataBoundConstructor;",
          "",
          "[Removed Lines]",
          "18: import hudson.util.Secret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     public StaticAssessmentBuildStep(String bsiToken,",
          "46:                                      boolean overrideGlobalConfig,",
          "47:                                      String username,",
          "49:                                      String tenantId,",
          "50:                                      boolean purchaseEntitlements,",
          "51:                                      String entitlementPreference,",
          "",
          "[Removed Lines]",
          "48:                                      Secret personalAccessToken,",
          "",
          "[Added Lines]",
          "47:                                      String personalAccessToken,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:     }",
          "110:     @SuppressWarnings(\"unused\")",
          "112:         return sharedBuildStep.getAuthModel().getPersonalAccessToken();",
          "113:     }",
          "",
          "[Removed Lines]",
          "111:     public Secret getPersonalAccessToken() {",
          "",
          "[Added Lines]",
          "110:     public String getPersonalAccessToken() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "182:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "183:         @POST",
          "184:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedUploadBuildStep.USERNAME) final String username,",
          "186:                                                                   @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId) {",
          "187:             Jenkins.get().checkPermission(Jenkins.ADMINISTER);",
          "188:             return SharedUploadBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "",
          "[Removed Lines]",
          "185:                                                                   @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final Secret personalAccessToken,",
          "",
          "[Added Lines]",
          "184:                                                                   @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/Utils.java||src/main/java/org/jenkinsci/plugins/fodupload/Utils.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/Utils.java -> src/main/java/org/jenkinsci/plugins/fodupload/Utils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.jenkinsci.plugins.fodupload;",
          "3: import hudson.FilePath;",
          "5: import java.io.File;",
          "6: import java.io.FileOutputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import hudson.util.Secret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:         logger.println(\"End Create Zip.\");",
          "114:         return tempZip;",
          "115:     }",
          "116: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:     public static String decrypt(String stringToDecrypt){",
          "119:         Secret decryptedSecret = Secret.decrypt(stringToDecrypt);",
          "120:         return  decryptedSecret != null ?  decryptedSecret.getPlainText() : stringToDecrypt;",
          "121:     }",
          "123:     public static String encrypt(String stringToEncrypt){",
          "124:         String result = stringToEncrypt;",
          "125:         if(Secret.decrypt(stringToEncrypt) == null){",
          "126:             result = Secret.fromString(stringToEncrypt).getEncryptedValue();",
          "127:         }",
          "128:         return result;",
          "129:     }",
          "131:     public static boolean isEncrypted(String stringToEncrypt){",
          "132:         return (Secret.decrypt(stringToEncrypt) != null);",
          "133:     }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java||src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java -> src/main/java/org/jenkinsci/plugins/fodupload/models/AuthenticationModel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.jenkinsci.plugins.fodupload.models;",
          "5: public class AuthenticationModel {",
          "6:     private boolean overrideGlobalConfig;",
          "7:     private String username;",
          "9:     private String tenantId;",
          "11:     public AuthenticationModel(boolean overrideGlobalConfig,",
          "12:                                String username,",
          "14:                                String tenantId) {",
          "15:         this.overrideGlobalConfig = overrideGlobalConfig;",
          "16:         this.username = username;",
          "",
          "[Removed Lines]",
          "3: import hudson.util.Secret;",
          "8:     private Secret personalAccessToken;",
          "13:                                Secret personalAccessToken,",
          "",
          "[Added Lines]",
          "6:     private String personalAccessToken;",
          "11:                                String personalAccessToken,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:         return username;",
          "27:     }",
          "30:         return personalAccessToken;",
          "31:     }",
          "33:     public String getTenantId() {",
          "34:         return tenantId;",
          "35:     }",
          "36: }",
          "",
          "[Removed Lines]",
          "29:     public Secret getPersonalAccessToken() {",
          "",
          "[Added Lines]",
          "27:     public String getPersonalAccessToken() {",
          "35:      public void setUsername(String newUsername) {",
          "36:        username = newUsername;",
          "37:     }",
          "39:     public void setPersonalAccessToken(String newPersonalAccessToken) {",
          "40:         personalAccessToken = newPersonalAccessToken;",
          "41:     }",
          "43:     public void setTenantId(String newTenantId) {",
          "44:        tenantId = newTenantId;",
          "45:     }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java -> src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyPollResults.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import hudson.model.TaskListener;",
          "12: import hudson.util.FormValidation;",
          "13: import hudson.util.ListBoxModel;",
          "16: import org.jenkinsci.plugins.fodupload.SharedPollingBuildStep;",
          "17: import org.jenkinsci.plugins.workflow.steps.StepContext;",
          "18: import org.jenkinsci.plugins.workflow.steps.StepDescriptor;",
          "",
          "[Removed Lines]",
          "14: import hudson.util.Secret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     private boolean overrideGlobalConfig;",
          "35:     private int policyFailureBuildResultPreference;",
          "36:     private String clientId;",
          "38:     private String username;",
          "40:     private String tenantId;",
          "42:     private SharedPollingBuildStep commonBuildStep;",
          "",
          "[Removed Lines]",
          "37:     private Secret clientSecret;",
          "39:     private Secret personalAccessToken;",
          "",
          "[Added Lines]",
          "35:     private String clientSecret;",
          "37:     private String personalAccessToken;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:         this.clientId = clientId;",
          "84:     }",
          "87:         return clientSecret;",
          "88:     }",
          "90:     @DataBoundSetter",
          "92:         this.clientSecret = clientSecret;",
          "93:     }",
          "",
          "[Removed Lines]",
          "86:     public Secret getClientSecret() {",
          "91:     public void setClientSecret(Secret clientSecret) {",
          "",
          "[Added Lines]",
          "84:     public String getClientSecret() {",
          "89:     public void setClientSecret(String clientSecret) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:         this.username = username;",
          "102:     }",
          "105:         return personalAccessToken;",
          "106:     }",
          "108:     @DataBoundSetter",
          "110:         this.personalAccessToken = personalAccessToken;",
          "111:     }",
          "",
          "[Removed Lines]",
          "104:     public Secret getPersonalAccessToken() {",
          "109:     public void setPersonalAccessToken(Secret personalAccessToken) {",
          "",
          "[Added Lines]",
          "102:     public String getPersonalAccessToken() {",
          "107:     public void setPersonalAccessToken(String personalAccessToken) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "179:         @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "180:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "181:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedPollingBuildStep.USERNAME) final String username,",
          "183:                                                                   @QueryParameter(SharedPollingBuildStep.TENANT_ID) final String tenantId) {",
          "184:             return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "",
          "[Removed Lines]",
          "182:                                                                   @QueryParameter(SharedPollingBuildStep.PERSONAL_ACCESS_TOKEN) final Secret personalAccessToken,",
          "",
          "[Added Lines]",
          "180:                                                                   @QueryParameter(SharedPollingBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java||src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java": [
          "File: src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java -> src/main/java/org/jenkinsci/plugins/fodupload/steps/FortifyStaticAssessment.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import hudson.model.TaskListener;",
          "12: import hudson.util.FormValidation;",
          "13: import hudson.util.ListBoxModel;",
          "16: import org.jenkinsci.plugins.fodupload.SharedUploadBuildStep;",
          "17: import org.jenkinsci.plugins.workflow.steps.StepContext;",
          "18: import org.jenkinsci.plugins.workflow.steps.StepDescriptor;",
          "",
          "[Removed Lines]",
          "14: import hudson.util.Secret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     private boolean overrideGlobalConfig;",
          "36:     private String username;",
          "38:     private String tenantId;",
          "39:     private boolean purchaseEntitlements;",
          "40:     private String entitlementPreference;",
          "",
          "[Removed Lines]",
          "37:     private Secret personalAccessToken;",
          "",
          "[Added Lines]",
          "35:     private String personalAccessToken;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:         this.username = username;",
          "73:     }",
          "76:         return personalAccessToken;",
          "77:     }",
          "79:     @DataBoundSetter",
          "81:         this.personalAccessToken = personalAccessToken;",
          "82:     }",
          "",
          "[Removed Lines]",
          "75:     public Secret getPersonalAccessToken() {",
          "80:     public void setPersonalAccessToken(Secret personalAccessToken) {",
          "",
          "[Added Lines]",
          "73:     public String getPersonalAccessToken() {",
          "78:     public void setPersonalAccessToken(String personalAccessToken) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:         @SuppressWarnings({\"ThrowableResultOfMethodCallIgnored\", \"unused\"})",
          "198:         @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")",
          "199:         public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedUploadBuildStep.USERNAME) final String username,",
          "201:                                                                   @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId) {",
          "202:             return SharedUploadBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);",
          "",
          "[Removed Lines]",
          "200:                                                                   @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final Secret personalAccessToken,",
          "",
          "[Added Lines]",
          "198:                                                                   @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken,",
          "",
          "---------------"
        ]
      }
    }
  ]
}