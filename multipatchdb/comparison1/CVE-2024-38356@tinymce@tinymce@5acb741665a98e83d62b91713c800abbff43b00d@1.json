{
  "cve_id": "CVE-2024-38356",
  "cve_desc": "TinyMCE is an open source rich text editor. A cross-site scripting (XSS) vulnerability was discovered in TinyMCE\u2019s content extraction code. When using the `noneditable_regexp` option, specially crafted HTML attributes containing malicious code were able to be executed when content was extracted from the editor. This vulnerability has been patched in TinyMCE 7.2.0, TinyMCE 6.8.4 and TinyMCE 5.11.0 LTS by ensuring that, when using the `noneditable_regexp` option, any content within an attribute is properly verified to match the configured regular expression before being added. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n",
  "repo": "tinymce/tinymce",
  "patch_hash": "5acb741665a98e83d62b91713c800abbff43b00d",
  "patch_info": {
    "commit_hash": "5acb741665a98e83d62b91713c800abbff43b00d",
    "repo": "tinymce/tinymce",
    "commit_url": "https://github.com/tinymce/tinymce/commit/5acb741665a98e83d62b91713c800abbff43b00d",
    "files": [
      "modules/tinymce/CHANGELOG.md",
      "modules/tinymce/package.json",
      "modules/tinymce/src/core/main/ts/api/html/DomParser.ts",
      "modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts",
      "modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts",
      "modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts",
      "modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts",
      "modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts"
    ],
    "message": "TINY-11019 & TINY-11022: Fixed issues with noscript encoding and noneditable_regexp option (#15)",
    "before_after_code_files": [
      "modules/tinymce/src/core/main/ts/api/html/DomParser.ts||modules/tinymce/src/core/main/ts/api/html/DomParser.ts",
      "modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts||modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts",
      "modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts||modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts",
      "modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts||modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts",
      "modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts||modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts",
      "modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts||modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts"
    ]
  },
  "patch_diff": {
    "modules/tinymce/src/core/main/ts/api/html/DomParser.ts||modules/tinymce/src/core/main/ts/api/html/DomParser.ts": [
      "File: modules/tinymce/src/core/main/ts/api/html/DomParser.ts -> modules/tinymce/src/core/main/ts/api/html/DomParser.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "92:   const parentName = parent.name;",
      "97:   const childNodes = nativeParent.childNodes;",
      "98:   for (let ni = 0, nl = childNodes.length; ni < nl; ni++) {",
      "",
      "[Removed Lines]",
      "95:   const isSpecial = parentName in specialElements && parentName !== 'title' && parentName !== 'textarea';",
      "",
      "[Added Lines]",
      "95:   const isSpecial = parentName in specialElements && parentName !== 'title' && parentName !== 'textarea' && parentName !== 'noscript';",
      "",
      "---------------"
    ],
    "modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts||modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts": [
      "File: modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts -> modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import DOMUtils from '../api/dom/DOMUtils';",
      "4: import DomParser from '../api/html/DomParser';",
      "6: import AstNode from '../api/html/Node';",
      "7: import * as Zwsp from '../text/Zwsp';",
      "8: import { DomSerializerSettings } from './DomSerializerImpl';",
      "",
      "[Removed Lines]",
      "5: import Entities from '../api/html/Entities';",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "83:     }",
      "84:   });",
      "98:   htmlParser.addNodeFilter('script,style', (nodes, name) => {",
      "99:     const trim = (value: string) => {",
      "",
      "[Removed Lines]",
      "86:   htmlParser.addNodeFilter('noscript', (nodes) => {",
      "87:     let i = nodes.length;",
      "88:     while (i--) {",
      "89:       const node = nodes[i].firstChild;",
      "91:       if (node) {",
      "92:         node.value = Entities.decode(node.value ?? '');",
      "93:       }",
      "94:     }",
      "95:   });",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts||modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts": [
      "File: modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts -> modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import Editor from '../api/Editor';",
      "2: import { SetContentEvent } from '../api/EventTypes';",
      "3: import AstNode from '../api/html/Node';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { Arr } from '@ephox/katamari';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:   e.content = content;",
      "53: };",
      "55: const setup = (editor: Editor): void => {",
      "56:   const contentEditableAttrName = 'contenteditable';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: const isValidContent = (nonEditableRegExps: RegExp[], content: string) => {",
      "58:   return Arr.forall(nonEditableRegExps, (re) => {",
      "59:     const matches = content.match(re);",
      "60:     return matches !== null && matches[0].length === content.length;",
      "61:   });",
      "62: };",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:         continue;",
      "92:       }",
      "99:       } else {",
      "100:         node.attr(contentEditableAttrName, null);",
      "101:       }",
      "",
      "[Removed Lines]",
      "94:       if (nonEditableRegExps.length > 0 && node.attr('data-mce-content')) {",
      "95:         node.name = '#text';",
      "96:         node.type = 3;",
      "97:         node.raw = true;",
      "98:         node.value = node.attr('data-mce-content');",
      "",
      "[Added Lines]",
      "103:       const content = node.attr('data-mce-content');",
      "104:       if (nonEditableRegExps.length > 0 && content) {",
      "105:         if (isValidContent(nonEditableRegExps, content)) {",
      "106:           node.name = '#text';",
      "107:           node.type = 3;",
      "108:           node.raw = true;",
      "109:           node.value = content;",
      "110:         } else {",
      "111:           node.remove();",
      "112:         }",
      "",
      "---------------"
    ],
    "modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts||modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts": [
      "File: modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts -> modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { beforeEach, context, describe, it } from '@ephox/bedrock-client';",
      "2: import { Arr, Type } from '@ephox/katamari';",
      "3: import { PlatformDetection } from '@ephox/sand';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { Waiter } from '@ephox/agar';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "675:       TinyAssertions.assertContent(editor, '<svg width=\"100\" height=\"100\"><circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\"><script>alert(1)</script></circle></svg>');",
      "676:     });",
      "677:   });",
      "678: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "680:   context('Special elements', () => {",
      "681:     const hook = TinyHooks.bddSetup<Editor>({",
      "682:       base_url: '/project/tinymce/js/tinymce'",
      "683:     }, []);",
      "685:     it('TINY-11019: Should not be possible to run scripts inside noscript elements', async () => {",
      "686:       const editor = hook.editor();",
      "687:       let state = false;",
      "688:       const editorWinGlobal = editor.getWin() as unknown as any;",
      "690:       editorWinGlobal.xss = () => {",
      "691:         state = true;",
      "692:       };",
      "694:       editor.setContent('<noscript>&lt;/noscript&gt;&lt;style onload=xss()&gt;&lt;/style&gt;</noscript>');",
      "696:       await Waiter.pWait(1);",
      "698:       delete editorWinGlobal.xss;",
      "700:       assert.isFalse(state, 'xss function should not have been called');",
      "701:       TinyAssertions.assertContent(editor, '<noscript>&lt;/noscript&gt;&lt;style onload=xss()&gt;&lt;/style&gt;</noscript>');",
      "702:     });",
      "704:     it('TINY-11019: Should not double decode noscript contents', () => {",
      "705:       const editor = hook.editor();",
      "707:       editor.setContent('<noscript>&amp;lt;/noscript&amp;&gt;</noscript>');",
      "708:       TinyAssertions.assertContent(editor, '<noscript>&amp;lt;/noscript&amp;&gt;</noscript>');",
      "709:     });",
      "710:   });",
      "",
      "---------------"
    ],
    "modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts||modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts": [
      "File: modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts -> modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1729:       assert.equal(serializedHtml, '<div><svg> <circle> </circle> </svg> <svg> <circle> </circle> </svg></div>');",
      "1730:     });",
      "1731:   });",
      "1732: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1733:   context('Special elements', () => {",
      "1734:     const schema = Schema({ extended_valid_elements: 'script,noembed,xmp', valid_children: '+body[style]' });",
      "1736:     const testSpecialElement = (testCase: { input: string; expected: string }) => {",
      "1737:       const fragment = DomParser({ forced_root_block: 'p', sanitize: false }, schema).parse(testCase.input);",
      "1738:       const serializedHtml = HtmlSerializer({}, schema).serialize(fragment);",
      "1740:       assert.equal(serializedHtml, testCase.expected);",
      "1741:     };",
      "1743:     it('TINY-11019: Should not entity encode text in script elements', () => testSpecialElement({",
      "1744:       input: '<script>if (a < b) alert(1)</script>',",
      "1745:       expected: '<script>if (a < b) alert(1)</script>'",
      "1746:     }));",
      "1748:     it('TINY-11019: Should not entity encode text in style elements', () => testSpecialElement({",
      "1749:       input: '<style>b > i {}</style>',",
      "1750:       expected: '<style>b > i {}</style>'",
      "1751:     }));",
      "1753:     it('TINY-11019: Should not entity decode text inside textarea elements', () => testSpecialElement({",
      "1754:       input: '<div><textarea>&lt;&gt;&amp;</textarea></div>',",
      "1755:       expected: '<div><textarea>&lt;&gt;&amp;</textarea></div>'",
      "1756:     }));",
      "1758:     it('TINY-11019: Should not entity encode text inside textarea elements', () => testSpecialElement({",
      "1759:       input: '<div><textarea><b>test</b></textarea></div>',",
      "1760:       expected: '<div><textarea>&lt;b&gt;test&lt;/b&gt;</textarea></div>'",
      "1761:     }));",
      "1763:     const excluded = [ 'script', 'style', 'title', 'plaintext', 'textarea' ];",
      "1764:     const specialElements = Arr.filter(Obj.keys(schema.getSpecialElements()), (name) => !Arr.contains(excluded, name));",
      "1765:     Arr.each(specialElements, (elementName) => {",
      "1766:       it(`TINY-11019: Should not entity decode text inside ${elementName} elements`, () => testSpecialElement({",
      "1767:         input: `<div><${elementName}>&lt;&gt;&amp;</${elementName}></div>`,",
      "1768:         expected: `<div><${elementName}>&lt;&gt;&amp;</${elementName}></div>`",
      "1769:       }));",
      "1771:       it(`TINY-11019: Should not entity encode elements inside ${elementName} elements`, () => testSpecialElement({",
      "1772:         input: `<div><${elementName}><em>test</em></${elementName}></div>`,",
      "1773:         expected: `<div><${elementName}><em>test</em></${elementName}></div>`",
      "1774:       }));",
      "1775:     });",
      "1776:   });",
      "",
      "---------------"
    ],
    "modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts||modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts": [
      "File: modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts -> modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import { TinyAssertions, TinyHooks } from '@ephox/wrap-mcagar';",
      "3: import { assert } from 'chai';",
      "",
      "[Removed Lines]",
      "1: import { describe, it } from '@ephox/bedrock-client';",
      "",
      "[Added Lines]",
      "1: import { context, describe, it } from '@ephox/bedrock-client';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39:     editor.setContent('<span contenteditable=\"false\">{test1}</span>');",
      "40:     assert.lengthOf(editor.dom.select('span'), 1);",
      "41:   });",
      "42: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43:   context('Noneditable content injection', () => {",
      "44:     const testNoneditableContentInjection = (testCase: { input: string; expected: string }) => {",
      "45:       const editor = hook.editor();",
      "46:       editor.setContent(testCase.input);",
      "47:       TinyAssertions.assertContent(editor, testCase.expected);",
      "48:     };",
      "50:     it('TINY-11022: noneditable elements should not be allowed to include content that does not match the pattern', () => testNoneditableContentInjection({",
      "51:       input: '<p>foo<span class=\"mceNonEditable\" data-mce-content=\"<b>baz</b>\" contenteditable=\"false\">something</span>bar</p>',",
      "52:       expected: '<p>foobar</p>'",
      "53:     }));",
      "55:     it('TINY-11022: noneditable elements should not be allowed to include content that just partially matches the pattern', () => testNoneditableContentInjection({",
      "56:       input: '<p>foo<span class=\"mceNonEditable\" data-mce-content=\"{test1}<b>baz</b>\" contenteditable=\"false\">something</span>bar</p>',",
      "57:       expected: '<p>foobar</p>'",
      "58:     }));",
      "59:   });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9d6c86fccb69786a7ffb3ae83e82e17993a60879",
      "candidate_info": {
        "commit_hash": "9d6c86fccb69786a7ffb3ae83e82e17993a60879",
        "repo": "tinymce/tinymce",
        "commit_url": "https://github.com/tinymce/tinymce/commit/9d6c86fccb69786a7ffb3ae83e82e17993a60879",
        "files": [
          "modules/tinymce/CHANGELOG.md",
          "modules/tinymce/package.json",
          "modules/tinymce/src/core/main/ts/api/html/DomParser.ts",
          "modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts",
          "modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts",
          "modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts",
          "modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts",
          "modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts"
        ],
        "message": "TINY-11019: Fixed issue with noscript encoding and noneditable_regexp option",
        "before_after_code_files": [
          "modules/tinymce/src/core/main/ts/api/html/DomParser.ts||modules/tinymce/src/core/main/ts/api/html/DomParser.ts",
          "modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts||modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts",
          "modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts||modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts",
          "modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts||modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts",
          "modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts||modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts",
          "modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts||modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "modules/tinymce/src/core/main/ts/api/html/DomParser.ts||modules/tinymce/src/core/main/ts/api/html/DomParser.ts",
            "modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts||modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts",
            "modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts||modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts",
            "modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts||modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts",
            "modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts||modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts",
            "modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts||modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts"
          ],
          "candidate": [
            "modules/tinymce/src/core/main/ts/api/html/DomParser.ts||modules/tinymce/src/core/main/ts/api/html/DomParser.ts",
            "modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts||modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts",
            "modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts||modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts",
            "modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts||modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts",
            "modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts||modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts",
            "modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts||modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts"
          ]
        }
      },
      "candidate_diff": {
        "modules/tinymce/src/core/main/ts/api/html/DomParser.ts||modules/tinymce/src/core/main/ts/api/html/DomParser.ts": [
          "File: modules/tinymce/src/core/main/ts/api/html/DomParser.ts -> modules/tinymce/src/core/main/ts/api/html/DomParser.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   const parentName = parent.name;",
          "97:   const childNodes = nativeParent.childNodes;",
          "98:   for (let ni = 0, nl = childNodes.length; ni < nl; ni++) {",
          "",
          "[Removed Lines]",
          "95:   const isSpecial = parentName in specialElements && parentName !== 'title' && parentName !== 'textarea';",
          "",
          "[Added Lines]",
          "95:   const isSpecial = parentName in specialElements && parentName !== 'title' && parentName !== 'textarea' && parentName !== 'noscript';",
          "",
          "---------------"
        ],
        "modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts||modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts": [
          "File: modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts -> modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import DOMUtils from '../api/dom/DOMUtils';",
          "4: import DomParser from '../api/html/DomParser';",
          "6: import AstNode from '../api/html/Node';",
          "7: import * as Zwsp from '../text/Zwsp';",
          "8: import { DomSerializerSettings } from './DomSerializerImpl';",
          "",
          "[Removed Lines]",
          "5: import Entities from '../api/html/Entities';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     }",
          "84:   });",
          "98:   htmlParser.addNodeFilter('script,style', (nodes, name) => {",
          "99:     const trim = (value: string) => {",
          "",
          "[Removed Lines]",
          "86:   htmlParser.addNodeFilter('noscript', (nodes) => {",
          "87:     let i = nodes.length;",
          "88:     while (i--) {",
          "89:       const node = nodes[i].firstChild;",
          "91:       if (node) {",
          "92:         node.value = Entities.decode(node.value ?? '');",
          "93:       }",
          "94:     }",
          "95:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts||modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts": [
          "File: modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts -> modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import Editor from '../api/Editor';",
          "2: import { SetContentEvent } from '../api/EventTypes';",
          "3: import AstNode from '../api/html/Node';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { Arr } from '@ephox/katamari';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   e.content = content;",
          "53: };",
          "55: const setup = (editor: Editor): void => {",
          "56:   const contentEditableAttrName = 'contenteditable';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: const isValidContent = (nonEditableRegExps: RegExp[], content: string) => {",
          "58:   return Arr.forall(nonEditableRegExps, (re) => {",
          "59:     const matches = content.match(re);",
          "60:     return matches !== null && matches[0].length === content.length;",
          "61:   });",
          "62: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:         continue;",
          "92:       }",
          "99:       } else {",
          "100:         node.attr(contentEditableAttrName, null);",
          "101:       }",
          "",
          "[Removed Lines]",
          "94:       if (nonEditableRegExps.length > 0 && node.attr('data-mce-content')) {",
          "95:         node.name = '#text';",
          "96:         node.type = 3;",
          "97:         node.raw = true;",
          "98:         node.value = node.attr('data-mce-content');",
          "",
          "[Added Lines]",
          "103:       const content = node.attr('data-mce-content');",
          "104:       if (nonEditableRegExps.length > 0 && content) {",
          "105:         if (isValidContent(nonEditableRegExps, content)) {",
          "106:           node.name = '#text';",
          "107:           node.type = 3;",
          "108:           node.raw = true;",
          "109:           node.value = content;",
          "110:         } else {",
          "111:           node.remove();",
          "112:         }",
          "",
          "---------------"
        ],
        "modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts||modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts": [
          "File: modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts -> modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { beforeEach, context, describe, it } from '@ephox/bedrock-client';",
          "2: import { Arr, Type } from '@ephox/katamari';",
          "3: import { PlatformDetection } from '@ephox/sand';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { Waiter } from '@ephox/agar';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "675:       TinyAssertions.assertContent(editor, '<svg width=\"100\" height=\"100\"><circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\"><script>alert(1)</script></circle></svg>');",
          "676:     });",
          "677:   });",
          "678: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "680:   context('Special elements', () => {",
          "681:     const hook = TinyHooks.bddSetup<Editor>({",
          "682:       base_url: '/project/tinymce/js/tinymce'",
          "683:     }, []);",
          "685:     it('TINY-11019: Should not be possible to run scripts inside noscript elements', async () => {",
          "686:       const editor = hook.editor();",
          "687:       let state = false;",
          "688:       const editorWinGlobal = editor.getWin() as unknown as any;",
          "690:       editorWinGlobal.xss = () => {",
          "691:         state = true;",
          "692:       };",
          "694:       editor.setContent('<noscript>&lt;/noscript&gt;&lt;style onload=xss()&gt;&lt;/style&gt;</noscript>');",
          "696:       await Waiter.pWait(1);",
          "698:       delete editorWinGlobal.xss;",
          "700:       assert.isFalse(state, 'xss function should not have been called');",
          "701:       TinyAssertions.assertContent(editor, '<noscript>&lt;/noscript&gt;&lt;style onload=xss()&gt;&lt;/style&gt;</noscript>');",
          "702:     });",
          "704:     it('TINY-11019: Should not double decode noscript contents', () => {",
          "705:       const editor = hook.editor();",
          "707:       editor.setContent('<noscript>&amp;lt;/noscript&amp;&gt;</noscript>');",
          "708:       TinyAssertions.assertContent(editor, '<noscript>&amp;lt;/noscript&amp;&gt;</noscript>');",
          "709:     });",
          "710:   });",
          "",
          "---------------"
        ],
        "modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts||modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts": [
          "File: modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts -> modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1729:       assert.equal(serializedHtml, '<div><svg> <circle> </circle> </svg> <svg> <circle> </circle> </svg></div>');",
          "1730:     });",
          "1731:   });",
          "1732: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1733:   context('Special elements', () => {",
          "1734:     const schema = Schema({ extended_valid_elements: 'script,noembed,xmp', valid_children: '+body[style]' });",
          "1736:     const testSpecialElement = (testCase: { input: string; expected: string }) => {",
          "1737:       const fragment = DomParser({ forced_root_block: 'p', sanitize: false }, schema).parse(testCase.input);",
          "1738:       const serializedHtml = HtmlSerializer({}, schema).serialize(fragment);",
          "1740:       assert.equal(serializedHtml, testCase.expected);",
          "1741:     };",
          "1743:     it('TINY-11019: Should not entity encode text in script elements', () => testSpecialElement({",
          "1744:       input: '<script>if (a < b) alert(1)</script>',",
          "1745:       expected: '<script>if (a < b) alert(1)</script>'",
          "1746:     }));",
          "1748:     it('TINY-11019: Should not entity encode text in style elements', () => testSpecialElement({",
          "1749:       input: '<style>b > i {}</style>',",
          "1750:       expected: '<style>b > i {}</style>'",
          "1751:     }));",
          "1753:     it('TINY-11019: Should not entity decode text inside textarea elements', () => testSpecialElement({",
          "1754:       input: '<div><textarea>&lt;&gt;&amp;</textarea></div>',",
          "1755:       expected: '<div><textarea>&lt;&gt;&amp;</textarea></div>'",
          "1756:     }));",
          "1758:     it('TINY-11019: Should not entity encode text inside textarea elements', () => testSpecialElement({",
          "1759:       input: '<div><textarea><b>test</b></textarea></div>',",
          "1760:       expected: '<div><textarea>&lt;b&gt;test&lt;/b&gt;</textarea></div>'",
          "1761:     }));",
          "1763:     const excluded = [ 'script', 'style', 'title', 'plaintext', 'textarea' ];",
          "1764:     const specialElements = Arr.filter(Obj.keys(schema.getSpecialElements()), (name) => !Arr.contains(excluded, name));",
          "1765:     Arr.each(specialElements, (elementName) => {",
          "1766:       it(`TINY-11019: Should not entity decode text inside ${elementName} elements`, () => testSpecialElement({",
          "1767:         input: `<div><${elementName}>&lt;&gt;&amp;</${elementName}></div>`,",
          "1768:         expected: `<div><${elementName}>&lt;&gt;&amp;</${elementName}></div>`",
          "1769:       }));",
          "1771:       it(`TINY-11019: Should not entity encode elements inside ${elementName} elements`, () => testSpecialElement({",
          "1772:         input: `<div><${elementName}><em>test</em></${elementName}></div>`,",
          "1773:         expected: `<div><${elementName}><em>test</em></${elementName}></div>`",
          "1774:       }));",
          "1775:     });",
          "1776:   });",
          "",
          "---------------"
        ],
        "modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts||modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts": [
          "File: modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts -> modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { TinyAssertions, TinyHooks } from '@ephox/wrap-mcagar';",
          "3: import { assert } from 'chai';",
          "",
          "[Removed Lines]",
          "1: import { describe, it } from '@ephox/bedrock-client';",
          "",
          "[Added Lines]",
          "1: import { context, describe, it } from '@ephox/bedrock-client';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     editor.setContent('<span contenteditable=\"false\">{test1}</span>');",
          "40:     assert.lengthOf(editor.dom.select('span'), 1);",
          "41:   });",
          "42: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:   context('Noneditable content injection', () => {",
          "44:     const testNoneditableContentInjection = (testCase: { input: string; expected: string }) => {",
          "45:       const editor = hook.editor();",
          "46:       editor.setContent(testCase.input);",
          "47:       TinyAssertions.assertContent(editor, testCase.expected);",
          "48:     };",
          "50:     it('TINY-11022: noneditable elements should not be allowed to include content that does not match the pattern', () => testNoneditableContentInjection({",
          "51:       input: '<p>foo<span class=\"mceNonEditable\" data-mce-content=\"<b>baz</b>\" contenteditable=\"false\">something</span>bar</p>',",
          "52:       expected: '<p>foobar</p>'",
          "53:     }));",
          "55:     it('TINY-11022: noneditable elements should not be allowed to include content that just partially matches the pattern', () => testNoneditableContentInjection({",
          "56:       input: '<p>foo<span class=\"mceNonEditable\" data-mce-content=\"{test1}<b>baz</b>\" contenteditable=\"false\">something</span>bar</p>',",
          "57:       expected: '<p>foobar</p>'",
          "58:     }));",
          "59:   });",
          "",
          "---------------"
        ]
      }
    }
  ]
}